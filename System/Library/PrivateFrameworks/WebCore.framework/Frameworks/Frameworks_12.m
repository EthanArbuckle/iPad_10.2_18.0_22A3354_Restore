char *cricket::MediaContentDescription::AddRtpHeaderExtension(char *this, const webrtc::RtpExtension *a2)
{
  char *v3;
  unint64_t v4;
  __int128 v5;
  int v6;

  v3 = this;
  v4 = *((_QWORD *)this + 9);
  if (v4 >= *((_QWORD *)this + 10))
  {
    this = std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>((char **)this + 8, (uint64_t)a2);
LABEL_8:
    *((_QWORD *)v3 + 9) = this;
    v3[88] = 1;
    return this;
  }
  if (v4)
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*((std::string **)this + 9), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v5 = *(_OWORD *)a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
    }
    v6 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(v4 + 28) = *((_BYTE *)a2 + 28);
    *(_DWORD *)(v4 + 24) = v6;
    this = (char *)(v4 + 32);
    goto LABEL_8;
  }
  __break(1u);
  return this;
}

void std::__introsort<std::_ClassicAlgPolicy,webrtc::ParseContentDescription(std::string_view,cricket::MediaType,int,std::string_view,std::vector<int> const&,unsigned long *,std::string *,BOOL *,int *,cricket::TransportDescription *,std::vector<std::unique_ptr<webrtc::JsepIceCandidate>> *,webrtc::SdpParseError *)::$_0 &,cricket::Codec *,false>(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  int **v6;
  int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  __int128 *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  int *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 *v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  __int128 *v124;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int64_t v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  __int128 *v166;
  std::string *v167;
  __int128 v168;
  std::string *v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t i;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int64_t v208;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  __int128 v212;
  __int128 *v213;
  std::string *v214;
  __int128 v215;
  std::string *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  int64_t v224;
  int64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int64_t v245;
  char *v246;
  uint64_t v247;
  __int128 *v248;
  std::string *v249;
  __int128 v250;
  std::string *v251;
  uint64_t v252;
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int64_t v265;
  BOOL v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  __int128 v270;
  uint64_t v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int64_t v277;
  unint64_t v278;
  char *v279;
  uint64_t v280;
  __int128 *v281;
  std::string *v282;
  __int128 v283;
  std::string *v284;
  uint64_t v285;
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  int64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  BOOL v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  __int128 v307;
  uint64_t v308;
  __int128 v309;
  __int128 v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int64_t v315;
  char *v316;
  uint64_t v317;
  __int128 *v318;
  std::string *v319;
  __int128 v320;
  std::string *v321;
  uint64_t v322;
  uint64_t v323;
  __int128 v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  __int128 v339;
  uint64_t v340;
  __int128 v341;
  __int128 v342;
  _QWORD *v343;
  uint64_t v344;
  int **v345;
  int **v346;
  int64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  std::string *v351;
  __int128 v352;
  std::string *v353;
  char *v354;
  uint64_t v355;
  __int128 v356;
  uint64_t v357;
  char *v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  int64_t v366;
  unint64_t v367;
  char *v368;
  uint64_t v369;
  __int128 *v370;
  std::string *v371;
  __int128 v372;
  std::string *v373;
  uint64_t v374;
  uint64_t v375;
  __int128 v376;
  int *v377;
  int *v378;
  unint64_t v379;
  unint64_t v380;
  __int128 *v381;
  __int128 *v382;
  _QWORD *v383;
  unint64_t v384;
  void (**v386)(cricket::Codec *__hidden);
  unint64_t v388;
  __int128 *v389;
  unint64_t v390;
  int *v391;
  int64_t v392;
  uint64_t v393;
  int *v396;
  int *v397;
  uint64_t v398;
  __int128 v399;
  uint64_t v400;
  __int128 v401;
  __int128 v402;
  uint64_t v403;
  char v404;
  uint64_t v405;
  __int128 v406;
  __int128 v407;
  uint64_t v408;
  __int128 v409;
  uint64_t v410;
  char v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  char *v416;
  char *v417;
  int *v418;
  uint64_t v419;
  __int128 v420;
  uint64_t v421;
  __int128 v422;
  __int128 v423;
  uint64_t v424;
  char v425;
  uint64_t v426;
  __int128 v427;
  __int128 v428;
  uint64_t v429;
  __int128 v430;
  uint64_t v431;
  char v432;
  uint64_t *v433;
  uint64_t v434;
  uint64_t v435;
  char *v436;
  char *v437;
  char *v438;
  uint64_t v439;

  v6 = &v418;
  v439 = *MEMORY[0x24BDAC8D0];
  v7 = (int *)&v398 + 1;
LABEL_2:
  v8 = a1;
  v386 = (void (**)(cricket::Codec *__hidden))(a2 - 216);
  v377 = (int *)(a2 - 204);
  while (2)
  {
    v9 = a2 - v8;
    v10 = 0x84BDA12F684BDA13 * ((uint64_t)(a2 - v8) >> 3);
    a1 = v8;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v180 = *a3;
        v418 = (int *)(a2 - 204);
        v181 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v180, v377, (uint64_t)&std::piecewise_construct, &v418)+ 5);
        v182 = *a3;
        v418 = (int *)(v8 + 12);
        if (v181 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v182, (int *)(v8 + 12), (uint64_t)&std::piecewise_construct, &v418)+ 5))return;
        v7 = (int *)v8;
        v183 = *(_QWORD *)(v8 + 8);
        v418 = (int *)&off_24C0B1418;
        v419 = v183;
        v184 = *(_QWORD *)(v8 + 32);
        v420 = *(_OWORD *)(v8 + 16);
        v421 = v184;
        *(_QWORD *)(v8 + 24) = 0;
        *(_QWORD *)(v8 + 32) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        v422 = *(_OWORD *)(v8 + 40);
        LOBYTE(v423) = 0;
        v425 = 0;
        if (*(_BYTE *)(v8 + 80))
        {
          v185 = *(_OWORD *)(v8 + 56);
          v424 = *(_QWORD *)(v8 + 72);
          v423 = v185;
          *(_QWORD *)(v8 + 64) = 0;
          *(_QWORD *)(v8 + 72) = 0;
          *(_QWORD *)(v8 + 56) = 0;
          v425 = 1;
        }
        v426 = 0;
        v426 = *(_QWORD *)(v8 + 88);
        v186 = *(_QWORD *)(v8 + 128);
        v187 = *(_OWORD *)(v8 + 112);
        v427 = *(_OWORD *)(v8 + 96);
        v428 = v187;
        v429 = v186;
        *(_QWORD *)(v8 + 88) = 0;
        LOBYTE(v430) = 0;
        v432 = 0;
        if (*(_BYTE *)(v8 + 160))
        {
          v188 = *(_OWORD *)(v8 + 136);
          v431 = *(_QWORD *)(v8 + 152);
          v430 = v188;
          *(_QWORD *)(v8 + 144) = 0;
          *(_QWORD *)(v8 + 152) = 0;
          *(_QWORD *)(v8 + 136) = 0;
          v432 = 1;
        }
        v189 = (_QWORD *)(v8 + 176);
        v190 = *(_QWORD *)(v8 + 176);
        v62 = (int *)&v434;
        v433 = *(uint64_t **)(v8 + 168);
        v434 = v190;
        v435 = *(_QWORD *)(v8 + 184);
        if (!v435)
          goto LABEL_301;
        *(_QWORD *)(v190 + 16) = &v434;
        *(_QWORD *)(v8 + 168) = v189;
        *v189 = 0;
        *(_QWORD *)(v8 + 184) = 0;
        goto LABEL_302;
      case 3:
        return;
      case 4:
        return;
      case 5:
        return;
      default:
        v11 = v8;
        if (v9 <= 5183)
        {
          if ((a5 & 1) != 0)
          {
            if (v8 != a2)
            {
              v191 = v8 + 216;
              if (v8 + 216 != a2)
              {
                for (i = 0; ; i += 216)
                {
                  v194 = v8;
                  v8 = v191;
                  v195 = *a3;
                  v418 = (int *)(v194 + 228);
                  v196 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v195, (int *)(v194 + 228), (uint64_t)&std::piecewise_construct, &v418)+ 5);
                  v197 = *a3;
                  v418 = (int *)(v194 + 12);
                  if (v196 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v197, (int *)(v194 + 12), (uint64_t)&std::piecewise_construct, &v418)+ 5))
                  {
                    v198 = *(_QWORD *)(v8 + 8);
                    v418 = (int *)&off_24C0B1418;
                    v419 = v198;
                    v199 = *(_QWORD *)(v8 + 32);
                    v420 = *(_OWORD *)(v8 + 16);
                    v421 = v199;
                    *(_QWORD *)(v8 + 24) = 0;
                    *(_QWORD *)(v8 + 32) = 0;
                    *(_QWORD *)(v8 + 16) = 0;
                    v422 = *(_OWORD *)(v8 + 40);
                    LOBYTE(v423) = 0;
                    v425 = 0;
                    if (*(_BYTE *)(v8 + 80))
                    {
                      v200 = *(_OWORD *)(v8 + 56);
                      v424 = *(_QWORD *)(v8 + 72);
                      v423 = v200;
                      *(_QWORD *)(v8 + 64) = 0;
                      *(_QWORD *)(v8 + 72) = 0;
                      *(_QWORD *)(v8 + 56) = 0;
                      v425 = 1;
                    }
                    v426 = 0;
                    v426 = *(_QWORD *)(v8 + 88);
                    v201 = *(_QWORD *)(v8 + 128);
                    v202 = *(_OWORD *)(v8 + 112);
                    v427 = *(_OWORD *)(v8 + 96);
                    v428 = v202;
                    v429 = v201;
                    *(_QWORD *)(v8 + 88) = 0;
                    LOBYTE(v430) = 0;
                    v432 = 0;
                    if (*(_BYTE *)(v8 + 160))
                    {
                      v203 = *(_OWORD *)(v8 + 136);
                      v431 = *(_QWORD *)(v8 + 152);
                      v430 = v203;
                      *(_QWORD *)(v8 + 144) = 0;
                      *(_QWORD *)(v8 + 152) = 0;
                      *(_QWORD *)(v8 + 136) = 0;
                      v432 = 1;
                    }
                    v204 = (_QWORD *)(v8 + 176);
                    v205 = *(_QWORD *)(v8 + 176);
                    v433 = *(uint64_t **)(v8 + 168);
                    v434 = v205;
                    v435 = *(_QWORD *)(v8 + 184);
                    if (v435)
                    {
                      *(_QWORD *)(v205 + 16) = &v434;
                      *(_QWORD *)(v8 + 168) = v204;
                      *v204 = 0;
                      *(_QWORD *)(v8 + 184) = 0;
                      v436 = 0;
                      v437 = 0;
                      v438 = 0;
                      v206 = *(_QWORD *)(v8 + 192);
                      v207 = *(_QWORD *)(v8 + 200);
                      v208 = v207 - v206;
                      if (v207 == v206)
                        goto LABEL_186;
LABEL_177:
                      v209 = 0xAAAAAAAAAAAAAAABLL * (v208 >> 4);
                      if (v209 > 0x555555555555555)
                        goto LABEL_314;
                      v210 = (char *)operator new(v208);
                      v211 = 0;
                      v436 = v210;
                      v437 = v210;
                      v438 = &v210[48 * v209];
                      while (1)
                      {
                        v213 = (__int128 *)(v206 + v211);
                        v214 = (std::string *)&v210[v211];
                        if (*(char *)(v206 + v211 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(v214, *(const std::string::value_type **)v213, *((_QWORD *)v213 + 1));
                          v216 = (std::string *)&v210[v211 + 24];
                          v217 = v206 + v211;
                          v218 = v206 + v211 + 24;
                          if ((*(char *)(v206 + v211 + 47) & 0x80000000) == 0)
                          {
LABEL_179:
                            v212 = *(_OWORD *)v218;
                            v216->__r_.__value_.__r.__words[2] = *(_QWORD *)(v218 + 16);
                            *(_OWORD *)&v216->__r_.__value_.__l.__data_ = v212;
                            v211 += 48;
                            if (v206 + v211 == v207)
                              goto LABEL_185;
                            continue;
                          }
                        }
                        else
                        {
                          v215 = *v213;
                          v214->__r_.__value_.__r.__words[2] = *((_QWORD *)v213 + 2);
                          *(_OWORD *)&v214->__r_.__value_.__l.__data_ = v215;
                          v216 = (std::string *)&v210[v211 + 24];
                          v217 = v206 + v211;
                          v218 = v206 + v211 + 24;
                          if ((*(char *)(v206 + v211 + 47) & 0x80000000) == 0)
                            goto LABEL_179;
                        }
                        std::string::__init_copy_ctor_external(v216, *(const std::string::value_type **)v218, *(_QWORD *)(v217 + 32));
                        v211 += 48;
                        if (v206 + v211 == v207)
                        {
LABEL_185:
                          v437 = &v210[v211];
                          goto LABEL_186;
                        }
                      }
                    }
                    v433 = &v434;
                    v436 = 0;
                    v437 = 0;
                    v438 = 0;
                    v206 = *(_QWORD *)(v8 + 192);
                    v207 = *(_QWORD *)(v8 + 200);
                    v208 = v207 - v206;
                    if (v207 != v206)
                      goto LABEL_177;
LABEL_186:
                    v219 = i;
                    do
                    {
                      v220 = a1 + v219;
                      cricket::Codec::operator=(a1 + v219 + 216, a1 + v219);
                      if (!v219)
                      {
                        v193 = a1;
                        goto LABEL_166;
                      }
                      v221 = *a3;
                      v397 = (int *)&v419 + 1;
                      v222 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v221, (int *)&v419 + 1, (uint64_t)&std::piecewise_construct, &v397)+ 5);
                      v223 = *a3;
                      v397 = (int *)(v220 - 204);
                      v219 -= 216;
                    }
                    while (v222 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v223, (int *)(v220 - 204), (uint64_t)&std::piecewise_construct, &v397)+ 5));
                    v193 = a1 + v219 + 216;
LABEL_166:
                    cricket::Codec::operator=(v193, (uint64_t)&v418);
                    cricket::Codec::~Codec((cricket::Codec *)&v418);
                  }
                  v191 = v8 + 216;
                  if (v8 + 216 == a2)
                    return;
                }
              }
            }
          }
          else if (v8 != a2)
          {
            v329 = v8 + 216;
            if (v8 + 216 != a2)
            {
              v330 = 0;
              v390 = v8 + 228;
              v393 = -2;
              v386 = &off_24C0B1418;
              v391 = (int *)v8;
              v331 = 1;
              while (1)
              {
                v332 = 216 * v330;
                v330 = v331;
                v333 = *a3;
                v418 = (int *)(v390 + v332);
                v334 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v333, (int *)(v390 + v332), (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v335 = *a3;
                v336 = a1;
                v418 = (int *)(a1 + v332 + 12);
                if (v334 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v335, v418, (uint64_t)&std::piecewise_construct, &v418)+ 5))
                {
                  v337 = *(_QWORD *)(v329 + 8);
                  v418 = (int *)&off_24C0B1418;
                  v419 = v337;
                  v338 = *(_QWORD *)(v329 + 32);
                  v420 = *(_OWORD *)(v329 + 16);
                  v421 = v338;
                  *(_QWORD *)(v329 + 24) = 0;
                  *(_QWORD *)(v329 + 32) = 0;
                  *(_QWORD *)(v329 + 16) = 0;
                  v422 = *(_OWORD *)(v329 + 40);
                  LOBYTE(v423) = 0;
                  v425 = 0;
                  if (*(_BYTE *)(v329 + 80))
                  {
                    v339 = *(_OWORD *)(v329 + 56);
                    v424 = *(_QWORD *)(v329 + 72);
                    v423 = v339;
                    *(_QWORD *)(v329 + 64) = 0;
                    *(_QWORD *)(v329 + 72) = 0;
                    *(_QWORD *)(v329 + 56) = 0;
                    v425 = 1;
                  }
                  v426 = 0;
                  v426 = *(_QWORD *)(v329 + 88);
                  v340 = *(_QWORD *)(v329 + 128);
                  v341 = *(_OWORD *)(v329 + 112);
                  v427 = *(_OWORD *)(v329 + 96);
                  v428 = v341;
                  v429 = v340;
                  *(_QWORD *)(v329 + 88) = 0;
                  LOBYTE(v430) = 0;
                  v432 = 0;
                  if (*(_BYTE *)(v329 + 160))
                  {
                    v342 = *(_OWORD *)(v329 + 136);
                    v431 = *(_QWORD *)(v329 + 152);
                    v430 = v342;
                    *(_QWORD *)(v329 + 144) = 0;
                    *(_QWORD *)(v329 + 152) = 0;
                    *(_QWORD *)(v329 + 136) = 0;
                    v432 = 1;
                  }
                  v343 = (_QWORD *)(v329 + 176);
                  v344 = *(_QWORD *)(v329 + 176);
                  v433 = *(uint64_t **)(v329 + 168);
                  v434 = v344;
                  v435 = *(_QWORD *)(v329 + 184);
                  if (v435)
                  {
                    *(_QWORD *)(v344 + 16) = &v434;
                    *(_QWORD *)(v329 + 168) = v343;
                    *v343 = 0;
                    *(_QWORD *)(v329 + 184) = 0;
                    v436 = 0;
                    v437 = 0;
                    v438 = 0;
                    v345 = *(int ***)(v329 + 192);
                    v346 = *(int ***)(v329 + 200);
                    v347 = (char *)v346 - (char *)v345;
                    if (v346 == v345)
                      goto LABEL_295;
LABEL_286:
                    v348 = 0xAAAAAAAAAAAAAAABLL * (v347 >> 4);
                    if (v348 > 0x555555555555555)
                      goto LABEL_314;
                    v349 = (char *)operator new(v347);
                    v6 = 0;
                    v436 = v349;
                    v437 = v349;
                    v438 = &v349[48 * v348];
                    while (1)
                    {
                      v350 = (char *)v6 + (_QWORD)v345;
                      v351 = (std::string *)((char *)v6 + (_QWORD)v349);
                      if (*((char *)v6 + (_QWORD)v345 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(v351, *(const std::string::value_type **)v350, *((_QWORD *)v350 + 1));
                        v353 = (std::string *)((char *)v6 + (_QWORD)v349 + 24);
                        v354 = (char *)v6 + (_QWORD)v345;
                        v355 = (uint64_t)v6 + (_QWORD)v345 + 24;
                        if (*((char *)v6 + (_QWORD)v345 + 47) < 0)
                        {
LABEL_288:
                          std::string::__init_copy_ctor_external(v353, *(const std::string::value_type **)v355, *((_QWORD *)v354 + 4));
                          v6 += 6;
                          if ((int **)((char *)v6 + (_QWORD)v345) == v346)
                            goto LABEL_294;
                          continue;
                        }
                      }
                      else
                      {
                        v352 = *(_OWORD *)v350;
                        v351->__r_.__value_.__r.__words[2] = *((_QWORD *)v350 + 2);
                        *(_OWORD *)&v351->__r_.__value_.__l.__data_ = v352;
                        v353 = (std::string *)((char *)v6 + (_QWORD)v349 + 24);
                        v354 = (char *)v6 + (_QWORD)v345;
                        v355 = (uint64_t)v6 + (_QWORD)v345 + 24;
                        if (*((char *)v6 + (_QWORD)v345 + 47) < 0)
                          goto LABEL_288;
                      }
                      v356 = *(_OWORD *)v355;
                      v353->__r_.__value_.__r.__words[2] = *(_QWORD *)(v355 + 16);
                      *(_OWORD *)&v353->__r_.__value_.__l.__data_ = v356;
                      v6 += 6;
                      if ((int **)((char *)v6 + (_QWORD)v345) == v346)
                      {
LABEL_294:
                        v437 = (char *)v6 + (_QWORD)v349;
                        goto LABEL_295;
                      }
                    }
                  }
                  v433 = &v434;
                  v436 = 0;
                  v437 = 0;
                  v438 = 0;
                  v345 = *(int ***)(v329 + 192);
                  v346 = *(int ***)(v329 + 200);
                  v347 = (char *)v346 - (char *)v345;
                  if (v346 != v345)
                    goto LABEL_286;
LABEL_295:
                  v7 = v391;
                  v357 = v393;
                  do
                  {
                    cricket::Codec::operator=((uint64_t)(v7 + 54), (uint64_t)v7);
                    if (__CFADD__(v357++, 1))
                      goto LABEL_300;
                    v359 = (char *)(v7 - 54);
                    v360 = *a3;
                    v397 = (int *)&v419 + 1;
                    v361 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v360, (int *)&v419 + 1, (uint64_t)&std::piecewise_construct, &v397)+ 5);
                    v362 = *a3;
                    v397 = v7 - 51;
                    v363 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v362, v7 - 51, (uint64_t)&std::piecewise_construct, &v397)+ 5);
                    v7 -= 54;
                    v266 = v361 <= v363;
                    v6 = &v418;
                  }
                  while (!v266);
                  cricket::Codec::operator=((uint64_t)(v359 + 216), (uint64_t)&v418);
                  cricket::Codec::~Codec((cricket::Codec *)&v418);
                  v336 = a1;
                }
                v331 = v330 + 1;
                v329 = v336 + 216 * (v330 + 1);
                v391 += 54;
                --v393;
                if (v329 == a2)
                  return;
              }
            }
          }
          return;
        }
        if (!a4)
        {
          if (v8 == a2)
            return;
          v384 = a2 - v8;
          v392 = (unint64_t)(v10 - 2) >> 1;
          v224 = v392;
          do
          {
            v225 = v224;
            if (v392 >= v224)
            {
              v226 = (2 * v224) | 1;
              v227 = a1 + 216 * v226;
              if (2 * v224 + 2 < v10)
              {
                v228 = *a3;
                v418 = (int *)(a1 + 216 * v226 + 12);
                v229 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v228, v418, (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v230 = *a3;
                v418 = (int *)(v227 + 228);
                v231 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v230, (int *)(v227 + 228), (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v227 += 216 * (v229 > v231);
                if (v229 > v231)
                  v226 = 2 * v225 + 2;
              }
              v232 = *a3;
              v418 = (int *)(v227 + 12);
              v233 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v232, (int *)(v227 + 12), (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v234 = *a3;
              v418 = (int *)(a1 + 216 * v225 + 12);
              if (v233 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v234, v418, (uint64_t)&std::piecewise_construct, &v418)+ 5))
              {
                v235 = a1 + 216 * v225;
                v418 = (int *)&off_24C0B1418;
                v419 = *(_QWORD *)(v235 + 8);
                v236 = *(_OWORD *)(v235 + 16);
                v421 = *(_QWORD *)(v235 + 32);
                v420 = v236;
                *(_QWORD *)(v235 + 24) = 0;
                *(_QWORD *)(v235 + 32) = 0;
                *(_QWORD *)(v235 + 16) = 0;
                v422 = *(_OWORD *)(v235 + 40);
                LOBYTE(v423) = 0;
                v425 = 0;
                if (*(_BYTE *)(v235 + 80))
                {
                  v237 = *(_OWORD *)(v235 + 56);
                  v424 = *(_QWORD *)(v235 + 72);
                  v423 = v237;
                  *(_QWORD *)(v235 + 64) = 0;
                  *(_QWORD *)(v235 + 72) = 0;
                  *(_QWORD *)(v235 + 56) = 0;
                  v425 = 1;
                }
                v426 = 0;
                v426 = *(_QWORD *)(v235 + 88);
                v238 = *(_OWORD *)(v235 + 96);
                v239 = *(_OWORD *)(v235 + 112);
                v429 = *(_QWORD *)(v235 + 128);
                v427 = v238;
                v428 = v239;
                *(_QWORD *)(v235 + 88) = 0;
                LOBYTE(v430) = 0;
                v432 = 0;
                if (*(_BYTE *)(v235 + 160))
                {
                  v240 = *(_OWORD *)(v235 + 136);
                  v431 = *(_QWORD *)(v235 + 152);
                  v430 = v240;
                  *(_QWORD *)(v235 + 144) = 0;
                  *(_QWORD *)(v235 + 152) = 0;
                  *(_QWORD *)(v235 + 136) = 0;
                  v432 = 1;
                }
                v433 = *(uint64_t **)(v235 + 168);
                v241 = (_QWORD *)(v235 + 176);
                v242 = *(_QWORD *)(v235 + 176);
                v434 = v242;
                v435 = *(_QWORD *)(v235 + 184);
                if (v435)
                {
                  *(_QWORD *)(v242 + 16) = &v434;
                  *(_QWORD *)(v235 + 168) = v241;
                  *v241 = 0;
                  *(_QWORD *)(v235 + 184) = 0;
                  v436 = 0;
                  v437 = 0;
                  v438 = 0;
                  v243 = *(_QWORD *)(v235 + 192);
                  v244 = *(_QWORD *)(v235 + 200);
                  v245 = v244 - v243;
                  if (v244 != v243)
                    goto LABEL_207;
                }
                else
                {
                  v433 = &v434;
                  v436 = 0;
                  v437 = 0;
                  v438 = 0;
                  v243 = *(_QWORD *)(v235 + 192);
                  v244 = *(_QWORD *)(v235 + 200);
                  v245 = v244 - v243;
                  if (v244 != v243)
                  {
LABEL_207:
                    v388 = 0xAAAAAAAAAAAAAAABLL * (v245 >> 4);
                    if (v388 > 0x555555555555555)
                      goto LABEL_314;
                    v246 = (char *)operator new(v245);
                    v247 = 0;
                    v436 = v246;
                    v437 = v246;
                    v438 = &v246[48 * v388];
                    while (1)
                    {
                      v248 = (__int128 *)(v243 + v247);
                      v249 = (std::string *)&v246[v247];
                      if (*(char *)(v243 + v247 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(v249, *(const std::string::value_type **)v248, *((_QWORD *)v248 + 1));
                        v251 = (std::string *)&v246[v247 + 24];
                        v252 = v243 + v247;
                        v253 = v243 + v247 + 24;
                        if (*(char *)(v243 + v247 + 47) < 0)
                        {
LABEL_209:
                          std::string::__init_copy_ctor_external(v251, *(const std::string::value_type **)v253, *(_QWORD *)(v252 + 32));
                          v247 += 48;
                          if (v243 + v247 == v244)
                            goto LABEL_215;
                          continue;
                        }
                      }
                      else
                      {
                        v250 = *v248;
                        v249->__r_.__value_.__r.__words[2] = *((_QWORD *)v248 + 2);
                        *(_OWORD *)&v249->__r_.__value_.__l.__data_ = v250;
                        v251 = (std::string *)&v246[v247 + 24];
                        v252 = v243 + v247;
                        v253 = v243 + v247 + 24;
                        if (*(char *)(v243 + v247 + 47) < 0)
                          goto LABEL_209;
                      }
                      v254 = *(_OWORD *)v253;
                      v251->__r_.__value_.__r.__words[2] = *(_QWORD *)(v253 + 16);
                      *(_OWORD *)&v251->__r_.__value_.__l.__data_ = v254;
                      v247 += 48;
                      if (v243 + v247 == v244)
                      {
LABEL_215:
                        v437 = &v246[v247];
                        goto LABEL_221;
                      }
                    }
                  }
                }
                do
                {
LABEL_221:
                  v262 = v227;
                  cricket::Codec::operator=(v235, v227);
                  if (v392 < v226)
                    break;
                  v263 = (2 * v226) | 1;
                  v227 = a1 + 216 * v263;
                  v264 = 2 * v226 + 2;
                  if (v264 < v10)
                  {
                    v255 = *a3;
                    v397 = (int *)(a1 + 216 * v263 + 12);
                    v256 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v255, v397, (uint64_t)&std::piecewise_construct, &v397)+ 5);
                    v257 = *a3;
                    v397 = (int *)(v227 + 228);
                    v258 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v257, (int *)(v227 + 228), (uint64_t)&std::piecewise_construct, &v397)+ 5);
                    v227 += 216 * (v256 > v258);
                    v226 = v256 <= v258 ? v263 : v264;
                  }
                  else
                  {
                    v226 = (2 * v226) | 1;
                  }
                  v259 = *a3;
                  v397 = (int *)(v227 + 12);
                  v260 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v259, (int *)(v227 + 12), (uint64_t)&std::piecewise_construct, &v397)+ 5);
                  v261 = *a3;
                  v397 = (int *)&v419 + 1;
                  v235 = v262;
                }
                while (v260 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v261, (int *)&v419 + 1, (uint64_t)&std::piecewise_construct, &v397)+ 5));
                cricket::Codec::operator=(v262, (uint64_t)&v418);
                cricket::Codec::~Codec((cricket::Codec *)&v418);
              }
            }
            v224 = v225 - 1;
          }
          while (v225);
          v265 = v384 / 0xD8;
          v389 = (__int128 *)(a1 + 16);
          v382 = (__int128 *)(a1 + 56);
          v383 = (_QWORD *)(a1 + 176);
          v381 = (__int128 *)(a1 + 136);
          while (1)
          {
            v267 = a1;
            v268 = *(_QWORD *)(a1 + 8);
            v397 = (int *)&off_24C0B1418;
            v398 = v268;
            v269 = *(_QWORD *)(a1 + 32);
            v399 = *v389;
            v400 = v269;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)v389 = 0;
            v401 = *(_OWORD *)(a1 + 40);
            LOBYTE(v402) = 0;
            v404 = 0;
            if (*(_BYTE *)(a1 + 80))
            {
              v270 = *v382;
              v403 = *(_QWORD *)(a1 + 72);
              v402 = v270;
              *(_QWORD *)(a1 + 64) = 0;
              *(_QWORD *)(a1 + 72) = 0;
              *(_QWORD *)v382 = 0;
              v404 = 1;
            }
            v405 = 0;
            v405 = *(_QWORD *)(a1 + 88);
            v271 = *(_QWORD *)(a1 + 128);
            v272 = *(_OWORD *)(a1 + 112);
            v406 = *(_OWORD *)(a1 + 96);
            v407 = v272;
            v408 = v271;
            *(_QWORD *)(a1 + 88) = 0;
            LOBYTE(v409) = 0;
            v411 = 0;
            if (*(_BYTE *)(a1 + 160))
            {
              v273 = *v381;
              v410 = *(_QWORD *)(a1 + 152);
              v409 = v273;
              *(_QWORD *)(a1 + 144) = 0;
              *(_QWORD *)(a1 + 152) = 0;
              *(_QWORD *)v381 = 0;
              v411 = 1;
            }
            v274 = *(_QWORD *)(a1 + 176);
            v412 = *(uint64_t **)(a1 + 168);
            v413 = v274;
            v414 = *(_QWORD *)(a1 + 184);
            if (v414)
              break;
            v412 = &v413;
            v415 = 0;
            v416 = 0;
            v417 = 0;
            v276 = *(_QWORD *)(a1 + 192);
            v275 = *(_QWORD *)(a1 + 200);
            v277 = v275 - v276;
            if (v275 != v276)
              goto LABEL_235;
LABEL_244:
            v288 = 0;
            v289 = (unint64_t)(v265 - 2) >> 1;
            v290 = a1;
            do
            {
              while (1)
              {
                v296 = v288 + 1;
                v295 = v290 + 216 * (v288 + 1);
                v297 = (2 * v288) | 1;
                v288 = 2 * v288 + 2;
                if (v288 < v265)
                  break;
                v288 = v297;
                cricket::Codec::operator=(v290, v295);
                v290 = v295;
                if (v297 > v289)
                  goto LABEL_250;
              }
              v291 = *a3;
              v418 = (int *)(v290 + 216 * v296 + 12);
              v292 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v291, v418, (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v293 = *a3;
              v418 = (int *)(v295 + 228);
              v267 = a1;
              v294 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v293, (int *)(v295 + 228), (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v295 += 216 * (v292 > v294);
              if (v292 <= v294)
                v288 = v297;
              cricket::Codec::operator=(v290, v295);
              v290 = v295;
            }
            while (v288 <= v289);
LABEL_250:
            v298 = a2 - 216;
            v299 = v295 == a2 - 216;
            a2 -= 216;
            if (v299)
            {
              cricket::Codec::operator=(v295, (uint64_t)&v397);
            }
            else
            {
              cricket::Codec::operator=(v295, v298);
              cricket::Codec::operator=(v298, (uint64_t)&v397);
              v300 = v295 - v267 + 216;
              if (v300 >= 217)
              {
                v301 = (v300 / 0xD8uLL - 2) >> 1;
                v302 = *a3;
                v418 = (int *)(v267 + 216 * v301 + 12);
                v303 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v302, v418, (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v304 = *a3;
                v418 = (int *)(v295 + 12);
                if (v303 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v304, (int *)(v295 + 12), (uint64_t)&std::piecewise_construct, &v418)+ 5))
                {
                  v305 = *(_QWORD *)(v295 + 8);
                  v418 = (int *)&off_24C0B1418;
                  v419 = v305;
                  v306 = *(_QWORD *)(v295 + 32);
                  v420 = *(_OWORD *)(v295 + 16);
                  v421 = v306;
                  *(_QWORD *)(v295 + 24) = 0;
                  *(_QWORD *)(v295 + 32) = 0;
                  *(_QWORD *)(v295 + 16) = 0;
                  v422 = *(_OWORD *)(v295 + 40);
                  LOBYTE(v423) = 0;
                  v425 = 0;
                  if (*(_BYTE *)(v295 + 80))
                  {
                    v307 = *(_OWORD *)(v295 + 56);
                    v424 = *(_QWORD *)(v295 + 72);
                    v423 = v307;
                    *(_QWORD *)(v295 + 64) = 0;
                    *(_QWORD *)(v295 + 72) = 0;
                    *(_QWORD *)(v295 + 56) = 0;
                    v425 = 1;
                  }
                  v426 = 0;
                  v426 = *(_QWORD *)(v295 + 88);
                  v308 = *(_QWORD *)(v295 + 128);
                  v309 = *(_OWORD *)(v295 + 112);
                  v427 = *(_OWORD *)(v295 + 96);
                  v428 = v309;
                  v429 = v308;
                  *(_QWORD *)(v295 + 88) = 0;
                  LOBYTE(v430) = 0;
                  v432 = 0;
                  if (*(_BYTE *)(v295 + 160))
                  {
                    v310 = *(_OWORD *)(v295 + 136);
                    v431 = *(_QWORD *)(v295 + 152);
                    v430 = v310;
                    *(_QWORD *)(v295 + 144) = 0;
                    *(_QWORD *)(v295 + 152) = 0;
                    *(_QWORD *)(v295 + 136) = 0;
                    v432 = 1;
                  }
                  v311 = (_QWORD *)(v295 + 176);
                  v312 = *(_QWORD *)(v295 + 176);
                  v433 = *(uint64_t **)(v295 + 168);
                  v434 = v312;
                  v435 = *(_QWORD *)(v295 + 184);
                  if (v435)
                  {
                    *(_QWORD *)(v312 + 16) = &v434;
                    *(_QWORD *)(v295 + 168) = v311;
                    *v311 = 0;
                    *(_QWORD *)(v295 + 184) = 0;
                    v436 = 0;
                    v437 = 0;
                    v438 = 0;
                    v313 = *(_QWORD *)(v295 + 192);
                    v314 = *(_QWORD *)(v295 + 200);
                    v315 = v314 - v313;
                    if (v314 == v313)
                      goto LABEL_270;
LABEL_261:
                    v380 = 0xAAAAAAAAAAAAAAABLL * (v315 >> 4);
                    if (v380 > 0x555555555555555)
                      goto LABEL_314;
                    v316 = (char *)operator new(v315);
                    v317 = 0;
                    v436 = v316;
                    v437 = v316;
                    v438 = &v316[48 * v380];
                    while (1)
                    {
                      v318 = (__int128 *)(v313 + v317);
                      v319 = (std::string *)&v316[v317];
                      if (*(char *)(v313 + v317 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(v319, *(const std::string::value_type **)v318, *((_QWORD *)v318 + 1));
                        v321 = (std::string *)&v316[v317 + 24];
                        v322 = v313 + v317;
                        v323 = v313 + v317 + 24;
                        if (*(char *)(v313 + v317 + 47) < 0)
                        {
LABEL_263:
                          std::string::__init_copy_ctor_external(v321, *(const std::string::value_type **)v323, *(_QWORD *)(v322 + 32));
                          v317 += 48;
                          if (v313 + v317 == v314)
                            goto LABEL_269;
                          continue;
                        }
                      }
                      else
                      {
                        v320 = *v318;
                        v319->__r_.__value_.__r.__words[2] = *((_QWORD *)v318 + 2);
                        *(_OWORD *)&v319->__r_.__value_.__l.__data_ = v320;
                        v321 = (std::string *)&v316[v317 + 24];
                        v322 = v313 + v317;
                        v323 = v313 + v317 + 24;
                        if (*(char *)(v313 + v317 + 47) < 0)
                          goto LABEL_263;
                      }
                      v324 = *(_OWORD *)v323;
                      v321->__r_.__value_.__r.__words[2] = *(_QWORD *)(v323 + 16);
                      *(_OWORD *)&v321->__r_.__value_.__l.__data_ = v324;
                      v317 += 48;
                      if (v313 + v317 == v314)
                      {
LABEL_269:
                        v437 = &v316[v317];
                        goto LABEL_270;
                      }
                    }
                  }
                  v433 = &v434;
                  v436 = 0;
                  v437 = 0;
                  v438 = 0;
                  v313 = *(_QWORD *)(v295 + 192);
                  v314 = *(_QWORD *)(v295 + 200);
                  v315 = v314 - v313;
                  if (v314 != v313)
                    goto LABEL_261;
                  do
                  {
LABEL_270:
                    v325 = v295;
                    v295 = v267 + 216 * v301;
                    cricket::Codec::operator=(v325, v295);
                    if (!v301)
                      break;
                    v301 = (v301 - 1) >> 1;
                    v326 = *a3;
                    v396 = (int *)(v267 + 216 * v301 + 12);
                    v327 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v326, v396, (uint64_t)&std::piecewise_construct, &v396)+ 5);
                    v328 = *a3;
                    v396 = (int *)&v419 + 1;
                  }
                  while (v327 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v328, (int *)&v419 + 1, (uint64_t)&std::piecewise_construct, &v396)+ 5));
                  cricket::Codec::operator=(v295, (uint64_t)&v418);
                  cricket::Codec::~Codec((cricket::Codec *)&v418);
                }
              }
            }
            cricket::Codec::~Codec((cricket::Codec *)&v397);
            v266 = v265-- <= 2;
            if (v266)
              return;
          }
          *(_QWORD *)(v274 + 16) = &v413;
          *(_QWORD *)(a1 + 168) = v383;
          *v383 = 0;
          *(_QWORD *)(a1 + 184) = 0;
          v415 = 0;
          v416 = 0;
          v417 = 0;
          v276 = *(_QWORD *)(a1 + 192);
          v275 = *(_QWORD *)(a1 + 200);
          v277 = v275 - v276;
          if (v275 == v276)
            goto LABEL_244;
LABEL_235:
          v278 = 0xAAAAAAAAAAAAAAABLL * (v277 >> 4);
          if (v278 > 0x555555555555555)
            goto LABEL_314;
          v279 = (char *)operator new(v277);
          v280 = 0;
          v415 = v279;
          v416 = v279;
          v417 = &v279[48 * v278];
          while (1)
          {
            v281 = (__int128 *)(v276 + v280);
            v282 = (std::string *)&v279[v280];
            if (*(char *)(v276 + v280 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v282, *(const std::string::value_type **)v281, *((_QWORD *)v281 + 1));
              v284 = (std::string *)&v279[v280 + 24];
              v285 = v276 + v280;
              v286 = v276 + v280 + 24;
              if (*(char *)(v276 + v280 + 47) < 0)
              {
LABEL_237:
                std::string::__init_copy_ctor_external(v284, *(const std::string::value_type **)v286, *(_QWORD *)(v285 + 32));
                v280 += 48;
                if (v276 + v280 == v275)
                  goto LABEL_243;
                continue;
              }
            }
            else
            {
              v283 = *v281;
              v282->__r_.__value_.__r.__words[2] = *((_QWORD *)v281 + 2);
              *(_OWORD *)&v282->__r_.__value_.__l.__data_ = v283;
              v284 = (std::string *)&v279[v280 + 24];
              v285 = v276 + v280;
              v286 = v276 + v280 + 24;
              if (*(char *)(v276 + v280 + 47) < 0)
                goto LABEL_237;
            }
            v287 = *(_OWORD *)v286;
            v284->__r_.__value_.__r.__words[2] = *(_QWORD *)(v286 + 16);
            *(_OWORD *)&v284->__r_.__value_.__l.__data_ = v287;
            v280 += 48;
            if (v276 + v280 == v275)
            {
LABEL_243:
              v416 = &v279[v280];
              goto LABEL_244;
            }
          }
        }
        v12 = (unint64_t)v10 >> 1;
        v13 = v8 + 216 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x6C01)
        {
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_27;
LABEL_28:
          v40 = *(_QWORD *)(v11 + 8);
          v397 = (int *)&off_24C0B1418;
          v398 = v40;
          v41 = *(_QWORD *)(v11 + 32);
          v399 = *(_OWORD *)(v11 + 16);
          v400 = v41;
          *(_QWORD *)(v11 + 24) = 0;
          *(_QWORD *)(v11 + 32) = 0;
          *(_QWORD *)(v11 + 16) = 0;
          v401 = *(_OWORD *)(v11 + 40);
          LOBYTE(v402) = 0;
          v404 = 0;
          if (*(_BYTE *)(v11 + 80))
          {
            v42 = *(_OWORD *)(v11 + 56);
            v403 = *(_QWORD *)(v11 + 72);
            v402 = v42;
            *(_QWORD *)(v11 + 64) = 0;
            *(_QWORD *)(v11 + 72) = 0;
            *(_QWORD *)(v11 + 56) = 0;
            v404 = 1;
          }
          v405 = 0;
          v405 = *(_QWORD *)(v11 + 88);
          v43 = *(_QWORD *)(v11 + 128);
          v44 = *(_OWORD *)(v11 + 112);
          v406 = *(_OWORD *)(v11 + 96);
          v407 = v44;
          v408 = v43;
          *(_QWORD *)(v11 + 88) = 0;
          LOBYTE(v409) = 0;
          v411 = 0;
          if (*(_BYTE *)(v11 + 160))
          {
            v45 = *(_OWORD *)(v11 + 136);
            v410 = *(_QWORD *)(v11 + 152);
            v409 = v45;
            *(_QWORD *)(v11 + 144) = 0;
            *(_QWORD *)(v11 + 152) = 0;
            *(_QWORD *)(v11 + 136) = 0;
            v411 = 1;
          }
          v46 = (_QWORD *)(v11 + 176);
          v47 = *(_QWORD *)(v11 + 176);
          v412 = *(uint64_t **)(v11 + 168);
          v413 = v47;
          v414 = *(_QWORD *)(v11 + 184);
          if (v414)
          {
            *(_QWORD *)(v47 + 16) = &v413;
            *(_QWORD *)(v11 + 168) = v46;
            *v46 = 0;
            *(_QWORD *)(v11 + 184) = 0;
            v415 = 0;
            v416 = 0;
            v417 = 0;
            v49 = *(_QWORD *)(v11 + 192);
            v48 = *(_QWORD *)(v11 + 200);
            v50 = v48 - v49;
            if (v48 == v49)
              goto LABEL_45;
LABEL_36:
            v51 = 0xAAAAAAAAAAAAAAABLL * (v50 >> 4);
            if (v51 <= 0x555555555555555)
            {
              v52 = (char *)operator new(v50);
              v53 = 0;
              v415 = v52;
              v416 = v52;
              v417 = &v52[48 * v51];
              v6 = &v418;
              while (1)
              {
                v54 = (__int128 *)(v49 + v53);
                v55 = (std::string *)&v52[v53];
                if (*(char *)(v49 + v53 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v55, *(const std::string::value_type **)v54, *((_QWORD *)v54 + 1));
                  v57 = (std::string *)&v52[v53 + 24];
                  v58 = v49 + v53;
                  v59 = v49 + v53 + 24;
                  if ((*(char *)(v49 + v53 + 47) & 0x80000000) == 0)
                    goto LABEL_43;
LABEL_38:
                  std::string::__init_copy_ctor_external(v57, *(const std::string::value_type **)v59, *(_QWORD *)(v58 + 32));
                  v53 += 48;
                  if (v49 + v53 == v48)
                    goto LABEL_44;
                }
                else
                {
                  v56 = *v54;
                  v55->__r_.__value_.__r.__words[2] = *((_QWORD *)v54 + 2);
                  *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
                  v57 = (std::string *)&v52[v53 + 24];
                  v58 = v49 + v53;
                  v59 = v49 + v53 + 24;
                  if (*(char *)(v49 + v53 + 47) < 0)
                    goto LABEL_38;
LABEL_43:
                  v60 = *(_OWORD *)v59;
                  v57->__r_.__value_.__r.__words[2] = *(_QWORD *)(v59 + 16);
                  *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v60;
                  v53 += 48;
                  if (v49 + v53 == v48)
                  {
LABEL_44:
                    v416 = &v52[v53];
                    goto LABEL_45;
                  }
                }
              }
            }
LABEL_314:
            abort();
          }
          v412 = &v413;
          v415 = 0;
          v416 = 0;
          v417 = 0;
          v49 = *(_QWORD *)(v11 + 192);
          v48 = *(_QWORD *)(v11 + 200);
          v50 = v48 - v49;
          if (v48 != v49)
            goto LABEL_36;
LABEL_45:
          v61 = 0;
          do
          {
            v62 = (int *)(v11 + v61);
            if (v11 + v61 + 216 == a2)
              goto LABEL_300;
            v63 = *a3;
            v418 = v62 + 57;
            v64 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v63, v62 + 57, (uint64_t)&std::piecewise_construct, &v418)+ 5);
            v65 = *a3;
            v418 = (int *)&v398 + 1;
            v61 += 216;
          }
          while (v64 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v65, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5));
          v66 = v11 + v61;
          v62 = (int *)a2;
          if (v61 != 216)
          {
            while (v62 != (int *)v11)
            {
              v67 = v62 - 54;
              v68 = *a3;
              v418 = v62 - 51;
              v69 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v68, v62 - 51, (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v70 = *a3;
              v418 = (int *)&v398 + 1;
              v71 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v70, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418);
              v62 = v67;
              if (v69 > *((_DWORD *)v71 + 5))
                goto LABEL_55;
            }
            goto LABEL_300;
          }
          v72 = a2;
          do
          {
            if (v66 >= v72)
            {
              v67 = (int *)v72;
LABEL_83:
              v108 = v66 - 216;
              if (v66 - 216 == v11)
                goto LABEL_85;
LABEL_84:
              cricket::Codec::operator=(v11, v108);
              goto LABEL_85;
            }
            v67 = (int *)(v72 - 216);
            v73 = *a3;
            v418 = (int *)(v72 - 204);
            v74 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v73, (int *)(v72 - 204), (uint64_t)&std::piecewise_construct, &v418)+ 5);
            v75 = *a3;
            v418 = (int *)&v398 + 1;
            v76 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v75, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418);
            v72 = (unint64_t)v67;
          }
          while (v74 <= *((_DWORD *)v76 + 5));
LABEL_55:
          if (v66 >= (unint64_t)v67)
            goto LABEL_83;
          v378 = v67;
          v379 = v66;
          v77 = (uint64_t)v67;
          while (2)
          {
            v78 = *(_QWORD *)(v66 + 8);
            v418 = (int *)&off_24C0B1418;
            v419 = v78;
            v79 = *(_QWORD *)(v66 + 32);
            v420 = *(_OWORD *)(v66 + 16);
            v421 = v79;
            *(_QWORD *)(v66 + 24) = 0;
            *(_QWORD *)(v66 + 32) = 0;
            *(_QWORD *)(v66 + 16) = 0;
            v422 = *(_OWORD *)(v66 + 40);
            LOBYTE(v423) = 0;
            v425 = 0;
            if (*(_BYTE *)(v66 + 80))
            {
              v80 = *(_OWORD *)(v66 + 56);
              v424 = *(_QWORD *)(v66 + 72);
              v423 = v80;
              *(_QWORD *)(v66 + 64) = 0;
              *(_QWORD *)(v66 + 72) = 0;
              *(_QWORD *)(v66 + 56) = 0;
              v425 = 1;
            }
            v426 = *(_QWORD *)(v66 + 88);
            v81 = *(_QWORD *)(v66 + 128);
            v82 = *(_OWORD *)(v66 + 112);
            v427 = *(_OWORD *)(v66 + 96);
            v428 = v82;
            v429 = v81;
            *(_QWORD *)(v66 + 88) = 0;
            LOBYTE(v430) = 0;
            v432 = 0;
            if (*(_BYTE *)(v66 + 160))
            {
              v83 = *(_OWORD *)(v66 + 136);
              v431 = *(_QWORD *)(v66 + 152);
              v430 = v83;
              *(_QWORD *)(v66 + 144) = 0;
              *(_QWORD *)(v66 + 152) = 0;
              *(_QWORD *)(v66 + 136) = 0;
              v432 = 1;
            }
            v84 = (_QWORD *)(v66 + 176);
            v85 = *(_QWORD *)(v66 + 176);
            v433 = *(uint64_t **)(v66 + 168);
            v434 = v85;
            v435 = *(_QWORD *)(v66 + 184);
            if (v435)
            {
              *(_QWORD *)(v85 + 16) = &v434;
              *(_QWORD *)(v66 + 168) = v84;
              *v84 = 0;
              *(_QWORD *)(v66 + 184) = 0;
              v436 = 0;
              v437 = 0;
              v438 = 0;
              v87 = *(_QWORD *)(v66 + 192);
              v86 = *(_QWORD *)(v66 + 200);
              v88 = v86 - v87;
              if (v86 == v87)
                goto LABEL_74;
LABEL_65:
              v89 = 0xAAAAAAAAAAAAAAABLL * (v88 >> 4);
              if (v89 > 0x555555555555555)
                goto LABEL_314;
              v90 = (char *)operator new(v88);
              v91 = 0;
              v436 = v90;
              v437 = v90;
              v438 = &v90[48 * v89];
              v11 = a1;
              while (1)
              {
                v93 = (__int128 *)(v87 + v91);
                v94 = (std::string *)&v90[v91];
                if (*(char *)(v87 + v91 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v94, *(const std::string::value_type **)v93, *((_QWORD *)v93 + 1));
                  v96 = (std::string *)&v90[v91 + 24];
                  v97 = v87 + v91;
                  v98 = v87 + v91 + 24;
                  if ((*(char *)(v87 + v91 + 47) & 0x80000000) == 0)
                  {
LABEL_67:
                    v92 = *(_OWORD *)v98;
                    v96->__r_.__value_.__r.__words[2] = *(_QWORD *)(v98 + 16);
                    *(_OWORD *)&v96->__r_.__value_.__l.__data_ = v92;
                    v91 += 48;
                    if (v87 + v91 == v86)
                      goto LABEL_73;
                    continue;
                  }
                }
                else
                {
                  v95 = *v93;
                  v94->__r_.__value_.__r.__words[2] = *((_QWORD *)v93 + 2);
                  *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v95;
                  v96 = (std::string *)&v90[v91 + 24];
                  v97 = v87 + v91;
                  v98 = v87 + v91 + 24;
                  if ((*(char *)(v87 + v91 + 47) & 0x80000000) == 0)
                    goto LABEL_67;
                }
                std::string::__init_copy_ctor_external(v96, *(const std::string::value_type **)v98, *(_QWORD *)(v97 + 32));
                v91 += 48;
                if (v87 + v91 == v86)
                {
LABEL_73:
                  v99 = &v90[v91];
                  v6 = &v418;
                  v437 = v99;
                  goto LABEL_74;
                }
              }
            }
            v433 = &v434;
            v436 = 0;
            v437 = 0;
            v438 = 0;
            v87 = *(_QWORD *)(v66 + 192);
            v86 = *(_QWORD *)(v66 + 200);
            v88 = v86 - v87;
            if (v86 != v87)
              goto LABEL_65;
LABEL_74:
            cricket::Codec::operator=(v66, v77);
            cricket::Codec::operator=(v77, (uint64_t)&v418);
            cricket::Codec::~Codec((cricket::Codec *)&v418);
            do
            {
              v100 = v66 + 216;
              v62 = (int *)a2;
              if (v66 + 216 == a2)
                goto LABEL_300;
              v101 = *a3;
              v418 = (int *)(v66 + 228);
              v102 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v101, (int *)(v66 + 228), (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v103 = *a3;
              v418 = (int *)&v398 + 1;
              v62 = (int *)*((unsigned int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v103, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v66 += 216;
            }
            while (v102 > (int)v62);
            do
            {
              if (v77 == v11)
                goto LABEL_300;
              v104 = v77 - 216;
              v105 = *a3;
              v418 = (int *)(v77 - 204);
              v106 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v105, (int *)(v77 - 204), (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v107 = *a3;
              v418 = (int *)&v398 + 1;
              v62 = (int *)*((unsigned int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v107, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v77 -= 216;
            }
            while (v106 <= (int)v62);
            v66 = v100;
            v77 = v104;
            if (v100 < v104)
              continue;
            break;
          }
          v108 = v100 - 216;
          v67 = v378;
          v66 = v379;
          if (v100 - 216 != v11)
            goto LABEL_84;
LABEL_85:
          cricket::Codec::operator=(v108, (uint64_t)&v397);
          cricket::Codec::~Codec((cricket::Codec *)&v397);
          if (v66 < (unint64_t)v67)
            goto LABEL_88;
          v109 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::ParseContentDescription(std::string_view,cricket::MediaType,int,std::string_view,std::vector<int> const&,unsigned long *,std::string *,BOOL *,int *,cricket::TransportDescription *,std::vector<std::unique_ptr<webrtc::JsepIceCandidate>> *,webrtc::SdpParseError *)::$_0 &,cricket::Codec *>(v11, v108, a3);
          v8 = v108 + 216;
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::ParseContentDescription(std::string_view,cricket::MediaType,int,std::string_view,std::vector<int> const&,unsigned long *,std::string *,BOOL *,int *,cricket::TransportDescription *,std::vector<std::unique_ptr<webrtc::JsepIceCandidate>> *,webrtc::SdpParseError *)::$_0 &,cricket::Codec *>(v108 + 216, a2, a3))
          {
            if ((v109 & 1) == 0)
            {
LABEL_88:
              std::__introsort<std::_ClassicAlgPolicy,webrtc::ParseContentDescription(std::string_view,cricket::MediaType,int,std::string_view,std::vector<int> const&,unsigned long *,std::string *,BOOL *,int *,cricket::TransportDescription *,std::vector<std::unique_ptr<webrtc::JsepIceCandidate>> *,webrtc::SdpParseError *)::$_0 &,cricket::Codec *,false>(v11, v108, a3, a4, a5 & 1);
              a5 = 0;
              v8 = v108 + 216;
            }
            continue;
          }
          a2 = v108;
          if ((v109 & 1) != 0)
            return;
          goto LABEL_2;
        }
        v14 = 216 * v12;
        v15 = *(_QWORD *)(v8 + 8);
        v418 = (int *)&off_24C0B1418;
        v419 = v15;
        v16 = *(_QWORD *)(v8 + 32);
        v420 = *(_OWORD *)(v8 + 16);
        v421 = v16;
        *(_QWORD *)(v8 + 24) = 0;
        *(_QWORD *)(v8 + 32) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        v422 = *(_OWORD *)(v8 + 40);
        LOBYTE(v423) = 0;
        v425 = 0;
        if (*(_BYTE *)(v8 + 80))
        {
          v17 = *(_OWORD *)(v8 + 56);
          v424 = *(_QWORD *)(v8 + 72);
          v423 = v17;
          *(_QWORD *)(v8 + 64) = 0;
          *(_QWORD *)(v8 + 72) = 0;
          *(_QWORD *)(v8 + 56) = 0;
          v425 = 1;
        }
        v426 = 0;
        v426 = *(_QWORD *)(v8 + 88);
        v18 = *(_QWORD *)(v8 + 128);
        v19 = *(_OWORD *)(v8 + 112);
        v427 = *(_OWORD *)(v8 + 96);
        v428 = v19;
        v429 = v18;
        *(_QWORD *)(v8 + 88) = 0;
        LOBYTE(v430) = 0;
        v432 = 0;
        if (*(_BYTE *)(v8 + 160))
        {
          v20 = *(_OWORD *)(v8 + 136);
          v431 = *(_QWORD *)(v8 + 152);
          v430 = v20;
          *(_QWORD *)(v8 + 144) = 0;
          *(_QWORD *)(v8 + 152) = 0;
          *(_QWORD *)(v8 + 136) = 0;
          v432 = 1;
        }
        v21 = (_QWORD *)(v8 + 176);
        v22 = *(_QWORD *)(v8 + 176);
        v433 = *(uint64_t **)(v8 + 168);
        v434 = v22;
        v435 = *(_QWORD *)(v8 + 184);
        if (!v435)
        {
          v433 = &v434;
          v436 = 0;
          v437 = 0;
          v438 = 0;
          v24 = *(_QWORD *)(v8 + 192);
          v23 = *(_QWORD *)(v8 + 200);
          v25 = v23 - v24;
          if (v23 == v24)
            goto LABEL_26;
LABEL_17:
          v26 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 4);
          if (v26 > 0x555555555555555)
            goto LABEL_314;
          v27 = (char *)operator new(v25);
          v28 = 0;
          v436 = v27;
          v437 = v27;
          v438 = &v27[48 * v26];
          v11 = v8;
          while (1)
          {
            v30 = (__int128 *)(v24 + v28);
            v31 = (std::string *)&v27[v28];
            if (*(char *)(v24 + v28 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v31, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
              v33 = (std::string *)&v27[v28 + 24];
              v34 = v24 + v28;
              v35 = v24 + v28 + 24;
              if ((*(char *)(v24 + v28 + 47) & 0x80000000) == 0)
              {
LABEL_19:
                v29 = *(_OWORD *)v35;
                v33->__r_.__value_.__r.__words[2] = *(_QWORD *)(v35 + 16);
                *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v29;
                v28 += 48;
                if (v24 + v28 == v23)
                  goto LABEL_25;
                continue;
              }
            }
            else
            {
              v32 = *v30;
              v31->__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
              *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
              v33 = (std::string *)&v27[v28 + 24];
              v34 = v24 + v28;
              v35 = v24 + v28 + 24;
              if ((*(char *)(v24 + v28 + 47) & 0x80000000) == 0)
                goto LABEL_19;
            }
            std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)v35, *(_QWORD *)(v34 + 32));
            v28 += 48;
            if (v24 + v28 == v23)
            {
LABEL_25:
              v36 = &v27[v28];
              v6 = &v418;
              v437 = v36;
              goto LABEL_26;
            }
          }
        }
        *(_QWORD *)(v22 + 16) = &v434;
        *(_QWORD *)(v8 + 168) = v21;
        *v21 = 0;
        *(_QWORD *)(v8 + 184) = 0;
        v436 = 0;
        v437 = 0;
        v438 = 0;
        v24 = *(_QWORD *)(v8 + 192);
        v23 = *(_QWORD *)(v8 + 200);
        v25 = v23 - v24;
        if (v23 != v24)
          goto LABEL_17;
LABEL_26:
        cricket::Codec::operator=(v11, v13);
        cricket::Codec::operator=(v13, (uint64_t)&v418);
        cricket::Codec::~Codec((cricket::Codec *)&v418);
        --a4;
        if ((a5 & 1) != 0)
          goto LABEL_28;
LABEL_27:
        v37 = *a3;
        v418 = (int *)(v11 - 204);
        v38 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v37, (int *)(v11 - 204), (uint64_t)&std::piecewise_construct, &v418)+ 5);
        v39 = *a3;
        v418 = (int *)(v11 + 12);
        if (v38 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v39, (int *)(v11 + 12), (uint64_t)&std::piecewise_construct, &v418)+ 5))goto LABEL_28;
        v110 = *(_QWORD *)(v11 + 8);
        v397 = (int *)&off_24C0B1418;
        v398 = v110;
        v111 = *(_QWORD *)(v11 + 32);
        v399 = *(_OWORD *)(v11 + 16);
        v400 = v111;
        *(_QWORD *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        v401 = *(_OWORD *)(v11 + 40);
        LOBYTE(v402) = 0;
        v404 = 0;
        if (*(_BYTE *)(v11 + 80))
        {
          v112 = *(_OWORD *)(v11 + 56);
          v403 = *(_QWORD *)(v11 + 72);
          v402 = v112;
          *(_QWORD *)(v11 + 64) = 0;
          *(_QWORD *)(v11 + 72) = 0;
          *(_QWORD *)(v11 + 56) = 0;
          v404 = 1;
        }
        v405 = 0;
        v405 = *(_QWORD *)(v11 + 88);
        v113 = *(_QWORD *)(v11 + 128);
        v114 = *(_OWORD *)(v11 + 112);
        v406 = *(_OWORD *)(v11 + 96);
        v407 = v114;
        v408 = v113;
        *(_QWORD *)(v11 + 88) = 0;
        LOBYTE(v409) = 0;
        v411 = 0;
        if (*(_BYTE *)(v11 + 160))
        {
          v115 = *(_OWORD *)(v11 + 136);
          v410 = *(_QWORD *)(v11 + 152);
          v409 = v115;
          *(_QWORD *)(v11 + 144) = 0;
          *(_QWORD *)(v11 + 152) = 0;
          *(_QWORD *)(v11 + 136) = 0;
          v411 = 1;
        }
        v116 = (_QWORD *)(v11 + 176);
        v117 = *(_QWORD *)(v11 + 176);
        v412 = *(uint64_t **)(v11 + 168);
        v413 = v117;
        v414 = *(_QWORD *)(v11 + 184);
        if (v414)
        {
          *(_QWORD *)(v117 + 16) = &v413;
          *(_QWORD *)(v11 + 168) = v116;
          *v116 = 0;
          *(_QWORD *)(v11 + 184) = 0;
        }
        else
        {
          v412 = &v413;
        }
        v415 = 0;
        v416 = 0;
        v417 = 0;
        v119 = *(_QWORD *)(v11 + 192);
        v118 = *(_QWORD *)(v11 + 200);
        v120 = v118 - v119;
        if (v118 != v119)
        {
          v121 = 0xAAAAAAAAAAAAAAABLL * (v120 >> 4);
          if (v121 > 0x555555555555555)
            goto LABEL_314;
          v122 = (char *)operator new(v120);
          v123 = 0;
          v415 = v122;
          v416 = v122;
          v417 = &v122[48 * v121];
          v6 = &v418;
          while (1)
          {
            v124 = (__int128 *)(v119 + v123);
            v125 = (std::string *)&v122[v123];
            if (*(char *)(v119 + v123 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v125, *(const std::string::value_type **)v124, *((_QWORD *)v124 + 1));
              v127 = (std::string *)&v122[v123 + 24];
              v128 = v119 + v123;
              v129 = v119 + v123 + 24;
              if (*(char *)(v119 + v123 + 47) < 0)
              {
LABEL_99:
                std::string::__init_copy_ctor_external(v127, *(const std::string::value_type **)v129, *(_QWORD *)(v128 + 32));
                v123 += 48;
                if (v119 + v123 == v118)
                  goto LABEL_105;
                continue;
              }
            }
            else
            {
              v126 = *v124;
              v125->__r_.__value_.__r.__words[2] = *((_QWORD *)v124 + 2);
              *(_OWORD *)&v125->__r_.__value_.__l.__data_ = v126;
              v127 = (std::string *)&v122[v123 + 24];
              v128 = v119 + v123;
              v129 = v119 + v123 + 24;
              if (*(char *)(v119 + v123 + 47) < 0)
                goto LABEL_99;
            }
            v130 = *(_OWORD *)v129;
            v127->__r_.__value_.__r.__words[2] = *(_QWORD *)(v129 + 16);
            *(_OWORD *)&v127->__r_.__value_.__l.__data_ = v130;
            v123 += 48;
            if (v119 + v123 == v118)
            {
LABEL_105:
              v416 = &v122[v123];
              v11 = v8;
              break;
            }
          }
        }
        v131 = *a3;
        v418 = (int *)&v398 + 1;
        v132 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v131, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
        v133 = *a3;
        v418 = (int *)(a2 - 204);
        v62 = (int *)*((unsigned int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v133, v377, (uint64_t)&std::piecewise_construct, &v418)+ 5);
        if (v132 <= (int)v62)
        {
          v140 = (int *)(v11 + 228);
          do
          {
            v136 = (unint64_t)(v140 - 3);
            if ((unint64_t)(v140 - 3) >= a2)
              break;
            v141 = *a3;
            v418 = (int *)&v398 + 1;
            v142 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v141, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
            v143 = *a3;
            v418 = v140;
            v144 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v143, v140, (uint64_t)&std::piecewise_construct, &v418);
            v140 += 54;
          }
          while (v142 <= *((_DWORD *)v144 + 5));
          v135 = a2;
LABEL_115:
          v145 = v135;
          if (v136 < v135)
          {
            v146 = v135;
            do
            {
              v62 = (int *)v8;
              if (v146 == v8)
                goto LABEL_300;
              v145 = v146 - 216;
              v147 = *a3;
              v418 = (int *)&v398 + 1;
              v148 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v147, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v149 = *a3;
              v418 = (int *)(v146 - 204);
              v150 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v149, (int *)(v146 - 204), (uint64_t)&std::piecewise_construct, &v418);
              v146 -= 216;
            }
            while (v148 > *((_DWORD *)v150 + 5));
          }
          if (v136 < v145)
          {
            while (1)
            {
              v151 = *(_QWORD *)(v136 + 8);
              v418 = (int *)&off_24C0B1418;
              v419 = v151;
              v152 = *(_QWORD *)(v136 + 32);
              v420 = *(_OWORD *)(v136 + 16);
              v421 = v152;
              *(_QWORD *)(v136 + 24) = 0;
              *(_QWORD *)(v136 + 32) = 0;
              *(_QWORD *)(v136 + 16) = 0;
              v422 = *(_OWORD *)(v136 + 40);
              LOBYTE(v423) = 0;
              v425 = 0;
              if (*(_BYTE *)(v136 + 80))
              {
                v153 = *(_OWORD *)(v136 + 56);
                v424 = *(_QWORD *)(v136 + 72);
                v423 = v153;
                *(_QWORD *)(v136 + 64) = 0;
                *(_QWORD *)(v136 + 72) = 0;
                *(_QWORD *)(v136 + 56) = 0;
                v425 = 1;
              }
              v426 = 0;
              v426 = *(_QWORD *)(v136 + 88);
              v154 = *(_QWORD *)(v136 + 128);
              v155 = *(_OWORD *)(v136 + 112);
              v427 = *(_OWORD *)(v136 + 96);
              v428 = v155;
              v429 = v154;
              *(_QWORD *)(v136 + 88) = 0;
              LOBYTE(v430) = 0;
              v432 = 0;
              if (*(_BYTE *)(v136 + 160))
              {
                v156 = *(_OWORD *)(v136 + 136);
                v431 = *(_QWORD *)(v136 + 152);
                v430 = v156;
                *(_QWORD *)(v136 + 144) = 0;
                *(_QWORD *)(v136 + 152) = 0;
                *(_QWORD *)(v136 + 136) = 0;
                v432 = 1;
              }
              v157 = (_QWORD *)(v136 + 176);
              v158 = *(_QWORD *)(v136 + 176);
              v433 = *(uint64_t **)(v136 + 168);
              v434 = v158;
              v435 = *(_QWORD *)(v136 + 184);
              if (v435)
                break;
              v433 = &v434;
              v436 = 0;
              v437 = 0;
              v438 = 0;
              v160 = *(_QWORD *)(v136 + 192);
              v159 = *(_QWORD *)(v136 + 200);
              v161 = v159 - v160;
              if (v159 != v160)
                goto LABEL_128;
LABEL_137:
              cricket::Codec::operator=(v136, v145);
              cricket::Codec::operator=(v145, (uint64_t)&v418);
              cricket::Codec::~Codec((cricket::Codec *)&v418);
              do
              {
                v8 = v136 + 216;
                if (v136 + 216 == a2)
                  goto LABEL_300;
                v173 = *a3;
                v418 = (int *)&v398 + 1;
                v174 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v173, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v175 = *a3;
                v418 = (int *)(v136 + 228);
                v62 = (int *)*((unsigned int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v175, (int *)(v136 + 228), (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v136 += 216;
              }
              while (v174 <= (int)v62);
              do
              {
                if (v145 == a1)
                  goto LABEL_300;
                v176 = v145 - 216;
                v177 = *a3;
                v418 = (int *)&v398 + 1;
                v178 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v177, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v179 = *a3;
                v418 = (int *)(v145 - 204);
                v62 = (int *)*((unsigned int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v179, (int *)(v145 - 204), (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v145 -= 216;
              }
              while (v178 > (int)v62);
              v136 = v8;
              v145 = v176;
              if (v8 >= v176)
                goto LABEL_145;
            }
            *(_QWORD *)(v158 + 16) = &v434;
            *(_QWORD *)(v136 + 168) = v157;
            *v157 = 0;
            *(_QWORD *)(v136 + 184) = 0;
            v436 = 0;
            v437 = 0;
            v438 = 0;
            v160 = *(_QWORD *)(v136 + 192);
            v159 = *(_QWORD *)(v136 + 200);
            v161 = v159 - v160;
            if (v159 == v160)
              goto LABEL_137;
LABEL_128:
            v162 = 0xAAAAAAAAAAAAAAABLL * (v161 >> 4);
            if (v162 > 0x555555555555555)
              goto LABEL_314;
            v163 = (char *)operator new(v161);
            v164 = 0;
            v436 = v163;
            v437 = v163;
            v165 = &v163[48 * v162];
            v6 = &v418;
            v438 = v165;
            while (1)
            {
              v166 = (__int128 *)(v160 + v164);
              v167 = (std::string *)&v163[v164];
              if (*(char *)(v160 + v164 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v167, *(const std::string::value_type **)v166, *((_QWORD *)v166 + 1));
                v169 = (std::string *)&v163[v164 + 24];
                v170 = v160 + v164;
                v171 = v160 + v164 + 24;
                if (*(char *)(v160 + v164 + 47) < 0)
                {
LABEL_130:
                  std::string::__init_copy_ctor_external(v169, *(const std::string::value_type **)v171, *(_QWORD *)(v170 + 32));
                  v164 += 48;
                  if (v160 + v164 == v159)
                    goto LABEL_136;
                  continue;
                }
              }
              else
              {
                v168 = *v166;
                v167->__r_.__value_.__r.__words[2] = *((_QWORD *)v166 + 2);
                *(_OWORD *)&v167->__r_.__value_.__l.__data_ = v168;
                v169 = (std::string *)&v163[v164 + 24];
                v170 = v160 + v164;
                v171 = v160 + v164 + 24;
                if (*(char *)(v160 + v164 + 47) < 0)
                  goto LABEL_130;
              }
              v172 = *(_OWORD *)v171;
              v169->__r_.__value_.__r.__words[2] = *(_QWORD *)(v171 + 16);
              *(_OWORD *)&v169->__r_.__value_.__l.__data_ = v172;
              v164 += 48;
              if (v160 + v164 == v159)
              {
LABEL_136:
                v437 = &v163[v164];
                goto LABEL_137;
              }
            }
          }
          v8 = v136;
LABEL_145:
          if (v8 - 216 != a1)
            cricket::Codec::operator=(a1, v8 - 216);
          cricket::Codec::operator=(v8 - 216, (uint64_t)&v397);
          cricket::Codec::~Codec((cricket::Codec *)&v397);
          a5 = 0;
          continue;
        }
        v134 = v11;
        v135 = a2;
        while (1)
        {
          v136 = v134 + 216;
          if (v134 + 216 == a2)
            break;
          v137 = *a3;
          v418 = (int *)&v398 + 1;
          v138 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v137, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
          v139 = *a3;
          v418 = (int *)(v134 + 228);
          v62 = (int *)*((unsigned int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v139, (int *)(v134 + 228), (uint64_t)&std::piecewise_construct, &v418)+ 5);
          v134 += 216;
          if (v138 > (int)v62)
            goto LABEL_115;
        }
LABEL_300:
        __break(1u);
LABEL_301:
        v6[21] = v62;
LABEL_302:
        v6[24] = 0;
        v6[25] = 0;
        v6[26] = 0;
        v364 = *((_QWORD *)v7 + 24);
        v365 = *((_QWORD *)v7 + 25);
        v366 = v365 - v364;
        if (v365 != v364)
        {
          v367 = 0xAAAAAAAAAAAAAAABLL * (v366 >> 4);
          if (v367 > 0x555555555555555)
            goto LABEL_314;
          v368 = (char *)operator new(v366);
          v369 = 0;
          v436 = v368;
          v437 = v368;
          v438 = &v368[48 * v367];
          while (1)
          {
            v370 = (__int128 *)(v364 + v369);
            v371 = (std::string *)&v368[v369];
            if (*(char *)(v364 + v369 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v371, *(const std::string::value_type **)v370, *((_QWORD *)v370 + 1));
              v373 = (std::string *)&v368[v369 + 24];
              v374 = v364 + v369;
              v375 = v364 + v369 + 24;
              if (*(char *)(v364 + v369 + 47) < 0)
              {
LABEL_305:
                std::string::__init_copy_ctor_external(v373, *(const std::string::value_type **)v375, *(_QWORD *)(v374 + 32));
                v369 += 48;
                if (v364 + v369 == v365)
                  goto LABEL_311;
                continue;
              }
            }
            else
            {
              v372 = *v370;
              v371->__r_.__value_.__r.__words[2] = *((_QWORD *)v370 + 2);
              *(_OWORD *)&v371->__r_.__value_.__l.__data_ = v372;
              v373 = (std::string *)&v368[v369 + 24];
              v374 = v364 + v369;
              v375 = v364 + v369 + 24;
              if (*(char *)(v364 + v369 + 47) < 0)
                goto LABEL_305;
            }
            v376 = *(_OWORD *)v375;
            v373->__r_.__value_.__r.__words[2] = *(_QWORD *)(v375 + 16);
            *(_OWORD *)&v373->__r_.__value_.__l.__data_ = v376;
            v369 += 48;
            if (v364 + v369 == v365)
            {
LABEL_311:
              v437 = &v368[v369];
              break;
            }
          }
        }
        cricket::Codec::operator=((uint64_t)v7, (uint64_t)v386);
        cricket::Codec::operator=((uint64_t)v386, (uint64_t)&v418);
        cricket::Codec::~Codec((cricket::Codec *)&v418);
        return;
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::ParseContentDescription(std::string_view,cricket::MediaType,int,std::string_view,std::vector<int> const&,unsigned long *,std::string *,BOOL *,int *,cricket::TransportDescription *,std::vector<std::unique_ptr<webrtc::JsepIceCandidate>> *,webrtc::SdpParseError *)::$_0 &,cricket::Codec *>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _BOOL8 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  __int128 *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  __int128 *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _DWORD *v59;
  void (**v60)(cricket::Codec *__hidden);
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;

  v4 = a2;
  v81 = *MEMORY[0x24BDAC8D0];
  v6 = 1;
  switch(0x84BDA12F684BDA13 * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      v7 = *a3;
      v60 = (void (**)(cricket::Codec *__hidden))(a2 - 204);
      v8 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v7, (int *)(a2 - 204), (uint64_t)&std::piecewise_construct, (_DWORD **)&v60)+ 5);
      v9 = *a3;
      v60 = (void (**)(cricket::Codec *__hidden))(a1 + 12);
      if (v8 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v9, (int *)(a1 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v60)+ 5))return 1;
      v10 = *(_QWORD *)(a1 + 8);
      v60 = &off_24C0B1418;
      v61 = v10;
      v62 = *(_OWORD *)(a1 + 16);
      v63 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v64 = *(_OWORD *)(a1 + 40);
      LOBYTE(v65) = 0;
      v67 = 0;
      if (*(_BYTE *)(a1 + 80))
      {
        v65 = *(_OWORD *)(a1 + 56);
        v66 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        v67 = 1;
      }
      v68 = *(_QWORD *)(a1 + 88);
      v11 = *(_OWORD *)(a1 + 112);
      v69 = *(_OWORD *)(a1 + 96);
      v70 = v11;
      v71 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 88) = 0;
      LOBYTE(v72) = 0;
      v74 = 0;
      if (*(_BYTE *)(a1 + 160))
      {
        v72 = *(_OWORD *)(a1 + 136);
        v73 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 144) = 0;
        *(_QWORD *)(a1 + 152) = 0;
        *(_QWORD *)(a1 + 136) = 0;
        v74 = 1;
      }
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 176);
      v75 = *(uint64_t **)(a1 + 168);
      v76 = v13;
      v77 = *(_QWORD *)(a1 + 184);
      if (v77)
      {
        *(_QWORD *)(v13 + 16) = &v76;
        *(_QWORD *)(a1 + 168) = v12;
        *v12 = 0;
        *(_QWORD *)(a1 + 184) = 0;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v14 = *(_QWORD *)(a1 + 192);
        v15 = *(_QWORD *)(a1 + 200);
        v16 = v15 - v14;
        if (v15 == v14)
        {
LABEL_52:
          cricket::Codec::operator=(a1, v4 - 216);
          cricket::Codec::operator=(v4 - 216, (uint64_t)&v60);
          cricket::Codec::~Codec((cricket::Codec *)&v60);
          return 1;
        }
      }
      else
      {
        v75 = &v76;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v14 = *(_QWORD *)(a1 + 192);
        v15 = *(_QWORD *)(a1 + 200);
        v16 = v15 - v14;
        if (v15 == v14)
          goto LABEL_52;
      }
      v45 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 4);
      if (v45 > 0x555555555555555)
        goto LABEL_55;
      v46 = (char *)operator new(v16);
      v47 = 0;
      v78 = v46;
      v79 = v46;
      v80 = &v46[48 * v45];
      while (1)
      {
        v49 = (__int128 *)(v14 + v47);
        v50 = (std::string *)&v46[v47];
        if (*(char *)(v14 + v47 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)v49, *((_QWORD *)v49 + 1));
          v52 = (std::string *)&v46[v47 + 24];
          v53 = v14 + v47;
          v54 = v14 + v47 + 24;
          if ((*(char *)(v14 + v47 + 47) & 0x80000000) == 0)
            goto LABEL_45;
LABEL_50:
          std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)v54, *(_QWORD *)(v53 + 32));
          v47 += 48;
          if (v14 + v47 == v15)
          {
LABEL_51:
            v79 = &v46[v47];
            goto LABEL_52;
          }
        }
        else
        {
          v51 = *v49;
          v50->__r_.__value_.__r.__words[2] = *((_QWORD *)v49 + 2);
          *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
          v52 = (std::string *)&v46[v47 + 24];
          v53 = v14 + v47;
          v54 = v14 + v47 + 24;
          if (*(char *)(v14 + v47 + 47) < 0)
            goto LABEL_50;
LABEL_45:
          v48 = *(_OWORD *)v54;
          v52->__r_.__value_.__r.__words[2] = *(_QWORD *)(v54 + 16);
          *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v48;
          v47 += 48;
          if (v14 + v47 == v15)
            goto LABEL_51;
        }
      }
    case 3uLL:
      return v6;
    case 4uLL:
      return v6;
    case 5uLL:
      return v6;
    default:
      v17 = a1 + 432;
      v18 = a1 + 648;
      v6 = 1;
      if (a1 + 648 == v4)
        return v6;
      v58 = 0;
      v57 = 0;
      v56 = v4;
      while (2)
      {
        v20 = *a3;
        v60 = (void (**)(cricket::Codec *__hidden))(v18 + 12);
        v21 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v20, (int *)(v18 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v60)+ 5);
        v22 = *a3;
        v60 = (void (**)(cricket::Codec *__hidden))(v17 + 12);
        if (v21 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v22, (int *)(v17 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v60)+ 5))goto LABEL_15;
        v23 = *(_QWORD *)(v18 + 8);
        v60 = &off_24C0B1418;
        v61 = v23;
        v62 = *(_OWORD *)(v18 + 16);
        v63 = *(_QWORD *)(v18 + 32);
        *(_QWORD *)(v18 + 16) = 0;
        *(_QWORD *)(v18 + 24) = 0;
        *(_QWORD *)(v18 + 32) = 0;
        v64 = *(_OWORD *)(v18 + 40);
        LOBYTE(v65) = 0;
        v67 = 0;
        if (*(_BYTE *)(v18 + 80))
        {
          v65 = *(_OWORD *)(v18 + 56);
          v66 = *(_QWORD *)(v18 + 72);
          *(_QWORD *)(v18 + 64) = 0;
          *(_QWORD *)(v18 + 72) = 0;
          *(_QWORD *)(v18 + 56) = 0;
          v67 = 1;
        }
        v68 = *(_QWORD *)(v18 + 88);
        v24 = *(_OWORD *)(v18 + 112);
        v69 = *(_OWORD *)(v18 + 96);
        v70 = v24;
        v71 = *(_QWORD *)(v18 + 128);
        *(_QWORD *)(v18 + 88) = 0;
        LOBYTE(v72) = 0;
        v74 = 0;
        if (*(_BYTE *)(v18 + 160))
        {
          v72 = *(_OWORD *)(v18 + 136);
          v73 = *(_QWORD *)(v18 + 152);
          *(_QWORD *)(v18 + 144) = 0;
          *(_QWORD *)(v18 + 152) = 0;
          *(_QWORD *)(v18 + 136) = 0;
          v74 = 1;
        }
        v25 = (_QWORD *)(v18 + 176);
        v26 = *(_QWORD *)(v18 + 176);
        v75 = *(uint64_t **)(v18 + 168);
        v76 = v26;
        v77 = *(_QWORD *)(v18 + 184);
        if (v77)
        {
          *(_QWORD *)(v26 + 16) = &v76;
          *(_QWORD *)(v18 + 168) = v25;
          *v25 = 0;
          *(_QWORD *)(v18 + 184) = 0;
          v78 = 0;
          v79 = 0;
          v80 = 0;
          v27 = *(_QWORD *)(v18 + 192);
          v28 = *(_QWORD *)(v18 + 200);
          v29 = v28 - v27;
          if (v28 == v27)
            goto LABEL_34;
          goto LABEL_25;
        }
        v75 = &v76;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v27 = *(_QWORD *)(v18 + 192);
        v28 = *(_QWORD *)(v18 + 200);
        v29 = v28 - v27;
        if (v28 != v27)
        {
LABEL_25:
          v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 4);
          if (v30 > 0x555555555555555)
LABEL_55:
            abort();
          v31 = (char *)operator new(v29);
          v32 = 0;
          v78 = v31;
          v79 = v31;
          v80 = &v31[48 * v30];
          while (1)
          {
            v33 = (__int128 *)(v27 + v32);
            v34 = (std::string *)&v31[v32];
            if (*(char *)(v27 + v32 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)v33, *((_QWORD *)v33 + 1));
              v36 = (std::string *)&v31[v32 + 24];
              v37 = v27 + v32;
              v38 = v27 + v32 + 24;
              if ((*(char *)(v27 + v32 + 47) & 0x80000000) == 0)
                goto LABEL_32;
LABEL_27:
              std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)v38, *(_QWORD *)(v37 + 32));
              v32 += 48;
              if (v27 + v32 == v28)
                goto LABEL_33;
            }
            else
            {
              v35 = *v33;
              v34->__r_.__value_.__r.__words[2] = *((_QWORD *)v33 + 2);
              *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
              v36 = (std::string *)&v31[v32 + 24];
              v37 = v27 + v32;
              v38 = v27 + v32 + 24;
              if (*(char *)(v27 + v32 + 47) < 0)
                goto LABEL_27;
LABEL_32:
              v39 = *(_OWORD *)v38;
              v36->__r_.__value_.__r.__words[2] = *(_QWORD *)(v38 + 16);
              *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v39;
              v32 += 48;
              if (v27 + v32 == v28)
              {
LABEL_33:
                v79 = &v31[v32];
                v4 = v56;
                break;
              }
            }
          }
        }
LABEL_34:
        v40 = v58;
        do
        {
          v41 = a1 + v40;
          cricket::Codec::operator=(a1 + v40 + 648, a1 + v40 + 432);
          if (v40 == -432)
          {
            v19 = a1;
            goto LABEL_13;
          }
          v42 = *a3;
          v59 = (_DWORD *)&v61 + 1;
          v43 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v42, (int *)&v61 + 1, (uint64_t)&std::piecewise_construct, &v59)+ 5);
          v44 = *a3;
          v59 = (_DWORD *)(v41 + 228);
          v40 -= 216;
        }
        while (v43 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v44, (int *)(v41 + 228), (uint64_t)&std::piecewise_construct, &v59)+ 5));
        v19 = a1 + v40 + 648;
LABEL_13:
        cricket::Codec::operator=(v19, (uint64_t)&v60);
        if (v57 != 7)
        {
          ++v57;
          cricket::Codec::~Codec((cricket::Codec *)&v60);
LABEL_15:
          v17 = v18;
          v58 += 216;
          v18 += 216;
          if (v18 == v4)
            return 1;
          continue;
        }
        break;
      }
      v6 = v18 + 216 == v4;
      cricket::Codec::~Codec((cricket::Codec *)&v60);
      return v6;
  }
}

uint64_t webrtc::ParseSsrcGroupAttribute(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int32 *v11;
  __int32 *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int32 *v17;
  __int32 *v18;
  __int32 *v19;
  unint64_t v20;
  __int32 v21;
  __int32 *v22;
  __int32 *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  __int32 *v29;
  uint64_t v30;
  __int32 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  __int32 *v36;
  uint64_t v37;
  __int128 v38;
  char *v39;
  char *v40;
  void *v41;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string v47;
  void *__p[2];
  char *v49;
  __int32 __c;
  std::string v51;
  char *v52;
  char *v53;

  if (a2 <= 1)
LABEL_70:
    abort();
  v5 = a2 - 2;
  if (v5 < 0)
    goto LABEL_69;
  v8 = a1;
  if (!a1)
  {
    if (v5)
      goto LABEL_69;
  }
  rtc::split(a1 + 2, v5, 0x20u, &v52);
  if ((unint64_t)(v53 - v52) <= 0x1F)
  {
    webrtc::ParseFailedExpectMinFieldNum(v8, a2, 2, a4);
    v9 = 0;
    goto LABEL_60;
  }
  memset(&v51, 0, sizeof(v51));
  if (!webrtc::GetValue(*(unsigned __int8 **)v52, *((_QWORD *)v52 + 1), "ssrc-group", 0xAuLL, (uint64_t)&v51, a4))
  {
    v9 = 0;
    goto LABEL_58;
  }
  v44 = a3;
  v10 = v52;
  if ((unint64_t)(v53 - v52) < 0x20)
  {
    v11 = 0;
    v12 = 0;
LABEL_10:
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v47, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
      __p[0] = 0;
      __p[1] = 0;
      v49 = 0;
      v13 = (char *)v12 - (char *)v11;
      if (v12 == v11)
      {
LABEL_12:
        v14 = v44;
        v15 = *(_QWORD *)(v44 + 8);
        if (v15 < *(_QWORD *)(v44 + 16))
        {
LABEL_13:
          if (v15)
          {
            v16 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
            *(_QWORD *)(v15 + 16) = *((_QWORD *)&v47.__r_.__value_.__l + 2);
            *(_QWORD *)(v15 + 24) = 0;
            *(_OWORD *)v15 = v16;
            memset(&v47, 0, sizeof(v47));
            *(_QWORD *)(v15 + 32) = 0;
            *(_QWORD *)(v15 + 40) = 0;
            *(_OWORD *)(v15 + 24) = *(_OWORD *)__p;
            *(_QWORD *)(v15 + 40) = v49;
            __p[0] = 0;
            __p[1] = 0;
            v49 = 0;
            *(_QWORD *)(v14 + 8) = v15 + 48;
            goto LABEL_54;
          }
          goto LABEL_69;
        }
LABEL_52:
        v40 = std::vector<cricket::SsrcGroup>::__push_back_slow_path<cricket::SsrcGroup>((void **)v14, (uint64_t)&v47);
        v41 = __p[0];
        *(_QWORD *)(v14 + 8) = v40;
        if (v41)
        {
          __p[1] = v41;
          operator delete(v41);
        }
LABEL_54:
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        v9 = 1;
        if (!v11)
          goto LABEL_58;
LABEL_57:
        operator delete(v11);
        goto LABEL_58;
      }
    }
    else
    {
      v47 = v51;
      __p[0] = 0;
      __p[1] = 0;
      v49 = 0;
      v13 = (char *)v12 - (char *)v11;
      if (v12 == v11)
        goto LABEL_12;
    }
    if (v13 < 0)
      goto LABEL_70;
    __p[0] = operator new(v13);
    __p[1] = __p[0];
    v39 = (char *)__p[0] + 4 * (v13 >> 2);
    v49 = v39;
    memcpy(__p[0], v11, v13);
    __p[1] = v39;
    v14 = v44;
    v15 = *(_QWORD *)(v44 + 8);
    if (v15 < *(_QWORD *)(v44 + 16))
      goto LABEL_13;
    goto LABEL_52;
  }
  v11 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  v45 = v8;
  while (1)
  {
    __c = 0;
    if (!webrtc::GetValueFromString<unsigned int>(v8, a2, *(void ***)&v10[16 * v20], *(_QWORD *)&v10[16 * v20 + 8], &__c, a4))goto LABEL_67;
    v21 = __c;
    v22 = wmemchr(v19, __c, v17 - v19);
    v23 = v22 ? v22 : v17;
    if (v23 != v17)
      break;
    if (v17 >= v18)
    {
      v24 = a4;
      v25 = v17 - v11;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62)
        goto LABEL_70;
      if (((char *)v18 - (char *)v11) >> 1 > v26)
        v26 = ((char *)v18 - (char *)v11) >> 1;
      if ((unint64_t)((char *)v18 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v26)
        goto LABEL_69;
      if (v26 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v46 = 4 * v26;
      v27 = operator new(4 * v26);
      v19 = (__int32 *)&v27[4 * v25];
      *v19 = v21;
      v12 = v19 + 1;
      if (v17 != v11)
      {
        v28 = (char *)v17 - (char *)v11 - 4;
        if (v28 < 0xBC
          || (v32 = ((char *)(v17 - 1) - (char *)v11) & 0xFFFFFFFFFFFFFFFCLL,
              &v27[(char *)v17 - (char *)v11 - 4 - v32] > &v27[(char *)v17 - (char *)v11 - 4])
          || (__int32 *)((char *)v17 - v32 - 4) > v17 - 1
          || (unint64_t)((char *)v11 - v27) < 0x20)
        {
          v29 = v17;
          a4 = v24;
          v8 = v45;
          v30 = v46;
        }
        else
        {
          v33 = (v28 >> 2) + 1;
          v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
          v29 = &v17[v34 / 0xFFFFFFFFFFFFFFFCLL];
          v19 = (__int32 *)((char *)v19 - v34);
          v35 = &v27[4 * v25 - 16];
          v36 = v17 - 4;
          v37 = v33 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v38 = *(_OWORD *)v36;
            *(v35 - 1) = *((_OWORD *)v36 - 1);
            *v35 = v38;
            v35 -= 2;
            v36 -= 8;
            v37 -= 8;
          }
          while (v37);
          a4 = v24;
          v8 = v45;
          v30 = v46;
          if (v33 == (v33 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_38:
            v18 = (__int32 *)&v27[v30];
            if (!v11)
              goto LABEL_17;
LABEL_41:
            operator delete(v11);
            goto LABEL_17;
          }
        }
        do
        {
          v31 = *--v29;
          *--v19 = v31;
        }
        while (v29 != v11);
        goto LABEL_38;
      }
      a4 = v24;
      v8 = v45;
      v18 = (__int32 *)&v27[v46];
      if (v11)
        goto LABEL_41;
LABEL_17:
      v11 = v19;
      ++v20;
      v10 = v52;
      v17 = v12;
      if (v20 >= (v53 - v52) >> 4)
        goto LABEL_10;
    }
    else
    {
      if (!v17)
        goto LABEL_69;
      *v17++ = v21;
      v12 = v17;
      ++v20;
      v10 = v52;
      if (v20 >= (v53 - v52) >> 4)
        goto LABEL_10;
    }
  }
  v43 = (char *)operator new(0x20uLL);
  if (v43 <= "Duplicate SSRC in ssrc-group" && v43 + 28 > "Duplicate SSRC in ssrc-group")
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  strcpy(v43, "Duplicate SSRC in ssrc-group");
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  *(_OWORD *)&v47.__r_.__value_.__r.__words[1] = xmmword_208F05180;
  webrtc::ParseFailed(v8, a2, 0, (__n128 *)&v47, a4);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
LABEL_67:
  v9 = 0;
  if (v11)
    goto LABEL_57;
LABEL_58:
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
LABEL_60:
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  return v9;
}

uint64_t webrtc::ParseSsrcAttribute(size_t Value, unint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  int64_t v6;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  void **v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  size_t v19;
  BOOL v20;
  void **p_src;
  unsigned int v22;
  std::string::size_type size;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  int v29;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string *v41;
  char *v42;
  std::string::size_type v43;
  __int128 v44;
  char v45;
  void *v46;
  unint64_t v48;
  void **v49;
  void *v50;
  void **v51;
  size_t *v52;
  size_t v53;
  void *v54[2];
  char v55;
  _BYTE __p[56];
  __int128 v57;
  uint64_t v58;
  std::string v59;
  size_t __sz[2];
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  void **v66;
  size_t v67;
  uint64_t v68;
  void **__src;
  size_t v70;
  uint64_t v71;
  void *v72;
  size_t v73;
  uint64_t v74;
  size_t v75;
  unint64_t v76;

  v75 = Value;
  v76 = a2;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  __src = 0;
  v70 = 0;
  v71 = 0;
  if (a2 <= 1)
    abort();
  v6 = a2 - 2;
  if (v6 < 0)
    goto LABEL_135;
  v10 = Value;
  if (!Value)
  {
    if (v6)
      goto LABEL_135;
  }
  Value = rtc::tokenize_first((unsigned __int8 *)(Value + 2), v6, 32, (uint64_t)&v72, (uint64_t)&__src);
  if ((Value & 1) == 0)
  {
    webrtc::ParseFailedExpectFieldNum(v10, a2, 2, a5);
    v12 = 0;
    if ((SHIBYTE(v71) & 0x80000000) == 0)
      goto LABEL_105;
    goto LABEL_9;
  }
  v66 = 0;
  v67 = 0;
  v68 = 0;
  if (SHIBYTE(v74) < 0)
  {
    v11 = v73;
    if ((v73 & 0x8000000000000000) != 0)
      goto LABEL_135;
    Value = (size_t)v72;
    if (v73)
    {
      if (!v72)
        goto LABEL_135;
    }
  }
  else
  {
    v11 = HIBYTE(v74);
    Value = (size_t)&v72;
  }
  Value = webrtc::GetValue((unsigned __int8 *)Value, v11, "ssrc", 4uLL, (uint64_t)&v66, a5);
  if (!(_DWORD)Value)
    goto LABEL_23;
  v65 = 0;
  if (SHIBYTE(v68) < 0)
  {
    v13 = v67;
    if ((v67 & 0x8000000000000000) != 0)
      goto LABEL_135;
    v14 = v66;
    if (v67)
    {
      if (!v66)
        goto LABEL_135;
    }
  }
  else
  {
    v13 = HIBYTE(v68);
    v14 = (void **)&v66;
  }
  Value = webrtc::GetValueFromString<unsigned int>(v10, a2, v14, v13, &v65, a5);
  if (!(_DWORD)Value)
  {
LABEL_23:
    v12 = 0;
    if ((SHIBYTE(v68) & 0x80000000) == 0)
      goto LABEL_104;
    goto LABEL_24;
  }
  v62 = 0;
  v63 = 0;
  v64 = 0;
  __sz[0] = 0;
  __sz[1] = 0;
  v61 = 0;
  if (SHIBYTE(v71) < 0)
  {
    v15 = v70;
    if ((v70 & 0x8000000000000000) != 0)
      goto LABEL_135;
    Value = (size_t)__src;
    if (v70)
    {
      if (!__src)
        goto LABEL_135;
    }
  }
  else
  {
    v15 = HIBYTE(v71);
    Value = (size_t)&__src;
  }
  Value = rtc::tokenize_first((unsigned __int8 *)Value, v15, 58, (uint64_t)&v62, (uint64_t)__sz);
  if ((Value & 1) == 0)
  {
    memset(&v59, 0, sizeof(v59));
    v18 = (char *)operator new(0x30uLL);
    Value = (size_t)(v18 + 44);
    if (v18 <= "Failed to get the ssrc attribute value from "
      && Value > (unint64_t)"Failed to get the ssrc attribute value from ")
    {
      goto LABEL_135;
    }
    strcpy(v18, "Failed to get the ssrc attribute value from ");
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *(_OWORD *)&v59.__r_.__value_.__r.__words[1] = xmmword_208F094F0;
    if (SHIBYTE(v71) < 0)
    {
      v19 = v70;
      if ((v70 & 0x8000000000000000) != 0)
        goto LABEL_135;
      p_src = __src;
      v20 = v70 == 0;
      if (v70)
      {
        if (!__src)
          goto LABEL_135;
      }
    }
    else
    {
      v19 = HIBYTE(v71);
      v20 = HIBYTE(v71) == 0;
      p_src = (void **)&__src;
    }
    if (v19 <= 3)
    {
      v24 = 0x8000000000000030;
      if (v20)
      {
        v22 = 128;
        size = 44;
      }
      else
      {
        if (Value <= (unint64_t)p_src && Value + v19 > (unint64_t)p_src)
          goto LABEL_135;
        Value = (size_t)memmove((void *)Value, p_src, v19);
        size = v19 + 44;
        v59.__r_.__value_.__l.__size_ = size;
        v18[size] = 0;
        v22 = 128;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v59, 0x2FuLL, v19 - 3, 0x2CuLL, 0x2CuLL, 0, v19, (const std::string::value_type *)p_src);
      v22 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      v24 = v59.__r_.__value_.__r.__words[2];
      size = v59.__r_.__value_.__l.__size_;
    }
    if ((v22 & 0x80u) == 0)
      v39 = 22;
    else
      v39 = (v24 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v22 & 0x80u) == 0)
      v40 = v22;
    else
      v40 = size;
    if (v39 - v40 >= 0x26)
    {
      v41 = (std::string *)v59.__r_.__value_.__r.__words[0];
      if ((v22 & 0x80u) == 0)
        v41 = &v59;
      v42 = (char *)v41 + v40;
      if ((char *)v41 + v40 <= ". Expected format <attribute>:<value>."
        && v42 + 38 > ". Expected format <attribute>:<value>.")
      {
        goto LABEL_135;
      }
      qmemcpy(v42, ". Expected format <attribute>:<value>.", 38);
      v43 = v40 + 38;
      if ((v24 & 0x8000000000000000) != 0)
        v59.__r_.__value_.__l.__size_ = v40 + 38;
      else
        *((_BYTE *)&v59.__r_.__value_.__s + 23) = v43 & 0x7F;
      v41->__r_.__value_.__s.__data_[v43] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v59, v39, v40 - v39 + 38, v40, v40, 0, 0x26uLL, ". Expected format <attribute>:<value>.");
    }
    *(_OWORD *)__p = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[15] = *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 7);
    v45 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    memset(&v59, 0, sizeof(v59));
    __p[23] = v45;
    webrtc::ParseFailed(v10, a2, 0, (__n128 *)__p, a5);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    {
      v46 = (void *)v59.__r_.__value_.__r.__words[0];
LABEL_99:
      operator delete(v46);
    }
LABEL_100:
    v12 = 0;
    if ((SHIBYTE(v61) & 0x80000000) == 0)
      goto LABEL_102;
    goto LABEL_101;
  }
  v17 = *(char **)a3;
  v16 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 != v16)
  {
    while (*(_DWORD *)v17 != v65)
    {
      v17 += 80;
      if (v17 == (char *)v16)
        goto LABEL_39;
    }
  }
  if (v17 == (char *)v16)
  {
LABEL_39:
    v58 = 0;
    v57 = 0u;
    memset(&__p[8], 0, 48);
    *(_DWORD *)__p = v65;
    if (v16 >= *(_QWORD *)(a3 + 16))
    {
      Value = (size_t)std::vector<webrtc::SsrcInfo>::__push_back_slow_path<webrtc::SsrcInfo const&>((char **)a3, (uint64_t)__p);
    }
    else
    {
      if (!v16)
        goto LABEL_135;
      *(_DWORD *)v16 = v65;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 8) = 0;
      *(_OWORD *)(v16 + 32) = *(_OWORD *)&__p[32];
      *(_QWORD *)(v16 + 48) = *(_QWORD *)&__p[48];
      *(_OWORD *)(v16 + 56) = v57;
      *(_QWORD *)(v16 + 72) = v58;
      Value = v16 + 80;
    }
    *(_QWORD *)(a3 + 8) = Value;
    v17 = (char *)(Value - 80);
  }
  v25 = HIBYTE(v64);
  if (SHIBYTE(v64) < 0)
  {
    v27 = v63;
    if (v63 < 0)
      goto LABEL_135;
    v26 = (unsigned __int8 *)v62;
    if (v63)
    {
      if (!v62)
        goto LABEL_135;
    }
  }
  else
  {
    v26 = (unsigned __int8 *)&v62;
    v27 = HIBYTE(v64);
  }
  if (v27 == 5)
  {
    v28 = *(_DWORD *)v26;
    v29 = v26[4];
    if (v28 == 1835101795 && v29 == 101)
    {
      Value = (size_t)(v17 + 8);
      if (v17 + 8 == (char *)__sz)
        goto LABEL_70;
      if (v17[31] < 0)
      {
        if (v61 >= 0)
          v52 = __sz;
        else
          v52 = (size_t *)__sz[0];
        if (v61 >= 0)
          v53 = HIBYTE(v61);
        else
          v53 = __sz[1];
        std::string::__assign_no_alias<false>((std::string *)Value, (const std::string::value_type *)v52, v53);
        goto LABEL_70;
      }
      if ((v61 & 0x8000000000000000) == 0)
      {
        v44 = *(_OWORD *)__sz;
        *((_QWORD *)v17 + 3) = v61;
        *(_OWORD *)Value = v44;
        goto LABEL_70;
      }
LABEL_136:
      std::string::__assign_no_alias<true>((_QWORD *)Value, (char *)__sz[0], __sz[1]);
      goto LABEL_70;
    }
  }
  if ((v64 & 0x8000000000000000) == 0)
  {
    v31 = &v62;
    goto LABEL_66;
  }
  v25 = v63;
  if (v63 < 0 || (v31 = v62, v63) && !v62)
  {
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
LABEL_66:
  if (v25 != 4 || *v31 != 1684632429)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
    goto LABEL_70;
  }
  if ((SHIBYTE(v61) & 0x80000000) == 0)
  {
    v48 = HIBYTE(v61);
    Value = (size_t)__sz;
    goto LABEL_114;
  }
  v48 = __sz[1];
  if ((__sz[1] & 0x8000000000000000) != 0)
    goto LABEL_135;
  Value = __sz[0];
  if (__sz[1])
  {
    if (!__sz[0])
      goto LABEL_135;
  }
LABEL_114:
  rtc::split(Value, v48, 0x20u, (char **)__p);
  if (*(_QWORD *)&__p[8] == *(_QWORD *)__p || *(_QWORD *)&__p[8] - *(_QWORD *)__p >= 0x21uLL)
  {
    std::string::basic_string[abi:sn180100]<0>((char **)v54, "Expected format \"msid:<identifier>[ <appdata>]\".");
    webrtc::ParseFailed(v10, a2, (uint64_t)v54, a5);
    if (v55 < 0)
      operator delete(v54[0]);
    v46 = *(void **)__p;
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      goto LABEL_99;
    }
    goto LABEL_100;
  }
  std::string::basic_string<std::string_view,0>(&v59, **(_BYTE ***)__p, *(_QWORD *)(*(_QWORD *)__p + 8));
  v49 = (void **)(v17 + 32);
  if (v17[55] < 0)
    operator delete(*v49);
  *(_OWORD *)v49 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
  *((_QWORD *)v17 + 6) = *((_QWORD *)&v59.__r_.__value_.__l + 2);
  v50 = *(void **)__p;
  if (*(_QWORD *)&__p[8] - *(_QWORD *)__p == 32)
  {
    std::string::basic_string<std::string_view,0>(&v59, *(_BYTE **)(*(_QWORD *)__p + 16), *(_QWORD *)(*(_QWORD *)__p + 24));
    v51 = (void **)(v17 + 56);
    if (v17[79] < 0)
      operator delete(*v51);
    *(_OWORD *)v51 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
    *((_QWORD *)v17 + 9) = *((_QWORD *)&v59.__r_.__value_.__l + 2);
    v50 = *(void **)__p;
  }
  *a4 |= 2u;
  if (v50)
  {
    *(_QWORD *)&__p[8] = v50;
    operator delete(v50);
  }
LABEL_70:
  v12 = 1;
  if ((SHIBYTE(v61) & 0x80000000) == 0)
    goto LABEL_102;
LABEL_101:
  operator delete((void *)__sz[0]);
LABEL_102:
  if ((SHIBYTE(v64) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v68) & 0x80000000) == 0)
      goto LABEL_104;
LABEL_24:
    operator delete(v66);
    if ((SHIBYTE(v71) & 0x80000000) == 0)
      goto LABEL_105;
    goto LABEL_9;
  }
  operator delete(v62);
  if (SHIBYTE(v68) < 0)
    goto LABEL_24;
LABEL_104:
  if ((SHIBYTE(v71) & 0x80000000) == 0)
  {
LABEL_105:
    if ((SHIBYTE(v74) & 0x80000000) == 0)
      return v12;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(__src);
  if (SHIBYTE(v74) < 0)
LABEL_10:
    operator delete(v72);
  return v12;
}

uint64_t webrtc::ParseRtpmapAttribute(uint64_t a1, unint64_t a2, uint64_t a3, std::string *a4, webrtc *a5, uint64_t a6)
{
  webrtc *v6;
  int v7;
  std::string *size;
  unsigned __int8 *v9;
  uint64_t v10;
  int64_t v12;
  uint64_t v15;
  size_t v16;
  void **p_p;
  __int32 *v18;
  __int32 *v19;
  std::string *v20;
  char *v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  std::string *v36;
  size_t v37;
  const std::string::value_type *v38;
  std::string *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  std::string *v46;
  size_t v47;
  const std::string::value_type *v48;
  std::string *v49;
  std::string v50;
  char *v51[2];
  char v52;
  unint64_t v53;
  std::string v54;
  unsigned int v55;
  void *v56;
  _BYTE *v57;
  __int32 __c;
  void *__p;
  size_t __len;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  std::string v66;

  v64 = a1;
  v65 = a2;
  if (a2 <= 1)
    abort();
  v12 = a2 - 2;
  if (v12 < 0)
    goto LABEL_80;
  v6 = a5;
  size = a4;
  v10 = a3;
  if (!a1)
  {
    if (v12)
      goto LABEL_80;
  }
  rtc::split(a1 + 2, v12, 0x20u, &v62);
  if ((unint64_t)(v63 - v62) <= 0x1F)
  {
    webrtc::ParseFailedExpectMinFieldNum(a1, a2, 2, a6);
    v15 = 0;
    goto LABEL_30;
  }
  __p = 0;
  __len = 0;
  v61 = 0;
  if (webrtc::GetValue(*(unsigned __int8 **)v62, *((_QWORD *)v62 + 1), "rtpmap", 6uLL, (uint64_t)&__p, a6))
  {
    __c = 0;
    if (SHIBYTE(v61) < 0)
    {
      v16 = __len;
      if ((__len & 0x8000000000000000) != 0)
        goto LABEL_80;
      p_p = (void **)__p;
      if (__len)
      {
        if (!__p)
          goto LABEL_80;
      }
    }
    else
    {
      v16 = HIBYTE(v61);
      p_p = &__p;
    }
    if (webrtc::GetValueFromString<int>(a1, a2, p_p, v16, &__c, a6))
    {
      v7 = __c;
      if (__c <= 0x7F)
      {
        v18 = (__int32 *)size->__r_.__value_.__r.__words[0];
        size = (std::string *)size->__r_.__value_.__l.__size_;
        v19 = wmemchr(v18, __c, ((char *)size - (char *)v18) >> 2);
        if (v19)
          v20 = (std::string *)v19;
        else
          v20 = size;
        if (v20 == size)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_sdp.cc");
          v15 = 1;
          goto LABEL_28;
        }
        if ((unint64_t)(v63 - v62) > 0x10)
        {
          size = &v66;
          rtc::split(*((_QWORD *)v62 + 2), *((_QWORD *)v62 + 3), 0x2Fu, (char **)&v56);
          if ((unint64_t)(v57 - (_BYTE *)v56 - 49) > 0xFFFFFFFFFFFFFFEELL)
          {
            v9 = *(unsigned __int8 **)v56;
            size = (std::string *)*((_QWORD *)v56 + 1);
            v55 = 0;
            v15 = 0;
            if (!webrtc::GetValueFromString<int>(a1, a2, *((void ***)v56 + 2), *((_QWORD *)v56 + 3), &v55, a6))goto LABEL_83;
            if ((_DWORD)v10)
            {
              if ((_DWORD)v10 == 1)
              {
                v10 = *((_QWORD *)v6 + 35);
                v31 = *((_QWORD *)v6 + 36);
                if (v10 != v31)
                {
                  v32 = v55;
                  while (1)
                  {
                    v33 = *(unsigned __int8 *)(v10 + 39);
                    v34 = *(char *)(v10 + 39) < 0 ? *(_QWORD *)(v10 + 24) : *(unsigned __int8 *)(v10 + 39);
                    if (v34 && v7 == *(_DWORD *)(v10 + 12))
                    {
                      v35 = (unsigned __int8 *)(v10 + 16);
                      if ((v33 & 0x80) != 0)
                      {
                        v33 = *(_QWORD *)(v10 + 24);
                        if (v33 < 0)
                          goto LABEL_80;
                        v35 = *(unsigned __int8 **)v35;
                        if (v33)
                        {
                          if (!v35)
                            goto LABEL_80;
                        }
                      }
                      if (!absl::EqualsIgnoreCase(v9, (uint64_t)size, v35, v33)
                        || v32 != *(_DWORD *)(v10 + 40))
                      {
                        break;
                      }
                    }
                    v10 += 216;
                    if (v10 == v31)
                      goto LABEL_66;
                  }
                  memset(&v66, 0, sizeof(v66));
                  v36 = rtc::StringBuilder::operator<<(&v66, "Duplicate ", 0xAuLL);
                  if (v7 >= 35)
                    v37 = 0;
                  else
                    v37 = 19;
                  if (v7 >= 35)
                    v38 = &byte_208EB9246;
                  else
                    v38 = "statically assigned";
                  v39 = rtc::StringBuilder::operator<<(v36, v38, v37);
                  rtc::StringBuilder::operator<<(v39, " payload type with conflicting codec name or clock rate.", 0x38uLL);
                  v54 = v66;
                  memset(&v66, 0, sizeof(v66));
                  webrtc::ParseFailed(a1, a2, (uint64_t)&v54, a6);
                  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v40 = (void *)v54.__r_.__value_.__r.__words[0];
LABEL_93:
                    operator delete(v40);
                  }
LABEL_94:
                  if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_26;
LABEL_24:
                  v22 = (char *)v66.__r_.__value_.__r.__words[0];
LABEL_25:
                  operator delete(v22);
                  goto LABEL_26;
                }
LABEL_66:
                webrtc::UpdateCodec(v7, (void **)v9, (size_t)size, v6);
              }
              goto LABEL_82;
            }
            v10 = 1;
            v53 = 1;
            if (v57 - (_BYTE *)v56 == 48)
            {
              if (!webrtc::GetValueFromString<unsigned long>(a1, a2, *((void ***)v56 + 4), *((_QWORD *)v56 + 5), &v53, a6))goto LABEL_26;
              v10 = v53;
              if (v53 >= 0x19)
              {
                std::string::basic_string[abi:sn180100]<0>(v51, "At most 24 channels are supported.");
                webrtc::ParseFailed(a1, a2, (uint64_t)v51, a6);
                if ((v52 & 0x80000000) == 0)
                  goto LABEL_26;
                v22 = v51[0];
                goto LABEL_25;
              }
            }
            v41 = *((_QWORD *)v6 + 35);
            v42 = *((_QWORD *)v6 + 36);
            while (v41 != v42)
            {
              v43 = *(unsigned __int8 *)(v41 + 39);
              if (*(char *)(v41 + 39) < 0)
                v44 = *(_QWORD *)(v41 + 24);
              else
                v44 = *(unsigned __int8 *)(v41 + 39);
              if (v44 && v7 == *(_DWORD *)(v41 + 12))
              {
                v45 = (unsigned __int8 *)(v41 + 16);
                if ((v43 & 0x80) != 0)
                {
                  v43 = *(_QWORD *)(v41 + 24);
                  if (v43 < 0)
                    goto LABEL_80;
                  v45 = *(unsigned __int8 **)v45;
                  if (v43)
                  {
                    if (!v45)
                      goto LABEL_80;
                  }
                }
                if ((absl::EqualsIgnoreCase(v9, (uint64_t)size, v45, v43) & 1) == 0)
                {
                  memset(&v66, 0, sizeof(v66));
                  v46 = rtc::StringBuilder::operator<<(&v66, "Duplicate ", 0xAuLL);
                  if (v7 >= 35)
                    v47 = 0;
                  else
                    v47 = 19;
                  if (v7 >= 35)
                    v48 = &byte_208EB9246;
                  else
                    v48 = "statically assigned";
                  v49 = rtc::StringBuilder::operator<<(v46, v48, v47);
                  rtc::StringBuilder::operator<<(v49, " payload type with conflicting codec name or clock rate.", 0x38uLL);
                  v50 = v66;
                  memset(&v66, 0, sizeof(v66));
                  webrtc::ParseFailed(a1, a2, (uint64_t)&v50, a6);
                  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v40 = (void *)v50.__r_.__value_.__r.__words[0];
                    goto LABEL_93;
                  }
                  goto LABEL_94;
                }
              }
              v41 += 216;
            }
LABEL_81:
            webrtc::UpdateCodec(v7, (void **)v9, (size_t)size, v55, v10, v6);
LABEL_82:
            v15 = 1;
LABEL_83:
            if (v56)
            {
              v57 = v56;
              operator delete(v56);
            }
            goto LABEL_28;
          }
          v21 = (char *)operator new(0x48uLL);
          if (v21 > "Expected format \"<encoding name>/<clock rate>[/<encodingparameters>]\"."
            || v21 + 70 <= "Expected format \"<encoding name>/<clock rate>[/<encodingparameters>]\".")
          {
            strcpy(v21, "Expected format \"<encoding name>/<clock rate>[/<encodingparameters>]\".");
            v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
            *(_OWORD *)&v66.__r_.__value_.__r.__words[1] = xmmword_208F1AB80;
            webrtc::ParseFailed(a1, a2, 0, (__n128 *)&v66, a6);
            if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_26:
              v15 = 0;
              goto LABEL_83;
            }
            goto LABEL_24;
          }
        }
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
    }
  }
  v15 = 0;
LABEL_28:
  if (SHIBYTE(v61) < 0)
    operator delete(__p);
LABEL_30:
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  return v15;
}

uint64_t webrtc::ParsePacketizationAttribute(size_t a1, unint64_t a2, int a3, webrtc *a4, uint64_t a5)
{
  uint64_t v9;
  size_t v10;
  void **p_src;
  int v12;
  void **v13;
  int v15;
  const cricket::Codec *v16;
  const cricket::Codec *v17;
  const cricket::Codec *v18;
  __int16 v20;
  unsigned int v21;
  void *__src;
  size_t __len;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  void *__p[2];
  uint64_t v28;
  void (**v29)(cricket::Codec *__hidden);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[17];
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  _BYTE *v41;
  _BYTE v42[40];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a3 != 1)
    return 1;
  rtc::split(a1, a2, 0x20u, (char **)&v25);
  if ((unint64_t)(v26 - (_BYTE *)v25) <= 0x1F)
  {
    webrtc::ParseFailedGetValue(a1, a2, "packetization", 0xDuLL, a5);
    v9 = 0;
    goto LABEL_28;
  }
  __src = 0;
  __len = 0;
  v24 = 0;
  if (!webrtc::GetValue(*(unsigned __int8 **)v25, *((_QWORD *)v25 + 1), "packetization", 0xDuLL, (uint64_t)&__src, a5))goto LABEL_26;
  v21 = 0;
  if (SHIBYTE(v24) < 0)
  {
    v10 = __len;
    if ((__len & 0x8000000000000000) != 0)
      goto LABEL_43;
    p_src = (void **)__src;
    if (__len)
    {
      if (!__src)
        goto LABEL_43;
    }
  }
  else
  {
    v10 = HIBYTE(v24);
    p_src = &__src;
  }
  if (!webrtc::GetValueFromString<int>(a1, a2, p_src, v10, &v21, a5) || (v12 = v21, v21 > 0x7F))
  {
LABEL_26:
    v9 = 0;
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  if ((unint64_t)(v26 - (_BYTE *)v25) <= 0x10)
    goto LABEL_43;
  if (*((_QWORD *)v25 + 3) != 3)
    goto LABEL_41;
  v13 = (void **)*((_QWORD *)v25 + 2);
  if (*(unsigned __int16 *)v13 != *(unsigned __int16 *)"raw"
    || *((unsigned __int8 *)v13 + 2) != cricket::kPacketizationParamRaw[2])
  {
    goto LABEL_41;
  }
  v15 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)a4 + 16))(a4);
  v17 = (const cricket::Codec *)*((_QWORD *)a4 + 35);
  v18 = (const cricket::Codec *)*((_QWORD *)a4 + 36);
  if (v17 == v18)
  {
LABEL_23:
    if (v15)
    {
      HIBYTE(v28) = 0;
      LOBYTE(__p[0]) = 0;
      cricket::CreateVideoCodec(v12, (unsigned __int8 *)__p, (uint64_t)&v29);
      if (SHIBYTE(v28) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v29 = &off_24C0B1418;
      v30 = 0;
      v31 = v12;
      v32 = 0;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v34 = 0;
      v33 = 0;
      *(_WORD *)v35 = 0;
      v41 = v42;
      memset(v42, 0, sizeof(v42));
    }
  }
  else
  {
    while (*((_DWORD *)v17 + 3) != v12)
    {
      v17 = (const cricket::Codec *)((char *)v17 + 216);
      if (v17 == v18)
        goto LABEL_23;
    }
    cricket::Codec::Codec((cricket::Codec *)&v29, v17);
  }
  HIBYTE(v28) = 3;
  if (__p <= v13 && (void **)((char *)__p + 3) > v13)
LABEL_43:
    __break(1u);
  v20 = *(_WORD *)v13;
  WORD1(__p[0]) = *((unsigned __int8 *)v13 + 2);
  LOWORD(__p[0]) = v20;
  if (v37)
  {
    if (SHIBYTE(v36) < 0)
      operator delete(*(void **)&v35[1]);
    *(_OWORD *)&v35[1] = *(_OWORD *)__p;
    v36 = v28;
  }
  else
  {
    *(_OWORD *)&v35[1] = *(_OWORD *)__p;
    v36 = v28;
    v37 = 1;
  }
  webrtc::AddOrReplaceCodec(a4, (cricket::MediaContentDescription *)&v29, v16);
  cricket::Codec::~Codec((cricket::Codec *)&v29);
LABEL_41:
  v9 = 1;
  if (SHIBYTE(v24) < 0)
LABEL_27:
    operator delete(__src);
LABEL_28:
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  return v9;
}

uint64_t webrtc::ParseRtcpFbAttribute(size_t a1, unint64_t a2, unsigned int a3, webrtc *a4, uint64_t a5)
{
  uint64_t v5;
  size_t v10;
  _BYTE *p_src;
  size_t v12;
  int v13;
  void **v14;
  int ValueFrom;
  void **v16;
  size_t v17;
  char *v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string::size_type v22;
  std::string::size_type size;
  std::string *v24;
  std::string::size_type v26;
  void **v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  const cricket::Codec *v32;
  const cricket::Codec *v33;
  const cricket::Codec *v34;
  void *v36[2];
  unint64_t v37;
  std::string v38;
  std::string v39;
  unsigned int v40;
  void *__src;
  size_t __len;
  uint64_t v43;
  void *v44;
  char *v45;
  void *__p;
  char v47;
  void (**v48)(cricket::Codec *__hidden);
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  _QWORD *v59;
  _QWORD v60[2];
  _QWORD v61[5];

  v61[3] = *MEMORY[0x24BDAC8D0];
  if (a3 > 1)
    return 1;
  rtc::split(a1, a2, 0x20u, (char **)&v44);
  if ((unint64_t)(v45 - (_BYTE *)v44) > 0x1F)
  {
    __src = 0;
    __len = 0;
    v43 = 0;
    if (!webrtc::GetValue(*(unsigned __int8 **)v44, *((_QWORD *)v44 + 1), "rtcp-fb", 7uLL, (uint64_t)&__src, a5))
    {
      v5 = 0;
      goto LABEL_76;
    }
    v40 = -1;
    v10 = HIBYTE(v43);
    if (SHIBYTE(v43) < 0)
    {
      v12 = __len;
      if ((__len & 0x8000000000000000) != 0)
        goto LABEL_84;
      p_src = __src;
      if (__len)
      {
        if (!__src)
          goto LABEL_84;
      }
    }
    else
    {
      p_src = &__src;
      v12 = HIBYTE(v43);
    }
    if (v12 == 1 && *p_src == 42)
    {
      v13 = -1;
    }
    else
    {
      if (v43 < 0)
      {
        v10 = __len;
        if ((__len & 0x8000000000000000) != 0)
          goto LABEL_84;
        v14 = (void **)__src;
        if (__len)
        {
          if (!__src)
            goto LABEL_84;
        }
      }
      else
      {
        v14 = &__src;
      }
      ValueFrom = webrtc::GetValueFromString<int>(a1, a2, v14, v10, &v40, a5);
      v5 = 0;
      if (!ValueFrom || (v13 = v40, v40 > 0x7F))
      {
LABEL_76:
        if (SHIBYTE(v43) < 0)
          operator delete(__src);
        goto LABEL_78;
      }
    }
    if ((unint64_t)(v45 - (_BYTE *)v44) <= 0x10)
      goto LABEL_84;
    v16 = (void **)*((_QWORD *)v44 + 2);
    v17 = *((_QWORD *)v44 + 3);
    *((_BYTE *)&v39.__r_.__value_.__s + 23) = 0;
    v39.__r_.__value_.__s.__data_[0] = 0;
    v18 = (char *)v44 + 32;
    if ((char *)v44 + 32 != v45)
    {
      while (1)
      {
        v19 = *(const std::string::value_type **)v18;
        v20 = *((_QWORD *)v18 + 1);
        if (!*(_QWORD *)v18 && v20 != 0)
          break;
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = 22;
        else
          v22 = (v39.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        else
          size = v39.__r_.__value_.__l.__size_;
        if (v22 - size < v20)
        {
          std::string::__grow_by_and_replace(&v39, v22, size + v20 - v22, size, size, 0, *((_QWORD *)v18 + 1), v19);
        }
        else if (v20)
        {
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &v39;
          else
            v24 = (std::string *)v39.__r_.__value_.__r.__words[0];
          if ((char *)v24 + size <= v19 && (char *)v24 + size + v20 > v19)
            break;
          memmove((char *)v24 + size, *(const void **)v18, *((_QWORD *)v18 + 1));
          v26 = size + v20;
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            v39.__r_.__value_.__l.__size_ = size + v20;
          else
            *((_BYTE *)&v39.__r_.__value_.__s + 23) = v26 & 0x7F;
          v24->__r_.__value_.__s.__data_[v26] = 0;
        }
        v18 += 16;
        if (v18 == v45)
          goto LABEL_51;
      }
LABEL_84:
      __break(1u);
    }
LABEL_51:
    if (v17 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v17 > 0x16)
    {
      v29 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v29 = v17 | 7;
      v30 = v29 + 1;
      v27 = (void **)operator new(v29 + 1);
      v36[1] = (void *)v17;
      v37 = v30 | 0x8000000000000000;
      v36[0] = v27;
      v28 = (void **)((char *)v27 + v17);
      if (v27 > v16)
        goto LABEL_59;
    }
    else
    {
      HIBYTE(v37) = v17;
      v27 = v36;
      v28 = (void **)((char *)v36 + v17);
      if (v36 > v16)
        goto LABEL_59;
    }
    if (v28 > v16)
      goto LABEL_84;
LABEL_59:
    if (v17)
      memmove(v27, v16, v17);
    *(_BYTE *)v28 = 0;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v38, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
    else
      v38 = v39;
    v31 = (*(uint64_t (**)(webrtc *))(*(_QWORD *)a4 + 16))(a4);
    v32 = (const cricket::Codec *)*((_QWORD *)a4 + 35);
    v33 = (const cricket::Codec *)*((_QWORD *)a4 + 36);
    if (v32 == v33)
    {
LABEL_67:
      if (v31)
      {
        v47 = 0;
        LOBYTE(__p) = 0;
        cricket::CreateVideoCodec(v13, (unsigned __int8 *)&__p, (uint64_t)&v48);
        if (v47 < 0)
          operator delete(__p);
      }
      else
      {
        v48 = &off_24C0B1418;
        v49 = 0;
        v50 = v13;
        v51 = 0;
        v55 = 0;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v60[1] = 0;
        memset(v61, 0, 24);
        v53 = 0;
        v52 = 0;
        v54 = 0;
        v59 = v60;
        v60[0] = 0;
      }
    }
    else
    {
      while (*((_DWORD *)v32 + 3) != v13)
      {
        v32 = (const cricket::Codec *)((char *)v32 + 216);
        if (v32 == v33)
          goto LABEL_67;
      }
      cricket::Codec::Codec((cricket::Codec *)&v48, v32);
    }
    cricket::FeedbackParams::Add((uint64_t)v61, (uint64_t)v36);
    webrtc::AddOrReplaceCodec(a4, (cricket::MediaContentDescription *)&v48, v34);
    cricket::Codec::~Codec((cricket::Codec *)&v48);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v38.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37) & 0x80000000) == 0)
      {
LABEL_74:
        if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_75:
          v5 = 1;
          goto LABEL_76;
        }
LABEL_83:
        operator delete(v39.__r_.__value_.__l.__data_);
        goto LABEL_75;
      }
    }
    else if ((SHIBYTE(v37) & 0x80000000) == 0)
    {
      goto LABEL_74;
    }
    operator delete(v36[0]);
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_83;
  }
  webrtc::ParseFailedGetValue(a1, a2, "rtcp-fb", 7uLL, a5);
  v5 = 0;
LABEL_78:
  if (v44)
  {
    v45 = (char *)v44;
    operator delete(v44);
  }
  return v5;
}

uint64_t webrtc::ParseMsidAttribute(uint64_t a1, unint64_t a2, std::string **a3, uint64_t a4, uint64_t a5)
{
  int64_t v6;
  unint64_t v11;
  char *v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  size_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  size_t v35;
  size_t v36;
  char *v38;
  uint64_t v39;
  std::string *v40;
  std::string *v41;
  void *v42;
  size_t v44;
  size_t v45;
  char v47;
  __int128 v48;
  unsigned __int8 *v49;
  const std::string::value_type *v50;
  size_t v51;
  size_t v52;
  int v53;
  size_t *v54;
  std::string *v55;
  std::string *v56;
  size_t v57;
  size_t v58;
  const void *v59;
  std::string::size_type size;
  int v61;
  std::string *v62;
  char *v63;
  std::string::size_type v64;
  int v65;
  std::string *v66;
  size_t *v67;
  uint64_t v68;
  __int128 v69;
  std::string *v70;
  size_t __n[2];
  int64_t v72;
  void *v73;
  std::string *v74;
  char *v75;
  void *__p;
  __int128 v77;

  v73 = 0;
  v74 = 0;
  v75 = 0;
  if (a2 <= 1)
LABEL_159:
    abort();
  v6 = a2 - 2;
  if (v6 < 0 || !a1 && v6)
    goto LABEL_158;
  v11 = rtc::tokenize(a1 + 2, v6, 0x20u, (uint64_t)&v73);
  if (v11 - 3 > 0xFFFFFFFFFFFFFFFDLL)
  {
    if (v11 != 1)
      goto LABEL_46;
    if (*(_BYTE *)(a2 + a1 - 1) == 32)
    {
      v14 = (char *)operator new(0x28uLL);
      if (v14 > "Missing track ID in msid attribute." || v14 + 35 <= "Missing track ID in msid attribute.")
      {
        strcpy(v14, "Missing track ID in msid attribute.");
        __p = v14;
        v13 = xmmword_208F051B0;
        goto LABEL_67;
      }
      goto LABEL_158;
    }
    if (*(char *)(a4 + 23) < 0)
    {
      v16 = v74;
      v15 = (unint64_t)v75;
      if (*(_QWORD *)(a4 + 8))
      {
LABEL_16:
        if ((unint64_t)v16 >= v15)
        {
          v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v73, a4);
        }
        else
        {
          if (!v16)
            goto LABEL_158;
          if ((*(_BYTE *)(a4 + 23) & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
          }
          else
          {
            v17 = *(_OWORD *)a4;
            v16->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 16);
            *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
          }
          v18 = v16 + 1;
        }
        goto LABEL_45;
      }
    }
    else
    {
      v16 = v74;
      v15 = (unint64_t)v75;
      if (*(_BYTE *)(a4 + 23))
        goto LABEL_16;
    }
    if ((unint64_t)v16 >= v15)
    {
      v19 = (std::string *)v73;
      v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (_BYTE *)v73) >> 3);
      v21 = v20 + 1;
      if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_159;
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v73) >> 3);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0x555555555555555)
        v23 = 0xAAAAAAAAAAAAAAALL;
      else
        v23 = v21;
      if (!v23)
        goto LABEL_158;
      if (v23 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v24 = 24 * v23;
      v25 = (char *)operator new(24 * v23);
      v26 = &v25[v24];
      v27 = (std::string *)&v25[24 * v20];
      v27->__r_.__value_.__r.__words[0] = 0;
      *((_BYTE *)&v27->__r_.__value_.__s + 23) = 0;
      v18 = v27 + 1;
      if (v16 == v19)
      {
        v73 = &v25[24 * v20];
        v74 = v27 + 1;
        v75 = v26;
      }
      else
      {
        do
        {
          v28 = *(_OWORD *)&v16[-1].__r_.__value_.__l.__data_;
          v27[-1].__r_.__value_.__r.__words[2] = v16[-1].__r_.__value_.__r.__words[2];
          *(_OWORD *)&v27[-1].__r_.__value_.__l.__data_ = v28;
          --v27;
          v16[-1].__r_.__value_.__l.__size_ = 0;
          v16[-1].__r_.__value_.__r.__words[2] = 0;
          v16[-1].__r_.__value_.__r.__words[0] = 0;
          --v16;
        }
        while (v16 != v19);
        v16 = (std::string *)v73;
        v29 = v74;
        v73 = v27;
        v74 = v18;
        v75 = v26;
        while (v29 != v16)
        {
          if (SHIBYTE(v29[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29[-1].__r_.__value_.__l.__data_);
          --v29;
        }
      }
      if (v16)
        operator delete(v16);
    }
    else
    {
      if (!v16)
        goto LABEL_158;
      v16->__r_.__value_.__r.__words[0] = 0;
      *((_BYTE *)&v16->__r_.__value_.__s + 23) = 0;
      v18 = v16 + 1;
    }
LABEL_45:
    v74 = v18;
LABEL_46:
    v30 = *(unsigned __int8 *)(a4 + 23);
    if (*(char *)(a4 + 23) < 0)
      v31 = *(_QWORD *)(a4 + 8);
    else
      v31 = *(unsigned __int8 *)(a4 + 23);
    v32 = (char *)v73;
    v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (_BYTE *)v73) >> 3);
    if (v31)
    {
      if (v33 <= 1)
        goto LABEL_158;
      v34 = (char *)v73 + 24;
      if (*((char *)v73 + 47) < 0)
      {
        v35 = *((_QWORD *)v73 + 4);
        if ((v35 & 0x8000000000000000) != 0)
          goto LABEL_158;
        v34 = (_QWORD *)*v34;
        if (v35)
        {
          if (!v34)
            goto LABEL_158;
        }
      }
      else
      {
        v35 = *((unsigned __int8 *)v73 + 47);
      }
      if ((v30 & 0x80) != 0)
      {
        v44 = *(_QWORD *)(a4 + 8);
        if (v35 >= v44)
          v45 = *(_QWORD *)(a4 + 8);
        else
          v45 = v35;
        if (memcmp(*(const void **)a4, v34, v45) || v35 != v44)
        {
LABEL_64:
          v38 = (char *)operator new(0x40uLL);
          if (v38 > "Two different track IDs in msid attribute in one m= section"
            || v38 + 59 <= "Two different track IDs in msid attribute in one m= section")
          {
            strcpy(v38, "Two different track IDs in msid attribute in one m= section");
            __p = v38;
            v13 = xmmword_208F0ABB0;
            goto LABEL_67;
          }
          goto LABEL_158;
        }
      }
      else
      {
        if (v35 >= v30)
          v36 = *(unsigned __int8 *)(a4 + 23);
        else
          v36 = v35;
        if (memcmp((const void *)a4, v34, v36) || v35 != v30)
          goto LABEL_64;
      }
    }
    if (v33 <= 1)
      goto LABEL_158;
    if (v32 + 24 != (char *)a4)
    {
      v47 = v32[47];
      if ((v30 & 0x80) == 0)
      {
        if (v32[47] < 0)
        {
          std::string::__assign_no_alias<true>((_QWORD *)a4, *((char **)v32 + 3), *((_QWORD *)v32 + 4));
          __n[0] = 0;
          __n[1] = 0;
          v72 = 0;
          v49 = (unsigned __int8 *)v73;
          if (v74 == v73)
            goto LABEL_158;
        }
        else
        {
          v48 = *(_OWORD *)(v32 + 24);
          *(_QWORD *)(a4 + 16) = *((_QWORD *)v32 + 5);
          *(_OWORD *)a4 = v48;
          __n[0] = 0;
          __n[1] = 0;
          v72 = 0;
          v49 = (unsigned __int8 *)v73;
          if (v74 == v73)
            goto LABEL_158;
        }
        goto LABEL_101;
      }
      if (v47 >= 0)
        v50 = v32 + 24;
      else
        v50 = (const std::string::value_type *)*((_QWORD *)v32 + 3);
      if (v47 >= 0)
        v51 = v32[47];
      else
        v51 = *((_QWORD *)v32 + 4);
      std::string::__assign_no_alias<false>((std::string *)a4, v50, v51);
    }
    __n[0] = 0;
    __n[1] = 0;
    v72 = 0;
    v49 = (unsigned __int8 *)v73;
    if (v74 == v73)
      goto LABEL_158;
LABEL_101:
    if ((char)v49[23] < 0)
    {
      v52 = *((_QWORD *)v49 + 1);
      if ((v52 & 0x8000000000000000) != 0)
        goto LABEL_158;
      v49 = *(unsigned __int8 **)v49;
      if (v52)
      {
        if (!v49)
          goto LABEL_158;
      }
    }
    else
    {
      v52 = v49[23];
    }
    if (webrtc::GetValue(v49, v52, "msid", 4uLL, (uint64_t)__n, a5))
    {
      v53 = SHIBYTE(v72);
      if (v72 < 0)
      {
        if (__n[1])
        {
          v54 = (size_t *)__n[0];
          if (__n[1] != 1)
          {
LABEL_114:
            v56 = *a3;
            v55 = a3[1];
            if (*a3 != v55)
            {
              v57 = __n[1];
              if (v72 >= 0)
                v58 = HIBYTE(v72);
              else
                v58 = __n[1];
              if (SHIBYTE(v72) < 0)
              {
                v59 = (const void *)__n[0];
                while (1)
                {
                  size = HIBYTE(v56->__r_.__value_.__r.__words[2]);
                  v61 = (char)size;
                  if ((size & 0x80u) != 0)
                    size = v56->__r_.__value_.__l.__size_;
                  if (v58 == size)
                  {
                    v62 = v61 >= 0 ? v56 : (std::string *)v56->__r_.__value_.__r.__words[0];
                    if (!memcmp(v59, v62, v57))
                      break;
                  }
                  if (++v56 == v55)
                    goto LABEL_148;
                }
LABEL_156:
                v39 = 1;
                if ((SHIBYTE(v72) & 0x80000000) == 0)
                  goto LABEL_70;
                goto LABEL_157;
              }
              do
              {
                v64 = HIBYTE(v56->__r_.__value_.__r.__words[2]);
                v65 = (char)v64;
                if ((v64 & 0x80u) != 0)
                  v64 = v56->__r_.__value_.__l.__size_;
                if (v58 == v64)
                {
                  if (v65 >= 0)
                    v66 = v56;
                  else
                    v66 = (std::string *)v56->__r_.__value_.__r.__words[0];
                  v67 = __n;
                  v68 = HIBYTE(v72);
                  while (*(unsigned __int8 *)v67 == v66->__r_.__value_.__s.__data_[0])
                  {
                    v67 = (size_t *)((char *)v67 + 1);
                    v66 = (std::string *)((char *)v66 + 1);
                    if (!--v68)
                      goto LABEL_156;
                  }
                }
                ++v56;
              }
              while (v56 != v55);
            }
LABEL_148:
            if (v55 >= a3[2])
            {
              v70 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)a3, (uint64_t)__n);
LABEL_155:
              a3[1] = v70;
              goto LABEL_156;
            }
            if (v55)
            {
              if (v53 < 0)
              {
                std::string::__init_copy_ctor_external(v55, (const std::string::value_type *)__n[0], __n[1]);
              }
              else
              {
                v69 = *(_OWORD *)__n;
                v55->__r_.__value_.__r.__words[2] = v72;
                *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v69;
              }
              v70 = v55 + 1;
              goto LABEL_155;
            }
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }
LABEL_113:
          if (*(_BYTE *)v54 == 45)
            goto LABEL_156;
          goto LABEL_114;
        }
      }
      else if (HIBYTE(v72))
      {
        v54 = __n;
        if (HIBYTE(v72) != 1)
          goto LABEL_114;
        goto LABEL_113;
      }
      v63 = (char *)operator new(0x28uLL);
      if (v63 <= "Missing stream ID in msid attribute." && v63 + 36 > "Missing stream ID in msid attribute.")
        goto LABEL_158;
      strcpy(v63, "Missing stream ID in msid attribute.");
      __p = v63;
      v77 = xmmword_208F08620;
      webrtc::ParseFailed(a1, a2, 0, (__n128 *)&__p, a5);
      if (SHIBYTE(v77) < 0)
        operator delete(__p);
    }
    v39 = 0;
    if ((SHIBYTE(v72) & 0x80000000) == 0)
      goto LABEL_70;
LABEL_157:
    operator delete((void *)__n[0]);
    goto LABEL_70;
  }
  v12 = (char *)operator new(0x30uLL);
  if (v12 <= "Expected a stream ID and optionally a track ID"
    && v12 + 46 > "Expected a stream ID and optionally a track ID")
  {
    goto LABEL_158;
  }
  strcpy(v12, "Expected a stream ID and optionally a track ID");
  __p = v12;
  v13 = xmmword_208F1B0A0;
LABEL_67:
  v77 = v13;
  webrtc::ParseFailed(a1, a2, 0, (__n128 *)&__p, a5);
  if (SHIBYTE(v77) < 0)
    operator delete(__p);
  v39 = 0;
LABEL_70:
  v40 = (std::string *)v73;
  if (v73)
  {
    v41 = v74;
    v42 = v73;
    if (v74 != v73)
    {
      do
      {
        if (SHIBYTE(v41[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41[-1].__r_.__value_.__l.__data_);
        --v41;
      }
      while (v41 != v40);
      v42 = v73;
    }
    v74 = v40;
    operator delete(v42);
  }
  return v39;
}

std::string *std::vector<cricket::RidDescription>::push_back[abi:sn180100](uint64_t a1, const cricket::RidDescription *a2)
{
  std::string *result;

  result = *(std::string **)(a1 + 8);
  if ((unint64_t)result >= *(_QWORD *)(a1 + 16))
  {
    result = (std::string *)std::vector<cricket::RidDescription>::__push_back_slow_path<cricket::RidDescription>((const cricket::RidDescription **)a1, a2);
    *(_QWORD *)(a1 + 8) = result;
  }
  else if (result)
  {
    result = (std::string *)((char *)cricket::RidDescription::RidDescription(result, a2) + 80);
    *(_QWORD *)(a1 + 8) = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t webrtc::RTCErrorOr<cricket::RidDescription>::~RTCErrorOr(uint64_t a1)
{
  void *v2;

  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_5;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 96, *(_QWORD *)(a1 + 104));
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t cricket::SimulcastDescription::operator=(uint64_t a1, uint64_t **a2)
{
  if ((uint64_t **)a1 != a2)
  {
    std::vector<std::vector<cricket::SimulcastLayer>>::__assign_with_size[abi:sn180100]<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    std::vector<std::vector<cricket::SimulcastLayer>>::__assign_with_size[abi:sn180100]<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>(a1 + 24, a2[3], a2[4], 0xAAAAAAAAAAAAAAABLL * (a2[4] - a2[3]));
  }
  return a1;
}

uint64_t webrtc::RTCErrorOr<cricket::SimulcastDescription>::~RTCErrorOr(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
    cricket::SimulcastDescription::~SimulcastDescription((cricket::SimulcastDescription *)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

char *std::vector<webrtc::SsrcInfo>::__push_back_slow_path<webrtc::SsrcInfo const&>(char **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v5 = 0x333333333333333;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_34:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x333333333333333)
    goto LABEL_34;
  v7 = 80 * v5;
  v8 = (char *)operator new(80 * v5);
  v9 = &v8[80 * v2];
  *(_DWORD *)v9 = *(_DWORD *)a2;
  v10 = (std::string *)(v9 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v11 = (std::string *)&v8[80 * v2 + 32];
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_11:
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 32);
      v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
      v12 = (std::string *)&v8[80 * v2 + 56];
      if ((*(char *)(a2 + 79) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_16;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v9 + 3) = *(_QWORD *)(a2 + 24);
    v11 = (std::string *)&v8[80 * v2 + 32];
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      goto LABEL_11;
  }
  std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  v12 = (std::string *)&v8[80 * v2 + 56];
  if ((*(char *)(a2 + 79) & 0x80000000) == 0)
  {
LABEL_12:
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 56);
    v12->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 72);
    v13 = &v8[v7];
    v14 = v9 + 80;
    v15 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
      goto LABEL_28;
    goto LABEL_17;
  }
LABEL_16:
  std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  v13 = &v8[v7];
  v14 = v9 + 80;
  v15 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
LABEL_17:
      v17 = *((_DWORD *)v16 - 20);
      v16 -= 80;
      *((_DWORD *)v9 - 20) = v17;
      v9 -= 80;
      v18 = *(_OWORD *)(v16 + 8);
      *((_QWORD *)v9 + 3) = *((_QWORD *)v16 + 3);
      *(_OWORD *)(v9 + 8) = v18;
      *((_QWORD *)v16 + 2) = 0;
      *((_QWORD *)v16 + 3) = 0;
      *((_QWORD *)v16 + 1) = 0;
      v19 = *((_OWORD *)v16 + 2);
      *((_QWORD *)v9 + 6) = *((_QWORD *)v16 + 6);
      *((_OWORD *)v9 + 2) = v19;
      *((_QWORD *)v16 + 5) = 0;
      *((_QWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 4) = 0;
      v20 = *(_OWORD *)(v16 + 56);
      *((_QWORD *)v9 + 9) = *((_QWORD *)v16 + 9);
      *(_OWORD *)(v9 + 56) = v20;
      *((_QWORD *)v16 + 8) = 0;
      *((_QWORD *)v16 + 9) = 0;
      *((_QWORD *)v16 + 7) = 0;
    }
    while (v16 != v15);
    v16 = *a1;
    v21 = a1[1];
    *a1 = v9;
    a1[1] = v14;
    a1[2] = v13;
    while (1)
    {
      if (v21 == v16)
        goto LABEL_29;
      if (*(v21 - 1) < 0)
      {
        operator delete(*((void **)v21 - 3));
        if (*(v21 - 25) < 0)
        {
LABEL_26:
          operator delete(*((void **)v21 - 6));
          if ((*(v21 - 49) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_27;
        }
      }
      else if (*(v21 - 25) < 0)
      {
        goto LABEL_26;
      }
      if ((*(v21 - 49) & 0x80000000) == 0)
        goto LABEL_19;
LABEL_27:
      operator delete(*((void **)v21 - 9));
LABEL_19:
      v21 -= 80;
    }
  }
LABEL_28:
  *a1 = v9;
  a1[1] = v14;
  a1[2] = v13;
LABEL_29:
  if (v16)
    operator delete(v16);
  return v14;
}

BOOL webrtc::GetValueFromString<unsigned long>(uint64_t a1, unint64_t a2, void **__src, size_t __len, unint64_t *a5, uint64_t a6)
{
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  std::string *v17;
  void **v18;
  unint64_t v19;
  int v20;
  std::string::size_type v21;
  std::string::size_type size;
  std::string *v23;
  _BYTE *v24;
  std::string::size_type v25;
  char v26;
  std::string v28;
  _BYTE __p[23];
  char v30;

  v12 = rtc::string_to_number_internal::ParseUnsigned(__src, __len, 10);
  v14 = v13;
  if (!v13)
  {
    memset(&v28, 0, sizeof(v28));
    if (&v28 > (std::string *)"Invalid value: " || (char *)&v28.__r_.__value_.__r.__words[1] + 7 <= "Invalid value: ")
    {
      strcpy((char *)&v28, "Invalid value: ");
      *((_BYTE *)&v28.__r_.__value_.__s + 23) = 15;
      if (__src || !__len)
      {
        if (__len <= 7)
        {
          if (!__len)
          {
            LODWORD(v19) = 15;
            goto LABEL_24;
          }
          if ((char *)&v28.__r_.__value_.__r.__words[1] + 7 > (char *)__src
            || (char *)&v28.__r_.__value_.__r.__words[1] + __len + 7 <= (char *)__src)
          {
            memmove((char *)&v28.__r_.__value_.__r.__words[1] + 7, __src, __len);
            if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
              v28.__r_.__value_.__l.__size_ = __len + 15;
            else
              *((_BYTE *)&v28.__r_.__value_.__s + 23) = __len + 15;
            v28.__r_.__value_.__s.__data_[__len + 15] = 0;
            LODWORD(v19) = HIBYTE(v28.__r_.__value_.__r.__words[2]);
            goto LABEL_24;
          }
        }
        else
        {
          if (__len - 0x7FFFFFFFFFFFFFE8 <= 0x800000000000001ELL)
            goto LABEL_46;
          v15 = 44;
          if (__len + 15 > 0x2C)
            v15 = __len + 15;
          v16 = (v15 | 7) + 1;
          v17 = (std::string *)operator new(v16);
          v18 = (void **)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
          if (&v28 < v17 || (std::string *)((char *)&v17->__r_.__value_.__r.__words[1] + 7) <= &v28)
          {
            qmemcpy(v17, "Invalid value: ", 15);
            if (v18 > __src || (void **)((char *)v18 + __len) <= __src)
            {
              memcpy(v18, __src, __len);
              v28.__r_.__value_.__l.__size_ = __len + 15;
              v28.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
              v28.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
              v17->__r_.__value_.__s.__data_[__len + 15] = 0;
              v19 = (v16 | 0x8000000000000000) >> 56;
LABEL_24:
              v20 = (char)v19;
              if ((v19 & 0x80u) == 0)
                v21 = 22;
              else
                v21 = (v28.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v19 & 0x80u) == 0)
                size = v19;
              else
                size = v28.__r_.__value_.__l.__size_;
              if (v21 == size)
              {
                std::string::__grow_by_and_replace(&v28, v21, 1uLL, v21, v21, 0, 1uLL, ".");
                goto LABEL_40;
              }
              v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
              if (v20 >= 0)
                v23 = &v28;
              v24 = (char *)v23 + size;
              if ((char *)v23 + size > "." || v24 + 1 <= ".")
              {
                *v24 = 46;
                v25 = size + 1;
                if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
                  v28.__r_.__value_.__l.__size_ = v25;
                else
                  *((_BYTE *)&v28.__r_.__value_.__s + 23) = v25 & 0x7F;
                v23->__r_.__value_.__s.__data_[v25] = 0;
LABEL_40:
                *(_OWORD *)__p = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
                *(_QWORD *)&__p[15] = *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 7);
                v26 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
                memset(&v28, 0, sizeof(v28));
                v30 = v26;
                webrtc::ParseFailed(a1, a2, 0, (__n128 *)__p, a6);
                if (v30 < 0)
                {
                  operator delete(*(void **)__p);
                  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    return v14 != 0;
                }
                else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  return v14 != 0;
                }
                operator delete(v28.__r_.__value_.__l.__data_);
                return v14 != 0;
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_46:
    abort();
  }
  *a5 = v12;
  return v14 != 0;
}

uint64_t std::__tree<std::string>::__count_unique<std::string>(uint64_t result, const void **a2)
{
  uint64_t v3;
  size_t v4;
  size_t v5;
  const void **v6;
  BOOL v7;
  char v8;
  size_t v9;
  const void **v10;
  size_t v11;
  const void *v12;
  size_t v13;
  size_t v14;
  const void **v15;
  size_t v16;
  size_t v17;
  int v18;

  if (result)
  {
    v3 = result;
    v4 = *((unsigned __int8 *)a2 + 23);
    v6 = (const void **)*a2;
    v5 = (size_t)a2[1];
    if (v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    v8 = !v7;
    while (1)
    {
      result = (uint64_t)a2;
      v9 = v4;
      if ((v4 & 0x80) != 0)
      {
        if ((v5 & 0x8000000000000000) != 0)
          goto LABEL_40;
        result = (uint64_t)v6;
        v9 = v5;
        if ((v8 & 1) == 0)
          goto LABEL_40;
      }
      v10 = (const void **)(v3 + 32);
      v11 = *(unsigned __int8 *)(v3 + 55);
      v12 = (const void *)(v3 + 32);
      v13 = v11;
      if (*(char *)(v3 + 55) < 0)
      {
        v13 = *(_QWORD *)(v3 + 40);
        if ((v13 & 0x8000000000000000) != 0 || (v12 = *v10, v13) && !v12)
        {
LABEL_40:
          __break(1u);
          return result;
        }
      }
      if (v13 >= v9)
        v14 = v9;
      else
        v14 = v13;
      result = memcmp((const void *)result, v12, v14);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) != 0)
          goto LABEL_10;
      }
      else if (v9 < v13)
      {
        goto LABEL_10;
      }
      if ((v11 & 0x80) != 0)
      {
        v11 = *(_QWORD *)(v3 + 40);
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_40;
        v10 = (const void **)*v10;
        if (v11)
        {
          if (!v10)
            goto LABEL_40;
        }
      }
      v15 = a2;
      v16 = v4;
      if ((v4 & 0x80) != 0)
      {
        if ((v5 & 0x8000000000000000) != 0)
          goto LABEL_40;
        v15 = v6;
        v16 = v5;
        if ((v8 & 1) == 0)
          goto LABEL_40;
      }
      if (v16 >= v11)
        v17 = v11;
      else
        v17 = v16;
      v18 = memcmp(v10, v15, v17);
      if (v18)
      {
        if ((v18 & 0x80000000) == 0)
          return 1;
      }
      else if (v11 >= v16)
      {
        return 1;
      }
      v3 += 8;
LABEL_10:
      v3 = *(_QWORD *)v3;
      if (!v3)
        return 0;
    }
  }
  return result;
}

void webrtc::RemoveRidsFromSimulcastLayerList(_QWORD *a1, uint64_t a2, __int128 **a3, __int128 **a4)
{
  __int128 **v4;
  _QWORD *v5;
  void *v6;
  __int128 *v7;
  std::string *v8;
  std::string *v9;
  uint64_t *v10;
  size_t v11;
  const std::string::value_type *v12;
  size_t v13;
  BOOL v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  size_t v20;
  int v21;
  _QWORD *v22;
  size_t v23;
  size_t v25;
  int v26;
  const std::string::value_type *v27;
  _QWORD *v28;
  size_t v29;
  size_t v30;
  int v31;
  __int128 v32;
  std::string *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  unint64_t v45;
  __int128 v46;
  std::string *v47;
  const std::string::value_type **v48;
  std::string *v49;
  std::string *v50;
  __int128 **v53;
  __int128 *v54;
  void *__p;
  std::string *v56;
  unint64_t v57;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3 == a4)
    return;
  v4 = a4;
  v5 = (_QWORD *)(a2 + 8);
  while (2)
  {
    __p = 0;
    v56 = 0;
    v57 = 0;
    v7 = *a3;
    v54 = a3[1];
    if (*a3 == v54)
      goto LABEL_5;
    v53 = a3;
    v8 = 0;
    while (2)
    {
      v10 = (uint64_t *)*v5;
      if (!*v5)
        goto LABEL_73;
      v11 = *((unsigned __int8 *)v7 + 23);
      v12 = *(const std::string::value_type **)v7;
      v13 = *((_QWORD *)v7 + 1);
      if (v13)
        v14 = v12 == 0;
      else
        v14 = 0;
      v15 = !v14;
      if ((*((_BYTE *)v7 + 23) & 0x80) == 0)
      {
        v16 = v5;
        while (1)
        {
          v17 = v10 + 4;
          if (*((char *)v10 + 55) < 0)
          {
            v18 = v10[5];
            if ((v18 & 0x8000000000000000) != 0)
              goto LABEL_110;
            v17 = (_QWORD *)*v17;
            if (v18 && v17 == 0)
              goto LABEL_110;
          }
          else
          {
            v18 = *((unsigned __int8 *)v10 + 55);
          }
          if (v11 >= v18)
            v20 = v18;
          else
            v20 = v11;
          v21 = memcmp(v17, v7, v20);
          if (v21)
          {
            if (v21 < 0)
              goto LABEL_21;
LABEL_36:
            v16 = v10;
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_57;
          }
          else
          {
            if (v18 >= v11)
              goto LABEL_36;
LABEL_21:
            v10 = (uint64_t *)v10[1];
            if (!v10)
              goto LABEL_57;
          }
        }
      }
      if ((v13 & 0x8000000000000000) != 0 || !v15)
        goto LABEL_110;
      v16 = v5;
      do
      {
        while (1)
        {
          v22 = v10 + 4;
          if (*((char *)v10 + 55) < 0)
          {
            v23 = v10[5];
            if ((v23 & 0x8000000000000000) != 0)
              goto LABEL_110;
            v22 = (_QWORD *)*v22;
            if (v23 && v22 == 0)
              goto LABEL_110;
          }
          else
          {
            v23 = *((unsigned __int8 *)v10 + 55);
          }
          v25 = v13 >= v23 ? v23 : v13;
          v26 = memcmp(v22, v12, v25);
          if (v26)
            break;
          if (v23 >= v13)
            goto LABEL_56;
LABEL_41:
          v10 = (uint64_t *)v10[1];
          if (!v10)
            goto LABEL_57;
        }
        if (v26 < 0)
          goto LABEL_41;
LABEL_56:
        v16 = v10;
        v10 = (uint64_t *)*v10;
      }
      while (v10);
LABEL_57:
      if (v5 == v16)
        goto LABEL_73;
      v27 = (const std::string::value_type *)v7;
      if ((v11 & 0x80) != 0)
      {
        if ((v13 & 0x8000000000000000) != 0)
          goto LABEL_110;
        v27 = v12;
        v11 = v13;
        if ((v15 & 1) == 0)
          goto LABEL_110;
      }
      v28 = v16 + 4;
      if (*((char *)v16 + 55) < 0)
      {
        v29 = v16[5];
        if ((v29 & 0x8000000000000000) == 0)
        {
          v28 = (_QWORD *)*v28;
          if (!v29 || v28)
            goto LABEL_66;
        }
        goto LABEL_110;
      }
      v29 = *((unsigned __int8 *)v16 + 55);
LABEL_66:
      if (v29 >= v11)
        v30 = v11;
      else
        v30 = v29;
      v31 = memcmp(v27, v28, v30);
      if (v31)
      {
        if (v31 < 0)
        {
LABEL_73:
          if ((unint64_t)v8 < v57)
          {
            if (v8)
            {
              if (*((char *)v7 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
              }
              else
              {
                v32 = *v7;
                v8->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
                *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v32;
              }
              v8[1].__r_.__value_.__s.__data_[0] = *((_BYTE *)v7 + 24);
              v9 = (std::string *)((char *)v8 + 32);
              goto LABEL_10;
            }
LABEL_110:
            __break(1u);
LABEL_111:
            abort();
          }
          v33 = (std::string *)__p;
          v34 = ((char *)v8 - (_BYTE *)__p) >> 5;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 59)
            goto LABEL_111;
          v36 = v57 - (_QWORD)__p;
          if ((uint64_t)(v57 - (_QWORD)__p) >> 4 > v35)
            v35 = v36 >> 4;
          v37 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0;
          v38 = 0x7FFFFFFFFFFFFFFLL;
          if (!v37)
            v38 = v35;
          if (!v38)
            goto LABEL_110;
          if (v38 >> 59)
            std::__throw_bad_array_new_length[abi:sn180100]();
          v39 = 32 * v38;
          v40 = (char *)operator new(32 * v38);
          v41 = v40;
          v42 = &v40[32 * v34];
          if (*((char *)v7 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v40[32 * v34], *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
            v33 = (std::string *)__p;
            v8 = v56;
          }
          else
          {
            v43 = *v7;
            *((_QWORD *)v42 + 2) = *((_QWORD *)v7 + 2);
            *(_OWORD *)v42 = v43;
          }
          v44 = &v41[v39];
          v41[32 * v34 + 24] = *((_BYTE *)v7 + 24);
          v9 = (std::string *)(v42 + 32);
          if (v8 == v33)
          {
            __p = v42;
            v56 = (std::string *)(v42 + 32);
            v57 = (unint64_t)v44;
          }
          else
          {
            v45 = 0;
            do
            {
              v47 = (std::string *)&v42[v45 - 32];
              v48 = (const std::string::value_type **)((char *)&v8[-1] + v45 - 8);
              if (v8->__r_.__value_.__s.__data_[v45 - 9] < 0)
              {
                std::string::__init_copy_ctor_external(v47, *v48, v8[-1].__r_.__value_.__r.__words[v45 / 8]);
              }
              else
              {
                v46 = *(_OWORD *)v48;
                *(_QWORD *)&v42[v45 - 16] = *(_QWORD *)((char *)&v8->__r_.__value_.__l + v45 - 16);
                *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v46;
              }
              v42[v45 - 8] = v8->__r_.__value_.__s.__data_[v45 - 8];
              v45 -= 32;
            }
            while ((std::string *)((char *)v8 + v45) != v33);
            v33 = (std::string *)__p;
            v49 = v56;
            __p = &v42[v45];
            v56 = (std::string *)(v42 + 32);
            v57 = (unint64_t)v44;
            while (v49 != v33)
            {
              if (v49[-1].__r_.__value_.__s.__data_[15] < 0)
                operator delete((void *)v49[-2].__r_.__value_.__r.__words[2]);
              v49 = (std::string *)((char *)v49 - 32);
            }
          }
          if (v33)
            operator delete(v33);
LABEL_10:
          v56 = v9;
          v8 = v9;
        }
      }
      else if (v11 < v29)
      {
        goto LABEL_73;
      }
      v7 += 2;
      if (v7 != v54)
        continue;
      break;
    }
    if (__p != v8)
    {
      cricket::SimulcastLayerList::AddLayerWithAlternatives((uint64_t)a1, (uint64_t *)&__p);
      v8 = (std::string *)__p;
    }
    v4 = a4;
    a3 = v53;
    if (v8)
    {
      v50 = v56;
      v6 = v8;
      if (v56 != v8)
      {
        do
        {
          if (v50[-1].__r_.__value_.__s.__data_[15] < 0)
            operator delete((void *)v50[-2].__r_.__value_.__r.__words[2]);
          v50 = (std::string *)((char *)v50 - 32);
        }
        while (v50 != v8);
        v6 = __p;
      }
      v56 = v8;
      operator delete(v6);
      a3 = v53;
    }
LABEL_5:
    a3 += 3;
    if (a3 != v4)
      continue;
    break;
  }
}

void std::__tree<std::__value_type<std::string,cricket::RidDescription>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::RidDescription>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::RidDescription>>>::destroy(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,cricket::RidDescription>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::RidDescription>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::RidDescription>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,cricket::RidDescription>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::RidDescription>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::RidDescription>>>::destroy(*(_QWORD *)(a1 + 8));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 112, *(_QWORD *)(a1 + 120));
    v2 = *(void **)(a1 + 88);
    if (v2)
    {
      *(_QWORD *)(a1 + 96) = v2;
      operator delete(v2);
    }
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_6;
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_6:
      operator delete((void *)a1);
      return;
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

unint64_t webrtc::WebRtcSessionDescriptionFactory::CopyCandidatesFromSessionDescription(unint64_t result, _BYTE *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;

  if (!result)
    return result;
  v5 = result;
  v6 = (_QWORD *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 32))(result);
  result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
  v7 = *(_QWORD *)result;
  v8 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result == v8)
    return result;
  v9 = a2[23];
  if (v9 >= 0)
    v10 = a2[23];
  else
    v10 = *((_QWORD *)a2 + 1);
  if (v9 < 0)
    a2 = *(_BYTE **)a2;
  while (1)
  {
    v11 = *(unsigned __int8 *)(v7 + 23);
    if ((v11 & 0x80u) == 0)
      v12 = *(unsigned __int8 *)(v7 + 23);
    else
      v12 = *(_QWORD *)(v7 + 8);
    if (v12 != v10)
      goto LABEL_10;
    if ((v11 & 0x80) == 0)
      break;
    result = memcmp(*(const void **)v7, a2, *(_QWORD *)(v7 + 8));
    if (!(_DWORD)result)
      goto LABEL_21;
LABEL_10:
    v7 += 40;
    if (v7 == v8)
      return result;
  }
  if (*(_BYTE *)(v7 + 23))
  {
    v13 = 0;
    while (*(unsigned __int8 *)(v7 + v13) == a2[v13])
    {
      if (v11 == ++v13)
      {
        if (!v7)
          return result;
        goto LABEL_21;
      }
    }
    goto LABEL_10;
  }
LABEL_21:
  if (v6[1] == *v6)
  {
    __break(1u);
  }
  else
  {
    v14 = (int)(-858993459 * ((unint64_t)(v7 - *v6) >> 3));
    v15 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, v14);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, v14);
    if (v15)
      v16 = result == 0;
    else
      v16 = 1;
    if (!v16)
    {
      v17 = result;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      if (result)
      {
        for (i = 0; i < result; ++i)
        {
          v19 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 32))(v15, i);
          if (((*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v17 + 24))(v17, v19) & 1) == 0)
          {
            v20 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 32))(v15, i);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, v20);
          }
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        }
      }
    }
  }
  return result;
}

uint64_t webrtc::WebRtcSessionDescriptionFactory::WebRtcSessionDescriptionFactory(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, int a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  _BYTE *v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD v71[2];
  uint64_t (*v72)(uint64_t, _QWORD **, _QWORD *);
  void (*v73)(_QWORD **, uint64_t *);
  _BYTE v74[16];
  uint64_t v75;
  unsigned int *v76;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = 0;
  v16 = (_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a9;
  cricket::MediaSessionDescriptionFactory::MediaSessionDescriptionFactory(a1 + 80, *(_QWORD *)(a2 + 96), *(unsigned __int8 *)(a2 + 232), a2 + 104, a1 + 56, (uint64_t)a6, (uint64_t)a7, a8);
  v17 = 0;
  *(_QWORD *)(a1 + 312) = 2;
  if (a5)
  {
    v17 = *a6;
    *a6 = 0;
  }
  *(_QWORD *)(a1 + 320) = v17;
  *(_QWORD *)(a1 + 328) = a3;
  v18 = (std::string *)(a1 + 336);
  if ((*((char *)a4 + 23) & 0x80000000) == 0)
  {
    v19 = *a4;
    *(_QWORD *)(a1 + 352) = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
    *(_DWORD *)(a1 + 360) = 0;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    v20 = *(_QWORD *)(a8 + 24);
    if (v20)
      goto LABEL_5;
LABEL_9:
    *(_QWORD *)(a1 + 440) = 0;
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 456) = a1;
    if ((a5 & 1) != 0)
      goto LABEL_10;
    goto LABEL_22;
  }
  std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  *(_DWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  v20 = *(_QWORD *)(a8 + 24);
  if (!v20)
    goto LABEL_9;
LABEL_5:
  if (v20 == a8)
  {
    *(_QWORD *)(a1 + 440) = a1 + 416;
    (*(void (**)(_QWORD))(**(_QWORD **)(a8 + 24) + 24))(*(_QWORD *)(a8 + 24));
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 456) = a1;
    if ((a5 & 1) != 0)
      goto LABEL_10;
LABEL_22:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v42, v43, v44, v45, v46, v47, v48, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_session_description_factory.cc");
    *v16 = 1;
    return a1;
  }
  *(_QWORD *)(a1 + 440) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = a1;
  if ((a5 & 1) == 0)
    goto LABEL_22;
LABEL_10:
  v21 = *a7;
  *(_DWORD *)(a1 + 360) = 1;
  if (v21)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      rtc::webrtc_logging_impl::Log("\r\t", v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_session_description_factory.cc");
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      {
LABEL_13:
        v76 = (unsigned int *)*a7;
        v36 = v76;
        if (v76)
          goto LABEL_14;
        goto LABEL_15;
      }
    }
    rtc::webrtc_logging_impl::Log("\r\t", v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_session_description_factory.cc");
    v76 = (unsigned int *)*a7;
    v36 = v76;
    if (v76)
    {
      do
LABEL_14:
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
LABEL_15:
    webrtc::WebRtcSessionDescriptionFactory::SetCertificate(a1, (uint64_t *)&v76);
    v38 = (uint64_t)v76;
    if (v76)
    {
      do
      {
        v39 = __ldaxr((unsigned int *)v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, (unsigned int *)v38));
      if (!v40)
      {
        v41 = *(_QWORD *)(v38 + 8);
        *(_QWORD *)(v38 + 8) = 0;
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        MEMORY[0x20BD0ADEC](v38, 0x1020C40D5A9D86FLL);
      }
    }
    return a1;
  }
  v49 = (_QWORD *)operator new();
  *v49 = 1;
  v50 = (unsigned int *)v49 + 1;
  do
    v51 = __ldxr(v50);
  while (__stxr(v51 + 1, v50));
  v52 = *(_QWORD *)(a1 + 448);
  if (v52)
  {
    v53 = (unsigned int *)(v52 + 4);
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
      MEMORY[0x20BD0ADEC]();
  }
  *(_QWORD *)(a1 + 448) = v49;
  do
    v56 = __ldxr(v50);
  while (__stxr(v56 + 1, v50));
  v57 = *(_QWORD *)(a1 + 456);
  do
    v58 = __ldxr(v50);
  while (__stxr(v58 + 1, v50));
  do
  {
    v59 = __ldaxr(v50);
    v60 = v59 - 1;
  }
  while (__stlxr(v60, v50));
  if (!v60)
    MEMORY[0x20BD0ADEC](v49, 0x1000C404A09149ALL);
  v75 = 1;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v61, v62, v63, v64, v65, v66, v67, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_session_description_factory.cc");
  v68 = *(_QWORD *)(a1 + 320);
  v74[0] = 0;
  v74[8] = 0;
  v69 = (_QWORD *)operator new();
  *v69 = v49;
  v69[1] = v57;
  v71[0] = v69;
  v72 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::WebRtcSessionDescriptionFactory::WebRtcSessionDescriptionFactory(webrtc::ConnectionContext *,webrtc::SdpStateProvider const*,std::string const&,BOOL,std::unique_ptr<rtc::RTCCertificateGeneratorInterface>,webrtc::scoped_refptr<rtc::RTCCertificate>,std::function<void ()(webrtc::scoped_refptr<rtc::RTCCertificate> const&)>,webrtc::FieldTrialsView const&)::$_0>;
  v73 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::WebRtcSessionDescriptionFactory::WebRtcSessionDescriptionFactory(webrtc::ConnectionContext *,webrtc::SdpStateProvider const*,std::string const&,BOOL,std::unique_ptr<rtc::RTCCertificateGeneratorInterface>,webrtc::scoped_refptr<rtc::RTCCertificate>,std::function<void ()(webrtc::scoped_refptr<rtc::RTCCertificate> const&)>,webrtc::FieldTrialsView const&)::$_0 &&,webrtc::scoped_refptr<rtc::RTCCertificate>>;
  (*(void (**)(uint64_t, uint64_t *, _BYTE *, _QWORD *))(*(_QWORD *)v68 + 16))(v68, &v75, v74, v71);
  v72(1, (_QWORD **)v71, v71);
  return a1;
}

void webrtc::WebRtcSessionDescriptionFactory::SetCertificate(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  void (****v21)(_QWORD);
  int v22;
  int v23;
  void (***v24)(_QWORD);
  void **v25;
  void **v26;
  void *v27;
  void (***v28)(_QWORD);
  void **v29;
  void **v30;
  void *v31;
  char *v32;
  char *v33;
  void *v34;
  void (***v35)(_QWORD);
  void (***v36)(_QWORD);
  void *v37;
  void (***v38)(_QWORD);
  void (***v39)(_QWORD);
  void (**v40)(_QWORD);
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void (***v45)(_QWORD);
  void (***v46)(_QWORD);
  void *v47;
  void (***v48)(_QWORD);
  void (***v49)(_QWORD);
  void (**v50)(_QWORD);
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void (***v54)(_QWORD);
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  void *v62;
  void (***v63)(_QWORD);
  void (***v64)(_QWORD);
  void *v65;
  void (***v66)(_QWORD);
  void (***v67)(_QWORD);
  void (**v68)(_QWORD);
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void (***v72)(_QWORD);
  void (***v73)(_QWORD);
  void *v74;
  void (***v75)(_QWORD);
  void (***v76)(_QWORD);
  void (**v77)(_QWORD);
  uint64_t v78;
  uint64_t v79;
  void *v80;
  webrtc::WebRtcSessionDescriptionFactory *v81;
  uint64_t v82;
  void (***v83)(_QWORD);
  uint64_t v84;
  void *v85;
  char v86;
  void *v87;
  char *v88;
  void *__p;
  void **v90;
  uint64_t v91;
  void (***v92)(_QWORD);
  uint64_t v93;
  void *v94;
  char v95;
  void *v96;
  char *v97;
  void *v98;
  void **v99;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_session_description_factory.cc");
  *(_DWORD *)(a1 + 360) = 2;
  v11 = *(_QWORD *)(a1 + 440);
  if (!v11)
    goto LABEL_127;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, a2);
  v12 = *a2;
  *a2 = 0;
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      v16 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      MEMORY[0x20BD0ADEC](v13, 0x1020C40D5A9D86FLL);
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v17 = *(_QWORD *)(a1 + 32);
    while (1)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v17 / 0x24));
      v19 = v17 % 0x24;
      v20 = (_DWORD *)(v18 + 112 * (v17 % 0x24));
      v23 = *v20;
      v21 = (void (****)(_QWORD))(v20 + 2);
      v22 = v23;
      if (!v23)
        break;
      LODWORD(v82) = v22;
      v24 = *v21;
      v83 = v24;
      if (v24)
        (**v24)(v24);
      cricket::MediaSessionOptions::MediaSessionOptions((cricket::MediaSessionOptions *)&v84, (const cricket::MediaSessionOptions *)(v18 + 112 * v19 + 16));
      webrtc::WebRtcSessionDescriptionFactory::InternalCreateAnswer(a1, &v82);
      v25 = (void **)__p;
      if (__p)
      {
        v26 = v90;
        v27 = __p;
        if (v90 == __p)
        {
LABEL_37:
          v90 = v25;
          operator delete(v27);
          goto LABEL_38;
        }
        while (2)
        {
          if (*((char *)v26 - 9) < 0)
          {
            operator delete(*(v26 - 4));
            if (*((char *)v26 - 33) < 0)
              goto LABEL_24;
          }
          else if (*((char *)v26 - 33) < 0)
          {
LABEL_24:
            operator delete(*(v26 - 7));
          }
          v26 -= 7;
          if (v26 == v25)
          {
            v27 = __p;
            goto LABEL_37;
          }
          continue;
        }
      }
LABEL_38:
      v32 = (char *)v87;
      if (v87)
      {
        v33 = v88;
        v34 = v87;
        if (v88 != v87)
        {
          do
          {
            v35 = (void (***)(_QWORD))*((_QWORD *)v33 - 3);
            if (v35)
            {
              v36 = (void (***)(_QWORD))*((_QWORD *)v33 - 2);
              v37 = (void *)*((_QWORD *)v33 - 3);
              if (v36 != v35)
              {
                v38 = v36 - 27;
                v39 = v36 - 27;
                do
                {
                  v40 = *v39;
                  v39 -= 27;
                  (*v40)(v38);
                  v41 = v38 == v35;
                  v38 = v39;
                }
                while (!v41);
                v37 = (void *)*((_QWORD *)v33 - 3);
              }
              *((_QWORD *)v33 - 2) = v35;
              operator delete(v37);
            }
            v42 = *((_QWORD *)v33 - 6);
            if (v42)
            {
              v43 = *((_QWORD *)v33 - 5);
              v44 = (void *)*((_QWORD *)v33 - 6);
              if (v43 != v42)
              {
                do
                {
                  if (*(char *)(v43 - 17) < 0)
                    operator delete(*(void **)(v43 - 40));
                  v43 -= 40;
                }
                while (v43 != v42);
                v44 = (void *)*((_QWORD *)v33 - 6);
              }
              *((_QWORD *)v33 - 5) = v42;
              operator delete(v44);
            }
            v45 = (void (***)(_QWORD))*((_QWORD *)v33 - 9);
            if (v45)
            {
              v46 = (void (***)(_QWORD))*((_QWORD *)v33 - 8);
              v47 = (void *)*((_QWORD *)v33 - 9);
              if (v46 != v45)
              {
                v48 = v46 - 20;
                v49 = v46 - 20;
                do
                {
                  v50 = *v49;
                  v49 -= 20;
                  (*v50)(v48);
                  v41 = v48 == v45;
                  v48 = v49;
                }
                while (!v41);
                v47 = (void *)*((_QWORD *)v33 - 9);
              }
              *((_QWORD *)v33 - 8) = v45;
              operator delete(v47);
            }
            v51 = *((_QWORD *)v33 - 12);
            if (v51)
            {
              v52 = *((_QWORD *)v33 - 11);
              v53 = (void *)*((_QWORD *)v33 - 12);
              if (v52 != v51)
              {
                do
                  cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)(v52 - 104));
                while (v52 != v51);
                v53 = (void *)*((_QWORD *)v33 - 12);
              }
              *((_QWORD *)v33 - 11) = v51;
              operator delete(v53);
            }
            if (*(v33 - 105) < 0)
              operator delete(*((void **)v33 - 16));
            v33 -= 136;
          }
          while (v33 != v32);
          v34 = v87;
        }
        v88 = v32;
        operator delete(v34);
      }
      if ((v86 & 0x80000000) == 0)
      {
        v54 = v83;
        if (!v83)
          goto LABEL_76;
        goto LABEL_75;
      }
      operator delete(v85);
      v54 = v83;
      if (v83)
        goto LABEL_75;
LABEL_76:
      v55 = *(_QWORD *)(a1 + 32);
      v56 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v55 / 0x24));
      if (!v56)
      {
        __break(1u);
LABEL_127:
        v81 = (webrtc::WebRtcSessionDescriptionFactory *)std::__throw_bad_function_call[abi:sn180100]();
        webrtc::WebRtcSessionDescriptionFactory::~WebRtcSessionDescriptionFactory(v81);
        return;
      }
      v57 = v56 + 112 * (v55 % 0x24);
      cricket::MediaSessionOptions::~MediaSessionOptions((cricket::MediaSessionOptions *)(v57 + 16));
      v58 = *(_QWORD *)(v57 + 8);
      if (v58)
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
      v59 = *(_QWORD *)(a1 + 40) - 1;
      v17 = *(_QWORD *)(a1 + 32) + 1;
      *(_QWORD *)(a1 + 32) = v17;
      *(_QWORD *)(a1 + 40) = v59;
      if (v17 >= 0x48)
      {
        operator delete(**(void ***)(a1 + 8));
        *(_QWORD *)(a1 + 8) += 8;
        v59 = *(_QWORD *)(a1 + 40);
        v17 = *(_QWORD *)(a1 + 32) - 36;
        *(_QWORD *)(a1 + 32) = v17;
      }
      if (!v59)
        return;
    }
    LODWORD(v91) = 0;
    v28 = *v21;
    v92 = v28;
    if (v28)
      (**v28)(v28);
    cricket::MediaSessionOptions::MediaSessionOptions((cricket::MediaSessionOptions *)&v93, (const cricket::MediaSessionOptions *)(v18 + 112 * v19 + 16));
    webrtc::WebRtcSessionDescriptionFactory::InternalCreateOffer(a1, &v91);
    v29 = (void **)v98;
    if (!v98)
    {
LABEL_85:
      v60 = (char *)v96;
      if (v96)
      {
        v61 = v97;
        v62 = v96;
        if (v97 != v96)
        {
          do
          {
            v63 = (void (***)(_QWORD))*((_QWORD *)v61 - 3);
            if (v63)
            {
              v64 = (void (***)(_QWORD))*((_QWORD *)v61 - 2);
              v65 = (void *)*((_QWORD *)v61 - 3);
              if (v64 != v63)
              {
                v66 = v64 - 27;
                v67 = v64 - 27;
                do
                {
                  v68 = *v67;
                  v67 -= 27;
                  (*v68)(v66);
                  v41 = v66 == v63;
                  v66 = v67;
                }
                while (!v41);
                v65 = (void *)*((_QWORD *)v61 - 3);
              }
              *((_QWORD *)v61 - 2) = v63;
              operator delete(v65);
            }
            v69 = *((_QWORD *)v61 - 6);
            if (v69)
            {
              v70 = *((_QWORD *)v61 - 5);
              v71 = (void *)*((_QWORD *)v61 - 6);
              if (v70 != v69)
              {
                do
                {
                  if (*(char *)(v70 - 17) < 0)
                    operator delete(*(void **)(v70 - 40));
                  v70 -= 40;
                }
                while (v70 != v69);
                v71 = (void *)*((_QWORD *)v61 - 6);
              }
              *((_QWORD *)v61 - 5) = v69;
              operator delete(v71);
            }
            v72 = (void (***)(_QWORD))*((_QWORD *)v61 - 9);
            if (v72)
            {
              v73 = (void (***)(_QWORD))*((_QWORD *)v61 - 8);
              v74 = (void *)*((_QWORD *)v61 - 9);
              if (v73 != v72)
              {
                v75 = v73 - 20;
                v76 = v73 - 20;
                do
                {
                  v77 = *v76;
                  v76 -= 20;
                  (*v77)(v75);
                  v41 = v75 == v72;
                  v75 = v76;
                }
                while (!v41);
                v74 = (void *)*((_QWORD *)v61 - 9);
              }
              *((_QWORD *)v61 - 8) = v72;
              operator delete(v74);
            }
            v78 = *((_QWORD *)v61 - 12);
            if (v78)
            {
              v79 = *((_QWORD *)v61 - 11);
              v80 = (void *)*((_QWORD *)v61 - 12);
              if (v79 != v78)
              {
                do
                  cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)(v79 - 104));
                while (v79 != v78);
                v80 = (void *)*((_QWORD *)v61 - 12);
              }
              *((_QWORD *)v61 - 11) = v78;
              operator delete(v80);
            }
            if (*(v61 - 105) < 0)
              operator delete(*((void **)v61 - 16));
            v61 -= 136;
          }
          while (v61 != v60);
          v62 = v96;
        }
        v97 = v60;
        operator delete(v62);
      }
      if (v95 < 0)
      {
        operator delete(v94);
        v54 = v92;
        if (!v92)
          goto LABEL_76;
      }
      else
      {
        v54 = v92;
        if (!v92)
          goto LABEL_76;
      }
LABEL_75:
      (*v54)[1](v54);
      goto LABEL_76;
    }
    v30 = v99;
    v31 = v98;
    if (v99 == v98)
    {
LABEL_84:
      v99 = v29;
      operator delete(v31);
      goto LABEL_85;
    }
    while (1)
    {
      if (*((char *)v30 - 9) < 0)
      {
        operator delete(*(v30 - 4));
        if (*((char *)v30 - 33) < 0)
LABEL_35:
          operator delete(*(v30 - 7));
      }
      else if (*((char *)v30 - 33) < 0)
      {
        goto LABEL_35;
      }
      v30 -= 7;
      if (v30 == v29)
      {
        v31 = v98;
        goto LABEL_84;
      }
    }
  }
}

void webrtc::WebRtcSessionDescriptionFactory::~WebRtcSessionDescriptionFactory(webrtc::WebRtcSessionDescriptionFactory *this)
{
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  webrtc::WebRtcSessionDescriptionFactory *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (***v14)(_QWORD);
  void (***v15)(_QWORD);
  void *v16;
  void (***v17)(_QWORD);
  void (***v18)(_QWORD);
  void (**v19)(_QWORD);
  BOOL v20;
  void (***v21)(_QWORD);
  void (***v22)(_QWORD);
  void *v23;
  void (***v24)(_QWORD);
  void (***v25)(_QWORD);
  void (**v26)(_QWORD);
  void (***v27)(_QWORD);
  void (***v28)(_QWORD);
  void *v29;
  void (***v30)(_QWORD);
  void (***v31)(_QWORD);
  void (**v32)(_QWORD);
  void (***v33)(_QWORD);
  void (***v34)(_QWORD);
  void *v35;
  void (***v36)(_QWORD);
  void (***v37)(_QWORD);
  void (**v38)(_QWORD);
  void (***v39)(_QWORD);
  void (***v40)(_QWORD);
  void *v41;
  void (***v42)(_QWORD);
  void (***v43)(_QWORD);
  void (**v44)(_QWORD);
  void (***v45)(_QWORD);
  void (***v46)(_QWORD);
  void *v47;
  void (***v48)(_QWORD);
  void (***v49)(_QWORD);
  void (**v50)(_QWORD);
  void (***v51)(_QWORD);
  void (***v52)(_QWORD);
  void *v53;
  void (***v54)(_QWORD);
  void (***v55)(_QWORD);
  void (**v56)(_QWORD);
  void (***v57)(_QWORD);
  void (***v58)(_QWORD);
  void *v59;
  void (***v60)(_QWORD);
  void (***v61)(_QWORD);
  void (**v62)(_QWORD);
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  void **v67;
  void **v68;
  unint64_t v69;
  void **v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *__p;
  __int128 v82;

  v2 = (char *)operator new(0x30uLL);
  __p = v2;
  v82 = xmmword_208F08F30;
  if (v2 <= " failed because the session was shut down" && v2 + 41 > " failed because the session was shut down")
  {
LABEL_116:
    __break(1u);
    return;
  }
  strcpy(v2, " failed because the session was shut down");
  webrtc::WebRtcSessionDescriptionFactory::FailPendingRequests((uint64_t)this, (char **)&__p);
  if (SHIBYTE(v82) < 0)
  {
    operator delete(__p);
    if (!*((_QWORD *)this + 51))
      goto LABEL_12;
LABEL_7:
    v3 = *((_QWORD *)this + 50);
    while (1)
    {
      (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)this + 47) + ((v3 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v3 & 0x7F) + 24))();
      v4 = *(_QWORD *)(*((_QWORD *)this + 47) + ((*((_QWORD *)this + 50) >> 4) & 0xFFFFFFFFFFFFFF8));
      if (!v4)
        goto LABEL_116;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32 * (*((_QWORD *)this + 50) & 0x7FLL) + 16))(1, v4 + 32 * (*((_QWORD *)this + 50) & 0x7FLL), v4 + 32 * (*((_QWORD *)this + 50) & 0x7FLL));
      v5 = *((_QWORD *)this + 51) - 1;
      v3 = *((_QWORD *)this + 50) + 1;
      *((_QWORD *)this + 50) = v3;
      *((_QWORD *)this + 51) = v5;
      if (v3 >= 0x100)
      {
        operator delete(**((void ***)this + 47));
        *((_QWORD *)this + 47) += 8;
        v5 = *((_QWORD *)this + 51);
        v3 = *((_QWORD *)this + 50) - 128;
        *((_QWORD *)this + 50) = v3;
      }
      if (!v5)
        goto LABEL_12;
    }
  }
  if (*((_QWORD *)this + 51))
    goto LABEL_7;
LABEL_12:
  *((_QWORD *)this + 57) = 0;
  v6 = (_BYTE *)*((_QWORD *)this + 56);
  if (v6)
  {
    *v6 = 0;
    v7 = (unsigned int *)(v6 + 4);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 56) = 0;
  }
  v10 = (webrtc::WebRtcSessionDescriptionFactory *)*((_QWORD *)this + 55);
  if (v10 == (webrtc::WebRtcSessionDescriptionFactory *)((char *)this + 416))
  {
    v11 = 4;
    v10 = (webrtc::WebRtcSessionDescriptionFactory *)((char *)this + 416);
  }
  else
  {
    if (!v10)
      goto LABEL_23;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_23:
  _ZNSt3__15dequeIN4absl12AnyInvocableIFvvOEEENS_9allocatorIS4_EEED2B8sn180100Ev((void **)this + 46);
  if (*((char *)this + 359) < 0)
    operator delete(*((void **)this + 42));
  v12 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v13)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v13 + 64, *(_QWORD **)(v13 + 72));
    pthread_mutex_destroy((pthread_mutex_t *)v13);
    MEMORY[0x20BD0ADEC](v13, 0x1020C403B046C9DLL);
  }
  v14 = (void (***)(_QWORD))*((_QWORD *)this + 32);
  if (v14)
  {
    v15 = (void (***)(_QWORD))*((_QWORD *)this + 33);
    v16 = (void *)*((_QWORD *)this + 32);
    if (v15 != v14)
    {
      v17 = v15 - 27;
      v18 = v15 - 27;
      do
      {
        v19 = *v18;
        v18 -= 27;
        (*v19)(v17);
        v20 = v17 == v14;
        v17 = v18;
      }
      while (!v20);
      v16 = (void *)*((_QWORD *)this + 32);
    }
    *((_QWORD *)this + 33) = v14;
    operator delete(v16);
  }
  v21 = (void (***)(_QWORD))*((_QWORD *)this + 29);
  if (v21)
  {
    v22 = (void (***)(_QWORD))*((_QWORD *)this + 30);
    v23 = (void *)*((_QWORD *)this + 29);
    if (v22 != v21)
    {
      v24 = v22 - 27;
      v25 = v22 - 27;
      do
      {
        v26 = *v25;
        v25 -= 27;
        (*v26)(v24);
        v20 = v24 == v21;
        v24 = v25;
      }
      while (!v20);
      v23 = (void *)*((_QWORD *)this + 29);
    }
    *((_QWORD *)this + 30) = v21;
    operator delete(v23);
  }
  v27 = (void (***)(_QWORD))*((_QWORD *)this + 26);
  if (v27)
  {
    v28 = (void (***)(_QWORD))*((_QWORD *)this + 27);
    v29 = (void *)*((_QWORD *)this + 26);
    if (v28 != v27)
    {
      v30 = v28 - 27;
      v31 = v28 - 27;
      do
      {
        v32 = *v31;
        v31 -= 27;
        (*v32)(v30);
        v20 = v30 == v27;
        v30 = v31;
      }
      while (!v20);
      v29 = (void *)*((_QWORD *)this + 26);
    }
    *((_QWORD *)this + 27) = v27;
    operator delete(v29);
  }
  v33 = (void (***)(_QWORD))*((_QWORD *)this + 23);
  if (v33)
  {
    v34 = (void (***)(_QWORD))*((_QWORD *)this + 24);
    v35 = (void *)*((_QWORD *)this + 23);
    if (v34 != v33)
    {
      v36 = v34 - 27;
      v37 = v34 - 27;
      do
      {
        v38 = *v37;
        v37 -= 27;
        (*v38)(v36);
        v20 = v36 == v33;
        v36 = v37;
      }
      while (!v20);
      v35 = (void *)*((_QWORD *)this + 23);
    }
    *((_QWORD *)this + 24) = v33;
    operator delete(v35);
  }
  v39 = (void (***)(_QWORD))*((_QWORD *)this + 20);
  if (v39)
  {
    v40 = (void (***)(_QWORD))*((_QWORD *)this + 21);
    v41 = (void *)*((_QWORD *)this + 20);
    if (v40 != v39)
    {
      v42 = v40 - 27;
      v43 = v40 - 27;
      do
      {
        v44 = *v43;
        v43 -= 27;
        (*v44)(v42);
        v20 = v42 == v39;
        v42 = v43;
      }
      while (!v20);
      v41 = (void *)*((_QWORD *)this + 20);
    }
    *((_QWORD *)this + 21) = v39;
    operator delete(v41);
  }
  v45 = (void (***)(_QWORD))*((_QWORD *)this + 17);
  if (v45)
  {
    v46 = (void (***)(_QWORD))*((_QWORD *)this + 18);
    v47 = (void *)*((_QWORD *)this + 17);
    if (v46 != v45)
    {
      v48 = v46 - 27;
      v49 = v46 - 27;
      do
      {
        v50 = *v49;
        v49 -= 27;
        (*v50)(v48);
        v20 = v48 == v45;
        v48 = v49;
      }
      while (!v20);
      v47 = (void *)*((_QWORD *)this + 17);
    }
    *((_QWORD *)this + 18) = v45;
    operator delete(v47);
  }
  v51 = (void (***)(_QWORD))*((_QWORD *)this + 14);
  if (v51)
  {
    v52 = (void (***)(_QWORD))*((_QWORD *)this + 15);
    v53 = (void *)*((_QWORD *)this + 14);
    if (v52 != v51)
    {
      v54 = v52 - 27;
      v55 = v52 - 27;
      do
      {
        v56 = *v55;
        v55 -= 27;
        (*v56)(v54);
        v20 = v54 == v51;
        v54 = v55;
      }
      while (!v20);
      v53 = (void *)*((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v51;
    operator delete(v53);
  }
  v57 = (void (***)(_QWORD))*((_QWORD *)this + 11);
  if (v57)
  {
    v58 = (void (***)(_QWORD))*((_QWORD *)this + 12);
    v59 = (void *)*((_QWORD *)this + 11);
    if (v58 != v57)
    {
      v60 = v58 - 27;
      v61 = v58 - 27;
      do
      {
        v62 = *v61;
        v61 -= 27;
        (*v62)(v60);
        v20 = v60 == v57;
        v60 = v61;
      }
      while (!v20);
      v59 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v57;
    operator delete(v59);
  }
  v63 = *((_QWORD *)this + 8);
  if (v63)
  {
    do
    {
      v64 = __ldaxr((unsigned int *)v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, (unsigned int *)v63));
    if (!v65)
    {
      v66 = *(_QWORD *)(v63 + 8);
      *(_QWORD *)(v63 + 8) = 0;
      if (v66)
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
      MEMORY[0x20BD0ADEC](v63, 0x1020C40D5A9D86FLL);
    }
  }
  v67 = (void **)*((_QWORD *)this + 1);
  v68 = (void **)*((_QWORD *)this + 2);
  if (v68 == v67)
  {
    v68 = (void **)*((_QWORD *)this + 1);
    *((_QWORD *)this + 5) = 0;
    v75 = 0;
    goto LABEL_103;
  }
  v69 = *((_QWORD *)this + 4);
  v70 = &v67[v69 / 0x24];
  v71 = (unint64_t)*v70 + 112 * (v69 % 0x24);
  v72 = (unint64_t)v67[(*((_QWORD *)this + 5) + v69) / 0x24] + 112 * ((*((_QWORD *)this + 5) + v69) % 0x24);
  if (v71 != v72)
  {
    while (v71)
    {
      cricket::MediaSessionOptions::~MediaSessionOptions((cricket::MediaSessionOptions *)(v71 + 16));
      v73 = *(_QWORD *)(v71 + 8);
      if (v73)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
      v71 += 112;
      if (v71 - (_QWORD)*v70 == 4032)
      {
        v74 = (unint64_t)v70[1];
        ++v70;
        v71 = v74;
      }
      if (v71 == v72)
      {
        v67 = (void **)*((_QWORD *)this + 1);
        v68 = (void **)*((_QWORD *)this + 2);
        goto LABEL_101;
      }
    }
    goto LABEL_116;
  }
LABEL_101:
  *((_QWORD *)this + 5) = 0;
  v75 = (char *)v68 - (char *)v67;
  if ((unint64_t)((char *)v68 - (char *)v67) >= 0x11)
  {
    do
    {
      operator delete(*v67);
      v68 = (void **)*((_QWORD *)this + 2);
      v67 = (void **)(*((_QWORD *)this + 1) + 8);
      *((_QWORD *)this + 1) = v67;
      v75 = (char *)v68 - (char *)v67;
    }
    while ((unint64_t)((char *)v68 - (char *)v67) > 0x10);
  }
LABEL_103:
  v76 = v75 >> 3;
  if (v76 == 1)
  {
    v77 = 18;
    goto LABEL_108;
  }
  if (v76 == 2)
  {
    v77 = 36;
LABEL_108:
    *((_QWORD *)this + 4) = v77;
  }
  if (v67 != v68)
  {
    do
    {
      v78 = *v67++;
      operator delete(v78);
    }
    while (v67 != v68);
    v80 = *((_QWORD *)this + 1);
    v79 = *((_QWORD *)this + 2);
    if (v79 != v80)
      *((_QWORD *)this + 2) = v79 + ((v80 - v79 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)this)
    operator delete(*(void **)this);
}

void webrtc::WebRtcSessionDescriptionFactory::FailPendingRequests(uint64_t a1, char **a2)
{
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  size_t v7;
  int v8;
  size_t v9;
  unint64_t v10;
  void (***v11)(_QWORD);
  void **p_src;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  BOOL v16;
  char *v17;
  char *v18;
  BOOL v19;
  size_t v20;
  void **v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **__src;
  unint64_t v32;
  unint64_t v33;
  int v34;
  void *__p[2];
  unint64_t v36;
  int v37;
  char v38;
  char v39;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD *)(a1 + 32);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v4 / 0x24)) + 112 * (v4 % 0x24);
      if (*(_DWORD *)v5)
        v6 = "CreateAnswer";
      else
        v6 = "CreateOffer";
      if (*(_DWORD *)v5)
        v7 = 12;
      else
        v7 = 11;
      v8 = *((char *)a2 + 23);
      if (v8 >= 0)
        v9 = *((unsigned __int8 *)a2 + 23);
      else
        v9 = (size_t)a2[1];
      v10 = v9 + v7;
      if (v9 + v7 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_58;
      v11 = *(void (****)(_QWORD))(v5 + 8);
      if (v10 > 0x16)
      {
        v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v13 = v10 | 7;
        v14 = v13 + 1;
        p_src = (void **)operator new(v13 + 1);
        v32 = v9 + v7;
        v33 = v14 | 0x8000000000000000;
        __src = p_src;
      }
      else
      {
        v32 = 0;
        v33 = 0;
        __src = 0;
        p_src = (void **)&__src;
        HIBYTE(v33) = v9 + v7;
      }
      v15 = (char *)p_src + v7;
      v16 = p_src <= (void **)v6 && v15 > v6;
      if (v16
        || ((memcpy(p_src, v6, v7), v8 >= 0) ? (v17 = (char *)a2) : (v17 = *a2),
            (v18 = &v15[v9], v17 >= v15) ? (v19 = v18 > v17) : (v19 = 0),
            v19))
      {
LABEL_57:
        __break(1u);
LABEL_58:
        abort();
      }
      if (v9)
        memmove(v15, v17, v9);
      *v18 = 0;
      if (SHIBYTE(v33) < 0)
      {
        v20 = v32;
        if ((v32 & 0x8000000000000000) != 0)
          goto LABEL_57;
        v21 = __src;
        if (v32)
        {
          if (!__src)
            goto LABEL_57;
        }
        v34 = 10;
        if (v32 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_58;
      }
      else
      {
        v20 = HIBYTE(v33);
        v34 = 10;
        v21 = (void **)&__src;
      }
      if (v20 > 0x16)
      {
        v24 = (v20 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v24 = v20 | 7;
        v25 = v24 + 1;
        v22 = (void **)operator new(v24 + 1);
        __p[1] = (void *)v20;
        v36 = v25 | 0x8000000000000000;
        __p[0] = v22;
        v23 = (void **)((char *)v22 + v20);
        if (v22 > v21)
          goto LABEL_45;
      }
      else
      {
        HIBYTE(v36) = v20;
        v22 = __p;
        v23 = (void **)((char *)__p + v20);
        if (__p > v21)
          goto LABEL_45;
      }
      if (v23 > v21)
        goto LABEL_57;
LABEL_45:
      if (v20)
        memmove(v22, v21, v20);
      *(_BYTE *)v23 = 0;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed((_QWORD *)a1, v11, &v34);
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33) < 0)
        operator delete(__src);
      v26 = *(_QWORD *)(a1 + 32);
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v26 / 0x24));
      if (!v27)
        goto LABEL_57;
      v28 = v27 + 112 * (v26 % 0x24);
      cricket::MediaSessionOptions::~MediaSessionOptions((cricket::MediaSessionOptions *)(v28 + 16));
      v29 = *(_QWORD *)(v28 + 8);
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      v30 = *(_QWORD *)(a1 + 40) - 1;
      v4 = *(_QWORD *)(a1 + 32) + 1;
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a1 + 40) = v30;
      if (v4 >= 0x48)
      {
        operator delete(**(void ***)(a1 + 8));
        *(_QWORD *)(a1 + 8) += 8;
        v30 = *(_QWORD *)(a1 + 40);
        v4 = *(_QWORD *)(a1 + 32) - 36;
        *(_QWORD *)(a1 + 32) = v4;
      }
    }
    while (v30);
  }
}

void webrtc::WebRtcSessionDescriptionFactory::CreateOffer(uint64_t a1, void (***a2)(_QWORD), uint64_t a3, webrtc::_anonymous_namespace_ **a4)
{
  std::string *v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (***v18)(_QWORD);
  uint64_t v19;
  int v20;
  std::string *v21;
  __int128 v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string::size_type size;
  unsigned __int8 v26;
  std::string *v27;
  char *v28;
  std::string::size_type v29;
  size_t v30;
  void **v31;
  std::string *p_src;
  std::string *v33;
  char *v34;
  char *v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  _BYTE *v40;
  void **v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  std::string *v46;
  char *v47;
  __int128 v48;
  std::string *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  void **v53;
  void **v54;
  void *v55;
  char *v56;
  char *v57;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  void **v70;
  void *v71;
  char *v72;
  char *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void (***v79)(_QWORD);
  int v80;
  char v81;
  std::string v82;
  int v83;
  char v84;
  void *v85;
  char *v86;
  char *v87;
  void *__p;
  char *v89;
  char *v90;
  char v91;
  int v92;
  void (***v93)(_QWORD);
  int v94;
  char v95;
  std::string v96;
  int v97;
  char v98;
  void *v99;
  char *v100;
  void *v101;
  void **v102;
  char v103;
  int v104;
  void *v105[2];
  unint64_t v106;
  int v107;
  char v108;
  char v109;
  int v110;
  void *v111;
  __int128 v112;
  int v113;
  char v114;
  char v115;
  std::string __src;

  *((_BYTE *)&__src.__r_.__value_.__s + 23) = 11;
  if (&__src <= (std::string *)"CreateOffer" && (char *)&__src.__r_.__value_.__r.__words[1] + 3 > "CreateOffer")
    goto LABEL_132;
  strcpy((char *)&__src, "CreateOffer");
  if (*(_DWORD *)(a1 + 360) == 3)
  {
    v7 = (std::string *)operator new(0x38uLL);
    v8 = (unint64_t)v7;
    if (&__src < v7 || (std::string *)((char *)&v7->__r_.__value_.__r.__words[1] + 3) <= &__src)
    {
      *(_DWORD *)((char *)v7->__r_.__value_.__r.__words + 7) = 1919247974;
      v7->__r_.__value_.__r.__words[0] = *(_QWORD *)"CreateOffer";
      if ((char *)&v7->__r_.__value_.__r.__words[1] + 3 > " failed because DTLS identity request failed"
        || (char *)v7[2].__r_.__value_.__r.__words + 7 <= " failed because DTLS identity request failed")
      {
        strcpy(&v7->__r_.__value_.__s.__data_[11], " failed because DTLS identity request failed");
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
        *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = xmmword_208F0AC60;
        v110 = 10;
        v9 = operator new(0x38uLL);
        v111 = v9;
        v112 = xmmword_208F0AC60;
        if ((unint64_t)v9 > v8 || (unint64_t)v9 + 55 <= v8)
        {
          v10 = *(_OWORD *)(v8 + 16);
          *v9 = *(_OWORD *)v8;
          v9[1] = v10;
          v9[2] = *(_OWORD *)(v8 + 32);
          *(_QWORD *)((char *)v9 + 47) = *(_QWORD *)(v8 + 47);
          *((_BYTE *)v9 + 55) = 0;
          v113 = 0;
          v114 = 0;
          v115 = 0;
          webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed((_QWORD *)a1, a2, &v110);
          if (SHIBYTE(v112) < 0)
          {
            operator delete(v111);
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_128;
            return;
          }
          goto LABEL_127;
        }
      }
    }
    goto LABEL_132;
  }
  {
    v92 = 0;
    v93 = a2;
    if (a2)
      (**a2)(a2);
    cricket::MediaSessionOptions::MediaSessionOptions((cricket::MediaSessionOptions *)&v94, (const cricket::MediaSessionOptions *)a4);
    if (*(_DWORD *)(a1 + 360) == 1)
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD *)(a1 + 16);
      v13 = 36 * ((v12 - v11) >> 3) - 1;
      if (v12 == v11)
        v13 = 0;
      if (v13 == *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32))
      {
        std::deque<webrtc::WebRtcSessionDescriptionFactory::CreateSessionDescriptionRequest>::__add_back_capacity(a1);
        v11 = *(_QWORD *)(a1 + 8);
        v12 = *(_QWORD *)(a1 + 16);
      }
      if (v12 != v11)
      {
        v14 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32);
        v15 = *(_QWORD *)(v11 + 8 * (v14 / 0x24));
        if (v15)
        {
          v16 = v14 % 0x24;
          v17 = v15 + 112 * (v14 % 0x24);
          *(_DWORD *)v17 = v92;
          v18 = v93;
          *(_QWORD *)(v17 + 8) = v93;
          if (v18)
            (**v18)(v18);
          v19 = v15 + 112 * v16;
          v20 = v94;
          *(_BYTE *)(v19 + 20) = v95;
          *(_DWORD *)(v19 + 16) = v20;
          v21 = (std::string *)(v19 + 24);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v21, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
          }
          else
          {
            v22 = *(_OWORD *)&v96.__r_.__value_.__l.__data_;
            *(_QWORD *)(v19 + 40) = *((_QWORD *)&v96.__r_.__value_.__l + 2);
            *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
          }
          v59 = v15 + 112 * v16;
          *(_DWORD *)(v59 + 48) = 65537;
          *(_BYTE *)(v59 + 52) = 0;
          *(_DWORD *)(v59 + 48) = v97;
          *(_BYTE *)(v59 + 52) = v98;
          *(_QWORD *)(v59 + 56) = 0;
          v60 = (_QWORD *)(v59 + 56);
          v60[1] = 0;
          v61 = v60 + 1;
          v60[2] = 0;
          v62 = (char *)v99;
          v63 = v100;
          v64 = v100 - (_BYTE *)v99;
          if (v100 != v99)
          {
            v77 = v16;
            v65 = 0xF0F0F0F0F0F0F0F1 * (v64 >> 3);
            if (v65 > 0x1E1E1E1E1E1E1E1)
              goto LABEL_133;
            v66 = (char *)operator new(v64);
            v67 = 0;
            *v60 = v66;
            *v61 = v66;
            v60[2] = &v66[136 * v65];
            do
            {
              cricket::MediaDescriptionOptions::MediaDescriptionOptions((cricket::MediaDescriptionOptions *)&v66[v67], (const cricket::MediaDescriptionOptions *)&v62[v67]);
              v67 += 136;
            }
            while (&v62[v67] != v63);
            *v61 = &v66[v67];
            v16 = v77;
          }
          v68 = v15 + 112 * v16;
          *(_QWORD *)(v68 + 80) = 0;
          *(_QWORD *)(v68 + 88) = 0;
          v68 += 80;
          *(_QWORD *)(v68 + 16) = 0;
          std::vector<cricket::IceParameters>::__init_with_size[abi:sn180100]<cricket::IceParameters*,cricket::IceParameters*>((_QWORD *)v68, (uint64_t)v101, (uint64_t)v102, 0x6DB6DB6DB6DB6DB7 * (((char *)v102 - (_BYTE *)v101) >> 3));
          *(_BYTE *)(v68 + 24) = v103;
          ++*(_QWORD *)(a1 + 40);
          goto LABEL_93;
        }
      }
      goto LABEL_132;
    }
    LODWORD(v78) = v92;
    v79 = v93;
    if (v93)
      (**v93)(v93);
    v80 = v94;
    v81 = v95;
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v82, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
    else
      v82 = v96;
    v83 = v97;
    v84 = v98;
    v86 = 0;
    v87 = 0;
    v85 = 0;
    v34 = (char *)v99;
    v35 = v100;
    v36 = v100 - (_BYTE *)v99;
    if (v100 != v99)
    {
      v37 = 0xF0F0F0F0F0F0F0F1 * (v36 >> 3);
      if (v37 > 0x1E1E1E1E1E1E1E1)
        goto LABEL_133;
      v38 = (char *)operator new(v36);
      v39 = 0;
      v85 = v38;
      v86 = v38;
      v87 = &v38[136 * v37];
      do
      {
        cricket::MediaDescriptionOptions::MediaDescriptionOptions((cricket::MediaDescriptionOptions *)&v38[v39], (const cricket::MediaDescriptionOptions *)&v34[v39]);
        v39 += 136;
      }
      while (&v34[v39] != v35);
      v86 = &v38[v39];
    }
    __p = 0;
    v89 = 0;
    v90 = 0;
    v40 = v101;
    v41 = v102;
    v42 = (char *)v102 - (_BYTE *)v101;
    if (v102 == v101)
      goto LABEL_66;
    v43 = 0x6DB6DB6DB6DB6DB7 * (v42 >> 3);
    if (v43 >= 0x492492492492493)
LABEL_133:
      abort();
    v44 = (char *)operator new(v42);
    v45 = 0;
    __p = v44;
    v89 = v44;
    v90 = &v44[56 * v43];
    while (1)
    {
      v46 = (std::string *)&v44[v45];
      v47 = &v40[v45];
      if ((char)v40[v45 + 23] < 0)
      {
        std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)v47, *((_QWORD *)v47 + 1));
        v49 = (std::string *)&v44[v45 + 24];
        v50 = &v40[v45];
        v51 = (uint64_t)&v40[v45 + 24];
        if (((char)v40[v45 + 47] & 0x80000000) == 0)
        {
LABEL_64:
          v52 = *(_OWORD *)v51;
          v49->__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 16);
          *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v52;
          goto LABEL_59;
        }
      }
      else
      {
        v48 = *(_OWORD *)v47;
        v46->__r_.__value_.__r.__words[2] = *((_QWORD *)v47 + 2);
        *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v48;
        v49 = (std::string *)&v44[v45 + 24];
        v50 = &v40[v45];
        v51 = (uint64_t)&v40[v45 + 24];
        if (((char)v40[v45 + 47] & 0x80000000) == 0)
          goto LABEL_64;
      }
      std::string::__init_copy_ctor_external(v49, *(const std::string::value_type **)v51, *((_QWORD *)v50 + 4));
LABEL_59:
      v44[v45 + 48] = v40[v45 + 48];
      v45 += 56;
      if (&v40[v45] == (_BYTE *)v41)
      {
        v89 = &v44[v45];
LABEL_66:
        v91 = v103;
        webrtc::WebRtcSessionDescriptionFactory::InternalCreateOffer(a1, &v78);
        v53 = (void **)__p;
        if (__p)
        {
          v54 = (void **)v89;
          v55 = __p;
          if (v89 == __p)
          {
LABEL_76:
            v89 = (char *)v53;
            operator delete(v55);
            goto LABEL_77;
          }
          while (2)
          {
            if (*((char *)v54 - 9) < 0)
            {
              operator delete(*(v54 - 4));
              if (*((char *)v54 - 33) < 0)
                goto LABEL_74;
            }
            else if (*((char *)v54 - 33) < 0)
            {
LABEL_74:
              operator delete(*(v54 - 7));
            }
            v54 -= 7;
            if (v54 == v53)
            {
              v55 = __p;
              goto LABEL_76;
            }
            continue;
          }
        }
LABEL_77:
        v56 = (char *)v85;
        if (v85)
        {
          v57 = v86;
          v58 = v85;
          if (v86 != v85)
          {
            do
              cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)(v57 - 136));
            while (v57 != v56);
            v58 = v85;
          }
          v86 = v56;
          operator delete(v58);
        }
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
        if (v79)
          (*v79)[1](v79);
LABEL_93:
        v69 = (void **)v101;
        if (v101)
        {
          v70 = v102;
          v71 = v101;
          if (v102 == v101)
          {
LABEL_103:
            v102 = v69;
            operator delete(v71);
            goto LABEL_104;
          }
          while (2)
          {
            if (*((char *)v70 - 9) < 0)
            {
              operator delete(*(v70 - 4));
              if (*((char *)v70 - 33) < 0)
                goto LABEL_101;
            }
            else if (*((char *)v70 - 33) < 0)
            {
LABEL_101:
              operator delete(*(v70 - 7));
            }
            v70 -= 7;
            if (v70 == v69)
            {
              v71 = v101;
              goto LABEL_103;
            }
            continue;
          }
        }
LABEL_104:
        v72 = (char *)v99;
        if (v99)
        {
          v73 = v100;
          v74 = v99;
          if (v100 != v99)
          {
            do
              cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)(v73 - 136));
            while (v73 != v72);
            v74 = v99;
          }
          v100 = v72;
          operator delete(v74);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if (v93)
        {
          (*v93)[1](v93);
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_128;
          return;
        }
LABEL_127:
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_128;
        return;
      }
    }
  }
  v23 = __src.__r_.__value_.__r.__words[2];
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = 22;
  else
    v24 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  else
    size = __src.__r_.__value_.__l.__size_;
  if (v24 - size < 0x24)
  {
    std::string::__grow_by_and_replace(&__src, v24, size - v24 + 36, size, size, 0, 0x24uLL, " called with invalid session options");
    v26 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_115;
LABEL_46:
    v30 = v26;
    v104 = 10;
    v31 = v105;
    p_src = &__src;
    if (v26 > 0x16uLL)
      goto LABEL_120;
LABEL_47:
    HIBYTE(v106) = v30;
    v33 = (std::string *)((char *)v105 + v30);
    if (v105 <= (void **)p_src)
      goto LABEL_123;
    goto LABEL_124;
  }
  v27 = &__src;
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = (std::string *)__src.__r_.__value_.__r.__words[0];
  v28 = (char *)v27 + size;
  if ((char *)v27 + size <= " called with invalid session options" && v28 + 36 > " called with invalid session options")
    goto LABEL_132;
  qmemcpy(v28, " called with invalid session options", 36);
  v29 = size + 36;
  if ((v23 & 0x8000000000000000) != 0)
  {
    __src.__r_.__value_.__l.__size_ = size + 36;
    v27->__r_.__value_.__s.__data_[v29] = 0;
    v26 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
  }
  else
  {
    *((_BYTE *)&__src.__r_.__value_.__s + 23) = v29 & 0x7F;
    v27->__r_.__value_.__s.__data_[v29] = 0;
    v26 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
  }
LABEL_115:
  v30 = __src.__r_.__value_.__l.__size_;
  if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_132;
  p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
  if (__src.__r_.__value_.__l.__size_)
  {
    if (!__src.__r_.__value_.__r.__words[0])
      goto LABEL_132;
  }
  v104 = 10;
  if (__src.__r_.__value_.__l.__size_ >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_133;
  v31 = v105;
  if (__src.__r_.__value_.__l.__size_ <= 0x16)
    goto LABEL_47;
LABEL_120:
  v75 = (v30 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v30 | 7) != 0x17)
    v75 = v30 | 7;
  v76 = v75 + 1;
  v31 = (void **)operator new(v75 + 1);
  v105[1] = (void *)v30;
  v106 = v76 | 0x8000000000000000;
  v105[0] = v31;
  v33 = (std::string *)((char *)v31 + v30);
  if (v31 <= (void **)p_src)
  {
LABEL_123:
    if (v33 <= p_src)
      goto LABEL_124;
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
LABEL_124:
  if (v30)
    memmove(v31, p_src, v30);
  v33->__r_.__value_.__s.__data_[0] = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed((_QWORD *)a1, a2, &v104);
  if ((SHIBYTE(v106) & 0x80000000) == 0)
    goto LABEL_127;
  operator delete(v105[0]);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
LABEL_128:
    operator delete(__src.__r_.__value_.__l.__data_);
}

void webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed(_QWORD *a1, void (***a2)(_QWORD), int *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  std::string __p;
  _DWORD v17[2];
  _QWORD v18[2];
  uint64_t (*v19)(uint64_t, _QWORD **, _QWORD *);
  void (*v20)(uint64_t **);

  if (a2)
    (**a2)(a2);
  v15 = *a3;
  if (*((char *)a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a3 + 1), *((_QWORD *)a3 + 2));
  else
    __p = *(std::string *)(a3 + 2);
  v17[0] = a3[8];
  *(_DWORD *)((char *)v17 + 3) = *(int *)((char *)a3 + 35);
  v5 = operator new();
  *(_QWORD *)v5 = a2;
  v6 = v17[0];
  *(_DWORD *)(v5 + 8) = v15;
  *(std::string *)(v5 + 16) = __p;
  memset(&__p, 0, sizeof(__p));
  *(_DWORD *)(v5 + 40) = v6;
  *(_DWORD *)(v5 + 43) = *(_DWORD *)((char *)v17 + 3);
  v18[0] = v5;
  v19 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0>;
  v20 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0 &&>;
  webrtc::WebRtcSessionDescriptionFactory::Post(a1, (uint64_t)v18);
  v19(1, (_QWORD **)v18, v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_session_description_factory.cc");
}

BOOL webrtc::`anonymous namespace'::ValidMediaSessionOptions(webrtc::_anonymous_namespace_ *this, const cricket::MediaSessionOptions *a2)
{
  webrtc::_anonymous_namespace_ *v2;
  cricket::SenderOptions *v3;
  cricket::SenderOptions *v4;
  std::string *v5;
  unint64_t v6;
  const cricket::SenderOptions *v7;
  const cricket::SenderOptions *v8;
  uint64_t v9;
  uint64_t v10;
  cricket::SenderOptions *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  const cricket::SenderOptions *v15;
  const cricket::SenderOptions *v16;
  std::string *v17;
  std::string *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const cricket::SenderOptions *v27;
  const std::string::value_type *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  cricket::SenderOptions *v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  std::string::size_type *p_size;
  std::string *v49;
  uint64_t v50;
  std::string::size_type size;
  std::string::size_type v52;
  int v53;
  std::string::size_type *v54;
  uint64_t v55;
  std::string *v56;
  cricket::SenderOptions *v58;
  char *v60;

  if (this != a2)
  {
    v2 = this;
    v3 = 0;
    v4 = 0;
    v60 = 0;
    while (1)
    {
      v7 = (const cricket::SenderOptions *)*((_QWORD *)v2 + 5);
      v8 = (const cricket::SenderOptions *)*((_QWORD *)v2 + 6);
      if (v8 - v7 < 1)
      {
        v5 = (std::string *)v3;
        v6 = (unint64_t)v4;
      }
      else
      {
        v9 = (v8 - v7) / 104;
        v10 = (v4 - v3) / 104;
        v11 = (cricket::SenderOptions *)((char *)v3 + 104 * v10);
        if (0x4EC4EC4EC4EC4EC5 * ((v60 - (char *)v4) >> 3) >= v9)
        {
          if (0x4EC4EC4EC4EC4EC5 * ((v4 - v11) >> 3) >= v9)
          {
            v15 = (const cricket::SenderOptions *)((char *)v7 + 104 * v9);
            v6 = (unint64_t)v4;
            v19 = 104 * v9;
            v20 = (char *)v4 - 104 * v9;
            v21 = (unint64_t)v4;
            if (v20 < (char *)v4)
            {
LABEL_25:
              while (v21)
              {
                v22 = *(_OWORD *)v20;
                *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 + 2);
                *(_OWORD *)v21 = v22;
                *((_QWORD *)v20 + 1) = 0;
                *((_QWORD *)v20 + 2) = 0;
                *(_QWORD *)v20 = 0;
                *(_QWORD *)(v21 + 24) = 0;
                *(_QWORD *)(v21 + 32) = 0;
                *(_QWORD *)(v21 + 40) = 0;
                *(_OWORD *)(v21 + 24) = *(_OWORD *)(v20 + 24);
                *(_QWORD *)(v21 + 40) = *((_QWORD *)v20 + 5);
                *((_QWORD *)v20 + 3) = 0;
                *((_QWORD *)v20 + 4) = 0;
                *((_QWORD *)v20 + 5) = 0;
                *(_QWORD *)(v21 + 48) = 0;
                *(_QWORD *)(v21 + 56) = 0;
                *(_QWORD *)(v21 + 64) = 0;
                *(_OWORD *)(v21 + 48) = *((_OWORD *)v20 + 3);
                *(_QWORD *)(v21 + 64) = *((_QWORD *)v20 + 8);
                *((_QWORD *)v20 + 6) = 0;
                *((_QWORD *)v20 + 7) = 0;
                *((_QWORD *)v20 + 8) = 0;
                *(_QWORD *)(v21 + 72) = 0;
                *(_QWORD *)(v21 + 80) = 0;
                *(_QWORD *)(v21 + 88) = 0;
                *(_OWORD *)(v21 + 72) = *(_OWORD *)(v20 + 72);
                *(_QWORD *)(v21 + 88) = *((_QWORD *)v20 + 11);
                *((_QWORD *)v20 + 9) = 0;
                *((_QWORD *)v20 + 10) = 0;
                *((_QWORD *)v20 + 11) = 0;
                *(_DWORD *)(v21 + 96) = *((_DWORD *)v20 + 24);
                v21 += 104;
                v20 += 104;
                if (v20 >= (char *)v4)
                  goto LABEL_27;
              }
              goto LABEL_97;
            }
            goto LABEL_27;
          }
          v15 = (const cricket::SenderOptions *)((char *)v7 + 8 * ((v4 - v11) >> 3));
          v6 = (unint64_t)v4;
          if (v15 != v8)
          {
            v16 = (const cricket::SenderOptions *)((char *)v7 + 8 * ((v4 - v11) >> 3));
            v17 = (std::string *)v4;
            while (v17)
            {
              v18 = cricket::SenderOptions::SenderOptions(v17, v16);
              v16 = (const cricket::SenderOptions *)((char *)v16 + 104);
              v17 = (std::string *)((char *)v18 + 104);
              v6 += 104;
              if (v16 == v8)
                goto LABEL_21;
            }
LABEL_97:
            __break(1u);
LABEL_98:
            abort();
          }
LABEL_21:
          if (v4 - v11 >= 1)
          {
            v10 = (v4 - v3) / 104;
            v19 = 104 * v9;
            v20 = (char *)(v6 - 104 * v9);
            v21 = v6;
            if (v20 < (char *)v4)
              goto LABEL_25;
LABEL_27:
            v23 = (char *)v11 + v19;
            if ((char *)v6 != v23)
            {
              v24 = v6 - 104;
              v25 = 8 * ((uint64_t)(v6 - (_QWORD)v23) >> 3);
              do
              {
                v24 = cricket::SenderOptions::operator=(v24, (__int128 *)((char *)v3 + 104 * v10 + v25 - 104)) - 104;
                v25 -= 104;
              }
              while (v25);
            }
            if (v15 == v7)
            {
              v5 = (std::string *)v3;
            }
            else
            {
              v58 = v3;
              v26 = 0;
              v27 = v15;
              do
              {
                v31 = (char *)v11 + v26;
                v32 = (char *)v7 + v26;
                if (v7 != v11)
                {
                  v33 = v32[23];
                  if (v31[23] < 0)
                  {
                    if (v33 >= 0)
                      v28 = (char *)v7 + v26;
                    else
                      v28 = *(const std::string::value_type **)((char *)v7 + v26);
                    if (v33 >= 0)
                      v29 = v32[23];
                    else
                      v29 = *(_QWORD *)((char *)v7 + v26 + 8);
                    std::string::__assign_no_alias<false>((std::string *)((char *)v11 + v26), v28, v29);
                  }
                  else if (v32[23] < 0)
                  {
                    std::string::__assign_no_alias<true>((cricket::SenderOptions *)((char *)v11 + v26), *(char **)((char *)v7 + v26), *(_QWORD *)((char *)v7 + v26 + 8));
                  }
                  else
                  {
                    v34 = *(_OWORD *)v32;
                    *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
                    *(_OWORD *)v31 = v34;
                  }
                  v30 = (char *)v7 + v26;
                  std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)((char *)v11 + v26 + 24), *(__int128 **)((char *)v7 + v26 + 24), *(__int128 **)((char *)v7 + v26 + 32), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)((char *)v7 + v26 + 32) - *(_QWORD *)((char *)v7 + v26 + 24)) >> 3));
                  std::vector<cricket::RidDescription>::__assign_with_size[abi:sn180100]<cricket::RidDescription*,cricket::RidDescription*>((uint64_t)v11 + v26 + 48, *((const cricket::RidDescription **)v30 + 6), *((const cricket::RidDescription **)v30 + 7), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v30 + 7) - *((_QWORD *)v30 + 6)) >> 4));
                  std::vector<std::vector<cricket::SimulcastLayer>>::__assign_with_size[abi:sn180100]<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>((uint64_t)v11 + v26 + 72, *((uint64_t **)v30 + 9), *((uint64_t **)v30 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v30 + 10) - *((_QWORD *)v30 + 9)) >> 3));
                  v15 = v27;
                }
                *((_DWORD *)v31 + 24) = *((_DWORD *)v32 + 24);
                v26 += 104;
              }
              while ((const cricket::SenderOptions *)((char *)v7 + v26) != v15);
              v5 = (std::string *)v58;
            }
            v6 = v21;
            goto LABEL_4;
          }
          v5 = (std::string *)v3;
        }
        else
        {
          v12 = v9 + v10;
          if ((unint64_t)(v9 + v10) > 0x276276276276276)
            goto LABEL_98;
          if (0x9D89D89D89D89D8ALL * ((v60 - (char *)v3) >> 3) > v12)
            v12 = 0x9D89D89D89D89D8ALL * ((v60 - (char *)v3) >> 3);
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v60 - (char *)v3) >> 3)) >= 0x13B13B13B13B13BLL)
            v13 = 0x276276276276276;
          else
            v13 = v12;
          if (v13)
          {
            if (v13 > 0x276276276276276)
              std::__throw_bad_array_new_length[abi:sn180100]();
            v14 = (char *)operator new(104 * v13);
          }
          else
          {
            v14 = 0;
          }
          v35 = (v4 - v3) / 104;
          v5 = (std::string *)&v14[104 * v10];
          v60 = &v14[104 * v13];
          v36 = 104 * v9;
          v6 = (unint64_t)v5 + v36;
          v37 = v5;
          do
          {
            if (!v37)
              goto LABEL_97;
            v37 = (std::string *)((char *)cricket::SenderOptions::SenderOptions(v37, v7) + 104);
            v7 = (const cricket::SenderOptions *)((char *)v7 + 104);
            v36 -= 104;
          }
          while (v36);
          if (v4 != v3)
          {
            v38 = 0;
            v39 = 104 * v35;
            v40 = v3;
            do
            {
              v41 = &v14[v39];
              v42 = (char *)v40 + v39;
              v43 = *(_OWORD *)((char *)v40 + v39 - 104);
              *((_QWORD *)v41 - 11) = *(_QWORD *)((char *)v40 + v39 - 88);
              *(_OWORD *)(v41 - 104) = v43;
              *((_QWORD *)v42 - 12) = 0;
              *((_QWORD *)v42 - 11) = 0;
              *((_QWORD *)v42 - 13) = 0;
              *((_OWORD *)v41 - 5) = *(_OWORD *)((char *)v40 + v39 - 80);
              *((_QWORD *)v41 - 8) = *(_QWORD *)((char *)v40 + v39 - 64);
              *((_QWORD *)v42 - 10) = 0;
              *((_QWORD *)v42 - 9) = 0;
              *((_QWORD *)v42 - 8) = 0;
              *(_OWORD *)(v41 - 56) = *(_OWORD *)((char *)v40 + v39 - 56);
              *((_QWORD *)v41 - 5) = *(_QWORD *)((char *)v40 + v39 - 40);
              *((_QWORD *)v42 - 7) = 0;
              *((_QWORD *)v42 - 6) = 0;
              v44 = *(_OWORD *)((char *)v40 + v39 - 32);
              *((_QWORD *)v42 - 5) = 0;
              *((_OWORD *)v41 - 2) = v44;
              *((_QWORD *)v41 - 2) = *(_QWORD *)((char *)v40 + v39 - 16);
              *((_QWORD *)v42 - 4) = 0;
              *((_QWORD *)v42 - 3) = 0;
              *((_QWORD *)v42 - 2) = 0;
              *((_DWORD *)v41 - 2) = *(_DWORD *)((char *)v40 + v39 - 8);
              v40 = (cricket::SenderOptions *)((char *)v40 - 104);
              v14 -= 104;
              v38 += 104;
            }
            while (v39 != v38);
            v5 = (std::string *)&v14[104 * v35];
          }
          for (; v11 != v4; v11 = (cricket::SenderOptions *)((char *)v11 + 104))
          {
            v45 = *(_OWORD *)v11;
            *(_QWORD *)(v6 + 16) = *((_QWORD *)v11 + 2);
            *(_OWORD *)v6 = v45;
            *((_QWORD *)v11 + 1) = 0;
            *((_QWORD *)v11 + 2) = 0;
            *(_QWORD *)v11 = 0;
            *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)v11 + 24);
            *(_QWORD *)(v6 + 40) = *((_QWORD *)v11 + 5);
            *((_QWORD *)v11 + 3) = 0;
            *((_QWORD *)v11 + 4) = 0;
            *((_QWORD *)v11 + 5) = 0;
            *(_OWORD *)(v6 + 48) = *((_OWORD *)v11 + 3);
            *(_QWORD *)(v6 + 64) = *((_QWORD *)v11 + 8);
            *((_QWORD *)v11 + 6) = 0;
            *((_QWORD *)v11 + 7) = 0;
            *((_QWORD *)v11 + 8) = 0;
            *(_OWORD *)(v6 + 72) = *(_OWORD *)((char *)v11 + 72);
            *(_QWORD *)(v6 + 88) = *((_QWORD *)v11 + 11);
            *((_QWORD *)v11 + 9) = 0;
            *((_QWORD *)v11 + 10) = 0;
            *((_QWORD *)v11 + 11) = 0;
            *(_DWORD *)(v6 + 96) = *((_DWORD *)v11 + 24);
            v6 += 104;
          }
          while (v4 != v3)
          {
            v4 = (cricket::SenderOptions *)((char *)v4 - 104);
            cricket::SenderOptions::~SenderOptions(v4);
          }
          if (v3)
            operator delete(v3);
        }
      }
LABEL_4:
      v2 = (webrtc::_anonymous_namespace_ *)((char *)v2 + 136);
      v3 = (cricket::SenderOptions *)v5;
      v4 = (cricket::SenderOptions *)v6;
      if (v2 == a2)
        goto LABEL_66;
    }
  }
  v5 = 0;
  v6 = 0;
LABEL_66:
  v46 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6 - (_QWORD)v5) >> 3));
  if ((std::string *)v6 == v5)
    v47 = 0;
  else
    v47 = v46;
  if ((std::string *)v6 == v5)
  {
    v49 = v5;
    if (!v5)
      return v49 == (std::string *)v6;
    goto LABEL_95;
  }
  p_size = &v5[4].__r_.__value_.__l.__size_;
  if (&v5[4].__r_.__value_.__r.__words[1] == (std::string::size_type *)v6)
  {
LABEL_92:
    v49 = (std::string *)v6;
    if (v5)
      goto LABEL_93;
    return v49 == (std::string *)v6;
  }
  v49 = v5;
  while (1)
  {
    v50 = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    if ((v50 & 0x80u) == 0)
      size = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    else
      size = v49->__r_.__value_.__l.__size_;
    v52 = v49[5].__r_.__value_.__s.__data_[7];
    v53 = (char)v52;
    if ((v52 & 0x80u) != 0)
      v52 = v49[4].__r_.__value_.__r.__words[2];
    if (size != v52)
      goto LABEL_73;
    v54 = v53 >= 0 ? p_size : (std::string::size_type *)*p_size;
    if ((v50 & 0x80) == 0)
      break;
    if (!memcmp(v49->__r_.__value_.__l.__data_, v54, v49->__r_.__value_.__l.__size_))
      goto LABEL_88;
LABEL_73:
    p_size += 13;
    v49 = (std::string *)((char *)v49 + 104);
    if (p_size == (std::string::size_type *)v6)
      goto LABEL_92;
  }
  if (*((_BYTE *)&v49->__r_.__value_.__s + 23))
  {
    v55 = 0;
    while (v49->__r_.__value_.__s.__data_[v55] == *((unsigned __int8 *)v54 + v55))
    {
      if (v50 == ++v55)
        goto LABEL_88;
    }
    goto LABEL_73;
  }
LABEL_88:
  if (!v5)
    return v49 == (std::string *)v6;
LABEL_93:
  v56 = (std::string *)v6;
  do
    cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)&v56[-5].__r_.__value_.__r.__words[2]);
  while (v56 != v5);
LABEL_95:
  operator delete(v5);
  return v49 == (std::string *)v6;
}

void webrtc::WebRtcSessionDescriptionFactory::InternalCreateOffer(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  const cricket::SessionDescription *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (***v12)(_QWORD);
  cricket::SessionDescription *v13;
  uint64_t v14;
  int v15;
  size_t v16;
  char *v17;
  char *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (***v31)(_QWORD);
  cricket::SessionDescription *v32;
  uint64_t v33;
  void *v34;
  size_t v35;
  unint64_t v36;
  int v37;
  std::string __p;
  _DWORD v39[2];
  int v40;
  std::string v41;
  _DWORD v42[2];
  cricket::SessionDescription *v43;
  char v44;
  char __str[8];
  uint64_t v46;
  uint64_t (*v47)(char, uint64_t *, uint64_t *);
  uint64_t (*v48)(uint64_t *);
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328)))
  {
    v4 = a2[7];
    for (i = a2[8]; v4 != i; v4 += 136)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 328) + 72))(*(_QWORD *)(a1 + 328), v4 + 8))
      {
        *(_BYTE *)(v4 + 37) = 1;
      }
    }
  }
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328)))
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328));
    v7 = (const cricket::SessionDescription *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  }
  else
  {
    v7 = 0;
  }
  cricket::MediaSessionDescriptionFactory::CreateOfferOrError((cricket::Codec **)(a1 + 80), (const cricket::MediaSessionOptions *)(a2 + 2), v7, (uint64_t)&v40);
  if (v40)
  {
    v12 = (void (***)(_QWORD))a2[1];
    v37 = v40;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
    else
      __p = v41;
    v39[0] = v42[0];
    *(_DWORD *)((char *)v39 + 3) = *(_DWORD *)((char *)v42 + 3);
    webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed((_QWORD *)a1, v12, &v37);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_51;
  }
  if (!v44)
    goto LABEL_57;
  v13 = v43;
  v43 = 0;
  if (!v13)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_session_description_factory.cc", 281, "desc", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v8, v9, v10, v11, v33);
LABEL_59:
    abort();
  }
  v14 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v14 + 1;
  v15 = snprintf(__str, 0x20uLL, "%llu", v14);
  if (v15 < 0)
    goto LABEL_59;
  v16 = v15;
  if (v15 > 0x16)
  {
    v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v20 = v15 | 7;
    v21 = v20 + 1;
    v17 = (char *)operator new(v20 + 1);
    v35 = v16;
    v36 = v21 | 0x8000000000000000;
    v34 = v17;
    v18 = &v17[v16];
    v19 = &v17[v16] > __str;
    if (v17 > __str)
      goto LABEL_26;
  }
  else
  {
    HIBYTE(v36) = v15;
    v17 = (char *)&v34;
    v18 = (char *)&v34 + v16;
    v19 = (char *)&v34 + v16 > __str;
    if (&v34 > (void **)__str)
      goto LABEL_26;
  }
  if (v19)
    goto LABEL_57;
LABEL_26:
  if ((_DWORD)v16)
    memcpy(v17, __str, v16);
  v22 = (char *)(a1 + 336);
  *v18 = 0;
  v23 = operator new();
  v24 = v23;
  *(_QWORD *)__str = v13;
  if (*(char *)(a1 + 359) < 0)
  {
    v25 = *(_QWORD *)(a1 + 344);
    if ((v25 & 0x8000000000000000) != 0)
      goto LABEL_57;
    v22 = *(char **)v22;
    if (v25)
    {
      if (!v22)
        goto LABEL_57;
    }
  }
  else
  {
    v25 = *(unsigned __int8 *)(a1 + 359);
  }
  if (SHIBYTE(v36) < 0)
  {
    v26 = v35;
    if ((v35 & 0x8000000000000000) == 0)
    {
      v27 = (char *)v34;
      if (!v35 || v34)
        goto LABEL_38;
    }
LABEL_57:
    __break(1u);
  }
  v26 = HIBYTE(v36);
  v27 = (char *)&v34;
LABEL_38:
  webrtc::JsepSessionDescription::JsepSessionDescription(v23, 0, (uint64_t *)__str, v22, v25, v27, v26);
  if (*(_QWORD *)__str)
  {
    cricket::SessionDescription::~SessionDescription(*(cricket::SessionDescription **)__str);
    MEMORY[0x20BD0ADEC]();
  }
  if (SHIBYTE(v36) < 0)
    operator delete(v34);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328)))
  {
    v28 = a2[7];
    v29 = a2[8];
    while (v28 != v29)
    {
      if (!*(_BYTE *)(v28 + 37))
      {
        v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328));
        webrtc::WebRtcSessionDescriptionFactory::CopyCandidatesFromSessionDescription(v30, (_BYTE *)(v28 + 8), v24);
      }
      v28 += 136;
    }
  }
  v31 = (void (***)(_QWORD))a2[1];
  if (v31)
    (**v31)(v31);
  *(_QWORD *)__str = v31;
  v46 = v24;
  v47 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionSucceeded(webrtc::CreateSessionDescriptionObserver *,std::unique_ptr<webrtc::SessionDescriptionInterface>)::$_0>;
  v48 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionSucceeded(webrtc::CreateSessionDescriptionObserver *,std::unique_ptr<webrtc::SessionDescriptionInterface>)::$_0 &&>;
  webrtc::WebRtcSessionDescriptionFactory::Post((_QWORD *)a1, (uint64_t)__str);
  v47(1, (uint64_t *)__str, (uint64_t *)__str);
LABEL_51:
  if (v44)
  {
    v32 = v43;
    v43 = 0;
    if (v32)
    {
      cricket::SessionDescription::~SessionDescription(v32);
      MEMORY[0x20BD0ADEC]();
    }
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
}

void webrtc::WebRtcSessionDescriptionFactory::CreateAnswer(uint64_t a1, void (***a2)(_QWORD), webrtc::_anonymous_namespace_ **a3)
{
  std::string *v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  unsigned __int8 v15;
  size_t v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string::size_type size;
  unsigned __int8 v23;
  size_t v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void (***v35)(_QWORD);
  uint64_t v36;
  int v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  char *v41;
  std::string::size_type v42;
  uint64_t v43;
  uint64_t v44;
  std::string *p_src;
  char *v46;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string::size_type v52;
  unsigned __int8 v53;
  size_t v54;
  std::string *v55;
  std::string *v56;
  std::string *v57;
  std::string *v58;
  char *v59;
  std::string::size_type v60;
  char *v61;
  char *v62;
  int64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  _BYTE *v67;
  void **v68;
  int64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  std::string *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  std::string *v77;
  char *v78;
  __int128 v79;
  void **v80;
  void **v81;
  void *v82;
  char *v83;
  char *v84;
  void *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  char *v89;
  char *v90;
  int64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  void **v96;
  void **v97;
  void *v98;
  char *v99;
  char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void (***v106)(_QWORD);
  int v107;
  char v108;
  std::string v109;
  int v110;
  char v111;
  void *v112;
  char *v113;
  char *v114;
  void *__p;
  char *v116;
  char *v117;
  char v118;
  int v119;
  void (***v120)(_QWORD);
  int v121;
  char v122;
  std::string v123;
  int v124;
  char v125;
  void *v126;
  char *v127;
  void *v128;
  void **v129;
  char v130;
  int v131;
  void *v132[2];
  unint64_t v133;
  int v134;
  char v135;
  char v136;
  int v137;
  _QWORD v138[2];
  unint64_t v139;
  int v140;
  char v141;
  char v142;
  int v143;
  _QWORD v144[2];
  unint64_t v145;
  int v146;
  char v147;
  char v148;
  int v149;
  void *v150;
  __int128 v151;
  int v152;
  char v153;
  char v154;
  std::string __src;

  *((_BYTE *)&__src.__r_.__value_.__s + 23) = 12;
  if (&__src <= (std::string *)"CreateAnswer" && (char *)&__src.__r_.__value_.__r.__words[1] + 4 > "CreateAnswer")
    goto LABEL_193;
  strcpy((char *)&__src, "CreateAnswer");
  if (*(_DWORD *)(a1 + 360) == 3)
  {
    v6 = (std::string *)operator new(0x40uLL);
    v7 = (unint64_t)v6;
    if (&__src < v6 || (std::string *)((char *)&v6->__r_.__value_.__r.__words[1] + 4) <= &__src)
    {
      LODWORD(v6->__r_.__value_.__r.__words[1]) = 1919252339;
      v6->__r_.__value_.__r.__words[0] = *(_QWORD *)"CreateAnswer";
      if ((char *)&v6->__r_.__value_.__r.__words[1] + 4 > " failed because DTLS identity request failed"
        || &v6[2].__r_.__value_.__r.__words[1] <= (std::string::size_type *)" failed because DTLS identity request failed")
      {
        strcpy(&v6->__r_.__value_.__s.__data_[12], " failed because DTLS identity request failed");
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
        *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = xmmword_208F1B0C0;
        v149 = 10;
        v8 = operator new(0x40uLL);
        v150 = v8;
        v151 = xmmword_208F1B0C0;
        if ((unint64_t)v8 > v7 || (unint64_t)v8 + 56 <= v7)
        {
          v9 = *(_OWORD *)(v7 + 16);
          *v8 = *(_OWORD *)v7;
          v8[1] = v9;
          v8[2] = *(_OWORD *)(v7 + 32);
          *((_QWORD *)v8 + 6) = *(_QWORD *)(v7 + 48);
          *((_BYTE *)v8 + 56) = 0;
          v152 = 0;
          v153 = 0;
          v154 = 0;
          webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed((_QWORD *)a1, a2, &v149);
          if ((SHIBYTE(v151) & 0x80000000) == 0)
            goto LABEL_190;
          v10 = v150;
          goto LABEL_189;
        }
      }
    }
    goto LABEL_193;
  }
  if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 32))(*(_QWORD *)(a1 + 328)))
  {
    v20 = __src.__r_.__value_.__r.__words[2];
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = 22;
    else
      v21 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    else
      size = __src.__r_.__value_.__l.__size_;
    if (v21 - size < 0x2D)
    {
      std::string::__grow_by_and_replace(&__src, v21, size - v21 + 45, size, size, 0, 0x2DuLL, " can't be called before SetRemoteDescription.");
      v23 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_33;
LABEL_75:
      v24 = __src.__r_.__value_.__l.__size_;
      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_193;
      v26 = (std::string *)__src.__r_.__value_.__r.__words[0];
      if (__src.__r_.__value_.__l.__size_)
      {
        if (!__src.__r_.__value_.__r.__words[0])
          goto LABEL_193;
      }
      v143 = 10;
      if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_194;
      v25 = (std::string *)v144;
      if (__src.__r_.__value_.__l.__size_ <= 0x16)
      {
LABEL_34:
        HIBYTE(v145) = v24;
        v27 = (std::string *)((char *)v144 + v24);
        if (v144 > (_QWORD *)v26)
        {
LABEL_84:
          if (v24)
            memmove(v25, v26, v24);
          v27->__r_.__value_.__s.__data_[0] = 0;
          v146 = 0;
          v147 = 0;
          v148 = 0;
          webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed((_QWORD *)a1, a2, &v143);
          if ((SHIBYTE(v145) & 0x80000000) == 0)
            goto LABEL_190;
          v10 = (void *)v144[0];
LABEL_189:
          operator delete(v10);
          goto LABEL_190;
        }
LABEL_83:
        if (v27 > v26)
          goto LABEL_193;
        goto LABEL_84;
      }
LABEL_80:
      v48 = (v24 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v48 = v24 | 7;
      v49 = v48 + 1;
      v25 = (std::string *)operator new(v48 + 1);
      v144[1] = v24;
      v145 = v49 | 0x8000000000000000;
      v144[0] = v25;
      v27 = (std::string *)((char *)v25 + v24);
      if (v25 > v26)
        goto LABEL_84;
      goto LABEL_83;
    }
    p_src = &__src;
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
    v46 = (char *)p_src + size;
    if ((char *)p_src + size <= " can't be called before SetRemoteDescription."
      && v46 + 45 > " can't be called before SetRemoteDescription.")
    {
      goto LABEL_193;
    }
    qmemcpy(v46, " can't be called before SetRemoteDescription.", 45);
    v47 = size + 45;
    if ((v20 & 0x8000000000000000) != 0)
    {
      __src.__r_.__value_.__l.__size_ = size + 45;
      p_src->__r_.__value_.__s.__data_[v47] = 0;
      v23 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_75;
    }
    else
    {
      *((_BYTE *)&__src.__r_.__value_.__s + 23) = v47 & 0x7F;
      p_src->__r_.__value_.__s.__data_[v47] = 0;
      v23 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_75;
    }
LABEL_33:
    v24 = v23;
    v143 = 10;
    v25 = (std::string *)v144;
    v26 = &__src;
    if (v23 <= 0x16uLL)
      goto LABEL_34;
    goto LABEL_80;
  }
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 32))(*(_QWORD *)(a1 + 328));
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11))
  {
    v12 = __src.__r_.__value_.__r.__words[2];
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = 22;
    else
      v13 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    else
      v14 = __src.__r_.__value_.__l.__size_;
    if (v13 - v14 < 0x33)
    {
      std::string::__grow_by_and_replace(&__src, v13, v14 - v13 + 51, v14, v14, 0, 0x33uLL, " failed because remote_description is not an offer.");
      v15 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
LABEL_56:
      v16 = __src.__r_.__value_.__l.__size_;
      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_193;
      v18 = (std::string *)__src.__r_.__value_.__r.__words[0];
      if (__src.__r_.__value_.__l.__size_)
      {
        if (!__src.__r_.__value_.__r.__words[0])
          goto LABEL_193;
      }
      v137 = 10;
      if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_194;
      v17 = (std::string *)v138;
      if (__src.__r_.__value_.__l.__size_ <= 0x16)
        goto LABEL_23;
      goto LABEL_61;
    }
    v40 = &__src;
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v40 = (std::string *)__src.__r_.__value_.__r.__words[0];
    v41 = (char *)v40 + v14;
    if ((char *)v40 + v14 <= " failed because remote_description is not an offer."
      && v41 + 51 > " failed because remote_description is not an offer.")
    {
      goto LABEL_193;
    }
    qmemcpy(v41, " failed because remote_description is not an offer.", 51);
    v42 = v14 + 51;
    if ((v12 & 0x8000000000000000) != 0)
    {
      __src.__r_.__value_.__l.__size_ = v14 + 51;
      v40->__r_.__value_.__s.__data_[v42] = 0;
      v15 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_56;
    }
    else
    {
      *((_BYTE *)&__src.__r_.__value_.__s + 23) = v42 & 0x7F;
      v40->__r_.__value_.__s.__data_[v42] = 0;
      v15 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_56;
    }
LABEL_22:
    v16 = v15;
    v137 = 10;
    v17 = (std::string *)v138;
    v18 = &__src;
    if (v15 <= 0x16uLL)
    {
LABEL_23:
      HIBYTE(v139) = v16;
      v19 = (std::string *)((char *)v138 + v16);
      if (v138 > (_QWORD *)v18)
        goto LABEL_65;
LABEL_64:
      if (v19 <= v18)
      {
LABEL_65:
        if (v16)
          memmove(v17, v18, v16);
        v19->__r_.__value_.__s.__data_[0] = 0;
        v140 = 0;
        v141 = 0;
        v142 = 0;
        webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed((_QWORD *)a1, a2, &v137);
        if ((SHIBYTE(v139) & 0x80000000) == 0)
          goto LABEL_190;
        v10 = (void *)v138[0];
        goto LABEL_189;
      }
LABEL_193:
      __break(1u);
      goto LABEL_194;
    }
LABEL_61:
    v43 = (v16 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v43 = v16 | 7;
    v44 = v43 + 1;
    v17 = (std::string *)operator new(v43 + 1);
    v138[1] = v16;
    v139 = v44 | 0x8000000000000000;
    v138[0] = v17;
    v19 = (std::string *)((char *)v17 + v16);
    if (v17 > v18)
      goto LABEL_65;
    goto LABEL_64;
  }
  {
    v50 = __src.__r_.__value_.__r.__words[2];
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = 22;
    else
      v51 = (__src.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    else
      v52 = __src.__r_.__value_.__l.__size_;
    if (v51 - v52 >= 0x25)
    {
      v58 = &__src;
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v58 = (std::string *)__src.__r_.__value_.__r.__words[0];
      v59 = (char *)v58 + v52;
      if ((char *)v58 + v52 <= " called with invalid session options."
        && v59 + 37 > " called with invalid session options.")
      {
        goto LABEL_193;
      }
      qmemcpy(v59, " called with invalid session options.", 37);
      v60 = v52 + 37;
      if ((v50 & 0x8000000000000000) != 0)
        __src.__r_.__value_.__l.__size_ = v52 + 37;
      else
        *((_BYTE *)&__src.__r_.__value_.__s + 23) = v60 & 0x7F;
      v58->__r_.__value_.__s.__data_[v60] = 0;
      v53 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_96:
        v54 = v53;
        v131 = 10;
        v55 = (std::string *)v132;
        v56 = &__src;
        if (v53 <= 0x16uLL)
          goto LABEL_97;
        goto LABEL_181;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&__src, v51, v52 - v51 + 37, v52, v52, 0, 0x25uLL, " called with invalid session options.");
      v53 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_96;
    }
    v54 = __src.__r_.__value_.__l.__size_;
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_193;
    v56 = (std::string *)__src.__r_.__value_.__r.__words[0];
    if (__src.__r_.__value_.__l.__size_)
    {
      if (!__src.__r_.__value_.__r.__words[0])
        goto LABEL_193;
    }
    v131 = 10;
    if (__src.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_194;
    v55 = (std::string *)v132;
    if (__src.__r_.__value_.__l.__size_ <= 0x16)
    {
LABEL_97:
      HIBYTE(v133) = v54;
      v57 = (std::string *)((char *)v132 + v54);
      if (v132 > (void **)v56)
      {
LABEL_185:
        if (v54)
          memmove(v55, v56, v54);
        v57->__r_.__value_.__s.__data_[0] = 0;
        v134 = 0;
        v135 = 0;
        v136 = 0;
        webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed((_QWORD *)a1, a2, &v131);
        if ((SHIBYTE(v133) & 0x80000000) == 0)
          goto LABEL_190;
        v10 = v132[0];
        goto LABEL_189;
      }
LABEL_184:
      if (v57 > v56)
        goto LABEL_193;
      goto LABEL_185;
    }
LABEL_181:
    v102 = (v54 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17)
      v102 = v54 | 7;
    v103 = v102 + 1;
    v55 = (std::string *)operator new(v102 + 1);
    v132[1] = (void *)v54;
    v133 = v103 | 0x8000000000000000;
    v132[0] = v55;
    v57 = (std::string *)((char *)v55 + v54);
    if (v55 > v56)
      goto LABEL_185;
    goto LABEL_184;
  }
  v119 = 1;
  v120 = a2;
  if (a2)
    (**a2)(a2);
  cricket::MediaSessionOptions::MediaSessionOptions((cricket::MediaSessionOptions *)&v121, (const cricket::MediaSessionOptions *)a3);
  if (*(_DWORD *)(a1 + 360) == 1)
  {
    v28 = *(_QWORD *)(a1 + 8);
    v29 = *(_QWORD *)(a1 + 16);
    v30 = 36 * ((v29 - v28) >> 3) - 1;
    if (v29 == v28)
      v30 = 0;
    if (v30 == *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32))
    {
      std::deque<webrtc::WebRtcSessionDescriptionFactory::CreateSessionDescriptionRequest>::__add_back_capacity(a1);
      v28 = *(_QWORD *)(a1 + 8);
      v29 = *(_QWORD *)(a1 + 16);
    }
    if (v29 != v28)
    {
      v31 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32);
      v32 = *(_QWORD *)(v28 + 8 * (v31 / 0x24));
      if (v32)
      {
        v33 = v31 % 0x24;
        v34 = v32 + 112 * (v31 % 0x24);
        *(_DWORD *)v34 = v119;
        v35 = v120;
        *(_QWORD *)(v34 + 8) = v120;
        if (v35)
          (**v35)(v35);
        v36 = v32 + 112 * v33;
        v37 = v121;
        *(_BYTE *)(v36 + 20) = v122;
        *(_DWORD *)(v36 + 16) = v37;
        v38 = (std::string *)(v36 + 24);
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v38, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
        }
        else
        {
          v39 = *(_OWORD *)&v123.__r_.__value_.__l.__data_;
          *(_QWORD *)(v36 + 40) = *((_QWORD *)&v123.__r_.__value_.__l + 2);
          *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
        }
        v86 = v32 + 112 * v33;
        *(_DWORD *)(v86 + 48) = 65537;
        *(_BYTE *)(v86 + 52) = 0;
        *(_DWORD *)(v86 + 48) = v124;
        *(_BYTE *)(v86 + 52) = v125;
        *(_QWORD *)(v86 + 56) = 0;
        v87 = (_QWORD *)(v86 + 56);
        v87[1] = 0;
        v88 = v87 + 1;
        v87[2] = 0;
        v89 = (char *)v126;
        v90 = v127;
        v91 = v127 - (_BYTE *)v126;
        if (v127 != v126)
        {
          v104 = v33;
          v92 = 0xF0F0F0F0F0F0F0F1 * (v91 >> 3);
          if (v92 > 0x1E1E1E1E1E1E1E1)
            goto LABEL_194;
          v93 = (char *)operator new(v91);
          v94 = 0;
          *v87 = v93;
          *v88 = v93;
          v87[2] = &v93[136 * v92];
          do
          {
            cricket::MediaDescriptionOptions::MediaDescriptionOptions((cricket::MediaDescriptionOptions *)&v93[v94], (const cricket::MediaDescriptionOptions *)&v89[v94]);
            v94 += 136;
          }
          while (&v89[v94] != v90);
          *v88 = &v93[v94];
          v33 = v104;
        }
        v95 = v32 + 112 * v33;
        *(_QWORD *)(v95 + 80) = 0;
        *(_QWORD *)(v95 + 88) = 0;
        v95 += 80;
        *(_QWORD *)(v95 + 16) = 0;
        std::vector<cricket::IceParameters>::__init_with_size[abi:sn180100]<cricket::IceParameters*,cricket::IceParameters*>((_QWORD *)v95, (uint64_t)v128, (uint64_t)v129, 0x6DB6DB6DB6DB6DB7 * (((char *)v129 - (_BYTE *)v128) >> 3));
        *(_BYTE *)(v95 + 24) = v130;
        ++*(_QWORD *)(a1 + 40);
        goto LABEL_155;
      }
    }
    goto LABEL_193;
  }
  LODWORD(v105) = v119;
  v106 = v120;
  if (v120)
    (**v120)(v120);
  v107 = v121;
  v108 = v122;
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v109, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  else
    v109 = v123;
  v110 = v124;
  v111 = v125;
  v113 = 0;
  v114 = 0;
  v112 = 0;
  v61 = (char *)v126;
  v62 = v127;
  v63 = v127 - (_BYTE *)v126;
  if (v127 != v126)
  {
    v64 = 0xF0F0F0F0F0F0F0F1 * (v63 >> 3);
    if (v64 > 0x1E1E1E1E1E1E1E1)
      goto LABEL_194;
    v65 = (char *)operator new(v63);
    v66 = 0;
    v112 = v65;
    v113 = v65;
    v114 = &v65[136 * v64];
    do
    {
      cricket::MediaDescriptionOptions::MediaDescriptionOptions((cricket::MediaDescriptionOptions *)&v65[v66], (const cricket::MediaDescriptionOptions *)&v61[v66]);
      v66 += 136;
    }
    while (&v61[v66] != v62);
    v113 = &v65[v66];
  }
  __p = 0;
  v116 = 0;
  v117 = 0;
  v67 = v128;
  v68 = v129;
  v69 = (char *)v129 - (_BYTE *)v128;
  if (v129 == v128)
    goto LABEL_129;
  v70 = 0x6DB6DB6DB6DB6DB7 * (v69 >> 3);
  if (v70 >= 0x492492492492493)
LABEL_194:
    abort();
  v71 = (char *)operator new(v69);
  v72 = 0;
  __p = v71;
  v116 = v71;
  v117 = &v71[56 * v70];
  do
  {
    v77 = (std::string *)&v71[v72];
    v78 = &v67[v72];
    if ((char)v67[v72 + 23] < 0)
    {
      std::string::__init_copy_ctor_external(v77, *(const std::string::value_type **)v78, *((_QWORD *)v78 + 1));
      v73 = (std::string *)&v71[v72 + 24];
      v74 = &v67[v72];
      v75 = (uint64_t)&v67[v72 + 24];
      if (((char)v67[v72 + 47] & 0x80000000) == 0)
        goto LABEL_123;
    }
    else
    {
      v79 = *(_OWORD *)v78;
      v77->__r_.__value_.__r.__words[2] = *((_QWORD *)v78 + 2);
      *(_OWORD *)&v77->__r_.__value_.__l.__data_ = v79;
      v73 = (std::string *)&v71[v72 + 24];
      v74 = &v67[v72];
      v75 = (uint64_t)&v67[v72 + 24];
      if (((char)v67[v72 + 47] & 0x80000000) == 0)
      {
LABEL_123:
        v76 = *(_OWORD *)v75;
        v73->__r_.__value_.__r.__words[2] = *(_QWORD *)(v75 + 16);
        *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v76;
        goto LABEL_124;
      }
    }
    std::string::__init_copy_ctor_external(v73, *(const std::string::value_type **)v75, *((_QWORD *)v74 + 4));
LABEL_124:
    v71[v72 + 48] = v67[v72 + 48];
    v72 += 56;
  }
  while (&v67[v72] != (_BYTE *)v68);
  v116 = &v71[v72];
LABEL_129:
  v118 = v130;
  webrtc::WebRtcSessionDescriptionFactory::InternalCreateAnswer(a1, &v105);
  v80 = (void **)__p;
  if (__p)
  {
    v81 = (void **)v116;
    v82 = __p;
    if (v116 == __p)
    {
LABEL_138:
      v116 = (char *)v80;
      operator delete(v82);
      goto LABEL_139;
    }
    while (1)
    {
      if (*((char *)v81 - 9) < 0)
      {
        operator delete(*(v81 - 4));
        if ((*((char *)v81 - 33) & 0x80000000) == 0)
          goto LABEL_133;
      }
      else if ((*((char *)v81 - 33) & 0x80000000) == 0)
      {
LABEL_133:
        v81 -= 7;
        if (v81 == v80)
          goto LABEL_137;
        continue;
      }
      operator delete(*(v81 - 7));
      v81 -= 7;
      if (v81 == v80)
      {
LABEL_137:
        v82 = __p;
        goto LABEL_138;
      }
    }
  }
LABEL_139:
  v83 = (char *)v112;
  if (v112)
  {
    v84 = v113;
    v85 = v112;
    if (v113 != v112)
    {
      do
        cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)(v84 - 136));
      while (v84 != v83);
      v85 = v112;
    }
    v113 = v83;
    operator delete(v85);
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (v106)
    (*v106)[1](v106);
LABEL_155:
  v96 = (void **)v128;
  if (v128)
  {
    v97 = v129;
    v98 = v128;
    if (v129 == v128)
    {
LABEL_164:
      v129 = v96;
      operator delete(v98);
      goto LABEL_165;
    }
    while (1)
    {
      if (*((char *)v97 - 9) < 0)
      {
        operator delete(*(v97 - 4));
        if ((*((char *)v97 - 33) & 0x80000000) == 0)
          goto LABEL_159;
      }
      else if ((*((char *)v97 - 33) & 0x80000000) == 0)
      {
LABEL_159:
        v97 -= 7;
        if (v97 == v96)
          goto LABEL_163;
        continue;
      }
      operator delete(*(v97 - 7));
      v97 -= 7;
      if (v97 == v96)
      {
LABEL_163:
        v98 = v128;
        goto LABEL_164;
      }
    }
  }
LABEL_165:
  v99 = (char *)v126;
  if (v126)
  {
    v100 = v127;
    v101 = v126;
    if (v127 != v126)
    {
      do
        cricket::MediaDescriptionOptions::~MediaDescriptionOptions((cricket::MediaDescriptionOptions *)(v100 - 136));
      while (v100 != v99);
      v101 = v126;
    }
    v127 = v99;
    operator delete(v101);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  if (v120)
    (*v120)[1](v120);
LABEL_190:
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
}

void webrtc::WebRtcSessionDescriptionFactory::InternalCreateAnswer(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const cricket::SessionDescription *v8;
  const cricket::MediaSessionOptions *v9;
  uint64_t v10;
  const cricket::SessionDescription *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (***v16)(_QWORD);
  cricket::SessionDescription *v17;
  uint64_t v18;
  int v19;
  size_t v20;
  char *v21;
  char *v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  size_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (***v35)(_QWORD);
  cricket::SessionDescription *v36;
  uint64_t v37;
  void *v38;
  size_t v39;
  unint64_t v40;
  int v41;
  std::string __p;
  _DWORD v43[2];
  int v44;
  std::string v45;
  _DWORD v46[2];
  cricket::SessionDescription *v47;
  char v48;
  char __str[8];
  uint64_t v50;
  uint64_t (*v51)(char, uint64_t *, uint64_t *);
  uint64_t (*v52)(uint64_t *);
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 32))(*(_QWORD *)(a1 + 328)))
  {
    v4 = a2[7];
    v5 = a2[8];
    while (v4 != v5)
    {
      *(_BYTE *)(v4 + 37) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 328) + 80))(*(_QWORD *)(a1 + 328), v4 + 8);
      v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 328) + 88))(*(_QWORD *)(a1 + 328), v4 + 8);
      if ((v6 & 0xFF00000000) != 0)
        *(_BYTE *)(v4 + 38) = (_DWORD)v6 == 1;
      v4 += 136;
    }
  }
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 32))(*(_QWORD *)(a1 + 328)))
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 32))(*(_QWORD *)(a1 + 328));
    v8 = (const cricket::SessionDescription *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v9 = (const cricket::MediaSessionOptions *)(a2 + 2);
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328)))
    {
LABEL_9:
      v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328));
      v11 = (const cricket::SessionDescription *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      goto LABEL_12;
    }
  }
  else
  {
    v8 = 0;
    v9 = (const cricket::MediaSessionOptions *)(a2 + 2);
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328)))
      goto LABEL_9;
  }
  v11 = 0;
LABEL_12:
  cricket::MediaSessionDescriptionFactory::CreateAnswerOrError((cricket::MediaSessionDescriptionFactory *)(a1 + 80), v8, v9, v11, (uint64_t)&v44);
  if (v44)
  {
    v16 = (void (***)(_QWORD))a2[1];
    v41 = v44;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
    else
      __p = v45;
    v43[0] = v46[0];
    *(_DWORD *)((char *)v43 + 3) = *(_DWORD *)((char *)v46 + 3);
    webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed((_QWORD *)a1, v16, &v41);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_53;
  }
  if (!v48)
    goto LABEL_59;
  v17 = v47;
  v47 = 0;
  if (!v17)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_session_description_factory.cc", 343, "desc", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v12, v13, v14, v15, v37);
LABEL_61:
    abort();
  }
  v18 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v18 + 1;
  v19 = snprintf(__str, 0x20uLL, "%llu", v18);
  if (v19 < 0)
    goto LABEL_61;
  v20 = v19;
  if (v19 > 0x16)
  {
    v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v24 = v19 | 7;
    v25 = v24 + 1;
    v21 = (char *)operator new(v24 + 1);
    v39 = v20;
    v40 = v25 | 0x8000000000000000;
    v38 = v21;
    v22 = &v21[v20];
    v23 = &v21[v20] > __str;
    if (v21 > __str)
      goto LABEL_28;
  }
  else
  {
    HIBYTE(v40) = v19;
    v21 = (char *)&v38;
    v22 = (char *)&v38 + v20;
    v23 = (char *)&v38 + v20 > __str;
    if (&v38 > (void **)__str)
      goto LABEL_28;
  }
  if (v23)
    goto LABEL_59;
LABEL_28:
  if ((_DWORD)v20)
    memcpy(v21, __str, v20);
  v26 = (char *)(a1 + 336);
  *v22 = 0;
  v27 = operator new();
  v28 = v27;
  *(_QWORD *)__str = v17;
  if (*(char *)(a1 + 359) < 0)
  {
    v29 = *(_QWORD *)(a1 + 344);
    if ((v29 & 0x8000000000000000) != 0)
      goto LABEL_59;
    v26 = *(char **)v26;
    if (v29)
    {
      if (!v26)
        goto LABEL_59;
    }
  }
  else
  {
    v29 = *(unsigned __int8 *)(a1 + 359);
  }
  if (SHIBYTE(v40) < 0)
  {
    v30 = v39;
    if ((v39 & 0x8000000000000000) == 0)
    {
      v31 = (char *)v38;
      if (!v39 || v38)
        goto LABEL_40;
    }
LABEL_59:
    __break(1u);
  }
  v30 = HIBYTE(v40);
  v31 = (char *)&v38;
LABEL_40:
  webrtc::JsepSessionDescription::JsepSessionDescription(v27, 2, (uint64_t *)__str, v26, v29, v31, v30);
  if (*(_QWORD *)__str)
  {
    cricket::SessionDescription::~SessionDescription(*(cricket::SessionDescription **)__str);
    MEMORY[0x20BD0ADEC]();
  }
  if (SHIBYTE(v40) < 0)
    operator delete(v38);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328)))
  {
    v32 = a2[7];
    v33 = a2[8];
    while (v32 != v33)
    {
      if (!*(_BYTE *)(v32 + 37))
      {
        v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328));
        webrtc::WebRtcSessionDescriptionFactory::CopyCandidatesFromSessionDescription(v34, (_BYTE *)(v32 + 8), v28);
      }
      v32 += 136;
    }
  }
  v35 = (void (***)(_QWORD))a2[1];
  if (v35)
    (**v35)(v35);
  *(_QWORD *)__str = v35;
  v50 = v28;
  v51 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionSucceeded(webrtc::CreateSessionDescriptionObserver *,std::unique_ptr<webrtc::SessionDescriptionInterface>)::$_0>;
  v52 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionSucceeded(webrtc::CreateSessionDescriptionObserver *,std::unique_ptr<webrtc::SessionDescriptionInterface>)::$_0 &&>;
  webrtc::WebRtcSessionDescriptionFactory::Post((_QWORD *)a1, (uint64_t)__str);
  v51(1, (uint64_t *)__str, (uint64_t *)__str);
LABEL_53:
  if (v48)
  {
    v36 = v47;
    v47 = 0;
    if (v36)
    {
      cricket::SessionDescription::~SessionDescription(v36);
      MEMORY[0x20BD0ADEC]();
    }
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
}

void webrtc::WebRtcSessionDescriptionFactory::Post(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  char v27;
  char v28;
  _QWORD v29[2];
  uint64_t (*v30)(uint64_t, _QWORD **, _QWORD *);
  void (*v31)(_QWORD **);

  v4 = a1[47];
  v5 = a1[48];
  v6 = 16 * (v5 - v4) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[51] + a1[50])
  {
    _ZNSt3__15dequeIN4absl12AnyInvocableIFvvOEEENS_9allocatorIS4_EEE19__add_back_capacityEv((uint64_t)(a1 + 46));
    v4 = a1[47];
    v5 = a1[48];
  }
  if (v5 != v4)
  {
    v7 = a1[51] + a1[50];
    v8 = *(_QWORD *)(v4 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8));
    if (v8)
    {
      v9 = v8 + 32 * (v7 & 0x7F);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(a2 + 16))(0, a2, v9);
      *(_OWORD *)(v9 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
      *(_QWORD *)(a2 + 24) = 0;
      ++a1[51];
      v10 = a1[6];
      v11 = a1[56];
      if (v11 && (v12 = atomic_load((unsigned int *)(v11 + 4)), v12 != 1))
      {
        v13 = (_QWORD *)a1[56];
        if (!v13)
        {
          v22 = a1[57];
LABEL_26:
          v26 = (_QWORD *)operator new();
          *v26 = v13;
          v26[1] = v22;
          v29[0] = v26;
          v30 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc31WebRtcSessionDescriptionFactory4PostENS_12AnyInvocableIFvvOEEEE3__1EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESA_;
          v31 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc31WebRtcSessionDescriptionFactory4PostENS_12AnyInvocableIFvvOEEEE3__1JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
          (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v10 + 8))(v10, v29, &v28, &v27);
          v30(1, (_QWORD **)v29, v29);
          return;
        }
      }
      else
      {
        v13 = (_QWORD *)operator new();
        *v13 = 1;
        v14 = (unsigned int *)v13 + 1;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        v16 = a1[56];
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 4);
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
            MEMORY[0x20BD0ADEC]();
        }
        a1[56] = v13;
      }
      v20 = (unsigned int *)v13 + 1;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v22 = a1[57];
      do
        v23 = __ldxr(v20);
      while (__stxr(v23 + 1, v20));
      do
      {
        v24 = __ldaxr(v20);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v20));
      if (!v25)
        MEMORY[0x20BD0ADEC](v13, 0x1000C404A09149ALL);
      goto LABEL_26;
    }
  }
  __break(1u);
}

uint64_t cricket::SenderOptions::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void **v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void *v19;
  void **v20;
  void **v21;
  void **v22;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(a1 + 24);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
      v8 = *v5;
    }
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v8);
    *v5 = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v9 = (void **)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(void **)(a1 + 48);
    if (v11 != v10)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11 - 24, *(_QWORD *)(v11 - 16));
        v13 = *(void **)(v11 - 48);
        if (v13)
        {
          *(_QWORD *)(v11 - 40) = v13;
          operator delete(v13);
        }
        if (*(char *)(v11 - 57) < 0)
          operator delete(*(void **)(v11 - 80));
        v11 -= 80;
      }
      while (v11 != v10);
      v12 = *v9;
    }
    *(_QWORD *)(a1 + 56) = v10;
    operator delete(v12);
    *v9 = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  v14 = (void **)(a1 + 72);
  v15 = *(void ***)(a1 + 72);
  if (v15)
  {
    v16 = *(void ***)(a1 + 80);
    v17 = *(void **)(a1 + 72);
    if (v16 != v15)
    {
      v18 = *(void ***)(a1 + 80);
      do
      {
        v21 = (void **)*(v18 - 3);
        v18 -= 3;
        v20 = v21;
        if (v21)
        {
          v22 = (void **)*(v16 - 2);
          v19 = v20;
          if (v22 != v20)
          {
            do
            {
              if (*((char *)v22 - 9) < 0)
                operator delete(*(v22 - 4));
              v22 -= 4;
            }
            while (v22 != v20);
            v19 = *v18;
          }
          *(v16 - 2) = v20;
          operator delete(v19);
        }
        v16 = v18;
      }
      while (v18 != v15);
      v17 = *v14;
    }
    *(_QWORD *)(a1 + 80) = v15;
    operator delete(v17);
    *v14 = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,webrtc::`anonymous namespace'::ValidMediaSessionOptions(cricket::MediaSessionOptions const&)::$_0 &,cricket::SenderOptions *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t i;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  __int128 v19;
  size_t v20;
  void **v21;
  unint64_t v22;
  BOOL v23;
  char v24;
  _QWORD *v25;
  void **v27;
  size_t v28;
  size_t v29;
  int v30;
  unint64_t v31;
  const void *v32;
  void **v34;
  size_t v35;
  size_t v36;
  int v37;
  BOOL v38;
  const void *v39;
  void **v41;
  size_t v42;
  size_t v43;
  int v44;
  unint64_t v45;
  __int128 v46;
  size_t v47;
  void **v48;
  unint64_t v49;
  BOOL v50;
  char v51;
  const void *v52;
  void **v54;
  size_t v55;
  size_t v56;
  int v57;
  const void *v58;
  void **v60;
  size_t v61;
  size_t v62;
  int v63;
  char v64;
  char v65;
  int v66;
  __int128 v67;
  void **v68;
  size_t v69;
  const void *v70;
  size_t v71;
  int v72;
  uint64_t v73;
  void **v74;
  BOOL v75;
  char v76;
  void **v77;
  size_t v78;
  size_t v79;
  const void *v80;
  size_t v81;
  int v82;
  void **v83;
  BOOL v84;
  char v85;
  void **v86;
  size_t v87;
  size_t v88;
  const void *v89;
  size_t v90;
  int v91;
  void **v92;
  BOOL v93;
  char v94;
  void **v95;
  size_t v96;
  size_t v97;
  const void *v98;
  size_t v99;
  int v100;
  __int128 v101;
  unint64_t v102;
  void **v103;
  BOOL v104;
  char v105;
  void **v106;
  size_t v107;
  const void *v108;
  size_t v109;
  int v110;
  void **v111;
  size_t v112;
  const void *v113;
  size_t v114;
  int v115;
  unint64_t v116;
  const void *v117;
  const void **v118;
  uint64_t v119;
  int64_t v120;
  int64_t v121;
  uint64_t v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v125;
  size_t v126;
  const void *v127;
  char *v129;
  size_t v130;
  char *v131;
  size_t v133;
  int v134;
  char *v135;
  uint64_t v137;
  size_t v138;
  const void *v139;
  size_t v141;
  int v142;
  __int128 v143;
  uint64_t v144;
  size_t v145;
  BOOL v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  const void *v151;
  unint64_t v153;
  const void *v154;
  size_t v156;
  int v157;
  const void *v158;
  void **v160;
  size_t v161;
  size_t v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  const void *v167;
  BOOL v168;
  size_t v169;
  const void *v170;
  size_t v171;
  int v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void **v177;
  unint64_t v179;
  const void *v180;
  size_t v181;
  int v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  const void *v189;
  size_t v191;
  const void *v192;
  size_t v193;
  int v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void **v199;
  size_t v201;
  const void *v202;
  size_t v203;
  int v204;
  int64_t v205;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  size_t v211;
  const void *v212;
  size_t v214;
  const void *v215;
  size_t v217;
  int v218;
  __int128 *v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  size_t v223;
  const void *v224;
  size_t v226;
  const void *v227;
  size_t v229;
  int v230;
  __int128 v231;
  unsigned __int8 v232;
  const void *v233;
  size_t v234;
  BOOL v235;
  int v236;
  uint64_t v237;
  unint64_t v238;
  size_t v239;
  const void *v240;
  size_t v242;
  int v243;
  size_t v244;
  const void *v245;
  size_t v247;
  int v248;
  unint64_t v249;
  const void *v250;
  size_t v251;
  int v252;
  __int128 v253;
  unint64_t v254;
  char v255;
  void *__s2;
  void **__s2a;
  void *__s2b;
  uint64_t v259;
  uint64_t v260;
  int64_t v262;
  __int128 *v263;
  void *__s1[2];
  uint64_t v266;
  __int128 v267;
  uint64_t v268;
  __int128 v269;
  uint64_t v270;
  __int128 v271;
  uint64_t v272;
  int v273;
  void *v274[2];
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  __int128 v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  int v282;

  i = 104;
LABEL_2:
  v7 = a2;
  v263 = (__int128 *)(a2 - 104);
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = v7 - v8;
    v10 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v7 - v8) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v116 = a2;
        if (*(char *)(a2 - 81) < 0)
          goto LABEL_591;
        v11 = *(unsigned __int8 *)(a2 - 81);
        v117 = (const void *)(a2 - 104);
        goto LABEL_594;
      case 3uLL:
        return;
      case 4uLL:
        return;
      case 5uLL:
        return;
      default:
        if (v9 <= 2495)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 == v7)
              return;
            v118 = (const void **)(a1 + 104);
            if (a1 + 104 == a2)
              return;
            v119 = 0;
            i = a1;
            while (1)
            {
              v166 = i;
              i = (unint64_t)v118;
              if (*(char *)(v166 + 127) < 0)
              {
                v11 = *(_QWORD *)(v166 + 112);
                if ((v11 & 0x8000000000000000) != 0)
                  goto LABEL_606;
                v167 = *v118;
                v168 = v11 && v167 == 0;
                v165 = a2;
                if (v168)
                  goto LABEL_606;
              }
              else
              {
                v11 = *(unsigned __int8 *)(v166 + 127);
                v167 = v118;
                v165 = a2;
              }
              if (*(char *)(v166 + 23) < 0)
              {
                v169 = *(_QWORD *)(v166 + 8);
                if ((v169 & 0x8000000000000000) != 0)
                  goto LABEL_606;
                v170 = *(const void **)v166;
                if (v169)
                {
                  if (!v170)
                    goto LABEL_606;
                }
              }
              else
              {
                v169 = *(unsigned __int8 *)(v166 + 23);
                v170 = (const void *)v166;
              }
              if (v169 >= v11)
                v171 = v11;
              else
                v171 = v169;
              v172 = memcmp(v167, v170, v171);
              if (v172)
              {
                if ((v172 & 0x80000000) == 0)
                  goto LABEL_403;
              }
              else if (v11 >= v169)
              {
                goto LABEL_403;
              }
              v173 = *(_OWORD *)i;
              v275 = *(_QWORD *)(i + 16);
              *(_OWORD *)v274 = v173;
              *(_QWORD *)(i + 8) = 0;
              *(_QWORD *)(i + 16) = 0;
              *(_QWORD *)i = 0;
              v276 = *(_OWORD *)(v166 + 128);
              v277 = *(_QWORD *)(v166 + 144);
              *(_QWORD *)(v166 + 128) = 0;
              *(_QWORD *)(v166 + 136) = 0;
              v278 = *(_OWORD *)(v166 + 152);
              v174 = *(_QWORD *)(v166 + 168);
              *(_QWORD *)(v166 + 144) = 0;
              *(_QWORD *)(v166 + 152) = 0;
              *(_QWORD *)(v166 + 160) = 0;
              *(_QWORD *)(v166 + 168) = 0;
              v280 = *(_OWORD *)(v166 + 176);
              v175 = *(_QWORD *)(v166 + 192);
              v279 = v174;
              v281 = v175;
              *(_QWORD *)(v166 + 184) = 0;
              *(_QWORD *)(v166 + 192) = 0;
              *(_QWORD *)(v166 + 176) = 0;
              v282 = *(_DWORD *)(v166 + 200);
              cricket::SenderOptions::operator=(i, (__int128 *)v166);
              v164 = a1;
              if (v166 == a1)
                goto LABEL_402;
              v176 = v119;
              while (1)
              {
                if (SHIBYTE(v275) < 0)
                {
                  v11 = (unint64_t)v274[1];
                  if (((unint64_t)v274[1] & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v177 = (void **)v274[0];
                  if (v274[1] && v274[0] == 0)
                    goto LABEL_606;
                }
                else
                {
                  v11 = HIBYTE(v275);
                  v177 = v274;
                }
                if (*(char *)(a1 + v176 - 81) < 0)
                {
                  v179 = *(_QWORD *)(a1 + v176 - 96);
                  if ((v179 & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v180 = *(const void **)(a1 + v176 - 104);
                  if (v179)
                  {
                    if (!v180)
                      goto LABEL_606;
                  }
                }
                else
                {
                  v179 = *(unsigned __int8 *)(a1 + v176 - 81);
                  v180 = (const void *)(a1 + v176 - 104);
                }
                v181 = v179 >= v11 ? v11 : v179;
                v182 = memcmp(v177, v180, v181);
                if (!v182)
                  break;
                if ((v182 & 0x80000000) == 0)
                {
                  v164 = v166;
                  goto LABEL_401;
                }
LABEL_426:
                v166 -= 104;
                cricket::SenderOptions::operator=(a1 + v176, (__int128 *)(a1 + v176 - 104));
                v176 -= 104;
                if (!v176)
                {
                  v164 = a1;
                  goto LABEL_401;
                }
              }
              if (v11 < v179)
                goto LABEL_426;
              v164 = a1 + v176;
LABEL_401:
              v165 = a2;
LABEL_402:
              cricket::SenderOptions::operator=(v164, (__int128 *)v274);
              cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)v274);
LABEL_403:
              v118 = (const void **)(i + 104);
              v119 += 104;
              if (i + 104 == v165)
                return;
            }
          }
          if (a1 == v7)
            return;
          i = a1 + 104;
          if (a1 + 104 == a2)
            return;
          v183 = 0;
          v184 = a1 - 104;
          v185 = -1;
          v186 = 1;
          v187 = a1;
LABEL_451:
          v188 = v183;
          v183 = v186;
          if (*(char *)(v187 + 127) < 0)
          {
            v11 = *(_QWORD *)(i + 8);
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_606;
            v189 = *(const void **)i;
            if (v11 && v189 == 0)
              goto LABEL_606;
          }
          else
          {
            v11 = *(unsigned __int8 *)(v187 + 127);
            v189 = (const void *)i;
          }
          if (*(char *)(v187 + 23) < 0)
          {
            v191 = *(_QWORD *)(v187 + 8);
            if ((v191 & 0x8000000000000000) != 0)
              goto LABEL_606;
            v192 = *(const void **)v187;
            if (v191)
            {
              if (!v192)
                goto LABEL_606;
            }
          }
          else
          {
            v191 = *(unsigned __int8 *)(v187 + 23);
            v192 = (const void *)v187;
          }
          if (v191 >= v11)
            v193 = v11;
          else
            v193 = v191;
          v194 = memcmp(v189, v192, v193);
          if (v194)
          {
            if ((v194 & 0x80000000) == 0)
              goto LABEL_450;
          }
          else if (v11 >= v191)
          {
            goto LABEL_450;
          }
          v195 = *(_OWORD *)i;
          v275 = *(_QWORD *)(i + 16);
          *(_OWORD *)v274 = v195;
          *(_QWORD *)(i + 8) = 0;
          *(_QWORD *)(i + 16) = 0;
          *(_QWORD *)i = 0;
          v276 = *(_OWORD *)(v187 + 128);
          v277 = *(_QWORD *)(v187 + 144);
          *(_QWORD *)(v187 + 128) = 0;
          *(_QWORD *)(v187 + 136) = 0;
          v278 = *(_OWORD *)(v187 + 152);
          v196 = *(_QWORD *)(v187 + 168);
          *(_QWORD *)(v187 + 144) = 0;
          *(_QWORD *)(v187 + 152) = 0;
          *(_QWORD *)(v187 + 160) = 0;
          *(_QWORD *)(v187 + 168) = 0;
          v280 = *(_OWORD *)(v187 + 176);
          v197 = *(_QWORD *)(v187 + 192);
          v279 = v196;
          v281 = v197;
          *(_QWORD *)(v187 + 184) = 0;
          *(_QWORD *)(v187 + 192) = 0;
          *(_QWORD *)(v187 + 176) = 0;
          v282 = *(_DWORD *)(v187 + 200);
          cricket::SenderOptions::operator=(i, (__int128 *)(a1 + 104 * v188));
          v198 = v185;
          i = v184;
          while (1)
          {
            if (SHIBYTE(v275) < 0)
            {
              v11 = (unint64_t)v274[1];
              if (((unint64_t)v274[1] & 0x8000000000000000) != 0)
                goto LABEL_606;
              v199 = (void **)v274[0];
              if (v274[1] && v274[0] == 0)
                goto LABEL_606;
            }
            else
            {
              v11 = HIBYTE(v275);
              v199 = v274;
            }
            if (*(char *)(i + 23) < 0)
            {
              v201 = *(_QWORD *)(i + 8);
              if ((v201 & 0x8000000000000000) != 0)
                goto LABEL_606;
              v202 = *(const void **)i;
              if (v201)
              {
                if (!v202)
                  goto LABEL_606;
              }
            }
            else
            {
              v201 = *(unsigned __int8 *)(i + 23);
              v202 = (const void *)i;
            }
            if (v201 >= v11)
              v203 = v11;
            else
              v203 = v201;
            v204 = memcmp(v199, v202, v203);
            if (v204)
            {
              if ((v204 & 0x80000000) == 0)
              {
LABEL_449:
                cricket::SenderOptions::operator=(i + 104, (__int128 *)v274);
                cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)v274);
LABEL_450:
                v187 = a1 + 104 * v183;
                v186 = v183 + 1;
                i = v187 + 104;
                v184 += 104;
                --v185;
                if (v187 + 104 == a2)
                  return;
                goto LABEL_451;
              }
            }
            else if (v11 >= v201)
            {
              goto LABEL_449;
            }
            cricket::SenderOptions::operator=(i + 104, (__int128 *)i);
            i -= 104;
            v38 = __CFADD__(v198++, 1);
            if (v38)
              goto LABEL_606;
          }
        }
        if (a3)
        {
          v11 = v10 >> 1;
          v12 = (__int128 *)(a1 + 104 * (v10 >> 1));
          if ((unint64_t)v9 >= 0x3401)
          {
            v11 *= 104;
            v13 = *(_OWORD *)a1;
            v275 = *(_QWORD *)(a1 + 16);
            *(_OWORD *)v274 = v13;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v276 = *(_OWORD *)(a1 + 24);
            v277 = *(_QWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 40) = 0;
            v278 = *(_OWORD *)(a1 + 48);
            v279 = *(_QWORD *)(a1 + 64);
            *(_QWORD *)(a1 + 48) = 0;
            *(_QWORD *)(a1 + 56) = 0;
            *(_QWORD *)(a1 + 64) = 0;
            v280 = *(_OWORD *)(a1 + 72);
            v281 = *(_QWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = 0;
            *(_QWORD *)(a1 + 80) = 0;
            *(_QWORD *)(a1 + 88) = 0;
            v282 = *(_DWORD *)(a1 + 96);
            cricket::SenderOptions::operator=(a1, v12);
            cricket::SenderOptions::operator=((uint64_t)v12, (__int128 *)v274);
            cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)v274);
            v14 = a3 - 1;
            if ((a4 & 1) != 0)
              goto LABEL_25;
LABEL_10:
            v15 = (_QWORD *)(a1 - 104);
            if (*(char *)(a1 - 81) < 0)
            {
              v11 = *(_QWORD *)(a1 - 96);
              if ((v11 & 0x8000000000000000) != 0)
                goto LABEL_606;
              v15 = (_QWORD *)*v15;
              if (v11)
              {
                if (!v15)
                  goto LABEL_606;
              }
            }
            else
            {
              v11 = *(unsigned __int8 *)(a1 - 81);
            }
            if (*(char *)(a1 + 23) < 0)
            {
              i = *(_QWORD *)(a1 + 8);
              if ((i & 0x8000000000000000) != 0)
                goto LABEL_606;
              v16 = *(const void **)a1;
              if (i)
              {
                if (!v16)
                  goto LABEL_606;
              }
            }
            else
            {
              i = *(unsigned __int8 *)(a1 + 23);
              v16 = (const void *)a1;
            }
            if (i >= v11)
              v17 = v11;
            else
              v17 = i;
            v18 = memcmp(v15, v16, v17);
            if (v18)
            {
              if (v18 < 0)
                goto LABEL_25;
            }
            else if (v11 < i)
            {
              goto LABEL_25;
            }
            v67 = *(_OWORD *)a1;
            v266 = *(_QWORD *)(a1 + 16);
            *(_OWORD *)__s1 = v67;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v267 = *(_OWORD *)(a1 + 24);
            v268 = *(_QWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 40) = 0;
            v269 = *(_OWORD *)(a1 + 48);
            v270 = *(_QWORD *)(a1 + 64);
            *(_QWORD *)(a1 + 48) = 0;
            *(_QWORD *)(a1 + 56) = 0;
            *(_QWORD *)(a1 + 64) = 0;
            v271 = *(_OWORD *)(a1 + 72);
            v272 = *(_QWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = 0;
            *(_QWORD *)(a1 + 80) = 0;
            *(_QWORD *)(a1 + 88) = 0;
            v273 = *(_DWORD *)(a1 + 96);
            i = HIBYTE(v266);
            if (SHIBYTE(v266) < 0)
            {
              v11 = (unint64_t)__s1[1];
              if (((unint64_t)__s1[1] & 0x8000000000000000) != 0)
                goto LABEL_606;
              v68 = (void **)__s1[0];
              if (__s1[1])
              {
                if (!__s1[0])
                  goto LABEL_606;
              }
            }
            else
            {
              v68 = __s1;
              v11 = HIBYTE(v266);
            }
            if (*(char *)(v7 - 81) < 0)
            {
              v69 = *(_QWORD *)(v7 - 96);
              if ((v69 & 0x8000000000000000) != 0)
                goto LABEL_606;
              v70 = *(const void **)v263;
              if (v69)
              {
                if (!v70)
                  goto LABEL_606;
              }
            }
            else
            {
              v69 = *(unsigned __int8 *)(v7 - 81);
              v70 = (const void *)(a2 - 104);
            }
            if (v69 >= v11)
              v71 = v11;
            else
              v71 = v69;
            v72 = memcmp(v68, v70, v71);
            if (v72)
            {
              if (v72 < 0)
                goto LABEL_193;
            }
            else if (v11 < v69)
            {
LABEL_193:
              v8 = a1 + 104;
              if (a1 + 104 == v7)
                goto LABEL_606;
              v73 = v14;
              v83 = (void **)__s1[0];
              v11 = (unint64_t)__s1[1];
              if (__s1[1])
                v84 = __s1[0] == 0;
              else
                v84 = 0;
              v85 = !v84;
              while (1)
              {
                if ((i & 0x80) != 0)
                {
                  if ((v11 & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v86 = v83;
                  v87 = v11;
                  if ((v85 & 1) == 0)
                    goto LABEL_606;
                }
                else
                {
                  v86 = __s1;
                  v87 = i;
                }
                if (*(char *)(v8 + 23) < 0)
                {
                  v88 = *(_QWORD *)(v8 + 8);
                  if ((v88 & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v89 = *(const void **)v8;
                  if (v88)
                  {
                    if (!v89)
                      goto LABEL_606;
                  }
                }
                else
                {
                  v88 = *(unsigned __int8 *)(v8 + 23);
                  v89 = (const void *)v8;
                }
                if (v88 >= v87)
                  v90 = v87;
                else
                  v90 = v88;
                v91 = memcmp(v86, v89, v90);
                if (v91)
                {
                  if (v91 < 0)
                  {
LABEL_216:
                    v7 = a2;
                    goto LABEL_217;
                  }
                }
                else if (v87 < v88)
                {
                  goto LABEL_216;
                }
                v8 += 104;
                if (v8 == a2)
                  goto LABEL_606;
              }
            }
            v73 = v14;
            v8 = a1 + 104;
            if (a1 + 104 < v7)
            {
              v74 = (void **)__s1[0];
              v11 = (unint64_t)__s1[1];
              if (__s1[1])
                v75 = __s1[0] == 0;
              else
                v75 = 0;
              v76 = !v75;
              do
              {
                if ((i & 0x80) != 0)
                {
                  if ((v11 & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v77 = v74;
                  v78 = v11;
                  if ((v76 & 1) == 0)
                    goto LABEL_606;
                }
                else
                {
                  v77 = __s1;
                  v78 = i;
                }
                if (*(char *)(v8 + 23) < 0)
                {
                  v79 = *(_QWORD *)(v8 + 8);
                  if ((v79 & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v80 = *(const void **)v8;
                  if (v79)
                  {
                    if (!v80)
                      goto LABEL_606;
                  }
                }
                else
                {
                  v79 = *(unsigned __int8 *)(v8 + 23);
                  v80 = (const void *)v8;
                }
                if (v79 >= v78)
                  v81 = v78;
                else
                  v81 = v79;
                v82 = memcmp(v77, v80, v81);
                if (v82)
                {
                  if (v82 < 0)
                    goto LABEL_216;
                }
                else if (v78 < v79)
                {
                  goto LABEL_216;
                }
                v8 += 104;
                v7 = a2;
              }
              while (v8 < a2);
            }
LABEL_217:
            if (v8 < v7)
            {
              if (a2 == a1)
                goto LABEL_606;
              v92 = (void **)__s1[0];
              v11 = (unint64_t)__s1[1];
              if (__s1[1])
                v93 = __s1[0] == 0;
              else
                v93 = 0;
              v94 = !v93;
              v7 = a2 - 104;
              while (1)
              {
                if ((i & 0x80) != 0)
                {
                  if ((v11 & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v95 = v92;
                  v96 = v11;
                  if ((v94 & 1) == 0)
                    goto LABEL_606;
                }
                else
                {
                  v95 = __s1;
                  v96 = i;
                }
                if (*(char *)(v7 + 23) < 0)
                {
                  v97 = *(_QWORD *)(v7 + 8);
                  if ((v97 & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v98 = *(const void **)v7;
                  if (v97)
                  {
                    if (!v98)
                      goto LABEL_606;
                  }
                }
                else
                {
                  v97 = *(unsigned __int8 *)(v7 + 23);
                  v98 = (const void *)v7;
                }
                if (v97 >= v96)
                  v99 = v96;
                else
                  v99 = v97;
                v100 = memcmp(v95, v98, v99);
                if (v100)
                {
                  if ((v100 & 0x80000000) == 0)
                    break;
                }
                else if (v96 >= v97)
                {
                  break;
                }
                v23 = v7 == a1;
                v7 -= 104;
                if (v23)
                  goto LABEL_606;
              }
            }
LABEL_284:
            if (v8 < v7)
            {
              v101 = *(_OWORD *)v8;
              v275 = *(_QWORD *)(v8 + 16);
              *(_OWORD *)v274 = v101;
              *(_QWORD *)(v8 + 8) = 0;
              *(_QWORD *)(v8 + 16) = 0;
              *(_QWORD *)v8 = 0;
              v276 = *(_OWORD *)(v8 + 24);
              v277 = *(_QWORD *)(v8 + 40);
              *(_QWORD *)(v8 + 24) = 0;
              *(_QWORD *)(v8 + 32) = 0;
              *(_QWORD *)(v8 + 40) = 0;
              v278 = *(_OWORD *)(v8 + 48);
              v279 = *(_QWORD *)(v8 + 64);
              *(_QWORD *)(v8 + 48) = 0;
              *(_QWORD *)(v8 + 56) = 0;
              *(_QWORD *)(v8 + 64) = 0;
              v280 = *(_OWORD *)(v8 + 72);
              v281 = *(_QWORD *)(v8 + 88);
              *(_QWORD *)(v8 + 72) = 0;
              *(_QWORD *)(v8 + 80) = 0;
              *(_QWORD *)(v8 + 88) = 0;
              v282 = *(_DWORD *)(v8 + 96);
              cricket::SenderOptions::operator=(v8, (__int128 *)v7);
              cricket::SenderOptions::operator=(v7, (__int128 *)v274);
              cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)v274);
              v8 += 104;
              if (v8 == a2)
                goto LABEL_606;
              i = HIBYTE(v266);
              v103 = (void **)__s1[0];
              v102 = (unint64_t)__s1[1];
              if (__s1[1])
                v104 = __s1[0] == 0;
              else
                v104 = 0;
              v105 = !v104;
              while (1)
              {
                if ((i & 0x80) != 0)
                {
                  if ((v102 & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v106 = v103;
                  v11 = v102;
                  if ((v105 & 1) == 0)
                    goto LABEL_606;
                }
                else
                {
                  v106 = __s1;
                  v11 = i;
                }
                if (*(char *)(v8 + 23) < 0)
                {
                  v107 = *(_QWORD *)(v8 + 8);
                  if ((v107 & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v108 = *(const void **)v8;
                  if (v107)
                  {
                    if (!v108)
                      goto LABEL_606;
                  }
                }
                else
                {
                  v107 = *(unsigned __int8 *)(v8 + 23);
                  v108 = (const void *)v8;
                }
                if (v107 >= v11)
                  v109 = v11;
                else
                  v109 = v107;
                v110 = memcmp(v106, v108, v109);
                if (v110)
                {
                  if (v110 < 0)
                  {
LABEL_266:
                    if (v7 == a1)
                      goto LABEL_606;
                    v7 -= 104;
                    while (1)
                    {
                      if ((i & 0x80) != 0)
                      {
                        if ((v102 & 0x8000000000000000) != 0)
                          goto LABEL_606;
                        v111 = v103;
                        v11 = v102;
                        if ((v105 & 1) == 0)
                          goto LABEL_606;
                      }
                      else
                      {
                        v111 = __s1;
                        v11 = i;
                      }
                      if (*(char *)(v7 + 23) < 0)
                      {
                        v112 = *(_QWORD *)(v7 + 8);
                        if ((v112 & 0x8000000000000000) != 0)
                          goto LABEL_606;
                        v113 = *(const void **)v7;
                        if (v112)
                        {
                          if (!v113)
                            goto LABEL_606;
                        }
                      }
                      else
                      {
                        v112 = *(unsigned __int8 *)(v7 + 23);
                        v113 = (const void *)v7;
                      }
                      if (v112 >= v11)
                        v114 = v11;
                      else
                        v114 = v112;
                      v115 = memcmp(v111, v113, v114);
                      if (v115)
                      {
                        if ((v115 & 0x80000000) == 0)
                          goto LABEL_284;
                      }
                      else if (v11 >= v112)
                      {
                        goto LABEL_284;
                      }
                      v23 = v7 == a1;
                      v7 -= 104;
                      if (v23)
                        goto LABEL_606;
                    }
                  }
                }
                else if (v11 < v107)
                {
                  goto LABEL_266;
                }
                v8 += 104;
                if (v8 == a2)
                  goto LABEL_606;
              }
            }
            if (v8 - 104 != a1)
              cricket::SenderOptions::operator=(a1, (__int128 *)(v8 - 104));
            cricket::SenderOptions::operator=(v8 - 104, (__int128 *)__s1);
            cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)__s1);
            a4 = 0;
            v7 = a2;
            a3 = v73;
            i = 104;
            continue;
          }
          v14 = a3 - 1;
          if ((a4 & 1) == 0)
            goto LABEL_10;
LABEL_25:
          v259 = v14;
          v19 = *(_OWORD *)a1;
          v266 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)__s1 = v19;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v267 = *(_OWORD *)(a1 + 24);
          v268 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          v269 = *(_OWORD *)(a1 + 48);
          v270 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          v271 = *(_OWORD *)(a1 + 72);
          v272 = *(_QWORD *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = 0;
          *(_QWORD *)(a1 + 80) = 0;
          *(_QWORD *)(a1 + 88) = 0;
          v273 = *(_DWORD *)(a1 + 96);
          if (a1 + 104 == v7)
            goto LABEL_606;
          i = 0;
          v20 = HIBYTE(v266);
          v21 = (void **)__s1[0];
          v22 = (unint64_t)__s1[1];
          if (__s1[1])
            v23 = __s1[0] == 0;
          else
            v23 = 0;
          v24 = !v23;
          while (1)
          {
            v25 = (_QWORD *)(a1 + i + 104);
            if (*(char *)(a1 + i + 127) < 0)
            {
              v11 = *(_QWORD *)(a1 + i + 112);
              if ((v11 & 0x8000000000000000) != 0)
                goto LABEL_606;
              v25 = (_QWORD *)*v25;
              if (v11 && v25 == 0)
                goto LABEL_606;
            }
            else
            {
              v11 = *(unsigned __int8 *)(a1 + i + 127);
            }
            if ((v20 & 0x80) != 0)
            {
              if ((v22 & 0x8000000000000000) != 0)
                goto LABEL_606;
              v27 = v21;
              v28 = v22;
              if ((v24 & 1) == 0)
                goto LABEL_606;
            }
            else
            {
              v27 = __s1;
              v28 = v20;
            }
            if (v28 >= v11)
              v29 = v11;
            else
              v29 = v28;
            v30 = memcmp(v25, v27, v29);
            if (!v30)
            {
              if (v11 >= v28)
                break;
              goto LABEL_33;
            }
            if ((v30 & 0x80000000) == 0)
              break;
LABEL_33:
            i += 104;
            if (a1 + i + 104 == v7)
              goto LABEL_606;
          }
          v31 = a1 + i + 104;
          if (i)
          {
            i = a2 - 104;
            if (v7 != a1)
            {
              do
              {
                if (*(char *)(i + 23) < 0)
                {
                  v11 = *(_QWORD *)(i + 8);
                  if ((v11 & 0x8000000000000000) != 0)
                    break;
                  v32 = *(const void **)i;
                  if (v11 && v32 == 0)
                    break;
                }
                else
                {
                  v11 = *(unsigned __int8 *)(i + 23);
                  v32 = (const void *)i;
                }
                if ((v20 & 0x80) != 0)
                {
                  if ((v22 & 0x8000000000000000) != 0)
                    break;
                  v34 = v21;
                  v35 = v22;
                  if ((v24 & 1) == 0)
                    break;
                }
                else
                {
                  v34 = __s1;
                  v35 = v20;
                }
                if (v35 >= v11)
                  v36 = v11;
                else
                  v36 = v35;
                v37 = memcmp(v32, v34, v36);
                if (v37)
                {
                  if (v37 < 0)
                    goto LABEL_96;
                }
                else if (v11 < v35)
                {
                  goto LABEL_96;
                }
                v23 = i == a1;
                i -= 104;
              }
              while (!v23);
            }
LABEL_606:
            __break(1u);
            goto LABEL_607;
          }
          i = v7;
          if (v31 < v7)
          {
            for (i = a2 - 104; ; i -= 104)
            {
              if (*(char *)(i + 23) < 0)
              {
                v11 = *(_QWORD *)(i + 8);
                if ((v11 & 0x8000000000000000) != 0)
                  goto LABEL_606;
                v39 = *(const void **)i;
                if (v11 && v39 == 0)
                  goto LABEL_606;
              }
              else
              {
                v11 = *(unsigned __int8 *)(i + 23);
                v39 = (const void *)i;
              }
              if ((v20 & 0x80) != 0)
              {
                if ((v22 & 0x8000000000000000) != 0)
                  goto LABEL_606;
                v41 = v21;
                v42 = v22;
                if ((v24 & 1) == 0)
                  goto LABEL_606;
              }
              else
              {
                v41 = __s1;
                v42 = v20;
              }
              if (v42 >= v11)
                v43 = v11;
              else
                v43 = v42;
              v44 = memcmp(v39, v41, v43);
              if (v44)
              {
                if (v44 < 0 || v31 >= i)
                  break;
              }
              else
              {
                v38 = v11 < v42 || v31 >= i;
                if (v38)
                  break;
              }
            }
          }
LABEL_96:
          __s2 = (void *)v31;
          v8 = v31;
          if (v31 < i)
          {
            v45 = i;
            do
            {
              v46 = *(_OWORD *)v8;
              v275 = *(_QWORD *)(v8 + 16);
              *(_OWORD *)v274 = v46;
              *(_QWORD *)(v8 + 8) = 0;
              *(_QWORD *)(v8 + 16) = 0;
              *(_QWORD *)v8 = 0;
              v276 = *(_OWORD *)(v8 + 24);
              v277 = *(_QWORD *)(v8 + 40);
              *(_QWORD *)(v8 + 24) = 0;
              *(_QWORD *)(v8 + 32) = 0;
              *(_QWORD *)(v8 + 40) = 0;
              v278 = *(_OWORD *)(v8 + 48);
              v279 = *(_QWORD *)(v8 + 64);
              *(_QWORD *)(v8 + 48) = 0;
              *(_QWORD *)(v8 + 56) = 0;
              *(_QWORD *)(v8 + 64) = 0;
              v280 = *(_OWORD *)(v8 + 72);
              v281 = *(_QWORD *)(v8 + 88);
              *(_QWORD *)(v8 + 72) = 0;
              *(_QWORD *)(v8 + 80) = 0;
              *(_QWORD *)(v8 + 88) = 0;
              v282 = *(_DWORD *)(v8 + 96);
              cricket::SenderOptions::operator=(v8, (__int128 *)v45);
              cricket::SenderOptions::operator=(v45, (__int128 *)v274);
              cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)v274);
              v8 += 104;
              if (v8 == v7)
                goto LABEL_606;
              v47 = HIBYTE(v266);
              v48 = (void **)__s1[0];
              v49 = (unint64_t)__s1[1];
              if (__s1[1])
                v50 = __s1[0] == 0;
              else
                v50 = 0;
              v51 = !v50;
              while (1)
              {
                if (*(char *)(v8 + 23) < 0)
                {
                  v11 = *(_QWORD *)(v8 + 8);
                  if ((v11 & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v52 = *(const void **)v8;
                  if (v11 && v52 == 0)
                    goto LABEL_606;
                }
                else
                {
                  v11 = *(unsigned __int8 *)(v8 + 23);
                  v52 = (const void *)v8;
                }
                if ((v47 & 0x80) != 0)
                {
                  if ((v49 & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v54 = v48;
                  v55 = v49;
                  if ((v51 & 1) == 0)
                    goto LABEL_606;
                }
                else
                {
                  v54 = __s1;
                  v55 = v47;
                }
                if (v55 >= v11)
                  v56 = v11;
                else
                  v56 = v55;
                v57 = memcmp(v52, v54, v56);
                if (!v57)
                {
                  if (v11 >= v55)
                    break;
                  goto LABEL_107;
                }
                if ((v57 & 0x80000000) == 0)
                  break;
LABEL_107:
                v8 += 104;
                if (v8 == a2)
                  goto LABEL_606;
              }
              if (v45 == a1)
                goto LABEL_606;
              v45 -= 104;
              while (2)
              {
                if (*(char *)(v45 + 23) < 0)
                {
                  v11 = *(_QWORD *)(v45 + 8);
                  if ((v11 & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v58 = *(const void **)v45;
                  if (v11 && v58 == 0)
                    goto LABEL_606;
                }
                else
                {
                  v11 = *(unsigned __int8 *)(v45 + 23);
                  v58 = (const void *)v45;
                }
                if ((v47 & 0x80) != 0)
                {
                  if ((v49 & 0x8000000000000000) != 0)
                    goto LABEL_606;
                  v60 = v48;
                  v61 = v49;
                  if ((v51 & 1) == 0)
                    goto LABEL_606;
                }
                else
                {
                  v60 = __s1;
                  v61 = v47;
                }
                if (v61 >= v11)
                  v62 = v11;
                else
                  v62 = v61;
                v63 = memcmp(v58, v60, v62);
                if (!v63)
                {
                  if (v11 < v61)
                    goto LABEL_98;
LABEL_127:
                  v23 = v45 == a1;
                  v45 -= 104;
                  if (v23)
                    goto LABEL_606;
                  continue;
                }
                break;
              }
              if ((v63 & 0x80000000) == 0)
                goto LABEL_127;
LABEL_98:
              v7 = a2;
            }
            while (v8 < v45);
          }
          if (v8 - 104 != a1)
            cricket::SenderOptions::operator=(a1, (__int128 *)(v8 - 104));
          cricket::SenderOptions::operator=(v8 - 104, (__int128 *)__s1);
          cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)__s1);
          a3 = v259;
          v38 = (unint64_t)__s2 >= i;
          i = 104;
          if (!v38)
          {
LABEL_151:
            a4 = 0;
            continue;
          }
          v65 = v64;
          if (!v66)
          {
            if ((v65 & 1) == 0)
              goto LABEL_151;
            continue;
          }
          a2 = v8 - 104;
          if ((v65 & 1) != 0)
            return;
          goto LABEL_2;
        }
        if (a1 == v7)
          return;
        v254 = v9;
        v120 = (v10 - 2) >> 1;
        v121 = v120;
        v260 = v10;
        v262 = v120;
        do
        {
          v123 = v121;
          if (v120 < v121)
            goto LABEL_304;
          v124 = (2 * v121) | 1;
          v11 = a1 + 104 * v124;
          v125 = 2 * v121 + 2;
          v263 = (__int128 *)v121;
          if (v125 >= (uint64_t)v10)
            goto LABEL_326;
          if (*(char *)(v11 + 23) < 0)
          {
            v126 = *(_QWORD *)(v11 + 8);
            if ((v126 & 0x8000000000000000) != 0)
              goto LABEL_606;
            v127 = *(const void **)v11;
            if (v126 && v127 == 0)
              goto LABEL_606;
          }
          else
          {
            v126 = *(unsigned __int8 *)(v11 + 23);
            v127 = (const void *)(a1 + 104 * v124);
          }
          v129 = (char *)(v11 + 104);
          if (*(char *)(v11 + 127) < 0)
          {
            v130 = *(_QWORD *)(v11 + 112);
            if ((v130 & 0x8000000000000000) != 0)
              goto LABEL_606;
            v131 = *(char **)v129;
            if (v130 && v131 == 0)
              goto LABEL_606;
          }
          else
          {
            v130 = *(unsigned __int8 *)(v11 + 127);
            v131 = (char *)(v11 + 104);
          }
          if (v130 >= v126)
            v133 = v126;
          else
            v133 = v130;
          v134 = memcmp(v127, v131, v133);
          if (v134)
          {
            v120 = v262;
            v123 = (int64_t)v263;
            if (v134 < 0)
              goto LABEL_327;
LABEL_326:
            v129 = (char *)(a1 + 104 * v124);
            v125 = v124;
            goto LABEL_327;
          }
          v38 = v126 >= v130;
          v120 = v262;
          v123 = (int64_t)v263;
          if (v38)
            goto LABEL_326;
LABEL_327:
          if (v129[23] < 0)
          {
            v11 = *((_QWORD *)v129 + 1);
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_606;
            v135 = *(char **)v129;
            if (v11 && v135 == 0)
              goto LABEL_606;
          }
          else
          {
            v11 = v129[23];
            v135 = v129;
          }
          v137 = a1 + 104 * v123;
          if (*(char *)(v137 + 23) < 0)
          {
            v138 = *(_QWORD *)(v137 + 8);
            if ((v138 & 0x8000000000000000) != 0)
              goto LABEL_606;
            v139 = *(const void **)v137;
            if (v138 && v139 == 0)
              goto LABEL_606;
          }
          else
          {
            v138 = *(unsigned __int8 *)(v137 + 23);
            v139 = (const void *)(a1 + 104 * v123);
          }
          if (v138 >= v11)
            v141 = v11;
          else
            v141 = v138;
          v142 = memcmp(v135, v139, v141);
          if (v142)
          {
            v123 = (int64_t)v263;
            if (v142 < 0)
              goto LABEL_304;
          }
          else
          {
            v123 = (int64_t)v263;
            if (v11 < v138)
              goto LABEL_304;
          }
          v143 = *(_OWORD *)v137;
          v275 = *(_QWORD *)(v137 + 16);
          *(_OWORD *)v274 = v143;
          *(_QWORD *)(v137 + 8) = 0;
          *(_QWORD *)(v137 + 16) = 0;
          *(_QWORD *)v137 = 0;
          v144 = a1 + 104 * v123;
          v276 = *(_OWORD *)(v144 + 24);
          v277 = *(_QWORD *)(v144 + 40);
          *(_QWORD *)(v144 + 24) = 0;
          *(_QWORD *)(v144 + 32) = 0;
          *(_QWORD *)(v144 + 40) = 0;
          v278 = *(_OWORD *)(v144 + 48);
          v279 = *(_QWORD *)(v144 + 64);
          *(_QWORD *)(v144 + 48) = 0;
          *(_QWORD *)(v144 + 56) = 0;
          *(_QWORD *)(v144 + 64) = 0;
          v280 = *(_OWORD *)(v144 + 72);
          v281 = *(_QWORD *)(v144 + 88);
          *(_QWORD *)(v144 + 72) = 0;
          *(_QWORD *)(v144 + 80) = 0;
          *(_QWORD *)(v144 + 88) = 0;
          v282 = *(_DWORD *)(v144 + 96);
          v145 = HIBYTE(v275);
          i = (unint64_t)v274[1];
          __s2a = (void **)v274[0];
          if (v274[1])
            v146 = v274[0] == 0;
          else
            v146 = 0;
          v147 = !v146;
          v255 = v147;
          cricket::SenderOptions::operator=(v137, (__int128 *)v129);
          if (v120 >= v125)
          {
            while (1)
            {
              v148 = (uint64_t)v129;
              v149 = (2 * v125) | 1;
              v11 = a1 + 104 * v149;
              v125 = 2 * v125 + 2;
              if (v125 >= v260)
                goto LABEL_378;
              if (*(char *)(v11 + 23) < 0)
              {
                v150 = *(_QWORD *)(v11 + 8);
                if ((v150 & 0x8000000000000000) != 0)
                  goto LABEL_606;
                v151 = *(const void **)v11;
                if (v150 && v151 == 0)
                  goto LABEL_606;
              }
              else
              {
                v150 = *(unsigned __int8 *)(v11 + 23);
                v151 = (const void *)(a1 + 104 * v149);
              }
              v122 = v11 + 104;
              if (*(char *)(v11 + 127) < 0)
              {
                v153 = *(_QWORD *)(v11 + 112);
                if ((v153 & 0x8000000000000000) != 0)
                  goto LABEL_606;
                v154 = *(const void **)v122;
                if (v153 && v154 == 0)
                  goto LABEL_606;
              }
              else
              {
                v153 = *(unsigned __int8 *)(v11 + 127);
                v154 = (const void *)(v11 + 104);
              }
              v156 = v153 >= v150 ? v150 : v153;
              v157 = memcmp(v151, v154, v156);
              if (v157)
                break;
              v38 = v150 >= v153;
              v120 = v262;
              if (v38)
                goto LABEL_378;
LABEL_379:
              if (*(char *)(v122 + 23) < 0)
              {
                v11 = *(_QWORD *)(v122 + 8);
                if ((v11 & 0x8000000000000000) != 0)
                  goto LABEL_606;
                v158 = *(const void **)v122;
                if (v11 && v158 == 0)
                  goto LABEL_606;
              }
              else
              {
                v11 = *(unsigned __int8 *)(v122 + 23);
                v158 = (const void *)v122;
              }
              if ((v145 & 0x80) != 0)
              {
                if ((i & 0x8000000000000000) != 0)
                  goto LABEL_606;
                v160 = __s2a;
                v161 = i;
                if ((v255 & 1) == 0)
                  goto LABEL_606;
              }
              else
              {
                v160 = v274;
                v161 = v145;
              }
              if (v161 >= v11)
                v162 = v11;
              else
                v162 = v161;
              v163 = memcmp(v158, v160, v162);
              if (v163)
              {
                if (v163 < 0)
                {
LABEL_302:
                  v122 = v148;
                  goto LABEL_303;
                }
              }
              else if (v11 < v161)
              {
                goto LABEL_302;
              }
              cricket::SenderOptions::operator=(v148, (__int128 *)v122);
              v129 = (char *)v122;
              if (v120 < v125)
                goto LABEL_303;
            }
            v120 = v262;
            if (v157 < 0)
              goto LABEL_379;
LABEL_378:
            v122 = a1 + 104 * v149;
            v125 = v149;
            goto LABEL_379;
          }
          v122 = (uint64_t)v129;
LABEL_303:
          cricket::SenderOptions::operator=(v122, (__int128 *)v274);
          cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)v274);
          v123 = (int64_t)v263;
          v10 = v260;
LABEL_304:
          v121 = v123 - 1;
        }
        while (v123);
        v205 = v254 / 0x68;
        v263 = (__int128 *)(a1 + 24);
        while (2)
        {
          v207 = 0;
          v208 = *(_OWORD *)a1;
          v266 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)__s1 = v208;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v267 = *(_OWORD *)(a1 + 24);
          v268 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)v263 = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          v269 = *(_OWORD *)(a1 + 48);
          v270 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          v271 = *(_OWORD *)(a1 + 72);
          v272 = *(_QWORD *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = 0;
          *(_QWORD *)(a1 + 80) = 0;
          *(_QWORD *)(a1 + 88) = 0;
          v273 = *(_DWORD *)(a1 + 96);
          v11 = a1;
          do
          {
            i = v11;
            v209 = v11 + 104 * v207 + 104;
            v210 = (2 * v207) | 1;
            v207 = 2 * v207 + 2;
            if (v207 >= v205)
            {
LABEL_495:
              v11 = v209;
              v207 = v210;
              goto LABEL_496;
            }
            if (*(char *)(v209 + 23) < 0)
            {
              v211 = *(_QWORD *)(v209 + 8);
              if ((v211 & 0x8000000000000000) != 0)
                goto LABEL_606;
              v212 = *(const void **)v209;
              if (v211 && v212 == 0)
                goto LABEL_606;
            }
            else
            {
              v211 = *(unsigned __int8 *)(v209 + 23);
              v212 = (const void *)v209;
            }
            v11 = v209 + 104;
            if (*(char *)(v209 + 127) < 0)
            {
              v214 = *(_QWORD *)(v209 + 112);
              if ((v214 & 0x8000000000000000) != 0)
                goto LABEL_606;
              v215 = *(const void **)v11;
              if (v214 && v215 == 0)
                goto LABEL_606;
            }
            else
            {
              v214 = *(unsigned __int8 *)(v209 + 127);
              v215 = (const void *)(v209 + 104);
            }
            if (v214 >= v211)
              v217 = v211;
            else
              v217 = v214;
            v218 = memcmp(v212, v215, v217);
            if (v218)
            {
              if ((v218 & 0x80000000) == 0)
                goto LABEL_495;
            }
            else if (v211 >= v214)
            {
              goto LABEL_495;
            }
LABEL_496:
            cricket::SenderOptions::operator=(i, (__int128 *)v11);
          }
          while (v207 <= (uint64_t)((unint64_t)(v205 - 2) >> 1));
          v219 = (__int128 *)(a2 - 104);
          v23 = v11 == a2 - 104;
          a2 -= 104;
          if (v23)
          {
            cricket::SenderOptions::operator=(v11, (__int128 *)__s1);
            goto LABEL_493;
          }
          cricket::SenderOptions::operator=(v11, v219);
          cricket::SenderOptions::operator=((uint64_t)v219, (__int128 *)__s1);
          v220 = v11 - a1 + 104;
          if (v220 < 105)
            goto LABEL_493;
          v221 = v220 / 0x68uLL - 2;
          v222 = v221 >> 1;
          i = a1 + 104 * (v221 >> 1);
          if (*(char *)(i + 23) < 0)
          {
            v223 = *(_QWORD *)(i + 8);
            if ((v223 & 0x8000000000000000) != 0)
              goto LABEL_606;
            v224 = *(const void **)i;
            if (v223 && v224 == 0)
              goto LABEL_606;
          }
          else
          {
            v223 = *(unsigned __int8 *)(i + 23);
            v224 = (const void *)(a1 + 104 * (v221 >> 1));
          }
          if (*(char *)(v11 + 23) < 0)
          {
            v226 = *(_QWORD *)(v11 + 8);
            if ((v226 & 0x8000000000000000) != 0)
              goto LABEL_606;
            v227 = *(const void **)v11;
            if (v226 && v227 == 0)
              goto LABEL_606;
          }
          else
          {
            v226 = *(unsigned __int8 *)(v11 + 23);
            v227 = (const void *)v11;
          }
          if (v226 >= v223)
            v229 = v223;
          else
            v229 = v226;
          v230 = memcmp(v224, v227, v229);
          if (!v230)
          {
            if (v223 < v226)
              goto LABEL_543;
LABEL_493:
            cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)__s1);
            if (v205-- <= 2)
              return;
            continue;
          }
          break;
        }
        if ((v230 & 0x80000000) == 0)
          goto LABEL_493;
LABEL_543:
        __s2b = (void *)v221;
        v231 = *(_OWORD *)v11;
        v275 = *(_QWORD *)(v11 + 16);
        *(_OWORD *)v274 = v231;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)v11 = 0;
        v276 = *(_OWORD *)(v11 + 24);
        v277 = *(_QWORD *)(v11 + 40);
        *(_QWORD *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 40) = 0;
        v278 = *(_OWORD *)(v11 + 48);
        v279 = *(_QWORD *)(v11 + 64);
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = 0;
        *(_QWORD *)(v11 + 64) = 0;
        v280 = *(_OWORD *)(v11 + 72);
        v281 = *(_QWORD *)(v11 + 88);
        *(_QWORD *)(v11 + 72) = 0;
        *(_QWORD *)(v11 + 80) = 0;
        *(_QWORD *)(v11 + 88) = 0;
        v282 = *(_DWORD *)(v11 + 96);
        v232 = HIBYTE(v275);
        v233 = v274[0];
        v234 = (size_t)v274[1];
        if (v274[1])
          v235 = v274[0] == 0;
        else
          v235 = 0;
        v236 = !v235;
        if ((v275 & 0x8000000000000000) == 0)
        {
          cricket::SenderOptions::operator=(v11, (__int128 *)i);
          if ((unint64_t)__s2b >= 2)
          {
            v11 = v232;
            v237 = i;
            while (1)
            {
              v238 = v222 - 1;
              v222 = (v222 - 1) >> 1;
              i = a1 + 104 * v222;
              if (*(char *)(i + 23) < 0)
              {
                v239 = *(_QWORD *)(i + 8);
                if ((v239 & 0x8000000000000000) != 0)
                  goto LABEL_606;
                v240 = *(const void **)i;
                if (v239 && v240 == 0)
                  goto LABEL_606;
              }
              else
              {
                v239 = *(unsigned __int8 *)(i + 23);
                v240 = (const void *)(a1 + 104 * v222);
              }
              if (v11 >= v239)
                v242 = v239;
              else
                v242 = v11;
              v243 = memcmp(v240, v274, v242);
              if (v243)
              {
                if ((v243 & 0x80000000) == 0)
                  goto LABEL_585;
              }
              else if (v239 >= v11)
              {
                goto LABEL_585;
              }
              cricket::SenderOptions::operator=(v237, (__int128 *)(a1 + 104 * v222));
              v237 = a1 + 104 * v222;
              if (v238 <= 1)
                goto LABEL_586;
            }
          }
          goto LABEL_586;
        }
        cricket::SenderOptions::operator=(v11, (__int128 *)i);
        if ((v234 & 0x8000000000000000) == 0 && v236)
        {
          if ((unint64_t)__s2b < 2)
            goto LABEL_586;
          v237 = i;
          while (1)
          {
            v11 = v222 - 1;
            v222 = (v222 - 1) >> 1;
            i = a1 + 104 * v222;
            if (*(char *)(i + 23) < 0)
            {
              v244 = *(_QWORD *)(i + 8);
              if ((v244 & 0x8000000000000000) != 0)
                goto LABEL_606;
              v245 = *(const void **)i;
              if (v244 && v245 == 0)
                goto LABEL_606;
            }
            else
            {
              v244 = *(unsigned __int8 *)(i + 23);
              v245 = (const void *)(a1 + 104 * v222);
            }
            if (v234 >= v244)
              v247 = v244;
            else
              v247 = v234;
            v248 = memcmp(v245, v233, v247);
            if (v248)
            {
              if ((v248 & 0x80000000) == 0)
              {
LABEL_585:
                i = v237;
                goto LABEL_586;
              }
            }
            else if (v244 >= v234)
            {
              goto LABEL_585;
            }
            cricket::SenderOptions::operator=(v237, (__int128 *)(a1 + 104 * v222));
            v237 = a1 + 104 * v222;
            if (v11 < 2)
              goto LABEL_586;
          }
        }
        if ((unint64_t)__s2b < 2)
        {
LABEL_586:
          cricket::SenderOptions::operator=(i, (__int128 *)v274);
          cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)v274);
          goto LABEL_493;
        }
        v249 = a1 + 104 * ((v222 - 1) >> 1);
        if ((*(char *)(v249 + 23) & 0x80000000) == 0)
          goto LABEL_606;
        v116 = *(_QWORD *)(v249 + 8);
        if ((v116 & 0x8000000000000000) != 0)
          goto LABEL_606;
        __break(1u);
LABEL_591:
        v11 = *(_QWORD *)(v116 - 96);
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_606;
        v117 = *(const void **)v263;
        if (v11)
        {
          if (!v117)
            goto LABEL_606;
        }
LABEL_594:
        if (*(char *)(a1 + 23) < 0)
        {
          i = *(_QWORD *)(a1 + 8);
          if ((i & 0x8000000000000000) != 0)
            goto LABEL_606;
          v250 = *(const void **)a1;
          if (i)
          {
            if (!v250)
              goto LABEL_606;
          }
        }
        else
        {
          i = *(unsigned __int8 *)(a1 + 23);
          v250 = (const void *)a1;
        }
        if (i >= v11)
          v251 = v11;
        else
          v251 = i;
        v252 = memcmp(v117, v250, v251);
        if (v252)
        {
          if (v252 < 0)
            goto LABEL_604;
        }
        else
        {
LABEL_607:
          if (v11 < i)
          {
LABEL_604:
            v253 = *(_OWORD *)a1;
            v275 = *(_QWORD *)(a1 + 16);
            *(_OWORD *)v274 = v253;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v276 = *(_OWORD *)(a1 + 24);
            v277 = *(_QWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 40) = 0;
            v278 = *(_OWORD *)(a1 + 48);
            v279 = *(_QWORD *)(a1 + 64);
            *(_QWORD *)(a1 + 48) = 0;
            *(_QWORD *)(a1 + 56) = 0;
            *(_QWORD *)(a1 + 64) = 0;
            v280 = *(_OWORD *)(a1 + 72);
            v281 = *(_QWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = 0;
            *(_QWORD *)(a1 + 80) = 0;
            *(_QWORD *)(a1 + 88) = 0;
            v282 = *(_DWORD *)(a1 + 96);
            cricket::SenderOptions::operator=(a1, v263);
            cricket::SenderOptions::operator=((uint64_t)v263, (__int128 *)v274);
            cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)v274);
          }
        }
        return;
    }
  }
}

void std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::`anonymous namespace'::ValidMediaSessionOptions(cricket::MediaSessionOptions const&)::$_0 &,cricket::SenderOptions *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  size_t v10;
  const void *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  const void *v19;
  size_t v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  size_t v28;
  const void *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  int v42;

  if (*(char *)(a5 + 23) < 0)
  {
    v10 = *(_QWORD *)(a5 + 8);
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_71;
    v11 = *(const void **)a5;
    if (v10)
    {
      if (!v11)
        goto LABEL_71;
    }
  }
  else
  {
    v10 = *(unsigned __int8 *)(a5 + 23);
    v11 = (const void *)a5;
  }
  if (*(char *)(a4 + 23) < 0)
  {
    v12 = *(_QWORD *)(a4 + 8);
    if ((v12 & 0x8000000000000000) != 0)
      goto LABEL_71;
    v13 = *(const void **)a4;
    if (v12)
    {
      if (!v13)
        goto LABEL_71;
    }
  }
  else
  {
    v12 = *(unsigned __int8 *)(a4 + 23);
    v13 = (const void *)a4;
  }
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v11, v13, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0)
      return;
  }
  else if (v10 >= v12)
  {
    return;
  }
  v34 = *(_OWORD *)a4;
  v35 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v36 = *(_OWORD *)(a4 + 24);
  v37 = *(_QWORD *)(a4 + 40);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  v38 = *(_OWORD *)(a4 + 48);
  v39 = *(_QWORD *)(a4 + 64);
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  v40 = *(_OWORD *)(a4 + 72);
  v41 = *(_QWORD *)(a4 + 88);
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 88) = 0;
  v42 = *(_DWORD *)(a4 + 96);
  cricket::SenderOptions::operator=(a4, (__int128 *)a5);
  cricket::SenderOptions::operator=(a5, &v34);
  cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)&v34);
  if (*(char *)(a4 + 23) < 0)
  {
    v16 = *(_QWORD *)(a4 + 8);
    if ((v16 & 0x8000000000000000) != 0)
      goto LABEL_71;
    v17 = *(const void **)a4;
    if (v16)
    {
      if (!v17)
        goto LABEL_71;
    }
  }
  else
  {
    v16 = *(unsigned __int8 *)(a4 + 23);
    v17 = (const void *)a4;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    v18 = *(_QWORD *)(a3 + 8);
    if ((v18 & 0x8000000000000000) != 0)
      goto LABEL_71;
    v19 = *(const void **)a3;
    if (v18)
    {
      if (!v19)
        goto LABEL_71;
    }
  }
  else
  {
    v18 = *(unsigned __int8 *)(a3 + 23);
    v19 = (const void *)a3;
  }
  if (v18 >= v16)
    v20 = v16;
  else
    v20 = v18;
  v21 = memcmp(v17, v19, v20);
  if (v21)
  {
    if ((v21 & 0x80000000) == 0)
      return;
  }
  else if (v16 >= v18)
  {
    return;
  }
  v34 = *(_OWORD *)a3;
  v35 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v36 = *(_OWORD *)(a3 + 24);
  v37 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v38 = *(_OWORD *)(a3 + 48);
  v39 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  v40 = *(_OWORD *)(a3 + 72);
  v41 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  v42 = *(_DWORD *)(a3 + 96);
  cricket::SenderOptions::operator=(a3, (__int128 *)a4);
  cricket::SenderOptions::operator=(a4, &v34);
  cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)&v34);
  if (*(char *)(a3 + 23) < 0)
  {
    v22 = *(_QWORD *)(a3 + 8);
    if ((v22 & 0x8000000000000000) != 0)
      goto LABEL_71;
    v23 = *(const void **)a3;
    if (v22)
    {
      if (!v23)
        goto LABEL_71;
    }
  }
  else
  {
    v22 = *(unsigned __int8 *)(a3 + 23);
    v23 = (const void *)a3;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v24 = *(_QWORD *)(a2 + 8);
    if ((v24 & 0x8000000000000000) != 0)
      goto LABEL_71;
    v25 = *(const void **)a2;
    if (v24)
    {
      if (!v25)
        goto LABEL_71;
    }
  }
  else
  {
    v24 = *(unsigned __int8 *)(a2 + 23);
    v25 = (const void *)a2;
  }
  if (v24 >= v22)
    v26 = v22;
  else
    v26 = v24;
  v27 = memcmp(v23, v25, v26);
  if (v27)
  {
    if ((v27 & 0x80000000) == 0)
      return;
  }
  else if (v22 >= v24)
  {
    return;
  }
  v34 = *(_OWORD *)a2;
  v35 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v36 = *(_OWORD *)(a2 + 24);
  v37 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v38 = *(_OWORD *)(a2 + 48);
  v39 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v40 = *(_OWORD *)(a2 + 72);
  v41 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v42 = *(_DWORD *)(a2 + 96);
  cricket::SenderOptions::operator=(a2, (__int128 *)a3);
  cricket::SenderOptions::operator=(a3, &v34);
  cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)&v34);
  if (*(char *)(a2 + 23) < 0)
  {
    v28 = *(_QWORD *)(a2 + 8);
    if ((v28 & 0x8000000000000000) != 0)
      goto LABEL_71;
    v29 = *(const void **)a2;
    if (v28)
    {
      if (!v29)
        goto LABEL_71;
    }
  }
  else
  {
    v28 = *(unsigned __int8 *)(a2 + 23);
    v29 = (const void *)a2;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v30 = *(_QWORD *)(a1 + 8);
    if ((v30 & 0x8000000000000000) == 0)
    {
      v31 = *(const void **)a1;
      if (!v30 || v31)
        goto LABEL_62;
    }
LABEL_71:
    __break(1u);
    return;
  }
  v30 = *(unsigned __int8 *)(a1 + 23);
  v31 = (const void *)a1;
LABEL_62:
  if (v30 >= v28)
    v32 = v28;
  else
    v32 = v30;
  v33 = memcmp(v29, v31, v32);
  if (v33)
  {
    if ((v33 & 0x80000000) == 0)
      return;
    goto LABEL_67;
  }
  if (v28 < v30)
  {
LABEL_67:
    v34 = *(_OWORD *)a1;
    v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v36 = *(_OWORD *)(a1 + 24);
    v37 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v38 = *(_OWORD *)(a1 + 48);
    v39 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v40 = *(_OWORD *)(a1 + 72);
    v41 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v42 = *(_DWORD *)(a1 + 96);
    cricket::SenderOptions::operator=(a1, (__int128 *)a2);
    cricket::SenderOptions::operator=(a2, &v34);
    cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)&v34);
  }
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::`anonymous namespace'::ValidMediaSessionOptions(cricket::MediaSessionOptions const&)::$_0 &,cricket::SenderOptions *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v6;
  const void *v7;
  size_t v8;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  const void *v17;
  const void *v18;
  size_t v19;
  int v20;
  size_t v21;
  const void *v22;
  const void *v23;
  size_t v24;
  int v25;
  size_t v26;
  const void *v27;
  uint64_t v28;
  size_t v29;
  const void *v30;
  size_t v31;
  const void *v32;
  size_t v33;
  int v34;
  size_t v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;

  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = (const void *)a2;
  v8 = v6;
  if (*(char *)(a2 + 23) < 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_88;
    v7 = *(const void **)a2;
    if (v8 && v7 == 0)
      goto LABEL_88;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_88;
    v11 = *(const void **)a1;
    if (v10)
    {
      if (!v11)
        goto LABEL_88;
    }
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 23);
    v11 = (const void *)a1;
  }
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v7, v11, v12);
  if (v13)
  {
    if ((v13 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_20:
    if (*(char *)(a3 + 23) < 0)
    {
      v16 = *(_QWORD *)(a3 + 8);
      if ((v16 & 0x8000000000000000) != 0)
        goto LABEL_88;
      v17 = *(const void **)a3;
      if (v16)
      {
        if (!v17)
          goto LABEL_88;
      }
    }
    else
    {
      v16 = *(unsigned __int8 *)(a3 + 23);
      v17 = (const void *)a3;
    }
    v23 = (const void *)a2;
    if ((v6 & 0x80) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      if ((v6 & 0x8000000000000000) != 0)
        goto LABEL_88;
      v23 = *(const void **)a2;
      if (v6)
      {
        if (!v23)
          goto LABEL_88;
      }
    }
    if (v6 >= v16)
      v24 = v16;
    else
      v24 = v6;
    v25 = memcmp(v17, v23, v24);
    if (v25)
    {
      if ((v25 & 0x80000000) == 0)
      {
LABEL_50:
        v38 = *(_OWORD *)a1;
        v39 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v40 = *(_OWORD *)(a1 + 24);
        v41 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        v42 = *(_OWORD *)(a1 + 48);
        v43 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        v44 = *(_OWORD *)(a1 + 72);
        v45 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        v46 = *(_DWORD *)(a1 + 96);
        cricket::SenderOptions::operator=(a1, (__int128 *)a2);
        cricket::SenderOptions::operator=(a2, &v38);
        cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)&v38);
        if (*(char *)(a3 + 23) < 0)
        {
          v26 = *(_QWORD *)(a3 + 8);
          if ((v26 & 0x8000000000000000) != 0)
            goto LABEL_88;
          v27 = *(const void **)a3;
          if (v26)
          {
            if (!v27)
              goto LABEL_88;
          }
        }
        else
        {
          v26 = *(unsigned __int8 *)(a3 + 23);
          v27 = (const void *)a3;
        }
        if (*(char *)(a2 + 23) < 0)
        {
          v31 = *(_QWORD *)(a2 + 8);
          if ((v31 & 0x8000000000000000) != 0)
            goto LABEL_88;
          v32 = *(const void **)a2;
          if (v31)
          {
            if (!v32)
              goto LABEL_88;
          }
        }
        else
        {
          v31 = *(unsigned __int8 *)(a2 + 23);
          v32 = (const void *)a2;
        }
        if (v31 >= v26)
          v35 = v26;
        else
          v35 = v31;
        v36 = memcmp(v27, v32, v35);
        if (v36)
        {
          if ((v36 & 0x80000000) == 0)
            return;
        }
        else if (v26 >= v31)
        {
          return;
        }
        v38 = *(_OWORD *)a2;
        v39 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        v40 = *(_OWORD *)(a2 + 24);
        v41 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 40) = 0;
        v42 = *(_OWORD *)(a2 + 48);
        v43 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a2 + 48) = 0;
        *(_QWORD *)(a2 + 56) = 0;
        v44 = *(_OWORD *)(a2 + 72);
        v45 = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a2 + 64) = 0;
        *(_QWORD *)(a2 + 72) = 0;
        *(_QWORD *)(a2 + 80) = 0;
        *(_QWORD *)(a2 + 88) = 0;
        v46 = *(_DWORD *)(a2 + 96);
        v28 = a2;
LABEL_86:
        cricket::SenderOptions::operator=(v28, (__int128 *)a3);
        v37 = a3;
        goto LABEL_87;
      }
    }
    else if (v16 >= v6)
    {
      goto LABEL_50;
    }
    v38 = *(_OWORD *)a1;
    v39 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v40 = *(_OWORD *)(a1 + 24);
    v41 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v42 = *(_OWORD *)(a1 + 48);
    v43 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v44 = *(_OWORD *)(a1 + 72);
    v45 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v46 = *(_DWORD *)(a1 + 96);
    v28 = a1;
    goto LABEL_86;
  }
  if (v8 < v10)
    goto LABEL_20;
LABEL_17:
  if (*(char *)(a3 + 23) < 0)
  {
    v14 = *(_QWORD *)(a3 + 8);
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_88;
    v15 = *(const void **)a3;
    if (v14)
    {
      if (!v15)
        goto LABEL_88;
    }
  }
  else
  {
    v14 = *(unsigned __int8 *)(a3 + 23);
    v15 = (const void *)a3;
  }
  v18 = (const void *)a2;
  if ((v6 & 0x80) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    if ((v6 & 0x8000000000000000) != 0 || (v18 = *(const void **)a2, v6) && !v18)
    {
LABEL_88:
      __break(1u);
      return;
    }
  }
  if (v6 >= v14)
    v19 = v14;
  else
    v19 = v6;
  v20 = memcmp(v15, v18, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      return;
  }
  else if (v14 >= v6)
  {
    return;
  }
  v38 = *(_OWORD *)a2;
  v39 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v40 = *(_OWORD *)(a2 + 24);
  v41 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v42 = *(_OWORD *)(a2 + 48);
  v43 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v44 = *(_OWORD *)(a2 + 72);
  v45 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v46 = *(_DWORD *)(a2 + 96);
  cricket::SenderOptions::operator=(a2, (__int128 *)a3);
  cricket::SenderOptions::operator=(a3, &v38);
  cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)&v38);
  if (*(char *)(a2 + 23) < 0)
  {
    v21 = *(_QWORD *)(a2 + 8);
    if ((v21 & 0x8000000000000000) != 0)
      goto LABEL_88;
    v22 = *(const void **)a2;
    if (v21)
    {
      if (!v22)
        goto LABEL_88;
    }
  }
  else
  {
    v21 = *(unsigned __int8 *)(a2 + 23);
    v22 = (const void *)a2;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v29 = *(_QWORD *)(a1 + 8);
    if ((v29 & 0x8000000000000000) == 0)
    {
      v30 = *(const void **)a1;
      if (!v29 || v30)
        goto LABEL_67;
    }
    goto LABEL_88;
  }
  v29 = *(unsigned __int8 *)(a1 + 23);
  v30 = (const void *)a1;
LABEL_67:
  if (v29 >= v21)
    v33 = v21;
  else
    v33 = v29;
  v34 = memcmp(v22, v30, v33);
  if (v34)
  {
    if (v34 < 0)
      goto LABEL_83;
  }
  else if (v21 < v29)
  {
LABEL_83:
    v38 = *(_OWORD *)a1;
    v39 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v40 = *(_OWORD *)(a1 + 24);
    v41 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v42 = *(_OWORD *)(a1 + 48);
    v43 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v44 = *(_OWORD *)(a1 + 72);
    v45 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v46 = *(_DWORD *)(a1 + 96);
    cricket::SenderOptions::operator=(a1, (__int128 *)a2);
    v37 = a2;
LABEL_87:
    cricket::SenderOptions::operator=(v37, &v38);
    cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)&v38);
  }
}

void std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::`anonymous namespace'::ValidMediaSessionOptions(cricket::MediaSessionOptions const&)::$_0 &,cricket::SenderOptions *>(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  size_t v5;
  const void *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  size_t v15;
  char *v16;
  size_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  void **v21;
  unint64_t v23;
  const void *v24;
  size_t v25;
  int v26;
  size_t v27;
  const void *v28;
  size_t v29;
  int v30;
  uint64_t v31;
  void *__s1[2];
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int v40;

  switch(0x4EC4EC4EC4EC4EC5 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return;
    case 2:
      v4 = (__int128 *)(a2 - 104);
      if (*(char *)(a2 - 81) < 0)
      {
        v5 = *(_QWORD *)(a2 - 96);
        if ((v5 & 0x8000000000000000) != 0)
          goto LABEL_73;
        v6 = *(const void **)v4;
        if (v5)
        {
          if (!v6)
            goto LABEL_73;
        }
      }
      else
      {
        v5 = *(unsigned __int8 *)(a2 - 81);
        v6 = (const void *)(a2 - 104);
      }
      if (*(char *)(a1 + 23) < 0)
      {
        v27 = *(_QWORD *)(a1 + 8);
        if ((v27 & 0x8000000000000000) != 0)
          goto LABEL_73;
        v28 = *(const void **)a1;
        if (v27)
        {
          if (!v28)
            goto LABEL_73;
        }
      }
      else
      {
        v27 = *(unsigned __int8 *)(a1 + 23);
        v28 = (const void *)a1;
      }
      if (v27 >= v5)
        v29 = v5;
      else
        v29 = v27;
      v30 = memcmp(v6, v28, v29);
      if (v30)
      {
        if ((v30 & 0x80000000) == 0)
          return;
      }
      else if (v5 >= v27)
      {
        return;
      }
      *(_OWORD *)__s1 = *(_OWORD *)a1;
      v33 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      v34 = *(_OWORD *)(a1 + 24);
      v35 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      v36 = *(_OWORD *)(a1 + 48);
      v37 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      v38 = *(_OWORD *)(a1 + 72);
      v39 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      v40 = *(_DWORD *)(a1 + 96);
      cricket::SenderOptions::operator=(a1, v4);
      cricket::SenderOptions::operator=((uint64_t)v4, (__int128 *)__s1);
      cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)__s1);
      return;
    case 3:
      return;
    case 4:
      return;
    case 5:
      return;
    default:
      v7 = (char *)(a1 + 208);
      v8 = a1 + 312;
      if (a1 + 312 == a2)
        return;
      v31 = a2;
      v9 = 0;
      v10 = 0;
      while (2)
      {
        if (*(char *)(v8 + 23) < 0)
        {
          v12 = *(_QWORD *)(v8 + 8);
          if ((v12 & 0x8000000000000000) != 0)
            goto LABEL_73;
          v13 = *(const void **)v8;
          if (v12 && v13 == 0)
            goto LABEL_73;
        }
        else
        {
          v12 = *(unsigned __int8 *)(v8 + 23);
          v13 = (const void *)v8;
        }
        if (v7[23] < 0)
        {
          v15 = *((_QWORD *)v7 + 1);
          if ((v15 & 0x8000000000000000) == 0)
          {
            v16 = *(char **)v7;
            if (!v15 || v16)
              goto LABEL_22;
          }
LABEL_73:
          __break(1u);
          return;
        }
        v15 = v7[23];
        v16 = v7;
LABEL_22:
        if (v15 >= v12)
          v17 = v12;
        else
          v17 = v15;
        v18 = memcmp(v13, v16, v17);
        if (v18)
        {
          if (v18 < 0)
            goto LABEL_29;
LABEL_9:
          v7 = (char *)v8;
          v9 += 104;
          v8 += 104;
          if (v8 == v31)
            return;
          continue;
        }
        break;
      }
      if (v12 >= v15)
        goto LABEL_9;
LABEL_29:
      *(_OWORD *)__s1 = *(_OWORD *)v8;
      v33 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      v34 = *(_OWORD *)(v8 + 24);
      v35 = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      v36 = *(_OWORD *)(v8 + 48);
      v37 = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      v38 = *(_OWORD *)(v8 + 72);
      v39 = *(_QWORD *)(v8 + 88);
      *(_QWORD *)(v8 + 64) = 0;
      *(_QWORD *)(v8 + 72) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      *(_QWORD *)(v8 + 88) = 0;
      v40 = *(_DWORD *)(v8 + 96);
      cricket::SenderOptions::operator=(v8, (__int128 *)v7);
      v11 = a1;
      if (v7 == (char *)a1)
        goto LABEL_7;
      v19 = v9;
      while (1)
      {
        if (SHIBYTE(v33) < 0)
        {
          v20 = __s1[1];
          if (((unint64_t)__s1[1] & 0x8000000000000000) != 0)
            goto LABEL_73;
          v21 = (void **)__s1[0];
          if (__s1[1] && __s1[0] == 0)
            goto LABEL_73;
        }
        else
        {
          v20 = (void *)HIBYTE(v33);
          v21 = __s1;
        }
        if (*(char *)(a1 + v19 + 127) < 0)
        {
          v23 = *(_QWORD *)(a1 + v19 + 112);
          if ((v23 & 0x8000000000000000) != 0)
            goto LABEL_73;
          v24 = *(const void **)(a1 + v19 + 104);
          if (v23)
          {
            if (!v24)
              goto LABEL_73;
          }
        }
        else
        {
          v23 = *(unsigned __int8 *)(a1 + v19 + 127);
          v24 = (const void *)(a1 + v19 + 104);
        }
        v25 = v23 >= (unint64_t)v20 ? (size_t)v20 : v23;
        v26 = memcmp(v21, v24, v25);
        if (!v26)
          break;
        if ((v26 & 0x80000000) == 0)
        {
          v11 = (uint64_t)v7;
          goto LABEL_7;
        }
LABEL_32:
        v7 -= 104;
        cricket::SenderOptions::operator=(a1 + v19 + 208, (__int128 *)(a1 + v19 + 104));
        v19 -= 104;
        if (v19 == -208)
        {
          v11 = a1;
          goto LABEL_7;
        }
      }
      if ((unint64_t)v20 < v23)
        goto LABEL_32;
      v11 = a1 + v19 + 208;
LABEL_7:
      cricket::SenderOptions::operator=(v11, (__int128 *)__s1);
      if (++v10 != 8)
      {
        cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)__s1);
        goto LABEL_9;
      }
      cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)__s1);
      return;
  }
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::`anonymous namespace'::ValidMediaSessionOptions(cricket::MediaSessionOptions const&)::$_0 &,cricket::SenderOptions *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  const void *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;

  if (*(char *)(a4 + 23) < 0)
  {
    v8 = *(_QWORD *)(a4 + 8);
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_53;
    v9 = *(const void **)a4;
    if (v8)
    {
      if (!v9)
        goto LABEL_53;
    }
  }
  else
  {
    v8 = *(unsigned __int8 *)(a4 + 23);
    v9 = (const void *)a4;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    v10 = *(_QWORD *)(a3 + 8);
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_53;
    v11 = *(const void **)a3;
    if (v10)
    {
      if (!v11)
        goto LABEL_53;
    }
  }
  else
  {
    v10 = *(unsigned __int8 *)(a3 + 23);
    v11 = (const void *)a3;
  }
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  if (v13)
  {
    if ((v13 & 0x80000000) == 0)
      return;
  }
  else if (v8 >= v10)
  {
    return;
  }
  v26 = *(_OWORD *)a3;
  v27 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v28 = *(_OWORD *)(a3 + 24);
  v29 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v30 = *(_OWORD *)(a3 + 48);
  v31 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  v32 = *(_OWORD *)(a3 + 72);
  v33 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  v34 = *(_DWORD *)(a3 + 96);
  cricket::SenderOptions::operator=(a3, (__int128 *)a4);
  cricket::SenderOptions::operator=(a4, &v26);
  cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)&v26);
  if (*(char *)(a3 + 23) < 0)
  {
    v14 = *(_QWORD *)(a3 + 8);
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_53;
    v15 = *(const void **)a3;
    if (v14)
    {
      if (!v15)
        goto LABEL_53;
    }
  }
  else
  {
    v14 = *(unsigned __int8 *)(a3 + 23);
    v15 = (const void *)a3;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v16 = *(_QWORD *)(a2 + 8);
    if ((v16 & 0x8000000000000000) != 0)
      goto LABEL_53;
    v17 = *(const void **)a2;
    if (v16)
    {
      if (!v17)
        goto LABEL_53;
    }
  }
  else
  {
    v16 = *(unsigned __int8 *)(a2 + 23);
    v17 = (const void *)a2;
  }
  if (v16 >= v14)
    v18 = v14;
  else
    v18 = v16;
  v19 = memcmp(v15, v17, v18);
  if (v19)
  {
    if ((v19 & 0x80000000) == 0)
      return;
  }
  else if (v14 >= v16)
  {
    return;
  }
  v26 = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v28 = *(_OWORD *)(a2 + 24);
  v29 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v30 = *(_OWORD *)(a2 + 48);
  v31 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v32 = *(_OWORD *)(a2 + 72);
  v33 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v34 = *(_DWORD *)(a2 + 96);
  cricket::SenderOptions::operator=(a2, (__int128 *)a3);
  cricket::SenderOptions::operator=(a3, &v26);
  cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)&v26);
  if (*(char *)(a2 + 23) < 0)
  {
    v20 = *(_QWORD *)(a2 + 8);
    if ((v20 & 0x8000000000000000) != 0)
      goto LABEL_53;
    v21 = *(const void **)a2;
    if (v20)
    {
      if (!v21)
        goto LABEL_53;
    }
  }
  else
  {
    v20 = *(unsigned __int8 *)(a2 + 23);
    v21 = (const void *)a2;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v22 = *(_QWORD *)(a1 + 8);
    if ((v22 & 0x8000000000000000) == 0)
    {
      v23 = *(const void **)a1;
      if (!v22 || v23)
        goto LABEL_45;
    }
LABEL_53:
    __break(1u);
    return;
  }
  v22 = *(unsigned __int8 *)(a1 + 23);
  v23 = (const void *)a1;
LABEL_45:
  if (v22 >= v20)
    v24 = v20;
  else
    v24 = v22;
  v25 = memcmp(v21, v23, v24);
  if (v25)
  {
    if (v25 < 0)
      goto LABEL_52;
  }
  else if (v20 < v22)
  {
LABEL_52:
    v26 = *(_OWORD *)a1;
    v27 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v28 = *(_OWORD *)(a1 + 24);
    v29 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v30 = *(_OWORD *)(a1 + 48);
    v31 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v32 = *(_OWORD *)(a1 + 72);
    v33 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v34 = *(_DWORD *)(a1 + 96);
    cricket::SenderOptions::operator=(a1, (__int128 *)a2);
    cricket::SenderOptions::operator=(a2, &v26);
    cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)&v26);
  }
}

cricket::MediaSessionOptions *cricket::MediaSessionOptions::MediaSessionOptions(cricket::MediaSessionOptions *this, const cricket::MediaSessionOptions *a2)
{
  int v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;

  v4 = *(_DWORD *)a2;
  *((_BYTE *)this + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)this = v4;
  v5 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 8);
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_DWORD *)this + 8) = 65537;
  *((_BYTE *)this + 36) = 0;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_BYTE *)this + 36) = *((_BYTE *)a2 + 36);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  v7 = *((_QWORD *)a2 + 5);
  v8 = *((_QWORD *)a2 + 6);
  v9 = v8 - v7;
  if (v8 != v7)
  {
    v10 = 0xF0F0F0F0F0F0F0F1 * (v9 >> 3);
    if (v10 >= 0x1E1E1E1E1E1E1E2)
      abort();
    v11 = (char *)operator new(v9);
    v12 = 0;
    *((_QWORD *)this + 5) = v11;
    *((_QWORD *)this + 6) = v11;
    *((_QWORD *)this + 7) = &v11[136 * v10];
    do
    {
      cricket::MediaDescriptionOptions::MediaDescriptionOptions((cricket::MediaDescriptionOptions *)&v11[v12], (const cricket::MediaDescriptionOptions *)(v7 + v12));
      v12 += 136;
    }
    while (v7 + v12 != v8);
    *((_QWORD *)this + 6) = &v11[v12];
  }
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<cricket::IceParameters>::__init_with_size[abi:sn180100]<cricket::IceParameters*,cricket::IceParameters*>((_QWORD *)this + 8, *((_QWORD *)a2 + 8), *((_QWORD *)a2 + 9), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3));
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  return this;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::WebRtcSessionDescriptionFactory::WebRtcSessionDescriptionFactory(webrtc::ConnectionContext *,webrtc::SdpStateProvider const*,std::string const&,BOOL,std::unique_ptr<rtc::RTCCertificateGeneratorInterface>,webrtc::scoped_refptr<rtc::RTCCertificate>,std::function<void ()(webrtc::scoped_refptr<rtc::RTCCertificate> const&)>,webrtc::FieldTrialsView const&)::$_0 &&,webrtc::scoped_refptr<rtc::RTCCertificate>>(_QWORD **a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *__p;
  __int128 v22;

  v2 = *a1;
  v3 = *a2;
  *a2 = 0;
  if (!*v2 || !*(_BYTE *)*v2 || (v4 = v2[1]) == 0)
  {
    if (!v3)
      return;
    do
    {
      v9 = __ldaxr((unsigned int *)v3);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v3));
    if (v10)
      return;
    v11 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
LABEL_25:
    JUMPOUT(0x20BD0ADECLL);
  }
  if (v3)
  {
    v20 = v3;
    webrtc::WebRtcSessionDescriptionFactory::SetCertificate(v4, &v20);
    v5 = v20;
    if (v20)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        v8 = *(_QWORD *)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        MEMORY[0x20BD0ADEC](v5, 0x1020C40D5A9D86FLL);
      }
    }
    return;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/webrtc_session_description_factory.cc");
  *(_DWORD *)(v4 + 360) = 3;
  v19 = (char *)operator new(0x30uLL);
  __p = v19;
  v22 = xmmword_208F094F0;
  if (v19 <= " failed because DTLS identity request failed"
    && v19 + 44 > " failed because DTLS identity request failed")
  {
    __break(1u);
    goto LABEL_25;
  }
  strcpy(v19, " failed because DTLS identity request failed");
  webrtc::WebRtcSessionDescriptionFactory::FailPendingRequests(v4, (char **)&__p);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::WebRtcSessionDescriptionFactory::WebRtcSessionDescriptionFactory(webrtc::ConnectionContext *,webrtc::SdpStateProvider const*,std::string const&,BOOL,std::unique_ptr<rtc::RTCCertificateGeneratorInterface>,webrtc::scoped_refptr<rtc::RTCCertificate>,std::function<void ()(webrtc::scoped_refptr<rtc::RTCCertificate> const&)>,webrtc::FieldTrialsView const&)::$_0>(uint64_t result, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*v3)
      {
        v4 = (unsigned int *)(*v3 + 4);
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          MEMORY[0x20BD0ADEC]();
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void std::deque<webrtc::WebRtcSessionDescriptionFactory::CreateSessionDescriptionRequest>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  BOOL v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  _OWORD *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x24;
  v4 = v2 - 36;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v30 = *(char **)a1;
    if ((unint64_t)v7 > *(_QWORD *)a1)
    {
      v31 = (uint64_t)&v7[-*(_QWORD *)a1] >> 3;
      if (v31 >= -1)
        v32 = v31 + 1;
      else
        v32 = v31 + 2;
      v33 = v32 >> 1;
      v34 = -v33;
      v35 = &v7[-8 * v33];
      v36 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v33], v7, v5 - v7);
        v7 = *(char **)(a1 + 8);
      }
      v5 = &v35[v36];
      v37 = &v7[8 * v34];
      goto LABEL_32;
    }
    v39 = (v5 - v30) >> 2;
    if (v5 == v30)
      v39 = 1;
    if (v39 >> 61)
      goto LABEL_108;
    v40 = v39 >> 2;
    v41 = 8 * v39;
    v42 = (char *)operator new(8 * v39);
    v43 = &v42[8 * v40];
    v45 = v5 - v7;
    v44 = v5 == v7;
    v5 = v43;
    if (!v44)
    {
      v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
      v46 = v45 - 8;
      if ((unint64_t)(v45 - 8) < 0x38)
      {
        v47 = &v42[8 * v40];
        do
        {
LABEL_91:
          v100 = *(_QWORD *)v7;
          v7 += 8;
          *(_QWORD *)v47 = v100;
          v47 += 8;
        }
        while (v47 != v5);
        goto LABEL_92;
      }
      v93 = &v42[8 * v40];
      v47 = v93;
      if ((unint64_t)(v93 - v7) < 0x20)
        goto LABEL_91;
      v94 = (v46 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v47 = &v43[v95];
      v7 += v95;
      v96 = (__int128 *)(v6 + 3);
      v97 = v93 + 16;
      v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v99 = *v96;
        *(v97 - 1) = *(v96 - 1);
        *v97 = v99;
        v96 += 2;
        v97 += 2;
        v98 -= 4;
      }
      while (v98);
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_91;
    }
LABEL_92:
    *(_QWORD *)a1 = v42;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = &v42[v41];
    if (v30)
    {
      operator delete(v30);
      v5 = *(char **)(a1 + 16);
    }
LABEL_4:
    if (!v5)
    {
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
LABEL_5:
    *(_QWORD *)v5 = v8;
LABEL_10:
    *(_QWORD *)(a1 + 16) += 8;
    return;
  }
  v10 = *(char **)(a1 + 16);
  v9 = *(char **)(a1 + 24);
  v12 = *(char **)a1;
  v11 = *(char **)(a1 + 8);
  v13 = v10 - v11;
  v14 = (v10 - v11) >> 3;
  v15 = (uint64_t)&v9[-*(_QWORD *)a1];
  if (v14 < (unint64_t)(v15 >> 3))
  {
    v16 = operator new(0xFC0uLL);
    v17 = v16;
    if (v9 != v10)
    {
      if (v10)
      {
        *(_QWORD *)v10 = v16;
        goto LABEL_10;
      }
      goto LABEL_107;
    }
    if (v11 == v12)
    {
      v70 = (v9 - v11) >> 2;
      if (v10 == v11)
        v70 = 1;
      if (v70 >> 61)
        goto LABEL_108;
      v71 = (v70 + 3) >> 2;
      v72 = 8 * v70;
      v73 = (char *)operator new(8 * v70);
      v38 = &v73[8 * v71];
      v74 = v38;
      if (v10 != v11)
      {
        v74 = &v38[8 * v14];
        v75 = &v73[8 * v71];
        v76 = v11;
        if ((unint64_t)(v13 - 8) < 0x38)
          goto LABEL_111;
        v77 = &v73[8 * v71];
        v75 = v77;
        v76 = v11;
        if ((unint64_t)(v77 - v11) < 0x20)
          goto LABEL_111;
        v78 = ((unint64_t)(v13 - 8) >> 3) + 1;
        v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v38[v79];
        v76 = &v11[v79];
        v80 = (__int128 *)(v11 + 16);
        v81 = v77 + 16;
        v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v83 = *v80;
          *(v81 - 1) = *(v80 - 1);
          *v81 = v83;
          v80 += 2;
          v81 += 2;
          v82 -= 4;
        }
        while (v82);
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_111:
          do
          {
            v84 = *(_QWORD *)v76;
            v76 += 8;
            *(_QWORD *)v75 = v84;
            v75 += 8;
          }
          while (v75 != v74);
        }
      }
      *(_QWORD *)a1 = v73;
      *(_QWORD *)(a1 + 8) = v38;
      *(_QWORD *)(a1 + 16) = v74;
      *(_QWORD *)(a1 + 24) = &v73[v72];
      if (v11)
      {
        operator delete(v11);
        v38 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v38 = v11;
    }
    *((_QWORD *)v38 - 1) = v17;
    v85 = *(char **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v85 - 8;
    v8 = *((_QWORD *)v85 - 1);
    *(_QWORD *)(a1 + 8) = v85;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v86 = *(char **)a1;
    if ((unint64_t)v85 > *(_QWORD *)a1)
    {
      v87 = (uint64_t)&v85[-*(_QWORD *)a1] >> 3;
      if (v87 >= -1)
        v88 = v87 + 1;
      else
        v88 = v87 + 2;
      v89 = v88 >> 1;
      v90 = -v89;
      v91 = &v85[-8 * v89];
      v92 = v5 - v85;
      if (v5 != v85)
      {
        memmove(&v85[-8 * v89], v85, v5 - v85);
        v85 = *(char **)(a1 + 8);
      }
      v5 = &v91[v92];
      v37 = &v85[8 * v90];
LABEL_32:
      *(_QWORD *)(a1 + 8) = v37;
      *(_QWORD *)(a1 + 16) = v5;
      goto LABEL_5;
    }
    v101 = (v5 - v86) >> 2;
    if (v5 == v86)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v85;
      v44 = v5 == v85;
      v5 = v105;
      if (v44)
        goto LABEL_105;
      v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
      v107 = v106 - 8;
      if ((unint64_t)(v106 - 8) >= 0x38)
      {
        v109 = &v104[8 * v102];
        v108 = v109;
        if ((unint64_t)(v109 - v85) >= 0x20)
        {
          v110 = (v107 >> 3) + 1;
          v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = &v105[v111];
          v112 = &v85[v111];
          v113 = (__int128 *)(v85 + 16);
          v114 = v109 + 16;
          v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116 = *v113;
            *(v114 - 1) = *(v113 - 1);
            *v114 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          v85 = v112;
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_105:
            *(_QWORD *)a1 = v104;
            *(_QWORD *)(a1 + 8) = v105;
            *(_QWORD *)(a1 + 16) = v5;
            *(_QWORD *)(a1 + 24) = &v104[v103];
            if (v86)
            {
              operator delete(v86);
              v5 = *(char **)(a1 + 16);
            }
            goto LABEL_4;
          }
        }
      }
      else
      {
        v108 = &v104[8 * v102];
      }
      do
      {
        v117 = *(_QWORD *)v85;
        v85 += 8;
        *(_QWORD *)v108 = v117;
        v108 += 8;
      }
      while (v108 != v5);
      goto LABEL_105;
    }
LABEL_108:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v18 = v15 >> 2;
  if (v9 == v12)
    v19 = 1;
  else
    v19 = v18;
  if (v19 >> 61)
    goto LABEL_108;
  v20 = (char *)operator new(8 * v19);
  v21 = &v20[8 * v14];
  v22 = &v20[8 * v19];
  v23 = operator new(0xFC0uLL);
  v24 = v23;
  if (v14 != v19)
    goto LABEL_21;
  if (v13 >= 1)
  {
    v25 = v14 + 2;
    if (v14 >= -1)
      v25 = v14 + 1;
    v21 -= 8 * (v25 >> 1);
LABEL_21:
    *(_QWORD *)v21 = v23;
    v26 = v21 + 8;
    if (v10 != v11)
      goto LABEL_48;
    goto LABEL_22;
  }
  v48 = v13 >> 2;
  if (v10 == v11)
    v48 = 1;
  if (v48 >> 61)
    goto LABEL_108;
  v49 = 8 * v48;
  v21 = (char *)operator new(8 * v48);
  operator delete(v20);
  v22 = &v21[v49];
  v50 = *(char **)(a1 + 8);
  v10 = *(char **)(a1 + 16);
  v20 = v21;
  *(_QWORD *)v21 = v24;
  v26 = v21 + 8;
  if (v10 != v50)
  {
    while (1)
    {
LABEL_48:
      if (v21 == v20)
      {
        if (v26 >= v22)
        {
          v55 = (v22 - v21) >> 2;
          if (v22 == v21)
            v55 = 1;
          if (v55 >> 61)
            goto LABEL_108;
          v56 = (v55 + 3) >> 2;
          v57 = 8 * v55;
          v58 = (char *)operator new(8 * v55);
          v20 = v58;
          v51 = &v58[8 * v56];
          v28 = v51;
          v59 = v26 - v21;
          if (v26 != v21)
          {
            v28 = &v51[v59 & 0xFFFFFFFFFFFFFFF8];
            v60 = v59 - 8;
            v61 = &v58[8 * v56];
            v62 = v21;
            if (v60 < 0x38)
              goto LABEL_112;
            v61 = &v58[8 * v56];
            v62 = v21;
            if ((unint64_t)(v61 - v21) < 0x20)
              goto LABEL_112;
            v63 = (v60 >> 3) + 1;
            v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
            v61 = &v51[v64];
            v62 = &v21[v64];
            v65 = (__int128 *)(v21 + 16);
            v66 = &v58[8 * v56 + 16];
            v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v68 = *v65;
              *((_OWORD *)v66 - 1) = *(v65 - 1);
              *(_OWORD *)v66 = v68;
              v65 += 2;
              v66 += 32;
              v67 -= 4;
            }
            while (v67);
            if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_112:
              do
              {
                v69 = *(_QWORD *)v62;
                v62 += 8;
                *(_QWORD *)v61 = v69;
                v61 += 8;
              }
              while (v61 != v28);
            }
          }
          v22 = &v58[v57];
          operator delete(v21);
        }
        else
        {
          v53 = (v22 - v26) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v28 = &v26[8 * (v54 >> 1)];
          v51 = &v21[8 * (v54 >> 1)];
          if (v26 == v21)
          {
            v20 = v26;
          }
          else
          {
            memmove(&v21[8 * (v54 >> 1)], v21, v26 - v21);
            v20 = v21;
          }
        }
      }
      else
      {
        v51 = v21;
        v28 = v26;
      }
      v52 = *((_QWORD *)v10 - 1);
      v10 -= 8;
      *((_QWORD *)v51 - 1) = v52;
      v27 = v51 - 8;
      v26 = v28;
      v21 = v27;
      if (v10 == *(char **)(a1 + 8))
        goto LABEL_23;
    }
  }
LABEL_22:
  v27 = v21;
  v28 = v26;
LABEL_23:
  v29 = *(char **)a1;
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v28;
  *(_QWORD *)(a1 + 24) = v22;
  if (v29)
    operator delete(v29);
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;
  int v4;
  std::string __p;
  _DWORD v6[2];

  v1 = *a1;
  v2 = **a1;
  v4 = *((_DWORD *)*a1 + 2);
  if (*((char *)v1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v1[2], v1[3]);
  }
  else
  {
    v3 = *((_OWORD *)v1 + 1);
    __p.__r_.__value_.__r.__words[2] = v1[4];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v3;
  }
  v6[0] = *((_DWORD *)v1 + 10);
  *(_DWORD *)((char *)v6 + 3) = *(_DWORD *)((char *)v1 + 43);
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v2 + 40))(v2, &v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionFailed(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0>(uint64_t result, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*((char *)v3 + 39) < 0)
        operator delete((void *)v3[2]);
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionSucceeded(webrtc::CreateSessionDescriptionObserver *,std::unique_ptr<webrtc::SessionDescriptionInterface>)::$_0 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  v1 = a1[1];
  a1[1] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v1);
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::WebRtcSessionDescriptionFactory::PostCreateSessionDescriptionSucceeded(webrtc::CreateSessionDescriptionObserver *,std::unique_ptr<webrtc::SessionDescriptionInterface>)::$_0>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v4 = *a2;
    *a2 = 0;
    *a3 = v4;
    v5 = a2[1];
    a2[1] = 0;
    a3[1] = v5;
  }
  v6 = a2[1];
  a2[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = *a2;
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc31WebRtcSessionDescriptionFactory4PostENS_12AnyInvocableIFvvOEEEE3__1JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE(_QWORD **a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  int64x2_t v4;

  v1 = (_BYTE *)**a1;
  if (v1)
  {
    if (*v1)
    {
      v2 = (*a1)[1];
      if (v2)
      {
        (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(v2 + 376) + ((*(_QWORD *)(v2 + 400) >> 4) & 0xFFFFFFFFFFFFFF8))
                          + 32 * (*(_QWORD *)(v2 + 400) & 0x7FLL)
                          + 24))();
        v3 = *(_QWORD *)(*(_QWORD *)(v2 + 376) + ((*(_QWORD *)(v2 + 400) >> 4) & 0xFFFFFFFFFFFFFF8));
        if (v3)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32 * (*(_QWORD *)(v2 + 400) & 0x7FLL) + 16))(1, v3 + 32 * (*(_QWORD *)(v2 + 400) & 0x7FLL), v3 + 32 * (*(_QWORD *)(v2 + 400) & 0x7FLL));
          v4 = vaddq_s64(*(int64x2_t *)(v2 + 400), (int64x2_t)xmmword_208F0A010);
          *(int64x2_t *)(v2 + 400) = v4;
          if (v4.i64[0] >= 0x100uLL)
          {
            operator delete(**(void ***)(v2 + 376));
            *(_QWORD *)(v2 + 376) += 8;
            *(_QWORD *)(v2 + 400) -= 128;
          }
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

uint64_t _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc31WebRtcSessionDescriptionFactory4PostENS_12AnyInvocableIFvvOEEEE3__1EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESA_(uint64_t result, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*v3)
      {
        v4 = (unsigned int *)(*v3 + 4);
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          MEMORY[0x20BD0ADEC]();
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t WebRtcVad_set_mode(uint64_t a1, int a2)
{
  if (a1 && *(_DWORD *)(a1 + 732) == 42)
    return WebRtcVad_set_mode_core(a1, a2);
  else
    return 0xFFFFFFFFLL;
}

uint64_t WebRtcVad_Process(_DWORD *a1, int a2, __int16 *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  __int16 *v9;
  unint64_t v10;
  _WORD *v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  __int16 v16;
  _BYTE v17[480];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a3 || a1[183] != 42)
    return 0xFFFFFFFFLL;
  if (a2 > 31999)
  {
    if (a2 == 32000)
    {
      v4 = 32;
      goto LABEL_13;
    }
    if (a2 == 48000)
    {
      v4 = 48;
      goto LABEL_13;
    }
    return 0xFFFFFFFFLL;
  }
  if (a2 == 8000)
  {
    v4 = 8;
    goto LABEL_13;
  }
  if (a2 != 16000)
    return 0xFFFFFFFFLL;
  v4 = 16;
LABEL_13:
  if (10 * v4 != a4 && 20 * v4 != a4 && 30 * v4 != a4)
    return 0xFFFFFFFFLL;
  if (a2 > 31999)
  {
    if (a2 == 32000)
      LODWORD(result) = WebRtcVad_CalcVad32khz(a1, a3, a4);
    else
      LODWORD(result) = WebRtcVad_CalcVad48khz((uint64_t)a1, (unint64_t)a3, a4);
  }
  else
  {
    if (a2 == 8000)
    {
      v9 = a3;
      v10 = a4;
    }
    else
    {
      v6 = a1[1];
      v7 = a1[2];
      if (a4 >= 2)
      {
        v8 = a4 >> 1;
        v11 = v17;
        v12 = a4 >> 1;
        do
        {
          v13 = *a3;
          v14 = ((5243 * v13) >> 14) + (v6 >> 1);
          v6 = v13 - ((5243 * (__int16)(((5243 * v13) >> 14) + (v6 >> 1))) >> 12);
          v15 = a3[1];
          v16 = ((1392 * v15) >> 14) + (v7 >> 1);
          *v11++ = v16 + v14;
          v7 = v15 - ((1392 * v16) >> 12);
          a3 += 2;
          --v12;
        }
        while (v12);
      }
      else
      {
        v8 = 0;
      }
      a1[1] = v6;
      a1[2] = v7;
      v9 = (__int16 *)v17;
      v10 = v8;
    }
    LODWORD(result) = WebRtcVad_CalcVad8khz((uint64_t)a1, (uint64_t)v9, v10);
  }
  if ((int)result >= 1)
    return 1;
  else
    return result;
}

void cricket::WebRtcVideoEngine::~WebRtcVideoEngine(cricket::WebRtcVideoEngine *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C0C5C60;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C0C5C60;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::WebRtcVideoEngine::CreateSendChannel(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int *p_p;
  unint64_t v23;
  char v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _DWORD *v33;
  _DWORD *v34;
  cricket::Codec *v35;
  void *v36;
  cricket::Codec *v37;
  void (***v38)(char *);
  void (**v39)(char *);
  int v40;
  void *v42;
  cricket::Codec *v43;
  void *__p;
  __int128 v45;

  v13 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v14 = operator new();
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
  v16 = *a3;
  *(_QWORD *)v14 = &off_24C0B69D8;
  *(_BYTE *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = off_24C0B6A50;
  v17 = operator new();
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 0;
  *(_QWORD *)(v14 + 24) = v17;
  do
    v18 = __ldxr((unsigned int *)v17);
  while (__stxr(v18 + 1, (unsigned int *)v17));
  *(_QWORD *)(v14 + 32) = v15;
  *(_BYTE *)(v14 + 40) = v16;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 64) = &unk_24C0C5E38;
  *(_DWORD *)(v14 + 56) = 0;
  *(_QWORD *)v14 = &off_24C0C5D10;
  *(_QWORD *)(v14 + 72) = &unk_24C0C5F48;
  *(_QWORD *)(v14 + 80) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  v19 = operator new();
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  *(_QWORD *)(v14 + 88) = v19;
  do
    v20 = __ldxr((unsigned int *)v19);
  while (__stxr(v20 + 1, (unsigned int *)v19));
  *(_OWORD *)(v14 + 224) = 0u;
  *(_WORD *)(v14 + 100) = 0;
  *(_QWORD *)(v14 + 104) = a2;
  *(_QWORD *)(v14 + 112) = 0;
  *(_DWORD *)(v14 + 120) = 0;
  *(_OWORD *)(v14 + 124) = *(_OWORD *)(a3 + 4);
  *(_OWORD *)(v14 + 160) = 0u;
  *(_QWORD *)(v14 + 152) = 0;
  *(_QWORD *)(v14 + 144) = v14 + 152;
  *(_BYTE *)(v14 + 184) = 0;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_BYTE *)(v14 + 176) = 0;
  *(_QWORD *)(v14 + 192) = v14 + 200;
  *(_QWORD *)(v14 + 216) = v14 + 224;
  *(_BYTE *)(v14 + 240) = 0;
  *(_BYTE *)(v14 + 488) = 0;
  *(_OWORD *)(v14 + 512) = 0u;
  *(_OWORD *)(v14 + 528) = 0u;
  *(_OWORD *)(v14 + 496) = 0u;
  *(_QWORD *)(v14 + 544) = v12;
  *(_QWORD *)(v14 + 552) = v13;
  *(_QWORD *)(v14 + 560) = a6;
  *(_QWORD *)(v14 + 632) = 0;
  *(_OWORD *)(v14 + 616) = 0u;
  *(_DWORD *)(v14 + 644) = 0;
  *(_OWORD *)(v14 + 568) = 0u;
  *(_OWORD *)(v14 + 584) = 0u;
  *(_OWORD *)(v14 + 598) = 0u;
  *(_QWORD *)(v14 + 648) = -4294667296;
  *(_OWORD *)(v14 + 664) = 0u;
  *(_OWORD *)(v14 + 680) = 0u;
  *(_OWORD *)(v14 + 696) = 0u;
  *(_WORD *)(v14 + 712) = 1;
  *(_BYTE *)(v14 + 714) = 0;
  *(_DWORD *)(v14 + 716) = -1;
  *(_QWORD *)(v14 + 720) = 0;
  *(_QWORD *)(v14 + 728) = 0;
  *(_WORD *)(v14 + 744) = 0;
  *(_QWORD *)(v14 + 736) = 0;
  *(_QWORD *)(v14 + 656) = &unk_24C0B6A28;
  *(_DWORD *)(v14 + 768) = *(_DWORD *)(a4 + 16);
  *(_OWORD *)(v14 + 752) = *(_OWORD *)a4;
  *(_OWORD *)(v14 + 784) = 0u;
  *(_OWORD *)(v14 + 800) = 0u;
  *(_OWORD *)(v14 + 816) = 0u;
  *(_WORD *)(v14 + 832) = 1;
  *(_BYTE *)(v14 + 834) = 0;
  *(_QWORD *)(v14 + 776) = &unk_24C0B0CD8;
  *(_QWORD *)(v14 + 848) = -1;
  *(_QWORD *)(v14 + 840) = -1;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 184))(a2);
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v21 + 16))(&__p, v21, "WebRTC-Video-DiscardPacketsWithUnknownSsrc", 42);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    p_p = (int *)&__p;
    v23 = HIBYTE(v45);
    goto LABEL_10;
  }
  v23 = v45;
  if ((v45 & 0x8000000000000000) == 0)
  {
    p_p = (int *)__p;
    if (!(_QWORD)v45 || __p)
    {
LABEL_10:
      if (v23 >= 7)
      {
        v25 = *p_p;
        v26 = *(int *)((char *)p_p + 3);
        v27 = v25 == 1650552389 && v26 == 1684368482;
        v24 = v27;
        if ((HIBYTE(v45) & 0x80) == 0)
        {
LABEL_21:
          *(_BYTE *)(v14 + 856) = v24;
          *(_OWORD *)(v14 + 864) = 0u;
          *(_OWORD *)(v14 + 880) = 0u;
          *(_OWORD *)(v14 + 896) = 0u;
          *(_OWORD *)(v14 + 912) = 0u;
          *(_OWORD *)(v14 + 928) = 0u;
          *(_OWORD *)(v14 + 944) = 0u;
          *(_OWORD *)(v14 + 960) = 0u;
          *(_OWORD *)(v14 + 976) = 0u;
          *(_OWORD *)(v14 + 992) = 0u;
          *(_DWORD *)(v14 + 1008) = *(_DWORD *)a5;
          *(_BYTE *)(v14 + 1012) = *(_BYTE *)(a5 + 4);
          *(_QWORD *)(v14 + 1032) = 0x100000000;
          *(_OWORD *)(v14 + 1016) = 0u;
          *(_WORD *)(v14 + 1040) = 256;
          *(_BYTE *)(v14 + 1042) = 0;
          *(_DWORD *)(v14 + 1044) = -1;
          *(_QWORD *)(v14 + 1048) = 0xFFFFFFFFLL;
          *(_BYTE *)(v14 + 1056) = 0;
          *(_QWORD *)(v14 + 1064) = 0;
          *(_QWORD *)(v14 + 1088) = 0;
          *(_QWORD *)(v14 + 1080) = 0;
          *(_QWORD *)(v14 + 1072) = v14 + 1080;
          *(_QWORD *)(v14 + 1112) = 0;
          *(_QWORD *)(v14 + 1104) = 0;
          *(_QWORD *)(v14 + 1096) = v14 + 1104;
          *(_QWORD *)(v14 + 1136) = absl::internal_any_invocable::EmptyManager;
          *(_QWORD *)(v14 + 1144) = 0;
          *(_QWORD *)(v14 + 1168) = absl::internal_any_invocable::EmptyManager;
          *(_QWORD *)(v14 + 1176) = 0;
          *(_DWORD *)(v14 + 96) = 1;
          v28 = *(_QWORD *)(v14 + 552);
          v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 104) + 184))(*(_QWORD *)(v14 + 104));
          v30 = *(_QWORD *)(v14 + 568);
          if (v30)
          {
            v31 = *(_QWORD *)(v14 + 576);
            v32 = *(void **)(v14 + 568);
            if (v31 != v30)
            {
              do
                cricket::Codec::~Codec((cricket::Codec *)(v31 - 248));
              while (v31 != v30);
              v32 = *(void **)(v14 + 568);
            }
            *(_QWORD *)(v14 + 576) = v30;
            operator delete(v32);
          }
          v33 = __p;
          *(_QWORD *)(v14 + 568) = __p;
          v34 = (_DWORD *)v45;
          *(_OWORD *)(v14 + 576) = v45;
          v45 = 0uLL;
          __p = 0;
          v35 = (cricket::Codec *)v42;
          if (v42)
          {
            v36 = v42;
            if (v43 != v42)
            {
              v37 = (cricket::Codec *)((char *)v43 - 216);
              v38 = (void (***)(char *))((char *)v43 - 216);
              do
              {
                v39 = *v38;
                v38 -= 27;
                (*v39)((char *)v37);
                v27 = v37 == v35;
                v37 = (cricket::Codec *)v38;
              }
              while (!v27);
              v36 = v42;
            }
            v43 = v35;
            operator delete(v36);
            v33 = *(_DWORD **)(v14 + 568);
            if (v33 != *(_DWORD **)(v14 + 576))
              goto LABEL_33;
          }
          else if (v33 != v34)
          {
LABEL_33:
            v40 = v33[57];
LABEL_36:
            *(_DWORD *)(v14 + 640) = v40;
            *a7 = v14 + 64;
            return;
          }
          v40 = 0;
          goto LABEL_36;
        }
      }
      else
      {
        v24 = 0;
        if ((HIBYTE(v45) & 0x80) == 0)
          goto LABEL_21;
      }
      operator delete(__p);
      goto LABEL_21;
    }
  }
  __break(1u);
}

void cricket::WebRtcVideoEngine::CreateReceiveChannel(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  void **v19;
  uint64_t v20;
  int *p_p;
  unint64_t v22;
  char v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _DWORD *v37;
  _DWORD *v38;
  cricket::Codec *v39;
  void *v40;
  cricket::Codec *v41;
  void (***v42)(char *);
  void (**v43)(char *);
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  unsigned __int8 v54;
  void *__p;
  void *v56[2];
  uint64_t v57;
  void *v58[2];
  char v59;
  char v60;
  int v61;
  _QWORD v62[2];

  v62[1] = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a1 + 8);
  v12 = operator new();
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
  v14 = *a3;
  *(_QWORD *)v12 = &off_24C0B69D8;
  *(_BYTE *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = off_24C0B6A50;
  v15 = operator new();
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 0;
  *(_QWORD *)(v12 + 24) = v15;
  do
    v16 = __ldxr((unsigned int *)v15);
  while (__stxr(v16 + 1, (unsigned int *)v15));
  *(_QWORD *)(v12 + 32) = v13;
  *(_BYTE *)(v12 + 40) = v14;
  *(_QWORD *)(v12 + 48) = 0;
  *(_DWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = &unk_24C0C6088;
  *(_QWORD *)v12 = &off_24C0C5F78;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 72) = v12 + 80;
  *(_QWORD *)(v12 + 96) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  v17 = operator new();
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  *(_QWORD *)(v12 + 104) = v17;
  do
    v18 = __ldxr((unsigned int *)v17);
  while (__stxr(v18 + 1, (unsigned int *)v17));
  *(_OWORD *)(v12 + 216) = 0u;
  *(_BYTE *)(v12 + 116) = 0;
  *(_QWORD *)(v12 + 120) = a2;
  *(_QWORD *)(v12 + 128) = 0;
  *(_DWORD *)(v12 + 136) = 0;
  *(_OWORD *)(v12 + 140) = *(_OWORD *)(a3 + 4);
  *(_QWORD *)(v12 + 156) = 0;
  *(_BYTE *)(v12 + 168) = 0;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_BYTE *)(v12 + 176) = 0;
  *(_QWORD *)(v12 + 184) = v12 + 192;
  *(_QWORD *)(v12 + 208) = v12 + 216;
  *(_BYTE *)(v12 + 232) = 0;
  *(_BYTE *)(v12 + 480) = 0;
  *(_OWORD *)(v12 + 488) = 0u;
  *(_OWORD *)(v12 + 504) = 0u;
  *(_OWORD *)(v12 + 520) = 0u;
  *(_QWORD *)(v12 + 536) = v11;
  v19 = (void **)(v12 + 544);
  *(_QWORD *)(v12 + 608) = 0;
  *(_OWORD *)(v12 + 592) = 0u;
  *(_DWORD *)(v12 + 620) = 0;
  *(_OWORD *)(v12 + 544) = 0u;
  *(_OWORD *)(v12 + 560) = 0u;
  *(_OWORD *)(v12 + 574) = 0u;
  *(_QWORD *)(v12 + 624) = -4294667296;
  *(_OWORD *)(v12 + 640) = 0u;
  *(_OWORD *)(v12 + 656) = 0u;
  *(_OWORD *)(v12 + 672) = 0u;
  *(_WORD *)(v12 + 688) = 1;
  *(_BYTE *)(v12 + 690) = 0;
  *(_DWORD *)(v12 + 692) = -1;
  *(_QWORD *)(v12 + 704) = 0;
  *(_QWORD *)(v12 + 712) = 0;
  *(_QWORD *)(v12 + 696) = 0;
  *(_BYTE *)(v12 + 720) = 0;
  *(_QWORD *)(v12 + 632) = &unk_24C0B6A28;
  *(_BYTE *)(v12 + 721) = 0;
  *(_DWORD *)(v12 + 744) = *(_DWORD *)(a4 + 16);
  *(_OWORD *)(v12 + 728) = *(_OWORD *)a4;
  *(_OWORD *)(v12 + 760) = 0u;
  *(_OWORD *)(v12 + 776) = 0u;
  *(_OWORD *)(v12 + 792) = 0u;
  *(_WORD *)(v12 + 808) = 1;
  *(_BYTE *)(v12 + 810) = 0;
  *(_QWORD *)(v12 + 752) = &unk_24C0B0CD8;
  *(_QWORD *)(v12 + 816) = -1;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 184))(a2);
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v20 + 16))(&__p, v20, "WebRTC-Video-DiscardPacketsWithUnknownSsrc", 42);
  if (SHIBYTE(v56[1]) < 0)
  {
    v22 = (unint64_t)v56[0];
    if (((unint64_t)v56[0] & 0x8000000000000000) != 0)
      goto LABEL_55;
    p_p = (int *)__p;
    if (v56[0])
    {
      if (!__p)
        goto LABEL_55;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v22 = HIBYTE(v56[1]);
  }
  if (v22 >= 7)
  {
    v24 = *p_p;
    v25 = *(int *)((char *)p_p + 3);
    v26 = v24 == 1650552389 && v25 == 1684368482;
    v23 = v26;
    if ((HIBYTE(v56[1]) & 0x80) == 0)
      goto LABEL_21;
  }
  else
  {
    v23 = 0;
    if ((HIBYTE(v56[1]) & 0x80) == 0)
      goto LABEL_21;
  }
  operator delete(__p);
LABEL_21:
  *(_BYTE *)(v12 + 824) = v23;
  *(_OWORD *)(v12 + 832) = 0u;
  *(_OWORD *)(v12 + 848) = 0u;
  *(_OWORD *)(v12 + 864) = 0u;
  *(_OWORD *)(v12 + 880) = 0u;
  *(_OWORD *)(v12 + 896) = 0u;
  *(_OWORD *)(v12 + 912) = 0u;
  *(_OWORD *)(v12 + 928) = 0u;
  *(_OWORD *)(v12 + 944) = 0u;
  *(_OWORD *)(v12 + 960) = 0u;
  *(_DWORD *)(v12 + 976) = *(_DWORD *)a5;
  *(_BYTE *)(v12 + 980) = *(_BYTE *)(a5 + 4);
  *(_QWORD *)(v12 + 1000) = 0x100000000;
  *(_OWORD *)(v12 + 984) = 0u;
  *(_WORD *)(v12 + 1008) = 256;
  *(_BYTE *)(v12 + 1010) = 0;
  *(_DWORD *)(v12 + 1012) = -1;
  *(_QWORD *)(v12 + 1016) = 0xFFFFFFFFLL;
  *(_BYTE *)(v12 + 1024) = 0;
  *(_QWORD *)(v12 + 1032) = 0;
  *(_QWORD *)(v12 + 1056) = 0;
  *(_QWORD *)(v12 + 1048) = 0;
  *(_QWORD *)(v12 + 1040) = v12 + 1048;
  *(_QWORD *)(v12 + 1080) = 0;
  *(_QWORD *)(v12 + 1072) = 0;
  *(_QWORD *)(v12 + 1064) = v12 + 1072;
  *(_QWORD *)(v12 + 1104) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(v12 + 1112) = 0;
  *(_QWORD *)(v12 + 1136) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(v12 + 1144) = 0;
  v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 120) + 184))(*(_QWORD *)(v12 + 120));
  __p = off_24C0B4170;
  v56[0] = 0;
  v56[1] = 0;
  v57 = 0;
  v59 = 10;
  if (v58 <= (void **)"size_bytes" && (char *)&v58[1] + 2 > "size_bytes")
    goto LABEL_55;
  strcpy((char *)v58, "size_bytes");
  v60 = 0;
  __p = &unk_24C0B4020;
  v61 = 0x100000;
  v62[0] = &__p;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v27 + 16))(&v52, v27, "WebRTC-ReceiveBufferSize", 24);
  if (((char)v54 & 0x80000000) == 0)
  {
    v28 = v54;
    v29 = (char *)&v52;
    goto LABEL_28;
  }
  v28 = v53;
  if (v53 < 0 || (v29 = (char *)v52, v53) && !v52)
LABEL_55:
    __break(1u);
LABEL_28:
  webrtc::ParseFieldTrial(v62, 1, v29, v28);
  if ((char)v54 < 0)
    operator delete(v52);
  v30 = v61;
  if ((v61 - 10000001) <= 0xFF67908E)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v45, v46, v47, v48, v49, v50, v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    v30 = 0x100000;
    __p = off_24C0B4170;
    if ((v59 & 0x80000000) == 0)
    {
LABEL_32:
      v31 = v56[0];
      if (!v56[0])
        goto LABEL_34;
      goto LABEL_33;
    }
  }
  else
  {
    __p = off_24C0B4170;
    if ((v59 & 0x80000000) == 0)
      goto LABEL_32;
  }
  operator delete(v58[0]);
  v31 = v56[0];
  if (v56[0])
  {
LABEL_33:
    v56[1] = v31;
    operator delete(v31);
  }
LABEL_34:
  *(_DWORD *)(v12 + 1152) = v30;
  *(_DWORD *)(v12 + 112) = 1;
  v32 = *(_QWORD *)(v12 + 536);
  v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 120) + 184))(*(_QWORD *)(v12 + 120));
  v34 = *(_QWORD *)(v12 + 544);
  if (v34)
  {
    v35 = *(_QWORD *)(v12 + 552);
    v36 = *(void **)(v12 + 544);
    if (v35 != v34)
    {
      do
        cricket::Codec::~Codec((cricket::Codec *)(v35 - 248));
      while (v35 != v34);
      v36 = *v19;
    }
    *(_QWORD *)(v12 + 552) = v34;
    operator delete(v36);
  }
  v37 = __p;
  *(_QWORD *)(v12 + 544) = __p;
  v38 = v56[0];
  *(_OWORD *)(v12 + 552) = *(_OWORD *)v56;
  v56[0] = 0;
  v56[1] = 0;
  __p = 0;
  v39 = (cricket::Codec *)v52;
  if (v52)
  {
    v40 = v52;
    if ((void *)v53 != v52)
    {
      v41 = (cricket::Codec *)(v53 - 216);
      v42 = (void (***)(char *))(v53 - 216);
      do
      {
        v43 = *v42;
        v42 -= 27;
        (*v43)((char *)v41);
        v26 = v41 == v39;
        v41 = (cricket::Codec *)v42;
      }
      while (!v26);
      v40 = v52;
    }
    v53 = (uint64_t)v39;
    operator delete(v40);
    v37 = *v19;
    if (*v19 != *(void **)(v12 + 552))
      goto LABEL_46;
LABEL_53:
    v44 = 0;
    goto LABEL_54;
  }
  if (v37 == v38)
    goto LABEL_53;
LABEL_46:
  v44 = v37[57];
LABEL_54:
  *(_DWORD *)(v12 + 616) = v44;
  *a6 = v12 + 64;
}

void cricket::WebRtcVideoEngine::send_codecs(cricket::WebRtcVideoEngine *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void (***v5)(void **__return_ptr);
  std::string *v7;
  __int128 v9;
  std::string::size_type v10;
  std::string::value_type *v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  std::string::size_type v15;
  std::string::value_type *v16;
  uint64_t v17;
  void **v18;
  unint64_t v19;
  _BOOL4 v20;
  int v21;
  int v22;
  std::string *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  std::string *v29;
  unint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  cricket *v47;
  cricket *v48;
  char *v49;
  std::string *v50;
  __int128 v51;
  char **p_data;
  const cricket::Codec *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type size;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _BOOL4 v63;
  std::string *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  cricket::Codec *v79;
  cricket::Codec *v80;
  const cricket::Codec *v81;
  char v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::string *v110;
  void *v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  unsigned __int8 v118;
  int v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  int v122;
  unsigned __int8 v123;
  int v124;
  unsigned __int8 v125;
  int v126;
  unsigned __int8 v127;
  std::string *v128;
  uint64_t v129;
  void *v130;
  std::string *v131;
  unint64_t v132;
  __int128 v133;
  _BYTE v134[24];
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  char v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *__p[2];
  std::string v152;
  uint64_t v153;
  std::string::size_type v154;
  __int128 v155;
  __int128 v156;
  std::string::size_type v157[6];
  char v158;
  char v159;
  _BYTE *v160;
  _BYTE v161[40];
  uint64_t v162;

  v162 = *MEMORY[0x24BDAC8D0];
  v5 = (void (***)(void **__return_ptr))*((_QWORD *)this + 2);
  if (!v5)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  v129 = *((_QWORD *)this + 4);
  (**v5)(&v130);
  v7 = v131;
  if (v130 == v131)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_250;
  }
  v134[7] = 3;
  if (&v133 <= (__int128 *)&cricket::kRedCodecName && (char *)&v133 + 3 > (char *)&cricket::kRedCodecName)
LABEL_262:
    __break(1u);
  strcpy((char *)&v133, "red");
  *(_OWORD *)__p = v133;
  v154 = 0;
  v152.__r_.__value_.__r.__words[2] = 0;
  v153 = 0;
  v152.__r_.__value_.__r.__words[0] = *(_QWORD *)v134;
  v152.__r_.__value_.__l.__size_ = (std::string::size_type)&v152.__r_.__value_.__r.__words[2];
  if ((unint64_t)v131 >= v132)
  {
    v131 = (std::string *)std::vector<webrtc::SdpVideoFormat>::__push_back_slow_path<webrtc::SdpVideoFormat>(&v130, (uint64_t)__p);
    if ((v154 & 1) != 0)
    {
      operator delete((void *)v155);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v152.__r_.__value_.__l.__size_, v152.__r_.__value_.__r.__words[2]);
      if (v152.__r_.__value_.__s.__data_[7] < 0)
        goto LABEL_60;
    }
    else
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v152.__r_.__value_.__l.__size_, v152.__r_.__value_.__r.__words[2]);
      if (v152.__r_.__value_.__s.__data_[7] < 0)
        goto LABEL_60;
    }
  }
  else
  {
    if (!v131)
      goto LABEL_262;
    v9 = v133;
    v131->__r_.__value_.__r.__words[2] = *(_QWORD *)v134;
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
    __p[1] = 0;
    __p[0] = 0;
    v152.__r_.__value_.__r.__words[0] = 0;
    v7[1].__r_.__value_.__r.__words[0] = v152.__r_.__value_.__l.__size_;
    v10 = v152.__r_.__value_.__r.__words[2];
    v7[1].__r_.__value_.__l.__size_ = v152.__r_.__value_.__r.__words[2];
    v11 = &v7[1].__r_.__value_.__s.__data_[8];
    v12 = v153;
    v7[1].__r_.__value_.__r.__words[2] = v153;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v152.__r_.__value_.__l.__size_ = (std::string::size_type)&v152.__r_.__value_.__r.__words[2];
      v152.__r_.__value_.__r.__words[2] = 0;
      v153 = 0;
    }
    else
    {
      v7[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    }
    v7[2].__r_.__value_.__r.__words[0] = 0;
    v7[2].__r_.__value_.__r.__words[0] = v154;
    v25 = v155;
    v26 = v156;
    v7[3].__r_.__value_.__r.__words[2] = v157[0];
    *(_OWORD *)&v7[3].__r_.__value_.__l.__data_ = v26;
    *(_OWORD *)&v7[2].__r_.__value_.__r.__words[1] = v25;
    v154 = 0;
    v131 = v7 + 4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v152.__r_.__value_.__l.__size_, v152.__r_.__value_.__r.__words[2]);
    if (v152.__r_.__value_.__s.__data_[7] < 0)
    {
LABEL_60:
      operator delete(__p[0]);
      if ((v134[7] & 0x80000000) != 0)
        goto LABEL_61;
      goto LABEL_16;
    }
  }
  if ((v134[7] & 0x80000000) != 0)
LABEL_61:
    operator delete((void *)v133);
LABEL_16:
  v134[7] = 6;
  if (&v133 <= (__int128 *)"ulpfec" && (char *)&v133 + 6 > "ulpfec")
    goto LABEL_262;
  strcpy((char *)&v133, "ulpfec");
  *(_OWORD *)__p = v133;
  v154 = 0;
  v152.__r_.__value_.__r.__words[2] = 0;
  v153 = 0;
  v152.__r_.__value_.__r.__words[0] = *(_QWORD *)v134;
  v152.__r_.__value_.__l.__size_ = (std::string::size_type)&v152.__r_.__value_.__r.__words[2];
  v13 = v131;
  if ((unint64_t)v131 >= v132)
  {
    v131 = (std::string *)std::vector<webrtc::SdpVideoFormat>::__push_back_slow_path<webrtc::SdpVideoFormat>(&v130, (uint64_t)__p);
    if ((v154 & 1) != 0)
    {
      operator delete((void *)v155);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v152.__r_.__value_.__l.__size_, v152.__r_.__value_.__r.__words[2]);
      if (v152.__r_.__value_.__s.__data_[7] < 0)
        goto LABEL_64;
    }
    else
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v152.__r_.__value_.__l.__size_, v152.__r_.__value_.__r.__words[2]);
      if (v152.__r_.__value_.__s.__data_[7] < 0)
        goto LABEL_64;
    }
  }
  else
  {
    if (!v131)
      goto LABEL_262;
    v14 = v133;
    v131->__r_.__value_.__r.__words[2] = *(_QWORD *)v134;
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    __p[1] = 0;
    __p[0] = 0;
    v152.__r_.__value_.__r.__words[0] = 0;
    v13[1].__r_.__value_.__r.__words[0] = v152.__r_.__value_.__l.__size_;
    v15 = v152.__r_.__value_.__r.__words[2];
    v13[1].__r_.__value_.__l.__size_ = v152.__r_.__value_.__r.__words[2];
    v16 = &v13[1].__r_.__value_.__s.__data_[8];
    v17 = v153;
    v13[1].__r_.__value_.__r.__words[2] = v153;
    if (v17)
    {
      *(_QWORD *)(v15 + 16) = v16;
      v152.__r_.__value_.__l.__size_ = (std::string::size_type)&v152.__r_.__value_.__r.__words[2];
      v152.__r_.__value_.__r.__words[2] = 0;
      v153 = 0;
    }
    else
    {
      v13[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    }
    v13[2].__r_.__value_.__r.__words[0] = 0;
    v13[2].__r_.__value_.__r.__words[0] = v154;
    v27 = v155;
    v28 = v156;
    v13[3].__r_.__value_.__r.__words[2] = v157[0];
    *(_OWORD *)&v13[3].__r_.__value_.__l.__data_ = v28;
    *(_OWORD *)&v13[2].__r_.__value_.__r.__words[1] = v27;
    v154 = 0;
    v131 = v13 + 4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v152.__r_.__value_.__l.__size_, v152.__r_.__value_.__r.__words[2]);
    if (v152.__r_.__value_.__s.__data_[7] < 0)
    {
LABEL_64:
      operator delete(__p[0]);
      if ((v134[7] & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_65;
    }
  }
  if ((v134[7] & 0x80000000) == 0)
    goto LABEL_25;
LABEL_65:
  operator delete((void *)v133);
LABEL_25:
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v129 + 16))(__p, v129, "WebRTC-FlexFEC-03-Advertised", 28);
  if (v152.__r_.__value_.__s.__data_[7] < 0)
  {
    v19 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
      goto LABEL_262;
    v18 = (void **)__p[0];
    if (__p[1])
    {
      if (!__p[0])
        goto LABEL_262;
    }
  }
  else
  {
    v18 = __p;
    v19 = v152.__r_.__value_.__s.__data_[7];
  }
  if (v19 >= 7)
  {
    v21 = *(_DWORD *)v18;
    v22 = *(_DWORD *)((char *)v18 + 3);
    v20 = v21 == 1650552389 && v22 == 1684368482;
    if ((v152.__r_.__value_.__s.__data_[7] & 0x80) == 0)
    {
LABEL_32:
      if (!v20)
        goto LABEL_71;
      goto LABEL_42;
    }
  }
  else
  {
    v20 = 0;
    if ((v152.__r_.__value_.__s.__data_[7] & 0x80) == 0)
      goto LABEL_32;
  }
  operator delete(__p[0]);
  if (!v20)
    goto LABEL_71;
LABEL_42:
  v134[7] = 10;
  if (&v133 <= (__int128 *)"flexfec-03" && (char *)&v133 + 10 > "flexfec-03")
    goto LABEL_262;
  strcpy((char *)&v133, "flexfec-03");
  *(_OWORD *)__p = v133;
  v154 = 0;
  v152.__r_.__value_.__r.__words[2] = 0;
  v153 = 0;
  v152.__r_.__value_.__r.__words[0] = *(_QWORD *)v134;
  v152.__r_.__value_.__l.__size_ = (std::string::size_type)&v152.__r_.__value_.__r.__words[2];
  v134[7] = 13;
  if (&v133 <= (__int128 *)"repair-window" && (char *)&v133 + 13 > "repair-window")
    goto LABEL_262;
  strcpy((char *)&v133, "repair-window");
  BYTE7(v135) = 8;
  if (&v134[8] <= "10000000" && &v134[16] > "10000000")
    goto LABEL_262;
  strcpy(&v134[8], "10000000");
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_unique<std::pair<std::string const,std::string> const*>((uint64_t)&v152.__r_.__value_.__l.__size_, &v133, (__int128 *)((char *)&v135 + 8));
  if (SBYTE7(v135) < 0)
  {
    operator delete(*(void **)&v134[8]);
    if ((v134[7] & 0x80000000) == 0)
    {
LABEL_50:
      v24 = v131;
      if ((unint64_t)v131 < v132)
        goto LABEL_51;
LABEL_68:
      v131 = std::vector<webrtc::SdpVideoFormat>::__push_back_slow_path<webrtc::SdpVideoFormat const&>((std::string **)&v130, (const webrtc::SdpVideoFormat *)__p);
      if ((v154 & 1) == 0)
        goto LABEL_70;
      goto LABEL_69;
    }
  }
  else if ((v134[7] & 0x80000000) == 0)
  {
    goto LABEL_50;
  }
  operator delete((void *)v133);
  v24 = v131;
  if ((unint64_t)v131 >= v132)
    goto LABEL_68;
LABEL_51:
  if (!v24)
    goto LABEL_262;
  v131 = webrtc::SdpVideoFormat::SdpVideoFormat(v24, (const webrtc::SdpVideoFormat *)__p) + 4;
  if ((v154 & 1) != 0)
LABEL_69:
    operator delete((void *)v155);
LABEL_70:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v152.__r_.__value_.__l.__size_, v152.__r_.__value_.__r.__words[2]);
  if ((v152.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
LABEL_71:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v29 = (std::string *)v130;
    v128 = v131;
    if (v130 == v131)
      goto LABEL_251;
    goto LABEL_72;
  }
  operator delete(__p[0]);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v29 = (std::string *)v130;
  v128 = v131;
  if (v130 == v131)
    goto LABEL_251;
LABEL_72:
  v30 = 0;
  if (cricket::kUlpfecCodecName[0] - 65 >= 0x1A)
    v31 = cricket::kUlpfecCodecName[0];
  else
    v31 = cricket::kUlpfecCodecName[0] + 32;
  if (cricket::kUlpfecCodecName[1] - 65 >= 0x1A)
    v32 = cricket::kUlpfecCodecName[1];
  else
    v32 = cricket::kUlpfecCodecName[1] + 32;
  v125 = v32;
  v127 = v31;
  if (cricket::kUlpfecCodecName[2] - 65 >= 0x1A)
    v33 = cricket::kUlpfecCodecName[2];
  else
    v33 = cricket::kUlpfecCodecName[2] + 32;
  if (cricket::kUlpfecCodecName[3] - 65 >= 0x1A)
    v34 = cricket::kUlpfecCodecName[3];
  else
    v34 = cricket::kUlpfecCodecName[3] + 32;
  v121 = v34;
  if (cricket::kUlpfecCodecName[4] - 65 >= 0x1A)
    v35 = cricket::kUlpfecCodecName[4];
  else
    v35 = cricket::kUlpfecCodecName[4] + 32;
  v120 = v35;
  v123 = v33;
  if (cricket::kUlpfecCodecName[5] - 65 >= 0x1A)
    v36 = cricket::kUlpfecCodecName[5];
  else
    v36 = cricket::kUlpfecCodecName[5] + 32;
  v118 = v36;
  if (cricket::kFlexfecCodecName[0] - 65 >= 0x1A)
    v37 = cricket::kFlexfecCodecName[0];
  else
    v37 = cricket::kFlexfecCodecName[0] + 32;
  if (cricket::kFlexfecCodecName[1] - 65 >= 0x1A)
    v38 = cricket::kFlexfecCodecName[1];
  else
    v38 = cricket::kFlexfecCodecName[1] + 32;
  if (cricket::kFlexfecCodecName[2] - 65 >= 0x1A)
    v39 = cricket::kFlexfecCodecName[2];
  else
    v39 = cricket::kFlexfecCodecName[2] + 32;
  if (cricket::kFlexfecCodecName[3] - 65 >= 0x1A)
    v40 = cricket::kFlexfecCodecName[3];
  else
    v40 = cricket::kFlexfecCodecName[3] + 32;
  if (cricket::kFlexfecCodecName[4] - 65 >= 0x1A)
    v41 = cricket::kFlexfecCodecName[4];
  else
    v41 = cricket::kFlexfecCodecName[4] + 32;
  if (cricket::kFlexfecCodecName[5] - 65 >= 0x1A)
    v42 = cricket::kFlexfecCodecName[5];
  else
    v42 = cricket::kFlexfecCodecName[5] + 32;
  if (cricket::kFlexfecCodecName[6] - 65 >= 0x1A)
    v43 = cricket::kFlexfecCodecName[6];
  else
    v43 = cricket::kFlexfecCodecName[6] + 32;
  v44 = cricket::kFlexfecCodecName[7] + 32;
  if (cricket::kFlexfecCodecName[7] - 65 >= 0x1A)
    v44 = cricket::kFlexfecCodecName[7];
  v45 = cricket::kFlexfecCodecName[8] + 32;
  if (cricket::kFlexfecCodecName[8] - 65 >= 0x1A)
    v45 = cricket::kFlexfecCodecName[8];
  v126 = v37;
  v124 = v38;
  v122 = v39;
  v119 = v40;
  v117 = v41;
  v116 = v42;
  v115 = v43;
  v114 = v44;
  v46 = cricket::kFlexfecCodecName[9] + 32;
  if (cricket::kFlexfecCodecName[9] - 65 >= 0x1A)
    v46 = cricket::kFlexfecCodecName[9];
  v112 = v46;
  v113 = v45;
  LODWORD(v47) = 35;
  LODWORD(v48) = 96;
  while (1)
  {
    v50 = &v29[v30 / 0x18];
    __p[0] = &off_24C0B1418;
    __p[1] = (void *)1;
    if (SHIBYTE(v29[v30 / 0x18].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v152, v50->__r_.__value_.__l.__data_, v50->__r_.__value_.__l.__size_);
    }
    else
    {
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v152.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v51;
    }
    v153 = 90000;
    v154 = 0;
    LOBYTE(v155) = 0;
    BYTE8(v156) = 0;
    v157[0] = 0;
    v158 = 0;
    v159 = 0;
    memset(v161, 0, sizeof(v161));
    v160 = v161;
    p_data = &v29[v30 / 0x18 + 1].__r_.__value_.__l.__data_;
    if (p_data != &v160)
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v160, *p_data, (char *)&v29[1].__r_.__value_.__r.__words[v30 / 8 + 1]);
    absl::InlinedVector<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::operator=(v157, (unint64_t *)&v29[v30 / 0x18 + 2]);
    v54 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
    v55 = &v152;
    size = HIBYTE(v152.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v152.__r_.__value_.__l.__size_;
      if ((v152.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_262;
      v55 = (std::string *)v152.__r_.__value_.__r.__words[0];
      if (v152.__r_.__value_.__l.__size_)
      {
        if (!v152.__r_.__value_.__r.__words[0])
          goto LABEL_262;
      }
    }
    if (size != 6)
      goto LABEL_158;
    v57 = v55->__r_.__value_.__s.__data_[0];
    if (v57 != cricket::kUlpfecCodecName[0])
    {
      if ((v57 - 65) < 0x1A)
        LOBYTE(v57) = v57 + 32;
      if (v57 != v127)
        goto LABEL_158;
    }
    v58 = v55->__r_.__value_.__s.__data_[1];
    if (v58 != cricket::kUlpfecCodecName[1])
    {
      if ((v58 - 65) < 0x1A)
        LOBYTE(v58) = v58 + 32;
      if (v58 != v125)
        goto LABEL_158;
    }
    v59 = v55->__r_.__value_.__s.__data_[2];
    if (v59 != cricket::kUlpfecCodecName[2])
    {
      if ((v59 - 65) < 0x1A)
        LOBYTE(v59) = v59 + 32;
      if (v59 != v123)
        goto LABEL_158;
    }
    v60 = v55->__r_.__value_.__s.__data_[3];
    if (v60 != cricket::kUlpfecCodecName[3])
    {
      if ((v60 - 65) < 0x1A)
        LOBYTE(v60) = v60 + 32;
      if (v60 != v121)
        goto LABEL_158;
    }
    v61 = v55->__r_.__value_.__s.__data_[4];
    if (v61 != cricket::kUlpfecCodecName[4])
    {
      if ((v61 - 65) < 0x1A)
        LOBYTE(v61) = v61 + 32;
      if (v61 != v120)
        goto LABEL_158;
    }
    v62 = v55->__r_.__value_.__s.__data_[5];
    if (v62 == cricket::kUlpfecCodecName[5])
      goto LABEL_156;
    if ((v62 - 65) < 0x1A)
      LOBYTE(v62) = v62 + 32;
    if (v62 == v118)
    {
LABEL_156:
      v63 = 1;
      if ((int)v47 >= 64)
        goto LABEL_243;
    }
    else
    {
LABEL_158:
      v64 = &v152;
      if ((*((_BYTE *)&v152.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v54 = v152.__r_.__value_.__l.__size_;
        if ((v152.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_262;
        v64 = (std::string *)v152.__r_.__value_.__r.__words[0];
        if (v152.__r_.__value_.__l.__size_)
        {
          if (!v152.__r_.__value_.__r.__words[0])
            goto LABEL_262;
        }
      }
      if (v54 == 10)
      {
        v65 = v64->__r_.__value_.__s.__data_[0];
        if (v65 == cricket::kFlexfecCodecName[0])
          goto LABEL_167;
        if ((v65 - 65) < 0x1A)
          LOBYTE(v65) = v65 + 32;
        v66 = v65 - v126;
        if (!v66)
        {
LABEL_167:
          v67 = v64->__r_.__value_.__s.__data_[1];
          if (v67 == cricket::kFlexfecCodecName[1])
            goto LABEL_171;
          if ((v67 - 65) < 0x1A)
            LOBYTE(v67) = v67 + 32;
          v66 = v67 - v124;
          if (!v66)
          {
LABEL_171:
            v68 = v64->__r_.__value_.__s.__data_[2];
            if (v68 == cricket::kFlexfecCodecName[2])
              goto LABEL_175;
            if ((v68 - 65) < 0x1A)
              LOBYTE(v68) = v68 + 32;
            v66 = v68 - v122;
            if (!v66)
            {
LABEL_175:
              v69 = v64->__r_.__value_.__s.__data_[3];
              if (v69 == cricket::kFlexfecCodecName[3])
                goto LABEL_179;
              if ((v69 - 65) < 0x1A)
                LOBYTE(v69) = v69 + 32;
              v66 = v69 - v119;
              if (!v66)
              {
LABEL_179:
                v70 = v64->__r_.__value_.__s.__data_[4];
                if (v70 == cricket::kFlexfecCodecName[4])
                  goto LABEL_183;
                if ((v70 - 65) < 0x1A)
                  LOBYTE(v70) = v70 + 32;
                v66 = v70 - v117;
                if (!v66)
                {
LABEL_183:
                  v71 = v64->__r_.__value_.__s.__data_[5];
                  if (v71 == cricket::kFlexfecCodecName[5])
                    goto LABEL_187;
                  if ((v71 - 65) < 0x1A)
                    LOBYTE(v71) = v71 + 32;
                  v66 = v71 - v116;
                  if (!v66)
                  {
LABEL_187:
                    v72 = v64->__r_.__value_.__s.__data_[6];
                    if (v72 == cricket::kFlexfecCodecName[6])
                      goto LABEL_191;
                    if ((v72 - 65) < 0x1A)
                      LOBYTE(v72) = v72 + 32;
                    v66 = v72 - v115;
                    if (!v66)
                    {
LABEL_191:
                      v73 = v64->__r_.__value_.__s.__data_[7];
                      if (v73 == cricket::kFlexfecCodecName[7])
                        goto LABEL_195;
                      if ((v73 - 65) < 0x1A)
                        LOBYTE(v73) = v73 + 32;
                      v66 = v73 - v114;
                      if (!v66)
                      {
LABEL_195:
                        v74 = v64->__r_.__value_.__s.__data_[8];
                        if (v74 == cricket::kFlexfecCodecName[8])
                          goto LABEL_199;
                        if ((v74 - 65) < 0x1A)
                          LOBYTE(v74) = v74 + 32;
                        v66 = v74 - v113;
                        if (!v66)
                        {
LABEL_199:
                          v75 = v64->__r_.__value_.__s.__data_[9];
                          if (v75 == cricket::kFlexfecCodecName[9])
                            goto LABEL_203;
                          if ((v75 - 65) < 0x1A)
                            LOBYTE(v75) = v75 + 32;
                          v66 = v75 - v112;
                          if (v75 == v112)
LABEL_203:
                            v66 = 0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v63 = v66 == 0;
        if ((int)v47 >= 64)
        {
LABEL_243:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
            goto LABEL_249;
          goto LABEL_248;
        }
      }
      else
      {
        v63 = 0;
        if ((int)v47 >= 64)
          goto LABEL_243;
      }
    }
    v77 = (int)v48 > 126 ? 1 : v76;
    v78 = v77 ? (int)v47 : (int)v48;
    HIDWORD(__p[1]) = v78;
    v79 = *(cricket::Codec **)(a3 + 8);
    if ((unint64_t)v79 >= *(_QWORD *)(a3 + 16))
    {
      v80 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)a3, (const cricket::Codec *)__p);
    }
    else
    {
      if (!v79)
        goto LABEL_262;
      v80 = (cricket::Codec *)((char *)cricket::Codec::Codec(v79, (const cricket::Codec *)__p) + 216);
    }
    v47 = (cricket *)((_DWORD)v47 + v77);
    v48 = (cricket *)(v48 + (v77 ^ 1));
    *(_QWORD *)(a3 + 8) = v80;
    if (((v63 | a2 ^ 1) & 1) == 0)
      break;
LABEL_121:
    cricket::Codec::~Codec((cricket::Codec *)__p);
    v30 += 96;
    if (&v29[v30 / 0x18] == v128)
      goto LABEL_250;
  }
  if ((int)v47 < 64)
  {
    if ((v82 & 1) != 0 || (int)v48 >= 127)
    {
      cricket::CreateVideoRtxCodec(v47, SHIDWORD(__p[1]), (uint64_t)&v133);
      v92 = *(_QWORD *)(a3 + 8);
      if (v92 >= *(_QWORD *)(a3 + 16))
      {
        v49 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec>((void **)a3, (uint64_t)&v133);
      }
      else
      {
        if (!v92)
          goto LABEL_262;
        *(_QWORD *)v92 = &off_24C0B1418;
        *(_QWORD *)(v92 + 8) = *((_QWORD *)&v133 + 1);
        v93 = *(_OWORD *)v134;
        *(_QWORD *)(v92 + 32) = *(_QWORD *)&v134[16];
        *(_OWORD *)(v92 + 16) = v93;
        memset(v134, 0, sizeof(v134));
        *(_OWORD *)(v92 + 40) = v135;
        *(_BYTE *)(v92 + 56) = 0;
        *(_BYTE *)(v92 + 80) = 0;
        if (v138)
        {
          v94 = v136;
          *(_QWORD *)(v92 + 72) = v137;
          *(_OWORD *)(v92 + 56) = v94;
          v137 = 0;
          v136 = 0uLL;
          *(_BYTE *)(v92 + 80) = 1;
        }
        *(_BYTE *)(v92 + 136) = 0;
        *(_QWORD *)(v92 + 88) = 0;
        *(_QWORD *)(v92 + 88) = v139;
        v95 = v140;
        v96 = v141;
        *(_QWORD *)(v92 + 128) = v142;
        *(_OWORD *)(v92 + 112) = v96;
        *(_OWORD *)(v92 + 96) = v95;
        v139 = 0;
        *(_BYTE *)(v92 + 160) = 0;
        if (v145)
        {
          v97 = v143;
          *(_QWORD *)(v92 + 152) = v144;
          *(_OWORD *)(v92 + 136) = v97;
          v144 = 0;
          v143 = 0uLL;
          *(_BYTE *)(v92 + 160) = 1;
        }
        *(_QWORD *)(v92 + 168) = v146;
        v98 = v147;
        *(_QWORD *)(v92 + 176) = v147;
        v99 = v92 + 176;
        v100 = v148;
        *(_QWORD *)(v92 + 184) = v148;
        if (v100)
        {
          *(_QWORD *)(v98 + 16) = v99;
          v146 = &v147;
          v147 = 0;
          v148 = 0;
        }
        else
        {
          *(_QWORD *)(v92 + 168) = v99;
        }
        *(_QWORD *)(v92 + 192) = 0;
        *(_QWORD *)(v92 + 200) = 0;
        v102 = (_QWORD *)(v92 + 192);
        v102[2] = 0;
        std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>(v102, v149, v150, 0xAAAAAAAAAAAAAAABLL * ((v150 - v149) >> 4));
        v49 = (char *)(v102 + 3);
      }
      LODWORD(v47) = (_DWORD)v47 + 1;
    }
    else
    {
      cricket::CreateVideoRtxCodec(v48, SHIDWORD(__p[1]), (uint64_t)&v133);
      v83 = *(_QWORD *)(a3 + 8);
      if (v83 >= *(_QWORD *)(a3 + 16))
      {
        v49 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec>((void **)a3, (uint64_t)&v133);
      }
      else
      {
        if (!v83)
          goto LABEL_262;
        *(_QWORD *)v83 = &off_24C0B1418;
        *(_QWORD *)(v83 + 8) = *((_QWORD *)&v133 + 1);
        v84 = *(_OWORD *)v134;
        *(_QWORD *)(v83 + 32) = *(_QWORD *)&v134[16];
        *(_OWORD *)(v83 + 16) = v84;
        memset(v134, 0, sizeof(v134));
        *(_OWORD *)(v83 + 40) = v135;
        *(_BYTE *)(v83 + 56) = 0;
        *(_BYTE *)(v83 + 80) = 0;
        if (v138)
        {
          v85 = v136;
          *(_QWORD *)(v83 + 72) = v137;
          *(_OWORD *)(v83 + 56) = v85;
          v137 = 0;
          v136 = 0uLL;
          *(_BYTE *)(v83 + 80) = 1;
        }
        *(_BYTE *)(v83 + 136) = 0;
        *(_QWORD *)(v83 + 88) = 0;
        *(_QWORD *)(v83 + 88) = v139;
        v86 = v140;
        v87 = v141;
        *(_QWORD *)(v83 + 128) = v142;
        *(_OWORD *)(v83 + 112) = v87;
        *(_OWORD *)(v83 + 96) = v86;
        v139 = 0;
        *(_BYTE *)(v83 + 160) = 0;
        if (v145)
        {
          v88 = v143;
          *(_QWORD *)(v83 + 152) = v144;
          *(_OWORD *)(v83 + 136) = v88;
          v144 = 0;
          v143 = 0uLL;
          *(_BYTE *)(v83 + 160) = 1;
        }
        *(_QWORD *)(v83 + 168) = v146;
        v89 = v147;
        *(_QWORD *)(v83 + 176) = v147;
        v90 = v83 + 176;
        v91 = v148;
        *(_QWORD *)(v83 + 184) = v148;
        if (v91)
        {
          *(_QWORD *)(v89 + 16) = v90;
          v146 = &v147;
          v147 = 0;
          v148 = 0;
        }
        else
        {
          *(_QWORD *)(v83 + 168) = v90;
        }
        *(_QWORD *)(v83 + 192) = 0;
        *(_QWORD *)(v83 + 200) = 0;
        v101 = (_QWORD *)(v83 + 192);
        v101[2] = 0;
        std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>(v101, v149, v150, 0xAAAAAAAAAAAAAAABLL * ((v150 - v149) >> 4));
        v49 = (char *)(v101 + 3);
      }
      LODWORD(v48) = (_DWORD)v48 + 1;
    }
    *(_QWORD *)(a3 + 8) = v49;
    cricket::Codec::~Codec((cricket::Codec *)&v133);
    goto LABEL_121;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    goto LABEL_249;
LABEL_248:
  rtc::webrtc_logging_impl::Log("\r\t", v103, v104, v105, v106, v107, v108, v109, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
LABEL_249:
  cricket::Codec::~Codec((cricket::Codec *)__p);
LABEL_250:
  v29 = (std::string *)v130;
LABEL_251:
  if (v29)
  {
    v110 = v131;
    v111 = v29;
    if (v131 != v29)
    {
      do
      {
        while (1)
        {
          if ((v110[-2].__r_.__value_.__s.__data_[0] & 1) != 0)
            operator delete((void *)v110[-2].__r_.__value_.__l.__size_);
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v110[-3], v110[-3].__r_.__value_.__l.__size_);
          if (SHIBYTE(v110[-4].__r_.__value_.__r.__words[2]) < 0)
            break;
          v110 -= 4;
          if (v110 == v29)
            goto LABEL_259;
        }
        operator delete(v110[-4].__r_.__value_.__l.__data_);
        v110 -= 4;
      }
      while (v110 != v29);
LABEL_259:
      v111 = v130;
    }
    v131 = v29;
    operator delete(v111);
  }
}

void cricket::WebRtcVideoEngine::recv_codecs(cricket::WebRtcVideoEngine *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
}

void cricket::`anonymous namespace'::GetPayloadTypesAndDefaultCodecs<webrtc::VideoDecoderFactory>(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  std::string *v6;
  __int128 v8;
  std::string::size_type v9;
  std::string::value_type *v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  std::string::size_type v14;
  std::string::value_type *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  unint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  cricket *v36;
  cricket *v37;
  char *v38;
  std::string *v39;
  __int128 v40;
  char **p_data;
  const cricket::Codec *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type size;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  _BOOL4 v52;
  std::string *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  cricket::Codec *v68;
  cricket::Codec *v69;
  const cricket::Codec *v70;
  char v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  std::string *v103;
  void *v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  unsigned __int8 v111;
  int v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  int v115;
  unsigned __int8 v116;
  int v117;
  unsigned __int8 v118;
  int v119;
  unsigned __int8 v120;
  std::string *v121;
  void *v123;
  std::string *v124;
  unint64_t v125;
  __int128 v126;
  _BYTE v127[24];
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  char v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144[2];
  std::string v145;
  uint64_t v146;
  std::string::size_type v147;
  __int128 v148;
  __int128 v149;
  std::string::size_type v150[6];
  char v151;
  char v152;
  _BYTE *v153;
  _BYTE v154[40];
  uint64_t v155;

  v155 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    return;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&v123, a2);
  cricket::AddH264ConstrainedBaselineProfileToSupportedFormats((uint64_t)&v123);
  v6 = v124;
  if (v123 == v124)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_234;
  }
  v127[7] = 3;
  if (&v126 <= (__int128 *)&cricket::kRedCodecName && (char *)&v126 + 3 > (char *)&cricket::kRedCodecName)
LABEL_245:
    __break(1u);
  strcpy((char *)&v126, "red");
  *(_OWORD *)v144 = v126;
  v147 = 0;
  v145.__r_.__value_.__r.__words[2] = 0;
  v146 = 0;
  v145.__r_.__value_.__r.__words[0] = *(_QWORD *)v127;
  v145.__r_.__value_.__l.__size_ = (std::string::size_type)&v145.__r_.__value_.__r.__words[2];
  if ((unint64_t)v124 >= v125)
  {
    v124 = (std::string *)std::vector<webrtc::SdpVideoFormat>::__push_back_slow_path<webrtc::SdpVideoFormat>(&v123, (uint64_t)v144);
    if ((v147 & 1) != 0)
    {
      operator delete((void *)v148);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v145.__r_.__value_.__l.__size_, v145.__r_.__value_.__r.__words[2]);
      if (v145.__r_.__value_.__s.__data_[7] < 0)
        goto LABEL_225;
    }
    else
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v145.__r_.__value_.__l.__size_, v145.__r_.__value_.__r.__words[2]);
      if (v145.__r_.__value_.__s.__data_[7] < 0)
        goto LABEL_225;
    }
  }
  else
  {
    if (!v124)
      goto LABEL_245;
    v8 = v126;
    v124->__r_.__value_.__r.__words[2] = *(_QWORD *)v127;
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
    v144[1] = 0;
    v144[0] = 0;
    v145.__r_.__value_.__r.__words[0] = 0;
    v6[1].__r_.__value_.__r.__words[0] = v145.__r_.__value_.__l.__size_;
    v9 = v145.__r_.__value_.__r.__words[2];
    v6[1].__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[2];
    v10 = &v6[1].__r_.__value_.__s.__data_[8];
    v11 = v146;
    v6[1].__r_.__value_.__r.__words[2] = v146;
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = v10;
      v145.__r_.__value_.__l.__size_ = (std::string::size_type)&v145.__r_.__value_.__r.__words[2];
      v145.__r_.__value_.__r.__words[2] = 0;
      v146 = 0;
    }
    else
    {
      v6[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    }
    v6[2].__r_.__value_.__r.__words[0] = 0;
    v6[2].__r_.__value_.__r.__words[0] = v147;
    v99 = v148;
    v100 = v149;
    v6[3].__r_.__value_.__r.__words[2] = v150[0];
    *(_OWORD *)&v6[3].__r_.__value_.__l.__data_ = v100;
    *(_OWORD *)&v6[2].__r_.__value_.__r.__words[1] = v99;
    v147 = 0;
    v124 = v6 + 4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v145.__r_.__value_.__l.__size_, v145.__r_.__value_.__r.__words[2]);
    if (v145.__r_.__value_.__s.__data_[7] < 0)
    {
LABEL_225:
      operator delete(v144[0]);
      if ((v127[7] & 0x80000000) != 0)
        goto LABEL_226;
      goto LABEL_16;
    }
  }
  if ((v127[7] & 0x80000000) != 0)
LABEL_226:
    operator delete((void *)v126);
LABEL_16:
  v127[7] = 6;
  if (&v126 <= (__int128 *)"ulpfec" && (char *)&v126 + 6 > "ulpfec")
    goto LABEL_245;
  strcpy((char *)&v126, "ulpfec");
  *(_OWORD *)v144 = v126;
  v147 = 0;
  v145.__r_.__value_.__r.__words[2] = 0;
  v146 = 0;
  v145.__r_.__value_.__r.__words[0] = *(_QWORD *)v127;
  v145.__r_.__value_.__l.__size_ = (std::string::size_type)&v145.__r_.__value_.__r.__words[2];
  v12 = v124;
  if ((unint64_t)v124 >= v125)
  {
    v124 = (std::string *)std::vector<webrtc::SdpVideoFormat>::__push_back_slow_path<webrtc::SdpVideoFormat>(&v123, (uint64_t)v144);
    if ((v147 & 1) != 0)
    {
      operator delete((void *)v148);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v145.__r_.__value_.__l.__size_, v145.__r_.__value_.__r.__words[2]);
      if (v145.__r_.__value_.__s.__data_[7] < 0)
        goto LABEL_229;
    }
    else
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v145.__r_.__value_.__l.__size_, v145.__r_.__value_.__r.__words[2]);
      if (v145.__r_.__value_.__s.__data_[7] < 0)
        goto LABEL_229;
    }
  }
  else
  {
    if (!v124)
      goto LABEL_245;
    v13 = v126;
    v124->__r_.__value_.__r.__words[2] = *(_QWORD *)v127;
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    v144[1] = 0;
    v144[0] = 0;
    v145.__r_.__value_.__r.__words[0] = 0;
    v12[1].__r_.__value_.__r.__words[0] = v145.__r_.__value_.__l.__size_;
    v14 = v145.__r_.__value_.__r.__words[2];
    v12[1].__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[2];
    v15 = &v12[1].__r_.__value_.__s.__data_[8];
    v16 = v146;
    v12[1].__r_.__value_.__r.__words[2] = v146;
    if (v16)
    {
      *(_QWORD *)(v14 + 16) = v15;
      v145.__r_.__value_.__l.__size_ = (std::string::size_type)&v145.__r_.__value_.__r.__words[2];
      v145.__r_.__value_.__r.__words[2] = 0;
      v146 = 0;
    }
    else
    {
      v12[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    }
    v12[2].__r_.__value_.__r.__words[0] = 0;
    v12[2].__r_.__value_.__r.__words[0] = v147;
    v101 = v148;
    v102 = v149;
    v12[3].__r_.__value_.__r.__words[2] = v150[0];
    *(_OWORD *)&v12[3].__r_.__value_.__l.__data_ = v102;
    *(_OWORD *)&v12[2].__r_.__value_.__r.__words[1] = v101;
    v147 = 0;
    v124 = v12 + 4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v145.__r_.__value_.__l.__size_, v145.__r_.__value_.__r.__words[2]);
    if (v145.__r_.__value_.__s.__data_[7] < 0)
    {
LABEL_229:
      operator delete(v144[0]);
      if ((v127[7] & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_230;
    }
  }
  if ((v127[7] & 0x80000000) == 0)
    goto LABEL_25;
LABEL_230:
  operator delete((void *)v126);
LABEL_25:
  v127[7] = 10;
  if (&v126 <= (__int128 *)"flexfec-03" && (char *)&v126 + 10 > "flexfec-03")
    goto LABEL_245;
  strcpy((char *)&v126, "flexfec-03");
  *(_OWORD *)v144 = v126;
  v147 = 0;
  v145.__r_.__value_.__r.__words[2] = 0;
  v146 = 0;
  v145.__r_.__value_.__r.__words[0] = *(_QWORD *)v127;
  v145.__r_.__value_.__l.__size_ = (std::string::size_type)&v145.__r_.__value_.__r.__words[2];
  v127[7] = 13;
  if (&v126 <= (__int128 *)"repair-window" && (char *)&v126 + 13 > "repair-window")
    goto LABEL_245;
  strcpy((char *)&v126, "repair-window");
  BYTE7(v128) = 8;
  if (&v127[8] <= "10000000" && &v127[16] > "10000000")
    goto LABEL_245;
  strcpy(&v127[8], "10000000");
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_unique<std::pair<std::string const,std::string> const*>((uint64_t)&v145.__r_.__value_.__l.__size_, &v126, (__int128 *)((char *)&v128 + 8));
  if (SBYTE7(v128) < 0)
  {
    operator delete(*(void **)&v127[8]);
    if ((v127[7] & 0x80000000) == 0)
    {
LABEL_33:
      v17 = v124;
      if ((unint64_t)v124 < v125)
        goto LABEL_34;
LABEL_39:
      v124 = std::vector<webrtc::SdpVideoFormat>::__push_back_slow_path<webrtc::SdpVideoFormat const&>((std::string **)&v123, (const webrtc::SdpVideoFormat *)v144);
      if ((v147 & 1) == 0)
        goto LABEL_41;
      goto LABEL_40;
    }
  }
  else if ((v127[7] & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete((void *)v126);
  v17 = v124;
  if ((unint64_t)v124 >= v125)
    goto LABEL_39;
LABEL_34:
  if (!v17)
    goto LABEL_245;
  v124 = webrtc::SdpVideoFormat::SdpVideoFormat(v17, (const webrtc::SdpVideoFormat *)v144) + 4;
  if ((v147 & 1) != 0)
LABEL_40:
    operator delete((void *)v148);
LABEL_41:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v145.__r_.__value_.__l.__size_, v145.__r_.__value_.__r.__words[2]);
  if (v145.__r_.__value_.__s.__data_[7] < 0)
  {
    operator delete(v144[0]);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v18 = (std::string *)v123;
    v121 = v124;
    if (v123 != v124)
      goto LABEL_43;
LABEL_215:
    if (v18)
      goto LABEL_235;
    return;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v18 = (std::string *)v123;
  v121 = v124;
  if (v123 == v124)
    goto LABEL_215;
LABEL_43:
  v19 = 0;
  if (cricket::kUlpfecCodecName[0] - 65 >= 0x1A)
    v20 = cricket::kUlpfecCodecName[0];
  else
    v20 = cricket::kUlpfecCodecName[0] + 32;
  if (cricket::kUlpfecCodecName[1] - 65 >= 0x1A)
    v21 = cricket::kUlpfecCodecName[1];
  else
    v21 = cricket::kUlpfecCodecName[1] + 32;
  v118 = v21;
  v120 = v20;
  if (cricket::kUlpfecCodecName[2] - 65 >= 0x1A)
    v22 = cricket::kUlpfecCodecName[2];
  else
    v22 = cricket::kUlpfecCodecName[2] + 32;
  if (cricket::kUlpfecCodecName[3] - 65 >= 0x1A)
    v23 = cricket::kUlpfecCodecName[3];
  else
    v23 = cricket::kUlpfecCodecName[3] + 32;
  v114 = v23;
  if (cricket::kUlpfecCodecName[4] - 65 >= 0x1A)
    v24 = cricket::kUlpfecCodecName[4];
  else
    v24 = cricket::kUlpfecCodecName[4] + 32;
  v113 = v24;
  v116 = v22;
  if (cricket::kUlpfecCodecName[5] - 65 >= 0x1A)
    v25 = cricket::kUlpfecCodecName[5];
  else
    v25 = cricket::kUlpfecCodecName[5] + 32;
  v111 = v25;
  if (cricket::kFlexfecCodecName[0] - 65 >= 0x1A)
    v26 = cricket::kFlexfecCodecName[0];
  else
    v26 = cricket::kFlexfecCodecName[0] + 32;
  if (cricket::kFlexfecCodecName[1] - 65 >= 0x1A)
    v27 = cricket::kFlexfecCodecName[1];
  else
    v27 = cricket::kFlexfecCodecName[1] + 32;
  if (cricket::kFlexfecCodecName[2] - 65 >= 0x1A)
    v28 = cricket::kFlexfecCodecName[2];
  else
    v28 = cricket::kFlexfecCodecName[2] + 32;
  if (cricket::kFlexfecCodecName[3] - 65 >= 0x1A)
    v29 = cricket::kFlexfecCodecName[3];
  else
    v29 = cricket::kFlexfecCodecName[3] + 32;
  if (cricket::kFlexfecCodecName[4] - 65 >= 0x1A)
    v30 = cricket::kFlexfecCodecName[4];
  else
    v30 = cricket::kFlexfecCodecName[4] + 32;
  if (cricket::kFlexfecCodecName[5] - 65 >= 0x1A)
    v31 = cricket::kFlexfecCodecName[5];
  else
    v31 = cricket::kFlexfecCodecName[5] + 32;
  if (cricket::kFlexfecCodecName[6] - 65 >= 0x1A)
    v32 = cricket::kFlexfecCodecName[6];
  else
    v32 = cricket::kFlexfecCodecName[6] + 32;
  v33 = cricket::kFlexfecCodecName[7] + 32;
  if (cricket::kFlexfecCodecName[7] - 65 >= 0x1A)
    v33 = cricket::kFlexfecCodecName[7];
  v34 = cricket::kFlexfecCodecName[8] + 32;
  if (cricket::kFlexfecCodecName[8] - 65 >= 0x1A)
    v34 = cricket::kFlexfecCodecName[8];
  v119 = v26;
  v117 = v27;
  v115 = v28;
  v112 = v29;
  v110 = v30;
  v109 = v31;
  v108 = v32;
  v107 = v33;
  v35 = cricket::kFlexfecCodecName[9] + 32;
  if (cricket::kFlexfecCodecName[9] - 65 >= 0x1A)
    v35 = cricket::kFlexfecCodecName[9];
  v105 = v35;
  v106 = v34;
  LODWORD(v36) = 35;
  LODWORD(v37) = 96;
  while (1)
  {
    v39 = &v18[v19 / 0x18];
    v144[0] = &off_24C0B1418;
    v144[1] = (void *)1;
    if (SHIBYTE(v18[v19 / 0x18].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v145, v39->__r_.__value_.__l.__data_, v39->__r_.__value_.__l.__size_);
    }
    else
    {
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v145.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v40;
    }
    v146 = 90000;
    v147 = 0;
    LOBYTE(v148) = 0;
    BYTE8(v149) = 0;
    v150[0] = 0;
    v151 = 0;
    v152 = 0;
    memset(v154, 0, sizeof(v154));
    v153 = v154;
    p_data = &v18[v19 / 0x18 + 1].__r_.__value_.__l.__data_;
    if (p_data != &v153)
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v153, *p_data, (char *)&v18[1].__r_.__value_.__r.__words[v19 / 8 + 1]);
    absl::InlinedVector<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::operator=(v150, (unint64_t *)&v18[v19 / 0x18 + 2]);
    v43 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
    v44 = &v145;
    size = HIBYTE(v145.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v145.__r_.__value_.__l.__size_;
      if ((v145.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_245;
      v44 = (std::string *)v145.__r_.__value_.__r.__words[0];
      if (v145.__r_.__value_.__l.__size_)
      {
        if (!v145.__r_.__value_.__r.__words[0])
          goto LABEL_245;
      }
    }
    if (size != 6)
      goto LABEL_129;
    v46 = v44->__r_.__value_.__s.__data_[0];
    if (v46 != cricket::kUlpfecCodecName[0])
    {
      if ((v46 - 65) < 0x1A)
        LOBYTE(v46) = v46 + 32;
      if (v46 != v120)
        goto LABEL_129;
    }
    v47 = v44->__r_.__value_.__s.__data_[1];
    if (v47 != cricket::kUlpfecCodecName[1])
    {
      if ((v47 - 65) < 0x1A)
        LOBYTE(v47) = v47 + 32;
      if (v47 != v118)
        goto LABEL_129;
    }
    v48 = v44->__r_.__value_.__s.__data_[2];
    if (v48 != cricket::kUlpfecCodecName[2])
    {
      if ((v48 - 65) < 0x1A)
        LOBYTE(v48) = v48 + 32;
      if (v48 != v116)
        goto LABEL_129;
    }
    v49 = v44->__r_.__value_.__s.__data_[3];
    if (v49 != cricket::kUlpfecCodecName[3])
    {
      if ((v49 - 65) < 0x1A)
        LOBYTE(v49) = v49 + 32;
      if (v49 != v114)
        goto LABEL_129;
    }
    v50 = v44->__r_.__value_.__s.__data_[4];
    if (v50 != cricket::kUlpfecCodecName[4])
    {
      if ((v50 - 65) < 0x1A)
        LOBYTE(v50) = v50 + 32;
      if (v50 != v113)
        goto LABEL_129;
    }
    v51 = v44->__r_.__value_.__s.__data_[5];
    if (v51 == cricket::kUlpfecCodecName[5])
      goto LABEL_127;
    if ((v51 - 65) < 0x1A)
      LOBYTE(v51) = v51 + 32;
    if (v51 == v111)
    {
LABEL_127:
      v52 = 1;
      if ((int)v36 >= 64)
        goto LABEL_221;
    }
    else
    {
LABEL_129:
      v53 = &v145;
      if ((*((_BYTE *)&v145.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v43 = v145.__r_.__value_.__l.__size_;
        if ((v145.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_245;
        v53 = (std::string *)v145.__r_.__value_.__r.__words[0];
        if (v145.__r_.__value_.__l.__size_)
        {
          if (!v145.__r_.__value_.__r.__words[0])
            goto LABEL_245;
        }
      }
      if (v43 == 10)
      {
        v54 = v53->__r_.__value_.__s.__data_[0];
        if (v54 == cricket::kFlexfecCodecName[0])
          goto LABEL_138;
        if ((v54 - 65) < 0x1A)
          LOBYTE(v54) = v54 + 32;
        v55 = v54 - v119;
        if (!v55)
        {
LABEL_138:
          v56 = v53->__r_.__value_.__s.__data_[1];
          if (v56 == cricket::kFlexfecCodecName[1])
            goto LABEL_142;
          if ((v56 - 65) < 0x1A)
            LOBYTE(v56) = v56 + 32;
          v55 = v56 - v117;
          if (!v55)
          {
LABEL_142:
            v57 = v53->__r_.__value_.__s.__data_[2];
            if (v57 == cricket::kFlexfecCodecName[2])
              goto LABEL_146;
            if ((v57 - 65) < 0x1A)
              LOBYTE(v57) = v57 + 32;
            v55 = v57 - v115;
            if (!v55)
            {
LABEL_146:
              v58 = v53->__r_.__value_.__s.__data_[3];
              if (v58 == cricket::kFlexfecCodecName[3])
                goto LABEL_150;
              if ((v58 - 65) < 0x1A)
                LOBYTE(v58) = v58 + 32;
              v55 = v58 - v112;
              if (!v55)
              {
LABEL_150:
                v59 = v53->__r_.__value_.__s.__data_[4];
                if (v59 == cricket::kFlexfecCodecName[4])
                  goto LABEL_154;
                if ((v59 - 65) < 0x1A)
                  LOBYTE(v59) = v59 + 32;
                v55 = v59 - v110;
                if (!v55)
                {
LABEL_154:
                  v60 = v53->__r_.__value_.__s.__data_[5];
                  if (v60 == cricket::kFlexfecCodecName[5])
                    goto LABEL_158;
                  if ((v60 - 65) < 0x1A)
                    LOBYTE(v60) = v60 + 32;
                  v55 = v60 - v109;
                  if (!v55)
                  {
LABEL_158:
                    v61 = v53->__r_.__value_.__s.__data_[6];
                    if (v61 == cricket::kFlexfecCodecName[6])
                      goto LABEL_162;
                    if ((v61 - 65) < 0x1A)
                      LOBYTE(v61) = v61 + 32;
                    v55 = v61 - v108;
                    if (!v55)
                    {
LABEL_162:
                      v62 = v53->__r_.__value_.__s.__data_[7];
                      if (v62 == cricket::kFlexfecCodecName[7])
                        goto LABEL_166;
                      if ((v62 - 65) < 0x1A)
                        LOBYTE(v62) = v62 + 32;
                      v55 = v62 - v107;
                      if (!v55)
                      {
LABEL_166:
                        v63 = v53->__r_.__value_.__s.__data_[8];
                        if (v63 == cricket::kFlexfecCodecName[8])
                          goto LABEL_170;
                        if ((v63 - 65) < 0x1A)
                          LOBYTE(v63) = v63 + 32;
                        v55 = v63 - v106;
                        if (!v55)
                        {
LABEL_170:
                          v64 = v53->__r_.__value_.__s.__data_[9];
                          if (v64 == cricket::kFlexfecCodecName[9])
                            goto LABEL_174;
                          if ((v64 - 65) < 0x1A)
                            LOBYTE(v64) = v64 + 32;
                          v55 = v64 - v105;
                          if (v64 == v105)
LABEL_174:
                            v55 = 0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v52 = v55 == 0;
        if ((int)v36 >= 64)
        {
LABEL_221:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
            goto LABEL_233;
          goto LABEL_232;
        }
      }
      else
      {
        v52 = 0;
        if ((int)v36 >= 64)
          goto LABEL_221;
      }
    }
    v66 = (int)v37 > 126 ? 1 : v65;
    v67 = v66 ? (int)v36 : (int)v37;
    HIDWORD(v144[1]) = v67;
    v68 = *(cricket::Codec **)(a1 + 8);
    if ((unint64_t)v68 >= *(_QWORD *)(a1 + 16))
    {
      v69 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)a1, (const cricket::Codec *)v144);
    }
    else
    {
      if (!v68)
        goto LABEL_245;
      v69 = (cricket::Codec *)((char *)cricket::Codec::Codec(v68, (const cricket::Codec *)v144) + 216);
    }
    v36 = (cricket *)((_DWORD)v36 + v66);
    v37 = (cricket *)(v37 + (v66 ^ 1));
    *(_QWORD *)(a1 + 8) = v69;
    if (((v52 | a3 ^ 1) & 1) == 0)
      break;
LABEL_92:
    cricket::Codec::~Codec((cricket::Codec *)v144);
    v19 += 96;
    if (&v18[v19 / 0x18] == v121)
      goto LABEL_234;
  }
  if ((int)v36 < 64)
  {
    if ((v71 & 1) != 0 || (int)v37 >= 127)
    {
      cricket::CreateVideoRtxCodec(v36, SHIDWORD(v144[1]), (uint64_t)&v126);
      v81 = *(_QWORD *)(a1 + 8);
      if (v81 >= *(_QWORD *)(a1 + 16))
      {
        v38 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec>((void **)a1, (uint64_t)&v126);
      }
      else
      {
        if (!v81)
          goto LABEL_245;
        *(_QWORD *)v81 = &off_24C0B1418;
        *(_QWORD *)(v81 + 8) = *((_QWORD *)&v126 + 1);
        v82 = *(_OWORD *)v127;
        *(_QWORD *)(v81 + 32) = *(_QWORD *)&v127[16];
        *(_OWORD *)(v81 + 16) = v82;
        memset(v127, 0, sizeof(v127));
        *(_OWORD *)(v81 + 40) = v128;
        *(_BYTE *)(v81 + 56) = 0;
        *(_BYTE *)(v81 + 80) = 0;
        if (v131)
        {
          v83 = v129;
          *(_QWORD *)(v81 + 72) = v130;
          *(_OWORD *)(v81 + 56) = v83;
          v130 = 0;
          v129 = 0uLL;
          *(_BYTE *)(v81 + 80) = 1;
        }
        *(_BYTE *)(v81 + 136) = 0;
        *(_QWORD *)(v81 + 88) = 0;
        *(_QWORD *)(v81 + 88) = v132;
        v84 = v133;
        v85 = v134;
        *(_QWORD *)(v81 + 128) = v135;
        *(_OWORD *)(v81 + 112) = v85;
        *(_OWORD *)(v81 + 96) = v84;
        v132 = 0;
        *(_BYTE *)(v81 + 160) = 0;
        if (v138)
        {
          v86 = v136;
          *(_QWORD *)(v81 + 152) = v137;
          *(_OWORD *)(v81 + 136) = v86;
          v137 = 0;
          v136 = 0uLL;
          *(_BYTE *)(v81 + 160) = 1;
        }
        *(_QWORD *)(v81 + 168) = v139;
        v87 = v140;
        *(_QWORD *)(v81 + 176) = v140;
        v88 = v81 + 176;
        v89 = v141;
        *(_QWORD *)(v81 + 184) = v141;
        if (v89)
        {
          *(_QWORD *)(v87 + 16) = v88;
          v139 = &v140;
          v140 = 0;
          v141 = 0;
        }
        else
        {
          *(_QWORD *)(v81 + 168) = v88;
        }
        *(_QWORD *)(v81 + 192) = 0;
        *(_QWORD *)(v81 + 200) = 0;
        v91 = (_QWORD *)(v81 + 192);
        v91[2] = 0;
        std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>(v91, v142, v143, 0xAAAAAAAAAAAAAAABLL * ((v143 - v142) >> 4));
        v38 = (char *)(v91 + 3);
      }
      LODWORD(v36) = (_DWORD)v36 + 1;
    }
    else
    {
      cricket::CreateVideoRtxCodec(v37, SHIDWORD(v144[1]), (uint64_t)&v126);
      v72 = *(_QWORD *)(a1 + 8);
      if (v72 >= *(_QWORD *)(a1 + 16))
      {
        v38 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec>((void **)a1, (uint64_t)&v126);
      }
      else
      {
        if (!v72)
          goto LABEL_245;
        *(_QWORD *)v72 = &off_24C0B1418;
        *(_QWORD *)(v72 + 8) = *((_QWORD *)&v126 + 1);
        v73 = *(_OWORD *)v127;
        *(_QWORD *)(v72 + 32) = *(_QWORD *)&v127[16];
        *(_OWORD *)(v72 + 16) = v73;
        memset(v127, 0, sizeof(v127));
        *(_OWORD *)(v72 + 40) = v128;
        *(_BYTE *)(v72 + 56) = 0;
        *(_BYTE *)(v72 + 80) = 0;
        if (v131)
        {
          v74 = v129;
          *(_QWORD *)(v72 + 72) = v130;
          *(_OWORD *)(v72 + 56) = v74;
          v130 = 0;
          v129 = 0uLL;
          *(_BYTE *)(v72 + 80) = 1;
        }
        *(_BYTE *)(v72 + 136) = 0;
        *(_QWORD *)(v72 + 88) = 0;
        *(_QWORD *)(v72 + 88) = v132;
        v75 = v133;
        v76 = v134;
        *(_QWORD *)(v72 + 128) = v135;
        *(_OWORD *)(v72 + 112) = v76;
        *(_OWORD *)(v72 + 96) = v75;
        v132 = 0;
        *(_BYTE *)(v72 + 160) = 0;
        if (v138)
        {
          v77 = v136;
          *(_QWORD *)(v72 + 152) = v137;
          *(_OWORD *)(v72 + 136) = v77;
          v137 = 0;
          v136 = 0uLL;
          *(_BYTE *)(v72 + 160) = 1;
        }
        *(_QWORD *)(v72 + 168) = v139;
        v78 = v140;
        *(_QWORD *)(v72 + 176) = v140;
        v79 = v72 + 176;
        v80 = v141;
        *(_QWORD *)(v72 + 184) = v141;
        if (v80)
        {
          *(_QWORD *)(v78 + 16) = v79;
          v139 = &v140;
          v140 = 0;
          v141 = 0;
        }
        else
        {
          *(_QWORD *)(v72 + 168) = v79;
        }
        *(_QWORD *)(v72 + 192) = 0;
        *(_QWORD *)(v72 + 200) = 0;
        v90 = (_QWORD *)(v72 + 192);
        v90[2] = 0;
        std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>(v90, v142, v143, 0xAAAAAAAAAAAAAAABLL * ((v143 - v142) >> 4));
        v38 = (char *)(v90 + 3);
      }
      LODWORD(v37) = (_DWORD)v37 + 1;
    }
    *(_QWORD *)(a1 + 8) = v38;
    cricket::Codec::~Codec((cricket::Codec *)&v126);
    goto LABEL_92;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    goto LABEL_233;
LABEL_232:
  rtc::webrtc_logging_impl::Log("\r\t", v92, v93, v94, v95, v96, v97, v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
LABEL_233:
  cricket::Codec::~Codec((cricket::Codec *)v144);
LABEL_234:
  v18 = (std::string *)v123;
  if (v123)
  {
LABEL_235:
    v103 = v124;
    v104 = v18;
    if (v124 != v18)
    {
      do
      {
        while (1)
        {
          if ((v103[-2].__r_.__value_.__s.__data_[0] & 1) != 0)
            operator delete((void *)v103[-2].__r_.__value_.__l.__size_);
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v103[-3], v103[-3].__r_.__value_.__l.__size_);
          if (SHIBYTE(v103[-4].__r_.__value_.__r.__words[2]) < 0)
            break;
          v103 -= 4;
          if (v103 == v18)
            goto LABEL_242;
        }
        operator delete(v103[-4].__r_.__value_.__l.__data_);
        v103 -= 4;
      }
      while (v103 != v18);
LABEL_242:
      v104 = v123;
    }
    v124 = v18;
    operator delete(v104);
  }
}

void cricket::WebRtcVideoEngine::GetRtpHeaderExtensions(cricket::WebRtcVideoEngine *this@<X0>, void **a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  const char **v5;
  int v6;
  const char *v7;
  size_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v15;
  char *v16;
  unint64_t v17;
  void **v18;
  unint64_t v19;
  _BOOL4 v20;
  int v21;
  int v22;
  int v24;
  unint64_t v25;
  char *v26;
  int v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  std::string *v43;
  const std::string::value_type **v44;
  __int128 v45;
  char *v46;
  void **v47;
  unint64_t v48;
  _BOOL4 v49;
  int v50;
  int v51;
  int v53;
  unint64_t v54;
  void **v55;
  int v56;
  char *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  std::string *v72;
  const std::string::value_type **v73;
  __int128 v74;
  void **v75;
  void **v76;
  unint64_t v77;
  int v78;
  int v79;
  int v80;
  _BOOL4 v82;
  unint64_t v83;
  void **v84;
  int v85;
  char *v86;
  char *v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  std::string *v102;
  const std::string::value_type **v103;
  void **v104;
  void **v105;
  unint64_t v106;
  BOOL v107;
  int v108;
  int v109;
  unint64_t v111;
  char *v112;
  int v113;
  char *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  std::string *v129;
  const std::string::value_type **v130;
  __int128 v131;
  char *v132;
  int v134;
  int v135;
  int v136;
  void *__p[2];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  const char *v142;
  uint64_t v143;

  v3 = 0;
  v4 = 0;
  v143 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v136 = 1;
  v139 = xmmword_24C0C5CC8;
  v140 = *(_OWORD *)&off_24C0C5CD8;
  v141 = xmmword_24C0C5CE8;
  v142 = "urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id";
  *(_OWORD *)__p = xmmword_24C0C5CA8;
  v138 = *(_OWORD *)&off_24C0C5CB8;
  do
  {
    while (1)
    {
      v5 = (const char **)&__p[v3];
      v6 = v136;
      v135 = v136++;
      v134 = 0;
      if (v4 < (unint64_t)a2[2])
        break;
      v4 = std::vector<webrtc::RtpHeaderExtensionCapability>::__emplace_back_slow_path<char const* const&,int,webrtc::RtpTransceiverDirection>(a2, v5, &v135, &v134);
      a2[1] = (void *)v4;
      if (++v3 == 11)
        goto LABEL_19;
    }
    if (!v4)
      goto LABEL_218;
    v7 = *v5;
    if (!*v5)
      goto LABEL_218;
    v8 = strlen(*v5);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_219;
    v9 = v8;
    if (v8 > 0x16)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (char *)operator new(v11 + 1);
      *(_QWORD *)(v4 + 8) = v9;
      *(_QWORD *)(v4 + 16) = v12 | 0x8000000000000000;
      *(_QWORD *)v4 = v10;
    }
    else
    {
      *(_BYTE *)(v4 + 23) = v8;
      v10 = (char *)v4;
    }
    v13 = &v10[v9];
    if (v10 <= v7 && v13 > v7)
      goto LABEL_218;
    if (v9)
      memmove(v10, v7, v9);
    *v13 = 0;
    *(_DWORD *)(v4 + 24) = v6;
    *(_BYTE *)(v4 + 28) = 1;
    *(_BYTE *)(v4 + 32) = 0;
    *(_DWORD *)(v4 + 36) = 0;
    v4 += 40;
    a2[1] = (void *)v4;
    ++v3;
  }
  while (v3 != 11);
LABEL_19:
  __p[0] = "http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time";
  v135 = 4;
  if (v4 >= (unint64_t)a2[2])
  {
    v17 = std::vector<webrtc::RtpHeaderExtensionCapability>::__emplace_back_slow_path<char const* const&,int,webrtc::RtpTransceiverDirection>(a2, (const char **)__p, &v136, &v135);
  }
  else
  {
    if (!v4)
      goto LABEL_218;
    v15 = v136;
    v16 = (char *)operator new(0x40uLL);
    *(_QWORD *)v4 = v16;
    *(_OWORD *)(v4 + 8) = xmmword_208F0ABD0;
    if (v16 <= "http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time"
      && v16 + 61 > "http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time")
    {
      goto LABEL_218;
    }
    strcpy(v16, "http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time");
    *(_DWORD *)(v4 + 24) = v15;
    *(_BYTE *)(v4 + 28) = 1;
    *(_BYTE *)(v4 + 32) = 0;
    v17 = v4 + 40;
    *(_DWORD *)(v4 + 36) = 4;
  }
  a2[1] = (void *)v17;
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**((_QWORD **)this + 4) + 16))(__p, *((_QWORD *)this + 4), "WebRTC-GenericDescriptorAdvertised", 34);
  if (SBYTE7(v138) < 0)
  {
    v19 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
      goto LABEL_218;
    v18 = (void **)__p[0];
    if (__p[1])
    {
      if (!__p[0])
        goto LABEL_218;
    }
  }
  else
  {
    v18 = __p;
    v19 = BYTE7(v138);
  }
  if (v19 < 7)
  {
    v20 = 0;
    if ((BYTE7(v138) & 0x80) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
  v21 = *(_DWORD *)v18;
  v22 = *(_DWORD *)((char *)v18 + 3);
  v20 = v21 == 1650552389 && v22 == 1684368482;
  if ((BYTE7(v138) & 0x80) != 0)
LABEL_40:
    operator delete(__p[0]);
LABEL_41:
  if (v20)
    v24 = 0;
  else
    v24 = 4;
  v26 = (char *)a2[1];
  v25 = (unint64_t)a2[2];
  if ((unint64_t)v26 >= v25)
  {
    v30 = (char *)*a2;
    v31 = 0xCCCCCCCCCCCCCCCDLL * ((v26 - (_BYTE *)*a2) >> 3);
    v32 = v31 + 1;
    if (v31 + 1 > 0x666666666666666)
      goto LABEL_219;
    v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - (_QWORD)v30) >> 3);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x333333333333333)
      v34 = 0x666666666666666;
    else
      v34 = v32;
    if (!v34)
      goto LABEL_218;
    if (v34 > 0x666666666666666)
      goto LABEL_220;
    v35 = v136;
    v36 = 40 * v34;
    v37 = (char *)operator new(40 * v34);
    v38 = &v37[40 * v31];
    v39 = (char *)operator new(0x50uLL);
    *(_QWORD *)v38 = v39;
    *(_OWORD *)(v38 + 8) = xmmword_208F0BC70;
    if (v39 <= "http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00"
      && v39 + 72 > "http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00")
    {
      goto LABEL_218;
    }
    v40 = &v37[v36];
    strcpy(v39, "http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00");
    v41 = &v37[40 * v31];
    *((_DWORD *)v41 + 6) = v35;
    v41[28] = 1;
    v41[32] = 0;
    v29 = v38 + 40;
    *((_DWORD *)v41 + 9) = v24;
    if (v26 == v30)
    {
      *a2 = v38;
      a2[1] = v29;
      a2[2] = v40;
    }
    else
    {
      v42 = 0;
      do
      {
        v43 = (std::string *)&v38[v42 - 40];
        v44 = (const std::string::value_type **)&v26[v42 - 40];
        if (v26[v42 - 17] < 0)
        {
          std::string::__init_copy_ctor_external(v43, *v44, *(_QWORD *)&v26[v42 - 32]);
        }
        else
        {
          v45 = *(_OWORD *)v44;
          *(_QWORD *)&v38[v42 - 24] = *(_QWORD *)&v26[v42 - 24];
          *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v45;
        }
        *(_OWORD *)&v38[v42 - 16] = *(_OWORD *)&v26[v42 - 16];
        v42 -= 40;
      }
      while (&v26[v42] != v30);
      v26 = (char *)*a2;
      v46 = (char *)a2[1];
      *a2 = &v38[v42];
      a2[1] = v29;
      for (a2[2] = v40; v46 != v26; v46 -= 40)
      {
        if (*(v46 - 17) < 0)
          operator delete(*((void **)v46 - 5));
      }
    }
    if (v26)
      operator delete(v26);
  }
  else
  {
    if (!v26)
      goto LABEL_218;
    v27 = v136;
    v28 = (char *)operator new(0x50uLL);
    *(_QWORD *)v26 = v28;
    *(_OWORD *)(v26 + 8) = xmmword_208F0BC70;
    if (v28 <= "http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00"
      && v28 + 72 > "http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00")
    {
      goto LABEL_218;
    }
    strcpy(v28, "http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00");
    *((_DWORD *)v26 + 6) = v27;
    v26[28] = 1;
    v26[32] = 0;
    v29 = v26 + 40;
    *((_DWORD *)v26 + 9) = v24;
  }
  a2[1] = v29;
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**((_QWORD **)this + 4) + 16))(__p, *((_QWORD *)this + 4), "WebRTC-DependencyDescriptorAdvertised", 37);
  if (SBYTE7(v138) < 0)
  {
    v48 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
      goto LABEL_218;
    v47 = (void **)__p[0];
    if (__p[1])
    {
      if (!__p[0])
        goto LABEL_218;
    }
  }
  else
  {
    v47 = __p;
    v48 = BYTE7(v138);
  }
  if (v48 < 7)
  {
    v49 = 0;
    if ((BYTE7(v138) & 0x80) != 0)
      goto LABEL_96;
LABEL_88:
    if (v49)
      v53 = 0;
    else
      v53 = 4;
    v55 = (void **)a2[1];
    v54 = (unint64_t)a2[2];
    if ((unint64_t)v55 >= v54)
      goto LABEL_100;
LABEL_92:
    if (!v55)
      goto LABEL_218;
    v56 = v136;
    v57 = (char *)operator new(0x58uLL);
    *v55 = v57;
    *(_OWORD *)(v55 + 1) = xmmword_208F1DFA0;
    if (v57 <= "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension"
      && v57 + 87 > "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension")
    {
      goto LABEL_218;
    }
    strcpy(v57, "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension");
    *((_DWORD *)v55 + 6) = v56;
    *((_BYTE *)v55 + 28) = 1;
    *((_BYTE *)v55 + 32) = 0;
    v58 = (char *)(v55 + 5);
    *((_DWORD *)v55 + 9) = v53;
    goto LABEL_124;
  }
  v50 = *(_DWORD *)v47;
  v51 = *(_DWORD *)((char *)v47 + 3);
  v49 = v50 == 1650552389 && v51 == 1684368482;
  if ((BYTE7(v138) & 0x80) == 0)
    goto LABEL_88;
LABEL_96:
  operator delete(__p[0]);
  if (v49)
    v53 = 0;
  else
    v53 = 4;
  v55 = (void **)a2[1];
  v54 = (unint64_t)a2[2];
  if ((unint64_t)v55 < v54)
    goto LABEL_92;
LABEL_100:
  v59 = (char *)*a2;
  v60 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v55 - (_BYTE *)*a2) >> 3);
  v61 = v60 + 1;
  if (v60 + 1 > 0x666666666666666)
    goto LABEL_219;
  v62 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - (_QWORD)v59) >> 3);
  if (2 * v62 > v61)
    v61 = 2 * v62;
  if (v62 >= 0x333333333333333)
    v63 = 0x666666666666666;
  else
    v63 = v61;
  if (!v63)
    goto LABEL_218;
  if (v63 > 0x666666666666666)
    goto LABEL_220;
  v64 = v136;
  v65 = 40 * v63;
  v66 = (char *)operator new(40 * v63);
  v67 = &v66[40 * v60];
  v68 = (char *)operator new(0x58uLL);
  *(_QWORD *)v67 = v68;
  *(_OWORD *)(v67 + 8) = xmmword_208F1DFA0;
  if (v68 <= "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension"
    && v68 + 87 > "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension")
  {
    goto LABEL_218;
  }
  v69 = &v66[v65];
  strcpy(v68, "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension");
  v70 = &v66[40 * v60];
  *((_DWORD *)v70 + 6) = v64;
  v70[28] = 1;
  v70[32] = 0;
  v58 = v67 + 40;
  *((_DWORD *)v70 + 9) = v53;
  if (v55 == (void **)v59)
  {
    *a2 = v67;
    a2[1] = v58;
    a2[2] = v69;
  }
  else
  {
    v71 = 0;
    do
    {
      v72 = (std::string *)&v67[v71 * 8 - 40];
      v73 = (const std::string::value_type **)&v55[v71 - 5];
      if (*((char *)&v55[v71 - 2] - 1) < 0)
      {
        std::string::__init_copy_ctor_external(v72, *v73, (std::string::size_type)v55[v71 - 4]);
      }
      else
      {
        v74 = *(_OWORD *)v73;
        *(_QWORD *)&v67[v71 * 8 - 24] = v55[v71 - 3];
        *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v74;
      }
      *(_OWORD *)&v67[v71 * 8 - 16] = *(_OWORD *)&v55[v71 - 2];
      v71 -= 5;
    }
    while (&v55[v71] != (void **)v59);
    v55 = (void **)*a2;
    v75 = (void **)a2[1];
    *a2 = &v67[v71 * 8];
    a2[1] = v58;
    for (a2[2] = v69; v75 != v55; v75 -= 5)
    {
      if (*((char *)v75 - 17) < 0)
        operator delete(*(v75 - 5));
    }
  }
  if (v55)
    operator delete(v55);
LABEL_124:
  a2[1] = v58;
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**((_QWORD **)this + 4) + 16))(__p, *((_QWORD *)this + 4), "WebRTC-VideoLayersAllocationAdvertised", 38);
  if (SBYTE7(v138) < 0)
  {
    v77 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
      goto LABEL_218;
    v76 = (void **)__p[0];
    if (__p[1])
    {
      if (!__p[0])
        goto LABEL_218;
    }
  }
  else
  {
    v76 = __p;
    v77 = BYTE7(v138);
  }
  if (v77 >= 7)
  {
    v79 = *(_DWORD *)v76;
    v80 = *(_DWORD *)((char *)v76 + 3);
    v82 = v79 != 1650552389 || v80 != 1684368482;
    v78 = 4 * v82;
    if ((BYTE7(v138) & 0x80) != 0)
    {
LABEL_144:
      operator delete(__p[0]);
      v84 = (void **)a2[1];
      v83 = (unint64_t)a2[2];
      if ((unint64_t)v84 >= v83)
        goto LABEL_145;
LABEL_140:
      if (!v84)
        goto LABEL_218;
      v85 = v136;
      v86 = (char *)operator new(0x48uLL);
      *v84 = v86;
      *(_OWORD *)(v84 + 1) = xmmword_208F1AB80;
      if (v86 <= "http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00"
        && v86 + 70 > "http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00")
      {
        goto LABEL_218;
      }
      strcpy(v86, "http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00");
      *((_DWORD *)v84 + 6) = v85;
      *((_BYTE *)v84 + 28) = 1;
      *((_BYTE *)v84 + 32) = 0;
      v87 = (char *)(v84 + 5);
      *((_DWORD *)v84 + 9) = v78;
      goto LABEL_169;
    }
  }
  else
  {
    v78 = 4;
    if ((BYTE7(v138) & 0x80) != 0)
      goto LABEL_144;
  }
  v84 = (void **)a2[1];
  v83 = (unint64_t)a2[2];
  if ((unint64_t)v84 < v83)
    goto LABEL_140;
LABEL_145:
  v88 = (char *)*a2;
  v89 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v84 - (_BYTE *)*a2) >> 3);
  v90 = v89 + 1;
  if (v89 + 1 > 0x666666666666666)
    goto LABEL_219;
  v91 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v83 - (_QWORD)v88) >> 3);
  if (2 * v91 > v90)
    v90 = 2 * v91;
  if (v91 >= 0x333333333333333)
    v92 = 0x666666666666666;
  else
    v92 = v90;
  if (!v92)
    goto LABEL_218;
  if (v92 > 0x666666666666666)
    goto LABEL_220;
  v93 = v136;
  v94 = 40 * v92;
  v95 = (char *)operator new(40 * v92);
  v96 = &v95[40 * v89];
  v97 = (char *)operator new(0x48uLL);
  *(_QWORD *)v96 = v97;
  *(_OWORD *)(v96 + 8) = xmmword_208F1AB80;
  if (v97 <= "http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00"
    && v97 + 70 > "http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00")
  {
    goto LABEL_218;
  }
  v98 = &v95[v94];
  strcpy(v97, "http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00");
  v99 = &v95[40 * v89];
  *((_DWORD *)v99 + 6) = v93;
  v99[28] = 1;
  v99[32] = 0;
  v87 = v96 + 40;
  *((_DWORD *)v99 + 9) = v78;
  if (v84 == (void **)v88)
  {
    *a2 = v96;
    a2[1] = v87;
    a2[2] = v98;
  }
  else
  {
    v100 = 0;
    do
    {
      v102 = (std::string *)&v96[v100 * 8 - 40];
      v103 = (const std::string::value_type **)&v84[v100 - 5];
      if (*((char *)&v84[v100 - 2] - 1) < 0)
      {
        std::string::__init_copy_ctor_external(v102, *v103, (std::string::size_type)v84[v100 - 4]);
      }
      else
      {
        v101 = *(_OWORD *)v103;
        *(_QWORD *)&v96[v100 * 8 - 24] = v84[v100 - 3];
        *(_OWORD *)&v102->__r_.__value_.__l.__data_ = v101;
      }
      *(_OWORD *)&v96[v100 * 8 - 16] = *(_OWORD *)&v84[v100 - 2];
      v100 -= 5;
    }
    while (&v84[v100] != (void **)v88);
    v84 = (void **)*a2;
    v104 = (void **)a2[1];
    *a2 = &v96[v100 * 8];
    a2[1] = v87;
    for (a2[2] = v98; v104 != v84; v104 -= 5)
    {
      if (*((char *)v104 - 17) < 0)
        operator delete(*(v104 - 5));
    }
  }
  if (v84)
    operator delete(v84);
LABEL_169:
  a2[1] = v87;
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**((_QWORD **)this + 4) + 16))(__p, *((_QWORD *)this + 4), "WebRTC-VideoFrameTrackingIdAdvertised", 37);
  if (SBYTE7(v138) < 0)
  {
    v106 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
      goto LABEL_218;
    v105 = (void **)__p[0];
    if (__p[1])
    {
      if (!__p[0])
        goto LABEL_218;
    }
  }
  else
  {
    v105 = __p;
    v106 = BYTE7(v138);
  }
  if (v106 < 7)
  {
    v107 = 0;
    if ((BYTE7(v138) & 0x80) != 0)
      goto LABEL_186;
LABEL_184:
    if (!v107)
      return;
    goto LABEL_187;
  }
  v108 = *(_DWORD *)v105;
  v109 = *(_DWORD *)((char *)v105 + 3);
  v107 = v108 == 1650552389 && v109 == 1684368482;
  if ((BYTE7(v138) & 0x80) == 0)
    goto LABEL_184;
LABEL_186:
  operator delete(__p[0]);
  if (!v107)
    return;
LABEL_187:
  v112 = (char *)a2[1];
  v111 = (unint64_t)a2[2];
  if ((unint64_t)v112 >= v111)
  {
    v116 = (char *)*a2;
    v117 = 0xCCCCCCCCCCCCCCCDLL * ((v112 - (_BYTE *)*a2) >> 3);
    v118 = v117 + 1;
    if (v117 + 1 > 0x666666666666666)
      goto LABEL_219;
    v119 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v111 - (_QWORD)v116) >> 3);
    if (2 * v119 > v118)
      v118 = 2 * v119;
    if (v119 >= 0x333333333333333)
      v120 = 0x666666666666666;
    else
      v120 = v118;
    if (!v120)
    {
LABEL_218:
      __break(1u);
LABEL_219:
      abort();
    }
    if (v120 <= 0x666666666666666)
    {
      v121 = v136;
      v122 = 40 * v120;
      v123 = (char *)operator new(40 * v120);
      v124 = &v123[40 * v117];
      v125 = (char *)operator new(0x48uLL);
      *(_QWORD *)v124 = v125;
      *(_OWORD *)(v124 + 8) = xmmword_208F0B3F0;
      if (v125 > "http://www.webrtc.org/experiments/rtp-hdrext/video-frame-tracking-id"
        || v125 + 68 <= "http://www.webrtc.org/experiments/rtp-hdrext/video-frame-tracking-id")
      {
        v126 = &v123[v122];
        strcpy(v125, "http://www.webrtc.org/experiments/rtp-hdrext/video-frame-tracking-id");
        v127 = &v123[40 * v117];
        *((_DWORD *)v127 + 6) = v121;
        v127[28] = 1;
        v127[32] = 0;
        v115 = v124 + 40;
        *((_DWORD *)v127 + 9) = 0;
        if (v112 == v116)
        {
          *a2 = v124;
          a2[1] = v115;
          a2[2] = v126;
        }
        else
        {
          v128 = 0;
          do
          {
            v129 = (std::string *)&v124[v128 - 40];
            v130 = (const std::string::value_type **)&v112[v128 - 40];
            if (v112[v128 - 17] < 0)
            {
              std::string::__init_copy_ctor_external(v129, *v130, *(_QWORD *)&v112[v128 - 32]);
            }
            else
            {
              v131 = *(_OWORD *)v130;
              *(_QWORD *)&v124[v128 - 24] = *(_QWORD *)&v112[v128 - 24];
              *(_OWORD *)&v129->__r_.__value_.__l.__data_ = v131;
            }
            *(_OWORD *)&v124[v128 - 16] = *(_OWORD *)&v112[v128 - 16];
            v128 -= 40;
          }
          while (&v112[v128] != v116);
          v112 = (char *)*a2;
          v132 = (char *)a2[1];
          *a2 = &v124[v128];
          a2[1] = v115;
          a2[2] = v126;
          while (v132 != v112)
          {
            if (*(v132 - 17) < 0)
              operator delete(*((void **)v132 - 5));
            v132 -= 40;
          }
        }
        if (v112)
          operator delete(v112);
        goto LABEL_216;
      }
      goto LABEL_218;
    }
LABEL_220:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (!v112)
    goto LABEL_218;
  v113 = v136;
  v114 = (char *)operator new(0x48uLL);
  *(_QWORD *)v112 = v114;
  *(_OWORD *)(v112 + 8) = xmmword_208F0B3F0;
  if (v114 <= "http://www.webrtc.org/experiments/rtp-hdrext/video-frame-tracking-id"
    && v114 + 68 > "http://www.webrtc.org/experiments/rtp-hdrext/video-frame-tracking-id")
  {
    goto LABEL_218;
  }
  strcpy(v114, "http://www.webrtc.org/experiments/rtp-hdrext/video-frame-tracking-id");
  *((_DWORD *)v112 + 6) = v113;
  v112[28] = 1;
  v112[32] = 0;
  v115 = v112 + 40;
  *((_DWORD *)v112 + 9) = 0;
LABEL_216:
  a2[1] = v115;
}

void cricket::`anonymous namespace'::MapCodecs(cricket::Codec **a1, cricket::Codec *this, cricket::Codec *a3)
{
  cricket::Codec *v3;
  cricket::Codec *v4;
  cricket::Codec *v5;
  _BOOL4 v7;
  BOOL v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t **v14;
  int v15;
  uint64_t **v16;
  int ResiliencyType;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int Param;
  unsigned int v40;
  signed int v41;
  unint64_t v42;
  char *v43;
  cricket::Codec *v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  char *v48;
  _DWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _DWORD *v54;
  __int128 v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t **v63;
  uint64_t **v64;
  signed int v65;
  int v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t **v70;
  uint64_t **v71;
  signed int v72;
  uint64_t *v73;
  uint64_t *v74;
  char *v75;
  char *v76;
  uint64_t **v77;
  int v78;
  int v79;
  uint64_t **v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t **v83;
  int v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t **v87;
  BOOL v88;
  int v89;
  uint64_t *v90;
  uint64_t *v91;
  cricket::Codec *v92;
  int v93;
  uint64_t **v94;
  uint64_t *v95;
  uint64_t **v96;
  uint64_t **v97;
  int v98;
  uint64_t **v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t **v103;
  int v104;
  uint64_t **v105;
  uint64_t **v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  cricket::Codec *v123;
  unint64_t v124;
  int *v125;
  uint64_t v126;
  cricket::Codec *v127;
  int v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t **v132;
  int v133;
  uint64_t **v134;
  uint64_t **v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  int v140;
  int v141;
  _BOOL4 v142;
  char *v143;
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  int v149;
  unsigned int v150;
  void *__p[2];
  char v152;
  uint64_t **v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t **v159;
  uint64_t *v160;
  uint64_t v161;

  if (this == a3)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  v3 = this;
  v4 = 0;
  v5 = 0;
  v146 = 0;
  v140 = 0;
  v160 = 0;
  v161 = 0;
  v158 = 0;
  v159 = &v160;
  v156 = &v157;
  v157 = 0;
  v143 = 0;
  v155 = 0;
  v7 = __p <= (void **)"apt" && (char *)__p + 3 > "apt";
  v142 = v7;
  v8 = __p <= (void **)"rtx-time" && &__p[1] > (void **)"rtx-time";
  v153 = &v154;
  v154 = 0;
  v9 = v8;
  v141 = v9;
  v147 = -1;
  v145 = -1;
  while (2)
  {
    v10 = *((_DWORD *)v3 + 3);
    v11 = v160;
    if (v160)
    {
      v12 = &v160;
      do
      {
        v13 = v11;
        v14 = v12;
        v15 = *((_DWORD *)v11 + 7);
        v16 = (uint64_t **)(v11 + 1);
        if (v15 >= v10)
        {
          v16 = (uint64_t **)v13;
          v12 = (uint64_t **)v13;
        }
        v11 = *v16;
      }
      while (v11);
      if (v12 != &v160)
      {
        if (v15 < v10)
          v13 = (uint64_t *)v14;
        if (v10 >= *((_DWORD *)v13 + 7))
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            goto LABEL_182;
          goto LABEL_191;
        }
      }
    }
    ResiliencyType = cricket::Codec::GetResiliencyType((uint64_t)v3);
    v18 = v160;
    v19 = &v160;
    v20 = &v160;
    if (v160)
    {
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v18;
          v21 = *((_DWORD *)v18 + 7);
          if (v10 >= v21)
            break;
          v18 = *v20;
          v19 = v20;
          if (!*v20)
            goto LABEL_33;
        }
        if (v21 >= v10)
          break;
        v18 = v20[1];
        if (!v18)
        {
          v19 = v20 + 1;
          goto LABEL_33;
        }
      }
    }
    else
    {
LABEL_33:
      v22 = (uint64_t *)v20;
      v20 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v20 + 7) = v10;
      *((_DWORD *)v20 + 8) = 0;
      *v20 = 0;
      v20[1] = 0;
      v20[2] = v22;
      *v19 = (uint64_t *)v20;
      v23 = (uint64_t *)v20;
      if (*v159)
      {
        v159 = (uint64_t **)*v159;
        v23 = *v19;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v160, v23);
      ++v161;
    }
    *((_DWORD *)v20 + 8) = ResiliencyType;
    switch(cricket::Codec::GetResiliencyType((uint64_t)v3))
    {
      case 0u:
        if (v4 < (cricket::Codec *)v143)
        {
          if (!v4)
            goto LABEL_214;
          cricket::Codec::Codec(v4, v3);
          *((_DWORD *)v4 + 58) = -1;
          *((_QWORD *)v4 + 27) = -1;
          *((_QWORD *)v4 + 28) = -1;
          *((_BYTE *)v4 + 236) = 0;
          *((_BYTE *)v4 + 240) = 0;
          v4 = (cricket::Codec *)((char *)v4 + 248);
          goto LABEL_16;
        }
        v42 = 0xEF7BDEF7BDEF7BDFLL * ((v4 - v5) >> 3) + 1;
        if (v42 > 0x108421084210842)
          abort();
        if (0xDEF7BDEF7BDEF7BELL * ((v143 - (char *)v5) >> 3) > v42)
          v42 = 0xDEF7BDEF7BDEF7BELL * ((v143 - (char *)v5) >> 3);
        if (0xEF7BDEF7BDEF7BDFLL * ((v143 - (char *)v5) >> 3) >= 0x84210842108421)
          v42 = 0x108421084210842;
        if (!v42)
        {
LABEL_214:
          __break(1u);
LABEL_215:
          std::__throw_bad_array_new_length[abi:sn180100]();
        }
        if (v42 > 0x108421084210842)
          goto LABEL_215;
        v144 = 248 * v42;
        v43 = (char *)operator new(248 * v42);
        v44 = (cricket::Codec *)&v43[8 * ((v4 - v5) >> 3)];
        cricket::Codec::Codec(v44, v3);
        *((_DWORD *)v44 + 58) = -1;
        *((_QWORD *)v44 + 27) = -1;
        *((_QWORD *)v44 + 28) = -1;
        *((_BYTE *)v44 + 236) = 0;
        *((_BYTE *)v44 + 240) = 0;
        if (v4 == v5)
        {
          v75 = &v43[8 * ((v4 - v5) >> 3)];
          v143 = &v43[v144];
          v76 = (char *)v44 + 248;
          if (!v4)
            goto LABEL_109;
        }
        else
        {
          v45 = 0;
          do
          {
            v48 = (char *)v44 + v45;
            *((_QWORD *)v48 - 31) = &off_24C0B1418;
            v49 = (_DWORD *)((char *)v4 + v45);
            *((_QWORD *)v48 - 30) = *(_QWORD *)((char *)v4 + v45 - 240);
            v50 = *(_OWORD *)((char *)v4 + v45 - 232);
            *((_QWORD *)v48 - 27) = *(_QWORD *)((char *)v4 + v45 - 216);
            *(_OWORD *)(v48 - 232) = v50;
            *((_QWORD *)v49 - 28) = 0;
            *((_QWORD *)v49 - 27) = 0;
            *((_QWORD *)v49 - 29) = 0;
            *((_OWORD *)v48 - 13) = *(_OWORD *)((char *)v4 + v45 - 208);
            *((_BYTE *)v44 + v45 - 192) = 0;
            *(v48 - 168) = 0;
            if (*((_BYTE *)v4 + v45 - 168))
            {
              v51 = *((_OWORD *)v49 - 12);
              *(_QWORD *)((char *)v44 + v45 - 176) = *((_QWORD *)v49 - 22);
              *(_OWORD *)((char *)v44 + v45 - 192) = v51;
              *((_QWORD *)v49 - 23) = 0;
              *((_QWORD *)v49 - 22) = 0;
              *((_QWORD *)v49 - 24) = 0;
              *(v48 - 168) = 1;
            }
            *((_QWORD *)v48 - 20) = 0;
            *((_QWORD *)v48 - 20) = *((_QWORD *)v49 - 20);
            v52 = *(_OWORD *)(v49 - 38);
            v53 = *(_OWORD *)(v49 - 34);
            *((_QWORD *)v48 - 15) = *((_QWORD *)v49 - 15);
            *(_OWORD *)(v48 - 136) = v53;
            *(_OWORD *)(v48 - 152) = v52;
            *((_QWORD *)v49 - 20) = 0;
            *(v48 - 112) = 0;
            *(v48 - 88) = 0;
            if (*((_BYTE *)v49 - 88))
            {
              v54 = (_DWORD *)((char *)v4 + v45);
              v55 = *(_OWORD *)((char *)v4 + v45 - 112);
              *((_QWORD *)v48 - 12) = *(_QWORD *)((char *)v4 + v45 - 96);
              *((_OWORD *)v48 - 7) = v55;
              *((_QWORD *)v54 - 13) = 0;
              *((_QWORD *)v54 - 12) = 0;
              *((_QWORD *)v54 - 14) = 0;
              *(v48 - 88) = 1;
            }
            v56 = (char *)v44 + v45;
            *((_QWORD *)v56 - 10) = *(_QWORD *)((char *)v4 + v45 - 80);
            v57 = (uint64_t *)((char *)v4 + v45 - 72);
            v58 = *v57;
            *(_QWORD *)((char *)v44 + v45 - 72) = *v57;
            v59 = (uint64_t)v44 + v45 - 72;
            v60 = *(_QWORD *)((char *)v4 + v45 - 64);
            *((_QWORD *)v56 - 8) = v60;
            if (v60)
            {
              *(_QWORD *)(v58 + 16) = v59;
              *(_QWORD *)((char *)v4 + v45 - 80) = v57;
              *v57 = 0;
              *(_QWORD *)((char *)v4 + v45 - 64) = 0;
            }
            else
            {
              *((_QWORD *)v56 - 10) = v59;
            }
            v46 = (char *)v44 + v45;
            *((_QWORD *)v46 - 7) = 0;
            *((_QWORD *)v46 - 6) = 0;
            *(_QWORD *)((char *)v44 + v45 - 40) = 0;
            std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>((cricket::Codec *)((char *)v44 + v45 - 56), *(_QWORD *)((char *)v4 + v45 - 56), *(_QWORD *)((char *)v4 + v45 - 48), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)((char *)v4 + v45 - 48) - *(_QWORD *)((char *)v4 + v45 - 56)) >> 4));
            v47 = *(_OWORD *)((char *)v4 + v45 - 32);
            *(_OWORD *)((char *)v44 + v45 - 23) = *(_OWORD *)((char *)v4 + v45 - 23);
            *(_OWORD *)((char *)v44 + v45 - 32) = v47;
            v45 -= 248;
          }
          while ((cricket::Codec *)((char *)v4 + v45) != v5);
          v75 = (char *)v44 + v45;
          do
          {
            v4 = (cricket::Codec *)((char *)v4 - 248);
            cricket::Codec::~Codec(v4);
          }
          while (v4 != v5);
          v4 = v5;
          v143 = &v43[v144];
          v76 = (char *)v44 + 248;
          if (!v4)
            goto LABEL_109;
        }
        operator delete(v4);
LABEL_109:
        v4 = (cricket::Codec *)v76;
        v5 = (cricket::Codec *)v75;
        goto LABEL_16;
      case 1u:
        if (v147 == -1)
        {
          v147 = v10;
          goto LABEL_16;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
          goto LABEL_16;
        v138 = v138 & 0xFFFFFFFF00000000 | 0x11FB;
        goto LABEL_46;
      case 2u:
        if (v145 == -1)
        {
          v145 = v10;
        }
        else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          v137 = v137 & 0xFFFFFFFF00000000 | 0x125B;
LABEL_46:
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
        }
        goto LABEL_16;
      case 3u:
        if (v146)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
            v136 = v136 & 0xFFFFFFFF00000000 | 0x12BB;
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
          }
          v146 = 1;
        }
        else
        {
          v146 = 1;
          v140 = v10;
        }
        goto LABEL_16;
      case 4u:
        v150 = 0;
        v152 = 3;
        if (v142)
          goto LABEL_214;
        LOWORD(__p[0]) = *(_WORD *)"apt";
        WORD1(__p[0]) = cricket::kCodecParamAssociatedPayloadType[2];
        if (cricket::Codec::GetParam((uint64_t)v3, (const void **)__p, &v150))
        {
          v38 = v150;
          if (v152 < 0)
            operator delete(__p[0]);
          if (v38 >= 0x80)
            goto LABEL_181;
          v149 = 0;
          v152 = 8;
          if (v141)
            goto LABEL_214;
          strcpy((char *)__p, "rtx-time");
          Param = cricket::Codec::GetParam((uint64_t)v3, (const void **)__p, &v149);
          if (v149 > 0)
            v40 = Param;
          else
            v40 = 0;
          if (v152 < 0)
          {
            operator delete(__p[0]);
            v41 = v150;
            if (v40)
            {
LABEL_83:
              v61 = v149;
              v62 = v154;
              v63 = &v154;
LABEL_85:
              v64 = v63;
              if (v62)
              {
                do
                {
                  v63 = (uint64_t **)v62;
                  v65 = *((_DWORD *)v62 + 7);
                  if (v41 < v65)
                  {
                    v62 = *v63;
                    goto LABEL_85;
                  }
                  if (v65 >= v41)
                    goto LABEL_93;
                  v62 = v63[1];
                }
                while (v62);
                v64 = v63 + 1;
              }
              v66 = v149;
              v67 = (uint64_t *)v63;
              v63 = (uint64_t **)operator new(0x28uLL);
              *((_DWORD *)v63 + 7) = v41;
              *((_DWORD *)v63 + 8) = 0;
              *v63 = 0;
              v63[1] = 0;
              v63[2] = v67;
              *v64 = (uint64_t *)v63;
              v68 = (uint64_t *)v63;
              if (*v153)
              {
                v153 = (uint64_t **)*v153;
                v68 = *v64;
              }
              std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v154, v68);
              ++v155;
              v41 = v150;
              v61 = v66;
LABEL_93:
              *((_DWORD *)v63 + 8) = v61;
            }
          }
          else
          {
            v41 = v150;
            if (v40)
              goto LABEL_83;
          }
          v69 = v157;
          v70 = &v157;
LABEL_96:
          v71 = v70;
          if (v69)
          {
            do
            {
              v70 = (uint64_t **)v69;
              v72 = *((_DWORD *)v69 + 7);
              if (v41 < v72)
              {
                v69 = *v70;
                goto LABEL_96;
              }
              if (v72 >= v41)
                goto LABEL_104;
              v69 = v70[1];
            }
            while (v69);
            v71 = v70 + 1;
          }
          v73 = (uint64_t *)v70;
          v70 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v70 + 7) = v41;
          *((_DWORD *)v70 + 8) = 0;
          *v70 = 0;
          v70[1] = 0;
          v70[2] = v73;
          *v71 = (uint64_t *)v70;
          v74 = (uint64_t *)v70;
          if (*v156)
          {
            v156 = (uint64_t **)*v156;
            v74 = *v71;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v157, v74);
          ++v158;
LABEL_104:
          *((_DWORD *)v70 + 8) = v10;
LABEL_16:
          v3 = (cricket::Codec *)((char *)v3 + 216);
          if (v3 == a3)
          {
            v77 = v156;
            if (v156 != &v157)
            {
              if (v160)
              {
                v78 = -1;
                while (1)
                {
                  v79 = *((_DWORD *)v77 + 7);
                  v80 = &v160;
                  v81 = v160;
                  do
                  {
                    v82 = v81;
                    v83 = v80;
                    v84 = *((_DWORD *)v81 + 7);
                    if (v84 >= v79)
                      v80 = (uint64_t **)v81;
                    else
                      ++v81;
                    v81 = (uint64_t *)*v81;
                  }
                  while (v81);
                  if (v80 == &v160)
                    break;
                  v85 = v84 >= v79 ? v82 : (uint64_t *)v83;
                  if (v79 < *((_DWORD *)v85 + 7))
                    break;
                  if (v84 < v79)
                    v82 = (uint64_t *)v83;
                  if (*((_DWORD *)v82 + 8) >= 2u)
                  {
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                      goto LABEL_178;
                    goto LABEL_191;
                  }
                  if (v79 == v147)
                    v78 = *((_DWORD *)v77 + 8);
                  v86 = v77[1];
                  if (v86)
                  {
                    do
                    {
                      v87 = (uint64_t **)v86;
                      v86 = (uint64_t *)*v86;
                    }
                    while (v86);
                  }
                  else
                  {
                    do
                    {
                      v87 = (uint64_t **)v77[2];
                      v88 = *v87 == (uint64_t *)v77;
                      v77 = v87;
                    }
                    while (!v88);
                  }
                  v77 = v87;
                  if (v87 == &v157)
                    goto LABEL_141;
                }
              }
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_178:
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v108, v109, v110, v111, v112, v113, v114, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
              goto LABEL_191;
            }
            v78 = -1;
LABEL_141:
            if (v5 != v4)
            {
              if (v146)
                v89 = v140;
              else
                v89 = -1;
              v90 = v157;
              if (v157)
              {
                v91 = v154;
                if (v154)
                {
                  v92 = v5;
                  do
                  {
                    v93 = *((_DWORD *)v92 + 3);
                    *((_DWORD *)v92 + 54) = v145;
                    *((_DWORD *)v92 + 55) = v147;
                    v94 = &v157;
                    v95 = v90;
                    *((_DWORD *)v92 + 56) = v78;
                    *((_DWORD *)v92 + 57) = v89;
                    do
                    {
                      v96 = (uint64_t **)v95;
                      v97 = v94;
                      v98 = *((_DWORD *)v95 + 7);
                      if (v98 >= v93)
                        v94 = (uint64_t **)v95;
                      else
                        ++v95;
                      v95 = (uint64_t *)*v95;
                    }
                    while (v95);
                    if (v94 != &v157)
                    {
                      v99 = v98 >= v93 ? v96 : v97;
                      if (v93 >= *((_DWORD *)v99 + 7))
                      {
                        if (v98 < v93)
                          v96 = v97;
                        *((_DWORD *)v92 + 58) = *((_DWORD *)v96 + 8);
                        v100 = &v154;
                        v101 = v91;
                        do
                        {
                          v102 = v101;
                          v103 = v100;
                          v104 = *((_DWORD *)v101 + 7);
                          if (v104 >= v93)
                            v100 = (uint64_t **)v101;
                          else
                            ++v101;
                          v101 = (uint64_t *)*v101;
                        }
                        while (v101);
                        if (v100 != &v154)
                        {
                          v105 = v104 >= v93 ? (uint64_t **)v102 : v103;
                          if (v93 >= *((_DWORD *)v105 + 7))
                          {
                            if (v104 >= v93)
                              v106 = (uint64_t **)v102;
                            else
                              v106 = v103;
                            v107 = *((_DWORD *)v106 + 8);
                            if (v107 >= 1000)
                              v107 = 1000;
                            *((_DWORD *)v92 + 59) = v107;
                            *((_BYTE *)v92 + 240) = 1;
                          }
                        }
                      }
                    }
                    v92 = (cricket::Codec *)((char *)v92 + 248);
                  }
                  while (v92 != v4);
                }
                else
                {
                  v127 = v5;
                  do
                  {
                    v128 = *((_DWORD *)v127 + 3);
                    *((_DWORD *)v127 + 54) = v145;
                    *((_DWORD *)v127 + 55) = v147;
                    v129 = &v157;
                    v130 = v90;
                    *((_DWORD *)v127 + 56) = v78;
                    *((_DWORD *)v127 + 57) = v89;
                    do
                    {
                      v131 = v130;
                      v132 = v129;
                      v133 = *((_DWORD *)v130 + 7);
                      if (v133 >= v128)
                        v129 = (uint64_t **)v130;
                      else
                        ++v130;
                      v130 = (uint64_t *)*v130;
                    }
                    while (v130);
                    if (v129 != &v157)
                    {
                      v134 = v133 >= v128 ? (uint64_t **)v131 : v132;
                      if (v128 >= *((_DWORD *)v134 + 7))
                      {
                        if (v133 >= v128)
                          v135 = (uint64_t **)v131;
                        else
                          v135 = v132;
                        *((_DWORD *)v127 + 58) = *((_DWORD *)v135 + 8);
                      }
                    }
                    v127 = (cricket::Codec *)((char *)v127 + 248);
                  }
                  while (v127 != v4);
                }
              }
              else
              {
                v122 = v4 - v5 - 248;
                v123 = v5;
                if (v122 < 0xF8)
                  goto LABEL_219;
                v124 = v122 / 0xF8 + 1;
                v123 = (cricket::Codec *)((char *)v5 + 248 * (v124 & 0x3FFFFFFFFFFFFFELL));
                v125 = (int *)((char *)v5 + 464);
                v126 = v124 & 0x3FFFFFFFFFFFFFELL;
                do
                {
                  *(v125 - 62) = v145;
                  *(v125 - 61) = v147;
                  *v125 = v145;
                  v125[1] = v147;
                  *(v125 - 60) = v78;
                  *(v125 - 59) = v89;
                  v125[2] = v78;
                  v125[3] = v89;
                  v125 += 124;
                  v126 -= 2;
                }
                while (v126);
                if (v124 != (v124 & 0x3FFFFFFFFFFFFFELL))
                {
LABEL_219:
                  do
                  {
                    *((_DWORD *)v123 + 54) = v145;
                    *((_DWORD *)v123 + 55) = v147;
                    *((_DWORD *)v123 + 56) = v78;
                    *((_DWORD *)v123 + 57) = v89;
                    v123 = (cricket::Codec *)((char *)v123 + 248);
                  }
                  while (v123 != v4);
                }
              }
            }
            *a1 = v5;
            a1[1] = v4;
            a1[2] = (cricket::Codec *)v143;
            v4 = 0;
            v5 = 0;
            goto LABEL_192;
          }
          continue;
        }
        if (v152 < 0)
          operator delete(__p[0]);
LABEL_181:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
LABEL_182:
          cricket::Codec::ToString(v3, (char *)__p);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v115, v116, v117, v118, v119, v120, v121, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
          if (v152 < 0)
            operator delete(__p[0]);
        }
LABEL_191:
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
LABEL_192:
        std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v153, v154);
        std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v156, v157);
        std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v160);
        if (v5)
        {
          while (v4 != v5)
          {
            v4 = (cricket::Codec *)((char *)v4 - 248);
            cricket::Codec::~Codec(v4);
          }
          operator delete(v5);
        }
        return;
      default:
        goto LABEL_16;
    }
  }
}

void cricket::WebRtcVideoSendChannel::~WebRtcVideoSendChannel(cricket::WebRtcVideoSendChannel *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *v8;
  char *v9;
  char *v10;
  BOOL v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void *v14;
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void (**v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  *(_QWORD *)this = &off_24C0C5D10;
  *((_QWORD *)this + 8) = &unk_24C0C5E38;
  *((_QWORD *)this + 9) = &unk_24C0C5F48;
  v2 = (char *)*((_QWORD *)this + 18);
  v3 = (char *)this + 152;
  if (v2 != (char *)this + 152)
  {
    do
    {
      v8 = (cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)*((_QWORD *)v2 + 5);
      if (v8)
      {
        cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::~WebRtcVideoSendStream(v8);
        MEMORY[0x20BD0ADEC]();
      }
      v9 = (char *)*((_QWORD *)v2 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)*((_QWORD *)v2 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v2;
          v2 = v10;
        }
        while (!v11);
      }
      v2 = v10;
    }
    while (v10 != v3);
  }
  (*((void (**)(uint64_t, char *, char *))this + 146))(1, (char *)this + 1152, (char *)this + 1152);
  (*((void (**)(uint64_t, char *, char *))this + 142))(1, (char *)this + 1120, (char *)this + 1120);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 1096, *((_QWORD **)this + 138));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 1072, *((_QWORD **)this + 135));
  v4 = *((_QWORD *)this + 127);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  cricket::StreamParams::~StreamParams((cricket::WebRtcVideoSendChannel *)((char *)this + 864));
  *((_QWORD *)this + 97) = &unk_24C0B0D28;
  v5 = *((_QWORD *)this + 101);
  if (v5)
  {
    v6 = *((_QWORD *)this + 102);
    v7 = (void *)*((_QWORD *)this + 101);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 9) < 0)
          operator delete(*(void **)(v6 - 32));
        v6 -= 32;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 101);
    }
    *((_QWORD *)this + 102) = v5;
    operator delete(v7);
  }
  v12 = (void (***)(_QWORD))*((_QWORD *)this + 98);
  if (v12)
  {
    v13 = (void (***)(_QWORD))*((_QWORD *)this + 99);
    v14 = (void *)*((_QWORD *)this + 98);
    if (v13 != v12)
    {
      v15 = v13 - 27;
      v16 = v13 - 27;
      do
      {
        v17 = *v16;
        v16 -= 27;
        (*v17)(v15);
        v11 = v15 == v12;
        v15 = v16;
      }
      while (!v11);
      v14 = (void *)*((_QWORD *)this + 98);
    }
    *((_QWORD *)this + 99) = v12;
    operator delete(v14);
  }
  cricket::VideoSenderParameters::~VideoSenderParameters((void **)this + 82);
  v18 = *((_QWORD *)this + 77);
  if (v18)
  {
    v19 = *((_QWORD *)this + 78);
    v20 = (void *)*((_QWORD *)this + 77);
    if (v19 != v18)
    {
      do
      {
        if (*(char *)(v19 - 9) < 0)
          operator delete(*(void **)(v19 - 32));
        v19 -= 32;
      }
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 77);
    }
    *((_QWORD *)this + 78) = v18;
    operator delete(v20);
  }
  v21 = *((_QWORD *)this + 71);
  if (v21)
  {
    v22 = *((_QWORD *)this + 72);
    v23 = (void *)*((_QWORD *)this + 71);
    if (v22 != v21)
    {
      do
        cricket::Codec::~Codec((cricket::Codec *)(v22 - 248));
      while (v22 != v21);
      v23 = (void *)*((_QWORD *)this + 71);
    }
    *((_QWORD *)this + 72) = v21;
    operator delete(v23);
  }
  v24 = *((_QWORD *)this + 65);
  if (v24)
  {
    v25 = *((_QWORD *)this + 66);
    v26 = (void *)*((_QWORD *)this + 65);
    if (v25 != v24)
    {
      do
      {
        if (*(char *)(v25 - 9) < 0)
          operator delete(*(void **)(v25 - 32));
        v25 -= 32;
      }
      while (v25 != v24);
      v26 = (void *)*((_QWORD *)this + 65);
    }
    *((_QWORD *)this + 66) = v24;
    operator delete(v26);
  }
  v27 = *((_QWORD *)this + 62);
  if (v27)
  {
    v28 = *((_QWORD *)this + 63);
    v29 = (void *)*((_QWORD *)this + 62);
    if (v28 != v27)
    {
      do
        cricket::Codec::~Codec((cricket::Codec *)(v28 - 248));
      while (v28 != v27);
      v29 = (void *)*((_QWORD *)this + 62);
    }
    *((_QWORD *)this + 63) = v27;
    operator delete(v29);
  }
  if (*((_BYTE *)this + 488))
    cricket::Codec::~Codec((cricket::WebRtcVideoSendChannel *)((char *)this + 240));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 216, *((_QWORD **)this + 28));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 192, *((_QWORD **)this + 25));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 19));
  v30 = *((_QWORD *)this + 11);
  *(_BYTE *)(v30 + 4) = 0;
  do
  {
    v31 = __ldaxr((unsigned int *)v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, (unsigned int *)v30));
  if (!v32)
    MEMORY[0x20BD0ADEC]();
  *(_QWORD *)this = &off_24C0B69D8;
  *((_QWORD *)this + 2) = off_24C0B6A50;
  v33 = (unsigned int *)*((_QWORD *)this + 3);
  if (v33)
  {
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      MEMORY[0x20BD0ADEC]();
  }
}

{
  cricket::WebRtcVideoSendChannel::~WebRtcVideoSendChannel(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::~WebRtcVideoSendChannel(cricket::WebRtcVideoSendChannel *this)
{
  cricket::WebRtcVideoSendChannel::~WebRtcVideoSendChannel((cricket::WebRtcVideoSendChannel *)((char *)this - 64));
}

{
  cricket::WebRtcVideoSendChannel::~WebRtcVideoSendChannel((cricket::WebRtcVideoSendChannel *)((char *)this - 72));
}

{
  cricket::WebRtcVideoSendChannel::~WebRtcVideoSendChannel((cricket::WebRtcVideoSendChannel *)((char *)this - 64));
  JUMPOUT(0x20BD0ADECLL);
}

{
  cricket::WebRtcVideoSendChannel::~WebRtcVideoSendChannel((cricket::WebRtcVideoSendChannel *)((char *)this - 72));
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::ConfigureVideoEncoderSettings(cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *this, const cricket::Codec *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *v9;
  int v10;
  _BOOL4 v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  BOOL v30;
  int v31;
  unsigned __int8 v32;
  int v33;
  unsigned __int8 v34;
  int v35;
  unsigned __int8 v36;
  int v37;
  char v38;
  char v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  unsigned __int8 v43;
  int v44;
  unsigned __int8 v45;
  int v46;
  unsigned __int8 v47;
  _QWORD *result;
  uint64_t v49;
  unsigned int *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  int v53;
  unsigned __int8 v54;
  int v55;
  unsigned __int8 v56;
  int v57;
  char v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  size_t v62;
  int v63;
  std::string *v64;
  size_t v65;
  int v66;
  unsigned __int8 v67;
  int v68;
  unsigned __int8 v69;
  int v70;
  unsigned __int8 v71;
  uint64_t v72;
  size_t v73;
  std::string *p_s2;
  size_t size;
  uint64_t j;
  char v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char **v83;
  char *v84;
  char **v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *p_p;
  int v90;
  const void **v91;
  char *v92;
  uint64_t **v93;
  char *v94;
  std::string *v95;
  __int128 v96;
  std::string::size_type v97;
  uint64_t *v98;
  char **v99;
  uint64_t i;
  char v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  std::string *v109;
  int v110;
  unint64_t v111;
  cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *v112;
  char **v113;
  char *v114[2];
  std::string __s2;
  void *v116;
  char v117;
  unsigned int v118;
  char *v119[3];
  _QWORD *v120[3];
  void (**v121)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v122;
  void *v123;
  uint64_t v124;
  void *v125[2];
  char v126;
  __int16 v127;
  void *__p;
  uint64_t v129;
  uint64_t v130;
  void (**v131)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v132;
  void *v133;
  uint64_t v134;
  void *v135[2];
  char v136;
  int v137;
  void *v138[2];
  char v139;
  int v140;
  const void ***v141;
  std::string *v142;
  void (***v143)(webrtc::FieldTrialParameterInterface *__hidden);
  uint64_t v144;

  v9 = this;
  v144 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 469))
  {
    v10 = *((unsigned __int8 *)a2 + 468);
    if (*((unsigned __int8 *)a2 + 1121) | v10)
      goto LABEL_3;
  }
  else
  {
    v10 = 0;
    if (*((_BYTE *)a2 + 1121))
    {
LABEL_3:
      v11 = 0;
      if (v10)
        goto LABEL_4;
LABEL_22:
      v17 = *((unsigned __int8 *)a2 + 457);
      if (*((_BYTE *)a2 + 457))
        goto LABEL_23;
      goto LABEL_9;
    }
  }
  if (*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11) == 4)
  {
    v11 = 1;
    v17 = *((unsigned __int8 *)a2 + 457);
    if (*((_BYTE *)a2 + 457))
    {
LABEL_23:
      v18 = *((unsigned __int8 *)a2 + 456);
LABEL_24:
      if (v17)
        v30 = v18 == 0;
      else
        v30 = 0;
      v12 = !v30;
      v13 = (unsigned __int8 *)(a3 + 16);
      v14 = *(unsigned __int8 *)(a3 + 39);
      v15 = (unsigned __int8 *)(a3 + 16);
      v16 = v14;
      if ((*(char *)(a3 + 39) & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_31;
    }
LABEL_9:
    v18 = 0;
    goto LABEL_24;
  }
  v19 = *((_QWORD *)a2 + 131);
  v20 = *((_QWORD *)a2 + 132) - v19;
  if (!v20)
  {
    v23 = 0;
    goto LABEL_21;
  }
  v21 = v20 / 272;
  if (v21 <= 1)
    v21 = 1;
  if (v21 < 2)
  {
    v22 = 0;
    v23 = 0;
LABEL_19:
    v28 = v21 - v22;
    v29 = (unsigned __int8 *)(v19 + 272 * v22 + 124);
    do
    {
      v23 += *v29;
      v29 += 272;
      --v28;
    }
    while (v28);
    goto LABEL_21;
  }
  v24 = 0;
  v25 = 0;
  v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
  v26 = v21 & 0xFFFFFFFFFFFFFFFELL;
  v27 = *((_QWORD *)a2 + 131);
  do
  {
    v24 += *(unsigned __int8 *)(v27 + 124);
    v25 += *(unsigned __int8 *)(v27 + 396);
    v27 += 544;
    v26 -= 2;
  }
  while (v26);
  v23 = v25 + v24;
  if (v21 != v22)
    goto LABEL_19;
LABEL_21:
  v11 = v23 == 1;
  if (!v10)
    goto LABEL_22;
LABEL_4:
  v12 = 0;
  v13 = (unsigned __int8 *)(a3 + 16);
  v14 = *(unsigned __int8 *)(a3 + 39);
  v15 = (unsigned __int8 *)(a3 + 16);
  v16 = v14;
  if ((*(char *)(a3 + 39) & 0x80000000) == 0)
    goto LABEL_34;
LABEL_31:
  v16 = *(_QWORD *)(a3 + 24);
  if (v16 < 0)
    goto LABEL_258;
  v15 = *(unsigned __int8 **)v13;
  if (v16)
  {
    if (!v15)
      goto LABEL_258;
  }
LABEL_34:
  if (v16 == 4)
  {
    v31 = *v15;
    v32 = cricket::kH264CodecName[0];
    if (v31 == cricket::kH264CodecName[0])
      goto LABEL_41;
    if ((v31 - 65) < 0x1A)
      LOBYTE(v31) = v31 + 32;
    if (cricket::kH264CodecName[0] - 65 < 0x1A)
      v32 = cricket::kH264CodecName[0] + 32;
    if (v31 == v32)
    {
LABEL_41:
      v33 = v15[1];
      v34 = cricket::kH264CodecName[1];
      if (v33 == cricket::kH264CodecName[1])
        goto LABEL_59;
      if ((v33 - 65) < 0x1A)
        LOBYTE(v33) = v33 + 32;
      if (cricket::kH264CodecName[1] - 65 < 0x1A)
        v34 = cricket::kH264CodecName[1] + 32;
      if (v33 == v34)
      {
LABEL_59:
        v35 = v15[2];
        v36 = cricket::kH264CodecName[2];
        if (v35 == cricket::kH264CodecName[2])
          goto LABEL_262;
        if ((v35 - 65) < 0x1A)
          LOBYTE(v35) = v35 + 32;
        if (cricket::kH264CodecName[2] - 65 < 0x1A)
          v36 = cricket::kH264CodecName[2] + 32;
        if (v35 == v36)
        {
LABEL_262:
          v37 = v15[3];
          v38 = cricket::kH264CodecName[3];
          if (v37 == cricket::kH264CodecName[3])
            goto LABEL_142;
          if ((v37 - 65) >= 0x1A)
            v39 = v37;
          else
            v39 = v37 + 32;
          if (cricket::kH264CodecName[3] - 65 < 0x1A)
            v38 = cricket::kH264CodecName[3] + 32;
          if (v39 == v38)
            goto LABEL_142;
        }
      }
    }
  }
  v40 = v13;
  v41 = v14;
  if ((v14 & 0x80) != 0)
  {
    v41 = *(_QWORD *)(a3 + 24);
    if (v41 < 0)
      goto LABEL_258;
    v40 = *(unsigned __int8 **)v13;
    if (v41)
    {
      if (!v40)
        goto LABEL_258;
    }
  }
  if (v41 == 3)
  {
    v42 = *v40;
    v43 = cricket::kVp8CodecName;
    if (v42 == cricket::kVp8CodecName)
      goto LABEL_71;
    if ((v42 - 65) < 0x1A)
      LOBYTE(v42) = v42 + 32;
    if (cricket::kVp8CodecName - 65 < 0x1A)
      v43 = cricket::kVp8CodecName + 32;
    if (v42 == v43)
    {
LABEL_71:
      v44 = v40[1];
      v45 = HIBYTE(cricket::kVp8CodecName);
      if (v44 == HIBYTE(cricket::kVp8CodecName))
        goto LABEL_81;
      if ((v44 - 65) < 0x1A)
        LOBYTE(v44) = v44 + 32;
      if (HIBYTE(cricket::kVp8CodecName) - 65 < 0x1A)
        v45 = HIBYTE(cricket::kVp8CodecName) + 32;
      if (v44 == v45)
      {
LABEL_81:
        v46 = v40[2];
        if (v46 == 56 || ((v46 - 65) >= 0x1A ? (v47 = v40[2]) : (v47 = v46 + 32), v47 == 56))
        {
          result = (_QWORD *)operator new();
          v49 = 256;
          if (!v12)
            v49 = 0;
          *result = off_24C0C61C8;
          result[1] = v49 | ((unint64_t)v11 << 16) | 0xBB800000001;
          v50 = (unsigned int *)(result + 2);
          goto LABEL_253;
        }
      }
    }
  }
  v51 = v13;
  v52 = v14;
  if ((v14 & 0x80) != 0)
  {
    v52 = *(_QWORD *)(a3 + 24);
    if (v52 < 0)
      goto LABEL_258;
    v51 = *(unsigned __int8 **)v13;
    if (v52)
    {
      if (!v51)
        goto LABEL_258;
    }
  }
  if (v52 != 3)
    goto LABEL_118;
  v53 = *v51;
  v54 = cricket::kVp9CodecName;
  if (v53 != cricket::kVp9CodecName)
  {
    if ((v53 - 65) < 0x1A)
      LOBYTE(v53) = v53 + 32;
    if (cricket::kVp9CodecName - 65 < 0x1A)
      v54 = cricket::kVp9CodecName + 32;
    if (v53 != v54)
      goto LABEL_118;
  }
  v55 = v51[1];
  v56 = HIBYTE(cricket::kVp9CodecName);
  if (v55 != HIBYTE(cricket::kVp9CodecName))
  {
    if ((v55 - 65) < 0x1A)
      LOBYTE(v55) = v55 + 32;
    if (HIBYTE(cricket::kVp9CodecName) - 65 < 0x1A)
      v56 = HIBYTE(cricket::kVp9CodecName) + 32;
    if (v55 != v56)
      goto LABEL_118;
  }
  v57 = v51[2];
  if (v57 != 57)
  {
    v58 = (v57 - 65) >= 0x1A ? v51[2] : v57 + 32;
    if (v58 != 57)
    {
LABEL_118:
      if ((v14 & 0x80) != 0)
      {
        v14 = *(_QWORD *)(a3 + 24);
        if (v14 < 0)
          goto LABEL_258;
        v13 = *(unsigned __int8 **)v13;
        if (v14)
        {
          if (!v13)
            goto LABEL_258;
        }
      }
      if (v14 == 3)
      {
        v66 = *v13;
        v67 = cricket::kAv1CodecName;
        if (v66 == cricket::kAv1CodecName)
          goto LABEL_126;
        if ((v66 - 65) < 0x1A)
          LOBYTE(v66) = v66 + 32;
        if (cricket::kAv1CodecName - 65 < 0x1A)
          v67 = cricket::kAv1CodecName + 32;
        if (v66 == v67)
        {
LABEL_126:
          v68 = v13[1];
          v69 = HIBYTE(cricket::kAv1CodecName);
          if (v68 == HIBYTE(cricket::kAv1CodecName))
            goto LABEL_136;
          if ((v68 - 65) < 0x1A)
            LOBYTE(v68) = v68 + 32;
          if (HIBYTE(cricket::kAv1CodecName) - 65 < 0x1A)
            v69 = HIBYTE(cricket::kAv1CodecName) + 32;
          if (v68 == v69)
          {
LABEL_136:
            v70 = v13[2];
            if (v70 == 49 || ((v70 - 65) >= 0x1A ? (v71 = v13[2]) : (v71 = v70 + 32), v71 == 49))
            {
              v72 = *((_QWORD *)a2 + 131);
              if (*((_QWORD *)a2 + 132) == v72)
              {
LABEL_222:
                result = (_QWORD *)operator new();
                *((_BYTE *)result + 8) = v11;
                *result = off_24C0C6298;
                v50 = (unsigned int *)result + 3;
LABEL_253:
                *v50 = 0;
                do
                  v108 = __ldxr(v50);
                while (__stxr(v108 + 1, v50));
                goto LABEL_255;
              }
              if (*(_BYTE *)(v72 + 104))
              {
                if (*(char *)(v72 + 103) < 0)
                {
                  std::string::__init_copy_ctor_external(&__s2, *(const std::string::value_type **)(v72 + 80), *(_QWORD *)(v72 + 88));
                  v73 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
                  if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_141;
                }
                else
                {
                  __s2 = *(std::string *)(v72 + 80);
                  v73 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
                  if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_141:
                    p_s2 = &__s2;
                    size = v73;
LABEL_211:
                    for (i = 0; i != 1632; i += 48)
                    {
                      {
                        v101 = 0;
                        goto LABEL_217;
                      }
                    }
                    v102 = 0;
                    v101 = 1;
LABEL_217:
                    if ((v73 & 0x80) != 0)
                      operator delete(__s2.__r_.__value_.__l.__data_);
                    if ((v101 & 1) == 0
                      && (int)webrtc::ScalabilityModeToNumSpatialLayers(v102, (uint64_t)a2, a3, a4, a5, a6, a7, a8) > 1)
                    {
                      LOBYTE(v11) = 0;
                    }
                    goto LABEL_222;
                  }
                }
                size = __s2.__r_.__value_.__l.__size_;
                if ((__s2.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                  goto LABEL_258;
                p_s2 = (std::string *)__s2.__r_.__value_.__r.__words[0];
                if (__s2.__r_.__value_.__l.__size_)
                {
                  if (!__s2.__r_.__value_.__r.__words[0])
                    goto LABEL_258;
                }
                goto LABEL_211;
              }
              *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 0;
              __s2.__r_.__value_.__s.__data_[0] = 0;
              v73 = 0;
              goto LABEL_141;
            }
          }
        }
      }
LABEL_142:
      result = 0;
LABEL_255:
      *(_QWORD *)v9 = result;
      return result;
    }
  }
  v59 = *((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11);
  if ((v59 >> 2) >= 3u)
    v60 = 3;
  else
    v60 = (v59 >> 2);
  v61 = *((_QWORD *)a2 + 131);
  if (*((_QWORD *)a2 + 132) == v61)
    goto LABEL_161;
  if (!*(_BYTE *)(v61 + 104))
  {
    *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 0;
    __s2.__r_.__value_.__s.__data_[0] = 0;
    v62 = 0;
    v111 = v59;
    v112 = this;
    goto LABEL_114;
  }
  if (*(char *)(v61 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(&__s2, *(const std::string::value_type **)(v61 + 80), *(_QWORD *)(v61 + 88));
    v62 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
    v111 = v59;
    v112 = v9;
    if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_114;
  }
  else
  {
    __s2 = *(std::string *)(v61 + 80);
    v62 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
    v111 = v59;
    v112 = this;
    if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_114:
      v63 = v12;
      v64 = &__s2;
      v65 = v62;
      goto LABEL_147;
    }
  }
  v65 = __s2.__r_.__value_.__l.__size_;
  if ((__s2.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_258;
  v64 = (std::string *)__s2.__r_.__value_.__r.__words[0];
  v63 = v12;
  if (__s2.__r_.__value_.__l.__size_)
  {
    if (!__s2.__r_.__value_.__r.__words[0])
      goto LABEL_258;
  }
LABEL_147:
  for (j = 0; j != 1632; j += 48)
  {
    {
      v77 = 0;
      goto LABEL_153;
    }
  }
  v78 = 0;
  v77 = 1;
LABEL_153:
  if ((v62 & 0x80) != 0)
  {
    operator delete(__s2.__r_.__value_.__l.__data_);
    if ((v77 & 1) != 0)
    {
LABEL_160:
      v12 = v63;
      v59 = v111;
      v9 = v112;
LABEL_161:
      v79 = 256;
      if (!v11)
        v79 = 0;
      v80 = v79 | (v60 << 16) | 1;
      if (v10)
      {
        v81 = 0x100000000;
        if (v60 > 1)
          v81 = 0x101000000;
        v82 = v81 | *(_QWORD *)&v80 & 0x30101;
LABEL_248:
        result = (_QWORD *)operator new();
        v106 = 0xBB800000100;
        if (!v12)
          v106 = 0xBB800000000;
        v107 = 3;
        if (v59 <= 4)
          v107 = 1;
        result[1] = v107 | v106;
        result[2] = v82;
        *result = off_24C0C6248;
        v50 = (unsigned int *)(result + 3);
        goto LABEL_253;
      }
      v121 = off_24C0B4170;
      v122 = 0;
      v123 = 0;
      v124 = 0;
      v126 = 7;
      if (v125 <= (void **)"Enabled" && (char *)v125 + 7 > "Enabled")
        goto LABEL_258;
      strcpy((char *)v125, "Enabled");
      v127 = 0;
      v121 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B41A0;
      HIBYTE(v133) = 3;
      if (&v131 <= (void (***)(webrtc::FieldTrialParameterInterface *__hidden))"off"
        && (char *)&v131 + 3 > "off")
      {
        goto LABEL_258;
      }
      LODWORD(v131) = 6710895;
      LODWORD(v134) = 0;
      v136 = 2;
      if (v135 <= (void **)"on" && (char *)v135 + 2 > "on")
        goto LABEL_258;
      v110 = v79 | (v60 << 16) | 1;
      strcpy((char *)v135, "on");
      v137 = 1;
      v139 = 8;
      if (v138 <= (void **)"onkeypic" && &v138[1] > (void **)"onkeypic")
        goto LABEL_258;
      strcpy((char *)v138, "onkeypic");
      v140 = 2;
      v114[0] = 0;
      v114[1] = 0;
      v113 = v114;
      std::__tree<std::__value_type<std::string,webrtc::InterLayerPredMode>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::InterLayerPredMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::InterLayerPredMode>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,webrtc::InterLayerPredMode> const&>((uint64_t)&v113, (uint64_t *)v114, (uint64_t)&v131, (uint64_t)&v131);
      std::__tree<std::__value_type<std::string,webrtc::InterLayerPredMode>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::InterLayerPredMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::InterLayerPredMode>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,webrtc::InterLayerPredMode> const&>((uint64_t)&v113, (uint64_t *)v114, (uint64_t)v135, (uint64_t)v135);
      std::__tree<std::__value_type<std::string,webrtc::InterLayerPredMode>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::InterLayerPredMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::InterLayerPredMode>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,webrtc::InterLayerPredMode> const&>((uint64_t)&v113, (uint64_t *)v114, (uint64_t)v138, (uint64_t)v138);
      v129 = 0;
      v130 = 0;
      __p = &v129;
      v83 = v113;
      if (v113 == v114)
      {
        v142 = 0;
        v143 = 0;
        v141 = (const void ***)&v142;
        goto LABEL_185;
      }
      do
      {
        std::__tree<std::__value_type<std::string,webrtc::InterLayerPredMode>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::InterLayerPredMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::InterLayerPredMode>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,webrtc::InterLayerPredMode> const&>((uint64_t)&__p, &v129, (uint64_t)(v83 + 4), (uint64_t)(v83 + 4));
        v84 = v83[1];
        if (v84)
        {
          do
          {
            v85 = (char **)v84;
            v84 = *(char **)v84;
          }
          while (v84);
        }
        else
        {
          do
          {
            v85 = (char **)v83[2];
            v30 = *v85 == (char *)v83;
            v83 = v85;
          }
          while (!v30);
        }
        v83 = v85;
      }
      while (v85 != v114);
      v86 = (char *)__p;
      v142 = 0;
      v143 = 0;
      v141 = (const void ***)&v142;
      if (__p == &v129)
      {
LABEL_185:
        webrtc::AbstractFieldTrialEnum::AbstractFieldTrialEnum((uint64_t)&__s2, "inter_layer_pred_mode", 0x15uLL, 2, (const void ***)&v141);
        std::__tree<rtc::SocketAddress>::destroy((uint64_t)&v141, (char *)v142);
        std::__tree<std::__value_type<std::string,webrtc::StatsReport *>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::StatsReport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::StatsReport *>>>::destroy((char *)v129);
        __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C0C6218;
        std::__tree<std::__value_type<std::string,webrtc::StatsReport *>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::StatsReport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::StatsReport *>>>::destroy(v114[0]);
        if (v139 < 0)
        {
          operator delete(v138[0]);
          if ((v136 & 0x80000000) == 0)
          {
LABEL_187:
            if ((SHIBYTE(v133) & 0x80000000) == 0)
            {
LABEL_188:
              v131 = off_24C0B4170;
              v132 = 0;
              v133 = 0;
              v134 = 0;
              v136 = 12;
              if (v135 > (void **)"FlexibleMode" || (char *)&v135[1] + 4 <= "FlexibleMode")
              {
                strcpy((char *)v135, "FlexibleMode");
                LOWORD(v137) = 0;
                v131 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B41A0;
                v141 = (const void ***)&v121;
                v142 = &__s2;
                v143 = &v131;
                v87 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 7) + 184))(*((_QWORD *)a2 + 7));
                (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v87 + 16))(&__p, v87, "WebRTC-Vp9InterLayerPred", 24);
                if ((SHIBYTE(v130) & 0x80000000) == 0)
                {
                  v88 = HIBYTE(v130);
                  p_p = (char *)&__p;
LABEL_231:
                  webrtc::ParseFieldTrial(&v141, 3, p_p, v88);
                  if (SHIBYTE(v130) < 0)
                    operator delete(__p);
                  if (HIBYTE(v127))
                    v103 = (unint64_t)v118 << 32;
                  else
                    v103 = 0x200000000;
                  v104 = BYTE1(v137);
                  v131 = off_24C0B4170;
                  if (v136 < 0)
                    operator delete(v135[0]);
                  if (v132)
                  {
                    v133 = v132;
                    operator delete(v132);
                  }
                  __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C0B41D0;
                  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)v120, v120[1]);
                  std::__tree<rtc::SocketAddress>::destroy((uint64_t)v119, v119[1]);
                  __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C0B4170;
                  if (v117 < 0)
                    operator delete(v116);
                  if (__s2.__r_.__value_.__l.__size_)
                  {
                    __s2.__r_.__value_.__r.__words[2] = __s2.__r_.__value_.__l.__size_;
                    operator delete((void *)__s2.__r_.__value_.__l.__size_);
                  }
                  v105 = *(_QWORD *)&v110 & 0x30101 | v103;
                  v121 = off_24C0B4170;
                  if (v126 < 0)
                    operator delete(v125[0]);
                  v82 = v105 | (v104 << 24);
                  if (v122)
                  {
                    v123 = v122;
                    operator delete(v122);
                  }
                  goto LABEL_248;
                }
                v88 = v129;
                if ((v129 & 0x8000000000000000) == 0)
                {
                  p_p = (char *)__p;
                  if (!v129 || __p)
                    goto LABEL_231;
                }
              }
LABEL_258:
              __break(1u);
            }
LABEL_227:
            operator delete(v131);
            goto LABEL_188;
          }
        }
        else if ((v136 & 0x80000000) == 0)
        {
          goto LABEL_187;
        }
        operator delete(v135[0]);
        if ((SHIBYTE(v133) & 0x80000000) == 0)
          goto LABEL_188;
        goto LABEL_227;
      }
      while (1)
      {
        v90 = *((_DWORD *)v86 + 14);
        v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v141, &__s2, (const void **)v86 + 4);
        if (*v91)
        {
          *((_DWORD *)*v91 + 14) = v90;
          v92 = (char *)*((_QWORD *)v86 + 1);
          if (v92)
            goto LABEL_202;
        }
        else
        {
          v93 = (uint64_t **)v91;
          v94 = (char *)operator new(0x40uLL);
          v95 = (std::string *)(v94 + 32);
          if (v86[55] < 0)
          {
            std::string::__init_copy_ctor_external(v95, *((const std::string::value_type **)v86 + 4), *((_QWORD *)v86 + 5));
          }
          else
          {
            v96 = *((_OWORD *)v86 + 2);
            *((_QWORD *)v94 + 6) = *((_QWORD *)v86 + 6);
            *(_OWORD *)&v95->__r_.__value_.__l.__data_ = v96;
          }
          *((_DWORD *)v94 + 14) = 0;
          v97 = __s2.__r_.__value_.__r.__words[0];
          *(_QWORD *)v94 = 0;
          *((_QWORD *)v94 + 1) = 0;
          *((_QWORD *)v94 + 2) = v97;
          *v93 = (uint64_t *)v94;
          v98 = (uint64_t *)v94;
          if (*v141)
          {
            v141 = (const void ***)*v141;
            v98 = *v93;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v142, v98);
          v143 = (void (***)(webrtc::FieldTrialParameterInterface *__hidden))((char *)v143 + 1);
          *((_DWORD *)v94 + 14) = v90;
          v92 = (char *)*((_QWORD *)v86 + 1);
          if (v92)
          {
            do
            {
LABEL_202:
              v99 = (char **)v92;
              v92 = *(char **)v92;
            }
            while (v92);
            goto LABEL_192;
          }
        }
        do
        {
          v99 = (char **)*((_QWORD *)v86 + 2);
          v30 = *v99 == v86;
          v86 = (char *)v99;
        }
        while (!v30);
LABEL_192:
        v86 = (char *)v99;
        if (v99 == (char **)&v129)
          goto LABEL_185;
      }
    }
  }
  else if ((v77 & 1) != 0)
  {
    goto LABEL_160;
  }
  if (v78 < 0x22)
  {
      v11 = 0;
    goto LABEL_160;
  }
  v109 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/svc/scalability_mode_util.cc", 309, "index < kNumScalabilityModes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, v78);
  return (_QWORD *)webrtc::FieldTrialEnum<webrtc::InterLayerPredMode>::~FieldTrialEnum((uint64_t)v109);
}

uint64_t webrtc::FieldTrialEnum<webrtc::InterLayerPredMode>::~FieldTrialEnum(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C0B41D0;
  std::__tree<sigslot::_signal_base_interface *>::destroy(a1 + 88, *(_QWORD **)(a1 + 96));
  std::__tree<rtc::SocketAddress>::destroy(a1 + 64, *(char **)(a1 + 72));
  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void cricket::`anonymous namespace'::ValidateCodecFormats(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *p_p_new_stuff;
  std::string::size_type v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t size;
  BOOL v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v31;
  std::string::size_type v32;
  std::string *v33;
  _WORD *v34;
  std::string::size_type v35;
  std::string::size_type v36;
  int v37;
  std::string::size_type v38;
  std::string *v39;
  _BYTE *v40;
  std::string::size_type v41;
  std::string __p_new_stuff;
  std::string v43;

  v2 = *a1;
  if (a1[1] == *a1)
    goto LABEL_28;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    if (!cricket::Codec::ValidateCodecFormat((cricket::Codec *)(v2 + v3)))
      return;
    v7 = *a1;
    if (0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3) <= v4)
      goto LABEL_100;
    v8 = v7 + v3;
    if (cricket::Codec::GetResiliencyType(v7 + v3))
    {
      v6 = 0;
    }
    else
    {
      v9 = (unsigned __int8 *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
      {
        v10 = *(_QWORD *)(v7 + v3 + 24);
        if (v10 < 0)
          goto LABEL_100;
        v9 = *(unsigned __int8 **)v9;
        if (v10 && v9 == 0)
          goto LABEL_100;
      }
      else
      {
        v10 = *(unsigned __int8 *)(v8 + 39);
      }
      if (v10 == 2)
      {
        v12 = *v9;
        if (v12 == 67)
          goto LABEL_20;
        if ((v12 - 65) < 0x1A)
          LOBYTE(v12) = v12 + 32;
        v13 = v12 - 99;
        if (!v13)
        {
LABEL_20:
          v14 = v9[1];
          if (v14 == 78)
            goto LABEL_24;
          if ((v14 - 65) < 0x1A)
            LOBYTE(v14) = v14 + 32;
          v13 = v14 - 110;
          if (v14 == 110)
LABEL_24:
            v13 = 0;
        }
        v6 = v13 != 0;
      }
      else
      {
        v6 = 1;
      }
    }
    v5 |= v6;
    ++v4;
    v2 = *a1;
    v3 += 216;
  }
  while (v4 < 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3));
  if ((v5 & 1) == 0)
  {
LABEL_28:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      memset(&v43, 0, sizeof(v43));
      if (&v43 > (std::string *)"{" || (char *)&v43.__r_.__value_.__l.__data_ + 1 <= "{")
      {
        LOWORD(v43.__r_.__value_.__l.__data_) = 123;
        LODWORD(v21) = 1;
        *((_BYTE *)&v43.__r_.__value_.__s + 23) = 1;
        v22 = *a1;
        if (a1[1] != *a1)
        {
          v23 = 0;
          v24 = 0;
          while (1)
          {
            cricket::Codec::ToString((cricket::Codec *)(v22 + v23), (char *)&__p_new_stuff);
            if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
            {
              size = __p_new_stuff.__r_.__value_.__l.__size_;
              if ((__p_new_stuff.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                goto LABEL_100;
              p_p_new_stuff = (std::string *)__p_new_stuff.__r_.__value_.__r.__words[0];
              v26 = __p_new_stuff.__r_.__value_.__l.__size_ == 0;
              if (__p_new_stuff.__r_.__value_.__l.__size_)
              {
                if (!__p_new_stuff.__r_.__value_.__r.__words[0])
                  goto LABEL_100;
              }
            }
            else
            {
              size = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
              v26 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) == 0;
              p_p_new_stuff = &__p_new_stuff;
            }
            if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v27 = 22;
            else
              v27 = (v43.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v28 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
            else
              v28 = v43.__r_.__value_.__l.__size_;
            if (v27 - v28 >= size)
            {
              if (!v26)
              {
                if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v29 = &v43;
                else
                  v29 = (std::string *)v43.__r_.__value_.__r.__words[0];
                if ((std::string *)((char *)v29 + v28) <= p_p_new_stuff
                  && (std::string *)((char *)v29 + v28 + size) > p_p_new_stuff)
                {
                  goto LABEL_100;
                }
                memmove((char *)v29 + v28, p_p_new_stuff, size);
                v31 = v28 + size;
                if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                  v43.__r_.__value_.__l.__size_ = v28 + size;
                else
                  *((_BYTE *)&v43.__r_.__value_.__s + 23) = v31 & 0x7F;
                v29->__r_.__value_.__s.__data_[v31] = 0;
              }
            }
            else
            {
              std::string::__grow_by_and_replace(&v43, v27, v28 + size - v27, v28, v28, 0, size, (const std::string::value_type *)p_p_new_stuff);
            }
            if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p_new_stuff.__r_.__value_.__l.__data_);
              if (v24 != -1 - 0x7B425ED097B425EDLL * ((a1[1] - *a1) >> 3))
              {
LABEL_64:
                if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v32 = 22;
                else
                  v32 = (v43.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v16 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
                else
                  v16 = v43.__r_.__value_.__l.__size_;
                if (v32 - v16 < 2)
                {
                  std::string::__grow_by_and_replace(&v43, v32, v16 - v32 + 2, v16, v16, 0, 2uLL, ", ");
                }
                else
                {
                  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v33 = &v43;
                  else
                    v33 = (std::string *)v43.__r_.__value_.__r.__words[0];
                  v34 = (_WORD *)((char *)v33 + v16);
                  if ((char *)v33 + v16 <= ", " && v34 + 1 > (_WORD *)", ")
                    goto LABEL_100;
                  *v34 = 8236;
                  v35 = v16 + 2;
                  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                    v43.__r_.__value_.__l.__size_ = v16 + 2;
                  else
                    *((_BYTE *)&v43.__r_.__value_.__s + 23) = v35 & 0x7F;
                  v33->__r_.__value_.__s.__data_[v35] = 0;
                }
              }
            }
            else if (v24 != -1 - 0x7B425ED097B425EDLL * ((a1[1] - *a1) >> 3))
            {
              goto LABEL_64;
            }
            ++v24;
            v22 = *a1;
            v23 += 216;
            if (v24 >= 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3))
            {
              LODWORD(v21) = HIBYTE(v43.__r_.__value_.__r.__words[2]);
              v36 = v43.__r_.__value_.__l.__size_;
              goto LABEL_82;
            }
          }
        }
        v36 = 0;
LABEL_82:
        v37 = (char)v21;
        v21 = v21;
        if ((v21 & 0x80u) == 0)
          v38 = 22;
        else
          v38 = (v43.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v21 & 0x80u) != 0)
          v21 = v36;
        if (v38 == v21)
        {
          std::string::__grow_by_and_replace(&v43, v38, 1uLL, v38, v38, 0, 1uLL, "}");
LABEL_97:
          __p_new_stuff = v43;
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v38, v15, v16, v17, v18, v19, (uint64_t)p_p_new_stuff, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
          if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p_new_stuff.__r_.__value_.__l.__data_);
          return;
        }
        v39 = (std::string *)v43.__r_.__value_.__r.__words[0];
        if (v37 >= 0)
          v39 = &v43;
        v40 = (char *)v39 + v21;
        if ((char *)v39 + v21 > "}" || v40 + 1 <= "}")
        {
          *v40 = 125;
          v41 = v21 + 1;
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            v43.__r_.__value_.__l.__size_ = v41;
          else
            *((_BYTE *)&v43.__r_.__value_.__s + 23) = v41 & 0x7F;
          v39->__r_.__value_.__s.__data_[v41] = 0;
          goto LABEL_97;
        }
      }
LABEL_100:
      __break(1u);
    }
  }
}

__n128 std::optional<cricket::VideoCodecSettings>::operator=[abi:sn180100]<cricket::VideoCodecSettings&,void>(cricket::Codec *a1, const cricket::Codec *a2)
{
  _BYTE *v2;
  char *v3;
  __n128 result;
  cricket::Codec *v5;

  v2 = (char *)a1 + 216;
  v3 = (char *)a2 + 216;
  if (*((_BYTE *)a1 + 248))
  {
    cricket::Codec::operator=((uint64_t)a1, (uint64_t)a2);
    result = *(__n128 *)v3;
    *(_OWORD *)(v2 + 9) = *(_OWORD *)(v3 + 9);
    *(__n128 *)v2 = result;
  }
  else
  {
    v5 = cricket::Codec::Codec(a1, a2);
    result = *(__n128 *)v3;
    *(_OWORD *)(v2 + 9) = *(_OWORD *)(v3 + 9);
    *(__n128 *)v2 = result;
    *((_BYTE *)v5 + 248) = 1;
  }
  return result;
}

void cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::SetRtpParameters(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  std::string *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned __int8 *v47;
  std::string *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  void (*v56)(uint64_t, int *);
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL4 v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  _BYTE *v65;
  _BYTE *v66;
  int v67;
  int v68;
  BOOL v70;
  void (***v71)(_QWORD);
  void (***v72)(_QWORD);
  void (***v73)(_QWORD);
  void (***v74)(_QWORD);
  void (**v75)(_QWORD);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::string *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  std::string *v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, int *);
  std::string *v102;
  std::string *v103;
  void *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int16 v108;
  void *v109;
  std::string *v110;
  unint64_t v111;
  _BYTE v112[16];
  __int128 v113;
  int v114;
  std::string v115;
  _DWORD v116[2];
  int v117;
  std::string v118;
  _DWORD v119[2];
  int DegradationPreference;
  std::string __p;
  _BYTE v122[7];
  char v123;
  uint64_t v124;

  v5 = a3;
  v6 = a2;
  v124 = *MEMORY[0x24BDAC8D0];
  v8 = (std::string *)(a2 + 952);
  LOBYTE(DegradationPreference) = 0;
  v123 = 0;
  cricket::CheckRtpParametersInvalidModificationAndValues((cricket::Codec *)&DegradationPreference, a2 + 952, a3, 0, 0, (uint64_t)&v117);
  if (v123)
    cricket::Codec::~Codec((cricket::Codec *)&DegradationPreference);
  v9 = v117;
  if (v117)
  {
    v114 = v117;
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v115, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
      v9 = v114;
    }
    else
    {
      v115 = v118;
    }
    v116[0] = v119[0];
    *(_DWORD *)((char *)v116 + 3) = *(_DWORD *)((char *)v119 + 3);
    v56 = *(void (**)(uint64_t, int *))(a4 + 24);
    if (v56)
    {
      DegradationPreference = v9;
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
        v56 = *(void (**)(uint64_t, int *))(a4 + 24);
      }
      else
      {
        __p = v115;
      }
      *(_DWORD *)v122 = v116[0];
      *(_DWORD *)&v122[3] = *(_DWORD *)((char *)v116 + 3);
      v56(a4, &DegradationPreference);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(1, a4, a4);
      *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
      *(_QWORD *)(a4 + 24) = 0;
      v9 = v114;
    }
    *(_DWORD *)a1 = v9;
    *(std::string *)(a1 + 8) = v115;
    memset(&v115, 0, sizeof(v115));
    *(_DWORD *)(a1 + 32) = v116[0];
    *(_DWORD *)(a1 + 35) = *(_DWORD *)((char *)v116 + 3);
    goto LABEL_171;
  }
  v10 = *(_QWORD *)(v6 + 1056);
  v11 = *(_QWORD *)(v6 + 1048);
  v12 = (v10 - v11) / 272;
  if (v10 == v11)
  {
    v17 = 0;
    goto LABEL_80;
  }
  v13 = 0;
  v14 = *(_QWORD *)(v5 + 96);
  v15 = 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v5 + 104) - v14) >> 4);
  if (v12 <= 1)
    v16 = 1;
  else
    v16 = (v10 - v11) / 272;
  v17 = 1;
  while (1)
  {
    if (v13 == v15)
      goto LABEL_174;
    v18 = v14 + 272 * v13;
    v19 = v11 + 272 * v13;
    v20 = *(unsigned __int8 *)(v19 + 32);
    if (*(_BYTE *)(v18 + 32))
      v21 = v20 == 0;
    else
      v21 = 1;
    if (v21)
    {
      if ((*(_BYTE *)(v18 + 32) != 0) != (v20 != 0))
        goto LABEL_80;
    }
    else if (*(_DWORD *)(v18 + 28) != *(_DWORD *)(v19 + 28))
    {
      goto LABEL_80;
    }
    v22 = v14 + 272 * v13;
    v23 = v11 + 272 * v13;
    v24 = *(unsigned __int8 *)(v23 + 24);
    if (*(_BYTE *)(v22 + 24))
      v25 = v24 == 0;
    else
      v25 = 1;
    if (v25)
    {
      if ((*(_BYTE *)(v22 + 24) != 0) != (v24 != 0))
        goto LABEL_80;
    }
    else if (*(_DWORD *)(v22 + 20) != *(_DWORD *)(v23 + 20))
    {
      goto LABEL_80;
    }
    v26 = v14 + 272 * v13;
    v27 = v11 + 272 * v13;
    if (*(_BYTE *)(v26 + 48) && *(_BYTE *)(v27 + 48))
    {
      if (*(double *)(v26 + 40) != *(double *)(v27 + 40))
        goto LABEL_80;
    }
    else if ((*(_BYTE *)(v26 + 48) != 0) != (*(_BYTE *)(v27 + 48) != 0))
    {
      goto LABEL_80;
    }
    v28 = v14 + 272 * v13;
    v29 = v11 + 272 * v13;
    if (*(_BYTE *)(v28 + 72) && *(_BYTE *)(v29 + 72))
    {
      if (*(double *)(v28 + 64) != *(double *)(v29 + 64))
        goto LABEL_80;
    }
    else if ((*(_BYTE *)(v28 + 72) != 0) != (*(_BYTE *)(v29 + 72) != 0))
    {
      goto LABEL_80;
    }
    v30 = v14 + 272 * v13;
    v31 = v11 + 272 * v13;
    if (*(_BYTE *)(v30 + 60) && *(_BYTE *)(v31 + 60))
    {
      if (*(_DWORD *)(v30 + 56) != *(_DWORD *)(v31 + 56))
        goto LABEL_80;
    }
    else if ((*(_BYTE *)(v30 + 60) != 0) != (*(_BYTE *)(v31 + 60) != 0))
    {
      goto LABEL_80;
    }
    v32 = v14 + 272 * v13;
    v33 = v11 + 272 * v13;
    if (*(_BYTE *)(v32 + 120) && *(_BYTE *)(v33 + 120))
    {
      v36 = *(_DWORD *)(v32 + 112);
      v34 = v32 + 112;
      v35 = v36;
      v38 = *(_DWORD *)(v33 + 112);
      v37 = v33 + 112;
      if (v35 != v38 || *(_DWORD *)(v34 + 4) != *(_DWORD *)(v37 + 4))
        goto LABEL_80;
    }
    else if ((*(_BYTE *)(v32 + 120) != 0) != (*(_BYTE *)(v33 + 120) != 0))
    {
      goto LABEL_80;
    }
    v39 = v14 + 272 * v13;
    v40 = v11 + 272 * v13;
    if (!*(_BYTE *)(v39 + 104) || !*(_BYTE *)(v40 + 104))
    {
      if ((*(_BYTE *)(v39 + 104) != 0) != (*(_BYTE *)(v40 + 104) != 0))
        goto LABEL_80;
      goto LABEL_68;
    }
    v41 = (unsigned __int8 *)(v39 + 80);
    v42 = (unsigned __int8 *)(v40 + 80);
    v43 = v41[23];
    if ((v43 & 0x80u) == 0)
      v44 = v41[23];
    else
      v44 = *((_QWORD *)v41 + 1);
    v45 = v42[23];
    v46 = (char)v45;
    if ((v45 & 0x80u) != 0)
      v45 = *((_QWORD *)v42 + 1);
    if (v44 != v45)
      goto LABEL_80;
    if (v46 >= 0)
      v47 = v42;
    else
      v47 = *(unsigned __int8 **)v42;
    if ((v43 & 0x80) != 0)
    {
      v48 = v8;
      v49 = v10;
      v50 = a1;
      v51 = v12;
      v106 = v6;
      v107 = a4;
      v105 = v5;
      v52 = v17;
      v53 = v15;
      v54 = v16;
      v55 = memcmp(*(const void **)v41, v47, *((_QWORD *)v41 + 1));
      v16 = v54;
      v15 = v53;
      v17 = v52;
      v5 = v105;
      v6 = v106;
      a4 = v107;
      v12 = v51;
      a1 = v50;
      v10 = v49;
      v8 = v48;
      if (v55)
        goto LABEL_80;
      goto LABEL_68;
    }
    if (v41[23])
      break;
LABEL_68:
    v17 = ++v13 < v12;
    if (v13 == v16)
      goto LABEL_80;
  }
  while (*v41 == *v47)
  {
    ++v41;
    ++v47;
    if (!--v43)
      goto LABEL_68;
  }
LABEL_80:
  if (*(_BYTE *)(v5 + 164))
    v57 = *(_BYTE *)(v6 + 1116) == 0;
  else
    v57 = 1;
  if (v57)
  {
    v61 = (*(_BYTE *)(v5 + 164) != 0) ^ (*(_BYTE *)(v6 + 1116) != 0);
    if (v17)
      goto LABEL_90;
LABEL_86:
    v59 = *(_QWORD *)(v5 + 96);
    v58 = *(_QWORD *)(v5 + 104);
    if (v58 != v59 && v10 != v11)
    {
      v60 = *(double *)(v59 + 8) != *(double *)(v11 + 8);
      goto LABEL_92;
    }
    goto LABEL_174;
  }
  v61 = *(_DWORD *)(v5 + 160) != *(_DWORD *)(v6 + 1112);
  if (!v17)
    goto LABEL_86;
LABEL_90:
  if (v10 != v11)
  {
    v59 = *(_QWORD *)(v5 + 96);
    v58 = *(_QWORD *)(v5 + 104);
    v60 = 1;
LABEL_92:
    v62 = 0xF0F0F0F0F0F0F0F1 * ((v58 - v59) >> 4);
    if (v12 <= 1)
      v63 = 1;
    else
      v63 = v12;
    if (v62 > v63 - 1)
    {
      v64 = 0;
      v65 = (_BYTE *)(v11 + 124);
      v66 = (_BYTE *)(v59 + 124);
      while (1)
      {
        v68 = *v66;
        if (!*v66)
          goto LABEL_108;
        if (*(v66 - 100) && *((_DWORD *)v66 - 26) < 1)
          break;
        if (*(v66 - 76))
        {
          v68 = *(double *)(v66 - 84) > 0.0;
          v67 = *v65;
          if (*v65)
            goto LABEL_109;
        }
        else
        {
          v68 = 1;
          v67 = *v65;
          if (*v65)
          {
LABEL_109:
            if (*(v65 - 100))
              v70 = *((_DWORD *)v65 - 26) < 1;
            else
              v70 = 0;
            if (v70)
            {
              v67 = 0;
            }
            else if (*(v65 - 76))
            {
              v67 = *(double *)(v65 - 84) > 0.0;
            }
            else
            {
              v67 = 1;
            }
          }
        }
LABEL_98:
        v66 += 272;
        v64 |= v68 ^ v67;
        v65 += 272;
        if (!--v63)
          goto LABEL_119;
      }
      v68 = 0;
LABEL_108:
      v67 = *v65;
      if (*v65)
        goto LABEL_109;
      goto LABEL_98;
    }
LABEL_174:
    __break(1u);
  }
  v64 = 0;
  v60 = 1;
LABEL_119:
  webrtc::RtpParameters::operator=(v8, (std::string *)v5);
  v71 = *(void (****)(_QWORD))(v6 + 1008);
  v72 = *(void (****)(_QWORD))(v6 + 1000);
  if (v71 != v72)
  {
    v73 = v71 - 14;
    v74 = v71 - 14;
    do
    {
      v75 = *v74;
      v74 -= 14;
      (*v75)(v73);
      v21 = v73 == v72;
      v73 = v74;
    }
    while (!v21);
  }
  *(_QWORD *)(v6 + 1008) = v72;
  if (((v60 | v64) & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t, _BYTE *))(a4 + 16))(0, a4, v112);
    v113 = *(_OWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a4 + 24) = 0;
    cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::ReconfigureEncoder(v6, (uint64_t)v112, v76, v77, v78, v79, v80, v81);
    ((void (*)(uint64_t, _BYTE *, _BYTE *))v113)(1, v112, v112);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(1, a4, a4);
    *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a4 + 24) = 0;
  }
  if (v61)
  {
    v82 = *(_QWORD *)(v6 + 72);
    if (v82)
    {
      v83 = *(_QWORD *)(v6 + 80);
      if (v83)
      {
        DegradationPreference = cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::GetDegradationPreference((cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)v6);
        (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v83 + 40))(v83, v82, &DegradationPreference);
      }
    }
  }
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v84 = *(_QWORD *)(v6 + 1048);
  v85 = *(_QWORD *)(v6 + 1056);
  if (v84 != v85)
  {
    v86 = 0;
    v87 = v84 + 128;
    do
    {
      if (*(_BYTE *)(v87 + 24))
      {
        if ((unint64_t)v86 >= v111)
        {
          v86 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v109, v87);
        }
        else
        {
          if (!v86)
            goto LABEL_174;
          if (*(char *)(v87 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)v87, *(_QWORD *)(v87 + 8));
          }
          else
          {
            v89 = *(_OWORD *)v87;
            v86->__r_.__value_.__r.__words[2] = *(_QWORD *)(v87 + 16);
            *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v89;
          }
          ++v86;
        }
        v110 = v86;
      }
      v88 = v87 + 144;
      v87 += 272;
    }
    while (v88 != v85);
    v90 = (std::string *)v109;
    if (v109 != v86)
    {
      if ((char *)v86 - (_BYTE *)v109 != 24)
        goto LABEL_151;
      if (*((char *)v109 + 23) < 0)
      {
        v91 = *((_QWORD *)v109 + 1);
        if (v91 < 0)
          goto LABEL_174;
        if (v91 && *(_QWORD *)v109 == 0)
          goto LABEL_174;
      }
      else
      {
        v91 = *((unsigned __int8 *)v109 + 23);
      }
      if (!v91)
      {
        do
        {
          if (SHIBYTE(v86[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86[-1].__r_.__value_.__l.__data_);
          --v86;
        }
        while (v86 != v90);
        v110 = v90;
        v93 = *(_QWORD *)(v6 + 80);
        if (!v93)
          goto LABEL_157;
LABEL_152:
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 72))(v93, &v109);
      }
      else
      {
LABEL_151:
        v93 = *(_QWORD *)(v6 + 80);
        if (v93)
          goto LABEL_152;
LABEL_157:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v94, v95, v96, v97, v98, v99, v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
      }
    }
  }
  LOBYTE(v108) = 0;
  v101 = *(void (**)(uint64_t, int *))(a4 + 24);
  if (v101)
  {
    DegradationPreference = 0;
    memset(&__p, 0, sizeof(__p));
    *(_DWORD *)v122 = 0;
    *(_WORD *)&v122[4] = v108;
    v122[6] = 0;
    v101(a4, &DegradationPreference);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(1, a4, a4);
    *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a4 + 24) = 0;
  }
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 36) = v108;
  *(_BYTE *)(a1 + 38) = 0;
  v102 = (std::string *)v109;
  if (v109)
  {
    v103 = v110;
    v104 = v109;
    if (v110 != v109)
    {
      do
      {
        if (SHIBYTE(v103[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103[-1].__r_.__value_.__l.__data_);
        --v103;
      }
      while (v103 != v102);
      v104 = v109;
    }
    v110 = v102;
    operator delete(v104);
  }
LABEL_171:
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
}

uint64_t cricket::WebRtcVideoSendChannel::SetSenderParameters(cricket::WebRtcVideoSendChannel *this, int64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  cricket::Codec *v21;
  uint64_t v22;
  webrtc::SdpVideoFormat *v23;
  unint64_t v24;
  uint64_t v25;
  cricket::Codec *v26;
  webrtc::SdpVideoFormat *v27;
  _QWORD *v28;
  _QWORD *v29;
  webrtc::SdpVideoFormat *v30;
  const cricket::VideoSenderParameters *v31;
  const void **v32;
  _QWORD *v33;
  const void **v34;
  char *v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string::size_type v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  cricket::Codec *v59;
  __int128 v60;
  unint64_t v61;
  cricket::Codec *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  const cricket::VideoSenderParameters *v74;
  int64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  std::string *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  char *v85;
  std::string *v86;
  __int128 v87;
  webrtc::SdpVideoFormat *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD **v91;
  const cricket::VideoSenderParameters **v92;
  const void **v93;
  _QWORD *v94;
  const void **v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  __int128 v99;
  std::string::size_type v100;
  _QWORD *v101;
  const cricket::VideoSenderParameters *v102;
  uint64_t v103;
  const cricket::VideoSenderParameters *v104;
  uint64_t v105;
  _BYTE *v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  const cricket::VideoSenderParameters **v114;
  const cricket::VideoSenderParameters *v115;
  uint64_t v116;
  webrtc::SdpVideoFormat *v117;
  webrtc::SdpVideoFormat *v118;
  char *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  cricket::Codec *v123;
  webrtc::SdpVideoFormat *v124;
  void *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  std::string *v129;
  std::string::size_type size;
  int data;
  int v132;
  BOOL v133;
  char v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  __int128 v140;
  char v141;
  __int128 *v142;
  __int128 v143;
  uint64_t v144;
  uint64_t i;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  __int128 v155;
  cricket::Codec *v156;
  cricket::Codec *v157;
  void *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  webrtc::SdpVideoFormat *v163;
  webrtc::SdpVideoFormat *v164;
  int64_t v165;
  unsigned __int8 *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unsigned __int8 *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  int v177;
  char *v178;
  std::string *v179;
  __int128 v180;
  char *v181;
  char *v182;
  void **v183;
  void **v184;
  void *v185;
  std::string *v186;
  char v187;
  std::string::size_type v188;
  size_t v189;
  uint64_t v190;
  int v191;
  unsigned __int8 *v192;
  unsigned __int8 *v193;
  uint64_t v194;
  const cricket::VideoSenderParameters *v195;
  int v196;
  int v198;
  int v199;
  int v200;
  webrtc::SdpVideoFormat *v201;
  const std::string::value_type *v202;
  const std::string::value_type *v203;
  webrtc::SdpVideoFormat *v206;
  void *v207;
  cricket::Codec *v208;
  cricket::Codec *v209;
  cricket::Codec *v210;
  cricket::Codec *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int16 v221;
  std::string *v222;
  char v223;
  __int128 v224;
  const std::string::value_type *v225;
  size_t v226;
  cricket::WebRtcVideoSendChannel *v228;
  uint64_t *v229;
  cricket::Codec *v230;
  const cricket::VideoSenderParameters *v231;
  cricket::Codec *v232;
  char *v233;
  cricket::Codec *v234;
  uint64_t v235;
  __int128 *v236;
  std::string *v237;
  cricket::Codec *v238;
  webrtc::SdpVideoFormat *v239;
  _QWORD *v240;
  _BYTE v241[16];
  void (*v242)(uint64_t, _BYTE *, _BYTE *);
  uint64_t v243;
  char v244[8];
  void *v245;
  char v246;
  std::string v247;
  uint64_t v248;
  uint64_t v249;
  cricket::Codec *v250;
  cricket::Codec *v251;
  uint64_t *v252;
  std::string __p[9];
  _OWORD v254[2];
  char v255;
  void *v256;
  cricket::Codec *v257;
  unint64_t v258;
  char v259;
  void *v260;
  char *v261;
  char *v262;
  char v263;
  std::string v264;
  char v265;
  __int16 v266;
  int v267;
  char v268;
  __int16 v269;
  int v270;
  char v271;
  std::string v272;
  uint64_t **v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  _OWORD v278[2];
  char v279;
  void *v280;
  webrtc::SdpVideoFormat *v281;
  _OWORD v282[2];
  uint64_t v283;

  v283 = *MEMORY[0x24BDAC8D0];
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    cricket::MediaChannelParameters::ToString((cricket::MediaChannelParameters *)a2, __p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  v255 = 0;
  LOBYTE(v256) = 0;
  v259 = 0;
  LOBYTE(v260) = 0;
  v263 = 0;
  v264.__r_.__value_.__s.__data_[0] = 0;
  v265 = 0;
  v266 = 0;
  LOBYTE(v267) = 0;
  v268 = 0;
  v269 = 0;
  LOBYTE(v270) = 0;
  v271 = 0;
  if (!v12)
    goto LABEL_425;
  v13 = *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32);
  v14 = v13 ? *(_QWORD *)(a2 + 32) : 0;
  if (!cricket::ValidateRtpExtensions(v14, v13 >> 5))
    goto LABEL_425;
  v21 = v250;
  v231 = (const cricket::VideoSenderParameters *)a2;
  v232 = v251;
  if (v250 == v251)
  {
    v123 = v250;
    if (!v250)
      goto LABEL_417;
    goto LABEL_413;
  }
  v22 = *((_QWORD *)this + 68);
  v229 = (uint64_t *)(a2 + 32);
  v230 = v250;
  if (!v22)
  {
    v25 = 0;
    v24 = 0;
    v2 = 0;
    if (!*(_BYTE *)(a2 + 56))
      goto LABEL_198;
    goto LABEL_194;
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v22 + 8))(&v280);
  v23 = v281;
  if (v280 != v281)
  {
    v228 = this;
    this = 0;
    v24 = 0;
    v25 = 0;
    v2 = (unint64_t)&v273;
    v26 = v230;
    while (1)
    {
      v27 = (webrtc::SdpVideoFormat *)v280;
      if (v280 != v23)
        break;
LABEL_13:
      v26 = (cricket::Codec *)((char *)v26 + 248);
      if (v26 == v232)
      {
        v2 = (unint64_t)this;
        v23 = (webrtc::SdpVideoFormat *)v280;
        this = v228;
        if (!v280)
          goto LABEL_193;
        goto LABEL_184;
      }
    }
    v236 = (__int128 *)((char *)v26 + 216);
    v237 = (std::string *)((char *)v26 + 16);
    v240 = (_QWORD *)((char *)v26 + 176);
    v238 = v26;
    while (1)
    {
      v239 = v27;
      if ((*((char *)v26 + 39) & 0x80000000) == 0)
      {
        v272 = *v237;
        v28 = v240;
        v274 = 0;
        v275 = 0;
        v273 = (uint64_t **)&v274;
        v29 = (_QWORD *)*((_QWORD *)v26 + 21);
        if (v29 != v240)
          goto LABEL_26;
        goto LABEL_21;
      }
      std::string::__init_copy_ctor_external(&v272, *((const std::string::value_type **)v26 + 2), *((_QWORD *)v26 + 3));
      v28 = v240;
      v274 = 0;
      v275 = 0;
      v273 = (uint64_t **)&v274;
      v29 = (_QWORD *)*((_QWORD *)v26 + 21);
      if (v29 != v240)
        break;
LABEL_21:
      v276 = 0;
      v30 = v239;
      webrtc::SdpVideoFormat::IsSameCodec(v239, (const webrtc::SdpVideoFormat *)&v272);
      a2 = (int64_t)v31;
      if ((v276 & 1) != 0)
      {
        operator delete(v277);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v273, (uint64_t)v274);
        if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_71;
LABEL_23:
        if (!(_DWORD)a2)
          goto LABEL_16;
LABEL_72:
        if (v24 < (unint64_t)this)
        {
          if (!v24)
            goto LABEL_235;
          cricket::Codec::Codec((cricket::Codec *)v24, v238);
          v55 = *v236;
          *(_OWORD *)(v24 + 225) = *(__int128 *)((char *)v236 + 9);
          *(_OWORD *)(v24 + 216) = v55;
          v24 += 248;
          goto LABEL_106;
        }
        a2 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v24 - v25) >> 3);
        v56 = a2 + 1;
        if ((unint64_t)(a2 + 1) > 0x108421084210842)
          goto LABEL_445;
        if (0xDEF7BDEF7BDEF7BELL * (((uint64_t)this - v25) >> 3) > v56)
          v56 = 0xDEF7BDEF7BDEF7BELL * (((uint64_t)this - v25) >> 3);
        if (0xEF7BDEF7BDEF7BDFLL * (((uint64_t)this - v25) >> 3) >= 0x84210842108421)
          v56 = 0x108421084210842;
        if (!v56)
          goto LABEL_235;
        if (v56 > 0x108421084210842)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v57 = 248 * v56;
        v58 = (char *)operator new(248 * v56);
        v59 = cricket::Codec::Codec((cricket::Codec *)&v58[8 * ((uint64_t)(v24 - v25) >> 3)], v238);
        v60 = *v236;
        *(_OWORD *)((char *)v59 + 225) = *(__int128 *)((char *)v236 + 9);
        *(_OWORD *)((char *)v59 + 216) = v60;
        if (v24 == v25)
        {
          v62 = v59;
          v25 = v24;
          this = (cricket::WebRtcVideoSendChannel *)&v58[v57];
          v24 = (unint64_t)v59 + 248;
          if (!v25)
            goto LABEL_105;
        }
        else
        {
          v233 = v58;
          v234 = v59;
          v235 = v57;
          v61 = v24;
          v2 = (unint64_t)v59;
          v62 = v59;
          do
          {
            *((_QWORD *)v62 - 31) = &off_24C0B1418;
            v62 = (cricket::Codec *)((char *)v62 - 248);
            *(_QWORD *)(v2 - 240) = *(_QWORD *)(v61 - 240);
            v64 = *(_OWORD *)(v61 - 232);
            *(_QWORD *)(v2 - 216) = *(_QWORD *)(v61 - 216);
            *(_OWORD *)(v2 - 232) = v64;
            *(_QWORD *)(v61 - 224) = 0;
            *(_QWORD *)(v61 - 216) = 0;
            *(_QWORD *)(v61 - 232) = 0;
            v65 = *(_OWORD *)(v61 - 208);
            *(_BYTE *)(v2 - 192) = 0;
            *(_OWORD *)(v2 - 208) = v65;
            *(_BYTE *)(v2 - 168) = 0;
            if (*(_BYTE *)(v61 - 168))
            {
              v66 = *(_OWORD *)(v61 - 192);
              *(_QWORD *)(v2 - 176) = *(_QWORD *)(v61 - 176);
              *(_OWORD *)(v2 - 192) = v66;
              *(_QWORD *)(v61 - 184) = 0;
              *(_QWORD *)(v61 - 176) = 0;
              *(_QWORD *)(v61 - 192) = 0;
              *(_BYTE *)(v2 - 168) = 1;
            }
            *(_QWORD *)(v2 - 160) = 0;
            *(_QWORD *)(v2 - 160) = *(_QWORD *)(v61 - 160);
            v67 = *(_OWORD *)(v61 - 152);
            v68 = *(_OWORD *)(v61 - 136);
            *(_QWORD *)(v2 - 120) = *(_QWORD *)(v61 - 120);
            *(_OWORD *)(v2 - 136) = v68;
            *(_OWORD *)(v2 - 152) = v67;
            *(_QWORD *)(v61 - 160) = 0;
            *(_BYTE *)(v2 - 112) = 0;
            *(_BYTE *)(v2 - 88) = 0;
            if (*(_BYTE *)(v61 - 88))
            {
              v69 = *(_OWORD *)(v61 - 112);
              *(_QWORD *)(v2 - 96) = *(_QWORD *)(v61 - 96);
              *(_OWORD *)(v2 - 112) = v69;
              *(_QWORD *)(v61 - 104) = 0;
              *(_QWORD *)(v61 - 96) = 0;
              *(_QWORD *)(v61 - 112) = 0;
              *(_BYTE *)(v2 - 88) = 1;
            }
            *(_QWORD *)(v2 - 80) = *(_QWORD *)(v61 - 80);
            v70 = (_QWORD *)(v61 - 72);
            v71 = *(_QWORD *)(v61 - 72);
            *(_QWORD *)(v2 - 72) = v71;
            v72 = v2 - 72;
            v73 = *(_QWORD *)(v61 - 64);
            *(_QWORD *)(v2 - 64) = v73;
            if (v73)
            {
              *(_QWORD *)(v71 + 16) = v72;
              *(_QWORD *)(v61 - 80) = v70;
              *v70 = 0;
              *(_QWORD *)(v61 - 64) = 0;
              *(_QWORD *)(v2 - 56) = 0;
              *(_QWORD *)(v2 - 48) = 0;
              *(_QWORD *)(v2 - 40) = 0;
              v74 = *(const cricket::VideoSenderParameters **)(v61 - 56);
              a2 = *(_QWORD *)(v61 - 48);
              v75 = a2 - (_QWORD)v74;
              if ((const cricket::VideoSenderParameters *)a2 != v74)
                goto LABEL_94;
            }
            else
            {
              *(_QWORD *)(v2 - 80) = v72;
              *(_QWORD *)(v2 - 56) = 0;
              *(_QWORD *)(v2 - 48) = 0;
              *(_QWORD *)(v2 - 40) = 0;
              v74 = *(const cricket::VideoSenderParameters **)(v61 - 56);
              a2 = *(_QWORD *)(v61 - 48);
              v75 = a2 - (_QWORD)v74;
              if ((const cricket::VideoSenderParameters *)a2 != v74)
              {
LABEL_94:
                v76 = v24;
                v77 = v25;
                v78 = 0xAAAAAAAAAAAAAAABLL * (v75 >> 4);
                if (v78 >= 0x555555555555556)
                  goto LABEL_445;
                v79 = (char *)operator new(v75);
                v80 = 0;
                *(_QWORD *)(v2 - 56) = v79;
                *(_QWORD *)(v2 - 48) = v79;
                *(_QWORD *)(v2 - 40) = &v79[48 * v78];
                v25 = v77;
                v24 = v76;
                while (1)
                {
                  v85 = (char *)v74 + v80;
                  v86 = (std::string *)&v79[v80];
                  if (*((char *)v74 + v80 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)v85, *((_QWORD *)v85 + 1));
                    v81 = (std::string *)&v79[v80 + 24];
                    v82 = (char *)v74 + v80;
                    v83 = (uint64_t)v74 + v80 + 24;
                    if ((*((char *)v74 + v80 + 47) & 0x80000000) == 0)
                      goto LABEL_97;
                  }
                  else
                  {
                    v87 = *(_OWORD *)v85;
                    v86->__r_.__value_.__r.__words[2] = *((_QWORD *)v85 + 2);
                    *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v87;
                    v81 = (std::string *)&v79[v80 + 24];
                    v82 = (char *)v74 + v80;
                    v83 = (uint64_t)v74 + v80 + 24;
                    if ((*((char *)v74 + v80 + 47) & 0x80000000) == 0)
                    {
LABEL_97:
                      v84 = *(_OWORD *)v83;
                      v81->__r_.__value_.__r.__words[2] = *(_QWORD *)(v83 + 16);
                      *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v84;
                      v80 += 48;
                      if ((const cricket::VideoSenderParameters *)((char *)v74 + v80) == (const cricket::VideoSenderParameters *)a2)
                        goto LABEL_84;
                      continue;
                    }
                  }
                  std::string::__init_copy_ctor_external(v81, *(const std::string::value_type **)v83, *((_QWORD *)v82 + 4));
                  v80 += 48;
                  if ((const cricket::VideoSenderParameters *)((char *)v74 + v80) == (const cricket::VideoSenderParameters *)a2)
                  {
LABEL_84:
                    *(_QWORD *)(v2 - 48) = &v79[v80];
                    break;
                  }
                }
              }
            }
            v63 = *(_OWORD *)(v61 - 32);
            *(_OWORD *)(v2 - 23) = *(_OWORD *)(v61 - 23);
            *(_OWORD *)(v2 - 32) = v63;
            v61 -= 248;
            v2 = (unint64_t)v62;
          }
          while (v61 != v25);
          do
          {
            v24 -= 248;
            cricket::Codec::~Codec((cricket::Codec *)v24);
          }
          while (v24 != v25);
          this = (cricket::WebRtcVideoSendChannel *)&v233[v235];
          v24 = (unint64_t)v234 + 248;
          if (!v25)
            goto LABEL_105;
        }
        operator delete((void *)v25);
LABEL_105:
        v25 = (uint64_t)v62;
        v30 = v239;
LABEL_106:
        if (v25 == v24)
          goto LABEL_235;
        v88 = v30;
        v89 = (_QWORD *)*((_QWORD *)v30 + 3);
        v90 = (_QWORD *)((char *)v88 + 32);
        if (v89 != (_QWORD *)((char *)v88 + 32))
        {
          v91 = (_QWORD **)(v24 - 80);
          v92 = (const cricket::VideoSenderParameters **)(v24 - 72);
          do
          {
            v2 = (unint64_t)(v89 + 4);
            v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)(v24 - 80), (uint64_t *)(v24 - 72), (uint64_t **)&v272, (uint64_t **)&v247, (uint64_t)(v89 + 4));
            if (*v93)
            {
              v94 = (_QWORD *)v89[1];
              if (!v94)
                goto LABEL_144;
              goto LABEL_138;
            }
            v95 = v93;
            a2 = (int64_t)operator new(0x50uLL);
            v96 = (std::string *)(a2 + 32);
            if (*((char *)v89 + 55) < 0)
            {
              std::string::__init_copy_ctor_external(v96, (const std::string::value_type *)v89[4], v89[5]);
              v98 = (std::string *)(a2 + 56);
              if ((*((char *)v89 + 79) & 0x80000000) == 0)
              {
LABEL_115:
                v99 = *(_OWORD *)(v89 + 7);
                v98->__r_.__value_.__r.__words[2] = v89[9];
                *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v99;
                goto LABEL_118;
              }
            }
            else
            {
              v97 = *(_OWORD *)v2;
              *(_QWORD *)(a2 + 48) = v89[6];
              *(_OWORD *)&v96->__r_.__value_.__l.__data_ = v97;
              v98 = (std::string *)(a2 + 56);
              if ((*((char *)v89 + 79) & 0x80000000) == 0)
                goto LABEL_115;
            }
            std::string::__init_copy_ctor_external(v98, (const std::string::value_type *)v89[7], v89[8]);
LABEL_118:
            v100 = v272.__r_.__value_.__r.__words[0];
            *(_QWORD *)a2 = 0;
            *(_QWORD *)(a2 + 8) = 0;
            *(_QWORD *)(a2 + 16) = v100;
            *v95 = (const void *)a2;
            v101 = (_QWORD *)**v91;
            if (v101)
            {
              *v91 = v101;
              a2 = (int64_t)*v95;
            }
            v102 = *v92;
            v133 = a2 == (_QWORD)*v92;
            *(_BYTE *)(a2 + 24) = v133;
            if (v133)
            {
LABEL_137:
              ++*(_QWORD *)(v24 - 64);
              v94 = (_QWORD *)v89[1];
              if (!v94)
                goto LABEL_144;
              goto LABEL_138;
            }
            while (1)
            {
              v103 = *(_QWORD *)(a2 + 16);
              if (*(_BYTE *)(v103 + 24))
                goto LABEL_137;
              v104 = *(const cricket::VideoSenderParameters **)(v103 + 16);
              v105 = *(_QWORD *)v104;
              if (*(_QWORD *)v104 != v103)
                break;
              v108 = *((_QWORD *)v104 + 1);
              if (!v108 || (v109 = *(unsigned __int8 *)(v108 + 24), v106 = (_BYTE *)(v108 + 24), v109))
              {
                if (*(_QWORD *)v103 == a2)
                {
                  *(_BYTE *)(v103 + 24) = 1;
                  *((_BYTE *)v104 + 24) = 0;
                  v112 = *(_QWORD *)(v103 + 8);
                  *(_QWORD *)v104 = v112;
                  if (v112)
                    goto LABEL_135;
                }
                else
                {
                  v110 = *(uint64_t **)(v103 + 8);
                  v111 = *v110;
                  *(_QWORD *)(v103 + 8) = *v110;
                  if (v111)
                  {
                    *(_QWORD *)(v111 + 16) = v103;
                    v104 = *(const cricket::VideoSenderParameters **)(v103 + 16);
                  }
                  v110[2] = (uint64_t)v104;
                  *(_QWORD *)(*(_QWORD *)(v103 + 16) + 8 * (**(_QWORD **)(v103 + 16) != v103)) = v110;
                  *v110 = v103;
                  *(_QWORD *)(v103 + 16) = v110;
                  v104 = (const cricket::VideoSenderParameters *)v110[2];
                  v103 = *(_QWORD *)v104;
                  *((_BYTE *)v110 + 24) = 1;
                  *((_BYTE *)v104 + 24) = 0;
                  v112 = *(_QWORD *)(v103 + 8);
                  *(_QWORD *)v104 = v112;
                  if (v112)
LABEL_135:
                    *(_QWORD *)(v112 + 16) = v104;
                }
                *(_QWORD *)(v103 + 16) = *((_QWORD *)v104 + 2);
                *(_QWORD *)(*((_QWORD *)v104 + 2) + 8 * (**((_QWORD **)v104 + 2) != (_QWORD)v104)) = v103;
                *(_QWORD *)(v103 + 8) = v104;
                *((_QWORD *)v104 + 2) = v103;
                goto LABEL_137;
              }
LABEL_123:
              *(_BYTE *)(v103 + 24) = 1;
              a2 = (int64_t)v104;
              *((_BYTE *)v104 + 24) = v104 == v102;
              *v106 = 1;
              if (v104 == v102)
                goto LABEL_137;
            }
            if (v105)
            {
              v107 = *(unsigned __int8 *)(v105 + 24);
              v106 = (_BYTE *)(v105 + 24);
              if (!v107)
                goto LABEL_123;
            }
            if (*(_QWORD *)v103 == a2)
            {
              v116 = *(_QWORD *)(a2 + 8);
              *(_QWORD *)v103 = v116;
              if (v116)
              {
                *(_QWORD *)(v116 + 16) = v103;
                v104 = *(const cricket::VideoSenderParameters **)(v103 + 16);
              }
              *(_QWORD *)(a2 + 16) = v104;
              *(_QWORD *)(*(_QWORD *)(v103 + 16) + 8 * (**(_QWORD **)(v103 + 16) != v103)) = a2;
              *(_QWORD *)(a2 + 8) = v103;
              *(_QWORD *)(v103 + 16) = a2;
              v104 = *(const cricket::VideoSenderParameters **)(a2 + 16);
              *(_BYTE *)(a2 + 24) = 1;
              *((_BYTE *)v104 + 24) = 0;
              v114 = (const cricket::VideoSenderParameters **)*((_QWORD *)v104 + 1);
              v115 = *v114;
              *((_QWORD *)v104 + 1) = *v114;
              if (v115)
LABEL_142:
                *((_QWORD *)v115 + 2) = v104;
            }
            else
            {
              a2 = *(_QWORD *)(a2 + 16);
              *(_BYTE *)(v103 + 24) = 1;
              *((_BYTE *)v104 + 24) = 0;
              v114 = (const cricket::VideoSenderParameters **)*((_QWORD *)v104 + 1);
              v115 = *v114;
              *((_QWORD *)v104 + 1) = *v114;
              if (v115)
                goto LABEL_142;
            }
            v114[2] = (const cricket::VideoSenderParameters *)*((_QWORD *)v104 + 2);
            *(_QWORD *)(*((_QWORD *)v104 + 2) + 8 * (**((_QWORD **)v104 + 2) != (_QWORD)v104)) = v114;
            *v114 = v104;
            *((_QWORD *)v104 + 2) = v114;
            ++*(_QWORD *)(v24 - 64);
            v94 = (_QWORD *)v89[1];
            if (!v94)
            {
              do
              {
LABEL_144:
                v113 = (_QWORD *)v89[2];
                v133 = *v113 == (_QWORD)v89;
                v89 = v113;
              }
              while (!v133);
              goto LABEL_109;
            }
            do
            {
LABEL_138:
              v113 = v94;
              v94 = (_QWORD *)*v94;
            }
            while (v94);
LABEL_109:
            v89 = v113;
          }
          while (v113 != v90);
        }
        v117 = v281;
        v27 = v239;
        if (v281 == v239)
          goto LABEL_235;
        if ((webrtc::SdpVideoFormat *)((char *)v239 + 96) != v281)
        {
          v2 = (unint64_t)&v273;
          while (1)
          {
            if (*((char *)v27 + 23) < 0)
              operator delete(*(void **)v27);
            *(_OWORD *)v27 = *((_OWORD *)v27 + 6);
            *((_QWORD *)v27 + 2) = *((_QWORD *)v27 + 14);
            *((_BYTE *)v27 + 119) = 0;
            *((_BYTE *)v27 + 96) = 0;
            v119 = (char *)v27 + 32;
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v27 + 24, *((_QWORD *)v27 + 4));
            v120 = (_QWORD *)((char *)v27 + 128);
            v121 = *((_QWORD *)v27 + 16);
            *((_QWORD *)v27 + 3) = *((_QWORD *)v27 + 15);
            *((_QWORD *)v27 + 4) = v121;
            v122 = *((_QWORD *)v27 + 17);
            *((_QWORD *)v27 + 5) = v122;
            if (v122)
            {
              *(_QWORD *)(v121 + 16) = v119;
              *((_QWORD *)v27 + 15) = v120;
              *v120 = 0;
              *((_QWORD *)v27 + 17) = 0;
              if ((*((_BYTE *)v27 + 48) & 1) == 0)
                goto LABEL_157;
            }
            else
            {
              *((_QWORD *)v27 + 3) = v119;
              if ((*((_BYTE *)v27 + 48) & 1) == 0)
                goto LABEL_157;
            }
            operator delete(*((void **)v27 + 7));
LABEL_157:
            *((_QWORD *)v27 + 6) = *((_QWORD *)v27 + 18);
            *(_OWORD *)((char *)v27 + 56) = *(_OWORD *)((char *)v27 + 152);
            *(_OWORD *)((char *)v27 + 72) = *(_OWORD *)((char *)v27 + 168);
            *((_QWORD *)v27 + 11) = *((_QWORD *)v27 + 23);
            *((_QWORD *)v27 + 18) = 0;
            v23 = (webrtc::SdpVideoFormat *)((char *)v27 + 96);
            v118 = (webrtc::SdpVideoFormat *)((char *)v27 + 192);
            v27 = (webrtc::SdpVideoFormat *)((char *)v27 + 96);
            if (v118 == v117)
            {
              v117 = v281;
              v27 = v239;
              goto LABEL_170;
            }
          }
        }
        v23 = v239;
        v2 = (unint64_t)&v273;
LABEL_170:
        while (v117 != v23)
        {
          if ((*((_BYTE *)v117 - 48) & 1) != 0)
            operator delete(*((void **)v117 - 5));
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v117 - 72, *((_QWORD *)v117 - 8));
          if (*((char *)v117 - 73) < 0)
            operator delete(*((void **)v117 - 12));
          v117 = (webrtc::SdpVideoFormat *)((char *)v117 - 96);
        }
        v281 = v23;
        v26 = v238;
        if (v27 == v23)
          goto LABEL_13;
      }
      else
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v273, (uint64_t)v274);
        if ((SHIBYTE(v272.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_23;
LABEL_71:
        operator delete(v272.__r_.__value_.__l.__data_);
        if ((_DWORD)a2)
          goto LABEL_72;
LABEL_16:
        v27 = (webrtc::SdpVideoFormat *)((char *)v239 + 96);
        v23 = v281;
        v26 = v238;
        if ((webrtc::SdpVideoFormat *)((char *)v239 + 96) == v281)
          goto LABEL_13;
      }
    }
    while (1)
    {
LABEL_26:
      v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)&v273, (uint64_t *)&v274, (uint64_t **)&v247, &v252, (uint64_t)(v29 + 4));
      if (*v32)
      {
        v33 = (_QWORD *)v29[1];
        if (v33)
          goto LABEL_59;
        goto LABEL_61;
      }
      v34 = v32;
      v35 = (char *)operator new(0x50uLL);
      v36 = (std::string *)(v35 + 32);
      if (*((char *)v29 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v36, (const std::string::value_type *)v29[4], v29[5]);
        v38 = (std::string *)(v35 + 56);
        if ((*((char *)v29 + 79) & 0x80000000) == 0)
        {
LABEL_31:
          v39 = *(_OWORD *)(v29 + 7);
          v38->__r_.__value_.__r.__words[2] = v29[9];
          *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
          goto LABEL_34;
        }
      }
      else
      {
        v37 = *((_OWORD *)v29 + 2);
        *((_QWORD *)v35 + 6) = v29[6];
        *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
        v38 = (std::string *)(v35 + 56);
        if ((*((char *)v29 + 79) & 0x80000000) == 0)
          goto LABEL_31;
      }
      std::string::__init_copy_ctor_external(v38, (const std::string::value_type *)v29[7], v29[8]);
LABEL_34:
      v40 = v247.__r_.__value_.__r.__words[0];
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = v40;
      *v34 = v35;
      if (*v273)
      {
        v273 = (uint64_t **)*v273;
        v35 = (char *)*v34;
      }
      v41 = (uint64_t)v274;
      v133 = v35 == v274;
      v35[24] = v35 == v274;
      if (!v133)
      {
        do
        {
          v42 = *((_QWORD *)v35 + 2);
          if (*(_BYTE *)(v42 + 24))
            break;
          v43 = *(_BYTE **)(v42 + 16);
          v44 = *(_QWORD *)v43;
          if (*(_QWORD *)v43 == v42)
          {
            v47 = *((_QWORD *)v43 + 1);
            if (!v47 || (v48 = *(unsigned __int8 *)(v47 + 24), v45 = (_BYTE *)(v47 + 24), v48))
            {
              if (*(char **)v42 == v35)
              {
                *(_BYTE *)(v42 + 24) = 1;
                v43[24] = 0;
                v51 = *(_QWORD *)(v42 + 8);
                *(_QWORD *)v43 = v51;
                if (v51)
                  goto LABEL_51;
              }
              else
              {
                v49 = *(uint64_t **)(v42 + 8);
                v50 = *v49;
                *(_QWORD *)(v42 + 8) = *v49;
                if (v50)
                {
                  *(_QWORD *)(v50 + 16) = v42;
                  v43 = *(_BYTE **)(v42 + 16);
                }
                v49[2] = (uint64_t)v43;
                *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = v49;
                *v49 = v42;
                *(_QWORD *)(v42 + 16) = v49;
                v43 = (_BYTE *)v49[2];
                v42 = *(_QWORD *)v43;
                *((_BYTE *)v49 + 24) = 1;
                v43[24] = 0;
                v51 = *(_QWORD *)(v42 + 8);
                *(_QWORD *)v43 = v51;
                if (v51)
LABEL_51:
                  *(_QWORD *)(v51 + 16) = v43;
              }
              *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
              *(_QWORD *)(*((_QWORD *)v43 + 2) + 8 * (**((_QWORD **)v43 + 2) != (_QWORD)v43)) = v42;
              *(_QWORD *)(v42 + 8) = v43;
LABEL_57:
              *((_QWORD *)v43 + 2) = v42;
              break;
            }
          }
          else if (!v44 || (v46 = *(unsigned __int8 *)(v44 + 24), v45 = (_BYTE *)(v44 + 24), v46))
          {
            if (*(char **)v42 == v35)
            {
              v54 = *((_QWORD *)v35 + 1);
              *(_QWORD *)v42 = v54;
              if (v54)
              {
                *(_QWORD *)(v54 + 16) = v42;
                v43 = *(_BYTE **)(v42 + 16);
              }
              *((_QWORD *)v35 + 2) = v43;
              *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = v35;
              *((_QWORD *)v35 + 1) = v42;
              *(_QWORD *)(v42 + 16) = v35;
              v43 = (_BYTE *)*((_QWORD *)v35 + 2);
              v35[24] = 1;
              v43[24] = 0;
              v42 = *((_QWORD *)v43 + 1);
              v52 = *(char **)v42;
              *((_QWORD *)v43 + 1) = *(_QWORD *)v42;
              if (v52)
LABEL_55:
                *((_QWORD *)v52 + 2) = v43;
            }
            else
            {
              *(_BYTE *)(v42 + 24) = 1;
              v43[24] = 0;
              v42 = *((_QWORD *)v43 + 1);
              v52 = *(char **)v42;
              *((_QWORD *)v43 + 1) = *(_QWORD *)v42;
              if (v52)
                goto LABEL_55;
            }
            *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
            *(_QWORD *)(*((_QWORD *)v43 + 2) + 8 * (**((_QWORD **)v43 + 2) != (_QWORD)v43)) = v42;
            *(_QWORD *)v42 = v43;
            goto LABEL_57;
          }
          *(_BYTE *)(v42 + 24) = 1;
          v35 = v43;
          v43[24] = v43 == (_BYTE *)v41;
          *v45 = 1;
        }
        while (v43 != (_BYTE *)v41);
      }
      ++v275;
      v28 = v240;
      v33 = (_QWORD *)v29[1];
      if (v33)
      {
        do
        {
LABEL_59:
          v53 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
        goto LABEL_25;
      }
      do
      {
LABEL_61:
        v53 = (_QWORD *)v29[2];
        v133 = *v53 == (_QWORD)v29;
        v29 = v53;
      }
      while (!v133);
LABEL_25:
      v29 = v53;
      if (v53 == v28)
        goto LABEL_21;
    }
  }
  v2 = 0;
  v24 = 0;
  v25 = 0;
  if (!v281)
    goto LABEL_193;
LABEL_184:
  v124 = v281;
  v125 = v23;
  if (v281 != v23)
  {
    do
    {
      while (1)
      {
        if ((*((_BYTE *)v124 - 48) & 1) != 0)
          operator delete(*((void **)v124 - 5));
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v124 - 72, *((_QWORD *)v124 - 8));
        if (*((char *)v124 - 73) < 0)
          break;
        v124 = (webrtc::SdpVideoFormat *)((char *)v124 - 96);
        if (v124 == v23)
          goto LABEL_191;
      }
      operator delete(*((void **)v124 - 12));
      v124 = (webrtc::SdpVideoFormat *)((char *)v124 - 96);
    }
    while (v124 != v23);
LABEL_191:
    v125 = v280;
  }
  v281 = v23;
  operator delete(v125);
LABEL_193:
  a2 = (int64_t)v231;
  if (!*((_BYTE *)v231 + 56))
    goto LABEL_198;
LABEL_194:
  if (v25 == v24)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    {
      v127 = (void *)v24;
      if (!v24)
        goto LABEL_412;
    }
    else
    {
      rtc::webrtc_logging_impl::Log("\r\t", v126, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
      v127 = (void *)v24;
      if (!v24)
        goto LABEL_412;
    }
    goto LABEL_410;
  }
LABEL_198:
  v128 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 184))(*((_QWORD *)this + 13));
  (*(void (**)(std::string *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v128 + 16))(&v272, v128, "WebRTC-FlexFEC-03", 17);
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v272.__r_.__value_.__l.__size_;
    if ((v272.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_235;
    v129 = (std::string *)v272.__r_.__value_.__r.__words[0];
    if (v272.__r_.__value_.__l.__size_)
    {
      if (!v272.__r_.__value_.__r.__words[0])
        goto LABEL_235;
    }
  }
  else
  {
    v129 = &v272;
    size = HIBYTE(v272.__r_.__value_.__r.__words[2]);
  }
  if (size < 7)
  {
    a2 = 0;
    if ((*((_BYTE *)&v272.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_216;
    goto LABEL_215;
  }
  data = (int)v129->__r_.__value_.__l.__data_;
  v132 = *(_DWORD *)((char *)v129->__r_.__value_.__r.__words + 3);
  v133 = data == 1650552389 && v132 == 1684368482;
  a2 = v133;
  if ((*((_BYTE *)&v272.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_215:
    operator delete(v272.__r_.__value_.__l.__data_);
LABEL_216:
  if (v25 == v24)
    v134 = 1;
  else
    v134 = a2;
  if ((v134 & 1) == 0)
  {
    v135 = v24 - v25 - 248;
    v136 = v25;
    if (v135 < 0xF8)
      goto LABEL_449;
    v137 = v135 / 0xF8 + 1;
    v136 = v25 + 248 * (v137 & 0x3FFFFFFFFFFFFFELL);
    v138 = (_DWORD *)(v25 + 476);
    v139 = v137 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      *(v138 - 62) = -1;
      *v138 = -1;
      v138 += 124;
      v139 -= 2;
    }
    while (v139);
    if (v137 != (v137 & 0x3FFFFFFFFFFFFFELL))
    {
LABEL_449:
      do
      {
        *(_DWORD *)(v136 + 228) = -1;
        v136 += 248;
      }
      while (v136 != v24);
    }
  }
  v272.__r_.__value_.__s.__data_[0] = 0;
  v279 = 0;
  if (*((_QWORD *)this + 20))
  {
    webrtc::RtpParameters::RtpParameters(&v247, (const webrtc::RtpParameters *)(*(_QWORD *)(*((_QWORD *)this + 18) + 40) + 952));
    if (v249 != v248)
    {
      if (!*(_BYTE *)(v248 + 264))
      {
LABEL_251:
        webrtc::RtpParameters::~RtpParameters((void **)&v247.__r_.__value_.__l.__data_);
        goto LABEL_252;
      }
      if (v25 == v24)
      {
LABEL_239:
        v144 = v248;
        for (i = v249; v144 != i; v144 += 272)
        {
          if (*(_BYTE *)(v144 + 264))
          {
            *(_QWORD *)(v144 + 160) = off_24C0BCBF0;
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v144 + 240, *(_QWORD *)(v144 + 248));
            v146 = *(void **)(v144 + 216);
            if (v146)
            {
              *(_QWORD *)(v144 + 224) = v146;
              operator delete(v146);
            }
            if (*(char *)(v144 + 191) < 0)
              operator delete(*(void **)(v144 + 168));
            *(_BYTE *)(v144 + 264) = 0;
          }
        }
        v147 = *(_QWORD *)(*((_QWORD *)this + 18) + 40);
        v242 = (void (*)(uint64_t, _BYTE *, _BYTE *))absl::internal_any_invocable::EmptyManager;
        v243 = 0;
        cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::SetRtpParameters((uint64_t)v244, v147, (unint64_t)&v247, (uint64_t)v241);
        if (v246 < 0)
          operator delete(v245);
        v242(1, v241, v241);
        goto LABEL_251;
      }
      a2 = v25;
      while (1)
      {
        cricket::Codec::Codec((cricket::Codec *)&v280, (const cricket::Codec *)a2);
        v140 = *(_OWORD *)(a2 + 216);
        *(_OWORD *)((char *)v282 + 9) = *(_OWORD *)(a2 + 225);
        v282[0] = v140;
        if (v249 == v248 || !*(_BYTE *)(v248 + 264))
          break;
        v141 = cricket::Codec::MatchesRtpCodec((uint64_t)&v280, v248 + 160);
        cricket::Codec::~Codec((cricket::Codec *)&v280);
        if ((v141 & 1) != 0)
          goto LABEL_236;
        a2 += 248;
        if (a2 == v24)
          goto LABEL_239;
      }
    }
LABEL_235:
    __break(1u);
LABEL_236:
    if (a2 != v24)
    {
      v142 = (__int128 *)(a2 + 216);
      if (v279)
      {
        cricket::Codec::operator=((uint64_t)&v272, a2);
        v143 = *v142;
        *(_OWORD *)((char *)v278 + 9) = *(_OWORD *)(a2 + 225);
        v278[0] = v143;
      }
      else
      {
        cricket::Codec::Codec((cricket::Codec *)&v272, (const cricket::Codec *)a2);
        v155 = *v142;
        *(_OWORD *)((char *)v278 + 9) = *(_OWORD *)(a2 + 225);
        v278[0] = v155;
        v279 = 1;
      }
      goto LABEL_251;
    }
    goto LABEL_239;
  }
LABEL_252:
  v149 = *((_QWORD *)this + 62);
  v148 = *((_QWORD *)this + 63);
  if (v148 - v149 == v24 - v25)
  {
    if (v149 == v148)
      goto LABEL_298;
    v150 = 0;
    while (1)
    {
      v151 = v25 + v150;
      v152 = v149 + v150;
      if (!cricket::Codec::operator==(v149 + v150, v25 + v150)
        || *(_DWORD *)(v152 + 216) != *(_DWORD *)(v151 + 216)
        || *(_DWORD *)(v152 + 220) != *(_DWORD *)(v151 + 220)
        || *(_DWORD *)(v152 + 224) != *(_DWORD *)(v151 + 224)
        || *(_DWORD *)(v152 + 228) != *(_DWORD *)(v151 + 228)
        || *(_DWORD *)(v152 + 232) != *(_DWORD *)(v151 + 232))
      {
        break;
      }
      if (*(_BYTE *)(v152 + 240) && *(_BYTE *)(v151 + 240))
      {
        if (*(_DWORD *)(v149 + v150 + 236) != *(_DWORD *)(v25 + v150 + 236))
          break;
      }
      else if ((*(_BYTE *)(v152 + 240) != 0) != (*(_BYTE *)(v151 + 240) != 0))
      {
        break;
      }
      v150 += 248;
      if (v152 + 248 == v148)
        goto LABEL_298;
    }
  }
  if (v25 == v24)
  {
    if (!v255)
      goto LABEL_289;
LABEL_283:
    cricket::Codec::~Codec((cricket::Codec *)__p);
    v255 = 0;
    goto LABEL_289;
  }
  if (!v279)
  {
    if (!*((_BYTE *)this + 488)
      || !cricket::Codec::operator==((uint64_t)this + 240, v25)
      || *((_DWORD *)this + 114) != *(_DWORD *)(v25 + 216)
      || *((_DWORD *)this + 115) != *(_DWORD *)(v25 + 220)
      || *((_DWORD *)this + 116) != *(_DWORD *)(v25 + 224)
      || *((_DWORD *)this + 117) != *(_DWORD *)(v25 + 228)
      || *((_DWORD *)this + 118) != *(_DWORD *)(v25 + 232)
      || (!*((_BYTE *)this + 480) || !*(_BYTE *)(v25 + 240)
        ? (v154 = *(unsigned __int8 *)(v25 + 240) != 0, v153 = *((unsigned __int8 *)this + 480) != 0)
        : (v153 = *((_DWORD *)this + 119), v154 = *(_DWORD *)(v25 + 236)),
          v153 != v154))
    {
      std::optional<cricket::VideoCodecSettings>::operator=[abi:sn180100]<cricket::VideoCodecSettings&,void>((cricket::Codec *)__p, (const cricket::Codec *)v25);
    }
    goto LABEL_289;
  }
  if (v255 != v279)
  {
    if (!v255)
    {
      cricket::Codec::Codec((cricket::Codec *)__p, (const cricket::Codec *)&v272);
      v254[0] = v278[0];
      *(_OWORD *)((char *)v254 + 9) = *(_OWORD *)((char *)v278 + 9);
      v255 = 1;
      goto LABEL_289;
    }
    goto LABEL_283;
  }
  cricket::Codec::operator=((uint64_t)__p, (uint64_t)&v272);
  v254[0] = v278[0];
  *(_OWORD *)((char *)v254 + 9) = *(_OWORD *)((char *)v278 + 9);
LABEL_289:
  if (v259)
  {
    v156 = (cricket::Codec *)v256;
    if (v256)
    {
      v157 = v257;
      v158 = v256;
      if (v257 != v256)
      {
        do
          cricket::Codec::~Codec((cricket::Codec *)((char *)v157 - 248));
        while (v157 != v156);
        v158 = v256;
      }
      v257 = v156;
      operator delete(v158);
    }
    v256 = (void *)v25;
    v257 = (cricket::Codec *)v24;
    v258 = v2;
  }
  else
  {
    v256 = (void *)v25;
    v257 = (cricket::Codec *)v24;
    v258 = v2;
    v259 = 1;
  }
  v24 = 0;
  v25 = 0;
LABEL_298:
  v2 = v25;
  v159 = *((unsigned __int8 *)v231 + 88);
  if (v159 != (*(unsigned int (**)(cricket::WebRtcVideoSendChannel *))(*(_QWORD *)this + 64))(this))
    v266 = *((unsigned __int8 *)v231 + 88) | 0x100;
  v160 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 184))(*((_QWORD *)this + 13));
  cricket::FilterRtpExtensions(v229, (unsigned int (*)(const std::string::value_type *, uint64_t))webrtc::RtpExtension::IsSupportedForVideo, 1, v160, (uint64_t)&v280);
  v161 = *((_QWORD *)this + 66);
  v162 = *((_QWORD *)this + 65);
  v163 = v281;
  v164 = (webrtc::SdpVideoFormat *)v280;
  v165 = v281 - (webrtc::SdpVideoFormat *)v280;
  if (v161 - v162 == v281 - (webrtc::SdpVideoFormat *)v280)
  {
    if (v162 == v161)
      goto LABEL_342;
    v166 = (unsigned __int8 *)v280;
    while (1)
    {
      v167 = *(unsigned __int8 *)(v162 + 23);
      v15 = *(_QWORD *)(v162 + 8);
      if ((v167 & 0x80u) == 0)
        v168 = *(unsigned __int8 *)(v162 + 23);
      else
        v168 = *(_QWORD *)(v162 + 8);
      v169 = v166[23];
      v170 = (char)v169;
      if ((v169 & 0x80u) != 0)
        v169 = *((_QWORD *)v166 + 1);
      if (v168 != v169)
        break;
      if (v170 >= 0)
        v171 = v166;
      else
        v171 = *(unsigned __int8 **)v166;
      if ((v167 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v162, v171, v15))
          break;
      }
      else if (*(_BYTE *)(v162 + 23))
      {
        v172 = 0;
        while (*(unsigned __int8 *)(v162 + v172) == v171[v172])
        {
          if (v167 == ++v172)
            goto LABEL_319;
        }
        break;
      }
LABEL_319:
      if (*(_DWORD *)(v162 + 24) != *((_DWORD *)v166 + 6) || *(unsigned __int8 *)(v162 + 28) != v166[28])
        break;
      v162 += 32;
      v166 += 32;
      if (v162 == v161)
        goto LABEL_342;
    }
  }
  if (v163 != v164)
  {
    if ((v165 & 0x8000000000000000) == 0)
    {
      v173 = v165 >> 5;
      v174 = (char *)operator new(v165);
      v175 = 0;
      do
      {
        v178 = (char *)v164 + v175;
        v179 = (std::string *)&v174[v175];
        if (*((char *)v164 + v175 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v179, *(const std::string::value_type **)v178, *((_QWORD *)v178 + 1));
        }
        else
        {
          v180 = *(_OWORD *)v178;
          v179->__r_.__value_.__r.__words[2] = *((_QWORD *)v178 + 2);
          *(_OWORD *)&v179->__r_.__value_.__l.__data_ = v180;
        }
        v176 = &v174[v175];
        v177 = *(_DWORD *)((char *)v164 + v175 + 24);
        v176[28] = *((_BYTE *)v164 + v175 + 28);
        *((_DWORD *)v176 + 6) = v177;
        v175 += 32;
      }
      while ((webrtc::SdpVideoFormat *)((char *)v164 + v175) != v163);
      v181 = &v174[32 * v173];
      v182 = &v174[v175];
      if (v263)
        goto LABEL_331;
LABEL_338:
      v260 = v174;
      v261 = v182;
      v262 = v181;
      v263 = 1;
      goto LABEL_342;
    }
LABEL_445:
    abort();
  }
  v174 = 0;
  v182 = 0;
  v181 = 0;
  if (!v263)
    goto LABEL_338;
LABEL_331:
  v183 = (void **)v260;
  if (v260)
  {
    v184 = (void **)v261;
    v185 = v260;
    if (v261 != v260)
    {
      do
      {
        if (*((char *)v184 - 9) < 0)
          operator delete(*(v184 - 4));
        v184 -= 4;
      }
      while (v184 != v183);
      v185 = v260;
    }
    v261 = (char *)v183;
    operator delete(v185);
  }
  v260 = v174;
  v261 = v182;
  v262 = v181;
LABEL_342:
  v186 = (std::string *)((char *)v231 + 64);
  v187 = *((_BYTE *)v231 + 87);
  v188 = *((_QWORD *)v231 + 9);
  if (v187 >= 0)
    v189 = *((unsigned __int8 *)v231 + 87);
  else
    v189 = *((_QWORD *)v231 + 9);
  v190 = *((unsigned __int8 *)this + 743);
  v191 = (char)v190;
  if ((v190 & 0x80u) != 0)
    v190 = *((_QWORD *)this + 91);
  if (v189 != v190)
  {
LABEL_357:
    if (v265)
      goto LABEL_358;
    if ((*((_BYTE *)v231 + 87) & 0x80) == 0)
    {
      *(_OWORD *)&v264.__r_.__value_.__l.__data_ = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
      v264.__r_.__value_.__r.__words[2] = *((_QWORD *)v231 + 10);
LABEL_389:
      v265 = 1;
LABEL_390:
      v195 = v231;
      v196 = *((_DWORD *)v231 + 15);
      if (v196 >= -1 && v196 != *((_DWORD *)this + 179))
        goto LABEL_365;
      goto LABEL_395;
    }
    v202 = (const std::string::value_type *)v186->__r_.__value_.__r.__words[0];
LABEL_388:
    std::string::__init_copy_ctor_external(&v264, v202, v188);
    goto LABEL_389;
  }
  if (v191 >= 0)
    v192 = (unsigned __int8 *)this + 720;
  else
    v192 = (unsigned __int8 *)*((_QWORD *)this + 90);
  if ((*((_BYTE *)v231 + 87) & 0x80) == 0)
  {
    if (!*((_BYTE *)v231 + 87))
      goto LABEL_390;
    v193 = (unsigned __int8 *)v231 + 64;
    v194 = *((unsigned __int8 *)v231 + 87);
    while (*v193 == *v192)
    {
      ++v193;
      ++v192;
      if (!--v194)
        goto LABEL_390;
    }
    goto LABEL_357;
  }
  v202 = (const std::string::value_type *)v186->__r_.__value_.__r.__words[0];
  if (!memcmp(v186->__r_.__value_.__l.__data_, v192, *((_QWORD *)v231 + 9)))
    goto LABEL_390;
  if (!v265)
    goto LABEL_388;
LABEL_358:
  if (&v264 == v186)
    goto LABEL_390;
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v187 >= 0)
      v203 = (char *)v231 + 64;
    else
      v203 = (const std::string::value_type *)v186->__r_.__value_.__r.__words[0];
    std::string::__assign_no_alias<false>(&v264, v203, v189);
    v195 = v231;
    v196 = *((_DWORD *)v231 + 15);
    if (v196 < -1 || v196 == *((_DWORD *)this + 179))
      goto LABEL_395;
  }
  else
  {
    if ((v187 & 0x80) == 0)
    {
      *(_OWORD *)&v264.__r_.__value_.__l.__data_ = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
      v264.__r_.__value_.__r.__words[2] = *((_QWORD *)v231 + 10);
      v195 = v231;
      v196 = *((_DWORD *)v231 + 15);
      if (v196 >= -1 && v196 != *((_DWORD *)this + 179))
        goto LABEL_365;
LABEL_395:
      v198 = *((unsigned __int8 *)v195 + 89);
      v127 = (void *)v2;
      if (v198 != *((unsigned __int8 *)this + 745))
        goto LABEL_368;
      goto LABEL_396;
    }
    std::string::__assign_no_alias<true>(&v264, v186->__r_.__value_.__l.__data_, v188);
    v195 = v231;
    v196 = *((_DWORD *)v231 + 15);
    if (v196 < -1 || v196 == *((_DWORD *)this + 179))
      goto LABEL_395;
  }
LABEL_365:
  if (!v196)
    v196 = -1;
  v267 = v196;
  v268 = 1;
  v198 = *((unsigned __int8 *)v195 + 89);
  v127 = (void *)v2;
  if (v198 != *((unsigned __int8 *)this + 745))
  {
LABEL_368:
    v269 = v198 | 0x100;
    v199 = *((unsigned __int8 *)v195 + 57);
    if (v199 != *((unsigned __int8 *)this + 713))
      goto LABEL_369;
    goto LABEL_397;
  }
LABEL_396:
  v199 = *((unsigned __int8 *)v195 + 57);
  if (v199 != *((unsigned __int8 *)this + 713))
  {
LABEL_369:
    if (v199)
      v200 = 2;
    else
      v200 = 1;
    v270 = v200;
    v271 = 1;
    v201 = (webrtc::SdpVideoFormat *)v280;
    if (!v280)
      goto LABEL_405;
    goto LABEL_398;
  }
LABEL_397:
  v201 = (webrtc::SdpVideoFormat *)v280;
  if (!v280)
    goto LABEL_405;
LABEL_398:
  v206 = v281;
  v207 = v201;
  if (v281 != v201)
  {
    do
    {
      if (*((char *)v206 - 9) < 0)
        operator delete(*((void **)v206 - 4));
      v206 = (webrtc::SdpVideoFormat *)((char *)v206 - 32);
    }
    while (v206 != v201);
    v207 = v280;
  }
  v281 = v201;
  operator delete(v207);
LABEL_405:
  if (v279)
    cricket::Codec::~Codec((cricket::Codec *)&v272);
  if (v127)
  {
LABEL_410:
    while ((void *)v24 != v127)
    {
      v24 -= 248;
      cricket::Codec::~Codec((cricket::Codec *)v24);
    }
    operator delete(v127);
  }
LABEL_412:
  v123 = v250;
  v21 = v230;
  if (!v250)
    goto LABEL_417;
LABEL_413:
  v208 = v251;
  v209 = v123;
  if (v251 != v123)
  {
    do
      cricket::Codec::~Codec((cricket::Codec *)((char *)v208 - 248));
    while (v208 != v123);
    v209 = v250;
  }
  v251 = v123;
  operator delete(v209);
LABEL_417:
  if (v21 == v232)
  {
LABEL_425:
    v219 = 0;
    goto LABEL_426;
  }
  if (v259)
  {
    v210 = (cricket::Codec *)v256;
    v211 = v257;
    if (v256 != v257)
    {
      do
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        {
          v2 = v2 & 0xFFFFFFFF00000000 | 0x23F9;
          cricket::Codec::ToString(v210, (char *)&v272);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v212, v213, v214, v215, v216, v217, v218, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
          if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v272.__r_.__value_.__l.__data_);
        }
        v210 = (cricket::Codec *)((char *)v210 + 248);
      }
      while (v210 != v211);
    }
  }
  if ((cricket::WebRtcVideoSendChannel *)((char *)this + 656) != v231)
  {
    std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)this + 83, *((const cricket::Codec **)v231 + 1), *((const cricket::Codec **)v231 + 2), 0x84BDA12F684BDA13 * ((uint64_t)(*((_QWORD *)v231 + 2) - *((_QWORD *)v231 + 1)) >> 3));
    std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)this + 86, *((_QWORD *)v231 + 4), *((_QWORD *)v231 + 5), (uint64_t)(*((_QWORD *)v231 + 5) - *((_QWORD *)v231 + 4)) >> 5);
    v221 = *((_WORD *)v231 + 28);
    *((_BYTE *)this + 714) = *((_BYTE *)v231 + 58);
    *((_WORD *)this + 356) = v221;
    *((_DWORD *)this + 179) = *((_DWORD *)v231 + 15);
    v222 = (std::string *)((char *)this + 720);
    v223 = *((_BYTE *)v231 + 87);
    if (*((char *)this + 743) < 0)
    {
      if (v223 >= 0)
        v225 = (char *)v231 + 64;
      else
        v225 = (const std::string::value_type *)*((_QWORD *)v231 + 8);
      if (v223 >= 0)
        v226 = *((unsigned __int8 *)v231 + 87);
      else
        v226 = *((_QWORD *)v231 + 9);
      std::string::__assign_no_alias<false>(v222, v225, v226);
    }
    else if ((*((_BYTE *)v231 + 87) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v222, *((char **)v231 + 8), *((_QWORD *)v231 + 9));
    }
    else
    {
      v224 = *((_OWORD *)v231 + 4);
      *((_QWORD *)this + 92) = *((_QWORD *)v231 + 10);
      *(_OWORD *)&v222->__r_.__value_.__l.__data_ = v224;
    }
  }
  *((_WORD *)this + 372) = *((_WORD *)v231 + 44);
  cricket::WebRtcVideoSendChannel::ApplyChangedParams(this, (const cricket::WebRtcVideoSendChannel::ChangedSenderParameters *)__p, v15, v16, v17, v18, v19, v20);
  v219 = 1;
LABEL_426:
  cricket::WebRtcVideoSendChannel::ChangedSenderParameters::~ChangedSenderParameters((void **)&__p[0].__r_.__value_.__l.__data_);
  return v219;
}

void cricket::MediaChannelParameters::ToString(cricket::MediaChannelParameters *this@<X0>, std::string *a2@<X8>)
{
  uint64_t *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  std::string::size_type v7;
  std::string::size_type size;
  char *v9;
  int v10;
  size_t v11;
  BOOL v12;
  std::string *v13;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string *v18;
  char *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string::size_type v22;
  const std::string::value_type *v23;
  int v24;
  std::string::size_type v25;
  BOOL v26;
  std::string *v27;
  _WORD *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  uint64_t *v32;
  std::string *v33;
  char *v34;
  std::string::size_type v35;
  uint64_t *v36;
  BOOL v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string *v40;
  std::string *v41;
  std::string::size_type v43;
  uint64_t *v45;
  uint64_t v46[2];
  std::string v47;

  memset(&v47, 0, sizeof(v47));
  if (&v47 > (std::string *)"{" || (char *)&v47.__r_.__value_.__l.__data_ + 1 <= "{")
  {
    LOWORD(v47.__r_.__value_.__l.__data_) = 123;
    *((_BYTE *)&v47.__r_.__value_.__s + 23) = 1;
    (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)this + 16))(&v45);
    v3 = v45;
    if (v45 != v46)
    {
      v4 = &byte_208EB9246;
      while (1)
      {
        v5 = strlen(v4);
        v6 = v5;
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = 22;
        else
          v7 = (v47.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        else
          size = v47.__r_.__value_.__l.__size_;
        if (v7 - size < v5)
        {
          std::string::__grow_by_and_replace(&v47, v7, size + v5 - v7, size, size, 0, v5, v4);
          v9 = (char *)(v3 + 4);
          v10 = *((char *)v3 + 55);
          if ((v10 & 0x80000000) == 0)
            goto LABEL_31;
          goto LABEL_16;
        }
        if (!v5)
          goto LABEL_30;
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13 = &v47;
        else
          v13 = (std::string *)v47.__r_.__value_.__r.__words[0];
        if ((char *)v13 + size <= v4 && (char *)v13 + size + v5 > v4)
          goto LABEL_115;
        memcpy((char *)v13 + size, v4, v5);
        v15 = size + v6;
        if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          break;
        v47.__r_.__value_.__l.__size_ = size + v6;
        v13->__r_.__value_.__s.__data_[v15] = 0;
        v9 = (char *)(v3 + 4);
        v10 = *((char *)v3 + 55);
        if ((v10 & 0x80000000) == 0)
        {
LABEL_31:
          v11 = v10;
          v12 = v10 == 0;
          goto LABEL_32;
        }
LABEL_16:
        v11 = v3[5];
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_115;
        v9 = *(char **)v9;
        v12 = v11 == 0;
        if (v11)
        {
          if (!v9)
            goto LABEL_115;
        }
LABEL_32:
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = 22;
        else
          v16 = (v47.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        else
          v17 = v47.__r_.__value_.__l.__size_;
        if (v16 - v17 >= v11)
        {
          if (!v12)
          {
            if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = &v47;
            else
              v18 = (std::string *)v47.__r_.__value_.__r.__words[0];
            v19 = (char *)v18 + v17;
            if ((char *)v18 + v17 <= v9 && &v19[v11] > v9)
              goto LABEL_115;
            memmove(v19, v9, v11);
            v20 = v17 + v11;
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
              v47.__r_.__value_.__l.__size_ = v17 + v11;
            else
              *((_BYTE *)&v47.__r_.__value_.__s + 23) = v20 & 0x7F;
            v18->__r_.__value_.__s.__data_[v20] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&v47, v16, v17 + v11 - v16, v17, v17, 0, v11, v9);
        }
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = 22;
        else
          v21 = (v47.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        else
          v22 = v47.__r_.__value_.__l.__size_;
        if (v21 - v22 >= 2)
        {
          if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v47;
          else
            v27 = (std::string *)v47.__r_.__value_.__r.__words[0];
          v28 = (_WORD *)((char *)v27 + v22);
          if ((char *)v27 + v22 <= ": " && v28 + 1 > (_WORD *)": ")
            goto LABEL_115;
          *v28 = 8250;
          v29 = v22 + 2;
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          {
            v47.__r_.__value_.__l.__size_ = v22 + 2;
            v27->__r_.__value_.__s.__data_[v29] = 0;
            v23 = (const std::string::value_type *)(v3 + 7);
            v24 = *((char *)v3 + 79);
            if ((v24 & 0x80000000) == 0)
            {
LABEL_60:
              v25 = v24;
              v26 = v24 == 0;
              goto LABEL_71;
            }
          }
          else
          {
            *((_BYTE *)&v47.__r_.__value_.__s + 23) = v29 & 0x7F;
            v27->__r_.__value_.__s.__data_[v29] = 0;
            v23 = (const std::string::value_type *)(v3 + 7);
            v24 = *((char *)v3 + 79);
            if ((v24 & 0x80000000) == 0)
              goto LABEL_60;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&v47, v21, v22 - v21 + 2, v22, v22, 0, 2uLL, ": ");
          v23 = (const std::string::value_type *)(v3 + 7);
          v24 = *((char *)v3 + 79);
          if ((v24 & 0x80000000) == 0)
            goto LABEL_60;
        }
        v25 = v3[8];
        if ((v25 & 0x8000000000000000) != 0)
          goto LABEL_115;
        v23 = *(const std::string::value_type **)v23;
        v26 = v25 == 0;
        if (v25)
        {
          if (!v23)
            goto LABEL_115;
        }
LABEL_71:
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = 22;
        else
          v30 = (v47.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        else
          v31 = v47.__r_.__value_.__l.__size_;
        if (v30 - v31 < v25)
        {
          std::string::__grow_by_and_replace(&v47, v30, v31 + v25 - v30, v31, v31, 0, v25, v23);
          v32 = (uint64_t *)v3[1];
          if (v32)
            goto LABEL_89;
          goto LABEL_94;
        }
        if (v26)
          goto LABEL_88;
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v47;
        else
          v33 = (std::string *)v47.__r_.__value_.__r.__words[0];
        v34 = (char *)v33 + v31;
        if ((char *)v33 + v31 <= v23 && &v34[v25] > v23)
          goto LABEL_115;
        memmove(v34, v23, v25);
        v35 = v31 + v25;
        if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          *((_BYTE *)&v47.__r_.__value_.__s + 23) = v35 & 0x7F;
          v33->__r_.__value_.__s.__data_[v35] = 0;
LABEL_88:
          v32 = (uint64_t *)v3[1];
          if (v32)
            goto LABEL_89;
          goto LABEL_94;
        }
        v47.__r_.__value_.__l.__size_ = v31 + v25;
        v33->__r_.__value_.__s.__data_[v35] = 0;
        v32 = (uint64_t *)v3[1];
        if (v32)
        {
          do
          {
LABEL_89:
            v36 = v32;
            v32 = (uint64_t *)*v32;
          }
          while (v32);
          goto LABEL_7;
        }
        do
        {
LABEL_94:
          v36 = (uint64_t *)v3[2];
          v37 = *v36 == (_QWORD)v3;
          v3 = v36;
        }
        while (!v37);
LABEL_7:
        v4 = ", ";
        v3 = v36;
        if (v36 == v46)
          goto LABEL_97;
      }
      *((_BYTE *)&v47.__r_.__value_.__s + 23) = v15 & 0x7F;
      v13->__r_.__value_.__s.__data_[v15] = 0;
LABEL_30:
      v9 = (char *)(v3 + 4);
      v10 = *((char *)v3 + 55);
      if ((v10 & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_16;
    }
LABEL_97:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v45, v46[0]);
    v38 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = 22;
    else
      v39 = (v47.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = v47.__r_.__value_.__l.__size_;
    if (v39 == v38)
    {
      std::string::__grow_by_and_replace(&v47, v39, 1uLL, v39, v39, 0, 1uLL, "}");
      v40 = a2;
LABEL_114:
      *v40 = v47;
      return;
    }
    v41 = &v47;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v41 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((char *)v41 + v38 > "}" || (char *)&v41->__r_.__value_.__l.__data_ + v38 + 1 <= "}")
    {
      v41->__r_.__value_.__s.__data_[v38] = 125;
      v43 = v38 + 1;
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        v47.__r_.__value_.__l.__size_ = v43;
      else
        *((_BYTE *)&v47.__r_.__value_.__s + 23) = v43 & 0x7F;
      v40 = a2;
      v41->__r_.__value_.__s.__data_[v43] = 0;
      goto LABEL_114;
    }
  }
LABEL_115:
  __break(1u);
}

void cricket::WebRtcVideoSendChannel::ApplyChangedParams(cricket::WebRtcVideoSendChannel *this, const cricket::WebRtcVideoSendChannel::ChangedSenderParameters *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  BOOL v11;
  cricket::WebRtcVideoSendChannel *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  cricket::WebRtcVideoSendChannel *v17;
  __int128 *v18;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  std::string *v22;
  char v23;
  __int128 v24;
  const std::string::value_type *v25;
  size_t v26;
  const cricket::WebRtcVideoSendChannel::ChangedSenderParameters *v27;
  uint64_t v28;
  cricket::WebRtcVideoSendChannel *v29;
  cricket::WebRtcVideoSendChannel *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *);
  cricket::Codec *v39;
  _OWORD *v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[16];
  void (*v45)(uint64_t, _BYTE *, _BYTE *);
  uint64_t v46;

  v10 = (uint64_t *)((char *)this + 496);
  if (*((_BYTE *)a2 + 280))
    v11 = v10 == (uint64_t *)((char *)a2 + 256);
  else
    v11 = 1;
  if (v11)
  {
    if (*((_BYTE *)a2 + 248))
      goto LABEL_74;
  }
  else
  {
    std::vector<cricket::VideoCodecSettings>::__assign_with_size[abi:sn180100]<cricket::VideoCodecSettings*,cricket::VideoCodecSettings*>(v10, *((_QWORD *)a2 + 32), *((_QWORD *)a2 + 33), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)a2 + 33) - *((_QWORD *)a2 + 32)) >> 3));
    if (*((_BYTE *)a2 + 248))
    {
LABEL_74:
      v39 = (cricket::WebRtcVideoSendChannel *)((char *)this + 240);
      v40 = (_OWORD *)((char *)this + 456);
      v41 = (__int128 *)((char *)a2 + 216);
      if (*((_BYTE *)this + 488))
      {
        cricket::Codec::operator=((uint64_t)v39, (uint64_t)a2);
        v42 = *v41;
        *(_OWORD *)((char *)this + 465) = *(_OWORD *)((char *)a2 + 225);
        *v40 = v42;
        if (!*((_BYTE *)a2 + 353))
          goto LABEL_9;
      }
      else
      {
        cricket::Codec::Codec(v39, a2);
        v43 = *v41;
        *(_OWORD *)((char *)this + 465) = *(_OWORD *)((char *)a2 + 225);
        *v40 = v43;
        *((_BYTE *)this + 488) = 1;
        if (!*((_BYTE *)a2 + 353))
          goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  if (*((_BYTE *)a2 + 353))
LABEL_8:
    (*(void (**)(cricket::WebRtcVideoSendChannel *, _QWORD))(*(_QWORD *)this + 56))(this, *((unsigned __int8 *)a2 + 352));
LABEL_9:
  v12 = (const cricket::WebRtcVideoSendChannel::ChangedSenderParameters *)((char *)a2 + 288);
  if (*((_BYTE *)a2 + 312) && (cricket::WebRtcVideoSendChannel *)((char *)this + 520) != v12)
    std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)this + 65, *((_QWORD *)a2 + 36), *((_QWORD *)a2 + 37), (uint64_t)(*((_QWORD *)a2 + 37) - *((_QWORD *)a2 + 36)) >> 5);
  if (*((unsigned __int8 *)a2 + 248) | *((unsigned __int8 *)a2 + 360))
  {
    if (*((_DWORD *)this + 179) == -1)
      *((_DWORD *)this + 163) = -1;
    if (*((_BYTE *)this + 488))
    {
      cricket::GetBitrateConfigForCodec((cricket::WebRtcVideoSendChannel *)((char *)this + 240), a2);
      *(_QWORD *)((char *)this + 644) = v13;
      *((_DWORD *)this + 163) = v14;
      if (!*((_BYTE *)a2 + 248))
        *((_DWORD *)this + 162) = -1;
    }
    v15 = *((_DWORD *)this + 179);
    if ((v15 & 0x80000000) == 0)
    {
      if (!v15)
        v15 = -1;
      *((_DWORD *)this + 163) = v15;
    }
    v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 104))(*((_QWORD *)this + 13));
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 184))(v16, (char *)this + 644);
  }
  v17 = (cricket::WebRtcVideoSendChannel *)*((_QWORD *)this + 18);
  if (v17 != (cricket::WebRtcVideoSendChannel *)((char *)this + 152))
  {
    v18 = (__int128 *)((char *)a2 + 320);
    while (1)
    {
      v19 = *((_QWORD *)v17 + 5);
      v20 = *((_BYTE *)a2 + 372) != 0;
      if (*((_BYTE *)a2 + 372))
      {
        v21 = *((_DWORD *)a2 + 92);
        *(_DWORD *)(v19 + 160) = v21;
        *(_BYTE *)(v19 + 1104) = v21 == 2;
      }
      if (*((_BYTE *)a2 + 353))
      {
        *(_BYTE *)(v19 + 176) = *((_BYTE *)a2 + 352);
        v20 = 1;
      }
      if (*((_BYTE *)a2 + 312))
      {
        if ((cricket::WebRtcVideoSendChannel *)(v19 + 184) != v12)
        {
          std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(v19 + 184), *((_QWORD *)a2 + 36), *((_QWORD *)a2 + 37), (uint64_t)(*((_QWORD *)a2 + 37) - *((_QWORD *)a2 + 36)) >> 5);
          if (!*((_BYTE *)a2 + 312))
          {
            __break(1u);
            return;
          }
        }
        if ((cricket::WebRtcVideoSendChannel *)(v19 + 1024) != v12)
          std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(v19 + 1024), *((_QWORD *)a2 + 36), *((_QWORD *)a2 + 37), (uint64_t)(*((_QWORD *)a2 + 37) - *((_QWORD *)a2 + 36)) >> 5);
        v20 = 1;
      }
      if (*((_BYTE *)a2 + 344))
      {
        v22 = (std::string *)(v19 + 136);
        if ((__int128 *)(v19 + 136) != v18)
        {
          v23 = *((_BYTE *)a2 + 343);
          if (*(char *)(v19 + 159) < 0)
          {
            if (v23 >= 0)
              v25 = (char *)a2 + 320;
            else
              v25 = (const std::string::value_type *)*((_QWORD *)a2 + 40);
            if (v23 >= 0)
              v26 = *((unsigned __int8 *)a2 + 343);
            else
              v26 = *((_QWORD *)a2 + 41);
            std::string::__assign_no_alias<false>(v22, v25, v26);
          }
          else if ((*((_BYTE *)a2 + 343) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v22, *((char **)a2 + 40), *((_QWORD *)a2 + 41));
          }
          else
          {
            v24 = *v18;
            *(_QWORD *)(v19 + 152) = *((_QWORD *)a2 + 42);
            *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
          }
        }
        v20 = 1;
      }
      if (*((_BYTE *)a2 + 360))
      {
        *(_DWORD *)(v19 + 476) = *((_DWORD *)a2 + 89);
        v45 = (void (*)(uint64_t, _BYTE *, _BYTE *))absl::internal_any_invocable::EmptyManager;
        v46 = 0;
        cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::ReconfigureEncoder(v19, (uint64_t)v44, a3, a4, a5, a6, a7, a8);
        v45(1, v44, v44);
      }
      if (!*((_BYTE *)a2 + 365))
        break;
      *(_BYTE *)(v19 + 480) = *((_BYTE *)a2 + 364);
      if (*((_BYTE *)a2 + 248))
        goto LABEL_57;
      if (!*(_BYTE *)(v19 + 736))
        goto LABEL_65;
      v27 = (const cricket::WebRtcVideoSendChannel::ChangedSenderParameters *)(v19 + 488);
      v28 = v19;
LABEL_58:
      cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::SetCodec(v28, (uint64_t)v27);
LABEL_59:
      v29 = (cricket::WebRtcVideoSendChannel *)*((_QWORD *)v17 + 1);
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = *(cricket::WebRtcVideoSendChannel **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (cricket::WebRtcVideoSendChannel *)*((_QWORD *)v17 + 2);
          v11 = *(_QWORD *)v30 == (_QWORD)v17;
          v17 = v30;
        }
        while (!v11);
      }
      v17 = v30;
      if (v30 == (cricket::WebRtcVideoSendChannel *)((char *)this + 152))
        goto LABEL_69;
    }
    if (!*((_BYTE *)a2 + 248))
    {
LABEL_65:
      if (v20)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
        cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::RecreateWebRtcStream((cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)v19, v31, v32, v33, v34, v35, v36, v37);
      }
      goto LABEL_59;
    }
LABEL_57:
    v28 = v19;
    v27 = a2;
    goto LABEL_58;
  }
LABEL_69:
  if (*((unsigned __int8 *)a2 + 248) | *((unsigned __int8 *)a2 + 372))
  {
    v38 = (void (*)(char *))*((_QWORD *)this + 143);
    if (v38)
      v38((char *)this + 1120);
  }
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SetSenderParameters(cricket::WebRtcVideoSendChannel *this, const cricket::VideoSenderParameters *a2)
{
  return cricket::WebRtcVideoSendChannel::SetSenderParameters((cricket::WebRtcVideoSendChannel *)((char *)this - 64), (int64_t)a2);
}

void cricket::WebRtcVideoSendChannel::RequestEncoderFallback(cricket::WebRtcVideoSendChannel *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const cricket::Codec *v19;
  uint64_t v20;
  cricket::Codec *v21;
  __int128 v22;
  const cricket::Codec *v23;
  const cricket::Codec *v24;
  const cricket::Codec *v25;
  const cricket::Codec *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char v37;
  void *v38[2];
  uint64_t (*v39)(uint64_t, uint64_t *, void **);
  uint64_t (*v40)(uint64_t);
  _OWORD v41[2];
  char v42;
  const cricket::Codec *v43;
  const cricket::Codec *v44;
  char *v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  __int16 v51;
  char v52;
  char v53;
  __int16 v54;
  char v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 10);
  {
    v10 = *((_QWORD *)this + 62);
    v9 = *((_QWORD *)this + 63);
    v11 = 0xEF7BDEF7BDEF7BDFLL * ((v9 - v10) >> 3);
    if (v11 > 1)
    {
      LOBYTE(v38[0]) = 0;
      v42 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v44 = 0;
      v45 = 0;
      v43 = 0;
      if (v9 == v10)
      {
        v46 = 1;
      }
      else
      {
        if (v11 >= 0x108421084210843)
          abort();
        v19 = (const cricket::Codec *)operator new(v9 - v10);
        v20 = 0;
        v43 = v19;
        v45 = (char *)v19 + 8 * ((v9 - v10) >> 3);
        do
        {
          v21 = cricket::Codec::Codec((const cricket::Codec *)((char *)v19 + v20), (const cricket::Codec *)(v10 + v20));
          v22 = *(_OWORD *)(v10 + v20 + 216);
          *(_OWORD *)((char *)v21 + 225) = *(_OWORD *)(v10 + v20 + 225);
          *(_OWORD *)((char *)v21 + 216) = v22;
          v20 += 248;
        }
        while (v10 + v20 != v9);
        v23 = (const cricket::Codec *)((char *)v19 + v20);
        v44 = v23;
        v46 = 1;
        v24 = v43;
        if (v23 != v43)
        {
          if ((const cricket::Codec *)((char *)v43 + 248) == v23)
          {
            v25 = v43;
          }
          else
          {
            v25 = v43;
            do
            {
              cricket::Codec::operator=((uint64_t)v24, (uint64_t)v24 + 248);
              *(_OWORD *)((char *)v24 + 216) = *((_OWORD *)v24 + 29);
              *(_OWORD *)((char *)v24 + 225) = *(_OWORD *)((char *)v24 + 473);
              v25 = (const cricket::Codec *)((char *)v25 + 248);
              v26 = (const cricket::Codec *)((char *)v24 + 496);
              v24 = (const cricket::Codec *)((char *)v24 + 248);
            }
            while (v26 != v23);
            v23 = v44;
          }
          while (v23 != v25)
          {
            v23 = (const cricket::Codec *)((char *)v23 - 248);
            cricket::Codec::~Codec(v23);
          }
          v44 = v25;
          if (v46)
          {
            if (v43 != v25)
            {
              v27 = (__int128 *)((char *)v43 + 216);
              if (v42)
              {
                cricket::Codec::operator=((uint64_t)v38, (uint64_t)v43);
                v34 = *v27;
                *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)v27 + 9);
                v41[0] = v34;
              }
              else
              {
                cricket::Codec::Codec((cricket::Codec *)v38, v43);
                v35 = *v27;
                *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)v27 + 9);
                v41[0] = v35;
                v42 = 1;
              }
              cricket::WebRtcVideoSendChannel::ApplyChangedParams(this, (const cricket::WebRtcVideoSendChannel::ChangedSenderParameters *)v38, v28, v29, v30, v31, v32, v33);
              cricket::WebRtcVideoSendChannel::ChangedSenderParameters::~ChangedSenderParameters(v38);
              return;
            }
          }
        }
      }
      __break(1u);
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  }
  else
  {
    v6 = (unsigned int *)*((_QWORD *)this + 11);
    if (v6)
    {
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = (_QWORD *)operator new();
    *v8 = v6;
    v8[1] = this;
    v8[3] = absl::internal_any_invocable::LocalManagerTrivial;
    v8[4] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::WebRtcVideoSendChannel::RequestEncoderFallback(void)::$_0 &&>;
    v38[0] = v8;
    v39 = (uint64_t (*)(uint64_t, uint64_t *, void **))_ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v40 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, void **, char *, char *))(*(_QWORD *)v5 + 8))(v5, v38, &v37, &v36);
    v39(1, (uint64_t *)v38, v38);
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::RequestEncoderFallback(cricket::WebRtcVideoSendChannel *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  cricket::WebRtcVideoSendChannel::RequestEncoderFallback((cricket::WebRtcVideoSendChannel *)((char *)this - 72), a2, a3, a4);
}

void cricket::WebRtcVideoSendChannel::RequestEncoderSwitch(cricket::WebRtcVideoSendChannel *this, const webrtc::SdpVideoFormat *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  std::string *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  int v16;
  int v17;
  const void **v18;
  _QWORD *v19;
  uint64_t **v20;
  uint64_t *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  char **v36;
  char *v37;
  int v38;
  char **v39;
  char **v40;
  std::string *v41;
  char *v42;
  BOOL v43;
  char *v44;
  std::string *v45;
  const void **v46;
  const void *v47;
  size_t v48;
  size_t v49;
  int v50;
  char *v51;
  std::string *v52;
  size_t v53;
  int v54;
  char **v55;
  std::string *v56;
  __int128 v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _BYTE *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  std::string *v71;
  char v72;
  __int128 v73;
  char *v74;
  const std::string::value_type *v75;
  size_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  int v89;
  char v90;
  uint64_t *v91;
  std::string v92;
  uint64_t **v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void *__p;
  char v99;
  _OWORD v100[2];
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  uint64_t *v112[2];
  uint64_t (*v113)(uint64_t, uint64_t *, uint64_t **);
  uint64_t (*v114)(uint64_t);
  _QWORD *v115;
  char *v116;
  uint64_t v117;
  _BYTE v118[25];
  uint64_t v119;

  v4 = a3;
  v6 = &v92;
  v119 = *MEMORY[0x24BDAC8D0];
  v7 = *((_QWORD *)this + 10);
  {
    v9 = (unsigned int *)v8[11];
    if (v9)
    {
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    webrtc::SdpVideoFormat::SdpVideoFormat((std::string *)&v92.__r_.__value_.__r.__words[1], a2);
    v99 = v4;
    v11 = operator new();
    *(_QWORD *)v11 = v92.__r_.__value_.__r.__words[0];
    webrtc::SdpVideoFormat::SdpVideoFormat((std::string *)(v11 + 8), (const webrtc::SdpVideoFormat *)&v92.__r_.__value_.__r.__words[1]);
    *(_BYTE *)(v11 + 104) = v99;
    v12 = (uint64_t *)operator new();
    *v12 = (uint64_t)v9;
    v12[1] = v11;
    v12[3] = (uint64_t)absl::internal_any_invocable::RemoteManagerNontrivial<cricket::WebRtcVideoSendChannel::RequestEncoderSwitch(webrtc::SdpVideoFormat const&,BOOL)::$_0>;
    v12[4] = (uint64_t)absl::internal_any_invocable::RemoteInvoker<false,void,cricket::WebRtcVideoSendChannel::RequestEncoderSwitch(webrtc::SdpVideoFormat const&,BOOL)::$_0 &&>;
    v112[0] = v12;
    v113 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t **))_ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v114 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, uint64_t **, uint64_t **, char *))(*(_QWORD *)v7 + 8))(v7, v112, &v91, &v90);
    v113(1, (uint64_t *)v112, v112);
    if ((v97 & 1) != 0)
      operator delete(__p);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v94, v95);
    if (SHIBYTE(v93) < 0)
      operator delete((void *)v92.__r_.__value_.__l.__size_);
    return;
  }
  v13 = v8[62];
  v86 = v8;
  v88 = v8[63];
  if (v13 != v88)
  {
    v87 = (char *)a2 + 32;
    v85 = (uint64_t)(v8 + 30);
    while ((*(char *)(v13 + 39) & 0x80000000) == 0)
    {
      v92 = *(std::string *)(v13 + 16);
      v93 = &v94;
      v94 = 0;
      v95 = 0;
      v14 = *(_QWORD **)(v13 + 168);
      v15 = v13 + 176;
      if (v14 != (_QWORD *)(v13 + 176))
        goto LABEL_19;
LABEL_14:
      v96 = 0;
      webrtc::SdpVideoFormat::IsSameCodec(a2, (const webrtc::SdpVideoFormat *)&v92);
      v17 = v16;
      if ((v96 & 1) == 0)
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v93, (uint64_t)v94);
        if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_16;
LABEL_36:
        operator delete(v92.__r_.__value_.__l.__data_);
        if (v17)
        {
LABEL_44:
          cricket::Codec::Codec((cricket::Codec *)v112, (const cricket::Codec *)v13);
          v35 = *(_OWORD *)(v13 + 216);
          *(_OWORD *)&v118[9] = *(_OWORD *)(v13 + 225);
          *(_OWORD *)v118 = v35;
          v36 = (char **)*((_QWORD *)a2 + 3);
          if (v36 == (char **)v87)
          {
LABEL_45:
            v15 = (size_t)v86;
            if (*((_BYTE *)v86 + 488)
              && cricket::Codec::operator==(v85, (uint64_t)v112)
              && *((_DWORD *)v86 + 114) == *(_DWORD *)v118
              && *((_DWORD *)v86 + 115) == *(_DWORD *)&v118[4]
              && *((_DWORD *)v86 + 116) == *(_DWORD *)&v118[8]
              && *((_DWORD *)v86 + 117) == *(_DWORD *)&v118[12]
              && *((_DWORD *)v86 + 118) == *(_DWORD *)&v118[16])
            {
              LODWORD(v37) = *((unsigned __int8 *)v86 + 480);
              v38 = v118[24];
              if (*((_BYTE *)v86 + 480) && v118[24])
              {
                if (*((_DWORD *)v86 + 119) == *(_DWORD *)&v118[20])
                  goto LABEL_152;
              }
              else
              {
LABEL_150:
                if (((_DWORD)v37 != 0) == (v38 != 0))
                {
LABEL_152:
                  cricket::Codec::~Codec((cricket::Codec *)v112);
                  return;
                }
              }
            }
            v92.__r_.__value_.__s.__data_[0] = 0;
            v101 = 0;
            v102 = 0;
            v103 = 0;
            v104 = 0;
            v105 = 0;
            v106 = 0;
            v107 = 0;
            LOWORD(v6[14].__r_.__value_.__r.__words[2]) = 0;
            v108 = 0;
            v109 = 0;
            WORD2(v6[15].__r_.__value_.__r.__words[0]) = 0;
            v110 = 0;
            v111 = 0;
            cricket::Codec::Codec((cricket::Codec *)&v92, (const cricket::Codec *)v112);
            v100[0] = *(_OWORD *)v118;
            *(_OWORD *)((char *)v100 + 9) = *(_OWORD *)&v118[9];
            v101 = 1;
            cricket::WebRtcVideoSendChannel::ApplyChangedParams((cricket::WebRtcVideoSendChannel *)v15, (const cricket::WebRtcVideoSendChannel::ChangedSenderParameters *)&v92, v79, v80, v81, v82, v83, v84);
            cricket::WebRtcVideoSendChannel::ChangedSenderParameters::~ChangedSenderParameters((void **)&v92.__r_.__value_.__l.__data_);
            goto LABEL_152;
          }
LABEL_57:
          v37 = v116;
          v39 = &v116;
          v40 = &v116;
          if (!v116)
          {
LABEL_96:
            v55 = (char **)operator new(0x50uLL);
            v56 = (std::string *)(v55 + 4);
            if (*((char *)v36 + 55) < 0)
            {
              std::string::__init_copy_ctor_external(v56, v36[4], (std::string::size_type)v36[5]);
            }
            else
            {
              v57 = *((_OWORD *)v36 + 2);
              v55[6] = v36[6];
              *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v57;
            }
            v6 = &v92;
            v55[7] = 0;
            v55[8] = 0;
            v55[9] = 0;
            *v55 = 0;
            v55[1] = 0;
            v55[2] = (char *)v39;
            *v40 = (char *)v55;
            v58 = (char *)v55;
            if (*v115)
            {
              v115 = (_QWORD *)*v115;
              v58 = *v40;
            }
            v59 = v116;
            v58[24] = v58 == v116;
            if (v58 != v59)
            {
              do
              {
                v60 = *((_QWORD *)v58 + 2);
                if (*(_BYTE *)(v60 + 24))
                  break;
                v61 = *(char **)(v60 + 16);
                v62 = *(_QWORD *)v61;
                if (*(_QWORD *)v61 == v60)
                {
                  v65 = *((_QWORD *)v61 + 1);
                  if (!v65 || (v66 = *(unsigned __int8 *)(v65 + 24), v63 = (_BYTE *)(v65 + 24), v66))
                  {
                    if (*(char **)v60 == v58)
                    {
                      *(_BYTE *)(v60 + 24) = 1;
                      v61[24] = 0;
                      v69 = *(_QWORD *)(v60 + 8);
                      *(_QWORD *)v61 = v69;
                      if (v69)
                        goto LABEL_115;
                    }
                    else
                    {
                      v67 = *(uint64_t **)(v60 + 8);
                      v68 = *v67;
                      *(_QWORD *)(v60 + 8) = *v67;
                      if (v68)
                      {
                        *(_QWORD *)(v68 + 16) = v60;
                        v61 = *(char **)(v60 + 16);
                      }
                      v67[2] = (uint64_t)v61;
                      *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v67;
                      *v67 = v60;
                      *(_QWORD *)(v60 + 16) = v67;
                      v61 = (char *)v67[2];
                      v60 = *(_QWORD *)v61;
                      *((_BYTE *)v67 + 24) = 1;
                      v61[24] = 0;
                      v69 = *(_QWORD *)(v60 + 8);
                      *(_QWORD *)v61 = v69;
                      if (v69)
LABEL_115:
                        *(_QWORD *)(v69 + 16) = v61;
                    }
                    *(_QWORD *)(v60 + 16) = *((_QWORD *)v61 + 2);
                    *(_QWORD *)(*((_QWORD *)v61 + 2) + 8 * (**((_QWORD **)v61 + 2) != (_QWORD)v61)) = v60;
                    *(_QWORD *)(v60 + 8) = v61;
LABEL_123:
                    *((_QWORD *)v61 + 2) = v60;
                    break;
                  }
                }
                else if (!v62 || (v64 = *(unsigned __int8 *)(v62 + 24), v63 = (_BYTE *)(v62 + 24), v64))
                {
                  if (*(char **)v60 == v58)
                  {
                    v78 = *((_QWORD *)v58 + 1);
                    *(_QWORD *)v60 = v78;
                    if (v78)
                    {
                      *(_QWORD *)(v78 + 16) = v60;
                      v61 = *(char **)(v60 + 16);
                    }
                    *((_QWORD *)v58 + 2) = v61;
                    *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v58;
                    *((_QWORD *)v58 + 1) = v60;
                    *(_QWORD *)(v60 + 16) = v58;
                    v61 = (char *)*((_QWORD *)v58 + 2);
                    v58[24] = 1;
                    v61[24] = 0;
                    v60 = *((_QWORD *)v61 + 1);
                    v70 = *(char **)v60;
                    *((_QWORD *)v61 + 1) = *(_QWORD *)v60;
                    if (v70)
LABEL_121:
                      *((_QWORD *)v70 + 2) = v61;
                  }
                  else
                  {
                    *(_BYTE *)(v60 + 24) = 1;
                    v61[24] = 0;
                    v60 = *((_QWORD *)v61 + 1);
                    v70 = *(char **)v60;
                    *((_QWORD *)v61 + 1) = *(_QWORD *)v60;
                    if (v70)
                      goto LABEL_121;
                  }
                  *(_QWORD *)(v60 + 16) = *((_QWORD *)v61 + 2);
                  *(_QWORD *)(*((_QWORD *)v61 + 2) + 8 * (**((_QWORD **)v61 + 2) != (_QWORD)v61)) = v60;
                  *(_QWORD *)v60 = v61;
                  goto LABEL_123;
                }
                *(_BYTE *)(v60 + 24) = 1;
                v58 = v61;
                v61[24] = v61 == v59;
                *v63 = 1;
              }
              while (v61 != v59);
            }
            ++v117;
            if (v55 == v36)
              goto LABEL_136;
LABEL_125:
            v71 = (std::string *)(v55 + 7);
            v72 = *((_BYTE *)v36 + 79);
            if (*((char *)v55 + 79) < 0)
            {
              if (v72 >= 0)
                v75 = (const std::string::value_type *)(v36 + 7);
              else
                v75 = v36[7];
              if (v72 >= 0)
                v76 = *((unsigned __int8 *)v36 + 79);
              else
                v76 = (size_t)v36[8];
              std::string::__assign_no_alias<false>(v71, v75, v76);
              goto LABEL_136;
            }
            if ((*((_BYTE *)v36 + 79) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>(v71, v36[7], (size_t)v36[8]);
              v74 = v36[1];
              if (v74)
                goto LABEL_137;
            }
            else
            {
              v73 = *(_OWORD *)(v36 + 7);
              v55[9] = v36[9];
              *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v73;
              v74 = v36[1];
              if (v74)
                goto LABEL_137;
            }
            do
            {
LABEL_140:
              v77 = v36[2];
              v43 = *(_QWORD *)v77 == (_QWORD)v36;
              v36 = (char **)v77;
            }
            while (!v43);
            goto LABEL_56;
          }
          v41 = (std::string *)*((unsigned __int8 *)v36 + 55);
          v42 = v36[4];
          v6 = (std::string *)v36[5];
          if (v6)
            v43 = v42 == 0;
          else
            v43 = 0;
          v38 = !v43;
          v89 = v38;
          while (1)
          {
            v39 = (char **)v37;
            v44 = (char *)(v36 + 4);
            v45 = v41;
            if ((v41 & 0x80) != 0)
            {
              if (((unint64_t)v6 & 0x8000000000000000) != 0)
                goto LABEL_149;
              v44 = v42;
              v45 = v6;
              LODWORD(v37) = v89;
              if ((v89 & 1) == 0)
                goto LABEL_149;
            }
            v46 = (const void **)(v39 + 4);
            LODWORD(v37) = *((char *)v39 + 55);
            v15 = *((unsigned __int8 *)v39 + 55);
            v47 = v39 + 4;
            v48 = v15;
            if ((v37 & 0x80000000) != 0)
            {
              v48 = (size_t)v39[5];
              if ((v48 & 0x8000000000000000) != 0 || (v47 = *v46, v48) && !v47)
              {
LABEL_149:
                __break(1u);
                goto LABEL_150;
              }
            }
            if (v48 >= (unint64_t)v45)
              v49 = (size_t)v45;
            else
              v49 = v48;
            v50 = memcmp(v44, v47, v49);
            if (v50)
            {
              if (v50 < 0)
                goto LABEL_65;
LABEL_80:
              if ((v15 & 0x80) != 0)
              {
                v15 = (size_t)v39[5];
                if ((v15 & 0x8000000000000000) != 0)
                  goto LABEL_149;
                v46 = (const void **)*v46;
                if (v15)
                {
                  if (!v46)
                    goto LABEL_149;
                }
              }
              v51 = (char *)(v36 + 4);
              v52 = v41;
              if ((v41 & 0x80) != 0)
              {
                if (((unint64_t)v6 & 0x8000000000000000) != 0)
                  goto LABEL_149;
                v51 = v42;
                v52 = v6;
                LODWORD(v37) = v89;
                if ((v89 & 1) == 0)
                  goto LABEL_149;
              }
              if ((unint64_t)v52 >= v15)
                v53 = v15;
              else
                v53 = (size_t)v52;
              v54 = memcmp(v46, v51, v53);
              if (v54)
              {
                if ((v54 & 0x80000000) == 0)
                  goto LABEL_117;
              }
              else if (v15 >= (unint64_t)v52)
              {
LABEL_117:
                v55 = v39;
                v6 = &v92;
                if (v39 != v36)
                  goto LABEL_125;
LABEL_136:
                v74 = v36[1];
                if (!v74)
                  goto LABEL_140;
                do
                {
LABEL_137:
                  v77 = v74;
                  v74 = *(char **)v74;
                }
                while (v74);
LABEL_56:
                v36 = (char **)v77;
                if (v77 == v87)
                  goto LABEL_45;
                goto LABEL_57;
              }
              v37 = v39[1];
              if (!v37)
              {
                v40 = v39 + 1;
                goto LABEL_96;
              }
            }
            else
            {
              if ((unint64_t)v45 >= v48)
                goto LABEL_80;
LABEL_65:
              v37 = *v39;
              v40 = v39;
              if (!*v39)
                goto LABEL_96;
            }
          }
        }
        goto LABEL_37;
      }
      operator delete(v97);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v93, (uint64_t)v94);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_36;
LABEL_16:
      if (v17)
        goto LABEL_44;
LABEL_37:
      v13 += 248;
      if (v13 == v88)
        goto LABEL_38;
    }
    std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)(v13 + 16), *(_QWORD *)(v13 + 24));
    v94 = 0;
    v95 = 0;
    v93 = &v94;
    v14 = *(_QWORD **)(v13 + 168);
    v15 = v13 + 176;
    if (v14 == (_QWORD *)(v13 + 176))
      goto LABEL_14;
    while (1)
    {
LABEL_19:
      v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)&v93, (uint64_t *)&v94, v112, &v91, (uint64_t)(v14 + 4));
      if (*v18)
      {
        v19 = (_QWORD *)v14[1];
        if (v19)
          goto LABEL_30;
        goto LABEL_32;
      }
      v20 = (uint64_t **)v18;
      v21 = (uint64_t *)operator new(0x50uLL);
      v22 = (std::string *)(v21 + 4);
      if (*((char *)v14 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v22, (const std::string::value_type *)v14[4], v14[5]);
        v24 = (std::string *)(v21 + 7);
        if ((*((char *)v14 + 79) & 0x80000000) == 0)
        {
LABEL_24:
          v25 = *(_OWORD *)(v14 + 7);
          v24->__r_.__value_.__r.__words[2] = v14[9];
          *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
          goto LABEL_27;
        }
      }
      else
      {
        v23 = *((_OWORD *)v14 + 2);
        v21[6] = v14[6];
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
        v24 = (std::string *)(v21 + 7);
        if ((*((char *)v14 + 79) & 0x80000000) == 0)
          goto LABEL_24;
      }
      std::string::__init_copy_ctor_external(v24, (const std::string::value_type *)v14[7], v14[8]);
LABEL_27:
      v26 = v112[0];
      *v21 = 0;
      v21[1] = 0;
      v21[2] = (uint64_t)v26;
      *v20 = v21;
      if (*v93)
      {
        v93 = (uint64_t **)*v93;
        v21 = *v20;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v94, v21);
      ++v95;
      v19 = (_QWORD *)v14[1];
      if (v19)
      {
        do
        {
LABEL_30:
          v27 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
        goto LABEL_18;
      }
      do
      {
LABEL_32:
        v27 = (_QWORD *)v14[2];
        v43 = *v27 == (_QWORD)v14;
        v14 = v27;
      }
      while (!v43);
LABEL_18:
      v14 = v27;
      if (v27 == (_QWORD *)v15)
        goto LABEL_14;
    }
  }
LABEL_38:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    webrtc::SdpVideoFormat::ToString(a2, &v92);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (v4)
    (*(void (**)(_QWORD *))(*v86 + 216))(v86);
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::RequestEncoderSwitch(cricket::WebRtcVideoSendChannel *this, const webrtc::SdpVideoFormat *a2, uint64_t a3, uint64_t a4)
{
  cricket::WebRtcVideoSendChannel::RequestEncoderSwitch((cricket::WebRtcVideoSendChannel *)((char *)this - 72), a2, a3, a4);
}

void cricket::WebRtcVideoSendChannel::GetRtpSendParameters(cricket::WebRtcVideoSendChannel *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char *v4;
  cricket::WebRtcVideoSendChannel *v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (***v23)(webrtc::RtpCodec *__hidden);
  unint64_t v24;
  unint64_t v25;
  const webrtc::RtpCodec *v26;
  webrtc::RtpCodec *v27;
  webrtc::RtpCodec *v28;
  void (***v29)(_QWORD);
  webrtc::RtpCodec *v30;
  webrtc::RtpCodec *v31;
  _DWORD *v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (***v42)(webrtc::RtpCodec *__hidden);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  webrtc::RtpCodec *v46;
  void (***v47)(webrtc::RtpCodec *__hidden);
  webrtc::RtpCodec *v48;
  void (***v49)(webrtc::RtpCodec *__hidden);
  void (***v50)(webrtc::RtpCodec *__hidden);
  void (***v51)(webrtc::RtpCodec *__hidden);
  void (**v52)(webrtc::RtpCodec *__hidden);
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  const std::string::value_type *v56;
  size_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  std::string *v62;
  char **v63;
  char v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  const std::string::value_type *v73;
  size_t v74;
  __int128 v75;
  uint64_t v76;
  _DWORD *v77;
  cricket::WebRtcVideoSendChannel *v78;
  uint64_t v79;
  void **v80;
  uint64_t v81;
  void (**v82)(webrtc::RtpCodec *__hidden);
  __int128 v83;
  void (**v84)(webrtc::RtpCodec *__hidden);
  __int128 v85;
  char v86;
  void *__p;
  uint64_t *v88;
  char *v89;
  uint64_t v90;
  int v91;

  v4 = (char *)*((_QWORD *)this + 19);
  if (v4)
  {
    v5 = this;
    v6 = (char *)this + 152;
    do
    {
      v7 = *((_DWORD *)v4 + 8);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (char **)v4;
      else
        v9 = (char **)(v4 + 8);
      if (v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != (char *)this + 152 && *((_DWORD *)v6 + 8) <= a2)
    {
      webrtc::RtpParameters::RtpParameters((std::string *)a3, (const webrtc::RtpParameters *)(*((_QWORD *)v6 + 5) + 952));
      v17 = (_DWORD *)*((_QWORD *)v5 + 83);
      v18 = (_DWORD *)*((_QWORD *)v5 + 84);
      if (v17 == v18)
        return;
      v80 = (void **)(a3 + 48);
      v77 = (_DWORD *)*((_QWORD *)v5 + 84);
      v78 = v5;
      v76 = a3;
      while (!*((_BYTE *)v5 + 488) || *((_DWORD *)v5 + 63) != v17[3])
      {
        (*(void (**)(void (***__return_ptr)(webrtc::RtpCodec *__hidden), _DWORD *))(*(_QWORD *)v17 + 16))(&v82, v17);
        v30 = *(webrtc::RtpCodec **)(a3 + 56);
        if ((unint64_t)v30 >= *(_QWORD *)(a3 + 64))
        {
          v32 = std::vector<webrtc::RtpCodecParameters>::__push_back_slow_path<webrtc::RtpCodecParameters>(v80, (const webrtc::RtpCodec *)&v82);
        }
        else
        {
          if (!v30)
            goto LABEL_109;
          v31 = webrtc::RtpCodec::RtpCodec(v30, (const webrtc::RtpCodec *)&v82);
          *(_QWORD *)v31 = off_24C0BCC30;
          *((_DWORD *)v31 + 26) = v91;
          v32 = (_DWORD *)((char *)v31 + 112);
        }
        *(_QWORD *)(a3 + 56) = v32;
        v82 = off_24C0BCBF0;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v89, v90);
        v33 = (uint64_t *)__p;
        if (!__p)
          goto LABEL_34;
LABEL_33:
        v88 = v33;
        operator delete(v33);
LABEL_34:
        if (SHIBYTE(v84) < 0)
          operator delete((void *)v83);
        v17 += 54;
        if (v17 == v18)
          return;
      }
      v19 = *(_QWORD *)(a3 + 48);
      (*(void (**)(void (***__return_ptr)(webrtc::RtpCodec *__hidden), _DWORD *))(*(_QWORD *)v17 + 16))(&v82, v17);
      v20 = *(_QWORD *)(a3 + 48);
      v21 = *(_QWORD *)(a3 + 56);
      v22 = v19 - v20;
      v81 = (v19 - v20) / 112;
      v23 = (void (***)(webrtc::RtpCodec *__hidden))(v20 + 112 * v81);
      v24 = *(_QWORD *)(a3 + 64);
      if (v21 < v24)
      {
        v79 = *(_QWORD *)(a3 + 48);
        if (v23 != (void (***)(webrtc::RtpCodec *__hidden))v21)
        {
          v25 = v21 - 112;
          if (v21 < 0x70)
          {
            v29 = (void (***)(_QWORD))(v23 + 14);
            *(_QWORD *)(a3 + 56) = v21;
            if ((void (***)(webrtc::RtpCodec *__hidden))v21 == v23 + 14)
            {
LABEL_87:
              v18 = v77;
              v5 = v78;
              if (v23 != &v82)
              {
                v66 = (std::string *)(v23 + 1);
                if (*((char *)v23 + 31) < 0)
                {
                  if (SHIBYTE(v84) >= 0)
                    v73 = (const std::string::value_type *)&v83;
                  else
                    v73 = (const std::string::value_type *)v83;
                  if (SHIBYTE(v84) >= 0)
                    v74 = HIBYTE(v84);
                  else
                    v74 = *((_QWORD *)&v83 + 1);
                  std::string::__assign_no_alias<false>(v66, v73, v74);
                }
                else if ((HIBYTE(v84) & 0x80) != 0)
                {
                  std::string::__assign_no_alias<true>(v66, (char *)v83, *((size_t *)&v83 + 1));
                }
                else
                {
                  v67 = v83;
                  v23[3] = v84;
                  *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
                }
                v75 = v85;
                *((_BYTE *)v23 + 48) = v86;
                *((_OWORD *)v23 + 2) = v75;
                std::vector<webrtc::RtcpFeedback>::__assign_with_size[abi:sn180100]<webrtc::RtcpFeedback*,webrtc::RtcpFeedback*>((uint64_t)(v23 + 7), (uint64_t *)__p, v88, 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (_BYTE *)__p) >> 2));
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)(v23 + 10), v89, (char *)&v90);
              }
              *(_DWORD *)(v79 + 112 * v81 + 104) = v91;
              a3 = v76;
              goto LABEL_107;
            }
          }
          else
          {
            v26 = (const webrtc::RtpCodec *)(v21 - 112);
            v27 = *(webrtc::RtpCodec **)(a3 + 56);
            do
            {
              v28 = webrtc::RtpCodec::RtpCodec(v27, v26);
              *(_QWORD *)v28 = off_24C0BCC30;
              *((_DWORD *)v28 + 26) = *((_DWORD *)v26 + 26);
              v26 = (const webrtc::RtpCodec *)((char *)v26 + 112);
              v27 = (webrtc::RtpCodec *)((char *)v28 + 112);
            }
            while ((unint64_t)v26 < v21);
            v29 = (void (***)(_QWORD))(v23 + 14);
            *(_QWORD *)(a3 + 56) = v27;
            if ((void (***)(webrtc::RtpCodec *__hidden))v21 == v23 + 14)
              goto LABEL_87;
          }
          v54 = 0;
          v55 = v79 + 16 * ((uint64_t)(v21 - (_QWORD)v29) >> 4) + 112 * v81 - 24;
          do
          {
            v60 = v21 + v54;
            v61 = v25 + v54;
            if (v25 != v21)
            {
              v62 = (std::string *)(v60 - 104);
              v63 = (char **)(v61 - 104);
              v64 = *(_BYTE *)(v61 - 81);
              if (*(char *)(v60 - 81) < 0)
              {
                if (v64 >= 0)
                  v56 = (const std::string::value_type *)(v61 - 104);
                else
                  v56 = *v63;
                if (v64 >= 0)
                  v57 = *(unsigned __int8 *)(v61 - 81);
                else
                  v57 = *(_QWORD *)(v25 + v54 - 96);
                std::string::__assign_no_alias<false>(v62, v56, v57);
              }
              else if ((*(_BYTE *)(v61 - 81) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(v62, *v63, *(_QWORD *)(v25 + v54 - 96));
              }
              else
              {
                v65 = *(_OWORD *)v63;
                *(_QWORD *)(v60 - 88) = *(_QWORD *)(v61 - 88);
                *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v65;
              }
              v58 = v21 + v54;
              v59 = *(_OWORD *)(v25 + v54 - 80);
              *(_BYTE *)(v58 - 64) = *(_BYTE *)(v25 + v54 - 64);
              *(_OWORD *)(v58 - 80) = v59;
              std::vector<webrtc::RtcpFeedback>::__assign_with_size[abi:sn180100]<webrtc::RtcpFeedback*,webrtc::RtcpFeedback*>(v21 + v54 - 56, *(uint64_t **)(v25 + v54 - 56), *(uint64_t **)(v25 + v54 - 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v25 + v54 - 48) - *(_QWORD *)(v25 + v54 - 56)) >> 2));
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v21 + v54 - 32, *(char **)(v25 + v54 - 32), (char *)(v55 + v54));
            }
            *(_DWORD *)(v60 - 8) = *(_DWORD *)(v61 - 8);
            v54 -= 112;
          }
          while ((void (***)(webrtc::RtpCodec *__hidden))(v61 - 112) != v23);
          goto LABEL_87;
        }
        if (!v20)
          goto LABEL_109;
        webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v20 + 112 * v81), (const webrtc::RtpCodec *)&v82);
        *v23 = off_24C0BCC30;
        *((_DWORD *)v23 + 26) = v91;
        *(_QWORD *)(a3 + 56) = v23 + 14;
LABEL_107:
        v82 = off_24C0BCBF0;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v89, v90);
        v33 = (uint64_t *)__p;
        if (!__p)
          goto LABEL_34;
        goto LABEL_33;
      }
      v34 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v21 - v20) >> 4) + 1;
      if (v34 > 0x249249249249249)
        goto LABEL_110;
      v35 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v24 - v20) >> 4);
      if (2 * v35 > v34)
        v34 = 2 * v35;
      if (v35 >= 0x124924924924924)
        v36 = 0x249249249249249;
      else
        v36 = v34;
      if (v36)
      {
        if (v36 > 0x249249249249249)
          goto LABEL_111;
        v37 = *(_QWORD *)(a3 + 48);
        v38 = (char *)operator new(112 * v36);
        v39 = (uint64_t)&v38[112 * v81];
        if (v81 != v36)
          goto LABEL_53;
      }
      else
      {
        v37 = *(_QWORD *)(a3 + 48);
        v38 = 0;
        v39 = 112 * v81;
        if (v81)
          goto LABEL_53;
      }
      if (v22 < 1)
      {
        v68 = 2 * v81;
        if (v37 == v19)
          v68 = 1;
        if (v68 > 0x249249249249249)
LABEL_111:
          std::__throw_bad_array_new_length[abi:sn180100]();
        v69 = a3;
        v70 = v68 >> 2;
        v71 = 112 * v68;
        v72 = (char *)operator new(112 * v68);
        v39 = (uint64_t)&v72[112 * v70];
        v41 = &v72[v71];
        if (v38)
          operator delete(v38);
        a3 = v69;
        goto LABEL_55;
      }
      v40 = v81 + 2;
      if (v81 >= -1)
        v40 = v81 + 1;
      v39 -= 112 * (v40 >> 1);
LABEL_53:
      if (!v39)
      {
LABEL_109:
        __break(1u);
LABEL_110:
        abort();
      }
      v41 = &v38[112 * v36];
LABEL_55:
      webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)v39, (const webrtc::RtpCodec *)&v82);
      *(_QWORD *)v39 = off_24C0BCC30;
      *(_DWORD *)(v39 + 104) = v91;
      v42 = (void (***)(webrtc::RtpCodec *__hidden))*v80;
      v43 = v39;
      if (*v80 != v23)
      {
        v44 = 0;
        do
        {
          v45 = v39 + v44 * 8;
          webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v39 + v44 * 8 - 112), (const webrtc::RtpCodec *)&v23[v44 - 14]);
          *(_QWORD *)(v45 - 112) = off_24C0BCC30;
          *(_DWORD *)(v45 - 8) = v23[v44 - 1];
          v44 -= 14;
        }
        while (&v23[v44] != v42);
        v43 = v39 + v44 * 8;
      }
      v46 = (webrtc::RtpCodec *)(v39 + 112);
      v47 = *(void (****)(webrtc::RtpCodec *__hidden))(a3 + 56);
      if (v47 == v23)
      {
        v18 = v77;
        v5 = v78;
        v49 = *(void (****)(webrtc::RtpCodec *__hidden))(a3 + 48);
        *(_QWORD *)(a3 + 48) = v43;
        *(_QWORD *)(a3 + 56) = v46;
        *(_QWORD *)(a3 + 64) = v41;
        if (v23 == v49)
          goto LABEL_69;
      }
      else
      {
        v18 = v77;
        v5 = v78;
        do
        {
          v48 = webrtc::RtpCodec::RtpCodec(v46, (const webrtc::RtpCodec *)v23);
          *(_QWORD *)v48 = off_24C0BCC30;
          *((_DWORD *)v48 + 26) = *((_DWORD *)v23 + 26);
          v23 += 14;
          v46 = (webrtc::RtpCodec *)((char *)v48 + 112);
        }
        while (v23 != v47);
        v49 = *(void (****)(webrtc::RtpCodec *__hidden))(a3 + 48);
        v23 = *(void (****)(webrtc::RtpCodec *__hidden))(a3 + 56);
        *(_QWORD *)(a3 + 48) = v43;
        *(_QWORD *)(a3 + 56) = v46;
        *(_QWORD *)(a3 + 64) = v41;
        if (v23 == v49)
        {
LABEL_69:
          if (v23)
            operator delete(v23);
          goto LABEL_107;
        }
      }
      v50 = v23 - 14;
      v51 = v50;
      do
      {
        v52 = *v51;
        v51 -= 14;
        (*v52)((webrtc::RtpCodec *)v50);
        v53 = v50 == v49;
        v50 = v51;
      }
      while (!v53);
      v23 = v49;
      goto LABEL_69;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  *(_BYTE *)(a3 + 124) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_WORD *)(a3 + 152) = 256;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 105) = 0u;
  *(_BYTE *)(a3 + 160) = 0;
  *(_BYTE *)(a3 + 164) = 0;
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::GetRtpSendParameters(cricket::WebRtcVideoSendChannel *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  cricket::WebRtcVideoSendChannel::GetRtpSendParameters((cricket::WebRtcVideoSendChannel *)((char *)this - 64), a2, a3);
}

void cricket::WebRtcVideoSendChannel::SetRtpSendParameters(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  _QWORD *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, void **);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, void **);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  cricket::Codec *ifINSt3__16vectorIN7cricket18VideoCodecSettingsENS1_9allocatorIS4_EEEEZNS3_22WebRtcVideoSendChannel20SetRtpSendParametersEjRKN6webrtc13RtpParametersENS_12AnyInvocableIFvNS9_8RTCErrorEOEEEE3__1EEDTcl5beginclsr3stdE7declvalIRT_EEEESJ_OT0;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _BYTE v48[16];
  __int128 v49;
  int v50;
  void *v51;
  __int128 v52;
  int v53;
  char v54;
  char v55;
  void *v56[6];
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *__p;
  uint64_t v61;
  _BYTE v62[14];
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  __int16 v71;
  char v72;
  char v73;
  __int16 v74;
  char v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v7 = a1[19];
  if (v7)
  {
    v10 = a1 + 19;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 >= a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (v12)
        v10 = (_QWORD *)v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 19 && *((_DWORD *)v10 + 8) <= a2)
    {
      (*(void (**)(void **__return_ptr, _QWORD *, uint64_t))(*a1 + 96))(v56, a1, a2);
      v24 = v57;
      v25 = v58;
      v26 = a3[6];
      if (v58 - v57 != a3[7] - v26)
      {
LABEL_28:
        v30 = *(void (**)(uint64_t, void **))(a4 + 24);
        if (v30)
        {
          LODWORD(v59) = 10;
          v63 = 0;
          v61 = 0;
          memset(v62, 0, 13);
          __p = 0;
          v30(a4, &v59);
          if ((v62[7] & 0x80000000) != 0)
            operator delete(__p);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(1, a4, a4);
          *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
          *(_QWORD *)(a4 + 24) = 0;
        }
        *(_DWORD *)a5 = 10;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(_DWORD *)(a5 + 32) = 0;
        *(_BYTE *)(a5 + 36) = 0;
        *(_BYTE *)(a5 + 38) = 0;
        goto LABEL_45;
      }
      if (v57 != v58)
      {
        while (webrtc::RtpCodec::operator==(v24, v26) && *(_DWORD *)(v24 + 104) == *(_DWORD *)(v26 + 104))
        {
          v24 += 112;
          v26 += 112;
          if (v24 == v25)
            goto LABEL_25;
        }
        goto LABEL_28;
      }
LABEL_25:
      v27 = a3[12];
      if (v27 == a3[13])
        goto LABEL_44;
      v28 = *(int *)(v27 + 16);
      if (v28 > 3)
        v29 = 0;
      else
        v29 = dword_208F1DFB0[v28];
      if (!*(_BYTE *)(v27 + 264)
        || !*((_BYTE *)a1 + 488)
        || (cricket::Codec::MatchesRtpCodec((uint64_t)(a1 + 30), v27 + 160) & 1) != 0)
      {
LABEL_43:
        cricket::MediaChannelUtil::TransportForMediaChannels::SetPreferredDscp((uint64_t)(a1 + 2), v29, v22, v23);
LABEL_44:
        v46 = v10[5];
        (*(void (**)(_QWORD, uint64_t, _BYTE *))(a4 + 16))(0, a4, v48);
        v49 = *(_OWORD *)(a4 + 16);
        *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
        *(_QWORD *)(a4 + 24) = 0;
        cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::SetRtpParameters(a5, v46, (unint64_t)a3, (uint64_t)v48);
        ((void (*)(uint64_t, _BYTE *, _BYTE *))v49)(1, v48, v48);
LABEL_45:
        webrtc::RtpParameters::~RtpParameters(v56);
        return;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      {
        v38 = a3[12];
        if (a3[13] == v38 || !*(_BYTE *)(v38 + 264))
          goto LABEL_50;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
      }
      ifINSt3__16vectorIN7cricket18VideoCodecSettingsENS1_9allocatorIS4_EEEEZNS3_22WebRtcVideoSendChannel20SetRtpSendParametersEjRKN6webrtc13RtpParametersENS_12AnyInvocableIFvNS9_8RTCErrorEOEEEE3__1EEDTcl5beginclsr3stdE7declvalIRT_EEEESJ_OT0 = _ZN4absl9c_find_ifINSt3__16vectorIN7cricket18VideoCodecSettingsENS1_9allocatorIS4_EEEEZNS3_22WebRtcVideoSendChannel20SetRtpSendParametersEjRKN6webrtc13RtpParametersENS_12AnyInvocableIFvNS9_8RTCErrorEOEEEE3__1EEDTcl5beginclsr3stdE7declvalIRT_EEEESJ_OT0_((cricket::Codec *)a1[62], (cricket::Codec *)a1[63], (uint64_t)a3);
      if ((cricket::Codec *)a1[63] != ifINSt3__16vectorIN7cricket18VideoCodecSettingsENS1_9allocatorIS4_EEEEZNS3_22WebRtcVideoSendChannel20SetRtpSendParametersEjRKN6webrtc13RtpParametersENS_12AnyInvocableIFvNS9_8RTCErrorEOEEEE3__1EEDTcl5beginclsr3stdE7declvalIRT_EEEESJ_OT0)
      {
        LOBYTE(v59) = 0;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v75 = 0;
        v76 = 0;
        std::optional<cricket::VideoCodecSettings>::operator=[abi:sn180100]<cricket::VideoCodecSettings&,void>((cricket::Codec *)&v59, ifINSt3__16vectorIN7cricket18VideoCodecSettingsENS1_9allocatorIS4_EEEEZNS3_22WebRtcVideoSendChannel20SetRtpSendParametersEjRKN6webrtc13RtpParametersENS_12AnyInvocableIFvNS9_8RTCErrorEOEEEE3__1EEDTcl5beginclsr3stdE7declvalIRT_EEEESJ_OT0);
        cricket::WebRtcVideoSendChannel::ApplyChangedParams((cricket::WebRtcVideoSendChannel *)a1, (const cricket::WebRtcVideoSendChannel::ChangedSenderParameters *)&v59, v40, v41, v42, v43, v44, v45);
        cricket::WebRtcVideoSendChannel::ChangedSenderParameters::~ChangedSenderParameters(&v59);
        goto LABEL_43;
      }
      v50 = 7;
      v47 = (char *)operator new(0x38uLL);
      v51 = v47;
      v52 = xmmword_208F0BCB0;
      if (v47 > "Attempted to use an unsupported codec for layer 0"
        || v47 + 49 <= "Attempted to use an unsupported codec for layer 0")
      {
        strcpy(v47, "Attempted to use an unsupported codec for layer 0");
        v53 = 0;
        v54 = 0;
        v55 = 0;
        webrtc::InvokeSetParametersCallback(a4, &v50, a5);
        if (SHIBYTE(v52) < 0)
          operator delete(v51);
        goto LABEL_45;
      }
LABEL_50:
      __break(1u);
      return;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  v21 = *(void (**)(uint64_t, void **))(a4 + 24);
  if (v21)
  {
    LODWORD(v59) = 10;
    v63 = 0;
    v61 = 0;
    memset(v62, 0, 13);
    __p = 0;
    v21(a4, &v59);
    if ((v62[7] & 0x80000000) != 0)
      operator delete(__p);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(1, a4, a4);
    *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a4 + 24) = 0;
  }
  *(_DWORD *)a5 = 10;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 36) = 0;
  *(_BYTE *)(a5 + 38) = 0;
}

cricket::Codec *_ZN4absl9c_find_ifINSt3__16vectorIN7cricket18VideoCodecSettingsENS1_9allocatorIS4_EEEEZNS3_22WebRtcVideoSendChannel20SetRtpSendParametersEjRKN6webrtc13RtpParametersENS_12AnyInvocableIFvNS9_8RTCErrorEOEEEE3__1EEDTcl5beginclsr3stdE7declvalIRT_EEEESJ_OT0_(cricket::Codec *a1, cricket::Codec *a2, uint64_t a3)
{
  cricket::Codec *v3;
  uint64_t v6;
  char v7;
  _BYTE v9[216];
  _OWORD v10[2];
  uint64_t v11;

  v3 = a1;
  v11 = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    while (1)
    {
      cricket::Codec::Codec((cricket::Codec *)v9, v3);
      v10[0] = *(_OWORD *)((char *)v3 + 216);
      *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)v3 + 225);
      v6 = *(_QWORD *)(a3 + 96);
      if (*(_QWORD *)(a3 + 104) == v6 || !*(_BYTE *)(v6 + 264))
        __break(1u);
      v7 = cricket::Codec::MatchesRtpCodec((uint64_t)v9, v6 + 160);
      cricket::Codec::~Codec((cricket::Codec *)v9);
      if ((v7 & 1) != 0)
        break;
      v3 = (cricket::Codec *)((char *)v3 + 248);
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SetRtpSendParameters(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  cricket::WebRtcVideoSendChannel::SetRtpSendParameters((_QWORD *)(a1 - 64), a2, a3, a4, a5);
}

void cricket::WebRtcVideoSendChannel::GetSendCodec(cricket::WebRtcVideoSendChannel *this@<X0>, cricket::Codec *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*((_BYTE *)this + 488))
  {
    cricket::Codec::Codec(a2, (cricket::WebRtcVideoSendChannel *)((char *)this + 240));
    *((_BYTE *)a2 + 216) = 1;
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    *(_BYTE *)a2 = 0;
    *((_BYTE *)a2 + 216) = 0;
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::GetSendCodec(cricket::WebRtcVideoSendChannel *this@<X0>, cricket::Codec *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*((_BYTE *)this + 424))
  {
    cricket::Codec::Codec(a2, (cricket::WebRtcVideoSendChannel *)((char *)this + 176));
    *((_BYTE *)a2 + 216) = 1;
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    *(_BYTE *)a2 = 0;
    *((_BYTE *)a2 + 216) = 0;
  }
}

uint64_t cricket::WebRtcVideoSendChannel::SetSend(cricket::WebRtcVideoSendChannel *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  cricket::WebRtcVideoSendChannel *v11;
  uint64_t v12;
  cricket::WebRtcVideoSendChannel *v13;
  cricket::WebRtcVideoSendChannel *v14;
  BOOL v15;
  cricket::WebRtcVideoSendChannel *v16;
  uint64_t v18;
  uint64_t v19;
  cricket::WebRtcVideoSendChannel *v20;
  cricket::WebRtcVideoSendChannel *v21;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
  {
    if (a2)
      goto LABEL_3;
LABEL_14:
    v16 = (cricket::WebRtcVideoSendChannel *)*((_QWORD *)this + 18);
    if (v16 != (cricket::WebRtcVideoSendChannel *)((char *)this + 152))
    {
      do
      {
        v18 = *((_QWORD *)v16 + 5);
        *(_BYTE *)(v18 + 1120) = a2;
        v19 = *(_QWORD *)(v18 + 80);
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v20 = (cricket::WebRtcVideoSendChannel *)*((_QWORD *)v16 + 1);
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = *(cricket::WebRtcVideoSendChannel **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (cricket::WebRtcVideoSendChannel *)*((_QWORD *)v16 + 2);
            v15 = *(_QWORD *)v21 == (_QWORD)v16;
            v16 = v21;
          }
          while (!v15);
        }
        v16 = v21;
      }
      while (v21 != (cricket::WebRtcVideoSendChannel *)((char *)this + 152));
    }
    goto LABEL_15;
  }
  rtc::webrtc_logging_impl::Log("\r\t\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  if (!a2)
    goto LABEL_14;
LABEL_3:
  if (*((_BYTE *)this + 488))
  {
    v11 = (cricket::WebRtcVideoSendChannel *)*((_QWORD *)this + 18);
    if (v11 != (cricket::WebRtcVideoSendChannel *)((char *)this + 152))
    {
      do
      {
        v12 = *((_QWORD *)v11 + 5);
        *(_BYTE *)(v12 + 1120) = a2;
        (***(void (****)(_QWORD))(v12 + 80))(*(_QWORD *)(v12 + 80));
        v13 = (cricket::WebRtcVideoSendChannel *)*((_QWORD *)v11 + 1);
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = *(cricket::WebRtcVideoSendChannel **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (cricket::WebRtcVideoSendChannel *)*((_QWORD *)v11 + 2);
            v15 = *(_QWORD *)v14 == (_QWORD)v11;
            v11 = v14;
          }
          while (!v15);
        }
        v11 = v14;
      }
      while (v14 != (cricket::WebRtcVideoSendChannel *)((char *)this + 152));
    }
LABEL_15:
    *((_BYTE *)this + 100) = a2;
    return 1;
  }
  return 0;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SetSend(cricket::WebRtcVideoSendChannel *this, int a2)
{
  return cricket::WebRtcVideoSendChannel::SetSend((cricket::WebRtcVideoSendChannel *)((char *)this - 64), a2);
}

uint64_t cricket::WebRtcVideoSendChannel::SetVideoSend(uint64_t a1, unsigned int a2, unsigned __int16 *a3, uint64_t a4)
{
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *p_src;
  std::string::size_type size;
  BOOL v16;
  const char *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  char *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string::size_type v24;
  unsigned int v25;
  int v26;
  size_t v27;
  std::string *v28;
  std::string::value_type *v29;
  _BOOL4 v30;
  std::string *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  BOOL v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::size_type v39;
  unsigned __int8 v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string *v43;
  _WORD *v44;
  std::string *v45;
  char *v46;
  std::string::size_type v47;
  unsigned __int8 v48;
  std::string::size_type v49;
  BOOL v50;
  std::string::size_type v51;
  std::string::size_type v52;
  std::string::size_type v53;
  std::string *v54;
  char *v55;
  std::string::size_type v56;
  std::string::size_type v57;
  BOOL v58;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string *v61;
  char *v62;
  std::string::size_type v63;
  std::string::size_type v64;
  std::string *v65;
  _BYTE *v66;
  std::string::size_type v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  BOOL v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v89;
  int v90;
  _DWORD *v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  BOOL v98;
  int v99;
  BOOL v100;
  BOOL v101;
  int v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  const char *v108;
  uint64_t v109;
  char *v110;
  std::string v111;
  std::string v112;
  std::string::value_type __p_new_stuff[8];
  size_t v114;
  unint64_t v115;
  std::string __src;
  uint64_t v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    goto LABEL_153;
  v108 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc";
  v109 = 11361;
  v110 = &v107;
  if (!a3)
  {
    *((_BYTE *)&__src.__r_.__value_.__s + 23) = 7;
    if (&__src > (std::string *)"nullptr" || (char *)__src.__r_.__value_.__r.__words + 7 <= "nullptr")
    {
      strcpy((char *)&__src, "nullptr");
      v17 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrt"
            "c_video_engine.cc";
      goto LABEL_152;
    }
    goto LABEL_234;
  }
  memset(&v112, 0, sizeof(v112));
  if (&v112 <= (std::string *)"VideoOptions {" && (char *)&v112.__r_.__value_.__r.__words[1] + 6 > "VideoOptions {")
    goto LABEL_234;
  strcpy((char *)&v112, "VideoOptions {");
  *((_BYTE *)&v112.__r_.__value_.__s + 23) = 14;
  cricket::ToStringIfSet<BOOL>(&__src, "noise reduction", a3);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __src.__r_.__value_.__l.__size_;
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_234;
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
    v16 = __src.__r_.__value_.__l.__size_ == 0;
    if (__src.__r_.__value_.__l.__size_)
    {
      if (!__src.__r_.__value_.__r.__words[0])
        goto LABEL_234;
    }
  }
  else
  {
    size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    v16 = HIBYTE(__src.__r_.__value_.__r.__words[2]) == 0;
    p_src = &__src;
  }
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = 22;
  else
    v18 = (v112.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
  else
    v19 = v112.__r_.__value_.__l.__size_;
  if (v18 - v19 < size)
  {
    std::string::__grow_by_and_replace(&v112, v18, v19 + size - v18, v19, v19, 0, size, (const std::string::value_type *)p_src);
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_21;
LABEL_32:
    memset(&v111, 0, sizeof(v111));
    if (!*((_BYTE *)a3 + 8))
      goto LABEL_93;
    goto LABEL_33;
  }
  if (v16)
    goto LABEL_31;
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v112;
  else
    v20 = (std::string *)v112.__r_.__value_.__r.__words[0];
  v21 = (char *)v20 + v19;
  if ((std::string *)((char *)v20 + v19) <= p_src && &v21[size] > (char *)p_src)
    goto LABEL_234;
  memmove(v21, p_src, size);
  v22 = v19 + size;
  if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&v112.__r_.__value_.__s + 23) = v22 & 0x7F;
    v20->__r_.__value_.__s.__data_[v22] = 0;
LABEL_31:
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_21;
  }
  v112.__r_.__value_.__l.__size_ = v19 + size;
  v20->__r_.__value_.__s.__data_[v22] = 0;
  if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_32;
LABEL_21:
  operator delete(__src.__r_.__value_.__l.__data_);
  memset(&v111, 0, sizeof(v111));
  if (!*((_BYTE *)a3 + 8))
  {
LABEL_93:
    v48 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_94;
    goto LABEL_85;
  }
LABEL_33:
  std::string::__assign_external(&v111, "screencast min bitrate kbps", 0x1BuLL);
  if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v23 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((unint64_t)HIBYTE(v111.__r_.__value_.__r.__words[2]) - 21 < 2)
    {
      v24 = 22;
      goto LABEL_37;
    }
    v31 = &v111;
    v32 = (char *)&v111 + HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if (v32 > ": ")
      goto LABEL_56;
LABEL_55:
    if (v32 + 2 > ": ")
      goto LABEL_234;
    goto LABEL_56;
  }
  v23 = v111.__r_.__value_.__l.__size_;
  v24 = (v111.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v24 - v111.__r_.__value_.__l.__size_ < 2)
  {
LABEL_37:
    std::string::__grow_by_and_replace(&v111, v24, v23 - v24 + 2, v23, v23, 0, 2uLL, ": ");
    v25 = *((unsigned __int8 *)a3 + 8);
    if (*((_BYTE *)a3 + 8))
      goto LABEL_38;
LABEL_58:
    HIBYTE(v115) = 0;
    __p_new_stuff[0] = 0;
LABEL_59:
    v35 = v25;
    v36 = v25 == 0;
    p_src = (std::string *)__p_new_stuff;
    goto LABEL_60;
  }
  v31 = (std::string *)v111.__r_.__value_.__r.__words[0];
  v32 = (char *)(v111.__r_.__value_.__r.__words[0] + v111.__r_.__value_.__l.__size_);
  if (v111.__r_.__value_.__r.__words[0] + v111.__r_.__value_.__l.__size_ <= (unint64_t)": ")
    goto LABEL_55;
LABEL_56:
  *(_WORD *)v32 = 8250;
  v37 = v23 + 2;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
  {
    v111.__r_.__value_.__l.__size_ = v23 + 2;
    v31->__r_.__value_.__s.__data_[v37] = 0;
    v25 = *((unsigned __int8 *)a3 + 8);
    if (!*((_BYTE *)a3 + 8))
      goto LABEL_58;
  }
  else
  {
    *((_BYTE *)&v111.__r_.__value_.__s + 23) = v37 & 0x7F;
    v31->__r_.__value_.__s.__data_[v37] = 0;
    v25 = *((unsigned __int8 *)a3 + 8);
    if (!*((_BYTE *)a3 + 8))
      goto LABEL_58;
  }
LABEL_38:
  v26 = snprintf((char *)&__src, 0x20uLL, "%d", *((_DWORD *)a3 + 1));
  if (v26 < 0)
    goto LABEL_236;
  v27 = v26;
  if (v26 > 0x16)
  {
    v33 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v33 = v26 | 7;
    v34 = v33 + 1;
    v28 = (std::string *)operator new(v33 + 1);
    v114 = v27;
    v115 = v34 | 0x8000000000000000;
    *(_QWORD *)__p_new_stuff = v28;
    v29 = (char *)v28 + v27;
    v30 = (std::string *)((char *)v28 + v27) > &__src;
    if (v28 > &__src)
      goto LABEL_48;
  }
  else
  {
    HIBYTE(v115) = v26;
    v28 = (std::string *)__p_new_stuff;
    v29 = &__p_new_stuff[v27];
    v30 = &__p_new_stuff[v27] > (std::string::value_type *)&__src;
    if (__p_new_stuff > (std::string::value_type *)&__src)
      goto LABEL_48;
  }
  if (v30)
    goto LABEL_234;
LABEL_48:
  if ((_DWORD)v27)
    memcpy(v28, &__src, v27);
  *v29 = 0;
  v25 = HIBYTE(v115);
  if ((v115 & 0x8000000000000000) == 0)
    goto LABEL_59;
  p_src = *(std::string **)__p_new_stuff;
  v35 = v114;
  v36 = v114 == 0;
  if (!*(_QWORD *)__p_new_stuff && v114)
    goto LABEL_234;
LABEL_60:
  if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = 22;
  else
    v38 = (v111.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
  else
    v39 = v111.__r_.__value_.__l.__size_;
  if (v38 - v39 >= v35)
  {
    if (!v36)
    {
      if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v111;
      else
        v45 = (std::string *)v111.__r_.__value_.__r.__words[0];
      v46 = (char *)v45 + v39;
      if ((std::string *)((char *)v45 + v39) <= p_src && &v46[v35] > (char *)p_src)
        goto LABEL_234;
      memmove(v46, p_src, v35);
      v47 = v39 + v35;
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      {
        v111.__r_.__value_.__l.__size_ = v39 + v35;
        v45->__r_.__value_.__s.__data_[v47] = 0;
        if ((SHIBYTE(v115) & 0x80000000) == 0)
          goto LABEL_81;
LABEL_68:
        operator delete(*(void **)__p_new_stuff);
        v40 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_69;
        goto LABEL_82;
      }
      *((_BYTE *)&v111.__r_.__value_.__s + 23) = v47 & 0x7F;
      v45->__r_.__value_.__s.__data_[v47] = 0;
    }
    if ((SHIBYTE(v115) & 0x80000000) == 0)
      goto LABEL_81;
    goto LABEL_68;
  }
  std::string::__grow_by_and_replace(&v111, v38, v39 + v35 - v38, v39, v39, 0, v35, (const std::string::value_type *)p_src);
  if (SHIBYTE(v115) < 0)
    goto LABEL_68;
LABEL_81:
  v40 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_69:
    v41 = v111.__r_.__value_.__l.__size_;
    v42 = (v111.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v42 - v111.__r_.__value_.__l.__size_ >= 2)
    {
      v43 = (std::string *)v111.__r_.__value_.__r.__words[0];
      v44 = (_WORD *)(v111.__r_.__value_.__r.__words[0] + v111.__r_.__value_.__l.__size_);
      if (v111.__r_.__value_.__r.__words[0] + v111.__r_.__value_.__l.__size_ > (unint64_t)", ")
        goto LABEL_91;
      goto LABEL_90;
    }
    goto LABEL_84;
  }
LABEL_82:
  v41 = v40;
  if ((unint64_t)v40 - 21 >= 2)
  {
    v43 = &v111;
    v44 = (_WORD *)((char *)&v111 + v41);
    if ((char *)&v111 + v41 > ", ")
    {
LABEL_91:
      *v44 = 8236;
      v51 = v41 + 2;
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      {
        v111.__r_.__value_.__l.__size_ = v41 + 2;
        v43->__r_.__value_.__s.__data_[v51] = 0;
        v48 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_94;
        goto LABEL_85;
      }
      *((_BYTE *)&v111.__r_.__value_.__s + 23) = v51 & 0x7F;
      v43->__r_.__value_.__s.__data_[v51] = 0;
      goto LABEL_93;
    }
LABEL_90:
    if (v44 + 1 > (_WORD *)", ")
      goto LABEL_234;
    goto LABEL_91;
  }
  v42 = 22;
LABEL_84:
  std::string::__grow_by_and_replace(&v111, v42, v41 - v42 + 2, v41, v41, 0, 2uLL, ", ");
  v48 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_94:
    v49 = v48;
    v50 = v48 == 0;
    p_src = &v111;
    goto LABEL_95;
  }
LABEL_85:
  v49 = v111.__r_.__value_.__l.__size_;
  if ((v111.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_234;
  p_src = (std::string *)v111.__r_.__value_.__r.__words[0];
  v50 = v111.__r_.__value_.__l.__size_ == 0;
  if (v111.__r_.__value_.__l.__size_)
  {
    if (!v111.__r_.__value_.__r.__words[0])
      goto LABEL_234;
  }
LABEL_95:
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = 22;
  else
    v52 = (v112.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
  else
    v53 = v112.__r_.__value_.__l.__size_;
  if (v52 - v53 < v49)
  {
    std::string::__grow_by_and_replace(&v112, v52, v53 + v49 - v52, v53, v53, 0, v49, (const std::string::value_type *)p_src);
    if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_113;
    goto LABEL_103;
  }
  if (v50)
  {
LABEL_112:
    if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_113;
LABEL_103:
    operator delete(v111.__r_.__value_.__l.__data_);
    goto LABEL_113;
  }
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = &v112;
  else
    v54 = (std::string *)v112.__r_.__value_.__r.__words[0];
  v55 = (char *)v54 + v53;
  if ((std::string *)((char *)v54 + v53) <= p_src && &v55[v49] > (char *)p_src)
    goto LABEL_234;
  memmove(v55, p_src, v49);
  v56 = v53 + v49;
  if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&v112.__r_.__value_.__s + 23) = v56 & 0x7F;
    v54->__r_.__value_.__s.__data_[v56] = 0;
    goto LABEL_112;
  }
  v112.__r_.__value_.__l.__size_ = v53 + v49;
  v54->__r_.__value_.__s.__data_[v56] = 0;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_103;
LABEL_113:
  cricket::ToStringIfSet<BOOL>(&__src, "is_screencast ", (_BYTE *)a3 + 12);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    v57 = __src.__r_.__value_.__l.__size_;
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_234;
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
    v58 = __src.__r_.__value_.__l.__size_ == 0;
    if (__src.__r_.__value_.__l.__size_)
    {
      if (!__src.__r_.__value_.__r.__words[0])
        goto LABEL_234;
    }
  }
  else
  {
    v57 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    v58 = HIBYTE(__src.__r_.__value_.__r.__words[2]) == 0;
    p_src = &__src;
  }
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = 22;
  else
    v59 = (v112.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
  else
    v60 = v112.__r_.__value_.__l.__size_;
  if (v59 - v60 < v57)
  {
    std::string::__grow_by_and_replace(&v112, v59, v60 + v57 - v59, v60, v60, 0, v57, (const std::string::value_type *)p_src);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_136;
    goto LABEL_126;
  }
  if (v58)
  {
LABEL_135:
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_136;
LABEL_126:
    operator delete(__src.__r_.__value_.__l.__data_);
    goto LABEL_136;
  }
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = &v112;
  else
    v61 = (std::string *)v112.__r_.__value_.__r.__words[0];
  v62 = (char *)v61 + v60;
  if ((std::string *)((char *)v61 + v60) <= p_src && &v62[v57] > (char *)p_src)
    goto LABEL_234;
  memmove(v62, p_src, v57);
  v63 = v60 + v57;
  if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&v112.__r_.__value_.__s + 23) = v63 & 0x7F;
    v61->__r_.__value_.__s.__data_[v63] = 0;
    goto LABEL_135;
  }
  v112.__r_.__value_.__l.__size_ = v60 + v57;
  v61->__r_.__value_.__s.__data_[v63] = 0;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_126;
LABEL_136:
  v64 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = 22;
  else
    v8 = (v112.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v64 = v112.__r_.__value_.__l.__size_;
  if (v8 != v64)
  {
    v65 = &v112;
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v65 = (std::string *)v112.__r_.__value_.__r.__words[0];
    v66 = (char *)v65 + v64;
    if ((char *)v65 + v64 > "}" || v66 + 1 <= "}")
    {
      *v66 = 125;
      v67 = v64 + 1;
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        v112.__r_.__value_.__l.__size_ = v67;
      else
        *((_BYTE *)&v112.__r_.__value_.__s + 23) = v67 & 0x7F;
      v65->__r_.__value_.__s.__data_[v67] = 0;
      goto LABEL_151;
    }
LABEL_234:
    __break(1u);
    goto LABEL_235;
  }
  std::string::__grow_by_and_replace(&v112, v8, 1uLL, v8, v8, 0, 1uLL, "}");
LABEL_151:
  __src = v112;
  v17 = v108;
LABEL_152:
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v8, v9, v10, v11, v12, v13, (uint64_t)p_src, (uint64_t)v17);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__src.__r_.__value_.__l.__data_);
    v80 = *(_QWORD *)(a1 + 152);
    v69 = a1 + 152;
    v68 = v80;
    if (!v80)
      goto LABEL_168;
    goto LABEL_154;
  }
LABEL_153:
  v70 = *(_QWORD *)(a1 + 152);
  v69 = a1 + 152;
  v68 = v70;
  if (!v70)
    goto LABEL_168;
LABEL_154:
  v71 = v69;
  do
  {
    v72 = *(_DWORD *)(v68 + 32);
    v73 = v72 >= a2;
    if (v72 >= a2)
      v74 = (uint64_t *)v68;
    else
      v74 = (uint64_t *)(v68 + 8);
    if (v73)
      v71 = v68;
    v68 = *v74;
  }
  while (*v74);
  if (v71 != v69 && *(_DWORD *)(v71 + 32) <= a2)
  {
    v75 = *(_QWORD *)(v71 + 40);
    if (!a3)
      goto LABEL_227;
    v76 = *(unsigned __int8 *)(v75 + 456);
    v77 = *(unsigned __int8 *)(v75 + 457);
    if (*((_BYTE *)a3 + 1))
    {
      v78 = *a3;
      *(_WORD *)(v75 + 456) = v78;
      v79 = v78 >> 8;
    }
    else
    {
      v79 = *(unsigned __int8 *)(v75 + 457);
    }
    v89 = *(unsigned __int8 *)(v75 + 468);
    v90 = *(unsigned __int8 *)(v75 + 469);
    v91 = (_DWORD *)(v75 + 460);
    v92 = *(_DWORD *)(v75 + 460);
    v93 = *(unsigned __int8 *)(v75 + 464);
    if (*((_BYTE *)a3 + 8))
    {
      v94 = *((_DWORD *)a3 + 1);
      *(_BYTE *)(v75 + 464) = *((_BYTE *)a3 + 8);
      *v91 = v94;
    }
    v95 = v89;
    v96 = v90;
    if (*((_BYTE *)a3 + 13))
    {
      v95 = a3[6];
      *(_WORD *)(v75 + 468) = v95;
      v96 = v95 >> 8;
      v95 = v95;
    }
    if (v96)
    {
      v97 = v95 != 0;
      if (v90)
        v98 = v89 == 0;
      else
        v98 = 1;
      v99 = !v98;
      if (v99 == v97 || !*(_BYTE *)(v75 + 736))
        goto LABEL_193;
    }
    else
    {
      if (v90)
        v100 = v89 == 0;
      else
        v100 = 1;
      if (v100 || (v90 = 1, !*(_BYTE *)(v75 + 736)))
      {
LABEL_193:
        if (v77)
          v101 = v79 == 0;
        else
          v101 = 1;
        if (v101)
        {
          if ((v77 != 0) != (v79 != 0))
            goto LABEL_226;
        }
        else if (*(unsigned __int8 *)(v75 + 456) != v76)
        {
          goto LABEL_226;
        }
        v102 = *(unsigned __int8 *)(v75 + 464);
        if (v93)
          v103 = v102 == 0;
        else
          v103 = 1;
        if (v103)
        {
          if ((v93 != 0) != (v102 != 0))
            goto LABEL_226;
        }
        else if (*v91 != v92)
        {
          goto LABEL_226;
        }
        if (v90 && *(_BYTE *)(v75 + 469))
        {
          if (*(unsigned __int8 *)(v75 + 468) == v89)
          {
LABEL_227:
            if (*(_QWORD *)(v75 + 72))
            {
              v104 = *(_QWORD *)(v75 + 80);
              if (v104)
              {
                *(_DWORD *)__p_new_stuff = 0;
                (*(void (**)(uint64_t, _QWORD, std::string::value_type *))(*(_QWORD *)v104 + 40))(v104, 0, __p_new_stuff);
              }
            }
            *(_QWORD *)(v75 + 72) = a4;
            if (a4)
            {
              v105 = *(_QWORD *)(v75 + 80);
              if (v105)
              {
                *(_DWORD *)__p_new_stuff = cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::GetDegradationPreference((cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)v75);
                (*(void (**)(uint64_t, uint64_t, std::string::value_type *))(*(_QWORD *)v105 + 40))(v105, a4, __p_new_stuff);
              }
            }
            return 1;
          }
        }
        else if ((v90 != 0) == (*(_BYTE *)(v75 + 469) != 0))
        {
          goto LABEL_227;
        }
LABEL_226:
        __src.__r_.__value_.__r.__words[2] = (std::string::size_type)absl::internal_any_invocable::EmptyManager;
        v117 = 0;
        cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::ReconfigureEncoder(v75, (uint64_t)&__src, v9, v10, v11, v12, v13, (uint64_t)p_src);
        ((void (*)(uint64_t, std::string *, std::string *))__src.__r_.__value_.__r.__words[2])(1, &__src, &__src);
        goto LABEL_227;
      }
    }
    cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::SetCodec(v75, v75 + 488);
    v90 = HIBYTE(a3[6]);
    v89 = a3[6];
    v79 = *(unsigned __int8 *)(v75 + 457);
    goto LABEL_193;
  }
LABEL_168:
  if (a4)
  {
LABEL_235:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc", 1427, "source == nullptr", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v11, v12, v13, (uint64_t)p_src, v106);
LABEL_236:
    abort();
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v81, v82, v83, v84, v85, v86, v87, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  return 0;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SetVideoSend(uint64_t a1, unsigned int a2, unsigned __int16 *a3, uint64_t a4)
{
  return cricket::WebRtcVideoSendChannel::SetVideoSend(a1 - 64, a2, a3, a4);
}

uint64_t cricket::WebRtcVideoSendChannel::AddSendStream(cricket::WebRtcVideoSendChannel *this, unsigned int **a2)
{
  const cricket::StreamParams *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t **v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t **v22;
  char *v23;
  unsigned int v24;
  BOOL v25;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  unsigned int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;
  __int128 *v58;
  std::string *v59;
  __int128 v60;
  uint64_t v61;
  const cricket::StreamParams *v62;
  _BYTE *v63;
  _BYTE *v64;
  int64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  std::string *v76;
  __int128 *v77;
  __int128 v78;
  char *v79;
  _BYTE *v80;
  _BYTE *v81;
  int64_t v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 **p_s2;
  unint64_t v90;
  BOOL v91;
  int v92;
  int v93;
  unint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 **v99;
  unint64_t v100;
  _BOOL4 v101;
  int v102;
  int v103;
  int *v105;
  int *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  unint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  _DWORD *v124;
  std::string *v125;
  char v126;
  const std::string::value_type *v127;
  size_t v128;
  int v129;
  std::string *v130;
  char v131;
  const std::string::value_type *v132;
  size_t v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  _DWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  unsigned int v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t *v143;
  void (*v144)(char *, char *);
  std::string *v145;
  const cricket::StreamParams *v146;
  uint64_t v147;
  void *v148;
  char v149;
  unint64_t v150;
  int v151;
  char v152;
  uint64_t v153;
  const cricket::StreamParams *v154;
  uint64_t v155;
  _BYTE v156[264];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int16 v161;
  __int128 v162;
  int v163;
  char v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  char v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  int v177;
  __int16 v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int16 v195;
  __int128 v196;
  int v197;
  char v198;
  uint64_t v199;
  std::string v200;
  void *__p[2];
  char v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int16 v207;
  __int128 v208;
  int v209;
  char v210;
  uint64_t v211;
  unsigned __int8 **__s2;
  unint64_t v213;
  char v214;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0
    && (cricket::StreamParams::ToString((cricket::StreamParams *)a2, (char *)__p),
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc"), v202 < 0))
  {
    operator delete(__p[0]);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    if (!(_DWORD)result)
      return result;
  }
  v154 = (const cricket::StreamParams *)a2;
  v17 = a2[3];
  v18 = a2[4];
  if (v17 == v18)
  {
LABEL_33:
    v170 = 0;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v171 = 1;
    v172 = 1460;
    v173 = 0;
    v174 = 0u;
    v175 = 0u;
    v176 = 0u;
    v177 = -1;
    v178 = 0;
    v180 = -1;
    v181 = -1;
    v179 = 0;
    v185 = 0;
    v184 = 0u;
    v183 = 0u;
    v182 = 0u;
    v186 = -1;
    v189 = 0;
    v187 = 0;
    v188 = 0;
    v190 = 0;
    LOBYTE(v191) = 0;
    *((_QWORD *)&v191 + 1) = 0;
    v192 = 0uLL;
    LOBYTE(v193) = 0;
    DWORD2(v193) = 1000;
    v194 = (unint64_t)this + 16;
    v195 = 0;
    v196 = 0uLL;
    v197 = 65537;
    v198 = 0;
    v199 = 0;
    v42 = *((_QWORD *)v154 + 15);
    v43 = *((_QWORD *)v154 + 16);
    if (v42 != v43)
    {
      v44 = 0;
      do
      {
        if ((unint64_t)v44 >= *((_QWORD *)&v168 + 1))
        {
          v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v167 + 8, v42);
        }
        else
        {
          if (!v44)
            goto LABEL_218;
          if (*(char *)(v42 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)v42, *(_QWORD *)(v42 + 8));
          }
          else
          {
            v45 = *(_OWORD *)v42;
            v44->__r_.__value_.__r.__words[2] = *(_QWORD *)(v42 + 16);
            *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
          }
          ++v44;
        }
        *(_QWORD *)&v168 = v44;
        v42 += 80;
      }
      while (v42 != v43);
    }
    LOBYTE(v195) = *((_BYTE *)this + 125);
    HIBYTE(v195) = *((_BYTE *)this + 127);
    LOBYTE(v191) = *((_BYTE *)this + 128);
    v46 = *((_QWORD *)this + 68);
    *((_QWORD *)&v192 + 1) = *((_QWORD *)this + 70);
    *((_QWORD *)&v191 + 1) = v46;
    *(_QWORD *)&v192 = (char *)this + 72;
    v197 = *((_DWORD *)this + 252);
    v198 = *((_BYTE *)this + 1012);
    v173 = (*(uint64_t (**)(cricket::WebRtcVideoSendChannel *))(*(_QWORD *)this + 64))(this);
    DWORD2(v193) = *((_DWORD *)this + 33);
    v190 = *((_BYTE *)this + 136);
    v47 = operator new();
    v48 = *((_QWORD *)this + 13);
    webrtc::RtpConfig::RtpConfig((uint64_t)v156, (uint64_t)&v166);
    v159 = v193;
    v160 = v194;
    v157 = v191;
    v158 = v192;
    v150 = (unint64_t)&v157;
    v161 = v195;
    v162 = v196;
    v163 = v197;
    v164 = v198;
    v49 = v199;
    *(_QWORD *)&v196 = 0;
    v199 = 0;
    v165 = v49;
    v149 = *((_BYTE *)this + 124);
    v50 = *((_QWORD *)this + 65);
    v51 = *((_QWORD *)this + 66);
    v52 = v51 - v50;
    v151 = *((_DWORD *)this + 163);
    if (v51 == v50)
    {
      v61 = 0;
      v148 = 0;
      v55 = (uint64_t)v154;
    }
    else
    {
      if ((v52 & 0x8000000000000000) != 0)
        goto LABEL_67;
      v53 = (char *)operator new(v52);
      v54 = 0;
      v55 = (uint64_t)v154;
      do
      {
        v58 = (__int128 *)(v50 + v54);
        v59 = (std::string *)&v53[v54];
        if (*(char *)(v50 + v54 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v59, *(const std::string::value_type **)v58, *((_QWORD *)v58 + 1));
        }
        else
        {
          v60 = *v58;
          v59->__r_.__value_.__r.__words[2] = *((_QWORD *)v58 + 2);
          *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
        }
        v56 = &v53[v54];
        v57 = *(_DWORD *)(v50 + v54 + 24);
        v56[28] = *(_BYTE *)(v50 + v54 + 28);
        *((_DWORD *)v56 + 6) = v57;
        v54 += 32;
      }
      while (v50 + v54 != v51);
      v148 = v53;
      v61 = (uint64_t)&v53[v54];
    }
    *(_QWORD *)v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 200))(v48);
    *(_QWORD *)(v47 + 8) = 0;
    *(_QWORD *)(v47 + 16) = 0;
    *(_QWORD *)(v47 + 24) = 0;
    v64 = *(_BYTE **)(v55 + 24);
    v63 = *(_BYTE **)(v55 + 32);
    v65 = v63 - v64;
    if (v63 != v64)
    {
      if (v65 < 0)
        goto LABEL_67;
      v66 = (char *)operator new(v63 - v64);
      *(_QWORD *)(v47 + 8) = v66;
      *(_QWORD *)(v47 + 16) = v66;
      v67 = &v66[4 * (v65 >> 2)];
      *(_QWORD *)(v47 + 24) = v67;
      memcpy(v66, v64, v65);
      *(_QWORD *)(v47 + 16) = v67;
    }
    v155 = v48;
    *(_QWORD *)(v47 + 32) = 0;
    *(_QWORD *)(v47 + 40) = 0;
    *(_QWORD *)(v47 + 48) = 0;
    v68 = *(_QWORD *)(v55 + 48);
    v69 = *(_QWORD *)(v55 + 56);
    v70 = v69 - v68;
    v153 = v47;
    if (v69 == v68)
      goto LABEL_69;
    v71 = 0xAAAAAAAAAAAAAAABLL * (v70 >> 4);
    if (v71 < 0x555555555555556)
    {
      v72 = (char *)operator new(v70);
      v73 = 0;
      *(_QWORD *)(v153 + 32) = v72;
      *(_QWORD *)(v153 + 40) = v72;
      *(_QWORD *)(v153 + 48) = &v72[48 * v71];
      do
      {
        v76 = (std::string *)&v72[v73];
        v77 = (__int128 *)(v68 + v73);
        if (*(char *)(v68 + v73 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v76, *(const std::string::value_type **)v77, *((_QWORD *)v77 + 1));
        }
        else
        {
          v78 = *v77;
          v76->__r_.__value_.__r.__words[2] = *((_QWORD *)v77 + 2);
          *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v78;
        }
        v79 = &v72[v73];
        *((_QWORD *)v79 + 3) = 0;
        *((_QWORD *)v79 + 4) = 0;
        *((_QWORD *)v79 + 5) = 0;
        v81 = *(_BYTE **)(v68 + v73 + 24);
        v80 = *(_BYTE **)(v68 + v73 + 32);
        v82 = v80 - v81;
        if (v80 != v81)
        {
          if (v82 < 0)
            goto LABEL_67;
          v74 = (char *)operator new(v80 - v81);
          *((_QWORD *)v79 + 3) = v74;
          *((_QWORD *)v79 + 4) = v74;
          v75 = &v74[4 * (v82 >> 2)];
          *((_QWORD *)v79 + 5) = v75;
          memcpy(v74, v81, v82);
          *((_QWORD *)v79 + 4) = v75;
        }
        v73 += 48;
      }
      while (v68 + v73 != v69);
      v83 = &v72[v73];
      v47 = v153;
      v55 = (uint64_t)v154;
      *(_QWORD *)(v153 + 40) = v83;
LABEL_69:
      *(_QWORD *)(v47 + 56) = v155;
      *(_BYTE *)(v47 + 64) = v149;
      *(_QWORD *)(v47 + 72) = 0;
      *(_QWORD *)(v47 + 80) = 0;
      webrtc::RtpConfig::RtpConfig((uint64_t)__p, (uint64_t)v156);
      v205 = v159;
      v206 = v160;
      v203 = v157;
      v204 = v158;
      v207 = v161;
      v208 = v162;
      v209 = v163;
      v210 = v164;
      v84 = v165;
      *(_QWORD *)&v162 = 0;
      v165 = 0;
      v211 = v84;
      webrtc::RtpConfig::RtpConfig(v47 + 88, (uint64_t)__p);
      v85 = v206;
      *(_OWORD *)(v47 + 384) = v205;
      *(_OWORD *)(v47 + 400) = v85;
      *(_WORD *)(v47 + 416) = v207;
      v86 = v204;
      *(_OWORD *)(v47 + 352) = v203;
      *(_OWORD *)(v47 + 368) = v86;
      *(_OWORD *)(v47 + 424) = v208;
      *(_DWORD *)(v47 + 440) = v209;
      *(_BYTE *)(v47 + 444) = v210;
      v87 = v211;
      *(_QWORD *)&v208 = 0;
      v211 = 0;
      *(_QWORD *)(v47 + 448) = v87;
      *(_OWORD *)(v47 + 456) = *((_OWORD *)this + 47);
      *(_DWORD *)(v47 + 472) = *((_DWORD *)this + 192);
      *(_DWORD *)(v47 + 476) = v151;
      *(_BYTE *)(v47 + 480) = 0;
      *(_BYTE *)(v47 + 488) = 0;
      *(_BYTE *)(v47 + 736) = 0;
      if (*((_BYTE *)this + 488))
      {
        cricket::Codec::Codec((cricket::Codec *)(v47 + 488), (cricket::WebRtcVideoSendChannel *)((char *)this + 240));
        *(_OWORD *)(v47 + 704) = *(_OWORD *)((char *)this + 456);
        *(_OWORD *)(v47 + 713) = *(_OWORD *)((char *)this + 465);
        *(_BYTE *)(v47 + 736) = 1;
      }
      *(_DWORD *)(v47 + 744) = 0;
      *((_BYTE *)&v200.__r_.__value_.__s + 23) = 5;
      if (&v200 <= (std::string *)"Unset" && (char *)v200.__r_.__value_.__r.__words + 5 > "Unset")
        goto LABEL_218;
      LODWORD(v200.__r_.__value_.__l.__data_) = *(_DWORD *)"Unset";
      WORD2(v200.__r_.__value_.__r.__words[0]) = str_11_12[4];
      *(std::string *)(v47 + 752) = v200;
      *(_QWORD *)(v47 + 784) = 0;
      *(_QWORD *)(v47 + 800) = 0;
      *(_QWORD *)(v47 + 792) = 0;
      *(_QWORD *)(v47 + 776) = v47 + 784;
      *(_QWORD *)(v47 + 877) = 0;
      *(_OWORD *)(v47 + 848) = 0u;
      *(_OWORD *)(v47 + 864) = 0u;
      *(_QWORD *)(v47 + 896) = 0;
      *(_QWORD *)(v47 + 888) = 0;
      *(_QWORD *)(v47 + 904) = 0x3FF0000000000000;
      *(_OWORD *)(v47 + 912) = 0u;
      *(_OWORD *)(v47 + 928) = 0u;
      *(_WORD *)(v47 + 944) = 0;
      if (v211)
        (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
      if ((_QWORD)v208)
        (*(void (**)(_QWORD))(*(_QWORD *)v208 + 8))(v208);
      webrtc::RtpConfig::~RtpConfig((webrtc::RtpConfig *)__p);
      cricket::StreamParams::StreamParams(&v200, (const cricket::StreamParams *)v55);
      cricket::CreateRtpParametersWithEncodings(&v200, v47 + 952);
      cricket::StreamParams::~StreamParams((cricket::StreamParams *)&v200);
      *(_BYTE *)(v47 + 1120) = 0;
      v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 184))(v155);
      (*(void (**)(unsigned __int8 ***__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v88 + 16))(&__s2, v88, "WebRTC-Video-DisableAutomaticResize", 35);
      if (v214 < 0)
      {
        v90 = v213;
        if ((v213 & 0x8000000000000000) != 0)
          goto LABEL_218;
        p_s2 = __s2;
        if (v213)
        {
          if (!__s2)
            goto LABEL_218;
        }
      }
      else
      {
        p_s2 = (unsigned __int8 **)&__s2;
        v90 = v214;
      }
      if (v90 >= 7)
      {
        v92 = *(_DWORD *)p_s2;
        v93 = *(_DWORD *)((char *)p_s2 + 3);
        v91 = v92 == 1650552389 && v93 == 1684368482;
        if ((v214 & 0x80) == 0)
        {
LABEL_93:
          *(_BYTE *)(v47 + 1121) = v91;
          v95 = *(_QWORD *)(v47 + 168);
          if (v95 >= 0x4B0)
            v95 = 1200;
          *(_QWORD *)(v47 + 168) = v95;
          *(_BYTE *)(v47 + 480) = *((_BYTE *)this + 745);
          cricket::StreamParams::GetPrimarySsrcs((_QWORD *)v55, v47 + 88);
          v96 = *(_DWORD **)(v47 + 88);
          if (v96 == *(_DWORD **)(v47 + 96))
            goto LABEL_220;
          v97 = *(_QWORD *)(v47 + 1048);
          if (*(_QWORD *)(v47 + 1056) != v97)
          {
            *(_DWORD *)v97 = *v96;
            *(_BYTE *)(v97 + 4) = 1;
            v214 = 3;
            if (&__s2 > (unsigned __int8 ***)"FID" || (char *)&__s2 + 3 <= "FID")
            {
              LOWORD(__s2) = *(_WORD *)"FID";
              WORD1(__s2) = cricket::kFidSsrcGroupSemantics[2];
              cricket::StreamParams::GetSecondarySsrcs(v55, (unsigned __int8 **)&__s2, (int **)(v47 + 88), (_QWORD *)(v47 + 288));
              if (v214 < 0)
                operator delete(__s2);
              v98 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v47 + 56) + 184))(*(_QWORD *)(v47 + 56));
              (*(void (**)(unsigned __int8 ***__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v98 + 16))(&__s2, v98, "WebRTC-FlexFEC-03", 17);
              if ((v214 & 0x80000000) == 0)
              {
                v99 = (unsigned __int8 **)&__s2;
                v100 = v214;
                goto LABEL_106;
              }
              v100 = v213;
              if ((v213 & 0x8000000000000000) == 0)
              {
                v99 = __s2;
                if (!v213 || __s2)
                {
LABEL_106:
                  if (v100 >= 7)
                  {
                    v102 = *(_DWORD *)v99;
                    v103 = *(_DWORD *)((char *)v99 + 3);
                    v101 = v102 == 1650552389 && v103 == 1684368482;
                    if (v214 < 0)
                    {
LABEL_118:
                      operator delete(__s2);
                      if (!v101)
                        goto LABEL_153;
                      goto LABEL_119;
                    }
                  }
                  else
                  {
                    v101 = 0;
                    if (v214 < 0)
                      goto LABEL_118;
                  }
                  if (!v101)
                    goto LABEL_153;
LABEL_119:
                  v105 = *(int **)(v153 + 88);
                  if (v105 == *(int **)(v153 + 96))
                    goto LABEL_153;
                  v106 = *(int **)(v153 + 96);
                  if (&__s2 > (unsigned __int8 ***)"FEC-FR" || (char *)&__s2 + 6 <= "FEC-FR")
                  {
                    if (*(_QWORD *)(v55 + 48) != *(_QWORD *)(v55 + 56))
                    {
                      v152 = 0;
                      do
                      {
                        v107 = *v105;
                        v108 = *(_QWORD *)(v55 + 48);
                        v109 = *(_QWORD *)(v55 + 56);
                        v214 = 6;
                        strcpy((char *)&__s2, "FEC-FR");
                        while (v108 != v109)
                        {
                          v110 = *(unsigned __int8 *)(v108 + 23);
                          if ((v110 & 0x80u) == 0)
                            v111 = *(unsigned __int8 *)(v108 + 23);
                          else
                            v111 = *(_QWORD *)(v108 + 8);
                          if (v111 != 6)
                            goto LABEL_128;
                          if ((v110 & 0x80) != 0)
                          {
                            if (memcmp(*(const void **)v108, &__s2, *(_QWORD *)(v108 + 8)))
                              goto LABEL_128;
                          }
                          else if (*(_BYTE *)(v108 + 23))
                          {
                            v112 = 0;
                            while (*(unsigned __int8 *)(v108 + v112) == *((unsigned __int8 *)&__s2 + v112))
                            {
                              if (v110 == ++v112)
                                goto LABEL_139;
                            }
                            goto LABEL_128;
                          }
LABEL_139:
                          v113 = *(_DWORD **)(v108 + 24);
                          v114 = *(_QWORD *)(v108 + 32) - (_QWORD)v113;
                          if (v114)
                            v115 = v114 >= 5;
                          else
                            v115 = 0;
                          if (v115 && *v113 == v107)
                          {
                            if ((v152 & 1) != 0)
                            {
                              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
                              {
                                v150 = v150 & 0xFFFFFFFF00000000 | 0x3689;
                                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v116, v117, v118, v119, v120, v121, v122, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
                              }
                              v152 = 1;
                              v55 = (uint64_t)v154;
                            }
                            else
                            {
                              *(_DWORD *)(v153 + 260) = v113[1];
                              v123 = *(_DWORD **)(v153 + 280);
                              v124 = *(_DWORD **)(v153 + 264);
                              v55 = (uint64_t)v154;
                              if (v123 == v124)
                              {
                                if (v123)
                                {
                                  *(_QWORD *)(v153 + 272) = v123;
                                  operator delete(v123);
                                }
                                v124 = operator new(4uLL);
                                *(_QWORD *)(v153 + 264) = v124;
                                *(_QWORD *)(v153 + 280) = v124 + 1;
                              }
                              *v124 = v107;
                              *(_QWORD *)(v153 + 272) = v124 + 1;
                              v152 = 1;
                            }
                            break;
                          }
LABEL_128:
                          v108 += 48;
                        }
                        ++v105;
                      }
                      while (v105 != v106);
                    }
LABEL_153:
                    v125 = (std::string *)(v153 + 320);
                    if (v153 + 320 != v55 + 72)
                    {
                      v126 = *(_BYTE *)(v55 + 95);
                      if (*(char *)(v153 + 343) < 0)
                      {
                        if (v126 >= 0)
                          v127 = (const std::string::value_type *)(v55 + 72);
                        else
                          v127 = *(const std::string::value_type **)(v55 + 72);
                        if (v126 >= 0)
                          v128 = *(unsigned __int8 *)(v55 + 95);
                        else
                          v128 = *(_QWORD *)(v55 + 80);
                        std::string::__assign_no_alias<false>(v125, v127, v128);
                      }
                      else if ((*(_BYTE *)(v55 + 95) & 0x80) != 0)
                      {
                        std::string::__assign_no_alias<true>(v125, *(char **)(v55 + 72), *(_QWORD *)(v55 + 80));
                      }
                      else
                      {
                        *(_OWORD *)&v125->__r_.__value_.__l.__data_ = *(_OWORD *)(v55 + 72);
                        *(_QWORD *)(v153 + 336) = *(_QWORD *)(v55 + 88);
                      }
                    }
                    std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(v153 + 184), (uint64_t)v148, v61, (v61 - (uint64_t)v148) >> 5);
                    std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(v153 + 1024), (uint64_t)v148, v61, (v61 - (uint64_t)v148) >> 5);
                    if (*((_BYTE *)this + 713))
                      v129 = 2;
                    else
                      v129 = 1;
                    *(_DWORD *)(v153 + 160) = v129;
                    v130 = (std::string *)(v153 + 136);
                    if ((cricket::WebRtcVideoSendChannel *)(v153 + 136) != (cricket::WebRtcVideoSendChannel *)((char *)this + 720))
                    {
                      v131 = *((_BYTE *)this + 743);
                      if ((*(char *)(v153 + 159) & 0x80000000) == 0)
                      {
                        if ((*((_BYTE *)this + 743) & 0x80) != 0)
                        {
                          std::string::__assign_no_alias<true>(v130, *((char **)this + 90), *((_QWORD *)this + 91));
                          *(_BYTE *)(v153 + 1104) = *((_BYTE *)this + 713);
                          if (!*((_BYTE *)this + 488))
                          {
LABEL_182:
                            if (v148)
                            {
                              while ((void *)v61 != v148)
                              {
                                if (*(char *)(v61 - 9) < 0)
                                  operator delete(*(void **)(v61 - 32));
                                v61 -= 32;
                              }
                              operator delete(v148);
                              v134 = v165;
                              if (!v165)
                              {
LABEL_185:
                                if ((_QWORD)v162)
                                  (*(void (**)(_QWORD))(*(_QWORD *)v162 + 8))(v162);
                                webrtc::RtpConfig::~RtpConfig((webrtc::RtpConfig *)v156);
                                v135 = *(unsigned int **)(v55 + 24);
                                if (v135 == *(unsigned int **)(v55 + 32))
                                {
                                  v136 = 0;
                                  v138 = (_QWORD *)((char *)this + 152);
                                  v137 = (_DWORD *)*((_QWORD *)this + 19);
                                  if (v137)
                                  {
                                    while (1)
                                    {
LABEL_199:
                                      while (1)
                                      {
                                        v139 = v137;
                                        v140 = v137[8];
                                        if (v136 >= v140)
                                          break;
                                        v137 = (_DWORD *)*v139;
                                        v138 = v139;
                                        if (!*v139)
                                          goto LABEL_203;
                                      }
                                      if (v140 >= v136)
                                        goto LABEL_206;
                                      v137 = (_DWORD *)v139[1];
                                      if (!v137)
                                      {
                                        v138 = v139 + 1;
                                        goto LABEL_203;
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  v136 = *v135;
                                  v138 = (_QWORD *)((char *)this + 152);
                                  v137 = (_DWORD *)*((_QWORD *)this + 19);
                                  if (v137)
                                    goto LABEL_199;
                                }
                                v139 = v138;
LABEL_203:
                                v141 = v139;
                                v139 = operator new(0x30uLL);
                                *((_DWORD *)v139 + 8) = v136;
                                v139[5] = 0;
                                *v139 = 0;
                                v139[1] = 0;
                                v139[2] = v141;
                                *v138 = v139;
                                v142 = **((_QWORD **)this + 18);
                                v143 = v139;
                                if (v142)
                                {
                                  *((_QWORD *)this + 18) = v142;
                                  v143 = (uint64_t *)*v138;
                                }
                                std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 19), v143);
                                ++*((_QWORD *)this + 20);
LABEL_206:
                                v139[5] = v153;
                                v144 = (void (*)(char *, char *))*((_QWORD *)this + 147);
                                if (v144)
                                  v144((char *)this + 1152, (char *)this + 192);
                                if (*((_BYTE *)this + 100))
                                {
                                  *(_BYTE *)(v153 + 1120) = 1;
                                  (***(void (****)(_QWORD))(v153 + 80))(*(_QWORD *)(v153 + 80));
                                }
                                if (v199)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
                                if ((_QWORD)v196)
                                  (*(void (**)(_QWORD))(*(_QWORD *)v196 + 8))(v196);
                                webrtc::RtpConfig::~RtpConfig((webrtc::RtpConfig *)&v166);
                                return 1;
                              }
                            }
                            else
                            {
                              v134 = v165;
                              if (!v165)
                                goto LABEL_185;
                            }
                            (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
                            goto LABEL_185;
                          }
                        }
                        else
                        {
                          *(_OWORD *)&v130->__r_.__value_.__l.__data_ = *((_OWORD *)this + 45);
                          *(_QWORD *)(v153 + 152) = *((_QWORD *)this + 92);
                          *(_BYTE *)(v153 + 1104) = *((_BYTE *)this + 713);
                          if (!*((_BYTE *)this + 488))
                            goto LABEL_182;
                        }
LABEL_181:
                        cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::SetCodec(v153, (uint64_t)this + 240);
                        goto LABEL_182;
                      }
                      if (v131 >= 0)
                        v132 = (char *)this + 720;
                      else
                        v132 = (const std::string::value_type *)*((_QWORD *)this + 90);
                      if (v131 >= 0)
                        v133 = *((unsigned __int8 *)this + 743);
                      else
                        v133 = *((_QWORD *)this + 91);
                      std::string::__assign_no_alias<false>(v130, v132, v133);
                    }
                    *(_BYTE *)(v153 + 1104) = *((_BYTE *)this + 713);
                    if (!*((_BYTE *)this + 488))
                      goto LABEL_182;
                    goto LABEL_181;
                  }
                  goto LABEL_219;
                }
              }
            }
          }
LABEL_218:
          __break(1u);
LABEL_219:
          v214 = 6;
          __break(1u);
LABEL_220:
          v145 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc", 1729, "!parameters_.config.rtp.ssrcs.empty()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v13, v14, v15, v16, v147);
        }
      }
      else
      {
        v91 = 0;
        if ((v214 & 0x80) == 0)
          goto LABEL_93;
      }
      operator delete(__s2);
      goto LABEL_93;
    }
LABEL_67:
    abort();
  }
  v19 = (uint64_t **)((char *)this + 200);
  if (!*((_QWORD *)this + 25))
  {
    do
    {
LABEL_24:
      v35 = *v17;
      v36 = *v19;
      v37 = (uint64_t **)((char *)this + 200);
      v38 = (uint64_t **)((char *)this + 200);
      if (*v19)
      {
        while (1)
        {
          while (1)
          {
            v38 = (uint64_t **)v36;
            v39 = *((_DWORD *)v36 + 7);
            if (v35 >= v39)
              break;
            v36 = *v38;
            v37 = v38;
            if (!*v38)
              goto LABEL_31;
          }
          if (v39 >= v35)
            break;
          v36 = v38[1];
          if (!v36)
          {
            v37 = v38 + 1;
            goto LABEL_31;
          }
        }
      }
      else
      {
LABEL_31:
        v40 = operator new(0x20uLL);
        v40[7] = v35;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
        *((_QWORD *)v40 + 2) = v38;
        *v37 = (uint64_t *)v40;
        v41 = **((_QWORD **)this + 24);
        if (v41)
        {
          *((_QWORD *)this + 24) = v41;
          v34 = *v37;
        }
        else
        {
          v34 = (uint64_t *)v40;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 25), v34);
        ++*((_QWORD *)this + 26);
      }
      ++v17;
    }
    while (v17 != v18);
    goto LABEL_33;
  }
  v20 = v17;
  while (1)
  {
    v21 = *v20;
    v22 = (uint64_t **)((char *)this + 200);
    v23 = (char *)*((_QWORD *)this + 25);
    do
    {
      v24 = *((_DWORD *)v23 + 7);
      v25 = v24 >= v21;
      if (v24 >= v21)
        v26 = (char **)v23;
      else
        v26 = (char **)(v23 + 8);
      if (v25)
        v22 = (uint64_t **)v23;
      v23 = *v26;
    }
    while (*v26);
    if (v22 != v19 && v21 >= *((_DWORD *)v22 + 7))
      break;
    if (++v20 == v18)
      goto LABEL_24;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  return 0;
}

uint64_t cricket::`anonymous namespace'::ValidateStreamParams(cricket::_anonymous_namespace_ *this, const cricket::StreamParams *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  __int128 v6;
  const void **v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t **v10;
  uint64_t **v11;
  const void **v12;
  char *v13;
  std::string *v14;
  void *v15;
  uint64_t v16;
  char **v17;
  char *v18;
  char **v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t **v30;
  uint64_t v31;
  char *v32;
  void **v33;
  uint64_t *v34;
  int v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  const char **v40;
  int v41;
  const char *v42;
  char v43;
  size_t v44;
  std::string::size_type v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  std::string::size_type size;
  std::string *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  size_t v60;
  size_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  unsigned int *v67;
  std::string::size_type v68;
  _DWORD *v69;
  unsigned int *v70;
  unsigned int v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int16 *v95;
  unsigned __int16 *v96;
  _DWORD *v97;
  uint64_t v98;
  unsigned __int16 *v99;
  uint64_t v100;
  BOOL v101;
  int v102;
  int v103;
  unsigned __int16 *v105;
  uint64_t v106;
  int v107;
  int v108;
  unsigned __int16 *v110;
  int v111;
  int v112;
  _DWORD *v114;
  _DWORD *v115;
  _DWORD *v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  void *v137[2];
  char v138;
  char v139;
  const char *v140;
  uint64_t *v141;
  void *__p;
  unint64_t v143;
  char *v144;
  void *v145;
  uint64_t v146;
  void **p_p;
  void **v148;
  uint64_t *v149;
  uint64_t v150;
  _QWORD v151[2];
  std::string v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 3) != *((_QWORD *)this + 4))
  {
    v149 = 0;
    v150 = 0;
    v148 = (void **)&v149;
    v3 = *((_QWORD *)this + 6);
    v4 = *((_QWORD *)this + 7);
    while (v3 != v4)
    {
      v5 = *(unsigned int **)(v3 + 24);
      if (*(unsigned int **)(v3 + 32) == v5)
        goto LABEL_195;
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
      }
      else
      {
        v6 = *(_OWORD *)v3;
        v152.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
        *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v6;
      }
      v146 = 0;
      p_p = 0;
      v145 = &v146;
      v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)&v145, &v146, (uint64_t **)&__p, (uint64_t **)v137, (uint64_t)&v152);
      if (*v7)
      {
        v8 = v149;
        v9 = *v5;
        v10 = &v149;
        v11 = &v149;
        if (v149)
          goto LABEL_42;
        goto LABEL_46;
      }
      v12 = v7;
      v13 = (char *)operator new(0x38uLL);
      v14 = (std::string *)(v13 + 32);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v14, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&v152.__r_.__value_.__l.__data_;
        *((_QWORD *)v13 + 6) = *((_QWORD *)&v152.__r_.__value_.__l + 2);
      }
      v15 = __p;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = v15;
      *v12 = v13;
      if (*(_QWORD *)v145)
      {
        v145 = *(void **)v145;
        v13 = (char *)*v12;
      }
      v16 = v146;
      v101 = v13 == (char *)v146;
      v13[24] = v13 == (char *)v146;
      if (v101)
        goto LABEL_39;
      while (1)
      {
        v17 = (char **)*((_QWORD *)v13 + 2);
        if (*((_BYTE *)v17 + 24))
          goto LABEL_39;
        v18 = v17[2];
        v19 = *(char ***)v18;
        if (*(char ***)v18 == v17)
          break;
        if (!v19 || (v21 = *((unsigned __int8 *)v19 + 24), v20 = v19 + 3, v21))
        {
          if (*v17 == v13)
          {
            v37 = *((_QWORD *)v13 + 1);
            *v17 = (char *)v37;
            if (v37)
            {
              *(_QWORD *)(v37 + 16) = v17;
              v18 = v17[2];
            }
            *((_QWORD *)v13 + 2) = v18;
            *(_QWORD *)&v17[2][8 * (*(_QWORD *)v17[2] != (_QWORD)v17)] = v13;
            *((_QWORD *)v13 + 1) = v17;
            v17[2] = v13;
            v18 = (char *)*((_QWORD *)v13 + 2);
            v13[24] = 1;
            v18[24] = 0;
            v17 = (char **)*((_QWORD *)v18 + 1);
            v27 = *v17;
            *((_QWORD *)v18 + 1) = *v17;
            if (v27)
LABEL_36:
              *((_QWORD *)v27 + 2) = v18;
          }
          else
          {
            *((_BYTE *)v17 + 24) = 1;
            v18[24] = 0;
            v17 = (char **)*((_QWORD *)v18 + 1);
            v27 = *v17;
            *((_QWORD *)v18 + 1) = *v17;
            if (v27)
              goto LABEL_36;
          }
          v17[2] = (char *)*((_QWORD *)v18 + 2);
          *(_QWORD *)(*((_QWORD *)v18 + 2) + 8 * (**((_QWORD **)v18 + 2) != (_QWORD)v18)) = v17;
          *v17 = v18;
          goto LABEL_38;
        }
LABEL_20:
        *((_BYTE *)v17 + 24) = 1;
        v13 = v18;
        v18[24] = v18 == (char *)v16;
        *v20 = 1;
        if (v18 == (char *)v16)
          goto LABEL_39;
      }
      v22 = *((_QWORD *)v18 + 1);
      if (v22)
      {
        v23 = *(unsigned __int8 *)(v22 + 24);
        v20 = (_BYTE *)(v22 + 24);
        if (!v23)
          goto LABEL_20;
      }
      if (*v17 == v13)
      {
        *((_BYTE *)v17 + 24) = 1;
        v18[24] = 0;
        v26 = v17[1];
        *(_QWORD *)v18 = v26;
        if (v26)
          goto LABEL_32;
      }
      else
      {
        v24 = v17[1];
        v25 = *(char **)v24;
        v17[1] = *(char **)v24;
        if (v25)
        {
          *((_QWORD *)v25 + 2) = v17;
          v18 = v17[2];
        }
        *((_QWORD *)v24 + 2) = v18;
        *(_QWORD *)&v17[2][8 * (*(_QWORD *)v17[2] != (_QWORD)v17)] = v24;
        *(_QWORD *)v24 = v17;
        v17[2] = v24;
        v18 = (char *)*((_QWORD *)v24 + 2);
        v17 = *(char ***)v18;
        v24[24] = 1;
        v18[24] = 0;
        v26 = v17[1];
        *(_QWORD *)v18 = v26;
        if (v26)
LABEL_32:
          *((_QWORD *)v26 + 2) = v18;
      }
      v17[2] = (char *)*((_QWORD *)v18 + 2);
      *(_QWORD *)(*((_QWORD *)v18 + 2) + 8 * (**((_QWORD **)v18 + 2) != (_QWORD)v18)) = v17;
      v17[1] = v18;
LABEL_38:
      *((_QWORD *)v18 + 2) = v17;
LABEL_39:
      p_p = (void **)((char *)p_p + 1);
      v8 = v149;
      v9 = *v5;
      v10 = &v149;
      v11 = &v149;
      if (v149)
      {
        while (1)
        {
LABEL_42:
          while (1)
          {
            v11 = (uint64_t **)v8;
            v28 = *((_DWORD *)v8 + 8);
            if (v9 >= v28)
              break;
            v8 = *v11;
            v10 = v11;
            if (!*v11)
              goto LABEL_46;
          }
          if (v28 >= v9)
            break;
          v8 = v11[1];
          if (!v8)
          {
            v10 = v11 + 1;
            goto LABEL_46;
          }
        }
        v35 = 1;
        v30 = v11;
        std::__tree<rtc::SocketAddress>::destroy((uint64_t)&v145, (char *)v146);
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_55;
LABEL_52:
        if (!v35)
          goto LABEL_4;
LABEL_56:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(v30 + 5), (const void **)v3, v3);
        if ((v36 & 1) != 0)
          goto LABEL_4;
        v117 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>();
        if ((v117 & 1) == 0)
        {
          v145 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/"
                 "webrtc_video_engine.cc";
          v146 = 2555;
          p_p = &__p;
          if (*(_QWORD *)(v3 + 32) == *(_QWORD *)(v3 + 24))
          {
LABEL_195:
            __break(1u);
LABEL_196:
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            {
              cricket::StreamParams::ToString(this, (char *)&v152);
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v126, v127, v128, v129, v130, v131, v132, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
              if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v152.__r_.__value_.__l.__data_);
            }
LABEL_199:
            v94 = 0;
            v125 = (char *)v145;
            if (!v145)
              goto LABEL_201;
            goto LABEL_200;
          }
          cricket::StreamParams::ToString(this, (char *)&v152);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v118, v119, v120, v121, v122, v123, v124, (uint64_t)v145);
          if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v152.__r_.__value_.__l.__data_);
        }
        v94 = 0;
        goto LABEL_201;
      }
LABEL_46:
      v29 = operator new(0x40uLL);
      v30 = (uint64_t **)v29;
      v29[8] = v9;
      v31 = v146;
      *((_QWORD *)v29 + 5) = v145;
      *((_QWORD *)v29 + 6) = v31;
      v32 = (char *)(v29 + 12);
      v33 = p_p;
      *((_QWORD *)v29 + 7) = p_p;
      if (v33)
      {
        *(_QWORD *)(v31 + 16) = v32;
        v145 = &v146;
        v146 = 0;
        p_p = 0;
      }
      else
      {
        *((_QWORD *)v29 + 5) = v32;
      }
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = 0;
      *((_QWORD *)v29 + 2) = v11;
      *v10 = (uint64_t *)v29;
      v34 = (uint64_t *)v29;
      if (*v148)
      {
        v148 = (void **)*v148;
        v34 = *v10;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v149, v34);
      v35 = 0;
      ++v150;
      std::__tree<rtc::SocketAddress>::destroy((uint64_t)&v145, (char *)v146);
      if ((SHIBYTE(v152.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_52;
LABEL_55:
      operator delete(v152.__r_.__value_.__l.__data_);
      if (v35)
        goto LABEL_56;
LABEL_4:
      v3 += 48;
    }
    v145 = 0;
    v146 = 0;
    p_p = 0;
    cricket::StreamParams::GetPrimarySsrcs(this, (uint64_t)&v145);
    v38 = 0;
    v39 = 1;
    v151[0] = "FID";
    v151[1] = "FEC-FR";
    v40 = (const char **)v151;
    while (1)
    {
      v42 = *v40;
      if (!*v40)
        goto LABEL_195;
      v43 = v38;
      v44 = strlen(*v40);
      if (v44 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_203;
      v45 = v44;
      if (v44 > 0x16)
      {
        v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v44 | 7) != 0x17)
          v47 = v44 | 7;
        v48 = v47 + 1;
        v46 = (char *)operator new(v47 + 1);
        v152.__r_.__value_.__l.__size_ = v45;
        v152.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
        v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
      }
      else
      {
        *((_BYTE *)&v152.__r_.__value_.__s + 23) = v44;
        v46 = (char *)&v152;
      }
      v49 = &v46[v45];
      if (v46 <= v42 && v49 > v42)
        goto LABEL_195;
      if (v45)
        memmove(v46, v42, v45);
      *v49 = 0;
      v51 = *((_QWORD *)this + 6);
      v52 = *((_QWORD *)this + 7);
      v53 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
      if (v51 != v52)
      {
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v152.__r_.__value_.__r.__words[2]);
        else
          size = v152.__r_.__value_.__l.__size_;
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = &v152;
        else
          v55 = (std::string *)v152.__r_.__value_.__r.__words[0];
        do
        {
          v56 = *(unsigned __int8 *)(v51 + 23);
          if ((v56 & 0x80u) == 0)
            v57 = *(unsigned __int8 *)(v51 + 23);
          else
            v57 = *(_QWORD *)(v51 + 8);
          if (v57 == size)
          {
            if ((v56 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v51, v55, *(_QWORD *)(v51 + 8)))
              {
LABEL_89:
                if (*(_QWORD *)(v51 + 32) != *(_QWORD *)(v51 + 24))
                  goto LABEL_104;
              }
            }
            else
            {
              if (!*(_BYTE *)(v51 + 23))
                goto LABEL_89;
              v58 = 0;
              while (*(unsigned __int8 *)(v51 + v58) == v55->__r_.__value_.__s.__data_[v58])
              {
                if (v56 == ++v58)
                  goto LABEL_89;
              }
            }
          }
          v51 += 48;
        }
        while (v51 != v52);
      }
      v51 = 0;
LABEL_104:
      if (v53 < 0)
      {
        operator delete(v152.__r_.__value_.__l.__data_);
        if (v51)
        {
LABEL_108:
          memset(&v152, 0, sizeof(v152));
          v59 = *v40;
          if (!*v40)
            goto LABEL_195;
          v60 = strlen(*v40);
          if (v60 > 0x7FFFFFFFFFFFFFF7)
LABEL_203:
            abort();
          v61 = v60;
          if (v60 > 0x16)
          {
            v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v60 | 7) != 0x17)
              v63 = v60 | 7;
            v64 = v63 + 1;
            v62 = (char *)operator new(v63 + 1);
            v143 = v61;
            v144 = (char *)(v64 | 0x8000000000000000);
            __p = v62;
          }
          else
          {
            HIBYTE(v144) = v60;
            v62 = (char *)&__p;
          }
          v65 = &v62[v61];
          if (v62 <= v59 && v65 > v59)
            goto LABEL_195;
          if (v61)
            memmove(v62, v59, v61);
          *v65 = 0;
          cricket::StreamParams::GetSecondarySsrcs((uint64_t)this, (unsigned __int8 **)&__p, (int **)&v145, &v152);
          if (SHIBYTE(v144) < 0)
          {
            operator delete(__p);
            v68 = v152.__r_.__value_.__l.__size_;
            v67 = (unsigned int *)v152.__r_.__value_.__r.__words[0];
            if (v152.__r_.__value_.__r.__words[0] == v152.__r_.__value_.__l.__size_)
              goto LABEL_65;
          }
          else
          {
            v68 = v152.__r_.__value_.__l.__size_;
            v67 = (unsigned int *)v152.__r_.__value_.__r.__words[0];
            if (v152.__r_.__value_.__r.__words[0] == v152.__r_.__value_.__l.__size_)
              goto LABEL_65;
          }
          v69 = (_DWORD *)*((_QWORD *)this + 4);
          v70 = v67;
          if (*((_DWORD **)this + 3) == v69)
          {
            v71 = *v67;
LABEL_136:
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            {
              __p = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engi"
                    "ne/webrtc_video_engine.cc";
              v143 = v135 & 0xFFFFFFFF00000000 | 0xACB;
              v135 = v143;
              v144 = &v139;
              v140 = "SSRC '";
              v141 = (uint64_t *)&__p;
              cricket::StreamParams::ToString(this, (char *)v137);
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v80, v81, v82, v83, v84, v85, v86, *v141);
              if (v138 < 0)
                operator delete(v137[0]);
              v136 = v136 & 0xFFFFFFFF00000000 | v71;
            }
LABEL_140:
            v41 = 0;
            v67 = (unsigned int *)v152.__r_.__value_.__r.__words[0];
            if (v152.__r_.__value_.__r.__words[0])
              goto LABEL_66;
          }
          else
          {
            do
            {
              v71 = *v70;
              v72 = (_DWORD *)*((_QWORD *)this + 3);
              while (*v72 != v71)
              {
                if (++v72 == v69)
                  goto LABEL_136;
              }
              ++v70;
            }
            while (v70 != (unsigned int *)v68);
            if (v146 - (_QWORD)v145 != v68 - (_QWORD)v67)
            {
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
              {
                cricket::StreamParams::ToString(this, (char *)&__p);
                v134 = v134 & 0xFFFFFFFF00000000 | 0xB0B;
                rtc::webrtc_logging_impl::Log("\r\t\t\n", v73, v74, v75, v76, v77, v78, v79, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
                if (SHIBYTE(v144) < 0)
                  operator delete(__p);
              }
              goto LABEL_140;
            }
LABEL_65:
            v41 = 1;
            if (v67)
            {
LABEL_66:
              v152.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
              operator delete(v67);
            }
          }
          if (!v41)
            goto LABEL_199;
        }
      }
      else if (v51)
      {
        goto LABEL_108;
      }
      v40 = (const char **)&v151[v39];
      v38 = 1;
      v39 = 2;
      if ((v43 & 1) != 0)
      {
        v96 = (unsigned __int16 *)*((_QWORD *)this + 6);
        v95 = (unsigned __int16 *)*((_QWORD *)this + 7);
        if (v96 != v95)
        {
          v97 = (_DWORD *)*((_QWORD *)this + 4);
          do
          {
            v98 = *((unsigned __int8 *)v96 + 23);
            v99 = v96;
            v100 = v98;
            if (*((char *)v96 + 23) < 0)
            {
              v100 = *((_QWORD *)v96 + 1);
              if (v100 < 0)
                goto LABEL_195;
              v99 = *(unsigned __int16 **)v96;
              v101 = v100 && v99 == 0;
              if (v101)
                goto LABEL_195;
            }
            if (v100 == 3)
            {
              v102 = *v99;
              v103 = *((unsigned __int8 *)v99 + 2);
              if (v102 == *(unsigned __int16 *)"FID" && v103 == cricket::kFidSsrcGroupSemantics[2])
                goto LABEL_206;
            }
            v105 = v96;
            v106 = *((unsigned __int8 *)v96 + 23);
            if ((v98 & 0x80) != 0)
            {
              v106 = *((_QWORD *)v96 + 1);
              if (v106 < 0)
                goto LABEL_195;
              v105 = *(unsigned __int16 **)v96;
              if (v106)
              {
                if (!v105)
                  goto LABEL_195;
              }
            }
            if (v106 == 3)
            {
              v107 = *v105;
              v108 = *((unsigned __int8 *)v105 + 2);
              if (v107 == *(unsigned __int16 *)"SIM" && v108 == cricket::kSimSsrcGroupSemantics[2])
                goto LABEL_206;
            }
            v110 = v96;
            if ((v98 & 0x80) != 0)
            {
              v98 = *((_QWORD *)v96 + 1);
              if (v98 < 0)
                goto LABEL_195;
              v110 = *(unsigned __int16 **)v96;
              if (v98)
              {
                if (!v110)
                  goto LABEL_195;
              }
            }
            if (v98 == 6)
            {
              v111 = *(_DWORD *)v110;
              v112 = v110[2];
              if (v111 == *(_DWORD *)"FEC-FR" && v112 == *(unsigned __int16 *)"FR")
              {
LABEL_206:
                v114 = (_DWORD *)*((_QWORD *)v96 + 3);
                v115 = (_DWORD *)*((_QWORD *)v96 + 4);
                if (v114 != v115)
                {
                  if (*((_DWORD **)this + 3) != v97)
                  {
                    while (1)
                    {
                      v116 = (_DWORD *)*((_QWORD *)this + 3);
                      while (*v114 != *v116)
                      {
                        if (++v116 == v97)
                          goto LABEL_196;
                      }
                      if (v116 == v97)
                        break;
                      if (++v114 == v115)
                        goto LABEL_148;
                    }
                  }
                  goto LABEL_196;
                }
              }
            }
LABEL_148:
            v96 += 24;
          }
          while (v96 != v95);
        }
        v94 = 1;
        v125 = (char *)v145;
        if (!v145)
        {
LABEL_201:
          std::__tree<std::__value_type<unsigned int,std::set<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<std::string>>>>::destroy(v149);
          return v94;
        }
LABEL_200:
        v146 = (uint64_t)v125;
        operator delete(v125);
        goto LABEL_201;
      }
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    cricket::StreamParams::ToString(this, (char *)&v148);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v87, v88, v89, v90, v91, v92, v93, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    if (SHIBYTE(v150) < 0)
      operator delete(v148);
  }
  return 0;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoSendChannel::AddSendStream(cricket::WebRtcVideoSendChannel *this, unsigned int **a2)
{
  return cricket::WebRtcVideoSendChannel::AddSendStream((cricket::WebRtcVideoSendChannel *)((char *)this - 64), a2);
}

uint64_t cricket::WebRtcVideoSendChannel::RemoveSendStream(cricket::WebRtcVideoSendChannel *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  BOOL v14;
  char **v15;
  cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t *v20;
  uint64_t **v21;
  unsigned int v22;
  uint64_t **v23;
  uint64_t *v24;
  unsigned int v25;
  BOOL v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t *v30;
  BOOL v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  void (*v36)(char *, char *);

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  v11 = (char *)*((_QWORD *)this + 19);
  if (!v11)
    return 0;
  v12 = (char *)this + 152;
  do
  {
    v13 = *((_DWORD *)v11 + 8);
    v14 = v13 >= a2;
    if (v13 >= a2)
      v15 = (char **)v11;
    else
      v15 = (char **)(v11 + 8);
    if (v14)
      v12 = v11;
    v11 = *v15;
  }
  while (*v15);
  if (v12 == (char *)this + 152 || *((_DWORD *)v12 + 8) > a2)
    return 0;
  v17 = (cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)*((_QWORD *)v12 + 5);
  v18 = (unsigned int *)*((_QWORD *)v17 + 1);
  v19 = (unsigned int *)*((_QWORD *)v17 + 2);
  if (v18 != v19)
  {
    v21 = (uint64_t **)((char *)this + 200);
    v20 = (uint64_t *)*((_QWORD *)this + 25);
    if (v20)
    {
LABEL_17:
      v22 = *v18;
      v23 = (uint64_t **)((char *)this + 200);
      v24 = v20;
      do
      {
        v25 = *((_DWORD *)v24 + 7);
        v26 = v25 >= v22;
        if (v25 >= v22)
          v27 = (uint64_t **)v24;
        else
          v27 = (uint64_t **)(v24 + 1);
        if (v26)
          v23 = (uint64_t **)v24;
        v24 = *v27;
      }
      while (*v27);
      if (v23 != v21 && v22 >= *((_DWORD *)v23 + 7))
      {
        v28 = v23[1];
        v29 = v23;
        if (v28)
        {
          do
          {
            v30 = v28;
            v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v30 = v29[2];
            v31 = *v30 == (_QWORD)v29;
            v29 = (uint64_t **)v30;
          }
          while (!v31);
        }
        if (*((uint64_t ***)this + 24) == v23)
          *((_QWORD *)this + 24) = v30;
        --*((_QWORD *)this + 26);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v20, (uint64_t *)v23);
        operator delete(v23);
      }
      while (++v18 != v19)
      {
        v20 = *v21;
        if (*v21)
          goto LABEL_17;
      }
      v17 = (cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)*((_QWORD *)v12 + 5);
    }
  }
  v32 = (char *)*((_QWORD *)v12 + 1);
  if (v32)
  {
    do
    {
      v33 = v32;
      v32 = *(char **)v32;
    }
    while (v32);
  }
  else
  {
    v34 = v12;
    do
    {
      v33 = (char *)*((_QWORD *)v34 + 2);
      v31 = *(_QWORD *)v33 == (_QWORD)v34;
      v34 = v33;
    }
    while (!v31);
  }
  if (*((char **)this + 18) == v12)
    *((_QWORD *)this + 18) = v33;
  v35 = (uint64_t *)*((_QWORD *)this + 19);
  --*((_QWORD *)this + 20);
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v35, (uint64_t *)v12);
  operator delete(v12);
  v36 = (void (*)(char *, char *))*((_QWORD *)this + 147);
  if (v36)
    v36((char *)this + 1152, (char *)this + 192);
  if (v17)
  {
    cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::~WebRtcVideoSendStream(v17);
    MEMORY[0x20BD0ADEC]();
  }
  return 1;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoSendChannel::RemoveSendStream(cricket::WebRtcVideoSendChannel *this, unsigned int a2)
{
  return cricket::WebRtcVideoSendChannel::RemoveSendStream((cricket::WebRtcVideoSendChannel *)((char *)this - 64), a2);
}

uint64_t cricket::WebRtcVideoSendChannel::GetStats(cricket::WebRtcVideoSendChannel *this, cricket::VideoMediaSendInfo *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v52;
  void *v53[2];
  char v54;
  char v55;
  void *v56;
  void *v57;
  uint64_t v58[3];
  int v59;
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  char v63;
  void *__p;
  void *v65;
  uint64_t v66[3];
  int v67;

  v5 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (v4 != *(_QWORD *)a2)
  {
    do
      cricket::VideoSenderInfo::~VideoSenderInfo((void **)(v4 - 456));
    while (v4 != v5);
  }
  *((_QWORD *)a2 + 1) = v5;
  v7 = *((_QWORD *)a2 + 3);
  for (i = *((_QWORD *)a2 + 4); i != v7; cricket::VideoSenderInfo::~VideoSenderInfo((void **)(i - 456)))
    ;
  v9 = (_QWORD *)((char *)a2 + 56);
  v8 = (char *)*((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 4) = v7;
  v10 = (_QWORD **)((char *)a2 + 48);
  std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)a2 + 48, v8);
  *((_QWORD *)a2 + 6) = (char *)a2 + 56;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  if (*((_QWORD *)this + 20))
  {
    if (rtc::g_clock)
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v11 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    v12 = v11 / 1000000;
    v13 = *((_QWORD *)this + 105);
    v15 = v13 == -1 || v11 / 1000000 - v13 > 10000;
    if (v15)
      *((_QWORD *)this + 105) = v12;
    v17 = *(_QWORD *)a2;
    v16 = *((_QWORD *)a2 + 1);
    if (v16 != *(_QWORD *)a2)
    {
      do
        cricket::VideoSenderInfo::~VideoSenderInfo((void **)(v16 - 456));
      while (v16 != v17);
    }
    *((_QWORD *)a2 + 1) = v17;
    v19 = *((_QWORD *)a2 + 3);
    for (j = *((_QWORD *)a2 + 4); j != v19; cricket::VideoSenderInfo::~VideoSenderInfo((void **)(j - 456)))
      ;
    *((_QWORD *)a2 + 4) = v19;
    std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)a2 + 48, *((char **)a2 + 7));
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = v9;
    cricket::WebRtcVideoSendChannel::FillSenderStats(this, a2, v15);
    if (*((_BYTE *)this + 488))
    {
      cricket::Codec::ToCodecParameters((cricket::WebRtcVideoSendChannel *)((char *)this + 240), (uint64_t)v53);
      LODWORD(v60) = *((_DWORD *)this + 63);
      webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)v61, (const webrtc::RtpCodec *)v53);
      v61[0] = off_24C0BCC30;
      v67 = v59;
      v20 = (_DWORD *)*v9;
      v21 = v60;
      v22 = (_QWORD *)((char *)a2 + 56);
      if (*v9)
      {
        while (1)
        {
          while (1)
          {
            v22 = v20;
            v23 = v20[8];
            if ((int)v60 >= v23)
              break;
            v20 = (_DWORD *)*v22;
            v9 = v22;
            if (!*v22)
              goto LABEL_31;
          }
          if (v23 >= (int)v60)
            break;
          v20 = (_DWORD *)v22[1];
          if (!v20)
          {
            v9 = v22 + 1;
            goto LABEL_31;
          }
        }
      }
      else
      {
LABEL_31:
        v52 = v15;
        v24 = v12;
        v25 = operator new(0x98uLL);
        v25[8] = v21;
        webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v25 + 10), (const webrtc::RtpCodec *)v61);
        *((_QWORD *)v25 + 5) = off_24C0BCC30;
        v25[36] = v67;
        *(_QWORD *)v25 = 0;
        *((_QWORD *)v25 + 1) = 0;
        *((_QWORD *)v25 + 2) = v22;
        *v9 = v25;
        v26 = (_QWORD *)**v10;
        if (v26)
        {
          *v10 = v26;
          v25 = (_DWORD *)*v9;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a2 + 7), (uint64_t *)v25);
        ++*((_QWORD *)a2 + 8);
        v12 = v24;
        v15 = v52;
      }
      v61[0] = off_24C0BCBF0;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v66, v66[1]);
      if (__p)
      {
        v65 = __p;
        operator delete(__p);
      }
      if (v63 < 0)
        operator delete((void *)v61[1]);
      v53[0] = off_24C0BCBF0;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v58, v58[1]);
      if (v56)
      {
        v57 = v56;
        operator delete(v56);
      }
      if (v55 < 0)
        operator delete(v53[1]);
    }
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 13) + 112))(&v60);
    v27 = v62;
    if (v62 == -1)
      goto LABEL_63;
    v28 = *(_QWORD *)a2;
    v29 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
    if (v29)
    {
      v30 = v29 / 456;
      if (v30 <= 1)
        v30 = 1;
      if (v30 < 2)
      {
        v31 = 0;
LABEL_51:
        v34 = v30 - v31;
        v35 = (_QWORD *)(v28 + 456 * v31 + 72);
        do
        {
          *v35 = v27;
          v35 += 57;
          --v34;
        }
        while (v34);
        goto LABEL_53;
      }
      v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
      v32 = v30 & 0xFFFFFFFFFFFFFFFELL;
      v33 = *(_QWORD *)a2;
      do
      {
        *(_QWORD *)(v33 + 72) = v27;
        *(_QWORD *)(v33 + 528) = v27;
        v33 += 912;
        v32 -= 2;
      }
      while (v32);
      if (v30 != v31)
        goto LABEL_51;
    }
LABEL_53:
    v36 = *((_QWORD *)a2 + 3);
    v37 = *((_QWORD *)a2 + 4) - v36;
    if (!v37)
      goto LABEL_63;
    v38 = v37 / 456;
    if (v38 <= 1)
      v38 = 1;
    if (v38 >= 2)
    {
      v39 = v38 & 0xFFFFFFFFFFFFFFFELL;
      v40 = v38 & 0xFFFFFFFFFFFFFFFELL;
      v41 = *((_QWORD *)a2 + 3);
      do
      {
        *(_QWORD *)(v41 + 72) = v27;
        *(_QWORD *)(v41 + 528) = v27;
        v41 += 912;
        v40 -= 2;
      }
      while (v40);
      if (v38 == v39)
      {
LABEL_63:
        if (v15 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        {
          webrtc::Call::Stats::ToString((webrtc::Call::Stats *)&v60, v12, (char *)v53);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
          if (v54 < 0)
            operator delete(v53[0]);
        }
        return 1;
      }
    }
    else
    {
      v39 = 0;
    }
    v42 = v38 - v39;
    v43 = (_QWORD *)(v36 + 456 * v39 + 72);
    do
    {
      *v43 = v27;
      v43 += 57;
      --v42;
    }
    while (v42);
    goto LABEL_63;
  }
  return 1;
}

void cricket::WebRtcVideoSendChannel::FillSenderStats(cricket::WebRtcVideoSendChannel *this, cricket::VideoMediaSendInfo *a2, int a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  _QWORD **v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD **v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *size;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int *v36;
  int *v37;
  char *v38;
  char *v39;
  int v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _QWORD *i;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD **v57;
  _QWORD **v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _BYTE *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  std::string *v70;
  std::string *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t **v86;
  uint64_t **v87;
  unsigned int v88;
  _DWORD *v89;
  _QWORD *v90;
  _QWORD **v91;
  _QWORD **v92;
  unsigned int v93;
  _QWORD *v94;
  _QWORD **v95;
  _QWORD *v96;
  _QWORD **v97;
  unsigned int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD **v108;
  uint64_t *v109;
  uint64_t **v110;
  uint64_t **v111;
  unsigned int v112;
  uint64_t *v113;
  uint64_t *v114;
  int64x2_t v115;
  _QWORD *v116;
  uint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  BOOL v120;
  BOOL v121;
  unint64_t v122;
  uint64_t *v123;
  _QWORD *v124;
  BOOL v125;
  int64x2_t v126;
  uint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  BOOL v130;
  uint64_t *v131;
  uint64_t **v132;
  int *v133;
  int *v134;
  char *v135;
  char *v136;
  int v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int16 v150;
  BOOL v151;
  unsigned __int32 v152;
  std::string::pointer data;
  std::string::size_type v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  int64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  std::string::size_type v163;
  __int32 *v164;
  __int32 *v165;
  __int32 *v166;
  unint64_t v167;
  uint64_t v168;
  __int128 *v169;
  __int128 v170;
  int v171;
  int v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int16 v177;
  BOOL v178;
  int v179;
  int v181;
  uint64_t v182;
  uint64_t *v183;
  std::string::size_type v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t *v187;
  std::string::size_type v188;
  std::string::size_type v189;
  int v190;
  __int128 v191;
  uint64_t *v192;
  unsigned int v193;
  int v194;
  __int128 v195;
  int v196;
  double v197;
  int v198;
  __int128 v199;
  int v200;
  __int16 v201;
  std::string::size_type v202;
  BOOL v203;
  std::string::size_type v204;
  float v205;
  std::string::pointer v206;
  std::string::size_type v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  __int128 v215;
  std::string::size_type v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  void **v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  void **v230;
  uint64_t *v231;
  uint64_t **v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int64_t v236;
  uint64_t v237;
  char *v238;
  int *v239;
  int *v240;
  char *v241;
  int v242;
  char *v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t j;
  uint64_t v257;
  uint64_t v258;
  int64x2_t *v259;
  unint64_t v260;
  uint64_t v261;
  BOOL v262;
  uint64_t v263;
  _OWORD *v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  char *v268;
  _OWORD *v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  char *v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  cricket::VideoMediaSendInfo *v297;
  void **v298;
  void **v299;
  void **v300;
  cricket::VideoMediaSendInfo *v301;
  char *v302;
  cricket::VideoMediaSendInfo *v303;
  unint64_t v304;
  cricket::VideoMediaSendInfo *v305;
  unint64_t v306;
  unint64_t v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  std::string *v311;
  __int128 v312;
  _BYTE *v313;
  _BYTE *v314;
  int64_t v315;
  char *v316;
  char *v317;
  _BYTE *v318;
  _BYTE *v319;
  int64_t v320;
  _BYTE *v321;
  _BYTE *v322;
  int64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  char *v330;
  char *v331;
  unint64_t v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  std::string *v336;
  __int128 v337;
  _BYTE *v338;
  _BYTE *v339;
  int64_t v340;
  char *v341;
  char *v342;
  _BYTE *v343;
  _BYTE *v344;
  int64_t v345;
  _BYTE *v346;
  _BYTE *v347;
  int64_t v348;
  _BYTE *v349;
  _BYTE *v350;
  char *v351;
  char *v352;
  _BYTE *v353;
  char *v354;
  char *v355;
  unint64_t v356;
  char *v357;
  char *v358;
  _QWORD *v359;
  uint64_t v360;
  uint64_t v361;
  int64_t v362;
  unint64_t v363;
  char *v364;
  uint64_t v365;
  char *v366;
  char *v367;
  __int128 *v368;
  std::string *v369;
  __int128 v370;
  char *v371;
  _BYTE *v372;
  _BYTE *v373;
  int64_t v374;
  char *v375;
  std::string *v376;
  std::string *v377;
  __int128 v378;
  _BYTE *v379;
  _BYTE *v380;
  char *v381;
  char *v382;
  _BYTE *v383;
  char *v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  int64_t v388;
  char *v389;
  unint64_t v390;
  char *v391;
  uint64_t v392;
  void *v393;
  __int128 *v394;
  std::string *v395;
  __int128 v396;
  char *v397;
  _BYTE *v398;
  _BYTE *v399;
  int64_t v400;
  char *v401;
  std::string *v402;
  __int128 v403;
  char *v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t *v410;
  _QWORD *v411;
  uint64_t **v412;
  int *v413;
  uint64_t *v414;
  uint64_t *v415;
  uint64_t *v416;
  uint64_t *v417;
  int v418;
  uint64_t *v419;
  uint64_t *v420;
  int v421;
  _OWORD *v422;
  uint64_t *v423;
  _BYTE *v424;
  uint64_t v425;
  _BYTE *v426;
  uint64_t v427;
  _BYTE *v428;
  int v429;
  uint64_t v430;
  int v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  _OWORD *v435;
  _QWORD *v436;
  _QWORD *v437;
  uint64_t v438;
  char *v439;
  unint64_t v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  std::string *v444;
  __int128 v445;
  char *v446;
  char *v447;
  char *v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  std::string *v452;
  const std::string::value_type **v453;
  __int128 v454;
  uint64_t v455;
  char *v456;
  _BYTE *v457;
  _BYTE *v458;
  int64_t v459;
  char *v460;
  char *v461;
  char **v462;
  char **v463;
  _BYTE *v464;
  _BYTE *v465;
  int64_t v466;
  char *v467;
  char *v468;
  char **v469;
  _BYTE *v470;
  _BYTE *v471;
  int64_t v472;
  char *v473;
  char *v474;
  uint64_t v475;
  uint64_t v476;
  int64_t v477;
  unint64_t v478;
  char *v479;
  uint64_t v480;
  char *v481;
  char *v482;
  __int128 *v483;
  std::string *v484;
  __int128 v485;
  char *v486;
  _BYTE *v487;
  _BYTE *v488;
  int64_t v489;
  std::string *v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  uint64_t v495;
  void **v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  std::string *v502;
  __int128 v503;
  int *v504;
  uint64_t v505;
  char *v506;
  uint64_t v507;
  char *v508;
  int v509;
  char *v510;
  char *v511;
  int v512;
  _OWORD *v513;
  uint64_t v514;
  _OWORD *v515;
  uint64_t v516;
  _BYTE *v517;
  uint64_t v518;
  _BYTE *v519;
  int v520;
  uint64_t v521;
  int v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  _OWORD *v526;
  char *v527;
  char *v528;
  uint64_t v529;
  void **v530;
  __int128 v531;
  __int128 v532;
  uint64_t v533;
  _QWORD *v534;
  _QWORD *v535;
  _QWORD *v536;
  unint64_t v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  std::string *v541;
  __int128 v542;
  int *v543;
  uint64_t v544;
  _QWORD *v545;
  _QWORD *v546;
  _QWORD *v547;
  int v548;
  _QWORD *v549;
  _QWORD *v550;
  int v551;
  _OWORD *v552;
  uint64_t v553;
  _BYTE *v554;
  uint64_t v555;
  _BYTE *v556;
  uint64_t v557;
  _BYTE *v558;
  int v559;
  uint64_t v560;
  int v561;
  uint64_t *v562;
  uint64_t v563;
  uint64_t v564;
  _OWORD *v565;
  _QWORD *v566;
  _QWORD *v567;
  uint64_t v568;
  unint64_t v569;
  void *v570;
  unint64_t v571;
  char *v572;
  _QWORD *v573;
  char *v575;
  char *v576;
  uint64_t v577;
  char *v578;
  unint64_t v579;
  char *v580;
  uint64_t v582;
  unint64_t v583;
  __int128 v584;
  _QWORD *v585;
  char *v586;
  int v587;
  char *v588;
  char *v589;
  _BOOL4 v590;
  unint64_t v591;
  char *v592;
  void **v593;
  unint64_t v594;
  unint64_t v595;
  _BYTE v596[32];
  uint64_t *v597;
  __int16 v598;
  char v599;
  std::string __p[14];
  int v601;
  int v602;
  __int128 v603;
  uint64_t v604;
  char v605;
  int v606;
  int v607;
  __int128 v608;
  uint64_t v609;
  unsigned __int8 v610;
  __int16 v611;
  uint64_t **v612;
  uint64_t *v613;
  uint64_t v614;
  std::string v615;
  char v616;
  _OWORD v617[3];
  __int128 v618;
  std::string v619;
  _QWORD *v620;
  _QWORD *v621[4];
  _QWORD **v622;
  _QWORD *v623;
  uint64_t v624;
  _BYTE v625[14];
  int64x2_t v626;
  uint64_t v627;
  int v628;
  uint64_t v629;
  int v630;
  double v631;
  char v632;
  __int128 v633;
  _BYTE v634[28];
  char v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  _QWORD v639[8];
  std::string v640;
  char v641;
  int32x2_t v642;
  uint64_t v643;
  int v644;
  __int128 v645;
  __int128 v646;
  _QWORD *v647;
  _QWORD v648[2];
  __int128 v649;
  int v650;
  int64x2_t v651;
  char v652;
  uint64_t v653;
  char v654;
  char v655;
  _DWORD v656[9];
  char v657;
  int v658;
  _QWORD v659[5];

  v659[2] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)*((_QWORD *)this + 18);
  v575 = (char *)this + 152;
  if (v4 != (char *)this + 152)
  {
    do
    {
      v580 = v4;
      v5 = *((_QWORD *)v4 + 5);
      v629 = 0;
      v630 = 0;
      LOBYTE(v631) = 0;
      v632 = 0;
      v635 = 0;
      v627 = 0;
      v626 = 0uLL;
      v628 = 0;
      v633 = 0u;
      memset(v634, 0, 25);
      v636 = 0u;
      v637 = 0u;
      v638 = 0u;
      memset(v639, 0, 26);
      v641 = 0;
      v648[0] = 0;
      v648[1] = 0;
      v640.__r_.__value_.__s.__data_[0] = 0;
      memset(&v639[4], 0, 32);
      v644 = 0;
      v642 = 0;
      v643 = 0;
      v645 = 0u;
      v646 = 0u;
      v647 = v648;
      LOBYTE(v653) = 0;
      v654 = 0;
      v655 = 0;
      v657 = 0;
      v650 = 0;
      v649 = 0uLL;
      v652 = 0;
      v651 = 0uLL;
      memset(v656, 0, 13);
      v658 = 0;
      if (*(_BYTE *)(v5 + 736))
      {
        if (v634 != (_BYTE *)(v5 + 504))
        {
          if (*(char *)(v5 + 527) < 0)
          {
            std::string::__assign_no_alias<true>(v634, *(char **)(v5 + 504), *(_QWORD *)(v5 + 512));
            if (!*(_BYTE *)(v5 + 736))
              goto LABEL_810;
          }
          else
          {
            *(_OWORD *)v634 = *(_OWORD *)(v5 + 504);
            *(_QWORD *)&v634[16] = *(_QWORD *)(v5 + 520);
          }
        }
        *(_DWORD *)&v634[24] = *(_DWORD *)(v5 + 500);
        v635 = 1;
      }
      v593 = 0;
      v594 = 0;
      v595 = 0;
      v615.__r_.__value_.__s.__data_[0] = 0;
      v616 = 0;
      HIDWORD(v619.__r_.__value_.__r.__words[2]) = 0;
      memset(v621, 0, 29);
      memset(v617, 0, sizeof(v617));
      v618 = 0u;
      memset(&v619, 0, 17);
      v623 = 0;
      v624 = 0;
      v620 = v621;
      v622 = &v623;
      v625[0] = 0;
      *(_WORD *)&v625[12] = 0;
      *(_QWORD *)&v625[4] = 0;
      v6 = *(_QWORD *)(v5 + 80);
      if (!v6)
      {
        v36 = *(int **)(v5 + 88);
        v37 = *(int **)(v5 + 96);
        if (v36 != v37)
        {
          v38 = (char *)*((_QWORD *)&v636 + 1);
          do
          {
            v40 = *v36;
            if ((unint64_t)v38 < (unint64_t)v637)
            {
              if (!v38)
                goto LABEL_810;
              *(_DWORD *)v38 = v40;
              *((_QWORD *)v38 + 1) = 0;
              v39 = v38 + 16;
            }
            else
            {
              v41 = (char *)v636;
              v3 = (uint64_t)&v38[-v636] >> 4;
              v42 = v3 + 1;
              if ((unint64_t)(v3 + 1) >> 60)
                goto LABEL_811;
              v43 = v637 - v636;
              if ((uint64_t)(v637 - v636) >> 3 > v42)
                v42 = v43 >> 3;
              v44 = (unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0;
              v45 = 0xFFFFFFFFFFFFFFFLL;
              if (!v44)
                v45 = v42;
              if (!v45)
                goto LABEL_810;
              if (v45 >> 60)
                goto LABEL_812;
              v46 = 16 * v45;
              v47 = (char *)operator new(16 * v45);
              v48 = &v47[16 * v3];
              *(_DWORD *)v48 = v40;
              *((_QWORD *)v48 + 1) = 0;
              v49 = v48;
              if (v38 != v41)
              {
                do
                {
                  *((_OWORD *)v49 - 1) = *((_OWORD *)v38 - 1);
                  v49 -= 16;
                  v38 -= 16;
                }
                while (v38 != v41);
                v38 = v41;
              }
              v50 = &v47[v46];
              v39 = v48 + 16;
              *(_QWORD *)&v636 = v49;
              *((_QWORD *)&v636 + 1) = v48 + 16;
              *(_QWORD *)&v637 = v50;
              if (v38)
                operator delete(v38);
            }
            *((_QWORD *)&v636 + 1) = v39;
            ++v36;
            v38 = v39;
          }
          while (v36 != v37);
          v51 = v594;
          if (v594 < v595)
          {
            if (!v594)
              goto LABEL_810;
LABEL_395:
            v594 = cricket::VideoSenderInfo::VideoSenderInfo(v51, (uint64_t)&v626) + 456;
            goto LABEL_397;
          }
        }
LABEL_396:
        v594 = std::vector<cricket::VideoSenderInfo>::__push_back_slow_path<cricket::VideoSenderInfo const&>((uint64_t *)&v593, (uint64_t)&v626);
        goto LABEL_397;
      }
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v6 + 64))(__p);
      std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v615, __p);
      v617[2] = *(_OWORD *)&__p[2].__r_.__value_.__r.__words[2];
      v618 = *(_OWORD *)&__p[3].__r_.__value_.__r.__words[1];
      v619 = __p[4];
      v617[0] = *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1];
      v617[1] = *(_OWORD *)&__p[2].__r_.__value_.__l.__data_;
      std::__tree<std::__value_type<webrtc::QualityLimitationReason,long long>,std::__map_value_compare<webrtc::QualityLimitationReason,std::__value_type<webrtc::QualityLimitationReason,long long>,std::less<webrtc::QualityLimitationReason>,true>,std::allocator<std::__value_type<webrtc::QualityLimitationReason,long long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<webrtc::QualityLimitationReason,long long>,std::__tree_node<std::__value_type<webrtc::QualityLimitationReason,long long>,void *> *,long>>((uint64_t)&v620, (_QWORD *)__p[5].__r_.__value_.__l.__data_, &__p[5].__r_.__value_.__l.__size_);
      v621[2] = (_QWORD *)__p[6].__r_.__value_.__l.__data_;
      *(_QWORD **)((char *)&v621[2] + 5) = *(_QWORD **)((char *)__p[6].__r_.__value_.__r.__words + 5);
      v7 = (std::string *)__p[6].__r_.__value_.__r.__words[2];
      if (!v624
        || ((v8 = v622, v622 = &v623, v623[2] = 0, v623 = 0, v624 = 0, v8[1]) ? (v9 = v8[1]) : (v9 = v8), !v9))
      {
        v12 = v7;
        goto LABEL_106;
      }
      v10 = (_QWORD *)v9[2];
      if (v10)
      {
        v11 = (_QWORD *)*v10;
        if ((_QWORD *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v573 = (_QWORD *)v10[1];
            if (!v573)
              break;
            do
            {
              v10 = v573;
              v573 = (_QWORD *)*v573;
            }
            while (v573);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (_QWORD *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
        }
      }
      v12 = &__p[7];
      if (v7 == &__p[7])
      {
        v13 = v9;
        goto LABEL_102;
      }
      do
      {
        v13 = v10;
        v14 = v7[1].__r_.__value_.__r.__words[1];
        *((_DWORD *)v9 + 8) = v14;
        memcpy(v9 + 5, &v7[1].__r_.__value_.__r.__words[2], 0x13EuLL);
        v15 = v623;
        v16 = &v623;
        v17 = &v623;
        if (!v623)
        {
LABEL_27:
          *v9 = 0;
          v9[1] = 0;
          v9[2] = v17;
          *v16 = v9;
          v18 = *v622;
          if (!*v622)
            goto LABEL_29;
LABEL_28:
          v622 = (_QWORD **)v18;
          v9 = (_QWORD *)*v16;
          goto LABEL_29;
        }
        do
        {
          while (1)
          {
            v17 = (_QWORD **)v15;
            if (v14 >= *((_DWORD *)v15 + 8))
              break;
            v15 = (_QWORD *)*v15;
            v16 = v17;
            if (!*v17)
              goto LABEL_27;
          }
          v15 = (_QWORD *)v15[1];
        }
        while (v15);
        v16 = v17 + 1;
        *v9 = 0;
        v9[1] = 0;
        v9[2] = v17;
        v17[1] = v9;
        v18 = *v622;
        if (*v622)
          goto LABEL_28;
LABEL_29:
        v19 = v623;
        v120 = v9 == v623;
        *((_BYTE *)v9 + 24) = v9 == v623;
        if (v120)
        {
LABEL_46:
          ++v624;
          if (v13)
            goto LABEL_62;
LABEL_47:
          v10 = 0;
          goto LABEL_48;
        }
        while (1)
        {
          v20 = v9[2];
          if (*(_BYTE *)(v20 + 24))
            goto LABEL_46;
          v21 = *(_QWORD **)(v20 + 16);
          v22 = *v21;
          if (*v21 != v20)
            break;
          v25 = v21[1];
          if (!v25 || (v26 = *(unsigned __int8 *)(v25 + 24), v23 = (_BYTE *)(v25 + 24), v26))
          {
            if (*(_QWORD **)v20 == v9)
            {
              *(_BYTE *)(v20 + 24) = 1;
              *((_BYTE *)v21 + 24) = 0;
              v29 = *(_QWORD *)(v20 + 8);
              *v21 = v29;
              if (v29)
                goto LABEL_44;
            }
            else
            {
              v27 = *(uint64_t **)(v20 + 8);
              v28 = *v27;
              *(_QWORD *)(v20 + 8) = *v27;
              if (v28)
              {
                *(_QWORD *)(v28 + 16) = v20;
                v21 = *(_QWORD **)(v20 + 16);
              }
              v27[2] = (uint64_t)v21;
              *(_QWORD *)(*(_QWORD *)(v20 + 16) + 8 * (**(_QWORD **)(v20 + 16) != v20)) = v27;
              *v27 = v20;
              *(_QWORD *)(v20 + 16) = v27;
              v21 = (_QWORD *)v27[2];
              v20 = *v21;
              *((_BYTE *)v27 + 24) = 1;
              *((_BYTE *)v21 + 24) = 0;
              v29 = *(_QWORD *)(v20 + 8);
              *v21 = v29;
              if (v29)
LABEL_44:
                *(_QWORD *)(v29 + 16) = v21;
            }
            *(_QWORD *)(v20 + 16) = v21[2];
            *(_QWORD *)(v21[2] + 8 * (*(_QWORD *)v21[2] != (_QWORD)v21)) = v20;
            *(_QWORD *)(v20 + 8) = v21;
            v21[2] = v20;
            goto LABEL_46;
          }
LABEL_32:
          *(_BYTE *)(v20 + 24) = 1;
          v9 = v21;
          *((_BYTE *)v21 + 24) = v21 == v19;
          *v23 = 1;
          if (v21 == v19)
            goto LABEL_46;
        }
        if (v22)
        {
          v24 = *(unsigned __int8 *)(v22 + 24);
          v23 = (_BYTE *)(v22 + 24);
          if (!v24)
            goto LABEL_32;
        }
        if (*(_QWORD **)v20 == v9)
        {
          v35 = v9[1];
          *(_QWORD *)v20 = v35;
          if (v35)
          {
            *(_QWORD *)(v35 + 16) = v20;
            v21 = *(_QWORD **)(v20 + 16);
          }
          v9[2] = v21;
          *(_QWORD *)(*(_QWORD *)(v20 + 16) + 8 * (**(_QWORD **)(v20 + 16) != v20)) = v9;
          v9[1] = v20;
          *(_QWORD *)(v20 + 16) = v9;
          v21 = (_QWORD *)v9[2];
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v21 + 24) = 0;
          v31 = (uint64_t *)v21[1];
          v32 = *v31;
          v21[1] = *v31;
          if (v32)
LABEL_60:
            *(_QWORD *)(v32 + 16) = v21;
        }
        else
        {
          *(_BYTE *)(v20 + 24) = 1;
          *((_BYTE *)v21 + 24) = 0;
          v31 = (uint64_t *)v21[1];
          v32 = *v31;
          v21[1] = *v31;
          if (v32)
            goto LABEL_60;
        }
        v31[2] = v21[2];
        *(_QWORD *)(v21[2] + 8 * (*(_QWORD *)v21[2] != (_QWORD)v21)) = v31;
        *v31 = (uint64_t)v21;
        v21[2] = v31;
        ++v624;
        if (!v13)
          goto LABEL_47;
LABEL_62:
        v10 = (_QWORD *)v13[2];
        if (v10)
        {
          v33 = (_QWORD *)*v10;
          if ((_QWORD *)*v10 == v13)
          {
            *v10 = 0;
            while (1)
            {
              v34 = (_QWORD *)v10[1];
              if (!v34)
                break;
              do
              {
                v10 = v34;
                v34 = (_QWORD *)*v34;
              }
              while (v34);
            }
          }
          else
          {
            for (v10[1] = 0; v33; v33 = (_QWORD *)v10[1])
            {
              do
              {
                v10 = v33;
                v33 = (_QWORD *)*v33;
              }
              while (v33);
            }
          }
        }
LABEL_48:
        size = (std::string *)v7->__r_.__value_.__l.__size_;
        if (size)
        {
          do
          {
            v12 = size;
            size = (std::string *)size->__r_.__value_.__r.__words[0];
          }
          while (size);
        }
        else
        {
          do
          {
            v12 = (std::string *)v7->__r_.__value_.__r.__words[2];
            v120 = v12->__r_.__value_.__r.__words[0] == (_QWORD)v7;
            v7 = v12;
          }
          while (!v120);
        }
        if (!v13)
          break;
        v7 = v12;
        v9 = v13;
      }
      while (v12 != &__p[7]);
LABEL_102:
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v622, v13);
      if (v10)
      {
        for (i = (_QWORD *)v10[2]; i; i = (_QWORD *)i[2])
          v10 = i;
        std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v622, v10);
      }
LABEL_106:
      if (v12 != &__p[7])
      {
        v53 = v624;
        while (1)
        {
          v54 = operator new(0x168uLL);
          memcpy(v54 + 4, &v12[1].__r_.__value_.__r.__words[1], 0x148uLL);
          v55 = v623;
          v56 = &v623;
          v57 = &v623;
          if (v623)
          {
            do
            {
              while (1)
              {
                v57 = (_QWORD **)v55;
                if (*((_DWORD *)v54 + 8) >= *((_DWORD *)v55 + 8))
                  break;
                v55 = (_QWORD *)*v55;
                v56 = v57;
                if (!*v57)
                  goto LABEL_114;
              }
              v55 = (_QWORD *)v55[1];
            }
            while (v55);
            v56 = v57 + 1;
            *v54 = 0;
            v54[1] = 0;
            v54[2] = v57;
            v57[1] = v54;
            v58 = (_QWORD **)*v622;
            if (!*v622)
              goto LABEL_116;
          }
          else
          {
LABEL_114:
            *v54 = 0;
            v54[1] = 0;
            v54[2] = v57;
            *v56 = v54;
            v58 = (_QWORD **)*v622;
            if (!*v622)
              goto LABEL_116;
          }
          v622 = v58;
          v54 = (_QWORD *)*v56;
LABEL_116:
          v59 = v623;
          v120 = v54 == v623;
          *((_BYTE *)v54 + 24) = v54 == v623;
          if (v120)
          {
LABEL_133:
            v70 = (std::string *)v12->__r_.__value_.__l.__size_;
            if (!v70)
              goto LABEL_142;
            goto LABEL_134;
          }
          while (1)
          {
            v60 = v54[2];
            if (*(_BYTE *)(v60 + 24))
              goto LABEL_133;
            v61 = *(_QWORD **)(v60 + 16);
            v62 = *v61;
            if (*v61 != v60)
              break;
            v65 = v61[1];
            if (!v65 || (v66 = *(unsigned __int8 *)(v65 + 24), v63 = (_BYTE *)(v65 + 24), v66))
            {
              if (*(_QWORD **)v60 == v54)
              {
                *(_BYTE *)(v60 + 24) = 1;
                *((_BYTE *)v61 + 24) = 0;
                v69 = *(_QWORD *)(v60 + 8);
                *v61 = v69;
                if (v69)
                  goto LABEL_131;
              }
              else
              {
                v67 = *(uint64_t **)(v60 + 8);
                v68 = *v67;
                *(_QWORD *)(v60 + 8) = *v67;
                if (v68)
                {
                  *(_QWORD *)(v68 + 16) = v60;
                  v61 = *(_QWORD **)(v60 + 16);
                }
                v67[2] = (uint64_t)v61;
                *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v67;
                *v67 = v60;
                *(_QWORD *)(v60 + 16) = v67;
                v61 = (_QWORD *)v67[2];
                v60 = *v61;
                *((_BYTE *)v67 + 24) = 1;
                *((_BYTE *)v61 + 24) = 0;
                v69 = *(_QWORD *)(v60 + 8);
                *v61 = v69;
                if (v69)
LABEL_131:
                  *(_QWORD *)(v69 + 16) = v61;
              }
              *(_QWORD *)(v60 + 16) = v61[2];
              *(_QWORD *)(v61[2] + 8 * (*(_QWORD *)v61[2] != (_QWORD)v61)) = v60;
              *(_QWORD *)(v60 + 8) = v61;
              v61[2] = v60;
              goto LABEL_133;
            }
LABEL_119:
            *(_BYTE *)(v60 + 24) = 1;
            v54 = v61;
            *((_BYTE *)v61 + 24) = v61 == v59;
            *v63 = 1;
            if (v61 == v59)
              goto LABEL_133;
          }
          if (v62)
          {
            v64 = *(unsigned __int8 *)(v62 + 24);
            v63 = (_BYTE *)(v62 + 24);
            if (!v64)
              goto LABEL_119;
          }
          if (*(_QWORD **)v60 == v54)
          {
            v74 = v54[1];
            *(_QWORD *)v60 = v74;
            if (v74)
            {
              *(_QWORD *)(v74 + 16) = v60;
              v61 = *(_QWORD **)(v60 + 16);
            }
            v54[2] = v61;
            *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v54;
            v54[1] = v60;
            *(_QWORD *)(v60 + 16) = v54;
            v61 = (_QWORD *)v54[2];
            *((_BYTE *)v54 + 24) = 1;
            *((_BYTE *)v61 + 24) = 0;
            v72 = (uint64_t *)v61[1];
            v73 = *v72;
            v61[1] = *v72;
            if (v73)
LABEL_140:
              *(_QWORD *)(v73 + 16) = v61;
          }
          else
          {
            *(_BYTE *)(v60 + 24) = 1;
            *((_BYTE *)v61 + 24) = 0;
            v72 = (uint64_t *)v61[1];
            v73 = *v72;
            v61[1] = *v72;
            if (v73)
              goto LABEL_140;
          }
          v72[2] = v61[2];
          *(_QWORD *)(v61[2] + 8 * (*(_QWORD *)v61[2] != (_QWORD)v61)) = v72;
          *v72 = (uint64_t)v61;
          v61[2] = v72;
          v70 = (std::string *)v12->__r_.__value_.__l.__size_;
          if (!v70)
          {
            do
            {
LABEL_142:
              v71 = (std::string *)v12->__r_.__value_.__r.__words[2];
              v120 = v71->__r_.__value_.__r.__words[0] == (_QWORD)v12;
              v12 = v71;
            }
            while (!v120);
            goto LABEL_108;
          }
          do
          {
LABEL_134:
            v71 = v70;
            v70 = (std::string *)v70->__r_.__value_.__r.__words[0];
          }
          while (v70);
LABEL_108:
          ++v53;
          v12 = v71;
          if (v71 == &__p[7])
          {
            v624 = v53;
            break;
          }
        }
      }
      *(_QWORD *)v625 = *((_QWORD *)&__p[7].__r_.__value_.__l + 2);
      *(_QWORD *)&v625[6] = *(std::string::size_type *)((char *)&__p[7].__r_.__value_.__r.__words[2] + 6);
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&__p[6].__r_.__value_.__r.__words[2], (_QWORD *)__p[7].__r_.__value_.__l.__data_);
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&__p[5], (_QWORD *)__p[5].__r_.__value_.__l.__size_);
      if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (a3 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        if (rtc::g_clock)
        {
          v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
        }
        else
        {
          if (!dword_253EA791C)
            mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
          v75 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
              / dword_253EA791C;
        }
        webrtc::VideoSendStream::Stats::ToString((webrtc::VideoSendStream::Stats *)&v615, v75 / 1000000, (unint64_t *)__p);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v76, v77, v78, v79, v80, v81, v82, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      DWORD2(v646) = HIDWORD(v621[2]);
      DWORD1(v646) = v619.__r_.__value_.__s.__data_[14];
      v652 = BYTE4(v621[3]);
      if (v619.__r_.__value_.__s.__data_[13])
        DWORD1(v646) = v619.__r_.__value_.__s.__data_[14] | 2;
      HIDWORD(v646) = HIDWORD(v619.__r_.__value_.__r.__words[2]);
      std::__tree<std::__value_type<webrtc::QualityLimitationReason,long long>,std::__map_value_compare<webrtc::QualityLimitationReason,std::__value_type<webrtc::QualityLimitationReason,long long>,std::less<webrtc::QualityLimitationReason>,true>,std::allocator<std::__value_type<webrtc::QualityLimitationReason,long long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<webrtc::QualityLimitationReason,long long>,std::__tree_node<std::__value_type<webrtc::QualityLimitationReason,long long>,void *> *,long>>((uint64_t)&v647, v620, v621);
      LODWORD(v649) = v621[2];
      std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v640, &v615);
      if (v632)
      {
        v631 = (double)SHIDWORD(v619.__r_.__value_.__r.__words[0]);
        if (&v639[5] != (_QWORD *)(v5 + 32))
          goto LABEL_168;
      }
      else
      {
        v632 = 1;
        v631 = (double)SHIDWORD(v619.__r_.__value_.__r.__words[0]);
        if (&v639[5] != (_QWORD *)(v5 + 32))
LABEL_168:
          std::vector<cricket::SsrcGroup>::__assign_with_size[abi:sn180100]<cricket::SsrcGroup*,cricket::SsrcGroup*>((std::string **)&v639[5], *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 40) - *(_QWORD *)(v5 + 32)) >> 4));
      }
      v644 = DWORD2(v617[2]);
      LODWORD(v646) = v619.__r_.__value_.__r.__words[1];
      v655 = v625[0];
      *(_QWORD *)&v645 = *(_QWORD *)&v617[0];
      *(_QWORD *)((char *)&v649 + 4) = *(_QWORD *)((char *)v617 + 12);
      HIDWORD(v645) = DWORD2(v617[0]);
      v656[2] = *(_DWORD *)&v625[8];
      LOWORD(v658) = *(_WORD *)&v625[12];
      if (!v624)
      {
        v133 = *(int **)(v5 + 88);
        v134 = *(int **)(v5 + 96);
        if (v133 != v134)
        {
          v135 = (char *)*((_QWORD *)&v636 + 1);
          do
          {
            v137 = *v133;
            if ((unint64_t)v135 < (unint64_t)v637)
            {
              if (!v135)
                goto LABEL_810;
              *(_DWORD *)v135 = v137;
              *((_QWORD *)v135 + 1) = 0;
              v136 = v135 + 16;
            }
            else
            {
              v138 = (char *)v636;
              v3 = (uint64_t)&v135[-v636] >> 4;
              v139 = v3 + 1;
              if ((unint64_t)(v3 + 1) >> 60)
                goto LABEL_811;
              v140 = v637 - v636;
              if ((uint64_t)(v637 - v636) >> 3 > v139)
                v139 = v140 >> 3;
              v44 = (unint64_t)v140 >= 0x7FFFFFFFFFFFFFF0;
              v141 = 0xFFFFFFFFFFFFFFFLL;
              if (!v44)
                v141 = v139;
              if (!v141)
                goto LABEL_810;
              if (v141 >> 60)
                goto LABEL_812;
              v142 = 16 * v141;
              v143 = (char *)operator new(16 * v141);
              v144 = &v143[16 * v3];
              *(_DWORD *)v144 = v137;
              *((_QWORD *)v144 + 1) = 0;
              v145 = v144;
              if (v135 != v138)
              {
                do
                {
                  *((_OWORD *)v145 - 1) = *((_OWORD *)v135 - 1);
                  v145 -= 16;
                  v135 -= 16;
                }
                while (v135 != v138);
                v135 = v138;
              }
              v146 = &v143[v142];
              v136 = v144 + 16;
              *(_QWORD *)&v636 = v145;
              *((_QWORD *)&v636 + 1) = v144 + 16;
              *(_QWORD *)&v637 = v146;
              if (v135)
                operator delete(v135);
            }
            *((_QWORD *)&v636 + 1) = v136;
            ++v133;
            v135 = v136;
          }
          while (v133 != v134);
        }
        v147 = *(_QWORD *)(v5 + 1048);
        v148 = *(_QWORD *)(v5 + 1056);
        if (v147 == v148)
        {
          v150 = 0;
        }
        else
        {
          v149 = v147 + 272;
          do
          {
            v150 = *(_BYTE *)(v149 - 148) != 0;
            if (*(_BYTE *)(v149 - 148))
              v151 = 1;
            else
              v151 = v149 == v148;
            v149 += 272;
          }
          while (!v151);
        }
        LOWORD(v639[3]) = v150 | 0x100;
        DWORD2(v645) = DWORD2(v617[0]);
        HIDWORD(v649) = DWORD1(v617[1]);
        v651 = *(int64x2_t *)((char *)&v617[1] + 8);
        v656[0] = DWORD1(v617[1]);
        v656[1] = *(_DWORD *)&v625[8];
        v51 = v594;
        if (v594 < v595)
        {
          if (!v594)
            goto LABEL_810;
          goto LABEL_395;
        }
        goto LABEL_396;
      }
      v613 = 0;
      v614 = 0;
      v612 = &v613;
      v83 = (unint64_t)v622;
      if (v622 != &v623)
      {
        do
        {
          if ((*(_DWORD *)(v83 + 40) - 1) >= 2)
          {
            v84 = *(_DWORD *)(v83 + 32);
            memcpy((char *)__p[0].__r_.__value_.__r.__words + 4, (const void *)(v83 + 40), 0x140uLL);
            v85 = v613;
            v86 = &v613;
LABEL_176:
            v87 = v86;
            if (v85)
            {
              do
              {
                v86 = (uint64_t **)v85;
                v88 = *((_DWORD *)v85 + 8);
                if (v84 < v88)
                {
                  v85 = *v86;
                  goto LABEL_176;
                }
                if (v88 >= v84)
                  goto LABEL_184;
                v85 = v86[1];
              }
              while (v85);
              v87 = v86 + 1;
            }
            v89 = operator new(0x168uLL);
            v89[8] = v84;
            memcpy(v89 + 10, (char *)__p[0].__r_.__value_.__r.__words + 4, 0x140uLL);
            *(_QWORD *)v89 = 0;
            *((_QWORD *)v89 + 1) = 0;
            *((_QWORD *)v89 + 2) = v86;
            *v87 = (uint64_t *)v89;
            if (*v612)
            {
              v612 = (uint64_t **)*v612;
              v89 = *v87;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v613, (uint64_t *)v89);
            ++v614;
          }
LABEL_184:
          v90 = *(_QWORD **)(v83 + 8);
          if (v90)
          {
            do
            {
              v91 = (_QWORD **)v90;
              v90 = (_QWORD *)*v90;
            }
            while (v90);
          }
          else
          {
            do
            {
              v91 = *(_QWORD ***)(v83 + 16);
              v120 = *v91 == (_QWORD *)v83;
              v83 = (unint64_t)v91;
            }
            while (!v120);
          }
          v83 = (unint64_t)v91;
        }
        while (v91 != &v623);
        v92 = v622;
        if (v622 != &v623)
        {
          do
          {
            if (*((_DWORD *)v92 + 10))
            {
              if (!*((_BYTE *)v92 + 48))
                std::__throw_bad_optional_access[abi:sn180100]();
              v93 = *((_DWORD *)v92 + 11);
              v94 = v623;
              if (!v623)
                goto LABEL_204;
              v95 = &v623;
              do
              {
                v96 = v94;
                v97 = v95;
                v98 = *((_DWORD *)v94 + 8);
                v99 = v94 + 1;
                if (v98 >= v93)
                {
                  v99 = v96;
                  v95 = (_QWORD **)v96;
                }
                v94 = (_QWORD *)*v99;
              }
              while (v94);
              if (v95 == &v623)
                goto LABEL_204;
              if (v98 < v93)
                v96 = v97;
              if (v93 >= *((_DWORD *)v96 + 8))
              {
                v109 = v613;
                v110 = &v613;
LABEL_214:
                v111 = v110;
                if (v109)
                {
                  do
                  {
                    v110 = (uint64_t **)v109;
                    v112 = *((_DWORD *)v109 + 8);
                    if (v93 < v112)
                    {
                      v109 = *v110;
                      goto LABEL_214;
                    }
                    if (v112 >= v93)
                      goto LABEL_222;
                    v109 = v110[1];
                  }
                  while (v109);
                  v111 = v110 + 1;
                }
                v113 = (uint64_t *)v110;
                v110 = (uint64_t **)operator new(0x168uLL);
                *((_DWORD *)v110 + 8) = v93;
                *((_DWORD *)v110 + 10) = 0;
                *((_BYTE *)v110 + 44) = 0;
                *((_BYTE *)v110 + 48) = 0;
                *(_OWORD *)((char *)v110 + 52) = 0u;
                *(_OWORD *)((char *)v110 + 68) = 0u;
                v110[11] = (uint64_t *)0x7FFFFFFFFFFFFFFFLL;
                *((_BYTE *)v110 + 240) = 0;
                *((_BYTE *)v110 + 296) = 0;
                v110[38] = 0;
                *((_DWORD *)v110 + 78) = 0;
                *((_BYTE *)v110 + 320) = 0;
                *((_BYTE *)v110 + 328) = 0;
                v110[42] = 0;
                v110[43] = 0;
                *(uint64_t **)((char *)v110 + 350) = 0;
                *((_OWORD *)v110 + 6) = 0u;
                *((_OWORD *)v110 + 7) = 0u;
                *((_OWORD *)v110 + 8) = 0u;
                *((_OWORD *)v110 + 9) = 0u;
                *((_OWORD *)v110 + 10) = 0u;
                *((_OWORD *)v110 + 11) = 0u;
                *((_OWORD *)v110 + 12) = 0u;
                *((_OWORD *)v110 + 13) = 0u;
                *(_OWORD *)((char *)v110 + 220) = 0u;
                *v110 = 0;
                v110[1] = 0;
                v110[2] = v113;
                *v111 = (uint64_t *)v110;
                v114 = (uint64_t *)v110;
                if (*v612)
                {
                  v612 = (uint64_t **)*v612;
                  v114 = *v111;
                }
                std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v613, v114);
                ++v614;
LABEL_222:
                v115 = *((int64x2_t *)v110 + 7);
                *((int64x2_t *)v110 + 6) = vaddq_s64(*((int64x2_t *)v110 + 6), *((int64x2_t *)v92 + 6));
                *((int64x2_t *)v110 + 7) = vaddq_s64(v115, *((int64x2_t *)v92 + 7));
                v116 = v92[16];
                v117 = v110[16];
                v118 = 0x7FFFFFFFFFFFFFFFLL;
                v119 = 0x7FFFFFFFFFFFFFFFLL;
                v120 = v117 == (uint64_t *)0x7FFFFFFFFFFFFFFFLL || v116 == (_QWORD *)0x7FFFFFFFFFFFFFFFLL;
                if (!v120)
                {
                  v119 = 0x8000000000000000;
                  v121 = v116 == (_QWORD *)0x8000000000000000 || v117 == (uint64_t *)0x8000000000000000;
                  v122 = (unint64_t)v116 + (_QWORD)v117;
                  if (!v121)
                    v119 = v122;
                }
                v110[16] = (uint64_t *)v119;
                *(int64x2_t *)(v110 + 17) = vaddq_s64(*(int64x2_t *)(v110 + 17), *(int64x2_t *)(v92 + 17));
                *(int64x2_t *)(v110 + 19) = vaddq_s64(*(int64x2_t *)(v110 + 19), *(int64x2_t *)(v92 + 19));
                v123 = v110[21];
                if (v123 != (uint64_t *)0x7FFFFFFFFFFFFFFFLL)
                {
                  v124 = v92[21];
                  if (v124 != (_QWORD *)0x7FFFFFFFFFFFFFFFLL)
                  {
                    v125 = v124 == (_QWORD *)0x8000000000000000 || v123 == (uint64_t *)0x8000000000000000;
                    v118 = (unint64_t)v124 + (_QWORD)v123;
                    if (v125)
                      v118 = 0x8000000000000000;
                  }
                }
                v110[21] = (uint64_t *)v118;
                v126 = *((int64x2_t *)v110 + 12);
                *((int64x2_t *)v110 + 11) = vaddq_s64(*((int64x2_t *)v110 + 11), *((int64x2_t *)v92 + 11));
                *((int64x2_t *)v110 + 12) = vaddq_s64(v126, *((int64x2_t *)v92 + 12));
                v127 = v110[26];
                v128 = 0x7FFFFFFFFFFFFFFFLL;
                if (v127 != (uint64_t *)0x7FFFFFFFFFFFFFFFLL)
                {
                  v129 = v92[26];
                  if (v129 != (_QWORD *)0x7FFFFFFFFFFFFFFFLL)
                  {
                    v130 = v129 == (_QWORD *)0x8000000000000000 || v127 == (uint64_t *)0x8000000000000000;
                    v128 = (unint64_t)v129 + (_QWORD)v127;
                    if (v130)
                      v128 = 0x8000000000000000;
                  }
                }
                v110[26] = (uint64_t *)v128;
                v131 = v92[11];
                if ((uint64_t)v131 < (uint64_t)v110[11])
                  v110[11] = v131;
              }
              else
              {
LABEL_204:
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                {
                  v83 = v83 & 0xFFFFFFFF00000000 | 0xE52;
                  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v100, v101, v102, v103, v104, v105, v106, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
                }
              }
            }
            v107 = v92[1];
            if (v107)
            {
              do
              {
                v108 = (_QWORD **)v107;
                v107 = (_QWORD *)*v107;
              }
              while (v107);
            }
            else
            {
              do
              {
                v108 = (_QWORD **)v92[2];
                v120 = *v108 == v92;
                v92 = v108;
              }
              while (!v120);
            }
            v92 = v108;
          }
          while (v108 != &v623);
        }
      }
      if (*(_QWORD *)(v5 + 936) != 1)
      {
        v590 = 0;
        v132 = v612;
        if (v612 == &v613)
          goto LABEL_391;
LABEL_279:
        v582 = v5;
        while (2)
        {
          cricket::VideoSenderInfo::VideoSenderInfo((uint64_t)__p, (uint64_t)&v626);
          v152 = *((_DWORD *)v132 + 8);
          data = __p[5].__r_.__value_.__l.__data_;
          if (__p[5].__r_.__value_.__r.__words[0] >= __p[5].__r_.__value_.__l.__size_)
          {
            v155 = (char *)__p[4].__r_.__value_.__r.__words[2];
            v156 = (uint64_t)(__p[5].__r_.__value_.__r.__words[0] - __p[4].__r_.__value_.__r.__words[2]) >> 4;
            v157 = v156 + 1;
            if ((unint64_t)(v156 + 1) >> 60)
              goto LABEL_811;
            v158 = __p[5].__r_.__value_.__l.__size_ - __p[4].__r_.__value_.__r.__words[2];
            if ((uint64_t)(__p[5].__r_.__value_.__l.__size_ - __p[4].__r_.__value_.__r.__words[2]) >> 3 > v157)
              v157 = v158 >> 3;
            v44 = (unint64_t)v158 >= 0x7FFFFFFFFFFFFFF0;
            v159 = 0xFFFFFFFFFFFFFFFLL;
            if (!v44)
              v159 = v157;
            if (!v159)
              goto LABEL_810;
            if (v159 >> 60)
              goto LABEL_812;
            v160 = 16 * v159;
            v161 = (char *)operator new(16 * v159);
            v162 = &v161[16 * v156];
            *(_DWORD *)v162 = v152;
            *((_QWORD *)v162 + 1) = 0;
            v163 = (std::string::size_type)v162;
            if (data != v155)
            {
              do
              {
                *(_OWORD *)(v163 - 16) = *((_OWORD *)data - 1);
                v163 -= 16;
                data -= 16;
              }
              while (data != v155);
              data = v155;
            }
            v154 = (std::string::size_type)(v162 + 16);
            __p[4].__r_.__value_.__r.__words[2] = v163;
            __p[5].__r_.__value_.__r.__words[0] = (std::string::size_type)(v162 + 16);
            __p[5].__r_.__value_.__l.__size_ = (std::string::size_type)&v161[v160];
            if (data)
              operator delete(data);
          }
          else
          {
            if (!__p[5].__r_.__value_.__r.__words[0])
              goto LABEL_810;
            *(_DWORD *)__p[5].__r_.__value_.__l.__data_ = v152;
            *((_QWORD *)data + 1) = 0;
            v154 = (std::string::size_type)(data + 16);
          }
          __p[5].__r_.__value_.__r.__words[0] = v154;
          v164 = *(__int32 **)(v5 + 96);
          v165 = wmemchr(*(__int32 **)(v5 + 88), v152, ((uint64_t)v164 - *(_QWORD *)(v5 + 88)) >> 2);
          if (v165)
            v166 = v165;
          else
            v166 = v164;
          if (v166 == *(__int32 **)(v5 + 96)
            || (v167 = ((uint64_t)v166 - *(_QWORD *)(v5 + 88)) >> 2,
                v168 = *(_QWORD *)(v5 + 112),
                v167 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 120) - v168) >> 3)))
          {
            v171 = 0;
            v596[0] = 0;
            v596[24] = 0;
            v172 = v610;
            if (v610)
              goto LABEL_303;
          }
          else
          {
            v169 = (__int128 *)(v168 + 24 * v167);
            if (*((char *)v169 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v596, *(const std::string::value_type **)v169, *((_QWORD *)v169 + 1));
              v171 = 1;
              v596[24] = 1;
              v172 = v610;
              if (v610 != 1)
                goto LABEL_303;
            }
            else
            {
              v170 = *v169;
              *(_QWORD *)&v596[16] = *((_QWORD *)v169 + 2);
              *(_OWORD *)v596 = v170;
              v171 = 1;
              v596[24] = 1;
              v172 = v610;
              if (v610 != 1)
              {
LABEL_303:
                if (v172)
                {
                  if (SHIBYTE(v609) < 0)
                  {
                    operator delete((void *)v608);
                    v171 = v596[24];
                  }
                  v610 = 0;
                  if (v171 && (v596[23] & 0x80000000) != 0)
                    operator delete(*(void **)v596);
                }
                else
                {
                  v608 = *(_OWORD *)v596;
                  v609 = *(_QWORD *)&v596[16];
                  v610 = 1;
                }
                goto LABEL_315;
              }
            }
          }
          if (v172)
          {
            if (SHIBYTE(v609) < 0)
              operator delete((void *)v608);
            v608 = *(_OWORD *)v596;
            v609 = *(_QWORD *)&v596[16];
          }
LABEL_315:
          if (v590)
          {
            v173 = 0;
          }
          else
          {
            LODWORD(v3) = v152 >> 8;
            v173 = v152;
          }
          v174 = *(_QWORD *)(v5 + 1048);
          v175 = *(_QWORD *)(v5 + 1056);
          if (v590)
          {
            if (v174 != v175)
            {
              v176 = v174 + 272;
              do
              {
                v177 = *(_BYTE *)(v176 - 148) != 0;
                if (*(_BYTE *)(v176 - 148))
                  v178 = 1;
                else
                  v178 = v176 == v175;
                v176 += 272;
              }
              while (!v178);
LABEL_338:
              LOWORD(__p[7].__r_.__value_.__r.__words[2]) = v177 | 0x100;
              v181 = *((_DWORD *)v132 + 13);
              v182 = *(uint64_t *)((char *)v132 + 60);
              v183 = v132[12];
              v184 = (std::string::size_type)v132[13];
              v186 = v132[14];
              v185 = v132[15];
              v187 = v132[16];
              v188 = (std::string::size_type)v132[18];
              v189 = (std::string::size_type)v132[20];
              v190 = *((_DWORD *)v132 + 54);
              *(_QWORD *)&v191 = *(uint64_t **)((char *)v132 + 220);
              v192 = v132[30];
              v193 = *((unsigned __int8 *)v132 + 248);
              v598 = *(_WORD *)((char *)v132 + 249);
              v599 = *((_BYTE *)v132 + 251);
              v194 = *((_DWORD *)v132 + 63);
              v195 = *((_OWORD *)v132 + 17);
              *(_OWORD *)v596 = *((_OWORD *)v132 + 16);
              *(_OWORD *)&v596[16] = v195;
              v597 = v132[36];
              v196 = *((unsigned __int8 *)v132 + 296);
              v197 = *((double *)v132 + 38);
              v198 = *((_DWORD *)v132 + 78);
              v659[0] = *(uint64_t **)((char *)v132 + 316);
              *(_QWORD *)((char *)v659 + 5) = *(uint64_t **)((char *)v132 + 321);
              v199 = *((_OWORD *)v132 + 21);
              v200 = *((_DWORD *)v132 + 88);
              v201 = *((_WORD *)v132 + 178);
              __p[0].__r_.__value_.__r.__words[0] = v184;
              __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v183 + (_QWORD)v186;
              LODWORD(__p[1].__r_.__value_.__l.__data_) = (_DWORD)v185;
              v202 = 0x7FFFFFFFFFFFFFFFLL;
              if (__p[8].__r_.__value_.__r.__words[0] != 0x7FFFFFFFFFFFFFFFLL
                && v187 != (uint64_t *)0x7FFFFFFFFFFFFFFFLL)
              {
                v202 = 0x8000000000000000;
                v203 = v187 == (uint64_t *)0x8000000000000000
                    || __p[8].__r_.__value_.__r.__words[0] == 0x8000000000000000;
                v204 = (std::string::size_type)v187 + __p[8].__r_.__value_.__r.__words[0];
                if (!v203)
                  v202 = v204;
              }
              __p[8].__r_.__value_.__r.__words[0] = v202;
              v602 = v181;
              LODWORD(__p[12].__r_.__value_.__l.__data_) = (int)v197;
              v601 = v198;
              v606 = v198;
              __p[0].__r_.__value_.__r.__words[2] = v188;
              __p[1].__r_.__value_.__l.__size_ = v189;
              LODWORD(__p[1].__r_.__value_.__r.__words[2]) = v190;
              *((_QWORD *)&v191 + 1) = v182;
              *(_OWORD *)&__p[10].__r_.__value_.__r.__words[2] = v191;
              if (v196)
              {
                LODWORD(__p[2].__r_.__value_.__r.__words[2]) = v194;
                v205 = (double)v193 * 0.00390625;
                *((float *)&__p[2].__r_.__value_.__r.__words[2] + 1) = v205;
                v206 = __p[7].__r_.__value_.__l.__data_;
                if (__p[7].__r_.__value_.__r.__words[0] >= __p[7].__r_.__value_.__l.__size_)
                {
                  v587 = v3;
                  v208 = (char *)__p[6].__r_.__value_.__r.__words[2];
                  v209 = 0x6DB6DB6DB6DB6DB7
                       * ((uint64_t)(__p[7].__r_.__value_.__r.__words[0] - __p[6].__r_.__value_.__r.__words[2]) >> 3);
                  v210 = v209 + 1;
                  if ((unint64_t)(v209 + 1) > 0x492492492492492)
                    goto LABEL_811;
                  if (0xDB6DB6DB6DB6DB6ELL
                     * ((uint64_t)(__p[7].__r_.__value_.__l.__size_ - __p[6].__r_.__value_.__r.__words[2]) >> 3) > v210)
                    v210 = 0xDB6DB6DB6DB6DB6ELL
                         * ((uint64_t)(__p[7].__r_.__value_.__l.__size_ - __p[6].__r_.__value_.__r.__words[2]) >> 3);
                  if ((unint64_t)(0x6DB6DB6DB6DB6DB7
                                        * ((uint64_t)(__p[7].__r_.__value_.__l.__size_
                                                   - __p[6].__r_.__value_.__r.__words[2]) >> 3)) >= 0x249249249249249)
                    v211 = 0x492492492492492;
                  else
                    v211 = v210;
                  if (!v211)
                    goto LABEL_810;
                  v584 = v199;
                  if (v211 > 0x492492492492492)
                    goto LABEL_812;
                  v212 = 56 * v211;
                  v213 = (char *)operator new(56 * v211);
                  v214 = &v213[56 * v209];
                  *(_QWORD *)v214 = v192;
                  v214[8] = v193;
                  *(_WORD *)(v214 + 9) = v598;
                  v214[11] = v599;
                  *((_DWORD *)v214 + 3) = v194;
                  v215 = *(_OWORD *)&v596[16];
                  *((_OWORD *)v214 + 1) = *(_OWORD *)v596;
                  *((_OWORD *)v214 + 2) = v215;
                  *((_QWORD *)v214 + 6) = v597;
                  v216 = (std::string::size_type)v214;
                  if (v206 != v208)
                  {
                    do
                    {
                      v217 = *(_OWORD *)(v206 - 56);
                      v218 = *(_OWORD *)(v206 - 40);
                      v219 = *(_OWORD *)(v206 - 24);
                      *(_QWORD *)(v216 - 8) = *((_QWORD *)v206 - 1);
                      *(_OWORD *)(v216 - 24) = v219;
                      *(_OWORD *)(v216 - 40) = v218;
                      *(_OWORD *)(v216 - 56) = v217;
                      v216 -= 56;
                      v206 -= 56;
                    }
                    while (v206 != v208);
                    v206 = v208;
                  }
                  v207 = (std::string::size_type)(v214 + 56);
                  __p[6].__r_.__value_.__r.__words[2] = v216;
                  __p[7].__r_.__value_.__r.__words[0] = (std::string::size_type)(v214 + 56);
                  __p[7].__r_.__value_.__l.__size_ = (std::string::size_type)&v213[v212];
                  v5 = v582;
                  if (v206)
                    operator delete(v206);
                  LODWORD(v3) = v587;
                  v199 = v584;
                }
                else
                {
                  if (!__p[7].__r_.__value_.__r.__words[0])
                    goto LABEL_810;
                  *(_QWORD *)__p[7].__r_.__value_.__l.__data_ = v192;
                  v206[8] = v193;
                  *(_WORD *)(v206 + 9) = v598;
                  v206[11] = v599;
                  *((_DWORD *)v206 + 3) = v194;
                  *((_OWORD *)v206 + 1) = *(_OWORD *)v596;
                  *((_OWORD *)v206 + 2) = *(_OWORD *)&v596[16];
                  *((_QWORD *)v206 + 6) = v597;
                  v207 = (std::string::size_type)(v206 + 56);
                }
                __p[7].__r_.__value_.__r.__words[0] = v207;
              }
              v604 = *(_QWORD *)((char *)v659 + 4);
              v605 = BYTE4(v659[1]);
              v603 = v199;
              v607 = v200;
              v611 = v201;
              v220 = (void **)v594;
              if (v594 < v595)
              {
                if (!v594)
                  goto LABEL_810;
                cricket::VideoSenderInfo::VideoSenderInfo(v594, (uint64_t)__p);
                v221 = (unint64_t)(v220 + 57);
LABEL_381:
                v594 = v221;
                cricket::VideoSenderInfo::~VideoSenderInfo((void **)&__p[0].__r_.__value_.__l.__data_);
                v231 = v132[1];
                if (v231)
                {
                  do
                  {
                    v232 = (uint64_t **)v231;
                    v231 = (uint64_t *)*v231;
                  }
                  while (v231);
                }
                else
                {
                  do
                  {
                    v232 = (uint64_t **)v132[2];
                    v120 = *v232 == (uint64_t *)v132;
                    v132 = v232;
                  }
                  while (!v120);
                }
                v132 = v232;
                if (v232 == &v613)
                  goto LABEL_391;
                continue;
              }
              v222 = (uint64_t)v593;
              v223 = 0x823EE08FB823EE09 * ((uint64_t)(v594 - (_QWORD)v593) >> 3);
              v224 = v223 + 1;
              if (v223 + 1 > 0x8FB823EE08FB82)
                goto LABEL_811;
              if (0x47DC11F7047DC12 * ((uint64_t)(v595 - (_QWORD)v593) >> 3) > v224)
                v224 = 0x47DC11F7047DC12 * ((uint64_t)(v595 - (_QWORD)v593) >> 3);
              if (0x823EE08FB823EE09 * ((uint64_t)(v595 - (_QWORD)v593) >> 3) >= 0x47DC11F7047DC1)
                v225 = 0x8FB823EE08FB82;
              else
                v225 = v224;
              if (!v225)
                goto LABEL_810;
              if (v225 > 0x8FB823EE08FB82)
                goto LABEL_812;
              v226 = 456 * v225;
              v227 = (char *)operator new(456 * v225);
              v228 = &v227[v226];
              v229 = cricket::VideoSenderInfo::VideoSenderInfo((uint64_t)&v227[456 * v223], (uint64_t)__p);
              v221 = v229 + 456;
              if (v220 == (void **)v222)
              {
                v593 = (void **)v229;
                v595 = (unint64_t)v228;
                if (!v220)
                  goto LABEL_381;
              }
              else
              {
                do
                {
                  v220 -= 57;
                  v229 = cricket::VideoSenderInfo::VideoSenderInfo(v229 - 456, (uint64_t)v220);
                }
                while (v220 != (void **)v222);
                v220 = v593;
                v230 = (void **)v594;
                v593 = (void **)v229;
                v594 = v221;
                v595 = (unint64_t)v228;
                while (v230 != v220)
                {
                  v230 -= 57;
                  cricket::VideoSenderInfo::~VideoSenderInfo(v230);
                }
                if (!v220)
                  goto LABEL_381;
              }
              operator delete(v220);
              goto LABEL_381;
            }
          }
          else
          {
            if (v174 != v175)
            {
              v179 = v173 | ((_DWORD)v3 << 8);
              while (!*(_BYTE *)(v174 + 4) || *(_DWORD *)v174 != v179)
              {
                v174 += 272;
                if (v174 == v175)
                  goto LABEL_337;
              }
            }
            if (v174 != v175)
            {
              v177 = *(_BYTE *)(v174 + 124) != 0;
              goto LABEL_338;
            }
          }
          break;
        }
LABEL_337:
        v177 = 0;
        goto LABEL_338;
      }
      v590 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(v5 + 1056) - *(_QWORD *)(v5 + 1048)) >> 4) > 1;
      v132 = v612;
      if (v612 != &v613)
        goto LABEL_279;
LABEL_391:
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v612, v613);
LABEL_397:
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v622, v623);
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v620, v621[0]);
      if (v616 && SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v615.__r_.__value_.__l.__data_);
      cricket::VideoSenderInfo::~VideoSenderInfo((void **)&v626);
      v233 = (unint64_t)v593;
      if (v593 == (void **)v594)
      {
        v252 = v580;
        if (!v593)
          goto LABEL_421;
        goto LABEL_794;
      }
      v234 = (uint64_t)v593;
      v235 = *((_QWORD *)v580 + 5);
      v236 = v594 - (_QWORD)v593;
      cricket::VideoSenderInfo::VideoSenderInfo((uint64_t)&v626, (uint64_t)v593);
      if (v236 != 456)
      {
        v237 = v234;
        v238 = (char *)v636;
        *((_QWORD *)&v636 + 1) = v636;
        v239 = *(int **)(v235 + 88);
        v240 = *(int **)(v235 + 96);
        if (v239 != v240)
        {
          do
          {
            v242 = *v239;
            if ((unint64_t)v238 < (unint64_t)v637)
            {
              if (!v238)
                goto LABEL_810;
              *(_DWORD *)v238 = v242;
              *((_QWORD *)v238 + 1) = 0;
              v241 = v238 + 16;
            }
            else
            {
              v243 = (char *)v636;
              v3 = (uint64_t)&v238[-v636] >> 4;
              v244 = v3 + 1;
              if ((unint64_t)(v3 + 1) >> 60)
                goto LABEL_811;
              v245 = v637 - v636;
              if ((uint64_t)(v637 - v636) >> 3 > v244)
                v244 = v245 >> 3;
              v44 = (unint64_t)v245 >= 0x7FFFFFFFFFFFFFF0;
              v246 = 0xFFFFFFFFFFFFFFFLL;
              if (!v44)
                v246 = v244;
              if (!v246)
                goto LABEL_810;
              if (v246 >> 60)
                goto LABEL_812;
              v247 = 16 * v246;
              v248 = (char *)operator new(16 * v246);
              v249 = &v248[16 * v3];
              *(_DWORD *)v249 = v242;
              *((_QWORD *)v249 + 1) = 0;
              v250 = v249;
              if (v238 != v243)
              {
                do
                {
                  *((_OWORD *)v250 - 1) = *((_OWORD *)v238 - 1);
                  v250 -= 16;
                  v238 -= 16;
                }
                while (v238 != v243);
                v238 = v243;
              }
              v251 = &v248[v247];
              v241 = v249 + 16;
              *(_QWORD *)&v636 = v250;
              *((_QWORD *)&v636 + 1) = v249 + 16;
              *(_QWORD *)&v637 = v251;
              if (v238)
                operator delete(v238);
            }
            *((_QWORD *)&v636 + 1) = v241;
            ++v239;
            v238 = v241;
          }
          while (v239 != v240);
          v237 = (uint64_t)v593;
          v236 = v594 - (_QWORD)v593;
        }
        DWORD2(v645) = HIDWORD(v645);
        v656[1] = v656[2];
        v254 = v236 / 456;
        if ((unint64_t)(v236 / 456) >= 2)
        {
          v255 = v237;
          for (j = 1; j != v254; ++j)
          {
            LODWORD(v3) = 456;
            v259 = (int64x2_t *)(v255 + 456 * j);
            v650 += v259[22].i32[0];
            v626 = vaddq_s64(v626, *v259);
            v628 += v259[1].i32[2];
            v260 = 0x7FFFFFFFFFFFFFFFLL;
            if (v639[4] != 0x7FFFFFFFFFFFFFFFLL)
            {
              v261 = v259[12].i64[0];
              if (v261 != 0x7FFFFFFFFFFFFFFFLL)
              {
                v262 = v261 == 0x8000000000000000 || v639[4] == 0x8000000000000000;
                v260 = v639[4] + v261;
                if (v262)
                  v260 = 0x8000000000000000;
              }
            }
            v639[4] = v260;
            v627 += v259[1].i64[0];
            v629 += v259[2].i64[0];
            LODWORD(v633) = v633 + v259[4].i32[0];
            if (*(_DWORD *)(v237 + 456 * j + 264) > (int)v643)
              LODWORD(v643) = *(_DWORD *)(v237 + 456 * j + 264);
            if (*(_DWORD *)(v237 + 456 * j + 268) > SHIDWORD(v643))
              HIDWORD(v643) = *(_DWORD *)(v237 + 456 * j + 268);
            v630 += v259[2].i32[2];
            v642 = vadd_s32(v642, *(int32x2_t *)(v237 + 456 * j + 256));
            v263 = v259[10].i64[0];
            if (v259[10].i64[1] != v263)
            {
              v264 = (_OWORD *)v639[1];
              if (v639[1] >= v639[2])
              {
                v269 = (_OWORD *)v639[0];
                v270 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v639[1] - v639[0]) >> 3);
                v271 = v270 + 1;
                if ((unint64_t)(v270 + 1) > 0x492492492492492)
                  goto LABEL_811;
                if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v639[2] - v639[0]) >> 3) > v271)
                  v271 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v639[2] - v639[0]) >> 3);
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v639[2] - v639[0]) >> 3)) >= 0x249249249249249)
                  v272 = 0x492492492492492;
                else
                  v272 = v271;
                if (!v272)
                  goto LABEL_810;
                if (v272 > 0x492492492492492)
                  goto LABEL_812;
                v273 = 56 * v272;
                v274 = (char *)operator new(56 * v272);
                v275 = &v274[56 * v270];
                v277 = *(_OWORD *)(v263 + 16);
                v276 = *(_OWORD *)(v263 + 32);
                v278 = *(_OWORD *)v263;
                *((_QWORD *)v275 + 6) = *(_QWORD *)(v263 + 48);
                *((_OWORD *)v275 + 1) = v277;
                *((_OWORD *)v275 + 2) = v276;
                *(_OWORD *)v275 = v278;
                v279 = v275;
                if (v264 != v269)
                {
                  do
                  {
                    v280 = *(_OWORD *)((char *)v264 - 56);
                    v281 = *(_OWORD *)((char *)v264 - 40);
                    v282 = *(_OWORD *)((char *)v264 - 24);
                    *((_QWORD *)v279 - 1) = *((_QWORD *)v264 - 1);
                    *(_OWORD *)(v279 - 24) = v282;
                    *(_OWORD *)(v279 - 40) = v281;
                    *(_OWORD *)(v279 - 56) = v280;
                    v279 -= 56;
                    v264 = (_OWORD *)((char *)v264 - 56);
                  }
                  while (v264 != v269);
                  v264 = v269;
                }
                v268 = v275 + 56;
                v639[0] = v279;
                v639[1] = v275 + 56;
                v639[2] = &v274[v273];
                if (v264)
                  operator delete(v264);
              }
              else
              {
                if (!v639[1])
                  goto LABEL_810;
                v265 = *(_OWORD *)v263;
                v266 = *(_OWORD *)(v263 + 16);
                v267 = *(_OWORD *)(v263 + 32);
                *(_QWORD *)(v639[1] + 48) = *(_QWORD *)(v263 + 48);
                v264[1] = v266;
                v264[2] = v267;
                *v264 = v265;
                v268 = (char *)v264 + 56;
              }
              v639[1] = v268;
            }
            if (j == v254)
              goto LABEL_810;
            v283 = v237 + 456 * j;
            if (*(_BYTE *)(v283 + 392))
            {
              v284 = v283 + 384;
              if (v654)
              {
                v257 = v653;
              }
              else
              {
                v257 = 0;
                v654 = 1;
                v653 = 0;
                if (!*(_BYTE *)(v284 + 8))
                  goto LABEL_810;
              }
              v653 = *(_QWORD *)v284 + v257;
              v654 = 1;
            }
            v255 = v237;
            v258 = v237 + 456 * j;
            HIDWORD(v649) += *(_DWORD *)(v258 + 348);
            v656[0] += *(_DWORD *)(v258 + 404);
            v651 = vaddq_s64(v651, *(int64x2_t *)(v258 + 360));
          }
        }
      }
      v285 = *((_QWORD *)a2 + 4);
      v286 = *((_QWORD *)a2 + 5);
      if (v285 >= v286)
      {
        v288 = *((_QWORD *)a2 + 3);
        v289 = 0x823EE08FB823EE09 * ((uint64_t)(v285 - v288) >> 3);
        v290 = v289 + 1;
        if (v289 + 1 > 0x8FB823EE08FB82)
          goto LABEL_811;
        v291 = 0x823EE08FB823EE09 * ((uint64_t)(v286 - v288) >> 3);
        if (2 * v291 > v290)
          v290 = 2 * v291;
        if (v291 >= 0x47DC11F7047DC1)
          v292 = 0x8FB823EE08FB82;
        else
          v292 = v290;
        if (v292)
        {
          if (v292 > 0x8FB823EE08FB82)
LABEL_812:
            std::__throw_bad_array_new_length[abi:sn180100]();
          v293 = 456 * v292;
          v294 = (char *)operator new(456 * v292);
          v295 = &v294[v293];
          v296 = cricket::VideoSenderInfo::VideoSenderInfo((uint64_t)&v294[456 * v289], (uint64_t)&v626);
          v287 = v296 + 456;
          v297 = a2;
          v299 = (void **)*((_QWORD *)a2 + 3);
          v298 = (void **)*((_QWORD *)a2 + 4);
          if (v298 == v299)
          {
            *((_QWORD *)a2 + 3) = v296;
            *((_QWORD *)a2 + 4) = v287;
            *((_QWORD *)a2 + 5) = v295;
            if (!v298)
              goto LABEL_484;
          }
          else
          {
            do
            {
              v298 -= 57;
              v296 = cricket::VideoSenderInfo::VideoSenderInfo(v296 - 456, (uint64_t)v298);
            }
            while (v298 != v299);
            v297 = a2;
            v298 = (void **)*((_QWORD *)a2 + 3);
            v300 = (void **)*((_QWORD *)a2 + 4);
            *((_QWORD *)a2 + 3) = v296;
            *((_QWORD *)a2 + 4) = v287;
            *((_QWORD *)a2 + 5) = v295;
            if (v300 != v298)
            {
              do
              {
                v300 -= 57;
                cricket::VideoSenderInfo::~VideoSenderInfo(v300);
              }
              while (v300 != v298);
              v297 = a2;
            }
            if (!v298)
              goto LABEL_484;
          }
          operator delete(v298);
          goto LABEL_483;
        }
LABEL_810:
        __break(1u);
LABEL_811:
        abort();
      }
      if (!v285)
        goto LABEL_810;
      v287 = cricket::VideoSenderInfo::VideoSenderInfo(v285, (uint64_t)&v626) + 456;
LABEL_483:
      v297 = a2;
LABEL_484:
      *((_QWORD *)v297 + 4) = v287;
      v301 = v297;
      cricket::VideoSenderInfo::~VideoSenderInfo((void **)&v626);
      v233 = (unint64_t)v593;
      if (v593 != (void **)v594)
      {
        v302 = (char *)*((_QWORD *)v301 + 1);
        v303 = v301;
        v579 = v594;
        while (1)
        {
          while (1)
          {
            v583 = v233;
            v305 = v303;
            v306 = *((_QWORD *)v303 + 2);
            if ((unint64_t)v302 >= v306)
              break;
            if (!v302)
              goto LABEL_810;
            v307 = v583;
            *(_OWORD *)v302 = *(_OWORD *)v583;
            v308 = *(_OWORD *)(v583 + 16);
            v309 = *(_OWORD *)(v583 + 32);
            v310 = *(_OWORD *)(v583 + 64);
            *((_OWORD *)v302 + 3) = *(_OWORD *)(v583 + 48);
            *((_OWORD *)v302 + 4) = v310;
            *((_OWORD *)v302 + 1) = v308;
            *((_OWORD *)v302 + 2) = v309;
            v311 = (std::string *)(v302 + 80);
            if (*(char *)(v583 + 103) < 0)
            {
              std::string::__init_copy_ctor_external(v311, *(const std::string::value_type **)(v583 + 80), *(_QWORD *)(v583 + 88));
              v307 = v583;
              *((_QWORD *)v302 + 13) = *(_QWORD *)(v583 + 104);
              *((_QWORD *)v302 + 14) = 0;
              *((_QWORD *)v302 + 15) = 0;
              *((_QWORD *)v302 + 16) = 0;
              v314 = *(_BYTE **)(v583 + 112);
              v379 = *(_BYTE **)(v583 + 120);
              v315 = v379 - v314;
              if (v379 == v314)
              {
LABEL_533:
                *((_QWORD *)v302 + 17) = 0;
                *((_QWORD *)v302 + 18) = 0;
                *((_QWORD *)v302 + 19) = 0;
                v319 = *(_BYTE **)(v307 + 136);
                v380 = *(_BYTE **)(v307 + 144);
                v320 = v380 - v319;
                if (v380 != v319)
                  goto LABEL_534;
                goto LABEL_495;
              }
            }
            else
            {
              v312 = *(_OWORD *)(v583 + 80);
              *((_QWORD *)v302 + 12) = *(_QWORD *)(v583 + 96);
              *(_OWORD *)&v311->__r_.__value_.__l.__data_ = v312;
              *((_QWORD *)v302 + 13) = *(_QWORD *)(v583 + 104);
              *((_QWORD *)v302 + 14) = 0;
              *((_QWORD *)v302 + 15) = 0;
              *((_QWORD *)v302 + 16) = 0;
              v314 = *(_BYTE **)(v583 + 112);
              v313 = *(_BYTE **)(v583 + 120);
              v315 = v313 - v314;
              if (v313 == v314)
                goto LABEL_533;
            }
            if (v315 < 0)
              goto LABEL_811;
            v316 = (char *)operator new(v315);
            *((_QWORD *)v302 + 14) = v316;
            *((_QWORD *)v302 + 15) = v316;
            v317 = &v316[16 * (v315 >> 4)];
            *((_QWORD *)v302 + 16) = v317;
            memcpy(v316, v314, v315);
            *((_QWORD *)v302 + 15) = v317;
            v307 = v583;
            *((_QWORD *)v302 + 17) = 0;
            *((_QWORD *)v302 + 18) = 0;
            *((_QWORD *)v302 + 19) = 0;
            v319 = *(_BYTE **)(v583 + 136);
            v318 = *(_BYTE **)(v583 + 144);
            v320 = v318 - v319;
            if (v318 != v319)
            {
LABEL_534:
              if (v320 < 0)
                goto LABEL_811;
              v381 = (char *)operator new(v320);
              *((_QWORD *)v302 + 17) = v381;
              *((_QWORD *)v302 + 18) = v381;
              v382 = &v381[16 * (v320 >> 4)];
              *((_QWORD *)v302 + 19) = v382;
              memcpy(v381, v319, v320);
              *((_QWORD *)v302 + 18) = v382;
              v307 = v583;
              *((_QWORD *)v302 + 20) = 0;
              *((_QWORD *)v302 + 21) = 0;
              *((_QWORD *)v302 + 22) = 0;
              v322 = *(_BYTE **)(v583 + 160);
              v383 = *(_BYTE **)(v583 + 168);
              v323 = v383 - v322;
              if (v383 == v322)
                goto LABEL_538;
              goto LABEL_536;
            }
LABEL_495:
            *((_QWORD *)v302 + 20) = 0;
            *((_QWORD *)v302 + 21) = 0;
            *((_QWORD *)v302 + 22) = 0;
            v322 = *(_BYTE **)(v307 + 160);
            v321 = *(_BYTE **)(v307 + 168);
            v323 = v321 - v322;
            if (v321 == v322)
              goto LABEL_538;
LABEL_536:
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v323 >> 3)) > 0x492492492492492)
              goto LABEL_811;
            v384 = (char *)operator new(v323);
            *((_QWORD *)v302 + 20) = v384;
            *((_QWORD *)v302 + 21) = v384;
            v385 = &v384[8 * (v323 >> 3)];
            *((_QWORD *)v302 + 22) = v385;
            memcpy(v384, v322, v323);
            *((_QWORD *)v302 + 21) = v385;
            v307 = v583;
LABEL_538:
            *(_OWORD *)(v302 + 184) = *(_OWORD *)(v307 + 184);
            *((_QWORD *)v302 + 26) = 0;
            *((_QWORD *)v302 + 27) = 0;
            *((_QWORD *)v302 + 25) = 0;
            v386 = *(_QWORD *)(v307 + 200);
            v387 = *(_QWORD *)(v307 + 208);
            v388 = v387 - v386;
            v389 = v302;
            if (v387 != v386)
            {
              v390 = 0xAAAAAAAAAAAAAAABLL * (v388 >> 4);
              if (v390 > 0x555555555555555)
                goto LABEL_811;
              v391 = (char *)operator new(v388);
              v392 = 0;
              *((_QWORD *)v389 + 25) = v391;
              *((_QWORD *)v389 + 26) = v391;
              *((_QWORD *)v389 + 27) = &v391[48 * v390];
              do
              {
                v394 = (__int128 *)(v386 + v392);
                v395 = (std::string *)&v391[v392];
                if (*(char *)(v386 + v392 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v395, *(const std::string::value_type **)v394, *((_QWORD *)v394 + 1));
                }
                else
                {
                  v396 = *v394;
                  v395->__r_.__value_.__r.__words[2] = *((_QWORD *)v394 + 2);
                  *(_OWORD *)&v395->__r_.__value_.__l.__data_ = v396;
                }
                v397 = &v391[v392];
                *((_QWORD *)v397 + 3) = 0;
                *((_QWORD *)v397 + 4) = 0;
                *((_QWORD *)v397 + 5) = 0;
                v399 = *(_BYTE **)(v386 + v392 + 24);
                v398 = *(_BYTE **)(v386 + v392 + 32);
                v400 = v398 - v399;
                if (v398 != v399)
                {
                  if (v400 < 0)
                    goto LABEL_811;
                  v393 = operator new(v398 - v399);
                  *((_QWORD *)v397 + 3) = v393;
                  *((_QWORD *)v397 + 4) = v393;
                  v3 = (uint64_t)v393 + 4 * (v400 >> 2);
                  *((_QWORD *)v397 + 5) = v3;
                  memcpy(v393, v399, v400);
                  *((_QWORD *)v397 + 4) = v3;
                }
                v392 += 48;
              }
              while (v386 + v392 != v387);
              v401 = &v391[v392];
              v302 = v389;
              *((_QWORD *)v389 + 26) = v401;
              v307 = v583;
            }
            v302[224] = 0;
            v402 = (std::string *)(v302 + 224);
            v302[248] = 0;
            if (*(_BYTE *)(v307 + 248))
            {
              if (*(char *)(v307 + 247) < 0)
              {
                std::string::__init_copy_ctor_external(v402, *(const std::string::value_type **)(v307 + 224), *(_QWORD *)(v307 + 232));
                v307 = v583;
              }
              else
              {
                v403 = *(_OWORD *)(v307 + 224);
                *((_QWORD *)v302 + 30) = *(_QWORD *)(v307 + 240);
                *(_OWORD *)&v402->__r_.__value_.__l.__data_ = v403;
              }
              v302[248] = 1;
            }
            v531 = *(_OWORD *)(v307 + 256);
            v532 = *(_OWORD *)(v307 + 288);
            v533 = *(_QWORD *)(v307 + 304);
            *((_OWORD *)v302 + 17) = *(_OWORD *)(v307 + 272);
            *((_OWORD *)v302 + 18) = v532;
            *((_OWORD *)v302 + 16) = v531;
            v534 = v302 + 320;
            *((_QWORD *)v302 + 40) = 0;
            *((_QWORD *)v302 + 41) = 0;
            *((_QWORD *)v302 + 38) = v533;
            *((_QWORD *)v302 + 39) = v302 + 320;
            v535 = *(_QWORD **)(v307 + 312);
            v536 = (_QWORD *)(v307 + 320);
            if (v535 != (_QWORD *)(v307 + 320))
            {
              while (1)
              {
                v543 = (int *)(v535 + 4);
                v544 = *((_QWORD *)v302 + 40);
                v545 = v534;
                if (*((_QWORD **)v302 + 39) != v534)
                {
                  v546 = (_QWORD *)*((_QWORD *)v302 + 40);
                  v547 = v534;
                  if (v544)
                  {
                    do
                    {
                      v545 = v546;
                      v546 = (_QWORD *)v546[1];
                    }
                    while (v546);
                  }
                  else
                  {
                    do
                    {
                      v545 = (_QWORD *)v547[2];
                      v120 = *v545 == (_QWORD)v547;
                      v547 = v545;
                    }
                    while (v120);
                  }
                  v548 = *v543;
                  if (*((_DWORD *)v545 + 8) >= *v543)
                    break;
                }
                if (v544)
                  v549 = v545;
                else
                  v549 = v534;
                if (v544)
                  v550 = v545 + 1;
                else
                  v550 = v534;
                if (!*v550)
                  goto LABEL_753;
LABEL_778:
                v566 = (_QWORD *)v535[1];
                if (v566)
                {
                  do
                  {
                    v567 = v566;
                    v566 = (_QWORD *)*v566;
                  }
                  while (v566);
                }
                else
                {
                  do
                  {
                    v567 = (_QWORD *)v535[2];
                    v120 = *v567 == (_QWORD)v535;
                    v535 = v567;
                  }
                  while (!v120);
                }
                v535 = v567;
                v302 = v389;
                if (v567 == v536)
                  goto LABEL_728;
              }
              v550 = v534;
              v549 = v534;
              if (v544)
              {
                while (1)
                {
                  while (1)
                  {
                    v549 = (_QWORD *)v544;
                    v551 = *(_DWORD *)(v544 + 32);
                    if (v548 >= v551)
                      break;
                    v544 = *v549;
                    v550 = v549;
                    if (!*v549)
                      goto LABEL_753;
                  }
                  if (v551 >= v548)
                    goto LABEL_778;
                  v544 = v549[1];
                  if (!v544)
                  {
                    v550 = v549 + 1;
                    break;
                  }
                }
              }
LABEL_753:
              v552 = operator new(0x30uLL);
              v552[2] = *(_OWORD *)v543;
              *(_QWORD *)v552 = 0;
              *((_QWORD *)v552 + 1) = 0;
              *((_QWORD *)v552 + 2) = v549;
              *v550 = v552;
              v553 = **((_QWORD **)v389 + 39);
              if (v553)
              {
                *((_QWORD *)v389 + 39) = v553;
                v552 = (_OWORD *)*v550;
              }
              v554 = (_BYTE *)*v534;
              v120 = v552 == (_OWORD *)*v534;
              *((_BYTE *)v552 + 24) = v120;
              if (!v120)
              {
                do
                {
                  v555 = *((_QWORD *)v552 + 2);
                  if (*(_BYTE *)(v555 + 24))
                    break;
                  v556 = *(_BYTE **)(v555 + 16);
                  v557 = *(_QWORD *)v556;
                  if (*(_QWORD *)v556 == v555)
                  {
                    v560 = *((_QWORD *)v556 + 1);
                    if (!v560 || (v561 = *(unsigned __int8 *)(v560 + 24), v558 = (_BYTE *)(v560 + 24), v561))
                    {
                      if (*(_OWORD **)v555 == v552)
                      {
                        *(_BYTE *)(v555 + 24) = 1;
                        v556[24] = 0;
                        v564 = *(_QWORD *)(v555 + 8);
                        *(_QWORD *)v556 = v564;
                        if (v564)
                          goto LABEL_770;
                      }
                      else
                      {
                        v562 = *(uint64_t **)(v555 + 8);
                        v563 = *v562;
                        *(_QWORD *)(v555 + 8) = *v562;
                        if (v563)
                        {
                          *(_QWORD *)(v563 + 16) = v555;
                          v556 = *(_BYTE **)(v555 + 16);
                        }
                        v562[2] = (uint64_t)v556;
                        *(_QWORD *)(*(_QWORD *)(v555 + 16) + 8 * (**(_QWORD **)(v555 + 16) != v555)) = v562;
                        *v562 = v555;
                        *(_QWORD *)(v555 + 16) = v562;
                        v556 = (_BYTE *)v562[2];
                        v555 = *(_QWORD *)v556;
                        *((_BYTE *)v562 + 24) = 1;
                        v556[24] = 0;
                        v564 = *(_QWORD *)(v555 + 8);
                        *(_QWORD *)v556 = v564;
                        if (v564)
LABEL_770:
                          *(_QWORD *)(v564 + 16) = v556;
                      }
                      *(_QWORD *)(v555 + 16) = *((_QWORD *)v556 + 2);
                      *(_QWORD *)(*((_QWORD *)v556 + 2) + 8 * (**((_QWORD **)v556 + 2) != (_QWORD)v556)) = v555;
                      *(_QWORD *)(v555 + 8) = v556;
LABEL_776:
                      *((_QWORD *)v556 + 2) = v555;
                      break;
                    }
                  }
                  else if (!v557 || (v559 = *(unsigned __int8 *)(v557 + 24), v558 = (_BYTE *)(v557 + 24), v559))
                  {
                    if (*(_OWORD **)v555 == v552)
                    {
                      v568 = *((_QWORD *)v552 + 1);
                      *(_QWORD *)v555 = v568;
                      if (v568)
                      {
                        *(_QWORD *)(v568 + 16) = v555;
                        v556 = *(_BYTE **)(v555 + 16);
                      }
                      *((_QWORD *)v552 + 2) = v556;
                      *(_QWORD *)(*(_QWORD *)(v555 + 16) + 8 * (**(_QWORD **)(v555 + 16) != v555)) = v552;
                      *((_QWORD *)v552 + 1) = v555;
                      *(_QWORD *)(v555 + 16) = v552;
                      v556 = (_BYTE *)*((_QWORD *)v552 + 2);
                      *((_BYTE *)v552 + 24) = 1;
                      v556[24] = 0;
                      v555 = *((_QWORD *)v556 + 1);
                      v565 = *(_OWORD **)v555;
                      *((_QWORD *)v556 + 1) = *(_QWORD *)v555;
                      if (v565)
LABEL_774:
                        *((_QWORD *)v565 + 2) = v556;
                    }
                    else
                    {
                      *(_BYTE *)(v555 + 24) = 1;
                      v556[24] = 0;
                      v555 = *((_QWORD *)v556 + 1);
                      v565 = *(_OWORD **)v555;
                      *((_QWORD *)v556 + 1) = *(_QWORD *)v555;
                      if (v565)
                        goto LABEL_774;
                    }
                    *(_QWORD *)(v555 + 16) = *((_QWORD *)v556 + 2);
                    *(_QWORD *)(*((_QWORD *)v556 + 2) + 8 * (**((_QWORD **)v556 + 2) != (_QWORD)v556)) = v555;
                    *(_QWORD *)v555 = v556;
                    goto LABEL_776;
                  }
                  *(_BYTE *)(v555 + 24) = 1;
                  v552 = v556;
                  v556[24] = v556 == v554;
                  *v558 = 1;
                }
                while (v556 != v554);
              }
              ++*((_QWORD *)v389 + 41);
              goto LABEL_778;
            }
LABEL_728:
            v537 = v583;
            *((_OWORD *)v302 + 21) = *(_OWORD *)(v583 + 336);
            v538 = *(_OWORD *)(v583 + 352);
            v539 = *(_OWORD *)(v583 + 368);
            v540 = *(_OWORD *)(v583 + 400);
            *((_OWORD *)v302 + 24) = *(_OWORD *)(v583 + 384);
            *((_OWORD *)v302 + 25) = v540;
            *((_OWORD *)v302 + 22) = v538;
            *((_OWORD *)v302 + 23) = v539;
            v302[416] = 0;
            v302[440] = 0;
            v252 = v580;
            if (*(_BYTE *)(v583 + 440))
            {
              v541 = (std::string *)(v302 + 416);
              if (*(char *)(v583 + 439) < 0)
              {
                std::string::__init_copy_ctor_external(v541, *(const std::string::value_type **)(v583 + 416), *(_QWORD *)(v583 + 424));
                v537 = v583;
                v252 = v580;
              }
              else
              {
                v542 = *(_OWORD *)(v583 + 416);
                *((_QWORD *)v302 + 54) = *(_QWORD *)(v583 + 432);
                *(_OWORD *)&v541->__r_.__value_.__l.__data_ = v542;
              }
              v302[440] = 1;
            }
            *((_DWORD *)v302 + 112) = *(_DWORD *)(v537 + 448);
            v302 += 456;
            v303 = a2;
            *((_QWORD *)a2 + 1) = v302;
            v233 = v537 + 456;
            if (v233 == v579)
            {
LABEL_793:
              v233 = (unint64_t)v593;
              if (!v593)
                goto LABEL_421;
              goto LABEL_794;
            }
          }
          v324 = *(_QWORD *)v305;
          v325 = 0x823EE08FB823EE09 * ((uint64_t)&v302[-*(_QWORD *)v305] >> 3);
          v326 = v325 + 1;
          if (v325 + 1 > 0x8FB823EE08FB82)
            goto LABEL_811;
          v327 = 0x823EE08FB823EE09 * ((uint64_t)(v306 - v324) >> 3);
          if (2 * v327 > v326)
            v326 = 2 * v327;
          if (v327 >= 0x47DC11F7047DC1)
            v328 = 0x8FB823EE08FB82;
          else
            v328 = v326;
          if (!v328)
            goto LABEL_810;
          if (v328 > 0x8FB823EE08FB82)
            goto LABEL_812;
          v329 = 456 * v328;
          v330 = (char *)operator new(456 * v328);
          v331 = &v330[456 * v325];
          v332 = v583;
          *(_OWORD *)v331 = *(_OWORD *)v583;
          v333 = *(_OWORD *)(v583 + 16);
          v334 = *(_OWORD *)(v583 + 32);
          v335 = *(_OWORD *)(v583 + 64);
          *((_OWORD *)v331 + 3) = *(_OWORD *)(v583 + 48);
          *((_OWORD *)v331 + 4) = v335;
          *((_OWORD *)v331 + 1) = v333;
          *((_OWORD *)v331 + 2) = v334;
          v336 = (std::string *)(v331 + 80);
          if (*(char *)(v583 + 103) < 0)
          {
            std::string::__init_copy_ctor_external(v336, *(const std::string::value_type **)(v583 + 80), *(_QWORD *)(v583 + 88));
            v332 = v583;
            *((_QWORD *)v331 + 13) = *(_QWORD *)(v583 + 104);
            *((_QWORD *)v331 + 14) = 0;
            *((_QWORD *)v331 + 15) = 0;
            *((_QWORD *)v331 + 16) = 0;
            v339 = *(_BYTE **)(v583 + 112);
            v349 = *(_BYTE **)(v583 + 120);
            v340 = v349 - v339;
            if (v349 == v339)
            {
LABEL_512:
              v588 = v330;
              v591 = v325;
              *((_QWORD *)v331 + 17) = 0;
              *((_QWORD *)v331 + 18) = 0;
              *((_QWORD *)v331 + 19) = 0;
              v344 = *(_BYTE **)(v332 + 136);
              v350 = *(_BYTE **)(v332 + 144);
              v345 = v350 - v344;
              if (v350 != v344)
                goto LABEL_513;
              goto LABEL_509;
            }
          }
          else
          {
            v337 = *(_OWORD *)(v583 + 80);
            *((_QWORD *)v331 + 12) = *(_QWORD *)(v583 + 96);
            *(_OWORD *)&v336->__r_.__value_.__l.__data_ = v337;
            *((_QWORD *)v331 + 13) = *(_QWORD *)(v583 + 104);
            *((_QWORD *)v331 + 14) = 0;
            *((_QWORD *)v331 + 15) = 0;
            *((_QWORD *)v331 + 16) = 0;
            v339 = *(_BYTE **)(v583 + 112);
            v338 = *(_BYTE **)(v583 + 120);
            v340 = v338 - v339;
            if (v338 == v339)
              goto LABEL_512;
          }
          if (v340 < 0)
            goto LABEL_811;
          v341 = (char *)operator new(v340);
          *((_QWORD *)v331 + 14) = v341;
          *((_QWORD *)v331 + 15) = v341;
          v342 = &v341[16 * (v340 >> 4)];
          *((_QWORD *)v331 + 16) = v342;
          memcpy(v341, v339, v340);
          *((_QWORD *)v331 + 15) = v342;
          v332 = v583;
          v588 = v330;
          v591 = v325;
          *((_QWORD *)v331 + 17) = 0;
          *((_QWORD *)v331 + 18) = 0;
          *((_QWORD *)v331 + 19) = 0;
          v344 = *(_BYTE **)(v583 + 136);
          v343 = *(_BYTE **)(v583 + 144);
          v345 = v343 - v344;
          if (v343 != v344)
          {
LABEL_513:
            if (v345 < 0)
              goto LABEL_811;
            v351 = (char *)operator new(v345);
            *((_QWORD *)v331 + 17) = v351;
            *((_QWORD *)v331 + 18) = v351;
            v352 = &v351[16 * (v345 >> 4)];
            *((_QWORD *)v331 + 19) = v352;
            memcpy(v351, v344, v345);
            *((_QWORD *)v331 + 18) = v352;
            v332 = v583;
            *((_QWORD *)v331 + 20) = 0;
            *((_QWORD *)v331 + 21) = 0;
            *((_QWORD *)v331 + 22) = 0;
            v347 = *(_BYTE **)(v583 + 160);
            v353 = *(_BYTE **)(v583 + 168);
            v348 = v353 - v347;
            if (v353 == v347)
              goto LABEL_517;
            goto LABEL_515;
          }
LABEL_509:
          *((_QWORD *)v331 + 20) = 0;
          *((_QWORD *)v331 + 21) = 0;
          *((_QWORD *)v331 + 22) = 0;
          v347 = *(_BYTE **)(v332 + 160);
          v346 = *(_BYTE **)(v332 + 168);
          v348 = v346 - v347;
          if (v346 == v347)
            goto LABEL_517;
LABEL_515:
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v348 >> 3)) > 0x492492492492492)
            goto LABEL_811;
          v354 = (char *)operator new(v348);
          *((_QWORD *)v331 + 20) = v354;
          *((_QWORD *)v331 + 21) = v354;
          v355 = &v354[8 * (v348 >> 3)];
          *((_QWORD *)v331 + 22) = v355;
          memcpy(v354, v347, v348);
          *((_QWORD *)v331 + 21) = v355;
          v332 = v583;
LABEL_517:
          v577 = v329;
          *(_OWORD *)(v331 + 184) = *(_OWORD *)(v332 + 184);
          v357 = v588;
          v356 = v591;
          v358 = &v588[456 * v591];
          *((_QWORD *)v358 + 25) = 0;
          v359 = v358 + 200;
          v359[1] = 0;
          v585 = v359 + 1;
          v359[2] = 0;
          v360 = *(_QWORD *)(v332 + 200);
          v361 = *(_QWORD *)(v332 + 208);
          v362 = v361 - v360;
          if (v361 != v360)
          {
            v363 = 0xAAAAAAAAAAAAAAABLL * (v362 >> 4);
            if (v363 > 0x555555555555555)
              goto LABEL_811;
            v364 = (char *)operator new(v362);
            v365 = 0;
            *v359 = v364;
            *v585 = v364;
            v359[2] = &v364[48 * v363];
            do
            {
              v368 = (__int128 *)(v360 + v365);
              v369 = (std::string *)&v364[v365];
              if (*(char *)(v360 + v365 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v369, *(const std::string::value_type **)v368, *((_QWORD *)v368 + 1));
              }
              else
              {
                v370 = *v368;
                v369->__r_.__value_.__r.__words[2] = *((_QWORD *)v368 + 2);
                *(_OWORD *)&v369->__r_.__value_.__l.__data_ = v370;
              }
              v371 = &v364[v365];
              *((_QWORD *)v371 + 3) = 0;
              *((_QWORD *)v371 + 4) = 0;
              *((_QWORD *)v371 + 5) = 0;
              v373 = *(_BYTE **)(v360 + v365 + 24);
              v372 = *(_BYTE **)(v360 + v365 + 32);
              v374 = v372 - v373;
              if (v372 != v373)
              {
                if (v374 < 0)
                  goto LABEL_811;
                v366 = (char *)operator new(v372 - v373);
                *((_QWORD *)v371 + 3) = v366;
                *((_QWORD *)v371 + 4) = v366;
                v367 = &v366[4 * (v374 >> 2)];
                *((_QWORD *)v371 + 5) = v367;
                memcpy(v366, v373, v374);
                *((_QWORD *)v371 + 4) = v367;
              }
              v365 += 48;
            }
            while (v360 + v365 != v361);
            *v585 = &v364[v365];
            v332 = v583;
            v357 = v588;
            v356 = v591;
          }
          v375 = &v357[456 * v356];
          v375[224] = 0;
          v376 = (std::string *)(v375 + 224);
          v376[1].__r_.__value_.__s.__data_[0] = 0;
          v377 = v376 + 1;
          if (*(_BYTE *)(v332 + 248))
          {
            if (*(char *)(v332 + 247) < 0)
            {
              std::string::__init_copy_ctor_external(v376, *(const std::string::value_type **)(v332 + 224), *(_QWORD *)(v332 + 232));
              v332 = v583;
            }
            else
            {
              v378 = *(_OWORD *)(v332 + 224);
              v376->__r_.__value_.__r.__words[2] = *(_QWORD *)(v332 + 240);
              *(_OWORD *)&v376->__r_.__value_.__l.__data_ = v378;
            }
            v377->__r_.__value_.__s.__data_[0] = 1;
          }
          v404 = &v357[456 * v356];
          v405 = *(_OWORD *)(v332 + 256);
          v406 = *(_OWORD *)(v332 + 272);
          v407 = *(_OWORD *)(v332 + 288);
          v408 = v332;
          v409 = *(_QWORD *)(v332 + 304);
          *((_OWORD *)v404 + 17) = v406;
          *((_OWORD *)v404 + 18) = v407;
          *((_OWORD *)v404 + 16) = v405;
          v410 = (uint64_t *)(v404 + 320);
          *((_QWORD *)v404 + 40) = 0;
          *((_QWORD *)v404 + 41) = 0;
          *((_QWORD *)v404 + 38) = v409;
          *((_QWORD *)v404 + 39) = v404 + 320;
          v3 = *(_QWORD *)(v408 + 312);
          v411 = (_QWORD *)(v408 + 320);
          if (v3 != v408 + 320)
          {
            v412 = (uint64_t **)(v404 + 312);
            while (1)
            {
              v413 = (int *)(v3 + 32);
              v414 = v412[1];
              v415 = v410;
              if (*v412 != v410)
              {
                v416 = v412[1];
                v417 = v410;
                if (v414)
                {
                  do
                  {
                    v415 = v416;
                    v416 = (uint64_t *)v416[1];
                  }
                  while (v416);
                }
                else
                {
                  do
                  {
                    v415 = (uint64_t *)v417[2];
                    v120 = *v415 == (_QWORD)v417;
                    v417 = v415;
                  }
                  while (v120);
                }
                v418 = *v413;
                if (*((_DWORD *)v415 + 8) >= *v413)
                  break;
              }
              if (v414)
                v419 = v415;
              else
                v419 = v410;
              if (v414)
                v420 = v415 + 1;
              else
                v420 = v410;
              if (!*v420)
                goto LABEL_579;
LABEL_604:
              v436 = *(_QWORD **)(v3 + 8);
              if (v436)
              {
                do
                {
                  v437 = v436;
                  v436 = (_QWORD *)*v436;
                }
                while (v436);
              }
              else
              {
                do
                {
                  v437 = *(_QWORD **)(v3 + 16);
                  v120 = *v437 == v3;
                  v3 = (uint64_t)v437;
                }
                while (!v120);
              }
              v3 = (uint64_t)v437;
              if (v437 == v411)
                goto LABEL_616;
            }
            v420 = v410;
            v419 = v410;
            if (v414)
            {
              while (1)
              {
                while (1)
                {
                  v419 = v414;
                  v421 = *((_DWORD *)v414 + 8);
                  if (v418 >= v421)
                    break;
                  v414 = (uint64_t *)*v419;
                  v420 = v419;
                  if (!*v419)
                    goto LABEL_579;
                }
                if (v421 >= v418)
                  goto LABEL_604;
                v414 = (uint64_t *)v419[1];
                if (!v414)
                {
                  v420 = v419 + 1;
                  break;
                }
              }
            }
LABEL_579:
            v422 = operator new(0x30uLL);
            v422[2] = *(_OWORD *)v413;
            *(_QWORD *)v422 = 0;
            *((_QWORD *)v422 + 1) = 0;
            *((_QWORD *)v422 + 2) = v419;
            *v420 = (uint64_t)v422;
            v423 = (uint64_t *)**v412;
            if (v423)
            {
              *v412 = v423;
              v422 = (_OWORD *)*v420;
            }
            v424 = (_BYTE *)*v410;
            v120 = v422 == (_OWORD *)*v410;
            *((_BYTE *)v422 + 24) = v120;
            if (!v120)
            {
              do
              {
                v425 = *((_QWORD *)v422 + 2);
                if (*(_BYTE *)(v425 + 24))
                  break;
                v426 = *(_BYTE **)(v425 + 16);
                v427 = *(_QWORD *)v426;
                if (*(_QWORD *)v426 == v425)
                {
                  v430 = *((_QWORD *)v426 + 1);
                  if (!v430 || (v431 = *(unsigned __int8 *)(v430 + 24), v428 = (_BYTE *)(v430 + 24), v431))
                  {
                    if (*(_OWORD **)v425 == v422)
                    {
                      *(_BYTE *)(v425 + 24) = 1;
                      v426[24] = 0;
                      v434 = *(_QWORD *)(v425 + 8);
                      *(_QWORD *)v426 = v434;
                      if (v434)
                        goto LABEL_596;
                    }
                    else
                    {
                      v432 = *(uint64_t **)(v425 + 8);
                      v433 = *v432;
                      *(_QWORD *)(v425 + 8) = *v432;
                      if (v433)
                      {
                        *(_QWORD *)(v433 + 16) = v425;
                        v426 = *(_BYTE **)(v425 + 16);
                      }
                      v432[2] = (uint64_t)v426;
                      *(_QWORD *)(*(_QWORD *)(v425 + 16) + 8 * (**(_QWORD **)(v425 + 16) != v425)) = v432;
                      *v432 = v425;
                      *(_QWORD *)(v425 + 16) = v432;
                      v426 = (_BYTE *)v432[2];
                      v425 = *(_QWORD *)v426;
                      *((_BYTE *)v432 + 24) = 1;
                      v426[24] = 0;
                      v434 = *(_QWORD *)(v425 + 8);
                      *(_QWORD *)v426 = v434;
                      if (v434)
LABEL_596:
                        *(_QWORD *)(v434 + 16) = v426;
                    }
                    *(_QWORD *)(v425 + 16) = *((_QWORD *)v426 + 2);
                    *(_QWORD *)(*((_QWORD *)v426 + 2) + 8 * (**((_QWORD **)v426 + 2) != (_QWORD)v426)) = v425;
                    *(_QWORD *)(v425 + 8) = v426;
LABEL_602:
                    *((_QWORD *)v426 + 2) = v425;
                    break;
                  }
                }
                else if (!v427 || (v429 = *(unsigned __int8 *)(v427 + 24), v428 = (_BYTE *)(v427 + 24), v429))
                {
                  if (*(_OWORD **)v425 == v422)
                  {
                    v438 = *((_QWORD *)v422 + 1);
                    *(_QWORD *)v425 = v438;
                    if (v438)
                    {
                      *(_QWORD *)(v438 + 16) = v425;
                      v426 = *(_BYTE **)(v425 + 16);
                    }
                    *((_QWORD *)v422 + 2) = v426;
                    *(_QWORD *)(*(_QWORD *)(v425 + 16) + 8 * (**(_QWORD **)(v425 + 16) != v425)) = v422;
                    *((_QWORD *)v422 + 1) = v425;
                    *(_QWORD *)(v425 + 16) = v422;
                    v426 = (_BYTE *)*((_QWORD *)v422 + 2);
                    *((_BYTE *)v422 + 24) = 1;
                    v426[24] = 0;
                    v425 = *((_QWORD *)v426 + 1);
                    v435 = *(_OWORD **)v425;
                    *((_QWORD *)v426 + 1) = *(_QWORD *)v425;
                    if (v435)
LABEL_600:
                      *((_QWORD *)v435 + 2) = v426;
                  }
                  else
                  {
                    *(_BYTE *)(v425 + 24) = 1;
                    v426[24] = 0;
                    v425 = *((_QWORD *)v426 + 1);
                    v435 = *(_OWORD **)v425;
                    *((_QWORD *)v426 + 1) = *(_QWORD *)v425;
                    if (v435)
                      goto LABEL_600;
                  }
                  *(_QWORD *)(v425 + 16) = *((_QWORD *)v426 + 2);
                  *(_QWORD *)(*((_QWORD *)v426 + 2) + 8 * (**((_QWORD **)v426 + 2) != (_QWORD)v426)) = v425;
                  *(_QWORD *)v425 = v426;
                  goto LABEL_602;
                }
                *(_BYTE *)(v425 + 24) = 1;
                v422 = v426;
                v426[24] = v426 == v424;
                *v428 = 1;
              }
              while (v426 != v424);
            }
            v412[2] = (uint64_t *)((char *)v412[2] + 1);
            goto LABEL_604;
          }
LABEL_616:
          v439 = &v588[456 * v591];
          v440 = v583;
          *((_OWORD *)v439 + 21) = *(_OWORD *)(v583 + 336);
          v441 = *(_OWORD *)(v583 + 352);
          v442 = *(_OWORD *)(v583 + 368);
          v443 = *(_OWORD *)(v583 + 400);
          *((_OWORD *)v439 + 24) = *(_OWORD *)(v583 + 384);
          *((_OWORD *)v439 + 25) = v443;
          *((_OWORD *)v439 + 22) = v441;
          *((_OWORD *)v439 + 23) = v442;
          v439[416] = 0;
          v439[440] = 0;
          if (*(_BYTE *)(v583 + 440))
          {
            v444 = (std::string *)(v439 + 416);
            if (*(char *)(v583 + 439) < 0)
            {
              std::string::__init_copy_ctor_external(v444, *(const std::string::value_type **)(v583 + 416), *(_QWORD *)(v583 + 424));
              v440 = v583;
            }
            else
            {
              v445 = *(_OWORD *)(v583 + 416);
              *((_QWORD *)v439 + 54) = *(_QWORD *)(v583 + 432);
              *(_OWORD *)&v444->__r_.__value_.__l.__data_ = v445;
            }
            v439[440] = 1;
          }
          *(_DWORD *)&v588[456 * v591 + 448] = *(_DWORD *)(v440 + 448);
          v303 = a2;
          v446 = (char *)*((_QWORD *)a2 + 1);
          v586 = *(char **)a2;
          if (v446 != *(char **)a2)
          {
            v576 = &v588[v577];
            v578 = v331 + 456;
            while (1)
            {
              v447 = v331 - 456;
              v448 = v446 - 456;
              *(_OWORD *)v447 = *(_OWORD *)(v446 - 456);
              v449 = *(_OWORD *)(v446 - 440);
              v450 = *(_OWORD *)(v446 - 424);
              v451 = *(_OWORD *)(v446 - 392);
              *((_OWORD *)v447 + 3) = *(_OWORD *)(v446 - 408);
              *((_OWORD *)v447 + 4) = v451;
              *((_OWORD *)v447 + 1) = v449;
              *((_OWORD *)v447 + 2) = v450;
              v452 = (std::string *)(v331 - 376);
              v453 = (const std::string::value_type **)(v446 - 376);
              if (*(v446 - 353) < 0)
              {
                std::string::__init_copy_ctor_external(v452, *v453, *((_QWORD *)v446 - 46));
              }
              else
              {
                v454 = *(_OWORD *)v453;
                *((_QWORD *)v331 - 45) = *((_QWORD *)v446 - 45);
                *(_OWORD *)&v452->__r_.__value_.__l.__data_ = v454;
              }
              v455 = *((_QWORD *)v446 - 44);
              *((_QWORD *)v331 - 42) = 0;
              v456 = v331 - 336;
              *((_QWORD *)v331 - 44) = v455;
              *((_QWORD *)v331 - 43) = 0;
              *((_QWORD *)v331 - 41) = 0;
              v458 = (_BYTE *)*((_QWORD *)v446 - 43);
              v457 = (_BYTE *)*((_QWORD *)v446 - 42);
              v459 = v457 - v458;
              v589 = v446 - 456;
              v592 = v331 - 456;
              if (v457 != v458)
              {
                if (v459 < 0)
                  goto LABEL_811;
                v460 = (char *)operator new(v457 - v458);
                *((_QWORD *)v331 - 43) = v460;
                *(_QWORD *)v456 = v460;
                v461 = &v460[16 * (v459 >> 4)];
                v448 = v446 - 456;
                v447 = v331 - 456;
                *((_QWORD *)v331 - 41) = v461;
                memcpy(v460, v458, v459);
                *(_QWORD *)v456 = v461;
              }
              *((_QWORD *)v447 + 17) = 0;
              *((_QWORD *)v447 + 18) = 0;
              v462 = (char **)(v447 + 144);
              *((_QWORD *)v447 + 19) = 0;
              v463 = (char **)(v447 + 152);
              v465 = (_BYTE *)*((_QWORD *)v448 + 17);
              v464 = (_BYTE *)*((_QWORD *)v448 + 18);
              v466 = v464 - v465;
              if (v464 != v465)
              {
                if (v466 < 0)
                  goto LABEL_811;
                v467 = (char *)operator new(v464 - v465);
                *((_QWORD *)v447 + 17) = v467;
                *v462 = v467;
                v468 = &v467[16 * (v466 >> 4)];
                v448 = v446 - 456;
                v447 = v331 - 456;
                *v463 = v468;
                memcpy(v467, v465, v466);
                *v462 = v468;
              }
              *((_QWORD *)v447 + 20) = 0;
              *((_QWORD *)v447 + 21) = 0;
              v469 = (char **)(v447 + 168);
              *((_QWORD *)v447 + 22) = 0;
              v471 = (_BYTE *)*((_QWORD *)v448 + 20);
              v470 = (_BYTE *)*((_QWORD *)v448 + 21);
              v472 = v470 - v471;
              if (v470 != v471)
              {
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v472 >> 3)) > 0x492492492492492)
                  goto LABEL_811;
                v473 = (char *)operator new(v472);
                *((_QWORD *)v447 + 20) = v473;
                *v469 = v473;
                v474 = &v473[8 * (v472 >> 3)];
                *((_QWORD *)v447 + 22) = v474;
                memcpy(v473, v471, v472);
                *v469 = v474;
              }
              *((_OWORD *)v331 - 17) = *((_OWORD *)v446 - 17);
              *((_QWORD *)v331 - 31) = 0;
              *((_QWORD *)v331 - 30) = 0;
              *((_QWORD *)v331 - 32) = 0;
              v476 = *((_QWORD *)v446 - 32);
              v475 = *((_QWORD *)v446 - 31);
              v477 = v475 - v476;
              if (v475 != v476)
              {
                v478 = 0xAAAAAAAAAAAAAAABLL * (v477 >> 4);
                if (v478 > 0x555555555555555)
                  goto LABEL_811;
                v479 = (char *)operator new(v477);
                v480 = 0;
                *((_QWORD *)v331 - 32) = v479;
                *((_QWORD *)v331 - 31) = v479;
                *((_QWORD *)v331 - 30) = &v479[48 * v478];
                do
                {
                  v483 = (__int128 *)(v476 + v480);
                  v484 = (std::string *)&v479[v480];
                  if (*(char *)(v476 + v480 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v484, *(const std::string::value_type **)v483, *((_QWORD *)v483 + 1));
                  }
                  else
                  {
                    v485 = *v483;
                    v484->__r_.__value_.__r.__words[2] = *((_QWORD *)v483 + 2);
                    *(_OWORD *)&v484->__r_.__value_.__l.__data_ = v485;
                  }
                  v486 = &v479[v480];
                  *((_QWORD *)v486 + 3) = 0;
                  *((_QWORD *)v486 + 4) = 0;
                  *((_QWORD *)v486 + 5) = 0;
                  v488 = *(_BYTE **)(v476 + v480 + 24);
                  v487 = *(_BYTE **)(v476 + v480 + 32);
                  v489 = v487 - v488;
                  if (v487 != v488)
                  {
                    if (v489 < 0)
                      goto LABEL_811;
                    v481 = (char *)operator new(v487 - v488);
                    *((_QWORD *)v486 + 3) = v481;
                    *((_QWORD *)v486 + 4) = v481;
                    v482 = &v481[4 * (v489 >> 2)];
                    *((_QWORD *)v486 + 5) = v482;
                    memcpy(v481, v488, v489);
                    *((_QWORD *)v486 + 4) = v482;
                  }
                  v480 += 48;
                }
                while (v476 + v480 != v475);
                *((_QWORD *)v331 - 31) = &v479[v480];
              }
              *(v331 - 232) = 0;
              v490 = (std::string *)(v331 - 232);
              *(v331 - 208) = 0;
              if (*(v446 - 208))
              {
                if (*(v446 - 209) < 0)
                {
                  std::string::__init_copy_ctor_external(v490, *((const std::string::value_type **)v446 - 29), *((_QWORD *)v446 - 28));
                }
                else
                {
                  v491 = *(_OWORD *)(v446 - 232);
                  *((_QWORD *)v331 - 27) = *((_QWORD *)v446 - 27);
                  *(_OWORD *)&v490->__r_.__value_.__l.__data_ = v491;
                }
                *(v331 - 208) = 1;
              }
              v492 = *(_OWORD *)(v446 - 200);
              v493 = *(_OWORD *)(v446 - 184);
              v494 = *(_OWORD *)(v446 - 168);
              v495 = *((_QWORD *)v446 - 19);
              *((_QWORD *)v331 - 17) = 0;
              v496 = (void **)(v331 - 136);
              *(_OWORD *)(v331 - 184) = v493;
              *(_OWORD *)(v331 - 168) = v494;
              *(_OWORD *)(v331 - 200) = v492;
              *((_QWORD *)v331 - 16) = 0;
              *((_QWORD *)v331 - 19) = v495;
              *((_QWORD *)v331 - 18) = v331 - 136;
              v3 = *((_QWORD *)v446 - 18);
              if ((char *)v3 != v446 - 136)
                break;
LABEL_656:
              v497 = *(_OWORD *)(v446 - 104);
              v498 = *(_OWORD *)(v446 - 88);
              v499 = *(_OWORD *)(v446 - 72);
              v500 = *(_OWORD *)(v446 - 56);
              v501 = *(_OWORD *)(v446 - 120);
              *(v331 - 40) = 0;
              v502 = (std::string *)(v331 - 40);
              *(_OWORD *)(v331 - 72) = v499;
              *(_OWORD *)(v331 - 56) = v500;
              *(_OWORD *)(v331 - 104) = v497;
              *(_OWORD *)(v331 - 88) = v498;
              *(_OWORD *)(v331 - 120) = v501;
              *(v331 - 16) = 0;
              if (*(v446 - 16))
              {
                if (*(v446 - 17) < 0)
                {
                  std::string::__init_copy_ctor_external(v502, *((const std::string::value_type **)v446 - 5), *((_QWORD *)v446 - 4));
                }
                else
                {
                  v503 = *(_OWORD *)(v446 - 40);
                  *((_QWORD *)v331 - 3) = *((_QWORD *)v446 - 3);
                  *(_OWORD *)&v502->__r_.__value_.__l.__data_ = v503;
                }
                *(v331 - 16) = 1;
              }
              *((_DWORD *)v331 - 2) = *((_DWORD *)v446 - 2);
              v446 -= 456;
              v331 -= 456;
              if (v589 == v586)
              {
                v303 = a2;
                v446 = *(char **)a2;
                v530 = (void **)*((_QWORD *)a2 + 1);
                v302 = v578;
                *(_QWORD *)a2 = v592;
                *((_QWORD *)a2 + 1) = v578;
                *((_QWORD *)a2 + 2) = v576;
                if (v530 == (void **)v446)
                {
                  v304 = v579;
                  if (!v446)
                    goto LABEL_488;
                }
                else
                {
                  v304 = v579;
                  do
                    cricket::VideoSenderInfo::~VideoSenderInfo(v530 - 57);
                  while (v530 != (void **)v446);
                  v303 = a2;
                  if (!v446)
                    goto LABEL_488;
                }
LABEL_487:
                operator delete(v446);
                v303 = a2;
                goto LABEL_488;
              }
            }
            while (2)
            {
              v504 = (int *)(v3 + 32);
              v505 = *((_QWORD *)v331 - 17);
              v506 = v331 - 136;
              if (*((void ***)v331 - 18) == v496)
                goto LABEL_666;
              v507 = *((_QWORD *)v331 - 17);
              v508 = v331 - 136;
              if (v505)
              {
                do
                {
                  v506 = (char *)v507;
                  v507 = *(_QWORD *)(v507 + 8);
                }
                while (v507);
              }
              else
              {
                do
                {
                  v506 = (char *)*((_QWORD *)v508 + 2);
                  v120 = *(_QWORD *)v506 == (_QWORD)v508;
                  v508 = v506;
                }
                while (v120);
              }
              v509 = *v504;
              if (*((_DWORD *)v506 + 8) < *v504)
              {
LABEL_666:
                if (v505)
                  v510 = v506;
                else
                  v510 = v331 - 136;
                if (v505)
                  v511 = v506 + 8;
                else
                  v511 = v331 - 136;
                if (!*(_QWORD *)v511)
                {
LABEL_681:
                  v513 = operator new(0x30uLL);
                  v513[2] = *(_OWORD *)v504;
                  *(_QWORD *)v513 = 0;
                  *((_QWORD *)v513 + 1) = 0;
                  *((_QWORD *)v513 + 2) = v510;
                  *(_QWORD *)v511 = v513;
                  v514 = **((_QWORD **)v331 - 18);
                  if (v514)
                  {
                    *((_QWORD *)v331 - 18) = v514;
                    v513 = *(_OWORD **)v511;
                  }
                  v515 = *v496;
                  v120 = v513 == *v496;
                  *((_BYTE *)v513 + 24) = v120;
                  if (!v120)
                  {
                    do
                    {
                      v516 = *((_QWORD *)v513 + 2);
                      if (*(_BYTE *)(v516 + 24))
                        break;
                      v517 = *(_BYTE **)(v516 + 16);
                      v518 = *(_QWORD *)v517;
                      if (*(_QWORD *)v517 == v516)
                      {
                        v521 = *((_QWORD *)v517 + 1);
                        if (!v521 || (v522 = *(unsigned __int8 *)(v521 + 24), v519 = (_BYTE *)(v521 + 24), v522))
                        {
                          if (*(_OWORD **)v516 == v513)
                          {
                            *(_BYTE *)(v516 + 24) = 1;
                            v517[24] = 0;
                            v525 = *(_QWORD *)(v516 + 8);
                            *(_QWORD *)v517 = v525;
                            if (v525)
                              goto LABEL_698;
                          }
                          else
                          {
                            v523 = *(uint64_t **)(v516 + 8);
                            v524 = *v523;
                            *(_QWORD *)(v516 + 8) = *v523;
                            if (v524)
                            {
                              *(_QWORD *)(v524 + 16) = v516;
                              v517 = *(_BYTE **)(v516 + 16);
                            }
                            v523[2] = (uint64_t)v517;
                            *(_QWORD *)(*(_QWORD *)(v516 + 16) + 8 * (**(_QWORD **)(v516 + 16) != v516)) = v523;
                            *v523 = v516;
                            *(_QWORD *)(v516 + 16) = v523;
                            v517 = (_BYTE *)v523[2];
                            v516 = *(_QWORD *)v517;
                            *((_BYTE *)v523 + 24) = 1;
                            v517[24] = 0;
                            v525 = *(_QWORD *)(v516 + 8);
                            *(_QWORD *)v517 = v525;
                            if (v525)
LABEL_698:
                              *(_QWORD *)(v525 + 16) = v517;
                          }
                          *(_QWORD *)(v516 + 16) = *((_QWORD *)v517 + 2);
                          *(_QWORD *)(*((_QWORD *)v517 + 2) + 8 * (**((_QWORD **)v517 + 2) != (_QWORD)v517)) = v516;
                          *(_QWORD *)(v516 + 8) = v517;
LABEL_704:
                          *((_QWORD *)v517 + 2) = v516;
                          break;
                        }
                      }
                      else if (!v518 || (v520 = *(unsigned __int8 *)(v518 + 24), v519 = (_BYTE *)(v518 + 24), v520))
                      {
                        if (*(_OWORD **)v516 == v513)
                        {
                          v529 = *((_QWORD *)v513 + 1);
                          *(_QWORD *)v516 = v529;
                          if (v529)
                          {
                            *(_QWORD *)(v529 + 16) = v516;
                            v517 = *(_BYTE **)(v516 + 16);
                          }
                          *((_QWORD *)v513 + 2) = v517;
                          *(_QWORD *)(*(_QWORD *)(v516 + 16) + 8 * (**(_QWORD **)(v516 + 16) != v516)) = v513;
                          *((_QWORD *)v513 + 1) = v516;
                          *(_QWORD *)(v516 + 16) = v513;
                          v517 = (_BYTE *)*((_QWORD *)v513 + 2);
                          *((_BYTE *)v513 + 24) = 1;
                          v517[24] = 0;
                          v516 = *((_QWORD *)v517 + 1);
                          v526 = *(_OWORD **)v516;
                          *((_QWORD *)v517 + 1) = *(_QWORD *)v516;
                          if (v526)
LABEL_702:
                            *((_QWORD *)v526 + 2) = v517;
                        }
                        else
                        {
                          *(_BYTE *)(v516 + 24) = 1;
                          v517[24] = 0;
                          v516 = *((_QWORD *)v517 + 1);
                          v526 = *(_OWORD **)v516;
                          *((_QWORD *)v517 + 1) = *(_QWORD *)v516;
                          if (v526)
                            goto LABEL_702;
                        }
                        *(_QWORD *)(v516 + 16) = *((_QWORD *)v517 + 2);
                        *(_QWORD *)(*((_QWORD *)v517 + 2) + 8 * (**((_QWORD **)v517 + 2) != (_QWORD)v517)) = v516;
                        *(_QWORD *)v516 = v517;
                        goto LABEL_704;
                      }
                      *(_BYTE *)(v516 + 24) = 1;
                      v513 = v517;
                      v517[24] = v517 == (_BYTE *)v515;
                      *v519 = 1;
                    }
                    while (v517 != (_BYTE *)v515);
                  }
                  ++*((_QWORD *)v331 - 16);
                }
              }
              else
              {
                v511 = v331 - 136;
                v510 = v331 - 136;
                if (!v505)
                  goto LABEL_681;
                while (1)
                {
                  while (1)
                  {
                    v510 = (char *)v505;
                    v512 = *(_DWORD *)(v505 + 32);
                    if (v509 >= v512)
                      break;
                    v505 = *(_QWORD *)v510;
                    v511 = v510;
                    if (!*(_QWORD *)v510)
                      goto LABEL_681;
                  }
                  if (v512 >= v509)
                    break;
                  v505 = *((_QWORD *)v510 + 1);
                  if (!v505)
                  {
                    v511 = v510 + 8;
                    goto LABEL_681;
                  }
                }
              }
              v527 = *(char **)(v3 + 8);
              if (v527)
              {
                do
                {
                  v528 = v527;
                  v527 = *(char **)v527;
                }
                while (v527);
              }
              else
              {
                do
                {
                  v528 = *(char **)(v3 + 16);
                  v120 = *(_QWORD *)v528 == v3;
                  v3 = (uint64_t)v528;
                }
                while (!v120);
              }
              v3 = (uint64_t)v528;
              if (v528 == v446 - 136)
                goto LABEL_656;
              continue;
            }
          }
          *(_QWORD *)a2 = v331;
          *((_QWORD *)a2 + 1) = v331 + 456;
          *((_QWORD *)a2 + 2) = &v588[v577];
          v304 = v579;
          v302 = v331 + 456;
          if (v446)
            goto LABEL_487;
LABEL_488:
          v252 = v580;
          *((_QWORD *)v303 + 1) = v302;
          v233 = v583 + 456;
          if (v583 + 456 == v304)
            goto LABEL_793;
        }
      }
      v252 = v580;
      if (!v593)
      {
LABEL_421:
        v253 = (char *)*((_QWORD *)v252 + 1);
        if (!v253)
          goto LABEL_800;
        goto LABEL_798;
      }
LABEL_794:
      v569 = v594;
      v570 = (void *)v233;
      if (v594 != v233)
      {
        do
        {
          v571 = v233;
          cricket::VideoSenderInfo::~VideoSenderInfo((void **)(v569 - 456));
          v233 = v571;
        }
        while (v569 != v571);
        v570 = v593;
      }
      v594 = v233;
      operator delete(v570);
      v252 = v580;
      v253 = (char *)*((_QWORD *)v580 + 1);
      if (!v253)
      {
        do
        {
LABEL_800:
          v572 = (char *)*((_QWORD *)v252 + 2);
          v120 = *(_QWORD *)v572 == (_QWORD)v252;
          v252 = v572;
        }
        while (!v120);
        goto LABEL_3;
      }
      do
      {
LABEL_798:
        v572 = v253;
        v253 = *(char **)v253;
      }
      while (v253);
LABEL_3:
      v4 = v572;
    }
    while (v572 != v575);
  }
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoSendChannel::GetStats(cricket::WebRtcVideoSendChannel *this, cricket::VideoMediaSendInfo *a2)
{
  cricket::WebRtcVideoSendChannel::GetStats((cricket::WebRtcVideoSendChannel *)((char *)this - 64), a2);
  return 1;
}

void cricket::WebRtcVideoSendChannel::FillBitrateInfo(uint64_t a1, int32x2_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD **v6;
  int32x2_t v7;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD **v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  char v16;
  int32x2_t v17;
  _QWORD *v18[5];
  _QWORD **v19;
  _QWORD *v20[4];

  v2 = *(_QWORD **)(a1 + 144);
  v3 = (_QWORD *)(a1 + 152);
  if (v2 != (_QWORD *)(a1 + 152))
  {
    do
    {
      v5 = *(_QWORD *)(v2[5] + 80);
      if (v5)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v5 + 64))(&__p);
        v6 = v19;
        if (v19 != v20)
        {
          v7 = a2[2];
          do
          {
            v8 = v6[1];
            v9 = v6;
            if (v8)
            {
              do
              {
                v10 = (_QWORD **)v8;
                v8 = (_QWORD *)*v8;
              }
              while (v8);
            }
            else
            {
              do
              {
                v10 = (_QWORD **)v9[2];
                v11 = *v10 == v9;
                v9 = v10;
              }
              while (!v11);
            }
            v7 = vadd_s32(vrev64_s32(*(int32x2_t *)((char *)v6 + 68)), v7);
            v6 = v10;
          }
          while (v10 != v20);
          a2[2] = v7;
        }
        a2[1] = vadd_s32(a2[1], v17);
        std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v19, v20[0]);
        std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)v18, v18[1]);
        if (v16 && v15 < 0)
          operator delete(__p);
      }
      v12 = (_QWORD *)v2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v2[2];
          v11 = *v13 == (_QWORD)v2;
          v2 = v13;
        }
        while (!v11);
      }
      v2 = v13;
    }
    while (v13 != v3);
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::FillBitrateInfo(uint64_t a1, int32x2_t *a2)
{
  cricket::WebRtcVideoSendChannel::FillBitrateInfo(a1 - 64, a2);
}

uint64_t cricket::WebRtcVideoSendChannel::OnPacketSent(cricket::WebRtcVideoSendChannel *this, const rtc::SentPacket *a2)
{
  return (*(uint64_t (**)(_QWORD, const rtc::SentPacket *))(**((_QWORD **)this + 13) + 168))(*((_QWORD *)this + 13), a2);
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoSendChannel::OnPacketSent(cricket::WebRtcVideoSendChannel *this, const rtc::SentPacket *a2)
{
  return (*(uint64_t (**)(_QWORD, const rtc::SentPacket *))(**((_QWORD **)this + 5) + 168))(*((_QWORD *)this + 5), a2);
}

uint64_t cricket::WebRtcVideoSendChannel::OnReadyToSend(cricket::WebRtcVideoSendChannel *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 13) + 120))(*((_QWORD *)this + 13), 2, a2 ^ 1u);
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoSendChannel::OnReadyToSend(cricket::WebRtcVideoSendChannel *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 5) + 120))(*((_QWORD *)this + 5), 2, a2 ^ 1u);
}

void cricket::WebRtcVideoSendChannel::OnNetworkRouteChanged(uint64_t a1, void **__src, size_t __len, __int128 *a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  void **v10;
  void **v11;
  size_t v12;
  size_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  void *__p[2];
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  char v25;
  _QWORD v26[2];
  uint64_t (*v27)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v28)(uint64_t);

  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(unsigned int **)(a1 + 88);
  if (v8)
  {
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v19 = a1;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_17;
  if (__len <= 0x16)
  {
    HIBYTE(v21) = __len;
    v10 = __p;
    v11 = (void **)((char *)__p + __len);
    if (__p > __src)
      goto LABEL_11;
    goto LABEL_10;
  }
  v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((__len | 7) != 0x17)
    v12 = __len | 7;
  v13 = v12 + 1;
  v10 = (void **)operator new(v12 + 1);
  __p[1] = (void *)__len;
  v21 = v13 | 0x8000000000000000;
  __p[0] = v10;
  v11 = (void **)((char *)v10 + __len);
  if (v10 <= __src)
  {
LABEL_10:
    if (v11 <= __src)
      goto LABEL_11;
    __break(1u);
LABEL_17:
    abort();
  }
LABEL_11:
  if (__len)
    memmove(v10, __src, __len);
  *(_BYTE *)v11 = 0;
  v14 = a4[1];
  v22 = *a4;
  v23 = v14;
  v24 = *((_DWORD *)a4 + 8);
  v15 = operator new();
  *(_QWORD *)v15 = v19;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)__p;
  *(_QWORD *)(v15 + 24) = v21;
  __p[0] = 0;
  __p[1] = 0;
  v21 = 0;
  v16 = v23;
  *(_OWORD *)(v15 + 32) = v22;
  *(_OWORD *)(v15 + 48) = v16;
  *(_DWORD *)(v15 + 64) = v24;
  v17 = (_QWORD *)operator new();
  *v17 = v8;
  v17[1] = v15;
  v17[3] = absl::internal_any_invocable::RemoteManagerNontrivial<cricket::WebRtcVideoSendChannel::OnNetworkRouteChanged(std::string_view,rtc::NetworkRoute const&)::$_1>;
  v17[4] = absl::internal_any_invocable::RemoteInvoker<false,void,cricket::WebRtcVideoSendChannel::OnNetworkRouteChanged(std::string_view,rtc::NetworkRoute const&)::$_1 &&>;
  v26[0] = v17;
  v27 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v28 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v7 + 8))(v7, v26, &v25, &v18);
  v27(1, v26, v26);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::OnNetworkRouteChanged(uint64_t a1, void **a2, size_t a3, __int128 *a4)
{
  cricket::WebRtcVideoSendChannel::OnNetworkRouteChanged(a1 - 64, a2, a3, a4);
}

void cricket::WebRtcVideoSendChannel::SetInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16[2];
  char v17;

  *(_BYTE *)(*(_QWORD *)(a1 + 24) + 4) = a2 != 0;
  *(_QWORD *)(a1 + 48) = a2;
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(unsigned int *)(a1 + 56);
    if (!a2)
      goto LABEL_8;
  }
  else
  {
    v3 = 0;
    if (!a2)
      goto LABEL_8;
  }
  if (!(*(unsigned int (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 5, v3))
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1, 5, v3);
  }
LABEL_8:
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 184))(*(_QWORD *)(a1 + 104));
  (*(void (**)(char **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v5 + 16))(v16, v5, "WebRTC-SendBufferSizeBytes", 26);
  v15 = 0x40000;
  if (v17 < 0)
  {
    if (!v16[1])
    {
      v14 = *(_QWORD *)(a1 + 48);
      if (!v14)
        goto LABEL_21;
LABEL_20:
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 16))(v14, 0, 2);
      goto LABEL_21;
    }
    v6 = v16[0];
  }
  else
  {
    if (!v17)
      goto LABEL_19;
    v6 = (const char *)v16;
  }
  if (sscanf(v6, "%d", &v15) == 1 && v15 > 0)
  {
LABEL_19:
    v14 = *(_QWORD *)(a1 + 48);
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  v15 = 0x40000;
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
    goto LABEL_20;
LABEL_21:
  if (v17 < 0)
    operator delete(v16[0]);
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SetInterface(uint64_t a1, uint64_t a2)
{
  cricket::WebRtcVideoSendChannel::SetInterface(a1 - 64, a2);
}

void cricket::WebRtcVideoSendChannel::SetFrameEncryptor(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_QWORD *)(a1 + 152);
  v3 = a1 + 152;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v17 = *(cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream **)(v6 + 40);
    v18 = *a3;
    if (*a3)
    {
      (**(void (***)(_QWORD))v18)(*a3);
      (**(void (***)(uint64_t))v18)(v18);
    }
    v19 = *((_QWORD *)v17 + 53);
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    *((_QWORD *)v17 + 53) = v18;
    if (*((_QWORD *)v17 + 10))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        if (*((_QWORD *)v17 + 12) == *((_QWORD *)v17 + 11))
        {
          __break(1u);
          return;
        }
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
      }
      cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::RecreateWebRtcStream(v17, v20, v21, v22, v23, v24, v25, v26);
    }
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  else
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SetFrameEncryptor(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  cricket::WebRtcVideoSendChannel::SetFrameEncryptor(a1 - 64, a2, a3);
}

void cricket::WebRtcVideoSendChannel::SetEncoderSelector(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a1 + 152);
  v3 = a1 + 152;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v17 = *(cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream **)(v6 + 40);
    *((_QWORD *)v17 + 54) = a3;
    if (*((_QWORD *)v17 + 10))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        if (*((_QWORD *)v17 + 12) == *((_QWORD *)v17 + 11))
        {
          __break(1u);
          return;
        }
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
      }
      cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::RecreateWebRtcStream(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  else
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SetEncoderSelector(uint64_t a1, unsigned int a2, uint64_t a3)
{
  cricket::WebRtcVideoSendChannel::SetEncoderSelector(a1 - 64, a2, a3);
}

void cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::SetCodec(uint64_t a1, uint64_t a2)
{
  const cricket::Codec *v4;
  std::string *v5;
  char v6;
  __int128 v7;
  char v8;
  const std::string::value_type *v9;
  size_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  __int128 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL HasLntf;
  const cricket::Codec *v26;
  int v27;
  cricket::Codec *v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  _BYTE v39[208];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::CreateVideoEncoderConfig((cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)v39, (const cricket::Codec *)a1, a2);
  webrtc::VideoEncoderConfig::operator=(a1 + 744, (uint64_t)v39);
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)v39);
  v5 = (std::string *)(a1 + 208);
  if (a1 + 208 == a2 + 16)
    goto LABEL_13;
  v6 = *(_BYTE *)(a2 + 39);
  if (*(char *)(a1 + 231) < 0)
  {
    if (v6 >= 0)
      v9 = (const std::string::value_type *)(a2 + 16);
    else
      v9 = *(const std::string::value_type **)(a2 + 16);
    if (v6 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 39);
    else
      v10 = *(_QWORD *)(a2 + 24);
    std::string::__assign_no_alias<false>(v5, v9, v10);
LABEL_13:
    *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 12);
    v8 = *(_BYTE *)(a2 + 80);
    if (!v8)
      goto LABEL_27;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(a2 + 39) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v5, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24));
    *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 12);
    v8 = *(_BYTE *)(a2 + 80);
    if (!v8)
      goto LABEL_27;
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
    *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 12);
    v8 = *(_BYTE *)(a2 + 80);
    if (!v8)
      goto LABEL_27;
  }
LABEL_14:
  v11 = (unsigned __int16 *)(a2 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    v12 = *(_QWORD *)(a2 + 64);
    if (v12 < 0 || (v11 = *(unsigned __int16 **)v11, v12) && !v11)
      __break(1u);
  }
  else
  {
    v12 = *(unsigned __int8 *)(a2 + 79);
  }
  if (v12 == 3)
  {
    v13 = *v11;
    v14 = *((unsigned __int8 *)v11 + 2);
    v8 = v13 == *(unsigned __int16 *)"raw" && v14 == cricket::kPacketizationParamRaw[2];
  }
  else
  {
    v8 = 0;
  }
LABEL_27:
  *(_BYTE *)(a1 + 236) = v8;
  v17 = (__int128 *)(a2 + 216);
  v16 = *(_QWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 244) = v16;
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 228);
  if (*(_QWORD *)(a1 + 288) != *(_QWORD *)(a1 + 296))
  {
    v18 = *(_DWORD *)(a2 + 232);
    if (v18 == -1)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", (uint64_t)v4, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
    }
    else
    {
      *(_DWORD *)(a1 + 312) = v18;
    }
  }
  HasLntf = cricket::HasLntf(a2, v4);
  *(_BYTE *)(a1 + 237) = HasLntf;
  *(_BYTE *)(a1 + 384) = HasLntf;
  if (cricket::HasNack(a2, v26))
    v27 = 1000;
  else
    v27 = 0;
  *(_DWORD *)(a1 + 240) = v27;
  v28 = (cricket::Codec *)(a1 + 488);
  v29 = (_OWORD *)(a1 + 704);
  if (!*(_BYTE *)(a1 + 736))
  {
    cricket::Codec::Codec(v28, (const cricket::Codec *)a2);
    v38 = *v17;
    *(_OWORD *)(a1 + 713) = *(_OWORD *)(a2 + 225);
    *v29 = v38;
    *(_BYTE *)(a1 + 736) = 1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_39;
    goto LABEL_38;
  }
  cricket::Codec::operator=((uint64_t)v28, a2);
  v30 = *v17;
  *(_OWORD *)(a1 + 713) = *(_OWORD *)(a2 + 225);
  *v29 = v30;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
LABEL_38:
    rtc::webrtc_logging_impl::Log("\r\t", v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
LABEL_39:
  cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::RecreateWebRtcStream((cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)a1, v31, v32, v33, v34, v35, v36, v37);
}

void cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::~WebRtcVideoSendStream(cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  if (*((_QWORD *)this + 10))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 48))(*((_QWORD *)this + 7));
  webrtc::RtpParameters::~RtpParameters((void **)this + 119);
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)((char *)this + 744));
  if (*((_BYTE *)this + 736))
    cricket::Codec::~Codec((cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)((char *)this + 488));
  v2 = *((_QWORD *)this + 56);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 53);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  webrtc::RtpConfig::~RtpConfig((cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)((char *)this + 88));
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *((_QWORD *)this + 5);
    v6 = (void *)*((_QWORD *)this + 4);
    if (v5 != v4)
    {
      do
      {
        v7 = *(void **)(v5 - 24);
        if (v7)
        {
          *(_QWORD *)(v5 - 16) = v7;
          operator delete(v7);
        }
        if (*(char *)(v5 - 25) < 0)
          operator delete(*(void **)(v5 - 48));
        v5 -= 48;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v4;
    operator delete(v6);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }
}

void cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::ReconfigureEncoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, int *);
  void (*v28)(uint64_t, int *);
  __int128 v29;
  uint64_t v30;
  std::string *v31;
  uint64_t v32;
  _BYTE v33[16];
  __int128 v34;
  int v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[16];
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD v43[3];
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  int v49;
  char v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  int v68;
  char v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  _BYTE v75[144];
  uint64_t v76;
  uint64_t v77;
  int v78;
  void *__p;
  uint64_t v80;
  _BYTE v81[192];
  _OWORD v82[2];
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 736))
    {
      cricket::Codec::Codec((cricket::Codec *)&v78, (const cricket::Codec *)(a1 + 488));
      v82[0] = *(_OWORD *)(a1 + 704);
      *(_OWORD *)((char *)v82 + 9) = *(_OWORD *)(a1 + 713);
      cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::CreateVideoEncoderConfig((cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)v75, (const cricket::Codec *)a1, (uint64_t)&v78);
      cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::ConfigureVideoEncoderSettings((cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)&v56, (const cricket::Codec *)a1, (uint64_t)&v78, v10, v11, v12, v13, v14);
      v15 = v76;
      v76 = v56;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      webrtc::VideoEncoderConfig::VideoEncoderConfig((webrtc::VideoEncoderConfig *)&v56, (const webrtc::VideoEncoderConfig *)v75);
      if (v76)
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
      v76 = 0;
      v16 = *(_QWORD *)(a1 + 936);
      v17 = v77;
      webrtc::VideoEncoderConfig::operator=(a1 + 744, (uint64_t)v75);
      if (v16 == v17)
      {
        v25 = *(_QWORD *)(a1 + 80);
        v39 = v56;
        v40 = v57;
        v57 = 0uLL;
        v26 = v58;
        v58 = 0;
        v41 = v26;
        v42 = v59;
        v43[0] = v60;
        v43[1] = v61;
        if (v61)
        {
          *(_QWORD *)(v60 + 16) = v43;
          v59 = &v60;
          v60 = 0;
          v61 = 0;
        }
        else
        {
          v42 = v43;
        }
        v44 = v63;
        v45 = v64;
        v43[2] = v62;
        v46 = v65;
        v29 = v66;
        v62 = 0;
        v66 = 0uLL;
        v47 = v29;
        v48 = v67;
        v67 = 0uLL;
        v50 = v69;
        v49 = v68;
        v30 = v70;
        v70 = 0;
        v52 = v71;
        v53 = v72;
        v51 = v30;
        v54 = v73;
        v72 = 0uLL;
        v73 = 0;
        v55 = v74;
        (*(void (**)(_QWORD, uint64_t, _BYTE *))(a2 + 16))(0, a2, v33);
        v34 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
        *(_QWORD *)(a2 + 24) = 0;
        (*(void (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)v25 + 56))(v25, &v39, v33);
        ((void (*)(uint64_t, _BYTE *, _BYTE *))v34)(1, v33, v33);
        webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)&v39);
      }
      else
      {
        cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::RecreateWebRtcStream((cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)a1, v18, v19, v20, v21, v22, v23, v24);
        v28 = *(void (**)(uint64_t, int *))(a2 + 24);
        if (v28)
        {
          v35 = 0;
          v38[14] = 0;
          v37 = 0;
          memset(v38, 0, 13);
          v36 = 0;
          v28(a2, &v35);
          if ((v38[7] & 0x80000000) != 0)
            operator delete(v36);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(1, a2, a2);
          *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
          *(_QWORD *)(a2 + 24) = 0;
        }
      }
      webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)&v56);
      webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)v75);
      cricket::Codec::~Codec((cricket::Codec *)&v78);
    }
    else
    {
      v31 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc", 2247, "parameters_.codec_settings", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v32);
      cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::GetDegradationPreference((cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)v31);
    }
  }
  else
  {
    v27 = *(void (**)(uint64_t, int *))(a2 + 24);
    if (v27)
    {
      v78 = 0;
      v81[14] = 0;
      memset(v81, 0, 13);
      __p = 0;
      v80 = 0;
      v27(a2, &v78);
      if ((v81[7] & 0x80000000) != 0)
        operator delete(__p);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(1, a2, a2);
      *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
}

uint64_t cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::GetDegradationPreference(cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *this)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  uint64_t v5;
  _DWORD *p_p;
  unint64_t v7;
  void *__p;
  unint64_t v9;
  unsigned __int8 v10;

  if (!*((_BYTE *)this + 64))
    return 0;
  if (*((_BYTE *)this + 1116))
    return *((unsigned int *)this + 278);
  v3 = *((_DWORD *)this + 118);
  if (v3 == 1)
    return 1;
  if (*((_BYTE *)this + 469))
  {
    if ((v3 & 0xFFFFFFFE) == 2 || *((_BYTE *)this + 468) != 0)
      return 2;
  }
  else if ((v3 & 0xFFFFFFFE) == 2)
  {
    return 2;
  }
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 184))(*((_QWORD *)this + 7));
  result = (uint64_t)(*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v5 + 16))(&__p, v5, "WebRTC-Video-BalancedDegradation", 32);
  if ((char)v10 < 0)
  {
    v7 = v9;
    if ((v9 & 0x8000000000000000) != 0 || (p_p = __p, v9) && !__p)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    p_p = &__p;
    v7 = v10;
  }
  if (v7 >= 7)
  {
    if (*p_p ^ 0x62616E45 | *(_DWORD *)((char *)p_p + 3) ^ 0x64656C62)
      v1 = 1;
    else
      v1 = 3;
  }
  else
  {
    v1 = 1;
  }
  if ((v10 & 0x80) == 0)
    return v1;
  operator delete(__p);
  return v1;
}

void cricket::`anonymous namespace'::FallbackToDefaultScalabilityModeIfNotSupported(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  std::string *v20;
  uint64_t v21;
  _QWORD *v22;
  const void **v23;
  _QWORD *v24;
  uint64_t **v25;
  uint64_t *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string::size_type v31;
  _QWORD *v32;
  BOOL v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  std::string *v44;
  unint64_t v45;
  unint64_t v48;
  std::string *v49;
  std::string v50;
  char v51;
  uint64_t *v52;
  std::string v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (a3 != a4)
  {
    v5 = a3;
    v6 = a1;
    v7 = a3;
    while (1)
    {
      if (*(_BYTE *)(v7 + 104))
      {
        v8 = *(unsigned __int8 *)(v7 + 103);
        if ((v8 & 0x80u) != 0)
          v8 = *(_QWORD *)(v7 + 88);
        if (v8)
          break;
      }
      v7 += 272;
      if (v7 == a4)
        return;
    }
    if (*(_QWORD *)(a2 + 272))
    {
      v44 = (std::string *)(a1 + 16);
      v10 = &v53 <= (std::string *)"-" && (char *)&v53.__r_.__value_.__l.__data_ + 1 > "-";
      v43 = v10;
      v11 = (_QWORD *)(a1 + 176);
      do
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
          goto LABEL_25;
        if (*(_BYTE *)(v5 + 104))
        {
          if (*(char *)(v5 + 103) < 0)
            std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(v5 + 80), *(_QWORD *)(v5 + 88));
          else
            v53 = *(std::string *)(v5 + 80);
        }
        else
        {
          *((_BYTE *)&v53.__r_.__value_.__s + 23) = 1;
          if (v43)
            goto LABEL_75;
          LOWORD(v53.__r_.__value_.__l.__data_) = 45;
        }
        v48 = v48 & 0xFFFFFFFF00000000 | 0x1081;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v53.__r_.__value_.__l.__data_);
          v19 = *(unsigned __int8 *)(v5 + 104);
          if (!*(_BYTE *)(v5 + 124))
          {
LABEL_31:
            if (!v19)
              goto LABEL_16;
            v21 = *(_QWORD *)(a2 + 272);
            v49 = (std::string *)(v5 + 80);
            if (*(char *)(v6 + 39) < 0)
            {
LABEL_33:
              std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(v6 + 16), *(_QWORD *)(v6 + 24));
              v55 = 0;
              v56 = 0;
              v54 = &v55;
              v22 = *(_QWORD **)(v6 + 168);
              if (v22 == v11)
                goto LABEL_34;
LABEL_37:
              while (2)
              {
                v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)&v54, (uint64_t *)&v55, (uint64_t **)&v50, &v52, (uint64_t)(v22 + 4));
                if (*v23)
                {
                  v24 = (_QWORD *)v22[1];
                  if (!v24)
                    goto LABEL_50;
                  do
                  {
LABEL_48:
                    v32 = v24;
                    v24 = (_QWORD *)*v24;
                  }
                  while (v24);
                  goto LABEL_36;
                }
                v25 = (uint64_t **)v23;
                v26 = (uint64_t *)operator new(0x50uLL);
                v27 = (std::string *)(v26 + 4);
                if (*((char *)v22 + 55) < 0)
                {
                  std::string::__init_copy_ctor_external(v27, (const std::string::value_type *)v22[4], v22[5]);
                  v29 = (std::string *)(v26 + 7);
                  if (*((char *)v22 + 79) < 0)
                    goto LABEL_44;
LABEL_42:
                  v30 = *(_OWORD *)(v22 + 7);
                  v29->__r_.__value_.__r.__words[2] = v22[9];
                  *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
                }
                else
                {
                  v28 = *((_OWORD *)v22 + 2);
                  v26[6] = v22[6];
                  *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
                  v29 = (std::string *)(v26 + 7);
                  if ((*((char *)v22 + 79) & 0x80000000) == 0)
                    goto LABEL_42;
LABEL_44:
                  std::string::__init_copy_ctor_external(v29, (const std::string::value_type *)v22[7], v22[8]);
                }
                v31 = v50.__r_.__value_.__r.__words[0];
                *v26 = 0;
                v26[1] = 0;
                v26[2] = v31;
                *v25 = v26;
                if (*v54)
                {
                  v54 = (uint64_t **)*v54;
                  v26 = *v25;
                }
                std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v55, v26);
                ++v56;
                v24 = (_QWORD *)v22[1];
                if (v24)
                  goto LABEL_48;
                do
                {
LABEL_50:
                  v32 = (_QWORD *)v22[2];
                  v33 = *v32 == (_QWORD)v22;
                  v22 = v32;
                }
                while (!v33);
LABEL_36:
                v22 = v32;
                if (v32 == v11)
                  goto LABEL_34;
                continue;
              }
            }
LABEL_28:
            v53 = *v44;
            v54 = &v55;
            v55 = 0;
            v56 = 0;
            v22 = *(_QWORD **)(v6 + 168);
            if (v22 != v11)
              goto LABEL_37;
LABEL_34:
            v57 = 0;
            if (*(char *)(v5 + 103) < 0)
            {
              std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(v5 + 80), *(_QWORD *)(v5 + 88));
              v6 = a1;
              v20 = v49;
            }
            else
            {
              v20 = v49;
              v50 = *v49;
              v6 = a1;
            }
            v51 = 1;
            v34 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v21 + 16))(v21, &v53, &v50);
            if (v51 && SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v50.__r_.__value_.__l.__data_);
            if ((v57 & 1) != 0)
            {
              operator delete(__p);
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v54, (uint64_t)v55);
              if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_59;
            }
            else
            {
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v54, (uint64_t)v55);
              if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_59:
                if ((v34 & 1) != 0)
                  goto LABEL_16;
                goto LABEL_63;
              }
            }
            operator delete(v53.__r_.__value_.__l.__data_);
            if ((v34 & 1) != 0)
              goto LABEL_16;
LABEL_63:
            if (*(_BYTE *)(v5 + 104))
            {
              if (*(char *)(v5 + 103) < 0)
              {
                *(_QWORD *)(v5 + 88) = 4;
                v35 = *(char **)(v5 + 80);
              }
              else
              {
                *(_BYTE *)(v5 + 103) = 4;
                v35 = (char *)v20;
              }
              strcpy(v35, "L1T2");
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
                goto LABEL_16;
              goto LABEL_72;
            }
            goto LABEL_66;
          }
        }
        else
        {
LABEL_25:
          v19 = *(unsigned __int8 *)(v5 + 104);
          if (!*(_BYTE *)(v5 + 124))
            goto LABEL_31;
        }
        v20 = (std::string *)(v5 + 80);
        if (v19)
        {
          v21 = *(_QWORD *)(a2 + 272);
          v49 = (std::string *)(v5 + 80);
          if (*(char *)(v6 + 39) < 0)
            goto LABEL_33;
          goto LABEL_28;
        }
LABEL_66:
        *(_BYTE *)(v5 + 103) = 4;
        if (v5 + 84 > (unint64_t)"L1T2" && v20 <= (std::string *)"L1T2")
          goto LABEL_75;
        strcpy((char *)(v5 + 80), "L1T2");
        *(_BYTE *)(v5 + 104) = 1;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        {
LABEL_72:
          if (*(_BYTE *)(v5 + 104))
          {
            v45 = v45 & 0xFFFFFFFF00000000 | 0x10D9;
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v36, v37, v38, v39, v40, v41, v42, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
            goto LABEL_16;
          }
LABEL_75:
          __break(1u);
        }
LABEL_16:
        v5 += 272;
      }
      while (v5 != a4);
    }
  }
}

void cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::CreateVideoEncoderConfig(cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *this, const cricket::Codec *a2, uint64_t a3)
{
  char *v6;
  _QWORD *v7;
  _OWORD *v8;
  std::string *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t i;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  unsigned __int8 v40;
  size_t size;
  std::string *p_s2;
  uint64_t j;
  __int16 v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned __int8 *v79;
  int v80;
  char *v81;
  char v82;
  uint64_t v83;
  int v84;
  int v85;
  std::string __s2;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *__p[2];
  __int128 v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)this = 0;
  *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 5;
  if (&__s2 <= (std::string *)"Unset" && (char *)__s2.__r_.__value_.__r.__words + 5 > "Unset")
    goto LABEL_138;
  LODWORD(__s2.__r_.__value_.__l.__data_) = *(_DWORD *)"Unset";
  WORD2(__s2.__r_.__value_.__r.__words[0]) = str_11_12[4];
  *(std::string *)((char *)this + 8) = __s2;
  *((_QWORD *)this + 5) = 0;
  v6 = (char *)this + 40;
  *((_QWORD *)this + 4) = (char *)this + 40;
  v7 = (_QWORD *)((char *)this + 32);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)((char *)this + 133) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  v8 = (_OWORD *)(a3 + 16);
  *((_WORD *)this + 100) = 0;
  *(_DWORD *)this = webrtc::PayloadStringToCodecType(a3 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(&__s2, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = *v8;
    __s2.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 32);
  }
  v9 = (std::string *)((char *)this + 8);
  v88 = 0;
  v89 = 0;
  v87 = &v88;
  v10 = *(_QWORD **)(a3 + 168);
  v83 = a3;
  v11 = (_QWORD *)(a3 + 176);
  if (v10 != v11)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v87, &v88, (uint64_t)(v10 + 4), (uint64_t)(v10 + 4));
      v16 = (_QWORD *)v10[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v10[2];
          v18 = *v17 == (_QWORD)v10;
          v10 = v17;
        }
        while (!v18);
      }
      v10 = v17;
    }
    while (v17 != v11);
  }
  v90 = 0;
  if (*((char *)this + 31) < 0)
    operator delete(v9->__r_.__value_.__l.__data_);
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__s2.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 3) = *((_QWORD *)&__s2.__r_.__value_.__l + 2);
  *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 0;
  __s2.__r_.__value_.__s.__data_[0] = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 32, *((_QWORD *)this + 5));
  v12 = v88;
  *((_QWORD *)this + 4) = v87;
  *((_QWORD *)this + 5) = v12;
  v13 = v89;
  *((_QWORD *)this + 6) = v89;
  if (v13)
  {
    *(_QWORD *)(v12 + 16) = v6;
    v87 = &v88;
    v88 = 0;
    v89 = 0;
    if (v9 != &__s2)
    {
LABEL_11:
      if ((*((_BYTE *)this + 56) & 1) != 0)
        operator delete(*((void **)this + 8));
      *((_QWORD *)this + 7) = v90;
      v14 = v92;
      *((_OWORD *)this + 4) = *(_OWORD *)__p;
      *((_OWORD *)this + 5) = v14;
      *((_QWORD *)this + 12) = v93;
      v90 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    *v7 = v6;
    if (v9 != &__s2)
      goto LABEL_11;
  }
  if ((v90 & 1) != 0)
    operator delete(__p[0]);
LABEL_14:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v87, v88);
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s2.__r_.__value_.__l.__data_);
    v15 = *((unsigned __int8 *)a2 + 469);
    if (!*((_BYTE *)a2 + 469))
      goto LABEL_32;
  }
  else
  {
    v15 = *((unsigned __int8 *)a2 + 469);
    if (!*((_BYTE *)a2 + 469))
      goto LABEL_32;
  }
  v15 = *((unsigned __int8 *)a2 + 468);
  if (*((_BYTE *)a2 + 468))
  {
    v19 = *((unsigned __int8 *)a2 + 464);
    if (*((_BYTE *)a2 + 464))
      v19 = *((_DWORD *)a2 + 115);
    v15 = 1000 * v19;
    v20 = 1;
    goto LABEL_33;
  }
LABEL_32:
  v20 = 0;
LABEL_33:
  *((_DWORD *)this + 38) = v15;
  *((_DWORD *)this + 34) = v20;
  *((_QWORD *)this + 24) = (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 2;
  v21 = *((_QWORD *)a2 + 131);
  v22 = *((_QWORD *)a2 + 132);
  if (v21 != v22)
  {
    v23 = *((_QWORD *)a2 + 131);
    do
    {
      if (*(_BYTE *)(v23 + 104) && *(_BYTE *)(v23 + 72))
        goto LABEL_42;
      v23 += 272;
    }
    while (v23 != v22);
  }
  if ((*(_DWORD *)this & 0xFFFFFFFE) == 2)
    *((_QWORD *)this + 24) = 1;
LABEL_42:
  while (v21 != v22)
  {
    if (*(_BYTE *)(v21 + 124) && *(_BYTE *)(v21 + 24) && *(int *)(v21 + 20) > 0)
    {
      v24 = 1;
      goto LABEL_48;
    }
    v21 += 272;
  }
  v24 = 0;
LABEL_48:
  v25 = *((_DWORD *)a2 + 119);
  v85 = 0;
  *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 20;
  if (&__s2 <= (std::string *)"x-google-max-bitrate"
    && (char *)&__s2.__r_.__value_.__r.__words[2] + 4 > "x-google-max-bitrate")
  {
    goto LABEL_138;
  }
  strcpy((char *)&__s2, "x-google-max-bitrate");
  v27 = cricket::Codec::GetParam(v83, (const void **)&__s2.__r_.__value_.__l.__data_, &v85) ^ 1;
  if (v25 == -1)
    v28 = v27;
  else
    v28 = 1;
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s2.__r_.__value_.__l.__data_);
  v29 = v24 | v28 ? v25 : 1000 * v85;
  *((_DWORD *)this + 39) = v29;
  v30 = *((_QWORD *)a2 + 131);
  v31 = *((_QWORD *)a2 + 132) - v30;
  if (!v31)
    goto LABEL_138;
  v32 = 0xF0F0F0F0F0F0F0F1 * (v31 >> 4);
  *((_QWORD *)this + 20) = *(_QWORD *)(v30 + 8);
  v33 = *((_QWORD *)this + 21);
  v34 = *((_QWORD *)this + 22);
  v35 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 5);
  v82 = v20;
  if (v32 <= v35)
  {
    if (v32 < v35)
    {
      v34 = v33 + 96 * v32;
      *((_QWORD *)this + 22) = v34;
    }
  }
  else
  {
    std::vector<webrtc::VideoStream>::__append((void **)this + 21, v32 - v35);
    v33 = *((_QWORD *)this + 21);
    v34 = *((_QWORD *)this + 22);
  }
  if (v34 != v33)
  {
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 22) - v33) >> 5); ++i)
    {
      v37 = *((_QWORD *)a2 + 131);
      if (0xF0F0F0F0F0F0F0F1 * ((*((_QWORD *)a2 + 132) - v37) >> 4) <= i)
        goto LABEL_138;
      v38 = v37 + 272 * i;
      *(_BYTE *)(v33 + 96 * i + 82) = *(_BYTE *)(v38 + 124);
      if (*(_BYTE *)(v38 + 104))
      {
        if (*(char *)(v38 + 103) < 0)
        {
          std::string::__init_copy_ctor_external(&__s2, *(const std::string::value_type **)(v38 + 80), *(_QWORD *)(v38 + 88));
          v40 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_106:
            size = __s2.__r_.__value_.__l.__size_;
            if ((__s2.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
              goto LABEL_138;
            p_s2 = (std::string *)__s2.__r_.__value_.__r.__words[0];
            if (__s2.__r_.__value_.__l.__size_)
            {
              if (!__s2.__r_.__value_.__r.__words[0])
                goto LABEL_138;
            }
            goto LABEL_74;
          }
        }
        else
        {
          v39 = *(_OWORD *)(v38 + 80);
          __s2.__r_.__value_.__r.__words[2] = *(_QWORD *)(v38 + 96);
          *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = v39;
          v40 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_106;
        }
        size = v40;
      }
      else
      {
        size = 0;
        *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 0;
        __s2.__r_.__value_.__s.__data_[0] = 0;
      }
      p_s2 = &__s2;
LABEL_74:
      for (j = 0; j != 1632; j += 48)
      {
        {
          v45 = 1;
          v46 = *((_QWORD *)this + 21);
          if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 22) - v46) >> 5) > i)
            goto LABEL_81;
          goto LABEL_138;
        }
      }
      v44 = 0;
      v45 = 0;
      v46 = *((_QWORD *)this + 21);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 22) - v46) >> 5) <= i)
        goto LABEL_138;
LABEL_81:
      *(_WORD *)(v46 + 96 * i + 80) = v44 | (v45 << 8);
      if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s2.__r_.__value_.__l.__data_);
      v47 = *((_QWORD *)a2 + 131);
      v48 = 0xF0F0F0F0F0F0F0F1 * ((*((_QWORD *)a2 + 132) - v47) >> 4);
      if (v48 <= i)
        goto LABEL_138;
      v49 = v47 + 272 * i;
      if (!*(_BYTE *)(v49 + 32))
        goto LABEL_87;
      v50 = *((_QWORD *)this + 21);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 22) - v50) >> 5) <= i)
        goto LABEL_138;
      *(_DWORD *)(v50 + 96 * i + 20) = *(_DWORD *)(v49 + 28);
LABEL_87:
      v51 = v47 + 272 * i;
      if (*(_BYTE *)(v51 + 24))
      {
        v52 = *((_QWORD *)this + 21);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 22) - v52) >> 5) > i)
        {
          *(_DWORD *)(v52 + 96 * i + 28) = *(_DWORD *)(v51 + 20);
          goto LABEL_90;
        }
LABEL_138:
        __break(1u);
      }
LABEL_90:
      v53 = v47 + 272 * i;
      if (*(_BYTE *)(v53 + 48))
      {
        v54 = *((_QWORD *)this + 21);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 22) - v54) >> 5) <= i)
          goto LABEL_138;
        *(_DWORD *)(v54 + 96 * i + 16) = (int)*(double *)(v53 + 40);
      }
      v55 = v47 + 272 * i;
      if (*(_BYTE *)(v55 + 72))
      {
        v56 = *((_QWORD *)this + 21);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 22) - v56) >> 5) <= i)
          goto LABEL_138;
        *(_QWORD *)(v56 + 96 * i + 32) = *(_QWORD *)(v55 + 64);
      }
      v57 = v47 + 272 * i;
      if (*(_BYTE *)(v57 + 60))
      {
        v58 = *((_QWORD *)this + 21);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 22) - v58) >> 5) <= i)
          goto LABEL_138;
        v59 = (int *)(v57 + 56);
        v60 = v58 + 96 * i;
        v61 = *v59;
        if (!*(_BYTE *)(v60 + 56))
          *(_BYTE *)(v60 + 56) = 1;
        *(_QWORD *)(v60 + 48) = v61;
        v47 = *((_QWORD *)a2 + 131);
        v48 = 0xF0F0F0F0F0F0F0F1 * ((*((_QWORD *)a2 + 132) - v47) >> 4);
      }
      if (v48 <= i)
        goto LABEL_138;
      v62 = *((_QWORD *)this + 21);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 22) - v62) >> 5) <= i)
        goto LABEL_138;
      v63 = v47 + 272 * i;
      v64 = v62 + 96 * i;
      v65 = *(_QWORD *)(v63 + 112);
      *(_BYTE *)(v64 + 92) = *(_BYTE *)(v63 + 120);
      *(_QWORD *)(v64 + 84) = v65;
      v33 = *((_QWORD *)this + 21);
    }
  }
  *((_BYTE *)this + 200) = *((_BYTE *)a2 + 480);
  v66 = v82;
  if (*((_BYTE *)a2 + 1121))
    v66 = 1;
  if ((v66 & 1) != 0)
  {
    v67 = 0;
    v68 = v83;
    goto LABEL_128;
  }
  v68 = v83;
  if (*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11) == 4)
  {
    v67 = 1;
    goto LABEL_128;
  }
  v69 = *((_QWORD *)a2 + 131);
  v70 = *((_QWORD *)a2 + 132) - v69;
  if (!v70)
  {
    v67 = 0;
    goto LABEL_128;
  }
  v71 = v70 / 272;
  if (v71 <= 1)
    v71 = 1;
  if (v71 >= 2)
  {
    v74 = 0;
    v75 = 0;
    v72 = v71 & 0xFFFFFFFFFFFFFFFELL;
    v76 = v71 & 0xFFFFFFFFFFFFFFFELL;
    v77 = *((_QWORD *)a2 + 131);
    do
    {
      v74 += *(unsigned __int8 *)(v77 + 124);
      v75 += *(unsigned __int8 *)(v77 + 396);
      v77 += 544;
      v76 -= 2;
    }
    while (v76);
    v73 = v75 + v74;
    if (v71 == v72)
      goto LABEL_127;
  }
  else
  {
    v72 = 0;
    v73 = 0;
  }
  v78 = v71 - v72;
  v79 = (unsigned __int8 *)(v69 + 272 * v72 + 124);
  do
  {
    v73 += *v79;
    v79 += 272;
    --v78;
  }
  while (v78);
LABEL_127:
  v67 = v73 == 1;
LABEL_128:
  *((_BYTE *)this + 201) = v67;
  *((_BYTE *)this + 140) = 1;
  v84 = 0;
  if (*(_DWORD *)this < 4u)
  {
    v80 = 56;
LABEL_132:
    v84 = v80;
    goto LABEL_133;
  }
  if ((*(_DWORD *)this - 4) <= 1)
  {
    v80 = 51;
    goto LABEL_132;
  }
LABEL_133:
  v81 = (char *)operator new(0x20uLL);
  __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
  *(_OWORD *)&__s2.__r_.__value_.__r.__words[1] = xmmword_208F05150;
  if (v81 <= "x-google-max-quantization" && v81 + 25 > "x-google-max-quantization")
    goto LABEL_138;
  strcpy(v81, "x-google-max-quantization");
  cricket::Codec::GetParam(v68, (const void **)&__s2.__r_.__value_.__l.__data_, &v84);
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s2.__r_.__value_.__l.__data_);
  *((_DWORD *)this + 51) = v84;
}

void cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::RecreateWebRtcStream(cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  void (***v25)(_QWORD);
  uint64_t v26;
  void (***v27)(void);
  void (**v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int DegradationPreference;
  _BYTE v33[264];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int16 v38;
  __int128 v39;
  int v40;
  char v41;
  void (***v42)(_QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int16 v52;
  __int128 v53;
  int v54;
  char v55;
  void (***v56)(_QWORD);
  _BYTE v57[208];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 10))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 48))(*((_QWORD *)this + 7));
  if (!*((_BYTE *)this + 736))
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc", 2496, "parameters_.codec_settings", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v31);
  cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::ConfigureVideoEncoderSettings((cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)&v43, this, (uint64_t)this + 488, a4, a5, a6, a7, a8);
  v9 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = v43;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  webrtc::RtpConfig::RtpConfig((uint64_t)&v43, (uint64_t)this + 88);
  v10 = *((_OWORD *)this + 25);
  v50 = *((_OWORD *)this + 24);
  v51 = v10;
  v11 = *((_OWORD *)this + 23);
  v48 = *((_OWORD *)this + 22);
  v49 = v11;
  v52 = *((_WORD *)this + 208);
  v12 = (void (***)(_QWORD))*((_QWORD *)this + 53);
  *(_QWORD *)&v53 = v12;
  if (v12)
    (**v12)(v12);
  *((_QWORD *)&v53 + 1) = *((_QWORD *)this + 54);
  v54 = *((_DWORD *)this + 110);
  v55 = *((_BYTE *)this + 444);
  v13 = (void (***)(_QWORD))*((_QWORD *)this + 56);
  v56 = v13;
  if (v13)
    (**v13)(v13);
  v14 = v45;
  v15 = v46;
  if (v45 != v46 && v47 == -1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    v14 = v45;
    v46 = v45;
    v15 = v45;
  }
  if (*((_QWORD *)this + 117) == 1 && (unint64_t)(v44 - v43) >= 5)
  {
    v44 = v43 + 4;
    if ((unint64_t)(v15 - v14) >= 5)
      v46 = v14 + 4;
  }
  v23 = *((_QWORD *)this + 7);
  webrtc::RtpConfig::RtpConfig((uint64_t)v33, (uint64_t)&v43);
  v36 = v50;
  v37 = v51;
  v34 = v48;
  v35 = v49;
  v38 = v52;
  v24 = v53;
  *(_QWORD *)&v53 = 0;
  v39 = v24;
  v40 = v54;
  v41 = v55;
  v25 = v56;
  v56 = 0;
  v42 = v25;
  webrtc::VideoEncoderConfig::VideoEncoderConfig((webrtc::VideoEncoderConfig *)v57, (cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *)((char *)this + 744));
  *((_QWORD *)this + 10) = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v23 + 32))(v23, v33, v57);
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)v57);
  if (v42)
    (*v42)[1](v42);
  if ((_QWORD)v39)
    (*(void (**)(_QWORD))(*(_QWORD *)v39 + 8))(v39);
  webrtc::RtpConfig::~RtpConfig((webrtc::RtpConfig *)v33);
  v26 = *((_QWORD *)this + 111);
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  *((_QWORD *)this + 111) = 0;
  v27 = (void (***)(void))*((_QWORD *)this + 10);
  if (*((_BYTE *)this + 1120))
  {
    v28 = *v27;
  }
  else
  {
    if (!v27)
      goto LABEL_30;
    v28 = *v27 + 1;
  }
  (*v28)();
LABEL_30:
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = *((_QWORD *)this + 10);
    DegradationPreference = cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::GetDegradationPreference(this);
    (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v30 + 40))(v30, v29, &DegradationPreference);
  }
  if (v56)
    (*v56)[1](v56);
  if ((_QWORD)v53)
    (*(void (**)(_QWORD))(*(_QWORD *)v53 + 8))(v53);
  webrtc::RtpConfig::~RtpConfig((webrtc::RtpConfig *)&v43);
}

void cricket::WebRtcVideoSendChannel::GenerateSendKeyFrame(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a1 + 152);
  v3 = a1 + 152;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 80);
    if (v17)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 72))(v17, a3);
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    }
  }
  else
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::GenerateSendKeyFrame(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a1 + 88);
  v3 = a1 + 88;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 80);
    if (v17)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 72))(v17, a3);
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    }
  }
  else
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  }
}

void cricket::WebRtcVideoSendChannel::SetEncoderToPacketizerFrameTransformer(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *v15;
  uint64_t v16;
  uint64_t v17;

  v10 = *(_QWORD *)(a1 + 152);
  v8 = a1 + 152;
  v9 = v10;
  if (v10)
  {
    v11 = v8;
    do
    {
      v12 = *(_DWORD *)(v9 + 32);
      v13 = v12 >= a2;
      if (v12 >= a2)
        v14 = (uint64_t *)v9;
      else
        v14 = (uint64_t *)(v9 + 8);
      if (v13)
        v11 = v9;
      v9 = *v14;
    }
    while (*v14);
    if (v11 != v8 && *(_DWORD *)(v11 + 32) <= a2)
    {
      v15 = *(cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream **)(v11 + 40);
      v16 = *a3;
      *a3 = 0;
      v17 = *((_QWORD *)v15 + 56);
      *((_QWORD *)v15 + 56) = v16;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      if (*((_QWORD *)v15 + 10))
        cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::RecreateWebRtcStream(v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SetEncoderToPacketizerFrameTransformer(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream *v15;
  uint64_t v16;
  uint64_t v17;

  v10 = *(_QWORD *)(a1 + 88);
  v8 = a1 + 88;
  v9 = v10;
  if (v10)
  {
    v11 = v8;
    do
    {
      v12 = *(_DWORD *)(v9 + 32);
      v13 = v12 >= a2;
      if (v12 >= a2)
        v14 = (uint64_t *)v9;
      else
        v14 = (uint64_t *)(v9 + 8);
      if (v13)
        v11 = v9;
      v9 = *v14;
    }
    while (*v14);
    if (v11 != v8 && *(_DWORD *)(v11 + 32) <= a2)
    {
      v15 = *(cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream **)(v11 + 40);
      v16 = *a3;
      *a3 = 0;
      v17 = *((_QWORD *)v15 + 56);
      *((_QWORD *)v15 + 56) = v16;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      if (*((_QWORD *)v15 + 10))
        cricket::WebRtcVideoSendChannel::WebRtcVideoSendStream::RecreateWebRtcStream(v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
}

void cricket::WebRtcVideoReceiveChannel::~WebRtcVideoReceiveChannel(cricket::WebRtcVideoReceiveChannel *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  BOOL v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void *v14;
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void (**v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  *(_QWORD *)this = &off_24C0C5F78;
  *((_QWORD *)this + 8) = &unk_24C0C6088;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      v8 = *((_QWORD *)v2 + 5);
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v9 = (char *)*((_QWORD *)v2 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)*((_QWORD *)v2 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v2;
          v2 = v10;
        }
        while (!v11);
      }
      v2 = v10;
    }
    while (v10 != v3);
  }
  (*((void (**)(uint64_t, char *, char *))this + 142))(1, (char *)this + 1120, (char *)this + 1120);
  (*((void (**)(uint64_t, char *, char *))this + 138))(1, (char *)this + 1088, (char *)this + 1088);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 1064, *((_QWORD **)this + 134));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 1040, *((_QWORD **)this + 131));
  v4 = *((_QWORD *)this + 123);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  cricket::StreamParams::~StreamParams((cricket::WebRtcVideoReceiveChannel *)((char *)this + 832));
  *((_QWORD *)this + 94) = &unk_24C0B0D28;
  v5 = *((_QWORD *)this + 98);
  if (v5)
  {
    v6 = *((_QWORD *)this + 99);
    v7 = (void *)*((_QWORD *)this + 98);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 9) < 0)
          operator delete(*(void **)(v6 - 32));
        v6 -= 32;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 98);
    }
    *((_QWORD *)this + 99) = v5;
    operator delete(v7);
  }
  v12 = (void (***)(_QWORD))*((_QWORD *)this + 95);
  if (v12)
  {
    v13 = (void (***)(_QWORD))*((_QWORD *)this + 96);
    v14 = (void *)*((_QWORD *)this + 95);
    if (v13 != v12)
    {
      v15 = v13 - 27;
      v16 = v13 - 27;
      do
      {
        v17 = *v16;
        v16 -= 27;
        (*v17)(v15);
        v11 = v15 == v12;
        v15 = v16;
      }
      while (!v11);
      v14 = (void *)*((_QWORD *)this + 95);
    }
    *((_QWORD *)this + 96) = v12;
    operator delete(v14);
  }
  cricket::VideoSenderParameters::~VideoSenderParameters((void **)this + 79);
  v18 = *((_QWORD *)this + 74);
  if (v18)
  {
    v19 = *((_QWORD *)this + 75);
    v20 = (void *)*((_QWORD *)this + 74);
    if (v19 != v18)
    {
      do
      {
        if (*(char *)(v19 - 9) < 0)
          operator delete(*(void **)(v19 - 32));
        v19 -= 32;
      }
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 74);
    }
    *((_QWORD *)this + 75) = v18;
    operator delete(v20);
  }
  v21 = *((_QWORD *)this + 68);
  if (v21)
  {
    v22 = *((_QWORD *)this + 69);
    v23 = (void *)*((_QWORD *)this + 68);
    if (v22 != v21)
    {
      do
        cricket::Codec::~Codec((cricket::Codec *)(v22 - 248));
      while (v22 != v21);
      v23 = (void *)*((_QWORD *)this + 68);
    }
    *((_QWORD *)this + 69) = v21;
    operator delete(v23);
  }
  v24 = *((_QWORD *)this + 64);
  if (v24)
  {
    v25 = *((_QWORD *)this + 65);
    v26 = (void *)*((_QWORD *)this + 64);
    if (v25 != v24)
    {
      do
      {
        if (*(char *)(v25 - 9) < 0)
          operator delete(*(void **)(v25 - 32));
        v25 -= 32;
      }
      while (v25 != v24);
      v26 = (void *)*((_QWORD *)this + 64);
    }
    *((_QWORD *)this + 65) = v24;
    operator delete(v26);
  }
  v27 = *((_QWORD *)this + 61);
  if (v27)
  {
    v28 = *((_QWORD *)this + 62);
    v29 = (void *)*((_QWORD *)this + 61);
    if (v28 != v27)
    {
      do
        cricket::Codec::~Codec((cricket::Codec *)(v28 - 248));
      while (v28 != v27);
      v29 = (void *)*((_QWORD *)this + 61);
    }
    *((_QWORD *)this + 62) = v27;
    operator delete(v29);
  }
  if (*((_BYTE *)this + 480))
    cricket::Codec::~Codec((cricket::WebRtcVideoReceiveChannel *)((char *)this + 232));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 208, *((_QWORD **)this + 27));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  v30 = *((_QWORD *)this + 13);
  *(_BYTE *)(v30 + 4) = 0;
  do
  {
    v31 = __ldaxr((unsigned int *)v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, (unsigned int *)v30));
  if (!v32)
    MEMORY[0x20BD0ADEC]();
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 10));
  *(_QWORD *)this = &off_24C0B69D8;
  *((_QWORD *)this + 2) = off_24C0B6A50;
  v33 = (unsigned int *)*((_QWORD *)this + 3);
  if (v33)
  {
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      MEMORY[0x20BD0ADEC]();
  }
}

{
  cricket::WebRtcVideoReceiveChannel::~WebRtcVideoReceiveChannel(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::~WebRtcVideoReceiveChannel(cricket::WebRtcVideoReceiveChannel *this)
{
  cricket::WebRtcVideoReceiveChannel::~WebRtcVideoReceiveChannel((cricket::WebRtcVideoReceiveChannel *)((char *)this - 64));
}

{
  cricket::WebRtcVideoReceiveChannel::~WebRtcVideoReceiveChannel((cricket::WebRtcVideoReceiveChannel *)((char *)this - 64));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::WebRtcVideoReceiveChannel::SetReceiverFeedbackParameters(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  int v18;

  v8 = result;
  v9 = *(_QWORD **)(result + 72);
  v10 = (_QWORD *)(result + 80);
  if (v9 != (_QWORD *)(result + 80))
  {
    if ((a5 & 0xFF00000000) != 0)
      v11 = a5;
    else
      v11 = 1000;
    if (a3)
      v12 = v11;
    else
      v12 = 0;
    do
    {
      v13 = v9[5];
      if (*(_DWORD *)(v13 + 220) != (_DWORD)a4)
      {
        *(_DWORD *)(v13 + 220) = a4;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 160) + 96))(*(_QWORD *)(v13 + 160), a4);
        *(_DWORD *)(v13 + 416) = a4;
        v14 = *(_QWORD *)(v13 + 432);
        if (v14)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, a4);
      }
      *(_BYTE *)(v13 + 226) = a2;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 160) + 112))(*(_QWORD *)(v13 + 160), a2);
      *(_DWORD *)(v13 + 216) = v12;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 160) + 120))(*(_QWORD *)(v13 + 160), 1000 * v12);
      v15 = (_QWORD *)v9[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v9[2];
          v17 = *v16 == (_QWORD)v9;
          v9 = v16;
        }
        while (!v17);
      }
      v9 = v16;
    }
    while (v16 != v10);
  }
  *(_BYTE *)(v8 + 1010) = a2;
  if (a3)
    v18 = 1000;
  else
    v18 = 0;
  *(_DWORD *)(v8 + 1000) = v18;
  *(_DWORD *)(v8 + 1004) = a4;
  return result;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::SetReceiverFeedbackParameters(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  int v18;

  v8 = result;
  v9 = *(_QWORD **)(result + 8);
  v10 = (_QWORD *)(result + 16);
  if (v9 != (_QWORD *)(result + 16))
  {
    if ((a5 & 0xFF00000000) != 0)
      v11 = a5;
    else
      v11 = 1000;
    if (a3)
      v12 = v11;
    else
      v12 = 0;
    do
    {
      v13 = v9[5];
      if (*(_DWORD *)(v13 + 220) != (_DWORD)a4)
      {
        *(_DWORD *)(v13 + 220) = a4;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 160) + 96))(*(_QWORD *)(v13 + 160), a4);
        *(_DWORD *)(v13 + 416) = a4;
        v14 = *(_QWORD *)(v13 + 432);
        if (v14)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, a4);
      }
      *(_BYTE *)(v13 + 226) = a2;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 160) + 112))(*(_QWORD *)(v13 + 160), a2);
      *(_DWORD *)(v13 + 216) = v12;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 160) + 120))(*(_QWORD *)(v13 + 160), 1000 * v12);
      v15 = (_QWORD *)v9[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v9[2];
          v17 = *v16 == (_QWORD)v9;
          v9 = v16;
        }
        while (!v17);
      }
      v9 = v16;
    }
    while (v16 != v10);
  }
  *(_BYTE *)(v8 + 946) = a2;
  if (a3)
    v18 = 1000;
  else
    v18 = 0;
  *(_DWORD *)(v8 + 936) = v18;
  *(_DWORD *)(v8 + 940) = a4;
  return result;
}

void cricket::WebRtcVideoReceiveChannel::GetRtpReceiverParameters(cricket::WebRtcVideoReceiveChannel *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char *v4;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t i;
  webrtc::RtpCodec *v26;
  _DWORD *v27;
  void *v28[2];
  __int128 v29;
  __int128 v30;
  void *__p[2];
  __int128 v32;
  __int128 v33;
  _BYTE v34[25];
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  char v41;
  std::string v42[2];
  _BYTE v43[73];
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  char v49;
  char v50;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;

  v44 = 0;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  v48 = 256;
  memset(v42, 0, sizeof(v42));
  memset(v43, 0, sizeof(v43));
  v49 = 0;
  v50 = 0;
  v4 = (char *)*((_QWORD *)this + 10);
  if (!v4)
    goto LABEL_12;
  v6 = (char *)this + 80;
  do
  {
    v7 = *((_DWORD *)v4 + 8);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (char **)v4;
    else
      v9 = (char **)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == (char *)this + 80 || *((_DWORD *)v6 + 8) > a2)
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    *(_BYTE *)(a3 + 124) = 0;
    *(_QWORD *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 144) = 0;
    *(_QWORD *)(a3 + 128) = 0;
    *(_WORD *)(a3 + 152) = 256;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 105) = 0u;
    *(_BYTE *)(a3 + 160) = 0;
    *(_BYTE *)(a3 + 164) = 0;
LABEL_15:
    webrtc::RtpParameters::~RtpParameters((void **)&v42[0].__r_.__value_.__l.__data_);
    return;
  }
  v17 = *((_QWORD *)v6 + 5);
  v35 = 0;
  v37 = 0;
  v38 = 0;
  v36 = 0;
  v39 = 256;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  *(_OWORD *)__p = 0u;
  v32 = 0u;
  v33 = 0u;
  memset(v34, 0, sizeof(v34));
  v40 = 0;
  v41 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  cricket::StreamParams::GetPrimarySsrcs((_QWORD *)(v17 + 16), (uint64_t)&v51);
  v18 = v51;
  v19 = v52;
  if (v51 == v52)
  {
LABEL_24:
    LOBYTE(v39) = *(_DWORD *)(v17 + 220) == 2;
    if (v18)
    {
      v52 = v18;
      operator delete(v18);
    }
    webrtc::RtpParameters::operator=(v42, (std::string *)v28);
    webrtc::RtpParameters::~RtpParameters(v28);
    if (&v43[24] != (char *)this + 592)
      std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)&v43[24], *((_QWORD *)this + 74), *((_QWORD *)this + 75), (uint64_t)(*((_QWORD *)this + 75) - *((_QWORD *)this + 74)) >> 5);
    v24 = *((_QWORD *)this + 95);
    for (i = *((_QWORD *)this + 96); v24 != i; v24 += 216)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v24 + 16))(v28, v24);
      if (*(_QWORD *)&v43[8] >= *(_QWORD *)&v43[16])
      {
        v27 = std::vector<webrtc::RtpCodecParameters>::__push_back_slow_path<webrtc::RtpCodecParameters>((void **)v43, (const webrtc::RtpCodec *)v28);
      }
      else
      {
        if (!*(_QWORD *)&v43[8])
          goto LABEL_40;
        v26 = webrtc::RtpCodec::RtpCodec(*(webrtc::RtpCodec **)&v43[8], (const webrtc::RtpCodec *)v28);
        *(_QWORD *)v26 = off_24C0BCC30;
        *((_DWORD *)v26 + 26) = *(_DWORD *)&v34[8];
        v27 = (_DWORD *)((char *)v26 + 112);
      }
      *(_QWORD *)&v43[8] = v27;
      v28[0] = off_24C0BCBF0;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v33, *((uint64_t *)&v33 + 1));
      if (__p[1])
      {
        *(void **)&v32 = __p[1];
        operator delete(__p[1]);
      }
      if (SHIBYTE(v29) < 0)
        operator delete(v28[1]);
    }
    webrtc::RtpParameters::RtpParameters((std::string *)a3, (const webrtc::RtpParameters *)v42);
    goto LABEL_15;
  }
  while (1)
  {
    v20 = *v18;
    v21 = *(_QWORD *)&v34[8];
    if (*(_QWORD *)&v34[8] >= *(_QWORD *)&v34[16])
    {
      v22 = std::vector<webrtc::RtpEncodingParameters>::__emplace_back_slow_path<>((void **)v34);
    }
    else
    {
      if (!*(_QWORD *)&v34[8])
        break;
      **(_BYTE **)&v34[8] = 0;
      *(_BYTE *)(v21 + 4) = 0;
      *(_QWORD *)(v21 + 8) = 0x3FF0000000000000;
      *(_DWORD *)(v21 + 16) = 1;
      *(_BYTE *)(v21 + 20) = 0;
      *(_BYTE *)(v21 + 24) = 0;
      *(_BYTE *)(v21 + 28) = 0;
      *(_BYTE *)(v21 + 32) = 0;
      *(_BYTE *)(v21 + 40) = 0;
      *(_BYTE *)(v21 + 48) = 0;
      *(_BYTE *)(v21 + 56) = 0;
      *(_BYTE *)(v21 + 60) = 0;
      *(_BYTE *)(v21 + 64) = 0;
      *(_BYTE *)(v21 + 72) = 0;
      *(_BYTE *)(v21 + 80) = 0;
      *(_BYTE *)(v21 + 104) = 0;
      *(_BYTE *)(v21 + 112) = 0;
      *(_BYTE *)(v21 + 120) = 0;
      *(_BYTE *)(v21 + 124) = 1;
      *(_BYTE *)(v21 + 160) = 0;
      *(_BYTE *)(v21 + 264) = 0;
      *(_QWORD *)(v21 + 128) = 0;
      *(_QWORD *)(v21 + 136) = 0;
      *(_WORD *)(v21 + 152) = 0;
      *(_QWORD *)(v21 + 144) = 0;
      v22 = (char *)(v21 + 272);
    }
    *(_QWORD *)&v34[8] = v22;
    if (*(char **)v34 == v22)
      break;
    v23 = v22 - 272;
    *(_DWORD *)v23 = v20;
    v23[4] = 1;
    if (++v18 == v19)
    {
      v18 = v51;
      goto LABEL_24;
    }
  }
LABEL_40:
  __break(1u);
}

void `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::GetRtpReceiverParameters(cricket::WebRtcVideoReceiveChannel *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  cricket::WebRtcVideoReceiveChannel::GetRtpReceiverParameters((cricket::WebRtcVideoReceiveChannel *)((char *)this - 64), a2, a3);
}

void cricket::WebRtcVideoReceiveChannel::GetDefaultRtpReceiveParameters(cricket::WebRtcVideoReceiveChannel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  webrtc::RtpCodec *v6;
  webrtc::RtpCodec *v7;
  _DWORD *v8;
  _QWORD v9[3];
  char v10;
  void *__p;
  void *v12;
  uint64_t v13[3];
  int v14;

  *(_BYTE *)(a2 + 124) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_WORD *)(a2 + 152) = 256;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 105) = 0u;
  *(_BYTE *)(a2 + 160) = 0;
  *(_BYTE *)(a2 + 164) = 0;
  if (*((_QWORD *)this + 16))
  {
    *(_QWORD *)(a2 + 104) = std::vector<webrtc::RtpEncodingParameters>::__emplace_back_slow_path<>((void **)(a2 + 96));
    v4 = *((_QWORD *)this + 95);
    for (i = *((_QWORD *)this + 96); v4 != i; v4 += 216)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v4 + 16))(v9, v4);
      v6 = *(webrtc::RtpCodec **)(a2 + 56);
      if ((unint64_t)v6 >= *(_QWORD *)(a2 + 64))
      {
        v8 = std::vector<webrtc::RtpCodecParameters>::__push_back_slow_path<webrtc::RtpCodecParameters>((void **)(a2 + 48), (const webrtc::RtpCodec *)v9);
      }
      else
      {
        if (!v6)
        {
          __break(1u);
          return;
        }
        v7 = webrtc::RtpCodec::RtpCodec(v6, (const webrtc::RtpCodec *)v9);
        *(_QWORD *)v7 = off_24C0BCC30;
        *((_DWORD *)v7 + 26) = v14;
        v8 = (_DWORD *)((char *)v7 + 112);
      }
      *(_QWORD *)(a2 + 56) = v8;
      v9[0] = off_24C0BCBF0;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v13, v13[1]);
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
      if (v10 < 0)
        operator delete((void *)v9[1]);
    }
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::GetDefaultRtpReceiveParameters(cricket::WebRtcVideoReceiveChannel *this@<X0>, uint64_t a2@<X8>)
{
  cricket::WebRtcVideoReceiveChannel::GetDefaultRtpReceiveParameters((cricket::WebRtcVideoReceiveChannel *)((char *)this - 64), a2);
}

uint64_t cricket::WebRtcVideoReceiveChannel::SetReceiverParameters(cricket::WebRtcVideoReceiveChannel *this, const cricket::VideoReceiverParameters *a2)
{
  cricket::Codec *v2;
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type size;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  cricket::Codec *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  void (**v26)(uint64_t *);
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  cricket::Codec *v30;
  uint64_t v31;
  cricket::Codec *v32;
  __int128 v33;
  std::string::size_type v34;
  std::string::size_type v35;
  int64_t v36;
  cricket::WebRtcVideoReceiveChannel *v37;
  cricket::Codec *v38;
  uint64_t v39;
  cricket::Codec *v40;
  __int128 v41;
  cricket::Codec *v42;
  int v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  void (**v64)(uint64_t *);
  uint64_t v65;
  int v66;
  _BYTE *v67;
  std::string::size_type v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  __int128 v78;
  int64_t v79;
  char *v80;
  uint64_t v81;
  cricket::Codec *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  int v95;
  uint64_t *v96;
  std::string *v97;
  __int128 v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  char *v113;
  std::string::size_type v114;
  const cricket::Codec *v115;
  unsigned int v116;
  _BOOL8 HasLntf;
  const cricket::Codec *v118;
  int v119;
  const cricket::Codec *v120;
  int v121;
  int v122;
  unsigned int HasRrtr;
  int v124;
  int v125;
  std::string::size_type v126;
  std::string::size_type *p_size;
  uint64_t **v128;
  int v129;
  std::string::size_type *v130;
  uint64_t *v131;
  int *v132;
  uint64_t v133;
  std::string::size_type v134;
  __int128 v135;
  std::string::size_type v136;
  std::string::size_type v137;
  std::string *v138;
  _QWORD *v139;
  int v140;
  const cricket::Codec *v141;
  _QWORD *v142;
  std::string::size_type v143;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t **v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  _QWORD *v161;
  uint64_t **v162;
  unsigned __int8 *v163;
  unsigned __int8 *v164;
  unsigned __int8 *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  _DWORD *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  __int16 v178;
  cricket::WebRtcVideoReceiveChannel *v179;
  int v180;
  const cricket::VideoReceiverParameters *v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  std::string::size_type v186;
  _BYTE *v187;
  char *v188;
  uint64_t v189;
  _QWORD **v190;
  _QWORD *v191[2];
  void *__p;
  unsigned __int8 *v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  std::string v198;
  _DWORD *v199;
  _DWORD *v200;
  __int128 v201;
  uint64_t v202;

  v202 = *MEMORY[0x24BDAC8D0];
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0
    || (cricket::MediaChannelParameters::ToString(a2, &v198),
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc"), (SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
    if (v13)
      goto LABEL_4;
    return 0;
  }
  operator delete(v198.__r_.__value_.__l.__data_);
  if (!v43)
    return 0;
LABEL_4:
  v14 = (uint64_t *)((char *)a2 + 32);
  v15 = *((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4);
  if (v15)
    v16 = *((_QWORD *)a2 + 4);
  else
    v16 = 0;
  if (!cricket::ValidateRtpExtensions(v16, v15 >> 5))
    return 0;
  size = v198.__r_.__value_.__l.__size_;
  v18 = v198.__r_.__value_.__r.__words[0];
  v181 = a2;
  if (v198.__r_.__value_.__r.__words[0] == v198.__r_.__value_.__l.__size_)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v46, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
LABEL_44:
    v189 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v186 = 0;
    v182 = 0;
    if (!v18)
      goto LABEL_145;
    goto LABEL_45;
  }
  if (!*((_BYTE *)a2 + 56))
    goto LABEL_20;
  v19 = *((_QWORD *)this + 67);
  v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 184))(*((_QWORD *)this + 15));
  v21 = (cricket::Codec *)v18;
  do
  {
    if (!cricket::FindMatchingVideoCodec((uint64_t *)&v195, (uint64_t)v21))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        cricket::Codec::ToString(v21, (char *)&__p);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v53, v54, v55, v56, v57, v58, v59, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
        if (SHIBYTE(v194) < 0)
          operator delete(__p);
      }
      v60 = v195;
      if (v195)
      {
        v61 = v195;
        if (v196 != v195)
        {
          v62 = v196 - 27;
          v63 = v196 - 27;
          do
          {
            v64 = (void (**)(uint64_t *))*v63;
            v63 -= 27;
            (*v64)(v62);
            v77 = v62 == v60;
            v62 = v63;
          }
          while (!v77);
          v61 = v195;
          v18 = v198.__r_.__value_.__r.__words[0];
        }
        v196 = v60;
        operator delete(v61);
      }
      goto LABEL_44;
    }
    v21 = (cricket::Codec *)((char *)v21 + 248);
  }
  while (v21 != (cricket::Codec *)size);
  v22 = v195;
  if (v195)
  {
    v23 = v195;
    if (v196 != v195)
    {
      v24 = v196 - 27;
      v25 = v196 - 27;
      do
      {
        v26 = (void (**)(uint64_t *))*v25;
        v25 -= 27;
        (*v26)(v24);
        v77 = v24 == v22;
        v24 = v25;
      }
      while (!v77);
      v23 = v195;
    }
    v196 = v22;
    operator delete(v23);
  }
LABEL_20:
  v27 = *((_QWORD *)this + 68);
  v28 = *((_QWORD *)this + 69);
  v29 = v28 - v27;
  if (v28 == v27)
  {
    v30 = 0;
    v2 = 0;
    v35 = v198.__r_.__value_.__l.__size_;
    v34 = v198.__r_.__value_.__r.__words[0];
    v36 = v198.__r_.__value_.__l.__size_ - v198.__r_.__value_.__r.__words[0];
    if (v198.__r_.__value_.__l.__size_ != v198.__r_.__value_.__r.__words[0])
      goto LABEL_25;
  }
  else
  {
    if (0xEF7BDEF7BDEF7BDFLL * (v29 >> 3) > 0x108421084210842)
      goto LABEL_317;
    v30 = (cricket::Codec *)operator new(v29);
    v31 = 0;
    do
    {
      v32 = cricket::Codec::Codec((cricket::Codec *)((char *)v30 + v31), (const cricket::Codec *)(v27 + v31));
      v33 = *(_OWORD *)(v27 + v31 + 216);
      *(_OWORD *)((char *)v32 + 225) = *(_OWORD *)(v27 + v31 + 225);
      *(_OWORD *)((char *)v32 + 216) = v33;
      v31 += 248;
    }
    while (v27 + v31 != v28);
    v2 = (cricket::Codec *)((char *)v30 + v31);
    v35 = v198.__r_.__value_.__l.__size_;
    v34 = v198.__r_.__value_.__r.__words[0];
    v36 = v198.__r_.__value_.__l.__size_ - v198.__r_.__value_.__r.__words[0];
    if (v198.__r_.__value_.__l.__size_ != v198.__r_.__value_.__r.__words[0])
    {
LABEL_25:
      if (0xEF7BDEF7BDEF7BDFLL * (v36 >> 3) <= 0x108421084210842)
      {
        v37 = this;
        v38 = (cricket::Codec *)operator new(v36);
        v39 = 0;
        do
        {
          v40 = cricket::Codec::Codec((cricket::Codec *)((char *)v38 + v39), (const cricket::Codec *)(v34 + v39));
          v41 = *(_OWORD *)(v34 + v39 + 216);
          *(_OWORD *)((char *)v40 + 225) = *(_OWORD *)(v34 + v39 + 225);
          *(_OWORD *)((char *)v40 + 216) = v41;
          v39 += 248;
        }
        while (v34 + v39 != v35);
        v42 = (cricket::Codec *)((char *)v38 + v39);
        goto LABEL_53;
      }
LABEL_317:
      abort();
    }
  }
  v37 = this;
  v38 = 0;
  v42 = 0;
LABEL_53:
  v69 = 126 - 2 * __clz(0xEF7BDEF7BDEF7BDFLL * ((v42 - v38) >> 3));
  if (v42 == v38)
    v70 = 0;
  else
    v70 = v69;
  v71 = 126 - 2 * __clz(0xEF7BDEF7BDEF7BDFLL * ((v2 - v30) >> 3));
  if (v2 == v30)
    v72 = 0;
  else
    v72 = v71;
  v73 = 1;
  if (v2 - v30 == v42 - v38)
  {
    v75 = (uint64_t)v38;
    v76 = (uint64_t)v30;
    if (v30 == v2 || (v75 = (uint64_t)v38, v76 = (uint64_t)v30, v38 == v42))
    {
LABEL_75:
      v77 = (cricket::Codec *)v76 == v2 && v75 == (_QWORD)v42;
      v73 = !v77;
    }
    else
    {
      v76 = (uint64_t)v30;
      v75 = (uint64_t)v38;
      while (cricket::Codec::operator==(v76, v75)
           && *(_DWORD *)(v76 + 216) == *(_DWORD *)(v75 + 216)
           && *(_DWORD *)(v76 + 220) == *(_DWORD *)(v75 + 220)
           && *(_DWORD *)(v76 + 224) == *(_DWORD *)(v75 + 224)
           && *(_DWORD *)(v76 + 232) == *(_DWORD *)(v75 + 232))
      {
        if (*(_BYTE *)(v76 + 240) && *(_BYTE *)(v75 + 240))
        {
          if (*(_DWORD *)(v76 + 236) != *(_DWORD *)(v75 + 236))
            break;
        }
        else if ((*(_BYTE *)(v76 + 240) != 0) != (*(_BYTE *)(v75 + 240) != 0))
        {
          break;
        }
        v76 += 248;
        v75 += 248;
        if ((cricket::Codec *)v76 == v2 || (cricket::Codec *)v75 == v42)
          goto LABEL_75;
      }
      v73 = 1;
    }
  }
  this = v37;
  if (v38)
  {
    while (v42 != v38)
    {
      v42 = (cricket::Codec *)((char *)v42 - 248);
      cricket::Codec::~Codec(v42);
    }
    operator delete(v38);
  }
  if (v30)
  {
    while (v2 != v30)
    {
      v2 = (cricket::Codec *)((char *)v2 - 248);
      cricket::Codec::~Codec(v2);
    }
    operator delete(v30);
  }
  if (v73)
  {
    v78 = *(_OWORD *)&v198.__r_.__value_.__l.__data_;
    v79 = v198.__r_.__value_.__l.__size_ - v198.__r_.__value_.__r.__words[0];
    if (v198.__r_.__value_.__l.__size_ == v198.__r_.__value_.__r.__words[0])
    {
      v2 = 0;
      v80 = 0;
    }
    else
    {
      if (0xEF7BDEF7BDEF7BDFLL * (v79 >> 3) > 0x108421084210842)
        goto LABEL_317;
      v80 = (char *)operator new(v79);
      v81 = 0;
      do
      {
        v82 = cricket::Codec::Codec((cricket::Codec *)&v80[v81], (const cricket::Codec *)(v78 + v81));
        v74 = *(__n128 *)(v78 + v81 + 216);
        *(_OWORD *)((char *)v82 + 225) = *(_OWORD *)(v78 + v81 + 225);
        *(__n128 *)((char *)v82 + 216) = v74;
        v81 += 248;
      }
      while ((_QWORD)v78 + v81 != *((_QWORD *)&v78 + 1));
      v2 = (cricket::Codec *)&v80[v81];
    }
    HIDWORD(v189) = 1;
  }
  else
  {
    HIDWORD(v189) = 0;
    v80 = 0;
  }
  v83 = (*(uint64_t (**)(_QWORD, __n128))(**((_QWORD **)this + 15) + 184))(*((_QWORD *)this + 15), v74);
  cricket::FilterRtpExtensions(v14, (unsigned int (*)(const std::string::value_type *, uint64_t))webrtc::RtpExtension::IsSupportedForVideo, 0, v83, (uint64_t)&v195);
  v85 = v195;
  v84 = v196;
  v3 = (_BYTE *)*((_QWORD *)this + 74);
  v186 = (std::string::size_type)v80;
  if ((char *)v196 - (char *)v195 == *((_QWORD *)this + 75) - (_QWORD)v3)
  {
    if (v195 != v196)
    {
      v86 = v195;
      do
      {
        v87 = *((unsigned __int8 *)v86 + 23);
        if ((v87 & 0x80u) == 0)
          v88 = *((unsigned __int8 *)v86 + 23);
        else
          v88 = v86[1];
        v89 = v3[23];
        v90 = (char)v89;
        if ((v89 & 0x80u) != 0)
          v89 = *((_QWORD *)v3 + 1);
        if (v88 != v89)
          goto LABEL_122;
        if (v90 >= 0)
          v91 = v3;
        else
          v91 = *(unsigned __int8 **)v3;
        if ((v87 & 0x80) != 0)
        {
          if (memcmp((const void *)*v86, v91, v86[1]))
            goto LABEL_122;
        }
        else if (*((_BYTE *)v86 + 23))
        {
          v92 = 0;
          while (*((unsigned __int8 *)v86 + v92) == v91[v92])
          {
            if (v87 == ++v92)
              goto LABEL_118;
          }
          goto LABEL_122;
        }
LABEL_118:
        if (*((_DWORD *)v86 + 6) != *((_DWORD *)v3 + 6) || *((unsigned __int8 *)v86 + 28) != v3[28])
          goto LABEL_122;
        v86 += 4;
        v3 += 32;
      }
      while (v86 != v84);
    }
    v65 = 0;
    v67 = 0;
  }
  else
  {
LABEL_122:
    if (v84 == v85)
    {
      v3 = 0;
      v67 = 0;
    }
    else
    {
      if ((char *)v84 - (char *)v85 < 0)
        goto LABEL_317;
      v67 = operator new((char *)v84 - (char *)v85);
      v93 = 0;
      do
      {
        v96 = &v85[v93];
        v97 = (std::string *)&v67[v93 * 8];
        if (SHIBYTE(v85[v93 + 2]) < 0)
        {
          std::string::__init_copy_ctor_external(v97, (const std::string::value_type *)*v96, v96[1]);
        }
        else
        {
          v98 = *(_OWORD *)v96;
          v97->__r_.__value_.__r.__words[2] = v96[2];
          *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v98;
        }
        v94 = &v67[v93 * 8];
        v95 = v85[v93 + 3];
        v94[28] = BYTE4(v85[v93 + 3]);
        *((_DWORD *)v94 + 6) = v95;
        v93 += 4;
      }
      while (&v85[v93] != v84);
      v3 = &v67[v93 * 8];
    }
    v65 = 1;
  }
  v18 = v198.__r_.__value_.__r.__words[0];
  if (v198.__r_.__value_.__r.__words[0] == v198.__r_.__value_.__l.__size_)
  {
LABEL_163:
    __break(1u);
    goto LABEL_164;
  }
  v99 = *(_DWORD *)(v198.__r_.__value_.__r.__words[0] + 228);
  v100 = *((_DWORD *)this + 154);
  LODWORD(v189) = v99 != v100;
  if (v99 == v100)
    v101 = 0;
  else
    v101 = v99;
  v102 = v195;
  if (v195)
  {
    v103 = v196;
    v104 = v195;
    if (v196 != v195)
    {
      do
      {
        if (*((char *)v103 - 9) < 0)
          operator delete((void *)*(v103 - 4));
        v103 -= 4;
      }
      while (v103 != v102);
      v104 = v195;
    }
    v196 = v102;
    operator delete(v104);
  }
  v182 = 1;
  v66 = v65;
  v65 = v101;
  if (v18)
  {
LABEL_45:
    v68 = v198.__r_.__value_.__l.__size_;
    if (v198.__r_.__value_.__l.__size_ != v18)
    {
      do
        cricket::Codec::~Codec((cricket::Codec *)(v68 - 248));
      while (v68 != v18);
      v18 = v198.__r_.__value_.__r.__words[0];
    }
    operator delete((void *)v18);
    v18 = v186;
    if (!v182)
      goto LABEL_49;
LABEL_146:
    if ((_DWORD)v189)
      *((_DWORD *)this + 154) = v65;
    v180 = v66;
    if (!v66)
      goto LABEL_165;
    std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)this + 74, (uint64_t)v67, (uint64_t)v3, (v3 - v67) >> 5);
    v105 = *((_QWORD *)this + 74);
    v106 = *((_QWORD *)this + 75);
    memset(&v198, 0, 22);
    v107 = v106 - v105;
    if (v107)
      v108 = v105;
    else
      v108 = 0;
    if (v107)
    {
      v109 = v108 + v107;
      do
      {
        if (*(char *)(v105 + 23) < 0)
        {
          v110 = *(_QWORD *)(v105 + 8);
          if (v110 < 0)
            goto LABEL_163;
          v111 = *(_QWORD **)v105;
          if (v110 && v111 == 0)
            goto LABEL_163;
        }
        else
        {
          v110 = *(unsigned __int8 *)(v105 + 23);
          v111 = (_QWORD *)v105;
        }
        webrtc::RtpHeaderExtensionMap::RegisterByUri((webrtc::RtpHeaderExtensionMap *)&v198, *(_DWORD *)(v105 + 24), v111, v110);
        v105 += 32;
      }
      while (v105 != v109);
    }
LABEL_164:
    *(_OWORD *)((char *)this + 568) = *(_OWORD *)&v198.__r_.__value_.__l.__data_;
    *(_QWORD *)((char *)this + 582) = *(std::string::size_type *)((char *)&v198.__r_.__value_.__r.__words[1] + 6);
LABEL_165:
    if (HIDWORD(v189))
      std::vector<cricket::VideoCodecSettings>::__assign_with_size[abi:sn180100]<cricket::VideoCodecSettings*,cricket::VideoCodecSettings*>((uint64_t *)this + 68, v18, (uint64_t)v2, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)((uint64_t)v2 - v18) >> 3));
    v113 = (char *)*((_QWORD *)this + 9);
    v179 = this;
    v188 = (char *)this + 80;
    if (v113 == (char *)this + 80)
    {
LABEL_299:
      if ((cricket::WebRtcVideoReceiveChannel *)((char *)v179 + 752) != v181)
      {
        std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)v179 + 95, *((const cricket::Codec **)v181 + 1), *((const cricket::Codec **)v181 + 2), 0x84BDA12F684BDA13 * ((uint64_t)(*((_QWORD *)v181 + 2) - *((_QWORD *)v181 + 1)) >> 3));
        std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)v179 + 98, *((_QWORD *)v181 + 4), *((_QWORD *)v181 + 5), (uint64_t)(*((_QWORD *)v181 + 5) - *((_QWORD *)v181 + 4)) >> 5);
      }
      v178 = *((_WORD *)v181 + 28);
      *((_BYTE *)v179 + 810) = *((_BYTE *)v181 + 58);
      *((_WORD *)v179 + 404) = v178;
      if (!v180)
        goto LABEL_310;
LABEL_302:
      if (v67)
      {
        if (v3 != v67)
        {
          do
          {
            if ((char)*(v3 - 9) < 0)
              operator delete(*((void **)v3 - 4));
            v3 -= 32;
          }
          while (v3 != v67);
          v3 = v67;
        }
        operator delete(v3);
      }
      goto LABEL_310;
    }
    if (v2 == (cricket::Codec *)v18)
      v114 = 0;
    else
      v114 = v18;
    v184 = v114;
    v185 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)((uint64_t)v2 - v18) >> 3);
    v187 = v67;
    v183 = v65;
    while (1)
    {
      this = (cricket::WebRtcVideoReceiveChannel *)*((_QWORD *)v113 + 5);
      if (!HIDWORD(v189))
      {
        v140 = 0;
        if ((_DWORD)v189)
          goto LABEL_277;
        goto LABEL_291;
      }
      *(_OWORD *)&v198.__r_.__value_.__r.__words[1] = 0uLL;
      v198.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198.__r_.__value_.__l.__size_;
      v196 = 0;
      v197 = 0;
      v195 = (uint64_t *)&v196;
      __p = 0;
      v193 = 0;
      v194 = 0;
      if (v2 == (cricket::Codec *)v18)
        goto LABEL_163;
      v116 = *(_DWORD *)(v18 + 216);
      v115 = (const cricket::Codec *)*(unsigned int *)(v18 + 220);
      if (*(_QWORD *)((char *)this + 228) != __PAIR64__(v115, v116))
      {
        *((_DWORD *)this + 57) = v116;
        *((_DWORD *)this + 58) = (_DWORD)v115;
        (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 128))(*((_QWORD *)this + 20));
      }
      HasLntf = cricket::HasLntf(v18, v115);
      if (*((_BYTE *)this + 226) != HasLntf)
      {
        *((_BYTE *)this + 226) = HasLntf;
        (*(void (**)(_QWORD, _BOOL8))(**((_QWORD **)this + 20) + 112))(*((_QWORD *)this + 20), HasLntf);
      }
      v119 = *((_DWORD *)this + 54);
      if (cricket::HasNack(v18, v118))
        v121 = 1000;
      else
        v121 = 0;
      v122 = *((_DWORD *)this + 54);
      if (v121 == v122)
        v121 = v119;
      if (*(_BYTE *)(v18 + 240) && v121)
        v121 = *(_DWORD *)(v18 + 236);
      if (v122 == v121)
      {
        HasRrtr = cricket::HasRrtr(v18, v120);
        if (*((unsigned __int8 *)this + 224) == HasRrtr)
          goto LABEL_189;
      }
      else
      {
        *((_DWORD *)this + 54) = v121;
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 20) + 120))(*((_QWORD *)this + 20), 1000 * v121);
        HasRrtr = cricket::HasRrtr(v18, v141);
        if (*((unsigned __int8 *)this + 224) == HasRrtr)
        {
LABEL_189:
          v124 = *(_DWORD *)(v18 + 224);
          if (v124 == -1)
            goto LABEL_212;
          goto LABEL_190;
        }
      }
      *((_BYTE *)this + 224) = HasRrtr;
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 20) + 136))(*((_QWORD *)this + 20), HasRrtr);
      v124 = *(_DWORD *)(v18 + 224);
      if (v124 == -1)
      {
LABEL_212:
        if (*((_QWORD *)this + 34) != v198.__r_.__value_.__r.__words[2])
          goto LABEL_201;
        goto LABEL_213;
      }
LABEL_190:
      v125 = *(_DWORD *)(v18 + 220);
      v126 = v198.__r_.__value_.__l.__size_;
      p_size = &v198.__r_.__value_.__l.__size_;
LABEL_192:
      v128 = (uint64_t **)p_size;
      if (v126)
      {
        do
        {
          p_size = (std::string::size_type *)v126;
          v129 = *(_DWORD *)(v126 + 28);
          if (v124 < v129)
          {
            v126 = *p_size;
            goto LABEL_192;
          }
          if (v129 >= v124)
            goto LABEL_200;
          v126 = p_size[1];
        }
        while (v126);
        v128 = (uint64_t **)(p_size + 1);
      }
      v130 = p_size;
      p_size = (std::string::size_type *)operator new(0x28uLL);
      *((_DWORD *)p_size + 7) = v124;
      *((_DWORD *)p_size + 8) = 0;
      *p_size = 0;
      p_size[1] = 0;
      p_size[2] = (std::string::size_type)v130;
      *v128 = (uint64_t *)p_size;
      v131 = (uint64_t *)p_size;
      if (*(_QWORD *)v198.__r_.__value_.__l.__data_)
      {
        v198.__r_.__value_.__r.__words[0] = *(_QWORD *)v198.__r_.__value_.__l.__data_;
        v131 = *v128;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v198.__r_.__value_.__l.__size_, v131);
      ++v198.__r_.__value_.__r.__words[2];
LABEL_200:
      *((_DWORD *)p_size + 8) = v125;
      if (*((_QWORD *)this + 34) != v198.__r_.__value_.__r.__words[2])
      {
LABEL_201:
        v132 = (int *)v198.__r_.__value_.__r.__words[0];
        goto LABEL_202;
      }
LABEL_213:
      v142 = (_QWORD *)*((_QWORD *)this + 32);
      if (v142 == (_QWORD *)((char *)this + 264))
        goto LABEL_232;
      v132 = (int *)v198.__r_.__value_.__r.__words[0];
      v143 = v198.__r_.__value_.__r.__words[0];
      while (*((_DWORD *)v142 + 7) == *(_DWORD *)(v143 + 28) && *((_DWORD *)v142 + 8) == *(_DWORD *)(v143 + 32))
      {
        v145 = (_QWORD *)v142[1];
        v146 = v142;
        if (v145)
        {
          do
          {
            v142 = v145;
            v145 = (_QWORD *)*v145;
          }
          while (v145);
        }
        else
        {
          do
          {
            v142 = (_QWORD *)v146[2];
            v77 = *v142 == (_QWORD)v146;
            v146 = v142;
          }
          while (!v77);
        }
        v147 = *(_QWORD **)(v143 + 8);
        if (v147)
        {
          do
          {
            v148 = v147;
            v147 = (_QWORD *)*v147;
          }
          while (v147);
        }
        else
        {
          do
          {
            v148 = *(_QWORD **)(v143 + 16);
            v77 = *v148 == v143;
            v143 = (std::string::size_type)v148;
          }
          while (!v77);
        }
        v143 = (std::string::size_type)v148;
        if (v142 == (_QWORD *)((char *)this + 264))
          goto LABEL_232;
      }
LABEL_202:
      v133 = *((_QWORD *)this + 20);
      v191[0] = 0;
      v191[1] = 0;
      v190 = v191;
      std::map<int,int>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,int>,std::__tree_node<std::__value_type<int,int>,void *> *,long>>>((uint64_t *)&v190, v132, (int *)&v198.__r_.__value_.__r.__words[1]);
      (*(void (**)(uint64_t, _QWORD ***))(*(_QWORD *)v133 + 144))(v133, &v190);
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v190, v191[0]);
      v134 = *((_QWORD *)this + 33);
      v135 = *(_OWORD *)&v198.__r_.__value_.__l.__data_;
      v198.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 32);
      v198.__r_.__value_.__l.__size_ = v134;
      *((_OWORD *)this + 16) = v135;
      v136 = v198.__r_.__value_.__r.__words[2];
      v198.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 34);
      v137 = v198.__r_.__value_.__r.__words[2];
      *((_QWORD *)this + 34) = v136;
      v138 = (std::string *)(v134 + 16);
      if (!v137)
        v138 = &v198;
      v138->__r_.__value_.__r.__words[0] = (std::string::size_type)&v198.__r_.__value_.__l.__size_;
      if (v136)
        v139 = (_QWORD *)(*((_QWORD *)this + 33) + 16);
      else
        v139 = (_QWORD *)((char *)this + 256);
      *v139 = (char *)this + 264;
LABEL_232:
      v149 = (uint64_t **)((char *)this + 280);
      v150 = *((_QWORD *)this + 37);
      v151 = v197;
      v152 = v195;
      if (v197 == v150)
      {
        if (v195 == (uint64_t *)&v196)
        {
LABEL_255:
          v140 = 0;
          v163 = (unsigned __int8 *)__p;
          v164 = v193;
          v166 = (char *)*((_QWORD *)this + 22);
          v165 = (unsigned __int8 *)*((_QWORD *)this + 23);
          if (v193 - (_BYTE *)__p != v165 - (unsigned __int8 *)v166)
            goto LABEL_264;
          goto LABEL_256;
        }
        v153 = *v149;
        v154 = *v149;
        v155 = v195;
        while (*((_DWORD *)v155 + 7) == *((_DWORD *)v154 + 7))
        {
          v156 = (uint64_t *)v155[1];
          v157 = v155;
          if (v156)
          {
            do
            {
              v155 = v156;
              v156 = (uint64_t *)*v156;
            }
            while (v156);
          }
          else
          {
            do
            {
              v155 = (uint64_t *)v157[2];
              v77 = *v155 == (_QWORD)v157;
              v157 = v155;
            }
            while (!v77);
          }
          v158 = (uint64_t *)v154[1];
          if (v158)
          {
            do
            {
              v159 = v158;
              v158 = (uint64_t *)*v158;
            }
            while (v158);
          }
          else
          {
            do
            {
              v159 = (uint64_t *)v154[2];
              v77 = *v159 == (_QWORD)v154;
              v154 = v159;
            }
            while (!v77);
          }
          v154 = v159;
          if (v155 == (uint64_t *)&v196)
            goto LABEL_255;
        }
      }
      else
      {
        v153 = *v149;
      }
      v160 = v196;
      v161 = (_QWORD *)*((_QWORD *)this + 36);
      v195 = v153;
      v196 = v161;
      *((_QWORD *)this + 35) = v152;
      *((_QWORD *)this + 36) = v160;
      v197 = v150;
      *((_QWORD *)this + 37) = v151;
      v77 = v150 == 0;
      v162 = &v195;
      if (!v77)
        v162 = (uint64_t **)(v161 + 2);
      *v162 = (uint64_t *)&v196;
      if (v151)
        v149 = (uint64_t **)(*((_QWORD *)this + 36) + 16);
      *v149 = (uint64_t *)((char *)this + 288);
      v140 = 1;
      v163 = (unsigned __int8 *)__p;
      v164 = v193;
      v166 = (char *)*((_QWORD *)this + 22);
      v165 = (unsigned __int8 *)*((_QWORD *)this + 23);
      if (v193 - (_BYTE *)__p != v165 - (unsigned __int8 *)v166)
      {
LABEL_264:
        v65 = v183;
        __p = v166;
        v193 = v165;
        *((_QWORD *)this + 22) = v163;
        *((_QWORD *)this + 23) = v164;
        v168 = v194;
        v194 = *((_QWORD *)this + 24);
        *((_QWORD *)this + 24) = v168;
        v140 = 1;
        v164 = v165;
        v163 = (unsigned __int8 *)v166;
        v18 = v186;
        if (!v163)
          goto LABEL_276;
        goto LABEL_267;
      }
LABEL_256:
      if (v163 == v164)
      {
        v163 = v164;
        v65 = v183;
        v18 = v186;
        if (!v164)
          goto LABEL_276;
LABEL_267:
        if (v164 != v163)
        {
          do
          {
            while (1)
            {
              if ((*(v164 - 56) & 1) != 0)
                operator delete(*((void **)v164 - 6));
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v164 - 80), *((_QWORD *)v164 - 9));
              if ((char)*(v164 - 81) < 0)
                break;
              v164 -= 104;
              if (v164 == v163)
                goto LABEL_274;
            }
            operator delete(*((void **)v164 - 13));
            v164 -= 104;
          }
          while (v164 != v163);
LABEL_274:
          v164 = (unsigned __int8 *)__p;
        }
        v193 = v163;
        operator delete(v164);
        goto LABEL_276;
      }
      v167 = 0;
      do
      {
        if (*(_DWORD *)&v163[v167 + 96] != *(_DWORD *)&v166[v167 + 96]
          || !webrtc::operator==(&v163[v167], (unsigned __int8 *)&v166[v167]))
        {
          v166 = (char *)*((_QWORD *)this + 22);
          v165 = (unsigned __int8 *)*((_QWORD *)this + 23);
          goto LABEL_264;
        }
        v167 += 104;
      }
      while (&v163[v167] != v164);
      v65 = v183;
      v18 = v186;
      if (v163)
        goto LABEL_267;
LABEL_276:
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v195, v196);
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v198, (_QWORD *)v198.__r_.__value_.__l.__size_);
      if ((_DWORD)v189)
      {
LABEL_277:
        v169 = *((_QWORD *)this + 54);
        if (v169)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v169 + 40))(v169) != (_DWORD)v65)
          {
            *((_DWORD *)this + 94) = v65;
            (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 54) + 32))(*((_QWORD *)this + 54), v65);
            if ((_DWORD)v65 == -1)
            {
              (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 20) + 104))(*((_QWORD *)this + 20), 0);
              (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1), *((_QWORD *)this + 54));
              *((_QWORD *)this + 54) = 0;
            }
          }
        }
        else
        {
          v170 = (_DWORD *)((char *)this + 376);
          if ((_DWORD)v65 == -1)
          {
            *v170 = -1;
          }
          else
          {
            *v170 = v65;
            if ((v65 & 0x80000000) == 0)
            {
              if (*((_DWORD *)this + 95))
              {
                v172 = (char *)*((_QWORD *)this + 49);
                v171 = (char *)*((_QWORD *)this + 50);
                if (v171 - v172 == 4)
                {
                  v173 = *((_QWORD *)this + 1);
                  v198.__r_.__value_.__r.__words[0] = *(_QWORD *)v170;
                  LODWORD(v198.__r_.__value_.__r.__words[1]) = *((_DWORD *)this + 96);
                  v199 = 0;
                  v200 = 0;
                  v198.__r_.__value_.__r.__words[2] = 0;
                  if (v171 != v172)
                  {
                    v174 = operator new(4uLL);
                    v198.__r_.__value_.__r.__words[2] = (std::string::size_type)v174;
                    v200 = v174 + 1;
                    *v174 = *(_DWORD *)v172;
                    v199 = v174 + 1;
                  }
                  v201 = *((_OWORD *)this + 26);
                  v175 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v173 + 72))(v173, &v198);
                  *((_QWORD *)this + 54) = v175;
                  if (v198.__r_.__value_.__r.__words[2])
                  {
                    v199 = (_DWORD *)v198.__r_.__value_.__r.__words[2];
                    operator delete((void *)v198.__r_.__value_.__r.__words[2]);
                    v175 = *((_QWORD *)this + 54);
                  }
                  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 20) + 104))(*((_QWORD *)this + 20), v175);
                }
              }
            }
          }
        }
      }
LABEL_291:
      if (v140)
        cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream::RecreateReceiveStream(this);
      v176 = (char *)*((_QWORD *)v113 + 1);
      if (v176)
      {
        do
        {
          v177 = v176;
          v176 = *(char **)v176;
        }
        while (v176);
      }
      else
      {
        do
        {
          v177 = (char *)*((_QWORD *)v113 + 2);
          v77 = *(_QWORD *)v177 == (_QWORD)v113;
          v113 = v177;
        }
        while (!v77);
      }
      v113 = v177;
      v67 = v187;
      if (v177 == v188)
        goto LABEL_299;
    }
  }
LABEL_145:
  v18 = v186;
  if (v182)
    goto LABEL_146;
LABEL_49:
  if (v66)
    goto LABEL_302;
LABEL_310:
  if (!HIDWORD(v189) || !v18)
    return v182;
  if (v2 != (cricket::Codec *)v18)
  {
    do
    {
      v2 = (cricket::Codec *)((char *)v2 - 248);
      cricket::Codec::~Codec(v2);
    }
    while (v2 != (cricket::Codec *)v18);
    v2 = (cricket::Codec *)v18;
  }
  v44 = v182;
  operator delete(v2);
  return v44;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::SetReceiverParameters(cricket::WebRtcVideoReceiveChannel *this, const cricket::VideoReceiverParameters *a2)
{
  return cricket::WebRtcVideoReceiveChannel::SetReceiverParameters((cricket::WebRtcVideoReceiveChannel *)((char *)this - 64), a2);
}

uint64_t cricket::WebRtcVideoReceiveChannel::ChooseReceiverReportSsrc(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  _QWORD *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v2 = a2[1];
  if (!v2)
    goto LABEL_39;
  v3 = *(_DWORD *)(result + 112);
  v4 = a2 + 1;
  do
  {
    v5 = *(_DWORD *)(v2 + 28);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = (_QWORD *)v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a2 + 1 || v3 < *((_DWORD *)v4 + 7))
  {
LABEL_39:
    if (a2[2])
    {
      v8 = *(unsigned int *)(*a2 + 28);
      if (*(_DWORD *)(result + 112) != (_DWORD)v8)
      {
        *(_DWORD *)(result + 112) = v8;
        v9 = *(_QWORD **)(result + 72);
        v10 = (_QWORD *)(result + 80);
        if (v9 != (_QWORD *)(result + 80))
        {
          do
          {
            v11 = v9[5];
            *(_DWORD *)(v11 + 212) = v8;
            result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v11 + 8) + 144))(*(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 160), v8);
            v12 = *(_QWORD *)(v11 + 432);
            if (v12)
              result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 8) + 152))(*(_QWORD *)(v11 + 8), v12, v8);
            v13 = (_QWORD *)v9[1];
            if (v13)
            {
              do
              {
                v14 = v13;
                v13 = (_QWORD *)*v13;
              }
              while (v13);
            }
            else
            {
              do
              {
                v14 = (_QWORD *)v9[2];
                v15 = *v14 == (_QWORD)v9;
                v9 = v14;
              }
              while (!v15);
            }
            v9 = v14;
          }
          while (v14 != v10);
        }
      }
    }
    else if (*(_DWORD *)(result + 112) != 1)
    {
      *(_DWORD *)(result + 112) = 1;
      v16 = *(_QWORD **)(result + 72);
      v17 = (_QWORD *)(result + 80);
      if (v16 != (_QWORD *)(result + 80))
      {
        do
        {
          v18 = v16[5];
          *(_DWORD *)(v18 + 212) = 1;
          result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v18 + 8) + 144))(*(_QWORD *)(v18 + 8), *(_QWORD *)(v18 + 160), 1);
          v19 = *(_QWORD *)(v18 + 432);
          if (v19)
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 8) + 152))(*(_QWORD *)(v18 + 8), v19, 1);
          v20 = (_QWORD *)v16[1];
          if (v20)
          {
            do
            {
              v21 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v21 = (_QWORD *)v16[2];
              v15 = *v21 == (_QWORD)v16;
              v16 = v21;
            }
            while (!v15);
          }
          v16 = v21;
        }
        while (v21 != v17);
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::ChooseReceiverReportSsrc(uint64_t a1, _QWORD *a2)
{
  return cricket::WebRtcVideoReceiveChannel::ChooseReceiverReportSsrc(a1 - 64, a2);
}

void cricket::WebRtcVideoReceiveChannel::SetReceive(cricket::WebRtcVideoReceiveChannel *this, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  char *v19;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  v11 = (char *)*((_QWORD *)this + 9);
  v12 = (char *)this + 80;
  if (v11 != (char *)this + 80)
  {
    if ((a2 & 1) != 0)
    {
      do
      {
        v17 = *((_QWORD *)v11 + 5);
        *(_BYTE *)(v17 + 528) = 1;
        (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 160) + 16))(*(_QWORD *)(v17 + 160));
        v18 = (char *)*((_QWORD *)v11 + 1);
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = *(char **)v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (char *)*((_QWORD *)v11 + 2);
            v16 = *(_QWORD *)v19 == (_QWORD)v11;
            v11 = v19;
          }
          while (!v16);
        }
        v11 = v19;
      }
      while (v19 != v12);
    }
    else
    {
      do
      {
        v13 = *((_QWORD *)v11 + 5);
        *(_BYTE *)(v13 + 528) = 0;
        (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 160) + 24))(*(_QWORD *)(v13 + 160));
        cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream::RecreateReceiveStream((cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream *)v13);
        v14 = (char *)*((_QWORD *)v11 + 1);
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = *(char **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (char *)*((_QWORD *)v11 + 2);
            v16 = *(_QWORD *)v15 == (_QWORD)v11;
            v11 = v15;
          }
          while (!v16);
        }
        v11 = v15;
      }
      while (v15 != v12);
    }
  }
  *((_BYTE *)this + 116) = a2;
}

void `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::SetReceive(cricket::WebRtcVideoReceiveChannel *this, char a2)
{
  cricket::WebRtcVideoReceiveChannel::SetReceive((cricket::WebRtcVideoReceiveChannel *)((char *)this - 64), a2);
}

void cricket::WebRtcVideoReceiveChannel::DeleteReceiveStream(_QWORD *a1, _QWORD *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  uint64_t *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t *v16;
  BOOL v17;

  v3 = (unsigned int *)a2[5];
  v4 = (unsigned int *)a2[6];
  if (v3 == v4 || (v7 = (uint64_t **)(a1 + 27), (v6 = (uint64_t *)a1[27]) == 0))
  {
LABEL_25:
    (*(void (**)(_QWORD *))(*a2 + 8))(a2);
    return;
  }
LABEL_3:
  v8 = *v3;
  v9 = v7;
  v10 = v6;
  do
  {
    v11 = *((_DWORD *)v10 + 7);
    v12 = v11 >= v8;
    if (v11 >= v8)
      v13 = (uint64_t **)v10;
    else
      v13 = (uint64_t **)(v10 + 1);
    if (v12)
      v9 = (uint64_t **)v10;
    v10 = *v13;
  }
  while (*v13);
  if (v9 != v7 && v8 >= *((_DWORD *)v9 + 7))
  {
    v14 = v9[1];
    v15 = v9;
    if (v14)
    {
      do
      {
        v16 = v14;
        v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v16 = v15[2];
        v17 = *v16 == (_QWORD)v15;
        v15 = (uint64_t **)v16;
      }
      while (!v17);
    }
    if ((uint64_t **)a1[26] == v9)
      a1[26] = v16;
    --a1[28];
    std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v6, (uint64_t *)v9);
    operator delete(v9);
  }
  while (++v3 != v4)
  {
    v6 = *v7;
    if (*v7)
      goto LABEL_3;
  }
  if (a2)
    goto LABEL_25;
}

uint64_t cricket::WebRtcVideoReceiveChannel::AddRecvStream(cricket::WebRtcVideoReceiveChannel *this, std::string *a2)
{
  return cricket::WebRtcVideoReceiveChannel::AddRecvStream(this, a2, 0);
}

uint64_t cricket::WebRtcVideoReceiveChannel::AddRecvStream(cricket::WebRtcVideoReceiveChannel *this, std::string *a2, char a3)
{
  const cricket::StreamParams *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unsigned int *size;
  unsigned int *data;
  char *v17;
  char *v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  BOOL v22;
  char **v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t **v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t **v33;
  char *v34;
  unsigned int v35;
  BOOL v36;
  char **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t **v48;
  uint64_t **v49;
  unsigned int v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  std::string::pointer v58;
  std::string::size_type v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  unint64_t v64;
  BOOL v65;
  int v66;
  uint64_t v67;
  pthread_mutexattr_t *p_s2;
  unint64_t v69;
  BOOL v70;
  std::string::pointer v71;
  std::string::size_type v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  unint64_t v77;
  BOOL v78;
  int v79;
  std::string::size_type v80;
  std::string::pointer v81;
  int64_t v82;
  char **v83;
  unint64_t v84;
  char *v85;
  std::string *v86;
  __int128 v87;
  uint64_t v88;
  std::string::pointer v89;
  std::string::size_type v90;
  int64_t v91;
  unint64_t v92;
  char *v93;
  std::string *v94;
  __int128 v95;
  uint64_t v96;
  char v97;
  const std::string::value_type *v98;
  size_t v99;
  uint64_t v100;
  void (***v101)(_QWORD);
  uint64_t v102;
  uint64_t v103;
  void (***v104)(_QWORD);
  __int128 v105;
  uint64_t **v106;
  int *v107;
  __int128 v108;
  void (***v109)(_QWORD);
  int64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  const cricket::Codec *v115;
  uint64_t v116;
  const cricket::Codec *v117;
  _BOOL4 HasNack;
  const cricket::Codec *v119;
  int v120;
  int v121;
  int v122;
  uint64_t *v123;
  uint64_t **v124;
  int v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  unsigned int *v129;
  unsigned int v130;
  _DWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  unsigned int v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t *v137;
  int v138;
  int v139;
  char *v140;
  int v141;
  char *v142;
  int v143;
  uint64_t **v144;
  char *__src;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  int *v152;
  _QWORD v153[2];
  int *v154;
  _QWORD v155[2];
  _BYTE v156[21];
  __int128 v157;
  __int128 v158;
  int v159;
  char v160;
  void (***v161)(_QWORD);
  void *__p[2];
  __int128 v163;
  _BYTE v164[40];
  uint64_t v165;
  int *v166;
  _QWORD v167[2];
  int *v168;
  _QWORD v169[2];
  _BYTE v170[21];
  __int128 v171;
  __int128 v172;
  int v173;
  char v174;
  void (***v175)(_QWORD);
  pthread_mutexattr_t __s2;
  char v177;
  uint64_t v178;

  v178 = *MEMORY[0x24BDAC8D0];
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0
    || (cricket::StreamParams::ToString((cricket::StreamParams *)a2, (char *)__p),
        rtc::webrtc_logging_impl::Log("\r\t\t\t\n", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc"), (SBYTE7(v163) & 0x80000000) == 0))
  {
    if (a2[1].__r_.__value_.__r.__words[0] != a2[1].__r_.__value_.__l.__size_)
      goto LABEL_4;
LABEL_31:
    cricket::StreamParams::operator=((std::string *)((char *)this + 832), a2);
    return 1;
  }
  operator delete(__p[0]);
  if (a2[1].__r_.__value_.__r.__words[0] == a2[1].__r_.__value_.__l.__size_)
    goto LABEL_31;
LABEL_4:
  if (!(_DWORD)result)
    return result;
  data = (unsigned int *)a2[1].__r_.__value_.__l.__data_;
  size = (unsigned int *)a2[1].__r_.__value_.__l.__size_;
  if (data == size)
  {
    size = (unsigned int *)a2[1].__r_.__value_.__l.__data_;
  }
  else
  {
    v18 = (char *)this + 80;
    v17 = (char *)*((_QWORD *)this + 10);
    if (v17)
    {
LABEL_7:
      v19 = *data;
      v20 = (char *)this + 80;
      do
      {
        v21 = *((_DWORD *)v17 + 8);
        v22 = v21 >= v19;
        if (v21 >= v19)
          v23 = (char **)v17;
        else
          v23 = (char **)(v17 + 8);
        if (v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 != v18 && v19 >= *((_DWORD *)v20 + 8))
      {
        if ((a3 & 1) == 0)
        {
          v24 = *((_QWORD *)v20 + 5);
          if (*(_BYTE *)(v24 + 168))
          {
            cricket::WebRtcVideoReceiveChannel::DeleteReceiveStream(this, (_QWORD *)v24);
            v25 = (char *)*((_QWORD *)v20 + 1);
            v26 = v20;
            if (v25)
            {
              do
              {
                v27 = v25;
                v25 = *(char **)v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                v27 = (char *)*((_QWORD *)v26 + 2);
                v28 = *(_QWORD *)v27 == (_QWORD)v26;
                v26 = v27;
              }
              while (!v28);
            }
            if (*((char **)this + 9) == v20)
              *((_QWORD *)this + 9) = v27;
            v29 = (uint64_t *)*((_QWORD *)this + 10);
            --*((_QWORD *)this + 11);
            std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v29, (uint64_t *)v20);
            operator delete(v20);
            goto LABEL_27;
          }
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          goto LABEL_157;
        return 0;
      }
LABEL_27:
      while (++data != size)
      {
        v17 = *(char **)v18;
        if (*(_QWORD *)v18)
          goto LABEL_7;
      }
      data = (unsigned int *)a2[1].__r_.__value_.__l.__data_;
      size = (unsigned int *)a2[1].__r_.__value_.__l.__size_;
    }
    if (data == size)
    {
      data = size;
    }
    else
    {
      v30 = (uint64_t **)((char *)this + 216);
      if (*((_QWORD *)this + 27))
      {
        v31 = data;
        while (1)
        {
          v32 = *v31;
          v33 = (uint64_t **)((char *)this + 216);
          v34 = (char *)*((_QWORD *)this + 27);
          do
          {
            v35 = *((_DWORD *)v34 + 7);
            v36 = v35 >= v32;
            if (v35 >= v32)
              v37 = (char **)v34;
            else
              v37 = (char **)(v34 + 8);
            if (v36)
              v33 = (uint64_t **)v34;
            v34 = *v37;
          }
          while (*v37);
          if (v33 != v30 && v32 >= *((_DWORD *)v33 + 7))
            break;
          if (++v31 == size)
            goto LABEL_53;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_157:
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
        return 0;
      }
      do
      {
LABEL_53:
        v46 = *data;
        v47 = *v30;
        v48 = (uint64_t **)((char *)this + 216);
        v49 = (uint64_t **)((char *)this + 216);
        if (*v30)
        {
          while (1)
          {
            while (1)
            {
              v49 = (uint64_t **)v47;
              v50 = *((_DWORD *)v47 + 7);
              if (v46 >= v50)
                break;
              v47 = *v49;
              v48 = v49;
              if (!*v49)
                goto LABEL_60;
            }
            if (v50 >= v46)
              break;
            v47 = v49[1];
            if (!v47)
            {
              v48 = v49 + 1;
              goto LABEL_60;
            }
          }
        }
        else
        {
LABEL_60:
          v51 = operator new(0x20uLL);
          v51[7] = v46;
          *(_QWORD *)v51 = 0;
          *((_QWORD *)v51 + 1) = 0;
          *((_QWORD *)v51 + 2) = v49;
          *v48 = (uint64_t *)v51;
          v52 = **((_QWORD **)this + 26);
          if (v52)
          {
            *((_QWORD *)this + 26) = v52;
            v45 = *v48;
          }
          else
          {
            v45 = (uint64_t *)v51;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 27), v45);
          ++*((_QWORD *)this + 28);
        }
        ++data;
      }
      while (data != size);
      size = (unsigned int *)a2[1].__r_.__value_.__l.__data_;
      data = (unsigned int *)a2[1].__r_.__value_.__l.__size_;
    }
  }
  v53 = *((_QWORD *)this + 67);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v163 = 0;
  *((_QWORD *)&v163 + 1) = v53;
  *(_OWORD *)v164 = xmmword_208F08B10;
  *(_WORD *)&v164[16] = 256;
  v164[18] = 0;
  *(_QWORD *)&v164[20] = -1;
  *(_DWORD *)&v164[28] = 0;
  v164[32] = 0;
  v167[0] = 0;
  v167[1] = 0;
  v165 = 0;
  v166 = (int *)v167;
  v168 = (int *)v169;
  v169[0] = 0;
  v169[1] = 0;
  *(_QWORD *)v170 = (char *)this + 16;
  *(_QWORD *)&v170[8] = 0;
  *(_DWORD *)&v170[16] = 10;
  v170[20] = 1;
  v172 = 0u;
  v171 = 0u;
  v173 = 65537;
  v174 = 0;
  v175 = 0;
  if (size == data)
  {
    v54 = 0;
    v57 = *((_DWORD *)this + 28);
    *(_DWORD *)v164 = 0;
    *(_DWORD *)&v164[4] = v57;
    if (v57)
      goto LABEL_72;
    v56 = 1;
  }
  else
  {
    v54 = *size;
    v55 = *((_DWORD *)this + 28);
    *(_DWORD *)v164 = v54;
    *(_DWORD *)&v164[4] = v55;
    if (v54 != v55)
      goto LABEL_72;
    if (v54 == 1)
      v56 = 2;
    else
      v56 = 1;
  }
  *(_DWORD *)&v164[4] = v56;
LABEL_72:
  *(_DWORD *)&v164[12] = *((_DWORD *)this + 251);
  v58 = a2[2].__r_.__value_.__l.__data_;
  v59 = a2[2].__r_.__value_.__l.__size_;
  v177 = 3;
  if (&__s2 <= (pthread_mutexattr_t *)"FID" && (char *)&__s2.__sig + 3 > "FID")
    goto LABEL_215;
  LOWORD(__s2.__sig) = *(_WORD *)"FID";
  WORD1(__s2.__sig) = cricket::kFidSsrcGroupSemantics[2];
  if (v58 == (std::string::pointer)v59)
    goto LABEL_94;
  while (1)
  {
    v60 = v58[23];
    if ((v60 & 0x80u) == 0)
      v61 = v58[23];
    else
      v61 = *((_QWORD *)v58 + 1);
    if (v61 != 3)
      goto LABEL_77;
    if ((v60 & 0x80) == 0)
      break;
    if (!memcmp(*(const void **)v58, &__s2, *((_QWORD *)v58 + 1)))
      goto LABEL_87;
LABEL_77:
    v58 += 48;
    if (v58 == (std::string::pointer)v59)
      goto LABEL_94;
  }
  if (v58[23])
  {
    v62 = 0;
    while (v58[v62] == *((_BYTE *)&__s2.__sig + v62))
    {
      if (v60 == ++v62)
        goto LABEL_87;
    }
    goto LABEL_77;
  }
LABEL_87:
  v63 = (_DWORD *)*((_QWORD *)v58 + 3);
  v64 = *((_QWORD *)v58 + 4) - (_QWORD)v63;
  if (v64)
    v65 = v64 >= 5;
  else
    v65 = 0;
  if (!v65 || *v63 != v54)
    goto LABEL_77;
  *(_DWORD *)&v164[28] = v63[1];
LABEL_94:
  v66 = *((_DWORD *)this + 154);
  v67 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 184))(*((_QWORD *)this + 15));
  (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v67 + 16))(&__s2, v67, "WebRTC-FlexFEC-03-Advertised", 28);
  if ((v177 & 0x80000000) == 0)
  {
    p_s2 = &__s2;
    v69 = v177;
    goto LABEL_99;
  }
  v69 = *(_QWORD *)__s2.__opaque;
  if ((*(_QWORD *)__s2.__opaque & 0x8000000000000000) != 0)
    goto LABEL_215;
  p_s2 = (pthread_mutexattr_t *)__s2.__sig;
  if (*(_QWORD *)__s2.__opaque)
  {
    if (!__s2.__sig)
      goto LABEL_215;
  }
LABEL_99:
  if (v69 >= 8)
  {
    v70 = p_s2->__sig == 0x64656C6261736944;
    if (v177 < 0)
      goto LABEL_104;
LABEL_101:
    v142 = (char *)this + 16;
    v143 = v66;
    if (v70)
      goto LABEL_127;
LABEL_105:
    v71 = a2[2].__r_.__value_.__l.__data_;
    v72 = a2[2].__r_.__value_.__l.__size_;
    v177 = 6;
    if (&__s2 <= (pthread_mutexattr_t *)"FEC-FR" && (char *)&__s2.__sig + 6 > "FEC-FR")
      goto LABEL_215;
    strcpy((char *)&__s2, "FEC-FR");
    if (v71 == (std::string::pointer)v72)
      goto LABEL_127;
    while (1)
    {
      v73 = v71[23];
      if ((v73 & 0x80u) == 0)
        v74 = v71[23];
      else
        v74 = *((_QWORD *)v71 + 1);
      if (v74 != 6)
        goto LABEL_110;
      if ((v73 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v71, &__s2, *((_QWORD *)v71 + 1)))
          goto LABEL_110;
      }
      else if (v71[23])
      {
        v75 = 0;
        while (v71[v75] == *((_BYTE *)&__s2.__sig + v75))
        {
          if (v73 == ++v75)
            goto LABEL_120;
        }
        goto LABEL_110;
      }
LABEL_120:
      v76 = (_DWORD *)*((_QWORD *)v71 + 3);
      v77 = *((_QWORD *)v71 + 4) - (_QWORD)v76;
      if (v77)
        v78 = v77 >= 5;
      else
        v78 = 0;
      if (v78 && *v76 == v54)
      {
        v141 = v76[1];
        __src = (char *)operator new(4uLL);
        *(_DWORD *)__src = v54;
        v140 = __src + 4;
        v139 = *(_DWORD *)&v164[4];
        v79 = *(_DWORD *)&v164[12];
        goto LABEL_128;
      }
LABEL_110:
      v71 += 48;
      if (v71 == (std::string::pointer)v72)
        goto LABEL_127;
    }
  }
  v70 = 0;
  if ((v177 & 0x80) == 0)
    goto LABEL_101;
LABEL_104:
  operator delete((void *)__s2.__sig);
  v142 = (char *)this + 16;
  v143 = v66;
  if (!v70)
    goto LABEL_105;
LABEL_127:
  v140 = 0;
  __src = 0;
  v139 = 0;
  v141 = 0;
  v79 = 1;
LABEL_128:
  v138 = v79;
  v173 = *((_DWORD *)this + 244);
  v174 = *((_BYTE *)this + 980);
  v170[20] = *((_BYTE *)this + 142);
  v81 = a2[4].__r_.__value_.__l.__data_;
  v80 = a2[4].__r_.__value_.__l.__size_;
  v82 = v80 - (_QWORD)v81;
  if ((std::string::pointer)v80 != v81)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v82 >> 3) > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_216;
    v83 = (char **)operator new(v82);
    v84 = 0;
    do
    {
      while (1)
      {
        v85 = &v81[v84];
        v86 = (std::string *)&v83[v84 / 8];
        if ((v81[v84 + 23] & 0x80000000) == 0)
          break;
        std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)v85, *((_QWORD *)v85 + 1));
        v84 += 24;
        if (&v81[v84] == (std::string::pointer)v80)
          goto LABEL_134;
      }
      v87 = *(_OWORD *)v85;
      v86->__r_.__value_.__r.__words[2] = *((_QWORD *)v85 + 2);
      *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v87;
      v84 += 24;
    }
    while (&v81[v84] != (std::string::pointer)v80);
LABEL_134:
    if (v84)
    {
      v88 = 3 * ((uint64_t)v84 / 24);
      do
      {
        if (SHIBYTE(v83[v88 - 1]) < 0)
          operator delete(v83[v88 - 3]);
        v88 -= 3;
      }
      while (v88 * 8);
      operator delete(v83);
      v89 = a2[4].__r_.__value_.__l.__data_;
      v90 = a2[4].__r_.__value_.__l.__size_;
      v91 = v90 - (_QWORD)v89;
      if ((std::string::pointer)v90 == v89)
        goto LABEL_215;
      if (0xAAAAAAAAAAAAAAABLL * (v91 >> 3) <= 0xAAAAAAAAAAAAAAALL)
      {
        v83 = (char **)operator new(v91);
        v92 = 0;
        do
        {
          while (1)
          {
            v93 = &v89[v92];
            v94 = (std::string *)&v83[v92 / 8];
            if ((v89[v92 + 23] & 0x80000000) == 0)
              break;
            std::string::__init_copy_ctor_external(v94, *(const std::string::value_type **)v93, *((_QWORD *)v93 + 1));
            v92 += 24;
            if (&v89[v92] == (std::string::pointer)v90)
              goto LABEL_145;
          }
          v95 = *(_OWORD *)v93;
          v94->__r_.__value_.__r.__words[2] = *((_QWORD *)v93 + 2);
          *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v95;
          v92 += 24;
        }
        while (&v89[v92] != (std::string::pointer)v90);
LABEL_145:
        if (v92)
        {
          v96 = (uint64_t)v92 / 24;
          v97 = *((_BYTE *)v83 + 23);
          if (SBYTE7(v172) < 0)
          {
            if (v97 >= 0)
              v98 = (const std::string::value_type *)v83;
            else
              v98 = *v83;
            if (v97 >= 0)
              v99 = *((unsigned __int8 *)v83 + 23);
            else
              v99 = (size_t)v83[1];
            std::string::__assign_no_alias<false>((std::string *)&v171, v98, v99);
          }
          else if ((*((_BYTE *)v83 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(&v171, *v83, (size_t)v83[1]);
          }
          else
          {
            v171 = *(_OWORD *)v83;
            *(_QWORD *)&v172 = v83[2];
          }
          v100 = 3 * v96;
          do
          {
            if (SHIBYTE(v83[v100 - 1]) < 0)
              operator delete(v83[v100 - 3]);
            v100 -= 3;
          }
          while (v100 * 8);
          goto LABEL_164;
        }
LABEL_215:
        __break(1u);
      }
LABEL_216:
      abort();
    }
LABEL_164:
    operator delete(v83);
  }
  v101 = (void (***)(_QWORD))*((_QWORD *)this + 123);
  if (v101 && !v175)
  {
    (**v101)(v101);
    if (v175)
      (*v175)[1](v175);
    v175 = v101;
  }
  v102 = operator new();
  v146 = *(_OWORD *)__p;
  v147 = v163;
  v149 = *(_OWORD *)&v164[8];
  v103 = *((_QWORD *)this + 15);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v163 = 0;
  v148 = *(_QWORD *)v164;
  v150 = *(_OWORD *)&v164[24];
  v153[0] = 0;
  v153[1] = 0;
  v151 = v165;
  v152 = (int *)v153;
  std::map<int,int>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,int>,std::__tree_node<std::__value_type<int,int>,void *> *,long>>>((uint64_t *)&v152, v166, (int *)v167);
  v155[0] = 0;
  v155[1] = 0;
  v154 = (int *)v155;
  std::set<int>::insert[abi:sn180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t *)&v154, v168, (int *)v169);
  *(_OWORD *)v156 = *(_OWORD *)v170;
  *(_QWORD *)&v156[13] = *(_QWORD *)&v170[13];
  v157 = v171;
  v171 = 0uLL;
  v158 = v172;
  v159 = v173;
  v160 = v174;
  v104 = v175;
  v172 = 0uLL;
  v175 = 0;
  v161 = v104;
  *(_QWORD *)v102 = &off_24C0C6190;
  *(_QWORD *)(v102 + 8) = v103;
  cricket::StreamParams::StreamParams((std::string *)(v102 + 16), (const cricket::StreamParams *)a2);
  v105 = v147;
  *(_OWORD *)(v102 + 176) = v146;
  *(_QWORD *)(v102 + 160) = 0;
  *(_BYTE *)(v102 + 168) = a3;
  *(_OWORD *)(v102 + 192) = v105;
  v146 = 0uLL;
  *(_QWORD *)&v147 = 0;
  *(_QWORD *)(v102 + 208) = v148;
  *(_OWORD *)(v102 + 216) = v149;
  *(_OWORD *)(v102 + 232) = v150;
  v106 = (uint64_t **)(v102 + 264);
  *(_QWORD *)(v102 + 264) = 0;
  *(_QWORD *)(v102 + 272) = 0;
  v107 = v152;
  *(_QWORD *)(v102 + 248) = v151;
  *(_QWORD *)(v102 + 256) = v102 + 264;
  v144 = (uint64_t **)(v102 + 256);
  std::map<int,int>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,int>,std::__tree_node<std::__value_type<int,int>,void *> *,long>>>((uint64_t *)(v102 + 256), v107, (int *)v153);
  *(_QWORD *)(v102 + 288) = 0;
  *(_QWORD *)(v102 + 296) = 0;
  *(_QWORD *)(v102 + 280) = v102 + 288;
  std::set<int>::insert[abi:sn180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t *)(v102 + 280), v154, (int *)v155);
  *(_OWORD *)(v102 + 304) = *(_OWORD *)v156;
  *(_QWORD *)(v102 + 317) = *(_QWORD *)&v156[13];
  *(_OWORD *)(v102 + 328) = v157;
  v157 = 0uLL;
  v108 = v158;
  v158 = 0uLL;
  *(_OWORD *)(v102 + 344) = v108;
  *(_DWORD *)(v102 + 360) = v159;
  *(_BYTE *)(v102 + 364) = v160;
  v109 = v161;
  v161 = 0;
  *(_QWORD *)(v102 + 368) = v109;
  *(_DWORD *)(v102 + 376) = v143;
  *(_DWORD *)(v102 + 380) = v141;
  *(_DWORD *)(v102 + 384) = v139;
  *(_QWORD *)(v102 + 392) = 0;
  *(_QWORD *)(v102 + 400) = 0;
  *(_QWORD *)(v102 + 408) = 0;
  v110 = v140 - __src;
  if (v140 != __src)
  {
    if (v110 < 0)
      goto LABEL_216;
    v111 = (char *)operator new(v140 - __src);
    *(_QWORD *)(v102 + 392) = v111;
    v112 = &v111[4 * (v110 >> 2)];
    *(_QWORD *)(v102 + 408) = v112;
    memcpy(v111, __src, v110);
    *(_QWORD *)(v102 + 400) = v112;
  }
  *(_DWORD *)(v102 + 416) = v138;
  *(_QWORD *)(v102 + 424) = v142;
  *(_QWORD *)(v102 + 432) = 0;
  pthread_mutexattr_init(&__s2);
  pthread_mutexattr_setpolicy_np(&__s2, 3);
  pthread_mutex_init((pthread_mutex_t *)(v102 + 440), &__s2);
  pthread_mutexattr_destroy(&__s2);
  *(_QWORD *)(v102 + 504) = 0;
  *(_OWORD *)(v102 + 512) = xmmword_208F05A40;
  *(_BYTE *)(v102 + 528) = 0;
  v113 = *((_QWORD *)this + 69) - *((_QWORD *)this + 68);
  if (v113)
    v114 = *((_QWORD *)this + 68);
  else
    v114 = 0;
  v116 = *((_QWORD *)this + 68);
  if (v116 == *((_QWORD *)this + 69))
    goto LABEL_215;
  *(_QWORD *)(v102 + 228) = *(_QWORD *)(v116 + 216);
  *(_BYTE *)(v102 + 226) = cricket::HasLntf(v116, v115);
  HasNack = cricket::HasNack(v116, v117);
  if (HasNack)
    v120 = 1000;
  else
    v120 = 0;
  *(_DWORD *)(v102 + 216) = v120;
  if (*(_BYTE *)(v116 + 240) && HasNack)
    *(_DWORD *)(v102 + 216) = *(_DWORD *)(v116 + 236);
  *(_BYTE *)(v102 + 224) = cricket::HasRrtr(v116, v119);
  v121 = *(_DWORD *)(v116 + 224);
  if (v121 != -1)
  {
    v122 = *(_DWORD *)(v116 + 220);
    v123 = *v106;
    v124 = (uint64_t **)(v102 + 264);
    if (*v106)
    {
      while (1)
      {
        while (1)
        {
          v124 = (uint64_t **)v123;
          v125 = *((_DWORD *)v123 + 7);
          if (v121 >= v125)
            break;
          v123 = *v124;
          v106 = v124;
          if (!*v124)
            goto LABEL_191;
        }
        if (v125 >= v121)
          break;
        v123 = v124[1];
        if (!v123)
        {
          v106 = v124 + 1;
          goto LABEL_191;
        }
      }
    }
    else
    {
LABEL_191:
      v126 = (uint64_t *)v124;
      v124 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v124 + 7) = v121;
      *((_DWORD *)v124 + 8) = 0;
      *v124 = 0;
      v124[1] = 0;
      v124[2] = v126;
      *v106 = (uint64_t *)v124;
      v127 = (uint64_t *)**v144;
      v128 = (uint64_t *)v124;
      if (v127)
      {
        *v144 = v127;
        v128 = *v106;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v102 + 264), v128);
      ++*(_QWORD *)(v102 + 272);
    }
    *((_DWORD *)v124 + 8) = v122;
  }
  *(_QWORD *)(v102 + 312) = v102;
  *(_DWORD *)(v102 + 376) = v143;
  cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream::CreateReceiveStream((cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream *)v102);
  webrtc::VideoReceiveStreamInterface::Config::~Config((webrtc::VideoReceiveStreamInterface::Config *)&v146);
  if (*((_BYTE *)this + 116))
  {
    *(_BYTE *)(v102 + 528) = 1;
    (*(void (**)(_QWORD))(**(_QWORD **)(v102 + 160) + 16))(*(_QWORD *)(v102 + 160));
  }
  v129 = (unsigned int *)a2[1].__r_.__value_.__l.__data_;
  if (v129 != (unsigned int *)a2[1].__r_.__value_.__l.__size_)
  {
    v130 = *v129;
    v132 = (_QWORD *)((char *)this + 80);
    v131 = (_DWORD *)*((_QWORD *)this + 10);
    if (v131)
      goto LABEL_203;
    goto LABEL_201;
  }
  v130 = 0;
  v132 = (_QWORD *)((char *)this + 80);
  v131 = (_DWORD *)*((_QWORD *)this + 10);
  if (v131)
  {
    while (1)
    {
LABEL_203:
      while (1)
      {
        v133 = v131;
        v134 = v131[8];
        if (v130 >= v134)
          break;
        v131 = (_DWORD *)*v133;
        v132 = v133;
        if (!*v133)
          goto LABEL_207;
      }
      if (v134 >= v130)
        break;
      v131 = (_DWORD *)v133[1];
      if (!v131)
      {
        v132 = v133 + 1;
        goto LABEL_207;
      }
    }
  }
  else
  {
LABEL_201:
    v133 = v132;
LABEL_207:
    v135 = v133;
    v133 = operator new(0x30uLL);
    *((_DWORD *)v133 + 8) = v130;
    v133[5] = 0;
    *v133 = 0;
    v133[1] = 0;
    v133[2] = v135;
    *v132 = v133;
    v136 = **((_QWORD **)this + 9);
    v137 = v133;
    if (v136)
    {
      *((_QWORD *)this + 9) = v136;
      v137 = (uint64_t *)*v132;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 10), v137);
    ++*((_QWORD *)this + 11);
  }
  v133[5] = v102;
  if (__src)
    operator delete(__src);
  webrtc::VideoReceiveStreamInterface::Config::~Config((webrtc::VideoReceiveStreamInterface::Config *)__p);
  return 1;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::AddRecvStream(cricket::WebRtcVideoReceiveChannel *this, std::string *a2)
{
  return cricket::WebRtcVideoReceiveChannel::AddRecvStream((cricket::WebRtcVideoReceiveChannel *)((char *)this - 64), a2, 0);
}

uint64_t cricket::WebRtcVideoReceiveChannel::RemoveRecvStream(cricket::WebRtcVideoReceiveChannel *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  BOOL v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  char *v26;
  BOOL v27;
  uint64_t *v28;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  v11 = (char *)*((_QWORD *)this + 10);
  if (!v11)
    goto LABEL_14;
  v12 = (char *)this + 80;
  do
  {
    v13 = *((_DWORD *)v11 + 8);
    v14 = v13 >= a2;
    if (v13 >= a2)
      v15 = (char **)v11;
    else
      v15 = (char **)(v11 + 8);
    if (v14)
      v12 = v11;
    v11 = *v15;
  }
  while (*v15);
  if (v12 != (char *)this + 80 && *((_DWORD *)v12 + 8) <= a2)
  {
    cricket::WebRtcVideoReceiveChannel::DeleteReceiveStream(this, *((_QWORD **)v12 + 5));
    v24 = (char *)*((_QWORD *)v12 + 1);
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = *(char **)v24;
      }
      while (v24);
    }
    else
    {
      v26 = v12;
      do
      {
        v25 = (char *)*((_QWORD *)v26 + 2);
        v27 = *(_QWORD *)v25 == (_QWORD)v26;
        v26 = v25;
      }
      while (!v27);
    }
    if (*((char **)this + 9) == v12)
      *((_QWORD *)this + 9) = v25;
    v28 = (uint64_t *)*((_QWORD *)this + 10);
    --*((_QWORD *)this + 11);
    std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v28, (uint64_t *)v12);
    operator delete(v12);
    return 1;
  }
  else
  {
LABEL_14:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    return 0;
  }
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::RemoveRecvStream(cricket::WebRtcVideoReceiveChannel *this, unsigned int a2)
{
  return cricket::WebRtcVideoReceiveChannel::RemoveRecvStream((cricket::WebRtcVideoReceiveChannel *)((char *)this - 64), a2);
}

void cricket::WebRtcVideoReceiveChannel::ResetUnsignaledRecvStream(cricket::WebRtcVideoReceiveChannel *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  cricket::WebRtcVideoReceiveChannel *v12;
  cricket::WebRtcVideoReceiveChannel *v13;
  void *v14;
  cricket::WebRtcVideoReceiveChannel *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  cricket::WebRtcVideoReceiveChannel *v19;
  __int128 v20[9];

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  memset(v20, 0, sizeof(v20));
  cricket::StreamParams::operator=((uint64_t)this + 832, v20);
  cricket::StreamParams::~StreamParams((cricket::StreamParams *)v20);
  if (*((_BYTE *)this + 176))
    *((_BYTE *)this + 176) = 0;
  v9 = (uint64_t *)*((_QWORD *)this + 9);
  if (v9 != (uint64_t *)((char *)this + 80))
  {
    do
    {
      v11 = v9[5];
      if (*(_BYTE *)(v11 + 168))
      {
        cricket::WebRtcVideoReceiveChannel::DeleteReceiveStream(this, (_QWORD *)v11);
        v12 = (cricket::WebRtcVideoReceiveChannel *)v9[1];
        v13 = v12;
        v14 = v9;
        if (v12)
        {
          do
          {
            v15 = v13;
            v13 = *(cricket::WebRtcVideoReceiveChannel **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (cricket::WebRtcVideoReceiveChannel *)*((_QWORD *)v14 + 2);
            v16 = *(_QWORD *)v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v16);
        }
        v17 = v9;
        if (v12)
        {
          do
          {
            v18 = (uint64_t *)v12;
            v12 = *(cricket::WebRtcVideoReceiveChannel **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v18 = (uint64_t *)v17[2];
            v16 = *v18 == (_QWORD)v17;
            v17 = v18;
          }
          while (!v16);
        }
        if (*((uint64_t **)this + 9) == v9)
          *((_QWORD *)this + 9) = v18;
        v10 = (uint64_t *)*((_QWORD *)this + 10);
        --*((_QWORD *)this + 11);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v10, v9);
        operator delete(v9);
      }
      else
      {
        v19 = (cricket::WebRtcVideoReceiveChannel *)v9[1];
        if (v19)
        {
          do
          {
            v15 = v19;
            v19 = *(cricket::WebRtcVideoReceiveChannel **)v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v15 = (cricket::WebRtcVideoReceiveChannel *)v9[2];
            v16 = *(_QWORD *)v15 == (_QWORD)v9;
            v9 = (uint64_t *)v15;
          }
          while (!v16);
        }
      }
      v9 = (uint64_t *)v15;
    }
    while (v15 != (cricket::WebRtcVideoReceiveChannel *)((char *)this + 80));
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::ResetUnsignaledRecvStream(cricket::WebRtcVideoReceiveChannel *this)
{
  cricket::WebRtcVideoReceiveChannel::ResetUnsignaledRecvStream((cricket::WebRtcVideoReceiveChannel *)((char *)this - 64));
}

uint64_t cricket::WebRtcVideoReceiveChannel::GetUnsignaledSsrc(cricket::WebRtcVideoReceiveChannel *this)
{
  cricket::WebRtcVideoReceiveChannel *v1;
  cricket::WebRtcVideoReceiveChannel *v3;
  cricket::WebRtcVideoReceiveChannel *v4;
  BOOL v5;

  v1 = (cricket::WebRtcVideoReceiveChannel *)*((_QWORD *)this + 9);
  if (v1 == (cricket::WebRtcVideoReceiveChannel *)((char *)this + 80))
    return 0;
  while (!*(_BYTE *)(*((_QWORD *)v1 + 5) + 168))
  {
    v3 = (cricket::WebRtcVideoReceiveChannel *)*((_QWORD *)v1 + 1);
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = *(cricket::WebRtcVideoReceiveChannel **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (cricket::WebRtcVideoReceiveChannel *)*((_QWORD *)v1 + 2);
        v5 = *(_QWORD *)v4 == (_QWORD)v1;
        v1 = v4;
      }
      while (!v5);
    }
    v1 = v4;
    if (v4 == (cricket::WebRtcVideoReceiveChannel *)((char *)this + 80))
      return 0;
  }
  return *((unsigned int *)v1 + 8) | 0x100000000;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::GetUnsignaledSsrc(cricket::WebRtcVideoReceiveChannel *this)
{
  cricket::WebRtcVideoReceiveChannel *v1;
  cricket::WebRtcVideoReceiveChannel *v3;
  cricket::WebRtcVideoReceiveChannel *v4;
  BOOL v5;

  v1 = (cricket::WebRtcVideoReceiveChannel *)*((_QWORD *)this + 1);
  if (v1 == (cricket::WebRtcVideoReceiveChannel *)((char *)this + 16))
    return 0;
  while (!*(_BYTE *)(*((_QWORD *)v1 + 5) + 168))
  {
    v3 = (cricket::WebRtcVideoReceiveChannel *)*((_QWORD *)v1 + 1);
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = *(cricket::WebRtcVideoReceiveChannel **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (cricket::WebRtcVideoReceiveChannel *)*((_QWORD *)v1 + 2);
        v5 = *(_QWORD *)v4 == (_QWORD)v1;
        v1 = v4;
      }
      while (!v5);
    }
    v1 = v4;
    if (v4 == (cricket::WebRtcVideoReceiveChannel *)((char *)this + 16))
      return 0;
  }
  return *((unsigned int *)v1 + 8) | 0x100000000;
}

uint64_t cricket::WebRtcVideoReceiveChannel::OnDemuxerCriteriaUpdatePending(uint64_t this)
{
  ++*(_DWORD *)(this + 156);
  return this;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::OnDemuxerCriteriaUpdatePending(uint64_t this)
{
  ++*(_DWORD *)(this + 92);
  return this;
}

uint64_t cricket::WebRtcVideoReceiveChannel::OnDemuxerCriteriaUpdateComplete(uint64_t this)
{
  ++*(_DWORD *)(this + 160);
  return this;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::OnDemuxerCriteriaUpdateComplete(uint64_t this)
{
  ++*(_DWORD *)(this + 96);
  return this;
}

uint64_t cricket::WebRtcVideoReceiveChannel::SetSink(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v21;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  v15 = *(_QWORD *)(a1 + 80);
  v14 = a1 + 80;
  v13 = v15;
  if (!v15)
    return 0;
  v16 = v14;
  do
  {
    v17 = *(_DWORD *)(v13 + 32);
    v18 = v17 >= a2;
    if (v17 >= a2)
      v19 = (uint64_t *)v13;
    else
      v19 = (uint64_t *)(v13 + 8);
    if (v18)
      v16 = v13;
    v13 = *v19;
  }
  while (*v19);
  if (v16 == v14 || *(_DWORD *)(v16 + 32) > a2)
    return 0;
  v21 = *(_QWORD *)(v16 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(v21 + 440));
  *(_QWORD *)(v21 + 504) = a3;
  pthread_mutex_unlock((pthread_mutex_t *)(v21 + 440));
  return 1;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::SetSink(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v21;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  v15 = *(_QWORD *)(a1 + 16);
  v14 = a1 + 16;
  v13 = v15;
  if (!v15)
    return 0;
  v16 = v14;
  do
  {
    v17 = *(_DWORD *)(v13 + 32);
    v18 = v17 >= a2;
    if (v17 >= a2)
      v19 = (uint64_t *)v13;
    else
      v19 = (uint64_t *)(v13 + 8);
    if (v18)
      v16 = v13;
    v13 = *v19;
  }
  while (*v19);
  if (v16 == v14 || *(_DWORD *)(v16 + 32) > a2)
    return 0;
  v21 = *(_QWORD *)(v16 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(v21 + 440));
  *(_QWORD *)(v21 + 504) = a3;
  pthread_mutex_unlock((pthread_mutex_t *)(v21 + 440));
  return 1;
}

void cricket::WebRtcVideoReceiveChannel::SetDefaultSink(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  *(_QWORD *)(a1 + 128) = a2;
}

void `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::SetDefaultSink(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  *(_QWORD *)(a1 + 64) = a2;
}

uint64_t cricket::WebRtcVideoReceiveChannel::GetStats(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 *v31;
  __int128 *v32;
  char v33;
  __int128 v34;
  const std::string::value_type *v35;
  size_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  double v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  void **v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  void **v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  std::string *v78;
  const std::string::value_type **v79;
  __int128 v80;
  uint64_t v81;
  char **v82;
  _BYTE *v83;
  _BYTE *v84;
  int64_t v85;
  char *v86;
  char *v87;
  char **v88;
  _BYTE *v89;
  _BYTE *v90;
  int64_t v91;
  char *v92;
  char *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE *v100;
  _BYTE *v101;
  int64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  std::string *v106;
  __int128 *v107;
  __int128 v108;
  char *v109;
  _BYTE *v110;
  _BYTE *v111;
  int64_t v112;
  char *v113;
  char *v114;
  std::string *v115;
  const std::string::value_type **v116;
  void **v117;
  void **v118;
  void **v119;
  char *v120;
  char *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  char *v133;
  char *v134;
  _QWORD *v135;
  uint64_t v136;
  int v137;
  _QWORD *v138;
  int v139;
  _DWORD *v140;
  _QWORD *v141;
  _QWORD *v143;
  _BOOL4 v144;
  _QWORD **v145;
  _QWORD *v146;
  _QWORD *v147;
  char *v148;
  uint64_t *v149;
  uint64_t v150;
  _QWORD *v151;
  void **v152;
  _QWORD *v153;
  uint64_t v154;
  void **v155;
  char *v156;
  void (**v157)(webrtc::RtpCodec *__hidden);
  void *v158;
  uint64_t v159;
  char v160;
  char v161;
  uint64_t v162;
  char v163;
  int v164;
  char v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  std::string v172;
  int v173;
  char v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  char v179;
  char v180;
  char v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  char v192;
  uint64_t v193;
  int v194;
  std::string *v195[3];
  std::string v196;
  char v197;
  __int16 v198;
  _BYTE v199[68];
  char v200;
  __int128 v201;
  uint64_t v202;
  int v203;
  __int128 v204;
  uint64_t v205;
  _BYTE v206[21];
  uint64_t v207;
  _DWORD v208[6];
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  char v218;
  void *v219[2];
  char v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225[2];
  std::string v226;
  char v227;
  __int16 v228;
  int v229;
  _BYTE v230[20];
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  int v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  int v246;
  uint64_t v247;
  __int128 v248;
  char v249;
  uint64_t v250;
  char v251;
  void *__p;
  char v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  char v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  char v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
      cricket::VideoReceiverInfo::~VideoReceiverInfo((void **)(v4 - 728));
    while (v4 != v5);
  }
  v149 = a2;
  v7 = (char *)a2[4];
  v6 = a2 + 4;
  *(v6 - 3) = v5;
  v145 = (_QWORD **)(v6 - 1);
  std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)(v6 - 1), v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
  v146 = v6;
  if (a1[11])
  {
    if (rtc::g_clock)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v8 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
    }
    v9 = a1[102];
    v11 = v9 == -1 || v8 / 1000000 - v9 > 10000;
    v12 = v149;
    if (v11)
      a1[102] = v8 / 1000000;
    v13 = (_QWORD *)a1[9];
    v147 = a1;
    v14 = a1 + 10;
    if (v13 != a1 + 10)
    {
      v144 = v11;
      v143 = a1 + 10;
      do
      {
        v151 = v13;
        v15 = v13[5];
        v160 = 0;
        LOBYTE(v162) = 0;
        v163 = 0;
        LOBYTE(v164) = 0;
        v165 = 0;
        v169 = 0;
        LOBYTE(v170) = 0;
        v171 = 0;
        v174 = 0;
        v179 = 0;
        v180 = 0;
        v181 = 0;
        LOBYTE(v182) = 0;
        v183 = 0;
        LOBYTE(v184) = 0;
        v185 = 0;
        LOBYTE(v186) = 0;
        v187 = 0;
        v192 = 0;
        v193 = 0;
        v194 = 0;
        v156 = 0;
        v157 = 0;
        LOBYTE(v159) = 0;
        v158 = 0;
        v166 = 0u;
        v167 = 0u;
        LOBYTE(v168) = 0;
        memset(&v172, 0, sizeof(v172));
        LOBYTE(v173) = 0;
        v175 = 0u;
        v176 = 0u;
        v177 = 0u;
        LOBYTE(v178) = 0;
        v188 = 0;
        v189 = 0;
        v190 = 0;
        v191 = 0;
        v197 = 0;
        v198 = 0;
        v200 = 0;
        v196.__r_.__value_.__s.__data_[0] = 0;
        memset(v195, 0, sizeof(v195));
        memset(v199, 0, 61);
        v201 = 0uLL;
        v203 = 0;
        v202 = 0;
        v204 = 0uLL;
        v205 = -1;
        *(_QWORD *)v206 = 0;
        *(_QWORD *)&v206[8] = 0;
        *(_QWORD *)&v206[13] = 0;
        v207 = 0;
        memset(v208, 0, 20);
        v209 = -1;
        v210 = -1;
        LOBYTE(v211) = 0;
        v218 = 0;
        if (v195 == (std::string **)(v15 + 64))
        {
          v20 = 0;
          v17 = 0;
          v16 = 0;
          v18 = *(_DWORD *)(v15 + 208);
          v21 = 0;
          v22 = 1;
        }
        else
        {
          std::vector<cricket::SsrcGroup>::__assign_with_size[abi:sn180100]<cricket::SsrcGroup*,cricket::SsrcGroup*>(v195, *(_QWORD *)(v15 + 64), *(_QWORD *)(v15 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 72) - *(_QWORD *)(v15 + 64)) >> 4));
          v17 = (_QWORD *)*((_QWORD *)&v175 + 1);
          v16 = v176;
          v18 = *(_DWORD *)(v15 + 208);
          if (*((_QWORD *)&v175 + 1) < (unint64_t)v176)
          {
            if (!*((_QWORD *)&v175 + 1))
              goto LABEL_209;
            **((_DWORD **)&v175 + 1) = v18;
            v17[1] = 0;
            v19 = (char *)(v17 + 2);
            goto LABEL_37;
          }
          v20 = (_QWORD *)v175;
          v21 = (uint64_t)(*((_QWORD *)&v175 + 1) - v175) >> 4;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60)
            goto LABEL_210;
        }
        v23 = v16 - (_QWORD)v20;
        if (v23 >> 3 > v22)
          v22 = v23 >> 3;
        v24 = (unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0;
        v25 = 0xFFFFFFFFFFFFFFFLL;
        if (!v24)
          v25 = v22;
        if (!v25)
        {
LABEL_209:
          __break(1u);
LABEL_210:
          abort();
        }
        if (v25 >> 60)
          goto LABEL_211;
        v26 = 16 * v25;
        v27 = (char *)operator new(16 * v25);
        v28 = &v27[16 * v21];
        *(_DWORD *)v28 = v18;
        *((_QWORD *)v28 + 1) = 0;
        if (v17 == v20)
        {
          v19 = v28 + 16;
          *(_QWORD *)&v175 = &v27[16 * v21];
          *((_QWORD *)&v175 + 1) = v28 + 16;
          *(_QWORD *)&v176 = &v27[v26];
          if (v20)
            goto LABEL_36;
        }
        else
        {
          v29 = &v27[16 * v21];
          do
          {
            v30 = v29 - 16;
            *((_OWORD *)v29 - 1) = *((_OWORD *)v17 - 1);
            v17 -= 2;
            v29 -= 16;
          }
          while (v17 != v20);
          v19 = v28 + 16;
          *(_QWORD *)&v175 = v30;
          *((_QWORD *)&v175 + 1) = v28 + 16;
          *(_QWORD *)&v176 = &v27[v26];
          if (v20)
LABEL_36:
            operator delete(v20);
        }
LABEL_37:
        *((_QWORD *)&v175 + 1) = v19;
        (*(void (**)(void **__return_ptr))(**(_QWORD **)(v15 + 160) + 56))(v225);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v196, &v226);
        v198 = v228;
        if (v246 != -1)
        {
          v173 = v246;
          v174 = 1;
          v31 = *(__int128 **)(v15 + 176);
          v32 = *(__int128 **)(v15 + 184);
          if (v31 != v32)
          {
            while (*((_DWORD *)v31 + 24) != v246)
            {
              v31 = (__int128 *)((char *)v31 + 104);
              if (v31 == v32)
                goto LABEL_57;
            }
          }
          if (v31 != v32 && &v172 != (std::string *)v31)
          {
            v33 = *((_BYTE *)v31 + 23);
            if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v33 >= 0)
                v35 = (const std::string::value_type *)v31;
              else
                v35 = *(const std::string::value_type **)v31;
              if (v33 >= 0)
                v36 = *((unsigned __int8 *)v31 + 23);
              else
                v36 = *((_QWORD *)v31 + 1);
              std::string::__assign_no_alias<false>(&v172, v35, v36);
            }
            else if ((*((_BYTE *)v31 + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>(&v172, *(char **)v31, *((_QWORD *)v31 + 1));
            }
            else
            {
              v34 = *v31;
              v172.__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 2);
              *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v34;
            }
          }
        }
LABEL_57:
        v156 = v259;
        v157 = (void (**)(webrtc::RtpCodec *__hidden))(v260 + v258);
        v158 = (void *)__PAIR64__(v254, v261);
        *(_DWORD *)&v206[16] = v255 / 0x5A;
        *(_DWORD *)&v199[28] = v225[1];
        *(_QWORD *)&v37 = v247;
        *((void **)&v37 + 1) = v225[0];
        *(_OWORD *)&v199[12] = v37;
        pthread_mutex_lock((pthread_mutex_t *)(v15 + 440));
        v209 = *(_QWORD *)(v15 + 520);
        pthread_mutex_unlock((pthread_mutex_t *)(v15 + 440));
        v207 = *(_QWORD *)&v230[4];
        *(int32x2_t *)&v208[3] = vrev64_s32(*(int32x2_t *)&v230[12]);
        v208[0] = v231;
        if (v232 == 0x8000000000000000)
        {
          *(_QWORD *)&v166 = 0xFFF0000000000000;
          v38 = v233;
          if (v233 == 0x8000000000000000)
            goto LABEL_65;
        }
        else if (v232 == 0x7FFFFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v166 = 0x7FF0000000000000;
          v38 = v233;
          if (v233 == 0x8000000000000000)
            goto LABEL_65;
        }
        else
        {
          *(double *)&v166 = (double)v232 * 0.000001;
          v38 = v233;
          if (v233 == 0x8000000000000000)
          {
LABEL_65:
            v39 = 0xFFF0000000000000;
LABEL_66:
            *((_QWORD *)&v166 + 1) = v39;
            v40 = v235;
            *((_QWORD *)&v167 + 1) = v234;
            if (v235 == 0x8000000000000000)
              goto LABEL_70;
            goto LABEL_67;
          }
        }
        if (v38 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v39 = 0x7FF0000000000000;
          goto LABEL_66;
        }
        *((double *)&v166 + 1) = (double)v38 * 0.000001;
        v40 = v235;
        *((_QWORD *)&v167 + 1) = v234;
        if (v235 == 0x8000000000000000)
        {
LABEL_70:
          v41 = 0xFFF0000000000000;
          goto LABEL_71;
        }
LABEL_67:
        if (v40 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v41 = 0x7FF0000000000000;
LABEL_71:
          v42 = *(double *)&v41;
          goto LABEL_73;
        }
        v42 = (double)v40 * 0.000001;
LABEL_73:
        *(_DWORD *)&v199[40] = *(_DWORD *)v230 + v229;
        *(_QWORD *)&v208[1] = v236;
        *(_QWORD *)&v199[44] = v238;
        *(_DWORD *)&v199[52] = v229;
        *(_DWORD *)&v199[56] = HIDWORD(v225[1]);
        *(_QWORD *)&v199[60] = v244;
        v200 = v245;
        v201 = v239;
        v202 = v240;
        v203 = v241;
        v168 = v256;
        v169 = v257;
        v170 = v250;
        v171 = v251;
        v210 = v243;
        v204 = v242;
        v205 = v237;
        *(_OWORD *)v206 = v248;
        v206[20] = v249;
        *(double *)&v167 = v42;
        *(_QWORD *)&v199[4] = v263;
        v164 = v262;
        v165 = 1;
        v213 = v271;
        v214 = v272;
        v211 = v269;
        v212 = v270;
        v218 = v276;
        v216 = v274;
        v217 = v275;
        v215 = v273;
        if (v268)
        {
          if (v163)
          {
            v43 = v267;
            v162 = v267;
            if (v160)
            {
LABEL_76:
              v159 = v265;
              v156 += v265;
              v157 = (void (**)(webrtc::RtpCodec *__hidden))((char *)v157 + v266 + v264);
              LODWORD(v158) = (_DWORD)v158 + v43;
              goto LABEL_77;
            }
          }
          else
          {
            v163 = 1;
            v43 = v267;
            v162 = v267;
            if (v160)
              goto LABEL_76;
          }
          v160 = 1;
          goto LABEL_76;
        }
LABEL_77:
        v44 = *(_QWORD *)(v15 + 432);
        if (!v44)
          goto LABEL_88;
        v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44);
        if (!v45)
          goto LABEL_88;
        v46 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 24))(v45, *(unsigned int *)(v15 + 380));
        if (v46)
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v46 + 16))(v219);
          if (v179)
          {
            v47 = v224;
            v48 = v222;
            v178 = v224;
            if (v183)
            {
LABEL_82:
              v182 = v48;
              v156 += v48;
              v157 = (void (**)(webrtc::RtpCodec *__hidden))((char *)v157 + v223 + v221);
              LODWORD(v158) = (_DWORD)v158 + v47;
              goto LABEL_88;
            }
          }
          else
          {
            v179 = 1;
            v47 = v224;
            v48 = v222;
            v178 = v224;
            if (v183)
              goto LABEL_82;
          }
          v183 = 1;
          goto LABEL_82;
        }
        if (!v179)
          v179 = 1;
        v178 = 0;
LABEL_88:
        v184 = v277;
        v185 = v278;
        v186 = v279;
        v187 = v280;
        v188 = v281;
        v189 = v282;
        v190 = v283;
        if (v11 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        {
          if (rtc::g_clock)
          {
            v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
          }
          else
          {
            if (!dword_253EA791C)
              mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
            v49 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
                / dword_253EA791C;
          }
          webrtc::VideoReceiveStreamInterface::Stats::ToString((webrtc::VideoReceiveStreamInterface::Stats *)v225, v49 / 1000000, (char *)v219);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v50, v51, v52, v53, v54, v55, v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
          if (v220 < 0)
          {
            operator delete(v219[0]);
            if ((v253 & 0x80000000) == 0)
              goto LABEL_98;
LABEL_97:
            operator delete(__p);
            goto LABEL_98;
          }
        }
        if (v253 < 0)
          goto LABEL_97;
LABEL_98:
        if (v227 && SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v226.__r_.__value_.__l.__data_);
        v57 = v12[1];
        v58 = v12[2];
        if (v57 < v58)
        {
          v59 = std::construct_at[abi:sn180100]<cricket::VideoReceiverInfo,cricket::VideoReceiverInfo&,cricket::VideoReceiverInfo*>(v57, (uint64_t)&v156)+ 728;
          goto LABEL_168;
        }
        v60 = 0x2FD2FD2FD2FD2FD3 * ((uint64_t)(v57 - *v12) >> 3);
        v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) > 0x5A05A05A05A05ALL)
          goto LABEL_210;
        v62 = 0x2FD2FD2FD2FD2FD3 * ((uint64_t)(v58 - *v12) >> 3);
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0x2D02D02D02D02DLL)
          v63 = 0x5A05A05A05A05ALL;
        else
          v63 = v61;
        if (v63)
        {
          if (v63 > 0x5A05A05A05A05ALL)
LABEL_211:
            std::__throw_bad_array_new_length[abi:sn180100]();
          v64 = (char *)operator new(728 * v63);
        }
        else
        {
          v64 = 0;
        }
        v65 = (uint64_t)&v64[728 * v60];
        v66 = &v64[728 * v63];
        std::construct_at[abi:sn180100]<cricket::VideoReceiverInfo,cricket::VideoReceiverInfo&,cricket::VideoReceiverInfo*>(v65, (uint64_t)&v156);
        v59 = v65 + 728;
        v67 = (void **)v12[1];
        v152 = (void **)*v12;
        v150 = v65 + 728;
        if (v67 == (void **)*v12)
        {
          *v12 = v65;
          v12[1] = v59;
          v12[2] = (uint64_t)v66;
          if (!v67)
            goto LABEL_168;
          goto LABEL_167;
        }
        v148 = v66;
        v68 = v65;
        do
        {
          v70 = v68 - 728;
          v71 = v67 - 91;
          v72 = *(_OWORD *)(v67 - 91);
          v73 = *(_OWORD *)(v67 - 89);
          v74 = *(_OWORD *)(v67 - 85);
          *(_OWORD *)(v70 + 32) = *(_OWORD *)(v67 - 87);
          *(_OWORD *)(v70 + 48) = v74;
          *(_OWORD *)v70 = v72;
          *(_OWORD *)(v70 + 16) = v73;
          v75 = *(_OWORD *)(v67 - 83);
          v76 = *(_OWORD *)(v67 - 81);
          v77 = *(_OWORD *)(v67 - 79);
          *(_OWORD *)(v70 + 105) = *(_OWORD *)((char *)v67 - 623);
          *(_OWORD *)(v70 + 80) = v76;
          *(_OWORD *)(v70 + 96) = v77;
          *(_OWORD *)(v70 + 64) = v75;
          v78 = (std::string *)(v68 - 600);
          v79 = (const std::string::value_type **)(v67 - 75);
          v155 = v67;
          if (*((char *)v67 - 577) < 0)
          {
            std::string::__init_copy_ctor_external(v78, *v79, (std::string::size_type)*(v67 - 74));
          }
          else
          {
            v80 = *(_OWORD *)v79;
            *(_QWORD *)(v68 - 584) = *(v67 - 73);
            *(_OWORD *)&v78->__r_.__value_.__l.__data_ = v80;
          }
          v81 = (uint64_t)*(v67 - 72);
          *(_QWORD *)(v68 - 560) = 0;
          v82 = (char **)(v68 - 560);
          *(_QWORD *)(v68 - 576) = v81;
          *(_QWORD *)(v68 - 568) = 0;
          *(_QWORD *)(v68 - 552) = 0;
          v84 = *(v67 - 71);
          v83 = v71[21];
          v85 = v83 - v84;
          if (v83 != v84)
          {
            if (v85 < 0)
              goto LABEL_210;
            v86 = (char *)operator new(v83 - v84);
            *(_QWORD *)(v68 - 568) = v86;
            *v82 = v86;
            v87 = &v86[16 * (v85 >> 4)];
            *(_QWORD *)(v68 - 552) = v87;
            memcpy(v86, v84, v85);
            *v82 = v87;
          }
          *(_QWORD *)(v68 - 544) = 0;
          *(_QWORD *)(v68 - 536) = 0;
          v88 = (char **)(v68 - 536);
          *(_QWORD *)(v68 - 528) = 0;
          v90 = v71[23];
          v89 = v71[24];
          v91 = v89 - v90;
          if (v89 != v90)
          {
            if (v91 < 0)
              goto LABEL_210;
            v92 = (char *)operator new(v89 - v90);
            *(_QWORD *)(v68 - 544) = v92;
            *v88 = v92;
            v93 = &v92[16 * (v91 >> 4)];
            *(_QWORD *)(v68 - 528) = v93;
            memcpy(v92, v90, v91);
            *v88 = v93;
          }
          *(_OWORD *)(v68 - 520) = *((_OWORD *)v71 + 13);
          v94 = *((_OWORD *)v71 + 14);
          v95 = *((_OWORD *)v71 + 15);
          v96 = *((_OWORD *)v71 + 17);
          *(_OWORD *)(v68 - 472) = *((_OWORD *)v71 + 16);
          *(_OWORD *)(v68 - 456) = v96;
          *(_OWORD *)(v68 - 504) = v94;
          *(_OWORD *)(v68 - 488) = v95;
          v97 = *((_OWORD *)v71 + 18);
          v98 = *((_OWORD *)v71 + 19);
          v99 = *((_OWORD *)v71 + 20);
          *(_DWORD *)(v68 - 392) = *((_DWORD *)v71 + 84);
          *(_OWORD *)(v68 - 424) = v98;
          *(_OWORD *)(v68 - 408) = v99;
          *(_OWORD *)(v68 - 440) = v97;
          *(_QWORD *)(v68 - 376) = 0;
          *(_QWORD *)(v68 - 368) = 0;
          *(_QWORD *)(v68 - 384) = 0;
          v101 = v71[43];
          v100 = v71[44];
          v102 = v100 - v101;
          if (v100 != v101)
          {
            v154 = v68;
            v103 = 0xAAAAAAAAAAAAAAABLL * (v102 >> 4);
            if (v103 >= 0x555555555555556)
              goto LABEL_210;
            v104 = (char *)operator new(v102);
            v105 = 0;
            *(_QWORD *)(v68 - 384) = v104;
            v153 = (_QWORD *)(v68 - 376);
            *(_QWORD *)(v68 - 376) = v104;
            *(_QWORD *)(v68 - 368) = &v104[48 * v103];
            do
            {
              v106 = (std::string *)&v104[v105];
              v107 = (__int128 *)&v101[v105];
              if ((char)v101[v105 + 23] < 0)
              {
                std::string::__init_copy_ctor_external(v106, *(const std::string::value_type **)v107, *((_QWORD *)v107 + 1));
              }
              else
              {
                v108 = *v107;
                v106->__r_.__value_.__r.__words[2] = *((_QWORD *)v107 + 2);
                *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v108;
              }
              v109 = &v104[v105];
              *((_QWORD *)v109 + 3) = 0;
              *((_QWORD *)v109 + 4) = 0;
              *((_QWORD *)v109 + 5) = 0;
              v111 = *(_BYTE **)&v101[v105 + 24];
              v110 = *(_BYTE **)&v101[v105 + 32];
              v112 = v110 - v111;
              if (v110 != v111)
              {
                if (v112 < 0)
                  goto LABEL_210;
                v113 = (char *)operator new(v110 - v111);
                *((_QWORD *)v109 + 3) = v113;
                *((_QWORD *)v109 + 4) = v113;
                v114 = &v113[4 * (v112 >> 2)];
                *((_QWORD *)v109 + 5) = v114;
                memcpy(v113, v111, v112);
                *((_QWORD *)v109 + 4) = v114;
              }
              v105 += 48;
            }
            while (&v101[v105] != v100);
            v68 = v154;
            *v153 = &v104[v105];
          }
          *(_BYTE *)(v70 + 368) = 0;
          *(_BYTE *)(v70 + 392) = 0;
          if (*((_BYTE *)v155 - 336))
          {
            v115 = (std::string *)(v70 + 368);
            v116 = (const std::string::value_type **)(v155 - 45);
            if (*((char *)v155 - 337) < 0)
            {
              std::string::__init_copy_ctor_external(v115, *v116, (std::string::size_type)*(v155 - 44));
            }
            else
            {
              v69 = *(_OWORD *)v116;
              *(_QWORD *)(v70 + 384) = *(v155 - 43);
              *(_OWORD *)&v115->__r_.__value_.__l.__data_ = v69;
            }
            *(_BYTE *)(v70 + 392) = 1;
          }
          memcpy((void *)(v68 - 328), v155 - 41, 0x141uLL);
          v67 = v71;
          v68 = v70;
        }
        while (v71 != v152);
        v12 = v149;
        v67 = (void **)*v149;
        v117 = (void **)v149[1];
        v59 = v150;
        *v149 = v70;
        v149[1] = v150;
        v149[2] = (uint64_t)v148;
        if (v117 != v67)
        {
          v11 = v144;
          v14 = v143;
          while (1)
          {
            v118 = v117 - 91;
            if (*((_BYTE *)v117 - 336) && *((char *)v117 - 337) < 0)
            {
              operator delete(*(v117 - 45));
              v119 = v117 - 48;
              v120 = (char *)*(v117 - 48);
              if (v120)
              {
LABEL_147:
                v121 = (char *)*(v117 - 47);
                v122 = v120;
                if (v121 != v120)
                {
                  do
                  {
                    v123 = (void *)*((_QWORD *)v121 - 3);
                    if (v123)
                    {
                      *((_QWORD *)v121 - 2) = v123;
                      operator delete(v123);
                    }
                    if (*(v121 - 25) < 0)
                      operator delete(*((void **)v121 - 6));
                    v121 -= 48;
                  }
                  while (v121 != v120);
                  v122 = *v119;
                }
                *(v117 - 47) = v120;
                operator delete(v122);
              }
            }
            else
            {
              v119 = v117 - 48;
              v120 = (char *)*(v117 - 48);
              if (v120)
                goto LABEL_147;
            }
            v124 = *(v117 - 68);
            if (v124)
            {
              *(v117 - 67) = v124;
              operator delete(v124);
            }
            v125 = *(v117 - 71);
            if (v125)
            {
              *(v117 - 70) = v125;
              operator delete(v125);
            }
            if (*((char *)v117 - 577) < 0)
              operator delete(*(v117 - 75));
            v117 -= 91;
            if (v118 == v67)
            {
              v59 = v150;
              if (!v67)
                goto LABEL_168;
LABEL_167:
              operator delete(v67);
              v59 = v150;
              goto LABEL_168;
            }
          }
        }
        v11 = v144;
        v14 = v143;
        if (v67)
          goto LABEL_167;
LABEL_168:
        v12[1] = v59;
        cricket::VideoReceiverInfo::~VideoReceiverInfo((void **)&v156);
        v126 = v151;
        v127 = (_QWORD *)v151[1];
        if (v127)
        {
          do
          {
            v128 = v127;
            v127 = (_QWORD *)*v127;
          }
          while (v127);
        }
        else
        {
          do
          {
            v128 = (_QWORD *)v126[2];
            v129 = *v128 == (_QWORD)v126;
            v126 = v128;
          }
          while (!v129);
        }
        v13 = v128;
      }
      while (v128 != v14);
    }
    v130 = *v12;
    v131 = v12[1];
    v132 = v147;
    if (*v12 != v131)
    {
      do
      {
        v133 = (char *)v132[95];
        v134 = (char *)v132[96];
        if (v133 != v134)
        {
          if (*(_BYTE *)(v130 + 156))
          {
            while (*(_DWORD *)(v130 + 152) != *((_DWORD *)v133 + 3))
            {
              v133 += 216;
              if (v133 == v134)
                goto LABEL_182;
            }
          }
          else
          {
            v133 += 216 * ((v134 - v133 - 216) / 0xD8uLL) + 216;
          }
        }
        if (v133 != v134)
        {
          (*(void (**)(void **__return_ptr, char *))(*(_QWORD *)v133 + 16))(v225, v133);
          LODWORD(v156) = *((_DWORD *)v133 + 3);
          webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v157, (const webrtc::RtpCodec *)v225);
          v157 = off_24C0BCC30;
          LODWORD(v170) = v235;
          v135 = v146;
          v136 = *v146;
          v137 = (int)v156;
LABEL_192:
          v138 = v135;
          if (v136)
          {
            do
            {
              v135 = (_QWORD *)v136;
              v139 = *(_DWORD *)(v136 + 32);
              if ((int)v156 < v139)
              {
                v136 = *v135;
                goto LABEL_192;
              }
              if (v139 >= (int)v156)
                goto LABEL_200;
              v136 = v135[1];
            }
            while (v136);
            v138 = v135 + 1;
          }
          v140 = operator new(0x98uLL);
          v140[8] = v137;
          webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v140 + 10), (const webrtc::RtpCodec *)&v157);
          *((_QWORD *)v140 + 5) = off_24C0BCC30;
          v140[36] = v170;
          *(_QWORD *)v140 = 0;
          *((_QWORD *)v140 + 1) = 0;
          *((_QWORD *)v140 + 2) = v135;
          *v138 = v140;
          v141 = (_QWORD *)**v145;
          if (v141)
          {
            *v145 = v141;
            v140 = (_DWORD *)*v138;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v149[4], (uint64_t *)v140);
          ++v149[5];
LABEL_200:
          v157 = off_24C0BCBF0;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v167 + 8, v168);
          if ((_QWORD)v166)
          {
            *((_QWORD *)&v166 + 1) = v166;
            operator delete((void *)v166);
          }
          v132 = v147;
          if (v161 < 0)
            operator delete(v158);
          v225[0] = off_24C0BCBF0;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v232, v233);
          if (*(_QWORD *)v230)
          {
            *(_QWORD *)&v230[8] = *(_QWORD *)v230;
            operator delete(*(void **)v230);
          }
          if (v226.__r_.__value_.__s.__data_[15] < 0)
            operator delete(v225[1]);
        }
LABEL_182:
        v130 += 728;
      }
      while (v130 != v131);
    }
  }
  return 1;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::GetStats(uint64_t a1, uint64_t *a2)
{
  cricket::WebRtcVideoReceiveChannel::GetStats((_QWORD *)(a1 - 64), a2);
  return 1;
}

void cricket::WebRtcVideoReceiveChannel::OnPacketReceived(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  __int128 v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  _QWORD v54[2];
  uint64_t (*v55)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v56)(uint64_t);
  _OWORD v57[2];
  _BYTE v58[22];
  void *__p;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  char v66;
  uint64_t v67;
  __int128 v68;
  char v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[22];
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 96);
  if (*v6 != v7)
  {
    v8 = *(unsigned int **)(a1 + 104);
    if (v8)
    {
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = a2[1];
    v70 = *a2;
    v71 = v10;
    *(_OWORD *)v72 = a2[2];
    *(_QWORD *)&v72[14] = *(_QWORD *)((char *)a2 + 46);
    v12 = (_BYTE *)*((_QWORD *)a2 + 7);
    v11 = (_BYTE *)*((_QWORD *)a2 + 8);
    v13 = v11 - v12;
    if (v11 == v12)
    {
      v15 = 0;
      v14 = 0;
      v16 = *((_QWORD *)a2 + 11);
      v50 = *((_QWORD *)a2 + 10);
      v51 = a1;
      if (!v16)
      {
LABEL_34:
        v42 = *((_QWORD *)a2 + 12);
        v41 = *((_QWORD *)a2 + 13);
        v68 = a2[7];
        v69 = *((_BYTE *)a2 + 128);
        v43 = *((_QWORD *)a2 + 17);
        if (v43)
        {
          v44 = (unsigned int *)(v43 + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        v46 = operator new();
        v47 = v71;
        *(_OWORD *)(v46 + 8) = v70;
        *(_QWORD *)v46 = v51;
        *(_OWORD *)(v46 + 24) = v47;
        *(_OWORD *)(v46 + 40) = *(_OWORD *)v72;
        *(_QWORD *)(v46 + 54) = *(_QWORD *)&v72[14];
        *(_QWORD *)(v46 + 64) = v14;
        *(_QWORD *)(v46 + 72) = v15;
        *(_QWORD *)(v46 + 80) = v15;
        *(_QWORD *)(v46 + 88) = v50;
        *(_QWORD *)(v46 + 96) = v16;
        *(_QWORD *)(v46 + 104) = v42;
        *(_QWORD *)(v46 + 112) = v41;
        v48 = v68;
        *(_BYTE *)(v46 + 136) = v69;
        *(_OWORD *)(v46 + 120) = v48;
        *(_QWORD *)(v46 + 144) = v43;
        v49 = (_QWORD *)operator new();
        *v49 = v8;
        v49[1] = v46;
        v49[3] = absl::internal_any_invocable::RemoteManagerNontrivial<cricket::WebRtcVideoReceiveChannel::OnPacketReceived(webrtc::RtpPacketReceived const&)::$_1>;
        v49[4] = absl::internal_any_invocable::RemoteInvoker<false,void,cricket::WebRtcVideoReceiveChannel::OnPacketReceived(webrtc::RtpPacketReceived const&)::$_1 &&>;
        v54[0] = v49;
        v55 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
        v56 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
        (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v7 + 8))(v7, v54, &v53, &v52);
        v55(1, v54, v54);
        return;
      }
LABEL_32:
      v39 = (unsigned int *)(v16 + 24);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      goto LABEL_34;
    }
    if ((v13 & 0x8000000000000000) == 0)
    {
      v14 = (char *)operator new(v11 - v12);
      v15 = &v14[4 * (v13 >> 2)];
      memcpy(v14, v12, v13);
      v16 = *((_QWORD *)a2 + 11);
      v50 = *((_QWORD *)a2 + 10);
      v51 = a1;
      if (!v16)
        goto LABEL_34;
      goto LABEL_32;
    }
LABEL_39:
    abort();
  }
  v17 = a2[1];
  v57[0] = *a2;
  v57[1] = v17;
  *(_OWORD *)v58 = a2[2];
  *(_QWORD *)&v58[14] = *(_QWORD *)((char *)a2 + 46);
  v60 = 0;
  v61 = 0;
  __p = 0;
  v19 = (_BYTE *)*((_QWORD *)a2 + 7);
  v18 = (_BYTE *)*((_QWORD *)a2 + 8);
  v20 = v18 - v19;
  if (v18 != v19)
  {
    if (v20 < 0)
      goto LABEL_39;
    v21 = (char *)operator new(v18 - v19);
    v22 = &v21[4 * (v20 >> 2)];
    __p = v21;
    v61 = v22;
    memcpy(v21, v19, v20);
    v60 = v22;
  }
  v23 = *((_QWORD *)a2 + 11);
  v62 = *((_QWORD *)a2 + 10);
  v63 = v23;
  if (v23)
  {
    v24 = (unsigned int *)(v23 + 24);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = a2[7];
  v64 = a2[6];
  v65 = v26;
  v66 = *((_BYTE *)a2 + 128);
  v27 = *((_QWORD *)a2 + 17);
  v67 = v27;
  if (v27)
  {
    v28 = (unsigned int *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  cricket::WebRtcVideoReceiveChannel::ProcessReceivedPacket(a1, (uint64_t)v57);
  v30 = v67;
  if (v67)
  {
    v31 = (unsigned int *)(v67 + 8);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  v34 = v63;
  if (v63)
  {
    v35 = (unsigned int *)(v63 + 24);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      v38 = *(_QWORD *)(v34 + 16);
      *(_QWORD *)(v34 + 16) = 0;
      if (v38)
        MEMORY[0x20BD0ADD4](v38, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v34, 0x1010C40EE34DA14);
    }
  }
  if (__p)
    operator delete(__p);
}

void cricket::WebRtcVideoReceiveChannel::ProcessReceivedPacket(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  __n128 (*v27)(char, void **, _OWORD *);
  uint64_t (*v28)(uint64_t (***)(_QWORD *));
  _OWORD v29[2];
  _BYTE v30[22];
  void *__p[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *(_OWORD *)(a1 + 568);
  v5 = *(_DWORD *)(a1 + 584);
  v7 = (__int128 *)(a2 + 112);
  v6 = *(_QWORD *)(a2 + 112);
  *(_WORD *)(a2 + 52) = *(_WORD *)(a1 + 588);
  *(_DWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 32) = v4;
  *(_DWORD *)(a2 + 124) = 90000;
  if ((unint64_t)(v6 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
  {
    if (rtc::g_clock)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v8 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
    }
    *(_QWORD *)v7 = v8 / 1000;
  }
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 96))(*(_QWORD *)(a1 + 120));
  v10 = *(_OWORD *)(a2 + 16);
  v29[0] = *(_OWORD *)a2;
  v29[1] = v10;
  *(_OWORD *)v30 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)&v30[14] = *(_QWORD *)(a2 + 46);
  *(_OWORD *)__p = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 72) = 0;
  v32 = v11;
  v33 = v12;
  v34 = *(_QWORD *)(a2 + 88);
  v13 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  v37 = *((_BYTE *)v7 + 16);
  v14 = *v7;
  v35 = v13;
  v36 = v14;
  v15 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v38 = v15;
  v16 = operator new(0x18uLL);
  *v16 = cricket::WebRtcVideoReceiveChannel::MaybeCreateDefaultReceiveStream;
  v16[1] = 0;
  v16[2] = a1;
  v26[0] = v16;
  v26[1] = 24;
  v27 = absl::internal_any_invocable::RemoteManagerTrivial;
  v28 = absl::internal_any_invocable::RemoteInvoker<false,BOOL,std::__bind_front_t<BOOL (cricket::WebRtcVideoReceiveChannel::*)(webrtc::RtpPacketReceived const&),cricket::WebRtcVideoReceiveChannel*> &,webrtc::RtpPacketReceived const&>;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, _QWORD *))(*(_QWORD *)v9 + 8))(v9, 2, v29, v26);
  v27(1, (void **)v26, v26);
  v17 = v38;
  if (v38)
  {
    v18 = (unsigned int *)(v38 + 8);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v21 = v34;
  if (v34)
  {
    v22 = (unsigned int *)(v34 + 24);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      v25 = *(_QWORD *)(v21 + 16);
      *(_QWORD *)(v21 + 16) = 0;
      if (v25)
        MEMORY[0x20BD0ADD4](v25, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v21, 0x1010C40EE34DA14);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::OnPacketReceived(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  cricket::WebRtcVideoReceiveChannel::OnPacketReceived(a1 - 64, a2, a3, a4);
}

uint64_t cricket::WebRtcVideoReceiveChannel::MaybeCreateDefaultReceiveStream(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ReceiveStream;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::string v67;
  char *v68;
  char *v69;
  unint64_t v70;

  if (*(_BYTE *)(a1 + 824))
    return 0;
  v4 = *(unsigned __int8 *)(a2 + 1);
  if (*(_DWORD *)(a1 + 616) == v4 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a1 + 160))
    return 0;
  v5 = *(_DWORD **)(a1 + 544);
  v6 = *(_DWORD **)(a1 + 552);
  if (v5 != v6)
  {
    while (v5[56] != v4 && v5[54] != v4)
    {
      if (v5[58] == v4)
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
        if ((v8 & 0xFF00000000) == 0)
          return 0;
        ReceiveStream = cricket::WebRtcVideoReceiveChannel::FindReceiveStream((char **)a1, v8);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(ReceiveStream + 160) + 152))(*(_QWORD *)(ReceiveStream + 160), *(unsigned int *)(a2 + 12));
        return 1;
      }
      v5 += 62;
      if (v5 == v6)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  if (*(_BYTE *)(a1 + 176))
  {
    if (rtc::g_clock)
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v7 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
    }
    if (!*(_BYTE *)(a1 + 176))
      goto LABEL_61;
    if (v7 / 1000000 - *(_QWORD *)(a1 + 168) <= 499)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t\t", v60, v61, v62, v63, v64, v65, v66, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
      return 0;
    }
  }
  v11 = *(unsigned int *)(a2 + 12);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if ((v12 & 0xFF00000000) != 0)
  {
    v13 = v12;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v13);
  }
  cricket::StreamParams::StreamParams(&v67, (const cricket::StreamParams *)(a1 + 832));
  v21 = v69;
  if ((unint64_t)v69 >= v70)
  {
    v23 = v68;
    v24 = v69 - v68;
    v25 = (v69 - v68) >> 2;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 62)
      goto LABEL_62;
    v27 = v70 - (_QWORD)v68;
    if ((uint64_t)(v70 - (_QWORD)v68) >> 1 > v26)
      v26 = v27 >> 1;
    v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL;
    v29 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v28)
      v29 = v26;
    if (v29)
    {
      if (v29 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v30 = 4 * v29;
      v31 = (char *)operator new(4 * v29);
      v32 = &v31[4 * v25];
      v33 = &v31[v30];
      *(_DWORD *)v32 = v11;
      v22 = v32 + 4;
      if (v21 != v23)
      {
        v34 = v21 - v23 - 4;
        if (v34 < 0x2C)
          goto LABEL_66;
        if ((unint64_t)(v21 - &v31[v24]) < 0x20)
          goto LABEL_66;
        v35 = (v34 >> 2) + 1;
        v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
        v37 = &v21[-v36];
        v32 -= v36;
        v38 = &v31[4 * v25 - 16];
        v39 = (__int128 *)(v21 - 16);
        v40 = v35 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v41 = *v39;
          *((_OWORD *)v38 - 1) = *(v39 - 1);
          *(_OWORD *)v38 = v41;
          v38 -= 32;
          v39 -= 2;
          v40 -= 8;
        }
        while (v40);
        v21 = v37;
        if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_66:
          do
          {
            v42 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v32 - 1) = v42;
            v32 -= 4;
          }
          while (v21 != v23);
        }
      }
      v68 = v32;
      v69 = v22;
      v70 = (unint64_t)v33;
      if (v23)
        operator delete(v23);
      goto LABEL_42;
    }
    goto LABEL_60;
  }
  if (!v69)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_62:
    abort();
  }
  *(_DWORD *)v69 = v11;
  v22 = v21 + 4;
LABEL_42:
  v69 = v22;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v43, v44, v45, v46, v47, v48, v49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  if ((cricket::WebRtcVideoReceiveChannel::AddRecvStream((cricket::WebRtcVideoReceiveChannel *)a1, &v67, 1) & 1) == 0
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v50, v51, v52, v53, v54, v55, v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  }
  v57 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, 0);
  if ((v57 & 0xFF00000000) != 0)
    v58 = v57;
  else
    v58 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v11, v58);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 144))(a1, v11, *(_QWORD *)(a1 + 128));
  cricket::StreamParams::~StreamParams((cricket::StreamParams *)&v67);
  if (rtc::g_clock)
  {
    v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v59 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
        / dword_253EA791C;
  }
  *(_QWORD *)(a1 + 168) = v59 / 1000000;
  result = 1;
  *(_BYTE *)(a1 + 176) = 1;
  return result;
}

uint64_t cricket::WebRtcVideoReceiveChannel::FindReceiveStream(char **this, unsigned int a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;

  if (!a2)
  {
    v3 = (*((uint64_t (**)(char **))*this + 15))(this);
    a2 = v3;
    if ((v3 & 0xFF00000000) == 0)
      return 0;
  }
  v6 = this[10];
  v5 = (char *)(this + 10);
  v4 = v6;
  if (!v6)
    return 0;
  v7 = v5;
  do
  {
    v8 = *((_DWORD *)v4 + 8);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (char **)v4;
    else
      v10 = (char **)(v4 + 8);
    if (v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 != v5 && a2 >= *((_DWORD *)v7 + 8))
    return *((_QWORD *)v7 + 5);
  else
    return 0;
}

uint64_t cricket::WebRtcVideoReceiveChannel::SetInterface(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = result;
  *(_BYTE *)(*(_QWORD *)(result + 24) + 4) = a2 != 0;
  *(_QWORD *)(result + 48) = a2;
  if (*(_BYTE *)(result + 40))
  {
    v3 = *(unsigned int *)(result + 56);
    if (!a2)
      return result;
  }
  else
  {
    v3 = 0;
    if (!a2)
      return result;
  }
  v4 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 5, v3);
  result = *(_QWORD *)(v2 + 48);
  if (v4)
  {
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0, 1, *(unsigned int *)(v2 + 1152));
  }
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 1, 5, v3);
    result = *(_QWORD *)(v2 + 48);
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0, 1, *(unsigned int *)(v2 + 1152));
  }
  return result;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::SetInterface(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = result;
  *(_BYTE *)(*(_QWORD *)(result - 40) + 4) = a2 != 0;
  *(_QWORD *)(result - 16) = a2;
  if (*(_BYTE *)(result - 24))
  {
    v3 = *(unsigned int *)(result - 8);
    if (!a2)
      return result;
  }
  else
  {
    v3 = 0;
    if (!a2)
      return result;
  }
  v4 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 5, v3);
  result = *(_QWORD *)(v2 - 16);
  if (v4)
  {
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0, 1, *(unsigned int *)(v2 + 1088));
  }
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 1, 5, v3);
    result = *(_QWORD *)(v2 - 16);
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0, 1, *(unsigned int *)(v2 + 1088));
  }
  return result;
}

uint64_t cricket::WebRtcVideoReceiveChannel::SetFrameDecryptor(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a1 + 80);
  result = a1 + 80;
  v4 = v5;
  if (v5)
  {
    v6 = result;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != result && *(_DWORD *)(v6 + 32) <= a2)
    {
      v10 = *(_QWORD *)(v6 + 40);
      v11 = *a3;
      if (*a3)
      {
        (**(void (***)(uint64_t))v11)(*a3);
        (**(void (***)(uint64_t))v11)(v11);
      }
      result = *(_QWORD *)(v10 + 352);
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      *(_QWORD *)(v10 + 352) = v11;
      if (*(_QWORD *)(v10 + 160))
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
        v19 = *(_QWORD *)(v10 + 160);
        v20 = v11;
        if (v11)
          (**(void (***)(uint64_t))v11)(v11);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 40))(v19, &v20);
        result = v20;
        if (v20)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      }
      if (v11)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::SetFrameDecryptor(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  return cricket::WebRtcVideoReceiveChannel::SetFrameDecryptor(a1 - 64, a2, a3);
}

uint64_t cricket::WebRtcVideoReceiveChannel::SetBaseMinimumPlayoutDelayMs(char **this, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unsigned int v12;
  BOOL v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v6 = (*((uint64_t (**)(char **))*this + 15))(this);
  if (a2)
  {
    v9 = this[10];
    v8 = (char *)(this + 10);
    v7 = v9;
    if (!v9)
      goto LABEL_16;
    goto LABEL_6;
  }
  *((_DWORD *)this + 34) = a3;
  if ((v6 & 0xFF00000000) == 0)
    return 1;
  a2 = v6;
  v10 = this[10];
  v8 = (char *)(this + 10);
  v7 = v10;
  if (v10)
  {
LABEL_6:
    v11 = v8;
    do
    {
      v12 = *((_DWORD *)v7 + 8);
      v13 = v12 >= a2;
      if (v12 >= a2)
        v14 = (char **)v7;
      else
        v14 = (char **)(v7 + 8);
      if (v13)
        v11 = v7;
      v7 = *v14;
    }
    while (*v14);
    if (v11 == v8 || a2 < *((_DWORD *)v11 + 8))
      goto LABEL_16;
    v23 = *(_QWORD *)(*((_QWORD *)v11 + 5) + 160);
    if (v23)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 64))(v23, a3);
    return 1;
  }
LABEL_16:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  return 0;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::SetBaseMinimumPlayoutDelayMs(cricket::WebRtcVideoReceiveChannel *this, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unsigned int v12;
  BOOL v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this - 8) + 120))((char *)this - 64);
  if (a2)
  {
    v9 = (char *)*((_QWORD *)this + 2);
    v8 = (char *)this + 16;
    v7 = v9;
    if (!v9)
      goto LABEL_16;
    goto LABEL_6;
  }
  *((_DWORD *)this + 18) = a3;
  if ((v6 & 0xFF00000000) == 0)
    return 1;
  a2 = v6;
  v10 = (char *)*((_QWORD *)this + 2);
  v8 = (char *)this + 16;
  v7 = v10;
  if (v10)
  {
LABEL_6:
    v11 = v8;
    do
    {
      v12 = *((_DWORD *)v7 + 8);
      v13 = v12 >= a2;
      if (v12 >= a2)
        v14 = (char **)v7;
      else
        v14 = (char **)(v7 + 8);
      if (v13)
        v11 = v7;
      v7 = *v14;
    }
    while (*v14);
    if (v11 == v8 || a2 < *((_DWORD *)v11 + 8))
      goto LABEL_16;
    v23 = *(_QWORD *)(*((_QWORD *)v11 + 5) + 160);
    if (v23)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 64))(v23, a3);
    return 1;
  }
LABEL_16:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  return 0;
}

uint64_t cricket::WebRtcVideoReceiveChannel::GetBaseMinimumPlayoutDelayMs(cricket::WebRtcVideoReceiveChannel *this, unsigned int a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a2)
  {
    LODWORD(this) = *((_DWORD *)this + 34);
    return this | 0x100000000;
  }
  v4 = (char *)*((_QWORD *)this + 10);
  v2 = (char *)this + 80;
  v3 = v4;
  if (v4)
  {
    v5 = v2;
    do
    {
      v6 = *((_DWORD *)v3 + 8);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (char **)v3;
      else
        v8 = (char **)(v3 + 8);
      if (v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 && *((_DWORD *)v5 + 8) <= a2)
    {
      this = *(cricket::WebRtcVideoReceiveChannel **)(*((_QWORD *)v5 + 5) + 160);
      if (this)
        LODWORD(this) = (*(uint64_t (**)(cricket::WebRtcVideoReceiveChannel *))(*(_QWORD *)this + 72))(this);
      return this | 0x100000000;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  return 0;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::GetBaseMinimumPlayoutDelayMs(cricket::WebRtcVideoReceiveChannel *this, unsigned int a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a2)
  {
    LODWORD(this) = *((_DWORD *)this + 18);
    return this | 0x100000000;
  }
  v4 = (char *)*((_QWORD *)this + 2);
  v2 = (char *)this + 16;
  v3 = v4;
  if (v4)
  {
    v5 = v2;
    do
    {
      v6 = *((_DWORD *)v3 + 8);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (char **)v3;
      else
        v8 = (char **)(v3 + 8);
      if (v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 && *((_DWORD *)v5 + 8) <= a2)
    {
      this = *(cricket::WebRtcVideoReceiveChannel **)(*((_QWORD *)v5 + 5) + 160);
      if (this)
        LODWORD(this) = (*(uint64_t (**)(cricket::WebRtcVideoReceiveChannel *))(*(_QWORD *)this + 72))(this);
      return this | 0x100000000;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  return 0;
}

void cricket::WebRtcVideoReceiveChannel::GetSources(cricket::WebRtcVideoReceiveChannel *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (char *)*((_QWORD *)this + 10);
  v4 = (char *)this + 80;
  v5 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = v4;
  do
  {
    v8 = *((_DWORD *)v5 + 8);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (char **)v5;
    else
      v10 = (char **)(v5 + 8);
    if (v9)
      v7 = v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 != v4 && *((_DWORD *)v7 + 8) <= a2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v7 + 5) + 160) + 48))(*(_QWORD *)(*((_QWORD *)v7 + 5) + 160));
  }
  else
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::GetSources(cricket::WebRtcVideoReceiveChannel *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (char *)*((_QWORD *)this + 2);
  v4 = (char *)this + 16;
  v5 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = v4;
  do
  {
    v8 = *((_DWORD *)v5 + 8);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (char **)v5;
    else
      v10 = (char **)(v5 + 8);
    if (v9)
      v7 = v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 != v4 && *((_DWORD *)v7 + 8) <= a2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v7 + 5) + 160) + 48))(*(_QWORD *)(*((_QWORD *)v7 + 5) + 160));
  }
  else
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

uint64_t cricket::`anonymous namespace'::ExtractCodecInformation(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t **a4, void **a5)
{
  void **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  std::string::size_type v14;
  const void **v15;
  _QWORD *v16;
  const void **v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  std::string::size_type v51;
  char *v52;
  __int128 v53;
  char *v54;
  char *v55;
  const std::string::value_type **v56;
  char *v57;
  const std::string::value_type **v58;
  std::string *v59;
  __int128 v60;
  void **v61;
  char *v62;
  const std::string::value_type **v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  const void **v67;
  std::string::value_type *v68;
  const void **v69;
  char *v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  _BYTE *v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  const std::string::value_type **v88;
  char **v89;
  char *v90;
  uint64_t v91;
  void **v92;
  int v93;
  __int128 v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t **v101;
  uint64_t *v102;
  int v103;
  uint64_t **v104;
  int v105;
  _DWORD *v106;
  uint64_t *v107;
  uint64_t *v108;
  unsigned __int16 *v109;
  uint64_t v110;
  int v111;
  int v112;
  BOOL v113;
  uint64_t **v114;
  uint64_t *v115;
  int v116;
  uint64_t **v117;
  int v118;
  _DWORD *v119;
  uint64_t *v120;
  uint64_t **v121;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t **v128;
  uint64_t v129;
  const std::string::value_type **v130;
  const std::string::value_type **v131;
  char *v132;
  uint64_t *v133;
  std::string v134;
  uint64_t **v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 __p;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  std::string::size_type v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v5 = a5;
    v6 = a4;
    v7 = a3;
    v128 = a3 + 1;
    v121 = a4 + 1;
    v127 = result + 248 * a2;
    while (1)
    {
      v129 = result;
      if (*(char *)(result + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)(result + 16), *(_QWORD *)(result + 24));
        result = v129;
      }
      else
      {
        v134 = *(std::string *)(result + 16);
      }
      v136 = 0;
      v137 = 0;
      v135 = (uint64_t **)&v136;
      v10 = *(_QWORD **)(result + 168);
      v11 = (_QWORD *)(result + 176);
      if (v10 != (_QWORD *)(result + 176))
        break;
LABEL_10:
      v138 = 0;
      v13 = (char *)v5[1];
      v12 = (char *)v5[2];
      if (v13 >= v12)
      {
        v39 = 0x4EC4EC4EC4EC4EC5 * ((v13 - (_BYTE *)*v5) >> 3);
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) > 0x276276276276276)
          goto LABEL_187;
        v41 = 0x4EC4EC4EC4EC4EC5 * ((v12 - (_BYTE *)*v5) >> 3);
        if (2 * v41 > v40)
          v40 = 2 * v41;
        if (v41 >= 0x13B13B13B13B13BLL)
          v42 = 0x276276276276276;
        else
          v42 = v40;
        if (!v42)
        {
LABEL_186:
          __break(1u);
LABEL_187:
          abort();
        }
        if (v42 > 0x276276276276276)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v43 = 104 * v42;
        v44 = (char *)operator new(104 * v42);
        v45 = v44;
        v142 = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
        memset(&v134, 0, sizeof(v134));
        v46 = (uint64_t *)v135;
        v143 = v134.__r_.__value_.__r.__words[2];
        v144 = (uint64_t *)v135;
        v47 = (uint64_t)v136;
        v48 = v137;
        v145 = (uint64_t)v136;
        v146 = v137;
        if (v137)
        {
          *((_QWORD *)v136 + 2) = &v145;
          v135 = (uint64_t **)&v136;
          v136 = 0;
          v137 = 0;
        }
        else
        {
          v46 = &v145;
          v144 = &v145;
        }
        v49 = &v44[104 * v39];
        v148 = __p;
        v149 = v140;
        v150 = v141;
        v138 = 0;
        v50 = *(_DWORD *)(v129 + 12);
        *(_OWORD *)v49 = v142;
        v51 = v143;
        v143 = 0;
        v142 = 0uLL;
        *((_QWORD *)v49 + 2) = v51;
        *((_QWORD *)v49 + 3) = v46;
        *((_QWORD *)v49 + 4) = v47;
        v52 = v49 + 32;
        *((_QWORD *)v49 + 5) = v48;
        if (v48)
        {
          *(_QWORD *)(v47 + 16) = v52;
          v47 = 0;
          v144 = &v145;
          v145 = 0;
          v146 = 0;
        }
        else
        {
          *((_QWORD *)v49 + 3) = v52;
        }
        *((_QWORD *)v49 + 6) = 0;
        v53 = v149;
        *(_OWORD *)(v49 + 56) = v148;
        *(_OWORD *)(v49 + 72) = v53;
        *((_QWORD *)v49 + 11) = v150;
        v147 = 0;
        *((_DWORD *)v49 + 24) = v50;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v144, v47);
        if (SHIBYTE(v143) < 0)
        {
          operator delete((void *)v142);
          v54 = &v45[v43];
          v55 = v49 + 104;
          v56 = (const std::string::value_type **)v5[1];
          v130 = (const std::string::value_type **)*v5;
          if (v56 == *v5)
          {
LABEL_137:
            *v5 = v49;
            v5[1] = v55;
            v5[2] = v54;
            if (!v56)
              goto LABEL_149;
            goto LABEL_148;
          }
        }
        else
        {
          v54 = &v45[v43];
          v55 = v49 + 104;
          v56 = (const std::string::value_type **)v5[1];
          v130 = (const std::string::value_type **)*v5;
          if (v56 == *v5)
            goto LABEL_137;
        }
        v125 = v54;
        v126 = v55;
        while (1)
        {
          v57 = v49;
          v58 = v56;
          v59 = (std::string *)(v49 - 104);
          v131 = v56 - 13;
          v132 = v49 - 104;
          if (*((char *)v56 - 81) < 0)
          {
            std::string::__init_copy_ctor_external(v59, *(v56 - 13), (std::string::size_type)*(v56 - 12));
          }
          else
          {
            v60 = *(_OWORD *)(v56 - 13);
            *((_QWORD *)v49 - 11) = *(v56 - 11);
            *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
          }
          *((_QWORD *)v49 - 9) = 0;
          v61 = (void **)(v49 - 72);
          *((_QWORD *)v49 - 10) = v49 - 72;
          v62 = v49 - 80;
          *((_QWORD *)v49 - 8) = 0;
          v63 = (const std::string::value_type **)*(v58 - 10);
          if (v63 != v58 - 9)
            break;
LABEL_81:
          *((_QWORD *)v57 - 7) = 0;
          v64 = (unint64_t)*(v58 - 7);
          v56 = v131;
          v49 = v132;
          if (v64 >= 2)
          {
            if ((v64 & 1) != 0)
            {
              absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom((unint64_t *)v57 - 7, (unint64_t *)v58 - 7);
            }
            else
            {
              *((_QWORD *)v57 - 7) = v64;
              v65 = *((_OWORD *)v58 - 3);
              v66 = *((_OWORD *)v58 - 2);
              *((_QWORD *)v57 - 2) = *(v58 - 2);
              *((_OWORD *)v57 - 3) = v65;
              *((_OWORD *)v57 - 2) = v66;
            }
          }
          *((_DWORD *)v57 - 2) = *((_DWORD *)v58 - 2);
          if (v131 == v130)
          {
            v5 = a5;
            v56 = (const std::string::value_type **)*a5;
            v92 = (void **)a5[1];
            *a5 = v132;
            a5[1] = v126;
            a5[2] = v125;
            if (v92 == (void **)v56)
            {
              v7 = a3;
              v6 = a4;
            }
            else
            {
              v7 = a3;
              v6 = a4;
              do
              {
                while (1)
                {
                  if ((*(_BYTE *)(v92 - 7) & 1) != 0)
                    operator delete(*(v92 - 6));
                  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v92 - 10), (uint64_t)*(v92 - 9));
                  if (*((char *)v92 - 81) < 0)
                    break;
                  v92 -= 13;
                  if (v92 == (void **)v56)
                    goto LABEL_147;
                }
                operator delete(*(v92 - 13));
                v92 -= 13;
              }
              while (v92 != (void **)v56);
            }
LABEL_147:
            v55 = v126;
            if (!v56)
              goto LABEL_149;
LABEL_148:
            operator delete(v56);
            goto LABEL_149;
          }
        }
LABEL_85:
        v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)v57 - 10, (uint64_t *)v57 - 9, (uint64_t **)&v142, &v133, (uint64_t)(v63 + 4));
        if (*v67)
        {
          v68 = (std::string::value_type *)v63[1];
          if (!v68)
            goto LABEL_119;
          goto LABEL_113;
        }
        v69 = v67;
        v70 = (char *)operator new(0x50uLL);
        v71 = (std::string *)(v70 + 32);
        if (*((char *)v63 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v71, v63[4], (std::string::size_type)v63[5]);
          v73 = (std::string *)(v70 + 56);
          if ((*((char *)v63 + 79) & 0x80000000) == 0)
            goto LABEL_90;
        }
        else
        {
          v72 = *((_OWORD *)v63 + 2);
          *((_QWORD *)v70 + 6) = v63[6];
          *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
          v73 = (std::string *)(v70 + 56);
          if ((*((char *)v63 + 79) & 0x80000000) == 0)
          {
LABEL_90:
            v74 = *(_OWORD *)(v63 + 7);
            v73->__r_.__value_.__r.__words[2] = (std::string::size_type)v63[9];
            *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
            goto LABEL_93;
          }
        }
        std::string::__init_copy_ctor_external(v73, v63[7], (std::string::size_type)v63[8]);
LABEL_93:
        v75 = v142;
        *(_QWORD *)v70 = 0;
        *((_QWORD *)v70 + 1) = 0;
        *((_QWORD *)v70 + 2) = v75;
        *v69 = v70;
        v76 = **(_QWORD ***)v62;
        if (v76)
        {
          *(_QWORD *)v62 = v76;
          v70 = (char *)*v69;
        }
        v77 = (char *)*v61;
        v113 = v70 == *v61;
        v70[24] = v113;
        if (v113)
        {
LABEL_112:
          ++*((_QWORD *)v57 - 8);
          v68 = (std::string::value_type *)v63[1];
          if (!v68)
            goto LABEL_119;
          goto LABEL_113;
        }
        while (1)
        {
          v78 = *((_QWORD *)v70 + 2);
          if (*(_BYTE *)(v78 + 24))
            goto LABEL_112;
          v79 = *(char **)(v78 + 16);
          v80 = *(_QWORD *)v79;
          if (*(_QWORD *)v79 == v78)
          {
            v83 = *((_QWORD *)v79 + 1);
            if (!v83 || (v84 = *(unsigned __int8 *)(v83 + 24), v81 = (_BYTE *)(v83 + 24), v84))
            {
              if (*(char **)v78 == v70)
              {
                *(_BYTE *)(v78 + 24) = 1;
                v79[24] = 0;
                v87 = *(_QWORD *)(v78 + 8);
                *(_QWORD *)v79 = v87;
                if (v87)
                  goto LABEL_110;
              }
              else
              {
                v85 = *(uint64_t **)(v78 + 8);
                v86 = *v85;
                *(_QWORD *)(v78 + 8) = *v85;
                if (v86)
                {
                  *(_QWORD *)(v86 + 16) = v78;
                  v79 = *(char **)(v78 + 16);
                }
                v85[2] = (uint64_t)v79;
                *(_QWORD *)(*(_QWORD *)(v78 + 16) + 8 * (**(_QWORD **)(v78 + 16) != v78)) = v85;
                *v85 = v78;
                *(_QWORD *)(v78 + 16) = v85;
                v79 = (char *)v85[2];
                v78 = *(_QWORD *)v79;
                *((_BYTE *)v85 + 24) = 1;
                v79[24] = 0;
                v87 = *(_QWORD *)(v78 + 8);
                *(_QWORD *)v79 = v87;
                if (v87)
LABEL_110:
                  *(_QWORD *)(v87 + 16) = v79;
              }
              *(_QWORD *)(v78 + 16) = *((_QWORD *)v79 + 2);
              *(_QWORD *)(*((_QWORD *)v79 + 2) + 8 * (**((_QWORD **)v79 + 2) != (_QWORD)v79)) = v78;
              *(_QWORD *)(v78 + 8) = v79;
              *((_QWORD *)v79 + 2) = v78;
              goto LABEL_112;
            }
          }
          else if (!v80 || (v82 = *(unsigned __int8 *)(v80 + 24), v81 = (_BYTE *)(v80 + 24), v82))
          {
            if (*(char **)v78 == v70)
            {
              v91 = *((_QWORD *)v70 + 1);
              *(_QWORD *)v78 = v91;
              if (v91)
              {
                *(_QWORD *)(v91 + 16) = v78;
                v79 = *(char **)(v78 + 16);
              }
              *((_QWORD *)v70 + 2) = v79;
              *(_QWORD *)(*(_QWORD *)(v78 + 16) + 8 * (**(_QWORD **)(v78 + 16) != v78)) = v70;
              *((_QWORD *)v70 + 1) = v78;
              *(_QWORD *)(v78 + 16) = v70;
              v79 = (char *)*((_QWORD *)v70 + 2);
              v70[24] = 1;
              v79[24] = 0;
              v89 = (char **)*((_QWORD *)v79 + 1);
              v90 = *v89;
              *((_QWORD *)v79 + 1) = *v89;
              if (v90)
LABEL_117:
                *((_QWORD *)v90 + 2) = v79;
            }
            else
            {
              *(_BYTE *)(v78 + 24) = 1;
              v79[24] = 0;
              v89 = (char **)*((_QWORD *)v79 + 1);
              v90 = *v89;
              *((_QWORD *)v79 + 1) = *v89;
              if (v90)
                goto LABEL_117;
            }
            v89[2] = (char *)*((_QWORD *)v79 + 2);
            *(_QWORD *)(*((_QWORD *)v79 + 2) + 8 * (**((_QWORD **)v79 + 2) != (_QWORD)v79)) = v89;
            *v89 = v79;
            *((_QWORD *)v79 + 2) = v89;
            ++*((_QWORD *)v57 - 8);
            v68 = (std::string::value_type *)v63[1];
            if (!v68)
            {
              do
              {
LABEL_119:
                v88 = (const std::string::value_type **)v63[2];
                v113 = *v88 == (const std::string::value_type *)v63;
                v63 = v88;
              }
              while (!v113);
              goto LABEL_84;
            }
            do
            {
LABEL_113:
              v88 = (const std::string::value_type **)v68;
              v68 = *(std::string::value_type **)v68;
            }
            while (v68);
LABEL_84:
            v63 = v88;
            if (v88 == v58 - 9)
              goto LABEL_81;
            goto LABEL_85;
          }
          *(_BYTE *)(v78 + 24) = 1;
          v70 = v79;
          v79[24] = v79 == v77;
          *v81 = 1;
          if (v79 == v77)
            goto LABEL_112;
        }
      }
      if (!v13)
        goto LABEL_186;
      v142 = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
      v14 = v134.__r_.__value_.__r.__words[2];
      memset(&v134, 0, sizeof(v134));
      v143 = v14;
      v144 = (uint64_t *)v135;
      v145 = (uint64_t)v136;
      v146 = v137;
      if (v137)
      {
        *((_QWORD *)v136 + 2) = &v145;
        v135 = (uint64_t **)&v136;
        v136 = 0;
        v137 = 0;
      }
      else
      {
        v144 = &v145;
      }
      v147 = 0;
      v148 = __p;
      v149 = v140;
      v150 = v141;
      v138 = 0;
      v93 = *(_DWORD *)(v129 + 12);
      v94 = v142;
      *((_QWORD *)v13 + 2) = v143;
      *(_OWORD *)v13 = v94;
      v143 = 0;
      v142 = 0uLL;
      *((_QWORD *)v13 + 3) = v144;
      v95 = v145;
      *((_QWORD *)v13 + 4) = v145;
      v96 = v13 + 32;
      v97 = v146;
      *((_QWORD *)v13 + 5) = v146;
      if (v97)
      {
        v98 = 0;
        *(_QWORD *)(v95 + 16) = v96;
        v144 = &v145;
        v145 = 0;
        v146 = 0;
      }
      else
      {
        *((_QWORD *)v13 + 3) = v96;
        v98 = v145;
      }
      *((_QWORD *)v13 + 6) = 0;
      *((_QWORD *)v13 + 6) = v147;
      v99 = v148;
      v100 = v149;
      *((_QWORD *)v13 + 11) = v150;
      *(_OWORD *)(v13 + 72) = v100;
      *(_OWORD *)(v13 + 56) = v99;
      v147 = 0;
      *((_DWORD *)v13 + 24) = v93;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v144, v98);
      if (SHIBYTE(v143) < 0)
        operator delete((void *)v142);
      v55 = v13 + 104;
LABEL_149:
      v5[1] = v55;
      if ((v138 & 1) != 0)
        operator delete((void *)__p);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v135, (uint64_t)v136);
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v134.__r_.__value_.__l.__data_);
      v101 = v128;
      v102 = *v128;
      v9 = v129;
      v103 = *(_DWORD *)(v129 + 232);
LABEL_155:
      v104 = v101;
      if (v102)
      {
        do
        {
          v101 = (uint64_t **)v102;
          v105 = *((_DWORD *)v102 + 7);
          if (v103 < v105)
          {
            v102 = *v101;
            goto LABEL_155;
          }
          if (v105 >= v103)
            goto LABEL_164;
          v102 = v101[1];
        }
        while (v102);
        v104 = v101 + 1;
      }
      v106 = operator new(0x28uLL);
      v106[7] = v103;
      v106[8] = *(_DWORD *)(v129 + 12);
      *(_QWORD *)v106 = 0;
      *((_QWORD *)v106 + 1) = 0;
      *((_QWORD *)v106 + 2) = v101;
      *v104 = (uint64_t *)v106;
      v107 = (uint64_t *)**v7;
      if (v107)
      {
        *v7 = v107;
        v108 = *v104;
      }
      else
      {
        v108 = (uint64_t *)v106;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v7[1], v108);
      v7[2] = (uint64_t *)((char *)v7[2] + 1);
      v9 = v129;
LABEL_164:
      if (*(_BYTE *)(v9 + 80))
      {
        v109 = (unsigned __int16 *)(v9 + 56);
        if (*(char *)(v9 + 79) < 0)
        {
          v110 = *(_QWORD *)(v9 + 64);
          if (v110 < 0)
            goto LABEL_186;
          v109 = *(unsigned __int16 **)v109;
          if (v110)
          {
            if (!v109)
              goto LABEL_186;
          }
        }
        else
        {
          v110 = *(unsigned __int8 *)(v9 + 79);
        }
        if (v110 == 3)
        {
          v111 = *v109;
          v112 = *((unsigned __int8 *)v109 + 2);
          v113 = v111 == *(unsigned __int16 *)"raw" && v112 == cricket::kPacketizationParamRaw[2];
          if (v113)
          {
            v114 = v121;
            v115 = *v121;
            v116 = *(_DWORD *)(v9 + 12);
LABEL_178:
            v117 = v114;
            if (v115)
            {
              do
              {
                v114 = (uint64_t **)v115;
                v118 = *((_DWORD *)v115 + 7);
                if (v116 < v118)
                {
                  v115 = *v114;
                  goto LABEL_178;
                }
                if (v118 >= v116)
                  goto LABEL_5;
                v115 = v114[1];
              }
              while (v115);
              v117 = v114 + 1;
            }
            v119 = operator new(0x20uLL);
            v119[7] = v116;
            *(_QWORD *)v119 = 0;
            *((_QWORD *)v119 + 1) = 0;
            *((_QWORD *)v119 + 2) = v114;
            *v117 = (uint64_t *)v119;
            v120 = (uint64_t *)**v6;
            if (v120)
            {
              *v6 = v120;
              v8 = *v117;
            }
            else
            {
              v8 = (uint64_t *)v119;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v6[1], v8);
            v6[2] = (uint64_t *)((char *)v6[2] + 1);
            v9 = v129;
          }
        }
      }
LABEL_5:
      result = v9 + 248;
      if (result == v127)
        return result;
    }
LABEL_15:
    v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)&v135, (uint64_t *)&v136, (uint64_t **)&v142, &v133, (uint64_t)(v10 + 4));
    if (*v15)
    {
      v16 = (_QWORD *)v10[1];
      if (!v16)
        goto LABEL_49;
      goto LABEL_43;
    }
    v17 = v15;
    v18 = (char *)operator new(0x50uLL);
    v19 = (std::string *)(v18 + 32);
    if (*((char *)v10 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)v10[4], v10[5]);
      v21 = (std::string *)(v18 + 56);
      if ((*((char *)v10 + 79) & 0x80000000) == 0)
        goto LABEL_20;
    }
    else
    {
      v20 = *((_OWORD *)v10 + 2);
      *((_QWORD *)v18 + 6) = v10[6];
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
      v21 = (std::string *)(v18 + 56);
      if ((*((char *)v10 + 79) & 0x80000000) == 0)
      {
LABEL_20:
        v22 = *(_OWORD *)(v10 + 7);
        v21->__r_.__value_.__r.__words[2] = v10[9];
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
        goto LABEL_23;
      }
    }
    std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)v10[7], v10[8]);
LABEL_23:
    v23 = v142;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v23;
    *v17 = v18;
    if (*v135)
    {
      v135 = (uint64_t **)*v135;
      v18 = (char *)*v17;
    }
    v24 = (uint64_t)v136;
    v113 = v18 == v136;
    v18[24] = v18 == v136;
    if (v113)
    {
LABEL_42:
      ++v137;
      v16 = (_QWORD *)v10[1];
      if (!v16)
        goto LABEL_49;
      goto LABEL_43;
    }
    while (1)
    {
      v25 = *((_QWORD *)v18 + 2);
      if (*(_BYTE *)(v25 + 24))
        goto LABEL_42;
      v26 = *(_BYTE **)(v25 + 16);
      v27 = *(_QWORD *)v26;
      if (*(_QWORD *)v26 == v25)
      {
        v30 = *((_QWORD *)v26 + 1);
        if (!v30 || (v31 = *(unsigned __int8 *)(v30 + 24), v28 = (_BYTE *)(v30 + 24), v31))
        {
          if (*(char **)v25 == v18)
          {
            *(_BYTE *)(v25 + 24) = 1;
            v26[24] = 0;
            v34 = *(_QWORD *)(v25 + 8);
            *(_QWORD *)v26 = v34;
            if (v34)
              goto LABEL_40;
          }
          else
          {
            v32 = *(uint64_t **)(v25 + 8);
            v33 = *v32;
            *(_QWORD *)(v25 + 8) = *v32;
            if (v33)
            {
              *(_QWORD *)(v33 + 16) = v25;
              v26 = *(_BYTE **)(v25 + 16);
            }
            v32[2] = (uint64_t)v26;
            *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * (**(_QWORD **)(v25 + 16) != v25)) = v32;
            *v32 = v25;
            *(_QWORD *)(v25 + 16) = v32;
            v26 = (_BYTE *)v32[2];
            v25 = *(_QWORD *)v26;
            *((_BYTE *)v32 + 24) = 1;
            v26[24] = 0;
            v34 = *(_QWORD *)(v25 + 8);
            *(_QWORD *)v26 = v34;
            if (v34)
LABEL_40:
              *(_QWORD *)(v34 + 16) = v26;
          }
          *(_QWORD *)(v25 + 16) = *((_QWORD *)v26 + 2);
          *(_QWORD *)(*((_QWORD *)v26 + 2) + 8 * (**((_QWORD **)v26 + 2) != (_QWORD)v26)) = v25;
          *(_QWORD *)(v25 + 8) = v26;
          *((_QWORD *)v26 + 2) = v25;
          goto LABEL_42;
        }
      }
      else if (!v27 || (v29 = *(unsigned __int8 *)(v27 + 24), v28 = (_BYTE *)(v27 + 24), v29))
      {
        if (*(char **)v25 == v18)
        {
          v38 = *((_QWORD *)v18 + 1);
          *(_QWORD *)v25 = v38;
          if (v38)
          {
            *(_QWORD *)(v38 + 16) = v25;
            v26 = *(_BYTE **)(v25 + 16);
          }
          *((_QWORD *)v18 + 2) = v26;
          *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * (**(_QWORD **)(v25 + 16) != v25)) = v18;
          *((_QWORD *)v18 + 1) = v25;
          *(_QWORD *)(v25 + 16) = v18;
          v26 = (_BYTE *)*((_QWORD *)v18 + 2);
          v18[24] = 1;
          v26[24] = 0;
          v36 = (uint64_t *)*((_QWORD *)v26 + 1);
          v37 = *v36;
          *((_QWORD *)v26 + 1) = *v36;
          if (v37)
LABEL_47:
            *(_QWORD *)(v37 + 16) = v26;
        }
        else
        {
          *(_BYTE *)(v25 + 24) = 1;
          v26[24] = 0;
          v36 = (uint64_t *)*((_QWORD *)v26 + 1);
          v37 = *v36;
          *((_QWORD *)v26 + 1) = *v36;
          if (v37)
            goto LABEL_47;
        }
        v36[2] = *((_QWORD *)v26 + 2);
        *(_QWORD *)(*((_QWORD *)v26 + 2) + 8 * (**((_QWORD **)v26 + 2) != (_QWORD)v26)) = v36;
        *v36 = (uint64_t)v26;
        *((_QWORD *)v26 + 2) = v36;
        ++v137;
        v16 = (_QWORD *)v10[1];
        if (!v16)
        {
          do
          {
LABEL_49:
            v35 = (_QWORD *)v10[2];
            v113 = *v35 == (_QWORD)v10;
            v10 = v35;
          }
          while (!v113);
          goto LABEL_14;
        }
        do
        {
LABEL_43:
          v35 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
LABEL_14:
        v10 = v35;
        if (v35 == v11)
          goto LABEL_10;
        goto LABEL_15;
      }
      *(_BYTE *)(v25 + 24) = 1;
      v18 = v26;
      v26[24] = v26 == (_BYTE *)v24;
      *v28 = 1;
      if (v26 == (_BYTE *)v24)
        goto LABEL_42;
    }
  }
  return result;
}

void cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream::CreateReceiveStream(cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[2];
  _QWORD *v18;
  _QWORD v19[2];
  _QWORD v20[7];
  int v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int *v30;
  int v31[4];
  int *v32;
  int v33[4];
  _BYTE v34[21];
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  void *v43;
  void *v44;
  _DWORD *v45;
  __int128 v46;

  if ((*((_DWORD *)this + 94) & 0x80000000) == 0)
  {
    if (*((_DWORD *)this + 95))
    {
      v3 = (char *)*((_QWORD *)this + 49);
      v2 = (char *)*((_QWORD *)this + 50);
      if (v2 - v3 == 4)
      {
        v4 = *((_QWORD *)this + 1);
        v41 = *((_QWORD *)this + 47);
        v42 = *((_DWORD *)this + 96);
        v44 = 0;
        v45 = 0;
        v43 = 0;
        if (v2 != v3)
        {
          v5 = operator new(4uLL);
          v43 = v5;
          v45 = v5 + 1;
          *v5 = *(_DWORD *)v3;
          v44 = v5 + 1;
        }
        v46 = *((_OWORD *)this + 26);
        *((_QWORD *)this + 54) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 72))(v4, &v41);
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
      }
    }
  }
  webrtc::VideoReceiveStreamInterface::Config::Config((webrtc::VideoReceiveStreamInterface::Config *)&v24, (cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream *)((char *)this + 176));
  v6 = *((_QWORD *)this + 54);
  BYTE8(v28) = v6 != 0;
  v29 = v6;
  v7 = *((_QWORD *)this + 1);
  v11[0] = v24;
  v11[1] = v25;
  v24 = 0uLL;
  *(_QWORD *)&v25 = 0;
  v12 = v26;
  v13 = v27;
  v14 = v28;
  v17[0] = 0;
  v17[1] = 0;
  v15 = v6;
  v16 = v17;
  std::map<int,int>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,int>,std::__tree_node<std::__value_type<int,int>,void *> *,long>>>((uint64_t *)&v16, v30, v31);
  v19[0] = 0;
  v19[1] = 0;
  v18 = v19;
  std::set<int>::insert[abi:sn180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t *)&v18, v32, v33);
  *(_OWORD *)v20 = *(_OWORD *)v34;
  *(_QWORD *)((char *)&v20[1] + 5) = *(_QWORD *)&v34[13];
  *(_OWORD *)&v20[3] = v35;
  v35 = 0uLL;
  v8 = v36;
  v9 = v37;
  v36 = 0;
  v37 = 0;
  v20[5] = v8;
  v20[6] = v9;
  v21 = v38;
  v22 = v39;
  v10 = v40;
  v40 = 0;
  v23 = v10;
  *((_QWORD *)this + 20) = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 56))(v7, v11);
  webrtc::VideoReceiveStreamInterface::Config::~Config((webrtc::VideoReceiveStreamInterface::Config *)v11);
  webrtc::VideoReceiveStreamInterface::Config::~Config((webrtc::VideoReceiveStreamInterface::Config *)&v24);
}

void cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream::~WebRtcVideoReceiveStream(cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0C6190;
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1), *((_QWORD *)this + 20));
  if (*((_QWORD *)this + 54))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 440));
  v2 = (void *)*((_QWORD *)this + 49);
  if (v2)
  {
    *((_QWORD *)this + 50) = v2;
    operator delete(v2);
  }
  webrtc::VideoReceiveStreamInterface::Config::~Config((cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream *)((char *)this + 176));
  cricket::StreamParams::~StreamParams((cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream *)((char *)this + 16));
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0C6190;
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1), *((_QWORD *)this + 20));
  if (*((_QWORD *)this + 54))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 440));
  v2 = (void *)*((_QWORD *)this + 49);
  if (v2)
  {
    *((_QWORD *)this + 50) = v2;
    operator delete(v2);
  }
  webrtc::VideoReceiveStreamInterface::Config::~Config((cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream *)((char *)this + 176));
  cricket::StreamParams::~StreamParams((cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream *)((char *)this + 16));
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream::RecreateReceiveStream(cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  __int128 v20;
  _QWORD v21[3];
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[3];
  _QWORD *v27;
  __int128 v28;
  _QWORD v29[3];
  _QWORD *v30;
  __int128 v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v29[0]) = 0;
  v32 = 0;
  v2 = *((_QWORD *)this + 20);
  if (v2)
  {
    v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 72))(*((_QWORD *)this + 20));
    v4 = *((_QWORD *)this + 20);
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, _QWORD))(*(_QWORD *)v4 + 80))(v26, v4, &v23, 0);
    if (!v32)
    {
      if (v27)
      {
        if (v27 == v26)
        {
          v30 = v29;
          (*(void (**)(_QWORD *, _QWORD *))(v26[0] + 24))(v26, v29);
        }
        else
        {
          v30 = v27;
          v27 = 0;
        }
      }
      else
      {
        v30 = 0;
      }
      v31 = v28;
      v32 = 1;
      v7 = v27;
      if (v27 != v26)
        goto LABEL_19;
      goto LABEL_24;
    }
    v5 = v30;
    v30 = 0;
    if (v5 == v29)
    {
      v6 = 4;
      v5 = v29;
    }
    else
    {
      if (!v5)
        goto LABEL_13;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
    if (v27)
    {
      if (v27 == v26)
      {
        v30 = v29;
        (*(void (**)(_QWORD *, _QWORD *))(v26[0] + 24))(v26, v29);
      }
      else
      {
        v30 = v27;
        v27 = 0;
      }
    }
    else
    {
      v30 = 0;
    }
    v7 = v27;
    *(_QWORD *)&v31 = v28;
    BYTE8(v31) = BYTE8(v28);
    if (v27 != v26)
    {
LABEL_19:
      if (!v7)
        goto LABEL_26;
      v8 = 5;
LABEL_25:
      (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_26:
      v9 = (__int128 *)*((_QWORD *)&v24 + 1);
      if (*((__int128 **)&v24 + 1) == &v23)
      {
        v10 = 4;
        v9 = &v23;
      }
      else
      {
        if (!*((_QWORD *)&v24 + 1))
          goto LABEL_31;
        v10 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_31:
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1), *((_QWORD *)this + 20));
      *((_QWORD *)this + 20) = 0;
      if (!*((_QWORD *)this + 54))
        goto LABEL_33;
      goto LABEL_32;
    }
LABEL_24:
    v8 = 4;
    v7 = v26;
    goto LABEL_25;
  }
  v3 = 0;
  if (*((_QWORD *)this + 54))
  {
LABEL_32:
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
    *((_QWORD *)this + 54) = 0;
  }
LABEL_33:
  cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream::CreateReceiveStream(this);
  if (v2)
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 20) + 64))(*((_QWORD *)this + 20), v3);
  if (!v32)
    goto LABEL_51;
  v11 = *((_QWORD *)this + 20);
  if (v30)
  {
    if (v30 == v29)
    {
      v19 = v18;
      (*(void (**)(_QWORD *, _BYTE *))(v29[0] + 24))(v29, v18);
    }
    else
    {
      v19 = v30;
      v30 = 0;
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = v31;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v11 + 80))(v21, v11, v18, 0);
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
    goto LABEL_45;
  }
  if (v22)
  {
    v13 = 5;
LABEL_45:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v14 = v19;
  if (v19 == v18)
  {
    v15 = 4;
    v14 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_51;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_51:
  if (*((_BYTE *)this + 528))
  {
    *((_BYTE *)this + 528) = 1;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
  }
  if (v32)
  {
    v16 = v30;
    if (v30 == v29)
    {
      v17 = 4;
      v16 = v29;
    }
    else
    {
      if (!v30)
        return;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
}

uint64_t cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream::OnFrame(cricket::WebRtcVideoReceiveChannel::WebRtcVideoReceiveStream *this, const webrtc::VideoFrame *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = (pthread_mutex_t *)((char *)this + 440);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 440));
  if (rtc::g_clock)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v5 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  v6 = v5 / 1000000;
  v7 = *((_QWORD *)this + 64);
  if (v7 < 0)
  {
    *((_QWORD *)this + 64) = v6;
    v7 = v5 / 1000000;
  }
  v8 = *((_QWORD *)a2 + 3);
  if (v8 >= 1)
    *((_QWORD *)this + 65) = v7 - v6 + v8;
  v9 = *((_QWORD *)this + 63);
  if (v9)
  {
    (*(void (**)(uint64_t, const webrtc::VideoFrame *))(*(_QWORD *)v9 + 16))(v9, a2);
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    return pthread_mutex_unlock(v4);
  }
  return pthread_mutex_unlock(v4);
}

void cricket::WebRtcVideoReceiveChannel::SetRecordableEncodedFrameCallback(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD v38[3];
  _QWORD *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _BYTE v42[24];
  _BYTE *v43;
  char v44;
  char v45;
  _QWORD v46[3];
  _QWORD *v47;
  uint64_t v48;

  v4 = (_QWORD *)a1;
  v48 = *MEMORY[0x24BDAC8D0];
  LODWORD(a1) = a2;
  if (!a2)
  {
    a1 = (*(uint64_t (**)(_QWORD *))(*v4 + 120))(v4);
    if ((a1 & 0xFF00000000) == 0)
      goto LABEL_21;
  }
  v7 = v4[10];
  v6 = v4 + 10;
  v5 = v7;
  if (!v7)
    goto LABEL_21;
  v8 = v6;
  do
  {
    v9 = *(_DWORD *)(v5 + 32);
    v10 = v9 >= a1;
    if (v9 >= a1)
      v11 = (uint64_t *)v5;
    else
      v11 = (uint64_t *)(v5 + 8);
    if (v10)
      v8 = (_QWORD *)v5;
    v5 = *v11;
  }
  while (*v11);
  if (v8 == v6 || a1 < *((_DWORD *)v8 + 8) || (v12 = v8[5]) == 0)
  {
LABEL_21:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    return;
  }
  v13 = (_QWORD *)a3[3];
  if (v13)
  {
    if (v13 != a3)
    {
      v39 = (_QWORD *)a3[3];
      a3[3] = 0;
      v14 = *(_QWORD *)(v12 + 160);
      if (v14)
        goto LABEL_18;
LABEL_25:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
      goto LABEL_50;
    }
    v39 = v38;
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v38);
    v14 = *(_QWORD *)(v12 + 160);
    if (!v14)
      goto LABEL_25;
  }
  else
  {
    v39 = 0;
    v14 = *(_QWORD *)(v12 + 160);
    if (!v14)
      goto LABEL_25;
  }
LABEL_18:
  v15 = v39;
  if (!v39)
  {
    v41 = 0;
    goto LABEL_30;
  }
  if (v39 != v38)
  {
    v41 = v39;
    v39 = 0;
    goto LABEL_32;
  }
  v41 = v40;
  (*(void (**)(_QWORD *, _QWORD *))(v38[0] + 24))(v38, v40);
  v15 = v41;
  if (!v41)
  {
LABEL_30:
    v43 = 0;
    goto LABEL_35;
  }
LABEL_32:
  if (v15 == v40)
  {
    v43 = v42;
    (*(void (**)(_QWORD *, _BYTE *))(v40[0] + 24))(v40, v42);
  }
  else
  {
    v43 = v15;
    v41 = 0;
  }
LABEL_35:
  v44 = 0;
  v45 = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v14 + 80))(v46, v14, v42, 1);
  v30 = v47;
  if (v47 == v46)
  {
    v31 = 4;
    v30 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_40;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_40:
  v32 = v43;
  if (v43 == v42)
  {
    v33 = 4;
    v32 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_45;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_45:
  v34 = v41;
  if (v41 == v40)
  {
    v35 = 4;
    v34 = v40;
    goto LABEL_49;
  }
  if (v41)
  {
    v35 = 5;
LABEL_49:
    (*(void (**)(void))(*v34 + 8 * v35))();
  }
LABEL_50:
  v36 = v39;
  if (v39 == v38)
  {
    v37 = 4;
    v36 = v38;
    goto LABEL_54;
  }
  if (v39)
  {
    v37 = 5;
LABEL_54:
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::SetRecordableEncodedFrameCallback(uint64_t a1, int a2, _QWORD *a3)
{
  cricket::WebRtcVideoReceiveChannel::SetRecordableEncodedFrameCallback(a1 - 64, a2, a3);
}

void cricket::WebRtcVideoReceiveChannel::ClearRecordableEncodedFrameCallback(unint64_t this, int a2)
{
  cricket::WebRtcVideoReceiveChannel *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v2 = (cricket::WebRtcVideoReceiveChannel *)this;
  v35 = *MEMORY[0x24BDAC8D0];
  LODWORD(this) = a2;
  if (!a2)
  {
    this = (*(uint64_t (**)(cricket::WebRtcVideoReceiveChannel *))(*(_QWORD *)v2 + 120))(v2);
    if ((this & 0xFF00000000) == 0)
      goto LABEL_19;
  }
  v5 = (char *)*((_QWORD *)v2 + 10);
  v4 = (char *)v2 + 80;
  v3 = v5;
  if (!v5)
    goto LABEL_19;
  v6 = v4;
  do
  {
    v7 = *((_DWORD *)v3 + 8);
    v8 = v7 >= this;
    if (v7 >= this)
      v9 = (char **)v3;
    else
      v9 = (char **)(v3 + 8);
    if (v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 == v4 || this < *((_DWORD *)v6 + 8) || (v10 = *((_QWORD *)v6 + 5)) == 0)
  {
LABEL_19:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    return;
  }
  v11 = *(_QWORD *)(v10 + 160);
  if (!v11)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    return;
  }
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, _QWORD))(*(_QWORD *)v11 + 80))(v33, v11, &v30, 0);
  v12 = v34;
  if (v34 == v33)
  {
    v13 = 4;
    v12 = v33;
    goto LABEL_25;
  }
  if (v34)
  {
    v13 = 5;
LABEL_25:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v28 = (__int128 *)*((_QWORD *)&v31 + 1);
  if (*((__int128 **)&v31 + 1) == &v30)
  {
    v29 = 4;
    v28 = &v30;
    goto LABEL_30;
  }
  if (*((_QWORD *)&v31 + 1))
  {
    v29 = 5;
LABEL_30:
    (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::ClearRecordableEncodedFrameCallback(cricket::WebRtcVideoReceiveChannel *this, int a2)
{
  cricket::WebRtcVideoReceiveChannel::ClearRecordableEncodedFrameCallback((unint64_t)this - 64, a2);
}

void cricket::WebRtcVideoReceiveChannel::RequestRecvKeyFrame(unint64_t this, int a2)
{
  cricket::WebRtcVideoReceiveChannel *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = (cricket::WebRtcVideoReceiveChannel *)this;
  LODWORD(this) = a2;
  if (!a2)
  {
    this = (*(uint64_t (**)(cricket::WebRtcVideoReceiveChannel *))(*(_QWORD *)v2 + 120))(v2);
    if ((this & 0xFF00000000) == 0)
      goto LABEL_17;
  }
  v5 = (char *)*((_QWORD *)v2 + 10);
  v4 = (char *)v2 + 80;
  v3 = v5;
  if (!v5)
    goto LABEL_17;
  v6 = v4;
  do
  {
    v7 = *((_DWORD *)v3 + 8);
    v8 = v7 >= this;
    if (v7 >= this)
      v9 = (char **)v3;
    else
      v9 = (char **)(v3 + 8);
    if (v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 != v4 && this >= *((_DWORD *)v6 + 8) && (v10 = *((_QWORD *)v6 + 5)) != 0)
  {
    v11 = *(_QWORD *)(v10 + 160);
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11);
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
    }
  }
  else
  {
LABEL_17:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_video_engine.cc");
  }
}

void `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::RequestRecvKeyFrame(cricket::WebRtcVideoReceiveChannel *this, int a2)
{
  cricket::WebRtcVideoReceiveChannel::RequestRecvKeyFrame((unint64_t)this - 64, a2);
}

_QWORD *cricket::WebRtcVideoReceiveChannel::SetDepacketizerToDecoderFrameTransformer(_QWORD *result, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  if (a2)
  {
    v4 = result[10];
    result += 10;
    v3 = v4;
    if (v4)
    {
      v5 = result;
      do
      {
        v6 = *(_DWORD *)(v3 + 32);
        v7 = v6 >= a2;
        if (v6 >= a2)
          v8 = (uint64_t *)v3;
        else
          v8 = (uint64_t *)(v3 + 8);
        if (v7)
          v5 = (_QWORD *)v3;
        v3 = *v8;
      }
      while (*v8);
      if (v5 != result && *((_DWORD *)v5 + 8) <= a2)
      {
        v9 = v5[5];
        v10 = (_QWORD *)*a3;
        *a3 = 0;
        if (v10)
          (*(void (**)(_QWORD *))*v10)(v10);
        result = *(_QWORD **)(v9 + 368);
        if (result)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        *(_QWORD *)(v9 + 368) = v10;
        v11 = *(_QWORD *)(v9 + 160);
        if (v11)
        {
          v14 = v10;
          if (v10)
            (*(void (**)(_QWORD *))*v10)(v10);
          (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v11 + 32))(v11, &v14);
          result = v14;
          if (v14)
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
        }
        if (v10)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
      }
    }
  }
  else
  {
    v12 = (_QWORD *)*a3;
    *a3 = 0;
    v13 = result[123];
    result[123] = v12;
    if (v13)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return result;
}

_QWORD *`non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::SetDepacketizerToDecoderFrameTransformer(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  return cricket::WebRtcVideoReceiveChannel::SetDepacketizerToDecoderFrameTransformer((_QWORD *)(a1 - 64), a2, a3);
}

uint64_t cricket::WebRtcVideoEngine::send_codecs(cricket::WebRtcVideoEngine *this)
{
  return (*(uint64_t (**)(cricket::WebRtcVideoEngine *, uint64_t))(*(_QWORD *)this + 56))(this, 1);
}

uint64_t cricket::WebRtcVideoEngine::recv_codecs(cricket::WebRtcVideoEngine *this)
{
  return (*(uint64_t (**)(cricket::WebRtcVideoEngine *, uint64_t))(*(_QWORD *)this + 64))(this, 1);
}

uint64_t cricket::WebRtcVideoSendChannel::media_type(cricket::WebRtcVideoSendChannel *this)
{
  return 1;
}

uint64_t cricket::WebRtcVideoSendChannel::AsVideoSendChannel(cricket::WebRtcVideoSendChannel *this)
{
  return (uint64_t)this + 64;
}

void cricket::WebRtcVideoSendChannel::AsVoiceSendChannel(cricket::WebRtcVideoSendChannel *this)
{
  rtc::webrtc_checks_impl::UnreachableCodeReached(this);
}

BOOL cricket::WebRtcVideoSendChannel::HasNetworkInterface(cricket::WebRtcVideoSendChannel *this)
{
  return *((_QWORD *)this + 6) != 0;
}

uint64_t cricket::WebRtcVideoSendChannel::SetExtmapAllowMixed(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

uint64_t cricket::WebRtcVideoSendChannel::ExtmapAllowMixed(cricket::WebRtcVideoSendChannel *this)
{
  return *((unsigned __int8 *)this + 8);
}

__n128 cricket::WebRtcVideoSendChannel::SetSendCodecChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;

  v4 = a1 + 1120;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 1136))(1, v4, v4);
  *(_QWORD *)(a1 + 1136) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 1144) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a2 + 16))(0, a2, v4);
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 1136) = result;
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

__n128 cricket::WebRtcVideoSendChannel::SetSsrcListChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;

  v4 = a1 + 1152;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 1168))(1, v4, v4);
  *(_QWORD *)(a1 + 1168) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 1176) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a2 + 16))(0, a2, v4);
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 1168) = result;
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t cricket::WebRtcVideoSendChannel::SendCodecRtcpMode(cricket::WebRtcVideoSendChannel *this)
{
  if (*((_BYTE *)this + 713))
    return 2;
  else
    return 1;
}

BOOL cricket::WebRtcVideoSendChannel::SendCodecHasLntf(cricket::WebRtcVideoSendChannel *this, const cricket::Codec *a2)
{
  return *((_BYTE *)this + 488) && cricket::HasLntf((_BOOL8)this + 240, a2);
}

BOOL cricket::WebRtcVideoSendChannel::SendCodecHasNack(cricket::WebRtcVideoSendChannel *this, const cricket::Codec *a2)
{
  return *((_BYTE *)this + 488) && cricket::HasNack((_BOOL8)this + 240, a2);
}

uint64_t cricket::WebRtcVideoSendChannel::SendCodecRtxTime(cricket::WebRtcVideoSendChannel *this)
{
  if (*((_BYTE *)this + 488))
    return *(_QWORD *)((char *)this + 476);
  else
    return 0;
}

void `non-virtual thunk to'cricket::WebRtcVideoSendChannel::AsVoiceSendChannel(cricket::WebRtcVideoSendChannel *this)
{
  rtc::webrtc_checks_impl::UnreachableCodeReached(this);
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoSendChannel::media_type(cricket::WebRtcVideoSendChannel *this)
{
  return 1;
}

BOOL `non-virtual thunk to'cricket::WebRtcVideoSendChannel::HasNetworkInterface(cricket::WebRtcVideoSendChannel *this)
{
  return *((_QWORD *)this - 2) != 0;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SetExtmapAllowMixed(uint64_t this, char a2)
{
  *(_BYTE *)(this - 56) = a2;
  return this;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoSendChannel::ExtmapAllowMixed(cricket::WebRtcVideoSendChannel *this)
{
  return *((unsigned __int8 *)this - 56);
}

BOOL `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SendCodecHasNack(cricket::WebRtcVideoSendChannel *this, const cricket::Codec *a2)
{
  return *((_BYTE *)this + 424) && cricket::HasNack((_BOOL8)this + 176, a2);
}

__n128 `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SetSsrcListChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;

  v4 = a1 + 1088;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 1104))(1, v4, v4);
  *(_QWORD *)(a1 + 1104) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 1112) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a2 + 16))(0, a2, v4);
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 1104) = result;
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

__n128 `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SetSendCodecChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;

  v4 = a1 + 1056;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 1072))(1, v4, v4);
  *(_QWORD *)(a1 + 1072) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 1080) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a2 + 16))(0, a2, v4);
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 1072) = result;
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SendCodecRtcpMode(cricket::WebRtcVideoSendChannel *this)
{
  if (*((_BYTE *)this + 649))
    return 2;
  else
    return 1;
}

BOOL `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SendCodecHasLntf(cricket::WebRtcVideoSendChannel *this, const cricket::Codec *a2)
{
  return *((_BYTE *)this + 424) && cricket::HasLntf((_BOOL8)this + 176, a2);
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoSendChannel::SendCodecRtxTime(cricket::WebRtcVideoSendChannel *this)
{
  if (*((_BYTE *)this + 424))
    return *(_QWORD *)((char *)this + 412);
  else
    return 0;
}

uint64_t cricket::WebRtcVideoReceiveChannel::media_type(cricket::WebRtcVideoReceiveChannel *this)
{
  return 1;
}

uint64_t cricket::WebRtcVideoReceiveChannel::AsVideoReceiveChannel(cricket::WebRtcVideoReceiveChannel *this)
{
  return (uint64_t)this + 64;
}

void cricket::WebRtcVideoReceiveChannel::AsVoiceReceiveChannel(cricket::WebRtcVideoReceiveChannel *this)
{
  rtc::webrtc_checks_impl::UnreachableCodeReached(this);
}

uint64_t cricket::WebRtcVideoReceiveChannel::AddDefaultRecvStreamForTesting(cricket::WebRtcVideoReceiveChannel *this, std::string *a2)
{
  return cricket::WebRtcVideoReceiveChannel::AddRecvStream(this, a2, 1);
}

void `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::AsVoiceReceiveChannel(cricket::WebRtcVideoReceiveChannel *this)
{
  rtc::webrtc_checks_impl::UnreachableCodeReached(this);
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::media_type(cricket::WebRtcVideoReceiveChannel *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVideoReceiveChannel::AddDefaultRecvStreamForTesting(cricket::WebRtcVideoReceiveChannel *this, std::string *a2)
{
  return cricket::WebRtcVideoReceiveChannel::AddRecvStream((cricket::WebRtcVideoReceiveChannel *)((char *)this - 64), a2, 1);
}

unint64_t std::vector<webrtc::RtpHeaderExtensionCapability>::__emplace_back_slow_path<char const* const&,int,webrtc::RtpTransceiverDirection>(void **a1, const char **a2, int *a3, int *a4)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v12;
  char *v13;
  const char *v14;
  char *v15;
  int *v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  int v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  std::string *v30;
  const std::string::value_type **v31;
  void **v32;
  int v34;
  uint64_t v35;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
LABEL_35:
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v5) >> 3) > v7)
    v7 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v5) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v5) >> 3) >= 0x333333333333333)
    v7 = 0x666666666666666;
  if (!v7)
    goto LABEL_34;
  if (v7 > 0x666666666666666)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v12 = 40 * v7;
  v13 = (char *)operator new(40 * v7);
  v14 = *a2;
  if (!v14)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v15 = v13;
  v35 = v12;
  v16 = a4;
  v17 = strlen(v14);
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_35;
  v18 = v17;
  v19 = (unint64_t)&v15[40 * v6];
  v34 = *v16;
  v20 = *a3;
  if (v17 <= 0x16)
  {
    *(_BYTE *)(v19 + 23) = v17;
    v21 = &v15[40 * v6];
    v22 = (const char *)(v19 + v18);
    if (v19 > (unint64_t)v14)
      goto LABEL_17;
    goto LABEL_16;
  }
  v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v17 | 7) != 0x17)
    v23 = v17 | 7;
  v24 = v23 + 1;
  v21 = (char *)operator new(v23 + 1);
  *(_QWORD *)(v19 + 8) = v18;
  *(_QWORD *)(v19 + 16) = v24 | 0x8000000000000000;
  *(_QWORD *)v19 = v21;
  v22 = &v21[v18];
  if (v21 <= v14)
  {
LABEL_16:
    if (v22 <= v14)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_17:
  if (v18)
    memmove(v21, v14, v18);
  v25 = &v15[v35];
  *v22 = 0;
  v26 = &v15[40 * v6];
  *((_DWORD *)v26 + 6) = v20;
  v26[28] = 1;
  v26[32] = 0;
  *((_DWORD *)v26 + 9) = v34;
  v27 = (void *)(v19 + 40);
  if (v4 == v5)
  {
    *a1 = (void *)v19;
    a1[1] = v27;
    a1[2] = v25;
  }
  else
  {
    v28 = 0;
    do
    {
      v30 = (std::string *)(v19 + v28 - 40);
      v31 = (const std::string::value_type **)&v4[v28 - 40];
      if (v4[v28 - 17] < 0)
      {
        std::string::__init_copy_ctor_external(v30, *v31, *(_QWORD *)&v4[v28 - 32]);
      }
      else
      {
        v29 = *(_OWORD *)v31;
        *(_QWORD *)(v19 + v28 - 24) = *(_QWORD *)&v4[v28 - 24];
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v29;
      }
      *(_OWORD *)(v19 + v28 - 16) = *(_OWORD *)&v4[v28 - 16];
      v28 -= 40;
    }
    while (&v4[v28] != v5);
    v4 = (char *)*a1;
    v32 = (void **)a1[1];
    *a1 = (void *)(v19 + v28);
    a1[1] = v27;
    a1[2] = v25;
    while (v32 != (void **)v4)
    {
      if (*((char *)v32 - 17) < 0)
        operator delete(*(v32 - 5));
      v32 -= 5;
    }
  }
  if (v4)
    operator delete(v4);
  return v19 + 40;
}

void cricket::WebRtcVideoSendChannel::ChangedSenderParameters::~ChangedSenderParameters(void **this)
{
  void **v2;
  void **v3;
  void *v4;
  char *v5;
  char *v6;
  void *v7;

  if (*((_BYTE *)this + 344) && *((char *)this + 343) < 0)
  {
    operator delete(this[40]);
    if (!*((_BYTE *)this + 312))
      goto LABEL_14;
  }
  else if (!*((_BYTE *)this + 312))
  {
    goto LABEL_14;
  }
  v2 = (void **)this[36];
  if (v2)
  {
    v3 = (void **)this[37];
    v4 = this[36];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = this[36];
    }
    this[37] = v2;
    operator delete(v4);
  }
LABEL_14:
  if (*((_BYTE *)this + 280))
  {
    v5 = (char *)this[32];
    if (v5)
    {
      v6 = (char *)this[33];
      v7 = this[32];
      if (v6 != v5)
      {
        do
          cricket::Codec::~Codec((cricket::Codec *)(v6 - 248));
        while (v6 != v5);
        v7 = this[32];
      }
      this[33] = v5;
      operator delete(v7);
    }
  }
  if (*((_BYTE *)this + 248))
    cricket::Codec::~Codec((cricket::Codec *)this);
}

void std::vector<cricket::VideoCodecSettings>::__assign_with_size[abi:sn180100]<cricket::VideoCodecSettings*,cricket::VideoCodecSettings*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  cricket::Codec *v16;
  cricket::Codec *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  cricket::Codec *v23;
  cricket::Codec *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0xEF7BDEF7BDEF7BDFLL * ((v8 - *a1) >> 3) >= a4)
  {
    v18 = a1[1];
    if (0xEF7BDEF7BDEF7BDFLL * ((v18 - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        v26 = v9;
      }
      else
      {
        v26 = v9;
        do
        {
          cricket::Codec::operator=(v9, v6);
          v27 = *(_OWORD *)(v6 + 216);
          *(_OWORD *)(v9 + 225) = *(_OWORD *)(v6 + 225);
          *(_OWORD *)(v9 + 216) = v27;
          v6 += 248;
          v9 += 248;
          v26 += 248;
        }
        while (v6 != a3);
        v18 = a1[1];
      }
      while (v18 != v26)
        cricket::Codec::~Codec((cricket::Codec *)(v18 - 248));
      a1[1] = v26;
      return;
    }
    v19 = a2 + 8 * ((v18 - v9) >> 3);
    if (v18 != v9)
    {
      v20 = 8 * ((v18 - v9) >> 3);
      do
      {
        cricket::Codec::operator=(v9, v6);
        v21 = *(_OWORD *)(v6 + 216);
        *(_OWORD *)(v9 + 225) = *(_OWORD *)(v6 + 225);
        *(_OWORD *)(v9 + 216) = v21;
        v6 += 248;
        v9 += 248;
        v20 -= 248;
      }
      while (v20);
      v9 = a1[1];
    }
    v22 = v9;
    if (v19 == a3)
    {
LABEL_26:
      a1[1] = v22;
      return;
    }
    v22 = v9;
    v23 = (cricket::Codec *)v9;
    while (v23)
    {
      v24 = cricket::Codec::Codec(v23, (const cricket::Codec *)v19);
      v25 = *(_OWORD *)(v19 + 216);
      *(_OWORD *)((char *)v24 + 225) = *(_OWORD *)(v19 + 225);
      *(_OWORD *)((char *)v24 + 216) = v25;
      v19 += 248;
      v22 += 248;
      v23 = (cricket::Codec *)((char *)v24 + 248);
      if (v19 == a3)
        goto LABEL_26;
    }
    __break(1u);
LABEL_36:
    abort();
  }
  if (v9)
  {
    v10 = a1[1];
    v11 = (void *)v9;
    if (v10 != v9)
    {
      do
        cricket::Codec::~Codec((cricket::Codec *)(v10 - 248));
      while (v10 != v9);
      v11 = (void *)*a1;
    }
    a1[1] = v9;
    operator delete(v11);
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  if (a4 > 0x108421084210842)
    goto LABEL_36;
  v12 = 0xEF7BDEF7BDEF7BDFLL * (v8 >> 3);
  v13 = 2 * v12;
  if (2 * v12 <= a4)
    v13 = a4;
  v14 = v12 >= 0x84210842108421 ? 0x108421084210842 : v13;
  if (v14 > 0x108421084210842)
    goto LABEL_36;
  v15 = 248 * v14;
  v16 = (cricket::Codec *)operator new(248 * v14);
  *a1 = (uint64_t)v16;
  a1[1] = (uint64_t)v16;
  for (a1[2] = (uint64_t)v16 + v15; v6 != a3; v16 = (cricket::Codec *)((char *)v17 + 248))
  {
    v17 = cricket::Codec::Codec(v16, (const cricket::Codec *)v6);
    *(_OWORD *)((char *)v17 + 216) = *(_OWORD *)(v6 + 216);
    *(_OWORD *)((char *)v17 + 225) = *(_OWORD *)(v6 + 225);
    v6 += 248;
  }
  a1[1] = (uint64_t)v16;
}

void cricket::ToStringIfSet<BOOL>(std::string *a1, const std::string::value_type *a2, _BYTE *a3)
{
  std::string::size_type size;
  std::string::size_type v6;
  unsigned int v7;
  std::string *v8;
  std::string::size_type v10;
  const char *v11;
  size_t v12;
  const std::string::value_type *p_dst;
  std::string::size_type v14;
  BOOL v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::value_type *v20;
  std::string::size_type v21;
  int v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string *v25;
  char *v26;
  std::string::size_type v27;
  std::string::value_type *__dst;
  std::string::size_type v29;
  unsigned __int8 v30;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (!a3[1])
    return;
  if (!a2)
    goto LABEL_61;
  std::string::__assign_external(a1, a2);
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (size - 21 < 2)
    {
      v6 = 22;
      goto LABEL_7;
    }
    v8 = a1;
LABEL_11:
    if ((char *)v8 + size <= ": " && &v8->__r_.__value_.__s.__data_[size + 2] > ": ")
      goto LABEL_61;
    *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + size) = 8250;
    v10 = size + 2;
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
    {
      a1->__r_.__value_.__l.__size_ = v10;
      v8->__r_.__value_.__s.__data_[v10] = 0;
      v7 = a3[1];
      if (a3[1])
        goto LABEL_17;
    }
    else
    {
      *((_BYTE *)&a1->__r_.__value_.__s + 23) = v10 & 0x7F;
      v8->__r_.__value_.__s.__data_[v10] = 0;
      v7 = a3[1];
      if (a3[1])
        goto LABEL_17;
    }
LABEL_33:
    v30 = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_34;
  }
  size = a1->__r_.__value_.__l.__size_;
  v6 = (a1->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v6 - size >= 2)
  {
    v8 = (std::string *)a1->__r_.__value_.__r.__words[0];
    goto LABEL_11;
  }
LABEL_7:
  std::string::__grow_by_and_replace(a1, v6, size - v6 + 2, size, size, 0, 2uLL, ": ");
  v7 = a3[1];
  if (!a3[1])
    goto LABEL_33;
LABEL_17:
  if (*a3)
    v11 = "true";
  else
    v11 = "false";
  if (*a3)
    v12 = 4;
  else
    v12 = 5;
  v30 = v12;
  if (v11 >= (const char *)&__dst && ((unint64_t)&__dst | v12) > (unint64_t)v11)
    goto LABEL_61;
  memcpy(&__dst, v11, v12);
  *((_BYTE *)&__dst + v12) = 0;
  v7 = v30;
  if ((v30 & 0x80) == 0)
  {
LABEL_34:
    v14 = v7;
    v15 = v7 == 0;
    p_dst = (const std::string::value_type *)&__dst;
    v16 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_35;
LABEL_29:
    v17 = 22;
    v18 = v16;
    if (22 - v16 >= v14)
      goto LABEL_36;
LABEL_30:
    std::string::__grow_by_and_replace(a1, v17, v14 - v17 + v18, v18, v18, 0, v14, p_dst);
    if (((char)v30 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_51;
  }
  p_dst = __dst;
  v14 = v29;
  v15 = v29 == 0;
  if (!__dst && v29)
    goto LABEL_61;
  v16 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_35:
  v18 = a1->__r_.__value_.__l.__size_;
  v17 = (a1->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v17 - v18 < v14)
    goto LABEL_30;
LABEL_36:
  if (v15)
    goto LABEL_44;
  v19 = a1;
  if ((v16 & 0x80) != 0)
  {
    v19 = (std::string *)a1->__r_.__value_.__r.__words[0];
    v20 = (std::string::value_type *)(a1->__r_.__value_.__r.__words[0] + v18);
    if (v20 > p_dst)
      goto LABEL_42;
LABEL_41:
    if (&v20[v14] <= p_dst)
      goto LABEL_42;
LABEL_61:
    __break(1u);
    return;
  }
  v20 = (char *)a1 + v18;
  if ((char *)a1 + v18 <= p_dst)
    goto LABEL_41;
LABEL_42:
  memmove(v20, p_dst, v14);
  v21 = v18 + v14;
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&a1->__r_.__value_.__s + 23) = v21 & 0x7F;
    v19->__r_.__value_.__s.__data_[v21] = 0;
LABEL_44:
    if (((char)v30 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_51;
  }
  a1->__r_.__value_.__l.__size_ = v21;
  v19->__r_.__value_.__s.__data_[v21] = 0;
  if (((char)v30 & 0x80000000) == 0)
  {
LABEL_45:
    v22 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    if ((v22 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_52;
  }
LABEL_51:
  operator delete(__dst);
  v22 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v22 & 0x80000000) == 0)
  {
LABEL_46:
    v23 = v22;
    if ((unint64_t)v22 - 21 < 2)
    {
      v24 = 22;
LABEL_53:
      std::string::__grow_by_and_replace(a1, v24, v23 - v24 + 2, v23, v23, 0, 2uLL, ", ");
      return;
    }
    v25 = a1;
    v26 = (char *)a1 + v23;
    if ((char *)a1 + v23 > ", ")
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_52:
  v23 = a1->__r_.__value_.__l.__size_;
  v24 = (a1->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v24 - v23 < 2)
    goto LABEL_53;
  v25 = (std::string *)a1->__r_.__value_.__r.__words[0];
  v26 = (char *)(a1->__r_.__value_.__r.__words[0] + v23);
  if (v26 > ", ")
    goto LABEL_57;
LABEL_56:
  if (v26 + 2 > ", ")
    goto LABEL_61;
LABEL_57:
  *(_WORD *)v26 = 8236;
  v27 = v23 + 2;
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
    a1->__r_.__value_.__l.__size_ = v27;
  else
    *((_BYTE *)&a1->__r_.__value_.__s + 23) = v27 & 0x7F;
  v25->__r_.__value_.__s.__data_[v27] = 0;
}

void std::__tree<std::__value_type<unsigned int,std::set<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<std::string>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::set<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<std::string>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::set<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<std::string>>>>::destroy(a1[1]);
    std::__tree<rtc::SocketAddress>::destroy((uint64_t)(a1 + 5), (char *)a1[6]);
    operator delete(a1);
  }
}

uint64_t std::vector<cricket::VideoSenderInfo>::__push_back_slow_path<cricket::VideoSenderInfo const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  void **v14;

  v2 = 0x823EE08FB823EE09 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x8FB823EE08FB82)
    abort();
  if (0x47DC11F7047DC12 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x47DC11F7047DC12 * ((a1[2] - *a1) >> 3);
  if (0x823EE08FB823EE09 * ((a1[2] - *a1) >> 3) >= 0x47DC11F7047DC1)
    v5 = 0x8FB823EE08FB82;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_20:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x8FB823EE08FB82)
    goto LABEL_20;
  v7 = 456 * v5;
  v8 = (char *)operator new(456 * v5);
  v9 = &v8[v7];
  v10 = cricket::VideoSenderInfo::VideoSenderInfo((uint64_t)&v8[456 * v2], a2);
  v11 = v10 + 456;
  v13 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == (void **)*a1)
  {
    *a1 = v10;
    a1[1] = v11;
    a1[2] = (uint64_t)v9;
    if (!v12)
      return v11;
    goto LABEL_14;
  }
  do
  {
    v12 -= 57;
    v10 = cricket::VideoSenderInfo::VideoSenderInfo(v10 - 456, (uint64_t)v12);
  }
  while (v12 != v13);
  v12 = (void **)*a1;
  v14 = (void **)a1[1];
  *a1 = v10;
  a1[1] = v11;
  a1[2] = (uint64_t)v9;
  while (v14 != v12)
  {
    v14 -= 57;
    cricket::VideoSenderInfo::~VideoSenderInfo(v14);
  }
  if (v12)
LABEL_14:
    operator delete(v12);
  return v11;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,cricket::`anonymous namespace'::NonFlexfecReceiveCodecsHaveChanged(std::vector<cricket::VideoCodecSettings>,std::vector<cricket::VideoCodecSettings>)::$_0 &,cricket::VideoCodecSettings*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  void (***v6)(cricket::Codec *__hidden);
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void (**v10)(cricket::Codec *__hidden);
  void (**v11)(cricket::Codec *__hidden);
  __int128 v12;
  void (**v13)(cricket::Codec *__hidden);
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 *v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 *v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  unint64_t v58;
  void (***v59)(cricket::Codec *__hidden);
  int v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  void (**v64)(cricket::Codec *__hidden);
  void (**v65)(cricket::Codec *__hidden);
  __int128 v66;
  void (**v67)(cricket::Codec *__hidden);
  __int128 v68;
  __int128 v69;
  void (**v70)(cricket::Codec *__hidden);
  void (**v71)(cricket::Codec *__hidden);
  void (**v72)(cricket::Codec *__hidden);
  void (**v73)(cricket::Codec *__hidden);
  int64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  void (**v79)(cricket::Codec *__hidden);
  std::string *v80;
  __int128 v81;
  std::string *v82;
  void (**v83)(cricket::Codec *__hidden);
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  void (***v88)(cricket::Codec *__hidden);
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  char v92;
  __n128 result;
  unint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  unint64_t v104;
  void (***v105)(cricket::Codec *__hidden);
  unint64_t v106;
  __int128 *v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  unint64_t v114;
  __int128 v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  void (**v120)(cricket::Codec *__hidden);
  void (**v121)(cricket::Codec *__hidden);
  __int128 v122;
  void (**v123)(cricket::Codec *__hidden);
  __int128 v124;
  __int128 v125;
  void (**v126)(cricket::Codec *__hidden);
  void (**v127)(cricket::Codec *__hidden);
  void (**v128)(cricket::Codec *__hidden);
  void (**v129)(cricket::Codec *__hidden);
  int64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  void (**v134)(cricket::Codec *__hidden);
  std::string *v135;
  __int128 v136;
  std::string *v137;
  void (**v138)(cricket::Codec *__hidden);
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  void (***v144)(cricket::Codec *__hidden);
  unint64_t v145;
  __int128 v146;
  __int128 v147;
  void (**v148)(cricket::Codec *__hidden);
  void (**v149)(cricket::Codec *__hidden);
  __int128 v150;
  void (**v151)(cricket::Codec *__hidden);
  void (**v152)(cricket::Codec *__hidden);
  __int128 v153;
  __int128 v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _OWORD *v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  void (**v164)(cricket::Codec *__hidden);
  void (**v165)(cricket::Codec *__hidden);
  __int128 v166;
  void (**v167)(cricket::Codec *__hidden);
  __int128 v168;
  __int128 v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int64_t v174;
  _OWORD *v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  __int128 v179;
  __int128 *v180;
  std::string *v181;
  __int128 v182;
  std::string *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _OWORD *v187;
  int64_t v188;
  int64_t v189;
  __int128 v190;
  int64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int64_t v206;
  char *v207;
  uint64_t v208;
  __int128 *v209;
  std::string *v210;
  __int128 v211;
  std::string *v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  int v221;
  int v222;
  int64_t v223;
  __int128 v224;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int64_t v236;
  unint64_t v237;
  void (***v238)(cricket::Codec *__hidden);
  unint64_t v239;
  __int128 *v240;
  std::string *v241;
  __int128 v242;
  std::string *v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  __int128 v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  _OWORD *v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  void (**v262)(cricket::Codec *__hidden);
  void (**v263)(cricket::Codec *__hidden);
  __int128 v264;
  void (**v265)(cricket::Codec *__hidden);
  __int128 v266;
  __int128 v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  int64_t v271;
  char *v272;
  uint64_t v273;
  __int128 *v274;
  std::string *v275;
  __int128 v276;
  std::string *v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  __int128 v283;
  __int128 v284;
  uint64_t v285;
  _OWORD *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  void (**v290)(cricket::Codec *__hidden);
  void (**v291)(cricket::Codec *__hidden);
  __int128 v292;
  void (**v293)(cricket::Codec *__hidden);
  __int128 v294;
  __int128 v295;
  _QWORD *v296;
  uint64_t v297;
  void (***v298)(cricket::Codec *__hidden);
  int64_t v299;
  uint64_t v300;
  _OWORD *v301;
  unint64_t v302;
  char *v303;
  uint64_t v304;
  void (***v305)(cricket::Codec *__hidden);
  std::string *v306;
  __int128 v307;
  std::string *v308;
  void (***v309)(cricket::Codec *__hidden);
  uint64_t v310;
  __int128 v311;
  uint64_t v312;
  _OWORD *v313;
  char *v315;
  int v316;
  __int128 v317;
  uint64_t v318;
  uint64_t v319;
  int64_t v320;
  unint64_t v321;
  char *v322;
  uint64_t v323;
  __int128 *v324;
  std::string *v325;
  __int128 v326;
  std::string *v327;
  uint64_t v328;
  uint64_t v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  unint64_t v334;
  _OWORD *v335;
  __int128 *v336;
  __int128 *v337;
  _QWORD *v338;
  void (***v339)(cricket::Codec *__hidden);
  unint64_t v340;
  uint64_t v342;
  __int128 *v344;
  unint64_t v345;
  uint64_t v346;
  int64_t v347;
  uint64_t v348;
  uint64_t v349;
  void (**v350)(cricket::Codec *__hidden);
  unint64_t v351;
  __int128 v352;
  uint64_t v353;
  __int128 v354;
  __int128 v355;
  uint64_t v356;
  char v357;
  uint64_t v358;
  __int128 v359;
  __int128 v360;
  uint64_t v361;
  __int128 v362;
  uint64_t v363;
  char v364;
  unint64_t *v365;
  unint64_t v366;
  uint64_t v367;
  void (***v368)(cricket::Codec *__hidden);
  void (***v369)(cricket::Codec *__hidden);
  void (***v370)(cricket::Codec *__hidden);
  _OWORD v371[2];
  void (**v372)(cricket::Codec *__hidden);
  void (**v373)(cricket::Codec *__hidden);
  __int128 v374;
  void (**v375)(cricket::Codec *__hidden);
  __int128 v376;
  __int128 v377;
  void (**v378)(cricket::Codec *__hidden);
  char v379;
  void (**v380)(cricket::Codec *__hidden);
  __int128 v381;
  __int128 v382;
  void (**v383)(cricket::Codec *__hidden);
  __int128 v384;
  void (**v385)(cricket::Codec *__hidden);
  char v386;
  void (**v387)(cricket::Codec *__hidden);
  void (**v388)(cricket::Codec *__hidden);
  void (**v389)(cricket::Codec *__hidden);
  char *v390;
  char *v391;
  char *v392;
  _BYTE v393[25];
  uint64_t v394;

  v394 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v342 = a2 - 248;
  v6 = (void (***)(cricket::Codec *__hidden))a1;
  while (2)
  {
    a1 = (uint64_t)v6;
    v7 = a2 - (_QWORD)v6;
    v8 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a2 - (_QWORD)v6) >> 3);
    switch(v8)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(_DWORD *)(a2 - 236) <= *(_DWORD *)(a1 + 12))
          return result;
        v148 = *(void (***)(cricket::Codec *__hidden))(a1 + 8);
        v372 = &off_24C0B1418;
        v373 = v148;
        v149 = *(void (***)(cricket::Codec *__hidden))(a1 + 32);
        v6 = &v372;
        v374 = *(_OWORD *)(a1 + 16);
        v375 = v149;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        v376 = *(_OWORD *)(a1 + 40);
        LOBYTE(v377) = 0;
        v379 = 0;
        if (*(_BYTE *)(a1 + 80))
        {
          v150 = *(_OWORD *)(a1 + 56);
          v378 = *(void (***)(cricket::Codec *__hidden))(a1 + 72);
          v377 = v150;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 72) = 0;
          *(_QWORD *)(a1 + 56) = 0;
          v379 = 1;
        }
        v380 = 0;
        v151 = *(void (***)(cricket::Codec *__hidden))(a1 + 88);
        v152 = *(void (***)(cricket::Codec *__hidden))(a1 + 128);
        v153 = *(_OWORD *)(a1 + 112);
        v381 = *(_OWORD *)(a1 + 96);
        v382 = v153;
        v380 = v151;
        v383 = v152;
        *(_QWORD *)(a1 + 88) = 0;
        LOBYTE(v384) = 0;
        v386 = 0;
        if (*(_BYTE *)(a1 + 160))
        {
          v154 = *(_OWORD *)(a1 + 136);
          v385 = *(void (***)(cricket::Codec *__hidden))(a1 + 152);
          v384 = v154;
          *(_QWORD *)(a1 + 144) = 0;
          *(_QWORD *)(a1 + 152) = 0;
          *(_QWORD *)(a1 + 136) = 0;
          v386 = 1;
        }
        v155 = (_QWORD *)(a1 + 176);
        v156 = *(_QWORD *)(a1 + 176);
        v58 = (unint64_t)&v388;
        v387 = *(void (***)(cricket::Codec *__hidden))(a1 + 168);
        v388 = (void (**)(cricket::Codec *__hidden))v156;
        v389 = *(void (***)(cricket::Codec *__hidden))(a1 + 184);
        if (!v389)
          goto LABEL_299;
        *(_QWORD *)(v156 + 16) = &v388;
        *(_QWORD *)(a1 + 168) = v155;
        *v155 = 0;
        *(_QWORD *)(a1 + 184) = 0;
        goto LABEL_300;
      case 3:
        return result;
      case 4:
        return result;
      case 5:
        return result;
      default:
        if (v7 <= 5951)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 == a2)
              return result;
            v157 = a1 + 248;
            if (a1 + 248 == a2)
              return result;
            v158 = 0;
            v159 = v393;
            v160 = a1;
            while (1)
            {
              v163 = v157;
              if (*(_DWORD *)(v160 + 260) > *(_DWORD *)(v160 + 12))
              {
                v164 = *(void (***)(cricket::Codec *__hidden))(v157 + 8);
                v372 = &off_24C0B1418;
                v373 = v164;
                v165 = *(void (***)(cricket::Codec *__hidden))(v163 + 32);
                v374 = *(_OWORD *)(v163 + 16);
                v375 = v165;
                *(_QWORD *)(v163 + 24) = 0;
                *(_QWORD *)(v163 + 32) = 0;
                *(_QWORD *)(v163 + 16) = 0;
                v376 = *(_OWORD *)(v163 + 40);
                LOBYTE(v377) = 0;
                v379 = 0;
                if (*(_BYTE *)(v163 + 80))
                {
                  v166 = *(_OWORD *)(v163 + 56);
                  v378 = *(void (***)(cricket::Codec *__hidden))(v163 + 72);
                  v377 = v166;
                  *(_QWORD *)(v163 + 64) = 0;
                  *(_QWORD *)(v163 + 72) = 0;
                  *(_QWORD *)(v163 + 56) = 0;
                  v379 = 1;
                }
                v380 = 0;
                v380 = *(void (***)(cricket::Codec *__hidden))(v163 + 88);
                v167 = *(void (***)(cricket::Codec *__hidden))(v163 + 128);
                v168 = *(_OWORD *)(v163 + 112);
                v381 = *(_OWORD *)(v163 + 96);
                v382 = v168;
                v383 = v167;
                *(_QWORD *)(v163 + 88) = 0;
                LOBYTE(v384) = 0;
                v386 = 0;
                if (*(_BYTE *)(v163 + 160))
                {
                  v169 = *(_OWORD *)(v163 + 136);
                  v385 = *(void (***)(cricket::Codec *__hidden))(v163 + 152);
                  v384 = v169;
                  *(_QWORD *)(v163 + 144) = 0;
                  *(_QWORD *)(v163 + 152) = 0;
                  *(_QWORD *)(v163 + 136) = 0;
                  v386 = 1;
                }
                v170 = (_QWORD *)(v163 + 176);
                v171 = *(_QWORD *)(v163 + 176);
                v387 = *(void (***)(cricket::Codec *__hidden))(v163 + 168);
                v388 = (void (**)(cricket::Codec *__hidden))v171;
                v389 = *(void (***)(cricket::Codec *__hidden))(v163 + 184);
                if (v389)
                {
                  *(_QWORD *)(v171 + 16) = &v388;
                  *(_QWORD *)(v163 + 168) = v170;
                  *v170 = 0;
                  *(_QWORD *)(v163 + 184) = 0;
                  v390 = 0;
                  v391 = 0;
                  v392 = 0;
                  v172 = *(_QWORD *)(v163 + 192);
                  v173 = *(_QWORD *)(v163 + 200);
                  v174 = v173 - v172;
                  if (v173 == v172)
                    goto LABEL_185;
LABEL_176:
                  v346 = v158;
                  v175 = v159;
                  v176 = 0xAAAAAAAAAAAAAAABLL * (v174 >> 4);
                  if (v176 > 0x555555555555555)
                    goto LABEL_312;
                  v177 = (char *)operator new(v174);
                  v178 = 0;
                  v390 = v177;
                  v391 = v177;
                  v392 = &v177[48 * v176];
                  v159 = v175;
                  v158 = v346;
                  while (1)
                  {
                    v180 = (__int128 *)(v172 + v178);
                    v181 = (std::string *)&v177[v178];
                    if (*(char *)(v172 + v178 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(v181, *(const std::string::value_type **)v180, *((_QWORD *)v180 + 1));
                      v183 = (std::string *)&v177[v178 + 24];
                      v184 = v172 + v178;
                      v185 = v172 + v178 + 24;
                      if ((*(char *)(v172 + v178 + 47) & 0x80000000) == 0)
                      {
LABEL_178:
                        v179 = *(_OWORD *)v185;
                        v183->__r_.__value_.__r.__words[2] = *(_QWORD *)(v185 + 16);
                        *(_OWORD *)&v183->__r_.__value_.__l.__data_ = v179;
                        v178 += 48;
                        if (v172 + v178 == v173)
                          goto LABEL_184;
                        continue;
                      }
                    }
                    else
                    {
                      v182 = *v180;
                      v181->__r_.__value_.__r.__words[2] = *((_QWORD *)v180 + 2);
                      *(_OWORD *)&v181->__r_.__value_.__l.__data_ = v182;
                      v183 = (std::string *)&v177[v178 + 24];
                      v184 = v172 + v178;
                      v185 = v172 + v178 + 24;
                      if ((*(char *)(v172 + v178 + 47) & 0x80000000) == 0)
                        goto LABEL_178;
                    }
                    std::string::__init_copy_ctor_external(v183, *(const std::string::value_type **)v185, *(_QWORD *)(v184 + 32));
                    v178 += 48;
                    if (v172 + v178 == v173)
                    {
LABEL_184:
                      v391 = &v177[v178];
                      goto LABEL_185;
                    }
                  }
                }
                v387 = (void (**)(cricket::Codec *__hidden))&v388;
                v390 = 0;
                v391 = 0;
                v392 = 0;
                v172 = *(_QWORD *)(v163 + 192);
                v173 = *(_QWORD *)(v163 + 200);
                v174 = v173 - v172;
                if (v173 != v172)
                  goto LABEL_176;
LABEL_185:
                *v159 = *(_OWORD *)(v160 + 464);
                *(_OWORD *)((char *)v159 + 9) = *(_OWORD *)(v160 + 473);
                v186 = v158;
                do
                {
                  v187 = (_OWORD *)(a1 + v186);
                  cricket::Codec::operator=(a1 + v186 + 248, a1 + v186);
                  v187[29] = *(_OWORD *)((char *)v187 + 216);
                  *(_OWORD *)((char *)v187 + 473) = *(_OWORD *)((char *)v187 + 225);
                  if (!v186)
                  {
                    v161 = a1;
                    goto LABEL_165;
                  }
                  v186 -= 248;
                }
                while (SHIDWORD(v373) > *((_DWORD *)v187 - 59));
                v161 = a1 + v186 + 248;
LABEL_165:
                cricket::Codec::operator=(v161, (uint64_t)&v372);
                v162 = *(_OWORD *)((char *)v159 + 9);
                *(_OWORD *)((char *)v187 + 216) = *v159;
                *(_OWORD *)((char *)v187 + 225) = v162;
                cricket::Codec::~Codec((cricket::Codec *)&v372);
              }
              v157 = v163 + 248;
              v158 += 248;
              v160 = v163;
              if (v163 + 248 == a2)
                return result;
            }
          }
          if (a1 == a2)
            return result;
          v285 = a1 + 248;
          if (a1 + 248 == a2)
            return result;
          v286 = v393;
          v287 = -2;
          v288 = a1;
          v289 = 1;
          while (1)
          {
            if (*(_DWORD *)(v288 + 260) > *(_DWORD *)(v288 + 12))
            {
              v290 = *(void (***)(cricket::Codec *__hidden))(v285 + 8);
              v372 = &off_24C0B1418;
              v373 = v290;
              v291 = *(void (***)(cricket::Codec *__hidden))(v285 + 32);
              v374 = *(_OWORD *)(v285 + 16);
              v375 = v291;
              *(_QWORD *)(v285 + 24) = 0;
              *(_QWORD *)(v285 + 32) = 0;
              *(_QWORD *)(v285 + 16) = 0;
              v376 = *(_OWORD *)(v285 + 40);
              LOBYTE(v377) = 0;
              v379 = 0;
              if (*(_BYTE *)(v285 + 80))
              {
                v292 = *(_OWORD *)(v285 + 56);
                v378 = *(void (***)(cricket::Codec *__hidden))(v285 + 72);
                v377 = v292;
                *(_QWORD *)(v285 + 64) = 0;
                *(_QWORD *)(v285 + 72) = 0;
                *(_QWORD *)(v285 + 56) = 0;
                v379 = 1;
              }
              v380 = 0;
              v380 = *(void (***)(cricket::Codec *__hidden))(v285 + 88);
              v293 = *(void (***)(cricket::Codec *__hidden))(v285 + 128);
              v294 = *(_OWORD *)(v285 + 112);
              v381 = *(_OWORD *)(v285 + 96);
              v382 = v294;
              v383 = v293;
              *(_QWORD *)(v285 + 88) = 0;
              LOBYTE(v384) = 0;
              v386 = 0;
              if (*(_BYTE *)(v285 + 160))
              {
                v295 = *(_OWORD *)(v285 + 136);
                v385 = *(void (***)(cricket::Codec *__hidden))(v285 + 152);
                v384 = v295;
                *(_QWORD *)(v285 + 144) = 0;
                *(_QWORD *)(v285 + 152) = 0;
                *(_QWORD *)(v285 + 136) = 0;
                v386 = 1;
              }
              v296 = (_QWORD *)(v285 + 176);
              v297 = *(_QWORD *)(v285 + 176);
              v387 = *(void (***)(cricket::Codec *__hidden))(v285 + 168);
              v388 = (void (**)(cricket::Codec *__hidden))v297;
              v389 = *(void (***)(cricket::Codec *__hidden))(v285 + 184);
              v349 = v289;
              if (v389)
              {
                *(_QWORD *)(v297 + 16) = &v388;
                *(_QWORD *)(v285 + 168) = v296;
                *v296 = 0;
                *(_QWORD *)(v285 + 184) = 0;
                v390 = 0;
                v391 = 0;
                v392 = 0;
                v298 = *(void (****)(cricket::Codec *__hidden))(v285 + 192);
                v6 = *(void (****)(cricket::Codec *__hidden))(v285 + 200);
                v299 = (char *)v6 - (char *)v298;
                if (v6 == v298)
                  goto LABEL_294;
LABEL_285:
                v300 = v287;
                v301 = v286;
                v302 = 0xAAAAAAAAAAAAAAABLL * (v299 >> 4);
                if (v302 > 0x555555555555555)
                  goto LABEL_312;
                v303 = (char *)operator new(v299);
                v304 = 0;
                v390 = v303;
                v391 = v303;
                v392 = &v303[48 * v302];
                v286 = v301;
                v287 = v300;
                while (1)
                {
                  v305 = &v298[v304];
                  v306 = (std::string *)&v303[v304 * 8];
                  if (SHIBYTE(v298[v304 + 2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(v306, (const std::string::value_type *)*v305, (std::string::size_type)v305[1]);
                    v308 = (std::string *)&v303[v304 * 8 + 24];
                    v309 = &v298[v304];
                    v310 = (uint64_t)&v298[v304 + 3];
                    if (SHIBYTE(v298[v304 + 5]) < 0)
                    {
LABEL_287:
                      std::string::__init_copy_ctor_external(v308, *(const std::string::value_type **)v310, (std::string::size_type)v309[4]);
                      v304 += 6;
                      if (&v298[v304] == v6)
                        goto LABEL_293;
                      continue;
                    }
                  }
                  else
                  {
                    v307 = *(_OWORD *)v305;
                    v306->__r_.__value_.__r.__words[2] = (std::string::size_type)v305[2];
                    *(_OWORD *)&v306->__r_.__value_.__l.__data_ = v307;
                    v308 = (std::string *)&v303[v304 * 8 + 24];
                    v309 = &v298[v304];
                    v310 = (uint64_t)&v298[v304 + 3];
                    if (SHIBYTE(v298[v304 + 5]) < 0)
                      goto LABEL_287;
                  }
                  v311 = *(_OWORD *)v310;
                  v308->__r_.__value_.__r.__words[2] = *(_QWORD *)(v310 + 16);
                  *(_OWORD *)&v308->__r_.__value_.__l.__data_ = v311;
                  v304 += 6;
                  if (&v298[v304] == v6)
                  {
LABEL_293:
                    v391 = &v303[v304 * 8];
                    goto LABEL_294;
                  }
                }
              }
              v387 = (void (**)(cricket::Codec *__hidden))&v388;
              v390 = 0;
              v391 = 0;
              v392 = 0;
              v298 = *(void (****)(cricket::Codec *__hidden))(v285 + 192);
              v6 = *(void (****)(cricket::Codec *__hidden))(v285 + 200);
              v299 = (char *)v6 - (char *)v298;
              if (v6 != v298)
                goto LABEL_285;
LABEL_294:
              *v286 = *(_OWORD *)(v288 + 464);
              *(_OWORD *)((char *)v286 + 9) = *(_OWORD *)(v288 + 473);
              v312 = v287;
              v313 = (_OWORD *)v288;
              do
              {
                cricket::Codec::operator=((uint64_t)v313 + 248, (uint64_t)v313);
                v313[29] = *(_OWORD *)((char *)v313 + 216);
                *(_OWORD *)((char *)v313 + 473) = *(_OWORD *)((char *)v313 + 225);
                if (__CFADD__(v312++, 1))
                  goto LABEL_298;
                v315 = (char *)v313 - 248;
                v316 = *((_DWORD *)v313 - 59);
                v313 = (_OWORD *)((char *)v313 - 248);
              }
              while (SHIDWORD(v373) > v316);
              cricket::Codec::operator=((uint64_t)(v315 + 248), (uint64_t)&v372);
              v317 = *(_OWORD *)((char *)v286 + 9);
              *((_OWORD *)v315 + 29) = *v286;
              *(_OWORD *)(v315 + 473) = v317;
              cricket::Codec::~Codec((cricket::Codec *)&v372);
              v289 = v349;
            }
            v288 += 248;
            ++v289;
            v285 = a1 + 248 * v289;
            --v287;
            if (v285 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (a1 == a2)
            return result;
          v340 = v7;
          v188 = (unint64_t)(v8 - 2) >> 1;
          v189 = v188;
          do
          {
            v191 = v189;
            if (v188 >= v189)
            {
              v192 = (2 * v189) | 1;
              v193 = a1 + 248 * v192;
              if (2 * v189 + 2 < v8)
              {
                v194 = *(_DWORD *)(v193 + 12);
                v195 = *(_DWORD *)(v193 + 260);
                v193 += 248 * (v194 > v195);
                if (v194 > v195)
                  v192 = 2 * v189 + 2;
              }
              v196 = a1 + 248 * v189;
              if (*(_DWORD *)(v193 + 12) <= *(_DWORD *)(v196 + 12))
              {
                v372 = &off_24C0B1418;
                v373 = *(void (***)(cricket::Codec *__hidden))(v196 + 8);
                v197 = *(_OWORD *)(v196 + 16);
                v375 = *(void (***)(cricket::Codec *__hidden))(v196 + 32);
                v374 = v197;
                *(_QWORD *)(v196 + 24) = 0;
                *(_QWORD *)(v196 + 32) = 0;
                *(_QWORD *)(v196 + 16) = 0;
                v376 = *(_OWORD *)(v196 + 40);
                LOBYTE(v377) = 0;
                v379 = 0;
                if (*(_BYTE *)(v196 + 80))
                {
                  v198 = *(_OWORD *)(v196 + 56);
                  v378 = *(void (***)(cricket::Codec *__hidden))(v196 + 72);
                  v377 = v198;
                  *(_QWORD *)(v196 + 64) = 0;
                  *(_QWORD *)(v196 + 72) = 0;
                  *(_QWORD *)(v196 + 56) = 0;
                  v379 = 1;
                }
                v380 = 0;
                v380 = *(void (***)(cricket::Codec *__hidden))(v196 + 88);
                v199 = *(_OWORD *)(v196 + 96);
                v200 = *(_OWORD *)(v196 + 112);
                v383 = *(void (***)(cricket::Codec *__hidden))(v196 + 128);
                v381 = v199;
                v382 = v200;
                *(_QWORD *)(v196 + 88) = 0;
                LOBYTE(v384) = 0;
                v386 = 0;
                if (*(_BYTE *)(v196 + 160))
                {
                  v201 = *(_OWORD *)(v196 + 136);
                  v385 = *(void (***)(cricket::Codec *__hidden))(v196 + 152);
                  v384 = v201;
                  *(_QWORD *)(v196 + 144) = 0;
                  *(_QWORD *)(v196 + 152) = 0;
                  *(_QWORD *)(v196 + 136) = 0;
                  v386 = 1;
                }
                v387 = *(void (***)(cricket::Codec *__hidden))(v196 + 168);
                v202 = (_QWORD *)(v196 + 176);
                v203 = *(_QWORD *)(v196 + 176);
                v388 = (void (**)(cricket::Codec *__hidden))v203;
                v389 = *(void (***)(cricket::Codec *__hidden))(v196 + 184);
                if (v389)
                {
                  *(_QWORD *)(v203 + 16) = &v388;
                  *(_QWORD *)(v196 + 168) = v202;
                  *v202 = 0;
                  *(_QWORD *)(v196 + 184) = 0;
                }
                else
                {
                  v387 = (void (**)(cricket::Codec *__hidden))&v388;
                }
                v390 = 0;
                v391 = 0;
                v392 = 0;
                v204 = *(_QWORD *)(v196 + 192);
                v205 = *(_QWORD *)(v196 + 200);
                v206 = v205 - v204;
                v347 = v191;
                if (v205 != v204)
                {
                  v345 = 0xAAAAAAAAAAAAAAABLL * (v206 >> 4);
                  if (v345 > 0x555555555555555)
                    goto LABEL_312;
                  v207 = (char *)operator new(v206);
                  v208 = 0;
                  v390 = v207;
                  v391 = v207;
                  v392 = &v207[48 * v345];
                  while (1)
                  {
                    v209 = (__int128 *)(v204 + v208);
                    v210 = (std::string *)&v207[v208];
                    if (*(char *)(v204 + v208 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(v210, *(const std::string::value_type **)v209, *((_QWORD *)v209 + 1));
                      v212 = (std::string *)&v207[v208 + 24];
                      v213 = v204 + v208;
                      v214 = v204 + v208 + 24;
                      if (*(char *)(v204 + v208 + 47) < 0)
                      {
LABEL_208:
                        std::string::__init_copy_ctor_external(v212, *(const std::string::value_type **)v214, *(_QWORD *)(v213 + 32));
                        v208 += 48;
                        if (v204 + v208 == v205)
                          goto LABEL_214;
                        continue;
                      }
                    }
                    else
                    {
                      v211 = *v209;
                      v210->__r_.__value_.__r.__words[2] = *((_QWORD *)v209 + 2);
                      *(_OWORD *)&v210->__r_.__value_.__l.__data_ = v211;
                      v212 = (std::string *)&v207[v208 + 24];
                      v213 = v204 + v208;
                      v214 = v204 + v208 + 24;
                      if (*(char *)(v204 + v208 + 47) < 0)
                        goto LABEL_208;
                    }
                    v215 = *(_OWORD *)v214;
                    v212->__r_.__value_.__r.__words[2] = *(_QWORD *)(v214 + 16);
                    *(_OWORD *)&v212->__r_.__value_.__l.__data_ = v215;
                    v208 += 48;
                    if (v204 + v208 == v205)
                    {
LABEL_214:
                      v391 = &v207[v208];
                      v188 = (unint64_t)(v8 - 2) >> 1;
                      v191 = v347;
                      break;
                    }
                  }
                }
                v216 = a1 + 248 * v191;
                v217 = *(_OWORD *)(v216 + 216);
                *(_OWORD *)&v393[9] = *(_OWORD *)(v216 + 225);
                *(_OWORD *)v393 = v217;
                do
                {
                  v218 = v193;
                  cricket::Codec::operator=(v196, v193);
                  v219 = *(_OWORD *)(v193 + 225);
                  *(_OWORD *)(v196 + 216) = *(_OWORD *)(v193 + 216);
                  *(_OWORD *)(v196 + 225) = v219;
                  if (v188 < v192)
                    break;
                  v220 = (2 * v192) | 1;
                  v193 = a1 + 248 * v220;
                  if (2 * v192 + 2 < v8)
                  {
                    v221 = *(_DWORD *)(v193 + 12);
                    v222 = *(_DWORD *)(v193 + 260);
                    v193 += 248 * (v221 > v222);
                    if (v221 > v222)
                      v220 = 2 * v192 + 2;
                  }
                  v196 = v218;
                  v192 = v220;
                }
                while (*(_DWORD *)(v193 + 12) <= SHIDWORD(v373));
                cricket::Codec::operator=(v218, (uint64_t)&v372);
                v190 = *(_OWORD *)&v393[9];
                *(_OWORD *)(v218 + 216) = *(_OWORD *)v393;
                *(_OWORD *)(v218 + 225) = v190;
                cricket::Codec::~Codec((cricket::Codec *)&v372);
                v191 = v347;
              }
            }
            v189 = v191 - 1;
          }
          while (v191);
          v223 = v340 / 0xF8;
          v344 = (__int128 *)(a1 + 16);
          v338 = (_QWORD *)(a1 + 176);
          v336 = (__int128 *)(a1 + 136);
          v337 = (__int128 *)(a1 + 56);
          while (1)
          {
            v226 = a2;
            v227 = *(_QWORD *)(a1 + 8);
            v350 = &off_24C0B1418;
            v351 = v227;
            v228 = *(_QWORD *)(a1 + 32);
            v352 = *v344;
            v353 = v228;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)v344 = 0;
            v354 = *(_OWORD *)(a1 + 40);
            LOBYTE(v355) = 0;
            v357 = 0;
            if (*(_BYTE *)(a1 + 80))
            {
              v229 = *v337;
              v356 = *(_QWORD *)(a1 + 72);
              v355 = v229;
              *(_QWORD *)(a1 + 64) = 0;
              *(_QWORD *)(a1 + 72) = 0;
              *(_QWORD *)v337 = 0;
              v357 = 1;
            }
            v358 = 0;
            v358 = *(_QWORD *)(a1 + 88);
            v230 = *(_QWORD *)(a1 + 128);
            v231 = *(_OWORD *)(a1 + 112);
            v359 = *(_OWORD *)(a1 + 96);
            v360 = v231;
            v361 = v230;
            *(_QWORD *)(a1 + 88) = 0;
            LOBYTE(v362) = 0;
            v364 = 0;
            if (*(_BYTE *)(a1 + 160))
            {
              v232 = *v336;
              v363 = *(_QWORD *)(a1 + 152);
              v362 = v232;
              *(_QWORD *)(a1 + 144) = 0;
              *(_QWORD *)(a1 + 152) = 0;
              *(_QWORD *)v336 = 0;
              v364 = 1;
            }
            v233 = *(_QWORD *)(a1 + 176);
            v365 = *(unint64_t **)(a1 + 168);
            v366 = v233;
            v367 = *(_QWORD *)(a1 + 184);
            if (v367)
              break;
            v365 = &v366;
            v368 = 0;
            v369 = 0;
            v370 = 0;
            v234 = *(_QWORD *)(a1 + 192);
            v235 = *(_QWORD *)(a1 + 200);
            v236 = v235 - v234;
            if (v235 != v234)
              goto LABEL_233;
LABEL_242:
            v247 = 0;
            v248 = *(_OWORD *)(a1 + 216);
            *(_OWORD *)((char *)v371 + 9) = *(_OWORD *)(a1 + 225);
            v371[0] = v248;
            v249 = a1;
            do
            {
              v251 = v249 + 248 * v247 + 248;
              v252 = (2 * v247) | 1;
              v253 = 2 * v247 + 2;
              if (v253 < v223)
              {
                v254 = *(_DWORD *)(v251 + 12);
                v255 = *(_DWORD *)(v251 + 260);
                v251 += 248 * (v254 > v255);
                if (v254 > v255)
                  v252 = v253;
              }
              cricket::Codec::operator=(v249, v251);
              v250 = *(_OWORD *)(v251 + 225);
              *(_OWORD *)(v249 + 216) = *(_OWORD *)(v251 + 216);
              *(_OWORD *)(v249 + 225) = v250;
              v249 = v251;
              v247 = v252;
            }
            while (v252 <= (uint64_t)((unint64_t)(v223 - 2) >> 1));
            v256 = (_OWORD *)(v251 + 216);
            a2 = v226 - 248;
            if (v251 == v226 - 248)
            {
              cricket::Codec::operator=(v251, (uint64_t)&v350);
              v224 = *(_OWORD *)((char *)v371 + 9);
              *v256 = v371[0];
              *(_OWORD *)(v251 + 225) = v224;
            }
            else
            {
              cricket::Codec::operator=(v251, v226 - 248);
              v257 = *(_OWORD *)(v226 - 23);
              *v256 = *(_OWORD *)(v226 - 32);
              *(_OWORD *)(v251 + 225) = v257;
              cricket::Codec::operator=(v226 - 248, (uint64_t)&v350);
              v258 = *(_OWORD *)((char *)v371 + 9);
              *(_OWORD *)(v226 - 32) = v371[0];
              *(_OWORD *)(v226 - 23) = v258;
              v259 = v251 - a1 + 248;
              if (v259 >= 249)
              {
                v260 = (v259 / 0xF8uLL - 2) >> 1;
                v261 = a1 + 248 * v260;
                if (*(_DWORD *)(v261 + 12) > *(_DWORD *)(v251 + 12))
                {
                  v262 = *(void (***)(cricket::Codec *__hidden))(v251 + 8);
                  v372 = &off_24C0B1418;
                  v373 = v262;
                  v263 = *(void (***)(cricket::Codec *__hidden))(v251 + 32);
                  v374 = *(_OWORD *)(v251 + 16);
                  v375 = v263;
                  *(_QWORD *)(v251 + 24) = 0;
                  *(_QWORD *)(v251 + 32) = 0;
                  *(_QWORD *)(v251 + 16) = 0;
                  v376 = *(_OWORD *)(v251 + 40);
                  LOBYTE(v377) = 0;
                  v379 = 0;
                  if (*(_BYTE *)(v251 + 80))
                  {
                    v264 = *(_OWORD *)(v251 + 56);
                    v378 = *(void (***)(cricket::Codec *__hidden))(v251 + 72);
                    v377 = v264;
                    *(_QWORD *)(v251 + 64) = 0;
                    *(_QWORD *)(v251 + 72) = 0;
                    *(_QWORD *)(v251 + 56) = 0;
                    v379 = 1;
                  }
                  v380 = 0;
                  v380 = *(void (***)(cricket::Codec *__hidden))(v251 + 88);
                  v265 = *(void (***)(cricket::Codec *__hidden))(v251 + 128);
                  v266 = *(_OWORD *)(v251 + 112);
                  v381 = *(_OWORD *)(v251 + 96);
                  v382 = v266;
                  v383 = v265;
                  *(_QWORD *)(v251 + 88) = 0;
                  LOBYTE(v384) = 0;
                  v386 = 0;
                  if (*(_BYTE *)(v251 + 160))
                  {
                    v267 = *(_OWORD *)(v251 + 136);
                    v385 = *(void (***)(cricket::Codec *__hidden))(v251 + 152);
                    v384 = v267;
                    *(_QWORD *)(v251 + 144) = 0;
                    *(_QWORD *)(v251 + 152) = 0;
                    *(_QWORD *)(v251 + 136) = 0;
                    v386 = 1;
                  }
                  v268 = (_QWORD *)(v251 + 176);
                  v269 = *(_QWORD *)(v251 + 176);
                  v387 = *(void (***)(cricket::Codec *__hidden))(v251 + 168);
                  v388 = (void (**)(cricket::Codec *__hidden))v269;
                  v389 = *(void (***)(cricket::Codec *__hidden))(v251 + 184);
                  if (v389)
                  {
                    *(_QWORD *)(v269 + 16) = &v388;
                    *(_QWORD *)(v251 + 168) = v268;
                    *v268 = 0;
                    *(_QWORD *)(v251 + 184) = 0;
                  }
                  else
                  {
                    v387 = (void (**)(cricket::Codec *__hidden))&v388;
                  }
                  v390 = 0;
                  v391 = 0;
                  v392 = 0;
                  v270 = *(_QWORD *)(v251 + 192);
                  v348 = *(_QWORD *)(v251 + 200);
                  v271 = v348 - v270;
                  if (v348 != v270)
                  {
                    v334 = 0xAAAAAAAAAAAAAAABLL * (v271 >> 4);
                    if (v334 > 0x555555555555555)
                      goto LABEL_312;
                    v272 = (char *)operator new(v271);
                    v273 = 0;
                    v390 = v272;
                    v391 = v272;
                    v392 = &v272[48 * v334];
                    while (1)
                    {
                      v274 = (__int128 *)(v270 + v273);
                      v275 = (std::string *)&v272[v273];
                      if (*(char *)(v270 + v273 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(v275, *(const std::string::value_type **)v274, *((_QWORD *)v274 + 1));
                        v277 = (std::string *)&v272[v273 + 24];
                        v278 = v270 + v273;
                        v279 = v270 + v273 + 24;
                        if (*(char *)(v270 + v273 + 47) < 0)
                        {
LABEL_261:
                          std::string::__init_copy_ctor_external(v277, *(const std::string::value_type **)v279, *(_QWORD *)(v278 + 32));
                          v273 += 48;
                          if (v270 + v273 == v348)
                            goto LABEL_267;
                          continue;
                        }
                      }
                      else
                      {
                        v276 = *v274;
                        v275->__r_.__value_.__r.__words[2] = *((_QWORD *)v274 + 2);
                        *(_OWORD *)&v275->__r_.__value_.__l.__data_ = v276;
                        v277 = (std::string *)&v272[v273 + 24];
                        v278 = v270 + v273;
                        v279 = v270 + v273 + 24;
                        if (*(char *)(v270 + v273 + 47) < 0)
                          goto LABEL_261;
                      }
                      v280 = *(_OWORD *)v279;
                      v277->__r_.__value_.__r.__words[2] = *(_QWORD *)(v279 + 16);
                      *(_OWORD *)&v277->__r_.__value_.__l.__data_ = v280;
                      v273 += 48;
                      if (v270 + v273 == v348)
                      {
LABEL_267:
                        v391 = &v272[v273];
                        break;
                      }
                    }
                  }
                  v281 = *(_OWORD *)(v251 + 216);
                  *(_OWORD *)&v393[9] = *(_OWORD *)(v251 + 225);
                  *(_OWORD *)v393 = v281;
                  do
                  {
                    v282 = v261;
                    cricket::Codec::operator=(v251, v261);
                    v283 = *(_OWORD *)(v261 + 225);
                    *(_OWORD *)(v251 + 216) = *(_OWORD *)(v261 + 216);
                    *(_OWORD *)(v251 + 225) = v283;
                    if (!v260)
                      break;
                    v260 = (v260 - 1) >> 1;
                    v261 = a1 + 248 * v260;
                    v251 = v282;
                  }
                  while (*(_DWORD *)(v261 + 12) > SHIDWORD(v373));
                  cricket::Codec::operator=(v282, (uint64_t)&v372);
                  v284 = *(_OWORD *)&v393[9];
                  *(_OWORD *)(v282 + 216) = *(_OWORD *)v393;
                  *(_OWORD *)(v282 + 225) = v284;
                  cricket::Codec::~Codec((cricket::Codec *)&v372);
                }
              }
            }
            cricket::Codec::~Codec((cricket::Codec *)&v350);
            if (v223-- <= 2)
              return result;
          }
          *(_QWORD *)(v233 + 16) = &v366;
          *(_QWORD *)(a1 + 168) = v338;
          *v338 = 0;
          *(_QWORD *)(a1 + 184) = 0;
          v368 = 0;
          v369 = 0;
          v370 = 0;
          v234 = *(_QWORD *)(a1 + 192);
          v235 = *(_QWORD *)(a1 + 200);
          v236 = v235 - v234;
          if (v235 == v234)
            goto LABEL_242;
LABEL_233:
          v237 = 0xAAAAAAAAAAAAAAABLL * (v236 >> 4);
          if (v237 > 0x555555555555555)
            goto LABEL_312;
          v238 = (void (***)(cricket::Codec *__hidden))operator new(v236);
          v239 = 0;
          v368 = v238;
          v369 = v238;
          v370 = &v238[6 * v237];
          while (1)
          {
            v240 = (__int128 *)(v234 + v239);
            v241 = (std::string *)&v238[v239 / 8];
            if (*(char *)(v234 + v239 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v241, *(const std::string::value_type **)v240, *((_QWORD *)v240 + 1));
              v243 = (std::string *)&v238[v239 / 8 + 3];
              v244 = v234 + v239;
              v245 = v234 + v239 + 24;
              if (*(char *)(v234 + v239 + 47) < 0)
              {
LABEL_235:
                std::string::__init_copy_ctor_external(v243, *(const std::string::value_type **)v245, *(_QWORD *)(v244 + 32));
                v239 += 48;
                if (v234 + v239 == v235)
                  goto LABEL_241;
                continue;
              }
            }
            else
            {
              v242 = *v240;
              v241->__r_.__value_.__r.__words[2] = *((_QWORD *)v240 + 2);
              *(_OWORD *)&v241->__r_.__value_.__l.__data_ = v242;
              v243 = (std::string *)&v238[v239 / 8 + 3];
              v244 = v234 + v239;
              v245 = v234 + v239 + 24;
              if (*(char *)(v234 + v239 + 47) < 0)
                goto LABEL_235;
            }
            v246 = *(_OWORD *)v245;
            v243->__r_.__value_.__r.__words[2] = *(_QWORD *)(v245 + 16);
            *(_OWORD *)&v243->__r_.__value_.__l.__data_ = v246;
            v239 += 48;
            if (v234 + v239 == v235)
            {
LABEL_241:
              v369 = &v238[v239 / 8];
              goto LABEL_242;
            }
          }
        }
        v9 = (unint64_t)v8 >> 1;
        v6 = (void (***)(cricket::Codec *__hidden))(a1 + 248 * ((unint64_t)v8 >> 1));
        if ((unint64_t)v7 >= 0x7C01)
        {
          v10 = *(void (***)(cricket::Codec *__hidden))(a1 + 8);
          v372 = &off_24C0B1418;
          v373 = v10;
          v11 = *(void (***)(cricket::Codec *__hidden))(a1 + 32);
          v374 = *(_OWORD *)(a1 + 16);
          v375 = v11;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v376 = *(_OWORD *)(a1 + 40);
          LOBYTE(v377) = 0;
          v379 = 0;
          if (*(_BYTE *)(a1 + 80))
          {
            v12 = *(_OWORD *)(a1 + 56);
            v378 = *(void (***)(cricket::Codec *__hidden))(a1 + 72);
            v377 = v12;
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 72) = 0;
            *(_QWORD *)(a1 + 56) = 0;
            v379 = 1;
          }
          v380 = 0;
          v380 = *(void (***)(cricket::Codec *__hidden))(a1 + 88);
          v13 = *(void (***)(cricket::Codec *__hidden))(a1 + 128);
          v14 = *(_OWORD *)(a1 + 112);
          v381 = *(_OWORD *)(a1 + 96);
          v382 = v14;
          v383 = v13;
          *(_QWORD *)(a1 + 88) = 0;
          LOBYTE(v384) = 0;
          v386 = 0;
          if (*(_BYTE *)(a1 + 160))
          {
            v15 = *(_OWORD *)(a1 + 136);
            v385 = *(void (***)(cricket::Codec *__hidden))(a1 + 152);
            v384 = v15;
            *(_QWORD *)(a1 + 144) = 0;
            *(_QWORD *)(a1 + 152) = 0;
            *(_QWORD *)(a1 + 136) = 0;
            v386 = 1;
          }
          v16 = (_QWORD *)(a1 + 176);
          v17 = *(_QWORD *)(a1 + 176);
          v387 = *(void (***)(cricket::Codec *__hidden))(a1 + 168);
          v388 = (void (**)(cricket::Codec *__hidden))v17;
          v389 = *(void (***)(cricket::Codec *__hidden))(a1 + 184);
          if (v389)
          {
            *(_QWORD *)(v17 + 16) = &v388;
            *(_QWORD *)(a1 + 168) = v16;
            *v16 = 0;
            *(_QWORD *)(a1 + 184) = 0;
            v390 = 0;
            v391 = 0;
            v392 = 0;
            v19 = *(_QWORD *)(a1 + 192);
            v18 = *(_QWORD *)(a1 + 200);
            v20 = v18 - v19;
            if (v18 != v19)
              goto LABEL_17;
LABEL_26:
            v31 = *(_OWORD *)(a1 + 216);
            *(_OWORD *)&v393[9] = *(_OWORD *)(a1 + 225);
            *(_OWORD *)v393 = v31;
            cricket::Codec::operator=(a1, (uint64_t)v6);
            v32 = a1 + 248 * v9;
            v33 = *(_OWORD *)(v32 + 225);
            *(_OWORD *)(a1 + 216) = *(_OWORD *)(v32 + 216);
            *(_OWORD *)(a1 + 225) = v33;
            cricket::Codec::operator=((uint64_t)v6, (uint64_t)&v372);
            v34 = *(_OWORD *)&v393[9];
            *(_OWORD *)(v32 + 216) = *(_OWORD *)v393;
            *(_OWORD *)(v32 + 225) = v34;
            cricket::Codec::~Codec((cricket::Codec *)&v372);
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_28;
            goto LABEL_27;
          }
          v387 = (void (**)(cricket::Codec *__hidden))&v388;
          v390 = 0;
          v391 = 0;
          v392 = 0;
          v19 = *(_QWORD *)(a1 + 192);
          v18 = *(_QWORD *)(a1 + 200);
          v20 = v18 - v19;
          if (v18 == v19)
            goto LABEL_26;
LABEL_17:
          v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 4);
          if (v21 > 0x555555555555555)
            goto LABEL_312;
          v22 = (char *)operator new(v20);
          v23 = 0;
          v390 = v22;
          v391 = v22;
          v392 = &v22[48 * v21];
          while (1)
          {
            v25 = (__int128 *)(v19 + v23);
            v26 = (std::string *)&v22[v23];
            if (*(char *)(v19 + v23 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
              v28 = (std::string *)&v22[v23 + 24];
              v29 = v19 + v23;
              v30 = v19 + v23 + 24;
              if ((*(char *)(v19 + v23 + 47) & 0x80000000) == 0)
                goto LABEL_19;
LABEL_24:
              std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v30, *(_QWORD *)(v29 + 32));
              v23 += 48;
              if (v19 + v23 == v18)
              {
LABEL_25:
                v391 = &v22[v23];
                goto LABEL_26;
              }
            }
            else
            {
              v27 = *v25;
              v26->__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 2);
              *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
              v28 = (std::string *)&v22[v23 + 24];
              v29 = v19 + v23;
              v30 = v19 + v23 + 24;
              if (*(char *)(v19 + v23 + 47) < 0)
                goto LABEL_24;
LABEL_19:
              v24 = *(_OWORD *)v30;
              v28->__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 16);
              *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v24;
              v23 += 48;
              if (v19 + v23 == v18)
                goto LABEL_25;
            }
          }
        }
        --a3;
        if ((a4 & 1) != 0)
          goto LABEL_28;
LABEL_27:
        if (*(_DWORD *)(a1 - 236) <= *(_DWORD *)(a1 + 12))
        {
          v94 = *(_QWORD *)(a1 + 8);
          v350 = &off_24C0B1418;
          v351 = v94;
          v95 = *(_QWORD *)(a1 + 32);
          v352 = *(_OWORD *)(a1 + 16);
          v353 = v95;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v354 = *(_OWORD *)(a1 + 40);
          LOBYTE(v355) = 0;
          v357 = 0;
          if (*(_BYTE *)(a1 + 80))
          {
            v96 = *(_OWORD *)(a1 + 56);
            v356 = *(_QWORD *)(a1 + 72);
            v355 = v96;
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 72) = 0;
            *(_QWORD *)(a1 + 56) = 0;
            v357 = 1;
          }
          v358 = 0;
          v358 = *(_QWORD *)(a1 + 88);
          v97 = *(_QWORD *)(a1 + 128);
          v98 = *(_OWORD *)(a1 + 112);
          v359 = *(_OWORD *)(a1 + 96);
          v360 = v98;
          v361 = v97;
          *(_QWORD *)(a1 + 88) = 0;
          LOBYTE(v362) = 0;
          v364 = 0;
          if (*(_BYTE *)(a1 + 160))
          {
            v99 = *(_OWORD *)(a1 + 136);
            v363 = *(_QWORD *)(a1 + 152);
            v362 = v99;
            *(_QWORD *)(a1 + 144) = 0;
            *(_QWORD *)(a1 + 152) = 0;
            *(_QWORD *)(a1 + 136) = 0;
            v364 = 1;
          }
          v100 = (_QWORD *)(a1 + 176);
          v58 = *(_QWORD *)(a1 + 176);
          v365 = *(unint64_t **)(a1 + 168);
          v366 = v58;
          v367 = *(_QWORD *)(a1 + 184);
          if (v367)
          {
            *(_QWORD *)(v58 + 16) = &v366;
            *(_QWORD *)(a1 + 168) = v100;
            *v100 = 0;
            *(_QWORD *)(a1 + 184) = 0;
          }
          else
          {
            v365 = &v366;
          }
          v368 = 0;
          v369 = 0;
          v370 = 0;
          v102 = *(_QWORD *)(a1 + 192);
          v101 = *(_QWORD *)(a1 + 200);
          v103 = v101 - v102;
          if (v101 != v102)
          {
            v104 = 0xAAAAAAAAAAAAAAABLL * (v103 >> 4);
            if (v104 > 0x555555555555555)
              goto LABEL_312;
            v105 = (void (***)(cricket::Codec *__hidden))operator new(v103);
            v106 = 0;
            v368 = v105;
            v369 = v105;
            v370 = &v105[6 * v104];
            while (1)
            {
              v107 = (__int128 *)(v102 + v106);
              v108 = (std::string *)&v105[v106 / 8];
              if (*(char *)(v102 + v106 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v108, *(const std::string::value_type **)v107, *((_QWORD *)v107 + 1));
                v110 = (std::string *)&v105[v106 / 8 + 3];
                v111 = v102 + v106;
                v112 = v102 + v106 + 24;
                v58 = *(char *)(v102 + v106 + 47);
                if ((v58 & 0x80000000) == 0)
                  goto LABEL_104;
LABEL_99:
                std::string::__init_copy_ctor_external(v110, *(const std::string::value_type **)v112, *(_QWORD *)(v111 + 32));
                v106 += 48;
                if (v102 + v106 == v101)
                  goto LABEL_105;
              }
              else
              {
                v109 = *v107;
                v108->__r_.__value_.__r.__words[2] = *((_QWORD *)v107 + 2);
                *(_OWORD *)&v108->__r_.__value_.__l.__data_ = v109;
                v110 = (std::string *)&v105[v106 / 8 + 3];
                v111 = v102 + v106;
                v112 = v102 + v106 + 24;
                v58 = *(char *)(v102 + v106 + 47);
                if ((v58 & 0x80000000) != 0)
                  goto LABEL_99;
LABEL_104:
                v113 = *(_OWORD *)v112;
                v110->__r_.__value_.__r.__words[2] = *(_QWORD *)(v112 + 16);
                *(_OWORD *)&v110->__r_.__value_.__l.__data_ = v113;
                v106 += 48;
                if (v102 + v106 == v101)
                {
LABEL_105:
                  LODWORD(v114) = HIDWORD(v351);
                  v369 = &v105[v106 / 8];
                  goto LABEL_107;
                }
              }
            }
          }
          v114 = HIDWORD(v94);
LABEL_107:
          v115 = *(_OWORD *)(a1 + 216);
          *(_OWORD *)((char *)v371 + 9) = *(_OWORD *)(a1 + 225);
          v371[0] = v115;
          if ((int)v114 <= *(_DWORD *)(a2 - 236))
          {
            v117 = a1 + 248;
            do
            {
              v6 = (void (***)(cricket::Codec *__hidden))v117;
              if (v117 >= a2)
                break;
              v58 = *(unsigned int *)(v117 + 12);
              v117 += 248;
            }
            while ((int)v114 <= (int)v58);
          }
          else
          {
            v116 = a1 + 248;
            do
            {
              if (v116 == a2)
                goto LABEL_298;
              v58 = *(unsigned int *)(v116 + 12);
              v116 += 248;
            }
            while ((int)v114 <= (int)v58);
            v6 = (void (***)(cricket::Codec *__hidden))(v116 - 248);
          }
          v118 = a2;
          if ((unint64_t)v6 < a2)
          {
            v119 = a2;
            do
            {
              if (v119 == a1)
                goto LABEL_298;
              v118 = v119 - 248;
              v58 = *(unsigned int *)(v119 - 236);
              v119 -= 248;
            }
            while ((int)v114 > (int)v58);
          }
          if ((unint64_t)v6 < v118)
          {
            while (1)
            {
              v120 = v6[1];
              v372 = &off_24C0B1418;
              v373 = v120;
              v121 = v6[4];
              v374 = *((_OWORD *)v6 + 1);
              v375 = v121;
              v6[3] = 0;
              v6[4] = 0;
              v6[2] = 0;
              v376 = *(_OWORD *)(v6 + 5);
              LOBYTE(v377) = 0;
              v379 = 0;
              if (*((_BYTE *)v6 + 80))
              {
                v122 = *(_OWORD *)(v6 + 7);
                v378 = v6[9];
                v377 = v122;
                v6[8] = 0;
                v6[9] = 0;
                v6[7] = 0;
                v379 = 1;
              }
              v380 = 0;
              v380 = v6[11];
              v123 = v6[16];
              v124 = *((_OWORD *)v6 + 7);
              v381 = *((_OWORD *)v6 + 6);
              v382 = v124;
              v383 = v123;
              v6[11] = 0;
              LOBYTE(v384) = 0;
              v386 = 0;
              if (*((_BYTE *)v6 + 160))
              {
                v125 = *(_OWORD *)(v6 + 17);
                v385 = v6[19];
                v384 = v125;
                v6[18] = 0;
                v6[19] = 0;
                v6[17] = 0;
                v386 = 1;
              }
              v126 = (void (**)(cricket::Codec *__hidden))(v6 + 22);
              v127 = v6[22];
              v387 = v6[21];
              v388 = v127;
              v389 = v6[23];
              if (!v389)
                break;
              v127[2] = (void (*)(cricket::Codec *__hidden))&v388;
              v6[21] = v126;
              *v126 = 0;
              v6[23] = 0;
              v390 = 0;
              v391 = 0;
              v392 = 0;
              v129 = v6[24];
              v128 = v6[25];
              v130 = (char *)v128 - (char *)v129;
              if (v128 != v129)
                goto LABEL_128;
LABEL_137:
              v141 = *(_OWORD *)(v6 + 27);
              *(_OWORD *)&v393[9] = *(_OWORD *)((char *)v6 + 225);
              *(_OWORD *)v393 = v141;
              cricket::Codec::operator=((uint64_t)v6, v118);
              v142 = *(_OWORD *)(v118 + 225);
              *(_OWORD *)(v6 + 27) = *(_OWORD *)(v118 + 216);
              *(_OWORD *)((char *)v6 + 225) = v142;
              cricket::Codec::operator=(v118, (uint64_t)&v372);
              v143 = *(_OWORD *)&v393[9];
              *(_OWORD *)(v118 + 216) = *(_OWORD *)v393;
              *(_OWORD *)(v118 + 225) = v143;
              cricket::Codec::~Codec((cricket::Codec *)&v372);
              v144 = v6 + 31;
              do
              {
                if (v144 == (void (***)(cricket::Codec *__hidden))a2)
                  goto LABEL_298;
                v58 = *((unsigned int *)v144 + 3);
                v144 += 31;
              }
              while (SHIDWORD(v351) <= (int)v58);
              v6 = v144 - 31;
              do
              {
                if (v118 == a1)
                  goto LABEL_298;
                v145 = v118 - 248;
                v58 = *(unsigned int *)(v118 - 236);
                v118 -= 248;
              }
              while (SHIDWORD(v351) > (int)v58);
              v118 = v145;
              if ((unint64_t)v6 >= v145)
                goto LABEL_144;
            }
            v387 = (void (**)(cricket::Codec *__hidden))&v388;
            v390 = 0;
            v391 = 0;
            v392 = 0;
            v129 = v6[24];
            v128 = v6[25];
            v130 = (char *)v128 - (char *)v129;
            if (v128 == v129)
              goto LABEL_137;
LABEL_128:
            v131 = 0xAAAAAAAAAAAAAAABLL * (v130 >> 4);
            if (v131 > 0x555555555555555)
              goto LABEL_312;
            v132 = (char *)operator new(v130);
            v133 = 0;
            v390 = v132;
            v391 = v132;
            v392 = &v132[48 * v131];
            while (1)
            {
              v134 = &v129[v133];
              v135 = (std::string *)&v132[v133 * 8];
              if (SHIBYTE(v129[v133 + 2]) < 0)
              {
                std::string::__init_copy_ctor_external(v135, (const std::string::value_type *)*v134, (std::string::size_type)v134[1]);
                v137 = (std::string *)&v132[v133 * 8 + 24];
                v138 = &v129[v133];
                v139 = (uint64_t)&v129[v133 + 3];
                if (SHIBYTE(v129[v133 + 5]) < 0)
                {
LABEL_130:
                  std::string::__init_copy_ctor_external(v137, *(const std::string::value_type **)v139, (std::string::size_type)v138[4]);
                  v133 += 6;
                  if (&v129[v133] == v128)
                    goto LABEL_136;
                  continue;
                }
              }
              else
              {
                v136 = *(_OWORD *)v134;
                v135->__r_.__value_.__r.__words[2] = (std::string::size_type)v134[2];
                *(_OWORD *)&v135->__r_.__value_.__l.__data_ = v136;
                v137 = (std::string *)&v132[v133 * 8 + 24];
                v138 = &v129[v133];
                v139 = (uint64_t)&v129[v133 + 3];
                if (SHIBYTE(v129[v133 + 5]) < 0)
                  goto LABEL_130;
              }
              v140 = *(_OWORD *)v139;
              v137->__r_.__value_.__r.__words[2] = *(_QWORD *)(v139 + 16);
              *(_OWORD *)&v137->__r_.__value_.__l.__data_ = v140;
              v133 += 6;
              if (&v129[v133] == v128)
              {
LABEL_136:
                v391 = &v132[v133 * 8];
                goto LABEL_137;
              }
            }
          }
LABEL_144:
          if (v6 - 31 != (void (***)(cricket::Codec *__hidden))a1)
          {
            cricket::Codec::operator=(a1, (uint64_t)(v6 - 31));
            v146 = *(_OWORD *)((char *)v6 - 23);
            *(_OWORD *)(a1 + 216) = *((_OWORD *)v6 - 2);
            *(_OWORD *)(a1 + 225) = v146;
          }
          cricket::Codec::operator=((uint64_t)(v6 - 31), (uint64_t)&v350);
          v147 = *(_OWORD *)((char *)v371 + 9);
          *((_OWORD *)v6 - 2) = v371[0];
          *(_OWORD *)((char *)v6 - 23) = v147;
          cricket::Codec::~Codec((cricket::Codec *)&v350);
          a4 = 0;
          continue;
        }
LABEL_28:
        v35 = *(_QWORD *)(a1 + 8);
        v350 = &off_24C0B1418;
        v351 = v35;
        v36 = *(_QWORD *)(a1 + 32);
        v352 = *(_OWORD *)(a1 + 16);
        v353 = v36;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        v354 = *(_OWORD *)(a1 + 40);
        LOBYTE(v355) = 0;
        v357 = 0;
        if (*(_BYTE *)(a1 + 80))
        {
          v37 = *(_OWORD *)(a1 + 56);
          v356 = *(_QWORD *)(a1 + 72);
          v355 = v37;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 72) = 0;
          *(_QWORD *)(a1 + 56) = 0;
          v357 = 1;
        }
        v358 = 0;
        v358 = *(_QWORD *)(a1 + 88);
        v38 = *(_QWORD *)(a1 + 128);
        v39 = *(_OWORD *)(a1 + 112);
        v359 = *(_OWORD *)(a1 + 96);
        v360 = v39;
        v361 = v38;
        *(_QWORD *)(a1 + 88) = 0;
        LOBYTE(v362) = 0;
        v364 = 0;
        if (*(_BYTE *)(a1 + 160))
        {
          v40 = *(_OWORD *)(a1 + 136);
          v363 = *(_QWORD *)(a1 + 152);
          v362 = v40;
          *(_QWORD *)(a1 + 144) = 0;
          *(_QWORD *)(a1 + 152) = 0;
          *(_QWORD *)(a1 + 136) = 0;
          v364 = 1;
        }
        v41 = (_QWORD *)(a1 + 176);
        v42 = *(_QWORD *)(a1 + 176);
        v365 = *(unint64_t **)(a1 + 168);
        v366 = v42;
        v367 = *(_QWORD *)(a1 + 184);
        if (v367)
        {
          *(_QWORD *)(v42 + 16) = &v366;
          *(_QWORD *)(a1 + 168) = v41;
          *v41 = 0;
          *(_QWORD *)(a1 + 184) = 0;
          v368 = 0;
          v369 = 0;
          v370 = 0;
          v44 = *(_QWORD *)(a1 + 192);
          v43 = *(_QWORD *)(a1 + 200);
          v45 = v43 - v44;
          if (v43 == v44)
            goto LABEL_44;
        }
        else
        {
          v365 = &v366;
          v368 = 0;
          v369 = 0;
          v370 = 0;
          v44 = *(_QWORD *)(a1 + 192);
          v43 = *(_QWORD *)(a1 + 200);
          v45 = v43 - v44;
          if (v43 == v44)
          {
LABEL_44:
            v55 = HIDWORD(v35);
            goto LABEL_45;
          }
        }
        v46 = 0xAAAAAAAAAAAAAAABLL * (v45 >> 4);
        if (v46 > 0x555555555555555)
          goto LABEL_312;
        v6 = (void (***)(cricket::Codec *__hidden))operator new(v45);
        v47 = 0;
        v368 = v6;
        v369 = v6;
        v370 = &v6[6 * v46];
        do
        {
          while (1)
          {
            v48 = (__int128 *)(v44 + v47);
            v49 = (std::string *)&v6[v47 / 8];
            if ((*(char *)(v44 + v47 + 23) & 0x80000000) == 0)
              break;
            std::string::__init_copy_ctor_external(v49, *(const std::string::value_type **)v48, *((_QWORD *)v48 + 1));
            v51 = (std::string *)&v6[v47 / 8 + 3];
            v52 = v44 + v47;
            v53 = v44 + v47 + 24;
            if ((*(char *)(v44 + v47 + 47) & 0x80000000) == 0)
              goto LABEL_41;
LABEL_36:
            std::string::__init_copy_ctor_external(v51, *(const std::string::value_type **)v53, *(_QWORD *)(v52 + 32));
            v47 += 48;
            if (v44 + v47 == v43)
              goto LABEL_42;
          }
          v50 = *v48;
          v49->__r_.__value_.__r.__words[2] = *((_QWORD *)v48 + 2);
          *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
          v51 = (std::string *)&v6[v47 / 8 + 3];
          v52 = v44 + v47;
          v53 = v44 + v47 + 24;
          if (*(char *)(v44 + v47 + 47) < 0)
            goto LABEL_36;
LABEL_41:
          v54 = *(_OWORD *)v53;
          v51->__r_.__value_.__r.__words[2] = *(_QWORD *)(v53 + 16);
          *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v54;
          v47 += 48;
        }
        while (v44 + v47 != v43);
LABEL_42:
        LODWORD(v55) = HIDWORD(v351);
        v369 = &v6[v47 / 8];
LABEL_45:
        v56 = 0;
        v57 = *(_OWORD *)(a1 + 216);
        *(_OWORD *)((char *)v371 + 9) = *(_OWORD *)(a1 + 225);
        v371[0] = v57;
        do
        {
          v58 = a1 + v56;
          if (a1 + v56 + 248 == a2)
            goto LABEL_298;
          v56 += 248;
        }
        while (*(_DWORD *)(v58 + 260) > (int)v55);
        v6 = (void (***)(cricket::Codec *__hidden))(a1 + v56);
        v58 = a2;
        if (v56 == 248)
        {
          v61 = a2;
          do
          {
            if ((unint64_t)v6 >= v61)
            {
              v59 = (void (***)(cricket::Codec *__hidden))v61;
              v335 = (_OWORD *)(a1 + 216);
              v339 = v6;
              goto LABEL_83;
            }
            v59 = (void (***)(cricket::Codec *__hidden))(v61 - 248);
            v62 = *(_DWORD *)(v61 - 236);
            v61 -= 248;
          }
          while (v62 <= (int)v55);
LABEL_55:
          v335 = (_OWORD *)(a1 + 216);
          v339 = v6;
          if (v6 < v59)
          {
            v63 = (uint64_t)v59;
            while (1)
            {
              v64 = v6[1];
              v372 = &off_24C0B1418;
              v373 = v64;
              v65 = v6[4];
              v374 = *((_OWORD *)v6 + 1);
              v375 = v65;
              v6[3] = 0;
              v6[4] = 0;
              v6[2] = 0;
              v376 = *(_OWORD *)(v6 + 5);
              LOBYTE(v377) = 0;
              v379 = 0;
              if (*((_BYTE *)v6 + 80))
              {
                v66 = *(_OWORD *)(v6 + 7);
                v378 = v6[9];
                v377 = v66;
                v6[8] = 0;
                v6[9] = 0;
                v6[7] = 0;
                v379 = 1;
              }
              v380 = v6[11];
              v67 = v6[16];
              v68 = *((_OWORD *)v6 + 7);
              v381 = *((_OWORD *)v6 + 6);
              v382 = v68;
              v383 = v67;
              v6[11] = 0;
              LOBYTE(v384) = 0;
              v386 = 0;
              if (*((_BYTE *)v6 + 160))
              {
                v69 = *(_OWORD *)(v6 + 17);
                v385 = v6[19];
                v384 = v69;
                v6[18] = 0;
                v6[19] = 0;
                v6[17] = 0;
                v386 = 1;
              }
              v70 = (void (**)(cricket::Codec *__hidden))(v6 + 22);
              v71 = v6[22];
              v387 = v6[21];
              v388 = v71;
              v389 = v6[23];
              if (v389)
                break;
              v387 = (void (**)(cricket::Codec *__hidden))&v388;
              v390 = 0;
              v391 = 0;
              v392 = 0;
              v73 = v6[24];
              v72 = v6[25];
              v74 = (char *)v72 - (char *)v73;
              if (v72 != v73)
                goto LABEL_65;
LABEL_74:
              v85 = *(_OWORD *)(v6 + 27);
              *(_OWORD *)&v393[9] = *(_OWORD *)((char *)v6 + 225);
              *(_OWORD *)v393 = v85;
              cricket::Codec::operator=((uint64_t)v6, v63);
              v86 = *(_OWORD *)(v63 + 225);
              *(_OWORD *)(v6 + 27) = *(_OWORD *)(v63 + 216);
              *(_OWORD *)((char *)v6 + 225) = v86;
              cricket::Codec::operator=(v63, (uint64_t)&v372);
              v87 = *(_OWORD *)&v393[9];
              *(_OWORD *)(v63 + 216) = *(_OWORD *)v393;
              *(_OWORD *)(v63 + 225) = v87;
              cricket::Codec::~Codec((cricket::Codec *)&v372);
              v88 = v6 + 31;
              do
              {
                if (v88 == (void (***)(cricket::Codec *__hidden))a2)
                  goto LABEL_298;
                v58 = *((unsigned int *)v88 + 3);
                v88 += 31;
              }
              while ((int)v58 > SHIDWORD(v351));
              v6 = v88 - 31;
              do
              {
                if (v63 == a1)
                  goto LABEL_298;
                v89 = v63 - 248;
                v58 = *(unsigned int *)(v63 - 236);
                v63 -= 248;
              }
              while ((int)v58 <= SHIDWORD(v351));
              v63 = v89;
              if ((unint64_t)v6 >= v89)
                goto LABEL_83;
            }
            v71[2] = (void (*)(cricket::Codec *__hidden))&v388;
            v6[21] = v70;
            *v70 = 0;
            v6[23] = 0;
            v390 = 0;
            v391 = 0;
            v392 = 0;
            v73 = v6[24];
            v72 = v6[25];
            v74 = (char *)v72 - (char *)v73;
            if (v72 == v73)
              goto LABEL_74;
LABEL_65:
            v75 = 0xAAAAAAAAAAAAAAABLL * (v74 >> 4);
            if (v75 > 0x555555555555555)
              goto LABEL_312;
            v76 = (char *)operator new(v74);
            v77 = 0;
            v390 = v76;
            v391 = v76;
            v392 = &v76[48 * v75];
            while (1)
            {
              v79 = &v73[v77];
              v80 = (std::string *)&v76[v77 * 8];
              if (SHIBYTE(v73[v77 + 2]) < 0)
              {
                std::string::__init_copy_ctor_external(v80, (const std::string::value_type *)*v79, (std::string::size_type)v79[1]);
                v82 = (std::string *)&v76[v77 * 8 + 24];
                v83 = &v73[v77];
                v84 = (uint64_t)&v73[v77 + 3];
                if ((SHIBYTE(v73[v77 + 5]) & 0x80000000) == 0)
                {
LABEL_67:
                  v78 = *(_OWORD *)v84;
                  v82->__r_.__value_.__r.__words[2] = *(_QWORD *)(v84 + 16);
                  *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v78;
                  v77 += 6;
                  if (&v73[v77] == v72)
                    goto LABEL_73;
                  continue;
                }
              }
              else
              {
                v81 = *(_OWORD *)v79;
                v80->__r_.__value_.__r.__words[2] = (std::string::size_type)v79[2];
                *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v81;
                v82 = (std::string *)&v76[v77 * 8 + 24];
                v83 = &v73[v77];
                v84 = (uint64_t)&v73[v77 + 3];
                if ((SHIBYTE(v73[v77 + 5]) & 0x80000000) == 0)
                  goto LABEL_67;
              }
              std::string::__init_copy_ctor_external(v82, *(const std::string::value_type **)v84, (std::string::size_type)v83[4]);
              v77 += 6;
              if (&v73[v77] == v72)
              {
LABEL_73:
                v391 = &v76[v77 * 8];
                goto LABEL_74;
              }
            }
          }
LABEL_83:
          if (v6 - 31 != (void (***)(cricket::Codec *__hidden))a1)
          {
            cricket::Codec::operator=(a1, (uint64_t)(v6 - 31));
            v90 = *(_OWORD *)((char *)v6 - 23);
            *v335 = *((_OWORD *)v6 - 2);
            *(_OWORD *)((char *)v335 + 9) = v90;
          }
          cricket::Codec::operator=((uint64_t)(v6 - 31), (uint64_t)&v350);
          v91 = *(_OWORD *)((char *)v371 + 9);
          *((_OWORD *)v6 - 2) = v371[0];
          *(_OWORD *)((char *)v6 - 23) = v91;
          cricket::Codec::~Codec((cricket::Codec *)&v350);
          if (v339 < v59)
          {
LABEL_88:
            a4 = 0;
            continue;
          }
          {
            if ((v92 & 1) == 0)
              goto LABEL_88;
            continue;
          }
          a2 = (unint64_t)(v6 - 31);
          if ((v92 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        while (v58 != a1)
        {
          v59 = (void (***)(cricket::Codec *__hidden))(v58 - 248);
          v60 = *(_DWORD *)(v58 - 236);
          v58 -= 248;
          if (v60 > (int)v55)
            goto LABEL_55;
        }
LABEL_298:
        __break(1u);
LABEL_299:
        v387 = (void (**)(cricket::Codec *__hidden))v58;
LABEL_300:
        v391 = 0;
        v390 = 0;
        v392 = 0;
        v318 = *(_QWORD *)(a1 + 192);
        v319 = *(_QWORD *)(a1 + 200);
        v320 = v319 - v318;
        if (v319 != v318)
        {
          v321 = 0xAAAAAAAAAAAAAAABLL * (v320 >> 4);
          if (v321 <= 0x555555555555555)
          {
            v322 = (char *)operator new(v320);
            v323 = 0;
            v390 = v322;
            v391 = v322;
            v392 = &v322[48 * v321];
            while (1)
            {
              v324 = (__int128 *)(v318 + v323);
              v325 = (std::string *)&v322[v323];
              if (*(char *)(v318 + v323 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v325, *(const std::string::value_type **)v324, *((_QWORD *)v324 + 1));
                v327 = (std::string *)&v322[v323 + 24];
                v328 = v318 + v323;
                v329 = v318 + v323 + 24;
                if ((*(char *)(v318 + v323 + 47) & 0x80000000) == 0)
                  goto LABEL_308;
LABEL_303:
                std::string::__init_copy_ctor_external(v327, *(const std::string::value_type **)v329, *(_QWORD *)(v328 + 32));
                v323 += 48;
                if (v318 + v323 == v319)
                  goto LABEL_309;
              }
              else
              {
                v326 = *v324;
                v325->__r_.__value_.__r.__words[2] = *((_QWORD *)v324 + 2);
                *(_OWORD *)&v325->__r_.__value_.__l.__data_ = v326;
                v327 = (std::string *)&v322[v323 + 24];
                v328 = v318 + v323;
                v329 = v318 + v323 + 24;
                if (*(char *)(v318 + v323 + 47) < 0)
                  goto LABEL_303;
LABEL_308:
                v330 = *(_OWORD *)v329;
                v327->__r_.__value_.__r.__words[2] = *(_QWORD *)(v329 + 16);
                *(_OWORD *)&v327->__r_.__value_.__l.__data_ = v330;
                v323 += 48;
                if (v318 + v323 == v319)
                {
LABEL_309:
                  v391 = &v322[v323];
                  goto LABEL_310;
                }
              }
            }
          }
LABEL_312:
          abort();
        }
LABEL_310:
        v331 = *(_OWORD *)(a1 + 216);
        *(_OWORD *)((char *)v6 + 225) = *(_OWORD *)(a1 + 225);
        *(_OWORD *)(v6 + 27) = v331;
        cricket::Codec::operator=(a1, v342);
        v332 = *(_OWORD *)(a2 - 23);
        *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 225) = v332;
        cricket::Codec::operator=(v342, (uint64_t)&v372);
        v333 = *(_OWORD *)((char *)v6 + 225);
        *(_OWORD *)(a2 - 32) = *(_OWORD *)(v6 + 27);
        *(_OWORD *)(a2 - 23) = v333;
        cricket::Codec::~Codec((cricket::Codec *)&v372);
        return result;
    }
  }
}

void std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,cricket::`anonymous namespace'::NonFlexfecReceiveCodecsHaveChanged(std::vector<cricket::VideoCodecSettings>,std::vector<cricket::VideoCodecSettings>)::$_0 &,cricket::VideoCodecSettings*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  __int128 *v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  __int128 *v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  __int128 *v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  void (**v82)(cricket::Codec *__hidden);
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  char v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  _OWORD v103[2];
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a5 + 12) > *(_DWORD *)(a4 + 12))
  {
    v10 = *(_QWORD *)(a4 + 8);
    v82 = &off_24C0B1418;
    v83 = v10;
    v84 = *(_OWORD *)(a4 + 16);
    v85 = *(_QWORD *)(a4 + 32);
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    v86 = *(_OWORD *)(a4 + 40);
    LOBYTE(v87) = 0;
    v89 = 0;
    if (*(_BYTE *)(a4 + 80))
    {
      v87 = *(_OWORD *)(a4 + 56);
      v88 = *(_QWORD *)(a4 + 72);
      *(_QWORD *)(a4 + 64) = 0;
      *(_QWORD *)(a4 + 72) = 0;
      *(_QWORD *)(a4 + 56) = 0;
      v89 = 1;
    }
    v90 = *(_QWORD *)(a4 + 88);
    v11 = *(_OWORD *)(a4 + 112);
    v91 = *(_OWORD *)(a4 + 96);
    v92 = v11;
    v93 = *(_QWORD *)(a4 + 128);
    *(_QWORD *)(a4 + 88) = 0;
    LOBYTE(v94) = 0;
    v96 = 0;
    if (*(_BYTE *)(a4 + 160))
    {
      v94 = *(_OWORD *)(a4 + 136);
      v95 = *(_QWORD *)(a4 + 152);
      *(_QWORD *)(a4 + 144) = 0;
      *(_QWORD *)(a4 + 152) = 0;
      *(_QWORD *)(a4 + 136) = 0;
      v96 = 1;
    }
    v12 = (_QWORD *)(a4 + 176);
    v13 = *(_QWORD *)(a4 + 176);
    v97 = *(uint64_t **)(a4 + 168);
    v98 = v13;
    v99 = *(_QWORD *)(a4 + 184);
    if (v99)
    {
      *(_QWORD *)(v13 + 16) = &v98;
      *(_QWORD *)(a4 + 168) = v12;
      *v12 = 0;
      *(_QWORD *)(a4 + 184) = 0;
      v100 = 0;
      v101 = 0;
      v102 = 0;
      v15 = *(_QWORD *)(a4 + 192);
      v14 = *(_QWORD *)(a4 + 200);
      v16 = v14 - v15;
      if (v14 == v15)
      {
LABEL_19:
        v103[0] = *(_OWORD *)(a4 + 216);
        *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)(a4 + 225);
        cricket::Codec::operator=(a4, a5);
        v27 = *(_OWORD *)(a5 + 225);
        *(_OWORD *)(a4 + 216) = *(_OWORD *)(a5 + 216);
        *(_OWORD *)(a4 + 225) = v27;
        cricket::Codec::operator=(a5, (uint64_t)&v82);
        *(_OWORD *)(a5 + 216) = v103[0];
        *(_OWORD *)(a5 + 225) = *(_OWORD *)((char *)v103 + 9);
        cricket::Codec::~Codec((cricket::Codec *)&v82);
        if (*(_DWORD *)(a4 + 12) <= *(_DWORD *)(a3 + 12))
          return;
        v28 = *(_QWORD *)(a3 + 8);
        v82 = &off_24C0B1418;
        v83 = v28;
        v84 = *(_OWORD *)(a3 + 16);
        v85 = *(_QWORD *)(a3 + 32);
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = 0;
        v86 = *(_OWORD *)(a3 + 40);
        LOBYTE(v87) = 0;
        v89 = 0;
        if (*(_BYTE *)(a3 + 80))
        {
          v87 = *(_OWORD *)(a3 + 56);
          v88 = *(_QWORD *)(a3 + 72);
          *(_QWORD *)(a3 + 64) = 0;
          *(_QWORD *)(a3 + 72) = 0;
          *(_QWORD *)(a3 + 56) = 0;
          v89 = 1;
        }
        v90 = *(_QWORD *)(a3 + 88);
        v29 = *(_OWORD *)(a3 + 112);
        v91 = *(_OWORD *)(a3 + 96);
        v92 = v29;
        v93 = *(_QWORD *)(a3 + 128);
        *(_QWORD *)(a3 + 88) = 0;
        LOBYTE(v94) = 0;
        v96 = 0;
        if (*(_BYTE *)(a3 + 160))
        {
          v94 = *(_OWORD *)(a3 + 136);
          v95 = *(_QWORD *)(a3 + 152);
          *(_QWORD *)(a3 + 144) = 0;
          *(_QWORD *)(a3 + 152) = 0;
          *(_QWORD *)(a3 + 136) = 0;
          v96 = 1;
        }
        v30 = (_QWORD *)(a3 + 176);
        v31 = *(_QWORD *)(a3 + 176);
        v97 = *(uint64_t **)(a3 + 168);
        v98 = v31;
        v99 = *(_QWORD *)(a3 + 184);
        if (v99)
        {
          *(_QWORD *)(v31 + 16) = &v98;
          *(_QWORD *)(a3 + 168) = v30;
          *v30 = 0;
          *(_QWORD *)(a3 + 184) = 0;
          v100 = 0;
          v101 = 0;
          v102 = 0;
          v32 = *(_QWORD *)(a3 + 192);
          v33 = *(_QWORD *)(a3 + 200);
          v34 = v33 - v32;
          if (v33 == v32)
          {
LABEL_37:
            v103[0] = *(_OWORD *)(a3 + 216);
            *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)(a3 + 225);
            cricket::Codec::operator=(a3, a4);
            v45 = *(_OWORD *)(a4 + 225);
            *(_OWORD *)(a3 + 216) = *(_OWORD *)(a4 + 216);
            *(_OWORD *)(a3 + 225) = v45;
            cricket::Codec::operator=(a4, (uint64_t)&v82);
            *(_OWORD *)(a4 + 216) = v103[0];
            *(_OWORD *)(a4 + 225) = *(_OWORD *)((char *)v103 + 9);
            cricket::Codec::~Codec((cricket::Codec *)&v82);
            if (*(_DWORD *)(a3 + 12) <= *(_DWORD *)(a2 + 12))
              return;
            v46 = *(_QWORD *)(a2 + 8);
            v82 = &off_24C0B1418;
            v83 = v46;
            v84 = *(_OWORD *)(a2 + 16);
            v85 = *(_QWORD *)(a2 + 32);
            *(_QWORD *)(a2 + 16) = 0;
            *(_QWORD *)(a2 + 24) = 0;
            *(_QWORD *)(a2 + 32) = 0;
            v86 = *(_OWORD *)(a2 + 40);
            LOBYTE(v87) = 0;
            v89 = 0;
            if (*(_BYTE *)(a2 + 80))
            {
              v87 = *(_OWORD *)(a2 + 56);
              v88 = *(_QWORD *)(a2 + 72);
              *(_QWORD *)(a2 + 64) = 0;
              *(_QWORD *)(a2 + 72) = 0;
              *(_QWORD *)(a2 + 56) = 0;
              v89 = 1;
            }
            v90 = *(_QWORD *)(a2 + 88);
            v47 = *(_OWORD *)(a2 + 112);
            v91 = *(_OWORD *)(a2 + 96);
            v92 = v47;
            v93 = *(_QWORD *)(a2 + 128);
            *(_QWORD *)(a2 + 88) = 0;
            LOBYTE(v94) = 0;
            v96 = 0;
            if (*(_BYTE *)(a2 + 160))
            {
              v94 = *(_OWORD *)(a2 + 136);
              v95 = *(_QWORD *)(a2 + 152);
              *(_QWORD *)(a2 + 144) = 0;
              *(_QWORD *)(a2 + 152) = 0;
              *(_QWORD *)(a2 + 136) = 0;
              v96 = 1;
            }
            v48 = (_QWORD *)(a2 + 176);
            v49 = *(_QWORD *)(a2 + 176);
            v97 = *(uint64_t **)(a2 + 168);
            v98 = v49;
            v99 = *(_QWORD *)(a2 + 184);
            if (v99)
            {
              *(_QWORD *)(v49 + 16) = &v98;
              *(_QWORD *)(a2 + 168) = v48;
              *v48 = 0;
              *(_QWORD *)(a2 + 184) = 0;
              v100 = 0;
              v101 = 0;
              v102 = 0;
              v50 = *(_QWORD *)(a2 + 192);
              v51 = *(_QWORD *)(a2 + 200);
              v52 = v51 - v50;
              if (v51 == v50)
              {
LABEL_55:
                v103[0] = *(_OWORD *)(a2 + 216);
                *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)(a2 + 225);
                cricket::Codec::operator=(a2, a3);
                v63 = *(_OWORD *)(a3 + 225);
                *(_OWORD *)(a2 + 216) = *(_OWORD *)(a3 + 216);
                *(_OWORD *)(a2 + 225) = v63;
                cricket::Codec::operator=(a3, (uint64_t)&v82);
                *(_OWORD *)(a3 + 216) = v103[0];
                *(_OWORD *)(a3 + 225) = *(_OWORD *)((char *)v103 + 9);
                cricket::Codec::~Codec((cricket::Codec *)&v82);
                if (*(_DWORD *)(a2 + 12) <= *(_DWORD *)(a1 + 12))
                  return;
                v64 = *(_QWORD *)(a1 + 8);
                v82 = &off_24C0B1418;
                v83 = v64;
                v84 = *(_OWORD *)(a1 + 16);
                v85 = *(_QWORD *)(a1 + 32);
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)(a1 + 24) = 0;
                *(_QWORD *)(a1 + 32) = 0;
                v86 = *(_OWORD *)(a1 + 40);
                LOBYTE(v87) = 0;
                v89 = 0;
                if (*(_BYTE *)(a1 + 80))
                {
                  v87 = *(_OWORD *)(a1 + 56);
                  v88 = *(_QWORD *)(a1 + 72);
                  *(_QWORD *)(a1 + 64) = 0;
                  *(_QWORD *)(a1 + 72) = 0;
                  *(_QWORD *)(a1 + 56) = 0;
                  v89 = 1;
                }
                v90 = *(_QWORD *)(a1 + 88);
                v65 = *(_OWORD *)(a1 + 112);
                v91 = *(_OWORD *)(a1 + 96);
                v92 = v65;
                v93 = *(_QWORD *)(a1 + 128);
                *(_QWORD *)(a1 + 88) = 0;
                LOBYTE(v94) = 0;
                v96 = 0;
                if (*(_BYTE *)(a1 + 160))
                {
                  v94 = *(_OWORD *)(a1 + 136);
                  v95 = *(_QWORD *)(a1 + 152);
                  *(_QWORD *)(a1 + 144) = 0;
                  *(_QWORD *)(a1 + 152) = 0;
                  *(_QWORD *)(a1 + 136) = 0;
                  v96 = 1;
                }
                v66 = (_QWORD *)(a1 + 176);
                v67 = *(_QWORD *)(a1 + 176);
                v97 = *(uint64_t **)(a1 + 168);
                v98 = v67;
                v99 = *(_QWORD *)(a1 + 184);
                if (v99)
                {
                  *(_QWORD *)(v67 + 16) = &v98;
                  *(_QWORD *)(a1 + 168) = v66;
                  *v66 = 0;
                  *(_QWORD *)(a1 + 184) = 0;
                  v100 = 0;
                  v101 = 0;
                  v102 = 0;
                  v68 = *(_QWORD *)(a1 + 192);
                  v69 = *(_QWORD *)(a1 + 200);
                  v70 = v69 - v68;
                  if (v69 == v68)
                  {
LABEL_73:
                    v103[0] = *(_OWORD *)(a1 + 216);
                    *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)(a1 + 225);
                    cricket::Codec::operator=(a1, a2);
                    v81 = *(_OWORD *)(a2 + 225);
                    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
                    *(_OWORD *)(a1 + 225) = v81;
                    cricket::Codec::operator=(a2, (uint64_t)&v82);
                    *(_OWORD *)(a2 + 216) = v103[0];
                    *(_OWORD *)(a2 + 225) = *(_OWORD *)((char *)v103 + 9);
                    cricket::Codec::~Codec((cricket::Codec *)&v82);
                    return;
                  }
                }
                else
                {
                  v97 = &v98;
                  v100 = 0;
                  v101 = 0;
                  v102 = 0;
                  v68 = *(_QWORD *)(a1 + 192);
                  v69 = *(_QWORD *)(a1 + 200);
                  v70 = v69 - v68;
                  if (v69 == v68)
                    goto LABEL_73;
                }
                v71 = 0xAAAAAAAAAAAAAAABLL * (v70 >> 4);
                if (v71 <= 0x555555555555555)
                {
                  v72 = (char *)operator new(v70);
                  v73 = 0;
                  v100 = v72;
                  v101 = v72;
                  v102 = &v72[48 * v71];
                  while (1)
                  {
                    v74 = (__int128 *)(v68 + v73);
                    v75 = (std::string *)&v72[v73];
                    if (*(char *)(v68 + v73 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(v75, *(const std::string::value_type **)v74, *((_QWORD *)v74 + 1));
                      v77 = (std::string *)&v72[v73 + 24];
                      v78 = v68 + v73;
                      v79 = v68 + v73 + 24;
                      if ((*(char *)(v68 + v73 + 47) & 0x80000000) == 0)
                        goto LABEL_71;
LABEL_66:
                      std::string::__init_copy_ctor_external(v77, *(const std::string::value_type **)v79, *(_QWORD *)(v78 + 32));
                      v73 += 48;
                      if (v68 + v73 == v69)
                        goto LABEL_72;
                    }
                    else
                    {
                      v76 = *v74;
                      v75->__r_.__value_.__r.__words[2] = *((_QWORD *)v74 + 2);
                      *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
                      v77 = (std::string *)&v72[v73 + 24];
                      v78 = v68 + v73;
                      v79 = v68 + v73 + 24;
                      if (*(char *)(v68 + v73 + 47) < 0)
                        goto LABEL_66;
LABEL_71:
                      v80 = *(_OWORD *)v79;
                      v77->__r_.__value_.__r.__words[2] = *(_QWORD *)(v79 + 16);
                      *(_OWORD *)&v77->__r_.__value_.__l.__data_ = v80;
                      v73 += 48;
                      if (v68 + v73 == v69)
                      {
LABEL_72:
                        v101 = &v72[v73];
                        goto LABEL_73;
                      }
                    }
                  }
                }
LABEL_75:
                abort();
              }
            }
            else
            {
              v97 = &v98;
              v100 = 0;
              v101 = 0;
              v102 = 0;
              v50 = *(_QWORD *)(a2 + 192);
              v51 = *(_QWORD *)(a2 + 200);
              v52 = v51 - v50;
              if (v51 == v50)
                goto LABEL_55;
            }
            v53 = 0xAAAAAAAAAAAAAAABLL * (v52 >> 4);
            if (v53 > 0x555555555555555)
              goto LABEL_75;
            v54 = (char *)operator new(v52);
            v55 = 0;
            v100 = v54;
            v101 = v54;
            v102 = &v54[48 * v53];
            while (1)
            {
              v57 = (__int128 *)(v50 + v55);
              v58 = (std::string *)&v54[v55];
              if (*(char *)(v50 + v55 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v58, *(const std::string::value_type **)v57, *((_QWORD *)v57 + 1));
                v60 = (std::string *)&v54[v55 + 24];
                v61 = v50 + v55;
                v62 = v50 + v55 + 24;
                if ((*(char *)(v50 + v55 + 47) & 0x80000000) == 0)
                  goto LABEL_48;
LABEL_53:
                std::string::__init_copy_ctor_external(v60, *(const std::string::value_type **)v62, *(_QWORD *)(v61 + 32));
                v55 += 48;
                if (v50 + v55 == v51)
                {
LABEL_54:
                  v101 = &v54[v55];
                  goto LABEL_55;
                }
              }
              else
              {
                v59 = *v57;
                v58->__r_.__value_.__r.__words[2] = *((_QWORD *)v57 + 2);
                *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
                v60 = (std::string *)&v54[v55 + 24];
                v61 = v50 + v55;
                v62 = v50 + v55 + 24;
                if (*(char *)(v50 + v55 + 47) < 0)
                  goto LABEL_53;
LABEL_48:
                v56 = *(_OWORD *)v62;
                v60->__r_.__value_.__r.__words[2] = *(_QWORD *)(v62 + 16);
                *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v56;
                v55 += 48;
                if (v50 + v55 == v51)
                  goto LABEL_54;
              }
            }
          }
        }
        else
        {
          v97 = &v98;
          v100 = 0;
          v101 = 0;
          v102 = 0;
          v32 = *(_QWORD *)(a3 + 192);
          v33 = *(_QWORD *)(a3 + 200);
          v34 = v33 - v32;
          if (v33 == v32)
            goto LABEL_37;
        }
        v35 = 0xAAAAAAAAAAAAAAABLL * (v34 >> 4);
        if (v35 > 0x555555555555555)
          goto LABEL_75;
        v36 = (char *)operator new(v34);
        v37 = 0;
        v100 = v36;
        v101 = v36;
        v102 = &v36[48 * v35];
        while (1)
        {
          v38 = (__int128 *)(v32 + v37);
          v39 = (std::string *)&v36[v37];
          if (*(char *)(v32 + v37 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)v38, *((_QWORD *)v38 + 1));
            v41 = (std::string *)&v36[v37 + 24];
            v42 = v32 + v37;
            v43 = v32 + v37 + 24;
            if ((*(char *)(v32 + v37 + 47) & 0x80000000) == 0)
              goto LABEL_35;
LABEL_30:
            std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v43, *(_QWORD *)(v42 + 32));
            v37 += 48;
            if (v32 + v37 == v33)
              goto LABEL_36;
          }
          else
          {
            v40 = *v38;
            v39->__r_.__value_.__r.__words[2] = *((_QWORD *)v38 + 2);
            *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
            v41 = (std::string *)&v36[v37 + 24];
            v42 = v32 + v37;
            v43 = v32 + v37 + 24;
            if (*(char *)(v32 + v37 + 47) < 0)
              goto LABEL_30;
LABEL_35:
            v44 = *(_OWORD *)v43;
            v41->__r_.__value_.__r.__words[2] = *(_QWORD *)(v43 + 16);
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v44;
            v37 += 48;
            if (v32 + v37 == v33)
            {
LABEL_36:
              v101 = &v36[v37];
              goto LABEL_37;
            }
          }
        }
      }
    }
    else
    {
      v97 = &v98;
      v100 = 0;
      v101 = 0;
      v102 = 0;
      v15 = *(_QWORD *)(a4 + 192);
      v14 = *(_QWORD *)(a4 + 200);
      v16 = v14 - v15;
      if (v14 == v15)
        goto LABEL_19;
    }
    v17 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 4);
    if (v17 > 0x555555555555555)
      goto LABEL_75;
    v18 = (char *)operator new(v16);
    v19 = 0;
    v100 = v18;
    v101 = v18;
    v102 = &v18[48 * v17];
    while (1)
    {
      v21 = (__int128 *)(v15 + v19);
      v22 = (std::string *)&v18[v19];
      if (*(char *)(v15 + v19 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
        v24 = (std::string *)&v18[v19 + 24];
        v25 = v15 + v19;
        v26 = v15 + v19 + 24;
        if ((*(char *)(v15 + v19 + 47) & 0x80000000) == 0)
          goto LABEL_12;
LABEL_17:
        std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v26, *(_QWORD *)(v25 + 32));
        v19 += 48;
        if (v15 + v19 == v14)
        {
LABEL_18:
          v101 = &v18[v19];
          goto LABEL_19;
        }
      }
      else
      {
        v23 = *v21;
        v22->__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
        v24 = (std::string *)&v18[v19 + 24];
        v25 = v15 + v19;
        v26 = v15 + v19 + 24;
        if (*(char *)(v15 + v19 + 47) < 0)
          goto LABEL_17;
LABEL_12:
        v20 = *(_OWORD *)v26;
        v24->__r_.__value_.__r.__words[2] = *(_QWORD *)(v26 + 16);
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v20;
        v19 += 48;
        if (v15 + v19 == v14)
          goto LABEL_18;
      }
    }
  }
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,cricket::`anonymous namespace'::NonFlexfecReceiveCodecsHaveChanged(std::vector<cricket::VideoCodecSettings>,std::vector<cricket::VideoCodecSettings>)::$_0 &,cricket::VideoCodecSettings*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  _OWORD *v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 *v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  __int128 *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  __int128 *v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  __int128 *v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  __int128 *v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  void (**v101)(cricket::Codec *__hidden);
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  char v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  _OWORD v122[2];
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a3 + 12);
  if (v6 > *(_DWORD *)(a1 + 12))
  {
    v8 = (_OWORD *)(a1 + 216);
    v9 = (__int128 *)(a1 + 16);
    v10 = (__int128 *)(a1 + 40);
    if (v7 > v6)
    {
      v11 = *(_QWORD *)(a1 + 8);
      v101 = &off_24C0B1418;
      v102 = v11;
      v103 = *v9;
      v104 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v105 = *v10;
      LOBYTE(v106) = 0;
      v108 = 0;
      if (*(_BYTE *)(a1 + 80))
      {
        v106 = *(_OWORD *)(a1 + 56);
        v107 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        v108 = 1;
      }
      v109 = *(_QWORD *)(a1 + 88);
      v12 = *(_OWORD *)(a1 + 112);
      v110 = *(_OWORD *)(a1 + 96);
      v111 = v12;
      v112 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 88) = 0;
      LOBYTE(v113) = 0;
      v115 = 0;
      if (*(_BYTE *)(a1 + 160))
      {
        v113 = *(_OWORD *)(a1 + 136);
        v114 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 144) = 0;
        *(_QWORD *)(a1 + 152) = 0;
        *(_QWORD *)(a1 + 136) = 0;
        v115 = 1;
      }
      v13 = (_QWORD *)(a1 + 176);
      v14 = *(_QWORD *)(a1 + 176);
      v116 = *(uint64_t **)(a1 + 168);
      v117 = v14;
      v118 = *(_QWORD *)(a1 + 184);
      if (v118)
      {
        *(_QWORD *)(v14 + 16) = &v117;
        *(_QWORD *)(a1 + 168) = v13;
        *v13 = 0;
        *(_QWORD *)(a1 + 184) = 0;
        v119 = 0;
        v120 = 0;
        v121 = 0;
        v15 = *(_QWORD *)(a1 + 192);
        v16 = *(_QWORD *)(a1 + 200);
        v17 = v16 - v15;
        if (v16 == v15)
        {
LABEL_35:
          v122[0] = *v8;
          *(_OWORD *)((char *)v122 + 9) = *(_OWORD *)(a1 + 225);
          cricket::Codec::operator=(a1, a3);
          v42 = *(_OWORD *)(a3 + 225);
          *v8 = *(_OWORD *)(a3 + 216);
          *(_OWORD *)(a1 + 225) = v42;
LABEL_94:
          cricket::Codec::operator=(a3, (uint64_t)&v101);
          *(_OWORD *)(a3 + 216) = v122[0];
          *(_OWORD *)(a3 + 225) = *(_OWORD *)((char *)v122 + 9);
          goto LABEL_95;
        }
      }
      else
      {
        v116 = &v117;
        v119 = 0;
        v120 = 0;
        v121 = 0;
        v15 = *(_QWORD *)(a1 + 192);
        v16 = *(_QWORD *)(a1 + 200);
        v17 = v16 - v15;
        if (v16 == v15)
          goto LABEL_35;
      }
      v32 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 4);
      if (v32 <= 0x555555555555555)
      {
        v33 = (char *)operator new(v17);
        v34 = 0;
        v119 = v33;
        v120 = v33;
        v121 = &v33[48 * v32];
        while (1)
        {
          v36 = (__int128 *)(v15 + v34);
          v37 = (std::string *)&v33[v34];
          if (*(char *)(v15 + v34 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)v36, *((_QWORD *)v36 + 1));
            v39 = (std::string *)&v33[v34 + 24];
            v40 = v15 + v34;
            v41 = v15 + v34 + 24;
            if ((*(char *)(v15 + v34 + 47) & 0x80000000) == 0)
              goto LABEL_28;
LABEL_33:
            std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)v41, *(_QWORD *)(v40 + 32));
            v34 += 48;
            if (v15 + v34 == v16)
            {
LABEL_34:
              v120 = &v33[v34];
              goto LABEL_35;
            }
          }
          else
          {
            v38 = *v36;
            v37->__r_.__value_.__r.__words[2] = *((_QWORD *)v36 + 2);
            *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
            v39 = (std::string *)&v33[v34 + 24];
            v40 = v15 + v34;
            v41 = v15 + v34 + 24;
            if (*(char *)(v15 + v34 + 47) < 0)
              goto LABEL_33;
LABEL_28:
            v35 = *(_OWORD *)v41;
            v39->__r_.__value_.__r.__words[2] = *(_QWORD *)(v41 + 16);
            *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v35;
            v34 += 48;
            if (v15 + v34 == v16)
              goto LABEL_34;
          }
        }
      }
LABEL_97:
      abort();
    }
    v25 = *(_QWORD *)(a1 + 8);
    v101 = &off_24C0B1418;
    v102 = v25;
    v103 = *v9;
    v104 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v105 = *v10;
    LOBYTE(v106) = 0;
    v108 = 0;
    if (*(_BYTE *)(a1 + 80))
    {
      v106 = *(_OWORD *)(a1 + 56);
      v107 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      v108 = 1;
    }
    v109 = *(_QWORD *)(a1 + 88);
    v26 = *(_OWORD *)(a1 + 112);
    v110 = *(_OWORD *)(a1 + 96);
    v111 = v26;
    v112 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 88) = 0;
    LOBYTE(v113) = 0;
    v115 = 0;
    if (*(_BYTE *)(a1 + 160))
    {
      v113 = *(_OWORD *)(a1 + 136);
      v114 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 136) = 0;
      v115 = 1;
    }
    v27 = (_QWORD *)(a1 + 176);
    v28 = *(_QWORD *)(a1 + 176);
    v116 = *(uint64_t **)(a1 + 168);
    v117 = v28;
    v118 = *(_QWORD *)(a1 + 184);
    if (v118)
    {
      *(_QWORD *)(v28 + 16) = &v117;
      *(_QWORD *)(a1 + 168) = v27;
      *v27 = 0;
      *(_QWORD *)(a1 + 184) = 0;
      v119 = 0;
      v120 = 0;
      v121 = 0;
      v29 = *(_QWORD *)(a1 + 192);
      v30 = *(_QWORD *)(a1 + 200);
      v31 = v30 - v29;
      if (v30 == v29)
      {
LABEL_64:
        v122[0] = *v8;
        *(_OWORD *)((char *)v122 + 9) = *(_OWORD *)(a1 + 225);
        cricket::Codec::operator=(a1, a2);
        v71 = *(_OWORD *)(a2 + 225);
        *v8 = *(_OWORD *)(a2 + 216);
        *(_OWORD *)(a1 + 225) = v71;
        cricket::Codec::operator=(a2, (uint64_t)&v101);
        *(_OWORD *)(a2 + 216) = v122[0];
        *(_OWORD *)(a2 + 225) = *(_OWORD *)((char *)v122 + 9);
        cricket::Codec::~Codec((cricket::Codec *)&v101);
        if (*(_DWORD *)(a3 + 12) <= *(_DWORD *)(a2 + 12))
          return;
        v72 = *(_QWORD *)(a2 + 8);
        v101 = &off_24C0B1418;
        v102 = v72;
        v103 = *(_OWORD *)(a2 + 16);
        v104 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        v105 = *(_OWORD *)(a2 + 40);
        LOBYTE(v106) = 0;
        v108 = 0;
        if (*(_BYTE *)(a2 + 80))
        {
          v106 = *(_OWORD *)(a2 + 56);
          v107 = *(_QWORD *)(a2 + 72);
          *(_QWORD *)(a2 + 64) = 0;
          *(_QWORD *)(a2 + 72) = 0;
          *(_QWORD *)(a2 + 56) = 0;
          v108 = 1;
        }
        v109 = *(_QWORD *)(a2 + 88);
        v73 = *(_OWORD *)(a2 + 112);
        v110 = *(_OWORD *)(a2 + 96);
        v111 = v73;
        v112 = *(_QWORD *)(a2 + 128);
        *(_QWORD *)(a2 + 88) = 0;
        LOBYTE(v113) = 0;
        v115 = 0;
        if (*(_BYTE *)(a2 + 160))
        {
          v113 = *(_OWORD *)(a2 + 136);
          v114 = *(_QWORD *)(a2 + 152);
          *(_QWORD *)(a2 + 144) = 0;
          *(_QWORD *)(a2 + 152) = 0;
          *(_QWORD *)(a2 + 136) = 0;
          v115 = 1;
        }
        v74 = (_QWORD *)(a2 + 176);
        v75 = *(_QWORD *)(a2 + 176);
        v116 = *(uint64_t **)(a2 + 168);
        v117 = v75;
        v118 = *(_QWORD *)(a2 + 184);
        if (v118)
        {
          *(_QWORD *)(v75 + 16) = &v117;
          *(_QWORD *)(a2 + 168) = v74;
          *v74 = 0;
          *(_QWORD *)(a2 + 184) = 0;
          v119 = 0;
          v120 = 0;
          v121 = 0;
          v76 = *(_QWORD *)(a2 + 192);
          v77 = *(_QWORD *)(a2 + 200);
          v78 = v77 - v76;
          if (v77 == v76)
          {
LABEL_93:
            v122[0] = *(_OWORD *)(a2 + 216);
            *(_OWORD *)((char *)v122 + 9) = *(_OWORD *)(a2 + 225);
            cricket::Codec::operator=(a2, a3);
            v100 = *(_OWORD *)(a3 + 225);
            *(_OWORD *)(a2 + 216) = *(_OWORD *)(a3 + 216);
            *(_OWORD *)(a2 + 225) = v100;
            goto LABEL_94;
          }
        }
        else
        {
          v116 = &v117;
          v119 = 0;
          v120 = 0;
          v121 = 0;
          v76 = *(_QWORD *)(a2 + 192);
          v77 = *(_QWORD *)(a2 + 200);
          v78 = v77 - v76;
          if (v77 == v76)
            goto LABEL_93;
        }
        v90 = 0xAAAAAAAAAAAAAAABLL * (v78 >> 4);
        if (v90 > 0x555555555555555)
          goto LABEL_97;
        v91 = (char *)operator new(v78);
        v92 = 0;
        v119 = v91;
        v120 = v91;
        v121 = &v91[48 * v90];
        while (1)
        {
          v93 = (__int128 *)(v76 + v92);
          v94 = (std::string *)&v91[v92];
          if (*(char *)(v76 + v92 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v94, *(const std::string::value_type **)v93, *((_QWORD *)v93 + 1));
            v96 = (std::string *)&v91[v92 + 24];
            v97 = v76 + v92;
            v98 = v76 + v92 + 24;
            if ((*(char *)(v76 + v92 + 47) & 0x80000000) == 0)
              goto LABEL_91;
LABEL_86:
            std::string::__init_copy_ctor_external(v96, *(const std::string::value_type **)v98, *(_QWORD *)(v97 + 32));
            v92 += 48;
            if (v76 + v92 == v77)
              goto LABEL_92;
          }
          else
          {
            v95 = *v93;
            v94->__r_.__value_.__r.__words[2] = *((_QWORD *)v93 + 2);
            *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v95;
            v96 = (std::string *)&v91[v92 + 24];
            v97 = v76 + v92;
            v98 = v76 + v92 + 24;
            if (*(char *)(v76 + v92 + 47) < 0)
              goto LABEL_86;
LABEL_91:
            v99 = *(_OWORD *)v98;
            v96->__r_.__value_.__r.__words[2] = *(_QWORD *)(v98 + 16);
            *(_OWORD *)&v96->__r_.__value_.__l.__data_ = v99;
            v92 += 48;
            if (v76 + v92 == v77)
            {
LABEL_92:
              v120 = &v91[v92];
              goto LABEL_93;
            }
          }
        }
      }
    }
    else
    {
      v116 = &v117;
      v119 = 0;
      v120 = 0;
      v121 = 0;
      v29 = *(_QWORD *)(a1 + 192);
      v30 = *(_QWORD *)(a1 + 200);
      v31 = v30 - v29;
      if (v30 == v29)
        goto LABEL_64;
    }
    v61 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 4);
    if (v61 > 0x555555555555555)
      goto LABEL_97;
    v62 = (char *)operator new(v31);
    v63 = 0;
    v119 = v62;
    v120 = v62;
    v121 = &v62[48 * v61];
    while (1)
    {
      v65 = (__int128 *)(v29 + v63);
      v66 = (std::string *)&v62[v63];
      if (*(char *)(v29 + v63 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v66, *(const std::string::value_type **)v65, *((_QWORD *)v65 + 1));
        v68 = (std::string *)&v62[v63 + 24];
        v69 = v29 + v63;
        v70 = v29 + v63 + 24;
        if ((*(char *)(v29 + v63 + 47) & 0x80000000) == 0)
          goto LABEL_57;
LABEL_62:
        std::string::__init_copy_ctor_external(v68, *(const std::string::value_type **)v70, *(_QWORD *)(v69 + 32));
        v63 += 48;
        if (v29 + v63 == v30)
        {
LABEL_63:
          v120 = &v62[v63];
          goto LABEL_64;
        }
      }
      else
      {
        v67 = *v65;
        v66->__r_.__value_.__r.__words[2] = *((_QWORD *)v65 + 2);
        *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
        v68 = (std::string *)&v62[v63 + 24];
        v69 = v29 + v63;
        v70 = v29 + v63 + 24;
        if (*(char *)(v29 + v63 + 47) < 0)
          goto LABEL_62;
LABEL_57:
        v64 = *(_OWORD *)v70;
        v68->__r_.__value_.__r.__words[2] = *(_QWORD *)(v70 + 16);
        *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v64;
        v63 += 48;
        if (v29 + v63 == v30)
          goto LABEL_63;
      }
    }
  }
  if (v7 <= v6)
    return;
  v18 = *(_QWORD *)(a2 + 8);
  v101 = &off_24C0B1418;
  v102 = v18;
  v103 = *(_OWORD *)(a2 + 16);
  v104 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v105 = *(_OWORD *)(a2 + 40);
  LOBYTE(v106) = 0;
  v108 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v106 = *(_OWORD *)(a2 + 56);
    v107 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    v108 = 1;
  }
  v109 = *(_QWORD *)(a2 + 88);
  v19 = *(_OWORD *)(a2 + 112);
  v110 = *(_OWORD *)(a2 + 96);
  v111 = v19;
  v112 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 88) = 0;
  LOBYTE(v113) = 0;
  v115 = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    v113 = *(_OWORD *)(a2 + 136);
    v114 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    v115 = 1;
  }
  v20 = (_QWORD *)(a2 + 176);
  v21 = *(_QWORD *)(a2 + 176);
  v116 = *(uint64_t **)(a2 + 168);
  v117 = v21;
  v118 = *(_QWORD *)(a2 + 184);
  if (!v118)
  {
    v116 = &v117;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v22 = *(_QWORD *)(a2 + 192);
    v23 = *(_QWORD *)(a2 + 200);
    v24 = v23 - v22;
    if (v23 == v22)
      goto LABEL_46;
    goto LABEL_37;
  }
  *(_QWORD *)(v21 + 16) = &v117;
  *(_QWORD *)(a2 + 168) = v20;
  *v20 = 0;
  *(_QWORD *)(a2 + 184) = 0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v22 = *(_QWORD *)(a2 + 192);
  v23 = *(_QWORD *)(a2 + 200);
  v24 = v23 - v22;
  if (v23 != v22)
  {
LABEL_37:
    v43 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 4);
    if (v43 > 0x555555555555555)
      goto LABEL_97;
    v44 = (char *)operator new(v24);
    v45 = 0;
    v119 = v44;
    v120 = v44;
    v121 = &v44[48 * v43];
    while (1)
    {
      v47 = (__int128 *)(v22 + v45);
      v48 = (std::string *)&v44[v45];
      if (*(char *)(v22 + v45 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v48, *(const std::string::value_type **)v47, *((_QWORD *)v47 + 1));
        v50 = (std::string *)&v44[v45 + 24];
        v51 = v22 + v45;
        v52 = v22 + v45 + 24;
        if ((*(char *)(v22 + v45 + 47) & 0x80000000) == 0)
          goto LABEL_39;
LABEL_44:
        std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)v52, *(_QWORD *)(v51 + 32));
        v45 += 48;
        if (v22 + v45 == v23)
        {
LABEL_45:
          v120 = &v44[v45];
          break;
        }
      }
      else
      {
        v49 = *v47;
        v48->__r_.__value_.__r.__words[2] = *((_QWORD *)v47 + 2);
        *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v49;
        v50 = (std::string *)&v44[v45 + 24];
        v51 = v22 + v45;
        v52 = v22 + v45 + 24;
        if (*(char *)(v22 + v45 + 47) < 0)
          goto LABEL_44;
LABEL_39:
        v46 = *(_OWORD *)v52;
        v50->__r_.__value_.__r.__words[2] = *(_QWORD *)(v52 + 16);
        *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v46;
        v45 += 48;
        if (v22 + v45 == v23)
          goto LABEL_45;
      }
    }
  }
LABEL_46:
  v122[0] = *(_OWORD *)(a2 + 216);
  *(_OWORD *)((char *)v122 + 9) = *(_OWORD *)(a2 + 225);
  cricket::Codec::operator=(a2, a3);
  v53 = *(_OWORD *)(a3 + 225);
  *(_OWORD *)(a2 + 216) = *(_OWORD *)(a3 + 216);
  *(_OWORD *)(a2 + 225) = v53;
  cricket::Codec::operator=(a3, (uint64_t)&v101);
  *(_OWORD *)(a3 + 216) = v122[0];
  *(_OWORD *)(a3 + 225) = *(_OWORD *)((char *)v122 + 9);
  cricket::Codec::~Codec((cricket::Codec *)&v101);
  if (*(_DWORD *)(a2 + 12) <= *(_DWORD *)(a1 + 12))
    return;
  v54 = *(_QWORD *)(a1 + 8);
  v101 = &off_24C0B1418;
  v102 = v54;
  v103 = *(_OWORD *)(a1 + 16);
  v104 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v105 = *(_OWORD *)(a1 + 40);
  LOBYTE(v106) = 0;
  v108 = 0;
  if (*(_BYTE *)(a1 + 80))
  {
    v106 = *(_OWORD *)(a1 + 56);
    v107 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v108 = 1;
  }
  v109 = *(_QWORD *)(a1 + 88);
  v55 = *(_OWORD *)(a1 + 112);
  v110 = *(_OWORD *)(a1 + 96);
  v111 = v55;
  v112 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 88) = 0;
  LOBYTE(v113) = 0;
  v115 = 0;
  if (*(_BYTE *)(a1 + 160))
  {
    v113 = *(_OWORD *)(a1 + 136);
    v114 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    v115 = 1;
  }
  v56 = (_QWORD *)(a1 + 176);
  v57 = *(_QWORD *)(a1 + 176);
  v116 = *(uint64_t **)(a1 + 168);
  v117 = v57;
  v118 = *(_QWORD *)(a1 + 184);
  if (!v118)
  {
    v116 = &v117;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v58 = *(_QWORD *)(a1 + 192);
    v59 = *(_QWORD *)(a1 + 200);
    v60 = v59 - v58;
    if (v59 == v58)
      goto LABEL_82;
    goto LABEL_73;
  }
  *(_QWORD *)(v57 + 16) = &v117;
  *(_QWORD *)(a1 + 168) = v56;
  *v56 = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v58 = *(_QWORD *)(a1 + 192);
  v59 = *(_QWORD *)(a1 + 200);
  v60 = v59 - v58;
  if (v59 != v58)
  {
LABEL_73:
    v79 = 0xAAAAAAAAAAAAAAABLL * (v60 >> 4);
    if (v79 > 0x555555555555555)
      goto LABEL_97;
    v80 = (char *)operator new(v60);
    v81 = 0;
    v119 = v80;
    v120 = v80;
    v121 = &v80[48 * v79];
    while (1)
    {
      v82 = (__int128 *)(v58 + v81);
      v83 = (std::string *)&v80[v81];
      if (*(char *)(v58 + v81 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v83, *(const std::string::value_type **)v82, *((_QWORD *)v82 + 1));
        v85 = (std::string *)&v80[v81 + 24];
        v86 = v58 + v81;
        v87 = v58 + v81 + 24;
        if ((*(char *)(v58 + v81 + 47) & 0x80000000) == 0)
          goto LABEL_80;
LABEL_75:
        std::string::__init_copy_ctor_external(v85, *(const std::string::value_type **)v87, *(_QWORD *)(v86 + 32));
        v81 += 48;
        if (v58 + v81 == v59)
          goto LABEL_81;
      }
      else
      {
        v84 = *v82;
        v83->__r_.__value_.__r.__words[2] = *((_QWORD *)v82 + 2);
        *(_OWORD *)&v83->__r_.__value_.__l.__data_ = v84;
        v85 = (std::string *)&v80[v81 + 24];
        v86 = v58 + v81;
        v87 = v58 + v81 + 24;
        if (*(char *)(v58 + v81 + 47) < 0)
          goto LABEL_75;
LABEL_80:
        v88 = *(_OWORD *)v87;
        v85->__r_.__value_.__r.__words[2] = *(_QWORD *)(v87 + 16);
        *(_OWORD *)&v85->__r_.__value_.__l.__data_ = v88;
        v81 += 48;
        if (v58 + v81 == v59)
        {
LABEL_81:
          v120 = &v80[v81];
          break;
        }
      }
    }
  }
LABEL_82:
  v122[0] = *(_OWORD *)(a1 + 216);
  *(_OWORD *)((char *)v122 + 9) = *(_OWORD *)(a1 + 225);
  cricket::Codec::operator=(a1, a2);
  v89 = *(_OWORD *)(a2 + 225);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 225) = v89;
  cricket::Codec::operator=(a2, (uint64_t)&v101);
  *(_OWORD *)(a2 + 216) = v122[0];
  *(_OWORD *)(a2 + 225) = *(_OWORD *)((char *)v122 + 9);
LABEL_95:
  cricket::Codec::~Codec((cricket::Codec *)&v101);
}

uint64_t std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,cricket::`anonymous namespace'::NonFlexfecReceiveCodecsHaveChanged(std::vector<cricket::VideoCodecSettings>,std::vector<cricket::VideoCodecSettings>)::$_0 &,cricket::VideoCodecSettings*>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  __int128 *v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  int v52;
  void (**v53)(cricket::Codec *__hidden);
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  _OWORD v74[2];
  uint64_t v75;

  v2 = a2;
  v75 = *MEMORY[0x24BDAC8D0];
  v4 = 1;
  switch(0xEF7BDEF7BDEF7BDFLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      if (*(_DWORD *)(a2 - 236) <= *(_DWORD *)(a1 + 12))
        return v4;
      v5 = *(_QWORD *)(a1 + 8);
      v53 = &off_24C0B1418;
      v54 = v5;
      v55 = *(_OWORD *)(a1 + 16);
      v56 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v57 = *(_OWORD *)(a1 + 40);
      LOBYTE(v58) = 0;
      v60 = 0;
      if (*(_BYTE *)(a1 + 80))
      {
        v58 = *(_OWORD *)(a1 + 56);
        v59 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        v60 = 1;
      }
      v61 = *(_QWORD *)(a1 + 88);
      v6 = *(_OWORD *)(a1 + 112);
      v62 = *(_OWORD *)(a1 + 96);
      v63 = v6;
      v64 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 88) = 0;
      LOBYTE(v65) = 0;
      v67 = 0;
      if (*(_BYTE *)(a1 + 160))
      {
        v65 = *(_OWORD *)(a1 + 136);
        v66 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 144) = 0;
        *(_QWORD *)(a1 + 152) = 0;
        *(_QWORD *)(a1 + 136) = 0;
        v67 = 1;
      }
      v7 = (_QWORD *)(a1 + 176);
      v8 = *(_QWORD *)(a1 + 176);
      v68 = *(uint64_t **)(a1 + 168);
      v69 = v8;
      v70 = *(_QWORD *)(a1 + 184);
      if (v70)
      {
        *(_QWORD *)(v8 + 16) = &v69;
        *(_QWORD *)(a1 + 168) = v7;
        *v7 = 0;
        *(_QWORD *)(a1 + 184) = 0;
        v71 = 0;
        v72 = 0;
        v73 = 0;
        v9 = *(_QWORD *)(a1 + 192);
        v10 = *(_QWORD *)(a1 + 200);
        v11 = v10 - v9;
        if (v10 == v9)
        {
LABEL_52:
          v74[0] = *(_OWORD *)(a1 + 216);
          *(_OWORD *)((char *)v74 + 9) = *(_OWORD *)(a1 + 225);
          cricket::Codec::operator=(a1, v2 - 248);
          v50 = *(_OWORD *)(v2 - 23);
          *(_OWORD *)(a1 + 216) = *(_OWORD *)(v2 - 32);
          *(_OWORD *)(a1 + 225) = v50;
          cricket::Codec::operator=(v2 - 248, (uint64_t)&v53);
          *(_OWORD *)(v2 - 32) = v74[0];
          *(_OWORD *)(v2 - 23) = *(_OWORD *)((char *)v74 + 9);
          cricket::Codec::~Codec((cricket::Codec *)&v53);
          return 1;
        }
      }
      else
      {
        v68 = &v69;
        v71 = 0;
        v72 = 0;
        v73 = 0;
        v9 = *(_QWORD *)(a1 + 192);
        v10 = *(_QWORD *)(a1 + 200);
        v11 = v10 - v9;
        if (v10 == v9)
          goto LABEL_52;
      }
      v40 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 4);
      if (v40 > 0x555555555555555)
        goto LABEL_55;
      v41 = (char *)operator new(v11);
      v42 = 0;
      v71 = v41;
      v72 = v41;
      v73 = &v41[48 * v40];
      while (1)
      {
        v44 = (__int128 *)(v9 + v42);
        v45 = (std::string *)&v41[v42];
        if (*(char *)(v9 + v42 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v45, *(const std::string::value_type **)v44, *((_QWORD *)v44 + 1));
          v47 = (std::string *)&v41[v42 + 24];
          v48 = v9 + v42;
          v49 = v9 + v42 + 24;
          if ((*(char *)(v9 + v42 + 47) & 0x80000000) == 0)
            goto LABEL_45;
LABEL_50:
          std::string::__init_copy_ctor_external(v47, *(const std::string::value_type **)v49, *(_QWORD *)(v48 + 32));
          v42 += 48;
          if (v9 + v42 == v10)
          {
LABEL_51:
            v72 = &v41[v42];
            goto LABEL_52;
          }
        }
        else
        {
          v46 = *v44;
          v45->__r_.__value_.__r.__words[2] = *((_QWORD *)v44 + 2);
          *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
          v47 = (std::string *)&v41[v42 + 24];
          v48 = v9 + v42;
          v49 = v9 + v42 + 24;
          if (*(char *)(v9 + v42 + 47) < 0)
            goto LABEL_50;
LABEL_45:
          v43 = *(_OWORD *)v49;
          v47->__r_.__value_.__r.__words[2] = *(_QWORD *)(v49 + 16);
          *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v43;
          v42 += 48;
          if (v9 + v42 == v10)
            goto LABEL_51;
        }
      }
    case 3uLL:
      return v4;
    case 4uLL:
      return v4;
    case 5uLL:
      return v4;
    default:
      v12 = a1 + 496;
      v13 = a1 + 744;
      v4 = 1;
      if (a1 + 744 == v2)
        return v4;
      v14 = 0;
      v15 = 0;
      v16 = v74;
      while (2)
      {
        if (*(_DWORD *)(v13 + 12) <= *(_DWORD *)(v12 + 12))
          goto LABEL_15;
        v18 = *(_QWORD *)(v13 + 8);
        v53 = &off_24C0B1418;
        v54 = v18;
        v55 = *(_OWORD *)(v13 + 16);
        v56 = *(_QWORD *)(v13 + 32);
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 32) = 0;
        v57 = *(_OWORD *)(v13 + 40);
        LOBYTE(v58) = 0;
        v60 = 0;
        if (*(_BYTE *)(v13 + 80))
        {
          v58 = *(_OWORD *)(v13 + 56);
          v59 = *(_QWORD *)(v13 + 72);
          *(_QWORD *)(v13 + 64) = 0;
          *(_QWORD *)(v13 + 72) = 0;
          *(_QWORD *)(v13 + 56) = 0;
          v60 = 1;
        }
        v61 = *(_QWORD *)(v13 + 88);
        v19 = *(_OWORD *)(v13 + 112);
        v62 = *(_OWORD *)(v13 + 96);
        v63 = v19;
        v64 = *(_QWORD *)(v13 + 128);
        *(_QWORD *)(v13 + 88) = 0;
        LOBYTE(v65) = 0;
        v67 = 0;
        if (*(_BYTE *)(v13 + 160))
        {
          v65 = *(_OWORD *)(v13 + 136);
          v66 = *(_QWORD *)(v13 + 152);
          *(_QWORD *)(v13 + 144) = 0;
          *(_QWORD *)(v13 + 152) = 0;
          *(_QWORD *)(v13 + 136) = 0;
          v67 = 1;
        }
        v20 = (_QWORD *)(v13 + 176);
        v21 = *(_QWORD *)(v13 + 176);
        v68 = *(uint64_t **)(v13 + 168);
        v69 = v21;
        v70 = *(_QWORD *)(v13 + 184);
        if (v70)
        {
          *(_QWORD *)(v21 + 16) = &v69;
          *(_QWORD *)(v13 + 168) = v20;
          *v20 = 0;
          *(_QWORD *)(v13 + 184) = 0;
          v71 = 0;
          v72 = 0;
          v73 = 0;
          v22 = *(_QWORD *)(v13 + 192);
          v23 = *(_QWORD *)(v13 + 200);
          v24 = v23 - v22;
          if (v23 == v22)
            goto LABEL_34;
          goto LABEL_25;
        }
        v68 = &v69;
        v71 = 0;
        v72 = 0;
        v73 = 0;
        v22 = *(_QWORD *)(v13 + 192);
        v23 = *(_QWORD *)(v13 + 200);
        v24 = v23 - v22;
        if (v23 != v22)
        {
LABEL_25:
          v52 = v15;
          v25 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 4);
          if (v25 > 0x555555555555555)
LABEL_55:
            abort();
          v26 = v16;
          v27 = v2;
          v28 = (char *)operator new(v24);
          v29 = 0;
          v71 = v28;
          v72 = v28;
          v73 = &v28[48 * v25];
          while (1)
          {
            v30 = (__int128 *)(v22 + v29);
            v31 = (std::string *)&v28[v29];
            if (*(char *)(v22 + v29 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v31, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
              v33 = (std::string *)&v28[v29 + 24];
              v34 = v22 + v29;
              v35 = v22 + v29 + 24;
              if ((*(char *)(v22 + v29 + 47) & 0x80000000) == 0)
                goto LABEL_32;
LABEL_27:
              std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)v35, *(_QWORD *)(v34 + 32));
              v29 += 48;
              if (v22 + v29 == v23)
                goto LABEL_33;
            }
            else
            {
              v32 = *v30;
              v31->__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
              *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
              v33 = (std::string *)&v28[v29 + 24];
              v34 = v22 + v29;
              v35 = v22 + v29 + 24;
              if (*(char *)(v22 + v29 + 47) < 0)
                goto LABEL_27;
LABEL_32:
              v36 = *(_OWORD *)v35;
              v33->__r_.__value_.__r.__words[2] = *(_QWORD *)(v35 + 16);
              *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v36;
              v29 += 48;
              if (v22 + v29 == v23)
              {
LABEL_33:
                v72 = &v28[v29];
                v2 = v27;
                v16 = v26;
                v15 = v52;
                break;
              }
            }
          }
        }
LABEL_34:
        *v16 = *(_OWORD *)(v13 + 216);
        *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)(v13 + 225);
        v37 = v14;
        do
        {
          v38 = a1 + v37;
          cricket::Codec::operator=(a1 + v37 + 744, a1 + v37 + 496);
          v39 = (_OWORD *)(a1 + v37 + 712);
          *(_OWORD *)(v38 + 960) = *(_OWORD *)(v38 + 712);
          *(_OWORD *)(v38 + 969) = *(_OWORD *)(v38 + 721);
          if (v37 == -496)
          {
            v17 = a1;
            goto LABEL_13;
          }
          v37 -= 248;
        }
        while (SHIDWORD(v54) > *(_DWORD *)(v38 + 260));
        v17 = a1 + v37 + 744;
LABEL_13:
        cricket::Codec::operator=(v17, (uint64_t)&v53);
        *v39 = *v16;
        *(_OWORD *)(v38 + 721) = *(_OWORD *)((char *)v16 + 9);
        if (++v15 != 8)
        {
          cricket::Codec::~Codec((cricket::Codec *)&v53);
LABEL_15:
          v12 = v13;
          v14 += 248;
          v13 += 248;
          if (v13 == v2)
            return 1;
          continue;
        }
        break;
      }
      v4 = v13 + 248 == v2;
      cricket::Codec::~Codec((cricket::Codec *)&v53);
      return v4;
  }
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,cricket::`anonymous namespace'::NonFlexfecReceiveCodecsHaveChanged(std::vector<cricket::VideoCodecSettings>,std::vector<cricket::VideoCodecSettings>)::$_0 &,cricket::VideoCodecSettings*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 *v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 *v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  __int128 *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  void (**v62)(cricket::Codec *__hidden);
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  _OWORD v83[2];
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a4 + 12) > *(_DWORD *)(a3 + 12))
  {
    v8 = *(_QWORD *)(a3 + 8);
    v62 = &off_24C0B1418;
    v63 = v8;
    v64 = *(_OWORD *)(a3 + 16);
    v65 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v66 = *(_OWORD *)(a3 + 40);
    LOBYTE(v67) = 0;
    v69 = 0;
    if (*(_BYTE *)(a3 + 80))
    {
      v67 = *(_OWORD *)(a3 + 56);
      v68 = *(_QWORD *)(a3 + 72);
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      v69 = 1;
    }
    v70 = *(_QWORD *)(a3 + 88);
    v9 = *(_OWORD *)(a3 + 112);
    v71 = *(_OWORD *)(a3 + 96);
    v72 = v9;
    v73 = *(_QWORD *)(a3 + 128);
    *(_QWORD *)(a3 + 88) = 0;
    LOBYTE(v74) = 0;
    v76 = 0;
    if (*(_BYTE *)(a3 + 160))
    {
      v74 = *(_OWORD *)(a3 + 136);
      v75 = *(_QWORD *)(a3 + 152);
      *(_QWORD *)(a3 + 144) = 0;
      *(_QWORD *)(a3 + 152) = 0;
      *(_QWORD *)(a3 + 136) = 0;
      v76 = 1;
    }
    v10 = (_QWORD *)(a3 + 176);
    v11 = *(_QWORD *)(a3 + 176);
    v77 = *(uint64_t **)(a3 + 168);
    v78 = v11;
    v79 = *(_QWORD *)(a3 + 184);
    if (v79)
    {
      *(_QWORD *)(v11 + 16) = &v78;
      *(_QWORD *)(a3 + 168) = v10;
      *v10 = 0;
      *(_QWORD *)(a3 + 184) = 0;
    }
    else
    {
      v77 = &v78;
    }
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v12 = *(_QWORD *)(a3 + 192);
    v13 = *(_QWORD *)(a3 + 200);
    v14 = v13 - v12;
    if (v13 != v12)
    {
      v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 4);
      if (v15 <= 0x555555555555555)
      {
        v16 = (char *)operator new(v14);
        v17 = 0;
        v80 = v16;
        v81 = v16;
        v82 = &v16[48 * v15];
        while (1)
        {
          v18 = (__int128 *)(v12 + v17);
          v19 = (std::string *)&v16[v17];
          if (*(char *)(v12 + v17 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
            v21 = (std::string *)&v16[v17 + 24];
            v22 = v12 + v17;
            v23 = v12 + v17 + 24;
            if ((*(char *)(v12 + v17 + 47) & 0x80000000) == 0)
              goto LABEL_17;
LABEL_12:
            std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)v23, *(_QWORD *)(v22 + 32));
            v17 += 48;
            if (v12 + v17 == v13)
              goto LABEL_18;
          }
          else
          {
            v20 = *v18;
            v19->__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
            v21 = (std::string *)&v16[v17 + 24];
            v22 = v12 + v17;
            v23 = v12 + v17 + 24;
            if (*(char *)(v12 + v17 + 47) < 0)
              goto LABEL_12;
LABEL_17:
            v24 = *(_OWORD *)v23;
            v21->__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 16);
            *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v24;
            v17 += 48;
            if (v12 + v17 == v13)
            {
LABEL_18:
              v81 = &v16[v17];
              goto LABEL_19;
            }
          }
        }
      }
LABEL_57:
      abort();
    }
LABEL_19:
    v83[0] = *(_OWORD *)(a3 + 216);
    *(_OWORD *)((char *)v83 + 9) = *(_OWORD *)(a3 + 225);
    cricket::Codec::operator=(a3, a4);
    v25 = *(_OWORD *)(a4 + 225);
    *(_OWORD *)(a3 + 216) = *(_OWORD *)(a4 + 216);
    *(_OWORD *)(a3 + 225) = v25;
    cricket::Codec::operator=(a4, (uint64_t)&v62);
    *(_OWORD *)(a4 + 216) = v83[0];
    *(_OWORD *)(a4 + 225) = *(_OWORD *)((char *)v83 + 9);
    cricket::Codec::~Codec((cricket::Codec *)&v62);
    if (*(_DWORD *)(a3 + 12) > *(_DWORD *)(a2 + 12))
    {
      v26 = *(_QWORD *)(a2 + 8);
      v62 = &off_24C0B1418;
      v63 = v26;
      v64 = *(_OWORD *)(a2 + 16);
      v65 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v66 = *(_OWORD *)(a2 + 40);
      LOBYTE(v67) = 0;
      v69 = 0;
      if (*(_BYTE *)(a2 + 80))
      {
        v67 = *(_OWORD *)(a2 + 56);
        v68 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a2 + 64) = 0;
        *(_QWORD *)(a2 + 72) = 0;
        *(_QWORD *)(a2 + 56) = 0;
        v69 = 1;
      }
      v70 = *(_QWORD *)(a2 + 88);
      v27 = *(_OWORD *)(a2 + 112);
      v71 = *(_OWORD *)(a2 + 96);
      v72 = v27;
      v73 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a2 + 88) = 0;
      LOBYTE(v74) = 0;
      v76 = 0;
      if (*(_BYTE *)(a2 + 160))
      {
        v74 = *(_OWORD *)(a2 + 136);
        v75 = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a2 + 144) = 0;
        *(_QWORD *)(a2 + 152) = 0;
        *(_QWORD *)(a2 + 136) = 0;
        v76 = 1;
      }
      v28 = (_QWORD *)(a2 + 176);
      v29 = *(_QWORD *)(a2 + 176);
      v77 = *(uint64_t **)(a2 + 168);
      v78 = v29;
      v79 = *(_QWORD *)(a2 + 184);
      if (v79)
      {
        *(_QWORD *)(v29 + 16) = &v78;
        *(_QWORD *)(a2 + 168) = v28;
        *v28 = 0;
        *(_QWORD *)(a2 + 184) = 0;
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v30 = *(_QWORD *)(a2 + 192);
        v31 = *(_QWORD *)(a2 + 200);
        v32 = v31 - v30;
        if (v31 == v30)
        {
LABEL_37:
          v83[0] = *(_OWORD *)(a2 + 216);
          *(_OWORD *)((char *)v83 + 9) = *(_OWORD *)(a2 + 225);
          cricket::Codec::operator=(a2, a3);
          v43 = *(_OWORD *)(a3 + 225);
          *(_OWORD *)(a2 + 216) = *(_OWORD *)(a3 + 216);
          *(_OWORD *)(a2 + 225) = v43;
          cricket::Codec::operator=(a3, (uint64_t)&v62);
          *(_OWORD *)(a3 + 216) = v83[0];
          *(_OWORD *)(a3 + 225) = *(_OWORD *)((char *)v83 + 9);
          cricket::Codec::~Codec((cricket::Codec *)&v62);
          if (*(_DWORD *)(a2 + 12) <= *(_DWORD *)(a1 + 12))
            return;
          v44 = *(_QWORD *)(a1 + 8);
          v62 = &off_24C0B1418;
          v63 = v44;
          v64 = *(_OWORD *)(a1 + 16);
          v65 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          v66 = *(_OWORD *)(a1 + 40);
          LOBYTE(v67) = 0;
          v69 = 0;
          if (*(_BYTE *)(a1 + 80))
          {
            v67 = *(_OWORD *)(a1 + 56);
            v68 = *(_QWORD *)(a1 + 72);
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 72) = 0;
            *(_QWORD *)(a1 + 56) = 0;
            v69 = 1;
          }
          v70 = *(_QWORD *)(a1 + 88);
          v45 = *(_OWORD *)(a1 + 112);
          v71 = *(_OWORD *)(a1 + 96);
          v72 = v45;
          v73 = *(_QWORD *)(a1 + 128);
          *(_QWORD *)(a1 + 88) = 0;
          LOBYTE(v74) = 0;
          v76 = 0;
          if (*(_BYTE *)(a1 + 160))
          {
            v74 = *(_OWORD *)(a1 + 136);
            v75 = *(_QWORD *)(a1 + 152);
            *(_QWORD *)(a1 + 144) = 0;
            *(_QWORD *)(a1 + 152) = 0;
            *(_QWORD *)(a1 + 136) = 0;
            v76 = 1;
          }
          v46 = (_QWORD *)(a1 + 176);
          v47 = *(_QWORD *)(a1 + 176);
          v77 = *(uint64_t **)(a1 + 168);
          v78 = v47;
          v79 = *(_QWORD *)(a1 + 184);
          if (v79)
          {
            *(_QWORD *)(v47 + 16) = &v78;
            *(_QWORD *)(a1 + 168) = v46;
            *v46 = 0;
            *(_QWORD *)(a1 + 184) = 0;
            v80 = 0;
            v81 = 0;
            v82 = 0;
            v48 = *(_QWORD *)(a1 + 192);
            v49 = *(_QWORD *)(a1 + 200);
            v50 = v49 - v48;
            if (v49 == v48)
            {
LABEL_55:
              v83[0] = *(_OWORD *)(a1 + 216);
              *(_OWORD *)((char *)v83 + 9) = *(_OWORD *)(a1 + 225);
              cricket::Codec::operator=(a1, a2);
              v61 = *(_OWORD *)(a2 + 225);
              *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
              *(_OWORD *)(a1 + 225) = v61;
              cricket::Codec::operator=(a2, (uint64_t)&v62);
              *(_OWORD *)(a2 + 216) = v83[0];
              *(_OWORD *)(a2 + 225) = *(_OWORD *)((char *)v83 + 9);
              cricket::Codec::~Codec((cricket::Codec *)&v62);
              return;
            }
          }
          else
          {
            v77 = &v78;
            v80 = 0;
            v81 = 0;
            v82 = 0;
            v48 = *(_QWORD *)(a1 + 192);
            v49 = *(_QWORD *)(a1 + 200);
            v50 = v49 - v48;
            if (v49 == v48)
              goto LABEL_55;
          }
          v51 = 0xAAAAAAAAAAAAAAABLL * (v50 >> 4);
          if (v51 > 0x555555555555555)
            goto LABEL_57;
          v52 = (char *)operator new(v50);
          v53 = 0;
          v80 = v52;
          v81 = v52;
          v82 = &v52[48 * v51];
          while (1)
          {
            v54 = (__int128 *)(v48 + v53);
            v55 = (std::string *)&v52[v53];
            if (*(char *)(v48 + v53 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v55, *(const std::string::value_type **)v54, *((_QWORD *)v54 + 1));
              v57 = (std::string *)&v52[v53 + 24];
              v58 = v48 + v53;
              v59 = v48 + v53 + 24;
              if ((*(char *)(v48 + v53 + 47) & 0x80000000) == 0)
                goto LABEL_53;
LABEL_48:
              std::string::__init_copy_ctor_external(v57, *(const std::string::value_type **)v59, *(_QWORD *)(v58 + 32));
              v53 += 48;
              if (v48 + v53 == v49)
                goto LABEL_54;
            }
            else
            {
              v56 = *v54;
              v55->__r_.__value_.__r.__words[2] = *((_QWORD *)v54 + 2);
              *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
              v57 = (std::string *)&v52[v53 + 24];
              v58 = v48 + v53;
              v59 = v48 + v53 + 24;
              if (*(char *)(v48 + v53 + 47) < 0)
                goto LABEL_48;
LABEL_53:
              v60 = *(_OWORD *)v59;
              v57->__r_.__value_.__r.__words[2] = *(_QWORD *)(v59 + 16);
              *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v60;
              v53 += 48;
              if (v48 + v53 == v49)
              {
LABEL_54:
                v81 = &v52[v53];
                goto LABEL_55;
              }
            }
          }
        }
      }
      else
      {
        v77 = &v78;
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v30 = *(_QWORD *)(a2 + 192);
        v31 = *(_QWORD *)(a2 + 200);
        v32 = v31 - v30;
        if (v31 == v30)
          goto LABEL_37;
      }
      v33 = 0xAAAAAAAAAAAAAAABLL * (v32 >> 4);
      if (v33 > 0x555555555555555)
        goto LABEL_57;
      v34 = (char *)operator new(v32);
      v35 = 0;
      v80 = v34;
      v81 = v34;
      v82 = &v34[48 * v33];
      while (1)
      {
        v36 = (__int128 *)(v30 + v35);
        v37 = (std::string *)&v34[v35];
        if (*(char *)(v30 + v35 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)v36, *((_QWORD *)v36 + 1));
          v39 = (std::string *)&v34[v35 + 24];
          v40 = v30 + v35;
          v41 = v30 + v35 + 24;
          if ((*(char *)(v30 + v35 + 47) & 0x80000000) == 0)
            goto LABEL_35;
LABEL_30:
          std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)v41, *(_QWORD *)(v40 + 32));
          v35 += 48;
          if (v30 + v35 == v31)
            goto LABEL_36;
        }
        else
        {
          v38 = *v36;
          v37->__r_.__value_.__r.__words[2] = *((_QWORD *)v36 + 2);
          *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
          v39 = (std::string *)&v34[v35 + 24];
          v40 = v30 + v35;
          v41 = v30 + v35 + 24;
          if (*(char *)(v30 + v35 + 47) < 0)
            goto LABEL_30;
LABEL_35:
          v42 = *(_OWORD *)v41;
          v39->__r_.__value_.__r.__words[2] = *(_QWORD *)(v41 + 16);
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v42;
          v35 += 48;
          if (v30 + v35 == v31)
          {
LABEL_36:
            v81 = &v34[v35];
            goto LABEL_37;
          }
        }
      }
    }
  }
}

void cricket::`anonymous namespace'::IsCodecValidForLowerRange(cricket::_anonymous_namespace_ *this, const cricket::Codec *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v8;
  unsigned __int8 v9;
  int v10;
  unsigned __int8 v11;
  int v12;
  unsigned __int8 v13;
  int v14;
  unsigned __int8 v15;
  int v16;
  unsigned __int8 v17;
  int v18;
  unsigned __int8 v19;
  int v20;
  unsigned __int8 v21;
  int v22;
  unsigned __int8 v23;
  int v24;
  unsigned __int8 v25;
  int v26;
  char v27;
  char v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  unsigned __int8 v32;
  int v33;
  unsigned __int8 v34;
  int v35;
  char v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  int v45;
  unsigned __int8 v46;
  int v47;
  unsigned __int8 v48;
  int v49;
  unsigned __int8 v50;
  int v51;
  char v52;
  char v53;
  int v54;
  int v55;
  int v56;
  unsigned __int8 v57;
  int v58;
  unsigned __int8 v59;
  int v60;
  char v61;
  int Param;
  int v63;
  unsigned __int8 v64;
  std::string::size_type size;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  char v73;
  const void *v74[4];
  __int128 __p;
  uint64_t v76;
  std::string v77;

  v3 = (unsigned __int8 *)this + 16;
  v4 = *((unsigned __int8 *)this + 39);
  v5 = (unsigned __int8 *)this + 16;
  v6 = v4;
  if (*((char *)this + 39) < 0)
  {
    v6 = *((_QWORD *)this + 3);
    if (v6 < 0)
      goto LABEL_224;
    v5 = *(unsigned __int8 **)v3;
    if (v6 && v5 == 0)
      goto LABEL_224;
  }
  if (v6 == 10)
  {
    v8 = *v5;
    v9 = cricket::kFlexfecCodecName[0];
    if (v8 == cricket::kFlexfecCodecName[0])
      goto LABEL_14;
    if ((v8 - 65) < 0x1A)
      LOBYTE(v8) = v8 + 32;
    if (cricket::kFlexfecCodecName[0] - 65 < 0x1A)
      v9 = cricket::kFlexfecCodecName[0] + 32;
    if (v8 == v9)
    {
LABEL_14:
      v10 = v5[1];
      v11 = cricket::kFlexfecCodecName[1];
      if (v10 == cricket::kFlexfecCodecName[1])
        goto LABEL_68;
      if ((v10 - 65) < 0x1A)
        LOBYTE(v10) = v10 + 32;
      if (cricket::kFlexfecCodecName[1] - 65 < 0x1A)
        v11 = cricket::kFlexfecCodecName[1] + 32;
      if (v10 == v11)
      {
LABEL_68:
        v12 = v5[2];
        v13 = cricket::kFlexfecCodecName[2];
        if (v12 == cricket::kFlexfecCodecName[2])
          goto LABEL_227;
        if ((v12 - 65) < 0x1A)
          LOBYTE(v12) = v12 + 32;
        if (cricket::kFlexfecCodecName[2] - 65 < 0x1A)
          v13 = cricket::kFlexfecCodecName[2] + 32;
        if (v12 == v13)
        {
LABEL_227:
          v14 = v5[3];
          v15 = cricket::kFlexfecCodecName[3];
          if (v14 == cricket::kFlexfecCodecName[3])
            goto LABEL_228;
          if ((v14 - 65) < 0x1A)
            LOBYTE(v14) = v14 + 32;
          if (cricket::kFlexfecCodecName[3] - 65 < 0x1A)
            v15 = cricket::kFlexfecCodecName[3] + 32;
          if (v14 == v15)
          {
LABEL_228:
            v16 = v5[4];
            v17 = cricket::kFlexfecCodecName[4];
            if (v16 == cricket::kFlexfecCodecName[4])
              goto LABEL_229;
            if ((v16 - 65) < 0x1A)
              LOBYTE(v16) = v16 + 32;
            if (cricket::kFlexfecCodecName[4] - 65 < 0x1A)
              v17 = cricket::kFlexfecCodecName[4] + 32;
            if (v16 == v17)
            {
LABEL_229:
              v18 = v5[5];
              v19 = cricket::kFlexfecCodecName[5];
              if (v18 == cricket::kFlexfecCodecName[5])
                goto LABEL_230;
              if ((v18 - 65) < 0x1A)
                LOBYTE(v18) = v18 + 32;
              if (cricket::kFlexfecCodecName[5] - 65 < 0x1A)
                v19 = cricket::kFlexfecCodecName[5] + 32;
              if (v18 == v19)
              {
LABEL_230:
                v20 = v5[6];
                v21 = cricket::kFlexfecCodecName[6];
                if (v20 == cricket::kFlexfecCodecName[6])
                  goto LABEL_231;
                if ((v20 - 65) < 0x1A)
                  LOBYTE(v20) = v20 + 32;
                if (cricket::kFlexfecCodecName[6] - 65 < 0x1A)
                  v21 = cricket::kFlexfecCodecName[6] + 32;
                if (v20 == v21)
                {
LABEL_231:
                  v22 = v5[7];
                  v23 = cricket::kFlexfecCodecName[7];
                  if (v22 == cricket::kFlexfecCodecName[7])
                    goto LABEL_232;
                  if ((v22 - 65) < 0x1A)
                    LOBYTE(v22) = v22 + 32;
                  if (cricket::kFlexfecCodecName[7] - 65 < 0x1A)
                    v23 = cricket::kFlexfecCodecName[7] + 32;
                  if (v22 == v23)
                  {
LABEL_232:
                    v24 = v5[8];
                    v25 = cricket::kFlexfecCodecName[8];
                    if (v24 == cricket::kFlexfecCodecName[8])
                      goto LABEL_233;
                    if ((v24 - 65) < 0x1A)
                      LOBYTE(v24) = v24 + 32;
                    if (cricket::kFlexfecCodecName[8] - 65 < 0x1A)
                      v25 = cricket::kFlexfecCodecName[8] + 32;
                    if (v24 == v25)
                    {
LABEL_233:
                      v26 = v5[9];
                      v27 = cricket::kFlexfecCodecName[9];
                      if (v26 == cricket::kFlexfecCodecName[9])
                        return;
                      if ((v26 - 65) >= 0x1A)
                        v28 = v26;
                      else
                        v28 = v26 + 32;
                      if (cricket::kFlexfecCodecName[9] - 65 < 0x1A)
                        v27 = cricket::kFlexfecCodecName[9] + 32;
                      if (v28 == v27)
                        return;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v29 = (unsigned __int8 *)this + 16;
  v30 = *((unsigned __int8 *)this + 39);
  if ((v4 & 0x80) != 0)
  {
    v30 = *((_QWORD *)this + 3);
    if (v30 < 0)
      goto LABEL_224;
    v29 = *(unsigned __int8 **)v3;
    if (v30)
    {
      if (!v29)
        goto LABEL_224;
    }
  }
  if (v30 == 3)
  {
    v31 = *v29;
    v32 = cricket::kAv1CodecName;
    if (v31 == cricket::kAv1CodecName)
      goto LABEL_80;
    if ((v31 - 65) < 0x1A)
      LOBYTE(v31) = v31 + 32;
    if (cricket::kAv1CodecName - 65 < 0x1A)
      v32 = cricket::kAv1CodecName + 32;
    if (v31 == v32)
    {
LABEL_80:
      v33 = v29[1];
      v34 = HIBYTE(cricket::kAv1CodecName);
      if (v33 == HIBYTE(cricket::kAv1CodecName))
        goto LABEL_90;
      if ((v33 - 65) < 0x1A)
        LOBYTE(v33) = v33 + 32;
      if (HIBYTE(cricket::kAv1CodecName) - 65 < 0x1A)
        v34 = HIBYTE(cricket::kAv1CodecName) + 32;
      if (v33 == v34)
      {
LABEL_90:
        v35 = v29[2];
        if (v35 == 49)
          return;
        v36 = (v35 - 65) >= 0x1A ? v29[2] : v35 + 32;
        if (v36 == 49)
          return;
      }
    }
  }
  v37 = (unsigned __int8 *)this + 16;
  v38 = *((unsigned __int8 *)this + 39);
  if ((v4 & 0x80) != 0)
  {
    v38 = *((_QWORD *)this + 3);
    if (v38 < 0)
      goto LABEL_224;
    v37 = *(unsigned __int8 **)v3;
    if (v38)
    {
      if (!v37)
        goto LABEL_224;
    }
  }
  if (v38 == 4)
  {
    v39 = *v37;
    if (v39 == 65)
      goto LABEL_100;
    if ((v39 - 65) < 0x1A)
      LOBYTE(v39) = v39 + 32;
    if (v39 == 97)
    {
LABEL_100:
      v40 = v37[1];
      if (v40 == 86)
        goto LABEL_111;
      if ((v40 - 65) < 0x1A)
        LOBYTE(v40) = v40 + 32;
      if (v40 == 118)
      {
LABEL_111:
        v41 = v37[2];
        if (v41 == 49)
          goto LABEL_234;
        if ((v41 - 65) < 0x1A)
          LOBYTE(v41) = v41 + 32;
        if (v41 == 49)
        {
LABEL_234:
          v42 = v37[3];
          if (v42 == 88)
            return;
          if ((v42 - 65) < 0x1A)
            LOBYTE(v42) = v42 + 32;
          if (v42 == 120)
            return;
        }
      }
    }
  }
  v43 = (unsigned __int8 *)this + 16;
  v44 = *((unsigned __int8 *)this + 39);
  if ((v4 & 0x80) != 0)
  {
    v44 = *((_QWORD *)this + 3);
    if (v44 < 0)
      goto LABEL_224;
    v43 = *(unsigned __int8 **)v3;
    if (v44)
    {
      if (!v43)
        goto LABEL_224;
    }
  }
  if (v44 != 4)
    goto LABEL_170;
  v45 = *v43;
  v46 = cricket::kH264CodecName[0];
  if (v45 != cricket::kH264CodecName[0])
  {
    if ((v45 - 65) < 0x1A)
      LOBYTE(v45) = v45 + 32;
    if (cricket::kH264CodecName[0] - 65 < 0x1A)
      v46 = cricket::kH264CodecName[0] + 32;
    if (v45 != v46)
      goto LABEL_170;
  }
  v47 = v43[1];
  v48 = cricket::kH264CodecName[1];
  if (v47 != cricket::kH264CodecName[1])
  {
    if ((v47 - 65) < 0x1A)
      LOBYTE(v47) = v47 + 32;
    if (cricket::kH264CodecName[1] - 65 < 0x1A)
      v48 = cricket::kH264CodecName[1] + 32;
    if (v47 != v48)
      goto LABEL_170;
  }
  v49 = v43[2];
  v50 = cricket::kH264CodecName[2];
  if (v49 != cricket::kH264CodecName[2])
  {
    if ((v49 - 65) < 0x1A)
      LOBYTE(v49) = v49 + 32;
    if (cricket::kH264CodecName[2] - 65 < 0x1A)
      v50 = cricket::kH264CodecName[2] + 32;
    if (v49 != v50)
      goto LABEL_170;
  }
  v51 = v43[3];
  v52 = cricket::kH264CodecName[3];
  if (v51 != cricket::kH264CodecName[3])
  {
    if ((v51 - 65) >= 0x1A)
      v53 = v51;
    else
      v53 = v51 + 32;
    if (cricket::kH264CodecName[3] - 65 < 0x1A)
      v52 = cricket::kH264CodecName[3] + 32;
    if (v53 != v52)
    {
LABEL_170:
      if ((v4 & 0x80) != 0)
      {
        v4 = *((_QWORD *)this + 3);
        if (v4 < 0)
          goto LABEL_224;
        v3 = *(unsigned __int8 **)v3;
        if (v4)
        {
          if (!v3)
            goto LABEL_224;
        }
      }
      if (v4 != 3)
        return;
      v56 = *v3;
      v57 = cricket::kVp9CodecName;
      if (v56 != cricket::kVp9CodecName)
      {
        if ((v56 - 65) < 0x1A)
          LOBYTE(v56) = v56 + 32;
        if (cricket::kVp9CodecName - 65 < 0x1A)
          v57 = cricket::kVp9CodecName + 32;
        if (v56 != v57)
          return;
      }
      v58 = v3[1];
      v59 = HIBYTE(cricket::kVp9CodecName);
      if (v58 != HIBYTE(cricket::kVp9CodecName))
      {
        if ((v58 - 65) < 0x1A)
          LOBYTE(v58) = v58 + 32;
        if (HIBYTE(cricket::kVp9CodecName) - 65 < 0x1A)
          v59 = HIBYTE(cricket::kVp9CodecName) + 32;
        if (v58 != v59)
          return;
      }
      v60 = v3[2];
      if (v60 != 57)
      {
        v61 = (v60 - 65) >= 0x1A ? v3[2] : v60 + 32;
        if (v61 != 57)
          return;
      }
      memset(&v77, 0, sizeof(v77));
      HIBYTE(v76) = 10;
      if (&__p <= (__int128 *)"profile-id" && (char *)&__p + 10 > "profile-id")
        goto LABEL_224;
      strcpy((char *)&__p, "profile-id");
      Param = cricket::Codec::GetParam((uint64_t)this, (const void **)&__p, (uint64_t)&v77);
      v63 = Param;
      if (SHIBYTE(v76) < 0)
      {
        operator delete((void *)__p);
        if (!v63)
          goto LABEL_177;
      }
      else if (!Param)
      {
        goto LABEL_177;
      }
      if (!std::string::compare(&v77, "1") || !std::string::compare(&v77, "3"))
      {
        if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_183;
      }
LABEL_177:
      if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_183:
      operator delete(v77.__r_.__value_.__l.__data_);
      return;
    }
  }
  memset(&v77, 0, sizeof(v77));
  __p = 0uLL;
  v76 = 0;
  HIBYTE(v74[2]) = 16;
  if (v74 <= (const void **)"profile-level-id" && &v74[2] > (const void **)"profile-level-id")
    goto LABEL_224;
  strcpy((char *)v74, "profile-level-id");
  v54 = cricket::Codec::GetParam((uint64_t)this, v74, (uint64_t)&v77);
  v55 = v54;
  if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
  {
    if (!v54)
      goto LABEL_217;
LABEL_180:
    v64 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v77.__r_.__value_.__l.__size_;
      if ((v77.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_224;
      v66 = (std::string *)v77.__r_.__value_.__r.__words[0];
      if (v77.__r_.__value_.__l.__size_)
      {
        if (!v77.__r_.__value_.__r.__words[0])
          goto LABEL_224;
      }
    }
    else
    {
      size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
      v66 = &v77;
    }
    if (size >= 4)
    {
      if (!v66)
        goto LABEL_224;
      v69 = v66->__r_.__value_.__s.__data_[0];
      if (v69 == 52)
        goto LABEL_207;
      if ((v69 - 65) < 0x1A)
        LOBYTE(v69) = v69 + 32;
      if (v69 == 52)
      {
LABEL_207:
        v70 = v66->__r_.__value_.__s.__data_[1];
        if (v70 == 100)
          goto LABEL_235;
        if ((v70 - 65) < 0x1A)
          LOBYTE(v70) = v70 + 32;
        if (v70 == 100)
        {
LABEL_235:
          v71 = v66->__r_.__value_.__s.__data_[2];
          if (v71 == 48)
            goto LABEL_236;
          if ((v71 - 65) < 0x1A)
            LOBYTE(v71) = v71 + 32;
          if (v71 == 48)
          {
LABEL_236:
            v72 = v66->__r_.__value_.__s.__data_[3];
            if (v72 == 48)
              goto LABEL_208;
            if ((v72 - 65) < 0x1A)
              LOBYTE(v72) = v72 + 32;
            if (v72 == 48)
            {
LABEL_208:
              std::string::basic_string[abi:sn180100]<0>((char **)v74, "packetization-mode");
              v73 = cricket::Codec::GetParam((uint64_t)this, v74, (uint64_t)&__p);
              if (SHIBYTE(v74[2]) < 0)
                operator delete((void *)v74[0]);
              if ((v73 & 1) != 0)
              {
                std::operator==[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "0");
                goto LABEL_217;
              }
              v64 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
            }
          }
        }
      }
    }
    if ((v64 & 0x80) != 0)
    {
      v67 = v77.__r_.__value_.__l.__size_;
      if ((v77.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_224;
      v68 = (std::string *)v77.__r_.__value_.__r.__words[0];
      if (v77.__r_.__value_.__l.__size_)
      {
        if (!v77.__r_.__value_.__r.__words[0])
          goto LABEL_224;
      }
    }
    else
    {
      v67 = v64;
      v68 = &v77;
    }
    if (v67 < 4 || v68)
      goto LABEL_217;
LABEL_224:
    __break(1u);
    return;
  }
  operator delete((void *)v74[0]);
  if (v55)
    goto LABEL_180;
LABEL_217:
  if (SHIBYTE(v76) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
  }
  else if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return;
  }
  operator delete(v77.__r_.__value_.__l.__data_);
}

void cricket::`anonymous namespace'::AddDefaultFeedbackParams(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v9;
  int v10;
  int *v12;
  int v13;
  int v14;
  int v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void **v25;
  unint64_t v26;
  _BOOL4 v27;
  int v28;
  int v29;
  void *v31[2];
  uint64_t v32;
  void *v33[2];
  char v34;
  void *__p[2];
  uint64_t v36;

  v4 = (unsigned __int16 *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 39);
  v6 = (unsigned __int16 *)(a1 + 16);
  v7 = v5;
  if (*(char *)(a1 + 39) < 0)
  {
    v7 = *(_QWORD *)(a1 + 24);
    if (v7 < 0)
      goto LABEL_105;
    v6 = *(unsigned __int16 **)v4;
    if (v7 && v6 == 0)
      goto LABEL_105;
  }
  if (v7 == 3)
  {
    v9 = *v6;
    v10 = *((unsigned __int8 *)v6 + 2);
    if (v9 == (unsigned __int16)cricket::kRedCodecName && v10 == 100)
      return;
  }
  v12 = (int *)(a1 + 16);
  if ((v5 & 0x80) != 0)
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (v5 < 0)
      goto LABEL_105;
    v12 = *(int **)v4;
    if (v5)
    {
      if (!v12)
        goto LABEL_105;
    }
  }
  if (v5 == 6)
  {
    v13 = *v12;
    v14 = *((unsigned __int16 *)v12 + 2);
    if (v13 == *(_DWORD *)"ulpfec" && v14 == *(unsigned __int16 *)"ec")
      return;
  }
  v34 = 9;
  if (v33 <= (void **)"goog-remb" && (char *)&v33[1] + 1 > "goog-remb")
  {
LABEL_105:
    __break(1u);
    return;
  }
  v33[0] = *(void **)"goog-remb";
  LOWORD(v33[1]) = cricket::kRtcpFbParamRemb[8];
  __p[0] = 0;
  HIBYTE(v36) = 0;
  cricket::FeedbackParams::Add(a1 + 192, (uint64_t)v33);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(__p[0]);
    if ((v34 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_34:
    operator delete(v33[0]);
    goto LABEL_27;
  }
  if (v34 < 0)
    goto LABEL_34;
LABEL_27:
  v34 = 12;
  if (v33 <= (void **)"transport-cc" && (char *)&v33[1] + 4 > "transport-cc")
    goto LABEL_105;
  strcpy((char *)v33, "transport-cc");
  __p[0] = 0;
  HIBYTE(v36) = 0;
  cricket::FeedbackParams::Add(a1 + 192, (uint64_t)v33);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if ((v34 & 0x80000000) == 0)
      goto LABEL_31;
LABEL_36:
    operator delete(v33[0]);
    v17 = *(char *)(a1 + 39);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_37;
  }
  operator delete(__p[0]);
  if (v34 < 0)
    goto LABEL_36;
LABEL_31:
  v17 = *(char *)(a1 + 39);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_32:
    v18 = v17;
    v19 = v4;
    goto LABEL_40;
  }
LABEL_37:
  v18 = *(_QWORD *)(a1 + 24);
  if (v18 < 0)
    goto LABEL_105;
  v19 = *(unsigned __int16 **)v4;
  if (v18)
  {
    if (!v19)
      goto LABEL_105;
  }
LABEL_40:
  if (v18 == 10)
  {
    v20 = *(_QWORD *)v19;
    v21 = v19[4];
    if (v20 == *(_QWORD *)"flexfec-03" && v21 == *(unsigned __int16 *)"03")
      return;
  }
  HIBYTE(v32) = 3;
  if (v31 <= (void **)"fir" && (char *)v31 + 3 > "fir")
    goto LABEL_105;
  LOWORD(v31[0]) = *(_WORD *)"fir";
  WORD1(v31[0]) = cricket::kRtcpFbCcmParamFir[2];
  v34 = 3;
  if (v33 <= (void **)"ccm" && (char *)v33 + 3 > "ccm")
    goto LABEL_105;
  LOWORD(v33[0]) = *(_WORD *)"ccm";
  WORD1(v33[0]) = cricket::kRtcpFbParamCcm[2];
  *(_OWORD *)__p = *(_OWORD *)v31;
  v36 = v32;
  cricket::FeedbackParams::Add(a1 + 192, (uint64_t)v33);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if ((v34 & 0x80000000) == 0)
      goto LABEL_51;
LABEL_66:
    operator delete(v33[0]);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_52;
LABEL_67:
    operator delete(v31[0]);
    goto LABEL_52;
  }
  operator delete(__p[0]);
  if (v34 < 0)
    goto LABEL_66;
LABEL_51:
  if (SHIBYTE(v32) < 0)
    goto LABEL_67;
LABEL_52:
  v34 = 4;
  if (v33 <= (void **)"nack" && (char *)v33 + 4 > "nack")
    goto LABEL_105;
  strcpy((char *)v33, "nack");
  __p[0] = 0;
  HIBYTE(v36) = 0;
  cricket::FeedbackParams::Add(a1 + 192, (uint64_t)v33);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(__p[0]);
    if ((v34 & 0x80000000) == 0)
      goto LABEL_56;
  }
  else if ((v34 & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(v33[0]);
LABEL_56:
  HIBYTE(v32) = 3;
  if (v31 <= (void **)"pli" && (char *)v31 + 3 > "pli")
    goto LABEL_105;
  LOWORD(v31[0]) = *(_WORD *)"pli";
  WORD1(v31[0]) = cricket::kRtcpFbNackParamPli[2];
  v34 = 4;
  if (v33 <= (void **)"nack" && (char *)v33 + 4 > "nack")
    goto LABEL_105;
  strcpy((char *)v33, "nack");
  *(_OWORD *)__p = *(_OWORD *)v31;
  v36 = v32;
  cricket::FeedbackParams::Add(a1 + 192, (uint64_t)v33);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(__p[0]);
    if ((v34 & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v32) & 0x80000000) == 0)
        goto LABEL_63;
LABEL_72:
      operator delete(v31[0]);
      LODWORD(v23) = *(char *)(a1 + 39);
      if ((v23 & 0x80000000) == 0)
        goto LABEL_64;
      goto LABEL_73;
    }
  }
  else if ((v34 & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete(v33[0]);
  if (SHIBYTE(v32) < 0)
    goto LABEL_72;
LABEL_63:
  LODWORD(v23) = *(char *)(a1 + 39);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_64:
    v23 = v23;
    goto LABEL_76;
  }
LABEL_73:
  v23 = *(_QWORD *)(a1 + 24);
  if (v23 < 0)
    goto LABEL_105;
  v4 = *(unsigned __int16 **)v4;
  if (v23)
  {
    if (!v4)
      goto LABEL_105;
  }
LABEL_76:
  if (v23 != 3)
    return;
  if (*v4 != (unsigned __int16)cricket::kVp8CodecName || *((_BYTE *)v4 + 2) != 56)
    return;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(v33, a2, "WebRTC-RtcpLossNotification", 27);
  if (v34 < 0)
  {
    v26 = (unint64_t)v33[1];
    if (((unint64_t)v33[1] & 0x8000000000000000) != 0)
      goto LABEL_105;
    v25 = (void **)v33[0];
    if (v33[1])
    {
      if (!v33[0])
        goto LABEL_105;
    }
  }
  else
  {
    v25 = v33;
    v26 = v34;
  }
  if (v26 < 7)
  {
    v27 = 0;
    if ((v34 & 0x80) == 0)
      goto LABEL_98;
    goto LABEL_97;
  }
  v28 = *(_DWORD *)v25;
  v29 = *(_DWORD *)((char *)v25 + 3);
  v27 = v28 == 1650552389 && v29 == 1684368482;
  if (v34 < 0)
LABEL_97:
    operator delete(v33[0]);
LABEL_98:
  if (!v27)
    return;
  v34 = 9;
  if (v33 <= (void **)"goog-lntf" && (char *)&v33[1] + 1 > "goog-lntf")
    goto LABEL_105;
  v33[0] = *(void **)"goog-lntf";
  LOWORD(v33[1]) = cricket::kRtcpFbParamLntf[8];
  __p[0] = 0;
  HIBYTE(v36) = 0;
  cricket::FeedbackParams::Add(a1 + 192, (uint64_t)v33);
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  if (v34 < 0)
    operator delete(v33[0]);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_unique<std::pair<std::string const,std::string> const*>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  const void **v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **i;
  const void **v19;
  uint64_t **v20;
  uint64_t *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30[2];

  v4 = a2;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_37;
  v6 = *(uint64_t **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = v6[1] ? (uint64_t *)v6[1] : v6;
  if (!v8)
    goto LABEL_37;
  v9 = (uint64_t **)v8[2];
  if (v9)
  {
    v10 = *v9;
    if (*v9 == v8)
    {
      *v9 = 0;
      while (1)
      {
        v28 = v9[1];
        if (!v28)
          break;
        do
        {
          v9 = (uint64_t **)v28;
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
    }
    else
    {
      for (v9[1] = 0; v10; v10 = v9[1])
      {
        do
        {
          v9 = (uint64_t **)v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
  if (a2 == a3)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, (uint64_t)v8);
    if (!v9)
      goto LABEL_37;
  }
  else
  {
    do
    {
      while (1)
      {
        v11 = (uint64_t *)v9;
        v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v29, (const void **)v4);
        if (!*v12)
          break;
        v4 += 3;
        if (v4 == a3)
          goto LABEL_30;
      }
      v13 = (uint64_t **)v12;
      v30[0] = (uint64_t)(v8 + 4);
      v30[1] = (uint64_t)(v8 + 7);
      std::pair<std::string &,std::string &>::operator=[abi:sn180100]<std::string const,std::string,(void *)0>(v30, (char *)v4);
      v14 = v29;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = v14;
      *v13 = v8;
      v15 = **(_QWORD **)a1;
      if (v15)
      {
        *(_QWORD *)a1 = v15;
        v8 = *v13;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v8);
      ++*(_QWORD *)(a1 + 16);
      if (!v11)
      {
        v4 += 3;
        goto LABEL_37;
      }
      v9 = (uint64_t **)v11[2];
      if (v9)
      {
        v16 = *v9;
        if (*v9 == v11)
        {
          *v9 = 0;
          while (1)
          {
            v17 = v9[1];
            if (!v17)
              break;
            do
            {
              v9 = (uint64_t **)v17;
              v17 = (uint64_t *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v9[1] = 0; v16; v16 = v9[1])
          {
            do
            {
              v9 = (uint64_t **)v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
        }
      }
      v8 = v11;
      v4 += 3;
    }
    while (v4 != a3);
LABEL_30:
    v4 = a3;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, (uint64_t)v8);
    if (!v9)
      goto LABEL_37;
  }
  for (i = (uint64_t **)v9[2]; i; i = (uint64_t **)i[2])
    v9 = i;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, (uint64_t)v9);
LABEL_37:
  while (v4 != a3)
  {
    v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, v30, (const void **)v4);
    if (*v19)
      goto LABEL_36;
    v20 = (uint64_t **)v19;
    v21 = (uint64_t *)operator new(0x50uLL);
    v22 = (std::string *)(v21 + 4);
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
      v24 = (std::string *)(v21 + 7);
      if (*((char *)v4 + 47) < 0)
      {
LABEL_43:
        std::string::__init_copy_ctor_external(v24, *((const std::string::value_type **)v4 + 3), *((_QWORD *)v4 + 4));
        goto LABEL_44;
      }
    }
    else
    {
      v23 = *v4;
      v21[6] = *((_QWORD *)v4 + 2);
      *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
      v24 = (std::string *)(v21 + 7);
      if (*((char *)v4 + 47) < 0)
        goto LABEL_43;
    }
    v25 = *(__int128 *)((char *)v4 + 24);
    v24->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 5);
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
LABEL_44:
    v26 = v30[0];
    *v21 = 0;
    v21[1] = 0;
    v21[2] = v26;
    *v20 = v21;
    v27 = **(_QWORD **)a1;
    if (v27)
    {
      *(_QWORD *)a1 = v27;
      v21 = *v20;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v21);
    ++*(_QWORD *)(a1 + 16);
LABEL_36:
    v4 += 3;
  }
}

uint64_t rtc::RefCountedObject<webrtc::VideoEncoderConfig::Vp8EncoderSpecificSettings>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 16);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::VideoEncoderConfig::Vp8EncoderSpecificSettings>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 4;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::VideoEncoderConfig::Vp8EncoderSpecificSettings>::~RefCountedObject()
{
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::VideoEncoderConfig::Vp8EncoderSpecificSettings>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 16));
  return v1 == 1;
}

uint64_t std::__tree<std::__value_type<std::string,webrtc::InterLayerPredMode>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::InterLayerPredMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::InterLayerPredMode>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,webrtc::InterLayerPredMode> const&>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  size_t v9;
  size_t v10;
  const void **v11;
  int v12;
  size_t v13;
  const void *v14;
  size_t v15;
  size_t v16;
  const void *v17;
  size_t v18;
  size_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  size_t v25;
  size_t v26;
  const void *v27;
  size_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  size_t v34;
  size_t v35;
  char *v36;
  std::string *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;

  v7 = result;
  v8 = (uint64_t *)(result + 8);
  if ((uint64_t *)(result + 8) != a2)
  {
    v9 = *(unsigned __int8 *)(a3 + 23);
    result = a3;
    v10 = v9;
    if (*(char *)(a3 + 23) < 0)
    {
      v10 = *(_QWORD *)(a3 + 8);
      if ((v10 & 0x8000000000000000) != 0)
        goto LABEL_94;
      result = *(_QWORD *)a3;
      if (v10)
      {
        if (!result)
          goto LABEL_94;
      }
    }
    v11 = (const void **)(a2 + 4);
    v12 = *((char *)a2 + 55);
    v13 = *((unsigned __int8 *)a2 + 55);
    v14 = a2 + 4;
    v15 = *((unsigned __int8 *)a2 + 55);
    if (v12 < 0)
    {
      v15 = a2[5];
      if ((v15 & 0x8000000000000000) != 0)
        goto LABEL_94;
      v14 = *v11;
      if (v15)
      {
        if (!v14)
          goto LABEL_94;
      }
    }
    if (v15 >= v10)
      v16 = v10;
    else
      v16 = v15;
    result = memcmp((const void *)result, v14, v16);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
LABEL_15:
        if ((v13 & 0x80) == 0
          || (v13 = a2[5], (v13 & 0x8000000000000000) == 0) && ((v11 = (const void **)*v11, !v13) || v11))
        {
          v17 = (const void *)a3;
          v18 = v9;
          if ((v9 & 0x80) == 0
            || (v18 = *(_QWORD *)(a3 + 8), (v18 & 0x8000000000000000) == 0)
            && ((v17 = *(const void **)a3, !v18) || v17))
          {
            if (v18 >= v13)
              v19 = v13;
            else
              v19 = v18;
            result = memcmp(v11, v17, v19);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) == 0)
                return result;
            }
            else if (v13 >= v18)
            {
              return result;
            }
            v30 = a2[1];
            if (v30)
            {
              v31 = (uint64_t *)a2[1];
              do
              {
                v29 = v31;
                v31 = (uint64_t *)*v31;
              }
              while (v31);
            }
            else
            {
              v32 = a2;
              do
              {
                v29 = (uint64_t *)v32[2];
                v24 = *v29 == (_QWORD)v32;
                v32 = v29;
              }
              while (!v24);
            }
            if (v29 == v8)
            {
LABEL_91:
              if (v30)
              {
                v40 = v29;
              }
              else
              {
                v40 = a2;
                v29 = a2 + 1;
              }
              goto LABEL_82;
            }
            result = a3;
            if ((v9 & 0x80) == 0
              || (v9 = *(_QWORD *)(a3 + 8), (v9 & 0x8000000000000000) == 0)
              && ((result = *(_QWORD *)a3, !v9) || result))
            {
              v33 = v29 + 4;
              if ((*((char *)v29 + 55) & 0x80000000) == 0)
              {
                v34 = *((unsigned __int8 *)v29 + 55);
LABEL_76:
                if (v34 >= v9)
                  v35 = v9;
                else
                  v35 = v34;
                result = memcmp((const void *)result, v33, v35);
                if ((_DWORD)result)
                {
                  if ((result & 0x80000000) == 0)
                    goto LABEL_81;
                }
                else if (v9 >= v34)
                {
                  goto LABEL_81;
                }
                goto LABEL_91;
              }
              v34 = v29[5];
              if ((v34 & 0x8000000000000000) == 0)
              {
                v33 = (_QWORD *)*v33;
                if (!v34 || v33)
                  goto LABEL_76;
              }
            }
          }
        }
LABEL_94:
        __break(1u);
        return result;
      }
    }
    else if (v10 >= v15)
    {
      goto LABEL_15;
    }
  }
  v20 = (uint64_t *)*a2;
  if (*(uint64_t **)v7 == a2)
  {
    v22 = a2;
    goto LABEL_55;
  }
  if (v20)
  {
    v21 = (uint64_t *)*a2;
    do
    {
      v22 = v21;
      v21 = (uint64_t *)v21[1];
    }
    while (v21);
  }
  else
  {
    v23 = a2;
    do
    {
      v22 = (uint64_t *)v23[2];
      v24 = *v22 == (_QWORD)v23;
      v23 = v22;
    }
    while (v24);
  }
  result = (uint64_t)(v22 + 4);
  if (*((char *)v22 + 55) < 0)
  {
    v25 = v22[5];
    if ((v25 & 0x8000000000000000) != 0)
      goto LABEL_94;
    result = *(_QWORD *)result;
    if (v25)
    {
      if (!result)
        goto LABEL_94;
    }
  }
  else
  {
    v25 = *((unsigned __int8 *)v22 + 55);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    v26 = *(_QWORD *)(a3 + 8);
    if ((v26 & 0x8000000000000000) != 0)
      goto LABEL_94;
    v27 = *(const void **)a3;
    if (v26)
    {
      if (!v27)
        goto LABEL_94;
    }
  }
  else
  {
    v26 = *(unsigned __int8 *)(a3 + 23);
    v27 = (const void *)a3;
  }
  if (v26 >= v25)
    v28 = v25;
  else
    v28 = v26;
  result = memcmp((const void *)result, v27, v28);
  if (!(_DWORD)result)
  {
    if (v25 < v26)
      goto LABEL_55;
LABEL_81:
    result = (uint64_t)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v7, &v40, (const void **)a3);
    v29 = (uint64_t *)result;
    goto LABEL_82;
  }
  if ((result & 0x80000000) == 0)
    goto LABEL_81;
LABEL_55:
  if (v20)
  {
    v40 = v22;
    v29 = v22 + 1;
  }
  else
  {
    v40 = a2;
    v29 = a2;
  }
LABEL_82:
  if (!*v29)
  {
    v36 = (char *)operator new(0x40uLL);
    v37 = (std::string *)(v36 + 32);
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
      *((_QWORD *)v36 + 6) = *(_QWORD *)(a4 + 16);
    }
    *((_DWORD *)v36 + 14) = *(_DWORD *)(a4 + 24);
    v38 = v40;
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0;
    *((_QWORD *)v36 + 2) = v38;
    *v29 = (uint64_t)v36;
    v39 = **(_QWORD **)v7;
    if (v39)
    {
      *(_QWORD *)v7 = v39;
      v36 = (char *)*v29;
    }
    result = (uint64_t)std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), (uint64_t *)v36);
    ++*(_QWORD *)(v7 + 16);
  }
  return result;
}

void webrtc::FieldTrialEnum<webrtc::InterLayerPredMode>::~FieldTrialEnum(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C0B41D0;
  std::__tree<sigslot::_signal_base_interface *>::destroy(a1 + 88, *(_QWORD **)(a1 + 96));
  std::__tree<rtc::SocketAddress>::destroy(a1 + 64, *(char **)(a1 + 72));
  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void **)(a1 + 8);
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    v2 = *(void **)(a1 + 8);
    if (!v2)
      goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v2);
LABEL_6:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::RefCountedObject<webrtc::VideoEncoderConfig::Vp9EncoderSpecificSettings>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 24);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::VideoEncoderConfig::Vp9EncoderSpecificSettings>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 6;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::VideoEncoderConfig::Vp9EncoderSpecificSettings>::~RefCountedObject()
{
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::VideoEncoderConfig::Vp9EncoderSpecificSettings>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 24));
  return v1 == 1;
}

uint64_t rtc::RefCountedObject<webrtc::VideoEncoderConfig::Av1EncoderSpecificSettings>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 12);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::VideoEncoderConfig::Av1EncoderSpecificSettings>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 3;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::VideoEncoderConfig::Av1EncoderSpecificSettings>::~RefCountedObject()
{
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::VideoEncoderConfig::Av1EncoderSpecificSettings>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 12));
  return v1 == 1;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::WebRtcVideoSendChannel::RequestEncoderFallback(void)::$_0 &&>(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 216))(*a1);
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,cricket::WebRtcVideoSendChannel::RequestEncoderSwitch(webrtc::SdpVideoFormat const&,BOOL)::$_0 &&>(_QWORD **a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(*(_QWORD *)**a1 + 224))(**a1, *a1 + 1, *((unsigned __int8 *)*a1 + 104));
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<cricket::WebRtcVideoSendChannel::RequestEncoderSwitch(webrtc::SdpVideoFormat const&,BOOL)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 56) & 1) != 0)
        operator delete(*(void **)(v3 + 64));
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3 + 32, *(_QWORD *)(v3 + 40));
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,cricket::WebRtcVideoSendChannel::OnNetworkRouteChanged(std::string_view,rtc::NetworkRoute const&)::$_1 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *a1;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)*a1 + 104) + 104))(*(_QWORD *)(*(_QWORD *)*a1 + 104));
  v3 = result;
  v4 = (_QWORD *)(v1 + 8);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
  {
    v5 = *(unsigned __int8 *)(v1 + 31);
LABEL_8:
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 120))(result, v4, v5, v1 + 32);
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 200))(v3, *(int *)(v1 + 64));
  }
  v5 = *(_QWORD *)(v1 + 16);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v4 = (_QWORD *)*v4;
    if (!v5 || v4 != 0)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<cricket::WebRtcVideoSendChannel::OnNetworkRouteChanged(std::string_view,rtc::NetworkRoute const&)::$_1>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,cricket::WebRtcVideoReceiveChannel::OnPacketReceived(webrtc::RtpPacketReceived const&)::$_1 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _OWORD v18[2];
  _BYTE v19[22];
  void *__p[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = **a1;
  v3 = *(_OWORD *)(v1 + 3);
  v18[0] = *(_OWORD *)(v1 + 1);
  v18[1] = v3;
  *(_OWORD *)v19 = *(_OWORD *)(v1 + 5);
  *(_QWORD *)&v19[14] = *(uint64_t *)((char *)v1 + 54);
  *(_OWORD *)__p = *((_OWORD *)v1 + 4);
  v1[8] = 0;
  v1[9] = 0;
  v4 = v1[10];
  v5 = v1[11];
  v1[10] = 0;
  v21 = v4;
  v22 = v5;
  v23 = v1[12];
  v6 = *(_OWORD *)(v1 + 13);
  v1[12] = 0;
  v1[13] = 0;
  v1[14] = 0;
  v26 = *((_BYTE *)v1 + 136);
  v7 = *(_OWORD *)(v1 + 15);
  v24 = v6;
  v25 = v7;
  v8 = v1[18];
  v1[18] = 0;
  v27 = v8;
  cricket::WebRtcVideoReceiveChannel::ProcessReceivedPacket(v2, (uint64_t)v18);
  v9 = v27;
  if (v27)
  {
    v10 = (unsigned int *)(v27 + 8);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v13 = v23;
  if (v23)
  {
    v14 = (unsigned int *)(v23 + 24);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      v17 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
        MEMORY[0x20BD0ADD4](v17, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v13, 0x1010C40EE34DA14);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<cricket::WebRtcVideoReceiveChannel::OnPacketReceived(webrtc::RtpPacketReceived const&)::$_1>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;

  v3 = (_QWORD *)*a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = (unsigned int *)v3[18];
      if (v4)
      {
        v5 = v4 + 2;
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
      v8 = v3[12];
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 24);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = 0;
          if (v12)
            MEMORY[0x20BD0ADD4](v12, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v8, 0x1010C40EE34DA14);
        }
      }
      v13 = (void *)v3[8];
      if (v13)
      {
        v3[9] = v13;
        operator delete(v13);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,BOOL,std::__bind_front_t<BOOL (cricket::WebRtcVideoReceiveChannel::*)(webrtc::RtpPacketReceived const&),cricket::WebRtcVideoReceiveChannel*> &,webrtc::RtpPacketReceived const&>(uint64_t (***a1)(_QWORD *))
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = **a1;
  v2 = (uint64_t)(*a1)[1];
  v3 = (_QWORD *)((char *)(*a1)[2] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

_QWORD *cricket::WebRtcVoiceEngine::WebRtcVoiceEngine(uint64_t a1, uint64_t a2, void (***a3)(_QWORD), void (****a4)(_QWORD), void (****a5)(_QWORD), void (****a6)(_QWORD), void (****a7)(_QWORD), uint64_t *a8, uint64_t a9)
{
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void (***v17)(_QWORD);
  void (***v18)(_QWORD);
  uint64_t v19;
  _QWORD *result;
  int *p_p;
  unint64_t v22;
  BOOL v23;
  int v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  unint64_t v35;
  unsigned __int8 v36;

  *(_QWORD *)a1 = &off_24C0C6300;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = a3;
  if (a3)
    (**a3)(a3);
  v15 = *a4;
  *(_QWORD *)(a1 + 40) = *a4;
  if (v15)
    (**v15)(v15);
  v16 = *a5;
  *(_QWORD *)(a1 + 48) = *a5;
  if (v16)
    (**v16)(v16);
  v17 = *a6;
  *(_QWORD *)(a1 + 56) = *a6;
  if (v17)
    (**v17)(v17);
  v18 = *a7;
  *(_QWORD *)(a1 + 64) = *a7;
  if (v18)
    (**v18)(v18);
  v19 = *a8;
  *a8 = 0;
  *(_QWORD *)(a1 + 72) = v19;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  *(_QWORD *)(a1 + 144) = 200;
  *(_BYTE *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a9 + 16))(&__p, a9, "WebRTC-Audio-MinimizeResamplingOnMobile", 39);
  if ((char)v36 < 0)
  {
    v22 = v35;
    if ((v35 & 0x8000000000000000) != 0 || (p_p = (int *)__p, v35) && !__p)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v22 = v36;
  }
  if (v22 >= 7)
  {
    v24 = *p_p;
    v25 = *(int *)((char *)p_p + 3);
    v23 = v24 == 1650552389 && v25 == 1684368482;
    if ((v36 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
  v23 = 0;
  if ((v36 & 0x80) != 0)
LABEL_26:
    operator delete(__p);
LABEL_27:
  *(_BYTE *)(a1 + 160) = v23;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  return (_QWORD *)a1;
}

void cricket::WebRtcVoiceEngine::~WebRtcVoiceEngine(cricket::WebRtcVoiceEngine *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  void (***v18)(_QWORD);
  void *v19;
  void (***v20)(_QWORD);
  void (***v21)(_QWORD);
  void (**v22)(_QWORD);
  BOOL v23;
  void (***v24)(_QWORD);
  void (***v25)(_QWORD);
  void *v26;
  void (***v27)(_QWORD);
  void (***v28)(_QWORD);
  void (**v29)(_QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (***v37)(_QWORD);

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  if (*((_BYTE *)this + 137))
  {
    v9 = *((_QWORD *)this + 8);
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 240))(v9);
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 192))(*((_QWORD *)this + 4));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 216))(*((_QWORD *)this + 4));
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), 0);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4));
  }
  v17 = (void (***)(_QWORD))*((_QWORD *)this + 14);
  if (v17)
  {
    v18 = (void (***)(_QWORD))*((_QWORD *)this + 15);
    v19 = (void *)*((_QWORD *)this + 14);
    if (v18 != v17)
    {
      v20 = v18 - 27;
      v21 = v18 - 27;
      do
      {
        v22 = *v21;
        v21 -= 27;
        (*v22)(v20);
        v23 = v20 == v17;
        v20 = v21;
      }
      while (!v23);
      v19 = (void *)*((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v17;
    operator delete(v19);
  }
  v24 = (void (***)(_QWORD))*((_QWORD *)this + 11);
  if (v24)
  {
    v25 = (void (***)(_QWORD))*((_QWORD *)this + 12);
    v26 = (void *)*((_QWORD *)this + 11);
    if (v25 != v24)
    {
      v27 = v25 - 27;
      v28 = v25 - 27;
      do
      {
        v29 = *v28;
        v28 -= 27;
        (*v29)(v27);
        v23 = v27 == v24;
        v27 = v28;
      }
      while (!v23);
      v26 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v24;
    operator delete(v26);
  }
  v30 = *((_QWORD *)this + 10);
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *((_QWORD *)this + 8);
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *((_QWORD *)this + 7);
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *((_QWORD *)this + 6);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *((_QWORD *)this + 5);
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *((_QWORD *)this + 4);
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = (void (***)(_QWORD))*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v37)
    (**v37)(v37);
}

{
  cricket::WebRtcVoiceEngine::~WebRtcVoiceEngine(this);
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::WebRtcVoiceEngine::StopAecDump(cricket::WebRtcVoiceEngine *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 8);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 240))(v1);
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  }
}

void cricket::WebRtcVoiceEngine::Init(cricket::WebRtcVoiceEngine *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (***v20)(_QWORD);
  void (***v21)(_QWORD);
  void *v22;
  void (***v23)(_QWORD);
  void (***v24)(_QWORD);
  void (**v25)(_QWORD);
  BOOL v26;
  const cricket::Codec *v27;
  std::string::size_type size;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const cricket::Codec *i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (***v51)(_QWORD);
  void (***v52)(_QWORD);
  void *v53;
  void (***v54)(_QWORD);
  void (***v55)(_QWORD);
  void (**v56)(_QWORD);
  const cricket::Codec *v57;
  std::string::size_type v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const cricket::Codec *j;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  float v71;
  void (***v72)(_QWORD);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::string *v86;
  uint64_t *v87;
  uint64_t v88;
  std::string __p;
  int v90;
  char v91;
  __int16 v92;
  void *v93;
  char v94;
  char v95;
  __int16 v96;
  void *v97;
  uint64_t v98;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  (*(void (**)(std::string *__return_ptr, _QWORD, const char *, uint64_t, uint64_t))(**((_QWORD **)this + 1)
                                                                                            + 16))(&__p, *((_QWORD *)this + 1), "rtc-low-prio", 12, 2);
  v10 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  v11 = (void (***)(_QWORD))*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v10;
  if (v11)
  {
    (**v11)(v11);
    v12 = (void (***)(_QWORD))__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v12)
      (**v12)(v12);
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 5) + 32))(&v97);
  cricket::WebRtcVoiceEngine::CollectCodecs((uint64_t)&__p, (uint64_t *)&v97);
  v20 = (void (***)(_QWORD))*((_QWORD *)this + 11);
  if (v20)
  {
    v21 = (void (***)(_QWORD))*((_QWORD *)this + 12);
    v22 = (void *)*((_QWORD *)this + 11);
    if (v21 != v20)
    {
      v23 = v21 - 27;
      v24 = v21 - 27;
      do
      {
        v25 = *v24;
        v24 -= 27;
        (*v25)(v23);
        v26 = v23 == v20;
        v23 = v24;
      }
      while (!v26);
      v22 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v20;
    operator delete(v22);
  }
  v27 = (const cricket::Codec *)__p.__r_.__value_.__r.__words[0];
  *((_QWORD *)this + 11) = __p.__r_.__value_.__r.__words[0];
  size = __p.__r_.__value_.__l.__size_;
  *((_OWORD *)this + 6) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  v29 = (uint64_t)v97;
  if (!v97)
  {
    i = (const cricket::Codec *)size;
    if (v27 == (const cricket::Codec *)size)
      goto LABEL_30;
    goto LABEL_27;
  }
  v30 = v98;
  v31 = v97;
  if ((void *)v98 != v97)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v30 - 56, *(_QWORD *)(v30 - 48));
      if (*(char *)(v30 - 73) < 0)
        operator delete(*(void **)(v30 - 96));
      v30 -= 96;
    }
    while (v30 != v29);
    v31 = v97;
  }
  v98 = v29;
  operator delete(v31);
  v27 = (const cricket::Codec *)*((_QWORD *)this + 11);
  for (i = (const cricket::Codec *)*((_QWORD *)this + 12); v27 != i; v27 = (const cricket::Codec *)((char *)v27 + 216))
  {
LABEL_27:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    {
      v1 = v1 & 0xFFFFFFFF00000000 | 0xC18;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v33, v34, v35, v36, v37, v38, v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_30:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 6) + 32))(&v97);
  cricket::WebRtcVoiceEngine::CollectCodecs((uint64_t)&__p, (uint64_t *)&v97);
  v51 = (void (***)(_QWORD))*((_QWORD *)this + 14);
  if (v51)
  {
    v52 = (void (***)(_QWORD))*((_QWORD *)this + 15);
    v53 = (void *)*((_QWORD *)this + 14);
    if (v52 != v51)
    {
      v54 = v52 - 27;
      v55 = v52 - 27;
      do
      {
        v56 = *v55;
        v55 -= 27;
        (*v56)(v54);
        v26 = v54 == v51;
        v54 = v55;
      }
      while (!v26);
      v53 = (void *)*((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v51;
    operator delete(v53);
  }
  v57 = (const cricket::Codec *)__p.__r_.__value_.__r.__words[0];
  *((_QWORD *)this + 14) = __p.__r_.__value_.__r.__words[0];
  v58 = __p.__r_.__value_.__l.__size_;
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  v59 = (uint64_t)v97;
  if (!v97)
  {
    j = (const cricket::Codec *)v58;
    if (v57 == (const cricket::Codec *)v58)
      goto LABEL_54;
    goto LABEL_51;
  }
  v60 = v98;
  v61 = v97;
  if ((void *)v98 != v97)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v60 - 56, *(_QWORD *)(v60 - 48));
      if (*(char *)(v60 - 73) < 0)
        operator delete(*(void **)(v60 - 96));
      v60 -= 96;
    }
    while (v60 != v59);
    v61 = v97;
  }
  v98 = v59;
  operator delete(v61);
  v57 = (const cricket::Codec *)*((_QWORD *)this + 14);
  for (j = (const cricket::Codec *)*((_QWORD *)this + 15); v57 != j; v57 = (const cricket::Codec *)((char *)v57 + 216))
  {
LABEL_51:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    {
      v1 = v1 & 0xFFFFFFFF00000000 | 0xC48;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v63, v64, v65, v66, v67, v68, v69, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_54:
  v70 = (uint64_t *)*((_QWORD *)this + 4);
  if (!v70)
  {
    v86 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc", 403, "adm()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v47, v48, v49, v50, v88);
    cricket::WebRtcVoiceEngine::CollectCodecs((uint64_t)v86, v87);
    return;
  }
  v71 = webrtc::adm_helpers::Init(v70);
  v72 = (void (***)(_QWORD))*((_QWORD *)this + 7);
  if (!v72)
  {
    webrtc::AudioMixerImpl::Create((uint64_t *)&__p);
    v72 = (void (***)(_QWORD))__p.__r_.__value_.__r.__words[0];
    v73 = *((_QWORD *)this + 8);
    if (!v73)
      goto LABEL_58;
    goto LABEL_57;
  }
  ((void (*)(_QWORD, float))**v72)(*((_QWORD *)this + 7), v71);
  v73 = *((_QWORD *)this + 8);
  if (v73)
LABEL_57:
    (**(void (***)(uint64_t))v73)(v73);
LABEL_58:
  v74 = *((_QWORD *)this + 4);
  if (v74)
    (**(void (***)(_QWORD))v74)(*((_QWORD *)this + 4));
  if (*((_QWORD *)this + 9))
  {
    v75 = *((_QWORD *)this + 1);
    v76 = operator new();
    v77 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    *(_QWORD *)(v76 + 16) = v77;
    *(_QWORD *)(v76 + 24) = v75;
    *(_QWORD *)v76 = off_24C0C6808;
    *(_QWORD *)(v76 + 8) = v77;
    *(_DWORD *)(v76 + 32) = 0;
    v78 = (unsigned int *)(v76 + 32);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  else
  {
    v76 = 0;
  }
  v80 = operator new();
  *(_QWORD *)v80 = &unk_24C0AEAD8;
  *(_QWORD *)(v80 + 16) = v72;
  if (v72)
    (**v72)(v72);
  *(_QWORD *)(v80 + 24) = v73;
  if (v73)
    (**(void (***)(uint64_t))v73)(v73);
  *(_QWORD *)(v80 + 32) = v74;
  if (v74)
    (**(void (***)(uint64_t))v74)(v74);
  *(_QWORD *)(v80 + 40) = v76;
  if (v76)
    (**(void (***)(uint64_t))v76)(v76);
  *(_WORD *)(v80 + 48) = 257;
  webrtc::AudioTransportImpl::AudioTransportImpl(v80 + 56, v72, v73, (uint64_t *)v76);
  *(_QWORD *)(v80 + 15848) = 0;
  *(_QWORD *)(v80 + 15840) = 0;
  *(_OWORD *)(v80 + 15800) = 0u;
  *(_OWORD *)(v80 + 15816) = 0u;
  *(_QWORD *)(v80 + 15832) = v80 + 15840;
  *(_QWORD *)v80 = &unk_24C0AEB30;
  v81 = (unsigned int *)(v80 + 15856);
  *(_DWORD *)(v80 + 15856) = 0;
  do
    v82 = __ldxr(v81);
  while (__stxr(v82 + 1, v81));
  v83 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v80;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  if (v72)
    (*v72)[1](v72);
  v84 = *((_QWORD *)this + 4);
  v85 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 40))(v84, v85);
  v92 = 0;
  LOBYTE(v93) = 0;
  v95 = 0;
  v96 = 0;
  LODWORD(__p.__r_.__value_.__l.__data_) = 257;
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = 0x100010101000101;
  HIDWORD(__p.__r_.__value_.__r.__words[1]) = 200;
  __p.__r_.__value_.__s.__data_[16] = 1;
  WORD2(__p.__r_.__value_.__r.__words[2]) = 256;
  v90 = 0;
  v91 = 1;
  cricket::WebRtcVoiceEngine::ApplyOptions(this, (const cricket::AudioOptions *)&__p);
  if (v95)
  {
    if (v94 < 0)
      operator delete(v93);
  }
  *((_BYTE *)this + 137) = 1;
}

void cricket::WebRtcVoiceEngine::CollectCodecs(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  _BOOL4 v43;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  int v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t **v58;
  int v59;
  uint64_t **v60;
  uint64_t *v61;
  _BYTE *v62;
  uint64_t *v63;
  int v64;
  uint64_t **v65;
  uint64_t *v66;
  uint64_t **v67;
  int v68;
  uint64_t **v69;
  uint64_t *v70;
  _BYTE *v71;
  cricket::Codec *v72;
  char v73;
  _DWORD *v74;
  int v75;
  std::string::size_type v76;
  void **v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  std::string::size_type size;
  std::string::size_type v82;
  _BYTE *v83;
  std::string::size_type v84;
  int v85;
  size_t v86;
  void **v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  size_t v91;
  char *v92;
  std::string::size_type v93;
  std::string::size_type v94;
  std::string *v95;
  char *v96;
  std::string::size_type v97;
  __int128 v98;
  int v99;
  const void **v100;
  const void **v101;
  char *v102;
  std::string *v103;
  std::string *v104;
  void *v105;
  std::string::size_type v106;
  BOOL v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  _BYTE *v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t **v120;
  int v121;
  uint64_t *v122;
  uint64_t **v123;
  std::string *v124;
  uint64_t **v125;
  int v127;
  uint64_t *v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t **v131;
  _BOOL4 v132;
  void *v133;
  _BOOL4 v134;
  void *v135;
  size_t v136;
  unint64_t v137;
  std::string v138;
  _DWORD v139[2];
  uint64_t **v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t **v143;
  uint64_t *v144;
  uint64_t v145;
  char v146[8];
  char *v147[3];
  _QWORD *v148[3];
  uint64_t *v149;
  _BYTE v150[224];
  _BYTE v151[224];
  std::string v152;
  std::string __s;
  void *__src[2];
  char v155;
  void *__p;
  uint64_t v157;
  std::string v158;
  _BYTE v159[224];
  uint64_t *v160[2];
  _DWORD *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;

  v169 = *MEMORY[0x24BDAC8D0];
  cricket::PayloadTypeMapper::PayloadTypeMapper((cricket::PayloadTypeMapper *)v146, (uint64_t)a2);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v144 = 0;
  v145 = 0;
  v143 = &v144;
  v5 = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::greater<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__find_equal<int>(&v143, (uint64_t *)&v144, v160, (uint64_t **)__src, 8000);
  if (!*v5)
  {
    v6 = v5;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = 8000;
    v8 = v160[0];
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v8;
    *v6 = (uint64_t)v7;
    if (*v143)
    {
      v143 = (uint64_t **)*v143;
      v9 = (uint64_t *)*v6;
    }
    else
    {
      v9 = v7;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v144, v9);
    ++v145;
  }
  v10 = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::greater<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__find_equal<int>(&v143, (uint64_t *)&v144, v160, (uint64_t **)__src, 16000);
  if (!*v10)
  {
    v11 = v10;
    v12 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v12 + 28) = 16000;
    v13 = v160[0];
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v13;
    *v11 = (uint64_t)v12;
    if (*v143)
    {
      v143 = (uint64_t **)*v143;
      v14 = (uint64_t *)*v11;
    }
    else
    {
      v14 = v12;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v144, v14);
    ++v145;
  }
  v15 = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::greater<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__find_equal<int>(&v143, (uint64_t *)&v144, v160, (uint64_t **)__src, 32000);
  if (!*v15)
  {
    v16 = v15;
    v17 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v17 + 28) = 32000;
    v18 = v160[0];
    *v17 = 0;
    v17[1] = 0;
    v17[2] = (uint64_t)v18;
    *v16 = (uint64_t)v17;
    if (*v143)
    {
      v143 = (uint64_t **)*v143;
      v19 = (uint64_t *)*v16;
    }
    else
    {
      v19 = v17;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v144, v19);
    ++v145;
  }
  v141 = 0;
  v142 = 0;
  v140 = &v141;
  v20 = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::greater<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__find_equal<int>(&v140, (uint64_t *)&v141, v160, (uint64_t **)__src, 8000);
  if (!*v20)
  {
    v21 = v20;
    v22 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v22 + 28) = 8000;
    v23 = v160[0];
    *v22 = 0;
    v22[1] = 0;
    v22[2] = (uint64_t)v23;
    *v21 = (uint64_t)v22;
    if (*v140)
    {
      v140 = (uint64_t **)*v140;
      v24 = (uint64_t *)*v21;
    }
    else
    {
      v24 = v22;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v141, v24);
    ++v142;
  }
  v25 = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::greater<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__find_equal<int>(&v140, (uint64_t *)&v141, v160, (uint64_t **)__src, 16000);
  if (!*v25)
  {
    v26 = v25;
    v27 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v27 + 28) = 16000;
    v28 = v160[0];
    *v27 = 0;
    v27[1] = 0;
    v27[2] = (uint64_t)v28;
    *v26 = (uint64_t)v27;
    if (*v140)
    {
      v140 = (uint64_t **)*v140;
      v29 = (uint64_t *)*v26;
    }
    else
    {
      v29 = v27;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v141, v29);
    ++v142;
  }
  v30 = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::greater<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__find_equal<int>(&v140, (uint64_t *)&v141, v160, (uint64_t **)__src, 32000);
  if (!*v30)
  {
    v31 = v30;
    v32 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v32 + 28) = 32000;
    v33 = v160[0];
    *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v33;
    *v31 = (uint64_t)v32;
    if (*v140)
    {
      v140 = (uint64_t **)*v140;
      v34 = (uint64_t *)*v31;
    }
    else
    {
      v34 = v32;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v141, v34);
    ++v142;
  }
  v35 = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::greater<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__find_equal<int>(&v140, (uint64_t *)&v141, v160, (uint64_t **)__src, 48000);
  if (*v35)
  {
    v36 = *a2;
    v37 = a2[1];
    if (*a2 == v37)
      goto LABEL_225;
    goto LABEL_38;
  }
  v38 = v35;
  v39 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v39 + 28) = 48000;
  v40 = v160[0];
  *v39 = 0;
  v39[1] = 0;
  v39[2] = (uint64_t)v40;
  *v38 = (uint64_t)v39;
  if (*v140)
  {
    v140 = (uint64_t **)*v140;
    v41 = (uint64_t *)*v38;
  }
  else
  {
    v41 = v39;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v141, v41);
  ++v142;
  v36 = *a2;
  v37 = a2[1];
  if (*a2 != v37)
  {
LABEL_38:
    v43 = __src <= (void **)"transport-cc" && (char *)&__src[1] + 4 > "transport-cc";
    v134 = v43;
    v45 = __src <= (void **)&cricket::kRedCodecName && (char *)__src + 3 > (char *)&cricket::kRedCodecName;
    v132 = v45;
    do
    {
      cricket::PayloadTypeMapper::ToAudioCodec((cricket::PayloadTypeMapper *)v146, (const webrtc::SdpAudioFormat *)v36, (uint64_t)v160);
      if (!v168)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0
          && (rtc::ToString((rtc *)v36, (char *)__src),
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v46, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc"), v155 < 0))
        {
          operator delete(__src[0]);
          if (!v168)
            goto LABEL_51;
        }
        else if (!v168)
        {
          goto LABEL_51;
        }
      }
      if (*(_BYTE *)(v36 + 93))
      {
        v155 = 12;
        v53 = v134;
        if (v134)
          goto LABEL_241;
        v2 &= 0xFFFFFFFFFFFFFF00;
        strcpy((char *)__src, "transport-cc");
        __p = (void *)v2;
        v158.__r_.__value_.__s.__data_[7] = 0;
        cricket::FeedbackParams::Add((uint64_t)&v167, (uint64_t)__src);
        if (v158.__r_.__value_.__s.__data_[7] < 0)
        {
          operator delete(__p);
          if (v155 < 0)
          {
LABEL_76:
            operator delete(__src[0]);
            if (!*(_BYTE *)(v36 + 92))
              goto LABEL_77;
            goto LABEL_61;
          }
        }
        else if (v155 < 0)
        {
          goto LABEL_76;
        }
      }
      if (!*(_BYTE *)(v36 + 92))
        goto LABEL_77;
LABEL_61:
      v54 = v144;
      if (v144)
      {
        v55 = *(_DWORD *)(v36 + 24);
        v56 = &v144;
        do
        {
          v57 = v54;
          v58 = v56;
          v59 = *((_DWORD *)v54 + 7);
          v60 = (uint64_t **)(v54 + 1);
          if (v59 <= v55)
          {
            v60 = (uint64_t **)v57;
            v56 = (uint64_t **)v57;
          }
          v54 = *v60;
        }
        while (v54);
        if (v56 != &v144)
        {
          v61 = v59 <= v55 ? v57 : (uint64_t *)v58;
          if (v55 <= *((_DWORD *)v61 + 7))
          {
            if (v59 <= v55)
              v62 = v57;
            else
              v62 = v58;
            v62[32] = 1;
          }
        }
      }
LABEL_77:
      v63 = v141;
      if (v141)
      {
        v64 = *(_DWORD *)(v36 + 24);
        v65 = &v141;
        do
        {
          v66 = v63;
          v67 = v65;
          v68 = *((_DWORD *)v63 + 7);
          v69 = (uint64_t **)(v63 + 1);
          if (v68 <= v64)
          {
            v69 = (uint64_t **)v66;
            v65 = (uint64_t **)v66;
          }
          v63 = *v69;
        }
        while (v63);
        if (v65 != &v141)
        {
          v70 = v68 <= v64 ? v66 : (uint64_t *)v67;
          if (v64 <= *((_DWORD *)v70 + 7))
          {
            if (v68 <= v64)
              v71 = v66;
            else
              v71 = v67;
            v71[32] = 1;
          }
        }
      }
      v72 = *(cricket::Codec **)(a1 + 8);
      v53 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v72 >= v53)
      {
        *(_QWORD *)(a1 + 8) = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)a1, (const cricket::Codec *)v160);
        v73 = HIBYTE(v163);
        if ((SHIBYTE(v163) & 0x80000000) == 0)
          goto LABEL_100;
      }
      else
      {
        if (!v72)
          goto LABEL_241;
        *(_QWORD *)(a1 + 8) = (char *)cricket::Codec::Codec(v72, (const cricket::Codec *)v160) + 216;
        v73 = HIBYTE(v163);
        if ((SHIBYTE(v163) & 0x80000000) == 0)
        {
LABEL_100:
          v74 = &v161;
          if (v73 == 4)
            goto LABEL_101;
          goto LABEL_102;
        }
      }
      v53 = v162;
      if ((v162 & 0x8000000000000000) != 0)
        goto LABEL_241;
      v74 = v161;
      if (v162)
      {
        if (!v161)
          goto LABEL_241;
      }
      if (v162 == 4)
      {
LABEL_101:
        if (*v74 == *(_DWORD *)"opus")
        {
          v75 = snprintf((char *)__src, 0x20uLL, "%d", HIDWORD(v160[1]));
          if (v75 < 0)
            goto LABEL_277;
          v76 = v75;
          if (v75 > 0x16)
          {
            v79 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v75 | 7) != 0x17)
              v79 = v75 | 7;
            v80 = v79 + 1;
            v77 = (void **)operator new(v79 + 1);
            v138.__r_.__value_.__l.__size_ = v76;
            v138.__r_.__value_.__r.__words[2] = v80 | 0x8000000000000000;
            v138.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
            v78 = (char *)v77 + v76;
            v53 = (void **)((char *)v77 + v76) > __src;
            if (v77 <= __src)
              goto LABEL_111;
          }
          else
          {
            *((_BYTE *)&v138.__r_.__value_.__s + 23) = v75;
            v77 = (void **)&v138;
            v78 = (char *)&v138 + v76;
            v53 = (char *)&v138 + v76 > (char *)__src;
            if (&v138 > (std::string *)__src)
              goto LABEL_112;
LABEL_111:
            if ((_DWORD)v53)
              goto LABEL_241;
          }
LABEL_112:
          if ((_DWORD)v76)
            memcpy(v77, __src, v76);
          *v78 = 0;
          size = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = 22;
          else
            v82 = (v138.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v138.__r_.__value_.__l.__size_;
          if (v82 == size)
          {
            std::string::__grow_by_and_replace(&v138, v82, 1uLL, v82, v82, 0, 1uLL, "/");
          }
          else
          {
            v53 = (unint64_t)&v138;
            if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v53 = v138.__r_.__value_.__r.__words[0];
            v83 = (_BYTE *)(v53 + size);
            if (v53 + size <= (unint64_t)"/" && v83 + 1 > "/")
            {
LABEL_241:
              __break(1u);
              goto LABEL_242;
            }
            *v83 = 47;
            v84 = size + 1;
            if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
              v138.__r_.__value_.__l.__size_ = v84;
            else
              *((_BYTE *)&v138.__r_.__value_.__s + 23) = v84 & 0x7F;
            *(_BYTE *)(v53 + v84) = 0;
          }
          v152 = v138;
          memset(&v138, 0, sizeof(v138));
          v85 = snprintf((char *)__src, 0x20uLL, "%d", HIDWORD(v160[1]));
          if (v85 < 0)
LABEL_277:
            abort();
          v86 = v85;
          if (v85 > 0x16)
          {
            v89 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v85 | 7) != 0x17)
              v89 = v85 | 7;
            v90 = v89 + 1;
            v87 = (void **)operator new(v89 + 1);
            v136 = v86;
            v137 = v90 | 0x8000000000000000;
            v135 = v87;
            v88 = (char *)v87 + v86;
            v53 = (void **)((char *)v87 + v86) > __src;
            if (v87 <= __src)
              goto LABEL_138;
          }
          else
          {
            HIBYTE(v137) = v85;
            v87 = &v135;
            v88 = (char *)&v135 + v86;
            v53 = (void **)((char *)&v135 + v86) > __src;
            if (&v135 > __src)
              goto LABEL_139;
LABEL_138:
            if ((_DWORD)v53)
              goto LABEL_241;
          }
LABEL_139:
          if ((_DWORD)v86)
            memcpy(v87, __src, v86);
          *v88 = 0;
          if (SHIBYTE(v137) < 0)
          {
            v92 = (char *)v135;
            v91 = v136;
            v53 = v136 == 0;
            if (!v135 && v136)
              goto LABEL_241;
          }
          else
          {
            v91 = HIBYTE(v137);
            LOBYTE(v53) = HIBYTE(v137) == 0;
            v92 = (char *)&v135;
          }
          if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = 22;
          else
            v93 = (v152.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v94 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
          else
            v94 = v152.__r_.__value_.__l.__size_;
          if (v93 - v94 >= v91)
          {
            if ((v53 & 1) == 0)
            {
              if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v95 = &v152;
              else
                v95 = (std::string *)v152.__r_.__value_.__r.__words[0];
              v96 = (char *)v95 + v94;
              if ((char *)v95 + v94 <= v92)
              {
                v53 = (unint64_t)&v96[v91];
                if (&v96[v91] > v92)
                  goto LABEL_241;
              }
              memmove(v96, v92, v91);
              v97 = v94 + v91;
              if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
                v152.__r_.__value_.__l.__size_ = v94 + v91;
              else
                *((_BYTE *)&v152.__r_.__value_.__s + 23) = v97 & 0x7F;
              v95->__r_.__value_.__s.__data_[v97] = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(&v152, v93, v94 + v91 - v93, v94, v94, 0, v91, v92);
          }
          v98 = *(_OWORD *)&v152.__r_.__value_.__l.__data_;
          v139[0] = v152.__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v139 + 3) = *(_DWORD *)((char *)&v152.__r_.__value_.__r.__words[2] + 3);
          v99 = SHIBYTE(v152.__r_.__value_.__r.__words[2]);
          memset(&v152, 0, sizeof(v152));
          if (SHIBYTE(v137) < 0 && (operator delete(v135), SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0))
          {
            operator delete(v152.__r_.__value_.__l.__data_);
            if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_169;
LABEL_166:
            *((_BYTE *)&v152.__r_.__value_.__s + 23) = 0;
            v152.__r_.__value_.__s.__data_[0] = 0;
            v133 = (void *)v98;
            if ((v99 & 0x80000000) == 0)
              goto LABEL_167;
LABEL_170:
            std::string::__init_copy_ctor_external(&__s, (const std::string::value_type *)v98, *((std::string::size_type *)&v98 + 1));
          }
          else
          {
            if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_166;
LABEL_169:
            operator delete(v138.__r_.__value_.__l.__data_);
            *((_BYTE *)&v152.__r_.__value_.__s + 23) = 0;
            v152.__r_.__value_.__s.__data_[0] = 0;
            v133 = (void *)v98;
            if (v99 < 0)
              goto LABEL_170;
LABEL_167:
            *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v98;
            LODWORD(__s.__r_.__value_.__r.__words[2]) = v139[0];
            *(_DWORD *)((char *)&__s.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v139 + 3);
            *((_BYTE *)&__s.__r_.__value_.__s + 23) = v99;
          }
          *(_OWORD *)&v138.__r_.__value_.__r.__words[1] = 0uLL;
          v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138.__r_.__value_.__l.__size_;
          v100 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)&v138, (uint64_t *)&v138.__r_.__value_.__l.__size_, (uint64_t **)&v135, &v149, (uint64_t)&v152);
          if (!*v100)
          {
            v101 = v100;
            v102 = (char *)operator new(0x50uLL);
            v103 = (std::string *)(v102 + 32);
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v103, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
              v104 = (std::string *)(v102 + 56);
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_176;
LABEL_174:
              *v104 = __s;
            }
            else
            {
              *(_OWORD *)&v103->__r_.__value_.__l.__data_ = *(_OWORD *)&v152.__r_.__value_.__l.__data_;
              *((_QWORD *)v102 + 6) = *((_QWORD *)&v152.__r_.__value_.__l + 2);
              v104 = (std::string *)(v102 + 56);
              if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_174;
LABEL_176:
              std::string::__init_copy_ctor_external(v104, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            v105 = v135;
            *(_QWORD *)v102 = 0;
            *((_QWORD *)v102 + 1) = 0;
            *((_QWORD *)v102 + 2) = v105;
            *v101 = v102;
            if (*(_QWORD *)v138.__r_.__value_.__l.__data_)
            {
              v138.__r_.__value_.__r.__words[0] = *(_QWORD *)v138.__r_.__value_.__l.__data_;
              v102 = (char *)*v101;
            }
            v106 = v138.__r_.__value_.__l.__size_;
            v107 = v102 == (char *)v138.__r_.__value_.__l.__size_;
            v102[24] = v102 == (char *)v138.__r_.__value_.__l.__size_;
            if (!v107)
            {
              do
              {
                v108 = *((_QWORD *)v102 + 2);
                if (*(_BYTE *)(v108 + 24))
                  break;
                v109 = *(_BYTE **)(v108 + 16);
                v110 = *(_QWORD *)v109;
                if (*(_QWORD *)v109 == v108)
                {
                  v113 = *((_QWORD *)v109 + 1);
                  if (!v113 || (v114 = *(unsigned __int8 *)(v113 + 24), v111 = (_BYTE *)(v113 + 24), v114))
                  {
                    if (*(char **)v108 == v102)
                    {
                      *(_BYTE *)(v108 + 24) = 1;
                      v109[24] = 0;
                      v117 = *(_QWORD *)(v108 + 8);
                      *(_QWORD *)v109 = v117;
                      if (v117)
                        goto LABEL_194;
                    }
                    else
                    {
                      v115 = *(uint64_t **)(v108 + 8);
                      v116 = *v115;
                      *(_QWORD *)(v108 + 8) = *v115;
                      if (v116)
                      {
                        *(_QWORD *)(v116 + 16) = v108;
                        v109 = *(_BYTE **)(v108 + 16);
                      }
                      v115[2] = (uint64_t)v109;
                      *(_QWORD *)(*(_QWORD *)(v108 + 16) + 8 * (**(_QWORD **)(v108 + 16) != v108)) = v115;
                      *v115 = v108;
                      *(_QWORD *)(v108 + 16) = v115;
                      v109 = (_BYTE *)v115[2];
                      v108 = *(_QWORD *)v109;
                      *((_BYTE *)v115 + 24) = 1;
                      v109[24] = 0;
                      v117 = *(_QWORD *)(v108 + 8);
                      *(_QWORD *)v109 = v117;
                      if (v117)
LABEL_194:
                        *(_QWORD *)(v117 + 16) = v109;
                    }
                    *(_QWORD *)(v108 + 16) = *((_QWORD *)v109 + 2);
                    *(_QWORD *)(*((_QWORD *)v109 + 2) + 8 * (**((_QWORD **)v109 + 2) != (_QWORD)v109)) = v108;
                    *(_QWORD *)(v108 + 8) = v109;
LABEL_200:
                    *((_QWORD *)v109 + 2) = v108;
                    break;
                  }
                }
                else if (!v110 || (v112 = *(unsigned __int8 *)(v110 + 24), v111 = (_BYTE *)(v110 + 24), v112))
                {
                  if (*(char **)v108 == v102)
                  {
                    v119 = *((_QWORD *)v102 + 1);
                    *(_QWORD *)v108 = v119;
                    if (v119)
                    {
                      *(_QWORD *)(v119 + 16) = v108;
                      v109 = *(_BYTE **)(v108 + 16);
                    }
                    *((_QWORD *)v102 + 2) = v109;
                    *(_QWORD *)(*(_QWORD *)(v108 + 16) + 8 * (**(_QWORD **)(v108 + 16) != v108)) = v102;
                    *((_QWORD *)v102 + 1) = v108;
                    *(_QWORD *)(v108 + 16) = v102;
                    v109 = (_BYTE *)*((_QWORD *)v102 + 2);
                    v102[24] = 1;
                    v109[24] = 0;
                    v108 = *((_QWORD *)v109 + 1);
                    v118 = *(char **)v108;
                    *((_QWORD *)v109 + 1) = *(_QWORD *)v108;
                    if (v118)
LABEL_198:
                      *((_QWORD *)v118 + 2) = v109;
                  }
                  else
                  {
                    *(_BYTE *)(v108 + 24) = 1;
                    v109[24] = 0;
                    v108 = *((_QWORD *)v109 + 1);
                    v118 = *(char **)v108;
                    *((_QWORD *)v109 + 1) = *(_QWORD *)v108;
                    if (v118)
                      goto LABEL_198;
                  }
                  *(_QWORD *)(v108 + 16) = *((_QWORD *)v109 + 2);
                  *(_QWORD *)(*((_QWORD *)v109 + 2) + 8 * (**((_QWORD **)v109 + 2) != (_QWORD)v109)) = v108;
                  *(_QWORD *)v108 = v109;
                  goto LABEL_200;
                }
                *(_BYTE *)(v108 + 24) = 1;
                v102 = v109;
                v109[24] = v109 == (_BYTE *)v106;
                *v111 = 1;
              }
              while (v109 != (_BYTE *)v106);
            }
            ++v138.__r_.__value_.__r.__words[2];
          }
          v155 = 3;
          v53 = v132;
          if (v132)
            goto LABEL_241;
          strcpy((char *)__src, "red");
          LODWORD(__p) = 48000;
          v157 = 2;
          v158 = v138;
          if (v138.__r_.__value_.__r.__words[2])
          {
            *(_QWORD *)(v138.__r_.__value_.__l.__size_ + 16) = &v158.__r_.__value_.__l.__size_;
            v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138.__r_.__value_.__l.__size_;
            *(_OWORD *)&v138.__r_.__value_.__r.__words[1] = 0uLL;
          }
          else
          {
            v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v158.__r_.__value_.__l.__size_;
          }
          cricket::WebRtcVoiceEngine::CollectCodecs(std::vector<webrtc::AudioCodecSpec> const&)const::$_0::operator()((const cricket::Codec *)v159, (cricket::PayloadTypeMapper *)v146, (webrtc::SdpAudioFormat *)__src, a1);
          if (v159[216])
            cricket::Codec::~Codec((cricket::Codec *)v159);
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v158, v158.__r_.__value_.__l.__size_);
          if (v155 < 0)
          {
            operator delete(__src[0]);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v138, v138.__r_.__value_.__l.__size_);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_215;
LABEL_210:
            if ((SHIBYTE(v152.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_211;
LABEL_216:
            operator delete(v152.__r_.__value_.__l.__data_);
            if (v99 < 0)
              goto LABEL_217;
LABEL_212:
            if (!v168)
              goto LABEL_51;
          }
          else
          {
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v138, v138.__r_.__value_.__l.__size_);
            if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_210;
LABEL_215:
            operator delete(__s.__r_.__value_.__l.__data_);
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_216;
LABEL_211:
            if ((v99 & 0x80000000) == 0)
              goto LABEL_212;
LABEL_217:
            operator delete(v133);
            if (!v168)
              goto LABEL_51;
          }
LABEL_103:
          cricket::Codec::~Codec((cricket::Codec *)v160);
          goto LABEL_51;
        }
      }
LABEL_102:
      if (v168)
        goto LABEL_103;
LABEL_51:
      v36 += 96;
    }
    while (v36 != v37);
  }
LABEL_225:
  v120 = v143;
  if (v143 != &v144)
  {
    if (v160 <= (uint64_t **)"CN" && (char *)v160 + 2 > "CN")
    {
      while (!*((_BYTE *)v120 + 32))
      {
        v124 = (std::string *)v120[1];
        if (v124)
        {
          do
          {
            v53 = (unint64_t)v124;
            v124 = (std::string *)v124->__r_.__value_.__r.__words[0];
          }
          while (v124);
        }
        else
        {
          do
          {
            v53 = (unint64_t)v120[2];
            v107 = *(_QWORD *)v53 == (_QWORD)v120;
            v120 = (uint64_t **)v53;
          }
          while (!v107);
        }
LABEL_242:
        v120 = (uint64_t **)v53;
        if ((uint64_t **)v53 == &v144)
          goto LABEL_250;
      }
      HIBYTE(v161) = 2;
      __break(1u);
      goto LABEL_279;
    }
    do
    {
      if (!*((_BYTE *)v120 + 32))
        goto LABEL_234;
      v121 = *((_DWORD *)v120 + 7);
      HIBYTE(v161) = 2;
      strcpy((char *)v160, "CN");
      LODWORD(v162) = v121;
      v165 = 0;
      v166 = 0;
      v163 = 1;
      v164 = &v165;
      cricket::WebRtcVoiceEngine::CollectCodecs(std::vector<webrtc::AudioCodecSpec> const&)const::$_0::operator()((const cricket::Codec *)v151, (cricket::PayloadTypeMapper *)v146, (webrtc::SdpAudioFormat *)v160, a1);
      if (v151[216])
        cricket::Codec::~Codec((cricket::Codec *)v151);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v164, v165);
      if (SHIBYTE(v161) < 0)
      {
        operator delete(v160[0]);
        v122 = v120[1];
        if (!v122)
        {
          do
          {
LABEL_238:
            v123 = (uint64_t **)v120[2];
            v107 = *v123 == (uint64_t *)v120;
            v120 = v123;
          }
          while (!v107);
          goto LABEL_229;
        }
      }
      else
      {
LABEL_234:
        v122 = v120[1];
        if (!v122)
          goto LABEL_238;
      }
      do
      {
        v123 = (uint64_t **)v122;
        v122 = (uint64_t *)*v122;
      }
      while (v122);
LABEL_229:
      v120 = v123;
    }
    while (v123 != &v144);
  }
LABEL_250:
  v125 = v140;
  if (v140 == &v141)
  {
LABEL_276:
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v141);
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v144);
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)v148, v148[1]);
    std::__tree<std::__value_type<webrtc::SdpAudioFormat,int>,std::__map_value_compare<webrtc::SdpAudioFormat,std::__value_type<webrtc::SdpAudioFormat,int>,cricket::PayloadTypeMapper::SdpAudioFormatOrdering,true>,std::allocator<std::__value_type<webrtc::SdpAudioFormat,int>>>::destroy((uint64_t)v147, v147[1]);
    return;
  }
  if (v160 > (uint64_t **)"telephone-event" || (char *)&v160[1] + 7 <= "telephone-event")
  {
    while (1)
    {
      if (!*((_BYTE *)v125 + 32))
        goto LABEL_261;
      v127 = *((_DWORD *)v125 + 7);
      HIBYTE(v161) = 15;
      strcpy((char *)v160, "telephone-event");
      LODWORD(v162) = v127;
      v165 = 0;
      v166 = 0;
      v163 = 1;
      v164 = &v165;
      cricket::WebRtcVoiceEngine::CollectCodecs(std::vector<webrtc::AudioCodecSpec> const&)const::$_0::operator()((const cricket::Codec *)v150, (cricket::PayloadTypeMapper *)v146, (webrtc::SdpAudioFormat *)v160, a1);
      if (v150[216])
        cricket::Codec::~Codec((cricket::Codec *)v150);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v164, v165);
      if (SHIBYTE(v161) < 0)
      {
        operator delete(v160[0]);
        v128 = v125[1];
        if (!v128)
        {
          do
          {
LABEL_265:
            v129 = (uint64_t **)v125[2];
            v107 = *v129 == (uint64_t *)v125;
            v125 = v129;
          }
          while (!v107);
          goto LABEL_256;
        }
      }
      else
      {
LABEL_261:
        v128 = v125[1];
        if (!v128)
          goto LABEL_265;
      }
      do
      {
        v129 = (uint64_t **)v128;
        v128 = (uint64_t *)*v128;
      }
      while (v128);
LABEL_256:
      v125 = v129;
      if (v129 == &v141)
        goto LABEL_276;
    }
  }
  while (!*((_BYTE *)v125 + 32))
  {
    v130 = v125[1];
    if (v130)
    {
      do
      {
        v131 = (uint64_t **)v130;
        v130 = (uint64_t *)*v130;
      }
      while (v130);
    }
    else
    {
      do
      {
        v131 = (uint64_t **)v125[2];
        v107 = *v131 == (uint64_t *)v125;
        v125 = v131;
      }
      while (!v107);
    }
    v125 = v131;
    if (v131 == &v141)
      goto LABEL_276;
  }
LABEL_279:
  HIBYTE(v161) = 15;
  __break(1u);
}

double cricket::`anonymous namespace'::ToString(std::string *this, const cricket::Codec *a2)
{
  std::string *v4;
  size_t size;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  std::string::size_type v12;
  unint64_t v13;
  unint64_t v14;
  std::string *v15;
  int v16;
  uint64_t v17;
  std::string::size_type v18;
  std::string *p_dst;
  _BYTE *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string *v23;
  std::string::size_type v24;
  int v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  _QWORD *v32;
  char *v33;
  std::string *v34;
  _WORD *v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string::size_type v38;
  char *v39;
  int v40;
  size_t v41;
  BOOL v42;
  std::string *v43;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string::size_type v47;
  std::string *v48;
  char *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string::size_type v52;
  const std::string::value_type *v53;
  int v54;
  std::string::size_type v55;
  BOOL v56;
  std::string *v57;
  _BYTE *v58;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string::size_type v61;
  char *v62;
  std::string *v63;
  char *v64;
  std::string::size_type v65;
  char *v66;
  std::string::size_type v67;
  std::string::size_type v68;
  std::string *v69;
  std::string::size_type v71;
  std::string::size_type v72;
  std::string::size_type v73;
  std::string *v74;
  _WORD *v75;
  std::string::size_type v76;
  std::string *v77;
  std::string::size_type v78;
  int v79;
  std::string::size_type v80;
  std::string *v81;
  _BYTE *v82;
  std::string::size_type v83;
  double result;
  cricket::_anonymous_namespace_ *v85;
  std::string __dst;

  memset(&__dst, 0, sizeof(__dst));
  v4 = (std::string *)((char *)a2 + 16);
  if (*((char *)a2 + 39) < 0)
  {
    size = *((_QWORD *)a2 + 3);
    if ((size & 0x8000000000000000) != 0)
      goto LABEL_213;
    v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
    v6 = size == 0;
    v7 = size && v4 == 0;
    if (v7)
      goto LABEL_213;
  }
  else
  {
    size = *((unsigned __int8 *)a2 + 39);
    v6 = *((_BYTE *)a2 + 39) == 0;
  }
  if (size <= 0x16)
  {
    if (v6)
    {
      size = 0;
      v13 = 0;
      LODWORD(v14) = 0;
    }
    else
    {
      v15 = (std::string *)((char *)&__dst + size);
      if (&__dst <= v4 && v15 > v4)
        goto LABEL_213;
      memmove(&__dst, v4, size);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        __dst.__r_.__value_.__l.__size_ = size;
      else
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size;
      v15->__r_.__value_.__s.__data_[0] = 0;
      LODWORD(v14) = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      v13 = __dst.__r_.__value_.__r.__words[2];
      size = __dst.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    if (size - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      goto LABEL_214;
    v8 = 44;
    if (size > 0x2C)
      v8 = size;
    v9 = (v8 | 7) + 1;
    v10 = (char *)operator new(v9);
    if (v10 <= (char *)v4 && &v10[size] > (char *)v4)
      goto LABEL_213;
    v12 = (std::string::size_type)v10;
    memcpy(v10, v4, size);
    v13 = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__l.__size_ = size;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = v12;
    *(_BYTE *)(v12 + size) = 0;
    v14 = (v9 | 0x8000000000000000) >> 56;
  }
  v16 = (char)v14;
  v17 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  v14 = v14;
  if ((v14 & 0x80u) == 0)
    v18 = 22;
  else
    v18 = v17;
  if ((v14 & 0x80u) != 0)
    v14 = size;
  if (v18 == v14)
  {
    std::string::__grow_by_and_replace(&__dst, v18, 1uLL, v18, v18, 0, 1uLL, "/");
  }
  else
  {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (v16 >= 0)
      p_dst = &__dst;
    v20 = (char *)p_dst + v14;
    if ((char *)p_dst + v14 <= "/" && v20 + 1 > "/")
      goto LABEL_213;
    *v20 = 47;
    v21 = v14 + 1;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      __dst.__r_.__value_.__l.__size_ = v21;
    else
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v21 & 0x7F;
    p_dst->__r_.__value_.__s.__data_[v21] = 0;
  }
  v22 = rtc::StringBuilder::operator<<(&__dst, *((_DWORD *)a2 + 10));
  v23 = v22;
  v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v25 = (char)v24;
  if ((v24 & 0x80u) == 0)
    v26 = 22;
  else
    v26 = (v22->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v24 & 0x80u) != 0)
    v24 = v22->__r_.__value_.__l.__size_;
  if (v26 == v24)
  {
    std::string::__grow_by_and_replace(v22, v26, 1uLL, v26, v26, 0, 1uLL, "/");
    rtc::StringBuilder::operator<<(v23, *((_QWORD *)a2 + 6));
    if (!*((_QWORD *)a2 + 23))
      goto LABEL_180;
  }
  else
  {
    if (v25 >= 0)
      v27 = v22;
    else
      v27 = (std::string *)v22->__r_.__value_.__r.__words[0];
    if ((char *)v27 + v24 <= "/" && (char *)&v27->__r_.__value_.__l.__data_ + v24 + 1 > "/")
      goto LABEL_213;
    v27->__r_.__value_.__s.__data_[v24] = 47;
    v29 = v24 + 1;
    if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0)
    {
      v22->__r_.__value_.__l.__size_ = v29;
      v27->__r_.__value_.__s.__data_[v29] = 0;
      rtc::StringBuilder::operator<<(v22, *((_QWORD *)a2 + 6));
      if (!*((_QWORD *)a2 + 23))
        goto LABEL_180;
    }
    else
    {
      *((_BYTE *)&v22->__r_.__value_.__s + 23) = v29 & 0x7F;
      v27->__r_.__value_.__s.__data_[v29] = 0;
      rtc::StringBuilder::operator<<(v22, *((_QWORD *)a2 + 6));
      if (!*((_QWORD *)a2 + 23))
        goto LABEL_180;
    }
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = 22;
  else
    v30 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v31 = __dst.__r_.__value_.__l.__size_;
  v85 = (cricket::_anonymous_namespace_ *)this;
  if (v30 - v31 < 2)
  {
    std::string::__grow_by_and_replace(&__dst, v30, v31 - v30 + 2, v31, v31, 0, 2uLL, " {");
    v32 = (_QWORD *)*((_QWORD *)a2 + 21);
    v33 = (char *)a2 + 176;
    if (v32 != (_QWORD *)((char *)a2 + 176))
      goto LABEL_78;
    goto LABEL_162;
  }
  v34 = &__dst;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v34 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v35 = (_WORD *)((char *)v34 + v31);
  if ((char *)v34 + v31 <= " {" && v35 + 1 > (_WORD *)" {")
    goto LABEL_213;
  *v35 = 31520;
  v36 = v31 + 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    __dst.__r_.__value_.__l.__size_ = v31 + 2;
    v34->__r_.__value_.__s.__data_[v36] = 0;
    v32 = (_QWORD *)*((_QWORD *)a2 + 21);
    v33 = (char *)a2 + 176;
    if (v32 == (_QWORD *)((char *)a2 + 176))
      goto LABEL_162;
    while (1)
    {
LABEL_78:
      v37 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = 22;
      else
        v38 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v37 = __dst.__r_.__value_.__l.__size_;
      if (v38 == v37)
      {
        std::string::__grow_by_and_replace(&__dst, v38, 1uLL, v38, v38, 0, 1uLL, " ");
        v39 = (char *)(v32 + 4);
        v40 = *((char *)v32 + 55);
        if ((v40 & 0x80000000) == 0)
          goto LABEL_85;
      }
      else
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = &__dst;
        else
          v43 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((char *)v43 + v37 <= " " && (char *)&v43->__r_.__value_.__l.__data_ + v37 + 1 > " ")
          goto LABEL_213;
        v43->__r_.__value_.__s.__data_[v37] = 32;
        v45 = v37 + 1;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          __dst.__r_.__value_.__l.__size_ = v45;
          v43->__r_.__value_.__s.__data_[v45] = 0;
          v39 = (char *)(v32 + 4);
          v40 = *((char *)v32 + 55);
          if ((v40 & 0x80000000) == 0)
          {
LABEL_85:
            v41 = v40;
            v42 = v40 == 0;
            goto LABEL_98;
          }
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v45 & 0x7F;
          v43->__r_.__value_.__s.__data_[v45] = 0;
          v39 = (char *)(v32 + 4);
          v40 = *((char *)v32 + 55);
          if ((v40 & 0x80000000) == 0)
            goto LABEL_85;
        }
      }
      v41 = v32[5];
      if ((v41 & 0x8000000000000000) != 0)
        goto LABEL_213;
      v39 = *(char **)v39;
      v42 = v41 == 0;
      if (v41)
      {
        if (!v39)
          goto LABEL_213;
      }
LABEL_98:
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = 22;
      else
        v46 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v47 = __dst.__r_.__value_.__l.__size_;
      if (v46 - v47 >= v41)
      {
        if (!v42)
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v48 = &__dst;
          else
            v48 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          v49 = (char *)v48 + v47;
          if ((char *)v48 + v47 <= v39 && &v49[v41] > v39)
            goto LABEL_213;
          memmove(v49, v39, v41);
          v50 = v47 + v41;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            __dst.__r_.__value_.__l.__size_ = v47 + v41;
          else
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v50 & 0x7F;
          v48->__r_.__value_.__s.__data_[v50] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&__dst, v46, v47 + v41 - v46, v47, v47, 0, v41, v39);
      }
      v51 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = 22;
      else
        v52 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v51 = __dst.__r_.__value_.__l.__size_;
      if (v52 == v51)
      {
        std::string::__grow_by_and_replace(&__dst, v52, 1uLL, v52, v52, 0, 1uLL, "=");
        v53 = (const std::string::value_type *)(v32 + 7);
        v54 = *((char *)v32 + 79);
        if ((v54 & 0x80000000) == 0)
          goto LABEL_125;
      }
      else
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v57 = &__dst;
        else
          v57 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v58 = (char *)v57 + v51;
        if ((char *)v57 + v51 <= "=" && v58 + 1 > "=")
          goto LABEL_213;
        *v58 = 61;
        v59 = v51 + 1;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          __dst.__r_.__value_.__l.__size_ = v59;
          v57->__r_.__value_.__s.__data_[v59] = 0;
          v53 = (const std::string::value_type *)(v32 + 7);
          v54 = *((char *)v32 + 79);
          if ((v54 & 0x80000000) == 0)
          {
LABEL_125:
            v55 = v54;
            v56 = v54 == 0;
            goto LABEL_136;
          }
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v59 & 0x7F;
          v57->__r_.__value_.__s.__data_[v59] = 0;
          v53 = (const std::string::value_type *)(v32 + 7);
          v54 = *((char *)v32 + 79);
          if ((v54 & 0x80000000) == 0)
            goto LABEL_125;
        }
      }
      v55 = v32[8];
      if ((v55 & 0x8000000000000000) != 0)
        goto LABEL_213;
      v53 = *(const std::string::value_type **)v53;
      v56 = v55 == 0;
      if (v55)
      {
        if (!v53)
          goto LABEL_213;
      }
LABEL_136:
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = 22;
      else
        v60 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v61 = __dst.__r_.__value_.__l.__size_;
      if (v60 - v61 < v55)
      {
        std::string::__grow_by_and_replace(&__dst, v60, v61 + v55 - v60, v61, v61, 0, v55, v53);
        v62 = (char *)v32[1];
        if (v62)
          goto LABEL_154;
        goto LABEL_159;
      }
      if (v56)
        goto LABEL_153;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &__dst;
      else
        v63 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      v64 = (char *)v63 + v61;
      if ((char *)v63 + v61 <= v53 && &v64[v55] > v53)
        goto LABEL_213;
      memmove(v64, v53, v55);
      v65 = v61 + v55;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v65 & 0x7F;
        v63->__r_.__value_.__s.__data_[v65] = 0;
LABEL_153:
        v62 = (char *)v32[1];
        if (v62)
          goto LABEL_154;
        goto LABEL_159;
      }
      __dst.__r_.__value_.__l.__size_ = v61 + v55;
      v63->__r_.__value_.__s.__data_[v65] = 0;
      v62 = (char *)v32[1];
      if (v62)
      {
        do
        {
LABEL_154:
          v66 = v62;
          v62 = *(char **)v62;
        }
        while (v62);
        goto LABEL_77;
      }
      do
      {
LABEL_159:
        v66 = (char *)v32[2];
        v7 = *(_QWORD *)v66 == (_QWORD)v32;
        v32 = v66;
      }
      while (!v7);
LABEL_77:
      v32 = v66;
      if (v66 == v33)
        goto LABEL_162;
    }
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36 & 0x7F;
  v34->__r_.__value_.__s.__data_[v36] = 0;
  v32 = (_QWORD *)*((_QWORD *)a2 + 21);
  v33 = (char *)a2 + 176;
  if (v32 != (_QWORD *)((char *)a2 + 176))
    goto LABEL_78;
LABEL_162:
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v67 = 22;
  else
    v67 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v68 = __dst.__r_.__value_.__l.__size_;
  if (v67 - v68 >= 2)
  {
    this = (std::string *)v85;
    v69 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v69 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((char *)v69 + v68 <= " }" && &v69->__r_.__value_.__s.__data_[v68 + 2] > " }")
      goto LABEL_213;
    *(_WORD *)((char *)&v69->__r_.__value_.__l.__data_ + v68) = 32032;
    v71 = v68 + 2;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      __dst.__r_.__value_.__l.__size_ = v68 + 2;
    else
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v71 & 0x7F;
    v69->__r_.__value_.__s.__data_[v71] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&__dst, v67, v68 - v67 + 2, v68, v68, 0, 2uLL, " }");
    this = (std::string *)v85;
  }
LABEL_180:
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v72 = 22;
  else
    v72 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v73 = __dst.__r_.__value_.__l.__size_;
  if (v72 - v73 < 2)
  {
    std::string::__grow_by_and_replace(&__dst, v72, v73 - v72 + 2, v73, v73, 0, 2uLL, " (");
    goto LABEL_196;
  }
  v74 = &__dst;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v74 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v75 = (_WORD *)((char *)v74 + v73);
  if ((char *)v74 + v73 <= " (" && v75 + 1 > (_WORD *)" (")
  {
LABEL_213:
    __break(1u);
LABEL_214:
    abort();
  }
  *v75 = 10272;
  v76 = v73 + 2;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    __dst.__r_.__value_.__l.__size_ = v73 + 2;
  else
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v76 & 0x7F;
  v74->__r_.__value_.__s.__data_[v76] = 0;
LABEL_196:
  v77 = rtc::StringBuilder::operator<<(&__dst, *((_DWORD *)a2 + 3));
  v78 = HIBYTE(v77->__r_.__value_.__r.__words[2]);
  v79 = (char)v78;
  if ((v78 & 0x80u) == 0)
    v80 = 22;
  else
    v80 = (v77->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v78 & 0x80u) != 0)
    v78 = v77->__r_.__value_.__l.__size_;
  if (v80 == v78)
  {
    std::string::__grow_by_and_replace(v77, v80, 1uLL, v80, v80, 0, 1uLL, ")");
    goto LABEL_212;
  }
  if (v79 >= 0)
    v81 = v77;
  else
    v81 = (std::string *)v77->__r_.__value_.__r.__words[0];
  v82 = (char *)v81 + v78;
  if ((char *)v81 + v78 <= ")" && v82 + 1 > ")")
    goto LABEL_213;
  *v82 = 41;
  v83 = v78 + 1;
  if (SHIBYTE(v77->__r_.__value_.__r.__words[2]) < 0)
    v77->__r_.__value_.__l.__size_ = v83;
  else
    *((_BYTE *)&v77->__r_.__value_.__s + 23) = v83 & 0x7F;
  v81->__r_.__value_.__s.__data_[v83] = 0;
LABEL_212:
  result = *(double *)&__dst.__r_.__value_.__l.__data_;
  *this = __dst;
  return result;
}

void cricket::WebRtcVoiceEngine::ApplyOptions(cricket::WebRtcVoiceEngine *this, const cricket::AudioOptions *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *__p[2];
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  int v73;
  char v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int16 v78;
  std::string v79;
  char v80;
  __int16 v81;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    cricket::AudioOptions::ToString(a2, (char *)__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    if (v68 < 0)
      operator delete(__p[0]);
  }
  v11 = *((_OWORD *)a2 + 1);
  v76 = *(_OWORD *)a2;
  v77 = v11;
  v78 = *((_WORD *)a2 + 16);
  v79.__r_.__value_.__s.__data_[0] = 0;
  v80 = 0;
  if (*((_BYTE *)a2 + 64))
  {
    if (*((char *)a2 + 63) < 0)
      std::string::__init_copy_ctor_external(&v79, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
    else
      v79 = *(std::string *)((char *)a2 + 40);
    v80 = 1;
  }
  v81 = *((_WORD *)a2 + 36);
  if (BYTE3(v76) && BYTE2(v76))
  {
    LOWORD(v76) = 257;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_15;
  }
  else
  {
    LOWORD(v76) = 256;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_15;
  }
  rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
LABEL_15:
  WORD2(v76) = 256;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  if (!*((_BYTE *)this + 160))
    goto LABEL_24;
  WORD2(v76) = 256;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  if (BYTE7(v76) && BYTE6(v76) || BYTE1(v76) && (_BYTE)v76)
  {
LABEL_24:
    if (!BYTE1(v76))
      goto LABEL_34;
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v42, v43, v44, v45, v46, v47, v48, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    WORD4(v76) = 256;
    if (!BYTE1(v76))
      goto LABEL_34;
  }
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 448))(*((_QWORD *)this + 4)))
  {
    if (!BYTE1(v76))
      goto LABEL_74;
    v33 = v76;
    v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 472))(*((_QWORD *)this + 4), v76);
    if (v33)
    {
      if (!v34)
      {
        LOWORD(v76) = 256;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
      }
    }
  }
LABEL_34:
  if (BYTE5(v76) && (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 456))(*((_QWORD *)this + 4)))
  {
    if (!BYTE5(v76))
      goto LABEL_74;
    if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 480))(*((_QWORD *)this + 4), BYTE4(v76)))
    {
      if (!BYTE5(v76))
        goto LABEL_74;
      if (BYTE4(v76))
      {
        WORD2(v76) = 256;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v60, v61, v62, v63, v64, v65, v66, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
      }
    }
  }
  if (BYTE7(v76) && (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 464))(*((_QWORD *)this + 4)))
  {
    if (BYTE7(v76))
    {
      v49 = BYTE6(v76);
      v50 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 488))(*((_QWORD *)this + 4), BYTE6(v76));
      if (v49)
      {
        if (!v50)
        {
          WORD3(v76) = 256;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v51, v52, v53, v54, v55, v56, v57, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
        }
      }
      goto LABEL_45;
    }
LABEL_74:
    __break(1u);
    return;
  }
LABEL_45:
  if (BYTE11(v76))
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 10) + 64))(*((_QWORD *)this + 10), BYTE10(v76));
  if ((_BYTE)v77)
  {
    if (SHIDWORD(v76) <= 20)
      v58 = 20;
    else
      v58 = HIDWORD(v76);
    *((_QWORD *)this + 18) = v58;
  }
  if (BYTE5(v77))
    *((_BYTE *)this + 152) = BYTE4(v77);
  if (BYTE12(v77))
    *((_DWORD *)this + 39) = DWORD2(v77);
  v59 = *((_QWORD *)this + 8);
  if (v59)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v59 + 264))(__p, v59);
    if (BYTE1(v76))
    {
      v70 = v76;
      v71 = 0;
    }
    if (BYTE5(v76))
    {
      v74 = BYTE4(v76);
      v75 = 2;
    }
    if (BYTE9(v76))
      v69 = BYTE8(v76);
    if (BYTE7(v76))
    {
      v72 = BYTE6(v76);
      v73 = 2;
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v59 + 48))(v59, __p);
  }
  if (v80)
  {
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
  }
}

uint64_t (***cricket::WebRtcVoiceEngine::GetAudioState@<X0>(cricket::WebRtcVoiceEngine *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 10);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

void cricket::WebRtcVoiceEngine::CreateSendChannel(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, const cricket::AudioOptions *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v14 = operator new();
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
  v16 = *a3;
  *(_BYTE *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = off_24C0B6A50;
  v17 = operator new();
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 0;
  *(_QWORD *)(v14 + 24) = v17;
  do
    v18 = __ldxr((unsigned int *)v17);
  while (__stxr(v18 + 1, (unsigned int *)v17));
  *(_QWORD *)(v14 + 32) = v15;
  *(_BYTE *)(v14 + 40) = v16;
  *(_QWORD *)(v14 + 48) = 0;
  *(_DWORD *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 64) = &unk_24C0C6498;
  *(_QWORD *)v14 = &off_24C0C6390;
  *(_QWORD *)(v14 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  v19 = operator new();
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  *(_QWORD *)(v14 + 80) = v19;
  do
    v20 = __ldxr((unsigned int *)v19);
  while (__stxr(v20 + 1, (unsigned int *)v19));
  *(_QWORD *)(v14 + 96) = a1;
  *(_QWORD *)(v14 + 104) = 0;
  *(_QWORD *)(v14 + 112) = 0;
  *(_QWORD *)(v14 + 120) = 0;
  *(_DWORD *)(v14 + 128) = 0;
  *(_BYTE *)(v14 + 152) = 0;
  *(_WORD *)(v14 + 156) = 0;
  *(_BYTE *)(v14 + 160) = 0;
  *(_BYTE *)(v14 + 164) = 0;
  *(_WORD *)(v14 + 168) = 0;
  *(_BYTE *)(v14 + 176) = 0;
  *(_BYTE *)(v14 + 200) = 0;
  *(_WORD *)(v14 + 208) = 0;
  *(_QWORD *)(v14 + 136) = 0;
  *(_QWORD *)(v14 + 141) = 0;
  *(_BYTE *)(v14 + 216) = 0;
  *(_BYTE *)(v14 + 220) = 0;
  *(_DWORD *)(v14 + 224) = -1;
  *(_WORD *)(v14 + 228) = 0;
  *(_QWORD *)(v14 + 232) = a2;
  *(_DWORD *)(v14 + 240) = *((_DWORD *)a3 + 5);
  *(_QWORD *)(v14 + 256) = 0;
  *(_QWORD *)(v14 + 264) = 0;
  *(_QWORD *)(v14 + 248) = v14 + 256;
  *(_BYTE *)(v14 + 424) = 0;
  *(_OWORD *)(v14 + 272) = 0u;
  *(_OWORD *)(v14 + 288) = 0u;
  *(_OWORD *)(v14 + 304) = 0u;
  *(_BYTE *)(v14 + 320) = 0;
  *(_QWORD *)(v14 + 432) = a6;
  *(_DWORD *)(v14 + 440) = *(_DWORD *)a5;
  *(_BYTE *)(v14 + 444) = *(_BYTE *)(a5 + 4);
  *(_QWORD *)(v14 + 448) = 0;
  *(_QWORD *)(v14 + 472) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(v14 + 480) = 0;
  *(_QWORD *)(v14 + 504) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(v14 + 512) = 0;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  cricket::WebRtcVoiceSendChannel::SetOptions((cricket::WebRtcVoiceSendChannel *)v14, a4);
  *a7 = v14 + 64;
}

void cricket::WebRtcVoiceEngine::CreateReceiveChannel(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, cricket::AudioOptions *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *__p[2];
  char v43;

  v14 = operator new();
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
  v16 = *a3;
  *(_QWORD *)v14 = &off_24C0B69D8;
  *(_BYTE *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = off_24C0B6A50;
  v17 = operator new();
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 0;
  *(_QWORD *)(v14 + 24) = v17;
  do
    v18 = __ldxr((unsigned int *)v17);
  while (__stxr(v18 + 1, (unsigned int *)v17));
  *(_QWORD *)(v14 + 32) = v15;
  *(_BYTE *)(v14 + 40) = v16;
  *(_QWORD *)(v14 + 48) = 0;
  *(_DWORD *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 64) = &unk_24C0C66A8;
  *(_QWORD *)v14 = &off_24C0C65A0;
  *(_QWORD *)(v14 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  v19 = operator new();
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  *(_QWORD *)(v14 + 80) = v19;
  do
    v20 = __ldxr((unsigned int *)v19);
  while (__stxr(v20 + 1, (unsigned int *)v19));
  *(_OWORD *)(v14 + 112) = 0u;
  *(_QWORD *)(v14 + 96) = a1;
  *(_QWORD *)(v14 + 104) = v14 + 112;
  *(_BYTE *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 172) = 0;
  *(_BYTE *)(v14 + 176) = 0;
  *(_BYTE *)(v14 + 180) = 0;
  *(_WORD *)(v14 + 184) = 0;
  *(_BYTE *)(v14 + 192) = 0;
  *(_BYTE *)(v14 + 216) = 0;
  *(_WORD *)(v14 + 224) = 0;
  *(_WORD *)(v14 + 232) = 0;
  *(_BYTE *)(v14 + 234) = 0;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  *(_QWORD *)(v14 + 157) = 0;
  *(_QWORD *)(v14 + 240) = a2;
  *(_DWORD *)(v14 + 248) = *((_DWORD *)a3 + 5);
  *(_OWORD *)(v14 + 256) = 0u;
  *(_OWORD *)(v14 + 272) = 0u;
  *(_OWORD *)(v14 + 288) = 0u;
  *(_OWORD *)(v14 + 304) = 0u;
  *(_OWORD *)(v14 + 320) = 0u;
  *(_OWORD *)(v14 + 336) = 0u;
  *(_OWORD *)(v14 + 352) = 0u;
  *(_OWORD *)(v14 + 368) = 0u;
  *(_OWORD *)(v14 + 384) = 0u;
  *(_OWORD *)(v14 + 400) = 0u;
  *(_QWORD *)(v14 + 416) = 0;
  *(_QWORD *)(v14 + 424) = 0x3FF0000000000000;
  *(_DWORD *)(v14 + 432) = 0;
  *(_QWORD *)(v14 + 440) = 0;
  *(_DWORD *)(v14 + 448) = -99091945;
  *(_OWORD *)(v14 + 456) = 0u;
  *(_OWORD *)(v14 + 488) = 0u;
  *(_QWORD *)(v14 + 472) = 0;
  *(_QWORD *)(v14 + 480) = v14 + 488;
  *(_BYTE *)(v14 + 552) = 0;
  *(_BYTE *)(v14 + 656) = 0;
  *(_OWORD *)(v14 + 504) = 0u;
  *(_OWORD *)(v14 + 520) = 0u;
  *(_OWORD *)(v14 + 534) = 0u;
  *(_QWORD *)(v14 + 664) = a6;
  *(_DWORD *)(v14 + 672) = *(_DWORD *)a5;
  *(_BYTE *)(v14 + 676) = *(_BYTE *)(a5 + 4);
  *(_OWORD *)(v14 + 680) = 0u;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    cricket::AudioOptions::ToString(a4, (char *)__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    if (v43 < 0)
      operator delete(__p[0]);
  }
  cricket::AudioOptions::SetAll((cricket::AudioOptions *)(v14 + 152), a4);
  cricket::WebRtcVoiceEngine::ApplyOptions(*(cricket::WebRtcVoiceEngine **)(v14 + 96), (const cricket::AudioOptions *)(v14 + 152));
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    cricket::AudioOptions::ToString((cricket::AudioOptions *)(v14 + 152), (char *)__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    if (v43 < 0)
      operator delete(__p[0]);
  }
  *a7 = v14 + 64;
}

uint64_t cricket::WebRtcVoiceEngine::send_codecs(cricket::WebRtcVoiceEngine *this)
{
  return (uint64_t)this + 88;
}

uint64_t cricket::WebRtcVoiceEngine::recv_codecs(cricket::WebRtcVoiceEngine *this)
{
  return (uint64_t)this + 112;
}

unint64_t cricket::WebRtcVoiceEngine::GetRtpHeaderExtensions@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  size_t v7;
  size_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v15;
  size_t v16;
  size_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  size_t v25;
  size_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  unint64_t result;
  int v35;
  int v36;
  int v37;
  char *__s[2];
  char *v39[2];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)__s = xmmword_24C0C6360;
  *(_OWORD *)v39 = *(_OWORD *)off_24C0C6370;
  v36 = 1;
  v37 = 2;
  v35 = 0;
  v3 = std::vector<webrtc::RtpHeaderExtensionCapability>::__emplace_back_slow_path<char const* const&,int,webrtc::RtpTransceiverDirection>((void **)a1, (const char **)__s, &v36, &v35);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  v35 = 0;
  v36 = 2;
  if (v3 >= v4)
  {
    v10 = std::vector<webrtc::RtpHeaderExtensionCapability>::__emplace_back_slow_path<char const* const&,int,webrtc::RtpTransceiverDirection>((void **)a1, (const char **)&__s[1], &v36, &v35);
  }
  else
  {
    v5 = v3;
    if (!v3)
      goto LABEL_55;
    v6 = __s[1];
    if (!__s[1])
      goto LABEL_55;
    v7 = strlen(__s[1]);
    if (v7 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_56;
    v8 = v7;
    if (v7 > 0x16)
    {
      v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v11 = v7 | 7;
      v12 = v11 + 1;
      v9 = (char *)operator new(v11 + 1);
      *(_QWORD *)(v5 + 8) = v8;
      *(_QWORD *)(v5 + 16) = v12 | 0x8000000000000000;
      *(_QWORD *)v5 = v9;
    }
    else
    {
      *(_BYTE *)(v5 + 23) = v7;
      v9 = (char *)v5;
    }
    v13 = &v9[v8];
    if (v9 <= v6 && v13 > v6)
      goto LABEL_55;
    if (v8)
      memmove(v9, v6, v8);
    *v13 = 0;
    *(_DWORD *)(v5 + 24) = 2;
    *(_BYTE *)(v5 + 28) = 1;
    *(_BYTE *)(v5 + 32) = 0;
    v10 = v5 + 40;
    *(_DWORD *)(v5 + 36) = 0;
  }
  *(_QWORD *)(a1 + 8) = v10;
  v36 = 3;
  v37 = 4;
  v35 = 0;
  if (v10 < *(_QWORD *)(a1 + 16))
  {
    if (!v10)
      goto LABEL_55;
    v15 = v39[0];
    if (!v39[0])
      goto LABEL_55;
    v16 = strlen(v39[0]);
    if (v16 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_56;
    v17 = v16;
    if (v16 > 0x16)
    {
      v22 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v22 = v16 | 7;
      v23 = v22 + 1;
      v18 = (char *)operator new(v22 + 1);
      *(_QWORD *)(v10 + 8) = v17;
      *(_QWORD *)(v10 + 16) = v23 | 0x8000000000000000;
      *(_QWORD *)v10 = v18;
      v19 = &v18[v17];
      if (v18 > v15)
        goto LABEL_30;
    }
    else
    {
      *(_BYTE *)(v10 + 23) = v16;
      v18 = (char *)v10;
      v19 = (char *)(v10 + v17);
      if (v10 > (unint64_t)v15)
      {
LABEL_30:
        if (v17)
          memmove(v18, v15, v17);
        *v19 = 0;
        *(_DWORD *)(v10 + 24) = 3;
        *(_BYTE *)(v10 + 28) = 1;
        *(_BYTE *)(v10 + 32) = 0;
        *(_DWORD *)(v10 + 36) = 0;
        v20 = v10 + 40;
        v21 = v37;
        goto LABEL_33;
      }
    }
    if (v19 > v15)
      goto LABEL_55;
    goto LABEL_30;
  }
  v20 = std::vector<webrtc::RtpHeaderExtensionCapability>::__emplace_back_slow_path<char const* const&,int,webrtc::RtpTransceiverDirection>((void **)a1, (const char **)v39, &v36, &v35);
  v21 = 4;
LABEL_33:
  *(_QWORD *)(a1 + 8) = v20;
  v36 = v21;
  v37 = v21 + 1;
  v35 = 0;
  if (v20 >= *(_QWORD *)(a1 + 16))
  {
    v29 = std::vector<webrtc::RtpHeaderExtensionCapability>::__emplace_back_slow_path<char const* const&,int,webrtc::RtpTransceiverDirection>((void **)a1, (const char **)&v39[1], &v36, &v35);
    goto LABEL_48;
  }
  if (!v20)
    goto LABEL_55;
  v24 = v39[1];
  if (!v39[1])
    goto LABEL_55;
  v25 = strlen(v39[1]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_56;
  v26 = v25;
  if (v25 > 0x16)
  {
    v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v30 = v25 | 7;
    v31 = v30 + 1;
    v27 = (char *)operator new(v30 + 1);
    *(_QWORD *)(v20 + 8) = v26;
    *(_QWORD *)(v20 + 16) = v31 | 0x8000000000000000;
    *(_QWORD *)v20 = v27;
    v28 = &v27[v26];
    if (v27 > v24)
      goto LABEL_45;
  }
  else
  {
    *(_BYTE *)(v20 + 23) = v25;
    v27 = (char *)v20;
    v28 = (char *)(v20 + v26);
    if (v20 > (unint64_t)v24)
      goto LABEL_45;
  }
  if (v28 > v24)
  {
LABEL_55:
    __break(1u);
LABEL_56:
    abort();
  }
LABEL_45:
  if (v26)
    memmove(v27, v24, v26);
  *v28 = 0;
  *(_DWORD *)(v20 + 24) = v21;
  *(_BYTE *)(v20 + 28) = 1;
  *(_BYTE *)(v20 + 32) = 0;
  v29 = v20 + 40;
  *(_DWORD *)(v20 + 36) = 0;
LABEL_48:
  *(_QWORD *)(a1 + 8) = v29;
  __s[0] = "http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time";
  v36 = 4;
  if (v29 >= *(_QWORD *)(a1 + 16))
  {
    result = std::vector<webrtc::RtpHeaderExtensionCapability>::__emplace_back_slow_path<char const* const&,int,webrtc::RtpTransceiverDirection>((void **)a1, (const char **)__s, &v37, &v36);
    goto LABEL_54;
  }
  if (!v29)
    goto LABEL_55;
  v32 = v37;
  v33 = (char *)operator new(0x40uLL);
  *(_QWORD *)v29 = v33;
  *(_OWORD *)(v29 + 8) = xmmword_208F0ABD0;
  if (v33 <= "http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time"
    && v33 + 61 > "http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time")
  {
    goto LABEL_55;
  }
  strcpy(v33, "http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time");
  *(_DWORD *)(v29 + 24) = v32;
  *(_BYTE *)(v29 + 28) = 1;
  *(_BYTE *)(v29 + 32) = 0;
  result = v29 + 40;
  *(_DWORD *)(v29 + 36) = 4;
LABEL_54:
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t cricket::WebRtcVoiceEngine::StartAecDump(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    v5 = *a2;
    *a2 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 224))(v4, v5, a3, *(_QWORD *)(a1 + 16));
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    return 0;
  }
}

uint64_t cricket::WebRtcVoiceEngine::GetAudioDeviceStats(cricket::WebRtcVoiceEngine *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 504))(*((_QWORD *)this + 4));
}

void cricket::WebRtcVoiceEngine::CollectCodecs(std::vector<webrtc::AudioCodecSpec> const&)const::$_0::operator()(const cricket::Codec *a1, cricket::PayloadTypeMapper *this, webrtc::SdpAudioFormat *a3, uint64_t a4)
{
  cricket::Codec *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  char v16;

  cricket::PayloadTypeMapper::ToAudioCodec(this, a3, (uint64_t)a1);
  if (*((_BYTE *)a1 + 216))
  {
    if (a4)
    {
      v7 = *(cricket::Codec **)(a4 + 8);
      if ((unint64_t)v7 >= *(_QWORD *)(a4 + 16))
      {
        *(_QWORD *)(a4 + 8) = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)a4, a1);
      }
      else if (v7)
      {
        *(_QWORD *)(a4 + 8) = (char *)cricket::Codec::Codec(v7, a1) + 216;
      }
      else
      {
        __break(1u);
      }
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::ToString(a3, (char *)&__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    if (v16 < 0)
      operator delete(__p);
  }
}

void cricket::WebRtcVoiceSendChannel::SetOptions(cricket::WebRtcVoiceSendChannel *this, const cricket::AudioOptions *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  cricket::AudioOptions *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  std::string *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type size;
  std::string *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string v35;
  char v36;
  void *__p[2];
  void (*v38)(uint64_t, void **, void **);
  uint64_t v39;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    cricket::AudioOptions::ToString(a2, (char *)__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    if (SHIBYTE(v38) < 0)
      operator delete(__p[0]);
  }
  v11 = (cricket::WebRtcVoiceSendChannel *)((char *)this + 136);
  cricket::AudioOptions::SetAll((cricket::WebRtcVoiceSendChannel *)((char *)this + 136), a2);
  cricket::WebRtcVoiceEngine::ApplyOptions(*((cricket::WebRtcVoiceEngine **)this + 12), (cricket::WebRtcVoiceSendChannel *)((char *)this + 136));
  if (!*((_BYTE *)this + 169) || !*((_BYTE *)this + 168) || !*((_BYTE *)this + 200))
  {
    v35.__r_.__value_.__s.__data_[0] = 0;
    v36 = 0;
    v12 = (char *)*((_QWORD *)this + 31);
    v13 = (char *)this + 256;
    if (v12 != (char *)this + 256)
      goto LABEL_13;
    goto LABEL_56;
  }
  v35.__r_.__value_.__s.__data_[0] = 0;
  v36 = 0;
  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    v35 = *(std::string *)((char *)this + 176);
    v36 = 1;
    v12 = (char *)*((_QWORD *)this + 31);
    v13 = (char *)this + 256;
    if (v12 != (char *)this + 256)
      goto LABEL_13;
    goto LABEL_56;
  }
  std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
  v36 = 1;
  v12 = (char *)*((_QWORD *)this + 31);
  v13 = (char *)this + 256;
  if (v12 != (char *)this + 256)
  {
    do
    {
LABEL_13:
      v14 = *((_QWORD *)v12 + 5);
      v15 = (std::string *)(v14 + 768);
      if (*(_BYTE *)(v14 + 792))
        v16 = v36 == 0;
      else
        v16 = 1;
      if (v16)
      {
        if ((*(_BYTE *)(v14 + 792) != 0) == (v36 != 0))
          goto LABEL_49;
      }
      else
      {
        v17 = *(unsigned __int8 *)(v14 + 791);
        if ((v17 & 0x80u) == 0)
          v18 = *(unsigned __int8 *)(v14 + 791);
        else
          v18 = *(_QWORD *)(v14 + 776);
        size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v35.__r_.__value_.__l.__size_;
        if (v18 == size)
        {
          if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &v35;
          else
            v20 = (std::string *)v35.__r_.__value_.__r.__words[0];
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp(v15->__r_.__value_.__l.__data_, v20, *(_QWORD *)(v14 + 776)))
              goto LABEL_49;
          }
          else
          {
            v21 = (unsigned __int8 *)(v14 + 768);
            if (!*(_BYTE *)(v14 + 791))
              goto LABEL_49;
            while (*v21 == v20->__r_.__value_.__s.__data_[0])
            {
              ++v21;
              v20 = (std::string *)((char *)v20 + 1);
              if (!--v17)
                goto LABEL_49;
            }
          }
        }
      }
      std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v14 + 768), &v35);
      if (*(_BYTE *)(v14 + 8))
        goto LABEL_38;
      v22 = *(_QWORD *)(v14 + 592);
      if (*(_QWORD *)(v14 + 600) == v22)
        goto LABEL_63;
      if (*(_BYTE *)(v22 + 153))
LABEL_38:
        v15 = (std::string *)(v14 + 40);
      std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v14 + 256), v15);
      *(_QWORD *)(v14 + 232) = 0x7D0000007D00;
      if (*(_BYTE *)(v14 + 392) && *(_BYTE *)(v14 + 384))
      {
        v23 = *(_DWORD *)(v14 + 380);
        *(_DWORD *)(v14 + 232) = v23;
        *(_DWORD *)(v14 + 236) = v23;
        v24 = *(_QWORD *)(v14 + 592);
        if (*(_QWORD *)(v14 + 600) == v24)
          goto LABEL_63;
      }
      else
      {
        v23 = 32000;
        v24 = *(_QWORD *)(v14 + 592);
        if (*(_QWORD *)(v14 + 600) == v24)
        {
LABEL_63:
          __break(1u);
          return;
        }
      }
      if (*(_BYTE *)(v24 + 153))
      {
        if (v23 >= *(_DWORD *)(v14 + 24))
          v23 = *(_DWORD *)(v14 + 24);
        *(_DWORD *)(v14 + 232) = v23;
      }
      v25 = *(_QWORD *)(v14 + 472);
      v38 = (void (*)(uint64_t, void **, void **))absl::internal_any_invocable::EmptyManager;
      v39 = 0;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v25 + 32))(v25, v14 + 104, __p);
      v38(1, __p, __p);
LABEL_49:
      v26 = (char *)*((_QWORD *)v12 + 1);
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = *(char **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (char *)*((_QWORD *)v12 + 2);
          v16 = *(_QWORD *)v27 == (_QWORD)v12;
          v12 = v27;
        }
        while (!v16);
      }
      v12 = v27;
    }
    while (v27 != v13);
  }
LABEL_56:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    cricket::AudioOptions::ToString(v11, (char *)__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    if (SHIBYTE(v38) < 0)
      operator delete(__p[0]);
  }
  if (v36)
  {
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void cricket::WebRtcVoiceSendChannel::~WebRtcVoiceSendChannel(cricket::WebRtcVoiceSendChannel *this)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void (**v11)(char *);
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  while (*((_QWORD *)this + 33))
    cricket::WebRtcVoiceSendChannel::RemoveSendStream(this, *(_DWORD *)(*((_QWORD *)this + 31) + 32));
  (*((void (**)(uint64_t, char *, char *))this + 63))(1, (char *)this + 488, (char *)this + 488);
  (*((void (**)(uint64_t, char *, char *))this + 59))(1, (char *)this + 456, (char *)this + 456);
  v2 = *((_QWORD *)this + 56);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((_BYTE *)this + 424)
    && (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 368, *((_QWORD *)this + 47)), *((char *)this + 351) < 0))
  {
    operator delete(*((void **)this + 41));
    if ((*((char *)this + 319) & 0x80000000) == 0)
    {
LABEL_8:
      v3 = (void **)*((_QWORD *)this + 34);
      if (!v3)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((*((char *)this + 319) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*((void **)this + 37));
  v3 = (void **)*((_QWORD *)this + 34);
  if (!v3)
  {
LABEL_9:
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 32));
    if (!*((_BYTE *)this + 200))
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_13:
  v4 = (void **)*((_QWORD *)this + 35);
  v5 = v3;
  if (v4 != v3)
  {
    do
    {
      if (*((char *)v4 - 9) < 0)
        operator delete(*(v4 - 4));
      v4 -= 4;
    }
    while (v4 != v3);
    v5 = (void **)*((_QWORD *)this + 34);
  }
  *((_QWORD *)this + 35) = v3;
  operator delete(v5);
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 32));
  if (!*((_BYTE *)this + 200))
  {
LABEL_21:
    v6 = (char *)*((_QWORD *)this + 13);
    if (!v6)
      goto LABEL_28;
    goto LABEL_22;
  }
LABEL_20:
  if ((*((char *)this + 199) & 0x80000000) == 0)
    goto LABEL_21;
  operator delete(*((void **)this + 22));
  v6 = (char *)*((_QWORD *)this + 13);
  if (!v6)
    goto LABEL_28;
LABEL_22:
  v7 = (char *)*((_QWORD *)this + 14);
  v8 = v6;
  if (v7 != v6)
  {
    v9 = v7 - 216;
    v10 = v7 - 216;
    do
    {
      v11 = *(void (***)(char *))v10;
      v10 -= 216;
      (*v11)(v9);
      v12 = v9 == v6;
      v9 = v10;
    }
    while (!v12);
    v8 = (char *)*((_QWORD *)this + 13);
  }
  *((_QWORD *)this + 14) = v6;
  operator delete(v8);
LABEL_28:
  v13 = *((_QWORD *)this + 10);
  *(_BYTE *)(v13 + 4) = 0;
  do
  {
    v14 = __ldaxr((unsigned int *)v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)v13));
  if (!v15)
    MEMORY[0x20BD0ADEC]();
  *(_QWORD *)this = &off_24C0B69D8;
  *((_QWORD *)this + 2) = off_24C0B6A50;
  v16 = (unsigned int *)*((_QWORD *)this + 3);
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      MEMORY[0x20BD0ADEC]();
  }
}

{
  cricket::WebRtcVoiceSendChannel::~WebRtcVoiceSendChannel(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::WebRtcVoiceSendChannel::RemoveSendStream(cricket::WebRtcVoiceSendChannel *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unsigned int v14;
  BOOL v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  BOOL v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  v11 = (char *)*((_QWORD *)this + 32);
  if (!v11)
    goto LABEL_14;
  v12 = (char *)this + 256;
  v13 = (char *)this + 256;
  do
  {
    v14 = *((_DWORD *)v11 + 8);
    v15 = v14 >= a2;
    if (v14 >= a2)
      v16 = (char **)v11;
    else
      v16 = (char **)(v11 + 8);
    if (v15)
      v13 = v11;
    v11 = *v16;
  }
  while (*v16);
  if (v13 != v12 && *((_DWORD *)v13 + 8) <= a2)
  {
    v25 = *((_QWORD *)v13 + 5);
    *(_BYTE *)(v25 + 488) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(v25 + 472) + 48))(*(_QWORD *)(v25 + 472));
    v26 = *((_QWORD *)v13 + 5);
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
    v27 = (char *)*((_QWORD *)v13 + 1);
    if (v27)
    {
      do
      {
        v28 = v27;
        v27 = *(char **)v27;
      }
      while (v27);
    }
    else
    {
      v29 = v13;
      do
      {
        v28 = (char *)*((_QWORD *)v29 + 2);
        v30 = *(_QWORD *)v28 == (_QWORD)v29;
        v29 = v28;
      }
      while (!v30);
    }
    if (*((char **)this + 31) == v13)
      *((_QWORD *)this + 31) = v28;
    v31 = (uint64_t *)*((_QWORD *)this + 32);
    --*((_QWORD *)this + 33);
    std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v31, (uint64_t *)v13);
    operator delete(v13);
    if (*((_QWORD *)this + 33) || !*((_BYTE *)this + 229))
    {
      return 1;
    }
    else
    {
      v32 = (char *)*((_QWORD *)this + 31);
      if (v32 != v12)
      {
        do
        {
          v33 = *((_QWORD *)v32 + 5);
          *(_BYTE *)(v33 + 488) = 0;
          (*(void (**)(_QWORD))(**(_QWORD **)(v33 + 472) + 48))(*(_QWORD *)(v33 + 472));
          v34 = (char *)*((_QWORD *)v32 + 1);
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = *(char **)v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (char *)*((_QWORD *)v32 + 2);
              v30 = *(_QWORD *)v35 == (_QWORD)v32;
              v32 = v35;
            }
            while (!v30);
          }
          v32 = v35;
        }
        while (v35 != v12);
      }
      *((_BYTE *)this + 229) = 0;
      return 1;
    }
  }
  else
  {
LABEL_14:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    return 0;
  }
}

void `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::~WebRtcVoiceSendChannel(cricket::WebRtcVoiceSendChannel *this)
{
  cricket::WebRtcVoiceSendChannel::~WebRtcVoiceSendChannel((cricket::WebRtcVoiceSendChannel *)((char *)this - 64));
}

{
  cricket::WebRtcVoiceSendChannel::~WebRtcVoiceSendChannel((cricket::WebRtcVoiceSendChannel *)((char *)this - 64));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::WebRtcVoiceSendChannel::SetSenderParameters(cricket::WebRtcVoiceSendChannel *this, const cricket::AudioSenderParameter *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const cricket::Codec *v13;
  const cricket::Codec *v14;
  char v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  cricket::WebRtcVoiceSendChannel *v22;
  uint64_t v23;
  uint64_t v24;
  cricket::WebRtcVoiceSendChannel *v25;
  cricket::WebRtcVoiceSendChannel *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v30;
  std::string::size_type v31;
  std::string::size_type v32;
  __int128 v33;
  std::string::size_type v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  std::string::size_type v42;
  cricket::WebRtcVoiceSendChannel *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  cricket::WebRtcVoiceSendChannel *v47;
  cricket::WebRtcVoiceSendChannel *v48;
  size_t v49;
  int v50;
  char **v51;
  std::string *v52;
  __int128 v53;
  char *v54;
  char *v55;
  const std::string::value_type *v56;
  uint64_t v57;
  const void **v58;
  uint64_t v59;
  int v60;
  size_t v61;
  const std::string::value_type *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  cricket::WebRtcVoiceSendChannel *v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  cricket::WebRtcVoiceSendChannel *v96;
  cricket::WebRtcVoiceSendChannel *v97;
  std::string::size_type v98;
  std::string::size_type size;
  void *v100;
  _BYTE v101[16];
  void (*v102)(uint64_t, _BYTE *, _BYTE *);
  uint64_t v103;
  _BYTE v104[8];
  void *v105;
  char v106;
  std::string v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE v110[216];
  char v111;
  std::string __p[9];
  char v113;
  _BYTE v114[16];
  void (*v115)(uint64_t, _BYTE *, _BYTE *);
  uint64_t v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0
    || (cricket::MediaChannelParameters::ToString(a2, __p),
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc"), (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    v113 = 0;
    if (*((_QWORD *)this + 33) == 1)
      goto LABEL_4;
LABEL_17:
    v110[0] = 0;
    v111 = 0;
    goto LABEL_33;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  v113 = 0;
  if (*((_QWORD *)this + 33) != 1)
    goto LABEL_17;
LABEL_4:
  webrtc::RtpParameters::RtpParameters(&v107, (const webrtc::RtpParameters *)(*(_QWORD *)(*((_QWORD *)this + 31) + 40) + 496));
  v11 = v108;
  v12 = v109;
  if (v109 == v108)
LABEL_192:
    __break(1u);
  if (!*(_BYTE *)(v108 + 264))
  {
LABEL_31:
    webrtc::RtpParameters::~RtpParameters((void **)&v107.__r_.__value_.__l.__data_);
    v110[0] = 0;
    v111 = 0;
    if (!v113)
      goto LABEL_33;
    goto LABEL_32;
  }
  v13 = (const cricket::Codec *)*((_QWORD *)a2 + 1);
  v14 = (const cricket::Codec *)*((_QWORD *)a2 + 2);
  if (v13 == v14)
  {
LABEL_19:
    while (v11 != v12)
    {
      if (*(_BYTE *)(v11 + 264))
      {
        *(_QWORD *)(v11 + 160) = off_24C0BCBF0;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11 + 240, *(_QWORD *)(v11 + 248));
        v16 = *(void **)(v11 + 216);
        if (v16)
        {
          *(_QWORD *)(v11 + 224) = v16;
          operator delete(v16);
        }
        if (*(char *)(v11 + 191) < 0)
          operator delete(*(void **)(v11 + 168));
        *(_BYTE *)(v11 + 264) = 0;
      }
      v11 += 272;
    }
    v17 = *(_QWORD *)(*((_QWORD *)this + 31) + 40);
    v102 = (void (*)(uint64_t, _BYTE *, _BYTE *))absl::internal_any_invocable::EmptyManager;
    v103 = 0;
    cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream::SetRtpParameters((uint64_t)v104, v17, &v107, (uint64_t)v101);
    if (v106 < 0)
      operator delete(v105);
    v102(1, v101, v101);
    goto LABEL_31;
  }
  do
  {
    cricket::Codec::Codec((cricket::Codec *)v114, v13);
    if (v109 == v108 || !*(_BYTE *)(v108 + 264))
      goto LABEL_192;
    v15 = cricket::Codec::MatchesRtpCodec((uint64_t)v114, v108 + 160);
    cricket::Codec::~Codec((cricket::Codec *)v114);
    if ((v15 & 1) != 0)
      goto LABEL_12;
    v13 = (const cricket::Codec *)((char *)v13 + 216);
  }
  while (v13 != v14);
  v13 = v14;
LABEL_12:
  if (v13 == *((const cricket::Codec **)a2 + 2))
  {
    v11 = v108;
    v12 = v109;
    goto LABEL_19;
  }
  if (v113)
  {
    cricket::Codec::operator=((uint64_t)__p, (uint64_t)v13);
    webrtc::RtpParameters::~RtpParameters((void **)&v107.__r_.__value_.__l.__data_);
    v110[0] = 0;
    v111 = 0;
    if (!v113)
      goto LABEL_33;
LABEL_32:
    cricket::Codec::Codec((cricket::Codec *)v110, (const cricket::Codec *)__p);
    v111 = 1;
    goto LABEL_33;
  }
  cricket::Codec::Codec((cricket::Codec *)__p, v13);
  v113 = 1;
  webrtc::RtpParameters::~RtpParameters((void **)&v107.__r_.__value_.__l.__data_);
  v110[0] = 0;
  v111 = 0;
  if (v113)
    goto LABEL_32;
LABEL_33:
  v18 = cricket::WebRtcVoiceSendChannel::SetSendCodecs((std::string::size_type)this, (const cricket::Codec **)a2 + 1, (cricket::Codec *)v110);
  if (v111)
    cricket::Codec::~Codec((cricket::Codec *)v110);
  if (!v18
    || ((v19 = *((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) != 0 ? (v20 = *((_QWORD *)a2 + 4)) : (v20 = 0),
        !cricket::ValidateRtpExtensions(v20, v19 >> 5)))
  {
    v28 = 0;
    goto LABEL_51;
  }
  v21 = *((unsigned __int8 *)a2 + 88);
  if (v21 != *((unsigned __int8 *)this + 8))
  {
    *((_BYTE *)this + 8) = v21;
    v22 = (cricket::WebRtcVoiceSendChannel *)*((_QWORD *)this + 31);
    if (v22 != (cricket::WebRtcVoiceSendChannel *)((char *)this + 256))
    {
      do
      {
        v23 = *((_QWORD *)v22 + 5);
        *(_BYTE *)(v23 + 160) = *((_BYTE *)a2 + 88);
        v24 = *(_QWORD *)(v23 + 472);
        v115 = (void (*)(uint64_t, _BYTE *, _BYTE *))absl::internal_any_invocable::EmptyManager;
        v116 = 0;
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v24 + 32))(v24, v23 + 104, v114);
        v115(1, v114, v114);
        v25 = (cricket::WebRtcVoiceSendChannel *)*((_QWORD *)v22 + 1);
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = *(cricket::WebRtcVoiceSendChannel **)v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (cricket::WebRtcVoiceSendChannel *)*((_QWORD *)v22 + 2);
            v27 = *(_QWORD *)v26 == (_QWORD)v22;
            v22 = v26;
          }
          while (!v27);
        }
        v22 = v26;
      }
      while (v26 != (cricket::WebRtcVoiceSendChannel *)((char *)this + 256));
    }
  }
  v30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 29) + 184))(*((_QWORD *)this + 29));
  cricket::FilterRtpExtensions((uint64_t *)a2 + 4, (unsigned int (*)(const std::string::value_type *, uint64_t))webrtc::RtpExtension::IsSupportedForAudio, 1, v30, (uint64_t)&v107);
  v32 = *((_QWORD *)this + 34);
  v31 = *((_QWORD *)this + 35);
  v33 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
  if (v31 - v32 == v107.__r_.__value_.__l.__size_ - v107.__r_.__value_.__r.__words[0])
  {
    if (v32 == v31)
      goto LABEL_90;
    v34 = v107.__r_.__value_.__r.__words[0];
    v35 = *((_QWORD *)this + 34);
    while (1)
    {
      v36 = *(unsigned __int8 *)(v35 + 23);
      if ((v36 & 0x80u) == 0)
        v37 = *(unsigned __int8 *)(v35 + 23);
      else
        v37 = *(_QWORD *)(v35 + 8);
      v38 = *(unsigned __int8 *)(v34 + 23);
      v39 = (char)v38;
      if ((v38 & 0x80u) != 0)
        v38 = *(_QWORD *)(v34 + 8);
      if (v37 != v38)
        break;
      if (v39 >= 0)
        v40 = (unsigned __int8 *)v34;
      else
        v40 = *(unsigned __int8 **)v34;
      if ((v36 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v35, v40, *(_QWORD *)(v35 + 8)))
          break;
      }
      else if (*(_BYTE *)(v35 + 23))
      {
        v41 = 0;
        while (*(unsigned __int8 *)(v35 + v41) == v40[v41])
        {
          if (v36 == ++v41)
            goto LABEL_73;
        }
        break;
      }
LABEL_73:
      if (*(_DWORD *)(v35 + 24) != *(_DWORD *)(v34 + 24)
        || *(unsigned __int8 *)(v35 + 28) != *(unsigned __int8 *)(v34 + 28))
      {
        break;
      }
      v35 += 32;
      v34 += 32;
      if (v35 == v31)
        goto LABEL_90;
    }
  }
  *((_OWORD *)this + 17) = v33;
  v107.__r_.__value_.__r.__words[0] = v32;
  v107.__r_.__value_.__l.__size_ = v31;
  v42 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = *((_QWORD *)&v107.__r_.__value_.__l + 2);
  v107.__r_.__value_.__r.__words[2] = v42;
  v43 = (cricket::WebRtcVoiceSendChannel *)*((_QWORD *)this + 31);
  if (v43 != (cricket::WebRtcVoiceSendChannel *)((char *)this + 256))
  {
    v44 = (char *)this + 272;
    do
    {
      v45 = *((_QWORD *)v43 + 5);
      if ((char *)(v45 + 168) != v44)
        std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(v45 + 168), *((_QWORD *)this + 34), *((_QWORD *)this + 35), (uint64_t)(*((_QWORD *)this + 35) - *((_QWORD *)this + 34)) >> 5);
      if ((char *)(v45 + 568) != v44)
        std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(v45 + 568), *((_QWORD *)this + 34), *((_QWORD *)this + 35), (uint64_t)(*((_QWORD *)this + 35) - *((_QWORD *)this + 34)) >> 5);
      v46 = *(_QWORD *)(v45 + 472);
      v115 = (void (*)(uint64_t, _BYTE *, _BYTE *))absl::internal_any_invocable::EmptyManager;
      v116 = 0;
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v46 + 32))(v46, v45 + 104, v114);
      v115(1, v114, v114);
      v47 = (cricket::WebRtcVoiceSendChannel *)*((_QWORD *)v43 + 1);
      if (v47)
      {
        do
        {
          v48 = v47;
          v47 = *(cricket::WebRtcVoiceSendChannel **)v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          v48 = (cricket::WebRtcVoiceSendChannel *)*((_QWORD *)v43 + 2);
          v27 = *(_QWORD *)v48 == (_QWORD)v43;
          v43 = v48;
        }
        while (!v27);
      }
      v43 = v48;
    }
    while (v48 != (cricket::WebRtcVoiceSendChannel *)((char *)this + 256));
  }
LABEL_90:
  v49 = *((unsigned __int8 *)a2 + 87);
  v50 = (char)v49;
  if ((v49 & 0x80u) != 0)
    v49 = *((_QWORD *)a2 + 9);
  if (!v49)
    goto LABEL_143;
  v51 = (char **)((char *)a2 + 64);
  v52 = (std::string *)((char *)this + 296);
  if ((char *)this + 296 == (char *)a2 + 64)
  {
LABEL_104:
    v54 = (char *)*((_QWORD *)this + 31);
    v55 = (char *)this + 256;
    if (v54 != (char *)this + 256)
      goto LABEL_107;
    goto LABEL_143;
  }
  if (*((char *)this + 319) < 0)
  {
    if (v50 >= 0)
      v56 = (char *)a2 + 64;
    else
      v56 = *v51;
    std::string::__assign_no_alias<false>(v52, v56, v49);
    goto LABEL_104;
  }
  if ((v50 & 0x80000000) == 0)
  {
    v53 = *(_OWORD *)v51;
    *((_QWORD *)this + 39) = *((_QWORD *)a2 + 10);
    *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
    v54 = (char *)*((_QWORD *)this + 31);
    v55 = (char *)this + 256;
    if (v54 != (char *)this + 256)
      goto LABEL_107;
    goto LABEL_143;
  }
  std::string::__assign_no_alias<true>(v52, *v51, *((_QWORD *)a2 + 9));
  v54 = (char *)*((_QWORD *)this + 31);
  v55 = (char *)this + 256;
  if (v54 != (char *)this + 256)
  {
    do
    {
LABEL_107:
      v57 = *((_QWORD *)v54 + 5);
      v58 = (const void **)(v57 + 136);
      if (*(char *)(v57 + 159) >= 0)
        v59 = *(unsigned __int8 *)(v57 + 159);
      else
        v59 = *(_QWORD *)(v57 + 144);
      v60 = *((char *)a2 + 87);
      if (v60 >= 0)
        v61 = *((unsigned __int8 *)a2 + 87);
      else
        v61 = *((_QWORD *)a2 + 9);
      if (v59 != v61)
        goto LABEL_123;
      if (v60 >= 0)
        v62 = (char *)a2 + 64;
      else
        v62 = *v51;
      if ((*(_BYTE *)(v57 + 159) & 0x80) != 0)
      {
        if (memcmp(*v58, v62, *(_QWORD *)(v57 + 144)))
        {
          if (v58 == (const void **)v51)
            goto LABEL_135;
LABEL_133:
          std::string::__assign_no_alias<false>((std::string *)(v57 + 136), v62, v61);
LABEL_135:
          v66 = *(_QWORD *)(v57 + 472);
          v115 = (void (*)(uint64_t, _BYTE *, _BYTE *))absl::internal_any_invocable::EmptyManager;
          v116 = 0;
          (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v66 + 32))(v66, v57 + 104, v114);
          v115(1, v114, v114);
        }
      }
      else if (*(_BYTE *)(v57 + 159))
      {
        v63 = (unsigned __int8 *)(v57 + 136);
        v64 = *(unsigned __int8 *)(v57 + 159);
        while (*v63 == *(unsigned __int8 *)v62)
        {
          ++v63;
          ++v62;
          if (!--v64)
            goto LABEL_136;
        }
LABEL_123:
        if (v58 != (const void **)v51)
        {
          if ((*(_BYTE *)(v57 + 159) & 0x80) == 0)
          {
            if (v60 < 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)(v57 + 136), *v51, *((_QWORD *)a2 + 9));
            }
            else
            {
              v65 = *(_OWORD *)v51;
              *(_QWORD *)(v57 + 152) = *((_QWORD *)a2 + 10);
              *(_OWORD *)v58 = v65;
            }
            goto LABEL_135;
          }
          if (v60 >= 0)
            v62 = (char *)a2 + 64;
          else
            v62 = *v51;
          goto LABEL_133;
        }
        goto LABEL_135;
      }
LABEL_136:
      v67 = (char *)*((_QWORD *)v54 + 1);
      if (v67)
      {
        do
        {
          v68 = v67;
          v67 = *(char **)v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          v68 = (char *)*((_QWORD *)v54 + 2);
          v27 = *(_QWORD *)v68 == (_QWORD)v54;
          v54 = v68;
        }
        while (!v27);
      }
      v54 = v68;
    }
    while (v68 != v55);
  }
LABEL_143:
  if (!*((_BYTE *)this + 424))
    goto LABEL_182;
  v69 = *((_DWORD *)a2 + 15);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v70, v71, v72, v73, v74, v75, v76, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  *((_DWORD *)this + 32) = v69;
  v77 = (cricket::WebRtcVoiceSendChannel *)*((_QWORD *)this + 31);
  if (v77 == (cricket::WebRtcVoiceSendChannel *)((char *)this + 256))
  {
LABEL_182:
    cricket::WebRtcVoiceSendChannel::SetOptions(this, (const cricket::AudioSenderParameter *)((char *)a2 + 96));
    v28 = 1;
    v98 = v107.__r_.__value_.__r.__words[0];
    if (!v107.__r_.__value_.__r.__words[0])
      goto LABEL_51;
    goto LABEL_183;
  }
  v78 = 1;
  do
  {
    v79 = *((_QWORD *)v77 + 5);
    v80 = *(_QWORD *)(v79 + 592);
    if (*(_QWORD *)(v79 + 600) == v80 || !*(_BYTE *)(v79 + 760))
      goto LABEL_192;
    v81 = *((_DWORD *)this + 32);
    v82 = *(_QWORD *)(v80 + 20);
    v83 = v81;
    if ((v82 & 0xFF00000000) != 0)
    {
      if (v82 >= v81)
        v84 = *((_DWORD *)this + 32);
      else
        v84 = v82;
      if ((int)v82 < 1)
        v84 = *((_DWORD *)this + 32);
      if (v81 >= 1)
        v83 = v84;
      else
        v83 = v82;
    }
    if (v83 <= 0)
      goto LABEL_166;
    v85 = *(_DWORD *)(v79 + 748);
    if (v83 < v85)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v86, v87, v88, v89, v90, v91, v92, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
      v78 = 0;
      goto LABEL_175;
    }
    v93 = *(_DWORD *)(v79 + 752);
    if (v85 == v93)
    {
LABEL_166:
      v94 = *(_DWORD *)(v79 + 744);
      *(_DWORD *)(v79 + 492) = v81;
      if (!*(_BYTE *)(v79 + 392))
        goto LABEL_192;
    }
    else
    {
      if (v93 >= v83)
        v94 = v83;
      else
        v94 = *(_DWORD *)(v79 + 752);
      *(_DWORD *)(v79 + 492) = v81;
      if (!*(_BYTE *)(v79 + 392))
        goto LABEL_192;
    }
    if (!*(_BYTE *)(v79 + 384) || *(_DWORD *)(v79 + 380) != v94)
    {
      *(_DWORD *)(v79 + 380) = v94;
      *(_BYTE *)(v79 + 384) = 1;
      v95 = *(_QWORD *)(v79 + 472);
      v115 = (void (*)(uint64_t, _BYTE *, _BYTE *))absl::internal_any_invocable::EmptyManager;
      v116 = 0;
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v95 + 32))(v95, v79 + 104, v114);
      v115(1, v114, v114);
    }
LABEL_175:
    v96 = (cricket::WebRtcVoiceSendChannel *)*((_QWORD *)v77 + 1);
    if (v96)
    {
      do
      {
        v97 = v96;
        v96 = *(cricket::WebRtcVoiceSendChannel **)v96;
      }
      while (v96);
    }
    else
    {
      do
      {
        v97 = (cricket::WebRtcVoiceSendChannel *)*((_QWORD *)v77 + 2);
        v27 = *(_QWORD *)v97 == (_QWORD)v77;
        v77 = v97;
      }
      while (!v27);
    }
    v77 = v97;
  }
  while (v97 != (cricket::WebRtcVoiceSendChannel *)((char *)this + 256));
  if ((v78 & 1) != 0)
    goto LABEL_182;
  v28 = 0;
  v98 = v107.__r_.__value_.__r.__words[0];
  if (v107.__r_.__value_.__r.__words[0])
  {
LABEL_183:
    size = v107.__r_.__value_.__l.__size_;
    v100 = (void *)v98;
    if (v107.__r_.__value_.__l.__size_ != v98)
    {
      do
      {
        if (*(char *)(size - 9) < 0)
          operator delete(*(void **)(size - 32));
        size -= 32;
      }
      while (size != v98);
      v100 = (void *)v107.__r_.__value_.__r.__words[0];
    }
    v107.__r_.__value_.__l.__size_ = v98;
    operator delete(v100);
  }
LABEL_51:
  if (v113)
    cricket::Codec::~Codec((cricket::Codec *)__p);
  return v28;
}

void cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream::SetRtpParameters(uint64_t a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string *v8;
  int v9;
  std::string::pointer data;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, int *);
  uint64_t v25;
  uint64_t v26;
  double v27;
  int v28;
  int v29;
  uint64_t v30;
  double v31;
  int v32;
  int v33;
  _BOOL4 v34;
  int v35;
  _BOOL4 v36;
  unint64_t v37;
  BOOL v38;
  int v39;
  int v40;
  unsigned int v41;
  void (*v42)(uint64_t, int *);
  int v43;
  void (*v44)(uint64_t, int *);
  uint64_t v45;
  std::string *v46;
  size_t v47;
  uint64_t v48;
  void (*v49)(_QWORD, _BYTE *, int *);
  uint64_t v50;
  const std::string::value_type *v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[16];
  __int128 v56;
  int v57;
  std::string v58;
  _DWORD v59[2];
  int v60;
  std::string v61;
  _DWORD v62[2];
  int v63;
  std::string __p[8];
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v8 = (std::string *)(a2 + 496);
  LOBYTE(v63) = 0;
  v65 = 0;
  cricket::CheckRtpParametersInvalidModificationAndValues((cricket::Codec *)&v63, a2 + 496, (unint64_t)a3, 0, 0, (uint64_t)&v60);
  if (v65)
    cricket::Codec::~Codec((cricket::Codec *)&v63);
  v9 = v60;
  if (v60)
  {
    v57 = v60;
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v58, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
      v9 = v57;
    }
    else
    {
      v58 = v61;
    }
    v59[0] = v62[0];
    *(_DWORD *)((char *)v59 + 3) = *(_DWORD *)((char *)v62 + 3);
    v24 = *(void (**)(uint64_t, int *))(a4 + 24);
    if (v24)
    {
      v63 = v9;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(__p, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
        v24 = *(void (**)(uint64_t, int *))(a4 + 24);
      }
      else
      {
        __p[0] = v58;
      }
      LODWORD(__p[1].__r_.__value_.__l.__data_) = v59[0];
      *(_DWORD *)((char *)__p[1].__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)v59 + 3);
      v24(a4, &v63);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(1, a4, a4);
      *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
      *(_QWORD *)(a4 + 24) = 0;
      v9 = v57;
    }
    *(_DWORD *)a1 = v9;
    *(std::string *)(a1 + 8) = v58;
    memset(&v58, 0, sizeof(v58));
    *(_DWORD *)(a1 + 32) = v59[0];
    *(_DWORD *)(a1 + 35) = *(_DWORD *)((char *)v59 + 3);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_33;
    return;
  }
  if (*(_BYTE *)(a2 + 760))
  {
    data = a3[4].__r_.__value_.__l.__data_;
    if ((std::string::pointer)a3[4].__r_.__value_.__l.__size_ == data)
      goto LABEL_107;
    v11 = *(_DWORD *)(a2 + 492);
    v12 = *(_QWORD *)(data + 20);
    if (v12 >= v11)
      v13 = *(_DWORD *)(a2 + 492);
    else
      v13 = v12;
    if ((int)v12 < 1)
      v13 = *(_DWORD *)(a2 + 492);
    if (v11 < 1)
      v13 = v12;
    if ((v12 & 0xFF00000000) != 0)
      v14 = v13;
    else
      v14 = *(_DWORD *)(a2 + 492);
    if (v14 <= 0)
      goto LABEL_54;
    v15 = *(_DWORD *)(a2 + 748);
    if (v14 < v15)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
      v42 = *(void (**)(uint64_t, int *))(a4 + 24);
      if (v42)
      {
        v63 = 10;
        __p[1].__r_.__value_.__s.__data_[6] = 0;
        memset(__p, 0, 29);
        v42(a4, &v63);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(1, a4, a4);
        *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
        *(_QWORD *)(a4 + 24) = 0;
      }
      *(_DWORD *)a1 = 10;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 36) = 0;
      *(_BYTE *)(a1 + 38) = 0;
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_33;
      return;
    }
    v39 = *(_DWORD *)(a2 + 752);
    if (v15 == v39)
    {
LABEL_54:
      v40 = *(_DWORD *)(a2 + 744);
      v41 = v40 & 0xFFFFFF00;
    }
    else
    {
      if (v39 >= v14)
        v40 = v14;
      else
        v40 = *(_DWORD *)(a2 + 752);
      v41 = v40 & 0xFFFFFF00;
    }
    v23 = v41 | v40 | 0x100000000;
  }
  else
  {
    v23 = 0;
  }
  v25 = *(_QWORD *)(a2 + 592);
  if (*(_QWORD *)(a2 + 600) == v25
    || (v26 = *(_QWORD *)(v25 + 20),
        v27 = *(double *)(v25 + 8),
        v28 = *(_DWORD *)(v25 + 16),
        v29 = *(unsigned __int8 *)(v25 + 153),
        webrtc::RtpParameters::operator=(v8, a3),
        v30 = *(_QWORD *)(a2 + 592),
        *(_QWORD *)(a2 + 600) == v30))
  {
LABEL_107:
    __break(1u);
  }
  v31 = *(double *)(v30 + 8);
  *(double *)(a2 + 240) = v31;
  v32 = *(_DWORD *)(v30 + 16);
  *(_BYTE *)(a2 + 248) = v32 != 1;
  v33 = *(unsigned __int8 *)(v30 + 24);
  v34 = (v26 & 0xFF00000000) != 0;
  v38 = v33 == 0;
  v35 = v34 ^ (v33 != 0);
  if (v38)
    v34 = 0;
  if (v34)
  {
    if (*(_DWORD *)(v30 + 20) != (_DWORD)v26)
    {
      v36 = 1;
      goto LABEL_63;
    }
  }
  else if ((v35 & 1) != 0)
  {
    v36 = 1;
    v37 = HIDWORD(v23);
    if (!HIDWORD(v23))
      goto LABEL_64;
    goto LABEL_70;
  }
  v38 = v31 == v27 && v32 == v28;
  if (v38)
  {
    v36 = *(unsigned __int8 *)(v30 + 153) != v29;
    if (!v34)
    {
LABEL_51:
      if (!v35)
      {
LABEL_64:
        if (v36)
          goto LABEL_65;
        goto LABEL_72;
      }
      goto LABEL_63;
    }
  }
  else
  {
    v36 = 1;
    if (!v34)
      goto LABEL_51;
  }
  if (*(_DWORD *)(v30 + 20) == (_DWORD)v26)
    goto LABEL_64;
LABEL_63:
  v37 = HIDWORD(v23);
  if (!HIDWORD(v23))
    goto LABEL_64;
LABEL_70:
  if (!*(_BYTE *)(a2 + 392))
    goto LABEL_107;
  *(_DWORD *)(a2 + 380) = v23;
  *(_BYTE *)(a2 + 384) = v37;
  if (v36)
  {
LABEL_65:
    if (*(_BYTE *)(a2 + 8) || *(_BYTE *)(v30 + 153))
    {
      std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a2 + 256), (std::string *)(a2 + 40));
      *(_QWORD *)(a2 + 232) = 0x7D0000007D00;
      if (!*(_BYTE *)(a2 + 392))
        goto LABEL_87;
    }
    else
    {
      std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a2 + 256), (std::string *)(a2 + 768));
      *(_QWORD *)(a2 + 232) = 0x7D0000007D00;
      if (!*(_BYTE *)(a2 + 392))
        goto LABEL_87;
    }
    if (*(_BYTE *)(a2 + 384))
    {
      v43 = *(_DWORD *)(a2 + 380);
      *(_DWORD *)(a2 + 232) = v43;
      *(_DWORD *)(a2 + 236) = v43;
      goto LABEL_88;
    }
LABEL_87:
    v43 = 32000;
LABEL_88:
    v48 = *(_QWORD *)(a2 + 592);
    if (*(_QWORD *)(a2 + 600) == v48)
      goto LABEL_107;
    if (*(_BYTE *)(v48 + 153))
    {
      if (v43 >= *(_DWORD *)(a2 + 24))
        v43 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 232) = v43;
    }
    (*(void (**)(_QWORD, uint64_t, _BYTE *))(a4 + 16))(0, a4, v55);
    v56 = *(_OWORD *)(a4 + 16);
    v49 = (void (*)(_QWORD, _BYTE *, int *))v56;
    *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a4 + 24) = 0;
    v50 = *(_QWORD *)(a2 + 472);
    v49(0, v55, &v63);
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = v56;
    v56 = (unint64_t)absl::internal_any_invocable::EmptyManager;
    (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v50 + 32))(v50, a2 + 104, &v63);
    ((void (*)(uint64_t, int *, int *))__p[0].__r_.__value_.__l.__size_)(1, &v63, &v63);
    ((void (*)(uint64_t, _BYTE *, _BYTE *))v56)(1, v55, v55);
    v45 = a2 + 192;
    v46 = (std::string *)(a2 + 624);
    v47 = *(unsigned __int8 *)(a2 + 215);
    if (*(char *)(a2 + 647) < 0)
      goto LABEL_94;
    goto LABEL_77;
  }
LABEL_72:
  v44 = *(void (**)(uint64_t, int *))(a4 + 24);
  if (v44)
  {
    v63 = 0;
    __p[1].__r_.__value_.__s.__data_[6] = 0;
    memset(__p, 0, 29);
    v44(a4, &v63);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(1, a4, a4);
    *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a4 + 24) = 0;
  }
  v45 = a2 + 192;
  v46 = (std::string *)(a2 + 624);
  v47 = *(unsigned __int8 *)(a2 + 215);
  if (*(char *)(a2 + 647) < 0)
  {
LABEL_94:
    if ((v47 & 0x80u) == 0)
      v51 = (const std::string::value_type *)v45;
    else
      v51 = *(const std::string::value_type **)(a2 + 192);
    if ((v47 & 0x80u) == 0)
      v52 = v47;
    else
      v52 = *(_QWORD *)(a2 + 200);
    std::string::__assign_no_alias<false>(v46, v51, v52);
    *(_BYTE *)(a2 + 648) = 0;
    if (!*(_BYTE *)(a2 + 488))
      goto LABEL_104;
    goto LABEL_101;
  }
LABEL_77:
  if ((v47 & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v46, *(char **)(a2 + 192), *(_QWORD *)(a2 + 200));
    *(_BYTE *)(a2 + 648) = 0;
    if (!*(_BYTE *)(a2 + 488))
      goto LABEL_104;
  }
  else
  {
    *(_OWORD *)&v46->__r_.__value_.__l.__data_ = *(_OWORD *)v45;
    v46->__r_.__value_.__r.__words[2] = *(_QWORD *)(v45 + 16);
    *(_BYTE *)(a2 + 648) = 0;
    if (!*(_BYTE *)(a2 + 488))
      goto LABEL_104;
  }
LABEL_101:
  v53 = *(_QWORD *)(a2 + 592);
  if (*(_QWORD *)(a2 + 600) == v53)
    goto LABEL_107;
  if (*(_BYTE *)(v53 + 124))
  {
    v54 = 5;
    goto LABEL_105;
  }
LABEL_104:
  v54 = 6;
LABEL_105:
  (*(void (**)(void))(**(_QWORD **)(a2 + 472) + 8 * v54))();
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 38) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 29) = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
LABEL_33:
    operator delete(v61.__r_.__value_.__l.__data_);
}

uint64_t cricket::WebRtcVoiceSendChannel::SetSendCodecs(std::string::size_type a1, const cricket::Codec **a2, cricket::Codec *a3)
{
  const cricket::Codec *v4;
  const cricket::Codec *v5;
  const cricket::Codec *v6;
  cricket::Codec *v7;
  std::string::size_type v8;
  unsigned int v9;
  unsigned __int8 v10;
  unint64_t v11;
  unsigned __int8 v12;
  unsigned int v13;
  char v14;
  int v15;
  int v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char v27;
  int v28;
  char v29;
  int v30;
  char v31;
  int v32;
  char v33;
  int v34;
  char v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  const cricket::Codec **v64;
  const cricket::Codec *v65;
  const cricket::Codec *v66;
  int v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  _BYTE *v86;
  int v87;
  size_t v88;
  unsigned __int8 *v89;
  size_t v90;
  int v92;
  int v93;
  unsigned __int8 *v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  unsigned __int8 *v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  cricket::Codec *v123;
  cricket::Codec *v124;
  cricket::Codec *v125;
  cricket::Codec *v126;
  void (**v127)(cricket::Codec *);
  std::string::size_type size;
  int v129;
  const cricket::Codec *v130;
  int v131;
  BOOL HasTransportCc;
  const cricket::Codec *v133;
  BOOL HasNack;
  const cricket::Codec *v135;
  BOOL HasRrtr;
  const cricket::Codec *v137;
  uint64_t v138;
  int v139;
  const cricket::Codec **v140;
  const cricket::Codec *v141;
  unsigned __int8 v142;
  unsigned __int8 v143;
  _QWORD *v144;
  const cricket::Codec *v145;
  unsigned __int8 *v146;
  uint64_t v147;
  int v149;
  int v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  cricket::Codec *v159;
  unint64_t v160;
  uint64_t v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  const cricket::Codec *v164;
  unsigned __int8 *v165;
  uint64_t v166;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  char v175;
  uint64_t *v176;
  std::string *p_str;
  uint64_t v178;
  _QWORD *v179;
  size_t v180;
  size_t v181;
  int v182;
  _QWORD *v183;
  unint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  _BOOL4 v195;
  size_t v197;
  int v198;
  size_t v199;
  void **v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE *v203;
  char v205;
  void **v206;
  size_t v207;
  BOOL v208;
  int v209;
  int v210;
  _QWORD *v211;
  cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream *v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  uint64_t v216;
  void (*v217)(std::string::size_type);
  char v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  unsigned __int8 v227;
  unsigned __int8 v228;
  unsigned int v229;
  const cricket::Codec **v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  unsigned __int8 v238;
  int v239;
  int v240;
  int v241;
  int v242;
  unsigned __int8 v243;
  unsigned __int8 v244;
  int v245;
  int v246;
  int v247;
  int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned __int8 v251;
  unsigned __int8 v252;
  unsigned __int8 v253;
  unsigned __int8 v254;
  unsigned __int8 v255;
  unsigned int v256;
  unsigned __int8 v257;
  unsigned int v258;
  unsigned __int8 v259;
  unsigned __int8 v260;
  unsigned __int8 v261;
  int v262;
  int v263;
  int v264;
  int v265;
  unsigned int v266;
  unsigned __int8 v267;
  unsigned __int8 v268;
  int v269;
  int v270;
  unsigned int v271;
  unsigned __int8 v272;
  unsigned __int8 v273;
  unsigned __int8 v274;
  int v275;
  int v276;
  unsigned int v277;
  unsigned __int8 v278;
  unsigned __int8 v279;
  unsigned __int8 v280;
  unsigned __int8 v281;
  unsigned __int8 v282;
  unsigned int v283;
  int v284;
  std::string *v285;
  int v286;
  uint64_t *v287;
  unsigned __int8 v288;
  unsigned __int8 v289;
  unsigned int v290;
  unsigned __int8 v292;
  unsigned __int8 v293;
  void *v294;
  _BYTE *v295;
  char v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  std::string __p;
  int v302;
  uint64_t v303;
  _BYTE v304[25];
  unsigned __int8 v305;
  cricket::Codec *v306;
  cricket::Codec *v307;
  unint64_t v308;
  void **v309;
  size_t v310;
  unint64_t v311;
  std::string __str;
  uint64_t v313;
  char v314;
  _OWORD v315[2];
  uint64_t v316;

  v316 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 220))
    *(_BYTE *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 224) = -1;
  v5 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
  {
    v306 = 0;
    v307 = 0;
    v308 = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_288;
  }
  v6 = *a2;
  do
  {
    if (*((_DWORD *)v6 + 3) >= 0x80u)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      {
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      return 0;
    }
    v6 = (const cricket::Codec *)((char *)v6 + 216);
  }
  while (v6 != v4);
  v7 = 0;
  v306 = 0;
  v307 = 0;
  v308 = 0;
  v8 = cricket::kDtmfCodecName[0];
  v9 = cricket::kDtmfCodecName[0] - 65;
  if (v9 >= 0x1A)
    v10 = cricket::kDtmfCodecName[0];
  else
    v10 = cricket::kDtmfCodecName[0] + 32;
  v11 = cricket::kDtmfCodecName[1] - 65;
  if (v11 >= 0x1A)
    v12 = cricket::kDtmfCodecName[1];
  else
    v12 = cricket::kDtmfCodecName[1] + 32;
  v13 = cricket::kDtmfCodecName[2] - 65;
  v14 = cricket::kDtmfCodecName[2] + 32;
  if (v13 >= 0x1A)
    v14 = cricket::kDtmfCodecName[2];
  v292 = v14;
  v277 = cricket::kDtmfCodecName[3] - 65;
  if (v277 >= 0x1A)
    v15 = cricket::kDtmfCodecName[3];
  else
    v15 = cricket::kDtmfCodecName[3] + 32;
  v16 = cricket::kDtmfCodecName[4];
  v17 = cricket::kDtmfCodecName[4] + 32;
  v271 = cricket::kDtmfCodecName[4] - 65;
  if (v271 >= 0x1A)
    v17 = cricket::kDtmfCodecName[4];
  v288 = v17;
  v290 = v15;
  v18 = cricket::kDtmfCodecName[5];
  v266 = cricket::kDtmfCodecName[5] - 65;
  if (v266 >= 0x1A)
    v19 = cricket::kDtmfCodecName[5];
  else
    v19 = cricket::kDtmfCodecName[5] + 32;
  v20 = cricket::kDtmfCodecName[6];
  v21 = cricket::kDtmfCodecName[6] + 32;
  v258 = cricket::kDtmfCodecName[6] - 65;
  if (v258 >= 0x1A)
    v21 = cricket::kDtmfCodecName[6];
  v286 = v21;
  LODWORD(v287) = v19;
  v22 = cricket::kDtmfCodecName[7];
  v256 = cricket::kDtmfCodecName[7] - 65;
  if (v256 >= 0x1A)
    v23 = cricket::kDtmfCodecName[7];
  else
    v23 = cricket::kDtmfCodecName[7] + 32;
  v24 = cricket::kDtmfCodecName[8];
  v25 = cricket::kDtmfCodecName[8] + 32;
  if (cricket::kDtmfCodecName[8] - 65 >= 0x1A)
    v25 = cricket::kDtmfCodecName[8];
  v284 = v25;
  LODWORD(v285) = v23;
  v26 = cricket::kDtmfCodecName[9];
  if (cricket::kDtmfCodecName[9] - 65 >= 0x1A)
    v27 = cricket::kDtmfCodecName[9];
  else
    v27 = cricket::kDtmfCodecName[9] + 32;
  v28 = cricket::kDtmfCodecName[10];
  v29 = cricket::kDtmfCodecName[10] + 32;
  if (cricket::kDtmfCodecName[10] - 65 >= 0x1A)
    v29 = cricket::kDtmfCodecName[10];
  v279 = v29;
  v281 = v27;
  v30 = cricket::kDtmfCodecName[11];
  v31 = cricket::kDtmfCodecName[11] + 32;
  if (cricket::kDtmfCodecName[11] - 65 >= 0x1A)
    v31 = cricket::kDtmfCodecName[11];
  v273 = v31;
  v32 = cricket::kDtmfCodecName[12];
  v33 = cricket::kDtmfCodecName[12] + 32;
  if (cricket::kDtmfCodecName[12] - 65 >= 0x1A)
    v33 = cricket::kDtmfCodecName[12];
  v267 = v33;
  v34 = cricket::kDtmfCodecName[13];
  v250 = cricket::kDtmfCodecName[13] - 65;
  v35 = cricket::kDtmfCodecName[13] + 32;
  if (v250 >= 0x1A)
    v35 = cricket::kDtmfCodecName[13];
  v260 = v35;
  v36 = cricket::kDtmfCodecName[14];
  v249 = cricket::kDtmfCodecName[14] - 65;
  v37 = cricket::kDtmfCodecName[14] + 32;
  if (v249 >= 0x1A)
    v37 = cricket::kDtmfCodecName[14];
  v243 = v37;
  do
  {
    v46 = (unsigned __int8 *)v5 + 16;
    if (*((char *)v5 + 39) < 0)
    {
      v47 = *((_QWORD *)v5 + 3);
      if (v47 < 0)
        goto LABEL_479;
      v46 = *(unsigned __int8 **)v46;
      v48 = v47 && v46 == 0;
      if (v48)
        goto LABEL_479;
    }
    else
    {
      v47 = *((unsigned __int8 *)v5 + 39);
    }
    if (v47 == 15)
    {
      v49 = *v46;
      if (v49 == cricket::kDtmfCodecName[0])
        goto LABEL_64;
      if ((v49 - 65) < 0x1A)
        LOBYTE(v49) = v49 + 32;
      if (v49 == v10)
      {
LABEL_64:
        v50 = v46[1];
        if (v50 == cricket::kDtmfCodecName[1])
          goto LABEL_119;
        if ((v50 - 65) < 0x1A)
          LOBYTE(v50) = v50 + 32;
        if (v50 == v12)
        {
LABEL_119:
          v51 = v46[2];
          if (v51 == cricket::kDtmfCodecName[2])
            goto LABEL_485;
          if ((v51 - 65) < 0x1A)
            LOBYTE(v51) = v51 + 32;
          if (v51 == v292)
          {
LABEL_485:
            v52 = v46[3];
            if (v52 == cricket::kDtmfCodecName[3])
              goto LABEL_486;
            if ((v52 - 65) < 0x1A)
              LOBYTE(v52) = v52 + 32;
            if (v52 == v290)
            {
LABEL_486:
              v53 = v46[4];
              if (v53 == v16)
                goto LABEL_487;
              if ((v53 - 65) < 0x1A)
                LOBYTE(v53) = v53 + 32;
              if (v53 == v288)
              {
LABEL_487:
                v54 = v46[5];
                if (v54 == v18)
                  goto LABEL_488;
                if ((v54 - 65) < 0x1A)
                  LOBYTE(v54) = v54 + 32;
                if (v54 == v287)
                {
LABEL_488:
                  v55 = v46[6];
                  if (v55 == v20)
                    goto LABEL_489;
                  if ((v55 - 65) < 0x1A)
                    LOBYTE(v55) = v55 + 32;
                  if (v55 == v286)
                  {
LABEL_489:
                    v56 = v46[7];
                    if (v56 == v22)
                      goto LABEL_490;
                    if ((v56 - 65) < 0x1A)
                      LOBYTE(v56) = v56 + 32;
                    if (v56 == v285)
                    {
LABEL_490:
                      v57 = v46[8];
                      if (v57 == v24)
                        goto LABEL_491;
                      if ((v57 - 65) < 0x1A)
                        LOBYTE(v57) = v57 + 32;
                      if (v57 == v284)
                      {
LABEL_491:
                        v58 = v46[9];
                        if (v58 == v26)
                          goto LABEL_492;
                        if ((v58 - 65) < 0x1A)
                          LOBYTE(v58) = v58 + 32;
                        if (v58 == v281)
                        {
LABEL_492:
                          v59 = v46[10];
                          if (v59 == v28)
                            goto LABEL_493;
                          if ((v59 - 65) < 0x1A)
                            LOBYTE(v59) = v59 + 32;
                          if (v59 == v279)
                          {
LABEL_493:
                            v60 = v46[11];
                            if (v60 == v30)
                              goto LABEL_494;
                            if ((v60 - 65) < 0x1A)
                              LOBYTE(v60) = v60 + 32;
                            if (v60 == v273)
                            {
LABEL_494:
                              v61 = v46[12];
                              if (v61 == v32)
                                goto LABEL_495;
                              if ((v61 - 65) < 0x1A)
                                LOBYTE(v61) = v61 + 32;
                              if (v61 == v267)
                              {
LABEL_495:
                                v62 = v46[13];
                                if (v62 == v34)
                                  goto LABEL_496;
                                if ((v62 - 65) < 0x1A)
                                  LOBYTE(v62) = v62 + 32;
                                if (v62 == v260)
                                {
LABEL_496:
                                  v63 = v46[14];
                                  if (v63 == v36)
                                    goto LABEL_120;
                                  if ((v63 - 65) < 0x1A)
                                    LOBYTE(v63) = v63 + 32;
                                  if (v63 == v243)
                                  {
LABEL_120:
                                    v231 = v36;
                                    v233 = v34;
                                    v235 = v32;
                                    v237 = v9;
                                    v239 = v30;
                                    v241 = v28;
                                    v275 = v16;
                                    v269 = v18;
                                    v262 = v22;
                                    v264 = v20;
                                    v245 = v26;
                                    v247 = v24;
                                    v229 = v11;
                                    if ((unint64_t)v7 >= v308)
                                    {
                                      v64 = a2;
                                      v7 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>(&v306, v5);
                                    }
                                    else
                                    {
                                      if (!v7)
                                        goto LABEL_479;
                                      v64 = a2;
                                      v7 = (cricket::Codec *)((char *)cricket::Codec::Codec(v7, v5) + 216);
                                    }
                                    v307 = v7;
                                    a2 = v64;
                                    v16 = v275;
                                    v18 = v269;
                                    v22 = v262;
                                    v20 = v264;
                                    v26 = v245;
                                    v24 = v247;
                                    v28 = v241;
                                    v9 = v237;
                                    v11 = v229;
                                    if (!*(_BYTE *)(a1 + 220) || *((_DWORD *)v5 + 10) < *(_DWORD *)(a1 + 224))
                                    {
                                      *(_DWORD *)(a1 + 216) = *((_DWORD *)v5 + 3);
                                      *(_BYTE *)(a1 + 220) = 1;
                                      *(_DWORD *)(a1 + 224) = *((_DWORD *)v5 + 10);
                                    }
                                    v30 = v239;
                                    v34 = v233;
                                    v32 = v235;
                                    v36 = v231;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v5 = (const cricket::Codec *)((char *)v5 + 216);
  }
  while (v5 != v4);
  v65 = *a2;
  v66 = a2[1];
  __p.__r_.__value_.__s.__data_[0] = 0;
  v305 = 0;
  v299 = 0x493E000000000;
  v300 = -1;
  if (v65 == v66)
    goto LABEL_288;
  v230 = a2;
  v4 = 0;
  v287 = &v297;
  v67 = cricket::kCnCodecName[0] + 32;
  if (cricket::kCnCodecName[0] - 65 >= 0x1A)
    v67 = cricket::kCnCodecName[0];
  LODWORD(v285) = v67;
  v226 = cricket::kCnCodecName[1] - 65;
  if (v226 >= 0x1A)
    v68 = cricket::kCnCodecName[1];
  else
    v68 = cricket::kCnCodecName[1] + 32;
  v69 = cricket::kDtmfCodecName[0] + 32;
  if (v9 >= 0x1A)
    v69 = cricket::kDtmfCodecName[0];
  v280 = v69;
  v282 = v68;
  v70 = cricket::kDtmfCodecName[1] + 32;
  if (v11 >= 0x1A)
    v70 = cricket::kDtmfCodecName[1];
  v274 = v70;
  v276 = v16;
  v71 = cricket::kDtmfCodecName[2] + 32;
  if (v13 >= 0x1A)
    v71 = cricket::kDtmfCodecName[2];
  v268 = v71;
  v270 = v18;
  if (v277 >= 0x1A)
    v72 = cricket::kDtmfCodecName[3];
  else
    v72 = cricket::kDtmfCodecName[3] + 32;
  v73 = v16 + 32;
  if (v271 >= 0x1A)
    v73 = v16;
  v244 = v73;
  v74 = v18 + 32;
  if (v266 >= 0x1A)
    v74 = v18;
  v238 = v74;
  v75 = v20 + 32;
  v263 = v22;
  v265 = v20;
  if (v258 >= 0x1A)
    v75 = v20;
  v259 = v75;
  v261 = v72;
  if (v256 >= 0x1A)
    v76 = v22;
  else
    v76 = v22 + 32;
  v77 = v24 + 32;
  v246 = v26;
  v248 = v24;
  if (cricket::kDtmfCodecName[8] - 65 >= 0x1A)
    v77 = v24;
  v255 = v77;
  v257 = v76;
  if (cricket::kDtmfCodecName[9] - 65 >= 0x1A)
    v78 = v26;
  else
    v78 = v26 + 32;
  v79 = v28 + 32;
  v240 = v30;
  v242 = v28;
  if (cricket::kDtmfCodecName[10] - 65 >= 0x1A)
    v79 = v28;
  v253 = v79;
  v254 = v78;
  if (cricket::kDtmfCodecName[11] - 65 >= 0x1A)
    v80 = v30;
  else
    v80 = v30 + 32;
  v81 = v32 + 32;
  v234 = v34;
  v236 = v32;
  if (cricket::kDtmfCodecName[12] - 65 >= 0x1A)
    v81 = v32;
  v251 = v81;
  v252 = v80;
  v82 = v34 + 32;
  if (v250 >= 0x1A)
    v82 = v34;
  v228 = v82;
  v83 = v36 + 32;
  v232 = v36;
  if (v249 >= 0x1A)
    v83 = v36;
  v227 = v83;
  v84 = cricket::kRedCodecName + 32;
  v250 = cricket::kRedCodecName - 65;
  v290 = cricket::kRedCodecName;
  if (v250 >= 0x1A)
    v84 = cricket::kRedCodecName;
  v278 = v84;
  v85 = HIBYTE(cricket::kRedCodecName) + 32;
  v249 = HIBYTE(cricket::kRedCodecName) - 65;
  v286 = HIBYTE(cricket::kRedCodecName);
  if (v249 >= 0x1A)
    v85 = HIBYTE(cricket::kRedCodecName);
  v272 = v85;
  v229 = 35;
  v284 = 100;
  while (2)
  {
    v86 = (char *)v65 + 16;
    v87 = *((char *)v65 + 39);
    v88 = *((unsigned __int8 *)v65 + 39);
    v89 = (unsigned __int8 *)v65 + 16;
    v90 = v88;
    if (v87 < 0)
    {
      v90 = *((_QWORD *)v65 + 3);
      if ((v90 & 0x8000000000000000) != 0)
        goto LABEL_479;
      v89 = *(unsigned __int8 **)v86;
      if (v90 && v89 == 0)
        goto LABEL_479;
    }
    if (v90 == 2)
    {
      v92 = *v89;
      if (v92 == cricket::kCnCodecName[0])
        goto LABEL_185;
      if ((v92 - 65) < 0x1A)
        LOBYTE(v92) = v92 + 32;
      if (v92 == v285)
      {
LABEL_185:
        v93 = v89[1];
        if (v93 == cricket::kCnCodecName[1])
          goto LABEL_172;
        if ((v93 - 65) < 0x1A)
          LOBYTE(v93) = v93 + 32;
        if (v93 == v282)
          goto LABEL_172;
      }
    }
    if (v87 < 0)
    {
      v95 = *((_QWORD *)v65 + 3);
      if (v95 < 0)
        goto LABEL_479;
      v94 = *(unsigned __int8 **)v86;
      if (v95)
      {
        if (!v94)
          goto LABEL_479;
      }
    }
    else
    {
      v94 = (unsigned __int8 *)v65 + 16;
      v95 = *((unsigned __int8 *)v65 + 39);
    }
    if (v95 == 15)
    {
      v96 = *v94;
      if (v96 == cricket::kDtmfCodecName[0])
        goto LABEL_199;
      if ((v96 - 65) < 0x1A)
        LOBYTE(v96) = v96 + 32;
      if (v96 == v280)
      {
LABEL_199:
        v97 = v94[1];
        if (v97 == cricket::kDtmfCodecName[1])
          goto LABEL_254;
        if ((v97 - 65) < 0x1A)
          LOBYTE(v97) = v97 + 32;
        if (v97 == v274)
        {
LABEL_254:
          v98 = v94[2];
          if (v98 == cricket::kDtmfCodecName[2])
            goto LABEL_497;
          if ((v98 - 65) < 0x1A)
            LOBYTE(v98) = v98 + 32;
          if (v98 == v268)
          {
LABEL_497:
            v99 = v94[3];
            if (v99 == cricket::kDtmfCodecName[3])
              goto LABEL_498;
            if ((v99 - 65) < 0x1A)
              LOBYTE(v99) = v99 + 32;
            if (v99 == v261)
            {
LABEL_498:
              v100 = v94[4];
              if (v100 == v276)
                goto LABEL_499;
              if ((v100 - 65) < 0x1A)
                LOBYTE(v100) = v100 + 32;
              if (v100 == v244)
              {
LABEL_499:
                v101 = v94[5];
                if (v101 == v270)
                  goto LABEL_500;
                if ((v101 - 65) < 0x1A)
                  LOBYTE(v101) = v101 + 32;
                if (v101 == v238)
                {
LABEL_500:
                  v102 = v94[6];
                  if (v102 == v265)
                    goto LABEL_501;
                  if ((v102 - 65) < 0x1A)
                    LOBYTE(v102) = v102 + 32;
                  if (v102 == v259)
                  {
LABEL_501:
                    v103 = v94[7];
                    if (v103 == v263)
                      goto LABEL_502;
                    if ((v103 - 65) < 0x1A)
                      LOBYTE(v103) = v103 + 32;
                    if (v103 == v257)
                    {
LABEL_502:
                      v104 = v94[8];
                      if (v104 == v248)
                        goto LABEL_503;
                      if ((v104 - 65) < 0x1A)
                        LOBYTE(v104) = v104 + 32;
                      if (v104 == v255)
                      {
LABEL_503:
                        v105 = v94[9];
                        if (v105 == v246)
                          goto LABEL_504;
                        if ((v105 - 65) < 0x1A)
                          LOBYTE(v105) = v105 + 32;
                        if (v105 == v254)
                        {
LABEL_504:
                          v106 = v94[10];
                          if (v106 == v242)
                            goto LABEL_505;
                          if ((v106 - 65) < 0x1A)
                            LOBYTE(v106) = v106 + 32;
                          if (v106 == v253)
                          {
LABEL_505:
                            v107 = v94[11];
                            if (v107 == v240)
                              goto LABEL_506;
                            if ((v107 - 65) < 0x1A)
                              LOBYTE(v107) = v107 + 32;
                            if (v107 == v252)
                            {
LABEL_506:
                              v108 = v94[12];
                              if (v108 == v236)
                                goto LABEL_507;
                              if ((v108 - 65) < 0x1A)
                                LOBYTE(v108) = v108 + 32;
                              if (v108 == v251)
                              {
LABEL_507:
                                v109 = v94[13];
                                if (v109 == v234)
                                  goto LABEL_508;
                                if ((v109 - 65) < 0x1A)
                                  LOBYTE(v109) = v109 + 32;
                                if (v109 == v228)
                                {
LABEL_508:
                                  v110 = v94[14];
                                  if (v110 == v232)
                                    goto LABEL_172;
                                  if ((v110 - 65) < 0x1A)
                                    LOBYTE(v110) = v110 + 32;
                                  if (v110 == v227)
                                    goto LABEL_172;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v87 < 0)
    {
      v112 = *((_QWORD *)v65 + 3);
      if (v112 < 0)
        goto LABEL_479;
      v111 = *(unsigned __int8 **)v86;
      if (v112)
      {
        if (!v111)
          goto LABEL_479;
      }
    }
    else
    {
      v111 = (unsigned __int8 *)v65 + 16;
      v112 = *((unsigned __int8 *)v65 + 39);
    }
    if (v112 == 3)
    {
      v113 = *v111;
      if (v113 == cricket::kRedCodecName)
        goto LABEL_265;
      if ((v113 - 65) < 0x1A)
        LOBYTE(v113) = v113 + 32;
      if (v113 == v278)
      {
LABEL_265:
        v114 = v111[1];
        if (v114 == HIBYTE(cricket::kRedCodecName))
          goto LABEL_272;
        if ((v114 - 65) < 0x1A)
          LOBYTE(v114) = v114 + 32;
        if (v114 == v272)
        {
LABEL_272:
          v115 = v111[2];
          if (v115 == 100)
            goto LABEL_172;
          if ((v115 - 65) < 0x1A)
            LOBYTE(v115) = v115 + 32;
          if (v115 == 100)
            goto LABEL_172;
        }
      }
    }
    if (*((_BYTE *)a3 + 216))
    {
      if (cricket::Codec::Matches(a3, v65))
      {
        v88 = *((unsigned __int8 *)v65 + 39);
        break;
      }
LABEL_172:
      v4 = (const cricket::Codec *)((char *)v4 + 1);
LABEL_173:
      v65 = (const cricket::Codec *)((char *)v65 + 216);
      if (v65 != v66)
        continue;
      if (v305)
        goto LABEL_479;
      goto LABEL_288;
    }
    break;
  }
  if ((v88 & 0x80) != 0)
  {
    v88 = *((_QWORD *)v65 + 3);
    if ((v88 & 0x8000000000000000) != 0)
      goto LABEL_479;
    v86 = *(_BYTE **)v86;
    if (v88)
    {
      if (!v86)
        goto LABEL_479;
    }
  }
  webrtc::SdpAudioFormat::SdpAudioFormat(&v294, v86, v88, *((_DWORD *)v65 + 10), *((_QWORD *)v65 + 6), (_QWORD *)v65 + 21);
  (*(void (**)(std::string *__return_ptr, _QWORD, void **))(**(_QWORD **)(*(_QWORD *)(a1 + 96) + 40) + 40))(&__str, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 40), &v294);
  if (!v314)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0
      && (v11 = v11 & 0xFFFFFFFF00000000 | 0x2B5A,
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v116, v117, v118, v119, v120, v121, v122, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc"), SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0))
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v297, v298);
      if ((v296 & 0x80000000) == 0)
        goto LABEL_173;
    }
    else
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v297, v298);
      if ((v296 & 0x80000000) == 0)
        goto LABEL_173;
    }
    operator delete(v294);
    goto LABEL_173;
  }
  size = __str.__r_.__value_.__l.__size_;
  v129 = BYTE4(v313);
  webrtc::AudioSendStream::Config::SendCodecSpec::SendCodecSpec((webrtc::AudioSendStream::Config::SendCodecSpec *)&__str, *((_DWORD *)v65 + 3), (const webrtc::SdpAudioFormat *)&v294);
  LODWORD(__p.__r_.__value_.__l.__data_) = __str.__r_.__value_.__l.__data_;
  if (v305)
  {
    webrtc::SdpAudioFormat::operator=((std::string *)&__p.__r_.__value_.__r.__words[1], (std::string *)&__str.__r_.__value_.__r.__words[1]);
    *(_OWORD *)v304 = v315[0];
    *(_OWORD *)&v304[9] = *(_OWORD *)((char *)v315 + 9);
    webrtc::AudioSendStream::Config::SendCodecSpec::~SendCodecSpec((webrtc::AudioSendStream::Config::SendCodecSpec *)&__str);
    v131 = *((_DWORD *)v65 + 11);
    if (v131 < 1)
      goto LABEL_302;
LABEL_300:
    if (!v305)
      goto LABEL_479;
    *(_DWORD *)&v304[20] = v131;
    v304[24] = 1;
  }
  else
  {
    webrtc::SdpAudioFormat::SdpAudioFormat((std::string *)&__p.__r_.__value_.__r.__words[1], (const webrtc::SdpAudioFormat *)&__str.__r_.__value_.__r.__words[1]);
    *(_OWORD *)v304 = v315[0];
    *(_OWORD *)&v304[9] = *(_OWORD *)((char *)v315 + 9);
    v305 = 1;
    webrtc::AudioSendStream::Config::SendCodecSpec::~SendCodecSpec((webrtc::AudioSendStream::Config::SendCodecSpec *)&__str);
    v131 = *((_DWORD *)v65 + 11);
    if (v131 >= 1)
      goto LABEL_300;
  }
LABEL_302:
  HasTransportCc = cricket::HasTransportCc((_BOOL8)v65, v130);
  if (!v305)
    goto LABEL_479;
  v304[1] = HasTransportCc;
  HasNack = cricket::HasNack((_BOOL8)v65, v133);
  if (!v305)
    goto LABEL_479;
  v304[0] = HasNack;
  HasRrtr = cricket::HasRrtr((_BOOL8)v65, v135);
  if (!v305)
    goto LABEL_479;
  v304[2] = HasRrtr;
  cricket::GetBitrateConfigForCodec(v65, v137);
  v299 = v138;
  v300 = v139;
  webrtc::SdpAudioFormat::~SdpAudioFormat((webrtc::SdpAudioFormat *)&v294);
  v140 = v230;
  if (v305)
  {
    v285 = (std::string *)&__p.__r_.__value_.__r.__words[1];
    v287 = (uint64_t *)v304;
    v8 = a1;
    if (v129)
    {
      v141 = v230[1];
      if (*v230 == v141)
        goto LABEL_340;
      v142 = cricket::kCnCodecName[0] + 32;
      if (cricket::kCnCodecName[0] - 65 >= 0x1A)
        v142 = cricket::kCnCodecName[0];
      v143 = cricket::kCnCodecName[1] + 32;
      if (v226 >= 0x1A)
        v143 = cricket::kCnCodecName[1];
      v144 = (_QWORD *)((char *)*v230 + 48);
      while (1)
      {
        v146 = (unsigned __int8 *)(v144 - 4);
        if (*((char *)v144 - 9) < 0)
        {
          v147 = *(v144 - 3);
          if (v147 < 0)
            goto LABEL_479;
          v146 = *(unsigned __int8 **)v146;
          if (v147 && v146 == 0)
            goto LABEL_479;
        }
        else
        {
          v147 = *((unsigned __int8 *)v144 - 9);
        }
        if (v147 == 2)
        {
          v149 = *v146;
          if (v149 == cricket::kCnCodecName[0])
            goto LABEL_326;
          if ((v149 - 65) < 0x1A)
            LOBYTE(v149) = v149 + 32;
          if (v149 == v142)
          {
LABEL_326:
            v150 = v146[1];
            if (v150 == cricket::kCnCodecName[1])
              goto LABEL_331;
            if ((v150 - 65) < 0x1A)
              LOBYTE(v150) = v150 + 32;
            if (v150 == v143)
            {
LABEL_331:
              if (*((_DWORD *)v144 - 2) == v302 && *v144 == size)
                break;
            }
          }
        }
        v145 = (const cricket::Codec *)(v144 + 21);
        v144 += 27;
        if (v145 == v141)
          goto LABEL_340;
      }
      if (size == 1)
      {
        if (v302 != 8000 && v302 != 16000 && v302 != 32000)
          goto LABEL_480;
        *(_DWORD *)&v304[4] = *((_DWORD *)v144 - 9);
        v304[8] = 1;
LABEL_339:
        v140 = v230;
      }
      else
      {
        v151 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
        v140 = v230;
        if ((v151 & 1) == 0)
        {
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v152, v153, v154, v155, v156, v157, v158, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
          goto LABEL_339;
        }
      }
LABEL_340:
      v159 = v306;
      if (v306 != v307)
      {
        if (!v305)
          goto LABEL_479;
        while (*((_DWORD *)v159 + 10) != v302)
        {
          v159 = (cricket::Codec *)((char *)v159 + 216);
          if (v159 == v307)
            goto LABEL_346;
        }
        *(_DWORD *)(v8 + 216) = *((_DWORD *)v159 + 3);
        *(_BYTE *)(v8 + 220) = 1;
        *(_DWORD *)(v8 + 224) = *((_DWORD *)v159 + 10);
      }
    }
LABEL_346:
    if (v4)
    {
      v160 = 0;
      if (v250 >= 0x1A)
        v161 = v290;
      else
        v161 = v290 + 32;
      if (v249 >= 0x1A)
        v162 = v286;
      else
        v162 = v286 + 32;
      if (v229 >= 0x1A)
        v163 = v284;
      else
        v163 = v284 + 32;
      v293 = v162;
      v289 = v163;
      while (2)
      {
        v164 = *v140;
        if (0x84BDA12F684BDA13 * ((v140[1] - *v140) >> 3) <= v160)
          goto LABEL_479;
        v166 = (uint64_t)v164 + 216 * v160;
        v165 = (unsigned __int8 *)(v166 + 16);
        LODWORD(v166) = *(char *)(v166 + 39);
        if ((v166 & 0x80000000) != 0)
        {
          v166 = *((_QWORD *)v164 + 27 * v160 + 3);
          if (v166 < 0)
            goto LABEL_479;
          v165 = *(unsigned __int8 **)v165;
          if (v166 && v165 == 0)
            goto LABEL_479;
        }
        else
        {
          v166 = v166;
        }
        if (v166 != 3)
          goto LABEL_358;
        v168 = *v165;
        if (v168 != v290)
        {
          if ((v168 - 65) < 0x1A)
            LOBYTE(v168) = v168 + 32;
          if (v168 != v161)
            goto LABEL_358;
        }
        v169 = v165[1];
        if (v169 != v286)
        {
          if ((v169 - 65) < 0x1A)
            LOBYTE(v169) = v169 + 32;
          if (v169 != v162)
            goto LABEL_358;
        }
        v170 = v165[2];
        if (v170 != v284)
        {
          if ((v170 - 65) < 0x1A)
            LOBYTE(v170) = v170 + 32;
          if (v170 != v163)
            goto LABEL_358;
        }
        if (!v305)
          goto LABEL_479;
        if (*((_DWORD *)v164 + 54 * v160 + 10) != v302 || *((_QWORD *)v164 + 27 * v160 + 6) != v303)
          goto LABEL_358;
        v171 = (uint64_t)v164 + 216 * v160;
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        v173 = *(uint64_t **)(v171 + 176);
        v172 = (uint64_t *)(v171 + 176);
        v174 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)v172 - 8, (const void **)&__str.__r_.__value_.__l.__data_, v173, v172);
        v175 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if (v172 != v174)
        {
          v176 = v174;
          if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v8 = __str.__r_.__value_.__l.__size_;
            if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
              goto LABEL_479;
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__l.__size_)
            {
              if (!__str.__r_.__value_.__r.__words[0])
                goto LABEL_479;
            }
          }
          else
          {
            p_str = &__str;
            v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          v178 = v161;
          v179 = v176 + 4;
          if (*((char *)v176 + 55) < 0)
          {
            v180 = v176[5];
            if ((v180 & 0x8000000000000000) != 0)
              goto LABEL_479;
            v179 = (_QWORD *)*v179;
            if (v180)
            {
              if (!v179)
                goto LABEL_479;
            }
          }
          else
          {
            v180 = *((unsigned __int8 *)v176 + 55);
          }
          if (v180 >= v8)
            v181 = v8;
          else
            v181 = v180;
          v182 = memcmp(p_str, v179, v181);
          if (v182)
          {
            v8 = a1;
            v161 = v178;
            if (v182 < 0)
              break;
LABEL_400:
            if (v175 < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (v176 == v172)
            {
              v185 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
              v140 = v230;
              v162 = v293;
              v163 = v289;
              if ((v185 & 1) == 0)
              {
                rtc::webrtc_logging_impl::Log("\r\t", v186, v187, v188, v189, v190, v191, v192, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
                v140 = v230;
              }
              goto LABEL_358;
            }
            v183 = v176 + 7;
            if (*((char *)v176 + 79) < 0)
            {
              v184 = v176[8];
              if ((v184 & 0x8000000000000000) != 0)
                goto LABEL_479;
              v183 = (_QWORD *)*v183;
              if (v184)
              {
                if (!v183)
                  goto LABEL_479;
              }
            }
            else
            {
              v184 = *((unsigned __int8 *)v176 + 79);
            }
            rtc::split((size_t)v183, v184, 0x2Fu, (char **)&v294);
            v194 = v294;
            v193 = v295;
            if ((unint64_t)(v295 - (_BYTE *)v294 - 513) < 0xFFFFFFFFFFFFFE1FLL)
            {
              v195 = 0;
LABEL_447:
              if (v194)
              {
                v295 = v194;
                operator delete(v194);
              }
              v140 = v230;
              v162 = v293;
              v163 = v289;
              if (v195)
              {
                if (v305)
                {
                  *(_DWORD *)&v304[12] = *((_DWORD *)v164 + 54 * v160 + 3);
                  v304[16] = 1;
                  goto LABEL_451;
                }
LABEL_479:
                __break(1u);
LABEL_480:
                v218 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
                v140 = v230;
                if ((v218 & 1) == 0)
                {
                  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v219, v220, v221, v222, v223, v224, v225, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
                  goto LABEL_339;
                }
                goto LABEL_340;
              }
LABEL_358:
              if ((const cricket::Codec *)++v160 == v4)
                goto LABEL_451;
              continue;
            }
            if (v294 == v295)
            {
              v195 = 1;
              v194 = v295;
              goto LABEL_447;
            }
            v283 = v161;
            while (2)
            {
              v8 = *v194;
              v197 = v194[1];
              v198 = snprintf((char *)&__str, 0x20uLL, "%d", LODWORD(__p.__r_.__value_.__l.__data_));
              if (v198 < 0)
                abort();
              v199 = v198;
              if (v198 > 0x16)
              {
                v201 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v198 | 7) != 0x17)
                  v201 = v198 | 7;
                v202 = v201 + 1;
                v200 = (void **)operator new(v201 + 1);
                v310 = v199;
                v311 = v202 | 0x8000000000000000;
                v309 = v200;
              }
              else
              {
                HIBYTE(v311) = v198;
                v200 = (void **)&v309;
              }
              v203 = (char *)v200 + v199;
              if (v200 <= (void **)&__str && (char *)v200 + v199 > (char *)&__str)
                goto LABEL_479;
              if ((_DWORD)v199)
                memcpy(v200, &__str, v199);
              *v203 = 0;
              v205 = HIBYTE(v311);
              if (SHIBYTE(v311) < 0)
              {
                v207 = v310;
                if ((v310 & 0x8000000000000000) != 0)
                  goto LABEL_479;
                v206 = v309;
                if (v310)
                {
                  if (!v309)
                    goto LABEL_479;
                }
              }
              else
              {
                v206 = (void **)&v309;
                v207 = HIBYTE(v311);
              }
              if (v197 == v207)
              {
                v195 = memcmp((const void *)v8, v206, v197) == 0;
                if (v205 < 0)
                  goto LABEL_414;
              }
              else
              {
                v195 = 0;
                if ((v311 & 0x8000000000000000) != 0)
LABEL_414:
                  operator delete(v309);
              }
              v194 += 2;
              if (v194 == v193 || !v195)
              {
                v194 = v294;
                v8 = a1;
                v161 = v283;
                goto LABEL_447;
              }
              continue;
            }
          }
          v208 = v8 >= v180;
          v8 = a1;
          v161 = v178;
          if (v208)
            goto LABEL_400;
        }
        break;
      }
      v176 = v172;
      goto LABEL_400;
    }
LABEL_451:
    v209 = *(unsigned __int8 *)(v8 + 424);
    v210 = v305;
    if (*(_BYTE *)(v8 + 424) && v305)
    {
      if ((webrtc::AudioSendStream::Config::SendCodecSpec::operator==(v8 + 320, (uint64_t)&__p) & 1) == 0)
      {
        v209 = *(unsigned __int8 *)(v8 + 424);
        v210 = v305;
LABEL_456:
        if (v209 == v210)
        {
          if (v209)
          {
            *(_DWORD *)(v8 + 320) = __p.__r_.__value_.__l.__data_;
            webrtc::SdpAudioFormat::operator=((std::string *)(v8 + 328), v285);
            *(_OWORD *)(v8 + 392) = *(_OWORD *)v287;
            *(_OWORD *)(v8 + 401) = *(_OWORD *)((char *)v287 + 9);
          }
        }
        else if (v209)
        {
          webrtc::AudioSendStream::Config::SendCodecSpec::~SendCodecSpec((webrtc::AudioSendStream::Config::SendCodecSpec *)(v8 + 320));
          *(_BYTE *)(v8 + 424) = 0;
        }
        else
        {
          *(_DWORD *)(v8 + 320) = __p.__r_.__value_.__l.__data_;
          webrtc::SdpAudioFormat::SdpAudioFormat((std::string *)(v8 + 328), (const webrtc::SdpAudioFormat *)v285);
          *(_OWORD *)(v8 + 392) = *(_OWORD *)v287;
          *(_OWORD *)(v8 + 401) = *(_OWORD *)((char *)v287 + 9);
          *(_BYTE *)(v8 + 424) = 1;
        }
        v211 = *(_QWORD **)(v8 + 248);
        if (v211 != (_QWORD *)(v8 + 256))
        {
          v4 = (const cricket::Codec *)absl::internal_any_invocable::EmptyManager;
          while (*(_BYTE *)(v8 + 424))
          {
            v212 = (cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream *)v211[5];
            cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream::UpdateSendCodecSpec(v212, (const webrtc::AudioSendStream::Config::SendCodecSpec *)(v8 + 320));
            v213 = *((_QWORD *)v212 + 59);
            __str.__r_.__value_.__r.__words[2] = (std::string::size_type)absl::internal_any_invocable::EmptyManager;
            v313 = 0;
            (*(void (**)(uint64_t, _QWORD *, std::string *))(*(_QWORD *)v213 + 32))(v213, (_QWORD *)v212 + 13, &__str);
            ((void (*)(uint64_t, std::string *, std::string *))__str.__r_.__value_.__r.__words[2])(1, &__str, &__str);
            v214 = (_QWORD *)v211[1];
            if (v214)
            {
              do
              {
                v215 = v214;
                v214 = (_QWORD *)*v214;
              }
              while (v214);
            }
            else
            {
              do
              {
                v215 = (_QWORD *)v211[2];
                v48 = *v215 == (_QWORD)v211;
                v211 = v215;
              }
              while (!v48);
            }
            v211 = v215;
            if (v215 == (_QWORD *)(v8 + 256))
              goto LABEL_473;
          }
          goto LABEL_479;
        }
LABEL_473:
        v216 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 232) + 104))(*(_QWORD *)(v8 + 232));
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v216 + 184))(v216, &v299);
        if ((const cricket::Codec **)(v8 + 104) != v230)
          std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)(v8 + 104), *v230, v230[1], 0x84BDA12F684BDA13 * ((v230[1] - *v230) >> 3));
        v217 = *(void (**)(std::string::size_type))(v8 + 480);
        if (v217)
          v217(v8 + 456);
        if (v305)
          webrtc::AudioSendStream::Config::SendCodecSpec::~SendCodecSpec((webrtc::AudioSendStream::Config::SendCodecSpec *)&__p);
        goto LABEL_288;
      }
    }
    else if ((v209 != 0) != (v305 != 0))
    {
      goto LABEL_456;
    }
    HIDWORD(v299) = -1;
    goto LABEL_473;
  }
LABEL_288:
  v123 = v306;
  if (v306)
  {
    v124 = v306;
    if (v307 != v306)
    {
      v125 = (cricket::Codec *)((char *)v307 - 216);
      v126 = (cricket::Codec *)((char *)v307 - 216);
      do
      {
        v127 = *(void (***)(cricket::Codec *))v126;
        v126 = (cricket::Codec *)((char *)v126 - 216);
        (*v127)(v125);
        v48 = v125 == v123;
        v125 = v126;
      }
      while (!v48);
      v124 = v306;
    }
    v307 = v123;
    operator delete(v124);
  }
  return 1;
}

uint64_t cricket::WebRtcVoiceSendChannel::ExtmapAllowMixed(cricket::WebRtcVoiceSendChannel *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t cricket::WebRtcVoiceSendChannel::SetExtmapAllowMixed(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::SetSenderParameters(cricket::WebRtcVoiceSendChannel *this, const cricket::AudioSenderParameter *a2)
{
  return cricket::WebRtcVoiceSendChannel::SetSenderParameters((cricket::WebRtcVoiceSendChannel *)((char *)this - 64), a2);
}

void cricket::WebRtcVoiceSendChannel::GetSendCodec(cricket::WebRtcVoiceSendChannel *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(cricket::Codec *__hidden);
  uint64_t v16;
  std::string v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 424))
  {
    v4 = *((_DWORD *)this + 88);
    v5 = *((_QWORD *)this + 45);
    v15 = &off_24C0B1418;
    v16 = 0;
    if (*((char *)this + 351) < 0)
      std::string::__init_copy_ctor_external(&v17, *((const std::string::value_type **)this + 41), *((_QWORD *)this + 42));
    else
      v17 = *(std::string *)((char *)this + 328);
    *(_QWORD *)&v18 = v4;
    *((_QWORD *)&v18 + 1) = v5;
    LOBYTE(v19) = 0;
    v21 = 0;
    v22 = 0;
    LOBYTE(v26) = 0;
    v28 = 0;
    v31 = 0;
    v32 = 0;
    v29 = &v30;
    v30 = 0;
    v33 = 0;
    v34 = 0;
    if (&v29 == (uint64_t **)((char *)this + 368))
    {
      v6 = 1;
    }
    else
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v29, *((char **)this + 46), (char *)this + 376);
      v6 = v21 == 0;
    }
    v7 = v16;
    *(_QWORD *)a2 = &off_24C0B1418;
    *(_QWORD *)(a2 + 8) = v7;
    *(std::string *)(a2 + 16) = v17;
    memset(&v17, 0, sizeof(v17));
    *(_OWORD *)(a2 + 40) = v18;
    *(_BYTE *)(a2 + 56) = 0;
    *(_BYTE *)(a2 + 80) = 0;
    if (!v6)
    {
      *(_OWORD *)(a2 + 56) = v19;
      *(_QWORD *)(a2 + 72) = v20;
      v20 = 0;
      v19 = 0uLL;
      *(_BYTE *)(a2 + 80) = 1;
    }
    v8 = v22;
    *(_BYTE *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 88) = v8;
    v9 = v24;
    *(_OWORD *)(a2 + 96) = v23;
    *(_OWORD *)(a2 + 112) = v9;
    *(_QWORD *)(a2 + 128) = v25;
    v22 = 0;
    *(_BYTE *)(a2 + 160) = 0;
    if (v28)
    {
      *(_OWORD *)(a2 + 136) = v26;
      *(_QWORD *)(a2 + 152) = v27;
      v27 = 0;
      v26 = 0uLL;
      *(_BYTE *)(a2 + 160) = 1;
    }
    v11 = v29;
    v10 = v30;
    *(_QWORD *)(a2 + 176) = v30;
    v12 = a2 + 176;
    *(_QWORD *)(a2 + 168) = v11;
    v13 = v31;
    *(_QWORD *)(a2 + 184) = v31;
    if (v13)
    {
      *(_QWORD *)(v10 + 16) = v12;
      v29 = &v30;
      v30 = 0;
      v31 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 168) = v12;
    }
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    v14 = a2 + 192;
    *(_QWORD *)(v14 + 16) = 0;
    std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>((_QWORD *)v14, v32, v33, 0xAAAAAAAAAAAAAAABLL * ((v33 - v32) >> 4));
    *(_BYTE *)(v14 + 24) = 1;
    cricket::Codec::~Codec((cricket::Codec *)&v15);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 216) = 0;
  }
}

void `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::GetSendCodec(cricket::WebRtcVoiceSendChannel *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(cricket::Codec *__hidden);
  uint64_t v16;
  std::string v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 360))
  {
    v4 = *((_DWORD *)this + 72);
    v5 = *((_QWORD *)this + 37);
    v15 = &off_24C0B1418;
    v16 = 0;
    if (*((char *)this + 287) < 0)
      std::string::__init_copy_ctor_external(&v17, *((const std::string::value_type **)this + 33), *((_QWORD *)this + 34));
    else
      v17 = *(std::string *)((_BYTE *)this + 11);
    *(_QWORD *)&v18 = v4;
    *((_QWORD *)&v18 + 1) = v5;
    LOBYTE(v19) = 0;
    v21 = 0;
    v22 = 0;
    LOBYTE(v26) = 0;
    v28 = 0;
    v31 = 0;
    v32 = 0;
    v29 = &v30;
    v30 = 0;
    v33 = 0;
    v34 = 0;
    if (&v29 == (uint64_t **)((char *)this + 304))
    {
      v6 = 1;
    }
    else
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v29, *((char **)this + 38), (char *)this + 312);
      v6 = v21 == 0;
    }
    v7 = v16;
    *(_QWORD *)a2 = &off_24C0B1418;
    *(_QWORD *)(a2 + 8) = v7;
    *(std::string *)(a2 + 16) = v17;
    memset(&v17, 0, sizeof(v17));
    *(_OWORD *)(a2 + 40) = v18;
    *(_BYTE *)(a2 + 56) = 0;
    *(_BYTE *)(a2 + 80) = 0;
    if (!v6)
    {
      *(_OWORD *)(a2 + 56) = v19;
      *(_QWORD *)(a2 + 72) = v20;
      v20 = 0;
      v19 = 0uLL;
      *(_BYTE *)(a2 + 80) = 1;
    }
    v8 = v22;
    *(_BYTE *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 88) = v8;
    v9 = v24;
    *(_OWORD *)(a2 + 96) = v23;
    *(_OWORD *)(a2 + 112) = v9;
    *(_QWORD *)(a2 + 128) = v25;
    v22 = 0;
    *(_BYTE *)(a2 + 160) = 0;
    if (v28)
    {
      *(_OWORD *)(a2 + 136) = v26;
      *(_QWORD *)(a2 + 152) = v27;
      v27 = 0;
      v26 = 0uLL;
      *(_BYTE *)(a2 + 160) = 1;
    }
    v11 = v29;
    v10 = v30;
    *(_QWORD *)(a2 + 176) = v30;
    v12 = a2 + 176;
    *(_QWORD *)(a2 + 168) = v11;
    v13 = v31;
    *(_QWORD *)(a2 + 184) = v31;
    if (v13)
    {
      *(_QWORD *)(v10 + 16) = v12;
      v29 = &v30;
      v30 = 0;
      v31 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 168) = v12;
    }
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    v14 = a2 + 192;
    *(_QWORD *)(v14 + 16) = 0;
    std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>((_QWORD *)v14, v32, v33, 0xAAAAAAAAAAAAAAABLL * ((v33 - v32) >> 4));
    *(_BYTE *)(v14 + 24) = 1;
    cricket::Codec::~Codec((cricket::Codec *)&v15);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 216) = 0;
  }
}

void cricket::WebRtcVoiceSendChannel::SetSend(cricket::WebRtcVoiceSendChannel *this, int a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  cricket::WebRtcVoiceSendChannel *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  cricket::WebRtcVoiceSendChannel *v15;
  cricket::WebRtcVoiceSendChannel *v16;
  BOOL v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  if (*((unsigned __int8 *)this + 229) == a2)
    return;
  v2 = a2;
  if (!a2)
  {
    v18 = (char *)*((_QWORD *)this + 31);
    v19 = (char *)this + 256;
    if (v18 != (char *)this + 256)
    {
      do
      {
        v20 = *((_QWORD *)v18 + 5);
        *(_BYTE *)(v20 + 488) = v2;
        (*(void (**)(_QWORD))(**(_QWORD **)(v20 + 472) + 48))(*(_QWORD *)(v20 + 472));
        v21 = (char *)*((_QWORD *)v18 + 1);
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = *(char **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (char *)*((_QWORD *)v18 + 2);
            v17 = *(_QWORD *)v22 == (_QWORD)v18;
            v18 = v22;
          }
          while (!v17);
        }
        v18 = v22;
      }
      while (v22 != v19);
    }
    goto LABEL_24;
  }
  cricket::WebRtcVoiceEngine::ApplyOptions(*((cricket::WebRtcVoiceEngine **)this + 12), (cricket::WebRtcVoiceSendChannel *)((char *)this + 136));
  if ((!*((_BYTE *)this + 209) || *((_BYTE *)this + 208))
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 12) + 32) + 176))(*(_QWORD *)(*((_QWORD *)this + 12) + 32)) & 1) == 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 12) + 32) + 224))(*(_QWORD *)(*((_QWORD *)this + 12) + 32)) & 1) == 0
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 12) + 32) + 168))(*(_QWORD *)(*((_QWORD *)this + 12) + 32))
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  }
  v11 = (cricket::WebRtcVoiceSendChannel *)*((_QWORD *)this + 31);
  if (v11 == (cricket::WebRtcVoiceSendChannel *)((char *)this + 256))
  {
LABEL_24:
    *((_BYTE *)this + 229) = v2;
    return;
  }
  while (1)
  {
    v12 = *((_QWORD *)v11 + 5);
    *(_BYTE *)(v12 + 488) = v2;
    v13 = *(_QWORD *)(v12 + 592);
    if (*(_QWORD *)(v12 + 600) == v13)
      break;
    if (*(_BYTE *)(v13 + 124))
      v14 = 40;
    else
      v14 = 48;
    (*(void (**)(void))(**(_QWORD **)(v12 + 472) + v14))();
    v15 = (cricket::WebRtcVoiceSendChannel *)*((_QWORD *)v11 + 1);
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = *(cricket::WebRtcVoiceSendChannel **)v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (cricket::WebRtcVoiceSendChannel *)*((_QWORD *)v11 + 2);
        v17 = *(_QWORD *)v16 == (_QWORD)v11;
        v11 = v16;
      }
      while (!v17);
    }
    v11 = v16;
    if (v16 == (cricket::WebRtcVoiceSendChannel *)((char *)this + 256))
      goto LABEL_24;
  }
  __break(1u);
}

void `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::SetSend(cricket::WebRtcVoiceSendChannel *this, int a2)
{
  cricket::WebRtcVoiceSendChannel::SetSend((cricket::WebRtcVoiceSendChannel *)((char *)this - 64), a2);
}

uint64_t cricket::WebRtcVoiceSendChannel::SetAudioSend(cricket::WebRtcVoiceSendChannel *a1, unsigned int a2, int a3, const cricket::AudioOptions *a4, uint64_t (***a5)(_QWORD, uint64_t))
{
  uint64_t result;

  result = cricket::WebRtcVoiceSendChannel::SetLocalSource((uint64_t)a1, a2, a5);
  if ((_DWORD)result)
  {
    result = cricket::WebRtcVoiceSendChannel::MuteStream(a1, a2, a3 != 1);
    if ((_DWORD)result)
    {
      result = 1;
      if (a4)
      {
        if (a3)
        {
          cricket::WebRtcVoiceSendChannel::SetOptions(a1, a4);
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t cricket::WebRtcVoiceSendChannel::SetLocalSource(uint64_t a1, unsigned int a2, uint64_t (***a3)(_QWORD, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 256);
  if (v4)
  {
    v5 = a1 + 256;
    do
    {
      v6 = *(_DWORD *)(v4 + 32);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v4;
      else
        v8 = (uint64_t *)(v4 + 8);
      if (v7)
        v5 = v4;
      v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 256 && *(_DWORD *)(v5 + 32) <= a2)
    {
      v17 = *(_QWORD *)(v5 + 40);
      result = *(_QWORD *)(v17 + 480);
      if (a3)
      {
        if (result)
          return 1;
        result = (**a3)(a3, v17);
        *(_QWORD *)(v17 + 480) = a3;
        if (!*(_BYTE *)(v17 + 488))
          goto LABEL_29;
        v19 = *(_QWORD *)(v17 + 592);
        if (*(_QWORD *)(v17 + 600) != v19)
        {
          if (*(_BYTE *)(v19 + 124))
            goto LABEL_28;
          goto LABEL_29;
        }
      }
      else
      {
        if (result)
        {
          result = (**(uint64_t (***)(uint64_t, _QWORD))result)(result, 0);
          *(_QWORD *)(v17 + 480) = 0;
        }
        if (!*(_BYTE *)(v17 + 488))
          goto LABEL_29;
        v18 = *(_QWORD *)(v17 + 592);
        if (*(_QWORD *)(v17 + 600) != v18)
        {
          if (*(_BYTE *)(v18 + 124))
          {
LABEL_28:
            v20 = 5;
LABEL_30:
            (*(void (**)(void))(**(_QWORD **)(v17 + 472) + 8 * v20))();
            return 1;
          }
LABEL_29:
          v20 = 6;
          goto LABEL_30;
        }
      }
      __break(1u);
      return result;
    }
  }
  if (!a3)
    return 1;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  return 0;
}

uint64_t cricket::WebRtcVoiceSendChannel::MuteStream(cricket::WebRtcVoiceSendChannel *this, unsigned int a2, _BOOL8 a3)
{
  char *v3;
  _BOOL8 v4;
  char *v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  BOOL v24;

  v3 = (char *)*((_QWORD *)this + 32);
  if (!v3)
    goto LABEL_12;
  v4 = a3;
  v6 = (char *)this + 256;
  v7 = (char *)this + 256;
  do
  {
    v8 = *((_DWORD *)v3 + 8);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (char **)v3;
    else
      v10 = (char **)(v3 + 8);
    if (v9)
      v7 = v3;
    v3 = *v10;
  }
  while (*v10);
  if (v7 == v6 || *((_DWORD *)v7 + 8) > a2)
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    return 0;
  }
  v19 = *((_QWORD *)v7 + 5);
  (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(v19 + 472) + 64))(*(_QWORD *)(v19 + 472), a3);
  *(_BYTE *)(v19 + 489) = v4;
  v20 = (char *)*((_QWORD *)this + 31);
  if (v20 != v6)
  {
    do
    {
      if (v4)
      {
        v4 = *(_BYTE *)(*((_QWORD *)v20 + 5) + 489) != 0;
        v22 = (char *)*((_QWORD *)v20 + 1);
        if (v22)
          goto LABEL_24;
      }
      else
      {
        v4 = 0;
        v22 = (char *)*((_QWORD *)v20 + 1);
        if (v22)
        {
          do
          {
LABEL_24:
            v23 = v22;
            v22 = *(char **)v22;
          }
          while (v22);
          goto LABEL_19;
        }
      }
      do
      {
        v23 = (char *)*((_QWORD *)v20 + 2);
        v24 = *(_QWORD *)v23 == (_QWORD)v20;
        v20 = v23;
      }
      while (!v24);
LABEL_19:
      v20 = v23;
    }
    while (v23 != v6);
  }
  v21 = *(_QWORD *)(*((_QWORD *)this + 12) + 64);
  if (v21)
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v21 + 104))(v21, v4);
  return 1;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::SetAudioSend(uint64_t a1, unsigned int a2, int a3, const cricket::AudioOptions *a4, uint64_t (***a5)(_QWORD, uint64_t))
{
  cricket::WebRtcVoiceSendChannel *v8;
  uint64_t result;

  v8 = (cricket::WebRtcVoiceSendChannel *)(a1 - 64);
  result = cricket::WebRtcVoiceSendChannel::SetLocalSource(a1 - 64, a2, a5);
  if ((_DWORD)result)
  {
    result = cricket::WebRtcVoiceSendChannel::MuteStream(v8, a2, a3 != 1);
    if ((_DWORD)result)
    {
      result = 1;
      if (a4)
      {
        if (a3)
        {
          cricket::WebRtcVoiceSendChannel::SetOptions(v8, a4);
          return 1;
        }
      }
    }
  }
  return result;
}

void cricket::WebRtcVoiceSendChannel::AddSendStream(cricket::WebRtcVoiceSendChannel *this, std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *data;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  char *v32;
  _OWORD *v33;
  void *v34;
  std::string *v35;
  char v36;
  char *v37;
  std::string *v38;
  const std::string::value_type *v39;
  size_t v40;
  char v41;
  const std::string::value_type *v42;
  size_t size;
  uint64_t v44;
  void (***v45)(_QWORD);
  uint64_t v46;
  std::string *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  std::string *v52;
  size_t v53;
  uint64_t v54;
  std::string *v55;
  std::string *v56;
  char v57;
  std::string **v58;
  const std::string::value_type *v59;
  size_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t **v63;
  uint64_t **v64;
  unsigned int v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  void (*v69)(char *, void **);
  _QWORD *v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t *v74;
  unsigned int v75;
  _DWORD *v76;
  uint64_t *v77;
  _QWORD *v78;
  _QWORD *v79;
  _DWORD *v80;
  _QWORD *v81;
  unsigned int v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  char v94;
  char *v95;
  std::string *v96;
  std::string v97;
  std::string v98;
  char v99;
  void *__p;
  unint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int16 v120;
  char v121;
  char v122;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0
    || (cricket::StreamParams::ToString((cricket::StreamParams *)a2, (char *)&__p),
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc"), (SHIBYTE(v102) & 0x80000000) == 0))
  {
    data = (unsigned int *)a2[1].__r_.__value_.__l.__data_;
    if (data != (unsigned int *)a2[1].__r_.__value_.__l.__size_)
      goto LABEL_4;
LABEL_7:
    v12 = 0;
    v13 = (_QWORD *)((char *)this + 256);
    v14 = *((_QWORD *)this + 32);
    if (!v14)
      goto LABEL_18;
    goto LABEL_8;
  }
  operator delete(__p);
  data = (unsigned int *)a2[1].__r_.__value_.__l.__data_;
  if (data == (unsigned int *)a2[1].__r_.__value_.__l.__size_)
    goto LABEL_7;
LABEL_4:
  v12 = *data;
  v13 = (_QWORD *)((char *)this + 256);
  v14 = *((_QWORD *)this + 32);
  if (!v14)
    goto LABEL_18;
LABEL_8:
  v15 = v13;
  do
  {
    v16 = *(_DWORD *)(v14 + 32);
    v17 = v16 >= v12;
    if (v16 >= v12)
      v18 = (uint64_t *)v14;
    else
      v18 = (uint64_t *)(v14 + 8);
    if (v17)
      v15 = (_QWORD *)v14;
    v14 = *v18;
  }
  while (*v18);
  if (v15 == v13 || v12 < *((_DWORD *)v15 + 8))
  {
LABEL_18:
    if (*((_BYTE *)this + 169))
      v19 = *((_BYTE *)this + 168) == 0;
    else
      v19 = 1;
    if (v19 || !*((_BYTE *)this + 200))
    {
      v98.__r_.__value_.__s.__data_[0] = 0;
      v99 = 0;
    }
    else
    {
      v98.__r_.__value_.__s.__data_[0] = 0;
      v99 = 0;
      if (*((char *)this + 199) < 0)
        std::string::__init_copy_ctor_external(&v98, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
      else
        v98 = *(std::string *)((char *)this + 176);
      v99 = 1;
    }
    v27 = operator new();
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v97, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    else
      v97 = *a2;
    v93 = *((_DWORD *)this + 32);
    v94 = *((_BYTE *)this + 8);
    v91 = *((_DWORD *)this + 60);
    v28 = *((_QWORD *)this + 29);
    v89 = *((_QWORD *)this + 12);
    v90 = *((_QWORD *)this + 54);
    *(_QWORD *)v27 = &off_24C0C67A8;
    v92 = v28;
    v29 = (*(uint64_t (**)(void))(*(_QWORD *)v28 + 184))();
    *(int64x2_t *)(v27 + 16) = vdupq_n_s64(0x3E80uLL);
    *(_BYTE *)(v27 + 8) = 0;
    *(_BYTE *)(v27 + 32) = 1;
    *(_BYTE *)(v27 + 40) = 0;
    *(_BYTE *)(v27 + 64) = 0;
    v30 = operator new(0x80uLL);
    *v30 = "enabled";
    v30[1] = v27 + 8;
    v30[2] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
    v30[3] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
    v30[4] = "min_payload_bitrate";
    v30[5] = v27 + 16;
    v30[6] = webrtc::struct_parser_impl::TypedParser<webrtc::DataRate>::Parse;
    v30[7] = webrtc::struct_parser_impl::TypedParser<webrtc::DataRate>::Encode;
    v30[8] = "min_encoder_bitrate";
    v30[9] = v27 + 24;
    v30[10] = webrtc::struct_parser_impl::TypedParser<webrtc::DataRate>::Parse;
    v30[11] = webrtc::struct_parser_impl::TypedParser<webrtc::DataRate>::Encode;
    v30[12] = "use_slow_adaptation";
    v30[13] = v27 + 32;
    v30[14] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
    v30[15] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
    v31 = (uint64_t *)operator new();
    *v31 = (uint64_t)v30;
    v31[1] = (uint64_t)(v30 + 16);
    v31[2] = (uint64_t)(v30 + 16);
    (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v29 + 16))(&__p, v29, "WebRTC-Audio-AdaptivePtime", 26);
    if ((SHIBYTE(v102) & 0x80000000) == 0)
    {
      v32 = (char *)this + 16;
      webrtc::StructParametersParser::Parse(v31, (uint64_t)&__p, HIBYTE(v102));
      if ((SHIBYTE(v102) & 0x80000000) == 0)
        goto LABEL_42;
      goto LABEL_41;
    }
    if ((v101 & 0x8000000000000000) != 0)
      goto LABEL_172;
    if (v101)
    {
      if (!__p)
        goto LABEL_172;
      v32 = (char *)this + 16;
      webrtc::StructParametersParser::Parse(v31, (uint64_t)__p, v101);
      if (SHIBYTE(v102) < 0)
        goto LABEL_41;
    }
    else
    {
      v32 = (char *)this + 16;
      webrtc::StructParametersParser::Parse(v31, (uint64_t)__p, 0);
      if (SHIBYTE(v102) < 0)
LABEL_41:
        operator delete(__p);
    }
LABEL_42:
    v33 = (_OWORD *)((char *)this + 296);
    v34 = (void *)*v31;
    if (*v31)
    {
      v31[1] = (uint64_t)v34;
      operator delete(v34);
    }
    v96 = a2 + 3;
    MEMORY[0x20BD0ADEC](v31, 0x20C40960023A9);
    *(_OWORD *)(v27 + 168) = 0u;
    *(_DWORD *)(v27 + 80) = 0;
    *(_QWORD *)(v27 + 96) = v92;
    *(_DWORD *)(v27 + 104) = 0;
    *(_OWORD *)(v27 + 112) = 0u;
    *(_OWORD *)(v27 + 128) = 0u;
    *(_OWORD *)(v27 + 144) = 0u;
    *(_BYTE *)(v27 + 160) = 0;
    *(_OWORD *)(v27 + 184) = 0u;
    *(_OWORD *)(v27 + 200) = 0u;
    *(_DWORD *)(v27 + 216) = 5000;
    *(_QWORD *)(v27 + 224) = v32;
    *(_QWORD *)(v27 + 232) = -1;
    *(_QWORD *)(v27 + 240) = 0x3FF0000000000000;
    *(_BYTE *)(v27 + 256) = 0;
    *(_BYTE *)(v27 + 248) = 0;
    *(_BYTE *)(v27 + 280) = 0;
    *(_BYTE *)(v27 + 288) = 0;
    *(_BYTE *)(v27 + 392) = 0;
    *(_QWORD *)(v27 + 400) = 0;
    *(_BYTE *)(v27 + 408) = 0;
    *(_BYTE *)(v27 + 416) = 0;
    *(_QWORD *)(v27 + 424) = 0;
    *(_QWORD *)(v27 + 432) = 0;
    *(_QWORD *)(v27 + 440) = 0;
    *(_DWORD *)(v27 + 448) = 65537;
    *(_BYTE *)(v27 + 452) = 0;
    *(_OWORD *)(v27 + 456) = 0u;
    *(_OWORD *)(v27 + 472) = 0u;
    *(_WORD *)(v27 + 488) = 0;
    *(_DWORD *)(v27 + 492) = v93;
    *(_BYTE *)(v27 + 620) = 0;
    *(_QWORD *)(v27 + 632) = 0;
    *(_QWORD *)(v27 + 640) = 0;
    *(_QWORD *)(v27 + 624) = 0;
    *(_BYTE *)(v27 + 648) = 0;
    *(_OWORD *)(v27 + 496) = 0u;
    *(_OWORD *)(v27 + 512) = 0u;
    *(_OWORD *)(v27 + 528) = 0u;
    *(_OWORD *)(v27 + 544) = 0u;
    *(_OWORD *)(v27 + 560) = 0u;
    *(_OWORD *)(v27 + 576) = 0u;
    *(_OWORD *)(v27 + 592) = 0u;
    *(_OWORD *)(v27 + 601) = 0u;
    *(_BYTE *)(v27 + 649) = 1;
    *(_BYTE *)(v27 + 656) = 0;
    *(_BYTE *)(v27 + 660) = 0;
    LOBYTE(__p) = 0;
    BYTE4(__p) = 0;
    v101 = 0x3FF0000000000000;
    LODWORD(v102) = 1;
    BYTE4(v102) = 0;
    v103 = 0;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v115 = 0;
    v116 = 1;
    v121 = 0;
    v122 = 0;
    v117 = 0;
    v118 = 0;
    v120 = 0;
    v119 = 0;
    *(_QWORD *)(v27 + 600) = std::vector<webrtc::RtpEncodingParameters>::__push_back_slow_path<webrtc::RtpEncodingParameters const&>((void **)(v27 + 592), (uint64_t)&__p);
    webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)&__p);
    *(_BYTE *)(v27 + 664) = 0;
    *(_BYTE *)(v27 + 760) = 0;
    *(_BYTE *)(v27 + 768) = 0;
    *(_BYTE *)(v27 + 792) = 0;
    *(_DWORD *)(v27 + 800) = -1;
    v35 = (std::string *)(v27 + 136);
    *(_DWORD *)(v27 + 104) = v12;
    if ((_OWORD *)(v27 + 136) != v33)
    {
      v36 = *((_BYTE *)this + 319);
      if ((*(char *)(v27 + 159) & 0x80000000) == 0)
      {
        if ((*((_BYTE *)this + 319) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v35, *((char **)this + 37), *((_QWORD *)this + 38));
          v37 = (char *)this + 272;
          v38 = (std::string *)(v27 + 192);
          if ((std::string *)(v27 + 192) == v96)
            goto LABEL_72;
        }
        else
        {
          *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *v33;
          *(_QWORD *)(v27 + 152) = *((_QWORD *)this + 39);
          v37 = (char *)this + 272;
          v38 = (std::string *)(v27 + 192);
          if ((std::string *)(v27 + 192) == v96)
            goto LABEL_72;
        }
LABEL_57:
        v41 = HIBYTE(a2[3].__r_.__value_.__r.__words[2]);
        if (*(char *)(v27 + 215) < 0)
        {
          if (v41 >= 0)
            v42 = (const std::string::value_type *)&a2[3];
          else
            v42 = a2[3].__r_.__value_.__l.__data_;
          if (v41 >= 0)
            size = HIBYTE(a2[3].__r_.__value_.__r.__words[2]);
          else
            size = a2[3].__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>(v38, v42, size);
        }
        else if ((*((_BYTE *)&a2[3].__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v38, a2[3].__r_.__value_.__l.__data_, a2[3].__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
          v38->__r_.__value_.__r.__words[2] = a2[3].__r_.__value_.__r.__words[2];
        }
LABEL_72:
        *(_BYTE *)(v27 + 160) = v94;
        if ((char *)(v27 + 168) != v37)
          std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(v27 + 168), *((_QWORD *)this + 34), *((_QWORD *)this + 35), (uint64_t)(*((_QWORD *)this + 35) - *((_QWORD *)this + 34)) >> 5);
        v44 = *(_QWORD *)(v27 + 592);
        if (*(_QWORD *)(v27 + 600) == v44)
          goto LABEL_172;
        v95 = v37;
        *(_BYTE *)(v27 + 248) = *(_DWORD *)(v44 + 16) != 1;
        v45 = *(void (****)(_QWORD))(v89 + 40);
        if (v45)
          (**v45)(*(_QWORD *)(v89 + 40));
        v46 = *(_QWORD *)(v27 + 400);
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
        v47 = (std::string *)(v27 + 424);
        v48 = (uint64_t *)(v27 + 456);
        *(_QWORD *)(v27 + 400) = v45;
        *(_QWORD *)(v27 + 408) = v90;
        *(_BYTE *)(v27 + 416) = 1;
        if (*(char *)(v27 + 447) < 0)
        {
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = &v97;
          else
            v52 = (std::string *)v97.__r_.__value_.__r.__words[0];
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
          else
            v53 = v97.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>(v47, (const std::string::value_type *)v52, v53);
          v49 = (char *)this + 440;
          v50 = v27 + 448;
          v51 = *v48;
          if (*v48)
            goto LABEL_90;
        }
        else
        {
          if ((*((_BYTE *)&v97.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            *(_OWORD *)&v47->__r_.__value_.__l.__data_ = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
            *(_QWORD *)(v27 + 440) = *((_QWORD *)&v97.__r_.__value_.__l + 2);
            v49 = (char *)this + 440;
            v50 = v27 + 448;
            v51 = *v48;
            if (!*v48)
              goto LABEL_91;
LABEL_90:
            (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
            goto LABEL_91;
          }
          std::string::__assign_no_alias<true>(v47, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
          v49 = (char *)this + 440;
          v50 = v27 + 448;
          v51 = *v48;
          if (*v48)
            goto LABEL_90;
        }
LABEL_91:
        *(_QWORD *)(v27 + 456) = 0;
        *(_DWORD *)v50 = *(_DWORD *)v49;
        *(_BYTE *)(v50 + 4) = v49[4];
        *(_DWORD *)(v27 + 216) = v91;
        v54 = *(_QWORD *)(v27 + 592);
        if (*(_QWORD *)(v27 + 600) == v54)
          goto LABEL_172;
        v55 = (std::string *)(v27 + 624);
        v56 = (std::string *)(v27 + 768);
        *(_DWORD *)v54 = v12;
        *(_BYTE *)(v54 + 4) = 1;
        if ((std::string *)(v27 + 624) != v96)
        {
          v57 = HIBYTE(a2[3].__r_.__value_.__r.__words[2]);
          if ((*(char *)(v27 + 647) & 0x80000000) == 0)
          {
            if ((*((_BYTE *)&a2[3].__r_.__value_.__s + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>(v55, a2[3].__r_.__value_.__l.__data_, a2[3].__r_.__value_.__l.__size_);
              v58 = (std::string **)(v27 + 568);
              if ((char *)(v27 + 568) == v95)
                goto LABEL_108;
            }
            else
            {
              *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
              *(_QWORD *)(v27 + 640) = *((_QWORD *)&a2[3].__r_.__value_.__l + 2);
              v58 = (std::string **)(v27 + 568);
              if ((char *)(v27 + 568) == v95)
                goto LABEL_108;
            }
            goto LABEL_107;
          }
          if (v57 >= 0)
            v59 = (const std::string::value_type *)&a2[3];
          else
            v59 = a2[3].__r_.__value_.__l.__data_;
          if (v57 >= 0)
            v60 = HIBYTE(a2[3].__r_.__value_.__r.__words[2]);
          else
            v60 = a2[3].__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>(v55, v59, v60);
        }
        v58 = (std::string **)(v27 + 568);
        if ((char *)(v27 + 568) == v95)
        {
LABEL_108:
          std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v27 + 768), &v98);
          if (*(_BYTE *)(v27 + 8))
            goto LABEL_111;
          v61 = *(_QWORD *)(v27 + 592);
          if (*(_QWORD *)(v27 + 600) == v61)
            goto LABEL_172;
          if (*(_BYTE *)(v61 + 153))
LABEL_111:
            v56 = (std::string *)(v27 + 40);
          std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v27 + 256), v56);
          if (*((_BYTE *)this + 424))
            cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream::UpdateSendCodecSpec((cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream *)v27, (cricket::WebRtcVoiceSendChannel *)((char *)this + 320));
          *(_QWORD *)(v27 + 472) = (***(uint64_t (****)(_QWORD, uint64_t))(v27 + 96))(*(_QWORD *)(v27 + 96), v27 + 104);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v97.__r_.__value_.__l.__data_);
            v62 = (uint64_t *)*v13;
            v63 = (uint64_t **)v13;
            v64 = (uint64_t **)v13;
            if (*v13)
            {
              while (1)
              {
LABEL_120:
                while (1)
                {
                  v64 = (uint64_t **)v62;
                  v65 = *((_DWORD *)v62 + 8);
                  if (v12 >= v65)
                    break;
                  v62 = *v64;
                  v63 = v64;
                  if (!*v64)
                    goto LABEL_124;
                }
                if (v65 >= v12)
                  goto LABEL_128;
                v62 = v64[1];
                if (!v62)
                {
                  v63 = v64 + 1;
                  break;
                }
              }
            }
          }
          else
          {
            v62 = (uint64_t *)*v13;
            v63 = (uint64_t **)v13;
            v64 = (uint64_t **)v13;
            if (*v13)
              goto LABEL_120;
          }
LABEL_124:
          v66 = operator new(0x30uLL);
          v66[8] = v12;
          *((_QWORD *)v66 + 5) = v27;
          *(_QWORD *)v66 = 0;
          *((_QWORD *)v66 + 1) = 0;
          *((_QWORD *)v66 + 2) = v64;
          *v63 = (uint64_t *)v66;
          v67 = **((_QWORD **)this + 31);
          if (v67)
          {
            *((_QWORD *)this + 31) = v67;
            v68 = *v63;
          }
          else
          {
            v68 = (uint64_t *)v66;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 32), v68);
          ++*((_QWORD *)this + 33);
LABEL_128:
          v69 = (void (*)(char *, void **))*((_QWORD *)this + 64);
          if (v69)
          {
            v101 = 0;
            v102 = 0;
            __p = &v101;
            v70 = (_QWORD *)*((_QWORD *)this + 31);
            if (v70 != v13)
            {
              do
              {
                v71 = *((_DWORD *)v70 + 8);
                v72 = v101;
                v73 = &v101;
                v74 = &v101;
                if (v101)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v74 = (unint64_t *)v72;
                      v75 = *(_DWORD *)(v72 + 28);
                      if (v71 >= v75)
                        break;
                      v72 = *v74;
                      v73 = v74;
                      if (!*v74)
                        goto LABEL_139;
                    }
                    if (v75 >= v71)
                      break;
                    v72 = v74[1];
                    if (!v72)
                    {
                      v73 = v74 + 1;
                      goto LABEL_139;
                    }
                  }
                }
                else
                {
LABEL_139:
                  v76 = operator new(0x20uLL);
                  v76[7] = v71;
                  *(_QWORD *)v76 = 0;
                  *((_QWORD *)v76 + 1) = 0;
                  *((_QWORD *)v76 + 2) = v74;
                  *v73 = (unint64_t)v76;
                  if (*(_QWORD *)__p)
                  {
                    __p = *(void **)__p;
                    v77 = (uint64_t *)*v73;
                  }
                  else
                  {
                    v77 = (uint64_t *)v76;
                  }
                  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v101, v77);
                  ++v102;
                }
                v78 = (_QWORD *)v70[1];
                if (v78)
                {
                  do
                  {
                    v79 = v78;
                    v78 = (_QWORD *)*v78;
                  }
                  while (v78);
                }
                else
                {
                  do
                  {
                    v79 = (_QWORD *)v70[2];
                    v19 = *v79 == (_QWORD)v70;
                    v70 = v79;
                  }
                  while (!v19);
                }
                v70 = v79;
              }
              while (v79 != v13);
              v69 = (void (*)(char *, void **))*((_QWORD *)this + 64);
            }
            v69((char *)this + 488, &__p);
            std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&__p, (_QWORD *)v101);
          }
          v80 = (_DWORD *)*v13;
          v81 = v13;
          if (*v13)
          {
            while (1)
            {
              while (1)
              {
                v81 = v80;
                v82 = v80[8];
                if (v12 >= v82)
                  break;
                v80 = (_DWORD *)*v81;
                v13 = v81;
                if (!*v81)
                  goto LABEL_158;
              }
              if (v82 >= v12)
                break;
              v80 = (_DWORD *)v81[1];
              if (!v80)
              {
                v13 = v81 + 1;
                goto LABEL_158;
              }
            }
          }
          else
          {
LABEL_158:
            v83 = v81;
            v81 = operator new(0x30uLL);
            *((_DWORD *)v81 + 8) = v12;
            v81[5] = 0;
            *v81 = 0;
            v81[1] = 0;
            v81[2] = v83;
            *v13 = v81;
            v84 = **((_QWORD **)this + 31);
            v85 = v81;
            if (v84)
            {
              *((_QWORD *)this + 31) = v84;
              v85 = (uint64_t *)*v13;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 32), v85);
            ++*((_QWORD *)this + 33);
          }
          v86 = v81[5];
          v87 = *((unsigned __int8 *)this + 229);
          *(_BYTE *)(v86 + 488) = v87;
          if (!v87)
            goto LABEL_166;
          v88 = *(_QWORD *)(v86 + 592);
          if (*(_QWORD *)(v86 + 600) != v88)
          {
            if (*(_BYTE *)(v88 + 124))
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v86 + 472) + 40))(*(_QWORD *)(v86 + 472));
              if (!v99)
                return;
LABEL_167:
              if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v98.__r_.__value_.__l.__data_);
              return;
            }
LABEL_166:
            (*(void (**)(_QWORD))(**(_QWORD **)(v86 + 472) + 48))(*(_QWORD *)(v86 + 472));
            if (!v99)
              return;
            goto LABEL_167;
          }
LABEL_172:
          __break(1u);
          return;
        }
LABEL_107:
        std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>(v58, *((_QWORD *)this + 34), *((_QWORD *)this + 35), (uint64_t)(*((_QWORD *)this + 35) - *((_QWORD *)this + 34)) >> 5);
        goto LABEL_108;
      }
      if (v36 >= 0)
        v39 = (char *)this + 296;
      else
        v39 = (const std::string::value_type *)*((_QWORD *)this + 37);
      if (v36 >= 0)
        v40 = *((unsigned __int8 *)this + 319);
      else
        v40 = *((_QWORD *)this + 38);
      std::string::__assign_no_alias<false>(v35, v39, v40);
    }
    v37 = (char *)this + 272;
    v38 = (std::string *)(v27 + 192);
    if ((std::string *)(v27 + 192) == v96)
      goto LABEL_72;
    goto LABEL_57;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
}

void `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::AddSendStream(cricket::WebRtcVoiceSendChannel *this, std::string *a2)
{
  cricket::WebRtcVoiceSendChannel::AddSendStream((cricket::WebRtcVoiceSendChannel *)((char *)this - 64), a2);
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::RemoveSendStream(cricket::WebRtcVoiceSendChannel *this, unsigned int a2)
{
  return cricket::WebRtcVoiceSendChannel::RemoveSendStream((cricket::WebRtcVoiceSendChannel *)((char *)this - 64), a2);
}

__n128 cricket::WebRtcVoiceSendChannel::SetSsrcListChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;

  v4 = a1 + 488;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 504))(1, v4, v4);
  *(_QWORD *)(v4 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 512) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a2 + 16))(0, a2, v4);
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(v4 + 16) = result;
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

__n128 `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::SetSsrcListChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 *v5;
  __n128 result;

  v4 = a1 + 424;
  v5 = (__n128 *)(a1 + 440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 440))(1, v4, v4);
  *(_QWORD *)(a1 + 440) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 448) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a2 + 16))(0, a2, v4);
  result = *(__n128 *)(a2 + 16);
  *v5 = result;
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

BOOL cricket::WebRtcVoiceSendChannel::CanInsertDtmf(cricket::WebRtcVoiceSendChannel *this)
{
  return *((_BYTE *)this + 220) && *((_BYTE *)this + 229) != 0;
}

BOOL `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::CanInsertDtmf(cricket::WebRtcVoiceSendChannel *this)
{
  return *((_BYTE *)this + 156) && *((_BYTE *)this + 165) != 0;
}

uint64_t cricket::WebRtcVoiceSendChannel::SetFrameEncryptor(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t (*v13)();
  uint64_t v14;

  v3 = *(_QWORD *)(result + 256);
  if (v3)
  {
    v4 = result + 256;
    do
    {
      v5 = *(_DWORD *)(v3 + 32);
      v6 = v5 >= a2;
      if (v5 >= a2)
        v7 = (uint64_t *)v3;
      else
        v7 = (uint64_t *)(v3 + 8);
      if (v6)
        v4 = v3;
      v3 = *v7;
    }
    while (*v7);
    if (v4 != result + 256 && *(_DWORD *)(v4 + 32) <= a2)
    {
      v8 = *(_QWORD *)(v4 + 40);
      v9 = *a3;
      if (*a3)
      {
        (**(void (***)(_QWORD))v9)(*a3);
        (**(void (***)(uint64_t))v9)(v9);
      }
      v10 = *(_QWORD *)(v8 + 456);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      *(_QWORD *)(v8 + 456) = v9;
      v11 = *(_QWORD *)(v8 + 472);
      v13 = absl::internal_any_invocable::EmptyManager;
      v14 = 0;
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v11 + 32))(v11, v8 + 104, v12);
      result = ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v13)(1, v12, v12);
      if (v9)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::SetFrameEncryptor(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[16];
  uint64_t (*v15)();
  uint64_t v16;

  v5 = *(_QWORD *)(a1 + 192);
  result = a1 + 192;
  v4 = v5;
  if (v5)
  {
    v6 = result;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != result && *(_DWORD *)(v6 + 32) <= a2)
    {
      v10 = *(_QWORD *)(v6 + 40);
      v11 = *a3;
      if (*a3)
      {
        (**(void (***)(_QWORD))v11)(*a3);
        (**(void (***)(uint64_t))v11)(v11);
      }
      v12 = *(_QWORD *)(v10 + 456);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *(_QWORD *)(v10 + 456) = v11;
      v13 = *(_QWORD *)(v10 + 472);
      v15 = absl::internal_any_invocable::EmptyManager;
      v16 = 0;
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v13 + 32))(v13, v10 + 104, v14);
      result = ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v15)(1, v14, v14);
      if (v11)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  return result;
}

uint64_t cricket::WebRtcVoiceSendChannel::InsertDtmf(cricket::WebRtcVoiceSendChannel *this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  if (!*((_BYTE *)this + 220) || !*((_BYTE *)this + 229))
    return 0;
  if (!a2)
  {
    v16 = (char *)*((_QWORD *)this + 31);
    if (v16 != (char *)this + 256)
      goto LABEL_18;
LABEL_22:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    return 0;
  }
  v15 = (char *)*((_QWORD *)this + 32);
  if (!v15)
    goto LABEL_22;
  v16 = (char *)this + 256;
  do
  {
    v17 = *((_DWORD *)v15 + 8);
    v18 = v17 >= a2;
    if (v17 >= a2)
      v19 = (char **)v15;
    else
      v19 = (char **)(v15 + 8);
    if (v18)
      v16 = v15;
    v15 = *v19;
  }
  while (*v19);
  if (v16 == (char *)this + 256 || *((_DWORD *)v16 + 8) > a2 || v16 == (char *)this + 256)
    goto LABEL_22;
LABEL_18:
  if (a3 >= 0x100)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    return 0;
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(*((_QWORD *)v16 + 5) + 472)
                                                                             + 56))(*(_QWORD *)(*((_QWORD *)v16 + 5) + 472), *((unsigned int *)this + 54), *((unsigned int *)this + 56), a3, a4);
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::InsertDtmf(cricket::WebRtcVoiceSendChannel *this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  return cricket::WebRtcVoiceSendChannel::InsertDtmf((cricket::WebRtcVoiceSendChannel *)((char *)this - 64), a2, a3, a4);
}

uint64_t cricket::WebRtcVoiceSendChannel::OnPacketSent(cricket::WebRtcVoiceSendChannel *this, const rtc::SentPacket *a2)
{
  return (*(uint64_t (**)(_QWORD, const rtc::SentPacket *))(**((_QWORD **)this + 29) + 168))(*((_QWORD *)this + 29), a2);
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::OnPacketSent(cricket::WebRtcVoiceSendChannel *this, const rtc::SentPacket *a2)
{
  return (*(uint64_t (**)(_QWORD, const rtc::SentPacket *))(**((_QWORD **)this + 21) + 168))(*((_QWORD *)this + 21), a2);
}

void cricket::WebRtcVoiceSendChannel::OnNetworkRouteChanged(uint64_t a1, void **a2, size_t a3, __int128 *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  void **v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  void *__p[2];
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  char v26;
  _QWORD v27[2];
  uint64_t (*v28)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v29)(uint64_t);

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 232) + 128))(*(_QWORD *)(a1 + 232), *((unsigned int *)a4 + 8));
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(unsigned int **)(a1 + 80);
  if (v9)
  {
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v20 = a1;
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_17;
  if (a3 <= 0x16)
  {
    HIBYTE(v22) = a3;
    v11 = __p;
    v12 = (void **)((char *)__p + a3);
    if (__p > a2)
      goto LABEL_11;
    goto LABEL_10;
  }
  v13 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a3 | 7) != 0x17)
    v13 = a3 | 7;
  v14 = v13 + 1;
  v11 = (void **)operator new(v13 + 1);
  __p[1] = (void *)a3;
  v22 = v14 | 0x8000000000000000;
  __p[0] = v11;
  v12 = (void **)((char *)v11 + a3);
  if (v11 <= a2)
  {
LABEL_10:
    if (v12 <= a2)
      goto LABEL_11;
    __break(1u);
LABEL_17:
    abort();
  }
LABEL_11:
  if (a3)
    memmove(v11, a2, a3);
  *(_BYTE *)v12 = 0;
  v15 = a4[1];
  v23 = *a4;
  v24 = v15;
  v25 = *((_DWORD *)a4 + 8);
  v16 = operator new();
  *(_QWORD *)v16 = v20;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)__p;
  *(_QWORD *)(v16 + 24) = v22;
  __p[0] = 0;
  __p[1] = 0;
  v22 = 0;
  v17 = v24;
  *(_OWORD *)(v16 + 32) = v23;
  *(_OWORD *)(v16 + 48) = v17;
  *(_DWORD *)(v16 + 64) = v25;
  v18 = (_QWORD *)operator new();
  *v18 = v9;
  v18[1] = v16;
  v18[3] = absl::internal_any_invocable::RemoteManagerNontrivial<cricket::WebRtcVoiceSendChannel::OnNetworkRouteChanged(std::string_view,rtc::NetworkRoute const&)::$_1>;
  v18[4] = absl::internal_any_invocable::RemoteInvoker<false,void,cricket::WebRtcVoiceSendChannel::OnNetworkRouteChanged(std::string_view,rtc::NetworkRoute const&)::$_1 &&>;
  v27[0] = v18;
  v28 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v29 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v8 + 8))(v8, v27, &v26, &v19);
  v28(1, v27, v27);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
}

void `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::OnNetworkRouteChanged(uint64_t a1, void **a2, size_t a3, __int128 *a4)
{
  cricket::WebRtcVoiceSendChannel::OnNetworkRouteChanged(a1 - 64, a2, a3, a4);
}

uint64_t cricket::WebRtcVoiceSendChannel::OnReadyToSend(cricket::WebRtcVoiceSendChannel *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 29) + 120))(*((_QWORD *)this + 29), 1, a2 ^ 1u);
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::OnReadyToSend(cricket::WebRtcVoiceSendChannel *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 21) + 120))(*((_QWORD *)this + 21), 1, a2 ^ 1u);
}

uint64_t cricket::WebRtcVoiceSendChannel::GetStats(cricket::WebRtcVoiceSendChannel *this, cricket::VoiceMediaSendInfo *a2)
{
  cricket::VoiceMediaSendInfo *v2;
  char *v3;
  int v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  const std::string::value_type **v19;
  __int128 v20;
  uint64_t v21;
  std::string *v22;
  const std::string::value_type **v23;
  __int128 v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::string *v58;
  const std::string::value_type **v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  _BYTE *v64;
  _BYTE *v65;
  int64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char **v71;
  char *v72;
  _BYTE *v73;
  _BYTE *v74;
  int64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  _BYTE *v80;
  _BYTE *v81;
  int64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  char *v96;
  char *v97;
  void *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  char *v102;
  void *v103;
  char *v104;
  void *v105;
  char *v106;
  BOOL v107;
  cricket::VoiceMediaSendInfo *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  int v115;
  _QWORD *v116;
  _QWORD *v117;
  int v118;
  _DWORD *v119;
  uint64_t v120;
  uint64_t v122;
  unsigned __int8 *v123;
  char *v124;
  char v126;
  char *v127;
  unsigned __int8 *v129;
  char *v130;
  __int128 v131;
  void *v132;
  int v133;
  uint64_t v134;
  int v135;
  double v136;
  char v137;
  void *v138;
  _QWORD v139[4];
  int v140;
  char v141;
  void *v142;
  void *v143;
  char *v144;
  __int128 v145;
  void *v146[4];
  __int16 v147;
  uint64_t v148;
  _BYTE v149[24];
  __int128 v150;
  __int128 v151;
  _BYTE v152[24];
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _BYTE v158[32];
  void (**v159)(webrtc::RtpCodec *__hidden);
  __int128 v160;
  void *v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  __int128 __src;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  __int16 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  __int128 v185;
  void *v186;
  int v187;

  v2 = a2;
  v3 = (char *)*((_QWORD *)this + 31);
  v124 = (char *)this + 256;
  if (v3 != (char *)this + 256)
  {
    do
    {
      (*(void (**)(void (***__return_ptr)(webrtc::RtpCodec *__hidden), _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v3 + 5) + 472) + 80))(&v159, *(_QWORD *)(*((_QWORD *)v3 + 5) + 472), 0);
      v141 = 0;
      memset(v139, 0, sizeof(v139));
      LOBYTE(v140) = 0;
      v145 = 0u;
      memset(v146, 0, sizeof(v146));
      v147 = 0;
      BYTE4(v150) = 0;
      BYTE8(v150) = 0;
      BYTE12(v150) = 0;
      LOBYTE(v151) = 0;
      BYTE4(v151) = 0;
      BYTE8(v151) = 0;
      BYTE12(v151) = 0;
      v152[0] = 0;
      v152[4] = 0;
      v152[8] = 0;
      v152[12] = 0;
      v152[16] = 0;
      v152[20] = 0;
      LOWORD(v153) = 0;
      BYTE8(v153) = 0;
      LOBYTE(v154) = 0;
      BYTE8(v154) = 0;
      LOBYTE(v155) = 0;
      BYTE8(v155) = 0;
      LOBYTE(v156) = 0;
      BYTE8(v156) = 0;
      BYTE12(v156) = 0;
      LOBYTE(v157) = 0;
      BYTE4(v157) = 0;
      BYTE8(v157) = 0;
      v158[0] = 0;
      v158[8] = 0;
      v158[16] = 0;
      v158[24] = 0;
      v158[28] = 0;
      memset(v149, 0, sizeof(v149));
      LOBYTE(v150) = 0;
      v4 = (int)v159;
      v5 = operator new(0x10uLL);
      *(_DWORD *)v5 = v4;
      v5[1] = 0;
      v142 = v5;
      v143 = v5 + 2;
      v131 = v160;
      v132 = v161;
      v133 = v162;
      v144 = (char *)(v5 + 2);
      v148 = v163;
      v134 = v164;
      v138 = v165;
      v135 = v187;
      v137 = 1;
      v136 = (double)v184;
      if (SHIBYTE(v167) < 0)
      {
        std::string::__assign_no_alias<true>(&v139[1], (char *)__src, *((size_t *)&__src + 1));
        v6 = v146[1];
      }
      else
      {
        v6 = 0;
        *(_OWORD *)&v139[1] = __src;
        v139[3] = v167;
      }
      v140 = v168;
      v141 = BYTE4(v168);
      v139[0] = v170;
      *(_DWORD *)v149 = v169;
      *(_DWORD *)&v149[4] = v171;
      *(_OWORD *)&v149[8] = v172;
      *(_QWORD *)&v152[16] = v176;
      v151 = v174;
      *(_OWORD *)v152 = v175;
      v150 = v173;
      v153 = v177;
      v154 = v178;
      *(_OWORD *)v158 = v182;
      *(_OWORD *)&v158[16] = v183;
      v155 = v179;
      v156 = v180;
      v157 = v181;
      if (v6)
      {
        v146[2] = v6;
        operator delete(v6);
      }
      *(_OWORD *)&v146[1] = v185;
      v146[3] = v186;
      v186 = 0;
      v185 = 0uLL;
      v127 = v3;
      v7 = *((_QWORD *)v3 + 5);
      v8 = *(_QWORD *)(v7 + 592);
      v9 = *(_QWORD *)(v7 + 600);
      v10 = v9 - v8;
      if (v9 == v8)
      {
        v26 = 0;
        v11 = 0;
      }
      else
      {
        if (0xF0F0F0F0F0F0F0F1 * (v10 >> 4) >= 0xF0F0F0F0F0F0F1)
          goto LABEL_135;
        v11 = (unsigned __int8 *)operator new(v10);
        v12 = 0;
        do
        {
          v13 = v8 + v12;
          v14 = &v11[v12];
          *(_OWORD *)v14 = *(_OWORD *)(v8 + v12);
          v15 = *(_OWORD *)(v8 + v12 + 16);
          v16 = *(_OWORD *)(v8 + v12 + 32);
          v17 = *(_OWORD *)(v8 + v12 + 48);
          *(_OWORD *)(v14 + 57) = *(_OWORD *)(v8 + v12 + 57);
          *((_OWORD *)v14 + 2) = v16;
          *((_OWORD *)v14 + 3) = v17;
          *((_OWORD *)v14 + 1) = v15;
          v11[v12 + 80] = 0;
          v18 = (std::string *)&v11[v12 + 80];
          v14[104] = 0;
          if (*(_BYTE *)(v8 + v12 + 104))
          {
            v19 = (const std::string::value_type **)(v13 + 80);
            if (*(char *)(v13 + 103) < 0)
            {
              std::string::__init_copy_ctor_external(v18, *v19, *(_QWORD *)(v8 + v12 + 88));
            }
            else
            {
              v20 = *(_OWORD *)v19;
              *(_QWORD *)&v11[v12 + 96] = *(_QWORD *)(v13 + 96);
              *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
            }
            v14[104] = 1;
          }
          v21 = *(_QWORD *)(v13 + 112);
          *(_QWORD *)(v14 + 117) = *(_QWORD *)(v13 + 117);
          *((_QWORD *)v14 + 14) = v21;
          v22 = (std::string *)(v14 + 128);
          v23 = (const std::string::value_type **)(v13 + 128);
          if (*(char *)(v13 + 151) < 0)
          {
            std::string::__init_copy_ctor_external(v22, *v23, *(_QWORD *)(v8 + v12 + 136));
          }
          else
          {
            v24 = *(_OWORD *)v23;
            *((_QWORD *)v14 + 18) = *(_QWORD *)(v13 + 144);
            *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
          }
          v25 = &v11[v12];
          *((_WORD *)v25 + 76) = *(_WORD *)(v13 + 152);
          v11[v12 + 160] = 0;
          v25[264] = 0;
          if (*(_BYTE *)(v13 + 264))
          {
            webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v11[v12 + 160], (const webrtc::RtpCodec *)(v8 + v12 + 160));
            v25[264] = 1;
          }
          v12 += 272;
        }
        while (v13 + 272 != v9);
        v26 = &v11[v12];
        if (v12)
        {
          v126 = 0;
          v147 = v11[124] | 0x100;
          v2 = a2;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          if (v27 >= v28)
            goto LABEL_25;
          goto LABEL_50;
        }
      }
      v126 = 1;
      v2 = a2;
      v27 = *((_QWORD *)a2 + 1);
      v28 = *((_QWORD *)a2 + 2);
      if (v27 >= v28)
      {
LABEL_25:
        v29 = *(_QWORD *)v2;
        v30 = 0x7D6343EB1A1F58D1 * ((uint64_t)(v27 - *(_QWORD *)v2) >> 3);
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) > 0xA72F05397829CBLL)
          goto LABEL_135;
        v32 = 0x7D6343EB1A1F58D1 * ((uint64_t)(v28 - v29) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x5397829CBC14E5)
          v33 = 0xA72F05397829CBLL;
        else
          v33 = v31;
        if (!v33)
        {
LABEL_134:
          __break(1u);
LABEL_135:
          abort();
        }
        v123 = v26;
        if (v33 > 0xA72F05397829CBLL)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v34 = 392 * v33;
        v35 = (char *)operator new(392 * v33);
        v36 = &v35[v34];
        v37 = (uint64_t)&v35[392 * v30];
        cricket::MediaSenderInfo::MediaSenderInfo(v37, (uint64_t)&v131);
        *(_OWORD *)(v37 + 200) = *(_OWORD *)v149;
        *(_QWORD *)(v37 + 216) = *(_QWORD *)&v149[16];
        v38 = v151;
        *(_OWORD *)(v37 + 224) = v150;
        *(_OWORD *)(v37 + 240) = v38;
        *(_OWORD *)(v37 + 256) = *(_OWORD *)v152;
        *(_QWORD *)(v37 + 269) = *(_QWORD *)&v152[13];
        *(_OWORD *)(v37 + 373) = *(_OWORD *)&v158[13];
        v39 = *(_OWORD *)v158;
        *(_OWORD *)(v37 + 344) = v157;
        *(_OWORD *)(v37 + 360) = v39;
        v40 = v154;
        *(_OWORD *)(v37 + 280) = v153;
        *(_OWORD *)(v37 + 296) = v40;
        v41 = v156;
        *(_OWORD *)(v37 + 312) = v155;
        *(_OWORD *)(v37 + 328) = v41;
        v42 = v37 + 392;
        v2 = a2;
        v43 = (char *)*((_QWORD *)a2 + 1);
        v130 = *(char **)a2;
        if (v43 == *(char **)a2)
        {
          *(_QWORD *)a2 = v37;
          *((_QWORD *)a2 + 1) = v42;
          *((_QWORD *)a2 + 2) = v36;
          if (v43)
            goto LABEL_69;
        }
        else
        {
          v122 = v37 + 392;
          v44 = 0;
          v129 = v11;
          do
          {
            v54 = (_OWORD *)(v37 + v44 - 392);
            *v54 = *(_OWORD *)&v43[v44 - 392];
            v55 = *(_OWORD *)&v43[v44 - 376];
            v56 = *(_OWORD *)&v43[v44 - 360];
            v57 = *(_OWORD *)&v43[v44 - 328];
            v54[3] = *(_OWORD *)&v43[v44 - 344];
            v54[4] = v57;
            v54[1] = v55;
            v54[2] = v56;
            v58 = (std::string *)(v37 + v44 - 312);
            v59 = (const std::string::value_type **)&v43[v44 - 312];
            if (v43[v44 - 289] < 0)
            {
              std::string::__init_copy_ctor_external(v58, *v59, *(_QWORD *)&v43[v44 - 304]);
            }
            else
            {
              v60 = *(_OWORD *)v59;
              *(_QWORD *)(v37 + v44 - 296) = *(_QWORD *)&v43[v44 - 296];
              *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v60;
            }
            v61 = v37 + v44;
            v62 = &v43[v44];
            *(_QWORD *)(v37 + v44 - 288) = *(_QWORD *)&v43[v44 - 288];
            v63 = (_QWORD *)(v37 + v44 - 280);
            v63[1] = 0;
            v63[2] = 0;
            *v63 = 0;
            v64 = *(_BYTE **)&v43[v44 - 280];
            v65 = *(_BYTE **)&v43[v44 - 272];
            v66 = v65 - v64;
            if (v65 != v64)
            {
              if (v66 < 0)
                goto LABEL_135;
              v67 = v37;
              v68 = v36;
              v69 = v43;
              v70 = (char *)operator new(v66);
              *v63 = v70;
              v71 = (char **)(v61 - 272);
              *v71 = v70;
              v72 = &v70[16 * (v66 >> 4)];
              *(_QWORD *)(v61 - 264) = v72;
              memcpy(v70, v64, v66);
              *v71 = v72;
              v43 = v69;
              v36 = v68;
              v37 = v67;
            }
            *(_QWORD *)(v61 - 256) = 0;
            *(_QWORD *)(v61 - 248) = 0;
            *(_QWORD *)(v61 - 240) = 0;
            v74 = (_BYTE *)*((_QWORD *)v62 - 32);
            v73 = (_BYTE *)*((_QWORD *)v62 - 31);
            v75 = v73 - v74;
            if (v73 != v74)
            {
              if (v75 < 0)
                goto LABEL_135;
              v76 = (char *)operator new(v73 - v74);
              *(_QWORD *)(v61 - 256) = v76;
              *(_QWORD *)(v61 - 248) = v76;
              v77 = &v76[16 * (v75 >> 4)];
              *(_QWORD *)(v61 - 240) = v77;
              memcpy(v76, v74, v75);
              *(_QWORD *)(v61 - 248) = v77;
            }
            v78 = v37 + v44;
            v79 = &v43[v44];
            *(_QWORD *)(v78 - 232) = 0;
            *(_QWORD *)(v78 - 224) = 0;
            *(_QWORD *)(v78 - 216) = 0;
            v81 = *(_BYTE **)&v43[v44 - 232];
            v80 = *(_BYTE **)&v43[v44 - 224];
            v82 = v80 - v81;
            if (v80 != v81)
            {
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v82 >> 3)) >= 0x492492492492493)
                goto LABEL_135;
              v83 = (char *)operator new(v82);
              *(_QWORD *)(v78 - 232) = v83;
              *(_QWORD *)(v78 - 224) = v83;
              v84 = &v83[8 * (v82 >> 3)];
              *(_QWORD *)(v78 - 216) = v84;
              memcpy(v83, v81, v82);
              *(_QWORD *)(v78 - 224) = v84;
            }
            *(_OWORD *)(v78 - 208) = *((_OWORD *)v79 - 13);
            v45 = *((_OWORD *)v79 - 12);
            *(_QWORD *)(v78 - 176) = *((_QWORD *)v79 - 22);
            *(_OWORD *)(v78 - 192) = v45;
            v46 = *(_OWORD *)(v79 - 168);
            v47 = *(_OWORD *)(v79 - 152);
            v48 = *(_OWORD *)(v79 - 136);
            *(_QWORD *)(v78 - 123) = *(_QWORD *)(v79 - 123);
            *(_OWORD *)(v78 - 136) = v48;
            *(_OWORD *)(v78 - 152) = v47;
            *(_OWORD *)(v78 - 168) = v46;
            v50 = *((_OWORD *)v79 - 3);
            v49 = *((_OWORD *)v79 - 2);
            v51 = *((_OWORD *)v79 - 4);
            *(_OWORD *)(v78 - 19) = *(_OWORD *)(v79 - 19);
            *(_OWORD *)(v78 - 48) = v50;
            *(_OWORD *)(v78 - 32) = v49;
            *(_OWORD *)(v78 - 64) = v51;
            v52 = *((_OWORD *)v79 - 7);
            v53 = *((_OWORD *)v79 - 5);
            *(_OWORD *)(v78 - 96) = *((_OWORD *)v79 - 6);
            *(_OWORD *)(v78 - 80) = v53;
            *(_OWORD *)(v78 - 112) = v52;
            v44 -= 392;
            v11 = v129;
          }
          while (&v43[v44] != v130);
          v43 = *(char **)a2;
          v95 = (char *)*((_QWORD *)a2 + 1);
          *(_QWORD *)a2 = v37 + v44;
          *((_QWORD *)a2 + 1) = v122;
          *((_QWORD *)a2 + 2) = v36;
          if (v95 == v43)
          {
            v2 = a2;
          }
          else
          {
            v96 = v95 - 312;
            do
            {
              v98 = (void *)*((_QWORD *)v96 + 10);
              if (v98)
              {
                *((_QWORD *)v96 + 11) = v98;
                operator delete(v98);
              }
              v99 = (void *)*((_QWORD *)v96 + 7);
              if (v99)
              {
                *((_QWORD *)v96 + 8) = v99;
                operator delete(v99);
              }
              v100 = (void *)*((_QWORD *)v96 + 4);
              if (v100)
              {
                *((_QWORD *)v96 + 5) = v100;
                operator delete(v100);
              }
              if (v96[23] < 0)
                operator delete(*(void **)v96);
              v97 = v96 - 80;
              v96 -= 392;
            }
            while (v97 != v43);
            v2 = a2;
          }
          v42 = v122;
          if (v43)
          {
LABEL_69:
            v101 = v42;
            operator delete(v43);
            v42 = v101;
          }
        }
        v26 = v123;
        *((_QWORD *)v2 + 1) = v42;
        if (!v11)
          goto LABEL_73;
LABEL_71:
        if ((v126 & 1) != 0)
        {
LABEL_72:
          operator delete(v11);
          goto LABEL_73;
        }
        if (!*(v26 - 8))
          goto LABEL_90;
        while (2)
        {
          *((_QWORD *)v26 - 14) = off_24C0BCBF0;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v26 - 32), *((_QWORD *)v26 - 3));
          v105 = (void *)*((_QWORD *)v26 - 7);
          if (v105)
          {
            *((_QWORD *)v26 - 6) = v105;
            operator delete(v105);
          }
          if ((char)*(v26 - 81) < 0)
          {
            operator delete(*((void **)v26 - 13));
            if ((char)*(v26 - 121) < 0)
              goto LABEL_94;
LABEL_91:
            if (*(v26 - 168))
            {
LABEL_95:
              if ((char)*(v26 - 169) < 0)
                operator delete(*((void **)v26 - 24));
            }
          }
          else
          {
LABEL_90:
            if (((char)*(v26 - 121) & 0x80000000) == 0)
              goto LABEL_91;
LABEL_94:
            operator delete(*((void **)v26 - 18));
            if (*(v26 - 168))
              goto LABEL_95;
          }
          v26 -= 272;
          if (v26 == v11)
            goto LABEL_72;
          continue;
        }
      }
LABEL_50:
      if (!v27)
        goto LABEL_134;
      v85 = cricket::MediaSenderInfo::MediaSenderInfo(v27, (uint64_t)&v131);
      v86 = *(_OWORD *)v149;
      *(_QWORD *)(v85 + 216) = *(_QWORD *)&v149[16];
      *(_OWORD *)(v85 + 200) = v86;
      v87 = v150;
      v88 = v151;
      v89 = *(_OWORD *)v152;
      *(_QWORD *)(v85 + 269) = *(_QWORD *)&v152[13];
      *(_OWORD *)(v85 + 240) = v88;
      *(_OWORD *)(v85 + 256) = v89;
      *(_OWORD *)(v85 + 224) = v87;
      v91 = v154;
      v90 = v155;
      *(_OWORD *)(v85 + 280) = v153;
      *(_OWORD *)(v85 + 296) = v91;
      *(_OWORD *)(v85 + 312) = v90;
      v93 = v157;
      v92 = *(_OWORD *)v158;
      v94 = v156;
      *(_OWORD *)(v85 + 373) = *(_OWORD *)&v158[13];
      *(_OWORD *)(v85 + 344) = v93;
      *(_OWORD *)(v85 + 360) = v92;
      *(_OWORD *)(v85 + 328) = v94;
      *((_QWORD *)v2 + 1) = v85 + 392;
      if (v11)
        goto LABEL_71;
LABEL_73:
      if (v146[1])
      {
        v146[2] = v146[1];
        operator delete(v146[1]);
      }
      v102 = v127;
      if ((_QWORD)v145)
      {
        *((_QWORD *)&v145 + 1) = v145;
        operator delete((void *)v145);
      }
      if (v142)
      {
        v143 = v142;
        operator delete(v142);
      }
      if ((SHIBYTE(v139[3]) & 0x80000000) == 0)
      {
        v103 = (void *)v185;
        if (!(_QWORD)v185)
          goto LABEL_82;
        goto LABEL_81;
      }
      operator delete((void *)v139[1]);
      v103 = (void *)v185;
      if ((_QWORD)v185)
      {
LABEL_81:
        *((_QWORD *)&v185 + 1) = v103;
        operator delete(v103);
      }
LABEL_82:
      if (SHIBYTE(v167) < 0)
      {
        operator delete((void *)__src);
        v104 = (char *)*((_QWORD *)v127 + 1);
        if (!v104)
          goto LABEL_102;
        do
        {
LABEL_100:
          v106 = v104;
          v104 = *(char **)v104;
        }
        while (v104);
        goto LABEL_3;
      }
      v104 = (char *)*((_QWORD *)v127 + 1);
      if (v104)
        goto LABEL_100;
      do
      {
LABEL_102:
        v106 = (char *)*((_QWORD *)v102 + 2);
        v107 = *(_QWORD *)v106 == (_QWORD)v102;
        v102 = v106;
      }
      while (!v107);
LABEL_3:
      v3 = v106;
    }
    while (v106 != v124);
  }
  v108 = v2;
  v109 = *(_QWORD *)v2;
  v110 = *((_QWORD *)v108 + 1);
  if (v109 != v110)
  {
    v111 = (uint64_t *)((char *)a2 + 32);
    do
    {
      v113 = (char *)*((_QWORD *)this + 13);
      v112 = (char *)*((_QWORD *)this + 14);
      if (v113 != v112)
      {
        if (*(_BYTE *)(v109 + 108))
        {
          while (*(_DWORD *)(v109 + 104) != *((_DWORD *)v113 + 3))
          {
            v113 += 216;
            if (v113 == v112)
              goto LABEL_107;
          }
        }
        else
        {
          v113 += 216 * ((v112 - v113 - 216) / 0xD8uLL) + 216;
        }
      }
      if (v113 != v112)
      {
        (*(void (**)(void (***__return_ptr)(webrtc::RtpCodec *__hidden), char *))(*(_QWORD *)v113 + 16))(&v159, v113);
        LODWORD(v131) = *((_DWORD *)v113 + 3);
        webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)((char *)&v131 + 8), (const webrtc::RtpCodec *)&v159);
        *((_QWORD *)&v131 + 1) = off_24C0BCC30;
        LODWORD(v142) = v170;
        v114 = *v111;
        v115 = v131;
        v116 = (_QWORD *)((char *)a2 + 32);
        v117 = (_QWORD *)((char *)a2 + 32);
        if (*v111)
        {
          while (1)
          {
            while (1)
            {
              v117 = (_QWORD *)v114;
              v118 = *(_DWORD *)(v114 + 32);
              if ((int)v131 >= v118)
                break;
              v114 = *v117;
              v116 = v117;
              if (!*v117)
                goto LABEL_122;
            }
            if (v118 >= (int)v131)
              break;
            v114 = v117[1];
            if (!v114)
            {
              v116 = v117 + 1;
              goto LABEL_122;
            }
          }
        }
        else
        {
LABEL_122:
          v119 = operator new(0x98uLL);
          v119[8] = v115;
          webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v119 + 10), (const webrtc::RtpCodec *)((char *)&v131 + 8));
          *((_QWORD *)v119 + 5) = off_24C0BCC30;
          v119[36] = (_DWORD)v142;
          *(_QWORD *)v119 = 0;
          *((_QWORD *)v119 + 1) = 0;
          *((_QWORD *)v119 + 2) = v117;
          *v116 = v119;
          v120 = **((_QWORD **)a2 + 3);
          if (v120)
          {
            *((_QWORD *)a2 + 3) = v120;
            v119 = (_DWORD *)*v116;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a2 + 4), (uint64_t *)v119);
          ++*((_QWORD *)a2 + 5);
        }
        *((_QWORD *)&v131 + 1) = off_24C0BCBF0;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v139[2], v139[3]);
        if (v138)
        {
          v139[0] = v138;
          operator delete(v138);
        }
        if (SHIBYTE(v134) < 0)
          operator delete(v132);
        v159 = off_24C0BCBF0;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v167, v168);
        if (v165)
        {
          *(_QWORD *)&__src = v165;
          operator delete(v165);
        }
        if (SHIBYTE(v161) < 0)
          operator delete((void *)v160);
      }
LABEL_107:
      v109 += 392;
    }
    while (v109 != v110);
  }
  return 1;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::GetStats(cricket::WebRtcVoiceSendChannel *this, cricket::VoiceMediaSendInfo *a2)
{
  cricket::WebRtcVoiceSendChannel::GetStats((cricket::WebRtcVoiceSendChannel *)((char *)this - 64), a2);
  return 1;
}

void cricket::WebRtcVoiceSendChannel::SetEncoderToPacketizerFrameTransformer(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  void (*v20)(uint64_t, _BYTE *, _BYTE *);
  uint64_t v21;

  v3 = *(_QWORD *)(a1 + 256);
  if (!v3)
    goto LABEL_12;
  v4 = a1 + 256;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 != a1 + 256 && *(_DWORD *)(v4 + 32) <= a2)
  {
    v15 = *(_QWORD *)(v4 + 40);
    v16 = *a3;
    *a3 = 0;
    v17 = *(_QWORD *)(v15 + 464);
    *(_QWORD *)(v15 + 464) = v16;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = *(_QWORD *)(v15 + 472);
    v20 = (void (*)(uint64_t, _BYTE *, _BYTE *))absl::internal_any_invocable::EmptyManager;
    v21 = 0;
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v18 + 32))(v18, v15 + 104, v19);
    v20(1, v19, v19);
  }
  else
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  }
}

void `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::SetEncoderToPacketizerFrameTransformer(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  cricket::WebRtcVoiceSendChannel::SetEncoderToPacketizerFrameTransformer(a1 - 64, a2, a3);
}

void cricket::WebRtcVoiceSendChannel::GetRtpSendParameters(cricket::WebRtcVoiceSendChannel *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char *v4;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  webrtc::RtpCodec *v19;
  webrtc::RtpCodec *v20;
  _DWORD *v21;
  _QWORD v22[3];
  char v23;
  void *__p;
  void *v25;
  uint64_t v26[3];
  int v27;

  v4 = (char *)*((_QWORD *)this + 32);
  if (!v4)
    goto LABEL_12;
  v6 = (char *)this + 256;
  do
  {
    v7 = *((_DWORD *)v4 + 8);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (char **)v4;
    else
      v9 = (char **)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != (char *)this + 256 && *((_DWORD *)v6 + 8) <= a2)
  {
    webrtc::RtpParameters::RtpParameters((std::string *)a3, (const webrtc::RtpParameters *)(*((_QWORD *)v6 + 5) + 496));
    v17 = *((_QWORD *)this + 13);
    for (i = *((_QWORD *)this + 14); v17 != i; v17 += 216)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v17 + 16))(v22, v17);
      v19 = *(webrtc::RtpCodec **)(a3 + 56);
      if ((unint64_t)v19 >= *(_QWORD *)(a3 + 64))
      {
        v21 = std::vector<webrtc::RtpCodecParameters>::__push_back_slow_path<webrtc::RtpCodecParameters>((void **)(a3 + 48), (const webrtc::RtpCodec *)v22);
      }
      else
      {
        if (!v19)
        {
          __break(1u);
          return;
        }
        v20 = webrtc::RtpCodec::RtpCodec(v19, (const webrtc::RtpCodec *)v22);
        *(_QWORD *)v20 = off_24C0BCC30;
        *((_DWORD *)v20 + 26) = v27;
        v21 = (_DWORD *)((char *)v20 + 112);
      }
      *(_QWORD *)(a3 + 56) = v21;
      v22[0] = off_24C0BCBF0;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v26, v26[1]);
      if (__p)
      {
        v25 = __p;
        operator delete(__p);
      }
      if (v23 < 0)
        operator delete((void *)v22[1]);
    }
  }
  else
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    *(_BYTE *)(a3 + 124) = 0;
    *(_QWORD *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 144) = 0;
    *(_QWORD *)(a3 + 128) = 0;
    *(_WORD *)(a3 + 152) = 256;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 105) = 0u;
    *(_BYTE *)(a3 + 160) = 0;
    *(_BYTE *)(a3 + 164) = 0;
  }
}

void `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::GetRtpSendParameters(cricket::WebRtcVoiceSendChannel *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  cricket::WebRtcVoiceSendChannel::GetRtpSendParameters((cricket::WebRtcVoiceSendChannel *)((char *)this - 64), a2, a3);
}

void cricket::WebRtcVoiceSendChannel::SetRtpSendParameters(cricket::WebRtcVoiceSendChannel *this@<X0>, unsigned int a2@<W1>, const webrtc::RtpParameters *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v7;
  char *v10;
  unsigned int v11;
  BOOL v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, void (***)(cricket::Codec *__hidden));
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, void (***)(cricket::Codec *__hidden));
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 *v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  cricket::Codec *ifINSt3__16vectorIN7cricket5CodecENS1_9allocatorIS4_EEEEZNS3_22WebRtcVoiceSendChannel20SetRtpSendParametersEjRKN6webrtc13RtpParametersENS_12AnyInvocableIFvNS9_8RTCErrorEOEEEE3__1EEDTcl5beginclsr3stdE7declvalIRT_EEEESJ_OT0;
  void (***v57)(_QWORD);
  void (***v58)(_QWORD);
  void (***v59)(_QWORD);
  void (**v60)(_QWORD);
  BOOL v61;
  uint64_t v62;
  char *v63;
  _BYTE v64[16];
  __int128 v65;
  int v66;
  void *v67;
  __int128 v68;
  int v69;
  char v70;
  char v71;
  void *v72[6];
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[65];
  char v76;
  void (**v77)(cricket::Codec *__hidden);
  _BYTE v78[32];
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  uint64_t *v90;
  _QWORD v91[2];
  char *v92;
  char *v93;
  char *v94;
  char v95;
  void (**v96)(cricket::Codec *__hidden);
  uint64_t v97;
  std::string v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  char v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v7 = (char *)*((_QWORD *)this + 32);
  if (v7)
  {
    v10 = (char *)this + 256;
    do
    {
      v11 = *((_DWORD *)v7 + 8);
      v12 = v11 >= a2;
      if (v11 >= a2)
        v13 = (char **)v7;
      else
        v13 = (char **)(v7 + 8);
      if (v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != (char *)this + 256 && *((_DWORD *)v10 + 8) <= a2)
    {
      cricket::WebRtcVoiceSendChannel::GetRtpSendParameters(this, a2, (uint64_t)v72);
      v24 = v73;
      v25 = v74;
      v26 = *((_QWORD *)a3 + 6);
      if (v74 - v73 != *((_QWORD *)a3 + 7) - v26)
      {
LABEL_28:
        v30 = *(void (**)(uint64_t, void (***)(cricket::Codec *__hidden)))(a4 + 24);
        if (v30)
        {
          LODWORD(v77) = 10;
          v78[30] = 0;
          memset(v78, 0, 29);
          v30(a4, &v77);
          if ((v78[23] & 0x80000000) != 0)
            operator delete(*(void **)v78);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(1, a4, a4);
          *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
          *(_QWORD *)(a4 + 24) = 0;
        }
        *(_DWORD *)a5 = 10;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(_DWORD *)(a5 + 32) = 0;
        *(_BYTE *)(a5 + 36) = 0;
        *(_BYTE *)(a5 + 38) = 0;
        goto LABEL_78;
      }
      if (v73 != v74)
      {
        while (webrtc::RtpCodec::operator==(v24, v26) && *(_DWORD *)(v24 + 104) == *(_DWORD *)(v26 + 104))
        {
          v24 += 112;
          v26 += 112;
          if (v24 == v25)
            goto LABEL_25;
        }
        goto LABEL_28;
      }
LABEL_25:
      v27 = *((_QWORD *)a3 + 12);
      if (v27 == *((_QWORD *)a3 + 13))
        goto LABEL_73;
      v28 = *(int *)(v27 + 16);
      if (v28 > 3)
        v29 = 0;
      else
        v29 = dword_208F1E020[v28];
      cricket::MediaChannelUtil::TransportForMediaChannels::SetPreferredDscp((uint64_t)this + 16, v29, v22, v23);
      if (*((_BYTE *)this + 424))
      {
        v31 = *((_DWORD *)this + 88);
        v32 = *((_QWORD *)this + 45);
        v96 = &off_24C0B1418;
        v97 = 0;
        if (*((char *)this + 351) < 0)
          std::string::__init_copy_ctor_external(&v98, *((const std::string::value_type **)this + 41), *((_QWORD *)this + 42));
        else
          v98 = *(std::string *)((char *)this + 328);
        *(_QWORD *)&v99 = v31;
        *((_QWORD *)&v99 + 1) = v32;
        LOBYTE(v100) = 0;
        v102 = 0;
        v103 = 0;
        LOBYTE(v107) = 0;
        v109 = 0;
        v113 = 0;
        v112 = 0;
        v111 = 0;
        v110 = &v111;
        v115 = 0;
        v114 = 0;
        if (&v110 == (uint64_t **)((char *)this + 368))
        {
          v33 = 0;
        }
        else
        {
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v110, *((char **)this + 46), (char *)this + 376);
          v33 = v102;
        }
        v77 = &off_24C0B1418;
        *(_QWORD *)v78 = v97;
        *(std::string *)&v78[8] = v98;
        memset(&v98, 0, sizeof(v98));
        v79 = v99;
        LOBYTE(v80) = 0;
        v82 = 0;
        if (v33)
        {
          v80 = v100;
          v81 = v101;
          v101 = 0;
          v100 = 0uLL;
          v82 = 1;
        }
        v83 = v103;
        v84 = v104;
        v85 = v105;
        v86 = v106;
        v103 = 0;
        LOBYTE(v87) = 0;
        v89 = 0;
        if (v109)
        {
          v87 = v107;
          v88 = v108;
          v108 = 0;
          v107 = 0uLL;
          v89 = 1;
        }
        v90 = v110;
        v91[0] = v111;
        v91[1] = v112;
        if (v112)
        {
          *(_QWORD *)(v111 + 16) = v91;
          v110 = &v111;
          v111 = 0;
          v112 = 0;
        }
        else
        {
          v90 = v91;
        }
        v93 = 0;
        v92 = 0;
        v94 = 0;
        v34 = v113;
        v35 = v114;
        v36 = v114 - v113;
        if (v114 != v113)
        {
          v37 = 0xAAAAAAAAAAAAAAABLL * (v36 >> 4);
          if (v37 < 0x555555555555556)
          {
            v38 = (char *)operator new(v36);
            v39 = 0;
            v92 = v38;
            v93 = v38;
            v94 = &v38[48 * v37];
            while (1)
            {
              v40 = (__int128 *)(v34 + v39);
              v41 = (std::string *)&v38[v39];
              if (*(char *)(v34 + v39 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v40, *((_QWORD *)v40 + 1));
                v43 = (std::string *)&v38[v39 + 24];
                v44 = v34 + v39;
                v45 = v34 + v39 + 24;
                if ((*(char *)(v34 + v39 + 47) & 0x80000000) == 0)
                  goto LABEL_57;
LABEL_52:
                std::string::__init_copy_ctor_external(v43, *(const std::string::value_type **)v45, *(_QWORD *)(v44 + 32));
                v39 += 48;
                if (v34 + v39 == v35)
                  goto LABEL_58;
              }
              else
              {
                v42 = *v40;
                v41->__r_.__value_.__r.__words[2] = *((_QWORD *)v40 + 2);
                *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
                v43 = (std::string *)&v38[v39 + 24];
                v44 = v34 + v39;
                v45 = v34 + v39 + 24;
                if (*(char *)(v34 + v39 + 47) < 0)
                  goto LABEL_52;
LABEL_57:
                v46 = *(_OWORD *)v45;
                v43->__r_.__value_.__r.__words[2] = *(_QWORD *)(v45 + 16);
                *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v46;
                v39 += 48;
                if (v34 + v39 == v35)
                {
LABEL_58:
                  v93 = &v38[v39];
                  goto LABEL_59;
                }
              }
            }
          }
LABEL_86:
          abort();
        }
LABEL_59:
        v95 = 1;
        cricket::Codec::~Codec((cricket::Codec *)&v96);
      }
      else
      {
        LOBYTE(v77) = 0;
        v95 = 0;
      }
      v47 = *((_QWORD *)a3 + 12);
      if (*((_QWORD *)a3 + 13) != v47)
      {
        if (!*(_BYTE *)(v47 + 264) || !v95 || (cricket::Codec::MatchesRtpCodec((uint64_t)&v77, v47 + 160) & 1) != 0)
        {
LABEL_71:
          if (v95)
            cricket::Codec::~Codec((cricket::Codec *)&v77);
LABEL_73:
          webrtc::RtpParameters::RtpParameters((std::string *)&v77, a3);
          v57 = (void (***)(_QWORD))*((_QWORD *)&v79 + 1);
          if ((_QWORD)v80 != *((_QWORD *)&v79 + 1))
          {
            v58 = (void (***)(_QWORD))(v80 - 112);
            v59 = (void (***)(_QWORD))(v80 - 112);
            do
            {
              v60 = *v59;
              v59 -= 14;
              (*v60)(v58);
              v61 = v58 == v57;
              v58 = v59;
            }
            while (!v61);
          }
          *(_QWORD *)&v80 = v57;
          v62 = *((_QWORD *)v10 + 5);
          (*(void (**)(_QWORD, uint64_t, _BYTE *))(a4 + 16))(0, a4, v64);
          v65 = *(_OWORD *)(a4 + 16);
          *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
          *(_QWORD *)(a4 + 24) = 0;
          cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream::SetRtpParameters(a5, v62, (std::string *)&v77, (uint64_t)v64);
          ((void (*)(uint64_t, _BYTE *, _BYTE *))v65)(1, v64, v64);
          webrtc::RtpParameters::~RtpParameters((void **)&v77);
LABEL_78:
          webrtc::RtpParameters::~RtpParameters(v72);
          return;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
        {
          v55 = *((_QWORD *)a3 + 12);
          if (*((_QWORD *)a3 + 13) == v55 || !*(_BYTE *)(v55 + 264))
            goto LABEL_85;
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v48, v49, v50, v51, v52, v53, v54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
        }
        ifINSt3__16vectorIN7cricket5CodecENS1_9allocatorIS4_EEEEZNS3_22WebRtcVoiceSendChannel20SetRtpSendParametersEjRKN6webrtc13RtpParametersENS_12AnyInvocableIFvNS9_8RTCErrorEOEEEE3__1EEDTcl5beginclsr3stdE7declvalIRT_EEEESJ_OT0 = _ZN4absl9c_find_ifINSt3__16vectorIN7cricket5CodecENS1_9allocatorIS4_EEEEZNS3_22WebRtcVoiceSendChannel20SetRtpSendParametersEjRKN6webrtc13RtpParametersENS_12AnyInvocableIFvNS9_8RTCErrorEOEEEE3__1EEDTcl5beginclsr3stdE7declvalIRT_EEEESJ_OT0_(*((cricket::Codec **)this + 13), *((cricket::Codec **)this + 14), (uint64_t)a3);
        if (*((cricket::Codec **)this + 14) != ifINSt3__16vectorIN7cricket5CodecENS1_9allocatorIS4_EEEEZNS3_22WebRtcVoiceSendChannel20SetRtpSendParametersEjRKN6webrtc13RtpParametersENS_12AnyInvocableIFvNS9_8RTCErrorEOEEEE3__1EEDTcl5beginclsr3stdE7declvalIRT_EEEESJ_OT0)
        {
          cricket::Codec::Codec((cricket::Codec *)v75, ifINSt3__16vectorIN7cricket5CodecENS1_9allocatorIS4_EEEEZNS3_22WebRtcVoiceSendChannel20SetRtpSendParametersEjRKN6webrtc13RtpParametersENS_12AnyInvocableIFvNS9_8RTCErrorEOEEEE3__1EEDTcl5beginclsr3stdE7declvalIRT_EEEESJ_OT0);
          v76 = 1;
          cricket::WebRtcVoiceSendChannel::SetSendCodecs((std::string::size_type)this, (const cricket::Codec **)this + 13, (cricket::Codec *)v75);
          if (v76)
            cricket::Codec::~Codec((cricket::Codec *)v75);
          goto LABEL_71;
        }
        v66 = 7;
        v63 = (char *)operator new(0x38uLL);
        v67 = v63;
        v68 = xmmword_208F0BCB0;
        if (v63 > "Attempted to use an unsupported codec for layer 0"
          || v63 + 49 <= "Attempted to use an unsupported codec for layer 0")
        {
          strcpy(v63, "Attempted to use an unsupported codec for layer 0");
          v69 = 0;
          v70 = 0;
          v71 = 0;
          webrtc::InvokeSetParametersCallback(a4, &v66, a5);
          if (SHIBYTE(v68) < 0)
            operator delete(v67);
          if (v95)
            cricket::Codec::~Codec((cricket::Codec *)&v77);
          goto LABEL_78;
        }
      }
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  v21 = *(void (**)(uint64_t, void (***)(cricket::Codec *__hidden)))(a4 + 24);
  if (v21)
  {
    LODWORD(v77) = 10;
    v78[30] = 0;
    memset(v78, 0, 29);
    v21(a4, &v77);
    if ((v78[23] & 0x80000000) != 0)
      operator delete(*(void **)v78);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(1, a4, a4);
    *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a4 + 24) = 0;
  }
  *(_DWORD *)a5 = 10;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 36) = 0;
  *(_BYTE *)(a5 + 38) = 0;
}

cricket::Codec *_ZN4absl9c_find_ifINSt3__16vectorIN7cricket5CodecENS1_9allocatorIS4_EEEEZNS3_22WebRtcVoiceSendChannel20SetRtpSendParametersEjRKN6webrtc13RtpParametersENS_12AnyInvocableIFvNS9_8RTCErrorEOEEEE3__1EEDTcl5beginclsr3stdE7declvalIRT_EEEESJ_OT0_(cricket::Codec *a1, cricket::Codec *a2, uint64_t a3)
{
  const cricket::Codec *v3;
  uint64_t v6;
  char v7;
  _QWORD v9[28];

  v3 = a1;
  v9[27] = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    while (1)
    {
      cricket::Codec::Codec((cricket::Codec *)v9, v3);
      v6 = *(_QWORD *)(a3 + 96);
      if (*(_QWORD *)(a3 + 104) == v6 || !*(_BYTE *)(v6 + 264))
        __break(1u);
      v7 = cricket::Codec::MatchesRtpCodec((uint64_t)v9, v6 + 160);
      cricket::Codec::~Codec((cricket::Codec *)v9);
      if ((v7 & 1) != 0)
        break;
      v3 = (const cricket::Codec *)((char *)v3 + 216);
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::SetRtpSendParameters(uint64_t a1@<X0>, unsigned int a2@<W1>, const webrtc::RtpParameters *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  cricket::WebRtcVoiceSendChannel::SetRtpSendParameters((cricket::WebRtcVoiceSendChannel *)(a1 - 64), a2, a3, a4, a5);
}

void cricket::WebRtcVoiceReceiveChannel::~WebRtcVoiceReceiveChannel(cricket::WebRtcVoiceReceiveChannel *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;
  void **v6;
  uint64_t v7;
  void *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void (**v14)(char *);
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  while (*((_QWORD *)this + 62))
    cricket::WebRtcVoiceReceiveChannel::RemoveRecvStream(this, *(_DWORD *)(*((_QWORD *)this + 60) + 32));
  v2 = *((_QWORD *)this + 86);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 85);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((_BYTE *)this + 656)
    && (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 600, *((_QWORD *)this + 76)), *((char *)this + 583) < 0))
  {
    operator delete(*((void **)this + 70));
    v4 = (void **)*((_QWORD *)this + 63);
    if (!v4)
      goto LABEL_17;
  }
  else
  {
    v4 = (void **)*((_QWORD *)this + 63);
    if (!v4)
      goto LABEL_17;
  }
  v5 = (void **)*((_QWORD *)this + 64);
  v6 = v4;
  if (v5 != v4)
  {
    do
    {
      if (*((char *)v5 - 9) < 0)
        operator delete(*(v5 - 4));
      v5 -= 4;
    }
    while (v5 != v4);
    v6 = (void **)*((_QWORD *)this + 63);
  }
  *((_QWORD *)this + 64) = v4;
  operator delete(v6);
LABEL_17:
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 61));
  if ((*((char *)this + 479) & 0x80000000) == 0)
  {
    v7 = *((_QWORD *)this + 55);
    *((_QWORD *)this + 55) = 0;
    if (!v7)
      goto LABEL_20;
    goto LABEL_19;
  }
  operator delete(*((void **)this + 57));
  v7 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v7)
LABEL_19:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
LABEL_20:
  cricket::StreamParams::~StreamParams((cricket::WebRtcVoiceReceiveChannel *)((char *)this + 280));
  v8 = (void *)*((_QWORD *)this + 32);
  if (v8)
  {
    *((_QWORD *)this + 33) = v8;
    operator delete(v8);
  }
  if (*((_BYTE *)this + 216) && *((char *)this + 215) < 0)
  {
    operator delete(*((void **)this + 24));
    v9 = (char *)*((_QWORD *)this + 16);
    if (!v9)
      goto LABEL_31;
  }
  else
  {
    v9 = (char *)*((_QWORD *)this + 16);
    if (!v9)
      goto LABEL_31;
  }
  v10 = (char *)*((_QWORD *)this + 17);
  v11 = v9;
  if (v10 != v9)
  {
    v12 = v10 - 216;
    v13 = v10 - 216;
    do
    {
      v14 = *(void (***)(char *))v13;
      v13 -= 216;
      (*v14)(v12);
      v15 = v12 == v9;
      v12 = v13;
    }
    while (!v15);
    v11 = (char *)*((_QWORD *)this + 16);
  }
  *((_QWORD *)this + 17) = v9;
  operator delete(v11);
LABEL_31:
  std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy((uint64_t)this + 104, *((char **)this + 14));
  v16 = *((_QWORD *)this + 10);
  *(_BYTE *)(v16 + 4) = 0;
  do
  {
    v17 = __ldaxr((unsigned int *)v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)v16));
  if (!v18)
    MEMORY[0x20BD0ADEC]();
  *(_QWORD *)this = &off_24C0B69D8;
  *((_QWORD *)this + 2) = off_24C0B6A50;
  v19 = (unsigned int *)*((_QWORD *)this + 3);
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      MEMORY[0x20BD0ADEC]();
  }
}

{
  cricket::WebRtcVoiceReceiveChannel::~WebRtcVoiceReceiveChannel(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::WebRtcVoiceReceiveChannel::RemoveRecvStream(cricket::WebRtcVoiceReceiveChannel *this, unsigned __int32 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned __int32 v13;
  BOOL v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int32 *v24;
  __int32 *v25;
  __int32 *v26;
  __int32 *v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  BOOL v36;
  uint64_t *v37;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  v11 = (char *)*((_QWORD *)this + 61);
  if (!v11)
    goto LABEL_14;
  v12 = (char *)this + 488;
  do
  {
    v13 = *((_DWORD *)v11 + 8);
    v14 = v13 >= a2;
    if (v13 >= a2)
      v15 = (char **)v11;
    else
      v15 = (char **)(v11 + 8);
    if (v14)
      v12 = v11;
    v11 = *v15;
  }
  while (*v15);
  if (v12 != (char *)this + 488 && *((_DWORD *)v12 + 8) <= a2)
  {
    v24 = (__int32 *)*((_QWORD *)this + 33);
    v25 = wmemchr(*((__int32 **)this + 32), a2, ((uint64_t)v24 - *((_QWORD *)this + 32)) >> 2);
    if (v25)
      v26 = v25;
    else
      v26 = v24;
    v27 = (__int32 *)*((_QWORD *)this + 33);
    if (v26 != v27)
    {
      v28 = (char *)v27 - (char *)(v26 + 1);
      if (v27 != v26 + 1)
        memmove(v26, v26 + 1, (char *)v27 - (char *)(v26 + 1));
      *((_QWORD *)this + 33) = (char *)v26 + v28;
    }
    v29 = *((_QWORD *)v12 + 5);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v29 + 16) + 96))(*(_QWORD *)(v29 + 16), 0);
    v30 = *(_QWORD *)(v29 + 24);
    *(_QWORD *)(v29 + 24) = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = *((_QWORD *)v12 + 5);
    if (v31)
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v31 + 8) + 24))(*(_QWORD *)(v31 + 8), *(_QWORD *)(v31 + 16));
      v32 = *(_QWORD *)(v31 + 24);
      *(_QWORD *)(v31 + 24) = 0;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      MEMORY[0x20BD0ADEC](v31, 0x60C40CE71275ALL);
    }
    v33 = (char *)*((_QWORD *)v12 + 1);
    if (v33)
    {
      do
      {
        v34 = v33;
        v33 = *(char **)v33;
      }
      while (v33);
    }
    else
    {
      v35 = v12;
      do
      {
        v34 = (char *)*((_QWORD *)v35 + 2);
        v36 = *(_QWORD *)v34 == (_QWORD)v35;
        v35 = v34;
      }
      while (!v36);
    }
    if (*((char **)this + 60) == v12)
      *((_QWORD *)this + 60) = v34;
    v37 = (uint64_t *)*((_QWORD *)this + 61);
    --*((_QWORD *)this + 62);
    std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v37, (uint64_t *)v12);
    operator delete(v12);
    return 1;
  }
  else
  {
LABEL_14:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    return 0;
  }
}

void `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::~WebRtcVoiceReceiveChannel(cricket::WebRtcVoiceReceiveChannel *this)
{
  cricket::WebRtcVoiceReceiveChannel::~WebRtcVoiceReceiveChannel((cricket::WebRtcVoiceReceiveChannel *)((char *)this - 64));
}

{
  cricket::WebRtcVoiceReceiveChannel::~WebRtcVoiceReceiveChannel((cricket::WebRtcVoiceReceiveChannel *)((char *)this - 64));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::WebRtcVoiceReceiveChannel::SetReceiverParameters(cricket::Codec **this, const cricket::AudioReceiverParameters *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  char *v40;
  char *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  cricket::Codec *v51;
  _QWORD **v52;
  uint64_t **v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t **v56;
  _QWORD *v57;
  _QWORD *v58;
  int v59;
  _QWORD *v60;
  _QWORD *v61;
  char *v62;
  cricket::Codec *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  cricket::Codec *v69;
  cricket::Codec *v70;
  unsigned __int8 **v71;
  size_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  int v77;
  int v78;
  unsigned __int8 *v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned __int8 *v96;
  int v97;
  int v98;
  int v99;
  char *v100;
  int v101;
  char *v102;
  int v103;
  BOOL v104;
  char **v105;
  char *v106;
  char **v107;
  char **v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  int v124;
  char *v125;
  uint64_t *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  unsigned __int8 *v132;
  BOOL v133;
  void *v134;
  void **v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  const cricket::Codec **v147;
  char *v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t result;
  uint64_t v164;
  std::string::size_type v165;
  std::string::size_type v166;
  std::string::size_type v167;
  std::string::size_type size;
  std::string::size_type v169;
  std::string::size_type v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  unsigned __int8 *v176;
  uint64_t v177;
  std::string::size_type v178;
  std::string::size_type v179;
  std::string::size_type v180;
  uint64_t v181;
  _QWORD *v182;
  std::string::size_type v184;
  void *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  const cricket::AudioReceiverParameters *v189;
  uint64_t v190;
  cricket::WebRtcVoiceReceiveChannel *v191;
  void *v192[2];
  uint64_t v193;
  __int128 v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t **v198;
  char *v199;
  cricket::Codec *v200;
  _BYTE __p[24];
  uint64_t v202;
  __int128 v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  std::string v207[9];
  char v208;
  uint64_t v209;

  v209 = *MEMORY[0x24BDAC8D0];
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    cricket::MediaChannelParameters::ToString(a2, v207);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    if (SHIBYTE(v207[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v207[0].__r_.__value_.__l.__data_);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
LABEL_4:
    rtc::webrtc_logging_impl::Log("\r\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
LABEL_5:
  v18 = *((_QWORD *)a2 + 1);
  v19 = *((_QWORD *)a2 + 2);
  v191 = (cricket::WebRtcVoiceReceiveChannel *)this;
  if (v18 == v19)
  {
    v51 = 0;
    v199 = 0;
    v200 = 0;
    v198 = (uint64_t **)&v199;
    goto LABEL_45;
  }
  v189 = a2;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  do
  {
    while (1)
    {
      v23 = *(_DWORD *)(v18 + 12);
      if (v21 < v22)
        break;
      v24 = (v21 - v20) >> 2;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62)
        abort();
      if ((v22 - v20) >> 1 > v25)
        v25 = (v22 - v20) >> 1;
      if ((unint64_t)(v22 - v20) >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v25)
      {
LABEL_323:
        __break(1u);
LABEL_324:
        v165 = v207[0].__r_.__value_.__r.__words[0];
        goto LABEL_325;
      }
      if (v25 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v26 = 4 * v25;
      v27 = operator new(4 * v25);
      v28 = &v27[4 * v24];
      *(_DWORD *)v28 = v23;
      v29 = v28 + 4;
      if (v21 != v20)
      {
        v30 = v21 - v20 - 4;
        if (v30 >= 0xBC)
        {
          v32 = (v21 - 4 - v20) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v27[v21 - v20 - 4 - v32] > &v27[v21 - v20 - 4])
          {
            v31 = v21;
          }
          else if (&v21[-v32 - 4] > v21 - 4)
          {
            v31 = v21;
          }
          else if ((unint64_t)(v20 - v27) >= 0x20)
          {
            v33 = (v30 >> 2) + 1;
            v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
            v31 = &v21[-v34];
            v28 -= v34;
            v35 = &v27[4 * v24 - 16];
            v36 = v21 - 16;
            v37 = v33 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v38 = *(_OWORD *)v36;
              *(v35 - 1) = *((_OWORD *)v36 - 1);
              *v35 = v38;
              v35 -= 2;
              v36 -= 32;
              v37 -= 8;
            }
            while (v37);
            if (v33 == (v33 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_32;
          }
          else
          {
            v31 = v21;
          }
        }
        else
        {
          v31 = v21;
        }
        do
        {
          v39 = *((_DWORD *)v31 - 1);
          v31 -= 4;
          *((_DWORD *)v28 - 1) = v39;
          v28 -= 4;
        }
        while (v31 != v20);
      }
LABEL_32:
      v22 = &v27[v26];
      if (v20)
        operator delete(v20);
      v20 = v28;
      v21 = v29;
      v18 += 216;
      if (v18 == v19)
        goto LABEL_34;
    }
    if (!v21)
      goto LABEL_323;
    *(_DWORD *)v21 = v23;
    v21 += 4;
    v18 += 216;
  }
  while (v18 != v19);
LABEL_34:
  std::__sort<std::__less<int,int> &,int *>();
  v40 = v20;
  a2 = v189;
  if (v20 == v21)
  {
LABEL_39:
    if (!v20)
      goto LABEL_41;
    goto LABEL_40;
  }
  v41 = v20 + 4;
  while (v41 != v21)
  {
    v42 = *((_DWORD *)v41 - 1);
    v43 = *(_DWORD *)v41;
    v41 += 4;
    if (v42 == v43)
    {
      v40 = v41 - 8;
      goto LABEL_39;
    }
  }
  v40 = v21;
  if (v20)
LABEL_40:
    operator delete(v20);
LABEL_41:
  if (v40 == v21)
  {
    v67 = *((_QWORD *)v189 + 1);
    v66 = *((_QWORD *)v189 + 2);
    v199 = 0;
    v200 = 0;
    v198 = (uint64_t **)&v199;
    v190 = v66;
    if (v67 != v66)
    {
      this = (cricket::Codec **)v191;
      v68 = (char *)v191 + 112;
      while (1)
      {
        v70 = this[16];
        v69 = this[17];
        if (v70 == v69)
        {
LABEL_79:
          v207[0].__r_.__value_.__s.__data_[0] = 0;
          v208 = 0;
        }
        else
        {
          while ((cricket::Codec::Matches(v70, (const cricket::Codec *)v67) & 1) == 0)
          {
            v70 = (cricket::Codec *)((char *)v70 + 216);
            if (v70 == v69)
              goto LABEL_79;
          }
          cricket::Codec::Codec((cricket::Codec *)v207, v70);
          v208 = 1;
          if (HIDWORD(v207[0].__r_.__value_.__r.__words[1]) != *(_DWORD *)(v67 + 12)
            && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            if (!v208)
              goto LABEL_323;
            v187 = v187 & 0xFFFFFFFF00000000 | 0x4312;
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v109, v110, v111, v112, v113, v114, v115, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
          }
        }
        v71 = (unsigned __int8 **)(v67 + 16);
        if (*(char *)(v67 + 39) < 0)
        {
          v72 = *(_QWORD *)(v67 + 24);
          if ((v72 & 0x8000000000000000) != 0)
            goto LABEL_323;
          v73 = *v71;
          if (v72)
          {
            if (!v73)
              goto LABEL_323;
          }
        }
        else
        {
          v72 = *(unsigned __int8 *)(v67 + 39);
          v73 = (unsigned __int8 *)(v67 + 16);
        }
        webrtc::SdpAudioFormat::SdpAudioFormat(v192, v73, v72, *(_DWORD *)(v67 + 40), *(_QWORD *)(v67 + 48), (_QWORD *)(v67 + 168));
        v74 = *(unsigned __int8 *)(v67 + 39);
        v75 = (unsigned __int8 *)(v67 + 16);
        v76 = v74;
        if (*(char *)(v67 + 39) < 0)
        {
          v76 = *(_QWORD *)(v67 + 24);
          if (v76 < 0)
            goto LABEL_323;
          v75 = *v71;
          if (v76)
          {
            if (!v75)
              goto LABEL_323;
          }
        }
        if (v76 == 2)
        {
          v77 = *v75;
          if (v77 == 67)
            goto LABEL_94;
          if ((v77 - 65) < 0x1A)
            LOBYTE(v77) = v77 + 32;
          if (v77 == 99)
          {
LABEL_94:
            v78 = v75[1];
            if (v78 == 78)
              break;
            if ((v78 - 65) < 0x1A)
              LOBYTE(v78) = v78 + 32;
            if (v78 == 110)
              break;
          }
        }
        v79 = (unsigned __int8 *)(v67 + 16);
        v80 = *(unsigned __int8 *)(v67 + 39);
        if ((v74 & 0x80) != 0)
        {
          v80 = *(_QWORD *)(v67 + 24);
          if (v80 < 0)
            goto LABEL_323;
          v79 = *v71;
          if (v80)
          {
            if (!v79)
              goto LABEL_323;
          }
        }
        if (v80 == 15)
        {
          v81 = *v79;
          if (v81 == 116)
            goto LABEL_107;
          if ((v81 - 65) < 0x1A)
            LOBYTE(v81) = v81 + 32;
          if (v81 == 116)
          {
LABEL_107:
            v82 = v79[1];
            if (v82 == 101)
              goto LABEL_162;
            if ((v82 - 65) < 0x1A)
              LOBYTE(v82) = v82 + 32;
            if (v82 == 101)
            {
LABEL_162:
              v83 = v79[2];
              if (v83 == 108)
                goto LABEL_343;
              if ((v83 - 65) < 0x1A)
                LOBYTE(v83) = v83 + 32;
              if (v83 == 108)
              {
LABEL_343:
                v84 = v79[3];
                if (v84 == 101)
                  goto LABEL_344;
                if ((v84 - 65) < 0x1A)
                  LOBYTE(v84) = v84 + 32;
                if (v84 == 101)
                {
LABEL_344:
                  v85 = v79[4];
                  if (v85 == 112)
                    goto LABEL_345;
                  if ((v85 - 65) < 0x1A)
                    LOBYTE(v85) = v85 + 32;
                  if (v85 == 112)
                  {
LABEL_345:
                    v86 = v79[5];
                    if (v86 == 104)
                      goto LABEL_346;
                    if ((v86 - 65) < 0x1A)
                      LOBYTE(v86) = v86 + 32;
                    if (v86 == 104)
                    {
LABEL_346:
                      v87 = v79[6];
                      if (v87 == 111)
                        goto LABEL_347;
                      if ((v87 - 65) < 0x1A)
                        LOBYTE(v87) = v87 + 32;
                      if (v87 == 111)
                      {
LABEL_347:
                        v88 = v79[7];
                        if (v88 == 110)
                          goto LABEL_348;
                        if ((v88 - 65) < 0x1A)
                          LOBYTE(v88) = v88 + 32;
                        if (v88 == 110)
                        {
LABEL_348:
                          v89 = v79[8];
                          if (v89 == 101)
                            goto LABEL_349;
                          if ((v89 - 65) < 0x1A)
                            LOBYTE(v89) = v89 + 32;
                          if (v89 == 101)
                          {
LABEL_349:
                            v90 = v79[9];
                            if (v90 == 45)
                              goto LABEL_350;
                            if ((v90 - 65) < 0x1A)
                              LOBYTE(v90) = v90 + 32;
                            if (v90 == 45)
                            {
LABEL_350:
                              v91 = v79[10];
                              if (v91 == 101)
                                goto LABEL_351;
                              if ((v91 - 65) < 0x1A)
                                LOBYTE(v91) = v91 + 32;
                              if (v91 == 101)
                              {
LABEL_351:
                                v92 = v79[11];
                                if (v92 == 118)
                                  goto LABEL_352;
                                if ((v92 - 65) < 0x1A)
                                  LOBYTE(v92) = v92 + 32;
                                if (v92 == 118)
                                {
LABEL_352:
                                  v93 = v79[12];
                                  if (v93 == 101)
                                    goto LABEL_353;
                                  if ((v93 - 65) < 0x1A)
                                    LOBYTE(v93) = v93 + 32;
                                  if (v93 == 101)
                                  {
LABEL_353:
                                    v94 = v79[13];
                                    if (v94 == 110)
                                      goto LABEL_354;
                                    if ((v94 - 65) < 0x1A)
                                      LOBYTE(v94) = v94 + 32;
                                    if (v94 == 110)
                                    {
LABEL_354:
                                      v95 = v79[14];
                                      if (v95 == 116)
                                        break;
                                      if ((v95 - 65) < 0x1A)
                                        LOBYTE(v95) = v95 + 32;
                                      if (v95 == 116)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v96 = (unsigned __int8 *)(v67 + 16);
        if ((v74 & 0x80) != 0)
        {
          v74 = *(_QWORD *)(v67 + 24);
          if (v74 < 0)
            goto LABEL_323;
          v96 = *v71;
          if (v74)
          {
            if (!v96)
              goto LABEL_323;
          }
        }
        if (v74 == 3)
        {
          v97 = *v96;
          if (v97 == 114)
            goto LABEL_172;
          if ((v97 - 65) < 0x1A)
            LOBYTE(v97) = v97 + 32;
          if (v97 == 114)
          {
LABEL_172:
            v98 = v96[1];
            if (v98 == 101)
              goto LABEL_179;
            if ((v98 - 65) < 0x1A)
              LOBYTE(v98) = v98 + 32;
            if (v98 == 101)
            {
LABEL_179:
              v99 = v96[2];
              if (v99 == 100)
                break;
              if ((v99 - 65) < 0x1A)
                LOBYTE(v99) = v99 + 32;
              if (v99 == 100)
                break;
            }
          }
        }
        if (((*(uint64_t (**)(_QWORD, void **))(**((_QWORD **)this[12] + 6) + 40))(*((_QWORD *)this[12] + 6), v192) & 1) != 0)break;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          rtc::ToString((rtc *)v192, __p);
          v188 = v188 & 0xFFFFFFFF00000000 | 0x4353;
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v116, v117, v118, v119, v120, v121, v122, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        v123 = 0;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v195, v196);
        if (SHIBYTE(v193) < 0)
          goto LABEL_218;
LABEL_219:
        if (v208)
          cricket::Codec::~Codec((cricket::Codec *)v207);
        if ((v123 & 1) == 0)
        {
          std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy((uint64_t)&v198, v199);
          return 0;
        }
        v67 += 216;
        if (v67 == v190)
        {
          v51 = v200;
          a2 = v189;
          goto LABEL_45;
        }
      }
      v100 = *(char **)v68;
      v101 = *(_DWORD *)(v67 + 12);
      if (!*(_QWORD *)v68)
        goto LABEL_191;
      v102 = (char *)v191 + 112;
      do
      {
        v103 = *((_DWORD *)v100 + 8);
        v104 = v103 < v101;
        if (v103 >= v101)
          v105 = (char **)v100;
        else
          v105 = (char **)(v100 + 8);
        if (!v104)
          v102 = v100;
        v100 = *v105;
      }
      while (*v105);
      if (v102 == v68 || v101 < *((_DWORD *)v102 + 8))
      {
LABEL_191:
        *(_DWORD *)__p = *(_DWORD *)(v67 + 12);
        *(_OWORD *)&__p[8] = *(_OWORD *)v192;
        v202 = v193;
        v192[0] = 0;
        v192[1] = 0;
        v193 = 0;
        v203 = v194;
        v204 = v195;
        v205 = v196;
        v206 = v197;
        if (v197)
        {
          *(_QWORD *)(v196 + 16) = &v205;
          v195 = &v196;
          v196 = 0;
          v197 = 0;
          v106 = v199;
          v107 = &v199;
          v108 = &v199;
          if (v199)
            goto LABEL_206;
        }
        else
        {
          v204 = &v205;
          v106 = v199;
          v107 = &v199;
          v108 = &v199;
          if (v199)
          {
            while (1)
            {
LABEL_206:
              while (1)
              {
                v108 = (char **)v106;
                v124 = *((_DWORD *)v106 + 8);
                if (v101 >= v124)
                  break;
                v106 = *v108;
                v107 = v108;
                if (!*v108)
                  goto LABEL_210;
              }
              if (v124 >= v101)
                goto LABEL_214;
              v106 = v108[1];
              if (!v106)
              {
                v107 = v108 + 1;
                break;
              }
            }
          }
        }
LABEL_210:
        v125 = (char *)operator new(0x68uLL);
        v126 = (uint64_t *)v125;
        *((_DWORD *)v125 + 8) = v101;
        *(_OWORD *)(v125 + 40) = *(_OWORD *)&__p[8];
        *((_QWORD *)v125 + 7) = v202;
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        v202 = 0;
        *((_OWORD *)v125 + 4) = v203;
        v127 = v205;
        *((_QWORD *)v125 + 10) = v204;
        *((_QWORD *)v125 + 11) = v127;
        v128 = v125 + 88;
        v129 = v206;
        *((_QWORD *)v125 + 12) = v206;
        if (v129)
        {
          *(_QWORD *)(v127 + 16) = v128;
          v204 = &v205;
          v205 = 0;
          v206 = 0;
          *(_QWORD *)v125 = 0;
          *((_QWORD *)v125 + 1) = 0;
          *((_QWORD *)v125 + 2) = v108;
          *v107 = v125;
          v130 = *v198;
          if (!*v198)
          {
LABEL_213:
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v199, v126);
            v200 = (cricket::Codec *)((char *)v200 + 1);
LABEL_214:
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v204, v205);
            if (SHIBYTE(v202) < 0)
              operator delete(*(void **)&__p[8]);
            v123 = 1;
            goto LABEL_217;
          }
        }
        else
        {
          *((_QWORD *)v125 + 10) = v128;
          *(_QWORD *)v125 = 0;
          *((_QWORD *)v125 + 1) = 0;
          *((_QWORD *)v125 + 2) = v108;
          *v107 = v125;
          v130 = *v198;
          if (!*v198)
            goto LABEL_213;
        }
        v198 = (uint64_t **)v130;
        v126 = (uint64_t *)*v107;
        goto LABEL_213;
      }
      if (v102[63] < 0)
      {
        v131 = *((_QWORD *)v102 + 6);
        if ((v131 & 0x8000000000000000) != 0)
          goto LABEL_323;
        v132 = (unsigned __int8 *)*((_QWORD *)v102 + 5);
        v133 = v131 && v132 == 0;
        if (v133)
          goto LABEL_323;
      }
      else
      {
        v131 = v102[63];
        v132 = (unsigned __int8 *)(v102 + 40);
      }
      if (SHIBYTE(v193) < 0)
      {
        v134 = v192[1];
        if (((unint64_t)v192[1] & 0x8000000000000000) != 0)
          goto LABEL_323;
        v135 = (void **)v192[0];
        if (v192[1])
        {
          if (!v192[0])
            goto LABEL_323;
        }
      }
      else
      {
        v134 = (void *)HIBYTE(v193);
        v135 = v192;
      }
      if ((void *)v131 == v134)
      {
        if (v131)
        {
          while (1)
          {
            v137 = *v132++;
            v136 = v137;
            v139 = *(unsigned __int8 *)v135;
            v135 = (void **)((char *)v135 + 1);
            v138 = v139;
            if (v136 != v139)
            {
              if ((v136 - 65) < 0x1A)
                LOBYTE(v136) = v136 + 32;
              if ((v138 - 65) < 0x1A)
                LOBYTE(v138) = v138 + 32;
              if (v136 != v138)
                break;
            }
            if (!--v131)
              goto LABEL_240;
          }
        }
        else
        {
LABEL_240:
          if (*((_DWORD *)v102 + 16) == (_DWORD)v194 && *((_QWORD *)v102 + 9) == *((_QWORD *)&v194 + 1))
            goto LABEL_191;
        }
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v186 = v186 & 0xFFFFFFFF00000000 | 0x43D3;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v140, v141, v142, v143, v144, v145, v146, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
      }
      v123 = 0;
LABEL_217:
      this = (cricket::Codec **)v191;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v195, v196);
      if ((SHIBYTE(v193) & 0x80000000) == 0)
        goto LABEL_219;
LABEL_218:
      operator delete(v192[0]);
      goto LABEL_219;
    }
    v51 = 0;
    this = (cricket::Codec **)v191;
LABEL_45:
    v52 = (_QWORD **)(this + 13);
    if (v51 == this[15])
    {
      v53 = v198;
      if (v198 == (uint64_t **)&v199)
      {
LABEL_282:
        std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy((uint64_t)&v198, v199);
        v158 = *((_QWORD *)a2 + 4);
        v159 = *((_QWORD *)a2 + 5);
        v160 = (uint64_t *)((char *)a2 + 32);
        v161 = v159 - v158;
        if (v161)
          v162 = v158;
        else
          v162 = 0;
        result = cricket::ValidateRtpExtensions(v162, v161 >> 5);
        if (!(_DWORD)result)
          return result;
        v164 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v191 + 30) + 184))(*((_QWORD *)v191 + 30));
        cricket::FilterRtpExtensions(v160, (unsigned int (*)(const std::string::value_type *, uint64_t))webrtc::RtpExtension::IsSupportedForAudio, 0, v164, (uint64_t)v207);
        v165 = *((_QWORD *)v191 + 63);
        v166 = *((_QWORD *)v191 + 64);
        size = v207[0].__r_.__value_.__l.__size_;
        v167 = v207[0].__r_.__value_.__r.__words[0];
        v169 = v207[0].__r_.__value_.__l.__size_ - v207[0].__r_.__value_.__r.__words[0];
        if (v166 - v165 == v207[0].__r_.__value_.__l.__size_ - v207[0].__r_.__value_.__r.__words[0])
        {
          if (v165 == v166)
          {
LABEL_326:
            if (v167)
            {
              v184 = v207[0].__r_.__value_.__l.__size_;
              v185 = (void *)v167;
              if (v207[0].__r_.__value_.__l.__size_ != v167)
              {
                do
                {
                  if (*(char *)(v184 - 9) < 0)
                    operator delete(*(void **)(v184 - 32));
                  v184 -= 32;
                }
                while (v184 != v167);
                v185 = (void *)v207[0].__r_.__value_.__r.__words[0];
              }
              v207[0].__r_.__value_.__l.__size_ = v167;
              operator delete(v185);
            }
            return 1;
          }
          v170 = v207[0].__r_.__value_.__r.__words[0];
          v171 = *((_QWORD *)v191 + 63);
          while (1)
          {
            v172 = *(unsigned __int8 *)(v171 + 23);
            if ((v172 & 0x80u) == 0)
              v173 = *(unsigned __int8 *)(v171 + 23);
            else
              v173 = *(_QWORD *)(v171 + 8);
            v174 = *(unsigned __int8 *)(v170 + 23);
            v175 = (char)v174;
            if ((v174 & 0x80u) != 0)
              v174 = *(_QWORD *)(v170 + 8);
            if (v173 != v174)
              break;
            if (v175 >= 0)
              v176 = (unsigned __int8 *)v170;
            else
              v176 = *(unsigned __int8 **)v170;
            if ((v172 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v171, v176, *(_QWORD *)(v171 + 8)))
                break;
            }
            else if (*(_BYTE *)(v171 + 23))
            {
              v177 = 0;
              while (*(unsigned __int8 *)(v171 + v177) == v176[v177])
              {
                if (v172 == ++v177)
                  goto LABEL_305;
              }
              break;
            }
LABEL_305:
            if (*(_DWORD *)(v171 + 24) != *(_DWORD *)(v170 + 24)
              || *(unsigned __int8 *)(v171 + 28) != *(unsigned __int8 *)(v170 + 28))
            {
              break;
            }
            v171 += 32;
            v170 += 32;
            if (v171 == v166)
              goto LABEL_326;
          }
        }
        *((_QWORD *)v191 + 63) = v167;
        *((_QWORD *)v191 + 64) = size;
        v207[0].__r_.__value_.__r.__words[0] = v165;
        v207[0].__r_.__value_.__l.__size_ = v166;
        v178 = *((_QWORD *)v191 + 65);
        *((_QWORD *)v191 + 65) = *((_QWORD *)&v207[0].__r_.__value_.__l + 2);
        v207[0].__r_.__value_.__r.__words[2] = v178;
        *(_QWORD *)__p = 0;
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[14] = 0;
        if (size == v167)
          v179 = 0;
        else
          v179 = v167;
        if (size != v167)
        {
          v180 = v179 + v169;
          while (1)
          {
            if (*(char *)(v167 + 23) < 0)
            {
              v181 = *(_QWORD *)(v167 + 8);
              if (v181 < 0)
                goto LABEL_323;
              v182 = *(_QWORD **)v167;
              if (v181 && v182 == 0)
                goto LABEL_323;
            }
            else
            {
              v181 = *(unsigned __int8 *)(v167 + 23);
              v182 = (_QWORD *)v167;
            }
            webrtc::RtpHeaderExtensionMap::RegisterByUri((webrtc::RtpHeaderExtensionMap *)__p, *(_DWORD *)(v167 + 24), v182, v181);
            v167 += 32;
            if (v167 == v180)
              goto LABEL_324;
          }
        }
LABEL_325:
        *((_OWORD *)v191 + 33) = *(_OWORD *)__p;
        *(_QWORD *)((char *)v191 + 542) = *(_QWORD *)&__p[14];
        v167 = v165;
        goto LABEL_326;
      }
      v54 = *v52;
      while (*((_DWORD *)v53 + 8) == *((_DWORD *)v54 + 8)
           && webrtc::operator==((uint64_t)(v53 + 5), (unsigned __int8 *)v54 + 40))
      {
        v55 = v53[1];
        v56 = v53;
        if (v55)
        {
          do
          {
            v53 = (uint64_t **)v55;
            v55 = (uint64_t *)*v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            v53 = (uint64_t **)v56[2];
            v133 = *v53 == (uint64_t *)v56;
            v56 = v53;
          }
          while (!v133);
        }
        v57 = (_QWORD *)v54[1];
        if (v57)
        {
          do
          {
            v58 = v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v58 = (_QWORD *)v54[2];
            v133 = *v58 == (_QWORD)v54;
            v54 = v58;
          }
          while (!v133);
        }
        v54 = v58;
        if (v53 == (uint64_t **)&v199)
          goto LABEL_282;
      }
    }
    v59 = *((unsigned __int8 *)v191 + 234);
    if (*((_BYTE *)v191 + 234))
    {
      v60 = (_QWORD *)*((_QWORD *)v191 + 60);
      if (v60 != (_QWORD *)((char *)v191 + 488))
      {
        do
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v60[5] + 16) + 24))(*(_QWORD *)(v60[5] + 16));
          v64 = (_QWORD *)v60[1];
          if (v64)
          {
            do
            {
              v65 = v64;
              v64 = (_QWORD *)*v64;
            }
            while (v64);
          }
          else
          {
            do
            {
              v65 = (_QWORD *)v60[2];
              v133 = *v65 == (_QWORD)v60;
              v60 = v65;
            }
            while (!v133);
          }
          v60 = v65;
        }
        while (v65 != (_QWORD *)((char *)v191 + 488));
      }
      *((_BYTE *)v191 + 234) = 0;
    }
    v61 = (_QWORD *)((char *)v191 + 112);
    std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy((uint64_t)v52, *((char **)v191 + 14));
    v62 = v199;
    *((_QWORD *)v191 + 13) = v198;
    *((_QWORD *)v191 + 14) = v62;
    v63 = v200;
    *((_QWORD *)v191 + 15) = v200;
    if (v63)
    {
      *((_QWORD *)v62 + 2) = v61;
      v198 = (uint64_t **)&v199;
      v199 = 0;
      v200 = 0;
    }
    else
    {
      *v52 = v61;
    }
    v147 = (const cricket::Codec **)a2;
    v148 = (char *)a2 + 8;
    v149 = (_QWORD *)*((_QWORD *)v191 + 60);
    v150 = (_QWORD *)((char *)v191 + 488);
    if (v149 != (_QWORD *)((char *)v191 + 488))
    {
      do
      {
        v151 = *(_QWORD *)(v149[5] + 16);
        *(_OWORD *)&v207[0].__r_.__value_.__r.__words[1] = 0uLL;
        v207[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v207[0].__r_.__value_.__l.__size_;
        std::map<int,webrtc::SdpAudioFormat>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::SdpAudioFormat>,std::__tree_node<std::__value_type<int,webrtc::SdpAudioFormat>,void *> *,long>>>((uint64_t *)v207, *v52, v61);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v151 + 56))(v151, v207);
        std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy((uint64_t)v207, (char *)v207[0].__r_.__value_.__l.__size_);
        v152 = (_QWORD *)v149[1];
        if (v152)
        {
          do
          {
            v153 = v152;
            v152 = (_QWORD *)*v152;
          }
          while (v152);
        }
        else
        {
          do
          {
            v153 = (_QWORD *)v149[2];
            v133 = *v153 == (_QWORD)v149;
            v149 = v153;
          }
          while (!v133);
        }
        v149 = v153;
      }
      while (v153 != v150);
    }
    a2 = (const cricket::AudioReceiverParameters *)v147;
    if ((char *)v191 + 128 != v148)
      std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)v191 + 16, v147[1], v147[2], 0x84BDA12F684BDA13 * ((v147[2] - v147[1]) >> 3));
    if (*((unsigned __int8 *)v191 + 234) != v59)
    {
      v154 = (_QWORD *)*((_QWORD *)v191 + 60);
      if (v154 != v150)
      {
        if (v59)
          v155 = 2;
        else
          v155 = 3;
        do
        {
          (*(void (**)(void))(**(_QWORD **)(v154[5] + 16) + 8 * v155))();
          v156 = (_QWORD *)v154[1];
          if (v156)
          {
            do
            {
              v157 = v156;
              v156 = (_QWORD *)*v156;
            }
            while (v156);
          }
          else
          {
            do
            {
              v157 = (_QWORD *)v154[2];
              v133 = *v157 == (_QWORD)v154;
              v154 = v157;
            }
            while (!v133);
          }
          v154 = v157;
        }
        while (v157 != v150);
      }
      *((_BYTE *)v191 + 234) = v59;
    }
    goto LABEL_282;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  return 0;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::SetReceiverParameters(cricket::Codec **this, const cricket::AudioReceiverParameters *a2)
{
  return cricket::WebRtcVoiceReceiveChannel::SetReceiverParameters(this - 8, a2);
}

void cricket::WebRtcVoiceReceiveChannel::GetRtpReceiverParameters(cricket::WebRtcVoiceReceiveChannel *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char *v4;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  webrtc::RtpCodec *v21;
  _DWORD *v22;
  _QWORD v23[3];
  char v24;
  void *__p;
  void *v26;
  uint64_t v27[3];
  int v28;
  _OWORD v29[3];
  _OWORD v30[3];
  _BYTE v31[25];
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  char v37;
  char v38;

  v32 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v36 = 256;
  memset(v29, 0, sizeof(v29));
  memset(v30, 0, sizeof(v30));
  memset(v31, 0, sizeof(v31));
  v37 = 0;
  v38 = 0;
  v4 = (char *)*((_QWORD *)this + 61);
  if (!v4)
    goto LABEL_12;
  v6 = (char *)this + 488;
  do
  {
    v7 = *((_DWORD *)v4 + 8);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (char **)v4;
    else
      v9 = (char **)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == (char *)this + 488 || *((_DWORD *)v6 + 8) > a2)
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    *(_BYTE *)(a3 + 124) = 0;
    *(_QWORD *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 144) = 0;
    *(_QWORD *)(a3 + 128) = 0;
    *(_WORD *)(a3 + 152) = 256;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 105) = 0u;
    *(_BYTE *)(a3 + 160) = 0;
    *(_BYTE *)(a3 + 164) = 0;
LABEL_15:
    webrtc::RtpParameters::~RtpParameters((void **)v29);
    return;
  }
  *(_QWORD *)&v31[8] = std::vector<webrtc::RtpEncodingParameters>::__emplace_back_slow_path<>((void **)v31);
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v6 + 5) + 16) + 128))(*(_QWORD *)(*((_QWORD *)v6 + 5) + 16));
  if (*(_QWORD *)v31 != *(_QWORD *)&v31[8])
  {
    v18 = *(_QWORD *)&v31[8] - 272;
    *(_DWORD *)v18 = v17;
    *(_BYTE *)(v18 + 4) = 1;
    if ((char *)&v30[1] + 8 != (char *)this + 504)
      std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)&v30[1] + 1, *((_QWORD *)this + 63), *((_QWORD *)this + 64), (uint64_t)(*((_QWORD *)this + 64) - *((_QWORD *)this + 63)) >> 5);
    v19 = *((_QWORD *)this + 16);
    for (i = *((_QWORD *)this + 17); v19 != i; v19 += 216)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v19 + 16))(v23, v19);
      if (*((_QWORD *)&v30[0] + 1) >= *(_QWORD *)&v30[1])
      {
        v22 = std::vector<webrtc::RtpCodecParameters>::__push_back_slow_path<webrtc::RtpCodecParameters>((void **)v30, (const webrtc::RtpCodec *)v23);
      }
      else
      {
        if (!*((_QWORD *)&v30[0] + 1))
          goto LABEL_31;
        v21 = webrtc::RtpCodec::RtpCodec(*((webrtc::RtpCodec **)&v30[0] + 1), (const webrtc::RtpCodec *)v23);
        *(_QWORD *)v21 = off_24C0BCC30;
        *((_DWORD *)v21 + 26) = v28;
        v22 = (_DWORD *)((char *)v21 + 112);
      }
      *((_QWORD *)&v30[0] + 1) = v22;
      v23[0] = off_24C0BCBF0;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v27, v27[1]);
      if (__p)
      {
        v26 = __p;
        operator delete(__p);
      }
      if (v24 < 0)
        operator delete((void *)v23[1]);
    }
    webrtc::RtpParameters::RtpParameters((std::string *)a3, (const webrtc::RtpParameters *)v29);
    goto LABEL_15;
  }
LABEL_31:
  __break(1u);
}

void `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::GetRtpReceiverParameters(cricket::WebRtcVoiceReceiveChannel *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  cricket::WebRtcVoiceReceiveChannel::GetRtpReceiverParameters((cricket::WebRtcVoiceReceiveChannel *)((char *)this - 64), a2, a3);
}

void cricket::WebRtcVoiceReceiveChannel::GetDefaultRtpReceiveParameters(cricket::WebRtcVoiceReceiveChannel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  webrtc::RtpCodec *v6;
  webrtc::RtpCodec *v7;
  _DWORD *v8;
  _QWORD v9[3];
  char v10;
  void *__p;
  void *v12;
  uint64_t v13[3];
  int v14;

  *(_BYTE *)(a2 + 124) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_WORD *)(a2 + 152) = 256;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 105) = 0u;
  *(_BYTE *)(a2 + 160) = 0;
  *(_BYTE *)(a2 + 164) = 0;
  if (*((_QWORD *)this + 55))
  {
    *(_QWORD *)(a2 + 104) = std::vector<webrtc::RtpEncodingParameters>::__emplace_back_slow_path<>((void **)(a2 + 96));
    v4 = *((_QWORD *)this + 16);
    for (i = *((_QWORD *)this + 17); v4 != i; v4 += 216)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v4 + 16))(v9, v4);
      v6 = *(webrtc::RtpCodec **)(a2 + 56);
      if ((unint64_t)v6 >= *(_QWORD *)(a2 + 64))
      {
        v8 = std::vector<webrtc::RtpCodecParameters>::__push_back_slow_path<webrtc::RtpCodecParameters>((void **)(a2 + 48), (const webrtc::RtpCodec *)v9);
      }
      else
      {
        if (!v6)
        {
          __break(1u);
          return;
        }
        v7 = webrtc::RtpCodec::RtpCodec(v6, (const webrtc::RtpCodec *)v9);
        *(_QWORD *)v7 = off_24C0BCC30;
        *((_DWORD *)v7 + 26) = v14;
        v8 = (_DWORD *)((char *)v7 + 112);
      }
      *(_QWORD *)(a2 + 56) = v8;
      v9[0] = off_24C0BCBF0;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v13, v13[1]);
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
      if (v10 < 0)
        operator delete((void *)v9[1]);
    }
  }
}

void `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::GetDefaultRtpReceiveParameters(cricket::WebRtcVoiceReceiveChannel *this@<X0>, uint64_t a2@<X8>)
{
  cricket::WebRtcVoiceReceiveChannel::GetDefaultRtpReceiveParameters((cricket::WebRtcVoiceReceiveChannel *)((char *)this - 64), a2);
}

uint64_t cricket::WebRtcVoiceReceiveChannel::SetPlayout(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (*(unsigned __int8 *)(this + 234) != a2)
  {
    v2 = a2;
    v3 = this;
    v4 = *(_QWORD **)(this + 480);
    v5 = (_QWORD *)(this + 488);
    if (v4 != (_QWORD *)(this + 488))
    {
      if (a2)
        v6 = 2;
      else
        v6 = 3;
      do
      {
        this = (*(uint64_t (**)(void))(**(_QWORD **)(v4[5] + 16) + 8 * v6))();
        v7 = (_QWORD *)v4[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v4[2];
            v9 = *v8 == (_QWORD)v4;
            v4 = v8;
          }
          while (!v9);
        }
        v4 = v8;
      }
      while (v8 != v5);
    }
    *(_BYTE *)(v3 + 234) = v2;
  }
  return this;
}

void cricket::WebRtcVoiceReceiveChannel::SetReceiveNackEnabled(cricket::WebRtcVoiceReceiveChannel *this, int a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  cricket::WebRtcVoiceReceiveChannel *v11;
  uint64_t v12;
  cricket::WebRtcVoiceReceiveChannel *v13;
  cricket::WebRtcVoiceReceiveChannel *v14;
  BOOL v15;

  if (*((unsigned __int8 *)this + 232) != a2)
  {
    v2 = a2;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    *((_BYTE *)this + 232) = v2;
    v11 = (cricket::WebRtcVoiceReceiveChannel *)*((_QWORD *)this + 60);
    if (v11 != (cricket::WebRtcVoiceReceiveChannel *)((char *)this + 488))
    {
      do
      {
        if (*((_BYTE *)this + 232))
          v12 = 5000;
        else
          v12 = 0;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)v11 + 5) + 16) + 64))(*(_QWORD *)(*((_QWORD *)v11 + 5) + 16), v12);
        v13 = (cricket::WebRtcVoiceReceiveChannel *)*((_QWORD *)v11 + 1);
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = *(cricket::WebRtcVoiceReceiveChannel **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (cricket::WebRtcVoiceReceiveChannel *)*((_QWORD *)v11 + 2);
            v15 = *(_QWORD *)v14 == (_QWORD)v11;
            v11 = v14;
          }
          while (!v15);
        }
        v11 = v14;
      }
      while (v14 != (cricket::WebRtcVoiceReceiveChannel *)((char *)this + 488));
    }
  }
}

void `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::SetReceiveNackEnabled(cricket::WebRtcVoiceReceiveChannel *this, int a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  cricket::WebRtcVoiceReceiveChannel *v11;
  uint64_t v12;
  cricket::WebRtcVoiceReceiveChannel *v13;
  cricket::WebRtcVoiceReceiveChannel *v14;
  BOOL v15;

  if (*((unsigned __int8 *)this + 168) != a2)
  {
    v2 = a2;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    *((_BYTE *)this + 168) = v2;
    v11 = (cricket::WebRtcVoiceReceiveChannel *)*((_QWORD *)this + 52);
    if (v11 != (cricket::WebRtcVoiceReceiveChannel *)((char *)this + 424))
    {
      do
      {
        if (*((_BYTE *)this + 168))
          v12 = 5000;
        else
          v12 = 0;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)v11 + 5) + 16) + 64))(*(_QWORD *)(*((_QWORD *)v11 + 5) + 16), v12);
        v13 = (cricket::WebRtcVoiceReceiveChannel *)*((_QWORD *)v11 + 1);
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = *(cricket::WebRtcVoiceReceiveChannel **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (cricket::WebRtcVoiceReceiveChannel *)*((_QWORD *)v11 + 2);
            v15 = *(_QWORD *)v14 == (_QWORD)v11;
            v11 = v14;
          }
          while (!v15);
        }
        v11 = v14;
      }
      while (v14 != (cricket::WebRtcVoiceReceiveChannel *)((char *)this + 424));
    }
  }
}

void cricket::WebRtcVoiceReceiveChannel::SetReceiveNonSenderRttEnabled(cricket::WebRtcVoiceReceiveChannel *this, int a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  cricket::WebRtcVoiceReceiveChannel *v11;
  cricket::WebRtcVoiceReceiveChannel *v12;
  cricket::WebRtcVoiceReceiveChannel *v13;
  BOOL v14;

  if (*((unsigned __int8 *)this + 233) != a2)
  {
    v2 = a2;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    *((_BYTE *)this + 233) = v2;
    v11 = (cricket::WebRtcVoiceReceiveChannel *)*((_QWORD *)this + 60);
    if (v11 != (cricket::WebRtcVoiceReceiveChannel *)((char *)this + 488))
    {
      do
      {
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v11 + 5) + 16) + 72))(*(_QWORD *)(*((_QWORD *)v11 + 5) + 16), *((unsigned __int8 *)this + 233));
        v12 = (cricket::WebRtcVoiceReceiveChannel *)*((_QWORD *)v11 + 1);
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = *(cricket::WebRtcVoiceReceiveChannel **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (cricket::WebRtcVoiceReceiveChannel *)*((_QWORD *)v11 + 2);
            v14 = *(_QWORD *)v13 == (_QWORD)v11;
            v11 = v13;
          }
          while (!v14);
        }
        v11 = v13;
      }
      while (v13 != (cricket::WebRtcVoiceReceiveChannel *)((char *)this + 488));
    }
  }
}

void `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::SetReceiveNonSenderRttEnabled(cricket::WebRtcVoiceReceiveChannel *this, int a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  cricket::WebRtcVoiceReceiveChannel *v11;
  cricket::WebRtcVoiceReceiveChannel *v12;
  cricket::WebRtcVoiceReceiveChannel *v13;
  BOOL v14;

  if (*((unsigned __int8 *)this + 169) != a2)
  {
    v2 = a2;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    *((_BYTE *)this + 169) = v2;
    v11 = (cricket::WebRtcVoiceReceiveChannel *)*((_QWORD *)this + 52);
    if (v11 != (cricket::WebRtcVoiceReceiveChannel *)((char *)this + 424))
    {
      do
      {
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v11 + 5) + 16) + 72))(*(_QWORD *)(*((_QWORD *)v11 + 5) + 16), *((unsigned __int8 *)this + 169));
        v12 = (cricket::WebRtcVoiceReceiveChannel *)*((_QWORD *)v11 + 1);
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = *(cricket::WebRtcVoiceReceiveChannel **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (cricket::WebRtcVoiceReceiveChannel *)*((_QWORD *)v11 + 2);
            v14 = *(_QWORD *)v13 == (_QWORD)v11;
            v11 = v13;
          }
          while (!v14);
        }
        v11 = v13;
      }
      while (v13 != (cricket::WebRtcVoiceReceiveChannel *)((char *)this + 424));
    }
  }
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::SetPlayout(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (*(unsigned __int8 *)(this + 170) != a2)
  {
    v2 = a2;
    v3 = this;
    v4 = *(_QWORD **)(this + 416);
    v5 = (_QWORD *)(this + 424);
    if (v4 != (_QWORD *)(this + 424))
    {
      if (a2)
        v6 = 2;
      else
        v6 = 3;
      do
      {
        this = (*(uint64_t (**)(void))(**(_QWORD **)(v4[5] + 16) + 8 * v6))();
        v7 = (_QWORD *)v4[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v4[2];
            v9 = *v8 == (_QWORD)v4;
            v4 = v8;
          }
          while (!v9);
        }
        v4 = v8;
      }
      while (v8 != v5);
    }
    *(_BYTE *)(v3 + 170) = v2;
  }
  return this;
}

uint64_t cricket::WebRtcVoiceReceiveChannel::AddRecvStream(cricket::WebRtcVoiceReceiveChannel *this, __int32 **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int32 *v11;
  __int32 *v12;
  unsigned __int32 v13;
  __int32 *v14;
  __int32 *v15;
  __int32 *v16;
  int64_t v17;
  __int32 *v18;
  __int32 *v19;
  int64_t v20;
  void **v21;
  unint64_t v22;
  __int32 *v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  char v27;
  uint64_t v28;
  char *v29;
  uint64_t **v30;
  char *v31;
  uint64_t **v32;
  unsigned __int32 v33;
  BOOL v34;
  char **v35;
  __int32 *v36;
  __int32 *v37;
  int64_t v38;
  void **v39;
  unint64_t v40;
  __int32 *v41;
  std::string *v42;
  __int128 v43;
  void **v44;
  uint64_t **v45;
  uint64_t **v46;
  uint64_t v47;
  void (***v48)(_QWORD);
  void (***v49)(_QWORD);
  int v50;
  unsigned __int32 v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  void *v55;
  void **v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (***v66)(_QWORD);
  void (***v67)(_QWORD);
  void (***v68)(_QWORD);
  _QWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t **v72;
  uint64_t **v73;
  unsigned __int32 v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t **v79;
  unsigned __int32 v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  char v91;
  _OWORD v92[2];
  uint64_t v93;
  std::string v94;
  char **v95;
  char *v96[2];
  void (***v97)(_QWORD);
  __int128 v98;
  int v99;
  char v100;
  void (***v101)(_QWORD);
  void (***v102)(_QWORD);
  void *__p[2];
  __int128 v104;
  _BYTE v105[32];
  char **v106;
  char *v107[2];
  void (***v108)(_QWORD);
  __int128 v109;
  int v110;
  char v111;
  void (***v112)(_QWORD);
  void (***v113)(_QWORD);

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    cricket::StreamParams::ToString((cricket::StreamParams *)a2, (char *)__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    if (SBYTE7(v104) < 0)
    {
      operator delete(__p[0]);
      v11 = a2[3];
      v12 = a2[4];
      if (v11 != v12)
        goto LABEL_4;
LABEL_21:
      cricket::StreamParams::operator=((std::string *)((char *)this + 280), (std::string *)a2);
      return 1;
    }
  }
  v11 = a2[3];
  v12 = a2[4];
  if (v11 == v12)
    goto LABEL_21;
LABEL_4:
  if ((unint64_t)((char *)v12 - (char *)v11) > 4)
    return 0;
  v13 = *v11;
  v14 = (__int32 *)*((_QWORD *)this + 33);
  v15 = wmemchr(*((__int32 **)this + 32), *v11, ((uint64_t)v14 - *((_QWORD *)this + 32)) >> 2);
  if (v15)
    v14 = v15;
  v16 = (__int32 *)*((_QWORD *)this + 33);
  if (v14 != v16)
  {
    v17 = (char *)v16 - (char *)(v14 + 1);
    if (v16 != v14 + 1)
      memmove(v14, v14 + 1, (char *)v16 - (char *)(v14 + 1));
    *((_QWORD *)this + 33) = (char *)v14 + v17;
    v18 = a2[12];
    v19 = a2[13];
    v20 = (char *)v19 - (char *)v18;
    if (v19 == v18)
    {
      v26 = 0;
      v21 = 0;
    }
    else
    {
      if (0xAAAAAAAAAAAAAAABLL * (v20 >> 3) > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_150;
      v21 = (void **)operator new(v20);
      v22 = 0;
      do
      {
        while (1)
        {
          v23 = &v18[v22 / 4];
          v24 = (std::string *)&v21[v22 / 8];
          if ((SHIBYTE(v18[v22 / 4 + 5]) & 0x80000000) == 0)
            break;
          std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
          v22 += 24;
          if (&v18[v22 / 4] == v19)
            goto LABEL_16;
        }
        v25 = *(_OWORD *)v23;
        v24->__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
        v22 += 24;
      }
      while (&v18[v22 / 4] != v19);
LABEL_16:
      v26 = &v21[v22 / 8];
      if (v22)
      {
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)*v21, (std::string::size_type)v21[1]);
          v27 = 0;
          v28 = *((_QWORD *)this + 30);
          v29 = (char *)*((_QWORD *)this + 61);
          if (v29)
          {
            while (1)
            {
LABEL_58:
              while (1)
              {
                v46 = (uint64_t **)v29;
                v51 = *((_DWORD *)v29 + 8);
                if (v13 >= v51)
                  break;
                v29 = (char *)*v46;
                v45 = v46;
                if (!*v46)
                  goto LABEL_62;
              }
              if (v51 >= v13)
                goto LABEL_65;
              v29 = (char *)v46[1];
              if (!v29)
              {
                v45 = v46 + 1;
                goto LABEL_62;
              }
            }
          }
        }
        else
        {
          v27 = 0;
          *(_OWORD *)__p = *(_OWORD *)v21;
          *(_QWORD *)&v104 = v21[2];
          v28 = *((_QWORD *)this + 30);
          v29 = (char *)*((_QWORD *)this + 61);
          if (v29)
            goto LABEL_58;
        }
LABEL_42:
        v45 = (uint64_t **)((char *)this + 488);
        v46 = (uint64_t **)((char *)this + 488);
LABEL_62:
        v52 = (char *)v46;
        v46 = (uint64_t **)operator new(0x30uLL);
        *((_DWORD *)v46 + 8) = v13;
        v46[5] = 0;
        *v46 = 0;
        v46[1] = 0;
        v46[2] = (uint64_t *)v52;
        *v45 = (uint64_t *)v46;
        v53 = **((_QWORD **)this + 60);
        v54 = (uint64_t *)v46;
        if (v53)
        {
          *((_QWORD *)this + 60) = v53;
          v54 = *v45;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 61), v54);
        ++*((_QWORD *)this + 62);
LABEL_65:
        if ((SBYTE7(v104) & 0x80000000) == 0)
        {
          v55 = (void *)BYTE7(v104);
          v56 = __p;
LABEL_70:
          (*(void (**)(uint64_t, uint64_t, void **, void *))(*(_QWORD *)v28 + 160))(v28, v46[5][2], v56, v55);
          if (SBYTE7(v104) < 0)
            operator delete(__p[0]);
          if (!v21)
            return 1;
          if ((v27 & 1) == 0)
          {
            do
            {
              if (*((char *)v26 - 1) < 0)
                operator delete(*(v26 - 3));
              v26 -= 3;
            }
            while (v26 != v21);
          }
          v57 = v21;
          goto LABEL_146;
        }
        v55 = __p[1];
        if (((unint64_t)__p[1] & 0x8000000000000000) == 0)
        {
          v56 = (void **)__p[0];
          if (!__p[1] || __p[0])
            goto LABEL_70;
        }
        __break(1u);
LABEL_150:
        abort();
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    v27 = 1;
    *(_QWORD *)&v104 = 0;
    v28 = *((_QWORD *)this + 30);
    v29 = (char *)*((_QWORD *)this + 61);
    if (v29)
      goto LABEL_58;
    goto LABEL_42;
  }
  v30 = (uint64_t **)((char *)this + 488);
  v31 = (char *)*((_QWORD *)this + 61);
  if (!v31)
    goto LABEL_33;
  v32 = (uint64_t **)((char *)this + 488);
  do
  {
    v33 = *((_DWORD *)v31 + 8);
    v34 = v33 >= v13;
    if (v33 >= v13)
      v35 = (char **)v31;
    else
      v35 = (char **)(v31 + 8);
    if (v34)
      v32 = (uint64_t **)v31;
    v31 = *v35;
  }
  while (*v35);
  if (v32 == v30 || v13 < *((_DWORD *)v32 + 8))
  {
LABEL_33:
    v37 = a2[12];
    v36 = a2[13];
    v38 = (char *)v36 - (char *)v37;
    v90 = *((unsigned __int8 *)this + 232);
    v91 = *((_BYTE *)this + 233);
    v89 = *((_DWORD *)this + 112);
    if (v36 == v37)
    {
      v39 = 0;
      v44 = 0;
    }
    else
    {
      if (0xAAAAAAAAAAAAAAABLL * (v38 >> 3) > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_150;
      v39 = (void **)operator new(v38);
      v40 = 0;
      do
      {
        while (1)
        {
          v41 = &v37[v40 / 4];
          v42 = (std::string *)&v39[v40 / 8];
          if ((SHIBYTE(v37[v40 / 4 + 5]) & 0x80000000) == 0)
            break;
          std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)v41, *((_QWORD *)v41 + 1));
          v40 += 24;
          if (&v37[v40 / 4] == v36)
            goto LABEL_39;
        }
        v43 = *(_OWORD *)v41;
        v42->__r_.__value_.__r.__words[2] = *((_QWORD *)v41 + 2);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
        v40 += 24;
      }
      while (&v37[v40 / 4] != v36);
LABEL_39:
      v44 = &v39[v40 / 8];
    }
    v47 = *((_QWORD *)this + 12);
    v85 = *((_QWORD *)this + 83);
    v88 = *(_QWORD *)(v47 + 144);
    v86 = *(_DWORD *)(v47 + 156);
    v87 = *(_BYTE *)(v47 + 152);
    v48 = (void (***)(_QWORD))*((_QWORD *)this + 85);
    if (v48)
      (**v48)(*((_QWORD *)this + 85));
    v49 = (void (***)(_QWORD))*((_QWORD *)this + 86);
    if (v49)
      (**v49)(*((_QWORD *)this + 86));
    LODWORD(__p[1]) = 0;
    BYTE4(__p[1]) = 0;
    *(_QWORD *)&v104 = 0;
    *((_QWORD *)&v104 + 1) = 200;
    v105[0] = 0;
    v107[1] = 0;
    v108 = 0;
    memset(&v105[4], 0, 28);
    v106 = v107;
    v107[0] = 0;
    LOBYTE(v109) = 0;
    BYTE8(v109) = 0;
    v110 = 65537;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    __p[0] = (void *)__PAIR64__(v89, v13);
    if (v90)
      v50 = 5000;
    else
      v50 = 0;
    LODWORD(__p[1]) = v50;
    if (v39 != v44 && &v105[8] != (_BYTE *)v39)
    {
      if (*((char *)v39 + 23) < 0)
      {
        std::string::__assign_no_alias<true>(&v105[8], (char *)*v39, (size_t)v39[1]);
      }
      else
      {
        *(_OWORD *)&v105[8] = *(_OWORD *)v39;
        *(_QWORD *)&v105[24] = v39[2];
      }
    }
    *(_QWORD *)&v104 = (char *)this + 16;
    BYTE4(__p[1]) = v91;
    v66 = *(void (****)(_QWORD))(v47 + 48);
    if (v66)
      (**v66)(*(_QWORD *)(v47 + 48));
    if (v108)
      (*v108)[1](v108);
    v108 = v66;
    if (&v106 != (char ***)((char *)this + 104))
      std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,webrtc::SdpAudioFormat>,std::__tree_node<std::__value_type<int,webrtc::SdpAudioFormat>,void *> *,long>>((uint64_t)&v106, *((char ***)this + 13), (char **)this + 14);
    *(_QWORD *)&v109 = v85;
    BYTE8(v109) = 1;
    *((_QWORD *)&v104 + 1) = v88;
    v105[0] = v87;
    *(_DWORD *)&v105[4] = v86;
    v67 = v112;
    v112 = v48;
    if (v67)
      (*v67)[1](v67);
    v110 = *((_DWORD *)this + 168);
    v111 = *((_BYTE *)this + 676);
    v68 = v113;
    v113 = v49;
    if (v68)
      (*v68)[1](v68);
    if (v39)
    {
      for (; v44 != v39; v44 -= 3)
      {
        if (*((char *)v44 - 1) < 0)
          operator delete(*(v44 - 3));
      }
      operator delete(v39);
    }
    v69 = (_QWORD *)operator new();
    v92[0] = *(_OWORD *)__p;
    v92[1] = v104;
    v93 = *(_QWORD *)v105;
    if ((v105[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)&v105[8], *(std::string::size_type *)&v105[16]);
    else
      v94 = *(std::string *)&v105[8];
    v96[0] = 0;
    v96[1] = 0;
    v95 = v96;
    std::map<int,webrtc::SdpAudioFormat>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::SdpAudioFormat>,std::__tree_node<std::__value_type<int,webrtc::SdpAudioFormat>,void *> *,long>>>((uint64_t *)&v95, v106, v107);
    v97 = v108;
    if (v108)
      (**v108)(v108);
    v98 = v109;
    v99 = v110;
    v100 = v111;
    v101 = v112;
    if (v112)
      (**v112)(v112);
    v102 = v113;
    if (v113)
      (**v113)(v113);
    v70 = *((_QWORD *)this + 30);
    v69[1] = v70;
    v69[2] = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v70 + 16))(v70, v92);
    v69[3] = 0;
    v71 = (uint64_t *)*((_QWORD *)this + 61);
    v72 = (uint64_t **)((char *)this + 488);
    v73 = (uint64_t **)((char *)this + 488);
    if (v71)
    {
      while (1)
      {
        while (1)
        {
          v73 = (uint64_t **)v71;
          v74 = *((_DWORD *)v71 + 8);
          if (v13 >= v74)
            break;
          v71 = *v73;
          v72 = v73;
          if (!*v73)
            goto LABEL_113;
        }
        if (v74 >= v13)
          break;
        v71 = v73[1];
        if (!v71)
        {
          v72 = v73 + 1;
          goto LABEL_113;
        }
      }
    }
    else
    {
LABEL_113:
      v75 = operator new(0x30uLL);
      v75[8] = v13;
      *((_QWORD *)v75 + 5) = v69;
      *(_QWORD *)v75 = 0;
      *((_QWORD *)v75 + 1) = 0;
      *((_QWORD *)v75 + 2) = v73;
      *v72 = (uint64_t *)v75;
      v76 = **((_QWORD **)this + 60);
      if (v76)
      {
        *((_QWORD *)this + 60) = v76;
        v77 = *v72;
      }
      else
      {
        v77 = (uint64_t *)v75;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 61), v77);
      ++*((_QWORD *)this + 62);
    }
    if (v102)
      (*v102)[1](v102);
    if (v101)
      (*v101)[1](v101);
    if (v97)
      (*v97)[1](v97);
    std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy((uint64_t)&v95, v96[0]);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v94.__r_.__value_.__l.__data_);
      v78 = *v30;
      v79 = (uint64_t **)((char *)this + 488);
      if (*v30)
      {
        while (1)
        {
LABEL_129:
          while (1)
          {
            v79 = (uint64_t **)v78;
            v80 = *((_DWORD *)v78 + 8);
            if (v13 >= v80)
              break;
            v78 = *v79;
            v30 = v79;
            if (!*v79)
              goto LABEL_133;
          }
          if (v80 >= v13)
            goto LABEL_136;
          v78 = v79[1];
          if (!v78)
          {
            v30 = v79 + 1;
            break;
          }
        }
      }
    }
    else
    {
      v78 = *v30;
      v79 = (uint64_t **)((char *)this + 488);
      if (*v30)
        goto LABEL_129;
    }
LABEL_133:
    v81 = (char *)v79;
    v79 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v79 + 8) = v13;
    v79[5] = 0;
    *v79 = 0;
    v79[1] = 0;
    v79[2] = (uint64_t *)v81;
    *v30 = (uint64_t *)v79;
    v82 = **((_QWORD **)this + 60);
    v83 = (uint64_t *)v79;
    if (v82)
    {
      *((_QWORD *)this + 60) = v82;
      v83 = *v30;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 61), v83);
    ++*((_QWORD *)this + 62);
LABEL_136:
    v84 = 16;
    if (!*((_BYTE *)this + 234))
      v84 = 24;
    (*(void (**)(void))(*(_QWORD *)v79[5][2] + v84))();
    if (v113)
      (*v113)[1](v113);
    if (v112)
      (*v112)[1](v112);
    if (v108)
      (*v108)[1](v108);
    std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy((uint64_t)&v106, v107[0]);
    if ((v105[31] & 0x80000000) == 0)
      return 1;
    v57 = *(void ***)&v105[8];
LABEL_146:
    operator delete(v57);
    return 1;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    return 0;
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  return 0;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::AddRecvStream(cricket::WebRtcVoiceReceiveChannel *this, __int32 **a2)
{
  return cricket::WebRtcVoiceReceiveChannel::AddRecvStream((cricket::WebRtcVoiceReceiveChannel *)((char *)this - 64), a2);
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::RemoveRecvStream(cricket::WebRtcVoiceReceiveChannel *this, unsigned __int32 a2)
{
  return cricket::WebRtcVoiceReceiveChannel::RemoveRecvStream((cricket::WebRtcVoiceReceiveChannel *)((char *)this - 64), a2);
}

void cricket::WebRtcVoiceReceiveChannel::ResetUnsignaledRecvStream(cricket::WebRtcVoiceReceiveChannel *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15[9];

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  memset(v15, 0, sizeof(v15));
  cricket::StreamParams::operator=((uint64_t)this + 280, v15);
  cricket::StreamParams::~StreamParams((cricket::StreamParams *)v15);
  v10 = (_BYTE *)*((_QWORD *)this + 32);
  v9 = (_BYTE *)*((_QWORD *)this + 33);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      abort();
    v12 = (char *)operator new(v9 - v10);
    memcpy(v12, v10, v11);
    v13 = 0;
    v14 = 4 * (v11 >> 2);
    do
    {
      cricket::WebRtcVoiceReceiveChannel::RemoveRecvStream(this, *(_DWORD *)&v12[v13]);
      v13 += 4;
    }
    while (v14 != v13);
    operator delete(v12);
  }
}

void `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::ResetUnsignaledRecvStream(cricket::WebRtcVoiceReceiveChannel *this)
{
  cricket::WebRtcVoiceReceiveChannel::ResetUnsignaledRecvStream((cricket::WebRtcVoiceReceiveChannel *)((char *)this - 64));
}

uint64_t cricket::WebRtcVoiceReceiveChannel::GetUnsignaledSsrc(cricket::WebRtcVoiceReceiveChannel *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 33);
  if (*((_QWORD *)this + 32) == v1)
    return 0;
  else
    return *(unsigned int *)(v1 - 4) | 0x100000000;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::GetUnsignaledSsrc(cricket::WebRtcVoiceReceiveChannel *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 25);
  if (*((_QWORD *)this + 24) == v1)
    return 0;
  else
    return *(unsigned int *)(v1 - 4) | 0x100000000;
}

uint64_t cricket::WebRtcVoiceReceiveChannel::ChooseReceiverReportSsrc(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  if (a2[2])
  {
    v2 = result;
    v3 = a2[1];
    if (!v3)
      goto LABEL_13;
    v4 = *(_DWORD *)(result + 448);
    v5 = a2 + 1;
    do
    {
      v6 = *(_DWORD *)(v3 + 28);
      v7 = v6 >= v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        v5 = (_QWORD *)v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 == a2 + 1 || v4 < *((_DWORD *)v5 + 7))
    {
LABEL_13:
      v9 = *(unsigned int *)(*a2 + 28);
      *(_DWORD *)(result + 448) = v9;
      v10 = *(_QWORD **)(result + 480);
      v11 = (_QWORD *)(result + 488);
      if (v10 != (_QWORD *)(result + 488))
      {
        do
        {
          result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 240) + 136))(*(_QWORD *)(v2 + 240), *(_QWORD *)(v10[5] + 16), v9);
          v12 = (_QWORD *)v10[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v10[2];
              v14 = *v13 == (_QWORD)v10;
              v10 = v13;
            }
            while (!v14);
          }
          v10 = v13;
        }
        while (v13 != v11);
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::ChooseReceiverReportSsrc(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  if (a2[2])
  {
    v2 = result;
    v3 = a2[1];
    if (!v3)
      goto LABEL_13;
    v4 = *(_DWORD *)(result + 384);
    v5 = a2 + 1;
    do
    {
      v6 = *(_DWORD *)(v3 + 28);
      v7 = v6 >= v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        v5 = (_QWORD *)v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 == a2 + 1 || v4 < *((_DWORD *)v5 + 7))
    {
LABEL_13:
      v9 = *(unsigned int *)(*a2 + 28);
      *(_DWORD *)(result + 384) = v9;
      v10 = *(_QWORD **)(result + 416);
      v11 = (_QWORD *)(result + 424);
      if (v10 != (_QWORD *)(result + 424))
      {
        do
        {
          result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 176) + 136))(*(_QWORD *)(v2 + 176), *(_QWORD *)(v10[5] + 16), v9);
          v12 = (_QWORD *)v10[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v10[2];
              v14 = *v13 == (_QWORD)v10;
              v10 = v13;
            }
            while (!v14);
          }
          v10 = v13;
        }
        while (v13 != v11);
      }
    }
  }
  return result;
}

uint64_t cricket::WebRtcVoiceReceiveChannel::SetOutputVolume(cricket::WebRtcVoiceReceiveChannel *this, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unsigned int v15;
  BOOL v16;
  char **v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__p[2];
  char v35;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0
    && (rtc::StringFormat((rtc *)"WRVMC::%s({ssrc=%u}, {volume=%.2f})", (char *)__p, "SetOutputVolume", a2, *(_QWORD *)&a3), rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc"), v35 < 0))
  {
    operator delete(__p[0]);
    v13 = (char *)*((_QWORD *)this + 61);
    if (!v13)
      goto LABEL_19;
  }
  else
  {
    v13 = (char *)*((_QWORD *)this + 61);
    if (!v13)
      goto LABEL_19;
  }
  v14 = (char *)this + 488;
  do
  {
    v15 = *((_DWORD *)v13 + 8);
    v16 = v15 >= a2;
    if (v15 >= a2)
      v17 = (char **)v13;
    else
      v17 = (char **)(v13 + 8);
    if (v16)
      v14 = v13;
    v13 = *v17;
  }
  while (*v17);
  if (v14 != (char *)this + 488 && *((_DWORD *)v14 + 8) <= a2)
  {
    v18 = a3;
    (*(void (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)v14 + 5) + 16) + 104))(*(_QWORD *)(*((_QWORD *)v14 + 5) + 16), v18);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      rtc::StringFormat((rtc *)"WRVMC::%s => (stream with SSRC %u now uses volume %.2f)", (char *)__p, "SetOutputVolume", a2, *(_QWORD *)&a3);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
      if (v35 < 0)
        operator delete(__p[0]);
    }
    return 1;
  }
LABEL_19:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::StringFormat((rtc *)"WRVMC::%s => (WARNING: no receive stream for SSRC %u)", (char *)__p, "SetOutputVolume", a2);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    if (v35 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::SetOutputVolume(cricket::WebRtcVoiceReceiveChannel *this, uint64_t a2, double a3)
{
  return cricket::WebRtcVoiceReceiveChannel::SetOutputVolume((cricket::WebRtcVoiceReceiveChannel *)((char *)this - 64), a2, a3);
}

uint64_t cricket::WebRtcVoiceReceiveChannel::SetDefaultOutputVolume(cricket::WebRtcVoiceReceiveChannel *this, double a2)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  _QWORD *v5;
  float v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *((double *)this + 53) = a2;
  v3 = (unsigned int *)*((_QWORD *)this + 32);
  v4 = (unsigned int *)*((_QWORD *)this + 33);
  if (v3 == v4)
    return 1;
  v5 = (_QWORD *)((char *)this + 488);
  v6 = a2;
  while (1)
  {
    v7 = *v3;
    v8 = *v5;
    if (!*v5)
      break;
    v9 = v5;
    do
    {
      v10 = *(_DWORD *)(v8 + 32);
      v11 = v10 >= v7;
      if (v10 >= v7)
        v12 = (uint64_t *)v8;
      else
        v12 = (uint64_t *)(v8 + 8);
      if (v11)
        v9 = (_QWORD *)v8;
      v8 = *v12;
    }
    while (*v12);
    if (v9 == v5 || v7 < *((_DWORD *)v9 + 8))
      break;
    (*(void (**)(_QWORD, float))(**(_QWORD **)(v9[5] + 16) + 104))(*(_QWORD *)(v9[5] + 16), v6);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v2 = v2 & 0xFFFFFFFF00000000 | 0x4A71;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    }
    if (++v3 == v4)
      return 1;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  return 0;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::SetDefaultOutputVolume(cricket::WebRtcVoiceReceiveChannel *this, double a2)
{
  return cricket::WebRtcVoiceReceiveChannel::SetDefaultOutputVolume((cricket::WebRtcVoiceReceiveChannel *)((char *)this - 64), a2);
}

uint64_t cricket::WebRtcVoiceReceiveChannel::SetBaseMinimumPlayoutDelayMs(cricket::WebRtcVoiceReceiveChannel *this, int a2, uint64_t a3)
{
  unint64_t v3;
  _DWORD *v7;
  _DWORD *v8;
  char **v9;
  unsigned int v10;
  char *v11;
  char **v12;
  unsigned int v13;
  BOOL v14;
  char **v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *__p;
  _DWORD *v41;
  _DWORD *v42;

  v7 = operator new(4uLL);
  *v7 = a2;
  v8 = v7 + 1;
  v41 = v7 + 1;
  v42 = v7 + 1;
  __p = v7;
  if (a2
    || (*((_DWORD *)this + 108) = a3, &__p == (void **)((char *)this + 256))
    || (std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>(&__p, *((char **)this + 32), *((char **)this + 33), (uint64_t)(*((_QWORD *)this + 33) - *((_QWORD *)this + 32)) >> 2), v7 = __p, v8 = v41, __p != v41))
  {
    v9 = (char **)((char *)this + 488);
    while (1)
    {
      v10 = *v7;
      v11 = *v9;
      if (!*v9)
        break;
      v12 = (char **)((char *)this + 488);
      do
      {
        v13 = *((_DWORD *)v11 + 8);
        v14 = v13 >= v10;
        if (v13 >= v10)
          v15 = (char **)v11;
        else
          v15 = (char **)(v11 + 8);
        if (v14)
          v12 = (char **)v11;
        v11 = *v15;
      }
      while (*v15);
      if (v12 == v9 || v10 < *((_DWORD *)v12 + 8))
        break;
      v16 = v12[5];
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 2) + 112))(*((_QWORD *)v16 + 2), a3) & 1) == 0
        && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)v16 + 2) + 128))(*((_QWORD *)v16 + 2));
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        v3 = v3 & 0xFFFFFFFF00000000 | 0x4B29;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
      }
      if (++v7 == v8)
      {
        v38 = 1;
        v7 = __p;
        if (__p)
          goto LABEL_28;
        return v38;
      }
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
    {
      v38 = 0;
      v7 = __p;
      if (__p)
        goto LABEL_28;
      return v38;
    }
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    v38 = 0;
    v7 = __p;
    if (!__p)
      return v38;
  }
  else
  {
    v38 = 1;
    if (!__p)
      return v38;
  }
LABEL_28:
  v41 = v7;
  operator delete(v7);
  return v38;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::SetBaseMinimumPlayoutDelayMs(cricket::WebRtcVoiceReceiveChannel *this, int a2, uint64_t a3)
{
  return cricket::WebRtcVoiceReceiveChannel::SetBaseMinimumPlayoutDelayMs((cricket::WebRtcVoiceReceiveChannel *)((char *)this - 64), a2, a3);
}

uint64_t cricket::WebRtcVoiceReceiveChannel::GetBaseMinimumPlayoutDelayMs(cricket::WebRtcVoiceReceiveChannel *this, unsigned int a2)
{
  char *v2;
  char *v3;
  unsigned int v4;
  BOOL v5;
  char **v6;
  unsigned int v8;

  if (a2)
  {
    v2 = (char *)*((_QWORD *)this + 61);
    if (!v2)
      return 0;
    v3 = (char *)this + 488;
    do
    {
      v4 = *((_DWORD *)v2 + 8);
      v5 = v4 >= a2;
      if (v4 >= a2)
        v6 = (char **)v2;
      else
        v6 = (char **)(v2 + 8);
      if (v5)
        v3 = v2;
      v2 = *v6;
    }
    while (*v6);
    if (v3 == (char *)this + 488 || *((_DWORD *)v3 + 8) > a2)
      return 0;
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v3 + 5) + 16) + 120))(*(_QWORD *)(*((_QWORD *)v3 + 5) + 16));
  }
  else
  {
    v8 = *((_DWORD *)this + 108);
  }
  return v8 | 0x100000000;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::GetBaseMinimumPlayoutDelayMs(cricket::WebRtcVoiceReceiveChannel *this, unsigned int a2)
{
  char *v2;
  char *v3;
  unsigned int v4;
  BOOL v5;
  char **v6;
  unsigned int v8;

  if (a2)
  {
    v2 = (char *)*((_QWORD *)this + 53);
    if (!v2)
      return 0;
    v3 = (char *)this + 424;
    do
    {
      v4 = *((_DWORD *)v2 + 8);
      v5 = v4 >= a2;
      if (v4 >= a2)
        v6 = (char **)v2;
      else
        v6 = (char **)(v2 + 8);
      if (v5)
        v3 = v2;
      v2 = *v6;
    }
    while (*v6);
    if (v3 == (char *)this + 424 || *((_DWORD *)v3 + 8) > a2)
      return 0;
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v3 + 5) + 16) + 120))(*(_QWORD *)(*((_QWORD *)v3 + 5) + 16));
  }
  else
  {
    v8 = *((_DWORD *)this + 92);
  }
  return v8 | 0x100000000;
}

_QWORD *cricket::WebRtcVoiceReceiveChannel::SetFrameDecryptor(_QWORD *result, unsigned int a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  void (***v12)(_QWORD);
  uint64_t v13;
  void (***v14)(_QWORD);
  _QWORD *v15;

  v5 = result;
  v6 = result[61];
  if (v6)
  {
    v7 = result + 61;
    do
    {
      v8 = *(_DWORD *)(v6 + 32);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (uint64_t *)v6;
      else
        v10 = (uint64_t *)(v6 + 8);
      if (v9)
        v7 = (_QWORD *)v6;
      v6 = *v10;
    }
    while (*v10);
    if (v7 != result + 61 && *((_DWORD *)v7 + 8) <= a2)
    {
      v11 = v7[5];
      v12 = (void (***)(_QWORD))*a3;
      if (*a3)
        (**v12)(*a3);
      v13 = *(_QWORD *)(v11 + 16);
      v15 = v12;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v13 + 40))(v13, &v15);
      result = v15;
      if (v15)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 8))(v15);
    }
  }
  if (!a2)
  {
    v14 = (void (***)(_QWORD))*a3;
    if (v14)
      (**v14)(v14);
    result = (_QWORD *)v5[85];
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    v5[85] = v14;
  }
  return result;
}

_QWORD *`non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::SetFrameDecryptor(_QWORD *result, unsigned int a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  void (***v12)(_QWORD);
  uint64_t v13;
  void (***v14)(_QWORD);
  _QWORD *v15;

  v5 = result;
  v6 = result[53];
  if (v6)
  {
    v7 = result + 53;
    do
    {
      v8 = *(_DWORD *)(v6 + 32);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (uint64_t *)v6;
      else
        v10 = (uint64_t *)(v6 + 8);
      if (v9)
        v7 = (_QWORD *)v6;
      v6 = *v10;
    }
    while (*v10);
    if (v7 != result + 53 && *((_DWORD *)v7 + 8) <= a2)
    {
      v11 = v7[5];
      v12 = (void (***)(_QWORD))*a3;
      if (*a3)
        (**v12)(*a3);
      v13 = *(_QWORD *)(v11 + 16);
      v15 = v12;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v13 + 40))(v13, &v15);
      result = v15;
      if (v15)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 8))(v15);
    }
  }
  if (!a2)
  {
    v14 = (void (***)(_QWORD))*a3;
    if (v14)
      (**v14)(v14);
    result = (_QWORD *)v5[77];
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    v5[77] = v14;
  }
  return result;
}

uint64_t cricket::WebRtcVoiceReceiveChannel::OnPacketReceived(uint64_t a1, __int128 *a2)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t v27;
  char v28;
  char v29;
  _QWORD v30[2];
  uint64_t (*v31)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v32)(uint64_t);
  __int128 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[22];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 72);
  v4 = *(unsigned int **)(a1 + 80);
  if (v4)
  {
    do
      v6 = __ldxr(v4);
    while (__stxr(v6 + 1, v4));
  }
  v7 = a2[1];
  v35 = *a2;
  v36 = v7;
  *(_OWORD *)v37 = a2[2];
  *(_QWORD *)&v37[14] = *(_QWORD *)((char *)a2 + 46);
  v9 = (_BYTE *)*((_QWORD *)a2 + 7);
  v8 = (_BYTE *)*((_QWORD *)a2 + 8);
  v10 = v8 - v9;
  if (v8 == v9)
  {
    v12 = 0;
    v11 = 0;
    v27 = v5;
    v14 = *((_QWORD *)a2 + 10);
    v13 = *((_QWORD *)a2 + 11);
    if (!v13)
      goto LABEL_10;
    goto LABEL_8;
  }
  if (v10 < 0)
    abort();
  v11 = (char *)operator new(v8 - v9);
  v12 = &v11[4 * (v10 >> 2)];
  memcpy(v11, v9, v10);
  v27 = v5;
  v14 = *((_QWORD *)a2 + 10);
  v13 = *((_QWORD *)a2 + 11);
  if (v13)
  {
LABEL_8:
    v15 = (unsigned int *)(v13 + 24);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
LABEL_10:
  v18 = *((_QWORD *)a2 + 12);
  v17 = *((_QWORD *)a2 + 13);
  v33 = a2[7];
  v34 = *((_BYTE *)a2 + 128);
  v19 = *((_QWORD *)a2 + 17);
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = operator new();
  v23 = v36;
  *(_OWORD *)(v22 + 8) = v35;
  *(_QWORD *)v22 = a1;
  *(_OWORD *)(v22 + 24) = v23;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)v37;
  *(_QWORD *)(v22 + 54) = *(_QWORD *)&v37[14];
  *(_QWORD *)(v22 + 64) = v11;
  *(_QWORD *)(v22 + 72) = v12;
  *(_QWORD *)(v22 + 80) = v12;
  *(_QWORD *)(v22 + 88) = v14;
  *(_QWORD *)(v22 + 96) = v13;
  *(_QWORD *)(v22 + 104) = v18;
  *(_QWORD *)(v22 + 112) = v17;
  v24 = v33;
  *(_BYTE *)(v22 + 136) = v34;
  *(_OWORD *)(v22 + 120) = v24;
  *(_QWORD *)(v22 + 144) = v19;
  v25 = (_QWORD *)operator new();
  *v25 = v4;
  v25[1] = v22;
  v25[3] = absl::internal_any_invocable::RemoteManagerNontrivial<cricket::WebRtcVoiceReceiveChannel::OnPacketReceived(webrtc::RtpPacketReceived const&)::$_1>;
  v25[4] = absl::internal_any_invocable::RemoteInvoker<false,void,cricket::WebRtcVoiceReceiveChannel::OnPacketReceived(webrtc::RtpPacketReceived const&)::$_1 &&>;
  v30[0] = v25;
  v31 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v32 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v27 + 8))(v27, v30, &v29, &v28);
  return v31(1, v30, v30);
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::OnPacketReceived(uint64_t a1, __int128 *a2)
{
  return cricket::WebRtcVoiceReceiveChannel::OnPacketReceived(a1 - 64, a2);
}

uint64_t cricket::WebRtcVoiceReceiveChannel::MaybeCreateDefaultReceiveStream(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _DWORD *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  unsigned __int32 *v63;
  unsigned __int32 *v64;
  unsigned int *v65;
  unsigned int *v66;
  uint64_t *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v79;
  std::string v80;
  char *v81;
  char *v82;
  unint64_t v83;

  v3 = *(unsigned int *)(a2 + 12);
  cricket::StreamParams::StreamParams(&v80, (const cricket::StreamParams *)(a1 + 280));
  v4 = v82;
  v5 = v82;
  if ((unint64_t)v82 >= v83)
  {
    v7 = v81;
    v8 = v82 - v81;
    v9 = (v82 - v81) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      goto LABEL_74;
    v11 = v83 - (_QWORD)v81;
    if ((uint64_t)(v83 - (_QWORD)v81) >> 1 > v10)
      v10 = v11 >> 1;
    v72 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v72)
      v12 = v10;
    if (!v12)
      goto LABEL_73;
    if (v12 >> 62)
      goto LABEL_75;
    v13 = 4 * v12;
    v14 = (char *)operator new(4 * v12);
    v15 = &v14[4 * v9];
    v16 = &v14[v13];
    *(_DWORD *)v15 = v3;
    v6 = v15 + 4;
    if (v4 != v7)
    {
      v17 = v4 - v7 - 4;
      if (v17 < 0x2C)
        goto LABEL_78;
      if ((unint64_t)(v4 - &v14[v8]) < 0x20)
        goto LABEL_78;
      v18 = (v17 >> 2) + 1;
      v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      v5 = &v4[-v19];
      v15 -= v19;
      v20 = &v14[4 * v9 - 16];
      v21 = v4 - 16;
      v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *((_OWORD *)v20 - 1) = *((_OWORD *)v21 - 1);
        *(_OWORD *)v20 = v23;
        v20 -= 32;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_78:
        do
        {
          v24 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v15 - 1) = v24;
          v15 -= 4;
        }
        while (v5 != v7);
      }
    }
    v81 = v15;
    v82 = v6;
    v83 = (unint64_t)v16;
    if (v7)
      operator delete(v7);
  }
  else
  {
    if (!v82)
      goto LABEL_73;
    *(_DWORD *)v82 = v3;
    v6 = v5 + 4;
  }
  v82 = v6;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v25, v26, v27, v28, v29, v30, v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  v32 = cricket::WebRtcVoiceReceiveChannel::AddRecvStream((cricket::WebRtcVoiceReceiveChannel *)a1, (__int32 **)&v80);
  if ((v32 & 1) != 0)
  {
    v34 = *(char **)(a1 + 264);
    v33 = *(_QWORD *)(a1 + 272);
    if ((unint64_t)v34 < v33)
    {
      if (v34)
      {
        *(_DWORD *)v34 = v3;
        v35 = v34 + 4;
LABEL_44:
        *(_QWORD *)(a1 + 264) = v35;
        v61 = atomic_load(&cricket::WebRtcVoiceReceiveChannel::MaybeCreateDefaultReceiveStream(webrtc::RtpPacketReceived const&)::atomic_histogram_pointer);
        if (v61)
        {
          webrtc::metrics::HistogramAdd(v61, (*(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)) >> 2);
        }
        else
        {
          while (!__ldaxr(&cricket::WebRtcVoiceReceiveChannel::MaybeCreateDefaultReceiveStream(webrtc::RtpPacketReceived const&)::atomic_histogram_pointer))
          {
            if (!__stlxr(0, &cricket::WebRtcVoiceReceiveChannel::MaybeCreateDefaultReceiveStream(webrtc::RtpPacketReceived const&)::atomic_histogram_pointer))goto LABEL_49;
          }
          __clrex();
        }
LABEL_49:
        v63 = *(unsigned __int32 **)(a1 + 256);
        v64 = *(unsigned __int32 **)(a1 + 264);
        if ((unint64_t)((char *)v64 - (char *)v63) < 0x11)
          goto LABEL_52;
        if (v63 != v64)
        {
          cricket::WebRtcVoiceReceiveChannel::RemoveRecvStream((cricket::WebRtcVoiceReceiveChannel *)a1, *v63);
LABEL_52:
          cricket::WebRtcVoiceReceiveChannel::SetOutputVolume((cricket::WebRtcVoiceReceiveChannel *)a1, v3, *(double *)(a1 + 424));
          cricket::WebRtcVoiceReceiveChannel::SetBaseMinimumPlayoutDelayMs((cricket::WebRtcVoiceReceiveChannel *)a1, v3, *(unsigned int *)(a1 + 432));
          if (*(_QWORD *)(a1 + 440))
          {
            v65 = *(unsigned int **)(a1 + 256);
            v66 = *(unsigned int **)(a1 + 264);
            if (v65 != v66)
            {
              v67 = (uint64_t *)(a1 + 488);
              do
              {
                v68 = *v67;
                if (!*v67)
                  goto LABEL_67;
                v69 = *v65;
                v70 = a1 + 488;
                do
                {
                  v71 = *(_DWORD *)(v68 + 32);
                  v72 = v71 >= v69;
                  if (v71 >= v69)
                    v73 = (uint64_t *)v68;
                  else
                    v73 = (uint64_t *)(v68 + 8);
                  if (v72)
                    v70 = v68;
                  v68 = *v73;
                }
                while (*v73);
                if ((uint64_t *)v70 == v67 || v69 < *(_DWORD *)(v70 + 32))
LABEL_67:
                  v70 = a1 + 488;
                v74 = *(_QWORD *)(v70 + 40);
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v74 + 16) + 96))(*(_QWORD *)(v74 + 16), 0);
                v75 = *(_QWORD *)(v74 + 24);
                *(_QWORD *)(v74 + 24) = 0;
                if (v75)
                  (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
                ++v65;
              }
              while (v65 != v66);
            }
            v76 = (_QWORD *)operator new();
            v77 = *(_QWORD *)(a1 + 440);
            *v76 = &off_24C0C67E0;
            v76[1] = v77;
            v79 = v76;
            cricket::WebRtcVoiceReceiveChannel::SetRawAudioSink(a1, v3, (uint64_t *)&v79);
            if (v79)
              (*(void (**)(_QWORD *))(*v79 + 8))(v79);
          }
          goto LABEL_72;
        }
      }
LABEL_73:
      __break(1u);
LABEL_74:
      abort();
    }
    v43 = *(char **)(a1 + 256);
    v44 = (v34 - v43) >> 2;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 62)
      goto LABEL_74;
    v46 = v33 - (_QWORD)v43;
    if (v46 >> 1 > v45)
      v45 = v46 >> 1;
    v72 = (unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL;
    v47 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v72)
      v47 = v45;
    if (!v47)
      goto LABEL_73;
    if (!(v47 >> 62))
    {
      v48 = 4 * v47;
      v49 = operator new(4 * v47);
      v50 = &v49[4 * v44];
      v51 = &v49[v48];
      *v50 = v3;
      v35 = v50 + 1;
      if (v34 != v43)
      {
        v52 = v34 - v43 - 4;
        if (v52 < 0x2C)
          goto LABEL_79;
        if ((unint64_t)(v43 - v49) < 0x20)
          goto LABEL_79;
        v53 = (v52 >> 2) + 1;
        v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
        v55 = &v34[-v54];
        v50 = (_DWORD *)((char *)v50 - v54);
        v56 = &v49[4 * v44 - 16];
        v57 = v34 - 16;
        v58 = v53 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v59 = *(_OWORD *)v57;
          *(v56 - 1) = *((_OWORD *)v57 - 1);
          *v56 = v59;
          v56 -= 2;
          v57 -= 32;
          v58 -= 8;
        }
        while (v58);
        v34 = v55;
        if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_79:
          do
          {
            v60 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *--v50 = v60;
          }
          while (v34 != v43);
        }
      }
      *(_QWORD *)(a1 + 256) = v50;
      *(_QWORD *)(a1 + 264) = v35;
      *(_QWORD *)(a1 + 272) = v51;
      if (v43)
        operator delete(v43);
      goto LABEL_44;
    }
LABEL_75:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v36, v37, v38, v39, v40, v41, v42, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
LABEL_72:
  cricket::StreamParams::~StreamParams((cricket::StreamParams *)&v80);
  return v32;
}

void cricket::WebRtcVoiceReceiveChannel::SetRawAudioSink(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  v13 = *(_QWORD *)(a1 + 488);
  if (!v13)
    goto LABEL_14;
  v14 = a1 + 488;
  do
  {
    v15 = *(_DWORD *)(v13 + 32);
    v16 = v15 >= a2;
    if (v15 >= a2)
      v17 = (uint64_t *)v13;
    else
      v17 = (uint64_t *)(v13 + 8);
    if (v16)
      v14 = v13;
    v13 = *v17;
  }
  while (*v17);
  if (v14 != a1 + 488 && *(_DWORD *)(v14 + 32) <= a2)
  {
    v25 = *(_QWORD *)(v14 + 40);
    v26 = *a3;
    *a3 = 0;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 16) + 96))(*(_QWORD *)(v25 + 16), v26);
    v27 = *(_QWORD *)(v25 + 24);
    *(_QWORD *)(v25 + 24) = v26;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  else
  {
LABEL_14:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  }
}

uint64_t cricket::WebRtcVoiceReceiveChannel::GetStats(cricket::WebRtcVoiceReceiveChannel *this, char **a2, unsigned int a3)
{
  cricket::VoiceMediaReceiveInfo *v3;
  char *v4;
  __int32 *v5;
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void *v22;
  int64_t v23;
  void *v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  std::string *v36;
  _BYTE *v37;
  int64_t v38;
  void *v39;
  int64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  std::string *v83;
  const std::string::value_type **v84;
  __int128 v85;
  char *v86;
  char *v87;
  char *v88;
  _BYTE *v89;
  _BYTE *v90;
  int64_t v91;
  char **v92;
  char *v93;
  char *v94;
  char *v95;
  char **v96;
  _BYTE *v97;
  _BYTE *v98;
  int64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  void *v105;
  void *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char *v126;
  char *v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  int v137;
  _DWORD *v138;
  char *v139;
  char *v141;
  char *v143;
  char *v144;
  char *v147;
  __int128 v148;
  void *v149[2];
  __int128 v150;
  __int128 v151;
  void *v152[4];
  _BYTE v153[25];
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  _BYTE *v158;
  char *v159;
  void *__p;
  _BYTE *v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _OWORD v170[13];
  void (**v171)(webrtc::RtpCodec *__hidden);
  __int128 v172;
  unsigned int v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  void *v178;
  void *v179;
  __int128 __src;
  uint64_t v181;
  int v182;
  char v183;
  __int128 v184;
  int v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  void *v190;
  void *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  char v209;
  __int128 v210;
  __int128 v211;
  char v212;
  uint64_t v213;
  int v214;

  v3 = (cricket::VoiceMediaReceiveInfo *)a2;
  v4 = (char *)*((_QWORD *)this + 60);
  v143 = (char *)this + 488;
  if (v4 != (char *)this + 488)
  {
    do
    {
      v5 = (__int32 *)*((_QWORD *)this + 32);
      v6 = (__int32 *)*((_QWORD *)this + 33);
      if (v5 != v6)
      {
        v7 = v6 - 1;
        v8 = wmemchr(v5, *((_DWORD *)v4 + 8), v6 - 1 - v5);
        v9 = v8 ? v8 : v7;
        if (v9 != v7)
        {
LABEL_73:
          v126 = (char *)*((_QWORD *)v4 + 1);
          if (!v126)
            goto LABEL_78;
          goto LABEL_74;
        }
      }
      (*(void (**)(void (***__return_ptr)(webrtc::RtpCodec *__hidden), _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v4 + 5) + 16) + 88))(&v171, *(_QWORD *)(*((_QWORD *)v4 + 5) + 16), a3);
      LOBYTE(v150) = 0;
      BYTE8(v150) = 0;
      LOBYTE(v151) = 0;
      BYTE8(v151) = 0;
      BYTE12(v151) = 0;
      v153[8] = 0;
      v153[16] = 0;
      v153[24] = 0;
      BYTE4(v156) = 0;
      LOBYTE(v165) = 0;
      BYTE8(v165) = 0;
      LOBYTE(v166) = 0;
      BYTE8(v166) = 0;
      LOBYTE(v167) = 0;
      BYTE8(v167) = 0;
      LOBYTE(v170[0]) = 0;
      LOBYTE(v149[1]) = 0;
      memset(v152, 0, sizeof(v152));
      v153[0] = 0;
      v154 = 0uLL;
      LOBYTE(v156) = 0;
      v155 = 0;
      v161 = 0;
      v162 = 0;
      __p = 0;
      *(_QWORD *)&v169 = 0;
      v168 = 0uLL;
      BYTE8(v169) = 0;
      memset((char *)v170 + 8, 0, 160);
      *((_QWORD *)&v170[10] + 1) = -1;
      memset(&v170[11], 0, 32);
      v10 = (int)v171;
      v11 = operator new(0x10uLL);
      *(_DWORD *)v11 = v10;
      v11[1] = 0;
      v157 = v11;
      v158 = v11 + 2;
      v148 = v172;
      v159 = (char *)(v11 + 2);
      *(_QWORD *)&v163 = v175;
      BYTE8(v163) = 1;
      *(_QWORD *)&v164 = v176;
      BYTE8(v164) = 1;
      v149[0] = (void *)__PAIR64__(v177, v173);
      *((_QWORD *)&v170[6] + 1) = v178;
      if (SHIBYTE(v181) < 0)
      {
        std::string::__assign_no_alias<true>(&v154, (char *)__src, *((size_t *)&__src + 1));
      }
      else
      {
        v154 = __src;
        v155 = v181;
      }
      *(_OWORD *)((char *)&v170[1] + 4) = v184;
      *((_QWORD *)&v170[2] + 1) = v186;
      v170[4] = v188;
      v152[0] = v190;
      *(_OWORD *)&v152[1] = v192;
      *(_OWORD *)((char *)&v170[5] + 8) = v193;
      v170[7] = v194;
      *(_QWORD *)&v170[8] = v195;
      *(_OWORD *)((char *)&v170[8] + 8) = v197;
      *(_OWORD *)((char *)&v170[9] + 8) = v198;
      v170[12] = v203;
      LODWORD(v156) = v182;
      BYTE4(v156) = v183;
      DWORD1(v170[2]) = v185;
      v170[3] = v187;
      *(_QWORD *)&v170[5] = v189;
      v152[3] = v191;
      *((_QWORD *)&v170[11] + 1) = v196;
      v153[8] = v201;
      *(_QWORD *)v153 = v200;
      v153[24] = v205;
      *(_QWORD *)&v153[16] = v204;
      *((_QWORD *)&v170[10] + 1) = v199;
      *(_QWORD *)&v170[11] = v202;
      BYTE8(v166) = v207;
      *(_QWORD *)&v166 = v206;
      BYTE8(v167) = v209;
      *(_QWORD *)&v167 = v208;
      v168 = v210;
      LOBYTE(v170[0]) = v212;
      LODWORD(v170[1]) = v214;
      v169 = v211;
      *((_QWORD *)&v170[0] + 1) = v213;
      if (*((_BYTE *)this + 232))
      {
        DWORD2(v151) = (_DWORD)v179;
        BYTE12(v151) = 1;
      }
      v13 = *((_QWORD *)v3 + 1);
      v12 = *((_QWORD *)v3 + 2);
      v144 = v4;
      if (v13 < v12)
      {
        if (!v13)
          goto LABEL_110;
        v14 = v148;
        v15 = *(_OWORD *)v149;
        v16 = v151;
        *(_OWORD *)(v13 + 32) = v150;
        *(_OWORD *)(v13 + 48) = v16;
        *(_OWORD *)v13 = v14;
        *(_OWORD *)(v13 + 16) = v15;
        v17 = *(_OWORD *)v152;
        v18 = *(_OWORD *)&v152[2];
        v19 = *(_OWORD *)v153;
        *(_OWORD *)(v13 + 105) = *(_OWORD *)&v153[9];
        *(_OWORD *)(v13 + 80) = v18;
        *(_OWORD *)(v13 + 96) = v19;
        *(_OWORD *)(v13 + 64) = v17;
        v20 = (std::string *)(v13 + 128);
        if (SHIBYTE(v155) < 0)
        {
          std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)v154, *((std::string::size_type *)&v154 + 1));
          *(_QWORD *)(v13 + 152) = v156;
          *(_QWORD *)(v13 + 160) = 0;
          *(_QWORD *)(v13 + 168) = 0;
          *(_QWORD *)(v13 + 176) = 0;
          v22 = v157;
          v23 = v158 - (_BYTE *)v157;
          if (v158 != v157)
            goto LABEL_62;
LABEL_18:
          *(_QWORD *)(v13 + 184) = 0;
          *(_QWORD *)(v13 + 192) = 0;
          *(_QWORD *)(v13 + 200) = 0;
          v24 = __p;
          v25 = v161 - (_BYTE *)__p;
          if (v161 != __p)
          {
LABEL_64:
            if (v25 < 0)
              goto LABEL_111;
            v109 = (char *)operator new(v25);
            *(_QWORD *)(v13 + 184) = v109;
            *(_QWORD *)(v13 + 192) = v109;
            v110 = &v109[16 * (v25 >> 4)];
            *(_QWORD *)(v13 + 200) = v110;
            memcpy(v109, v24, v25);
            *(_QWORD *)(v13 + 192) = v110;
          }
        }
        else
        {
          v21 = v154;
          *(_QWORD *)(v13 + 144) = v155;
          *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          *(_QWORD *)(v13 + 152) = v156;
          *(_QWORD *)(v13 + 160) = 0;
          *(_QWORD *)(v13 + 168) = 0;
          *(_QWORD *)(v13 + 176) = 0;
          v22 = v157;
          v23 = v158 - (_BYTE *)v157;
          if (v158 == v157)
            goto LABEL_18;
LABEL_62:
          if (v23 < 0)
            goto LABEL_111;
          v107 = (char *)operator new(v23);
          *(_QWORD *)(v13 + 160) = v107;
          *(_QWORD *)(v13 + 168) = v107;
          v108 = &v107[16 * (v23 >> 4)];
          *(_QWORD *)(v13 + 176) = v108;
          memcpy(v107, v22, v23);
          *(_QWORD *)(v13 + 168) = v108;
          *(_QWORD *)(v13 + 184) = 0;
          *(_QWORD *)(v13 + 192) = 0;
          *(_QWORD *)(v13 + 200) = 0;
          v24 = __p;
          v25 = v161 - (_BYTE *)__p;
          if (v161 != __p)
            goto LABEL_64;
        }
        *(_OWORD *)(v13 + 208) = v163;
        v111 = v164;
        v112 = v165;
        v113 = v167;
        *(_OWORD *)(v13 + 256) = v166;
        *(_OWORD *)(v13 + 272) = v113;
        *(_OWORD *)(v13 + 224) = v111;
        *(_OWORD *)(v13 + 240) = v112;
        v114 = v168;
        v115 = v169;
        v116 = v170[0];
        *(_DWORD *)(v13 + 336) = v170[1];
        *(_OWORD *)(v13 + 304) = v115;
        *(_OWORD *)(v13 + 320) = v116;
        *(_OWORD *)(v13 + 288) = v114;
        v117 = *(_OWORD *)((char *)&v170[1] + 4);
        v118 = *(_OWORD *)((char *)&v170[2] + 4);
        v119 = *(_OWORD *)((char *)&v170[4] + 4);
        *(_OWORD *)(v13 + 372) = *(_OWORD *)((char *)&v170[3] + 4);
        *(_OWORD *)(v13 + 388) = v119;
        *(_OWORD *)(v13 + 340) = v117;
        *(_OWORD *)(v13 + 356) = v118;
        v120 = *(_OWORD *)((char *)&v170[5] + 4);
        v121 = *(_OWORD *)((char *)&v170[6] + 4);
        v122 = *(_OWORD *)((char *)&v170[8] + 4);
        *(_OWORD *)(v13 + 436) = *(_OWORD *)((char *)&v170[7] + 4);
        *(_OWORD *)(v13 + 452) = v122;
        *(_OWORD *)(v13 + 404) = v120;
        *(_OWORD *)(v13 + 420) = v121;
        v123 = *(_OWORD *)((char *)&v170[9] + 4);
        v124 = *(_OWORD *)((char *)&v170[10] + 4);
        v125 = *(_OWORD *)((char *)&v170[11] + 4);
        *(_OWORD *)(v13 + 512) = v170[12];
        *(_OWORD *)(v13 + 484) = v124;
        *(_OWORD *)(v13 + 500) = v125;
        *(_OWORD *)(v13 + 468) = v123;
        v56 = (char *)(v13 + 528);
        goto LABEL_67;
      }
      v26 = 0xF83E0F83E0F83E1 * ((uint64_t)(v13 - *(_QWORD *)v3) >> 4);
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) > 0x7C1F07C1F07C1FLL)
        goto LABEL_111;
      v28 = 0xF83E0F83E0F83E1 * ((uint64_t)(v12 - *(_QWORD *)v3) >> 4);
      if (2 * v28 > v27)
        v27 = 2 * v28;
      if (v28 >= 0x3E0F83E0F83E0FLL)
        v29 = 0x7C1F07C1F07C1FLL;
      else
        v29 = v27;
      if (!v29)
      {
LABEL_110:
        __break(1u);
LABEL_111:
        abort();
      }
      if (v29 > 0x7C1F07C1F07C1FLL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v30 = 528 * v29;
      v31 = (char *)operator new(528 * v29);
      v32 = *(_OWORD *)&v152[2];
      v33 = &v31[528 * v26];
      *((_OWORD *)v33 + 4) = *(_OWORD *)v152;
      *((_OWORD *)v33 + 5) = v32;
      *((_OWORD *)v33 + 6) = *(_OWORD *)v153;
      *(_OWORD *)(v33 + 105) = *(_OWORD *)&v153[9];
      v34 = *(_OWORD *)v149;
      *(_OWORD *)v33 = v148;
      *((_OWORD *)v33 + 1) = v34;
      v35 = v151;
      *((_OWORD *)v33 + 2) = v150;
      *((_OWORD *)v33 + 3) = v35;
      v36 = (std::string *)(v33 + 128);
      if (SHIBYTE(v155) < 0)
      {
        std::string::__init_copy_ctor_external(v36, (const std::string::value_type *)v154, *((std::string::size_type *)&v154 + 1));
        v37 = v157;
        *((_QWORD *)v33 + 19) = v156;
        *((_QWORD *)v33 + 20) = 0;
        *((_QWORD *)v33 + 21) = 0;
        *((_QWORD *)v33 + 22) = 0;
        v38 = v158 - v37;
        if (v158 == v37)
        {
LABEL_30:
          *((_QWORD *)v33 + 23) = 0;
          *((_QWORD *)v33 + 24) = 0;
          *((_QWORD *)v33 + 25) = 0;
          v39 = __p;
          v40 = v161 - (_BYTE *)__p;
          if (v161 != __p)
            goto LABEL_35;
          goto LABEL_37;
        }
      }
      else
      {
        *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v154;
        *((_QWORD *)v33 + 18) = v155;
        v37 = v157;
        *((_QWORD *)v33 + 19) = v156;
        *((_QWORD *)v33 + 20) = 0;
        *((_QWORD *)v33 + 21) = 0;
        *((_QWORD *)v33 + 22) = 0;
        v38 = v158 - v37;
        if (v158 == v37)
          goto LABEL_30;
      }
      if (v38 < 0)
        goto LABEL_111;
      v41 = (char *)operator new(v38);
      *((_QWORD *)v33 + 20) = v41;
      *((_QWORD *)v33 + 21) = v41;
      v42 = &v41[16 * (v38 >> 4)];
      *((_QWORD *)v33 + 22) = v42;
      memcpy(v41, v37, v38);
      *((_QWORD *)v33 + 21) = v42;
      *((_QWORD *)v33 + 23) = 0;
      *((_QWORD *)v33 + 24) = 0;
      *((_QWORD *)v33 + 25) = 0;
      v39 = __p;
      v40 = v161 - (_BYTE *)__p;
      if (v161 != __p)
      {
LABEL_35:
        if (v40 < 0)
          goto LABEL_111;
        v43 = (char *)operator new(v40);
        *((_QWORD *)v33 + 23) = v43;
        *((_QWORD *)v33 + 24) = v43;
        v44 = &v43[16 * (v40 >> 4)];
        *((_QWORD *)v33 + 25) = v44;
        memcpy(v43, v39, v40);
        *((_QWORD *)v33 + 24) = v44;
      }
LABEL_37:
      v45 = &v31[v30];
      v46 = v170[0];
      *((_OWORD *)v33 + 19) = v169;
      *((_OWORD *)v33 + 20) = v46;
      *((_DWORD *)v33 + 84) = v170[1];
      v47 = v166;
      *((_OWORD *)v33 + 15) = v165;
      *((_OWORD *)v33 + 16) = v47;
      v48 = v168;
      *((_OWORD *)v33 + 17) = v167;
      *((_OWORD *)v33 + 18) = v48;
      v49 = v164;
      *((_OWORD *)v33 + 13) = v163;
      *((_OWORD *)v33 + 14) = v49;
      v50 = &v31[528 * v26];
      *((_OWORD *)v50 + 32) = v170[12];
      v51 = *(_OWORD *)((char *)&v170[10] + 4);
      *(_OWORD *)(v50 + 468) = *(_OWORD *)((char *)&v170[9] + 4);
      *(_OWORD *)(v50 + 484) = v51;
      *(_OWORD *)(v50 + 500) = *(_OWORD *)((char *)&v170[11] + 4);
      v52 = *(_OWORD *)((char *)&v170[6] + 4);
      *(_OWORD *)(v50 + 404) = *(_OWORD *)((char *)&v170[5] + 4);
      *(_OWORD *)(v50 + 420) = v52;
      v53 = *(_OWORD *)((char *)&v170[8] + 4);
      *(_OWORD *)(v50 + 436) = *(_OWORD *)((char *)&v170[7] + 4);
      *(_OWORD *)(v50 + 452) = v53;
      v54 = *(_OWORD *)((char *)&v170[2] + 4);
      *(_OWORD *)(v50 + 340) = *(_OWORD *)((char *)&v170[1] + 4);
      *(_OWORD *)(v50 + 356) = v54;
      v55 = *(_OWORD *)((char *)&v170[4] + 4);
      *(_OWORD *)(v50 + 372) = *(_OWORD *)((char *)&v170[3] + 4);
      *(_OWORD *)(v50 + 388) = v55;
      v56 = v33 + 528;
      v57 = a2[1];
      v147 = *a2;
      if (v57 == *a2)
      {
        *a2 = v33;
        a2[1] = v56;
        a2[2] = v45;
      }
      else
      {
        v141 = v45;
        v58 = 0;
        do
        {
          v76 = &v33[v58 - 528];
          v77 = *(_OWORD *)&v57[v58 - 528];
          v78 = *(_OWORD *)&v57[v58 - 512];
          v79 = *(_OWORD *)&v57[v58 - 480];
          *((_OWORD *)v76 + 2) = *(_OWORD *)&v57[v58 - 496];
          *((_OWORD *)v76 + 3) = v79;
          *(_OWORD *)v76 = v77;
          *((_OWORD *)v76 + 1) = v78;
          v80 = *(_OWORD *)&v57[v58 - 464];
          v81 = *(_OWORD *)&v57[v58 - 448];
          v82 = *(_OWORD *)&v57[v58 - 432];
          *(_OWORD *)(v76 + 105) = *(_OWORD *)&v57[v58 - 423];
          *((_OWORD *)v76 + 5) = v81;
          *((_OWORD *)v76 + 6) = v82;
          *((_OWORD *)v76 + 4) = v80;
          v83 = (std::string *)&v33[v58 - 400];
          v84 = (const std::string::value_type **)&v57[v58 - 400];
          if (v57[v58 - 377] < 0)
          {
            std::string::__init_copy_ctor_external(v83, *v84, *(_QWORD *)&v57[v58 - 392]);
          }
          else
          {
            v85 = *(_OWORD *)v84;
            *(_QWORD *)&v33[v58 - 384] = *(_QWORD *)&v57[v58 - 384];
            *(_OWORD *)&v83->__r_.__value_.__l.__data_ = v85;
          }
          v86 = &v33[v58];
          v87 = &v57[v58];
          *(_QWORD *)&v33[v58 - 376] = *(_QWORD *)&v57[v58 - 376];
          v88 = &v33[v58 - 368];
          *((_QWORD *)v88 + 1) = 0;
          *((_QWORD *)v88 + 2) = 0;
          *(_QWORD *)v88 = 0;
          v89 = *(_BYTE **)&v57[v58 - 368];
          v90 = *(_BYTE **)&v57[v58 - 360];
          v91 = v90 - v89;
          if (v90 != v89)
          {
            if (v91 < 0)
              goto LABEL_111;
            v92 = (char **)(v86 - 360);
            v93 = (char *)operator new(v91);
            *(_QWORD *)v88 = v93;
            *v92 = v93;
            v94 = &v93[16 * (v91 >> 4)];
            *((_QWORD *)v86 - 44) = v94;
            memcpy(v93, v89, v91);
            *v92 = v94;
          }
          v95 = v86 - 344;
          v96 = (char **)(v86 - 336);
          *((_QWORD *)v86 - 42) = 0;
          *(_QWORD *)v95 = 0;
          *((_QWORD *)v95 + 2) = 0;
          v97 = (_BYTE *)*((_QWORD *)v87 - 43);
          v98 = (_BYTE *)*((_QWORD *)v87 - 42);
          v99 = v98 - v97;
          if (v98 != v97)
          {
            if (v99 < 0)
              goto LABEL_111;
            v100 = (char *)operator new(v98 - v97);
            *(_QWORD *)v95 = v100;
            *v96 = v100;
            v101 = &v100[16 * (v99 >> 4)];
            *((_QWORD *)v86 - 41) = v101;
            memcpy(v100, v97, v99);
            *v96 = v101;
          }
          v59 = &v33[v58];
          v60 = &v33[v58 - 320];
          v61 = *(_OWORD *)&v57[v58 - 240];
          v62 = *(_OWORD *)&v57[v58 - 224];
          v63 = *(_OWORD *)&v57[v58 - 208];
          *((_DWORD *)v59 - 48) = *(_DWORD *)&v57[v58 - 192];
          *((_OWORD *)v59 - 14) = v62;
          *((_OWORD *)v59 - 13) = v63;
          *((_OWORD *)v59 - 15) = v61;
          *(_OWORD *)v60 = *(_OWORD *)&v57[v58 - 320];
          v64 = *(_OWORD *)&v57[v58 - 304];
          v65 = *(_OWORD *)&v57[v58 - 288];
          v66 = *(_OWORD *)&v57[v58 - 272];
          *((_OWORD *)v59 - 16) = *(_OWORD *)&v57[v58 - 256];
          *((_OWORD *)v60 + 2) = v65;
          *((_OWORD *)v60 + 3) = v66;
          *((_OWORD *)v60 + 1) = v64;
          v67 = *(_OWORD *)&v57[v58 - 188];
          v68 = *(_OWORD *)&v57[v58 - 172];
          v69 = *(_OWORD *)&v57[v58 - 156];
          *(_OWORD *)(v59 - 140) = *(_OWORD *)&v57[v58 - 140];
          *(_OWORD *)(v59 - 156) = v69;
          *(_OWORD *)(v59 - 172) = v68;
          *(_OWORD *)(v59 - 188) = v67;
          v70 = *(_OWORD *)&v57[v58 - 124];
          v71 = *(_OWORD *)&v57[v58 - 108];
          v72 = *(_OWORD *)&v57[v58 - 92];
          *(_OWORD *)(v59 - 76) = *(_OWORD *)&v57[v58 - 76];
          *(_OWORD *)(v59 - 92) = v72;
          *(_OWORD *)(v59 - 108) = v71;
          *(_OWORD *)(v59 - 124) = v70;
          v73 = *(_OWORD *)&v57[v58 - 60];
          v74 = *(_OWORD *)&v57[v58 - 44];
          v75 = *(_OWORD *)&v57[v58 - 28];
          *((_OWORD *)v59 - 1) = *(_OWORD *)&v57[v58 - 16];
          *(_OWORD *)(v59 - 28) = v75;
          *(_OWORD *)(v59 - 44) = v74;
          *(_OWORD *)(v59 - 60) = v73;
          v58 -= 528;
        }
        while (&v57[v58] != v147);
        v57 = *a2;
        v102 = a2[1];
        v56 = v33 + 528;
        *a2 = &v33[v58];
        a2[1] = v33 + 528;
        a2[2] = v141;
        if (v102 != v57)
        {
          v103 = v102 - 400;
          do
          {
            v105 = (void *)*((_QWORD *)v103 + 7);
            if (v105)
            {
              *((_QWORD *)v103 + 8) = v105;
              operator delete(v105);
            }
            v106 = (void *)*((_QWORD *)v103 + 4);
            if (v106)
            {
              *((_QWORD *)v103 + 5) = v106;
              operator delete(v106);
            }
            if (v103[23] < 0)
              operator delete(*(void **)v103);
            v104 = v103 - 128;
            v103 -= 528;
          }
          while (v104 != v57);
        }
      }
      if (v57)
        operator delete(v57);
LABEL_67:
      v3 = (cricket::VoiceMediaReceiveInfo *)a2;
      a2[1] = v56;
      v4 = v144;
      if (__p)
      {
        v161 = __p;
        operator delete(__p);
      }
      if (v157)
      {
        v158 = v157;
        operator delete(v157);
      }
      if (SHIBYTE(v155) < 0)
      {
        operator delete((void *)v154);
        if ((SHIBYTE(v181) & 0x80000000) == 0)
          goto LABEL_73;
      }
      else if ((SHIBYTE(v181) & 0x80000000) == 0)
      {
        goto LABEL_73;
      }
      operator delete((void *)__src);
      v126 = (char *)*((_QWORD *)v144 + 1);
      if (!v126)
      {
        do
        {
LABEL_78:
          v127 = (char *)*((_QWORD *)v4 + 2);
          v128 = *(_QWORD *)v127 == (_QWORD)v4;
          v4 = v127;
        }
        while (!v128);
        goto LABEL_3;
      }
      do
      {
LABEL_74:
        v127 = v126;
        v126 = *(char **)v126;
      }
      while (v126);
LABEL_3:
      v4 = v127;
    }
    while (v127 != v143);
  }
  v129 = *(_QWORD *)v3;
  v130 = *((_QWORD *)v3 + 1);
  if (*(_QWORD *)v3 != v130)
  {
    v131 = (uint64_t *)(a2 + 4);
    do
    {
      v133 = (char *)*((_QWORD *)this + 16);
      v132 = (char *)*((_QWORD *)this + 17);
      if (v133 != v132)
      {
        if (*(_BYTE *)(v129 + 156))
        {
          while (*(_DWORD *)(v129 + 152) != *((_DWORD *)v133 + 3))
          {
            v133 += 216;
            if (v133 == v132)
              goto LABEL_83;
          }
        }
        else
        {
          v133 += 216 * ((v132 - v133 - 216) / 0xD8uLL) + 216;
        }
      }
      if (v133 != v132)
      {
        (*(void (**)(void (***__return_ptr)(webrtc::RtpCodec *__hidden), char *))(*(_QWORD *)v133 + 16))(&v171, v133);
        LODWORD(v148) = *((_DWORD *)v133 + 3);
        webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)((char *)&v148 + 8), (const webrtc::RtpCodec *)&v171);
        *((_QWORD *)&v148 + 1) = off_24C0BCC30;
        *(_DWORD *)&v153[16] = v184;
        v134 = *v131;
        v135 = a2 + 4;
        v136 = a2 + 4;
        if (*v131)
        {
          while (1)
          {
            while (1)
            {
              v136 = (_QWORD *)v134;
              v137 = *(_DWORD *)(v134 + 32);
              if ((int)v148 >= v137)
                break;
              v134 = *v136;
              v135 = v136;
              if (!*v136)
                goto LABEL_98;
            }
            if (v137 >= (int)v148)
              break;
            v134 = v136[1];
            if (!v134)
            {
              v135 = v136 + 1;
              goto LABEL_98;
            }
          }
        }
        else
        {
LABEL_98:
          v138 = operator new(0x98uLL);
          v138[8] = v148;
          webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v138 + 10), (const webrtc::RtpCodec *)((char *)&v148 + 8));
          *((_QWORD *)v138 + 5) = off_24C0BCC30;
          v138[36] = *(_DWORD *)&v153[16];
          *(_QWORD *)v138 = 0;
          *((_QWORD *)v138 + 1) = 0;
          *((_QWORD *)v138 + 2) = v136;
          *v135 = v138;
          v139 = *(char **)a2[3];
          if (v139)
          {
            a2[3] = v139;
            v138 = (_DWORD *)*v135;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)a2[4], (uint64_t *)v138);
          ++a2[5];
        }
        *((_QWORD *)&v148 + 1) = off_24C0BCBF0;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v152[3], *(uint64_t *)v153);
        if (v152[0])
        {
          v152[1] = v152[0];
          operator delete(v152[0]);
        }
        if (SBYTE7(v150) < 0)
          operator delete(v149[0]);
        v171 = off_24C0BCBF0;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__src + 8, v181);
        if (v178)
        {
          v179 = v178;
          operator delete(v178);
        }
        if (v174 < 0)
          operator delete((void *)v172);
      }
LABEL_83:
      v129 += 528;
    }
    while (v129 != v130);
  }
  *((_DWORD *)a2 + 12) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 12) + 32) + 496))(*(_QWORD *)(*((_QWORD *)this + 12) + 32));
  return 1;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::GetStats(cricket::WebRtcVoiceReceiveChannel *this, char **a2, unsigned int a3)
{
  cricket::WebRtcVoiceReceiveChannel::GetStats((cricket::WebRtcVoiceReceiveChannel *)((char *)this - 64), a2, a3);
  return 1;
}

void `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::SetRawAudioSink(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  cricket::WebRtcVoiceReceiveChannel::SetRawAudioSink(a1 - 64, a2, a3);
}

_QWORD *cricket::WebRtcVoiceReceiveChannel::SetDefaultRawAudioSink(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
  v12 = a1[32];
  v11 = a1[33];
  if (v12 == v11)
    goto LABEL_8;
  if (*a2)
  {
    result = (_QWORD *)operator new();
    v14 = *a2;
    *result = &off_24C0C67E0;
    result[1] = v14;
    v11 = a1[33];
    if (a1[32] != v11)
      goto LABEL_6;
LABEL_12:
    __break(1u);
    return result;
  }
  result = 0;
  if (v12 == v11)
    goto LABEL_12;
LABEL_6:
  v15 = *(_DWORD *)(v11 - 4);
  v17 = result;
  cricket::WebRtcVoiceReceiveChannel::SetRawAudioSink((uint64_t)a1, v15, (uint64_t *)&v17);
  if (v17)
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
LABEL_8:
  v16 = *a2;
  *a2 = 0;
  result = (_QWORD *)a1[55];
  a1[55] = v16;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_QWORD *`non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::SetDefaultRawAudioSink(uint64_t a1, uint64_t *a2)
{
  return cricket::WebRtcVoiceReceiveChannel::SetDefaultRawAudioSink((_QWORD *)(a1 - 64), a2);
}

void cricket::WebRtcVoiceReceiveChannel::GetSources(cricket::WebRtcVoiceReceiveChannel *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = (char *)*((_QWORD *)this + 61);
  if (!v4)
    goto LABEL_12;
  v5 = (char *)this + 488;
  do
  {
    v6 = *((_DWORD *)v4 + 8);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (char **)v4;
    else
      v8 = (char **)(v4 + 8);
    if (v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != (char *)this + 488 && *((_DWORD *)v5 + 8) <= a2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v5 + 5) + 16) + 48))(*(_QWORD *)(*((_QWORD *)v5 + 5)
                                                                                                  + 16));
  }
  else
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::GetSources(cricket::WebRtcVoiceReceiveChannel *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = (char *)*((_QWORD *)this + 53);
  if (!v4)
    goto LABEL_12;
  v5 = (char *)this + 424;
  do
  {
    v6 = *((_DWORD *)v4 + 8);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (char **)v4;
    else
      v8 = (char **)(v4 + 8);
    if (v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != (char *)this + 424 && *((_DWORD *)v5 + 8) <= a2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v5 + 5) + 16) + 48))(*(_QWORD *)(*((_QWORD *)v5 + 5)
                                                                                                  + 16));
  }
  else
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void cricket::WebRtcVoiceReceiveChannel::SetDepacketizerToDecoderFrameTransformer(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 488);
    if (!v3)
      goto LABEL_13;
    v4 = a1 + 488;
    do
    {
      v5 = *(_DWORD *)(v3 + 32);
      v6 = v5 >= a2;
      if (v5 >= a2)
        v7 = (uint64_t *)v3;
      else
        v7 = (uint64_t *)(v3 + 8);
      if (v6)
        v4 = v3;
      v3 = *v7;
    }
    while (*v7);
    if (v4 != a1 + 488 && *(_DWORD *)(v4 + 32) <= a2)
    {
      v17 = *(_QWORD *)(v4 + 40);
      v18 = *a3;
      *a3 = 0;
      v19 = *(_QWORD *)(v17 + 16);
      v20 = v18;
      if (v18)
        (**(void (***)(uint64_t))v18)(v18);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 32))(v19, &v20);
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
    else
    {
LABEL_13:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    }
  }
  else
  {
    v15 = *a3;
    *a3 = 0;
    v16 = *(_QWORD *)(a1 + 688);
    *(_QWORD *)(a1 + 688) = v15;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
}

void `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::SetDepacketizerToDecoderFrameTransformer(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  cricket::WebRtcVoiceReceiveChannel::SetDepacketizerToDecoderFrameTransformer(a1 - 64, a2, a3);
}

uint64_t cricket::WebRtcVoiceSendChannel::media_type(cricket::WebRtcVoiceSendChannel *this)
{
  return 0;
}

void cricket::WebRtcVoiceSendChannel::AsVideoSendChannel(cricket::WebRtcVoiceSendChannel *this)
{
  rtc::webrtc_checks_impl::UnreachableCodeReached(this);
}

uint64_t cricket::WebRtcVoiceSendChannel::AsVoiceSendChannel(cricket::WebRtcVoiceSendChannel *this)
{
  return (uint64_t)this + 64;
}

uint64_t cricket::WebRtcVoiceSendChannel::SetInterface(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result;
  *(_BYTE *)(*(_QWORD *)(result + 24) + 4) = a2 != 0;
  *(_QWORD *)(result + 48) = a2;
  if (*(_BYTE *)(result + 40))
  {
    v3 = *(unsigned int *)(result + 56);
    if (!a2)
      return result;
  }
  else
  {
    v3 = 0;
    if (!a2)
      return result;
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 5, v3);
  if (!(_DWORD)result)
  {
    result = *(_QWORD *)(v2 + 48);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 1, 5, v3);
  }
  return result;
}

BOOL cricket::WebRtcVoiceSendChannel::HasNetworkInterface(cricket::WebRtcVoiceSendChannel *this)
{
  return *((_QWORD *)this + 6) != 0;
}

BOOL cricket::WebRtcVoiceSendChannel::SenderNackEnabled(cricket::WebRtcVoiceSendChannel *this)
{
  return *((_BYTE *)this + 424) && *((_BYTE *)this + 392) != 0;
}

BOOL cricket::WebRtcVoiceSendChannel::SenderNonSenderRttEnabled(cricket::WebRtcVoiceSendChannel *this)
{
  return *((_BYTE *)this + 424) && *((_BYTE *)this + 394) != 0;
}

BOOL cricket::WebRtcVoiceSendChannel::SendCodecHasNack(cricket::WebRtcVoiceSendChannel *this)
{
  return *((_BYTE *)this + 424) && *((_BYTE *)this + 392) != 0;
}

__n128 cricket::WebRtcVoiceSendChannel::SetSendCodecChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;

  v4 = a1 + 456;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 472))(1, v4, v4);
  *(_QWORD *)(v4 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 480) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a2 + 16))(0, a2, v4);
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(v4 + 16) = result;
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::AsVideoSendChannel(cricket::WebRtcVoiceSendChannel *this)
{
  rtc::webrtc_checks_impl::UnreachableCodeReached(this);
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::media_type(cricket::WebRtcVoiceSendChannel *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::SetInterface(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result;
  *(_BYTE *)(*(_QWORD *)(result - 40) + 4) = a2 != 0;
  *(_QWORD *)(result - 16) = a2;
  if (*(_BYTE *)(result - 24))
  {
    v3 = *(unsigned int *)(result - 8);
    if (!a2)
      return result;
  }
  else
  {
    v3 = 0;
    if (!a2)
      return result;
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 5, v3);
  if (!(_DWORD)result)
  {
    result = *(_QWORD *)(v2 - 16);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 1, 5, v3);
  }
  return result;
}

BOOL `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::HasNetworkInterface(cricket::WebRtcVoiceSendChannel *this)
{
  return *((_QWORD *)this - 2) != 0;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::SetExtmapAllowMixed(uint64_t this, char a2)
{
  *(_BYTE *)(this - 56) = a2;
  return this;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::ExtmapAllowMixed(cricket::WebRtcVoiceSendChannel *this)
{
  return *((unsigned __int8 *)this - 56);
}

BOOL `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::SendCodecHasNack(cricket::WebRtcVoiceSendChannel *this)
{
  return *((_BYTE *)this + 360) && *((_BYTE *)this + 328) != 0;
}

__n128 `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::SetSendCodecChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 *v5;
  __n128 result;

  v4 = a1 + 392;
  v5 = (__n128 *)(a1 + 408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 408))(1, v4, v4);
  *(_QWORD *)(a1 + 408) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 416) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a2 + 16))(0, a2, v4);
  result = *(__n128 *)(a2 + 16);
  *v5 = result;
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

BOOL `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::SenderNackEnabled(cricket::WebRtcVoiceSendChannel *this)
{
  return *((_BYTE *)this + 360) && *((_BYTE *)this + 328) != 0;
}

BOOL `non-virtual thunk to'cricket::WebRtcVoiceSendChannel::SenderNonSenderRttEnabled(cricket::WebRtcVoiceSendChannel *this)
{
  return *((_BYTE *)this + 360) && *((_BYTE *)this + 330) != 0;
}

uint64_t cricket::WebRtcVoiceReceiveChannel::media_type(cricket::WebRtcVoiceReceiveChannel *this)
{
  return 0;
}

void cricket::WebRtcVoiceReceiveChannel::AsVideoReceiveChannel(cricket::WebRtcVoiceReceiveChannel *this)
{
  rtc::webrtc_checks_impl::UnreachableCodeReached(this);
}

uint64_t cricket::WebRtcVoiceReceiveChannel::AsVoiceReceiveChannel(cricket::WebRtcVoiceReceiveChannel *this)
{
  return (uint64_t)this + 64;
}

uint64_t cricket::WebRtcVoiceReceiveChannel::SetInterface(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result;
  *(_BYTE *)(*(_QWORD *)(result + 24) + 4) = a2 != 0;
  *(_QWORD *)(result + 48) = a2;
  if (*(_BYTE *)(result + 40))
  {
    v3 = *(unsigned int *)(result + 56);
    if (!a2)
      return result;
  }
  else
  {
    v3 = 0;
    if (!a2)
      return result;
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 5, v3);
  if (!(_DWORD)result)
  {
    result = *(_QWORD *)(v2 + 48);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 1, 5, v3);
  }
  return result;
}

void `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::AsVideoReceiveChannel(cricket::WebRtcVoiceReceiveChannel *this)
{
  rtc::webrtc_checks_impl::UnreachableCodeReached(this);
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::media_type(cricket::WebRtcVoiceReceiveChannel *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'cricket::WebRtcVoiceReceiveChannel::SetInterface(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result;
  *(_BYTE *)(*(_QWORD *)(result - 40) + 4) = a2 != 0;
  *(_QWORD *)(result - 16) = a2;
  if (*(_BYTE *)(result - 24))
  {
    v3 = *(unsigned int *)(result - 8);
    if (!a2)
      return result;
  }
  else
  {
    v3 = 0;
    if (!a2)
      return result;
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 5, v3);
  if (!(_DWORD)result)
  {
    result = *(_QWORD *)(v2 - 16);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 1, 5, v3);
  }
  return result;
}

void cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream::UpdateSendCodecSpec(cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream *this, const webrtc::AudioSendStream::Config::SendCodecSpec *a2)
{
  int v4;
  __int128 *v5;
  std::string *v6;
  std::string *v7;
  _OWORD *v8;
  char v9;
  __int128 v10;
  __int128 v11;
  const std::string::value_type *v12;
  size_t v13;
  const webrtc::AudioSendStream::Config::SendCodecSpec *v14;
  const webrtc::AudioSendStream::Config::SendCodecSpec *v15;
  const webrtc::AudioSendStream::Config::SendCodecSpec *v16;
  BOOL v17;
  __int128 v18;
  __int128 v19;
  int v20;
  char *v21;
  uint64_t **v22;
  char *v23;
  uint64_t **v24;
  void **v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t **v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char v54;
  uint64_t **v55;
  std::string *p_s2;
  std::string::size_type size;
  _QWORD *v58;
  size_t v59;
  size_t v60;
  int v61;
  _QWORD *v62;
  uint64_t *v63;
  unsigned int v64;
  std::string __s2;
  __int128 v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD v70[2];
  _BYTE v71[30];
  char v72;

  v4 = *((unsigned __int8 *)this + 392);
  v5 = (__int128 *)((char *)a2 + 72);
  *((_DWORD *)this + 72) = *(_DWORD *)a2;
  v6 = (std::string *)((char *)this + 296);
  v7 = (std::string *)((char *)a2 + 8);
  v8 = (_OWORD *)((char *)this + 360);
  if (v4)
  {
    if (v6 != v7)
    {
      v9 = *((_BYTE *)a2 + 31);
      if (*((char *)this + 319) < 0)
      {
        if (v9 >= 0)
          v12 = (char *)a2 + 8;
        else
          v12 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
        if (v9 >= 0)
          v13 = *((unsigned __int8 *)a2 + 31);
        else
          v13 = *((_QWORD *)a2 + 2);
        std::string::__assign_no_alias<false>(v6, v12, v13);
      }
      else if ((*((_BYTE *)a2 + 31) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v6, *((char **)a2 + 1), *((_QWORD *)a2 + 2));
      }
      else
      {
        v10 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
        v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v10;
      }
      *((_OWORD *)this + 20) = *((_OWORD *)a2 + 2);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)this + 336, *((char **)a2 + 6), (char *)a2 + 56);
    }
    v19 = *v5;
    *(_OWORD *)((char *)this + 369) = *(__int128 *)((char *)v5 + 9);
    *v8 = v19;
  }
  else
  {
    if (*((char *)a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    }
    else
    {
      v11 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v11;
    }
    *((_OWORD *)this + 20) = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 43) = 0;
    *((_QWORD *)this + 44) = 0;
    *((_QWORD *)this + 42) = (char *)this + 344;
    v14 = (const webrtc::AudioSendStream::Config::SendCodecSpec *)*((_QWORD *)a2 + 6);
    if (v14 != (const webrtc::AudioSendStream::Config::SendCodecSpec *)((char *)a2 + 56))
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)this + 42, (uint64_t *)this + 43, (uint64_t)v14 + 32, (uint64_t)v14 + 32);
        v15 = (const webrtc::AudioSendStream::Config::SendCodecSpec *)*((_QWORD *)v14 + 1);
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = *(const webrtc::AudioSendStream::Config::SendCodecSpec **)v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (const webrtc::AudioSendStream::Config::SendCodecSpec *)*((_QWORD *)v14 + 2);
            v17 = *(_QWORD *)v16 == (_QWORD)v14;
            v14 = v16;
          }
          while (!v17);
        }
        v14 = v16;
      }
      while (v16 != (const webrtc::AudioSendStream::Config::SendCodecSpec *)((char *)a2 + 56));
    }
    v18 = *v5;
    *(_OWORD *)((char *)this + 369) = *(__int128 *)((char *)v5 + 9);
    *v8 = v18;
    *((_BYTE *)this + 392) = 1;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, std::string *))(**((_QWORD **)this + 50) + 40))(v71, *((_QWORD *)this + 50), v7);
  if (*((_BYTE *)a2 + 96))
  {
    if (!v72)
      goto LABEL_123;
    v20 = *((_DWORD *)a2 + 23);
    if (v20 >= *(int *)&v71[24])
      v20 = *(_DWORD *)&v71[24];
    if (*(int *)&v71[20] > v20)
      v20 = *(_DWORD *)&v71[20];
    *(_DWORD *)&v71[16] = v20;
  }
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__s2, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    __s2 = *v7;
  v23 = (char *)*((_QWORD *)a2 + 6);
  v21 = (char *)a2 + 48;
  v22 = (uint64_t **)v23;
  v66 = *((_OWORD *)v21 - 1);
  v68 = 0;
  v69 = 0;
  v67 = &v68;
  v24 = (uint64_t **)(v21 + 8);
  if (v23 != v21 + 8)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v67, &v68, (uint64_t)(v22 + 4), (uint64_t)(v22 + 4));
      v30 = v22[1];
      if (v30)
      {
        do
        {
          v31 = (uint64_t **)v30;
          v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (uint64_t **)v22[2];
          v17 = *v31 == (uint64_t *)v22;
          v22 = v31;
        }
        while (!v17);
      }
      v22 = v31;
    }
    while (v31 != v24);
  }
  if (!v72)
    goto LABEL_123;
  v25 = (void **)((char *)this + 664);
  v70[0] = *(_OWORD *)v71;
  *(_OWORD *)((char *)v70 + 14) = *(_OWORD *)&v71[14];
  if (*((_BYTE *)this + 760))
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 704, *((_QWORD *)this + 89));
    if (*((char *)this + 687) < 0)
      operator delete(*v25);
    *((_BYTE *)this + 760) = 0;
  }
  *(_OWORD *)v25 = *(_OWORD *)&__s2.__r_.__value_.__l.__data_;
  v27 = v67;
  v26 = v68;
  *((_QWORD *)this + 85) = *((_QWORD *)&__s2.__r_.__value_.__l + 2);
  memset(&__s2, 0, sizeof(__s2));
  *((_OWORD *)this + 43) = v66;
  *((_QWORD *)this + 88) = v27;
  v28 = (char *)this + 712;
  v29 = v69;
  *((_QWORD *)this + 89) = v26;
  *((_QWORD *)this + 90) = v29;
  if (v29)
  {
    *(_QWORD *)(v26 + 16) = v28;
    v26 = 0;
    v67 = &v68;
    v68 = 0;
    v69 = 0;
  }
  else
  {
    *((_QWORD *)this + 88) = v28;
  }
  v32 = v70[1];
  *(_OWORD *)((char *)this + 728) = v70[0];
  *(_OWORD *)((char *)this + 744) = v32;
  *((_BYTE *)this + 760) = 1;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v67, v26);
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s2.__r_.__value_.__l.__data_);
  v33 = *((_QWORD *)this + 74);
  if (*((_QWORD *)this + 75) == v33 || !*((_BYTE *)this + 760))
    goto LABEL_123;
  v34 = *((_DWORD *)this + 123);
  v35 = *(_QWORD *)(v33 + 20);
  if ((v35 & 0xFF00000000) != 0)
  {
    if (v35 >= v34)
      v36 = *((_DWORD *)this + 123);
    else
      v36 = v35;
    if ((int)v35 < 1)
      v36 = *((_DWORD *)this + 123);
    if (v34 >= 1)
      v34 = v36;
    else
      v34 = v35;
  }
  if (v34 <= 0)
    goto LABEL_74;
  v37 = *((_DWORD *)this + 187);
  if (v34 < v37)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc");
    v45 = 0;
    LOBYTE(v46) = 0;
    v47 = 0;
    goto LABEL_79;
  }
  v48 = *((_DWORD *)this + 188);
  if (v37 == v48)
  {
LABEL_74:
    v46 = *((_DWORD *)this + 186);
  }
  else if (v48 >= v34)
  {
    v46 = v34;
  }
  else
  {
    v46 = *((_DWORD *)this + 188);
  }
  v47 = v46 & 0xFFFFFF00;
  v45 = 0x100000000;
LABEL_79:
  if (!*((_BYTE *)this + 392))
    goto LABEL_123;
  v49 = v47 | v46;
  v50 = v45 | v49;
  v51 = HIDWORD(v45);
  *((_BYTE *)this + 384) = v51;
  *((_DWORD *)this + 95) = v50;
  *((_QWORD *)this + 29) = 0x7D0000007D00;
  if (v51)
  {
    *((_DWORD *)this + 58) = v49;
    *((_DWORD *)this + 59) = v49;
  }
  else
  {
    v49 = 32000;
  }
  v52 = *((_QWORD *)this + 74);
  if (*((_QWORD *)this + 75) == v52)
    goto LABEL_123;
  if (*(_BYTE *)(v52 + 153))
  {
    if (v49 >= *((_DWORD *)this + 6))
      v49 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 58) = v49;
  }
  *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 6;
  if (&__s2 <= (std::string *)"stereo" && (char *)__s2.__r_.__value_.__r.__words + 6 > "stereo")
    goto LABEL_123;
  strcpy((char *)&__s2, "stereo");
  v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)v21, (const void **)&__s2.__r_.__value_.__l.__data_, *v24, (uint64_t *)v21 + 1);
  v54 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
  if (v24 == (uint64_t **)v53)
    goto LABEL_106;
  v55 = (uint64_t **)v53;
  if ((*((_BYTE *)&__s2.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    size = __s2.__r_.__value_.__l.__size_;
    if ((__s2.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_123;
    p_s2 = (std::string *)__s2.__r_.__value_.__r.__words[0];
    if (__s2.__r_.__value_.__l.__size_)
    {
      if (!__s2.__r_.__value_.__r.__words[0])
        goto LABEL_123;
    }
  }
  else
  {
    p_s2 = &__s2;
    size = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
  }
  v58 = v55 + 4;
  if (*((char *)v55 + 55) < 0)
  {
    v59 = (size_t)v55[5];
    if ((v59 & 0x8000000000000000) != 0)
      goto LABEL_123;
    v58 = (_QWORD *)*v58;
    if (v59)
    {
      if (!v58)
        goto LABEL_123;
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)v55 + 55);
  }
  if (v59 >= size)
    v60 = size;
  else
    v60 = v59;
  v61 = memcmp(p_s2, v58, v60);
  if (!v61)
  {
    if (size >= v59)
      goto LABEL_107;
    goto LABEL_106;
  }
  if (v61 < 0)
LABEL_106:
    v55 = v24;
LABEL_107:
  if (v54 < 0)
  {
    operator delete(__s2.__r_.__value_.__l.__data_);
    if (v55 == v24)
      goto LABEL_119;
  }
  else if (v55 == v24)
  {
    goto LABEL_119;
  }
  v62 = v55 + 7;
  if ((*((char *)v55 + 79) & 0x80000000) == 0)
  {
    v63 = (uint64_t *)*((unsigned __int8 *)v55 + 79);
    goto LABEL_116;
  }
  v63 = v55[8];
  if (((unint64_t)v63 & 0x8000000000000000) == 0)
  {
    v62 = (_QWORD *)*v62;
    if (!v63 || v62)
    {
LABEL_116:
      if (v63 == (uint64_t *)1 && *(_BYTE *)v62 == 49)
      {
        v64 = 2;
LABEL_120:
        atomic_store(v64, (unsigned int *)this + 200);
        return;
      }
LABEL_119:
      v64 = 1;
      goto LABEL_120;
    }
  }
LABEL_123:
  __break(1u);
}

uint64_t cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream::OnData(uint64_t a1, const void *a2, uint64_t a3, int a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  _opaque_pthread_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t (***v30)(_QWORD, uint64_t *);
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t v42;

  v15 = pthread_self();
  v16 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v16 + 1;
  if (!v16)
    *(_QWORD *)(a1 + 88) = v15;
  if (!pthread_equal(*(pthread_t *)(a1 + 88), v15))
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/webrtc_voice_engine.cc", 995, "!race_checker995.RaceDetected()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v17, v18, v19, v20, v41);
    goto LABEL_30;
  }
  v21 = operator new();
  *(_QWORD *)(v21 + 8) = -1;
  *(_QWORD *)(v21 + 16) = -1;
  v26 = v21 + 15432;
  *(_QWORD *)(v21 + 56) = 0;
  *(_QWORD *)(v21 + 64) = 0;
  *(_BYTE *)(v21 + 15440) = 0;
  *(_BYTE *)(v21 + 15448) = 0;
  if (a5 >= 9)
  {
LABEL_30:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/audio/audio_frame.cc", 68, "num_channels <= kMaxConcurrentChannels", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v22, v23, v24, v25, a5);
LABEL_31:
    v40 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/audio/audio_frame.cc", 81, "length <= kMaxDataSizeSamples", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v22, v23, v24, v25, v29);
    return cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream::OnClose((uint64_t)v40);
  }
  v27 = v21;
  *(_DWORD *)v21 = 0;
  *(_QWORD *)(v21 + 24) = a6;
  *(_DWORD *)(v21 + 32) = a4;
  *(_QWORD *)(v21 + 48) = 0x200000004;
  *(_QWORD *)(v21 + 40) = a5;
  if ((a5 - 1) > 7)
    v28 = 1;
  else
    v28 = dword_208F1E050[(int)a5 - 1];
  *(_DWORD *)(v21 + 15436) = v28;
  v29 = a6 * a5;
  if (a6 * a5 >= 0x1E01)
    goto LABEL_31;
  if (!a2)
  {
    *(_BYTE *)v26 = 1;
    if (!a8)
      goto LABEL_12;
    goto LABEL_11;
  }
  memcpy((void *)(v21 + 72), a2, 2 * v29);
  *(_BYTE *)v26 = 0;
  if (a8)
  {
LABEL_11:
    *(_QWORD *)(v26 + 8) = a7;
    *(_BYTE *)(v26 + 16) = 1;
  }
LABEL_12:
  v30 = *(uint64_t (****)(_QWORD, uint64_t *))(a1 + 472);
  v42 = v27;
  result = (**v30)(v30, &v42);
  v32 = v42;
  v42 = 0;
  if (v32)
  {
    v33 = *(_QWORD *)(v32 + 64);
    if (v33)
    {
      do
      {
        v34 = __ldaxr((unsigned int *)v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unsigned int *)v33));
      if (!v35)
      {
        v36 = *(_QWORD *)(v33 + 8);
        if (v36)
        {
          v37 = *(_QWORD *)(v33 + 16);
          v38 = *(void **)(v33 + 8);
          if (v37 != v36)
          {
            do
            {
              v39 = *(void **)(v37 - 96);
              if (v39)
              {
                *(_QWORD *)(v37 - 88) = v39;
                operator delete(v39);
              }
              v37 -= 104;
            }
            while (v37 != v36);
            v38 = *(void **)(v33 + 8);
          }
          *(_QWORD *)(v33 + 16) = v36;
          operator delete(v38);
        }
        MEMORY[0x20BD0ADEC](v33, 0x1020C40E72D6CFBLL);
      }
    }
    result = MEMORY[0x20BD0ADEC](v32, 0x1020C40C39A3FA5);
  }
  --*(_DWORD *)(a1 + 80);
  return result;
}

uint64_t cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream::OnClose(uint64_t this)
{
  uint64_t v1;

  *(_QWORD *)(this + 480) = 0;
  if (!*(_BYTE *)(this + 488))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 472) + 48))(*(_QWORD *)(this + 472));
  v1 = *(_QWORD *)(this + 592);
  if (*(_QWORD *)(this + 600) != v1)
  {
    if (*(_BYTE *)(v1 + 124))
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 472) + 40))(*(_QWORD *)(this + 472));
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 472) + 48))(*(_QWORD *)(this + 472));
  }
  __break(1u);
  return this;
}

uint64_t cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream::NumPreferredChannels(cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream *this)
{
  return atomic_load((unsigned int *)this + 200);
}

void cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream::~WebRtcAudioSendStream(cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream *this)
{
  cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream::~WebRtcAudioSendStream(this);
  JUMPOUT(0x20BD0ADECLL);
}

{
  void (***v2)(_QWORD, _QWORD);
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C0C67A8;
  v2 = (void (***)(_QWORD, _QWORD))*((_QWORD *)this + 60);
  if (v2)
  {
    (**v2)(v2, 0);
    *((_QWORD *)this + 60) = 0;
  }
  if (!*((_BYTE *)this + 488))
    goto LABEL_7;
  v3 = *((_QWORD *)this + 74);
  if (*((_QWORD *)this + 75) == v3)
  {
    __break(1u);
    return;
  }
  if (*(_BYTE *)(v3 + 124))
    v4 = 5;
  else
LABEL_7:
    v4 = 6;
  (*(void (**)(void))(**((_QWORD **)this + 59) + 8 * v4))();
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 12) + 8))(*((_QWORD *)this + 12), *((_QWORD *)this + 59));
  if (*((_BYTE *)this + 792) && *((char *)this + 791) < 0)
    operator delete(*((void **)this + 96));
  if (*((_BYTE *)this + 760))
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 704, *((_QWORD *)this + 89));
    if (*((char *)this + 687) < 0)
      operator delete(*((void **)this + 83));
  }
  webrtc::RtpParameters::~RtpParameters((void **)this + 62);
  webrtc::AudioSendStream::Config::~Config((cricket::WebRtcVoiceSendChannel::WebRtcAudioSendStream *)((char *)this + 104));
  if (*((_BYTE *)this + 64))
  {
    if (*((char *)this + 63) < 0)
      operator delete(*((void **)this + 5));
  }
}

void cricket::`anonymous namespace'::ProxySink::~ProxySink(cricket::_anonymous_namespace_::ProxySink *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::`anonymous namespace'::ProxySink::OnData(cricket::_anonymous_namespace_::ProxySink *this, const Data *a2)
{
  return (*(uint64_t (**)(_QWORD, const Data *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2);
}

uint64_t rtc::RefCountedObject<webrtc::AsyncAudioProcessing::Factory>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::AsyncAudioProcessing::Factory>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 8;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::AsyncAudioProcessing::Factory>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C0ACC58;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void rtc::RefCountedObject<webrtc::AsyncAudioProcessing::Factory>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C0ACC58;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::AsyncAudioProcessing::Factory>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 32));
  return v1 == 1;
}

uint64_t *std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::greater<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__find_equal<int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int a5)
{
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *((_DWORD *)a2 + 7), v6 < a5))
  {
    v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      v8 = (uint64_t *)*a2;
      do
      {
        v9 = v8;
        v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      v13 = a2;
      do
      {
        v9 = (uint64_t *)v13[2];
        v14 = *v9 == (_QWORD)v13;
        v13 = v9;
      }
      while (v14);
    }
    if (*((_DWORD *)v9 + 7) > a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v18 >= a5)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_21;
        }
        if (v18 <= a5)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_21:
    *a3 = v17;
    return v5;
  }
  if (v6 <= a5)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  v10 = a2[1];
  if (v10)
  {
    v11 = (uint64_t *)a2[1];
    do
    {
      v12 = v11;
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    v19 = a2;
    do
    {
      v12 = (uint64_t *)v19[2];
      v14 = *v12 == (_QWORD)v19;
      v19 = v12;
    }
    while (!v14);
  }
  if (v12 != v5 && *((_DWORD *)v12 + 7) >= a5)
  {
    v20 = *v5;
    if (!*v5)
    {
      *a3 = v5;
      return a1 + 1;
    }
    do
    {
      while (1)
      {
        v17 = (uint64_t *)v20;
        v21 = *(_DWORD *)(v20 + 28);
        if (v21 >= a5)
          break;
        v20 = *v17;
        v5 = v17;
        if (!*v17)
          goto LABEL_21;
      }
      if (v21 <= a5)
        break;
      v5 = v17 + 1;
      v20 = v17[1];
    }
    while (v20);
    goto LABEL_21;
  }
  if (v10)
  {
    *a3 = v12;
    return v12;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,cricket::WebRtcVoiceSendChannel::OnNetworkRouteChanged(std::string_view,rtc::NetworkRoute const&)::$_1 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)*a1 + 232) + 104))(*(_QWORD *)(*(_QWORD *)*a1 + 232));
  v3 = (uint64_t *)(v1 + 8);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)result + 120))(result, v3, *(unsigned __int8 *)(v1 + 31), v1 + 32);
  v4 = *(_QWORD *)(v1 + 16);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = *v3;
    if (!v4 || v5 != 0)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
  }
  __break(1u);
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<cricket::WebRtcVoiceSendChannel::OnNetworkRouteChanged(std::string_view,rtc::NetworkRoute const&)::$_1>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,cricket::WebRtcVoiceReceiveChannel::OnPacketReceived(webrtc::RtpPacketReceived const&)::$_1 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  __n128 (*v27)(char, void **, _OWORD *);
  uint64_t (*v28)(uint64_t (***)(_QWORD *));
  _OWORD v29[2];
  _BYTE v30[22];
  void *__p[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = **a1;
  v3 = (uint64_t)(*a1 + 1);
  v4 = *(_WORD *)(v2 + 548);
  v5 = *(_DWORD *)(v2 + 544);
  *(_OWORD *)(v1 + 5) = *(_OWORD *)(v2 + 528);
  *((_DWORD *)v1 + 14) = v5;
  *((_WORD *)v1 + 30) = v4;
  v6 = v1 + 15;
  if ((unint64_t)(v1[15] + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
  {
    if (rtc::g_clock)
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v7 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
    }
    *v6 = v7 / 1000;
  }
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 240) + 96))(*(_QWORD *)(v2 + 240));
  v9 = *(_OWORD *)v3;
  v10 = *(_QWORD *)(v3 + 46);
  v11 = *(_OWORD *)(v3 + 32);
  v29[1] = *(_OWORD *)(v3 + 16);
  *(_OWORD *)v30 = v11;
  *(_QWORD *)&v30[14] = v10;
  v29[0] = v9;
  *(_OWORD *)__p = *((_OWORD *)v1 + 4);
  v12 = v1[11];
  v32 = v1[10];
  v1[9] = 0;
  v1[10] = 0;
  v1[8] = 0;
  v13 = v1[12];
  v1[12] = 0;
  v33 = v12;
  v34 = v13;
  v35 = *(_OWORD *)(v1 + 13);
  v1[13] = 0;
  v1[14] = 0;
  v14 = *(_OWORD *)v6;
  v37 = *((_BYTE *)v1 + 136);
  v36 = v14;
  v15 = v1[18];
  v1[18] = 0;
  v38 = v15;
  v16 = operator new(0x18uLL);
  *v16 = cricket::WebRtcVoiceReceiveChannel::MaybeCreateDefaultReceiveStream;
  v16[1] = 0;
  v16[2] = v2;
  v26[0] = v16;
  v26[1] = 24;
  v27 = absl::internal_any_invocable::RemoteManagerTrivial;
  v28 = absl::internal_any_invocable::RemoteInvoker<false,BOOL,std::__bind_front_t<BOOL (cricket::WebRtcVoiceReceiveChannel::*)(webrtc::RtpPacketReceived const&),cricket::WebRtcVoiceReceiveChannel*> &,webrtc::RtpPacketReceived const&>;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, _QWORD *))(*(_QWORD *)v8 + 8))(v8, 1, v29, v26);
  v27(1, (void **)v26, v26);
  v17 = v38;
  if (v38)
  {
    v18 = (unsigned int *)(v38 + 8);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v21 = v34;
  if (v34)
  {
    v22 = (unsigned int *)(v34 + 24);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      v25 = *(_QWORD *)(v21 + 16);
      *(_QWORD *)(v21 + 16) = 0;
      if (v25)
        MEMORY[0x20BD0ADD4](v25, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v21, 0x1010C40EE34DA14);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<cricket::WebRtcVoiceReceiveChannel::OnPacketReceived(webrtc::RtpPacketReceived const&)::$_1>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;

  v3 = (_QWORD *)*a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = (unsigned int *)v3[18];
      if (v4)
      {
        v5 = v4 + 2;
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
      v8 = v3[12];
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 24);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = 0;
          if (v12)
            MEMORY[0x20BD0ADD4](v12, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v8, 0x1010C40EE34DA14);
        }
      }
      v13 = (void *)v3[8];
      if (v13)
      {
        v3[9] = v13;
        operator delete(v13);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,BOOL,std::__bind_front_t<BOOL (cricket::WebRtcVoiceReceiveChannel::*)(webrtc::RtpPacketReceived const&),cricket::WebRtcVoiceReceiveChannel*> &,webrtc::RtpPacketReceived const&>(uint64_t (***a1)(_QWORD *))
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = **a1;
  v2 = (uint64_t)(*a1)[1];
  v3 = (_QWORD *)((char *)(*a1)[2] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t cricket::WrappingActiveIceController::WrappingActiveIceController(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  *(_QWORD *)a1 = &off_24C0C6840;
  *(_QWORD *)(a1 + 8) = rtc::Thread::Current((rtc::Thread *)a1);
  v8 = operator new();
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_QWORD *)(a1 + 16) = v8;
  do
    v9 = __ldxr((unsigned int *)v8);
  while (__stxr(v9 + 1, (unsigned int *)v8));
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  if (!a3)
  {
    v13 = operator new();
    cricket::BasicIceController::BasicIceController(v13, a4);
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    if (!v12)
      return a1;
LABEL_8:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    return a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)a3 + 16))(&v15, a3, a4);
  v10 = v15;
  v15 = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v15;
    v15 = 0;
    if (v12)
      goto LABEL_8;
  }
  return a1;
}

void cricket::WrappingActiveIceController::~WrappingActiveIceController(cricket::WrappingActiveIceController *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_24C0C6840;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *(_BYTE *)(v3 + 4) = 0;
  do
  {
    v4 = __ldaxr((unsigned int *)v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)v3));
  if (!v5)
    MEMORY[0x20BD0ADEC]();
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_24C0C6840;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *(_BYTE *)(v3 + 4) = 0;
  do
  {
    v4 = __ldaxr((unsigned int *)v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)v3));
  if (!v5)
    MEMORY[0x20BD0ADEC]();
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::WrappingActiveIceController::SetIceConfig(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
}

uint64_t cricket::WrappingActiveIceController::GetUseCandidateAttribute(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40));
}

uint64_t cricket::WrappingActiveIceController::OnConnectionAdded(cricket::WrappingActiveIceController *this, const cricket::Connection *a2)
{
  return (*(uint64_t (**)(_QWORD, const cricket::Connection *))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5), a2);
}

uint64_t cricket::WrappingActiveIceController::OnConnectionPinged(cricket::WrappingActiveIceController *this, const cricket::Connection *a2)
{
  return (*(uint64_t (**)(_QWORD, const cricket::Connection *))(**((_QWORD **)this + 5) + 96))(*((_QWORD *)this + 5), a2);
}

void cricket::WrappingActiveIceController::OnConnectionUpdated(cricket::WrappingActiveIceController *this, const cricket::Connection *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __p;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
  {
    cricket::Connection::ToString(a2, &__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/wrapping_active_ice_controller.cc");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t cricket::WrappingActiveIceController::OnConnectionSwitched(cricket::WrappingActiveIceController *this, const cricket::Connection *a2)
{
  *((_QWORD *)this + 4) = a2;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5));
}

uint64_t cricket::WrappingActiveIceController::OnConnectionDestroyed(cricket::WrappingActiveIceController *this, const cricket::Connection *a2)
{
  return (*(uint64_t (**)(_QWORD, const cricket::Connection *))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), a2);
}

uint64_t cricket::WrappingActiveIceController::SelectAndPingConnection(cricket::WrappingActiveIceController *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v10;
  char v11;
  int v12;
  char v13;
  char v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v17)(uint64_t);

  (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6));
  v2 = *((_QWORD *)this + 5);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v2 + 72))(&v10, v2, v3);
  v4 = v12;
  if (v11)
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 6) + 64))(*((_QWORD *)this + 6), v10);
  v5 = *((_QWORD *)this + 1);
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  if (v6)
  {
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (_QWORD *)operator new();
  *v8 = v6;
  v8[1] = this;
  v8[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v8[4] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::WrappingActiveIceController::HandlePingResult(cricket::IceControllerInterface::PingResult)::$_1 &&>;
  v15[0] = v8;
  v16 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v17 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  v14 = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, char *, char *))(*(_QWORD *)v5 + 16))(v5, v15, 1000 * v4, &v14, &v13);
  return v16(1, v15, v15);
}

uint64_t cricket::WrappingActiveIceController::OnSortAndSwitchRequest(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  char v9;
  _QWORD v10[2];
  uint64_t (*v11)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v12)(uint64_t);

  if (!*(_BYTE *)(result + 25))
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 8);
    v5 = *(unsigned int **)(result + 16);
    if (v5)
    {
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = operator new();
    *(_DWORD *)(v7 + 16) = a2;
    *(_QWORD *)v7 = v5;
    *(_QWORD *)(v7 + 8) = v3;
    *(_QWORD *)(v7 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
    *(_QWORD *)(v7 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,cricket::WrappingActiveIceController::OnSortAndSwitchRequest(cricket::IceSwitchReason)::$_1 &&>;
    v10[0] = v7;
    v11 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v12 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v10, &v9, &v8);
    result = v11(1, v10, v10);
    *(_BYTE *)(v3 + 25) = 1;
  }
  return result;
}

void cricket::WrappingActiveIceController::SortAndSwitchToBestConnection(uint64_t a1, char *a2)
{
  void *v4;
  int64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _BYTE v13[25];
  char *v14;
  char *v15;
  char *v16;
  _OWORD v17[2];
  void *__p;
  _BYTE *v19;
  char v20;
  char v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t (*v24)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v25)(uint64_t);

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
  *(_BYTE *)(a1 + 25) = 0;
  (*(void (**)(_OWORD *__return_ptr, _QWORD, char *))(**(_QWORD **)(a1 + 40) + 112))(v17, *(_QWORD *)(a1 + 40), a2);
  *(_OWORD *)v13 = v17[0];
  *(_OWORD *)&v13[9] = *(_OWORD *)((char *)v17 + 9);
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v4 = __p;
  v5 = v19 - (_BYTE *)__p;
  if (v19 != __p)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v19 - (_BYTE *)__p);
    v14 = v6;
    v16 = &v6[8 * (v5 >> 3)];
    memcpy(v6, v4, v5);
    v15 = &v6[8 * (v5 >> 3)];
    cricket::WrappingActiveIceController::HandleSwitchResult(a1, a2, (uint64_t)v13);
    operator delete(v6);
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48)))
      goto LABEL_9;
LABEL_6:
    v7 = *(_QWORD *)(a1 + 32);
    if (!v7 || !*(_DWORD *)(v7 + 2344) && !*(_DWORD *)(v7 + 2348))
      goto LABEL_14;
    goto LABEL_9;
  }
  cricket::WrappingActiveIceController::HandleSwitchResult(a1, a2, (uint64_t)v13);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48)))
    goto LABEL_6;
LABEL_9:
  (*(void (**)(_BYTE **__return_ptr))(**(_QWORD **)(a1 + 40) + 120))(&v22);
  if (v23 == v22)
    v8 = 0;
  else
    v8 = v22;
  (*(void (**)(_QWORD, void *, int64_t))(**(_QWORD **)(a1 + 48) + 80))(*(_QWORD *)(a1 + 48), v8, (v23 - v22) >> 3);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
LABEL_14:
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48));
  if (!*(_BYTE *)(a1 + 24)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40)))
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(unsigned int **)(a1 + 16);
    if (v10)
    {
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (_QWORD *)operator new();
    *v12 = v10;
    v12[1] = a1;
    v12[3] = absl::internal_any_invocable::LocalManagerTrivial;
    v12[4] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::WrappingActiveIceController::MaybeStartPinging(void)::$_1 &&>;
    v22 = v12;
    v24 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v25 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _BYTE **, char *, char *))(*(_QWORD *)v9 + 8))(v9, &v22, &v21, &v20);
    v24(1, (uint64_t *)&v22, &v22);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
    *(_BYTE *)(a1 + 24) = 1;
  }
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

uint64_t cricket::WrappingActiveIceController::HandleSwitchResult(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  char v23;
  void *__p[2];
  uint64_t (*v25)(uint64_t, uint64_t *, void **);
  uint64_t (*v26)(uint64_t);

  if (*(_BYTE *)(a3 + 8))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      cricket::IceSwitchReasonToString(a2, (unint64_t)__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/wrapping_active_ice_controller.cc");
      if (SHIBYTE(v25) < 0)
        operator delete(__p[0]);
    }
    if (!*(_BYTE *)(a3 + 8))
      goto LABEL_18;
    (*(void (**)(_QWORD, _QWORD, char *))(**(_QWORD **)(a1 + 48) + 72))(*(_QWORD *)(a1 + 48), *(_QWORD *)a3, a2);
  }
  if (*(_BYTE *)(a3 + 24))
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(unsigned int **)(a1 + 16);
    if (!v14)
      goto LABEL_21;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    if (*(_BYTE *)(a3 + 24))
    {
LABEL_21:
      v16 = *(_DWORD *)(a3 + 16);
      v17 = (_QWORD *)operator new();
      *v17 = v14;
      v17[1] = a1;
      *((_DWORD *)v17 + 4) = v16;
      v17[3] = absl::internal_any_invocable::LocalManagerTrivial;
      v17[4] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::WrappingActiveIceController::HandleSwitchResult(cricket::IceSwitchReason,cricket::IceControllerInterface::SwitchResult)::$_1 &&>;
      if (*(_BYTE *)(a3 + 24))
      {
        v18 = 1000 * *(int *)(a3 + 20);
        __p[0] = v17;
        v25 = (uint64_t (*)(uint64_t, uint64_t *, void **))_ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
        v26 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
        v23 = 0;
        (*(void (**)(uint64_t, void **, uint64_t, char *, char *))(*(_QWORD *)v13 + 16))(v13, __p, v18, &v23, &v22);
        v25(1, (uint64_t *)__p, __p);
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_18:
    std::__throw_bad_optional_access[abi:sn180100]();
    return cricket::WrappingActiveIceController::OnImmediateSwitchRequest();
  }
LABEL_13:
  v19 = *(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32);
  if (v19)
    v20 = *(_QWORD *)(a3 + 32);
  else
    v20 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 56))(*(_QWORD *)(a1 + 48), v20, v19 >> 3);
}

BOOL cricket::WrappingActiveIceController::OnImmediateSwitchRequest(uint64_t a1, char *a2)
{
  void *v4;
  int64_t v5;
  char *v6;
  int v7;
  _BYTE *v8;
  _BYTE v10[25];
  char *v11;
  char *v12;
  char *v13;
  _OWORD v14[2];
  void *__p;
  _BYTE *v16;

  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)(a1 + 40) + 104))(v14);
  *(_OWORD *)v10 = v14[0];
  *(_OWORD *)&v10[9] = *(_OWORD *)((char *)v14 + 9);
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v4 = __p;
  v5 = v16 - (_BYTE *)__p;
  if (v16 == __p)
  {
    cricket::WrappingActiveIceController::HandleSwitchResult(a1, a2, (uint64_t)v10);
    v7 = BYTE8(v14[0]);
    v8 = __p;
    if (!__p)
      return v7 != 0;
    goto LABEL_4;
  }
  if (v5 < 0)
    abort();
  v6 = (char *)operator new(v16 - (_BYTE *)__p);
  v11 = v6;
  v13 = &v6[8 * (v5 >> 3)];
  memcpy(v6, v4, v5);
  v12 = &v6[8 * (v5 >> 3)];
  cricket::WrappingActiveIceController::HandleSwitchResult(a1, a2, (uint64_t)v10);
  operator delete(v6);
  v7 = BYTE8(v14[0]);
  v8 = __p;
  if (__p)
  {
LABEL_4:
    v16 = v8;
    operator delete(v8);
  }
  return v7 != 0;
}

uint64_t cricket::WrappingActiveIceController::FindNextPingableConnection(cricket::WrappingActiveIceController *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 88))(*((_QWORD *)this + 5));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::WrappingActiveIceController::MaybeStartPinging(void)::$_1 &&>(cricket::WrappingActiveIceController **a1)
{
  return cricket::WrappingActiveIceController::SelectAndPingConnection(*a1);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::WrappingActiveIceController::HandlePingResult(cricket::IceControllerInterface::PingResult)::$_1 &&>(cricket::WrappingActiveIceController **a1)
{
  return cricket::WrappingActiveIceController::SelectAndPingConnection(*a1);
}

void absl::internal_any_invocable::LocalInvoker<false,void,cricket::WrappingActiveIceController::OnSortAndSwitchRequest(cricket::IceSwitchReason)::$_1 &&>(uint64_t a1)
{
  cricket::WrappingActiveIceController::SortAndSwitchToBestConnection(*(_QWORD *)a1, (char *)*(unsigned int *)(a1 + 8));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::WrappingActiveIceController::HandleSwitchResult(cricket::IceSwitchReason,cricket::IceControllerInterface::SwitchResult)::$_1 &&>(uint64_t a1)
{
  return cricket::WrappingActiveIceController::SortAndSwitchToBestConnection(*(_QWORD *)a1, *(unsigned int *)(a1 + 8));
}

double dcsctp::ZeroChecksumAcceptableChunkParameter::SerializeTo(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  double result;

  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v5 > 0xFFFFFFFFFFFFFFF7)
  {
    *(_QWORD *)(a2 + 8) = &v4[v5 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 8uLL);
    v4 = *(char **)a2;
  }
  *(_QWORD *)&result = 134218112;
  *(_DWORD *)&v4[v5] = 134218112;
  *(_DWORD *)(*(_QWORD *)a2 + v5 + 4) = bswap32(*(_DWORD *)(a1 + 8));
  return result;
}

void dcsctp::ZeroChecksumAcceptableChunkParameter::ToString(dcsctp::ZeroChecksumAcceptableChunkParameter *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  std::string *v5;
  std::string::size_type size;
  int v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v11;
  std::string v12;

  v4 = (char *)operator new(0x30uLL);
  if (v4 > "Zero Checksum Acceptable (" || v4 + 26 <= "Zero Checksum Acceptable (")
  {
    strcpy(v4, "Zero Checksum Acceptable (");
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
    *(_OWORD *)&v12.__r_.__value_.__r.__words[1] = xmmword_208F1C940;
    v5 = rtc::StringBuilder::operator<<(&v12, *((_DWORD *)this + 2));
    size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    v7 = (char)size;
    if ((size & 0x80u) == 0)
      v8 = 22;
    else
      v8 = (v5->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((size & 0x80u) != 0)
      size = v5->__r_.__value_.__l.__size_;
    if (v8 == size)
    {
      std::string::__grow_by_and_replace(v5, v8, 1uLL, v8, v8, 0, 1uLL, ")");
LABEL_21:
      *a2 = v12;
      return;
    }
    if (v7 >= 0)
      v9 = v5;
    else
      v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
    if ((char *)v9 + size > ")" || (char *)&v9->__r_.__value_.__l.__data_ + size + 1 <= ")")
    {
      v9->__r_.__value_.__s.__data_[size] = 41;
      v11 = size + 1;
      if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
        v5->__r_.__value_.__l.__size_ = v11;
      else
        *((_BYTE *)&v5->__r_.__value_.__s + 23) = v11 & 0x7F;
      v9->__r_.__value_.__s.__data_[v11] = 0;
      goto LABEL_21;
    }
  }
  __break(1u);
}

void dcsctp::ZeroChecksumAcceptableChunkParameter::~ZeroChecksumAcceptableChunkParameter(dcsctp::ZeroChecksumAcceptableChunkParameter *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

int i2c_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned __int8 **pp)
{
  uint64_t length;
  uint64_t flags;
  int v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  int v15;
  unsigned __int8 *v17;
  char *v18;

  if (!a)
    return 0;
  length = a->length;
  flags = a->flags;
  if ((flags & 8) != 0)
  {
    v14 = flags & 7;
    if ((_DWORD)length)
      v13 = v14;
    else
      v13 = 0;
  }
  else
  {
    v5 = length & ((int)length >> 31);
    v6 = length - 1;
    do
    {
      v7 = __OFSUB__((_DWORD)length, 1);
      LODWORD(length) = length - 1;
      if ((int)length < 0 != v7)
      {
        v13 = 0;
        goto LABEL_31;
      }
      v8 = a->data[v6--];
    }
    while (!v8);
    LODWORD(length) = length + 1;
    if ((v8 & 1) != 0)
    {
      v13 = 0;
    }
    else if ((v8 & 2) != 0)
    {
      v13 = 1;
    }
    else
    {
      if ((v8 & 0x40) != 0)
        v9 = 6;
      else
        v9 = 7;
      if ((v8 & 0x20) != 0)
        v10 = 5;
      else
        v10 = v9;
      if ((v8 & 0x10) != 0)
        v11 = 4;
      else
        v11 = v10;
      if ((v8 & 8) != 0)
        v12 = 3;
      else
        v12 = v11;
      if ((v8 & 4) != 0)
        v13 = 2;
      else
        v13 = v12;
    }
  }
  v5 = length;
  if ((_DWORD)length == 0x7FFFFFFF)
  {
    ERR_put_error(12, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_bitstr.c", 120);
    return 0;
  }
LABEL_31:
  v15 = v5 + 1;
  if (!pp)
    return v15;
  v17 = *pp;
  *v17 = v13;
  v18 = (char *)(v17 + 1);
  if (v5)
  {
    memcpy(v18, a->data, v5);
    if (v5 >= 1)
      v18[v5 - 1] &= -1 << v13;
  }
  *pp = (unsigned __int8 *)&v18[v5];
  return v5 + 1;
}

ASN1_BIT_STRING *__cdecl c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a, const unsigned __int8 **pp, uint64_t length)
{
  const char *v4;
  int v5;
  int v6;
  int v7;
  ASN1_BIT_STRING *v8;
  const unsigned __int8 *v12;
  uint64_t v13;
  const unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int8 *data;
  unsigned __int8 *v18;
  uint64_t v19;
  size_t v20;
  uint64_t *p_flags;
  uint64_t flags;
  size_t v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  size_t v29;

  if (length <= 0)
  {
    v4 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/asn1/a_bitstr.c";
    v5 = 12;
    v6 = 174;
    v7 = 147;
    goto LABEL_5;
  }
  if ((unint64_t)length >> 31)
  {
    v4 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/asn1/a_bitstr.c";
    v5 = 12;
    v6 = 173;
    v7 = 152;
LABEL_5:
    ERR_put_error(v5, 0, v6, v4, v7);
    return 0;
  }
  if (a && (v8 = *a) != 0)
  {
    v12 = *pp;
    v14 = *pp + 1;
    v13 = **pp;
    if (v13 >= 8)
      goto LABEL_11;
  }
  else
  {
    v15 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
    if (!v15)
    {
      v4 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
      v5 = 14;
      v6 = 65;
      v7 = 247;
      goto LABEL_5;
    }
    *v15 = 24;
    v15[1] = 0x300000000;
    v8 = (ASN1_BIT_STRING *)(v15 + 1);
    v15[2] = 0;
    v15[3] = 0;
    v12 = *pp;
    v14 = *pp + 1;
    v13 = **pp;
    if (v13 >= 8)
    {
LABEL_11:
      ERR_put_error(12, 0, 141, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_bitstr.c", 168);
      if (!a)
        goto LABEL_20;
      goto LABEL_19;
    }
  }
  v16 = length - 1;
  if ((_DWORD)v13)
  {
    if ((unint64_t)length < 2 || (v14[length - 2] & ~(-1 << v13)) != 0)
    {
      ERR_put_error(12, 0, 194, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_bitstr.c", 175);
      if (!a)
        goto LABEL_20;
      goto LABEL_19;
    }
    v8->flags = v13 | v8->flags & 0xFFFFFFFFFFFFFFF0 | 8;
  }
  else
  {
    v8->flags = v13 | v8->flags & 0xFFFFFFFFFFFFFFF0 | 8;
    if ((unint64_t)length < 2)
    {
      v24 = 0;
      goto LABEL_33;
    }
  }
  v25 = malloc_type_malloc(length + 7, 0x30772F57uLL);
  if (!v25)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    if (!a)
      goto LABEL_20;
LABEL_19:
    if (*a == v8)
      return 0;
LABEL_20:
    data = v8->data;
    if (data)
    {
      v19 = *((_QWORD *)data - 1);
      v18 = data - 8;
      v20 = v19 + 8;
      if (v19 != -8)
        bzero(v18, v20);
      free(v18);
    }
    flags = v8[-1].flags;
    p_flags = &v8[-1].flags;
    v23 = flags + 8;
    if (flags != -8)
      bzero(p_flags, v23);
    free(p_flags);
    return 0;
  }
  *v25 = v16;
  v24 = (unsigned __int8 *)(v25 + 1);
  memcpy(v25 + 1, v14, length - 1);
  v14 = &v12[length];
LABEL_33:
  v8->length = v16;
  v26 = v8->data;
  if (v26)
  {
    v28 = *((_QWORD *)v26 - 1);
    v27 = v26 - 8;
    v29 = v28 + 8;
    if (v28 != -8)
      bzero(v27, v29);
    free(v27);
  }
  v8->data = v24;
  v8->type = 3;
  if (a)
    *a = v8;
  *pp = v14;
  return v8;
}

int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)
{
  int v3;
  int v4;
  char v5;
  ASN1_BIT_STRING *v6;
  int v7;
  unsigned __int8 *data;
  signed int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  size_t v12;
  uint64_t length;
  unsigned __int8 *v14;
  uint64_t v15;
  _QWORD *v16;

  v3 = n + 7;
  if (n >= 0)
    v3 = n;
  v4 = 1 << (~(_BYTE)n & 7);
  if (value)
    v5 = 1 << (~(_BYTE)n & 7);
  else
    v5 = 0;
  if (a)
  {
    v6 = a;
    v7 = v3 >> 3;
    a->flags &= 0xFFFFFFFFFFFFFFF0;
    if (a->length > v3 >> 3)
    {
      data = a->data;
      if (data)
      {
LABEL_15:
        data[v7] = data[v7] & ~(_BYTE)v4 | v5;
        length = v6->length;
        if ((int)length >= 1)
        {
          v14 = v6->data;
          do
          {
            v15 = length - 1;
            if (v14[(length - 1)])
              break;
            v6->length = --length;
          }
          while ((unint64_t)(v15 + 1) > 1);
        }
        goto LABEL_19;
      }
    }
    if (!value)
    {
LABEL_19:
      LODWORD(a) = 1;
      return (int)a;
    }
    v9 = v7 + 1;
    v10 = a->data;
    if (v10)
    {
      a = (ASN1_BIT_STRING *)OPENSSL_realloc(v10, v9);
      data = (unsigned __int8 *)a;
      if (a)
      {
        v11 = v6->length;
        v12 = (v9 - v11);
        if ((int)v12 < 1)
        {
LABEL_14:
          v6->data = data;
          v6->length = v9;
          goto LABEL_15;
        }
LABEL_13:
        bzero(&data[v11], v12);
        goto LABEL_14;
      }
    }
    else
    {
      if (v9 <= 0xFFFFFFF7)
      {
        v16 = malloc_type_malloc(v9 + 8, 0x30772F57uLL);
        if (v16)
        {
          *v16 = v9;
          data = (unsigned __int8 *)(v16 + 1);
          v11 = v6->length;
          v12 = (v9 - v11);
          if ((int)v12 < 1)
            goto LABEL_14;
          goto LABEL_13;
        }
      }
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      LODWORD(a) = 0;
    }
  }
  return (int)a;
}

void *__cdecl ASN1_item_dup(const ASN1_ITEM *it, void *x)
{
  int v3;
  ASN1_VALUE *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  unsigned __int8 *out;
  ASN1_VALUE *pval;

  out = 0;
  if (!x)
    return 0;
  v3 = ASN1_item_i2d((ASN1_VALUE *)x, &out, it);
  if (!out)
    return 0;
  v8 = out;
  pval = 0;
  if ((int)asn1_item_ex_d2i((uint64_t)&pval, &v8, v3, (uint64_t)it, -1, 0, 0, 0, 0) <= 0)
    ASN1_item_ex_free(&pval, it);
  v4 = pval;
  if (out)
  {
    v6 = out - 8;
    v5 = *((_QWORD *)out - 1);
    if (v5 != -8)
      bzero(v6, v5 + 8);
    free(v6);
  }
  return v4;
}

ASN1_STRING *ASN1_GENERALIZEDTIME_adj(ASN1_STRING *a1, uint64_t a2, int a3, uint64_t a4)
{
  const char *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  ASN1_STRING *v13;
  _QWORD *v14;
  int v15;
  unsigned __int8 *data;
  unsigned __int8 *v17;
  uint64_t v18;
  size_t v19;
  uint64_t *p_flags;
  uint64_t flags;
  size_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char __str[16];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  if (!OPENSSL_posix_to_tm(a2, (uint64_t)&v24))
    return 0;
  if (a3 || a4)
  {
    *(_QWORD *)__str = 0;
    if (!OPENSSL_tm_to_posix((int *)&v24, __str))
      return 0;
    v11 = *(_QWORD *)__str + 86400 * a3;
    v12 = v11 >= 1 && (v11 ^ 0x7FFFFFFFFFFFFFFFLL) < a4;
    if (v12
      || v11 < 0 && (uint64_t)(0x8000000000000000 - v11) > a4
      || !OPENSSL_posix_to_tm(v11 + a4, (uint64_t)&v24))
    {
      return 0;
    }
  }
  if ((DWORD1(v25) - 8100) <= 0xFFFFD8EF)
  {
    v7 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/asn1/a_gentm.c";
    v8 = 12;
    v9 = 138;
    v10 = 122;
LABEL_6:
    ERR_put_error(v8, 0, v9, v7, v10);
    return 0;
  }
  if (snprintf(__str, 0x10uLL, "%04d%02d%02d%02d%02d%02dZ", DWORD1(v25) + 1900, (_DWORD)v25 + 1, HIDWORD(v24), DWORD2(v24), DWORD1(v24), (_DWORD)v24) != 15)abort();
  v13 = a1;
  if (!a1)
  {
    v14 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
    if (!v14)
    {
      v7 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
      v8 = 14;
      v9 = 65;
      v10 = 247;
      goto LABEL_6;
    }
    *v14 = 24;
    v14[1] = 0x1700000000;
    v13 = (ASN1_STRING *)(v14 + 1);
    v14[2] = 0;
    v14[3] = 0;
  }
  v15 = strlen(__str);
  if (!ASN1_STRING_set(v13, __str, v15))
  {
    if (!a1)
    {
      data = v13->data;
      if (data)
      {
        v18 = *((_QWORD *)data - 1);
        v17 = data - 8;
        v19 = v18 + 8;
        if (v18 != -8)
          bzero(v17, v19);
        free(v17);
      }
      flags = v13[-1].flags;
      p_flags = &v13[-1].flags;
      v22 = flags + 8;
      if (flags != -8)
        bzero(p_flags, v22);
      free(p_flags);
    }
    return 0;
  }
  v13->type = 24;
  return v13;
}

int i2c_ASN1_INTEGER(ASN1_INTEGER *a, unsigned __int8 **pp)
{
  unsigned __int8 *data;
  size_t length;
  unsigned __int8 *v5;
  unsigned int v6;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  BOOL v24;

  if (!a)
    return 0;
  data = a->data;
  length = a->length;
  if (!(_DWORD)length)
  {
    length = 0;
    v8 = 0;
    v10 = 1;
    v9 = 1;
LABEL_25:
    v14 = 1;
    v13 = 2147483646;
    goto LABEL_26;
  }
  v5 = &data[length];
  while (1)
  {
    v6 = *data;
    if (*data)
      break;
    ++data;
    if (length-- < 2)
    {
      length = 0;
      v8 = 0;
      v9 = 1;
      data = v5;
      v10 = 1;
      goto LABEL_25;
    }
  }
  if (!length)
  {
    v8 = 0;
    v9 = 1;
    v10 = 1;
    goto LABEL_25;
  }
  if ((a->type & 0x100) == 0)
  {
    v10 = 0;
    v9 = (v6 >> 7) & 1;
    if ((v6 & 0x80) == 0)
    {
      v13 = 0x7FFFFFFFLL;
      v14 = 0;
      v8 = 0;
      goto LABEL_26;
    }
    v8 = 0;
    goto LABEL_25;
  }
  if (*data > 0x80u)
    goto LABEL_16;
  if (*data != 128)
  {
    v10 = 0;
    v9 = 0;
    v14 = 0;
    v8 = 1;
    v13 = 0x7FFFFFFFLL;
    goto LABEL_26;
  }
  if (length != 1)
  {
    if (data[1])
    {
LABEL_16:
      v10 = 0;
      v9 = 1;
      v8 = 1;
      goto LABEL_25;
    }
    v15 = 2;
    while (length != v15)
    {
      if (data[v15++])
      {
        v17 = v15 - 2;
        goto LABEL_46;
      }
    }
    v17 = length - 1;
LABEL_46:
    v10 = 0;
    v24 = v17 >= length - 1;
    v9 = !v24;
    v8 = 1;
    if (!v24)
      goto LABEL_25;
    v13 = 0x7FFFFFFFLL;
    v14 = 0;
LABEL_26:
    if (length > v13)
    {
      ERR_put_error(12, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_int.c", 153);
      return 0;
    }
    v11 = v9 + length;
    if (pp)
    {
      if (v14)
      {
        **pp = 0;
        v18 = v9 + length;
        if ((v10 & 1) != 0)
        {
LABEL_31:
          v19 = *pp;
          v20 = (int)v18;
          if (!v8)
            goto LABEL_40;
          goto LABEL_35;
        }
      }
      else
      {
        v18 = v9 + length;
        if ((v10 & 1) != 0)
          goto LABEL_31;
      }
LABEL_34:
      memcpy(&(*pp)[v9], data, length);
      v19 = *pp;
      v20 = (int)v18;
      if (!v8)
      {
LABEL_40:
        *pp = &v19[v20];
        return v11;
      }
LABEL_35:
      if (v18)
      {
        v21 = 0;
        v22 = v20 - 1;
        do
        {
          v23 = v19[v22];
          v19[v22] = -(char)v21 - v23;
          v21 |= v23 != 0;
          --v22;
        }
        while (v22 < v20);
        v19 = *pp;
      }
      else
      {
        v20 = 0;
      }
      goto LABEL_40;
    }
    return v11;
  }
  v8 = 1;
  if (pp)
  {
    v9 = 0;
    v11 = 1;
    v18 = 1;
    length = 1;
    goto LABEL_34;
  }
  return 1;
}

ASN1_INTEGER *__cdecl c2i_ASN1_INTEGER(ASN1_INTEGER **a, const unsigned __int8 **pp, uint64_t length)
{
  const char *v3;
  int v4;
  int v5;
  int v6;
  char *v10;
  int v11;
  unint64_t v12;
  _BOOL4 v13;
  BOOL v14;
  ASN1_INTEGER *v15;
  _QWORD *v16;
  ASN1_INTEGER *result;
  int v18;
  uint64_t v19;
  unint64_t v21;
  int v22;
  unsigned __int8 *v23;
  unint64_t v24;
  int v25;
  unsigned __int8 *data;
  unsigned __int8 *v27;
  uint64_t v28;
  size_t v29;
  uint64_t *p_flags;
  uint64_t flags;
  size_t v32;

  if ((unint64_t)length >> 30)
  {
    v3 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/asn1/a_int.c";
    v4 = 12;
    v5 = 177;
    v6 = 182;
LABEL_19:
    ERR_put_error(v4, 0, v5, v3, v6);
    return 0;
  }
  if (!length
    || (v10 = (char *)*pp, v11 = **pp, LODWORD(v12) = length - 1, length != 1)
    && ((v13 = v11 == 0, v10[1] >= 0) ? (v14 = 1) : (v13 = 0, v14 = v11 != 255), v13 || !v14))
  {
    v3 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/asn1/a_int.c";
    v4 = 12;
    v5 = 196;
    v6 = 190;
    goto LABEL_19;
  }
  if (!a || (v15 = *a) == 0)
  {
    v16 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
    if (!v16)
    {
      v3 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
      v4 = 14;
      v5 = 65;
      v6 = 247;
      goto LABEL_19;
    }
    *v16 = 24;
    v16[1] = 0x200000000;
    v15 = (ASN1_INTEGER *)(v16 + 1);
    v16[2] = 0;
    v16[3] = 0;
  }
  if ((v11 & 0x80) == 0)
  {
    if (*v10)
    {
      if (!ASN1_STRING_set(v15, v10, length))
      {
LABEL_40:
        if (a)
        {
          result = 0;
          if (!v15 || *a == v15)
            return result;
        }
        else if (!v15)
        {
          return 0;
        }
        data = v15->data;
        if (data)
        {
          v28 = *((_QWORD *)data - 1);
          v27 = data - 8;
          v29 = v28 + 8;
          if (v28 != -8)
            bzero(v27, v29);
          free(v27);
        }
        flags = v15[-1].flags;
        p_flags = &v15[-1].flags;
        v32 = flags + 8;
        if (flags != -8)
          bzero(p_flags, v32);
        free(p_flags);
        return 0;
      }
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  if (*v10 == 255)
  {
    v12 = length - 1;
    if (length == 1)
    {
      v18 = 1;
      goto LABEL_34;
    }
    if (v10[1])
    {
LABEL_25:
      ++v10;
      v18 = v12;
      goto LABEL_34;
    }
    v19 = 2;
    while (length != v19)
    {
      if (v10[v19++])
      {
        v18 = length;
        if (v19 - 2 < v12)
          goto LABEL_25;
        goto LABEL_34;
      }
    }
  }
  v18 = length;
LABEL_34:
  if (!ASN1_STRING_set(v15, v10, v18))
    goto LABEL_40;
  if ((v11 & 0x80) != 0)
  {
    v15->type = 258;
    v21 = v15->length;
    if ((_DWORD)v21)
    {
      v22 = 0;
      v23 = v15->data;
      v24 = v21 - 1;
      do
      {
        v25 = v23[v24];
        v23[v24] = -(char)v22 - v25;
        v22 |= v25 != 0;
        --v24;
      }
      while (v24 < v21);
    }
    goto LABEL_37;
  }
LABEL_36:
  v15->type = 2;
LABEL_37:
  *pp += length;
  if (a)
    *a = v15;
  return v15;
}

uint64_t asn1_string_get_uint64(_QWORD *a1, const void **a2, int a3)
{
  int v3;
  size_t v4;
  int v5;
  int v6;
  unint64_t v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)a2 + 1);
  if ((v3 & 0xFFFFFEFF) != a3)
  {
    v5 = 195;
    v6 = 315;
    goto LABEL_10;
  }
  v9[0] = 0;
  v4 = *(int *)a2;
  if ((int)v4 < 9)
  {
    if ((_DWORD)v4)
    {
      memcpy((char *)&v9[1] - v4, a2[1], v4);
      *a1 = bswap64(v9[0]);
      if ((v3 & 0x100) == 0)
        return 1;
    }
    else
    {
      *a1 = bswap64(0);
      if ((v3 & 0x100) == 0)
        return 1;
    }
    v5 = 196;
    v6 = 334;
    goto LABEL_10;
  }
  v5 = 196;
  v6 = 320;
LABEL_10:
  ERR_put_error(12, 0, v5, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_int.c", v6);
  return 0;
}

uint64_t asn1_string_get_int64(int64_t *a1, const void **a2, int a3)
{
  unsigned int v3;
  size_t v4;
  int v5;
  int v6;
  unint64_t v8;
  int64_t v9;
  BOOL v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)a2 + 1);
  if ((v3 & 0xFFFFFEFF) != a3)
  {
    v5 = 195;
    v6 = 315;
    goto LABEL_15;
  }
  v12[0] = 0;
  v4 = *(int *)a2;
  if ((int)v4 >= 9)
  {
    v5 = 196;
    v6 = 320;
LABEL_15:
    ERR_put_error(12, 0, v5, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_int.c", v6);
    return 0;
  }
  if ((_DWORD)v4)
  {
    memcpy((char *)&v12[1] - v4, a2[1], v4);
    v8 = v12[0];
  }
  else
  {
    v8 = 0;
  }
  v9 = bswap64(v8);
  v10 = v9 > 0;
  if (((v8 != 0) & (v3 >> 8)) == 0)
    v10 = v9 >= 0;
  if (!v10)
  {
    v5 = 196;
    v6 = 364;
    goto LABEL_15;
  }
  if (((v8 != 0) & (v3 >> 8)) != 0)
    v9 = -v9;
  *a1 = v9;
  return 1;
}

uint64_t ASN1_INTEGER_get(uint64_t a)
{
  int64_t v1;

  if (a)
  {
    v1 = 0;
    if (asn1_string_get_int64(&v1, (const void **)a, 2))
    {
      return v1;
    }
    else
    {
      ERR_clear_error();
      return -1;
    }
  }
  return a;
}

ASN1_STRING *bn_to_asn1_string(uint64_t *a1, ASN1_STRING *str, int a3)
{
  ASN1_STRING *v6;
  int v7;
  char *v8;
  int8x16_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  int v34;
  unsigned int v35;
  unsigned __int8 *v36;
  int8x16_t *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 v40;
  unint64_t v41;
  unint64_t v42;
  int8x16_t *v43;
  int8x16_t v44;
  unint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  unint64_t v48;
  int8x8_t v49;
  unint64_t v50;
  int8x8_t *v51;
  int8x8_t v52;
  uint64_t v53;
  unint64_t v54;
  __int8 *v55;
  char v56;
  ASN1_STRING *result;
  unsigned __int8 *data;
  unsigned __int8 *v60;
  uint64_t v61;
  size_t v62;
  uint64_t *p_flags;
  uint64_t flags;
  size_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  __int8 *v70;
  unsigned __int8 v71;
  int8x16_t *v72;
  int8x16_t *v73;
  uint64_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  uint64_t v78;
  int8x8_t *v79;
  int8x8_t *v80;
  uint64_t v81;
  int8x8_t v82;

  v6 = str;
  if (str)
  {
    v7 = *((_DWORD *)a1 + 2);
    if (!*((_DWORD *)a1 + 4))
      goto LABEL_16;
LABEL_6:
    if (v7)
    {
      v9 = (int8x16_t *)*a1;
      if (v7 == 1)
      {
        v10 = 0;
        v11 = 0;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v10 = v7 & 0xFFFFFFFFFFFFFFFELL;
        v14 = &v9->i64[1];
        v15 = v10;
        do
        {
          v12 |= *(v14 - 1);
          v13 |= *v14;
          v14 += 2;
          v15 -= 2;
        }
        while (v15);
        v11 = v13 | v12;
        if (v10 == v7)
        {
LABEL_14:
          if (v11)
            a3 |= 0x100u;
          goto LABEL_16;
        }
      }
      v16 = v7 - v10;
      v17 = &v9->i64[v10];
      do
      {
        v18 = *v17++;
        v11 |= v18;
        --v16;
      }
      while (v16);
      goto LABEL_14;
    }
LABEL_16:
    v6->type = a3;
    v19 = v7 & (v7 >> 31);
    v20 = 8 * v7 - 8;
    v21 = v7;
    while (1)
    {
      v22 = __OFSUB__(v21--, 1);
      if (v21 < 0 != v22)
        break;
      v23 = *a1;
      v24 = *(_QWORD *)(*a1 + v20);
      v20 -= 8;
      if (v24)
      {
        v19 = v21 + 1;
        goto LABEL_24;
      }
    }
    if (v7 < 0)
    {
      v23 = *a1;
LABEL_24:
      v26 = v19 - 1;
      v27 = *(_QWORD *)(v23 + 8 * (v19 - 1));
      v28 = v27 != 0;
      v29 = HIDWORD(v27) != 0;
      if (HIDWORD(v27))
        v27 >>= 32;
      v30 = v27 >> 16 != 0;
      if (v27 >> 16)
        v27 >>= 16;
      v31 = v27 > 0xFF;
      if (v27 > 0xFF)
        v27 >>= 8;
      v32 = v27 > 0xF;
      if (v27 > 0xF)
        v27 >>= 4;
      v33 = v27 > 3;
      if (v27 > 3)
        v27 >>= 2;
      v34 = v28 | (v26 << 6) | (32 * v29) | (16 * v30) | (8 * v31) | (4 * v32) | (2 * v33);
      if (v27 > 1)
        ++v34;
      v35 = v34 + 7;
      v25 = v35 >> 3;
      if (!ASN1_STRING_set(v6, 0, v35 >> 3))
        goto LABEL_56;
    }
    else
    {
      v25 = 0;
      if (!ASN1_STRING_set(v6, 0, 0))
      {
LABEL_56:
        result = 0;
        if (v6 == str || !v6)
          return result;
        data = v6->data;
        if (data)
        {
          v61 = *((_QWORD *)data - 1);
          v60 = data - 8;
          v62 = v61 + 8;
          if (v61 != -8)
            bzero(v60, v62);
          free(v60);
        }
        flags = v6[-1].flags;
        p_flags = &v6[-1].flags;
        v65 = flags + 8;
        if (flags != -8)
          bzero(p_flags, v65);
        free(p_flags);
        return 0;
      }
    }
    v36 = v6->data;
    v37 = (int8x16_t *)*a1;
    v38 = 8 * *((int *)a1 + 2);
    v39 = v38 - v25;
    if (v38 <= v25)
    {
LABEL_67:
      if (v38 >= v25)
        v66 = v25;
      else
        v66 = 8 * *((int *)a1 + 2);
      if (!v66)
        goto LABEL_77;
      if (v66 < 8 || &v36[v25 - v66] < &v37->u8[v66] && v37 < (int8x16_t *)&v36[v25])
      {
        v67 = 0;
LABEL_75:
        v68 = v66 - v67;
        v69 = &v36[v25 + ~v67];
        v70 = &v37->i8[v67];
        do
        {
          v71 = *v70++;
          *v69-- = v71;
          --v68;
        }
        while (v68);
LABEL_77:
        if (v38 < v25)
          bzero(v36, v25 - v66);
        return v6;
      }
      if (v66 >= 0x20)
      {
        v67 = v66 & 0xFFFFFFE0;
        v72 = v37 + 1;
        v73 = (int8x16_t *)&v36[v25 - 16];
        v74 = v67;
        do
        {
          v75 = vrev64q_s8(v72[-1]);
          v76 = vextq_s8(v75, v75, 8uLL);
          v77 = vrev64q_s8(*v72);
          v73[-1] = vextq_s8(v77, v77, 8uLL);
          *v73 = v76;
          v72 += 2;
          v73 -= 2;
          v74 -= 32;
        }
        while (v74);
        if (v66 == v67)
          goto LABEL_77;
        if ((v66 & 0x18) == 0)
          goto LABEL_75;
      }
      else
      {
        v67 = 0;
      }
      v78 = v67;
      v67 = v66 & 0xFFFFFFF8;
      v79 = (int8x8_t *)&v37->i8[v78];
      v80 = (int8x8_t *)&v36[v25 - v78 - 8];
      v81 = v78 - v67;
      do
      {
        v82 = *v79++;
        *v80-- = vrev64_s8(v82);
        v81 += 8;
      }
      while (v81);
      if (v66 == v67)
        goto LABEL_77;
      goto LABEL_75;
    }
    if (v39 < 8)
    {
      v40 = 0;
      v41 = v25;
      goto LABEL_52;
    }
    if (v39 >= 0x20)
    {
      v42 = v39 & 0xFFFFFFFFFFFFFFE0;
      v43 = (int8x16_t *)((char *)v37 + v25 + 16);
      v44 = 0uLL;
      v45 = v39 & 0xFFFFFFFFFFFFFFE0;
      v46 = 0uLL;
      do
      {
        v44 = vorrq_s8(v43[-1], v44);
        v46 = vorrq_s8(*v43, v46);
        v43 += 2;
        v45 -= 32;
      }
      while (v45);
      v47 = vorrq_s8(v46, v44);
      *(int8x8_t *)v47.i8 = vorr_s8(*(int8x8_t *)v47.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL));
      v48 = v47.i64[0] | HIDWORD(v47.i64[0]) | ((unint64_t)(v47.i64[0] | HIDWORD(v47.i64[0])) >> 16);
      v40 = v48 | BYTE1(v48);
      if (v39 == v42)
        goto LABEL_55;
      if ((v39 & 0x18) == 0)
      {
        v41 = v25 + v42;
LABEL_52:
        v54 = v41 - v38;
        v55 = &v37->i8[v41];
        do
        {
          v56 = *v55++;
          v40 |= v56;
        }
        while (!__CFADD__(v54++, 1));
        goto LABEL_55;
      }
    }
    else
    {
      v40 = 0;
      v42 = 0;
    }
    v41 = v25 + (v39 & 0xFFFFFFFFFFFFFFF8);
    v49 = (int8x8_t)v40;
    v50 = v42 - (v39 & 0xFFFFFFFFFFFFFFF8);
    v51 = (int8x8_t *)&v37->i8[v25 + v42];
    do
    {
      v52 = *v51++;
      v49 = vorr_s8(v52, v49);
      v50 += 8;
    }
    while (v50);
    v53 = *(_QWORD *)&v49 | HIDWORD(*(_QWORD *)&v49) | ((*(_QWORD *)&v49 | HIDWORD(*(_QWORD *)&v49)) >> 16);
    v40 = v53 | BYTE1(v53);
    if (v39 != (v39 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_52;
LABEL_55:
    if (v40)
      goto LABEL_56;
    goto LABEL_67;
  }
  v8 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (v8)
  {
    *(_QWORD *)v8 = 24;
    *((_DWORD *)v8 + 2) = 0;
    v6 = (ASN1_STRING *)(v8 + 8);
    *((_DWORD *)v8 + 3) = a3;
    *((_QWORD *)v8 + 2) = 0;
    *((_QWORD *)v8 + 3) = 0;
    v7 = *((_DWORD *)a1 + 2);
    if (!*((_DWORD *)a1 + 4))
      goto LABEL_16;
    goto LABEL_6;
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  ERR_put_error(12, 0, 158, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_int.c", 412);
  return 0;
}

int ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned __int8 *in, int len, int inform, unint64_t mask, uint64_t minsize, uint64_t maxsize)
{
  size_t v11;
  unint64_t v14;
  int v15;
  const char *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t (*v48)(uint64_t, unsigned int);
  ASN1_STRING *v49;
  ASN1_STRING *v50;
  char *v51;
  _QWORD *v52;
  void *v53;
  int v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  size_t v58;
  uint64_t *p_flags;
  uint64_t flags;
  size_t v61;
  uint64_t v62;
  char *v63;
  int v64;
  ASN1_STRING **v65;
  uint64_t (*v66)();
  unint64_t v67;
  void *data;
  __int128 v69;
  void *v70[2];
  __int128 v71;
  const unsigned __int8 *v72;
  size_t v73;
  _BYTE *v74;

  v11 = *(_QWORD *)&len;
  if (*(_QWORD *)&len == -1)
  {
    v11 = strlen((const char *)in);
    if (mask)
      v14 = mask;
    else
      v14 = 10246;
    v15 = inform - 4096;
    if ((inform - 4096) >= 5)
      goto LABEL_12;
  }
  else
  {
    if (mask)
      v14 = mask;
    else
      v14 = 10246;
    v15 = inform - 4096;
    if ((inform - 4096) >= 5)
      goto LABEL_12;
  }
  if (((0x17u >> inform) & 1) != 0)
  {
    v65 = out;
    v66 = off_24C0C68D8[v15];
    v22 = dword_208F1E090[v15];
    v72 = in;
    v73 = v11;
    if (v11)
    {
      v64 = v22;
      v23 = 0;
      v24 = 0;
      v26 = inform == 4098 || inform == 4100;
      v27 = !v26;
      while (1)
      {
        LODWORD(v69) = 0;
        if (!((unsigned int (*)(const unsigned __int8 **, __int128 *))v66)(&v72, &v69))
        {
          v16 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl"
                "/src/crypto/asn1/a_mbstr.c";
          v17 = 12;
          v18 = v64;
          v19 = 131;
          goto LABEL_13;
        }
        if (v23)
          v30 = 1;
        else
          v30 = v27;
        if ((v30 & 1) == 0 && (_DWORD)v69 == 65279)
        {
          v16 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl"
                "/src/crypto/asn1/a_mbstr.c";
          v17 = 12;
          v18 = 126;
          v19 = 142;
          goto LABEL_13;
        }
        if ((v14 & 2) != 0)
        {
          if (v69 > 0x7F
            || ((v69 & 0xFFFFFFDF) - 65 >= 0x1A ? (v31 = (v69 - 48) >= 0xA) : (v31 = 0),
                v31 && (v69 > 0x3F || ((1 << v69) & 0xA400FB8100000000) == 0)))
          {
            v14 &= ~2uLL;
          }
        }
        if (((v69 > 0x7F) & (v14 >> 4)) != 0)
          v32 = v14 & 0xFFFFFFFFFFFFFFEFLL;
        else
          v32 = v14;
        if (((v69 > 0xFF) & (v32 >> 2)) != 0)
          v32 &= ~4uLL;
        v14 = (((v69 & 0xFFFF0000) != 0) & (v32 >> 11)) != 0 ? v32 & 0xFFFFFFFFFFFFF7FFLL : v32;
        if (!v14)
          break;
        ++v23;
        if (maxsize >= 1 && v23 > maxsize)
        {
          ERR_put_error(12, 0, 173, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_mbstr.c", 167);
          ERR_add_error_dataf("maxsize=%zu", v33, v34, v35, v36, v37, v38, v39, maxsize);
          return -1;
        }
        v28 = 3;
        if (v69 >= 0x10000)
          v28 = 4;
        if (v69 < 0x800)
          v28 = 2;
        if (v69 >= 0x80)
          v29 = v28;
        else
          v29 = 1;
        v24 += v29;
        if (!v73)
          goto LABEL_61;
      }
      v16 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src"
            "/crypto/asn1/a_mbstr.c";
      v17 = 12;
      v18 = 126;
      v19 = 160;
      goto LABEL_13;
    }
    v24 = 0;
    v23 = 0;
LABEL_61:
    if (minsize >= 1 && v23 < minsize)
    {
      ERR_put_error(12, 0, 174, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_mbstr.c", 174);
      ERR_add_error_dataf("minsize=%zu", v40, v41, v42, v43, v44, v45, v46, minsize);
      return -1;
    }
    if ((v14 & 2) != 0)
    {
      v47 = 4097;
      v48 = CBB_add_latin1;
      v20 = 19;
    }
    else if ((v14 & 0x10) != 0)
    {
      v47 = 4097;
      v48 = CBB_add_latin1;
      v20 = 22;
    }
    else if ((v14 & 4) != 0)
    {
      v47 = 4097;
      v48 = CBB_add_latin1;
      v20 = 20;
    }
    else if ((v14 & 0x800) != 0)
    {
      v23 *= 2;
      v47 = 4098;
      v48 = CBB_add_ucs2_be;
      v20 = 30;
    }
    else if ((v14 & 0x100) != 0)
    {
      v23 *= 4;
      v47 = 4100;
      v48 = CBB_add_utf32_be;
      v20 = 28;
    }
    else
    {
      if ((v14 & 0x2000) == 0)
      {
        v16 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/s"
              "rc/crypto/asn1/a_mbstr.c";
        v17 = 12;
        v18 = 126;
        v19 = 206;
        goto LABEL_13;
      }
      v47 = 4096;
      v48 = CBB_add_utf8;
      v20 = 12;
      v23 = v24;
    }
    if (!v65)
      return v20;
    v49 = *v65;
    v50 = *v65;
    if (!*v65)
    {
      v51 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
      if (!v51)
      {
        v16 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
        v17 = 14;
        v18 = 65;
        v19 = 247;
        goto LABEL_13;
      }
      *(_QWORD *)v51 = 24;
      *((_DWORD *)v51 + 2) = 0;
      v50 = (ASN1_STRING *)(v51 + 8);
      *((_DWORD *)v51 + 3) = v20;
      *((_QWORD *)v51 + 2) = 0;
      *((_QWORD *)v51 + 3) = 0;
    }
    *(_OWORD *)v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    if (v47 == inform)
    {
      if (ASN1_STRING_set(v50, in, v11))
      {
        v50->type = v20;
LABEL_87:
        *v65 = v50;
        return v20;
      }
    }
    else
    {
      *(_OWORD *)v70 = 0uLL;
      v71 = 0uLL;
      v69 = 0uLL;
      if (v23 + 1 >= 0xFFFFFFFFFFFFFFF8)
      {
        ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
        goto LABEL_106;
      }
      v52 = malloc_type_malloc(v23 + 9, 0x30772F57uLL);
      if (v52)
      {
        *v52 = v23 + 1;
        v53 = v52 + 1;
      }
      else
      {
        ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
        if (v23 != -1)
          goto LABEL_106;
        v53 = 0;
      }
      BYTE8(v69) = 0;
      *(_QWORD *)&v69 = 0;
      v70[0] = v53;
      v70[1] = 0;
      *(_QWORD *)&v71 = v23 + 1;
      BYTE8(v71) = 1;
      v72 = in;
      v73 = v11;
      if (v11)
      {
        while (1)
        {
          LODWORD(v74) = 0;
          if (!((unsigned int (*)(const unsigned __int8 **, _BYTE **))v66)(&v72, &v74)
            || !v48((uint64_t)&v69, v74))
          {
            break;
          }
          if (!v73)
            goto LABEL_96;
        }
        ERR_put_error(12, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_mbstr.c", 244);
      }
      else
      {
LABEL_96:
        v67 = 0;
        data = 0;
        v74 = 0;
        if (CBB_add_space((uint64_t)&v69, &v74, 1))
        {
          *v74 = 0;
          if (CBB_finish((uint64_t)&v69, &data, &v67))
          {
            v54 = v67;
            if (v67)
            {
              if (!(v67 >> 31))
              {
                v50->type = v20;
                ASN1_STRING_set0(v50, data, v54 - 1);
                goto LABEL_87;
              }
            }
          }
        }
        ERR_put_error(12, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_mbstr.c", 254);
        OPENSSL_free(data);
      }
    }
LABEL_106:
    if (!v49 && v50)
    {
      v55 = v50->data;
      if (v55)
      {
        v57 = *((_QWORD *)v55 - 1);
        v56 = v55 - 8;
        v58 = v57 + 8;
        if (v57 != -8)
          bzero(v56, v58);
        free(v56);
      }
      flags = v50[-1].flags;
      p_flags = &v50[-1].flags;
      v61 = flags + 8;
      if (flags != -8)
        bzero(p_flags, v61);
      free(p_flags);
    }
    if (!BYTE8(v69) && (BYTE8(v71) & 1) != 0 && v70[0])
    {
      v63 = (char *)v70[0] - 8;
      v62 = *((_QWORD *)v70[0] - 1);
      if (v62 != -8)
        bzero((char *)v70[0] - 8, v62 + 8);
      free(v63);
    }
    return -1;
  }
LABEL_12:
  v16 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cry"
        "pto/asn1/a_mbstr.c";
  v17 = 12;
  v18 = 182;
  v19 = 120;
LABEL_13:
  ERR_put_error(v17, 0, v18, v16, v19);
  return -1;
}

int i2a_ASN1_OBJECT(BIO *bp, ASN1_OBJECT *a)
{
  char *v4;
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int (__cdecl *bwrite)(BIO *, const char *, int);
  int v10;
  int v11;
  const char *v12;
  int v13;
  int v14;
  int v15;
  size_t v16;
  int v17;
  int (__cdecl *v18)(BIO *, const char *, int);
  int v19;
  int v20;
  int v21;
  char *v22;
  uint64_t v23;
  size_t v24;
  char buf[80];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!a || !a->data)
  {
    if (bp && bp->method && (bwrite = bp->method->bwrite) != 0)
    {
      if (LODWORD(bp->cb_arg))
      {
        v10 = ((uint64_t (*)(BIO *, const char *, uint64_t))bwrite)(bp, "NULL", 4);
        if (v10 < 1)
          return -1;
        bp->prev_bio = (bio_st *)((char *)bp->prev_bio + v10);
        if (v10 == 4)
          return 4;
        else
          return -1;
      }
      v12 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src"
            "/crypto/bio/bio.c";
      v13 = 17;
      v14 = 114;
      v15 = 171;
    }
    else
    {
      v12 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src"
            "/crypto/bio/bio.c";
      v13 = 17;
      v14 = 115;
      v15 = 167;
    }
    goto LABEL_15;
  }
  v4 = buf;
  v5 = OBJ_obj2txt(buf, 80, a, 0);
  if (v5 >= 80)
  {
    v6 = (v5 + 1);
    v7 = (char *)malloc_type_malloc(v6 + 8, 0x30772F57uLL);
    if (v7)
    {
      *(_QWORD *)v7 = v6;
      v8 = v7 + 8;
      v5 = OBJ_obj2txt(v7 + 8, v6, a, 0);
      v4 = v8;
      goto LABEL_17;
    }
    v12 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
    v13 = 14;
    v14 = 65;
    v15 = 247;
LABEL_15:
    ERR_put_error(v13, 0, v14, v12, v15);
    return -1;
  }
  v8 = 0;
LABEL_17:
  if (v5 < 1)
    v4 = "<INVALID>";
  v16 = strlen(v4);
  if (v16 >> 31)
  {
    ERR_put_error(12, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_object.c", 101);
    v11 = -1;
    if (!v8)
      return v11;
    goto LABEL_39;
  }
  v17 = v16;
  if (!bp || !bp->method || (v18 = bp->method->bwrite) == 0)
  {
    v20 = 115;
    v21 = 167;
LABEL_34:
    ERR_put_error(17, 0, v20, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", v21);
    v19 = -2;
    goto LABEL_35;
  }
  if (!LODWORD(bp->cb_arg))
  {
    v20 = 114;
    v21 = 171;
    goto LABEL_34;
  }
  if ((_DWORD)v16)
  {
    v19 = ((uint64_t (*)(BIO *, char *, size_t))v18)(bp, v4, v16);
    if (v19 >= 1)
    {
      bp->prev_bio = (bio_st *)((char *)bp->prev_bio + v19);
      if (v19 == v17)
        v11 = v17;
      else
        v11 = -1;
      if (!v8)
        return v11;
      goto LABEL_39;
    }
LABEL_35:
    if (v19 == v17)
      v11 = v17;
    else
      v11 = -1;
    if (!v8)
      return v11;
    goto LABEL_39;
  }
  v11 = 0;
  if (!v8)
    return v11;
LABEL_39:
  v23 = *((_QWORD *)v8 - 1);
  v22 = v8 - 8;
  v24 = v23 + 8;
  if (v23 != -8)
    bzero(v22, v24);
  free(v22);
  return v11;
}

ASN1_OBJECT *__cdecl c2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned __int8 **pp, uint64_t length)
{
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  char v9;
  int v10;
  int v11;
  ASN1_OBJECT *v12;
  ASN1_OBJECT *v14;
  int flags;
  const char *sn;
  char *v17;
  uint64_t v18;
  size_t v19;
  const char *ln;
  char *v21;
  uint64_t v22;
  size_t v23;
  unsigned __int8 *data;
  unsigned __int8 *v25;
  uint64_t v26;
  size_t v27;
  int *p_flags;
  uint64_t v29;
  size_t v30;
  ASN1_OBJECT o;

  if ((length & 0x8000000000000000) == 0)
  {
    if (!length)
      goto LABEL_12;
    v6 = 0;
    LOBYTE(v7) = 0;
    v8 = (unsigned __int8 *)*pp;
    while (1)
    {
      v9 = v7;
      if (length == v6)
        break;
      v7 = v8[v6++];
      if ((v9 & 0x80) == 0 && v7 == 128)
        goto LABEL_12;
    }
    if ((v7 & 0x80) != 0)
    {
LABEL_12:
      v10 = 146;
      v11 = 166;
      goto LABEL_13;
    }
    if ((unint64_t)length >> 31)
    {
      v10 = 173;
      v11 = 222;
      goto LABEL_13;
    }
    memset(&o, 0, 20);
    o.data = v8;
    *(_QWORD *)&o.flags = 13;
    o.length = length;
    v12 = OBJ_dup(&o);
    if (!v12)
      return v12;
    if (!a)
    {
LABEL_40:
      *pp += length;
      return v12;
    }
    v14 = *a;
    if (!*a)
    {
LABEL_39:
      *a = v12;
      goto LABEL_40;
    }
    flags = v14->flags;
    if ((flags & 4) != 0)
    {
      sn = v14->sn;
      if (v14->sn)
      {
        v18 = *((_QWORD *)sn - 1);
        v17 = (char *)(sn - 8);
        v19 = v18 + 8;
        if (v18 != -8)
          bzero(v17, v19);
        free(v17);
      }
      ln = v14->ln;
      if (ln)
      {
        v22 = *((_QWORD *)ln - 1);
        v21 = (char *)(ln - 8);
        v23 = v22 + 8;
        if (v22 != -8)
          bzero(v21, v23);
        free(v21);
      }
      v14->sn = 0;
      v14->ln = 0;
      flags = v14->flags;
      if ((flags & 8) == 0)
      {
LABEL_20:
        if ((flags & 1) == 0)
          goto LABEL_39;
LABEL_36:
        v29 = *(_QWORD *)&v14[-1].flags;
        p_flags = &v14[-1].flags;
        v30 = v29 + 8;
        if (v29 != -8)
          bzero(p_flags, v30);
        free(p_flags);
        goto LABEL_39;
      }
    }
    else if ((flags & 8) == 0)
    {
      goto LABEL_20;
    }
    data = v14->data;
    if (data)
    {
      v26 = *((_QWORD *)data - 1);
      v25 = data - 8;
      v27 = v26 + 8;
      if (v26 != -8)
        bzero(v25, v27);
      free(v25);
      flags = v14->flags;
    }
    v14->data = 0;
    v14->length = 0;
    if ((flags & 1) == 0)
      goto LABEL_39;
    goto LABEL_36;
  }
  v10 = 146;
  v11 = 159;
LABEL_13:
  ERR_put_error(12, 0, v10, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_object.c", v11);
  return 0;
}

void ASN1_OBJECT_free(ASN1_OBJECT *a)
{
  int flags;
  const char *sn;
  char *v4;
  uint64_t v5;
  size_t v6;
  const char *ln;
  char *v8;
  uint64_t v9;
  size_t v10;
  unsigned __int8 *data;
  unsigned __int8 *v12;
  uint64_t v13;
  size_t v14;
  int *p_flags;
  uint64_t v16;
  size_t v17;

  if (!a)
    return;
  flags = a->flags;
  if ((flags & 4) != 0)
  {
    sn = a->sn;
    if (a->sn)
    {
      v5 = *((_QWORD *)sn - 1);
      v4 = (char *)(sn - 8);
      v6 = v5 + 8;
      if (v5 != -8)
        bzero(v4, v6);
      free(v4);
    }
    ln = a->ln;
    if (ln)
    {
      v9 = *((_QWORD *)ln - 1);
      v8 = (char *)(ln - 8);
      v10 = v9 + 8;
      if (v9 != -8)
        bzero(v8, v10);
      free(v8);
    }
    a->sn = 0;
    a->ln = 0;
    flags = a->flags;
    if ((flags & 8) == 0)
    {
LABEL_4:
      if ((flags & 1) == 0)
        return;
      goto LABEL_20;
    }
  }
  else if ((flags & 8) == 0)
  {
    goto LABEL_4;
  }
  data = a->data;
  if (data)
  {
    v13 = *((_QWORD *)data - 1);
    v12 = data - 8;
    v14 = v13 + 8;
    if (v13 != -8)
      bzero(v12, v14);
    free(v12);
    flags = a->flags;
  }
  a->data = 0;
  a->length = 0;
  if ((flags & 1) != 0)
  {
LABEL_20:
    v16 = *(_QWORD *)&a[-1].flags;
    p_flags = &a[-1].flags;
    v17 = v16 + 8;
    if (v16 != -8)
      bzero(p_flags, v17);
    free(p_flags);
  }
}

int ASN1_STRING_print_ex(BIO *out, ASN1_STRING *str, unint64_t flags)
{
  __int16 v3;
  int type;
  int v7;
  unsigned int v8;
  const char *v9;
  size_t v10;
  int (__cdecl *bwrite)(BIO *, const char *, int);
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int (__cdecl *v17)(BIO *, const char *, int);
  int v18;
  int (__cdecl *v19)(BIO *, const char *, int);
  int v20;
  int (__cdecl *v21)(BIO *, const char *, int);
  int v22;
  int length;
  unsigned __int8 *data;
  uint64_t v25;
  unint64_t v26;
  int (__cdecl *v27)(BIO *, const char *, int);
  int v28;
  int v29;
  int v30;
  int (__cdecl *v31)(BIO *, const char *, int);
  int v32;
  int v33;
  int v34;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unint64_t v41;
  int (__cdecl *v42)(BIO *, const char *, int);
  int v43;
  int v44;
  _QWORD *v45;
  int v46;
  int v47;
  char *v48;
  uint64_t v49;
  size_t v50;
  void *v51;
  _QWORD v52[2];
  _BYTE v53[2];

  v3 = flags;
  type = str->type;
  if ((flags & 0x40) == 0)
  {
    v7 = 0;
    goto LABEL_17;
  }
  if ((type & 0xFFFFFFF7) == 0x102)
    v8 = type & 0xFFFFFEFF;
  else
    v8 = str->type;
  if (v8 <= 0x1E)
  {
    v9 = ASN1_tag2str_tag2str[v8];
    v10 = strlen(v9);
    if (out)
      goto LABEL_8;
LABEL_16:
    v7 = v10 + 1;
    goto LABEL_17;
  }
  v9 = "(unknown)";
  v10 = strlen("(unknown)");
  if (!out)
    goto LABEL_16;
LABEL_8:
  if (!out->method || (bwrite = out->method->bwrite) == 0)
  {
    v29 = 115;
    v30 = 167;
LABEL_59:
    ERR_put_error(17, 0, v29, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", v30);
    v12 = -2;
    goto LABEL_60;
  }
  if (!LODWORD(out->cb_arg))
  {
    v29 = 114;
    v30 = 171;
    goto LABEL_59;
  }
  if ((int)v10 >= 1)
  {
    v12 = ((uint64_t (*)(BIO *, const char *, size_t))bwrite)(out, v9, v10);
    if (v12 >= 1)
    {
      out->prev_bio = (bio_st *)((char *)out->prev_bio + v12);
      if (v12 != (_DWORD)v10)
        return -1;
      goto LABEL_61;
    }
LABEL_60:
    if (v12 != (_DWORD)v10)
      return -1;
    goto LABEL_61;
  }
  if ((_DWORD)v10)
    return -1;
LABEL_61:
  if (!out->method)
    goto LABEL_67;
  v31 = out->method->bwrite;
  if (!v31)
    goto LABEL_67;
  if (!LODWORD(out->cb_arg))
    goto LABEL_87;
  v32 = ((uint64_t (*)(BIO *, const char *, uint64_t))v31)(out, ":", 1);
  if (v32 < 1)
    return -1;
  out->prev_bio = (bio_st *)((char *)out->prev_bio + v32);
  if (v32 != 1)
    return -1;
  v7 = v10 + 1;
LABEL_17:
  if ((v3 & 0x80) != 0)
    goto LABEL_42;
  if ((v3 & 0x20) != 0)
  {
LABEL_22:
    v14 = 4097;
    goto LABEL_23;
  }
  v13 = type - 12;
  if ((type - 12) >= 0x13 || ((0x55DC1u >> v13) & 1) == 0)
  {
    if ((v3 & 0x100) == 0)
      goto LABEL_22;
LABEL_42:
    if (out)
    {
      if (!out->method)
        goto LABEL_67;
      v21 = out->method->bwrite;
      if (!v21)
        goto LABEL_67;
      if (!LODWORD(out->cb_arg))
        goto LABEL_87;
      v22 = ((uint64_t (*)(BIO *, const char *, uint64_t))v21)(out, "#", 1);
      if (v22 < 1)
        return -1;
      out->prev_bio = (bio_st *)((char *)out->prev_bio + v22);
      if (v22 != 1)
        return -1;
      if ((v3 & 0x200) == 0)
      {
        length = str->length;
        if (!str->length)
          return v7 + 1;
        data = str->data;
        v25 = length;
        while (1)
        {
          v26 = *data;
          LOBYTE(v52[0]) = do_hex_dump_hexdig[v26 >> 4];
          BYTE1(v52[0]) = do_hex_dump_hexdig[v26 & 0xF];
          if (!out->method)
            goto LABEL_67;
          v27 = out->method->bwrite;
          if (!v27)
            goto LABEL_67;
          if (!LODWORD(out->cb_arg))
            goto LABEL_87;
          v28 = ((uint64_t (*)(BIO *, _QWORD *, uint64_t))v27)(out, v52, 2);
          if (v28 < 1)
            return -1;
          out->prev_bio = (bio_st *)((char *)out->prev_bio + v28);
          if (v28 != 2)
            return -1;
          ++data;
          if (!--v25)
            goto LABEL_73;
        }
      }
    }
    else if ((v3 & 0x200) == 0)
    {
      length = str->length;
LABEL_73:
      if (2 * length < 0)
        return -1;
      v36 = (2 * length) | 1;
LABEL_104:
      if ((v36 & 0x80000000) == 0)
        return v36 + v7;
      return -1;
    }
    v52[0] = 0;
    v52[1] = 0;
    asn1_type_set0_string((int *)v52, (uint64_t)str);
    v51 = 0;
    v37 = ASN1_item_i2d((ASN1_VALUE *)v52, (unsigned __int8 **)&v51, (const ASN1_ITEM *)&ASN1_OBJECT_it.sname);
    if ((v37 & 0x80000000) != 0)
    {
      v36 = -1;
      goto LABEL_104;
    }
    v38 = v37;
    if (out && v37)
    {
      v39 = (unsigned __int8 *)v51;
      v40 = v37;
      while (1)
      {
        v41 = *v39;
        v53[0] = do_hex_dump_hexdig[v41 >> 4];
        v53[1] = do_hex_dump_hexdig[v41 & 0xF];
        if (!out->method || (v42 = out->method->bwrite) == 0)
        {
          v46 = 115;
          v47 = 167;
          goto LABEL_96;
        }
        if (!LODWORD(out->cb_arg))
          break;
        v43 = ((uint64_t (*)(BIO *, _BYTE *, uint64_t))v42)(out, v53, 2);
        if (v43 < 1)
          goto LABEL_97;
        out->prev_bio = (bio_st *)((char *)out->prev_bio + v43);
        if (v43 != 2)
          goto LABEL_97;
        ++v39;
        if (!--v40)
          goto LABEL_85;
      }
      v46 = 114;
      v47 = 171;
LABEL_96:
      ERR_put_error(17, 0, v46, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", v47);
LABEL_97:
      v44 = -1;
      v45 = v51;
      if (!v51)
        goto LABEL_101;
    }
    else
    {
LABEL_85:
      v44 = 2 * v38;
      v45 = v51;
      if (!v51)
      {
LABEL_101:
        if (v44 >= 0)
          v36 = v44 + 1;
        else
          v36 = -1;
        goto LABEL_104;
      }
    }
    v49 = *(v45 - 1);
    v48 = (char *)(v45 - 1);
    v50 = v49 + 8;
    if (v49 != -8)
      bzero(v48, v50);
    free(v48);
    goto LABEL_101;
  }
  v14 = dword_208F1E0B8[v13];
LABEL_23:
  LOBYTE(v52[0]) = 0;
  v15 = do_buf((uint64_t)str->data, str->length, v14, v3, v52, 0);
  if (v15 < 0)
    return -1;
  if (LOBYTE(v52[0]))
    v16 = v15 + v7 + 2;
  else
    v16 = v15 + v7;
  if (out)
  {
    if (!LOBYTE(v52[0]))
      goto LABEL_34;
    if (!out->method)
      goto LABEL_67;
    v17 = out->method->bwrite;
    if (!v17)
      goto LABEL_67;
    if (LODWORD(out->cb_arg))
    {
      v18 = ((uint64_t (*)(BIO *, const char *, uint64_t))v17)(out, "\"", 1);
      if (v18 < 1)
        return -1;
      out->prev_bio = (bio_st *)((char *)out->prev_bio + v18);
      if (v18 != 1)
        return -1;
LABEL_34:
      if ((do_buf((uint64_t)str->data, str->length, v14, v3, 0, out) & 0x80000000) != 0)
        return -1;
      if (!LOBYTE(v52[0]))
        return v16;
      if (out->method)
      {
        v19 = out->method->bwrite;
        if (v19)
        {
          if (LODWORD(out->cb_arg))
          {
            v20 = ((uint64_t (*)(BIO *, const char *, uint64_t))v19)(out, "\"", 1);
            if (v20 >= 1)
            {
              out->prev_bio = (bio_st *)((char *)out->prev_bio + v20);
              if (v20 == 1)
                return v16;
            }
            return -1;
          }
          goto LABEL_87;
        }
      }
LABEL_67:
      v33 = 115;
      v34 = 167;
LABEL_68:
      ERR_put_error(17, 0, v33, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", v34);
      return -1;
    }
LABEL_87:
    v33 = 114;
    v34 = 171;
    goto LABEL_68;
  }
  return v16;
}

uint64_t do_buf(uint64_t a1, int a2, int a3, char a4, _BYTE *a5, BIO *a6)
{
  int v6;
  uint64_t v7;
  unsigned int (*v10)(_QWORD, _QWORD);
  int v11;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int reason;
  unsigned int (*v27)(_QWORD, _QWORD);
  __int128 v28;
  _BYTE *v29;
  uint64_t v30;
  __int128 v31;
  _BYTE v32[6];
  int v33;
  uint64_t v34;
  uint64_t v35;

  v6 = a3 - 4096;
  if ((a3 - 4096) <= 4 && ((0x17u >> a3) & 1) != 0)
  {
    v10 = (unsigned int (*)(_QWORD, _QWORD))*(&off_24C0C6960 + v6);
    v11 = dword_208F1E0A4[v6];
    v34 = a1;
    v35 = a2;
    if (!a2)
      return 0;
    reason = v11;
    v7 = 0;
    if ((a4 & 0x10) != 0)
    {
      v27 = v10;
      while (1)
      {
        v17 = v34;
        v33 = 0;
        if (!v10(&v34, &v33))
          break;
        v18 = v35;
        v30 = 0;
        v28 = 0u;
        v29 = v32;
        v31 = 6uLL;
        if (!CBB_add_utf8((uint64_t)&v28, v33))
        {
          ERR_put_error(12, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_strex.c", 177);
          return 1;
        }
        if (BYTE8(v28))
        {
          v19 = *((_QWORD *)v29 + 1) - (v30 + v31);
          if (v19)
            goto LABEL_19;
        }
        else
        {
          v19 = v30;
          if (v30)
          {
LABEL_19:
            v20 = 0;
            do
            {
              v21 = v17 == a1 && v20 == 0;
              v22 = v21;
              v23 = !v18 && v19 - 1 == v20;
              v24 = v23;
              v25 = do_esc_char(v32[v20], a4, a5, a6, v22, v24);
              if (v25 < 0)
                return 0xFFFFFFFFLL;
              v7 = (v25 + v7);
            }
            while (v19 != ++v20);
          }
        }
        v10 = v27;
        if (!v35)
          return v7;
      }
    }
    else
    {
      while (1)
      {
        v15 = v34;
        v33 = 0;
        if (!v10(&v34, &v33))
          break;
        v16 = do_esc_char(v33, a4, a5, a6, v15 == a1, v35 == 0);
        if (v16 < 0)
          return 0xFFFFFFFFLL;
        v7 = (v16 + v7);
        if (!v35)
          return v7;
      }
    }
    ERR_put_error(12, 0, reason, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_strex.c", 168);
  }
  return 0xFFFFFFFFLL;
}

int ASN1_STRING_to_UTF8(unsigned __int8 **out, ASN1_STRING *in)
{
  int v2;
  int result;
  int v5;
  ASN1_STRING *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;

  if (!in)
    return -1;
  v2 = in->type - 12;
  if (v2 < 0x13 && ((0x55DC1u >> v2) & 1) != 0)
  {
    v5 = dword_208F1E0B8[v2];
    v7 = 0;
    v8 = 0;
    v6 = (ASN1_STRING *)&v7;
    v9 = 0;
    result = ASN1_mbstring_ncopy(&v6, in->data, in->length, v5, 0x2000uLL, 0, 0);
    if ((result & 0x80000000) == 0)
    {
      *out = v8;
      return v7;
    }
  }
  else
  {
    ERR_put_error(12, 0, 185, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_strex.c", 369);
    return -1;
  }
  return result;
}

int ASN1_STRING_print(BIO *bp, ASN1_STRING *v)
{
  uint64_t length;
  unsigned __int8 *data;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint8x16_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  int8x16_t *v18;
  unint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  char v24;
  char v25;
  int (__cdecl *v26)(BIO *, const char *, int);
  int v27;
  int result;
  int (__cdecl *bwrite)(BIO *, const char *, int);
  int v30;
  unint64_t v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int8x16_t *v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint8x16_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  int8x16_t v44;
  char v45;
  char v46;
  int v47;
  int v48;
  _BYTE v49[80];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (!v)
    return 0;
  length = v->length;
  if ((int)length < 1)
    return 1;
  data = v->data;
  if (!bp)
  {
    v31 = 79;
    if ((unint64_t)(length - 1) < 0x4F)
      v31 = length - 1;
    if (v31 >= 0x10 && (unint64_t)(v49 - data) >= 0x10)
    {
      v34 = v31 + 1;
      v35 = v34 & 0xF;
      if ((v34 & 0xF) == 0)
        v35 = 16;
      v33 = v34 - v35;
      v36 = (int8x16_t *)v49;
      v37.i64[0] = 0xA0A0A0A0A0A0A0ALL;
      v37.i64[1] = 0xA0A0A0A0A0A0A0ALL;
      v38.i64[0] = 0x2E2E2E2E2E2E2E2ELL;
      v38.i64[1] = 0x2E2E2E2E2E2E2E2ELL;
      v39.i64[0] = 0xD0D0D0D0D0D0D0DLL;
      v39.i64[1] = 0xD0D0D0D0D0D0D0DLL;
      v40.i64[0] = 0xE0E0E0E0E0E0E0E0;
      v40.i64[1] = 0xE0E0E0E0E0E0E0E0;
      v41.i64[0] = 0x5F5F5F5F5F5F5F5FLL;
      v41.i64[1] = 0x5F5F5F5F5F5F5F5FLL;
      v42 = v33;
      v43 = v->data;
      do
      {
        v44 = *(int8x16_t *)v43;
        v43 += 16;
        *v36++ = vbslq_s8((int8x16_t)vcgtq_u8(v41, (uint8x16_t)vaddq_s8(v44, v40)), v44, vbslq_s8(vceqq_s8(v44, v39), v39, vbslq_s8(vceqq_s8(v44, v37), v37, v38)));
        v42 -= 16;
      }
      while (v42);
    }
    else
    {
      v33 = 0;
    }
    do
    {
      v46 = data[v33];
      if (v46 == 127)
      {
        v49[v33] = 46;
        if (v33 == 79)
          goto LABEL_67;
      }
      else
      {
        if (v46 == 10)
          v45 = 10;
        else
          v45 = 46;
        if (v46 == 13)
          v45 = 13;
        if (v46 <= 31)
          v46 = v45;
        v49[v33] = v46;
        if (v33 == 79)
          goto LABEL_67;
      }
      ++v33;
    }
    while (length != v33);
LABEL_37:
    if (!bp || !bp->method || (bwrite = bp->method->bwrite) == 0)
    {
LABEL_67:
      v47 = 115;
      v48 = 167;
LABEL_68:
      ERR_put_error(17, 0, v47, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", v48);
      return 0;
    }
    if (!LODWORD(bp->cb_arg))
    {
LABEL_70:
      v47 = 114;
      v48 = 171;
      goto LABEL_68;
    }
    v30 = ((uint64_t (*)(BIO *, _BYTE *, uint64_t))bwrite)(bp, v49, length);
    if (v30 < 1)
      return 0;
    bp->prev_bio = (bio_st *)((char *)bp->prev_bio + v30);
    return 1;
  }
  v6 = 0;
  v7.i64[0] = 0xA0A0A0A0A0A0A0ALL;
  v7.i64[1] = 0xA0A0A0A0A0A0A0ALL;
  v8.i64[0] = 0x2E2E2E2E2E2E2E2ELL;
  v8.i64[1] = 0x2E2E2E2E2E2E2E2ELL;
  v9.i64[0] = 0xD0D0D0D0D0D0D0DLL;
  v9.i64[1] = 0xD0D0D0D0D0D0D0DLL;
  v10.i64[0] = 0xE0E0E0E0E0E0E0E0;
  v10.i64[1] = 0xE0E0E0E0E0E0E0E0;
  v11.i64[0] = 0x5F5F5F5F5F5F5F5FLL;
  v11.i64[1] = 0x5F5F5F5F5F5F5F5FLL;
  while (2)
  {
    if (v6 + 1 > (int)length)
      v12 = v6 + 1;
    else
      v12 = (int)length;
    v13 = v12 + ~v6;
    if (v13 >= 0x4F)
      v13 = 79;
    if (v13 >= 0x10 && (unint64_t)(v49 - &data[v6]) >= 0x10)
    {
      v15 = v13 + 1;
      v16 = v15 & 0xF;
      if ((v15 & 0xF) == 0)
        v16 = 16;
      v14 = v15 - v16;
      v17 = (int8x16_t *)&data[v6];
      v18 = (int8x16_t *)v49;
      v19 = v14;
      do
      {
        v20 = *v17++;
        *v18++ = vbslq_s8((int8x16_t)vcgtq_u8(v11, (uint8x16_t)vaddq_s8(v20, v10)), v20, vbslq_s8(vceqq_s8(v20, v9), v9, vbslq_s8(vceqq_s8(v20, v7), v7, v8)));
        v19 -= 16;
      }
      while (v19);
      v6 += v14;
    }
    else
    {
      v14 = 0;
    }
    v21 = 0;
    v22 = 79 - v14;
    v23 = &v49[v14];
    while (1)
    {
      v25 = data[v6 + v21];
      if (v25 != 127)
        break;
      v23[v21] = 46;
      if (v22 == v21)
        goto LABEL_30;
LABEL_27:
      ++v21;
      if (v6 + v21 >= (int)length)
      {
        length = (v14 + v21);
        goto LABEL_37;
      }
    }
    if (v25 == 10)
      v24 = 10;
    else
      v24 = 46;
    if (v25 == 13)
      v24 = 13;
    if (v25 <= 31)
      v25 = v24;
    v23[v21] = v25;
    if (v22 != v21)
      goto LABEL_27;
LABEL_30:
    if (!bp->method)
      goto LABEL_67;
    v26 = bp->method->bwrite;
    if (!v26)
      goto LABEL_67;
    if (!LODWORD(bp->cb_arg))
      goto LABEL_70;
    v27 = ((uint64_t (*)(BIO *, _BYTE *, unint64_t))v26)(bp, v49, v14 + v21 + 1);
    if (v27 <= 0)
      return 0;
    bp->prev_bio = (bio_st *)((char *)bp->prev_bio + v27);
    v6 += v21 + 1;
    result = 1;
    length = v->length;
    v7.i64[0] = 0xA0A0A0A0A0A0A0ALL;
    v7.i64[1] = 0xA0A0A0A0A0A0A0ALL;
    v8.i64[0] = 0x2E2E2E2E2E2E2E2ELL;
    v8.i64[1] = 0x2E2E2E2E2E2E2E2ELL;
    v9.i64[0] = 0xD0D0D0D0D0D0D0DLL;
    v9.i64[1] = 0xD0D0D0D0D0D0D0DLL;
    v10.i64[0] = 0xE0E0E0E0E0E0E0E0;
    v10.i64[1] = 0xE0E0E0E0E0E0E0E0;
    v11.i64[0] = 0x5F5F5F5F5F5F5F5FLL;
    v11.i64[1] = 0x5F5F5F5F5F5F5F5FLL;
    if (v6 < length)
      continue;
    return result;
  }
}

size_t do_esc_char(unsigned int a1, char a2, _BYTE *a3, BIO *b, int a5, int a6)
{
  char v7;
  size_t v8;
  size_t v9;
  int (__cdecl *bwrite)(BIO *, const char *, int);
  int v11;
  int v12;
  int v13;
  char data;
  char __str[16];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  data = a1;
  if (a1 >= 0x10000)
  {
    snprintf(__str, 0x10uLL, "\\W%08X");
    goto LABEL_27;
  }
  if (a1 >= 0x100)
  {
    snprintf(__str, 0x10uLL, "\\U%04X");
    goto LABEL_27;
  }
  if (a1 >= 0x80 && (a2 & 4) != 0 || (a2 & 2) != 0 && (a1 < 0x20u || a1 == 127))
  {
    snprintf(__str, 0x10uLL, "\\%02X");
    goto LABEL_27;
  }
  if ((a2 & 1) != 0)
  {
    v7 = a1 - 34;
    if (a1 - 34 <= 0x3A)
    {
      if (((1 << v7) & 0x16000600) != 0)
      {
LABEL_17:
        if ((a2 & 8) != 0)
        {
          if (a3)
            *a3 = 1;
          goto LABEL_20;
        }
LABEL_26:
        snprintf(__str, 0x10uLL, "\\%c");
LABEL_27:
        v9 = strlen(__str);
        v8 = v9;
        if (!b)
          return v8;
        if (b->method && (bwrite = b->method->bwrite) != 0)
        {
          if (LODWORD(b->cb_arg))
          {
            if ((int)v9 < 1)
            {
              v11 = 0;
            }
            else
            {
              v11 = ((uint64_t (*)(BIO *, char *, size_t))bwrite)(b, __str, v9);
              if (v11 >= 1)
                b->prev_bio = (bio_st *)((char *)b->prev_bio + v11);
            }
            goto LABEL_36;
          }
          v12 = 114;
          v13 = 171;
        }
        else
        {
          v12 = 115;
          v13 = 167;
        }
        ERR_put_error(17, 0, v12, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", v13);
        v11 = -2;
LABEL_36:
        if (v11 == (_DWORD)v8)
          return v8;
        else
          return 0xFFFFFFFFLL;
      }
      if (((1 << v7) & 0x400000000000001) != 0)
        goto LABEL_26;
    }
    if ((!a5 || a1 != 32 && a1 != 35) && (a1 != 32 || !a6))
      goto LABEL_20;
    goto LABEL_17;
  }
  if (a1 == 92 && (a2 & 0xF) != 0)
    goto LABEL_26;
LABEL_20:
  if (!b)
    return 1;
  if (BIO_write(b, &data, 1) == 1)
    return 1;
  return 0xFFFFFFFFLL;
}

ASN1_STRING *__cdecl ASN1_STRING_set_by_NID(ASN1_STRING **out, const unsigned __int8 *in, int inlen, int inform, int nid)
{
  ASN1_STRING **v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  _OWORD __key[2];
  uint64_t v14;

  v12 = 0;
  if (out)
    v8 = out;
  else
    v8 = (ASN1_STRING **)&v12;
  v14 = 0;
  memset(__key, 0, sizeof(__key));
  LODWORD(__key[0]) = nid;
  v9 = (uint64_t *)bsearch(__key, &tbl_standard, 0x13uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))table_cmp_void);
  if (v9)
  {
    if ((v9[4] & 2) != 0)
      v10 = v9[3];
    else
      v10 = v9[3] & 0x2000;
    if (ASN1_mbstring_ncopy(v8, in, inlen, inform, v10, v9[1], v9[2]) >= 1)
      return *v8;
  }
  else
  {
    if (pthread_rwlock_rdlock(&string_tables_lock) || pthread_rwlock_unlock(&string_tables_lock))
      abort();
    if (ASN1_mbstring_ncopy(v8, in, inlen, inform, 0x2000uLL, 0, 0) >= 1)
      return *v8;
  }
  return 0;
}

uint64_t table_cmp_void(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > *a2;
}

uint64_t ASN1_TIME_diff(_DWORD *a1, _DWORD *a2, int *a3, int *a4)
{
  int v7;
  uint64_t v8;
  uint64_t result;
  time_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  time_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;
  _OWORD v19[3];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  if (a3)
  {
    v7 = a3[1];
    if (v7 == 24)
    {
      v11 = *a3;
      *(_QWORD *)&v21 = *((_QWORD *)a3 + 1);
      *((_QWORD *)&v21 + 1) = v11;
      result = CBS_parse_rfc5280_time_internal(&v21, 1, 0, (int *)v19);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      if (v7 != 23)
        return 0;
      v8 = *a3;
      *(_QWORD *)&v21 = *((_QWORD *)a3 + 1);
      *((_QWORD *)&v21 + 1) = v8;
      result = CBS_parse_rfc5280_time_internal(&v21, 0, 1, (int *)v19);
      if (!(_DWORD)result)
        return result;
    }
  }
  else
  {
    v10 = time(0);
    result = OPENSSL_posix_to_tm(v10, (uint64_t)v19) != 0;
    if (!(_DWORD)result)
      return result;
  }
  if (!a4)
  {
    v14 = time(0);
    result = OPENSSL_posix_to_tm(v14, (uint64_t)v17) != 0;
    if (!(_DWORD)result)
      return result;
    goto LABEL_18;
  }
  v12 = a4[1];
  if (v12 != 24)
  {
    if (v12 == 23)
    {
      v13 = *a4;
      *(_QWORD *)&v21 = *((_QWORD *)a4 + 1);
      *((_QWORD *)&v21 + 1) = v13;
      result = CBS_parse_rfc5280_time_internal(&v21, 0, 1, (int *)v17);
      if (!(_DWORD)result)
        return result;
      goto LABEL_18;
    }
    return 0;
  }
  v15 = *a4;
  *(_QWORD *)&v21 = *((_QWORD *)a4 + 1);
  *((_QWORD *)&v21 + 1) = v15;
  result = CBS_parse_rfc5280_time_internal(&v21, 1, 0, (int *)v17);
  if (!(_DWORD)result)
    return result;
LABEL_18:
  *(_QWORD *)&v21 = 0;
  result = OPENSSL_tm_to_posix((int *)v17, &v21);
  if ((_DWORD)result)
  {
    v22 = 0;
    result = OPENSSL_tm_to_posix((int *)v19, &v22);
    if ((_DWORD)result)
    {
      v16 = ((uint64_t)v21 - v22) / 86400;
      *a2 = ((uint64_t)v21 - v22) % 86400;
      *a1 = v16;
      return 1;
    }
  }
  return result;
}

uint64_t ASN1_TIME_to_posix(int *a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  time_t v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  __int128 v11;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  if (a1)
  {
    v3 = a1[1];
    if (v3 == 24)
    {
      v8 = *a1;
      *(_QWORD *)&v11 = *((_QWORD *)a1 + 1);
      *((_QWORD *)&v11 + 1) = v8;
      v5 = 1;
    }
    else
    {
      if (v3 != 23)
        return 0;
      v4 = *a1;
      *(_QWORD *)&v11 = *((_QWORD *)a1 + 1);
      *((_QWORD *)&v11 + 1) = v4;
      v5 = 0;
    }
    result = CBS_parse_rfc5280_time_internal(&v11, v5, 0, (int *)v9);
    if ((_DWORD)result)
      return OPENSSL_tm_to_posix((int *)v9, a2);
  }
  else
  {
    v6 = time(0);
    result = OPENSSL_posix_to_tm(v6, (uint64_t)v9) != 0;
    if ((_DWORD)result)
      return OPENSSL_tm_to_posix((int *)v9, a2);
  }
  return result;
}

void asn1_type_set0_string(int *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  size_t v16;

  v4 = *(_DWORD *)(a2 + 4);
  if (v4 == 266)
    v5 = 10;
  else
    v5 = *(_DWORD *)(a2 + 4);
  if (v4 == 258)
    v6 = 2;
  else
    v6 = v5;
  v7 = *a1;
  if (*a1 != 1)
  {
    if (v7 == 6)
    {
      v8 = a1 + 2;
      ASN1_OBJECT_free(*((ASN1_OBJECT **)a1 + 1));
    }
    else if (v7 == 5)
    {
      v8 = a1 + 2;
    }
    else
    {
      v8 = a1 + 2;
      v9 = *((_QWORD *)a1 + 1);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v12 = *(_QWORD *)(v10 - 8);
          v11 = (void *)(v10 - 8);
          v13 = v12 + 8;
          if (v12 != -8)
            bzero(v11, v13);
          free(v11);
        }
        v15 = *(_QWORD *)(v9 - 8);
        v14 = (void *)(v9 - 8);
        v16 = v15 + 8;
        if (v15 != -8)
          bzero(v14, v16);
        free(v14);
      }
    }
    *v8 = 0;
  }
  *a1 = v6;
  if (v6 == 1)
  {
    a1[2] = 255;
  }
  else if (v6 == 5)
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *((_QWORD *)a1 + 1) = a2;
  }
}

void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)
{
  int v6;
  asn1_type_st::$2DD2868AF9E8E8462C9810218891F7E4 *p_value;
  char *ptr;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  size_t v15;
  ASN1_BOOLEAN v16;

  v6 = a->type;
  if (a->type != 1)
  {
    if (v6 == 6)
    {
      p_value = &a->value;
      ASN1_OBJECT_free(a->value.object);
    }
    else if (v6 == 5)
    {
      p_value = &a->value;
    }
    else
    {
      p_value = &a->value;
      ptr = a->value.ptr;
      if (ptr)
      {
        v9 = *((_QWORD *)ptr + 1);
        if (v9)
        {
          v11 = *(_QWORD *)(v9 - 8);
          v10 = (void *)(v9 - 8);
          v12 = v11 + 8;
          if (v11 != -8)
            bzero(v10, v12);
          free(v10);
        }
        v14 = *((_QWORD *)ptr - 1);
        v13 = ptr - 8;
        v15 = v14 + 8;
        if (v14 != -8)
          bzero(v13, v15);
        free(v13);
      }
    }
    p_value->ptr = 0;
  }
  a->type = type;
  if (type == 1)
  {
    if (value)
      v16 = 255;
    else
      v16 = 0;
    a->value.BOOLean = v16;
  }
  else if (type == 5)
  {
    a->value.ptr = 0;
  }
  else
  {
    a->value.ptr = (char *)value;
  }
}

void asn1_type_cleanup(ASN1_OBJECT **a1)
{
  int v2;
  ASN1_OBJECT *v3;
  const char *ln;
  char *v5;
  uint64_t v6;
  size_t v7;
  int *p_flags;
  uint64_t v9;
  size_t v10;

  v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 1)
  {
    *((_DWORD *)a1 + 2) = -1;
    return;
  }
  if (v2 == 6)
  {
    ASN1_OBJECT_free(a1[1]);
LABEL_14:
    a1[1] = 0;
    return;
  }
  if (v2 == 5)
    goto LABEL_14;
  v3 = a1[1];
  if (!v3)
    goto LABEL_14;
  ln = v3->ln;
  if (ln)
  {
    v6 = *((_QWORD *)ln - 1);
    v5 = (char *)(ln - 8);
    v7 = v6 + 8;
    if (v6 != -8)
      bzero(v5, v7);
    free(v5);
  }
  v9 = *(_QWORD *)&v3[-1].flags;
  p_flags = &v3[-1].flags;
  v10 = v9 + 8;
  if (v9 != -8)
    bzero(p_flags, v10);
  free(p_flags);
  a1[1] = 0;
}

uint64_t ASN1_TYPE_cmp(int *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;

  result = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a2)
    {
      v4 = *a1;
      if (*a1 == *(_DWORD *)a2)
      {
        switch(v4)
        {
          case 1:
            return (a1[2] - *(_DWORD *)(a2 + 8));
          case 5:
            return 0;
          case 6:
            v5 = *((_QWORD *)a1 + 1);
            v6 = *(_QWORD *)(a2 + 8);
            v7 = *(int *)(v5 + 20);
            v8 = *(_DWORD *)(v6 + 20);
            if ((int)v7 >= v8)
            {
              if ((int)v7 > v8)
                return 1;
              if ((_DWORD)v7)
                return memcmp(*(const void **)(v5 + 24), *(const void **)(v6 + 24), v7);
              return 0;
            }
            break;
          default:
            return ASN1_STRING_cmp(*((ASN1_STRING **)a1 + 1), *(ASN1_STRING **)(a2 + 8));
        }
      }
    }
  }
  return result;
}

ASN1_STRING *ASN1_UTCTIME_adj(ASN1_STRING *a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7;
  ASN1_STRING *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  unsigned __int8 *data;
  unsigned __int8 *v14;
  uint64_t v15;
  size_t v16;
  uint64_t *p_flags;
  uint64_t flags;
  size_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char __str[16];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  if (!OPENSSL_posix_to_tm(a2, (uint64_t)&v21))
    return 0;
  if (a3 || a4)
  {
    *(_QWORD *)__str = 0;
    if (!OPENSSL_tm_to_posix((int *)&v21, __str))
      return 0;
    v11 = *(_QWORD *)__str + 86400 * a3;
    v12 = v11 >= 1 && (v11 ^ 0x7FFFFFFFFFFFFFFFLL) < a4;
    if (v12
      || v11 < 0 && (uint64_t)(0x8000000000000000 - v11) > a4
      || !OPENSSL_posix_to_tm(v11 + a4, (uint64_t)&v21))
    {
      return 0;
    }
  }
  if ((DWORD1(v22) - 150) < 0xFFFFFF9C)
    return 0;
  if (DWORD1(v22) >= 0x64)
    v7 = DWORD1(v22) - 100;
  else
    v7 = DWORD1(v22);
  if (snprintf(__str, 0xEuLL, "%02d%02d%02d%02d%02d%02dZ", v7, (_DWORD)v22 + 1, HIDWORD(v21), DWORD2(v21), DWORD1(v21), (_DWORD)v21) != 13)abort();
  v8 = a1;
  if (!a1)
  {
    v9 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
    if (v9)
    {
      *v9 = 24;
      v9[1] = 0x1700000000;
      v8 = (ASN1_STRING *)(v9 + 1);
      v9[2] = 0;
      v9[3] = 0;
      goto LABEL_12;
    }
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
LABEL_12:
  v10 = strlen(__str);
  if (!ASN1_STRING_set(v8, __str, v10))
  {
    if (!a1)
    {
      data = v8->data;
      if (data)
      {
        v15 = *((_QWORD *)data - 1);
        v14 = data - 8;
        v16 = v15 + 8;
        if (v15 != -8)
          bzero(v14, v16);
        free(v14);
      }
      flags = v8[-1].flags;
      p_flags = &v8[-1].flags;
      v19 = flags + 8;
      if (flags != -8)
        bzero(p_flags, v19);
      free(p_flags);
    }
    return 0;
  }
  v8->type = 23;
  return v8;
}

int ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *algor1, ASN1_BIT_STRING *signature, void *data, EVP_PKEY *pkey)
{
  uint64_t length;
  uint64_t flags;
  uint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v16;
  unsigned int (*v17)(void);
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  unsigned __int8 *out;
  EVP_MD_CTX in;

  if (!pkey)
  {
    v12 = 67;
    v13 = 75;
    goto LABEL_13;
  }
  length = signature->length;
  if (signature->type != 3)
    goto LABEL_15;
  flags = signature->flags;
  if ((flags & 8) != 0)
  {
    if (!(_DWORD)length || (flags & 7) == 0)
      goto LABEL_15;
LABEL_12:
    v12 = 109;
    v13 = 82;
LABEL_13:
    ERR_put_error(11, 0, v12, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/a_verify.c", v13);
    return 0;
  }
  v9 = length - 1;
  while (1)
  {
    v10 = __OFSUB__((_DWORD)length, 1);
    LODWORD(length) = length - 1;
    if ((int)length < 0 != v10)
      break;
    v11 = signature->data[v9--];
    if (v11)
    {
      if ((v11 & 1) == 0)
        goto LABEL_12;
      break;
    }
  }
LABEL_15:
  out = 0;
  memset(&in, 0, sizeof(in));
  if (!x509_digest_verify_init(&in, (uint64_t)algor1, (uint64_t)pkey))
    goto LABEL_27;
  v16 = ASN1_item_i2d((ASN1_VALUE *)data, &out, it);
  if (!out)
  {
    v14 = 0;
    goto LABEL_31;
  }
  if (*(_QWORD *)(*(_QWORD *)in.flags + 56))
  {
    ((void (*)(EVP_MD_CTX *, unsigned __int8 *, _QWORD))in.digest->init)(&in, out, v16);
    if (!EVP_DigestVerifyFinal(&in))
      goto LABEL_26;
LABEL_23:
    v14 = 1;
    v18 = out;
    if (!out)
      goto LABEL_31;
    goto LABEL_28;
  }
  v17 = *(unsigned int (**)(void))(*(_QWORD *)in.flags + 64);
  if (v17)
  {
    if (v17())
      goto LABEL_23;
  }
  else
  {
    ERR_put_error(6, 0, 125, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/digestsign/digestsign.c", 255);
  }
LABEL_26:
  ERR_put_error(11, 0, 6, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/a_verify.c", 106);
LABEL_27:
  v14 = 0;
  v18 = out;
  if (!out)
    goto LABEL_31;
LABEL_28:
  v20 = *((_QWORD *)v18 - 1);
  v19 = v18 - 8;
  v21 = v20 + 8;
  if (v20 != -8)
    bzero(v19, v21);
  free(v19);
LABEL_31:
  if (in.engine)
  {
    v23 = (char *)in.engine - 8;
    v22 = *((_QWORD *)in.engine - 1);
    if (v22 != -8)
      bzero((char *)in.engine - 8, v22 + 8);
    free(v23);
  }
  if (!in.md_data)
    return v14;
  (*(void (**)(unint64_t))in.md_data)(in.flags);
  return v14;
}

int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
{
  int neg;
  int v5;
  int v6;
  const BIGNUM *v7;
  const BIGNUM *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int result;
  unint64_t *d;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  const BIGNUM *v20;
  const BIGNUM *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t top;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  int v63;

  neg = a->neg;
  if (neg != b->neg)
  {
    if (neg)
      v20 = b;
    else
      v20 = a;
    if (neg)
      v21 = a;
    else
      v21 = b;
    if ((bn_cmp_words_consttime((uint64_t *)v20->d, v20->top, (uint64_t *)v21->d, v21->top) & 0x80000000) != 0)
    {
      result = bn_usub_consttime((uint64_t)r, (uint64_t)v21, (uint64_t)v20);
      if (!result)
        return result;
      top = r->top;
      v28 = top & ((int)top >> 31);
      v29 = 8 * top - 8;
      while (1)
      {
        v25 = __OFSUB__((_DWORD)top, 1);
        LODWORD(top) = top - 1;
        if ((int)top < 0 != v25)
          break;
        v30 = *(unint64_t *)((char *)r->d + v29);
        v29 -= 8;
        if (v30)
        {
          r->top = top + 1;
          goto LABEL_69;
        }
      }
      r->top = v28;
LABEL_69:
      neg = 1;
    }
    else
    {
      result = bn_usub_consttime((uint64_t)r, (uint64_t)v20, (uint64_t)v21);
      if (!result)
        return result;
      v22 = r->top;
      v23 = 8 * v22 - 8;
      v24 = r->top;
      while (1)
      {
        v25 = __OFSUB__(v24--, 1);
        if (v24 < 0 != v25)
          break;
        v26 = *(unint64_t *)((char *)r->d + v23);
        v23 -= 8;
        if (v26)
        {
          neg = 0;
          r->top = v24 + 1;
          goto LABEL_70;
        }
      }
      r->top = v22 & ((int)v22 >> 31);
      neg = 0;
      if ((v22 & 0x80000000) == 0)
        r->neg = 0;
    }
    goto LABEL_70;
  }
  v5 = a->top;
  v6 = b->top;
  if (v5 >= v6)
    v7 = a;
  else
    v7 = b;
  if (v5 >= v6)
    v8 = b;
  else
    v8 = a;
  v9 = v7->top;
  v10 = v8->top;
  v11 = v9 + 1;
  result = bn_wexpand((uint64_t)r, v9 + 1);
  if (!result)
    goto LABEL_71;
  d = r->d;
  v14 = v7->d;
  if (!(_DWORD)v10)
  {
    v16 = 0;
    goto LABEL_55;
  }
  v15 = v8->d;
  if (v10 < 4)
  {
    v16 = 0;
    v17 = v10;
    v18 = v7->d;
    v19 = r->d;
    do
    {
LABEL_48:
      v51 = *v18++;
      v50 = v51;
      v53 = *v15++;
      v52 = v53;
      v32 = __CFADD__(v50, v16);
      v54 = v50 + v16;
      v55 = v32;
      v32 = __CFADD__(v54, v52);
      v56 = v54 + v52;
      if (v32)
        v16 = v55 + 1;
      else
        v16 = v55;
      *v19++ = v56;
      --v17;
    }
    while (v17);
    goto LABEL_55;
  }
  v16 = 0;
  v17 = v10;
  v18 = v7->d;
  v19 = r->d;
  do
  {
    v31 = *v15;
    v32 = __CFADD__(*v18, v16);
    v33 = *v18 + v16;
    v34 = v32;
    v32 = __CFADD__(v33, v31);
    *v19 = v33 + v31;
    v35 = v18[1];
    v36 = v15[1];
    v38 = v32;
    v32 = __CFADD__(v32, v35);
    v37 = v38 + v35;
    v32 |= __CFADD__(v34, v37);
    v37 += v34;
    v39 = v32;
    v32 = __CFADD__(v37, v36);
    v19[1] = v37 + v36;
    v40 = v18[2];
    v41 = v15[2];
    v43 = v32;
    v32 = __CFADD__(v32, v40);
    v42 = v43 + v40;
    v32 |= __CFADD__(v39, v42);
    v42 += v39;
    v44 = v32;
    v19[2] = v42 + v41;
    v45 = v18[3];
    v46 = v15[3];
    v32 = __CFADD__(v46, v45);
    v47 = v46 + v45;
    v48 = v32;
    v32 = __CFADD__(__CFADD__(v42, v41), v47) | __CFADD__(v44, __CFADD__(v42, v41) + v47);
    v49 = v44 + __CFADD__(v42, v41) + v47;
    if (v32)
      v16 = v48 + 1;
    else
      v16 = v48;
    v19[3] = v49;
    v18 += 4;
    v15 += 4;
    v19 += 4;
    v17 -= 4;
  }
  while (v17 >= 4);
  if (v17)
    goto LABEL_48;
LABEL_55:
  if ((int)v10 < (int)v9)
  {
    v57 = v9 - v10;
    v58 = &d[v10];
    v59 = &v14[v10];
    do
    {
      v60 = *v59++;
      v61 = v60 + v16;
      v16 = __CFADD__(v60, v16);
      *v58++ = v61;
      --v57;
    }
    while (v57);
  }
  d[v9] = v16;
  v62 = &d[v11 - 1];
  v63 = v9 + 2;
  while (--v63 >= 1)
  {
    if (*v62--)
    {
      r->top = v63;
      goto LABEL_70;
    }
  }
  r->top = v11 & (v11 >> 31);
LABEL_70:
  result = 1;
LABEL_71:
  r->neg = neg;
  return result;
}

int BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
{
  int result;
  uint64_t top;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;

  result = bn_usub_consttime((uint64_t)r, (uint64_t)a, (uint64_t)b);
  if (result)
  {
    top = r->top;
    v6 = 8 * top - 8;
    v7 = r->top;
    while (1)
    {
      v8 = __OFSUB__(v7--, 1);
      if (v7 < 0 != v8)
        break;
      v9 = *(unint64_t *)((char *)r->d + v6);
      v6 -= 8;
      if (v9)
      {
        r->top = v7 + 1;
        return 1;
      }
    }
    r->top = top & ((int)top >> 31);
    if ((top & 0x80000000) == 0)
      r->neg = 0;
    return 1;
  }
  return result;
}

int BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
{
  int top;
  int v5;
  const BIGNUM *v6;
  const BIGNUM *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int result;
  unint64_t *d;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  int v51;

  top = a->top;
  v5 = b->top;
  if (top >= v5)
    v6 = a;
  else
    v6 = b;
  if (top >= v5)
    v7 = b;
  else
    v7 = a;
  v8 = v6->top;
  v9 = v7->top;
  v10 = v8 + 1;
  result = bn_wexpand((uint64_t)r, v8 + 1);
  if (!result)
    return result;
  d = r->d;
  v13 = v6->d;
  if (!(_DWORD)v9)
  {
    v15 = 0;
    goto LABEL_37;
  }
  v14 = v7->d;
  if (v9 < 4)
  {
    v15 = 0;
    v16 = v9;
    v17 = v6->d;
    v18 = r->d;
    do
    {
LABEL_30:
      v39 = *v17++;
      v38 = v39;
      v41 = *v14++;
      v40 = v41;
      v20 = __CFADD__(v38, v15);
      v42 = v38 + v15;
      v43 = v20;
      v20 = __CFADD__(v42, v40);
      v44 = v42 + v40;
      if (v20)
        v15 = v43 + 1;
      else
        v15 = v43;
      *v18++ = v44;
      --v16;
    }
    while (v16);
    goto LABEL_37;
  }
  v15 = 0;
  v16 = v9;
  v17 = v6->d;
  v18 = r->d;
  do
  {
    v19 = *v14;
    v20 = __CFADD__(*v17, v15);
    v21 = *v17 + v15;
    v22 = v20;
    v20 = __CFADD__(v21, v19);
    *v18 = v21 + v19;
    v23 = v17[1];
    v24 = v14[1];
    v26 = v20;
    v20 = __CFADD__(v20, v23);
    v25 = v26 + v23;
    v20 |= __CFADD__(v22, v25);
    v25 += v22;
    v27 = v20;
    v20 = __CFADD__(v25, v24);
    v18[1] = v25 + v24;
    v28 = v17[2];
    v29 = v14[2];
    v31 = v20;
    v20 = __CFADD__(v20, v28);
    v30 = v31 + v28;
    v20 |= __CFADD__(v27, v30);
    v30 += v27;
    v32 = v20;
    v18[2] = v30 + v29;
    v33 = v17[3];
    v34 = v14[3];
    v20 = __CFADD__(v34, v33);
    v35 = v34 + v33;
    v36 = v20;
    v20 = __CFADD__(__CFADD__(v30, v29), v35) | __CFADD__(v32, __CFADD__(v30, v29) + v35);
    v37 = v32 + __CFADD__(v30, v29) + v35;
    if (v20)
      v15 = v36 + 1;
    else
      v15 = v36;
    v18[3] = v37;
    v17 += 4;
    v14 += 4;
    v18 += 4;
    v16 -= 4;
  }
  while (v16 >= 4);
  if (v16)
    goto LABEL_30;
LABEL_37:
  if ((int)v9 < (int)v8)
  {
    v45 = v8 - v9;
    v46 = &d[v9];
    v47 = &v13[v9];
    do
    {
      v48 = *v47++;
      v49 = v48 + v15;
      v15 = __CFADD__(v48, v15);
      *v46++ = v49;
      --v45;
    }
    while (v45);
  }
  d[v8] = v15;
  v50 = &d[v10 - 1];
  v51 = v8 + 2;
  while (--v51 >= 1)
  {
    if (*v50--)
    {
      r->top = v51;
      return 1;
    }
  }
  r->top = v10 & (v10 >> 31);
  if ((int)v8 >= -1)
    r->neg = 0;
  return 1;
}

uint64_t bn_uadd_consttime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a3 + 8);
  if (v4 >= v5)
    v6 = a2;
  else
    v6 = a3;
  if (v4 >= v5)
    v7 = a3;
  else
    v7 = a2;
  v8 = *(int *)(v6 + 8);
  v9 = *(int *)(v7 + 8);
  result = bn_wexpand(a1, v8 + 1);
  if (!(_DWORD)result)
    return result;
  *(_DWORD *)(a1 + 8) = v8 + 1;
  v11 = *(_QWORD **)a1;
  v12 = *(uint64_t **)v6;
  if ((_DWORD)v9)
  {
    v13 = *(uint64_t **)v7;
    if (v9 >= 4)
    {
      v14 = 0;
      v15 = v9;
      v16 = *(uint64_t **)v6;
      v17 = *(_QWORD **)a1;
      do
      {
        v18 = *v13;
        v19 = __CFADD__(*v16, v14);
        v20 = *v16 + v14;
        v21 = v19;
        v19 = __CFADD__(v20, v18);
        *v17 = v20 + v18;
        v22 = v16[1];
        v23 = v13[1];
        v25 = v19;
        v19 = __CFADD__(v19, v22);
        v24 = v25 + v22;
        v19 |= __CFADD__(v21, v24);
        v24 += v21;
        v26 = v19;
        v19 = __CFADD__(v24, v23);
        v17[1] = v24 + v23;
        v27 = v16[2];
        v28 = v13[2];
        v30 = v19;
        v19 = __CFADD__(v19, v27);
        v29 = v30 + v27;
        v19 |= __CFADD__(v26, v29);
        v29 += v26;
        v31 = v19;
        v17[2] = v29 + v28;
        v32 = v16[3];
        v33 = v13[3];
        v19 = __CFADD__(v33, v32);
        v34 = v33 + v32;
        v35 = v19;
        v19 = __CFADD__(__CFADD__(v29, v28), v34) | __CFADD__(v31, __CFADD__(v29, v28) + v34);
        v36 = v31 + __CFADD__(v29, v28) + v34;
        if (v19)
          v14 = v35 + 1;
        else
          v14 = v35;
        v17[3] = v36;
        v16 += 4;
        v13 += 4;
        v17 += 4;
        v15 -= 4;
      }
      while (v15 >= 4);
      if (!v15)
        goto LABEL_37;
    }
    else
    {
      v14 = 0;
      v15 = v9;
      v16 = *(uint64_t **)v6;
      v17 = *(_QWORD **)a1;
    }
    do
    {
      v38 = *v16++;
      v37 = v38;
      v40 = *v13++;
      v39 = v40;
      v19 = __CFADD__(v37, v14);
      v41 = v37 + v14;
      v42 = v19;
      v19 = __CFADD__(v41, v39);
      v43 = v41 + v39;
      if (v19)
        v14 = v42 + 1;
      else
        v14 = v42;
      *v17++ = v43;
      --v15;
    }
    while (v15);
  }
  else
  {
    v14 = 0;
  }
LABEL_37:
  if ((int)v9 < (int)v8)
  {
    v44 = v8 - v9;
    v45 = &v11[v9];
    v46 = &v12[v9];
    do
    {
      v47 = *v46++;
      v48 = v47 + v14;
      v14 = __CFADD__(v47, v14);
      *v45++ = v48;
      --v44;
    }
    while (v44);
  }
  v11[v8] = v14;
  return 1;
}

int BN_add_word(BIGNUM *a, unint64_t w)
{
  unint64_t v2;
  uint64_t top;
  unint64_t *d;
  unint64_t v6;
  int8x8_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  int result;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int8x8_t v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t *v25;
  int8x16_t v26;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;

  if (!w)
    return 1;
  v2 = w;
  top = a->top;
  if (!(_DWORD)top)
    return BN_set_word(a, w);
  d = a->d;
  if (top < 4)
  {
    v6 = 0;
    v7 = 0;
LABEL_8:
    v13 = top - v6;
    v14 = &d[v6];
    do
    {
      v15 = *v14++;
      *(_QWORD *)&v7 |= v15;
      --v13;
    }
    while (v13);
    goto LABEL_10;
  }
  v6 = top & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (int8x16_t *)(d + 2);
  v9 = 0uLL;
  v10 = top & 0xFFFFFFFFFFFFFFFCLL;
  v11 = 0uLL;
  do
  {
    v9 = vorrq_s8(v8[-1], v9);
    v11 = vorrq_s8(*v8, v11);
    v8 += 2;
    v10 -= 4;
  }
  while (v10);
  v12 = vorrq_s8(v11, v9);
  v7 = vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  if (v6 != top)
    goto LABEL_8;
LABEL_10:
  if (!*(_QWORD *)&v7)
    return BN_set_word(a, w);
  if (!a->neg)
  {
    if ((int)top >= 1)
    {
      v21 = __CFADD__(*d, w);
      *d += w;
      if (!v21)
        return 1;
      v22 = d + 1;
      v23 = (top & ~((int)top >> 31)) - 1;
      v2 = 1;
      result = 1;
      while (v23)
      {
        --v23;
        v21 = __CFADD__((*v22++)++, 1);
        if (!v21)
          return result;
      }
    }
    v24 = top;
    if ((top & 0x80000000) == 0)
    {
      result = bn_wexpand((uint64_t)a, top + 1);
      if (!result)
        return result;
      ++a->top;
      a->d[v24] = v2;
    }
    return 1;
  }
  a->neg = 0;
  result = BN_sub_word(a, w);
  v17 = a->top;
  if (!(_DWORD)v17)
    return result;
  v18 = a->d;
  if (v17 >= 4)
  {
    v19 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    v25 = (int8x16_t *)(v18 + 2);
    v26 = 0uLL;
    v27 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    v28 = 0uLL;
    do
    {
      v26 = vorrq_s8(v25[-1], v26);
      v28 = vorrq_s8(*v25, v28);
      v25 += 2;
      v27 -= 4;
    }
    while (v27);
    v29 = vorrq_s8(v28, v26);
    v20 = vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
    if (v19 == v17)
      goto LABEL_33;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  v30 = v17 - v19;
  v31 = &v18[v19];
  do
  {
    v32 = *v31++;
    *(_QWORD *)&v20 |= v32;
    --v30;
  }
  while (v30);
LABEL_33:
  if (v20)
    a->neg = a->neg == 0;
  return result;
}

int BN_sub_word(BIGNUM *a, unint64_t w)
{
  uint64_t top;
  unint64_t *d;
  unint64_t v5;
  int8x8_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  int result;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int8x8_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  unint64_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  BOOL v37;

  if (!w)
    return 1;
  top = a->top;
  if ((_DWORD)top)
  {
    d = a->d;
    if (top >= 4)
    {
      v5 = (int)top & 0xFFFFFFFFFFFFFFFCLL;
      v7 = (int8x16_t *)(d + 2);
      v8 = 0uLL;
      v9 = v5;
      v10 = 0uLL;
      do
      {
        v8 = vorrq_s8(v7[-1], v8);
        v10 = vorrq_s8(*v7, v10);
        v7 += 2;
        v9 -= 4;
      }
      while (v9);
      v11 = vorrq_s8(v10, v8);
      v6 = vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
      if (v5 == (int)top)
      {
LABEL_10:
        if (v6)
        {
          if (a->neg)
          {
            a->neg = 0;
            result = BN_add_word(a, w);
            a->neg = 1;
            return result;
          }
          v20 = 8 * top - 8;
          v21 = a->top;
          while (v21 > 0)
          {
            v22 = *(unint64_t *)((char *)d + v20);
            v20 -= 8;
            --v21;
            if (v22)
            {
              v23 = *d;
              if (!v21 && w > v23)
              {
                *d = w - v23;
                result = 1;
                a->neg = 1;
                return result;
              }
              if (w <= v23)
                goto LABEL_36;
              goto LABEL_33;
            }
          }
          v23 = *d;
          if (*d >= w)
          {
LABEL_36:
            v33 = 0;
            goto LABEL_39;
          }
LABEL_33:
          *d = v23 - w;
          v32 = d[1];
          ++d;
          v23 = v32;
          if (v32)
          {
            w = 1;
            v33 = 1;
          }
          else
          {
            w = 1;
            v33 = 1;
            do
            {
              *d = -1;
              v34 = d[1];
              ++d;
              v23 = v34;
              ++v33;
            }
            while (!v34);
          }
LABEL_39:
          v35 = top - 1;
          v36 = v23 - w;
          *d = v36;
          if (v36)
            v37 = 0;
          else
            v37 = v33 == v35;
          if (v37)
            a->top = v33;
          return 1;
        }
        goto LABEL_13;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v12 = (int)top - v5;
    v13 = &d[v5];
    do
    {
      v14 = *v13++;
      *(_QWORD *)&v6 |= v14;
      --v12;
    }
    while (v12);
    goto LABEL_10;
  }
LABEL_13:
  result = BN_set_word(a, w);
  if (result)
  {
    v16 = a->top;
    if (!(_DWORD)v16)
    {
LABEL_31:
      a->neg = 0;
      return result;
    }
    v17 = a->d;
    if (v16 >= 4)
    {
      v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v24 = (int8x16_t *)(v17 + 2);
      v25 = 0uLL;
      v26 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v27 = 0uLL;
      do
      {
        v25 = vorrq_s8(v24[-1], v25);
        v27 = vorrq_s8(*v24, v27);
        v24 += 2;
        v26 -= 4;
      }
      while (v26);
      v28 = vorrq_s8(v27, v25);
      v19 = vorr_s8(*(int8x8_t *)v28.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
      if (v18 == v16)
      {
LABEL_29:
        if (v19)
        {
          a->neg = 1;
          return result;
        }
        goto LABEL_31;
      }
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    v29 = v16 - v18;
    v30 = &v17[v18];
    do
    {
      v31 = *v30++;
      *(_QWORD *)&v19 |= v31;
      --v29;
    }
    while (v29);
    goto LABEL_29;
  }
  return result;
}

int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
{
  const BIGNUM *v3;
  int neg;
  const BIGNUM *v6;
  int result;
  uint64_t top;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  const BIGNUM *v16;
  const BIGNUM *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t *d;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  int v64;

  v3 = b;
  neg = b->neg;
  if (a->neg)
  {
    if (neg)
    {
      v6 = a;
      if ((bn_cmp_words_consttime((uint64_t *)b->d, b->top, (uint64_t *)v6->d, v6->top) & 0x80000000) == 0)
      {
LABEL_4:
        result = bn_usub_consttime((uint64_t)r, (uint64_t)v3, (uint64_t)v6);
        if (!result)
          return result;
        top = r->top;
        v9 = top & ((int)top >> 31);
        v10 = 8 * top - 8;
        while (1)
        {
          v11 = __OFSUB__((_DWORD)top, 1);
          LODWORD(top) = top - 1;
          if ((int)top < 0 != v11)
            break;
          v12 = *(unint64_t *)((char *)r->d + v10);
          v10 -= 8;
          if (v12)
          {
            v13 = 0;
            r->top = top + 1;
            goto LABEL_68;
          }
        }
        v13 = 0;
        goto LABEL_30;
      }
LABEL_23:
      result = bn_usub_consttime((uint64_t)r, (uint64_t)v6, (uint64_t)v3);
      if (!result)
        return result;
      v28 = r->top;
      v29 = v28 & ((int)v28 >> 31);
      v30 = 8 * v28 - 8;
      while (1)
      {
        v11 = __OFSUB__((_DWORD)v28, 1);
        LODWORD(v28) = v28 - 1;
        if ((int)v28 < 0 != v11)
          break;
        v31 = *(unint64_t *)((char *)r->d + v30);
        v30 -= 8;
        if (v31)
        {
          r->top = v28 + 1;
          goto LABEL_67;
        }
      }
      r->top = v29;
LABEL_67:
      v13 = 1;
      goto LABEL_68;
    }
    v13 = 1;
  }
  else
  {
    if (!neg)
    {
      v6 = b;
      v3 = a;
      if ((bn_cmp_words_consttime((uint64_t *)a->d, a->top, (uint64_t *)b->d, b->top) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
    v13 = 0;
  }
  v14 = a->top;
  v15 = b->top;
  if (v14 >= v15)
    v16 = a;
  else
    v16 = b;
  if (v14 >= v15)
    v17 = b;
  else
    v17 = a;
  v18 = v16->top;
  v19 = v17->top;
  v20 = v18 + 1;
  result = bn_wexpand((uint64_t)r, v18 + 1);
  if (result)
  {
    d = r->d;
    v22 = v16->d;
    if (!(_DWORD)v19)
    {
      v24 = 0;
      goto LABEL_56;
    }
    v23 = v17->d;
    if (v19 >= 4)
    {
      v24 = 0;
      v25 = v19;
      v26 = v16->d;
      v27 = r->d;
      do
      {
        v32 = *v23;
        v33 = __CFADD__(*v26, v24);
        v34 = *v26 + v24;
        v35 = v33;
        v33 = __CFADD__(v34, v32);
        *v27 = v34 + v32;
        v36 = v26[1];
        v37 = v23[1];
        v39 = v33;
        v33 = __CFADD__(v33, v36);
        v38 = v39 + v36;
        v33 |= __CFADD__(v35, v38);
        v38 += v35;
        v40 = v33;
        v33 = __CFADD__(v38, v37);
        v27[1] = v38 + v37;
        v41 = v26[2];
        v42 = v23[2];
        v44 = v33;
        v33 = __CFADD__(v33, v41);
        v43 = v44 + v41;
        v33 |= __CFADD__(v40, v43);
        v43 += v40;
        v45 = v33;
        v27[2] = v43 + v42;
        v46 = v26[3];
        v47 = v23[3];
        v33 = __CFADD__(v47, v46);
        v48 = v47 + v46;
        v49 = v33;
        v33 = __CFADD__(__CFADD__(v43, v42), v48) | __CFADD__(v45, __CFADD__(v43, v42) + v48);
        v50 = v45 + __CFADD__(v43, v42) + v48;
        if (v33)
          v24 = v49 + 1;
        else
          v24 = v49;
        v27[3] = v50;
        v26 += 4;
        v23 += 4;
        v27 += 4;
        v25 -= 4;
      }
      while (v25 >= 4);
      if (!v25)
      {
LABEL_56:
        if ((int)v19 < (int)v18)
        {
          v58 = v18 - v19;
          v59 = &d[v19];
          v60 = &v22[v19];
          do
          {
            v61 = *v60++;
            v62 = v61 + v24;
            v24 = __CFADD__(v61, v24);
            *v59++ = v62;
            --v58;
          }
          while (v58);
        }
        d[v18] = v24;
        v9 = v20 & (v20 >> 31);
        v63 = &d[v20 - 1];
        v64 = v18 + 2;
        while (--v64 >= 1)
        {
          if (*v63--)
          {
            r->top = v64;
            goto LABEL_68;
          }
        }
LABEL_30:
        r->top = v9;
LABEL_68:
        r->neg = v13;
        return 1;
      }
    }
    else
    {
      v24 = 0;
      v25 = v19;
      v26 = v16->d;
      v27 = r->d;
    }
    do
    {
      v52 = *v26++;
      v51 = v52;
      v54 = *v23++;
      v53 = v54;
      v33 = __CFADD__(v51, v24);
      v55 = v51 + v24;
      v56 = v33;
      v33 = __CFADD__(v55, v53);
      v57 = v55 + v53;
      if (v33)
        v24 = v56 + 1;
      else
        v24 = v56;
      *v27++ = v57;
      --v25;
    }
    while (v25);
    goto LABEL_56;
  }
  return result;
}

uint64_t bn_usub_consttime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  signed int v6;
  signed int v7;
  unint64_t v8;
  signed int v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  int8x8_t v13;
  unint64_t v14;
  int8x16_t *v15;
  int8x16_t v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  signed int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;

  v6 = *(_DWORD *)(a3 + 8);
  v7 = *(_DWORD *)(a2 + 8);
  v8 = v7;
  v9 = v6;
  if (v6 <= v7 || (v9 = v7, v6 <= v7))
  {
LABEL_12:
    result = bn_wexpand(a1, v8);
    if (!(_DWORD)result)
      return result;
    v25 = *(uint64_t **)a1;
    v26 = *(unint64_t **)a2;
    if (v9)
    {
      v27 = *(unint64_t **)a3;
      if (v9 >= 4)
      {
        v28 = 0;
        v29 = v9;
        v30 = *(unint64_t **)a2;
        v31 = *(uint64_t **)a1;
        do
        {
          v32 = *v30 - (v28 + *v27);
          v28 = v28 & (*v30 == *v27);
          if (*v30 < *v27)
            v28 = 1;
          *v31 = v32;
          v33 = v30[1];
          v34 = v27[1];
          v35 = v33 - (v34 + v28);
          if (v33 != v34)
            v28 = 0;
          if (v33 < v34)
            v28 = 1;
          v31[1] = v35;
          v36 = v30[2];
          v37 = v27[2];
          v38 = v36 - (v37 + v28);
          if (v36 != v37)
            v28 = 0;
          if (v36 < v37)
            v28 = 1;
          v31[2] = v38;
          v39 = v30[3];
          v40 = v27[3];
          v41 = v39 - (v40 + v28);
          if (v39 != v40)
            v28 = 0;
          if (v39 < v40)
            v28 = 1;
          v31[3] = v41;
          v30 += 4;
          v27 += 4;
          v31 += 4;
          v29 -= 4;
        }
        while (v29 >= 4);
        if (!v29)
          goto LABEL_37;
      }
      else
      {
        v28 = 0;
        v29 = v9;
        v30 = *(unint64_t **)a2;
        v31 = *(uint64_t **)a1;
      }
      do
      {
        v43 = *v30++;
        v42 = v43;
        v44 = *v27++;
        v45 = v42 - (v28 + v44);
        v28 = v28 & (v42 == v44);
        if (v42 < v44)
          v28 = 1;
        *v31++ = v45;
        --v29;
      }
      while (v29);
    }
    else
    {
      v28 = 0;
    }
LABEL_37:
    v46 = *(_DWORD *)(a2 + 8);
    if (v9 < v46)
    {
      v47 = v46 - (uint64_t)v9;
      v48 = v9;
      v49 = &v25[v48];
      v50 = (uint64_t *)&v26[v48];
      do
      {
        v51 = *v50++;
        v52 = v51 - v28;
        v28 = v28 & (v51 == 0);
        *v49++ = v52;
        --v47;
      }
      while (v47);
    }
    if (!v28)
    {
      *(_DWORD *)(a1 + 8) = v46;
      *(_DWORD *)(a1 + 16) = 0;
      return 1;
    }
    v23 = 245;
    goto LABEL_42;
  }
  v10 = v6;
  v11 = *(unint64_t **)a3;
  v12 = v10 - v8;
  if (v10 - v8 < 4)
  {
    v13 = 0;
    v14 = v8;
LABEL_8:
    v20 = v10 - v14;
    v21 = (uint64_t *)&v11[v14];
    do
    {
      v22 = *v21++;
      *(_QWORD *)&v13 |= v22;
      --v20;
    }
    while (v20);
    goto LABEL_10;
  }
  v14 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + v8;
  v15 = (int8x16_t *)&v11[v8 + 2];
  v16 = 0uLL;
  v17 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  v18 = 0uLL;
  do
  {
    v16 = vorrq_s8(v15[-1], v16);
    v18 = vorrq_s8(*v15, v18);
    v15 += 2;
    v17 -= 4;
  }
  while (v17);
  v19 = vorrq_s8(v18, v16);
  v13 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
  if (v12 != (v12 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_8;
LABEL_10:
  if (!*(_QWORD *)&v13)
    goto LABEL_12;
  v23 = 229;
LABEL_42:
  ERR_put_error(3, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/add.c", v23);
  return 0;
}

uint64_t EVP_AEAD_CTX_init(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v6 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))*((_QWORD *)a2 + 1);
  if (!v6)
  {
    ERR_put_error(30, 0, 124, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/aead.c", 65);
    goto LABEL_6;
  }
  if (*a2 != a4)
  {
    ERR_put_error(30, 0, 120, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/aead.c", 78);
    result = 0;
    *a1 = 0;
    return result;
  }
  *a1 = a2;
  result = v6(a1, a3, a4, a5);
  if (!(_DWORD)result)
  {
LABEL_6:
    result = 0;
    *a1 = 0;
  }
  return result;
}

uint64_t EVP_AEAD_CTX_seal(uint64_t a1, char *a2, _QWORD *a3, size_t a4, uint64_t a5, uint64_t a6, char *a7, size_t a8)
{
  int v12;
  int v13;
  uint64_t result;
  unsigned int (*v15)(uint64_t, char *, char *, uint64_t *, size_t);
  uint64_t v16;

  if (__CFADD__(a8, *(unsigned __int8 *)(*(_QWORD *)a1 + 2)))
  {
    v12 = 117;
    v13 = 123;
LABEL_10:
    ERR_put_error(30, 0, v12, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/aead.c", v13);
    goto LABEL_11;
  }
  if (a4 < a8)
  {
    v12 = 103;
    v13 = 128;
    goto LABEL_10;
  }
  if (a7 != a2 && &a2[a4] > a7 && &a7[a8] > a2)
  {
    v12 = 115;
    v13 = 133;
    goto LABEL_10;
  }
  v15 = *(unsigned int (**)(uint64_t, char *, char *, uint64_t *, size_t))(*(_QWORD *)a1 + 40);
  v16 = 0;
  if (v15(a1, a2, &a2[a8], &v16, a4 - a8))
  {
    result = 1;
    *a3 = v16 + a8;
    return result;
  }
LABEL_11:
  if (a4)
    bzero(a2, a4);
  result = 0;
  *a3 = 0;
  return result;
}

uint64_t EVP_AEAD_CTX_seal_scatter(uint64_t *a1, char *a2, char *a3, _QWORD *a4, size_t a5, uint64_t a6, uint64_t a7, char *a8, size_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v15;
  char *v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v21;

  v15 = (unint64_t)&a8[a9];
  v16 = &a2[a9];
  if (a8 != a2 && (v15 > (unint64_t)a2 ? (v17 = v16 > a8) : (v17 = 0), v17)
    || &a3[a5] > a2 && v16 > a3
    || &a3[a5] > a8 && v15 > (unint64_t)a3)
  {
    v18 = 115;
    v19 = 162;
LABEL_11:
    ERR_put_error(30, 0, v18, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/aead.c", v19);
    goto LABEL_12;
  }
  v21 = *a1;
  if (a11 && !*(_DWORD *)(v21 + 4))
  {
    v18 = 112;
    v19 = 167;
    goto LABEL_11;
  }
  if ((*(unsigned int (**)(uint64_t *, char *, char *, _QWORD *, size_t))(v21 + 40))(a1, a2, a3, a4, a5))
    return 1;
LABEL_12:
  if (a9)
    bzero(a2, a9);
  if (a5)
    bzero(a3, a5);
  result = 0;
  *a4 = 0;
  return result;
}

uint64_t EVP_AEAD_CTX_open(unsigned __int8 *a1, char *a2, size_t *a3, size_t a4, uint64_t a5, uint64_t a6, char *a7, unint64_t a8)
{
  int v12;
  int v13;
  size_t v14;
  uint64_t result;
  unsigned int (*v16)(unsigned __int8 *, char *);
  unint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned int (*v21)(unsigned __int8 *, char *);

  if (a7 != a2 && &a2[a4] > a7 && &a7[a8] > a2)
  {
    v12 = 115;
    v13 = 191;
LABEL_5:
    ERR_put_error(30, 0, v12, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/aead.c", v13);
LABEL_6:
    if (a4)
      bzero(a2, a4);
    v14 = 0;
    result = 0;
    goto LABEL_9;
  }
  v16 = *(unsigned int (**)(unsigned __int8 *, char *))(*(_QWORD *)a1 + 32);
  if (!v16)
  {
    v17 = a1[576];
    v14 = a8 - v17;
    if (a8 < v17)
    {
      v12 = 101;
      v13 = 208;
      goto LABEL_5;
    }
    if (v14 > a4)
    {
      v12 = 103;
      v13 = 214;
      goto LABEL_5;
    }
    if (a7 != a2 && (&a7[v14] > a2 ? (v18 = &a2[v14] > a7) : (v18 = 0), v18))
    {
      v19 = 115;
      v20 = 238;
    }
    else
    {
      v21 = *(unsigned int (**)(unsigned __int8 *, char *))(*(_QWORD *)a1 + 48);
      if (v21)
      {
        if (v21(a1, a2))
        {
          result = 1;
LABEL_9:
          *a3 = v14;
          return result;
        }
        goto LABEL_29;
      }
      v19 = 104;
      v20 = 243;
    }
    ERR_put_error(30, 0, v19, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/aead.c", v20);
LABEL_29:
    if (a8 != v17)
      bzero(a2, a8 - v17);
    goto LABEL_6;
  }
  if (!v16(a1, a2))
    goto LABEL_6;
  return 1;
}

uint64_t aes_nohw_set_encrypt_key(int8x16_t *a1, int a2, int8x16_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int8x16_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int8x16_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int8x16_t *v109;
  int8x16_t *v110;
  int8x16_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int64x2_t v125;
  uint64x2_t v126;
  int64x2_t v127;
  int8x16_t v128;
  int64x2_t v129;
  uint64x2_t v130;
  int64x2_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int64x2_t v141;
  int64x2_t v142;
  unint64_t v143;
  int8x16_t v144;
  int8x16_t v145;
  uint64x2_t v146;
  int8x16_t v147;
  uint64x2_t v148;
  int8x16_t v149;
  int64x2_t v150;
  uint64x2_t v151;
  int64x2_t v152;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD v165[2];
  int8x16_t v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 256:
      v32 = 0;
      a3[15].i32[0] = 14;
      v33 = a1->u64[1];
      v34 = (a1->i64[0] ^ ((unint64_t)a1->i64[0] >> 4)) & 0xF000F000F000F0;
      v35 = a1->i64[0] ^ (16 * v34);
      v36 = v35 ^ v34;
      v37 = (v35 ^ (v36 >> 8)) & 0xFF000000FF00;
      v38 = v36 ^ (v37 << 8);
      v39 = v38 ^ v37;
      v40 = ((v39 >> 16) ^ v38) & 0xFFFF0000;
      v41 = (v33 ^ (v33 >> 4)) & 0xF000F000F000F0;
      v42 = v33 ^ (16 * v41);
      v43 = v42 ^ v41;
      v44 = (v42 ^ (v43 >> 8)) & 0xFF000000FF00;
      v45 = v43 ^ (v44 << 8);
      v46 = v45 ^ v44;
      v47 = ((v46 >> 16) ^ v45) & 0xFFFF0000;
      v48 = v40 ^ v39 | ((unint64_t)(v47 ^ v46) << 32);
      v49 = (v46 & 0xFFFFFFFF00000000 ^ (v47 << 16)) & 0xFFFFFFFF00000000 | ((v39 ^ (v40 << 16)) >> 32);
      a3->i64[0] = v48;
      a3->i64[1] = v49;
      v50 = a1[1].u64[0];
      v51 = a1[1].u64[1];
      v52 = (v50 ^ (v50 >> 4)) & 0xF000F000F000F0;
      v53 = v50 ^ (16 * v52);
      v54 = v53 ^ v52;
      v55 = (v53 ^ (v54 >> 8)) & 0xFF000000FF00;
      v56 = v54 ^ (v55 << 8);
      v57 = v56 ^ v55;
      v58 = ((v57 >> 16) ^ v56) & 0xFFFF0000;
      v59 = (v51 ^ (v51 >> 4)) & 0xF000F000F000F0;
      v60 = v51 ^ (16 * v59);
      v61 = v60 ^ v59;
      v62 = (v60 ^ (v61 >> 8)) & 0xFF000000FF00;
      v63 = v61 ^ (v62 << 8);
      v64 = v63 ^ v62;
      v65 = ((v64 >> 16) ^ v63) & 0xFFFF0000;
      v66 = v58 ^ v57 | ((unint64_t)(v65 ^ v64) << 32);
      v67 = (v64 & 0xFFFFFFFF00000000 ^ (v65 << 16)) & 0xFFFFFFFF00000000 | ((v57 ^ (v58 << 16)) >> 32);
      a3[1].i64[0] = v66;
      a3[1].i64[1] = v67;
      v68 = aes_nohw_rcon;
      while (1)
      {
        v69 = (v66 >> 1) & 0x5555555555555555;
        v70 = v66 ^ (2 * v69);
        v71 = (v67 >> 1) & 0x5555555555555555;
        v72 = v67 ^ (2 * v71);
        v157 = v70 ^ (4 * ((v70 >> 2) & 0x3333333333333333));
        v158 = v69 ^ (4 * ((v66 >> 3) & 0x1111111111111111));
        v159 = (v70 >> 2) & 0x3333333333333333;
        v160 = (v66 >> 3) & 0x1111111111111111;
        v161 = v72 ^ (4 * ((v72 >> 2) & 0x3333333333333333));
        v162 = v71 ^ (4 * ((v67 >> 3) & 0x1111111111111111));
        v163 = (v72 >> 2) & 0x3333333333333333;
        v164 = (v67 >> 3) & 0x1111111111111111;
        aes_nohw_sub_bytes((uint64_t *)&v157);
        v73 = v157 & 0x1111111111111111 | (2 * v158) & 0x2222222222222222 | (4
                                                                               * ((2 * v160) & 0x2222222222222222 | v159 & 0x1111111111111111));
        v74 = *v68++;
        v75 = v161 & 0x1111111111111111 | (2 * v162) & 0x2222222222222222 | (4
                                                                               * ((2 * v164) & 0x2222222222222222 | v163 & 0x1111111111111111));
        v76 = ((v73 >> 36) & 0xF000 | (v73 >> 52)) ^ v48 ^ v74 & 0xF;
        v48 = (v76 << 32) ^ (v76 << 16) ^ (v76 << 48) ^ v76;
        v77 = v49 ^ ((unint64_t)v74 >> 4) ^ ((v75 >> 36) & 0xF000 | (v75 >> 52));
        v49 = (v77 << 32) ^ (v77 << 16) ^ (v77 << 48) ^ v77;
        v78 = &a3[v32];
        v78[2].i64[0] = v48;
        v78[2].i64[1] = v49;
        if (v32 == 12)
          break;
        v79 = (v48 >> 1) & 0x5555555555555555;
        v80 = v48 ^ (2 * v79);
        v81 = (v49 >> 1) & 0x5555555555555555;
        v82 = v49 ^ (2 * v81);
        v157 = v80 ^ (4 * ((v80 >> 2) & 0x3333333333333333));
        v158 = v79 ^ (4 * ((v48 >> 3) & 0x1111111111111111));
        v159 = (v80 >> 2) & 0x3333333333333333;
        v160 = (v48 >> 3) & 0x1111111111111111;
        v161 = v82 ^ (4 * ((v82 >> 2) & 0x3333333333333333));
        v162 = v81 ^ (4 * ((v49 >> 3) & 0x1111111111111111));
        v163 = (v82 >> 2) & 0x3333333333333333;
        v164 = (v49 >> 3) & 0x1111111111111111;
        aes_nohw_sub_bytes((uint64_t *)&v157);
        v83 = v66 ^ ((v157 & 0x1111000000000000 | (2 * v158) & 0x2222000000000000 | (4
                                                                                       * ((2 * v160) & 0x2222000000000000 | v159 & 0x1111000000000000))) >> 48);
        v66 = (v83 << 32) ^ (v83 << 16) ^ (v83 << 48) ^ v83;
        v84 = v67 ^ ((v161 & 0x1111000000000000 | (2 * v162) & 0x2222000000000000 | (4
                                                                                       * ((2 * v164) & 0x2222000000000000 | v163 & 0x1111000000000000uLL))) >> 48);
        v67 = (v84 << 32) ^ (v84 << 16) ^ (v84 << 48) ^ v84;
        v78[3].i64[0] = v66;
        v78[3].i64[1] = v67;
        v32 += 2;
      }
      return 0;
    case 192:
      v85 = 0;
      a3[15].i32[0] = 12;
      v166 = *a1;
      v86 = (v166.i64[0] ^ ((unint64_t)v166.i64[0] >> 4)) & 0xF000F000F000F0;
      v87 = v166.i64[0] ^ (16 * v86);
      v88 = v87 ^ v86;
      v89 = (v87 ^ (v88 >> 8)) & 0xFF000000FF00;
      v90 = v88 ^ (v89 << 8);
      v91 = v90 ^ v89;
      v92 = ((v91 >> 16) ^ v90) & 0xFFFF0000;
      v93 = (v166.i64[1] ^ ((unint64_t)v166.i64[1] >> 4)) & 0xF000F000F000F0;
      v94 = v166.i64[1] ^ (16 * v93);
      v95 = v94 ^ v93;
      v96 = (v94 ^ (v95 >> 8)) & 0xFF000000FF00;
      v97 = v95 ^ (v96 << 8);
      v98 = v97 ^ v96;
      v99 = ((v98 >> 16) ^ v97) & 0xFFFF0000;
      v166.i64[0] = v92 ^ v91 | ((unint64_t)(v99 ^ v98) << 32);
      v166.i64[1] = (v98 & 0xFFFFFFFF00000000 ^ (v99 << 16)) & 0xFFFFFFFF00000000 | ((v91 ^ (v92 << 16)) >> 32);
      *a3 = v166;
      v100 = a3 + 2;
      v101 = a1[1].u64[0];
      v102 = (v101 ^ (v101 >> 4)) & 0xF000F000F000F0;
      v103 = v101 ^ (16 * v102);
      v104 = v103 ^ v102;
      v105 = (v103 ^ (v104 >> 8)) & 0xFF000000FF00;
      v106 = v104 ^ (v105 << 8);
      v107 = v106 ^ v105;
      v108 = ((v107 >> 16) ^ v106) & 0xFFFF0000;
      v165[0] = v108 ^ v107;
      v165[1] = (v107 ^ (v108 << 16)) >> 32;
      v109 = (int8x16_t *)v165;
      v110 = &v166;
      v155 = (int8x16_t)vdupq_n_s64(0xF0000000uLL);
      v156 = (int8x16_t)vdupq_n_s64(0xFFF0000uLL);
      v154 = (int8x16_t)vdupq_n_s64(0xF000uLL);
      do
      {
        v111 = v110;
        v112 = v109->u64[1];
        v113 = ((unint64_t)v109->i64[0] >> 1) & 0x5555555555555555;
        v114 = v109->i64[0] ^ (2 * v113);
        v115 = (v112 >> 1) & 0x5555555555555555;
        v116 = v112 ^ (2 * v115);
        v117 = ((unint64_t)v109->i64[0] >> 3) & 0x1111111111111111;
        v157 = v114 ^ (4 * ((v114 >> 2) & 0x3333333333333333));
        v158 = v113 ^ (4 * v117);
        v159 = (v114 >> 2) & 0x3333333333333333;
        v160 = v117;
        v118 = (v112 >> 3) & 0x1111111111111111;
        v161 = v116 ^ (4 * ((v116 >> 2) & 0x3333333333333333));
        v162 = v115 ^ (4 * v118);
        v163 = (v116 >> 2) & 0x3333333333333333;
        v164 = v118;
        aes_nohw_sub_bytes((uint64_t *)&v157);
        v119.i64[0] = v157;
        v120.i64[0] = v159;
        v121.i64[0] = v158;
        v122.i64[0] = v160;
        v121.i64[1] = v162;
        v119.i64[1] = v161;
        v122.i64[1] = v164;
        v120.i64[1] = v163;
        v123.i64[0] = 0x2222222222222222;
        v123.i64[1] = 0x2222222222222222;
        v124.i64[0] = 0x1111111111111111;
        v124.i64[1] = 0x1111111111111111;
        v125 = (int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v122, v122), v123), vandq_s8(v120, v124)), 2uLL), vorrq_s8(vandq_s8(v119, v124), vandq_s8((int8x16_t)vaddq_s64(v121, v121), v123)));
        v126 = *(uint64x2_t *)v111;
        v127 = *(int64x2_t *)v109;
        v123.i32[0] = aes_nohw_rcon[v85];
        v128.i64[0] = vand_s8(*(int8x8_t *)v123.i8, (int8x8_t)0xF0000000FLL).u32[0];
        v128.i64[1] = vshr_n_u32((uint32x2_t)vdup_n_s32(*(unsigned int *)&v123), 4uLL).u32[1];
        v129 = (int64x2_t)veorq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)veorq_s8(*v111, v128), 0x20uLL), *v109), (int8x16_t)vshlq_n_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v125, 4uLL), v156), vandq_s8((int8x16_t)vshlq_n_s64(v125, 0xCuLL), v155)), 0x10uLL));
        v123.i64[0] = 0xFFFF000000000000;
        v123.i64[1] = 0xFFFF000000000000;
        v130 = (uint64x2_t)veorq_s8(vandq_s8((int8x16_t)vshlq_n_s64(v129, 0x10uLL), v123), (int8x16_t)v129);
        *v109 = (int8x16_t)v130;
        v131 = (int64x2_t)veorq_s8((int8x16_t)vshrq_n_u64(v130, 0x30uLL), vorrq_s8((int8x16_t)vshlq_n_s64(v127, 0x20uLL), (int8x16_t)vshrq_n_u64(v126, 0x20uLL)));
        *v111 = veorq_s8(veorq_s8((int8x16_t)vshlq_u64((uint64x2_t)v131, (uint64x2_t)xmmword_208F1DA70), (int8x16_t)vshlq_u64((uint64x2_t)v131, (uint64x2_t)xmmword_208F1E400)), veorq_s8((int8x16_t)vshlq_n_s64(v131, 0x30uLL), (int8x16_t)v131));
        v100[-1] = *v109;
        *v100 = *v111;
        v132 = v111->u64[1];
        v133 = ((unint64_t)v111->i64[0] >> 1) & 0x5555555555555555;
        v134 = v111->i64[0] ^ (2 * v133);
        v135 = (v132 >> 1) & 0x5555555555555555;
        v136 = v132 ^ (2 * v135);
        v137 = ((unint64_t)v111->i64[0] >> 3) & 0x1111111111111111;
        v157 = v134 ^ (4 * ((v134 >> 2) & 0x3333333333333333));
        v158 = v133 ^ (4 * v137);
        v159 = (v134 >> 2) & 0x3333333333333333;
        v160 = v137;
        v138 = (v132 >> 3) & 0x1111111111111111;
        v161 = v136 ^ (4 * ((v136 >> 2) & 0x3333333333333333));
        v162 = v135 ^ (4 * v138);
        v163 = (v136 >> 2) & 0x3333333333333333;
        v164 = v138;
        aes_nohw_sub_bytes((uint64_t *)&v157);
        v139.i64[0] = v157;
        v140.i64[0] = v159;
        v141.i64[0] = v158;
        v142.i64[0] = v160;
        v141.i64[1] = v162;
        v139.i64[1] = v161;
        v142.i64[1] = v164;
        v140.i64[1] = v163;
        v143 = aes_nohw_rcon[v85 + 1];
        v144.i64[0] = 0x2222222222222222;
        v144.i64[1] = 0x2222222222222222;
        v145.i64[0] = 0x1111111111111111;
        v145.i64[1] = 0x1111111111111111;
        v146 = (uint64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v142, v142), v144), vandq_s8(v140, v145)), 2uLL), vorrq_s8(vandq_s8(v139, v145), vandq_s8((int8x16_t)vaddq_s64(v141, v141), v144)));
        v147 = (int8x16_t)vsraq_n_u64((uint64x2_t)vandq_s8((int8x16_t)vshrq_n_u64(v146, 0x24uLL), v154), v146, 0x34uLL);
        v148 = *(uint64x2_t *)v111;
        v149.i64[0] = v143 & 0xF;
        v149.i64[1] = v143 >> 4;
        v150 = (int64x2_t)veorq_s8(v147, veorq_s8(v149, vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)v111, 0x20uLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)v109, 0x20uLL))));
        v151 = (uint64x2_t)veorq_s8(veorq_s8((int8x16_t)vshlq_u64((uint64x2_t)v150, (uint64x2_t)xmmword_208F1DA70), (int8x16_t)vshlq_u64((uint64x2_t)v150, (uint64x2_t)xmmword_208F1E400)), veorq_s8((int8x16_t)vshlq_n_s64(v150, 0x30uLL), (int8x16_t)v150));
        *v109 = (int8x16_t)v151;
        v152 = (int64x2_t)veorq_s8((int8x16_t)vshrq_n_u64(v151, 0x30uLL), (int8x16_t)vshrq_n_u64(v148, 0x20uLL));
        v140.i64[0] = 4294901760;
        v140.i64[1] = 4294901760;
        *v111 = veorq_s8(vandq_s8((int8x16_t)vshlq_n_s64(v152, 0x10uLL), v140), (int8x16_t)v152);
        v85 += 2;
        v100[1] = *v109;
        v100 += 3;
        v110 = v109;
        v109 = v111;
      }
      while (v85 != 8);
      return 0;
    case 128:
      v4 = 0;
      a3[15].i32[0] = 10;
      v5 = a1->u64[1];
      v6 = (a1->i64[0] ^ ((unint64_t)a1->i64[0] >> 4)) & 0xF000F000F000F0;
      v7 = a1->i64[0] ^ (16 * v6);
      v8 = v7 ^ v6;
      v9 = (v7 ^ (v8 >> 8)) & 0xFF000000FF00;
      v10 = v8 ^ (v9 << 8);
      v11 = v10 ^ v9;
      v12 = ((v11 >> 16) ^ v10) & 0xFFFF0000;
      v13 = (v5 ^ (v5 >> 4)) & 0xF000F000F000F0;
      v14 = v5 ^ (16 * v13);
      v15 = v14 ^ v13;
      v16 = (v14 ^ (v15 >> 8)) & 0xFF000000FF00;
      v17 = v15 ^ (v16 << 8);
      v18 = v17 ^ v16;
      v19 = ((v18 >> 16) ^ v17) & 0xFFFF0000;
      v20 = v12 ^ v11 | ((unint64_t)(v19 ^ v18) << 32);
      v21 = (v18 & 0xFFFFFFFF00000000 ^ (v19 << 16)) & 0xFFFFFFFF00000000 | ((v11 ^ (v12 << 16)) >> 32);
      a3->i64[0] = v20;
      a3->i64[1] = v21;
      v22 = &a3[1].u64[1];
      do
      {
        v23 = (v20 >> 1) & 0x5555555555555555;
        v24 = v20 ^ (2 * v23);
        v25 = (v21 >> 1) & 0x5555555555555555;
        v26 = v21 ^ (2 * v25);
        v157 = v24 ^ (4 * ((v24 >> 2) & 0x3333333333333333));
        v158 = v23 ^ (4 * ((v20 >> 3) & 0x1111111111111111));
        v159 = (v24 >> 2) & 0x3333333333333333;
        v160 = (v20 >> 3) & 0x1111111111111111;
        v161 = v26 ^ (4 * ((v26 >> 2) & 0x3333333333333333));
        v162 = v25 ^ (4 * ((v21 >> 3) & 0x1111111111111111));
        v163 = (v26 >> 2) & 0x3333333333333333;
        v164 = (v21 >> 3) & 0x1111111111111111;
        aes_nohw_sub_bytes((uint64_t *)&v157);
        v27 = v157 & 0x1111111111111111 | (2 * v158) & 0x2222222222222222 | (4
                                                                               * ((2 * v160) & 0x2222222222222222 | v159 & 0x1111111111111111));
        v28 = v161 & 0x1111111111111111 | (2 * v162) & 0x2222222222222222 | (4
                                                                               * ((2 * v164) & 0x2222222222222222 | v163 & 0x1111111111111111));
        v29 = aes_nohw_rcon[v4];
        v30 = ((v27 >> 36) & 0xF000 | (v27 >> 52)) ^ v29 & 0xF ^ v20;
        v20 = (v30 << 32) ^ (v30 << 16) ^ (v30 << 48) ^ v30;
        v31 = ((v28 >> 36) & 0xF000 | (v28 >> 52)) ^ (v29 >> 4) ^ v21;
        v21 = (v31 << 32) ^ (v31 << 16) ^ (v31 << 48) ^ v31;
        *(v22 - 1) = v20;
        *v22 = v21;
        ++v4;
        v22 += 2;
      }
      while (v4 != 10);
      return 0;
  }
  return 1;
}

uint64_t aes_nohw_encrypt(unint64_t a1, uint64_t a2, unint64_t a3)
{
  int8x16_t v7[4];
  _OWORD v8[60];

  memset(v8, 0, 512);
  aes_nohw_expand_round_keys((unint64_t)v8, a3);
  memset(v7, 0, sizeof(v7));
  aes_nohw_to_batch((unint64_t)v7, a1, 1);
  aes_nohw_encrypt_batch(v8, *(unsigned int *)(a3 + 240), v7);
  return aes_nohw_from_batch(a2, 1, (uint64_t)v7);
}

unint64_t aes_nohw_expand_round_keys(unint64_t result, unint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  float64_t *v5;
  int8x16_t v6;
  int8x16_t v7;
  const double *v8;
  uint64_t v9;
  int64x2_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int64x2_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float64x2x2_t v46;
  float64x2x2_t v47;
  float64x2x2_t v48;
  float64x2x2_t v49;

  v2 = *(unsigned int *)(a2 + 240);
  if (!(_DWORD)v2 || (a2 + 16 * v2 + 16 > result ? (v3 = result + (v2 << 6) + 64 > a2) : (v3 = 0), v3))
  {
    v4 = 0;
LABEL_11:
    v19 = v2 - v4 + 1;
    v20 = (unint64_t *)(a2 + 16 * v4 + 8);
    v21 = (unint64_t *)(result + (v4 << 6) + 32);
    do
    {
      v22 = *(v20 - 1);
      v23 = *v20;
      *(v21 - 4) = v22;
      *v21 = v23;
      v24 = *(v20 - 1);
      v25 = *v20;
      *(v21 - 3) = v24;
      v21[1] = v25;
      v26 = *(v20 - 1);
      v27 = *v20;
      *(v21 - 2) = v26;
      v21[2] = v27;
      v28 = *(v20 - 1);
      v29 = (v24 ^ (v22 >> 1)) & 0x5555555555555555;
      v30 = v22 ^ (2 * v29);
      v31 = v29 ^ v24;
      v32 = (v28 ^ (v26 >> 1)) & 0x5555555555555555;
      v33 = v26 ^ (2 * v32);
      v34 = v32 ^ v28;
      v35 = (v25 ^ (v23 >> 1)) & 0x5555555555555555;
      v36 = v23 ^ (2 * v35);
      v37 = v35 ^ v25;
      v38 = (*v20 ^ (v27 >> 1)) & 0x5555555555555555;
      v39 = v27 ^ (2 * v38);
      result = v38 ^ *v20;
      v40 = (v33 ^ (v30 >> 2)) & 0x3333333333333333;
      v41 = v30 ^ (4 * v40);
      v42 = v40 ^ v33;
      v43 = (v34 ^ (v31 >> 2)) & 0x3333333333333333;
      *(v21 - 4) = v41;
      *(v21 - 3) = v31 ^ (4 * v43);
      *(v21 - 2) = v42;
      *(v21 - 1) = v43 ^ v34;
      v44 = (v39 ^ (v36 >> 2)) & 0x3333333333333333;
      v45 = (result ^ (v37 >> 2)) & 0x3333333333333333;
      *v21 = v36 ^ (4 * v44);
      v21[1] = v37 ^ (4 * v45);
      v21[2] = v44 ^ v39;
      v21[3] = v45 ^ result;
      v20 += 2;
      v21 += 8;
      --v19;
    }
    while (v19);
    return result;
  }
  v4 = (v2 + 1) & 0x1FFFFFFFELL;
  v5 = (float64_t *)(result + 64);
  v6.i64[0] = 0x5555555555555555;
  v6.i64[1] = 0x5555555555555555;
  v7.i64[0] = 0x3333333333333333;
  v7.i64[1] = 0x3333333333333333;
  v8 = (const double *)a2;
  v9 = v4;
  do
  {
    v46 = vld2q_f64(v8);
    *(v5 - 8) = v46.val[0].f64[0];
    *v5 = v46.val[0].f64[1];
    v5[4] = v46.val[1].f64[1];
    *(v5 - 4) = v46.val[1].f64[0];
    v47 = vld2q_f64(v8);
    *(v5 - 7) = v47.val[0].f64[0];
    v5[1] = v47.val[0].f64[1];
    v5[5] = v47.val[1].f64[1];
    *(v5 - 3) = v47.val[1].f64[0];
    v48 = vld2q_f64(v8);
    *(v5 - 6) = v48.val[0].f64[0];
    v5[2] = v48.val[0].f64[1];
    v5[6] = v48.val[1].f64[1];
    *(v5 - 2) = v48.val[1].f64[0];
    v49 = vld2q_f64(v8);
    v8 += 4;
    v10 = (int64x2_t)vandq_s8(veorq_s8((int8x16_t)v47.val[0], (int8x16_t)vshrq_n_u64((uint64x2_t)v46.val[0], 1uLL)), v6);
    v11 = veorq_s8((int8x16_t)vaddq_s64(v10, v10), (int8x16_t)v46.val[0]);
    v12 = veorq_s8((int8x16_t)v10, (int8x16_t)v47.val[0]);
    v13 = (int64x2_t)vandq_s8(veorq_s8((int8x16_t)v49.val[0], (int8x16_t)vshrq_n_u64((uint64x2_t)v48.val[0], 1uLL)), v6);
    v14 = veorq_s8((int8x16_t)vaddq_s64(v13, v13), (int8x16_t)v48.val[0]);
    v15 = veorq_s8((int8x16_t)v13, (int8x16_t)v49.val[0]);
    v16 = (int64x2_t)vandq_s8(veorq_s8((int8x16_t)v47.val[1], (int8x16_t)vshrq_n_u64((uint64x2_t)v46.val[1], 1uLL)), v6);
    v46.val[0] = (float64x2_t)veorq_s8((int8x16_t)vaddq_s64(v16, v16), (int8x16_t)v46.val[1]);
    v46.val[1] = (float64x2_t)veorq_s8((int8x16_t)v16, (int8x16_t)v47.val[1]);
    v47.val[0] = (float64x2_t)vandq_s8(veorq_s8((int8x16_t)v49.val[1], (int8x16_t)vshrq_n_u64((uint64x2_t)v48.val[1], 1uLL)), v6);
    v47.val[1] = (float64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)v47.val[0], (int64x2_t)v47.val[0]), (int8x16_t)v48.val[1]);
    v47.val[0] = (float64x2_t)veorq_s8((int8x16_t)v47.val[0], (int8x16_t)v49.val[1]);
    v48.val[0] = (float64x2_t)vandq_s8(veorq_s8(v14, (int8x16_t)vshrq_n_u64((uint64x2_t)v11, 2uLL)), v7);
    v48.val[1] = (float64x2_t)veorq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v48.val[0], 2uLL), v11);
    v48.val[0] = (float64x2_t)veorq_s8((int8x16_t)v48.val[0], v14);
    v49.val[0] = (float64x2_t)vandq_s8(veorq_s8(v15, (int8x16_t)vshrq_n_u64((uint64x2_t)v12, 2uLL)), v7);
    v49.val[1] = (float64x2_t)veorq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v49.val[0], 2uLL), v12);
    v17 = (int64x2_t)vandq_s8(veorq_s8((int8x16_t)v47.val[1], (int8x16_t)vshrq_n_u64((uint64x2_t)v46.val[0], 2uLL)), v7);
    v46.val[0] = (float64x2_t)veorq_s8((int8x16_t)vshlq_n_s64(v17, 2uLL), (int8x16_t)v46.val[0]);
    v47.val[1] = (float64x2_t)veorq_s8((int8x16_t)v17, (int8x16_t)v47.val[1]);
    v18 = (int64x2_t)vandq_s8(veorq_s8((int8x16_t)v47.val[0], (int8x16_t)vshrq_n_u64((uint64x2_t)v46.val[1], 2uLL)), v7);
    v46.val[1] = (float64x2_t)veorq_s8((int8x16_t)vshlq_n_s64(v18, 2uLL), (int8x16_t)v46.val[1]);
    v47.val[0] = (float64x2_t)veorq_s8((int8x16_t)v18, (int8x16_t)v47.val[0]);
    *((int64x2_t *)v5 + 2) = vzip2q_s64((int64x2_t)v46.val[0], (int64x2_t)v46.val[1]);
    *((int64x2_t *)v5 + 3) = vzip2q_s64((int64x2_t)v47.val[1], (int64x2_t)v47.val[0]);
    v49.val[0] = (float64x2_t)veorq_s8((int8x16_t)v49.val[0], v15);
    *(int64x2_t *)v5 = vzip2q_s64((int64x2_t)v48.val[1], (int64x2_t)v49.val[1]);
    *((int64x2_t *)v5 + 1) = vzip2q_s64((int64x2_t)v48.val[0], (int64x2_t)v49.val[0]);
    *((int64x2_t *)v5 - 2) = vzip1q_s64((int64x2_t)v46.val[0], (int64x2_t)v46.val[1]);
    *((int64x2_t *)v5 - 1) = vzip1q_s64((int64x2_t)v47.val[1], (int64x2_t)v47.val[0]);
    *((int64x2_t *)v5 - 4) = vzip1q_s64((int64x2_t)v48.val[1], (int64x2_t)v49.val[1]);
    *((int64x2_t *)v5 - 3) = vzip1q_s64((int64x2_t)v48.val[0], (int64x2_t)v49.val[0]);
    v5 += 16;
    v9 -= 2;
  }
  while (v9);
  if (v2 + 1 != v4)
    goto LABEL_11;
  return result;
}

unint64_t aes_nohw_to_batch(unint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t *v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  unint64_t v53;
  const double *v54;
  int64x2_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int64x2_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int64x2_t v61;
  int64x2_t v62;
  float64x2x2_t v63;

  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  if (a3)
  {
    if (a3 == 1 || a2 + 16 * a3 > result && result + 8 * a3 + 32 > a2)
    {
      v3 = 0;
LABEL_6:
      v4 = a3 - v3;
      v5 = (_QWORD *)(a2 + 16 * v3 + 8);
      v6 = (unint64_t *)(result + 8 * v3 + 32);
      do
      {
        v7 = *(v5 - 1);
        v8 = (v7 ^ (v7 >> 4)) & 0xF000F000F000F0;
        v9 = v7 ^ (16 * v8);
        v10 = v9 ^ v8;
        v11 = (v9 ^ (v10 >> 8)) & 0xFF000000FF00;
        v12 = v10 ^ (v11 << 8);
        v13 = v12 ^ v11;
        v14 = ((v13 >> 16) ^ v12) & 0xFFFF0000;
        v15 = (*v5 ^ (*v5 >> 4)) & 0xF000F000F000F0;
        v16 = *v5 ^ (16 * v15);
        v17 = v16 ^ v15;
        v18 = (v16 ^ (v17 >> 8)) & 0xFF000000FF00;
        v19 = v17 ^ (v18 << 8);
        v20 = v19 ^ v18;
        v21 = ((v20 >> 16) ^ v19) & 0xFFFF0000;
        *(v6 - 4) = v14 ^ v13 | ((unint64_t)(v21 ^ v20) << 32);
        *v6++ = (v20 & 0xFFFFFFFF00000000 ^ (v21 << 16)) & 0xFFFFFFFF00000000 | ((v13 ^ (v14 << 16)) >> 32);
        v5 += 2;
        --v4;
      }
      while (v4);
      goto LABEL_8;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFFELL;
    v47 = (int8x16_t *)(result + 32);
    v48.i64[0] = 0xF000F000F000F0;
    v48.i64[1] = 0xF000F000F000F0;
    v49.i64[0] = 0xFF000000FF00;
    v49.i64[1] = 0xFF000000FF00;
    v50.i64[0] = 4294901760;
    v50.i64[1] = 4294901760;
    v51.i64[0] = 0xFFFFFFFFLL;
    v51.i64[1] = 0xFFFFFFFFLL;
    v52.i64[0] = 0xFFFFFFFF00000000;
    v52.i64[1] = 0xFFFFFFFF00000000;
    v53 = a3 & 0xFFFFFFFFFFFFFFFELL;
    v54 = (const double *)a2;
    do
    {
      v63 = vld2q_f64(v54);
      v54 += 4;
      v55 = (int64x2_t)vandq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v63.val[0], 4uLL), (int8x16_t)v63.val[0]), v48);
      v56 = veorq_s8((int8x16_t)vshlq_n_s64(v55, 4uLL), (int8x16_t)v63.val[0]);
      v57 = veorq_s8(v56, (int8x16_t)v55);
      v58 = (int64x2_t)vandq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v57, 8uLL), v56), v49);
      v59 = veorq_s8((int8x16_t)vshlq_n_s64(v58, 8uLL), v57);
      v60 = veorq_s8(v59, (int8x16_t)v58);
      v61 = (int64x2_t)vandq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v63.val[1], 4uLL), (int8x16_t)v63.val[1]), v48);
      v63.val[0] = (float64x2_t)veorq_s8((int8x16_t)vshlq_n_s64(v61, 4uLL), (int8x16_t)v63.val[1]);
      v63.val[1] = (float64x2_t)veorq_s8((int8x16_t)v63.val[0], (int8x16_t)v61);
      v62 = (int64x2_t)vandq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v60, 0x10uLL), v59), v50);
      v63.val[0] = (float64x2_t)vandq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v63.val[1], 8uLL), (int8x16_t)v63.val[0]), v49);
      v63.val[1] = (float64x2_t)veorq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v63.val[0], 8uLL), (int8x16_t)v63.val[1]);
      v63.val[0] = (float64x2_t)veorq_s8((int8x16_t)v63.val[1], (int8x16_t)v63.val[0]);
      v63.val[1] = (float64x2_t)vandq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v63.val[0], 0x10uLL), (int8x16_t)v63.val[1]), v50);
      v47[-2] = vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)veorq_s8((int8x16_t)v63.val[1], (int8x16_t)v63.val[0]), 0x20uLL), veorq_s8((int8x16_t)v62, vandq_s8(v60, v51)));
      *v47++ = vorrq_s8(veorq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v63.val[1], 0x10uLL), vandq_s8((int8x16_t)v63.val[0], v52)), (int8x16_t)vshrq_n_u64((uint64x2_t)veorq_s8((int8x16_t)vshlq_n_s64(v62, 0x10uLL), v60), 0x20uLL));
      v53 -= 2;
    }
    while (v53);
    if (v3 != a3)
      goto LABEL_6;
  }
LABEL_8:
  v22 = *(_QWORD *)(result + 8);
  v23 = (v22 ^ (*(_QWORD *)result >> 1)) & 0x5555555555555555;
  v24 = *(_QWORD *)result ^ (2 * v23);
  v25 = v23 ^ v22;
  v26 = *(_QWORD *)(result + 16);
  v27 = *(_QWORD *)(result + 24);
  v28 = (v27 ^ (v26 >> 1)) & 0x5555555555555555;
  v29 = v26 ^ (2 * v28);
  v30 = v28 ^ v27;
  v31 = *(_QWORD *)(result + 32);
  v32 = *(_QWORD *)(result + 40);
  v33 = (v32 ^ (v31 >> 1)) & 0x5555555555555555;
  v34 = v31 ^ (2 * v33);
  v35 = v33 ^ v32;
  v36 = *(_QWORD *)(result + 48);
  v37 = *(_QWORD *)(result + 56);
  v38 = (v37 ^ (v36 >> 1)) & 0x5555555555555555;
  v39 = v36 ^ (2 * v38);
  v40 = v38 ^ v37;
  v41 = (v29 ^ (v24 >> 2)) & 0x3333333333333333;
  v42 = v24 ^ (4 * v41);
  v43 = v41 ^ v29;
  v44 = (v30 ^ (v25 >> 2)) & 0x3333333333333333;
  *(_QWORD *)result = v42;
  *(_QWORD *)(result + 8) = v25 ^ (4 * v44);
  *(_QWORD *)(result + 16) = v43;
  *(_QWORD *)(result + 24) = v44 ^ v30;
  v45 = (v39 ^ (v34 >> 2)) & 0x3333333333333333;
  v46 = (v40 ^ (v35 >> 2)) & 0x3333333333333333;
  *(_QWORD *)(result + 32) = v34 ^ (4 * v45);
  *(_QWORD *)(result + 40) = v35 ^ (4 * v46);
  *(_QWORD *)(result + 48) = v45 ^ v39;
  *(_QWORD *)(result + 56) = v46 ^ v40;
  return result;
}

void aes_nohw_encrypt_batch(_QWORD *a1, unint64_t a2, int8x16_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a3->i64[1];
  a3->i64[0] ^= *a1;
  a3->i64[1] = a1[1] ^ v6;
  v7 = a3[1].i64[1];
  a3[1].i64[0] ^= a1[2];
  a3[1].i64[1] = a1[3] ^ v7;
  v8 = a3[2].i64[1];
  a3[2].i64[0] ^= a1[4];
  a3[2].i64[1] = a1[5] ^ v8;
  v9 = a3[3].i64[1];
  a3[3].i64[0] ^= a1[6];
  a3[3].i64[1] = a1[7] ^ v9;
  if (a2 >= 2)
  {
    v10 = a2 - 1;
    v11 = a1 + 15;
    do
    {
      aes_nohw_sub_bytes(a3->i64);
      aes_nohw_shift_rows(a3);
      aes_nohw_mix_columns((uint64_t)a3);
      v12 = a3->i64[1];
      a3->i64[0] ^= *(v11 - 7);
      a3->i64[1] = *(v11 - 6) ^ v12;
      v13 = a3[1].i64[1];
      a3[1].i64[0] ^= *(v11 - 5);
      a3[1].i64[1] = *(v11 - 4) ^ v13;
      v14 = a3[2].i64[1];
      a3[2].i64[0] ^= *(v11 - 3);
      a3[2].i64[1] = *(v11 - 2) ^ v14;
      v15 = a3[3].i64[1];
      a3[3].i64[0] ^= *(v11 - 1);
      v16 = *v11;
      v11 += 8;
      a3[3].i64[1] = v16 ^ v15;
      --v10;
    }
    while (v10);
  }
  aes_nohw_sub_bytes(a3->i64);
  aes_nohw_shift_rows(a3);
  v17 = &a1[8 * a2];
  v18 = a3->i64[1];
  a3->i64[0] ^= *v17;
  a3->i64[1] = v17[1] ^ v18;
  v19 = a3[1].i64[1];
  a3[1].i64[0] ^= v17[2];
  a3[1].i64[1] = v17[3] ^ v19;
  v20 = a3[2].i64[1];
  a3[2].i64[0] ^= v17[4];
  a3[2].i64[1] = v17[5] ^ v20;
  v21 = a3[3].i64[1];
  a3[3].i64[0] ^= v17[6];
  a3[3].i64[1] = v17[7] ^ v21;
}

uint64_t aes_nohw_from_batch(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v3 = *(_OWORD *)(a3 + 48);
  v39 = *(_OWORD *)(a3 + 32);
  v4 = (v36 ^ (v35 >> 1)) & 0x5555555555555555;
  v5 = v35 ^ (2 * v4);
  v6 = v4 ^ v36;
  v7 = (v38 ^ (v37 >> 1)) & 0x5555555555555555;
  v8 = v37 ^ (2 * v7);
  v9 = v7 ^ v38;
  v10 = (*((_QWORD *)&v39 + 1) ^ ((unint64_t)v39 >> 1)) & 0x5555555555555555;
  v11 = v39 ^ (2 * v10);
  v12 = v10 ^ *((_QWORD *)&v39 + 1);
  v13 = (*((_QWORD *)&v3 + 1) ^ ((unint64_t)v3 >> 1)) & 0x5555555555555555;
  v14 = v3 ^ (2 * v13);
  v15 = v13 ^ *((_QWORD *)&v3 + 1);
  v16 = (v8 ^ (v5 >> 2)) & 0x3333333333333333;
  v17 = v5 ^ (4 * v16);
  v18 = v16 ^ v8;
  v19 = (v9 ^ (v6 >> 2)) & 0x3333333333333333;
  v35 = v17;
  v36 = v6 ^ (4 * v19);
  v37 = v18;
  v38 = v19 ^ v9;
  v20 = (v14 ^ (v11 >> 2)) & 0x3333333333333333;
  v21 = (v15 ^ (v12 >> 2)) & 0x3333333333333333;
  *(_QWORD *)&v39 = v11 ^ (4 * v20);
  *((_QWORD *)&v39 + 1) = v12 ^ (4 * v21);
  v40 = v20 ^ v14;
  v41 = v21 ^ v15;
  if (a2)
  {
    v22 = (unint64_t *)(result + 8);
    v23 = (uint64_t *)&v39;
    do
    {
      v24 = *(v23 - 4);
      v25 = *v23++;
      v26 = (v24 ^ ((_DWORD)v25 << 16)) & 0xFFFF0000;
      v27 = (v24 | ((unint64_t)v25 << 32)) ^ (v26 << 16);
      v28 = v27 ^ v26;
      v29 = (v27 ^ (v28 >> 8)) & 0xFF000000FF00;
      v30 = v25 & 0xFFFFFFFF00000000 | HIDWORD(v24);
      v31 = (((v25 & 0xFFFFFFFF00000000) >> 16) ^ HIDWORD(v24)) & 0xFFFF0000;
      v32 = v30 ^ (v31 << 16);
      v33 = v32 ^ v31;
      v34 = (v32 ^ (v33 >> 8)) & 0xFF000000FF00;
      *(v22 - 1) = v28 ^ (v29 << 8) ^ v29 ^ (16
                                           * ((v28 ^ (v29 << 8) ^ ((v28 ^ (v29 << 8) ^ v29) >> 4)) & 0xF000F000F000F0)) ^ (v28 ^ (v29 << 8) ^ ((v28 ^ (v29 << 8) ^ v29) >> 4)) & 0xF000F000F000F0;
      *v22 = v33 ^ (v34 << 8) ^ v34 ^ (16 * ((v33 ^ (v34 << 8) ^ ((v33 ^ (v34 << 8) ^ v34) >> 4)) & 0xF000F000F000F0)) ^ (v33 ^ (v34 << 8) ^ ((v33 ^ (v34 << 8) ^ v34) >> 4)) & 0xF000F000F000F0;
      v22 += 2;
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t aes_nohw_decrypt(unint64_t a1, uint64_t a2, unint64_t a3)
{
  int8x16_t v7[4];
  _OWORD v8[60];

  memset(v8, 0, 512);
  aes_nohw_expand_round_keys((unint64_t)v8, a3);
  memset(v7, 0, sizeof(v7));
  aes_nohw_to_batch((unint64_t)v7, a1, 1);
  aes_nohw_decrypt_batch(v8, *(unsigned int *)(a3 + 240), v7);
  return aes_nohw_from_batch(a2, 1, (uint64_t)v7);
}

uint64_t aes_nohw_decrypt_batch(_QWORD *a1, uint64_t a2, int8x16_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x16_t v49;
  uint64x2_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint64x2_t v53;
  int8x16_t v54;
  uint64x2_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v6 = &a1[8 * a2];
  v7 = a3->i64[1];
  a3->i64[0] ^= *v6;
  a3->i64[1] = v6[1] ^ v7;
  v8 = a3[1].i64[1];
  a3[1].i64[0] ^= v6[2];
  a3[1].i64[1] = v6[3] ^ v8;
  v9 = a3[2].i64[1];
  a3[2].i64[0] ^= v6[4];
  a3[2].i64[1] = v6[5] ^ v9;
  v10 = a3[3].i64[1];
  a3[3].i64[0] ^= v6[6];
  a3[3].i64[1] = v6[7] ^ v10;
  aes_nohw_inv_shift_rows(a3);
  v11 = a3->i64[1];
  v12 = a3[1].i64[0];
  v13 = a3[1].i64[1];
  v14 = a3[2].i64[0];
  v15 = a3[2].i64[1];
  v16 = a3[3].i64[0];
  v17 = a3[3].i64[1];
  v18 = v13 ^ a3->i64[0];
  v19 = v15 ^ v12 ^ a3->i64[0];
  v20 = v13 ^ v11 ^ v16;
  v21 = v14 ^ v11;
  a3->i64[0] = v17 ^ ~(v15 ^ v12);
  a3->i64[1] = v16 ^ v18;
  a3[1].i64[0] = v17 ^ ~v21;
  a3[1].i64[1] = v19;
  a3[2].i64[0] = v20;
  a3[2].i64[1] = v14 ^ v12 ^ v17;
  a3[3].i64[0] = v15 ^ v18;
  a3[3].i64[1] = v16 ^ v21;
  aes_nohw_sub_bytes(a3->i64);
  v22 = a3->i64[1];
  v23 = a3[1].i64[0];
  v24 = a3[1].i64[1];
  v25 = a3[2].i64[0];
  v26 = a3[2].i64[1];
  v28 = a3[3].i64[0];
  result = a3[3].i64[1];
  v29 = v24 ^ a3->i64[0];
  v30 = v28 ^ v29;
  v31 = v26 ^ v23;
  v32 = v26 ^ v23 ^ a3->i64[0];
  v33 = v24 ^ v22 ^ v28;
  v34 = v25 ^ v23 ^ result;
  v35 = v26 ^ v29;
  v36 = v25 ^ v22;
  v37 = v28 ^ v36;
  v38 = result ^ ~v31;
  a3->i64[0] = v38;
  a3->i64[1] = v28 ^ v29;
  v39 = result ^ ~v36;
  a3[1].i64[0] = v39;
  a3[1].i64[1] = v32;
  a3[2].i64[0] = v33;
  a3[2].i64[1] = v34;
  a3[3].i64[0] = v26 ^ v29;
  a3[3].i64[1] = v37;
  v40 = a2 - 1;
  if (v40)
  {
    v41 = v6 - 4;
    do
    {
      v42 = *(v41 - 4) ^ v38;
      a3->i64[0] = v42;
      v43 = *(v41 - 3) ^ v30;
      a3->i64[1] = v43;
      v44 = *(v41 - 2) ^ v39;
      a3[1].i64[0] = v44;
      v45 = *(v41 - 1) ^ v32;
      a3[1].i64[1] = v45;
      v46 = *v41 ^ v33;
      a3[2].i64[0] = v46;
      v47 = v41[1] ^ v34;
      a3[2].i64[1] = v47;
      v48 = v41[2] ^ v35;
      a3[3].i64[0] = v48;
      v49.i64[0] = v48;
      v49.i64[1] = v41[3] ^ v37;
      v50.i64[0] = v49.i64[1];
      v50.i64[1] = v48;
      v51.i64[0] = 0xFF00FF00FF00FFLL;
      v51.i64[1] = 0xFF00FF00FF00FFLL;
      v52 = veorq_s8(vbslq_s8(v51, (int8x16_t)vshrq_n_u64(v50, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v50, 8uLL)), (int8x16_t)v50);
      v53.i64[0] = v42;
      v53.i64[1] = v43;
      v54.i64[0] = v44;
      v54.i64[1] = v45;
      v55.i64[0] = v46;
      v55.i64[1] = v47;
      a3->i64[0] = v52.i64[1] ^ v42;
      a3->i64[1] = v52.i64[0] ^ v52.i64[1] ^ v43;
      a3[1] = veorq_s8(veorq_s8(vbslq_s8(v51, (int8x16_t)vshrq_n_u64(v53, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v53, 8uLL)), veorq_s8(v54, (int8x16_t)v53)), v52);
      a3[2].i64[0] = __rev16(v44) ^ v44 ^ v46 ^ v52.i64[0] ^ v52.i64[1];
      a3[2].i64[1] = __rev16(v45) ^ v45 ^ v47 ^ v52.i64[0];
      a3[3] = veorq_s8(vbslq_s8(v51, (int8x16_t)vshrq_n_u64(v55, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v55, 8uLL)), veorq_s8(v49, (int8x16_t)v55));
      aes_nohw_mix_columns((uint64_t)a3);
      aes_nohw_inv_shift_rows(a3);
      v56 = a3->i64[1];
      v57 = a3[1].i64[0];
      v58 = a3[1].i64[1];
      v59 = a3[2].i64[0];
      v60 = a3[2].i64[1];
      v61 = a3[3].i64[0];
      v62 = a3[3].i64[1];
      v63 = v58 ^ a3->i64[0];
      v64 = v60 ^ v57 ^ a3->i64[0];
      v65 = v58 ^ v56 ^ v61;
      v66 = v59 ^ v56;
      a3->i64[0] = v62 ^ ~(v60 ^ v57);
      a3->i64[1] = v61 ^ v63;
      a3[1].i64[0] = v62 ^ ~v66;
      a3[1].i64[1] = v64;
      a3[2].i64[0] = v65;
      a3[2].i64[1] = v59 ^ v57 ^ v62;
      a3[3].i64[0] = v60 ^ v63;
      a3[3].i64[1] = v61 ^ v66;
      aes_nohw_sub_bytes(a3->i64);
      v67 = a3->i64[1];
      v68 = a3[1].i64[0];
      v69 = a3[1].i64[1];
      v70 = a3[2].i64[0];
      v71 = a3[2].i64[1];
      v72 = a3[3].i64[0];
      result = a3[3].i64[1];
      v73 = v69 ^ a3->i64[0];
      v30 = v72 ^ v73;
      v74 = v71 ^ v68;
      v32 = v71 ^ v68 ^ a3->i64[0];
      v33 = v69 ^ v67 ^ v72;
      v34 = v70 ^ v68 ^ result;
      v35 = v71 ^ v73;
      v75 = v70 ^ v67;
      v37 = v72 ^ v75;
      v38 = result ^ ~v74;
      a3->i64[0] = v38;
      a3->i64[1] = v72 ^ v73;
      v39 = result ^ ~v75;
      a3[1].i64[0] = v39;
      a3[1].i64[1] = v32;
      a3[2].i64[0] = v33;
      a3[2].i64[1] = v34;
      v41 -= 8;
      a3[3].i64[0] = v71 ^ v73;
      a3[3].i64[1] = v37;
      --v40;
    }
    while (v40);
  }
  a3->i64[0] = *a1 ^ v38;
  a3->i64[1] = a1[1] ^ v30;
  a3[1].i64[0] = a1[2] ^ v39;
  a3[1].i64[1] = a1[3] ^ v32;
  a3[2].i64[0] = a1[4] ^ v33;
  a3[2].i64[1] = a1[5] ^ v34;
  a3[3].i64[0] = a1[6] ^ v35;
  a3[3].i64[1] = a1[7] ^ v37;
  return result;
}

uint64_t aes_nohw_ctr32_encrypt_blocks(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, __int128 *a5)
{
  unint64_t v7;
  uint64_t v9;
  unsigned int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int8x16_t v16[4];
  _OWORD v17[60];
  _BYTE v18[64];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v7 = a3;
    v9 = result;
    memset(v17, 0, 512);
    aes_nohw_expand_round_keys((unint64_t)v17, a4);
    v19 = *a5;
    v20 = v19;
    v21 = v19;
    v22 = v19;
    for (i = bswap32(HIDWORD(v19)); ; i += 4)
    {
      HIDWORD(v19) = bswap32(i);
      HIDWORD(v20) = bswap32(i + 1);
      HIDWORD(v21) = bswap32(i + 2);
      HIDWORD(v22) = bswap32(i + 3);
      v11 = v7 >= 4 ? 4 : v7;
      memset(v16, 0, sizeof(v16));
      aes_nohw_to_batch((unint64_t)v16, (unint64_t)&v19, v11);
      aes_nohw_encrypt_batch(v17, *(unsigned int *)(a4 + 240), v16);
      result = aes_nohw_from_batch((uint64_t)v18, v11, (uint64_t)v16);
      v12 = 0;
      v13 = v11;
      do
      {
        v14 = (_QWORD *)(a2 + v12);
        v15 = *(_QWORD *)&v18[v12 + 8];
        *v14 = *(_QWORD *)&v18[v12] ^ *(_QWORD *)(v9 + v12);
        v14[1] = v15 ^ *(_QWORD *)(v9 + v12 + 8);
        v12 += 16;
        --v13;
      }
      while (v13);
      v7 -= v11;
      if (!v7)
        break;
      v9 += 64;
      a2 += 64;
    }
  }
  return result;
}

double aes_nohw_cbc_encrypt(int8x16_t *a1, int8x16_t *a2, unint64_t a3, unint64_t a4, int8x16_t *a5, int a6)
{
  unint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  double result;
  unint64_t v15;
  int8x16_t v16[4];
  _OWORD v17[60];
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  __int128 v21;
  int8x16_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a3 >= 0x10)
  {
    v11 = a3 >> 4;
    memset(v17, 0, 512);
    aes_nohw_expand_round_keys((unint64_t)v17, a4);
    v22 = *a5;
    if (a6)
    {
      do
      {
        v12 = *a1++;
        v21 = 0u;
        v22 = veorq_s8(v12, v22);
        v19 = 0u;
        v20 = 0u;
        v18 = 0u;
        aes_nohw_to_batch((unint64_t)&v18, (unint64_t)&v22, 1);
        aes_nohw_encrypt_batch(v17, *(unsigned int *)(a4 + 240), &v18);
        aes_nohw_from_batch((uint64_t)a2, 1, (uint64_t)&v18);
        v13 = *a2++;
        v22 = v13;
        --v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        if (v11 >= 4)
          v15 = 4;
        else
          v15 = v11;
        __memcpy_chk();
        memset(v16, 0, sizeof(v16));
        aes_nohw_to_batch((unint64_t)v16, (unint64_t)a1, v15);
        aes_nohw_decrypt_batch(v17, *(unsigned int *)(a4 + 240), v16);
        aes_nohw_from_batch((uint64_t)a2, v15, (uint64_t)v16);
        *a2 = veorq_s8(v22, *a2);
        if (v15 > 1)
        {
          a2[1] = veorq_s8(v18, a2[1]);
          if (v15 != 2)
          {
            a2[2] = veorq_s8(v19, a2[2]);
            if (v15 != 3)
              a2[3] = veorq_s8(v20, a2[3]);
          }
        }
        v22 = *(&v18 + v15 - 1);
        a1 += 4;
        a2 += 4;
        v11 -= v15;
      }
      while (v11);
    }
    result = *(double *)v22.i64;
    *a5 = v22;
  }
  return result;
}

uint64_t *aes_nohw_sub_bytes(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v1 = result[6];
  v2 = result[7];
  v3 = result[4];
  v4 = result[2];
  v5 = v4 ^ v3;
  v6 = result[1];
  v7 = v6 ^ v2;
  v8 = v3 ^ v2;
  v9 = v4 ^ v2;
  v10 = result[5] ^ v1;
  v11 = *result ^ v10;
  v12 = v11 ^ v3;
  v13 = v6 ^ v2 ^ v5;
  v63 = v11 ^ v2;
  v14 = v11 ^ v6;
  v15 = v14 ^ v4 ^ v2;
  v16 = v13 ^ result[3];
  v17 = v16 ^ v4;
  v18 = v16 ^ v1;
  v19 = v17 ^ v10;
  v20 = v18 ^ v8;
  v21 = v18 ^ v8 ^ *result;
  v22 = v18 ^ v8 ^ v17 ^ v10;
  v23 = v18 ^ v8 ^ v10;
  v24 = (v18 ^ v8) & v8;
  v25 = v22 & v5 ^ v24;
  v26 = v24 ^ v19 & v9;
  v27 = v18 ^ v17 & v13 ^ (v17 ^ *result) & v15 ^ v25;
  v28 = v12 & *result ^ v9 ^ v17 & v13 ^ v19 ^ v26;
  v29 = v14 & v11 ^ v7 ^ v23 & v7 ^ v25;
  v30 = v21 & (v11 ^ v2) ^ v2 ^ v23 & v7 ^ v26;
  v31 = v30 ^ v23;
  v32 = v27 ^ v28;
  v33 = (v29 ^ v23) & v27;
  v34 = v33 ^ v30 ^ v23;
  v35 = v34 & v32 ^ v28;
  v36 = (v33 ^ v28) & (v30 ^ v29);
  v37 = v36 ^ v31;
  v38 = (v36 ^ v33) & v31;
  v39 = v38 ^ v29 ^ v23;
  v40 = (v38 ^ v34) & v35 ^ v32;
  v41 = v40 ^ v39 ^ v37;
  v42 = v41 ^ v37 ^ v35;
  v43 = (v39 ^ v37) & (v17 ^ *result);
  v44 = v37 & *result;
  v45 = (v40 ^ v35) & v23;
  v46 = v40 & v11;
  v47 = v35 & v21;
  v48 = v42 & v22;
  v49 = (v39 ^ v37) & v15;
  v50 = (v40 ^ v35) & v7;
  v51 = v42 & v5;
  v52 = v51 ^ (v37 ^ v35) & v8;
  v53 = v49 ^ v37 & v12;
  v54 = v40 & v14 ^ v47;
  v55 = v49 ^ v39 & v13;
  v56 = v45 ^ v39 & v17;
  v57 = v50 ^ v44 ^ v56;
  v58 = v45 ^ (v37 ^ v35) & v20 ^ v48;
  v59 = v48 ^ v41 & v19 ^ v52 ^ v46;
  v60 = v55 ^ v52 ^ v46;
  v61 = v58 ^ v46;
  v62 = v57 ^ v35 & v63 ^ v59;
  *result = v54 ^ v52 ^ ~v57;
  result[1] = v54 ^ v50 ^ ~v59;
  result[2] = v53 ^ v62;
  result[3] = v47 ^ v44 ^ v60 ^ v43;
  result[4] = v60 ^ v43 ^ v56;
  result[5] = v61 ^ v41 & v9 ^ v51 ^ ~v62;
  result[6] = v61 ^ ~(v60 ^ v43 ^ v56);
  result[7] = v60 ^ v58;
  return result;
}

int8x16_t aes_nohw_shift_rows(int8x16_t *a1)
{
  int8x16_t v1;
  int8x16_t v2;
  int8x16_t v3;
  int64x2_t v4;
  int8x16_t v5;
  int64x2_t v6;
  int8x16_t v7;
  int64x2_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int8x16_t result;

  v1.i64[0] = 0xF000F000F000FLL;
  v1.i64[1] = 0xF000F000F000FLL;
  v2 = a1[1];
  v3.i64[0] = 0xF000F000F000F0;
  v3.i64[1] = 0xF000F000F000F0;
  v4 = (int64x2_t)vandq_s8(*a1, v3);
  v5.i64[0] = 0xF000F000F000F00;
  v5.i64[1] = 0xF000F000F000F00;
  v6 = (int64x2_t)vandq_s8(*a1, v5);
  v7.i64[0] = 0xF000F000F000F000;
  v7.i64[1] = 0xF000F000F000F000;
  v8 = (int64x2_t)vandq_s8(*a1, v7);
  v9 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v6, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v6, 0x20uLL)), vandq_s8(*a1, v1)), vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v8, 0x10uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v8, 0x30uLL)), vorrq_s8((int8x16_t)vshlq_n_s64(v4, 0x30uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v4, 0x10uLL))));
  v10 = vandq_s8(v2, v1);
  v11 = (int64x2_t)vandq_s8(v2, v3);
  v12 = (int64x2_t)vandq_s8(v2, v5);
  v13 = (int64x2_t)vandq_s8(v2, v7);
  *a1 = v9;
  a1[1] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v12, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v12, 0x20uLL)), v10), vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v13, 0x10uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v13, 0x30uLL)), vorrq_s8((int8x16_t)vshlq_n_s64(v11, 0x30uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v11, 0x10uLL))));
  v14 = a1[2];
  v15 = a1[3];
  v16 = (int64x2_t)vandq_s8(v14, v3);
  v17 = (int64x2_t)vandq_s8(v14, v5);
  v18 = (int64x2_t)vandq_s8(v14, v7);
  v19 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v17, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v17, 0x20uLL)), vandq_s8(v14, v1)), vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v18, 0x10uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v18, 0x30uLL)), vorrq_s8((int8x16_t)vshlq_n_s64(v16, 0x30uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v16, 0x10uLL))));
  v20 = vandq_s8(v15, v1);
  v21 = (int64x2_t)vandq_s8(v15, v3);
  v22 = (int64x2_t)vandq_s8(v15, v5);
  v23 = (int64x2_t)vandq_s8(v15, v7);
  result = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v22, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v22, 0x20uLL)), v20), vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v23, 0x10uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v23, 0x30uLL)), vorrq_s8((int8x16_t)vshlq_n_s64(v21, 0x30uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v21, 0x10uLL))));
  a1[2] = v19;
  a1[3] = result;
  return result;
}

int8x16_t aes_nohw_mix_columns(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int8x16_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int8x16_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (*(_QWORD *)a1 >> 4) & 0xFFF0FFF0FFF0FFFLL | (*(_QWORD *)a1 << 12) & 0xF000F000F000F000;
  v5 = v4 ^ *(_QWORD *)a1;
  v6 = (v1 >> 4) & 0xFFF0FFF0FFF0FFFLL | (v1 << 12) & 0xF000F000F000F000;
  v7 = v6 ^ v1;
  v8 = (v2 >> 4) & 0xFFF0FFF0FFF0FFFLL | (v2 << 12) & 0xF000F000F000F000;
  v9 = v8 ^ v2;
  v10 = (v3 >> 4) & 0xFFF0FFF0FFF0FFFLL | (v3 << 12) & 0xF000F000F000F000;
  v11 = v10 ^ v3;
  v12 = *(int64x2_t *)(a1 + 16);
  v13 = *(int64x2_t *)(a1 + 32);
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  v15 = (int64x2_t)vbslq_s8(v14, (int8x16_t)vshrq_n_u64((uint64x2_t)v12, 4uLL), (int8x16_t)vshlq_n_s64(v12, 0xCuLL));
  v16 = (int64x2_t)veorq_s8((int8x16_t)v15, (int8x16_t)v12);
  v17 = vdupq_laneq_s64(v16, 1);
  v18 = (int64x2_t)vbslq_s8(v14, (int8x16_t)vshrq_n_u64((uint64x2_t)v13, 4uLL), (int8x16_t)vshlq_n_s64(v13, 0xCuLL));
  *(_QWORD *)a1 = __rev16(v5) ^ v4 ^ v11;
  *(_QWORD *)(a1 + 8) = v5 ^ v6 ^ __rev16(v7) ^ v11;
  v19 = veorq_s8(veorq_s8((int8x16_t)vzip1q_s64(vdupq_laneq_s64(v15, 1), v18), (int8x16_t)vdupq_n_s64(v11)), (int8x16_t)v16);
  *(_QWORD *)(a1 + 16) = __rev16(v16.u64[0]) ^ v15.i64[0] ^ v7;
  v20 = (int64x2_t)veorq_s8((int8x16_t)v18, (int8x16_t)v13);
  v21 = vzip1q_s64(v17, v20);
  v17.i64[0] = 0xFF00FF00FF00FFLL;
  v17.i64[1] = 0xFF00FF00FF00FFLL;
  *(int8x16_t *)(a1 + 24) = veorq_s8(vbslq_s8((int8x16_t)v17, (int8x16_t)vshrq_n_u64((uint64x2_t)v21, 8uLL), (int8x16_t)vshlq_n_s64(v21, 8uLL)), v19);
  v21.i64[0] = vdupq_laneq_s64(v20, 1).u64[0];
  v21.i64[1] = v9;
  v15.i64[0] = vdupq_laneq_s64(v18, 1).u64[0];
  v15.i64[1] = v8;
  result = veorq_s8(vbslq_s8((int8x16_t)v17, (int8x16_t)vshrq_n_u64((uint64x2_t)v21, 8uLL), (int8x16_t)vshlq_n_s64(v21, 8uLL)), veorq_s8((int8x16_t)v15, (int8x16_t)v20));
  *(int8x16_t *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 56) = v9 ^ v10 ^ __rev16(v11);
  return result;
}

int8x16_t aes_nohw_inv_shift_rows(int8x16_t *a1)
{
  int8x16_t v1;
  int8x16_t v2;
  int8x16_t v3;
  int64x2_t v4;
  int8x16_t v5;
  int64x2_t v6;
  int8x16_t v7;
  int64x2_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int8x16_t result;

  v1.i64[0] = 0xF000F000F000FLL;
  v1.i64[1] = 0xF000F000F000FLL;
  v2 = a1[1];
  v3.i64[0] = 0xF000F000F000F0;
  v3.i64[1] = 0xF000F000F000F0;
  v4 = (int64x2_t)vandq_s8(*a1, v3);
  v5.i64[0] = 0xF000F000F000F00;
  v5.i64[1] = 0xF000F000F000F00;
  v6 = (int64x2_t)vandq_s8(*a1, v5);
  v7.i64[0] = 0xF000F000F000F000;
  v7.i64[1] = 0xF000F000F000F000;
  v8 = (int64x2_t)vandq_s8(*a1, v7);
  v9 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v6, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v6, 0x20uLL)), vandq_s8(*a1, v1)), vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v8, 0x30uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v8, 0x10uLL)), vorrq_s8((int8x16_t)vshlq_n_s64(v4, 0x10uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v4, 0x30uLL))));
  v10 = vandq_s8(v2, v1);
  v11 = (int64x2_t)vandq_s8(v2, v3);
  v12 = (int64x2_t)vandq_s8(v2, v5);
  v13 = (int64x2_t)vandq_s8(v2, v7);
  *a1 = v9;
  a1[1] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v12, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v12, 0x20uLL)), v10), vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v13, 0x30uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v13, 0x10uLL)), vorrq_s8((int8x16_t)vshlq_n_s64(v11, 0x10uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v11, 0x30uLL))));
  v14 = a1[2];
  v15 = a1[3];
  v16 = (int64x2_t)vandq_s8(v14, v3);
  v17 = (int64x2_t)vandq_s8(v14, v5);
  v18 = (int64x2_t)vandq_s8(v14, v7);
  v19 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v17, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v17, 0x20uLL)), vandq_s8(v14, v1)), vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v18, 0x30uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v18, 0x10uLL)), vorrq_s8((int8x16_t)vshlq_n_s64(v16, 0x10uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v16, 0x30uLL))));
  v20 = vandq_s8(v15, v1);
  v21 = (int64x2_t)vandq_s8(v15, v3);
  v22 = (int64x2_t)vandq_s8(v15, v5);
  v23 = (int64x2_t)vandq_s8(v15, v7);
  result = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v22, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v22, 0x20uLL)), v20), vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v23, 0x30uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v23, 0x10uLL)), vorrq_s8((int8x16_t)vshlq_n_s64(v21, 0x10uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v21, 0x30uLL))));
  a1[2] = v19;
  a1[3] = result;
  return result;
}

uint64_t x509_digest_verify_init(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  char *v9;
  int v10;
  _DWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  const EVP_MD *v16;

  v6 = OBJ_obj2nid(*(const ASN1_OBJECT **)a2);
  if (v6 > 792)
  {
    switch(v6)
    {
      case 793:
        v7 = 12;
        break;
      case 794:
        v7 = 13;
        break;
      case 795:
        v7 = 14;
        break;
      case 796:
        v7 = 15;
        break;
      case 797:
      case 798:
      case 799:
      case 800:
      case 801:
        goto LABEL_22;
      case 802:
        v7 = 9;
        break;
      case 803:
        v7 = 10;
        break;
      default:
        if (v6 == 912)
        {
          v7 = 16;
        }
        else
        {
          if (v6 != 949)
            goto LABEL_22;
          v7 = 17;
        }
        break;
    }
  }
  else if (v6 > 395)
  {
    switch(v6)
    {
      case 668:
        v7 = 4;
        break;
      case 669:
        v7 = 5;
        break;
      case 670:
        v7 = 6;
        break;
      case 671:
        v7 = 3;
        break;
      default:
        if (v6 == 396)
        {
          v7 = 0;
        }
        else
        {
          if (v6 != 416)
            goto LABEL_22;
          v7 = 11;
        }
        break;
    }
  }
  else if (v6 > 69)
  {
    if (v6 == 70)
    {
      v7 = 8;
    }
    else
    {
      if (v6 != 113)
        goto LABEL_22;
      v7 = 7;
    }
  }
  else
  {
    if (v6 != 8)
    {
      if (v6 == 65)
      {
        v7 = 2;
        goto LABEL_33;
      }
LABEL_22:
      ERR_put_error(12, 0, 184, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/algorithm.c", 128);
      return 0;
    }
    v7 = 1;
  }
LABEL_33:
  v9 = (char *)&kTriples + 12 * v7;
  if (*((_DWORD *)v9 + 2) != *(_DWORD *)(a3 + 4))
  {
    ERR_put_error(12, 0, 189, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/algorithm.c", 134);
    return 0;
  }
  v10 = *((_DWORD *)v9 + 1);
  if (v10)
  {
    if (v10 == 257 || v10 == 4)
    {
      ERR_put_error(12, 0, 111, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/algorithm.c", 140);
      return 0;
    }
    v12 = *(_DWORD **)(a2 + 8);
    if (v12 && *v12 != 5)
    {
      ERR_put_error(11, 0, 136, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/algorithm.c", 166);
      return 0;
    }
    if (v10 <= 256)
    {
      switch(v10)
      {
        case 4:
          v13 = 1;
          break;
        case 64:
          v13 = 2;
          break;
        case 114:
          v13 = 8;
          break;
        default:
LABEL_71:
          ERR_put_error(12, 0, 183, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/algorithm.c", 173);
          return 0;
      }
    }
    else
    {
      switch(v10)
      {
        case 672:
          v13 = 4;
          break;
        case 673:
          v13 = 5;
          break;
        case 674:
          v13 = 6;
          break;
        case 675:
          v13 = 3;
          break;
        default:
          if (v10 == 257)
          {
            v13 = 0;
          }
          else
          {
            if (v10 != 962)
              goto LABEL_71;
            v13 = 7;
          }
          break;
      }
    }
    v16 = (*((const EVP_MD *(**)(void))&nid_to_digest_mapping + 4 * v13 + 1))();
    if (v16)
    {
      v15 = (uint64_t)v16;
      v14 = a1;
      return do_sigver_init(v14, 0, v15, 0, a3, 1);
    }
    goto LABEL_71;
  }
  if (v6 == 949)
  {
    if (*(_QWORD *)(a2 + 8))
    {
      ERR_put_error(11, 0, 136, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/algorithm.c", 151);
      return 0;
    }
    v14 = a1;
    v15 = 0;
    return do_sigver_init(v14, 0, v15, 0, a3, 1);
  }
  if (v6 == 912)
    return x509_rsa_pss_to_ctx(a1, a2, a3);
  ERR_put_error(12, 0, 184, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/algorithm.c", 156);
  return 0;
}

uint64_t CBB_finish_i2d(uint64_t a1, void **a2)
{
  size_t v3;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  size_t v18;

  if (*(_BYTE *)(a1 + 8))
  {
    ERR_put_error(14, 0, 66, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bytestring/cbb.c", 127);
    goto LABEL_3;
  }
  if (!CBB_flush((uint64_t *)a1))
  {
LABEL_3:
    if (*(_BYTE *)(a1 + 8))
      return 0xFFFFFFFFLL;
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      v11 = *(_QWORD *)(a1 + 16);
      if (v11)
      {
        v13 = *(_QWORD *)(v11 - 8);
        v12 = (void *)(v11 - 8);
        v14 = v13 + 8;
        if (v13 != -8)
          bzero(v12, v14);
        v10 = v12;
LABEL_17:
        free(v10);
        return 0xFFFFFFFFLL;
      }
    }
    return 0xFFFFFFFFLL;
  }
  v6 = *(_QWORD **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3 >> 31)
  {
    if (v6)
    {
      v8 = *(v6 - 1);
      v7 = (char *)(v6 - 1);
      v9 = v8 + 8;
      if (v8 != -8)
        bzero(v7, v9);
      v10 = v7;
      goto LABEL_17;
    }
    return 0xFFFFFFFFLL;
  }
  if (a2)
  {
    v15 = (char *)*a2;
    if (!*a2)
    {
      *a2 = v6;
      return v3;
    }
    if (v3)
    {
      memcpy(v15, v6, v3);
      v15 = (char *)*a2;
    }
    *a2 = &v15[v3];
  }
  if (!v6)
    return v3;
  v17 = *(v6 - 1);
  v16 = (char *)(v6 - 1);
  v18 = v17 + 8;
  if (v17 != -8)
    bzero(v16, v18);
  free(v16);
  return v3;
}

ASN1_TYPE *__cdecl ASN1_generate_v3(char *str, X509V3_CTX *cnf)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  ASN1_VALUE *v9;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  void *v17[2];
  int v18[4];
  uint64_t v19;
  ASN1_VALUE *pval;

  v19 = 0;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v18 = 0u;
  v4 = malloc_type_malloc(8uLL, 0x30772F57uLL);
  if (v4)
  {
    *v4 = 0;
    v5 = v4 + 1;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    v5 = 0;
  }
  LOBYTE(v17[0]) = 0;
  v16 = 0;
  memset(v18, 0, sizeof(v18));
  v17[1] = v5;
  LOBYTE(v19) = 1;
  if (generate_v3(&v16, str, cnf, 1, 0))
  {
    if (LOBYTE(v17[0]))
    {
      v6 = *(_QWORD *)v18 + LOBYTE(v18[2]);
      v7 = *((_QWORD *)v17[1] + 1) - v6;
      if (v7 <= 0x10000)
      {
        v8 = (unsigned __int8 *)(*(_QWORD *)v17[1] + v6);
LABEL_17:
        v15 = v8;
        pval = 0;
        if ((int)asn1_item_ex_d2i((uint64_t)&pval, &v15, v7, (uint64_t)&ASN1_OBJECT_it.sname, -1, 0, 0, 0, 0) <= 0)
        {
          ASN1_item_ex_free(&pval, (const ASN1_ITEM *)&ASN1_OBJECT_it.sname);
          v9 = pval;
          if (LOBYTE(v17[0]))
            return (ASN1_TYPE *)v9;
        }
        else
        {
          v9 = pval;
          if (LOBYTE(v17[0]))
            return (ASN1_TYPE *)v9;
        }
        if ((v19 & 1) != 0 && v17[1])
        {
          v14 = (char *)v17[1] - 8;
          v13 = *((_QWORD *)v17[1] - 1);
          if (v13 != -8)
            bzero(v14, v13 + 8);
          free(v14);
          return (ASN1_TYPE *)v9;
        }
        return (ASN1_TYPE *)v9;
      }
    }
    else
    {
      v7 = *(_QWORD *)v18;
      if (*(_QWORD *)v18 <= 0x10000uLL)
      {
        v8 = (unsigned __int8 *)v17[1];
        goto LABEL_17;
      }
    }
    ERR_put_error(12, 0, 177, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/asn1_gen.c", 115);
    if (LOBYTE(v17[0]))
      return 0;
    if ((v19 & 1) == 0)
      return 0;
  }
  else
  {
    if (LOBYTE(v17[0]))
      return 0;
    if ((v19 & 1) == 0)
      return 0;
  }
  v9 = (ASN1_VALUE *)v17[1];
  if (!v17[1])
    return (ASN1_TYPE *)v9;
  v12 = (char *)v17[1] - 8;
  v11 = *((_QWORD *)v17[1] - 1);
  if (v11 != -8)
    bzero(v12, v11 + 8);
  free(v12);
  return 0;
}

uint64_t generate_v3(uint64_t *a1, char *a2, X509V3_CTX *a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  _BOOL8 v7;
  int v11;
  int v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  int v17;
  char *v19;
  unsigned __int16 *v20;
  size_t v21;
  char *v23;
  unint64_t v24;
  int v26;
  int v27;
  int v29;
  int v30;
  int v32;
  int v33;
  int v39;
  int v40;
  BOOL v41;
  char *v42;
  char *v43;
  size_t v44;
  char *v45;
  unint64_t v46;
  int *v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  int v53;
  int v54;
  uint64_t *v55;
  int v56;
  uint64_t *v57;
  STACK *section;
  STACK *v59;
  unint64_t v60;
  ASN1_INTEGER *v61;
  ASN1_BIT_STRING *v62;
  int v63;
  int v64;
  size_t v65;
  int v66;
  char v67;
  ASN1_BIT_STRING *v68;
  int v69;
  int v70;
  ASN1_OBJECT *v71;
  ASN1_OBJECT *v72;
  size_t length;
  size_t v74;
  _QWORD *v75;
  _QWORD *v76;
  __int128 pp;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _BYTE *v84;

  if (a5 > 50)
  {
    v5 = 131;
    v6 = 194;
    goto LABEL_3;
  }
  v11 = 0;
  while (2)
  {
    v12 = *a2;
    if (*a2)
    {
      v13 = a2;
      do
      {
        if (v12 != 32 && (v12 - 14) < 0xFFFFFFFB)
          break;
        v14 = *++v13;
        v12 = v14;
      }
      while (v14);
    }
    else
    {
      v13 = a2;
    }
    v15 = strchr(v13, 44);
    if (!v15)
      goto LABEL_88;
    *(_QWORD *)&pp = v13;
    *((_QWORD *)&pp + 1) = v15 - v13;
    if (v15 == v13)
    {
LABEL_23:
      v23 = 0;
      a2 = v15 + 1;
LABEL_24:
      v19 = 0;
      v20 = 0;
      pp = 0uLL;
      v21 = (size_t)v23;
      goto LABEL_25;
    }
    v16 = v15;
    while (1)
    {
      v17 = *(v16 - 1);
      if (v17 != 32 && (v17 - 14) <= 0xFFFFFFFA)
        break;
      if (--v16 == v13)
        goto LABEL_23;
    }
    a2 = v15 + 1;
    v23 = (char *)(v16 - v13);
    v24 = (unint64_t)memchr(v13, 58, v16 - v13);
    if (!v24)
      goto LABEL_24;
    v21 = v24 - (_QWORD)v13;
    if ((unint64_t)v23 < v24 - (unint64_t)v13)
      goto LABEL_24;
    v19 = &v16[-v24];
    v20 = (unsigned __int16 *)v24;
    *(_QWORD *)&pp = v24;
    *((_QWORD *)&pp + 1) = &v16[-v24];
    if (v16 != (char *)v24)
    {
      v20 = (unsigned __int16 *)(v24 + 1);
      v19 = &v16[~v24];
      *(_QWORD *)&pp = v24 + 1;
      *((_QWORD *)&pp + 1) = v19;
    }
LABEL_25:
    switch(v21)
    {
      case 3uLL:
        if (*(_WORD *)v13 == 19785 && v13[2] == 80)
          goto LABEL_50;
        if (*(_WORD *)v13 == 22597 && v13[2] == 80)
          goto LABEL_114;
        v21 = 3;
        if (!cbs_str_equal(v13, 3uLL, "SEQWRAP"))
          goto LABEL_86;
        goto LABEL_106;
      case 4uLL:
        if (*(_DWORD *)v13 == 1297239878)
          goto LABEL_42;
        v21 = 4;
        if (!cbs_str_equal(v13, 4uLL, "SEQWRAP"))
          goto LABEL_86;
        goto LABEL_106;
      case 6uLL:
        if (*(_DWORD *)v13 == 1297239878 && *((_WORD *)v13 + 2) == 21569)
        {
LABEL_42:
          switch((unint64_t)v19)
          {
            case 3uLL:
              v26 = *v20;
              v27 = *((unsigned __int8 *)v20 + 2);
              if (v26 != 17736 || v27 != 88)
                goto LABEL_67;
              a4 = 3;
              continue;
            case 4uLL:
              if (*(_DWORD *)v20 != 944133205)
                goto LABEL_67;
              a4 = 2;
              continue;
            case 5uLL:
              v29 = *(_DWORD *)v20;
              v30 = *((unsigned __int8 *)v20 + 4);
              if (v29 != 1229148993 || v30 != 73)
                goto LABEL_67;
              a4 = 1;
              continue;
            case 7uLL:
              v32 = *(_DWORD *)v20;
              v33 = *(_DWORD *)((char *)v20 + 3);
              if (v32 != 1280592194 || v33 != 1414744396)
                goto LABEL_67;
              a4 = 4;
              continue;
            default:
LABEL_67:
              v5 = 182;
              v6 = 250;
              goto LABEL_3;
          }
        }
        v21 = 6;
        goto LABEL_105;
      case 7uLL:
        if (*(_DWORD *)v13 == 1465140047 && *(_DWORD *)(v13 + 3) == 1346458199)
        {
          v52 = 0uLL;
          v83 = 0u;
          if (v11)
            v53 = v11;
          else
            v53 = 4;
          goto LABEL_121;
        }
        if (*(_DWORD *)v13 != 1465141570 || *(_DWORD *)(v13 + 3) != 1346458199)
        {
          v21 = 7;
          if (cbs_str_equal(v13, 7uLL, "SEQWRAP"))
            goto LABEL_106;
          goto LABEL_86;
        }
        v82 = 0u;
        v83 = 0u;
        if (v11)
          v56 = v11;
        else
          v56 = 3;
        v81 = 0uLL;
        v55 = a1;
        if (CBB_add_asn1(a1, (uint64_t)&v81, v56))
        {
          v84 = 0;
          if (CBB_add_space((uint64_t)&v81, &v84, 1))
          {
            *v84 = 0;
            goto LABEL_129;
          }
        }
        return 0;
      case 8uLL:
        if (*(_QWORD *)v13 == 0x544943494C504D49)
        {
LABEL_50:
          if (v11)
          {
            v5 = 131;
            v6 = 256;
            goto LABEL_3;
          }
          v11 = parse_tag((unsigned __int8 **)&pp);
          if (!v11)
            return 0;
          continue;
        }
        if (*(_QWORD *)v13 == 0x544943494C505845)
        {
LABEL_114:
          if (v11)
          {
            v5 = 131;
            v6 = 268;
LABEL_3:
            ERR_put_error(12, 0, v5, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/asn1_gen.c", v6);
          }
          else
          {
            v54 = parse_tag((unsigned __int8 **)&pp);
            if (v54)
            {
              v52 = 0uLL;
              v83 = 0u;
              v53 = v54 | 0x20000000;
LABEL_121:
              v81 = v52;
              v82 = v52;
              v55 = a1;
              if (CBB_add_asn1(a1, (uint64_t)&v81, v53))
              {
LABEL_129:
                if (generate_v3(&v81, a2, a3, a4, (a5 + 1)))
                {
                  v57 = v55;
                  return CBB_flush(v57) != 0;
                }
              }
            }
          }
          return 0;
        }
        v21 = 8;
        if (cbs_str_equal(v13, 8uLL, "SEQWRAP"))
        {
LABEL_106:
          v39 = v11 | 0x20000000;
          v41 = v11 == 0;
          v40 = 536870928;
LABEL_107:
          if (v41)
            v51 = v40;
          else
            v51 = v39;
          return generate_wrapped(a1, (uint64_t)a2, (uint64_t)a3, v51, 0, a4, a5);
        }
LABEL_86:
        if (cbs_str_equal(v13, v21, "SETWRAP"))
        {
          v39 = v11 | 0x20000000;
          v40 = 536870929;
          v41 = v11 == 0;
          goto LABEL_107;
        }
LABEL_88:
        v42 = strchr(v13, 58);
        v43 = v42;
        if (v42)
        {
          v44 = v42 - v13;
          v45 = v42 + 1;
          if (v42 == v13)
          {
LABEL_104:
            v5 = 185;
            v6 = 356;
            goto LABEL_3;
          }
        }
        else
        {
          v44 = strlen(v13);
          v45 = &byte_208EB9246;
          if (!v44)
            goto LABEL_104;
        }
        v46 = -11;
        v47 = &dword_24C0C69C0;
        while (strlen(*((const char **)v47 - 1)) != v44 || memcmp(v13, *((const void **)v47 - 1), v44))
        {
          ++v46;
          v47 += 4;
          if (v46 == 22)
            goto LABEL_104;
        }
        v48 = *v47;
        v82 = 0u;
        v83 = 0u;
        if (v11)
          v49 = v48 & 0x20000000 | v11;
        else
          v49 = v48;
        v81 = 0uLL;
        if (!CBB_add_asn1(a1, (uint64_t)&v81, v49))
          return 0;
        switch((int)v48)
        {
          case 1:
            if ((_DWORD)a4 != 1)
            {
              v5 = 161;
              v6 = 377;
              goto LABEL_3;
            }
            LODWORD(v84) = 0;
            if (!X509V3_BOOL_from_string(v45, &v84))
            {
              v5 = 125;
              v6 = 382;
              goto LABEL_3;
            }
            v66 = (int)v84;
            *(_QWORD *)&pp = 0;
            if (!CBB_add_space((uint64_t)&v81, &pp, 1))
              return 0;
            if (v66)
              v67 = -1;
            else
              v67 = 0;
            *(_BYTE *)pp = v67;
            v57 = a1;
            return CBB_flush(v57) != 0;
          case 2:
          case 10:
            if ((_DWORD)a4 != 1)
            {
              v5 = 139;
              v6 = 391;
              goto LABEL_3;
            }
            v61 = s2i_ASN1_INTEGER(0, v45);
            if (!v61)
            {
              v5 = 130;
              v6 = 396;
              goto LABEL_3;
            }
            v62 = v61;
            v63 = i2c_ASN1_INTEGER(v61, 0);
            *(_QWORD *)&pp = 0;
            if (v63 < 1
              || (v64 = v63, !CBB_add_space((uint64_t)&v81, &pp, v63))
              || i2c_ASN1_INTEGER(v62, (unsigned __int8 **)&pp) != v64)
            {
              v7 = 0;
              goto LABEL_188;
            }
            goto LABEL_142;
          case 3:
            if ((_DWORD)a4 == 4)
            {
              v68 = ASN1_BIT_STRING_new();
              if (!v68)
                return 0;
              v62 = v68;
              if (!CONF_parse_list(v45, 44, 1, (int (__cdecl *)(const char *, int, void *))bitstr_cb, v68))
              {
                ERR_put_error(12, 0, 151, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/asn1_gen.c", 483);
                ASN1_STRING_free((BUF_MEM *)v62);
                return 0;
              }
              v69 = i2c_ASN1_BIT_STRING(v62, 0);
              *(_QWORD *)&pp = 0;
              if (v69 >= 1
                && (v70 = v69, CBB_add_space((uint64_t)&v81, &pp, v69))
                && i2c_ASN1_BIT_STRING(v62, (unsigned __int8 **)&pp) == v70)
              {
LABEL_142:
                v7 = CBB_flush(a1) != 0;
              }
              else
              {
                v7 = 0;
              }
LABEL_188:
              ASN1_STRING_free((BUF_MEM *)v62);
            }
            else
            {
              *(_QWORD *)&pp = 0;
              if (!CBB_add_space((uint64_t)&v81, &pp, 1))
                return 0;
              *(_BYTE *)pp = 0;
LABEL_192:
              if ((_DWORD)a4 != 3)
              {
                if ((_DWORD)a4 == 1)
                  goto LABEL_194;
                v5 = 124;
                v6 = 521;
                goto LABEL_3;
              }
              *(_QWORD *)&pp = 0;
              v75 = x509v3_hex_to_bytes(v45, &pp);
              if (!v75)
              {
                v5 = 128;
                v6 = 513;
                goto LABEL_3;
              }
              v76 = v75;
              if (CBB_add_bytes((uint64_t)&v81, v75, pp))
                v7 = CBB_flush(a1) != 0;
              else
                v7 = 0;
              OPENSSL_free(v76);
            }
            return v7;
          case 4:
            goto LABEL_192;
          case 5:
            if (!*v45)
              return CBB_flush(a1);
            v5 = 133;
            v6 = 370;
            goto LABEL_3;
          case 6:
            if ((_DWORD)a4 != 1)
            {
              v5 = 165;
              v6 = 411;
              goto LABEL_3;
            }
            v71 = OBJ_txt2obj(v45, 0);
            if (!v71 || (v72 = v71, length = v71->length, !(_DWORD)length))
            {
              v5 = 134;
              v6 = 416;
              goto LABEL_3;
            }
            if (CBB_add_bytes((uint64_t)&v81, v71->data, length))
              v7 = CBB_flush(a1) != 0;
            else
              v7 = 0;
            ASN1_OBJECT_free(v72);
            return v7;
          case 7:
          case 8:
          case 9:
          case 11:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 21:
          case 25:
          case 26:
          case 27:
          case 29:
            goto LABEL_157;
          case 12:
          case 19:
          case 20:
          case 22:
          case 28:
          case 30:
            if ((_DWORD)a4 == 1)
            {
              v50 = 4097;
            }
            else
            {
              if ((_DWORD)a4 != 2)
              {
                v5 = 127;
                v6 = 457;
                goto LABEL_3;
              }
              v50 = 4096;
            }
            *(_QWORD *)&pp = 0;
            if (ASN1_mbstring_ncopy((ASN1_STRING **)&pp, (const unsigned __int8 *)v45, -1, v50, tag2bit[v48], 0, 0x10000) < 1)return 0;
            if (CBB_add_bytes((uint64_t)&v81, *(const void **)(pp + 8), *(int *)pp))
              v7 = CBB_flush(a1) != 0;
            else
              v7 = 0;
            ASN1_STRING_free((BUF_MEM *)pp);
            return v7;
          case 23:
          case 24:
            if ((_DWORD)a4 != 1)
            {
              v5 = 176;
              v6 = 427;
              goto LABEL_3;
            }
            v65 = strlen(v45);
            *(_QWORD *)&pp = v45;
            *((_QWORD *)&pp + 1) = v65;
            if (!CBS_parse_rfc5280_time_internal(&pp, v46 < 0xFFFFFFFFFFFFFFFELL, 0, 0))
            {
              v5 = 138;
              v6 = 438;
              goto LABEL_3;
            }
LABEL_194:
            v74 = strlen(v45);
            if (CBB_add_bytes((uint64_t)&v81, v45, v74))
              goto LABEL_195;
            return 0;
          default:
            if ((v48 - 536870928) >= 2)
            {
LABEL_157:
              v5 = 68;
              v6 = 558;
              goto LABEL_3;
            }
            if (!v43)
              goto LABEL_183;
            if (!a3)
            {
              v5 = 170;
              v6 = 528;
              goto LABEL_3;
            }
            section = X509V3_get_section(a3, v45);
            if (!section)
            {
              v5 = 170;
              v6 = 533;
              goto LABEL_3;
            }
            v59 = section;
            v60 = 0;
            while (v60 < *(_QWORD *)&v59->num)
            {
              if (!generate_v3(&v81, *((_QWORD *)v59->data[v60] + 2), a3, 1, (a5 + 1)))
                return 0;
              if (BYTE8(v81))
              {
                ++v60;
                if (*(_QWORD *)(v82 + 8) - (*((_QWORD *)&v82 + 1) + (unint64_t)v83) > 0x10000)
                {
LABEL_156:
                  v5 = 177;
                  v6 = 546;
                  goto LABEL_3;
                }
              }
              else
              {
                ++v60;
                if (*((_QWORD *)&v82 + 1) > 0x10000uLL)
                  goto LABEL_156;
              }
            }
LABEL_183:
            if (v46 != 21)
              return CBB_flush(a1);
            if (!CBB_flush_asn1_set_of((uint64_t)&v81))
              return 0;
LABEL_195:
            v57 = a1;
            break;
        }
        return CBB_flush(v57) != 0;
      default:
LABEL_105:
        if (cbs_str_equal(v13, v21, "SEQWRAP"))
          goto LABEL_106;
        goto LABEL_86;
    }
  }
}

BOOL cbs_str_equal(const void *a1, size_t a2, char *__s)
{
  if (strlen(__s) != a2)
    return 0;
  if (a2)
    return memcmp(a1, __s, a2) == 0;
  return 1;
}

uint64_t parse_tag(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  char v12;
  char v13;

  v1 = a1[1];
  if (v1 && (v2 = (uint64_t)*a1, v3 = **a1 - 48, v3 <= 9))
  {
    v5 = v1 - 1;
    if (v1 == (unsigned __int8 *)1)
      goto LABEL_16;
    v6 = &v1[v2];
    v7 = (unsigned __int8 *)(v2 + 1);
    while (1)
    {
      v8 = *v7 - 48;
      if (v8 > 9)
        break;
      if (v3 - 0x199999999999999ALL < 0xE666666666666667)
        goto LABEL_3;
      v9 = 10 * v3;
      if (__CFADD__(v8, v9))
        goto LABEL_3;
      v3 = v9 + v8;
      ++v7;
      if (!--v5)
      {
        if (v3 >> 29)
          goto LABEL_3;
        goto LABEL_13;
      }
    }
    v6 = v7;
    if (v3 >> 29)
      goto LABEL_3;
LABEL_13:
    if (!v5)
    {
LABEL_16:
      v11 = 0x80000000;
    }
    else
    {
      v10 = *v6 - 65;
      v11 = 0;
      v12 = 1;
      switch(v10)
      {
        case 0:
          v12 = 0;
          v11 = 0x40000000;
          goto LABEL_21;
        case 2:
          v12 = 0;
          v11 = 0x80000000;
          goto LABEL_21;
        case 15:
          v12 = 0;
          v11 = -1073741824;
          goto LABEL_21;
        case 20:
LABEL_21:
          if (v5 != (unsigned __int8 *)1)
          {
            ERR_put_error(12, 0, 144, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/asn1_gen.c", 165);
            return 0;
          }
          v13 = v12 ^ 1;
          if (v3)
            v13 = 1;
          if ((v13 & 1) == 0)
          {
            ERR_put_error(12, 0, 145, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/asn1_gen.c", 173);
            return 0;
          }
          break;
        default:
          ERR_put_error(12, 0, 144, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/asn1_gen.c", 160);
          return 0;
      }
    }
    return v11 | v3;
  }
  else
  {
LABEL_3:
    ERR_put_error(12, 0, 145, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/asn1_gen.c", 138);
    return 0;
  }
}

uint64_t generate_wrapped(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  uint64_t result;
  _OWORD v14[3];
  _BYTE *v15;

  memset(v14, 0, sizeof(v14));
  result = CBB_add_asn1(a1, (uint64_t)v14, a4);
  if ((_DWORD)result)
  {
    if (a5)
    {
      v15 = 0;
      result = CBB_add_space((uint64_t)v14, &v15, 1);
      if (!(_DWORD)result)
        return result;
      *v15 = 0;
    }
    result = generate_v3(v14, a2, a3, a6, (a7 + 1));
    if ((_DWORD)result)
      return CBB_flush(a1) != 0;
  }
  return result;
}

BOOL bitstr_cb(unsigned __int8 *a1, uint64_t a2, ASN1_BIT_STRING *a)
{
  unint64_t v4;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;

  if (!a2 || (v4 = *a1 - 48, v4 > 9))
  {
LABEL_3:
    ERR_put_error(12, 0, 145, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/x509/asn1_gen.c", 578);
    return 0;
  }
  v6 = a2 - 1;
  if (v6)
  {
    v7 = a1 + 1;
    while (1)
    {
      v8 = *v7++;
      v9 = (v8 - 48);
      if (v9 > 9 || v4 - 0x199999999999999ALL < 0xE666666666666667 || __CFADD__(v9, 10 * v4))
        goto LABEL_3;
      v4 = 10 * v4 + v9;
      if (!--v6)
      {
        if (v4 >= 0x101)
          goto LABEL_3;
        return ASN1_BIT_STRING_set_bit(a, v4, 1) != 0;
      }
    }
  }
  return ASN1_BIT_STRING_set_bit(a, v4, 1) != 0;
}

int ASN1_get_object(const unsigned __int8 **pp, uint64_t *plength, int *ptag, int *pclass, uint64_t omax)
{
  unint64_t v9;
  const unsigned __int8 *v10;
  int v11;
  int result;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17[2];
  unsigned int v18;
  unint64_t v19;

  if (omax < 0)
  {
    v11 = 119;
    goto LABEL_7;
  }
  v18 = 0;
  v15 = 0;
  v16 = 0;
  v17[0] = (unsigned __int8 *)*pp;
  v17[1] = (unsigned __int8 *)omax;
  v19 = 0;
  if (!cbs_get_any_asn1_element(v17, &v15, &v18, &v19, 0, 0, 0)
    || (v9 = v16 - v19, v16 < v19)
    || (v10 = (const unsigned __int8 *)(v15 + v19), v15 += v19, v16 -= v19, v9 >> 30))
  {
    v11 = 130;
LABEL_7:
    ERR_put_error(12, 0, 123, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/asn1_lib.c", v11);
    return 128;
  }
  v13 = HIBYTE(v18) & 0xC0;
  v14 = v18 & 0x1FFFFFFF;
  if ((v18 & 0x1FFFFFFF) >= 0x100 && !v13)
  {
    v11 = 141;
    goto LABEL_7;
  }
  result = HIBYTE(v18) & 0x20;
  *pp = v10;
  *plength = v9;
  *ptag = v14;
  *pclass = v13;
  return result;
}

void ASN1_put_object(unsigned __int8 **pp, int constructed, int length, int tag, int xclass)
{
  unsigned __int8 *v5;
  char v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;

  v5 = *pp;
  v6 = xclass & 0xC0 | (32 * (constructed != 0));
  if (tag > 30)
  {
    v8 = 0;
    *v5 = v6 | 0x1F;
    v9 = tag;
    do
    {
      ++v8;
      v10 = v9 >= 0x80;
      v9 >>= 7;
    }
    while (v10);
    v5[v8] = tag & 0x7F;
    if (v8 != 1)
    {
      v11 = v8;
      do
      {
        tag = tag >> 7;
        v5[--v11] = tag | 0x80;
      }
      while (v11 > 1);
    }
    v7 = &v5[v8 + 1];
    if (constructed != 2)
      goto LABEL_3;
LABEL_11:
    *v7 = 0x80;
    *pp = v7 + 1;
    return;
  }
  *v5 = v6 | tag & 0x1F;
  v7 = v5 + 1;
  if (constructed == 2)
    goto LABEL_11;
LABEL_3:
  if (length >= 128)
  {
    v12 = 1;
    v13 = length;
    do
    {
      ++v12;
      v14 = v13 > 0xFF;
      v13 >>= 8;
    }
    while (v14);
    *v7 = (v12 - 1) | 0x80;
    v15 = v12;
    do
    {
      v7[(v15 - 2) + 1] = length;
      length = length >> 8;
      --v15;
    }
    while (v15 > 1);
    *pp = &v7[v12];
  }
  else
  {
    *v7 = length;
    *pp = v7 + 1;
  }
}

int ASN1_object_size(int constructed, int length, int tag)
{
  int v3;
  BOOL v4;
  int v5;
  int v7;
  unsigned int v8;

  if (length < 0)
    return -1;
  v3 = 1;
  if (tag >= 31)
  {
    do
    {
      ++v3;
      v4 = tag > 0x7F;
      tag = tag >> 7;
    }
    while (v4);
  }
  if (constructed == 2)
  {
    v5 = v3 + 3;
    if (v5 >= (length ^ 0x7FFFFFFF))
      return -1;
    else
      return v5 + length;
  }
  else
  {
    v7 = v3 + 1;
    if (length >= 128)
    {
      v8 = length;
      do
      {
        ++v7;
        v4 = v8 > 0xFF;
        v8 >>= 8;
      }
      while (v4);
    }
    if (v7 >= (length ^ 0x7FFFFFFF))
      return -1;
    else
      return v7 + length;
  }
}

int ASN1_STRING_set(ASN1_STRING *str, const void *data, int len)
{
  size_t v3;
  int result;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char *v10;

  v3 = *(_QWORD *)&len;
  if ((*(_QWORD *)&len & 0x8000000000000000) != 0)
  {
    if (!data)
      return 0;
    v3 = strlen((const char *)data);
    if (v3 >= 0x4000001)
      goto LABEL_3;
  }
  else if (*(_QWORD *)&len >= 0x4000001uLL)
  {
LABEL_3:
    ERR_put_error(12, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/asn1_lib.c", 287);
    return 0;
  }
  v7 = str->data;
  if (str->length <= (int)v3)
  {
    if (v7)
    {
      v8 = (unsigned __int8 *)OPENSSL_realloc((_QWORD *)str->data, v3 + 1);
      str->data = v8;
      v9 = v7;
      v7 = v8;
      if (!v8)
      {
        result = 0;
        str->data = v9;
        return result;
      }
      goto LABEL_14;
    }
  }
  else if (v7)
  {
    goto LABEL_14;
  }
  v10 = (char *)malloc_type_malloc(v3 + 9, 0x30772F57uLL);
  if (!v10)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    result = 0;
    str->data = 0;
    return result;
  }
  *(_QWORD *)v10 = v3 + 1;
  v7 = (unsigned __int8 *)(v10 + 8);
  str->data = (unsigned __int8 *)(v10 + 8);
LABEL_14:
  str->length = v3;
  if (data)
  {
    if (v3)
    {
      memcpy(v7, data, v3);
      v7 = str->data;
    }
    v7[v3] = 0;
  }
  return 1;
}

ASN1_STRING *__cdecl ASN1_STRING_dup(ASN1_STRING *a)
{
  char *v2;
  _DWORD *v3;
  ASN1_STRING *v4;
  uint64_t *v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  size_t v10;

  if (!a)
    return 0;
  v2 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v2)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  v3 = v2;
  *(_QWORD *)v2 = 24;
  *((_QWORD *)v2 + 1) = 0x400000000;
  v4 = (ASN1_STRING *)(v2 + 8);
  *((_QWORD *)v2 + 2) = 0;
  v5 = (uint64_t *)(v2 + 16);
  *((_QWORD *)v2 + 3) = 0;
  if (ASN1_STRING_set((ASN1_STRING *)(v2 + 8), a->data, a->length))
  {
    v3[3] = a->type;
    *((_QWORD *)v3 + 3) = a->flags;
    return v4;
  }
  else
  {
    v7 = *v5;
    if (*v5)
    {
      v9 = *(_QWORD *)(v7 - 8);
      v8 = (void *)(v7 - 8);
      v10 = v9 + 8;
      if (v9 != -8)
        bzero(v8, v10);
      free(v8);
    }
    if (*(_QWORD *)v3 != -8)
      __memset_chk();
    free(v3);
    return 0;
  }
}

void ASN1_STRING_free(BUF_MEM *a)
{
  char *data;
  char *v3;
  uint64_t v4;
  size_t v5;
  int *p_max;
  uint64_t v7;
  size_t v8;

  if (a)
  {
    data = a->data;
    if (data)
    {
      v4 = *((_QWORD *)data - 1);
      v3 = data - 8;
      v5 = v4 + 8;
      if (v4 != -8)
        bzero(v3, v5);
      free(v3);
    }
    v7 = *(_QWORD *)&a[-1].max;
    p_max = &a[-1].max;
    v8 = v7 + 8;
    if (v7 != -8)
      bzero(p_max, v8);
    free(p_max);
  }
}

void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  size_t v9;

  v6 = str->data;
  if (v6)
  {
    v8 = *((_QWORD *)v6 - 1);
    v7 = v6 - 8;
    v9 = v8 + 8;
    if (v8 != -8)
      bzero(v7, v9);
    free(v7);
  }
  str->data = (unsigned __int8 *)data;
  str->length = len;
}

ASN1_STRING *__cdecl ASN1_STRING_type_new(int type)
{
  char *v2;

  v2 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (v2)
  {
    *(_QWORD *)v2 = 24;
    *((_DWORD *)v2 + 2) = 0;
    *((_DWORD *)v2 + 3) = type;
    *((_QWORD *)v2 + 2) = 0;
    *((_QWORD *)v2 + 3) = 0;
    return (ASN1_STRING *)(v2 + 8);
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
}

int ASN1_STRING_cmp(ASN1_STRING *a, ASN1_STRING *b)
{
  uint64_t length;
  uint64_t v3;
  int type;
  uint64_t flags;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  char v10;
  char v11;
  char v12;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  int result;

  length = b->length;
  v3 = a->length;
  type = a->type;
  if (type != 3)
  {
LABEL_23:
    v13 = 0;
    v14 = b->type;
    if (v14 == 3)
      goto LABEL_30;
    goto LABEL_51;
  }
  flags = a->flags;
  if ((flags & 8) != 0)
  {
    v13 = flags & 7;
    if (!(_DWORD)v3)
      v13 = 0;
    v14 = b->type;
    if (v14 == 3)
      goto LABEL_30;
LABEL_51:
    v19 = 0;
    goto LABEL_52;
  }
  v6 = v3 & ((int)v3 >> 31);
  v7 = v3 - 1;
  do
  {
    v8 = __OFSUB__((_DWORD)v3, 1);
    LODWORD(v3) = v3 - 1;
    if ((int)v3 < 0 != v8)
    {
      v13 = 0;
      LODWORD(v3) = v6;
      v14 = b->type;
      if (v14 != 3)
        goto LABEL_51;
      goto LABEL_30;
    }
    v9 = a->data[v7--];
  }
  while (!v9);
  LODWORD(v3) = v3 + 1;
  if ((v9 & 1) != 0)
    goto LABEL_23;
  if ((v9 & 2) == 0)
  {
    if ((v9 & 4) != 0)
    {
      v13 = 2;
      v14 = b->type;
      if (v14 == 3)
        goto LABEL_30;
    }
    else
    {
      if ((v9 & 0x40) != 0)
        v10 = 6;
      else
        v10 = 7;
      if ((v9 & 0x20) != 0)
        v11 = 5;
      else
        v11 = v10;
      if ((v9 & 0x10) != 0)
        v12 = 4;
      else
        v12 = v11;
      if ((v9 & 8) != 0)
        v13 = 3;
      else
        v13 = v12;
      v14 = b->type;
      if (v14 == 3)
        goto LABEL_30;
    }
    goto LABEL_51;
  }
  v13 = 1;
  v14 = b->type;
  if (v14 != 3)
    goto LABEL_51;
LABEL_30:
  v15 = b->flags;
  if ((v15 & 8) != 0)
  {
    v19 = v15 & 7;
    if (!(_DWORD)length)
      v19 = 0;
  }
  else
  {
    v16 = length & ((int)length >> 31);
    v17 = length - 1;
    do
    {
      v8 = __OFSUB__((_DWORD)length, 1);
      LODWORD(length) = length - 1;
      if ((int)length < 0 != v8)
      {
        v19 = 0;
        LODWORD(length) = v16;
        goto LABEL_52;
      }
      v18 = b->data[v17--];
    }
    while (!v18);
    LODWORD(length) = length + 1;
    if ((v18 & 1) != 0)
      goto LABEL_51;
    if ((v18 & 2) != 0)
    {
      v19 = 1;
    }
    else if ((v18 & 4) != 0)
    {
      v19 = 2;
    }
    else if ((v18 & 8) != 0)
    {
      v19 = 3;
    }
    else if ((v18 & 0x10) != 0)
    {
      v19 = 4;
    }
    else if ((v18 & 0x20) != 0)
    {
      v19 = 5;
    }
    else if ((v18 & 0x40) != 0)
    {
      v19 = 6;
    }
    else
    {
      v19 = 7;
    }
  }
LABEL_52:
  if ((int)v3 < (int)length)
    return -1;
  if ((int)v3 > (int)length)
    return 1;
  if (v13 > v19)
    return -1;
  if (v13 < v19)
    return 1;
  if (!(_DWORD)v3 || (result = memcmp(a->data, b->data, (int)v3)) == 0)
  {
    if (type >= v14)
      return type > v14;
    else
      return -1;
  }
  return result;
}

void EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned __int8 *out, int *outl, const unsigned __int8 *in, int inl)
{
  size_t v5;
  const unsigned __int8 *v6;
  uint64_t num;
  size_t v9;
  unint64_t v10;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;

  *outl = 0;
  if (!*(_QWORD *)&inl)
    return;
  v5 = *(_QWORD *)&inl;
  v6 = in;
  num = ctx->num;
  v9 = 48 - num;
  v10 = *(_QWORD *)&inl - (48 - num);
  if (*(_QWORD *)&inl < (unint64_t)(48 - num))
  {
    memcpy((char *)&ctx->length + num, in, *(size_t *)&inl);
    ctx->num += v5;
    return;
  }
  if (!(_DWORD)num)
  {
    v15 = 0;
    if (*(_QWORD *)&inl >= 0x30uLL)
      goto LABEL_11;
    goto LABEL_13;
  }
  if ((_DWORD)num != 48)
    memcpy((char *)&ctx->length + num, in, v9);
  v6 += v9;
  v13 = EVP_EncodeBlock(out, (const unsigned __int8 *)&ctx->length, 48);
  ctx->num = 0;
  v14 = &out[v13];
  *(_WORD *)v14 = 10;
  out = v14 + 1;
  v15 = v13 + 1;
  v5 = v10;
  if (v10 < 0x30)
  {
LABEL_13:
    if (v5)
      memcpy(&ctx->length, v6, v5);
    ctx->num = v5;
    if (v15 >> 31)
      v18 = 0;
    else
      v18 = v15;
    *outl = v18;
    return;
  }
LABEL_11:
  while (1)
  {
    v16 = EVP_EncodeBlock(out, v6, 48);
    v17 = &out[v16];
    *(_WORD *)v17 = 10;
    out = v17 + 1;
    if (-2 - v16 < v15)
      break;
    v5 -= 48;
    v6 += 48;
    v15 += v16 + 1;
    if (v5 <= 0x2F)
      goto LABEL_13;
  }
  *outl = 0;
}

int EVP_EncodeBlock(unsigned __int8 *t, const unsigned __int8 *f, int n)
{
  const unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  unsigned int v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  unsigned int v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  unsigned int v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  unsigned __int8 *v58;
  unsigned int v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  unsigned int v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;

  if (*(_QWORD *)&n)
  {
    v3 = f + 1;
    v4 = 4;
    while (1)
    {
      v5 = &t[v4];
      v6 = *(v3 - 1);
      v7 = v6 << 16;
      if (*(_QWORD *)&n <= 2uLL)
        break;
      v8 = v3[1];
      v9 = v8 & 0x3F;
      v10 = v7 | (*v3 << 8);
      v11 = v8 & 0xFFFF00FF | (*v3 << 8);
      v12 = v6 >> 2;
      if (v6 >> 2 == 62)
        v13 = -1;
      else
        v13 = 0;
      v14 = ~v13 & 0x2F | v13 & 0x2B;
      if (v6 >= 0xF8)
        v15 = 0;
      else
        v15 = -1;
      v16 = v14 & ~v15 | (v12 - 4) & v15;
      if (v6 >= 0xD0)
        v17 = 0;
      else
        v17 = -1;
      v18 = v16 & ~v17;
      if (v6 >= 0x68)
        v19 = 0;
      else
        v19 = -1;
      *(v5 - 4) = (v18 | v17 & (v12 + 71)) & ~v19 | v19 & (v12 + 65);
      v20 = (v10 >> 12) & 0x3F;
      if (v20 == 62)
        v21 = -1;
      else
        v21 = 0;
      v22 = ~v21 & 0x2F | v21 & 0x2B;
      if (v20 >= 0x3E)
        v23 = 0;
      else
        v23 = -1;
      v24 = v22 & ~v23 | (v20 - 4) & v23;
      if (v20 >= 0x34)
        v25 = 0;
      else
        v25 = -1;
      v26 = v25 & (v20 + 71);
      v27 = v24 & ~v25;
      if (v20 >= 0x1A)
        v28 = 0;
      else
        v28 = -1;
      *(v5 - 3) = (v27 | v26) & ~v28 | v28 & (v20 + 65);
      v29 = (v11 >> 6) & 0x3F;
      if (v29 == 62)
        v30 = -1;
      else
        v30 = 0;
      v31 = ~v30 & 0x2F | v30 & 0x2B;
      if (v29 >= 0x3E)
        v32 = 0;
      else
        v32 = -1;
      v33 = v31 & ~v32 | (v29 - 4) & v32;
      if (v29 >= 0x34)
        v34 = 0;
      else
        v34 = -1;
      v35 = v34 & (v29 + 71);
      v36 = v33 & ~v34;
      if (v29 >= 0x1A)
        v37 = 0;
      else
        v37 = -1;
      *(v5 - 2) = (v36 | v35) & ~v37 | v37 & (v29 + 65);
      if (v9 == 62)
        v38 = -1;
      else
        v38 = 0;
      v39 = ~v38 & 0x2F | v38 & 0x2B;
      if (v9 >= 0x3E)
        v40 = 0;
      else
        v40 = -1;
      v41 = v39 & ~v40 | (v9 - 4) & v40;
      if (v9 >= 0x34)
        v42 = 0;
      else
        v42 = -1;
      v43 = v42 & (v9 + 71);
      v44 = v41 & ~v42;
      if (v9 >= 0x1A)
        v45 = 0;
      else
        v45 = -1;
      *(v5 - 1) = (v44 | v43) & ~v45 | v45 & (v9 + 65);
      v4 += 4;
      v3 += 3;
      *(_QWORD *)&n -= 3;
      if (!*(_QWORD *)&n)
      {
        v46 = v4 - 4;
        t[v46] = 0;
        return v46;
      }
    }
    if (*(_QWORD *)&n == 2)
      v7 |= *v3 << 8;
    v48 = v7 >> 18;
    v49 = -1;
    if (v7 >> 18 == 62)
      v50 = -1;
    else
      v50 = 0;
    v51 = ~v50 & 0x2F | v50 & 0x2B;
    if (v48 >= 0x3E)
      v52 = 0;
    else
      v52 = -1;
    v53 = v51 & ~v52 | (v48 - 4) & v52;
    if (v48 >= 0x34)
      v54 = 0;
    else
      v54 = -1;
    v55 = (v48 + 71) & v54;
    v56 = v53 & ~v54;
    if (v48 >= 0x1A)
      v57 = 0;
    else
      v57 = -1;
    v58 = &t[v4];
    *(v5 - 4) = (v56 | v55) & ~v57 | (v48 + 65) & v57;
    v59 = (v7 >> 12) & 0x3F;
    if (v59 == 62)
      v60 = -1;
    else
      v60 = 0;
    v61 = ~v60 & 0x2F | v60 & 0x2B;
    if (v59 >= 0x3E)
      v62 = 0;
    else
      v62 = -1;
    v63 = v61 & ~v62 | (v59 - 4) & v62;
    if (v59 >= 0x34)
      v64 = 0;
    else
      v64 = -1;
    v65 = v63 & ~v64;
    if (v59 >= 0x1A)
      v49 = 0;
    *(v58 - 3) = (v65 | v64 & (v59 + 71)) & ~v49 | v49 & (v59 + 65);
    v66 = 61;
    if (*(_QWORD *)&n != 1)
    {
      v67 = (v7 >> 6) & 0x3F;
      if (v67 == 62)
        v68 = -1;
      else
        v68 = 0;
      if (v67 >= 0x3E)
        v69 = 0;
      else
        v69 = -1;
      v70 = (~v68 & 0x2F | v68 & 0x2B) & ~v69 | (v67 - 4) & v69;
      if (v67 >= 0x34)
        v71 = 0;
      else
        v71 = -1;
      v72 = v71 & (v67 + 71);
      v73 = v70 & ~v71;
      if (v67 >= 0x1A)
        v74 = 0;
      else
        v74 = -1;
      v66 = (v73 | v72) & ~v74 | v74 & (v67 + 65);
    }
    *(v58 - 2) = v66;
    *(_WORD *)(v58 - 1) = 61;
    return v4;
  }
  else
  {
    *t = 0;
    return 0;
  }
}

int EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned __int8 *out, int *outl, const unsigned __int8 *in, int inl)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint8x8_t v10;
  uint16x8_t v11;
  uint64_t v13;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t num;
  unint64_t v24;
  unint64_t v25;

  *outl = 0;
  if (ctx->enc_data[45])
    return -1;
  v13 = *(_QWORD *)&inl;
  if (*(_QWORD *)&inl)
  {
    v18 = 0;
    do
    {
      v20 = *(char *)in++;
      v19 = v20;
      v21 = (1 << v20) & 0x100002600;
      if (v20 > 0x20 || v21 == 0)
      {
        if (ctx->enc_data[44])
          goto LABEL_22;
        num = ctx->num;
        ctx->num = num + 1;
        *((_BYTE *)&ctx->length + num) = v19;
        if ((_DWORD)num == 3)
        {
          v25 = 0;
          if (!base64_decode_quad(out, &v25, &ctx->length, v5, v6, v7, v8, v9, v10, v11))
          {
LABEL_22:
            ctx->enc_data[45] = 1;
            return -1;
          }
          ctx->num = 0;
          v24 = v25;
          if (v25 <= 2)
            ctx->enc_data[44] = 1;
          v18 += v24;
          out += v24;
        }
      }
      --v13;
    }
    while (v13);
    if (!(v18 >> 31))
      goto LABEL_20;
    ctx->enc_data[45] = 1;
    *outl = 0;
    return -1;
  }
  LODWORD(v18) = 0;
LABEL_20:
  *outl = v18;
  return ctx->enc_data[44] == 0;
}

uint64_t base64_decode_quad(_BYTE *a1, _QWORD *a2, __int32 *a3, double a4, double a5, double a6, double a7, double a8, uint8x8_t a9, uint16x8_t a10)
{
  uint16x8_t v10;
  int16x4_t v11;
  int8x8_t v12;
  int8x8_t v13;
  uint16x8_t v14;
  int8x8_t v15;
  uint32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int64x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint16x8_t v25;
  int8x8_t v26;
  int8x8_t v27;
  int16x4_t v28;
  int8x8_t v29;
  int16x4_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int v34;
  int v35;
  char v36;

  a9.i32[0] = *a3;
  v11 = (int16x4_t)vmovl_u8(a9).u64[0];
  v12.i32[0] = v11.u16[1];
  v12.i32[1] = v11.u16[2];
  a10.i32[0] = 12517567;
  a10.i16[2] = 191;
  a10.i16[3] = 191;
  v13 = (int8x8_t)vaddw_u8(a10, a9).u64[0];
  a10.i32[0] = 10420383;
  a10.i16[2] = 159;
  a10.i16[3] = 159;
  v14 = vaddw_u8(a10, a9);
  v15 = (int8x8_t)vcgt_u16((uint16x4_t)0x1A001A001A001ALL, (uint16x4_t)(v14.i64[0] & 0xFF00FF00FF00FFLL));
  v14.i64[0] = 0xD000D000D000D0;
  *(uint16x4_t *)v14.i8 = vcgt_u16((uint16x4_t)0xA000A000A000ALL, (uint16x4_t)(vaddw_u8(v14, a9).u64[0] & 0xFF00FF00FF00FFLL));
  v16 = vmovl_u16((uint16x4_t)v11);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  v18.i64[0] = 255;
  v18.i64[1] = 255;
  v19 = vandq_s8(v17, v18);
  v17.i64[0] = v16.u32[2];
  v17.i64[1] = v16.u32[3];
  v20 = vandq_s8(v17, v18);
  v21 = (int8x16_t)vdupq_n_s64(0x2BuLL);
  v22.i64[0] = -1;
  v22.i64[1] = -1;
  *(int16x4_t *)v21.i8 = vmovn_s32(vuzp1q_s32((int32x4_t)vcltzq_s64(vaddq_s64((int64x2_t)veorq_s8(v19, v21), v22)), (int32x4_t)vcltzq_s64(vaddq_s64((int64x2_t)veorq_s8(v20, v21), v22))));
  v23 = (int8x16_t)vdupq_n_s64(0x2FuLL);
  *(int16x4_t *)v23.i8 = vmovn_s32(vuzp1q_s32((int32x4_t)vcltzq_s64(vaddq_s64((int64x2_t)veorq_s8(v19, v23), v22)), (int32x4_t)vcltzq_s64(vaddq_s64((int64x2_t)veorq_s8(v20, v23), v22))));
  v24 = (int8x16_t)vdupq_n_s64(0x3DuLL);
  v10.i32[0] = 12124345;
  v10.i16[2] = 185;
  v10.i16[3] = 185;
  v25 = vaddw_u8(v10, a9);
  v26 = vorr_s8(vand_s8(*(int8x8_t *)v25.i8, v15), vand_s8(v13, (int8x8_t)vcgt_u16((uint16x4_t)0x1A001A001A001ALL, (uint16x4_t)(*(_QWORD *)&v13 & 0xFF00FF00FF00FFLL))));
  v25.i64[0] = 0x4000400040004;
  v27 = vorr_s8(vorr_s8(v26, vand_s8((int8x8_t)*(_OWORD *)&vaddw_u8(v25, a9), *(int8x8_t *)v14.i8)), vand_s8(*(int8x8_t *)v21.i8, (int8x8_t)0x3E003E003E003ELL));
  v25.i32[0] = v11.u16[0];
  v25.i32[1] = v11.u16[3];
  v28 = (int16x4_t)vcgt_u32((uint32x2_t)0x1A0000001ALL, (uint32x2_t)(*(_QWORD *)&vadd_s32((int32x2_t)vand_s8(*(int8x8_t *)v25.i8, (int8x8_t)0xDF000000DFLL), (int32x2_t)0xBF000000BFLL) & 0xFFFFFEFFFFFFFEFFLL));
  v29 = *(int8x8_t *)v14.i8;
  *(__int32 *)((char *)v29.i32 + 2) = vuzp1_s16((int16x4_t)vcgt_u32((uint32x2_t)0x1A0000001ALL, (uint32x2_t)(*(_QWORD *)&vadd_s32((int32x2_t)vand_s8(v12, (int8x8_t)0xDF000000DFLL), (int32x2_t)0xBF000000BFLL) & 0xFFFFFEFFFFFFFEFFLL)), v11).u32[0];
  v30 = vuzp1_s16(v28, v28);
  v14.i16[0] = v30.i16[0];
  v14.i16[3] = v30.i16[3];
  v31 = vorr_s8(v29, *(int8x8_t *)v14.i8);
  v32 = vorr_s8(vorr_s8(v27, vand_s8(*(int8x8_t *)v23.i8, (int8x8_t)0x3F003F003F003FLL)), veor_s8(vorr_s8(vorr_s8((int8x8_t)(*(_QWORD *)&v31 & 0xFF00FF00FF00FFLL), vbic_s8((int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcltzq_s64(vaddq_s64((int64x2_t)veorq_s8(v19, v24), v22)), (int32x4_t)vcltzq_s64(vaddq_s64((int64x2_t)veorq_s8(v20, v24), v22)))), v31)), vorr_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v23.i8)), (int8x8_t)0xFF00FF00FF00FFLL));
  if ((vmaxv_u16((uint16x4_t)vceq_s16((int16x4_t)(*(_QWORD *)&v32 & 0xFF00FF00FF00FFLL), (int16x4_t)0xFF00FF00FF00FFLL)) & 1) != 0)
    return 0;
  v34 = (v32.u8[2] << 12) | (v32.u8[0] << 18);
  v35 = (8 * (v11.u16[0] == 61)) | (4 * (v11.u16[1] == 61)) | (2 * (v11.u16[2] == 61)) | (v11.u16[3] == 61);
  if (v35 == 3)
  {
    *a2 = 1;
    *a1 = BYTE2(v34);
    return 1;
  }
  else
  {
    v36 = (v32.u8[4] >> 2) | (16 * v32.i8[2]);
    if (v35 == 1)
    {
      *a2 = 2;
      *a1 = BYTE2(v34);
      a1[1] = v36;
      return 1;
    }
    else
    {
      if (v35)
        return 0;
      *a2 = 3;
      *a1 = BYTE2(v34);
      a1[1] = v36;
      a1[2] = v32.i8[6] | (v32.i8[4] << 6);
      return 1;
    }
  }
}

int BIO_free(BIO *a)
{
  BIO *v1;
  BIO *v2;
  unsigned int *p_retry_reason;
  unsigned int i;
  unsigned int v5;
  int (__cdecl *destroy)(BIO *);
  int *p_dummy;
  uint64_t v8;
  size_t v9;

  if (!a)
    return 1;
  v1 = a;
  do
  {
    v2 = v1;
    p_retry_reason = (unsigned int *)&v1->retry_reason;
    for (i = atomic_load((unsigned int *)&v1->retry_reason); ; i = v5)
    {
      if (i == -1)
        return 0;
      if (!i)
        abort();
      v5 = __ldaxr(p_retry_reason);
      if (v5 != i)
      {
        __clrex();
        continue;
      }
      if (!__stlxr(i - 1, p_retry_reason))
        break;
    }
    if (i != 1)
      return 0;
    v1 = (BIO *)v1->ptr;
    v2->ptr = 0;
    if (v2->method)
    {
      destroy = v2->method->destroy;
      if (destroy)
        ((void (*)(BIO *))destroy)(v2);
    }
    CRYPTO_free_ex_data((int)&g_ex_data_class, v2, (CRYPTO_EX_DATA *)&v2->callback);
    v8 = *(_QWORD *)&v2[-1].ex_data.dummy;
    p_dummy = &v2[-1].ex_data.dummy;
    v9 = v8 + 8;
    if (v8 != -8)
      bzero(p_dummy, v9);
    free(p_dummy);
  }
  while (v1);
  return 1;
}

int BIO_gets(BIO *bp, char *buf, int size)
{
  int (__cdecl *bgets)(BIO *, char *, int);
  int result;

  if (bp && bp->method && (bgets = bp->method->bgets) != 0)
  {
    if (LODWORD(bp->cb_arg))
    {
      if (size < 1)
      {
        return 0;
      }
      else
      {
        result = ((uint64_t (*)(BIO *, char *))bgets)(bp, buf);
        if (result >= 1)
          bp->next_bio = (bio_st *)((char *)bp->next_bio + result);
      }
    }
    else
    {
      ERR_put_error(17, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 152);
      return -2;
    }
  }
  else
  {
    ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 148);
    return -2;
  }
  return result;
}

int BIO_write(BIO *b, const void *data, int len)
{
  int (__cdecl *bwrite)(BIO *, const char *, int);
  int result;

  if (b && b->method && (bwrite = b->method->bwrite) != 0)
  {
    if (LODWORD(b->cb_arg))
    {
      if (len < 1)
      {
        return 0;
      }
      else
      {
        result = ((uint64_t (*)(BIO *, const void *))bwrite)(b, data);
        if (result >= 1)
          b->prev_bio = (bio_st *)((char *)b->prev_bio + result);
      }
    }
    else
    {
      ERR_put_error(17, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 171);
      return -2;
    }
  }
  else
  {
    ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 167);
    return -2;
  }
  return result;
}

int BIO_puts(BIO *bp, const char *buf)
{
  size_t v4;
  int result;
  int (__cdecl *bwrite)(BIO *, const char *, int);

  v4 = strlen(buf);
  if (v4 >> 31)
  {
    ERR_put_error(17, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 201);
    return -1;
  }
  else if (bp && bp->method && (bwrite = bp->method->bwrite) != 0)
  {
    if (LODWORD(bp->cb_arg))
    {
      if ((_DWORD)v4)
      {
        result = ((uint64_t (*)(BIO *, const char *))bwrite)(bp, buf);
        if (result >= 1)
          bp->prev_bio = (bio_st *)((char *)bp->prev_bio + result);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      ERR_put_error(17, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 171);
      return -2;
    }
  }
  else
  {
    ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 167);
    return -2;
  }
  return result;
}

uint64_t BIO_flush(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    if (*(_QWORD *)result && (v1 = *(uint64_t (**)(void))(*(_QWORD *)result + 48)) != 0)
    {
      return v1();
    }
    else
    {
      ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 217);
      return 4294967294;
    }
  }
  return result;
}

char *BIO_meth_new(int a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)malloc_type_malloc(0x58uLL, 0x30772F57uLL);
  if (v4)
  {
    *(_QWORD *)v4 = 80;
    *((_DWORD *)v4 + 2) = a1;
    *(_OWORD *)(v4 + 12) = 0u;
    *(_OWORD *)(v4 + 28) = 0u;
    *(_OWORD *)(v4 + 44) = 0u;
    *(_OWORD *)(v4 + 60) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *((_QWORD *)v4 + 2) = a2;
    return v4 + 8;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
}

BIO *__cdecl BIO_new_mem_buf(void *buf, int len)
{
  uint64_t v2;
  size_t v4;
  const char *v5;
  int v6;
  int v7;
  int v8;
  char *v9;
  _QWORD *v10;
  BIO *v11;
  _QWORD *v12;

  v2 = *(_QWORD *)&len;
  v4 = *(_QWORD *)&len;
  if ((*(_QWORD *)&len & 0x8000000000000000) != 0)
  {
    v4 = strlen((const char *)buf);
    if (buf)
      goto LABEL_7;
  }
  else if (buf)
  {
    goto LABEL_7;
  }
  if (v2)
  {
    v5 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/bio/bio_mem.c";
    v6 = 17;
    v7 = 111;
    v8 = 75;
LABEL_11:
    ERR_put_error(v6, 0, v7, v5, v8);
    return 0;
  }
LABEL_7:
  v9 = (char *)malloc_type_malloc(0x50uLL, 0x30772F57uLL);
  if (!v9)
  {
    v5 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
    v6 = 14;
    v7 = 65;
    v8 = 247;
    goto LABEL_11;
  }
  v10 = v9;
  *(_QWORD *)v9 = 72;
  *((_QWORD *)v9 + 1) = &mem_method;
  v11 = (BIO *)(v9 + 8);
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *((_QWORD *)v9 + 9) = 0;
  *((_DWORD *)v9 + 7) = 1;
  *((_DWORD *)v9 + 11) = 1;
  *((_QWORD *)v9 + 2) = 0;
  v12 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (v12)
  {
    *v12 = 24;
    v10[3] = 0x100000001;
    v12[1] = v4;
    v10[6] = v12 + 1;
    v12[2] = buf;
    v12[3] = v4;
    *((_DWORD *)v10 + 8) |= 0x200u;
    *((_DWORD *)v10 + 10) = 0;
    return v11;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    if (*v10 != -8)
      __memset_chk();
    free(v10);
    return 0;
  }
}

uint64_t mem_write(uint64_t a1, void *a2, size_t __n)
{
  int v3;
  unsigned int v4;

  v3 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3 & 0xFFFFFFF0;
  if ((int)__n < 1)
    return 0;
  if ((v3 & 0x200) != 0)
  {
    ERR_put_error(17, 0, 116, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio_mem.c", 168);
    return 0xFFFFFFFFLL;
  }
  else
  {
    v4 = __n;
    if (BUF_MEM_append(*(unint64_t **)(a1 + 40), a2, __n))
      return v4;
    else
      return 0xFFFFFFFFLL;
  }
}

size_t mem_read(uint64_t a1, void *__dst, int a3)
{
  unsigned int v3;
  uint64_t *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  size_t v9;

  v3 = *(_DWORD *)(a1 + 24) & 0xFFFFFFF0;
  *(_QWORD *)(a1 + 24) = v3;
  if (a3 < 1)
    return 0;
  v5 = *(uint64_t **)(a1 + 40);
  v6 = *v5;
  if (*v5 >= (unint64_t)a3)
    v7 = a3;
  else
    v7 = v6;
  if ((int)v7 >= 1)
  {
    memcpy(__dst, (const void *)v5[1], v7);
    v8 = *v5;
    v9 = *v5 - v7;
    *v5 = v9;
    if ((*(_BYTE *)(a1 + 25) & 2) != 0)
    {
      v5[1] += v7;
      return v7;
    }
    if (v8 != v7)
      memmove((void *)v5[1], (const void *)(v5[1] + v7), v9);
    return v7;
  }
  if (v6)
    return 0;
  v7 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v7)
  {
    *(_DWORD *)(a1 + 24) = v3 | 9;
    return v7;
  }
  return v7;
}

size_t mem_gets(uint64_t a1, void *a2, int a3)
{
  unsigned int v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  void *v10;
  void *v11;
  int v12;
  unint64_t v13;
  size_t v14;

  v3 = *(_DWORD *)(a1 + 24) & 0xFFFFFFF0;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = (a3 - 1);
  if (a3 < 1)
    return 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)v7;
  if (*(_QWORD *)v7 >= v4)
    v9 = v4;
  else
    v9 = v8;
  if (!(_DWORD)v9)
    goto LABEL_21;
  v10 = *(void **)(v7 + 8);
  v11 = memchr(v10, 10, v9);
  if (v11)
    v12 = (_DWORD)v11 - (_DWORD)v10 + 1;
  else
    v12 = v9;
  if (v12 < 1)
    goto LABEL_19;
  if (v8 >= v12)
    v9 = v12;
  else
    v9 = v8;
  if ((int)v9 >= 1)
  {
    memcpy(a2, v10, v9);
    v13 = *(_QWORD *)v7;
    v14 = *(_QWORD *)v7 - v9;
    *(_QWORD *)v7 = v14;
    if ((*(_BYTE *)(a1 + 25) & 2) != 0)
    {
      *(_QWORD *)(v7 + 8) += v9;
    }
    else if (v13 != v9)
    {
      memmove(*(void **)(v7 + 8), (const void *)(*(_QWORD *)(v7 + 8) + v9), v14);
    }
    goto LABEL_21;
  }
  if (v8)
  {
LABEL_19:
    v9 = 0;
LABEL_21:
    *((_BYTE *)a2 + v9) = 0;
    return v9;
  }
  v9 = *(unsigned int *)(a1 + 32);
  if (!(_DWORD)v9)
    goto LABEL_21;
  *(_DWORD *)(a1 + 24) = v3 | 9;
  if ((v9 & 0x80000000) == 0)
    goto LABEL_21;
  return v9;
}

uint64_t mem_ctrl(uint64_t a1, int a2, int a3, uint64_t **a4)
{
  uint64_t result;
  uint64_t *v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  size_t v18;

  result = 0;
  v8 = *(uint64_t **)(a1 + 40);
  if (a2 > 113)
  {
    switch(a2)
    {
      case 114:
        if (*(_DWORD *)(a1 + 20) && *(_DWORD *)(a1 + 16) && v8)
        {
          if ((*(_BYTE *)(a1 + 25) & 2) != 0)
          {
            v8[1] = 0;
          }
          else
          {
            v11 = v8[1];
            if (v11)
            {
              v13 = *(_QWORD *)(v11 - 8);
              v12 = (void *)(v11 - 8);
              v14 = v13 + 8;
              if (v13 != -8)
                bzero(v12, v14);
              free(v12);
            }
          }
          v17 = *(v8 - 1);
          v16 = v8 - 1;
          v18 = v17 + 8;
          if (v17 != -8)
            bzero(v16, v18);
          free(v16);
        }
        *(_DWORD *)(a1 + 20) = a3;
        *(_QWORD *)(a1 + 40) = a4;
        return 1;
      case 115:
        if (a4)
        {
          *a4 = v8;
          return 1;
        }
        else
        {
          return 1;
        }
      case 130:
        *(_DWORD *)(a1 + 32) = a3;
        return 1;
    }
  }
  else
  {
    switch(a2)
    {
      case 1:
        v9 = (char *)v8[1];
        if (!v9)
          return 1;
        v10 = v8[2];
        if ((*(_BYTE *)(a1 + 25) & 2) != 0)
        {
          v15 = &v9[*v8 - v10];
          *v8 = v10;
          v8[1] = (uint64_t)v15;
          result = 1;
        }
        else
        {
          if (v10)
            bzero(v9, v10);
          *v8 = 0;
          result = 1;
        }
        break;
      case 2:
        result = *v8 == 0;
        break;
      case 3:
        result = *v8;
        if (a4)
          *a4 = (uint64_t *)v8[1];
        break;
      case 8:
        result = *(int *)(a1 + 20);
        break;
      case 9:
        *(_DWORD *)(a1 + 20) = a3;
        return 1;
      case 10:
        result = *v8;
        break;
      case 11:
        return 1;
      default:
        return result;
    }
  }
  return result;
}

uint64_t mem_new(uint64_t a1)
{
  _QWORD *v2;

  v2 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (v2)
  {
    *v2 = 24;
    v2[2] = 0;
    v2[3] = 0;
    v2[1] = 0;
    *(_QWORD *)(a1 + 16) = 0x100000001;
    *(_DWORD *)(a1 + 32) = -1;
    *(_QWORD *)(a1 + 40) = v2 + 1;
    return 1;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
}

uint64_t mem_free(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  size_t v9;

  if (*(_DWORD *)(a1 + 20))
  {
    if (*(_DWORD *)(a1 + 16))
    {
      v2 = *(_QWORD *)(a1 + 40);
      if (v2)
      {
        if ((*(_BYTE *)(a1 + 25) & 2) != 0)
        {
          *(_QWORD *)(v2 + 8) = 0;
        }
        else
        {
          v3 = *(_QWORD *)(v2 + 8);
          if (v3)
          {
            v5 = *(_QWORD *)(v3 - 8);
            v4 = (void *)(v3 - 8);
            v6 = v5 + 8;
            if (v5 != -8)
              bzero(v4, v6);
            free(v4);
          }
        }
        v8 = *(_QWORD *)(v2 - 8);
        v7 = (void *)(v2 - 8);
        v9 = v8 + 8;
        if (v8 != -8)
          bzero(v7, v9);
        free(v7);
        *(_QWORD *)(a1 + 40) = 0;
      }
    }
  }
  return 1;
}

BN_BLINDING *__cdecl BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod)
{
  _QWORD *v3;
  _QWORD *v4;
  BN_BLINDING *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;
  uint64_t v21;
  size_t v22;
  uint64_t *v23;
  uint64_t v24;
  size_t v25;

  v3 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v3)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  v4 = v3;
  *v3 = 24;
  v3[1] = 0;
  v5 = (BN_BLINDING *)(v3 + 1);
  v3[2] = 0;
  v3[3] = 0;
  v6 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v6)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    goto LABEL_7;
  }
  *v6 = 24;
  v6[2] = 0;
  v6[3] = 0x100000000;
  v6[1] = 0;
  *(_QWORD *)v5 = v6 + 1;
  v7 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (v7)
  {
    *v7 = 24;
    v7[2] = 0;
    v7[3] = 0x100000000;
    v7[1] = 0;
    v4[2] = v7 + 1;
    *((_DWORD *)v4 + 6) = 31;
    return v5;
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  v4[2] = 0;
  v5 = (BN_BLINDING *)v4[1];
  if (v5)
  {
    v15 = *((_DWORD *)v5 + 5);
    if ((v15 & 2) == 0)
    {
      v16 = *(_QWORD *)v5;
      if (*(_QWORD *)v5)
      {
        v18 = *(_QWORD *)(v16 - 8);
        v17 = (void *)(v16 - 8);
        v19 = v18 + 8;
        if (v18 != -8)
          bzero(v17, v19);
        free(v17);
        v15 = *((_DWORD *)v5 + 5);
      }
    }
    if ((v15 & 1) != 0)
    {
      v21 = *((_QWORD *)v5 - 1);
      v20 = (_QWORD *)((char *)v5 - 8);
      v22 = v21 + 8;
      if (v21 != -8)
        bzero(v20, v22);
      free(v20);
      goto LABEL_8;
    }
LABEL_7:
    *(_QWORD *)v5 = 0;
  }
LABEL_8:
  v9 = (uint64_t *)v4[2];
  if (v9)
  {
    v10 = *((_DWORD *)v9 + 5);
    if ((v10 & 2) == 0)
    {
      v11 = *v9;
      if (*v9)
      {
        v13 = *(_QWORD *)(v11 - 8);
        v12 = (void *)(v11 - 8);
        v14 = v13 + 8;
        if (v13 != -8)
          bzero(v12, v14);
        free(v12);
        v10 = *((_DWORD *)v9 + 5);
      }
    }
    if ((v10 & 1) != 0)
    {
      v24 = *(v9 - 1);
      v23 = v9 - 1;
      v25 = v24 + 8;
      if (v24 != -8)
        bzero(v23, v25);
      free(v23);
      if (*v4 == -8)
        goto LABEL_18;
      goto LABEL_17;
    }
    *v9 = 0;
  }
  if (*v4 != -8)
LABEL_17:
    __memset_chk();
LABEL_18:
  free(v4);
  return 0;
}

void BN_BLINDING_free(ECDSA_SIG *a)
{
  BIGNUM *r;
  int flags;
  unint64_t *d;
  unint64_t *v5;
  uint64_t v6;
  size_t v7;
  BIGNUM *s;
  int *p_neg;
  uint64_t v10;
  size_t v11;
  int v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  size_t v16;
  BIGNUM **p_s;
  BIGNUM *v18;
  size_t p_top;
  int *v20;
  uint64_t v21;
  size_t v22;
  BIGNUM *v23;

  if (a)
  {
    r = a->r;
    if (a->r)
    {
      flags = r->flags;
      if ((flags & 2) == 0)
      {
        d = r->d;
        if (r->d)
        {
          v6 = *(d - 1);
          v5 = d - 1;
          v7 = v6 + 8;
          if (v6 != -8)
            bzero(v5, v7);
          free(v5);
          flags = r->flags;
        }
      }
      if ((flags & 1) != 0)
      {
        v10 = *(_QWORD *)&r[-1].neg;
        p_neg = &r[-1].neg;
        v11 = v10 + 8;
        if (v10 != -8)
          bzero(p_neg, v11);
        free(p_neg);
        s = a->s;
        if (!s)
          goto LABEL_23;
        goto LABEL_16;
      }
      r->d = 0;
    }
    s = a->s;
    if (!s)
      goto LABEL_23;
LABEL_16:
    v12 = s->flags;
    if ((v12 & 2) == 0)
    {
      v13 = s->d;
      if (s->d)
      {
        v15 = *(v13 - 1);
        v14 = v13 - 1;
        v16 = v15 + 8;
        if (v15 != -8)
          bzero(v14, v16);
        free(v14);
        v12 = s->flags;
      }
    }
    if ((v12 & 1) != 0)
    {
      v21 = *(_QWORD *)&s[-1].neg;
      v20 = &s[-1].neg;
      v22 = v21 + 8;
      if (v21 != -8)
        bzero(v20, v22);
      free(v20);
      v23 = a[-1].s;
      p_s = &a[-1].s;
      p_top = (size_t)&v23->top;
      if (v23 == (BIGNUM *)-8)
        goto LABEL_25;
      goto LABEL_24;
    }
    s->d = 0;
LABEL_23:
    v18 = a[-1].s;
    p_s = &a[-1].s;
    p_top = (size_t)&v18->top;
    if (v18 == (BIGNUM *)-8)
    {
LABEL_25:
      free(p_s);
      return;
    }
LABEL_24:
    bzero(p_s, p_top);
    goto LABEL_25;
  }
}

int BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
{
  uint64_t v3;
  BN_CTX *v4;
  BN_CTX *v5;
  uint64_t v6;
  int v9;
  const BIGNUM *v11;
  int result;
  int v13;

  v5 = v4;
  v6 = v3;
  v9 = *((_DWORD *)b + 4) + 1;
  *((_DWORD *)b + 4) = v9;
  if (v9 == 32)
  {
    v11 = *(const BIGNUM **)b;
    if (bn_wexpand(*(_QWORD *)b, *(int *)(v3 + 32)))
    {
      if (bn_rand_range_words((uint64_t *)v11->d, 1uLL, *(uint64_t **)(v6 + 24), *(int *)(v6 + 32), (uint64_t)&BN_rand_range_ex_kDefaultAdditionalData))
      {
        v11->neg = 0;
        v11->top = *(_DWORD *)(v6 + 32);
        if (BN_from_montgomery(*((BIGNUM **)b + 1), *(const BIGNUM **)b, (BN_MONT_CTX *)v6, v5))
        {
          if (BN_mod_inverse_blinded(*((BIGNUM **)b + 1), &v13, *((const BIGNUM **)b + 1), v6, v5)
            && BN_mod_exp_mont(*(BIGNUM **)b, *(const BIGNUM **)b, (const BIGNUM *)ctx, (const BIGNUM *)(v6 + 24), v5, (BN_MONT_CTX *)v6)&& BN_mod_mul_montgomery(*(BIGNUM **)b, *(const BIGNUM **)b, (const BIGNUM *)v6, (BN_MONT_CTX *)v6, v5))
          {
            *((_DWORD *)b + 4) = 0;
            return BN_mod_mul_montgomery(n, n, *(const BIGNUM **)b, (BN_MONT_CTX *)v6, v5) != 0;
          }
        }
      }
    }
    ERR_put_error(4, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/rsa/blinding.c", 236);
  }
  else if (BN_mod_mul_montgomery(*(BIGNUM **)b, *(const BIGNUM **)b, *(const BIGNUM **)b, (BN_MONT_CTX *)v3, v4)
         && BN_mod_mul_montgomery(*((BIGNUM **)b + 1), *((const BIGNUM **)b + 1), *((const BIGNUM **)b + 1), (BN_MONT_CTX *)v6, v5))
  {
    return BN_mod_mul_montgomery(n, n, *(const BIGNUM **)b, (BN_MONT_CTX *)v6, v5) != 0;
  }
  result = 0;
  *((_DWORD *)b + 4) = 31;
  return result;
}

BIGNUM *BN_new(void)
{
  char *v0;

  v0 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (v0)
  {
    *(_QWORD *)v0 = 24;
    *((_QWORD *)v0 + 1) = 0;
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0x100000000;
    return (BIGNUM *)(v0 + 8);
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
}

void BN_free(BIGNUM *a)
{
  int flags;
  unint64_t *d;
  unint64_t *v4;
  uint64_t v5;
  size_t v6;
  int *p_neg;
  uint64_t v8;
  size_t v9;

  if (a)
  {
    flags = a->flags;
    if ((flags & 2) == 0)
    {
      d = a->d;
      if (a->d)
      {
        v5 = *(d - 1);
        v4 = d - 1;
        v6 = v5 + 8;
        if (v5 != -8)
          bzero(v4, v6);
        free(v4);
        flags = a->flags;
      }
    }
    if ((flags & 1) != 0)
    {
      v8 = *(_QWORD *)&a[-1].neg;
      p_neg = &a[-1].neg;
      v9 = v8 + 8;
      if (v8 != -8)
        bzero(p_neg, v9);
      free(p_neg);
    }
    else
    {
      a->d = 0;
    }
  }
}

BIGNUM *__cdecl BN_dup(const BIGNUM *a)
{
  char *v2;
  _DWORD *v3;
  BIGNUM *v4;
  uint64_t top;
  int v7;
  unint64_t *d;
  unint64_t *v9;
  uint64_t v10;
  size_t v11;

  if (!a)
    return 0;
  v2 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v2)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  v3 = v2;
  *(_QWORD *)v2 = 24;
  *((_QWORD *)v2 + 1) = 0;
  v4 = (BIGNUM *)(v2 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0x100000000;
  if (v2 + 8 == (char *)a)
    return (BIGNUM *)a;
  if (bn_wexpand((uint64_t)(v2 + 8), a->top))
  {
    top = a->top;
    if ((_DWORD)top)
    {
      memcpy(v4->d, a->d, 8 * top);
      LODWORD(top) = a->top;
    }
    v3[4] = top;
    v3[6] = a->neg;
    return v4;
  }
  else
  {
    v7 = v3[7];
    if ((v7 & 2) == 0)
    {
      d = v4->d;
      if (v4->d)
      {
        v10 = *(d - 1);
        v9 = d - 1;
        v11 = v10 + 8;
        if (v10 != -8)
          bzero(v9, v11);
        free(v9);
        v7 = v3[7];
      }
    }
    if ((v7 & 1) != 0)
    {
      if (*(_QWORD *)v3 != -8)
        __memset_chk();
      free(v3);
      return 0;
    }
    else
    {
      v4->d = 0;
      return 0;
    }
  }
}

BIGNUM *__cdecl BN_copy(BIGNUM *a, const BIGNUM *b)
{
  uint64_t top;

  if (b == a)
    return (BIGNUM *)b;
  if (!bn_wexpand((uint64_t)a, b->top))
    return 0;
  top = b->top;
  if ((_DWORD)top)
  {
    memcpy(a->d, b->d, 8 * top);
    LODWORD(top) = b->top;
  }
  a->top = top;
  a->neg = b->neg;
  return a;
}

uint64_t bn_wexpand(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  size_t v12;

  if (*(int *)(a1 + 12) >= a2)
    return 1;
  if (a2 >= 0x800000)
  {
    ERR_put_error(3, 0, 102, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/bn.c", 355);
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    ERR_put_error(3, 0, 106, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/bn.c", 360);
    return 0;
  }
  else
  {
    v5 = 8 * a2;
    v6 = malloc_type_malloc(8 * a2 + 8, 0x30772F57uLL);
    if (v6)
    {
      *v6 = v5;
      v7 = v6 + 1;
      bzero(v6 + 1, 8 * a2);
      v8 = *(int *)(a1 + 8);
      if ((_DWORD)v8)
        memcpy(v7, *(const void **)a1, 8 * v8);
      v9 = *(_QWORD **)a1;
      if (*(_QWORD *)a1)
      {
        v11 = *(v9 - 1);
        v10 = (char *)(v9 - 1);
        v12 = v11 + 8;
        if (v11 != -8)
          bzero(v10, v12);
        free(v10);
      }
      *(_QWORD *)a1 = v7;
      *(_DWORD *)(a1 + 12) = a2;
      return 1;
    }
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
}

const BIGNUM *BN_value_one(void)
{
  if (pthread_once(&BN_value_one_once, (void (*)(void))BN_value_one_init))
    abort();
  return (const BIGNUM *)&BN_value_one_storage;
}

double BN_value_one_init()
{
  double result;

  BN_value_one_storage = (uint64_t)&BN_value_one_do_init_kOneLimbs;
  *(_QWORD *)&result = 0x100000001;
  *(_OWORD *)&dword_253EA7938 = xmmword_208F1E4A0;
  return result;
}

int BN_num_bits(const BIGNUM *a)
{
  uint64_t top;
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  unint64_t *d;
  uint64_t v7;
  int v9;
  unint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  int v17;

  top = a->top;
  v2 = top & ((int)top >> 31);
  v3 = 8 * top - 8;
  v4 = a->top;
  while (1)
  {
    v5 = __OFSUB__(v4--, 1);
    if (v4 < 0 != v5)
      break;
    d = a->d;
    v7 = *(unint64_t *)((char *)a->d + v3);
    v3 -= 8;
    if (v7)
    {
      v2 = v4 + 1;
      goto LABEL_8;
    }
  }
  if ((top & 0x80000000) == 0)
    return 0;
  d = a->d;
LABEL_8:
  v9 = v2 - 1;
  v10 = d[v9];
  v11 = v10 != 0;
  v12 = HIDWORD(v10) != 0;
  if (HIDWORD(v10))
    v10 >>= 32;
  v13 = v10 >> 16 != 0;
  if (v10 >> 16)
    v10 >>= 16;
  v14 = v10 > 0xFF;
  if (v10 > 0xFF)
    v10 >>= 8;
  v15 = v10 > 0xF;
  if (v10 > 0xF)
    v10 >>= 4;
  v16 = v10 > 3;
  if (v10 > 3)
    v10 >>= 2;
  v17 = v11 | (v9 << 6) | (32 * v12) | (16 * v13) | (8 * v14) | (4 * v15) | (2 * v16);
  if (v10 <= 1)
    return v17;
  else
    return v17 + 1;
}

uint64_t BN_num_bytes(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  int v17;

  v1 = *((unsigned int *)a1 + 2);
  v2 = v1 & ((int)v1 >> 31);
  v3 = 8 * v1 - 8;
  v4 = *((_DWORD *)a1 + 2);
  while (1)
  {
    v5 = __OFSUB__(v4--, 1);
    if (v4 < 0 != v5)
      break;
    v6 = *a1;
    v7 = *(_QWORD *)(*a1 + v3);
    v3 -= 8;
    if (v7)
    {
      v2 = v4 + 1;
      goto LABEL_8;
    }
  }
  if ((v1 & 0x80000000) == 0)
    return 0;
  v6 = *a1;
LABEL_8:
  v9 = v2 - 1;
  v10 = *(_QWORD *)(v6 + 8 * v9);
  v11 = v10 != 0;
  v12 = HIDWORD(v10) != 0;
  if (HIDWORD(v10))
    v10 >>= 32;
  v13 = v10 >> 16 != 0;
  if (v10 >> 16)
    v10 >>= 16;
  v14 = v10 > 0xFF;
  if (v10 > 0xFF)
    v10 >>= 8;
  v15 = v10 > 0xF;
  if (v10 > 0xF)
    v10 >>= 4;
  v16 = v10 > 3;
  if (v10 > 3)
    v10 >>= 2;
  v17 = v11 | (v9 << 6) | (32 * v12) | (16 * v13) | (8 * v14) | (4 * v15) | (2 * v16);
  if (v10 > 1)
    ++v17;
  return (v17 + 7) >> 3;
}

uint64_t BN_one(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  _OWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(_QWORD **)a1;
LABEL_3:
    *(_DWORD *)(a1 + 16) = 0;
    result = 1;
    *v2 = 1;
    *(_DWORD *)(a1 + 8) = 1;
    return result;
  }
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    ERR_put_error(3, 0, 106, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/bn.c", 360);
    return 0;
  }
  else
  {
    v4 = malloc_type_malloc(0x10uLL, 0x30772F57uLL);
    if (v4)
    {
      *v4 = xmmword_208F1E4B0;
      v2 = (_QWORD *)v4 + 1;
      if (*(_DWORD *)(a1 + 8))
        __memcpy_chk();
      v5 = *(_QWORD **)a1;
      if (*(_QWORD *)a1)
      {
        v7 = *(v5 - 1);
        v6 = v5 - 1;
        v8 = v7 + 8;
        if (v7 != -8)
          bzero(v6, v8);
        free(v6);
      }
      *(_QWORD *)a1 = v2;
      *(_DWORD *)(a1 + 12) = 1;
      goto LABEL_3;
    }
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
}

int BN_set_word(BIGNUM *a, unint64_t w)
{
  unint64_t *d;
  int result;
  _OWORD *v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  size_t v10;

  if (w)
  {
    if (a->dmax)
    {
      d = a->d;
LABEL_4:
      a->neg = 0;
      *d = w;
      result = 1;
      a->top = 1;
      return result;
    }
    if ((a->flags & 2) != 0)
    {
      ERR_put_error(3, 0, 106, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/bn.c", 360);
      return 0;
    }
    else
    {
      v6 = malloc_type_malloc(0x10uLL, 0x30772F57uLL);
      if (v6)
      {
        *v6 = xmmword_208F1E4B0;
        d = (unint64_t *)v6 + 1;
        if (a->top)
          __memcpy_chk();
        v7 = a->d;
        if (a->d)
        {
          v9 = *(v7 - 1);
          v8 = v7 - 1;
          v10 = v9 + 8;
          if (v9 != -8)
            bzero(v8, v10);
          free(v8);
        }
        a->d = d;
        a->dmax = 1;
        goto LABEL_4;
      }
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      return 0;
    }
  }
  else
  {
    a->neg = 0;
    a->top = 0;
    return 1;
  }
}

uint64_t bn_set_words(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t result;

  result = bn_wexpand(a1, a3);
  if ((_DWORD)result)
  {
    if (8 * a3)
      memmove(*(void **)a1, a2, 8 * a3);
    *(_DWORD *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  return result;
}

uint64_t bn_copy_words(void *__dst, unint64_t a2, char **a3)
{
  unint64_t v6;
  unint64_t v7;
  char *v8;
  int8x8_t v9;
  unint64_t v10;
  int8x16_t *v11;
  int8x16_t v12;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  size_t v19;

  if (*((_DWORD *)a3 + 4))
  {
    ERR_put_error(3, 0, 109, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/bn.c", 317);
    return 0;
  }
  v6 = *((int *)a3 + 2);
  v7 = v6 - a2;
  if (v6 <= a2)
    goto LABEL_13;
  v8 = *a3;
  if (v7 < 4)
  {
    v9 = 0;
    v10 = a2;
LABEL_9:
    v16 = v6 - v10;
    v17 = &v8[8 * v10];
    do
    {
      v18 = *(_QWORD *)v17;
      v17 += 8;
      *(_QWORD *)&v9 |= v18;
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  v10 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + a2;
  v11 = (int8x16_t *)&v8[8 * a2 + 16];
  v12 = 0uLL;
  v13 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  v14 = 0uLL;
  do
  {
    v12 = vorrq_s8(v11[-1], v12);
    v14 = vorrq_s8(*v11, v14);
    v11 += 2;
    v13 -= 4;
  }
  while (v13);
  v15 = vorrq_s8(v14, v12);
  v9 = vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
  if (v7 != (v7 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_9;
LABEL_11:
  v6 = a2;
  if (v9)
  {
    ERR_put_error(3, 0, 102, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/bn.c", 324);
    return 0;
  }
LABEL_13:
  v19 = 8 * a2;
  if (v19)
    bzero(__dst, v19);
  if (8 * v6)
    memcpy(__dst, *a3, 8 * v6);
  return 1;
}

uint64_t bn_resize_words(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  size_t v11;
  int8x16_t *v12;
  int8x16_t v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v4 = *(int *)(a1 + 8);
  v5 = v4 - a2;
  if (v4 <= a2)
  {
    result = bn_wexpand(a1, a2);
    if (!(_DWORD)result)
      return result;
    v10 = *(int *)(a1 + 8);
    v11 = 8 * (a2 - v10);
    if (v11)
      bzero((void *)(*(_QWORD *)a1 + 8 * v10), v11);
LABEL_15:
    *(_DWORD *)(a1 + 8) = a2;
    return 1;
  }
  v6 = *(_QWORD *)a1;
  if (v5 < 4)
  {
    v7 = 0;
    v8 = a2;
LABEL_10:
    v17 = v4 - v8;
    v18 = (uint64_t *)(v6 + 8 * v8);
    do
    {
      v19 = *v18++;
      *(_QWORD *)&v7 |= v19;
      --v17;
    }
    while (v17);
    goto LABEL_12;
  }
  v8 = (v5 & 0xFFFFFFFFFFFFFFFCLL) + a2;
  v12 = (int8x16_t *)(v6 + 8 * a2 + 16);
  v13 = 0uLL;
  v14 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  v15 = 0uLL;
  do
  {
    v13 = vorrq_s8(v12[-1], v13);
    v15 = vorrq_s8(*v12, v15);
    v12 += 2;
    v14 -= 4;
  }
  while (v14);
  v16 = vorrq_s8(v15, v13);
  v7 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_10;
LABEL_12:
  if (!*(_QWORD *)&v7)
    goto LABEL_15;
  ERR_put_error(3, 0, 102, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/bn.c", 399);
  return 0;
}

BOOL BN_parse_asn1_unsigned(unsigned __int8 **a1, BIGNUM *a2)
{
  unint64_t v3;
  const unsigned __int8 *v4;
  uint64_t v5;
  int v7;
  _BOOL4 v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;

  v10 = 0;
  v11 = 0;
  v13 = 0;
  v12 = 0;
  if (!cbs_get_any_asn1_element(a1, &v10, &v12, &v13, 0, 0, 0))
    goto LABEL_5;
  if (v12 != 2)
    goto LABEL_5;
  v3 = v11;
  if (v11 < v13)
    goto LABEL_5;
  v4 = (const unsigned __int8 *)(v10 + v13);
  v5 = v11 - v13;
  v10 += v13;
  v11 -= v13;
  if (v3 == v13)
    goto LABEL_5;
  v7 = *v4;
  if (v5 == 1 || ((v8 = v7 == 0, *((char *)v4 + 1) >= 0) ? (v9 = 1) : (v8 = 0, v9 = v7 != 255), !v8 && v9))
  {
    if ((v7 & 0x80) != 0)
    {
      ERR_put_error(3, 0, 109, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bn_extra/bn_asn1.c", 31);
      return 0;
    }
    else
    {
      return BN_bin2bn(v4, v5, a2) != 0;
    }
  }
  else
  {
LABEL_5:
    ERR_put_error(3, 0, 117, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bn_extra/bn_asn1.c", 26);
    return 0;
  }
}

uint64_t BN_marshal_asn1(uint64_t *a1, uint64_t *a2)
{
  int v2;
  int v3;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int8x16_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  int v33;
  char *v34;
  int8x16_t *v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 v38;
  unint64_t v39;
  unint64_t v40;
  int8x16_t *v41;
  int8x16_t v42;
  unint64_t v43;
  int8x16_t v44;
  int8x16_t v45;
  unint64_t v46;
  int8x8_t v47;
  unint64_t v48;
  int8x8_t *v49;
  int8x8_t v50;
  uint64_t v51;
  unint64_t v52;
  __int8 *v53;
  char v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int8 *v60;
  char v61;
  int8x16_t *v63;
  int8x16_t *v64;
  uint64_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  uint64_t v69;
  int8x8_t *v70;
  int8x8_t *v71;
  uint64_t v72;
  int8x8_t v73;
  _OWORD v74[3];
  char *v75;

  if (!*((_DWORD *)a2 + 4))
  {
    memset(v74, 0, sizeof(v74));
    if (!CBB_flush(a1))
      goto LABEL_80;
    v75 = 0;
    if (!CBB_add_space((uint64_t)a1, &v75, 1))
      goto LABEL_80;
    *v75 = 2;
    if (!cbb_add_child((uint64_t)a1, (uint64_t)v74, 1u, 1))
      goto LABEL_80;
    v6 = *((unsigned int *)a2 + 2);
    v7 = v6;
    v8 = v6 & ((int)v6 >> 31);
    v9 = 8 * v6 - 8;
    v10 = *((_DWORD *)a2 + 2);
    while (1)
    {
      v11 = __OFSUB__(v10--, 1);
      if (v10 < 0 != v11)
        break;
      v12 = (int8x16_t *)*a2;
      v13 = *(_QWORD *)(*a2 + v9);
      v9 -= 8;
      if (v13)
      {
        v14 = v10 + 1;
        goto LABEL_12;
      }
    }
    if ((v6 & 0x80000000) == 0)
      goto LABEL_25;
    v12 = (int8x16_t *)*a2;
    v14 = v6 & ((int)v6 >> 31);
LABEL_12:
    v15 = v12->u64[v14 - 1];
    v16 = v15 != 0;
    if (HIDWORD(v15))
      v15 >>= 32;
    if (v15 >> 16)
      v15 >>= 16;
    if (v15 > 0xFF)
      v15 >>= 8;
    v17 = v15 > 0xF;
    if (v15 > 0xF)
      v15 >>= 4;
    v18 = v15 > 3;
    if (v15 > 3)
      v15 >>= 2;
    v19 = v15 > 1;
    v20 = v16 | (4 * v17) | (2 * v18);
    if (v19)
      ++v20;
    if ((v20 & 7) != 0)
      goto LABEL_27;
LABEL_25:
    v75 = 0;
    if (!CBB_add_space((uint64_t)v74, &v75, 1))
      goto LABEL_80;
    *v75 = 0;
    v6 = *((unsigned int *)a2 + 2);
    v8 = v6 & ((int)v6 >> 31);
    v7 = *((_DWORD *)a2 + 2);
LABEL_27:
    v21 = 8 * v6 - 8;
    while (1)
    {
      v11 = __OFSUB__((_DWORD)v6, 1);
      LODWORD(v6) = v6 - 1;
      if ((int)v6 < 0 != v11)
        break;
      v22 = *a2;
      v23 = *(_QWORD *)(*a2 + v21);
      v21 -= 8;
      if (v23)
      {
        v8 = v6 + 1;
        goto LABEL_34;
      }
    }
    if ((v7 & 0x80000000) == 0)
    {
      v24 = 0;
      goto LABEL_47;
    }
    v22 = *a2;
LABEL_34:
    v25 = v8 - 1;
    v26 = *(_QWORD *)(v22 + 8 * v25);
    v27 = v26 != 0;
    v28 = HIDWORD(v26) != 0;
    if (HIDWORD(v26))
      v26 >>= 32;
    v29 = v26 >> 16 != 0;
    if (v26 >> 16)
      v26 >>= 16;
    v30 = v26 > 0xFF;
    if (v26 > 0xFF)
      v26 >>= 8;
    v31 = v26 > 0xF;
    if (v26 > 0xF)
      v26 >>= 4;
    v32 = v26 > 3;
    if (v26 > 3)
      v26 >>= 2;
    v33 = v27 | (v25 << 6) | (32 * v28) | (16 * v29) | (8 * v30) | (4 * v31) | (2 * v32);
    if (v26 > 1)
      ++v33;
    v24 = (v33 + 7) >> 3;
LABEL_47:
    v75 = 0;
    if (!CBB_add_space((uint64_t)v74, &v75, v24))
      goto LABEL_80;
    v34 = v75;
    v35 = (int8x16_t *)*a2;
    v36 = 8 * *((int *)a2 + 2);
    v37 = v36 - v24;
    if (v36 <= v24)
      goto LABEL_66;
    if (v37 < 8)
    {
      v38 = 0;
      v39 = v24;
      goto LABEL_62;
    }
    if (v37 >= 0x20)
    {
      v40 = v37 & 0xFFFFFFFFFFFFFFE0;
      v41 = (int8x16_t *)((char *)v35 + v24 + 16);
      v42 = 0uLL;
      v43 = v37 & 0xFFFFFFFFFFFFFFE0;
      v44 = 0uLL;
      do
      {
        v42 = vorrq_s8(v41[-1], v42);
        v44 = vorrq_s8(*v41, v44);
        v41 += 2;
        v43 -= 32;
      }
      while (v43);
      v45 = vorrq_s8(v44, v42);
      *(int8x8_t *)v45.i8 = vorr_s8(*(int8x8_t *)v45.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
      v46 = v45.i64[0] | HIDWORD(v45.i64[0]) | ((unint64_t)(v45.i64[0] | HIDWORD(v45.i64[0])) >> 16);
      v38 = v46 | BYTE1(v46);
      if (v37 == v40)
        goto LABEL_65;
      if ((v37 & 0x18) == 0)
      {
        v39 = v24 + v40;
LABEL_62:
        v52 = v39 - v36;
        v53 = &v35->i8[v39];
        do
        {
          v54 = *v53++;
          v38 |= v54;
        }
        while (!__CFADD__(v52++, 1));
        goto LABEL_65;
      }
    }
    else
    {
      v38 = 0;
      v40 = 0;
    }
    v39 = v24 + (v37 & 0xFFFFFFFFFFFFFFF8);
    v47 = (int8x8_t)v38;
    v48 = v40 - (v37 & 0xFFFFFFFFFFFFFFF8);
    v49 = (int8x8_t *)&v35->i8[v24 + v40];
    do
    {
      v50 = *v49++;
      v47 = vorr_s8(v50, v47);
      v48 += 8;
    }
    while (v48);
    v51 = *(_QWORD *)&v47 | HIDWORD(*(_QWORD *)&v47) | ((*(_QWORD *)&v47 | HIDWORD(*(_QWORD *)&v47)) >> 16);
    v38 = v51 | BYTE1(v51);
    if (v37 != (v37 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_62;
LABEL_65:
    if (!v38)
    {
LABEL_66:
      if (v36 >= v24)
        v56 = v24;
      else
        v56 = 8 * *((int *)a2 + 2);
      if (!v56)
      {
LABEL_76:
        if (v36 < v24)
          bzero(v34, v24 - v56);
        if (CBB_flush(a1))
          return 1;
        goto LABEL_80;
      }
      if (v56 < 8 || &v75[v24 - v56] < &v35->i8[v56] && v35 < (int8x16_t *)&v75[v24])
      {
        v57 = 0;
LABEL_74:
        v58 = v56 - v57;
        v59 = &v34[v24 + ~v57];
        v60 = &v35->i8[v57];
        do
        {
          v61 = *v60++;
          *v59-- = v61;
          --v58;
        }
        while (v58);
        goto LABEL_76;
      }
      if (v56 >= 0x20)
      {
        v57 = v56 & 0xFFFFFFE0;
        v63 = v35 + 1;
        v64 = (int8x16_t *)&v75[v24 - 16];
        v65 = v57;
        do
        {
          v66 = vrev64q_s8(v63[-1]);
          v67 = vextq_s8(v66, v66, 8uLL);
          v68 = vrev64q_s8(*v63);
          v64[-1] = vextq_s8(v68, v68, 8uLL);
          *v64 = v67;
          v63 += 2;
          v64 -= 2;
          v65 -= 32;
        }
        while (v65);
        if (v56 == v57)
          goto LABEL_76;
        if ((v56 & 0x18) == 0)
          goto LABEL_74;
      }
      else
      {
        v57 = 0;
      }
      v69 = v57;
      v57 = v56 & 0xFFFFFFF8;
      v70 = (int8x8_t *)&v35->i8[v69];
      v71 = (int8x8_t *)&v34[v24 - v69 - 8];
      v72 = v69 - v57;
      do
      {
        v73 = *v70++;
        *v71-- = vrev64_s8(v73);
        v72 += 8;
      }
      while (v72);
      if (v56 == v57)
        goto LABEL_76;
      goto LABEL_74;
    }
LABEL_80:
    v2 = 118;
    v3 = 52;
    goto LABEL_81;
  }
  v2 = 109;
  v3 = 41;
LABEL_81:
  ERR_put_error(3, 0, v2, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bn_extra/bn_asn1.c", v3);
  return 0;
}

BUF_MEM *BUF_MEM_new(void)
{
  char *v0;

  v0 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (v0)
  {
    *(_QWORD *)v0 = 24;
    *((_QWORD *)v0 + 1) = 0;
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    return (BUF_MEM *)(v0 + 8);
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
}

uint64_t BUF_MEM_reserve(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;

  if (*(_QWORD *)(a1 + 16) >= a2)
    return 1;
  if (a2 >= 0xFFFFFFFFFFFFFFFDLL)
  {
    ERR_put_error(7, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/buf/buf.c", 85);
    return 0;
  }
  if (a2 >= 0xBFFFFFFFFFFFFFFDLL)
  {
    ERR_put_error(7, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/buf/buf.c", 91);
    return 0;
  }
  v4 = (2 * (((a2 + 3) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  result = (uint64_t)OPENSSL_realloc(*(_QWORD **)(a1 + 8), v4);
  if (result)
  {
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = v4;
    return 1;
  }
  return result;
}

int BUF_MEM_grow(BUF_MEM *str, int len)
{
  unint64_t v2;
  int v4;
  unint64_t v5;
  char *v6;

  v2 = *(_QWORD *)&len;
  if (*(_QWORD *)&str->max < *(_QWORD *)&len)
  {
    if (*(_QWORD *)&len >= 0xFFFFFFFFFFFFFFFDLL)
    {
      v4 = 85;
LABEL_11:
      ERR_put_error(7, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/buf/buf.c", v4);
      return 0;
    }
    if (*(_QWORD *)&len >= 0xBFFFFFFFFFFFFFFDLL)
    {
      v4 = 91;
      goto LABEL_11;
    }
    v5 = (2 * (((unint64_t)(*(_QWORD *)&len + 3) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
    v6 = (char *)OPENSSL_realloc((_QWORD *)str->data, v5);
    if (!v6)
      return 0;
    str->data = v6;
    *(_QWORD *)&str->max = v5;
  }
  if (v2 > *(_QWORD *)&str->length)
    bzero(&str->data[*(_QWORD *)&str->length], v2 - *(_QWORD *)&str->length);
  *(_QWORD *)&str->length = v2;
  return v2;
}

uint64_t BUF_MEM_append(unint64_t *a1, void *__src, size_t __n)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t result;

  if (!__n)
    return 1;
  v5 = *a1;
  v6 = *a1 + __n;
  if (__CFADD__(*a1, __n))
  {
    v7 = 127;
LABEL_5:
    ERR_put_error(7, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/buf/buf.c", v7);
    return 0;
  }
  if (a1[2] >= v6)
  {
    result = a1[1];
LABEL_12:
    memcpy((void *)(result + v5), __src, __n);
    *a1 = v6;
    return 1;
  }
  if (v6 >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = 85;
    goto LABEL_5;
  }
  if (v6 >= 0xBFFFFFFFFFFFFFFDLL)
  {
    v7 = 91;
    goto LABEL_5;
  }
  result = (uint64_t)OPENSSL_realloc((_QWORD *)a1[1], (2 * (((v6 + 3) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL);
  if (result)
  {
    a1[1] = result;
    a1[2] = (2 * (((v6 + 3) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
    v5 = *a1;
    goto LABEL_12;
  }
  return result;
}

BIGNUM *__cdecl BN_bin2bn(const unsigned __int8 *s, int len, BIGNUM *ret)
{
  unint64_t v3;
  BIGNUM *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *d;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  size_t v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int64x2_t v32;
  uint64_t v33;
  int8x16_t v34;

  v3 = *(_QWORD *)&len;
  if (ret)
  {
    v5 = ret;
    v6 = 0;
    if (*(_QWORD *)&len)
      goto LABEL_3;
LABEL_21:
    v5->top = 0;
    return v5;
  }
  v17 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v17)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  *v17 = 24;
  v17[1] = 0;
  v5 = (BIGNUM *)(v17 + 1);
  v17[2] = 0;
  v17[3] = 0x100000000;
  v6 = v17 + 1;
  if (!v3)
    goto LABEL_21;
LABEL_3:
  v7 = ((v3 - 1) >> 3) + 1;
  if (!bn_wexpand((uint64_t)v5, v7))
  {
    if (v6)
    {
      v18 = *((_DWORD *)v6 + 5);
      if ((v18 & 2) == 0)
      {
        v19 = *v6;
        if (*v6)
        {
          v21 = *(_QWORD *)(v19 - 8);
          v20 = (void *)(v19 - 8);
          v22 = v21 + 8;
          if (v21 != -8)
            bzero(v20, v22);
          free(v20);
          v18 = *((_DWORD *)v6 + 5);
        }
      }
      if ((v18 & 1) == 0)
      {
        *v6 = 0;
        return 0;
      }
      v24 = *(v6 - 1);
      v23 = v6 - 1;
      v25 = v24 + 8;
      if (v24 != -8)
        bzero(v23, v25);
      free(v23);
    }
    return 0;
  }
  v5->top = v7;
  v5->neg = 0;
  if (v3 > 8 * (int)v7)
    abort();
  v8 = (int)v7;
  d = v5->d;
  v10 = v3 - 8;
  if (v3 >= 8)
  {
    if (v10 >= 0x48
      && (d >= (unint64_t *)&s[v3] || &s[v3 & 7] >= (const unsigned __int8 *)d + (v3 & 0xFFFFFFFFFFFFFFF8)))
    {
      v26 = (v10 >> 3) + 1;
      v27 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      v11 = v3 - v27 * 8;
      v12 = &d[v27];
      v28 = (int64x2_t)(unint64_t)(int)v7;
      v29 = 0uLL;
      v30 = (int8x16_t *)&s[v3 - 16];
      v31 = (int8x16_t *)(d + 2);
      v32.i64[0] = -1;
      v32.i64[1] = -1;
      v33 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v34 = vrev64q_s8(vextq_s8(v30[-1], v30[-1], 8uLL));
        v31[-1] = vrev64q_s8(vextq_s8(*v30, *v30, 8uLL));
        *v31 = v34;
        v28 = vaddq_s64(v28, v32);
        v29 = vaddq_s64(v29, v32);
        v30 -= 2;
        v31 += 2;
        v33 -= 4;
      }
      while (v33);
      v8 = vaddvq_s64(vaddq_s64(v29, v28));
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_12:
        v3 = v11;
        d = v12;
        if (!v11)
          goto LABEL_16;
        goto LABEL_13;
      }
    }
    else
    {
      v11 = v3;
      v12 = v5->d;
    }
    v13 = v11;
    do
    {
      v11 = v13 - 8;
      *v12++ = bswap64(*(_QWORD *)&s[v13 - 8]);
      --v8;
      v13 = v11;
    }
    while (v11 > 7);
    goto LABEL_12;
  }
LABEL_13:
  v14 = 0;
  do
  {
    v15 = *s++;
    v14 = v15 | (v14 << 8);
    --v3;
  }
  while (v3);
  *d = v14;
  --v8;
  v12 = d + 1;
LABEL_16:
  if (8 * v8)
    bzero(v12, 8 * v8);
  return v5;
}

uint64_t BN_bn2bin_padded(char *a1, unint64_t a2, uint64_t a3)
{
  int8x16_t *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  unint64_t v8;
  int8x16_t *v9;
  int8x16_t v10;
  unint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  int8x8_t v15;
  unint64_t v16;
  int8x8_t *v17;
  int8x8_t v18;
  uint64_t v19;
  unint64_t v20;
  __int8 *v21;
  char v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  __int8 *v29;
  char v30;
  int8x16_t *v31;
  int8x16_t *v32;
  unint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  unint64_t v37;
  int8x8_t *v38;
  int8x8_t *v39;
  unint64_t v40;
  int8x8_t v41;

  v3 = *(int8x16_t **)a3;
  v4 = 8 * *(int *)(a3 + 8);
  v5 = v4 - a2;
  if (v4 <= a2)
    goto LABEL_20;
  if (v5 < 8)
  {
    v6 = 0;
    v7 = a2;
    goto LABEL_15;
  }
  if (v5 >= 0x20)
  {
    v8 = v5 & 0xFFFFFFFFFFFFFFE0;
    v9 = (int8x16_t *)((char *)v3 + a2 + 16);
    v10 = 0uLL;
    v11 = v5 & 0xFFFFFFFFFFFFFFE0;
    v12 = 0uLL;
    do
    {
      v10 = vorrq_s8(v9[-1], v10);
      v12 = vorrq_s8(*v9, v12);
      v9 += 2;
      v11 -= 32;
    }
    while (v11);
    v13 = vorrq_s8(v12, v10);
    *(int8x8_t *)v13.i8 = vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
    v14 = v13.i64[0] | HIDWORD(v13.i64[0]) | ((unint64_t)(v13.i64[0] | HIDWORD(v13.i64[0])) >> 16);
    v6 = v14 | BYTE1(v14);
    if (v5 == v8)
      goto LABEL_18;
    if ((v5 & 0x18) == 0)
    {
      v7 = v8 + a2;
LABEL_15:
      v20 = v7 - v4;
      v21 = &v3->i8[v7];
      do
      {
        v22 = *v21++;
        v6 |= v22;
        v25 = __CFADD__(v20++, 1);
      }
      while (!v25);
      goto LABEL_18;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + a2;
  v15 = (int8x8_t)v6;
  v16 = v8 - (v5 & 0xFFFFFFFFFFFFFFF8);
  v17 = (int8x8_t *)&v3->i8[v8 + a2];
  do
  {
    v18 = *v17++;
    v15 = vorr_s8(v18, v15);
    v16 += 8;
  }
  while (v16);
  v19 = *(_QWORD *)&v15 | HIDWORD(*(_QWORD *)&v15) | ((*(_QWORD *)&v15 | HIDWORD(*(_QWORD *)&v15)) >> 16);
  v6 = v19 | BYTE1(v19);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_15;
LABEL_18:
  if (v6)
    return 0;
LABEL_20:
  if (v4 >= a2)
    v24 = a2;
  else
    v24 = 8 * *(int *)(a3 + 8);
  if (!v24)
    goto LABEL_35;
  if (v24 < 8 || (&a1[a2 - v24] < &v3->i8[v24] ? (v25 = v3 >= (int8x16_t *)&a1[a2]) : (v25 = 1), !v25))
  {
    v26 = 0;
    goto LABEL_33;
  }
  if (v24 >= 0x20)
  {
    v26 = v24 & 0xFFFFFFFFFFFFFFE0;
    v31 = v3 + 1;
    v32 = (int8x16_t *)&a1[a2 - 16];
    v33 = v24 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v34 = vrev64q_s8(v31[-1]);
      v35 = vextq_s8(v34, v34, 8uLL);
      v36 = vrev64q_s8(*v31);
      v32[-1] = vextq_s8(v36, v36, 8uLL);
      *v32 = v35;
      v31 += 2;
      v32 -= 2;
      v33 -= 32;
    }
    while (v33);
    if (v24 == v26)
      goto LABEL_35;
    if ((v24 & 0x18) == 0)
    {
LABEL_33:
      v27 = v24 - v26;
      v28 = &a1[a2 + ~v26];
      v29 = &v3->i8[v26];
      do
      {
        v30 = *v29++;
        *v28-- = v30;
        --v27;
      }
      while (v27);
      goto LABEL_35;
    }
  }
  else
  {
    v26 = 0;
  }
  v37 = v26;
  v26 = v24 & 0xFFFFFFFFFFFFFFF8;
  v38 = (int8x8_t *)&v3->i8[v37];
  v39 = (int8x8_t *)&a1[a2 - v37 - 8];
  v40 = v37 - (v24 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v41 = *v38++;
    *v39-- = vrev64_s8(v41);
    v40 += 8;
  }
  while (v40);
  if (v24 != v26)
    goto LABEL_33;
LABEL_35:
  if (v4 < a2)
    bzero(a1, a2 - v24);
  return 1;
}

uint64_t CBB_init(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2 >= 0xFFFFFFFFFFFFFFF8)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  v5 = malloc_type_malloc(a2 + 8, 0x30772F57uLL);
  if (v5)
  {
    *v5 = a2;
    v6 = v5 + 1;
LABEL_6:
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = a2;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a1 + 40) & 0xFC | 1;
    return 1;
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  result = 0;
  if (!a2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  return result;
}

uint64_t CBB_init_fixed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) &= 0xFCu;
  return 1;
}

void CBB_cleanup(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  size_t v4;

  if (!*(_BYTE *)(a1 + 8) && (*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v1 = *(_QWORD *)(a1 + 16);
    if (v1)
    {
      v3 = *(_QWORD *)(v1 - 8);
      v2 = (void *)(v1 - 8);
      v4 = v3 + 8;
      if (v3 != -8)
        bzero(v2, v4);
      free(v2);
    }
  }
}

uint64_t CBB_finish(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 8))
  {
    ERR_put_error(14, 0, 66, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bytestring/cbb.c", 127);
    return 0;
  }
  result = CBB_flush((uint64_t *)a1);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      result = 0;
      if (!a2 || !a3)
        return result;
    }
    else if (!a2)
    {
      goto LABEL_11;
    }
    *a2 = *(_QWORD *)(a1 + 16);
LABEL_11:
    if (a3)
      *a3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    return 1;
  }
  return result;
}

uint64_t CBB_flush(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned __int8 v11;
  uint64_t result;
  int v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;

  v2 = (uint64_t)(a1 + 2);
  v3 = (uint64_t)(a1 + 2);
  if (*((_BYTE *)a1 + 8))
  {
    v3 = *(_QWORD *)v2;
    if (!*(_QWORD *)v2)
      return 0;
  }
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return 0;
  v4 = *a1;
  if (!*a1)
    return 1;
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(unsigned __int8 *)(v4 + 32);
  if (!CBB_flush(*a1))
    goto LABEL_31;
  v7 = v5 + v6;
  v8 = *(_QWORD *)(v4 + 24);
  if (v5 + v6 < v8)
    goto LABEL_31;
  v9 = *(_QWORD *)(v3 + 8);
  v10 = v9 - v7;
  if (v9 < v7)
    goto LABEL_31;
  if ((*(_BYTE *)(v4 + 33) & 1) == 0)
  {
    v11 = *(_BYTE *)(v4 + 32);
    goto LABEL_25;
  }
  if (v10 > 0xFFFFFFFE)
  {
    v13 = 221;
LABEL_30:
    ERR_put_error(14, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bytestring/cbb.c", v13);
    goto LABEL_31;
  }
  if (v10 >> 24)
  {
    v14 = -124;
    v15 = 5;
LABEL_22:
    if (!cbb_buffer_add(v3, (v15 - 1)))
    {
LABEL_31:
      if (*((_BYTE *)a1 + 8))
        v2 = *(_QWORD *)v2;
      result = 0;
      *(_BYTE *)(v2 + 24) |= 2u;
      goto LABEL_34;
    }
    memmove((void *)(*(_QWORD *)v3 + v7 + (v15 - 1)), (const void *)(*(_QWORD *)v3 + v7), v10);
    v8 = *(_QWORD *)(v4 + 24);
    goto LABEL_24;
  }
  if (v10 >> 16)
  {
    v14 = -125;
    v15 = 4;
    goto LABEL_22;
  }
  if (v10 > 0xFF)
  {
    v14 = -126;
    v15 = 3;
    goto LABEL_22;
  }
  if (v10 > 0x7F)
  {
    v14 = -127;
    v15 = 2;
    goto LABEL_22;
  }
  LOBYTE(v15) = 1;
  v14 = v9 - v7;
  v10 = 0;
LABEL_24:
  v16 = *(_QWORD *)v3;
  *(_QWORD *)(v4 + 24) = v8 + 1;
  *(_BYTE *)(v16 + v8) = v14;
  v11 = v15 - 1;
  *(_BYTE *)(v4 + 32) = v15 - 1;
LABEL_25:
  if (v11)
  {
    v17 = v11 - 1;
    do
    {
      *(_BYTE *)(*(_QWORD *)v3 + *(_QWORD *)(v4 + 24) + v17) = v10;
      v10 >>= 8;
      --v17;
    }
    while (v17 < *(unsigned __int8 *)(v4 + 32));
  }
  if (v10)
  {
    v13 = 260;
    goto LABEL_30;
  }
  *(_QWORD *)(v4 + 16) = 0;
  result = 1;
LABEL_34:
  *a1 = 0;
  return result;
}

uint64_t cbb_buffer_add(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v10;
  _QWORD *v11;

  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 8);
    v5 = __CFADD__(v4, a2);
    v6 = v4 + a2;
    if (v5)
    {
      v7 = 81;
LABEL_5:
      ERR_put_error(14, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bytestring/cbb.c", v7);
LABEL_6:
      result = 0;
      *(_BYTE *)(v3 + 24) |= 2u;
      return result;
    }
    v8 = *(_QWORD *)(result + 16);
    if (v6 > v8)
    {
      if ((*(_BYTE *)(result + 24) & 1) == 0)
      {
        v7 = 87;
        goto LABEL_5;
      }
      if (2 * v8 < v6 || v8 < 0)
        v10 = v6;
      else
        v10 = 2 * v8;
      v11 = OPENSSL_realloc(*(_QWORD **)result, v10);
      if (!v11)
        goto LABEL_6;
      *(_QWORD *)v3 = v11;
      *(_QWORD *)(v3 + 16) = v10;
      v6 = *(_QWORD *)(v3 + 8) + a2;
    }
    *(_QWORD *)(v3 + 8) = v6;
    return 1;
  }
  return result;
}

uint64_t CBB_add_u8_length_prefixed(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = CBB_flush(a1);
  if ((_DWORD)result)
    return cbb_add_child((uint64_t)a1, a2, 1u, 0);
  return result;
}

uint64_t CBB_add_u16_length_prefixed(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = CBB_flush(a1);
  if ((_DWORD)result)
    return cbb_add_child((uint64_t)a1, a2, 2u, 0);
  return result;
}

uint64_t CBB_add_u24_length_prefixed(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = CBB_flush(a1);
  if ((_DWORD)result)
    return cbb_add_child((uint64_t)a1, a2, 3u, 0);
  return result;
}

uint64_t CBB_add_asn1(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t result;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  BOOL v11;
  unsigned int v12;
  _BYTE *v13;

  result = CBB_flush(a1);
  if ((_DWORD)result)
  {
    v7 = a3 & 0x1FFFFFFF;
    if (v7 < 0x1F)
    {
      v13 = 0;
      result = CBB_add_space((uint64_t)a1, &v13, 1);
      if ((_DWORD)result)
      {
        *v13 = HIBYTE(a3) & 0xE0 | a3;
        return cbb_add_child((uint64_t)a1, a2, 1u, 1);
      }
    }
    else
    {
      v13 = 0;
      result = CBB_add_space((uint64_t)a1, &v13, 1);
      if ((_DWORD)result)
      {
        *v13 = HIBYTE(a3) | 0x1F;
        v8 = -7;
        v9 = -1;
        v10 = v7;
        do
        {
          v8 += 7;
          ++v9;
          v11 = v10 > 0x7F;
          v10 >>= 7;
        }
        while (v11);
        v12 = v9;
        while (1)
        {
          v13 = 0;
          result = CBB_add_space((uint64_t)a1, &v13, 1);
          if (!(_DWORD)result)
            break;
          *v13 = (v7 >> v8) & 0x7F | ((v12-- != 0) << 7);
          v8 -= 7;
          if (v12 > v9)
            return cbb_add_child((uint64_t)a1, a2, 1u, 1);
        }
      }
    }
  }
  return result;
}

uint64_t cbb_add_child(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v17;

  v8 = (_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
    v8 = (_QWORD *)*v8;
  v9 = v8[1];
  v10 = v9 + a3;
  if (__CFADD__(v9, a3))
  {
    v11 = 81;
LABEL_6:
    ERR_put_error(14, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bytestring/cbb.c", v11);
LABEL_7:
    result = 0;
    *((_BYTE *)v8 + 24) |= 2u;
    return result;
  }
  v13 = v8[2];
  if (v10 <= v13)
  {
    v14 = (_QWORD *)*v8;
    v15 = v8[1];
    v8[1] = v10;
    if (!a3)
      goto LABEL_13;
LABEL_12:
    bzero((char *)v14 + v15, a3);
    goto LABEL_13;
  }
  if ((v8[3] & 1) == 0)
  {
    v11 = 87;
    goto LABEL_6;
  }
  if (2 * v13 < v10 || v13 < 0)
    v17 = v9 + a3;
  else
    v17 = 2 * v13;
  v14 = OPENSSL_realloc((_QWORD *)*v8, v17);
  if (!v14)
    goto LABEL_7;
  v8[2] = v17;
  v15 = v8[1];
  *v8 = v14;
  v8[1] = v15 + a3;
  if (a3)
    goto LABEL_12;
LABEL_13:
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  result = 1;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  *(_BYTE *)(a2 + 32) = a3;
  *(_BYTE *)(a2 + 33) = *(_BYTE *)(a2 + 33) & 0xFE | a4 & 1;
  *(_QWORD *)a1 = a2;
  return result;
}

uint64_t CBB_add_bytes(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result;
  void *__dst;

  __dst = 0;
  result = CBB_add_space(a1, &__dst, a3);
  if ((_DWORD)result)
  {
    if (a3)
      memcpy(__dst, a2, a3);
    return 1;
  }
  return result;
}

uint64_t CBB_add_space(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v13;
  _QWORD *v14;

  result = CBB_flush((uint64_t *)a1);
  if ((_DWORD)result)
  {
    v7 = (uint64_t *)(a1 + 16);
    if (*(_BYTE *)(a1 + 8))
    {
      v7 = (uint64_t *)*v7;
      if (!v7)
        return 0;
    }
    v8 = v7[1];
    v9 = v8 + a3;
    if (__CFADD__(v8, a3))
    {
      v10 = 81;
LABEL_7:
      ERR_put_error(14, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bytestring/cbb.c", v10);
LABEL_8:
      result = 0;
      *((_BYTE *)v7 + 24) |= 2u;
      return result;
    }
    v11 = v7[2];
    if (v9 > v11)
    {
      if ((v7[3] & 1) == 0)
      {
        v10 = 87;
        goto LABEL_7;
      }
      if (2 * v11 < v9 || v11 < 0)
        v13 = v8 + a3;
      else
        v13 = 2 * v11;
      v14 = OPENSSL_realloc((_QWORD *)*v7, v13);
      if (!v14)
        goto LABEL_8;
      *v7 = (uint64_t)v14;
      v7[2] = v13;
      v8 = v7[1];
    }
    if (a2)
      *a2 = *v7 + v8;
    v7[1] = v8 + a3;
    return 1;
  }
  return result;
}

uint64_t CBB_add_zeros(uint64_t a1, size_t a2)
{
  uint64_t result;
  void *v4;

  v4 = 0;
  result = CBB_add_space(a1, &v4, a2);
  if ((_DWORD)result)
  {
    if (a2)
      bzero(v4, a2);
    return 1;
  }
  return result;
}

uint64_t CBB_reserve(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v15;
  _QWORD *v16;

  result = CBB_flush((uint64_t *)a1);
  if ((_DWORD)result)
  {
    v7 = *(unsigned __int8 *)(a1 + 8);
    v8 = (uint64_t *)(a1 + 16);
    if (v7)
    {
      v8 = (uint64_t *)*v8;
      if (!v8)
        return 0;
    }
    v9 = v8[1];
    v10 = __CFADD__(v9, a3);
    v11 = v9 + a3;
    if (v10)
    {
      v12 = 81;
LABEL_7:
      ERR_put_error(14, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bytestring/cbb.c", v12);
LABEL_8:
      result = 0;
      *((_BYTE *)v8 + 24) |= 2u;
      return result;
    }
    v13 = v8[2];
    if (v11 > v13)
    {
      if ((v8[3] & 1) == 0)
      {
        v12 = 87;
        goto LABEL_7;
      }
      if (2 * v13 < v11 || v13 < 0)
        v15 = v11;
      else
        v15 = 2 * v13;
      v16 = OPENSSL_realloc((_QWORD *)*v8, v15);
      if (!v16)
        goto LABEL_8;
      *v8 = (uint64_t)v16;
      v8[2] = v15;
    }
    if (a2)
      *a2 = *v8 + v8[1];
    return 1;
  }
  return result;
}

uint64_t CBB_add_u16(uint64_t a1, __int16 a2)
{
  uint64_t result;
  _BYTE *v4;

  v4 = 0;
  result = CBB_add_space(a1, &v4, 2);
  if ((_DWORD)result)
  {
    v4[1] = a2;
    *v4 = HIBYTE(a2);
    return 1;
  }
  return result;
}

uint64_t CBB_add_u24(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;

  v6 = 0;
  result = CBB_add_space(a1, &v6, 3);
  if ((_DWORD)result)
  {
    v6[2] = a2;
    v6[1] = BYTE1(a2);
    *v6 = BYTE2(a2);
    if (HIBYTE(a2))
    {
      v5 = a1 + 16;
      if (*(_BYTE *)(a1 + 8))
        v5 = *(_QWORD *)v5;
      result = 0;
      *(_BYTE *)(v5 + 24) |= 2u;
      *(_QWORD *)a1 = 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t CBB_add_u32(uint64_t a1, int a2)
{
  uint64_t result;
  _BYTE *v4;

  v4 = 0;
  result = CBB_add_space(a1, &v4, 4);
  if ((_DWORD)result)
  {
    v4[3] = a2;
    v4[2] = BYTE1(a2);
    v4[1] = BYTE2(a2);
    *v4 = HIBYTE(a2);
    return 1;
  }
  return result;
}

uint64_t CBB_add_asn1_uint64_with_tag(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t *v12;
  _OWORD v13[3];
  _BYTE *v14;

  memset(v13, 0, sizeof(v13));
  if (!CBB_add_asn1((uint64_t *)a1, (uint64_t)v13, a3))
    goto LABEL_53;
  if (HIBYTE(a2))
  {
    if (HIBYTE(a2) >= 0x80)
    {
      v14 = 0;
      if (!CBB_add_space((uint64_t)v13, &v14, 1))
        goto LABEL_53;
      *v14 = 0;
    }
    v14 = 0;
    if (!CBB_add_space((uint64_t)v13, &v14, 1))
      goto LABEL_53;
    *v14 = HIBYTE(a2);
    v5 = HIWORD(a2);
    goto LABEL_12;
  }
  if (BYTE6(a2))
  {
    v5 = HIWORD(a2);
    if ((a2 & 0x80000000000000) != 0)
    {
      v14 = 0;
      if (!CBB_add_space((uint64_t)v13, &v14, 1))
        goto LABEL_53;
      *v14 = 0;
    }
LABEL_12:
    v14 = 0;
    if (!CBB_add_space((uint64_t)v13, &v14, 1))
      goto LABEL_53;
    *v14 = v5;
    v6 = a2 >> 40;
    goto LABEL_14;
  }
  if (BYTE5(a2))
  {
    v6 = a2 >> 40;
    if (((a2 >> 40) & 0x80) != 0)
    {
      v14 = 0;
      if (!CBB_add_space((uint64_t)v13, &v14, 1))
        goto LABEL_53;
      *v14 = 0;
    }
LABEL_14:
    v14 = 0;
    if (!CBB_add_space((uint64_t)v13, &v14, 1))
      goto LABEL_53;
    *v14 = v6;
    v7 = HIDWORD(a2);
    goto LABEL_16;
  }
  if (BYTE4(a2))
  {
    v7 = HIDWORD(a2);
    if ((a2 & 0x8000000000) != 0)
    {
      v14 = 0;
      if (!CBB_add_space((uint64_t)v13, &v14, 1))
        goto LABEL_53;
      *v14 = 0;
    }
LABEL_16:
    v14 = 0;
    if (!CBB_add_space((uint64_t)v13, &v14, 1))
      goto LABEL_53;
    *v14 = v7;
    v8 = a2 >> 24;
    goto LABEL_18;
  }
  if (BYTE3(a2))
  {
    v8 = a2 >> 24;
    if (((a2 >> 24) & 0x80) != 0)
    {
      v14 = 0;
      if (!CBB_add_space((uint64_t)v13, &v14, 1))
        goto LABEL_53;
      *v14 = 0;
    }
LABEL_18:
    v14 = 0;
    if (!CBB_add_space((uint64_t)v13, &v14, 1))
      goto LABEL_53;
    *v14 = v8;
    v9 = a2 >> 16;
    goto LABEL_20;
  }
  if (BYTE2(a2))
  {
    v9 = a2 >> 16;
    if (((a2 >> 16) & 0x80) != 0)
    {
      v14 = 0;
      if (!CBB_add_space((uint64_t)v13, &v14, 1))
        goto LABEL_53;
      *v14 = 0;
    }
LABEL_20:
    v14 = 0;
    if (!CBB_add_space((uint64_t)v13, &v14, 1))
      goto LABEL_53;
    *v14 = v9;
    v10 = a2 >> 8;
    goto LABEL_22;
  }
  if (BYTE1(a2))
  {
    v10 = a2 >> 8;
    if (((a2 >> 8) & 0x80) != 0)
    {
      v14 = 0;
      if (!CBB_add_space((uint64_t)v13, &v14, 1))
        goto LABEL_53;
      *v14 = 0;
    }
LABEL_22:
    v14 = 0;
    if (!CBB_add_space((uint64_t)v13, &v14, 1))
      goto LABEL_53;
    *v14 = v10;
    goto LABEL_24;
  }
  if ((_BYTE)a2)
  {
    if ((a2 & 0x80) != 0)
    {
      v14 = 0;
      if (!CBB_add_space((uint64_t)v13, &v14, 1))
        goto LABEL_53;
      *v14 = 0;
    }
LABEL_24:
    v14 = 0;
    if (CBB_add_space((uint64_t)v13, &v14, 1))
    {
      *v14 = a2;
      return CBB_flush((uint64_t *)a1);
    }
    goto LABEL_53;
  }
  v14 = 0;
  if (CBB_add_space((uint64_t)v13, &v14, 1))
  {
    *v14 = 0;
    return CBB_flush((uint64_t *)a1);
  }
LABEL_53:
  v12 = (uint64_t *)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
    v12 = (uint64_t *)*v12;
  result = 0;
  *((_BYTE *)v12 + 24) |= 2u;
  *(_QWORD *)a1 = 0;
  return result;
}

uint64_t CBB_add_asn1_octet_string(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result;
  uint64_t v7;
  _OWORD v8[3];
  _BYTE *v9;

  memset(v8, 0, sizeof(v8));
  if (CBB_flush((uint64_t *)a1))
  {
    v9 = 0;
    if (CBB_add_space(a1, &v9, 1))
    {
      *v9 = 4;
      if (cbb_add_child(a1, (uint64_t)v8, 1u, 1))
      {
        v9 = 0;
        if (CBB_add_space((uint64_t)v8, &v9, a3))
        {
          if (a3)
            memcpy(v9, a2, a3);
          if (CBB_flush((uint64_t *)a1))
            return 1;
        }
      }
    }
  }
  v7 = a1 + 16;
  if (*(_BYTE *)(a1 + 8))
    v7 = *(_QWORD *)v7;
  result = 0;
  *(_BYTE *)(v7 + 24) |= 2u;
  *(_QWORD *)a1 = 0;
  return result;
}

uint64_t CBB_add_asn1_BOOL(uint64_t a1, int a2)
{
  char v4;
  uint64_t result;
  uint64_t v6;
  _OWORD v7[3];
  char *v8;

  memset(v7, 0, sizeof(v7));
  if (CBB_flush((uint64_t *)a1))
  {
    v8 = 0;
    if (CBB_add_space(a1, &v8, 1))
    {
      *v8 = 1;
      if (cbb_add_child(a1, (uint64_t)v7, 1u, 1))
      {
        v8 = 0;
        if (CBB_add_space((uint64_t)v7, &v8, 1))
        {
          v4 = a2 ? -1 : 0;
          *v8 = v4;
          if (CBB_flush((uint64_t *)a1))
            return 1;
        }
      }
    }
  }
  v6 = a1 + 16;
  if (*(_BYTE *)(a1 + 8))
    v6 = *(_QWORD *)v6;
  result = 0;
  *(_BYTE *)(v6 + 24) |= 2u;
  *(_QWORD *)a1 = 0;
  return result;
}

uint64_t CBB_add_asn1_oid_from_text(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;

  result = CBB_flush(a1);
  if (!(_DWORD)result)
    return result;
  if (!a3)
    return 0;
  v7 = *a2 - 48;
  if (v7 > 9)
    return 0;
  v8 = a3 - 1;
  if (a3 == 1)
    return 0;
  v10 = a2[1];
  v9 = a2 + 1;
  v11 = v10 - 48;
  if ((v10 - 48) <= 9)
  {
    while (v7 - 0x199999999999999ALL >= 0xE666666666666667)
    {
      result = 0;
      v12 = 10 * v7;
      if (__CFADD__(v11, v12))
        return result;
      if (!--v8)
        return result;
      v7 = v12 + v11;
      v13 = *++v9;
      v11 = v13 - 48;
      if ((v13 - 48) > 9)
        goto LABEL_12;
    }
    return 0;
  }
LABEL_12:
  result = 0;
  v14 = *v9;
  v41 = v7;
  v42 = v9 + 1;
  v43 = v8 - 1;
  if (v8 == 1 || v14 != 46)
    return result;
  v15 = v9[1] - 48;
  if (v15 > 9)
    return 0;
  v16 = v9 + 2;
  v42 = v9 + 2;
  v43 = v8 - 2;
  if (v8 == 2)
  {
    v18 = 0;
LABEL_21:
    if (v7 <= 2)
    {
LABEL_31:
      result = 0;
      v24 = v15 > 0x27 && v7 != 2;
      if (v15 <= 0xFFFFFFFFFFFFFFAFLL && !v24)
      {
        v25 = v15 + 40 * v7;
        if (v25)
        {
          v26 = 0;
          v27 = v25;
          do
          {
            ++v26;
            v28 = v27 > 0x7F;
            v27 >>= 7;
          }
          while (v28);
        }
        else
        {
          v26 = 0;
        }
        if (v26 <= 1)
          v29 = 1;
        else
          v29 = v26;
        v30 = v29 - 1;
        v31 = 7 * v29 - 7;
        while (1)
        {
          v44 = 0;
          result = CBB_add_space((uint64_t)a1, &v44, 1);
          if (!(_DWORD)result)
            break;
          *v44 = (v25 >> v31) & 0x7F | ((v30-- != 0) << 7);
          v31 -= 7;
          if (v30 >= v29)
          {
            if (!v18)
              return 1;
LABEL_51:
            result = CBS_get_u64_decimal(&v42, &v41);
            if (!(_DWORD)result)
              return result;
            v32 = v43;
            if (v43)
            {
              result = 0;
              v33 = *v42;
              v34 = v43 - 1;
              ++v42;
              --v43;
              if (v32 == 1 || v33 != 46)
                return result;
            }
            else
            {
              v34 = 0;
            }
            v35 = v41;
            if (v41)
            {
              v36 = 0;
              v37 = v41;
              do
              {
                ++v36;
                v28 = v37 > 0x7F;
                v37 >>= 7;
              }
              while (v28);
            }
            else
            {
              v36 = 0;
            }
            if (v36 <= 1)
              v38 = 1;
            else
              v38 = v36;
            v39 = v38 - 1;
            v40 = 7 * v38 - 7;
            while (1)
            {
              v44 = 0;
              result = CBB_add_space((uint64_t)a1, &v44, 1);
              if (!(_DWORD)result)
                return result;
              *v44 = (v35 >> v40) & 0x7F | ((v39-- != 0) << 7);
              v40 -= 7;
              if (v39 >= v38)
              {
                result = 1;
                if (v34)
                  goto LABEL_51;
                return result;
              }
            }
          }
        }
      }
      return result;
    }
    return 0;
  }
  v17 = *v16 - 48;
  if (v17 <= 9)
  {
    v19 = &v9[v8];
    v20 = 2 - v8;
    while (v15 - 0x199999999999999ALL >= 0xE666666666666667)
    {
      v21 = 10 * v15;
      if (__CFADD__(v17, v21))
        break;
      v15 = v21 + v17;
      if (v20 == -1)
      {
        v18 = 0;
        v42 = v19;
        v43 = 0;
        if (v7 > 2)
          return 0;
        goto LABEL_31;
      }
      v22 = *++v16;
      v17 = v22 - 48;
      ++v20;
      if ((v22 - 48) > 9)
      {
        result = 0;
        v18 = -v20 - 1;
        v42 = v16 + 1;
        v43 = v18;
        if (-v20 != 1)
          goto LABEL_18;
        return result;
      }
    }
    return 0;
  }
  result = 0;
  v18 = v8 - 3;
  v42 = v16 + 1;
  v43 = v8 - 3;
  if (v8 == 3)
    return result;
LABEL_18:
  if (*v16 == 46)
    goto LABEL_21;
  return result;
}

uint64_t CBB_flush_asn1_set_of(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  size_t v4;
  size_t v5;
  unsigned __int8 *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  size_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  size_t *v22;
  size_t v23;
  char v24;
  unsigned __int8 *v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  size_t v35;

  if (!CBB_flush((uint64_t *)a1))
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = v4 + *(unsigned __int8 *)(a1 + 32);
    v6 = (unsigned __int8 *)(v5 + *v3);
    v7 = v3[1] - v5;
    v34 = v6;
    v35 = v7;
    if (!v7)
      return 1;
LABEL_6:
    v8 = 0;
    v9 = 0;
    do
    {
      if (!cbs_get_any_asn1_element(&v34, 0, 0, 0, 0, 0, 0))
      {
        ERR_put_error(14, 0, 66, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bytestring/cbb.c", 676);
        return 0;
      }
      ++v9;
      v8 += 16;
    }
    while (v35);
    if (v9 < 2)
      return 1;
    if (v2)
    {
      v12 = v4 + *(unsigned __int8 *)(a1 + 32);
      v4 = v3[1] - v12;
      v3 = (_QWORD *)(v12 + *v3);
    }
    if (v4)
    {
      if (v4 <= 0xFFFFFFFFFFFFFFF7)
      {
        v13 = malloc_type_malloc(v4 + 8, 0x30772F57uLL);
        if (v13)
        {
          *v13 = v4;
          v14 = (unsigned __int8 *)(v13 + 1);
          memcpy(v13 + 1, v3, v4);
          if (!(v9 >> 60))
            goto LABEL_25;
LABEL_22:
          ERR_put_error(14, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 261);
          v10 = 0;
          if (!v14)
            return v10;
          goto LABEL_39;
        }
      }
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      v14 = 0;
      if (v9 >> 60)
        goto LABEL_22;
    }
    else
    {
      v14 = 0;
      if (v9 >> 60)
        goto LABEL_22;
    }
LABEL_25:
    v15 = malloc_type_malloc(v8 + 8, 0x30772F57uLL);
    if (v15)
    {
      v16 = v15;
      *v15 = v8;
      v17 = v15 + 1;
      bzero(v15 + 1, v8);
      if (!v14)
      {
        v10 = 0;
        v32 = *(v17 - 1);
        v29 = (char *)(v17 - 1);
        v31 = v32 + 8;
        if (v32 == -8)
          goto LABEL_44;
        goto LABEL_43;
      }
      v34 = v14;
      v35 = v4;
      v18 = v9;
      v19 = v17;
      do
      {
        if (!cbs_get_any_asn1_element(&v34, v19, 0, 0, 0, 0, 0))
        {
          v10 = 0;
          v24 = 0;
          v33 = *((_QWORD *)v14 - 1);
          v25 = v14 - 8;
          v27 = v33 + 8;
          if (v33 != -8)
            goto LABEL_40;
          goto LABEL_41;
        }
        v19 += 2;
        --v18;
      }
      while (v18);
      qsort(v17, v9, 0x10uLL, (int (__cdecl *)(const void *, const void *))compare_set_of_element);
      v20 = *(_QWORD **)(a1 + 16);
      if (*(_BYTE *)(a1 + 8))
        v20 = (_QWORD *)(*v20 + *(_QWORD *)(a1 + 24) + *(unsigned __int8 *)(a1 + 32));
      v21 = 0;
      v22 = v16 + 2;
      do
      {
        while (!*v22)
        {
          v22 += 2;
          if (!--v9)
            goto LABEL_36;
        }
        memcpy((char *)v20 + v21, (const void *)*(v22 - 1), *v22);
        v23 = *v22;
        v22 += 2;
        v21 += v23;
        --v9;
      }
      while (v9);
LABEL_36:
      v24 = 0;
      v10 = 1;
      v26 = *((_QWORD *)v14 - 1);
      v25 = v14 - 8;
      v27 = v26 + 8;
      if (v26 != -8)
        goto LABEL_40;
LABEL_41:
      free(v25);
      if ((v24 & 1) != 0)
        return v10;
      v30 = *(v17 - 1);
      v29 = (char *)(v17 - 1);
      v31 = v30 + 8;
      if (v30 == -8)
      {
LABEL_44:
        free(v29);
        return v10;
      }
LABEL_43:
      bzero(v29, v31);
      goto LABEL_44;
    }
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    v10 = 0;
    if (!v14)
      return v10;
LABEL_39:
    v17 = 0;
    v24 = 1;
    v28 = *((_QWORD *)v14 - 1);
    v25 = v14 - 8;
    v27 = v28 + 8;
    if (v28 != -8)
LABEL_40:
      bzero(v25, v27);
    goto LABEL_41;
  }
  v4 = *(_QWORD *)(a1 + 24);
  v34 = *(unsigned __int8 **)(a1 + 16);
  v35 = v4;
  if (v4)
    goto LABEL_6;
  return 1;
}

uint64_t compare_set_of_element(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  size_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 >= v3)
    v4 = *(_QWORD *)(a2 + 8);
  else
    v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    result = memcmp(*(const void **)a1, *(const void **)a2, v4);
    if (v2 < v3)
      LODWORD(v6) = -1;
    else
      LODWORD(v6) = 1;
    if (v2 == v3)
      v6 = 0;
    else
      v6 = v6;
    if (!(_DWORD)result)
      return v6;
  }
  else
  {
    if (v2 < v3)
      v7 = -1;
    else
      v7 = 1;
    if (v2 == v3)
      return 0;
    else
      return v7;
  }
  return result;
}

__n128 CRYPTO_cbc128_encrypt(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 *a5, void (*a6)(__n128 *, __n128 *, uint64_t))
{
  unint64_t v9;
  __n128 *v10;
  uint64_t v12;
  unint64_t v13;
  __n128 *v14;
  __n128 *v15;
  __n128 *v16;
  unint64_t v17;
  __n128 *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  __n128 result;

  if (a3)
  {
    v9 = a3;
    v10 = a2;
    if (a3 < 0x10)
    {
      v18 = a5;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = a5;
      v15 = a2;
      do
      {
        v16 = &v10[v13 / 0x10];
        v16->n128_u64[0] = v14->n128_u64[0] ^ *(_QWORD *)(a1 + v13);
        v16->n128_u64[1] = v14->n128_u64[1] ^ *(_QWORD *)(a1 + v13 + 8);
        a6(&v10[v13 / 0x10], &v10[v13 / 0x10], a4);
        v14 = v15++;
        v13 += 16;
        v12 -= 16;
        v17 = v9 + v12;
      }
      while (v9 + v12 > 0xF);
      v10 = (__n128 *)((char *)v10 + v13);
      v18 = v10 - 1;
      if (v9 == v13)
      {
        --v10;
LABEL_30:
        result = *v10;
        *a5 = *v10;
        return result;
      }
      a1 += v13;
      v9 += v12;
      if (v17 >= 0x20)
      {
        v19 = 0;
        do
        {
LABEL_11:
          v10->n128_u8[v19] = v18->n128_u8[v19] ^ *(_BYTE *)(a1 + v19);
          ++v19;
        }
        while (v9 != v19);
        if ((unint64_t)(v19 - 1) > 0xE)
          goto LABEL_29;
        v20 = 16 - v9;
        if (16 - v9 < 8)
        {
          v21 = v9;
          goto LABEL_28;
        }
        if ((unint64_t)((char *)v10 - (char *)v18) < 0x20)
        {
          v21 = v9;
          goto LABEL_28;
        }
        if (v20 >= 0x20)
        {
          v22 = v20 & 0xFFFFFFFFFFFFFFE0;
          v23 = (__int128 *)((char *)&v18[1] + v9);
          v24 = (_OWORD *)((char *)v10[1].n128_u64 + v9);
          v25 = v20 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v26 = *v23;
            *(v24 - 1) = *(v23 - 1);
            *v24 = v26;
            v23 += 2;
            v24 += 2;
            v25 -= 32;
          }
          while (v25);
          if (v20 == v22)
            goto LABEL_29;
          if ((v20 & 0x18) == 0)
          {
            v21 = v9 + v22;
            do
            {
LABEL_28:
              v10->n128_u8[v21] = v18->n128_u8[v21];
              ++v21;
            }
            while (v21 != 16);
LABEL_29:
            a6(v10, v10, a4);
            goto LABEL_30;
          }
        }
        else
        {
          v22 = 0;
        }
        v21 = v9 + (v20 & 0xFFFFFFFFFFFFFFF8);
        v27 = v22 - (v20 & 0xFFFFFFFFFFFFFFF8);
        v28 = v22 + v9;
        v29 = (uint64_t *)((char *)v18 + v22 + v9);
        v30 = (unint64_t *)((char *)v10->n128_u64 + v28);
        do
        {
          v31 = *v29++;
          *v30++ = v31;
          v27 += 8;
        }
        while (v27);
        if (v20 == (v20 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_29;
        goto LABEL_28;
      }
    }
    v19 = 0;
    goto LABEL_11;
  }
  return result;
}

unint64_t CRYPTO_cbc128_decrypt(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, int8x16_t *a5, uint64_t (*a6)(int8x16_t *, int8x16_t *, uint64_t))
{
  unint64_t v9;
  int8x16_t *v10;
  int8x16_t *v11;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int8x16_t *v23;
  BOOL v25;
  BOOL v27;
  BOOL v29;
  BOOL v31;
  BOOL v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  __int8 v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int8 *v45;
  __int8 *v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD v54[2];
  _QWORD v55[2];

  v55[1] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return result;
  v9 = a3;
  v10 = (int8x16_t *)a2;
  v11 = (int8x16_t *)result;
  v13 = result > 0x1F && result - 32 >= a2;
  if (result < a2 || v13)
  {
    if (a3 < 0x10)
    {
      *a5 = *a5;
    }
    else
    {
      v17 = (uint64_t *)a5;
      do
      {
        v18 = (uint64_t *)v11;
        result = a6(v11, v10, a4);
        v19 = v10->i64[1];
        v10->i64[0] ^= *v17;
        v9 -= 16;
        v10->i64[1] = v17[1] ^ v19;
        ++v11;
        ++v10;
        v17 = v18;
      }
      while (v9 > 0xF);
      *a5 = v11[-1];
      if (!v9)
        return result;
    }
  }
  else if (a3 >= 0x10)
  {
    do
    {
      result = a6(v11, (int8x16_t *)v54, a4);
      v14 = v54[1];
      v15 = v11->i64[0];
      v10->i64[0] = a5->i64[0] ^ v54[0];
      a5->i64[0] = v15;
      v16 = v11->i64[1];
      v10->i64[1] = a5->i64[1] ^ v14;
      a5->i64[1] = v16;
      v9 -= 16;
      ++v11;
      ++v10;
    }
    while (v9 > 0xF);
    if (!v9)
      return result;
  }
  result = a6(v11, (int8x16_t *)v54, a4);
  if (v9 >= 0x20)
  {
    v20 = 0;
    v21 = (unint64_t)v10->u64 + v9;
    v22 = (unint64_t)a5->u64 + v9;
    v23 = (int8x16_t *)((char *)v54 + v9);
    v25 = v10 < (int8x16_t *)&v11->i8[v9] && (unint64_t)v11 < v21;
    v27 = v10 < v23 && (unint64_t)v54 < v21;
    v29 = &v11->i8[v9] > (__int8 *)a5 && (unint64_t)v11 < v22;
    v31 = v23 > a5 && (unint64_t)v54 < v22;
    v32 = v21 <= (unint64_t)a5 || (unint64_t)v10 >= v22;
    if (v32 && !v25 && !v27 && !v29 && !v31)
    {
      v20 = v9 & 0xFFFFFFFFFFFFFFE0;
      v33 = v11 + 1;
      v34 = (int8x16_t *)v55;
      v35 = v10 + 1;
      v36 = a5 + 1;
      v37 = v9 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v38 = v33[-1];
        v39 = *v33;
        v40 = veorq_s8(*v36, *v34);
        v35[-1] = veorq_s8(v36[-1], v34[-1]);
        *v35 = v40;
        v33 += 2;
        v36[-1] = v38;
        *v36 = v39;
        v34 += 2;
        v35 += 2;
        v36 += 2;
        v37 -= 32;
      }
      while (v37);
      goto LABEL_59;
    }
  }
  else
  {
    v20 = 0;
  }
  do
  {
    v41 = v11->i8[v20];
    v10->i8[v20] = a5->i8[v20] ^ *((_BYTE *)v54 + v20);
    a5->i8[v20++] = v41;
LABEL_59:
    ;
  }
  while (v9 != v20);
  if (v20 - 1 <= 0xE)
  {
    v42 = 16 - v9;
    if (16 - v9 < 8)
    {
      v43 = v9;
      goto LABEL_76;
    }
    if ((unint64_t)((char *)a5 - (char *)v11) < 0x20)
    {
      v43 = v9;
      goto LABEL_76;
    }
    if (v42 >= 0x20)
    {
      v44 = v42 & 0xFFFFFFFFFFFFFFE0;
      v45 = &v11[1].i8[v9];
      v46 = &a5[1].i8[v9];
      v47 = v42 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v48 = *(_OWORD *)v45;
        *((_OWORD *)v46 - 1) = *((_OWORD *)v45 - 1);
        *(_OWORD *)v46 = v48;
        v45 += 32;
        v46 += 32;
        v47 -= 32;
      }
      while (v47);
      if (v42 == v44)
        return result;
      if ((v42 & 0x18) == 0)
      {
        v43 = v9 + v44;
        goto LABEL_76;
      }
    }
    else
    {
      v44 = 0;
    }
    v43 = v9 + (v42 & 0xFFFFFFFFFFFFFFF8);
    v49 = v44 - (v42 & 0xFFFFFFFFFFFFFFF8);
    v50 = v9 + v44;
    v51 = (uint64_t *)((char *)v11->i64 + v9 + v44);
    v52 = (uint64_t *)((char *)a5->i64 + v50);
    do
    {
      v53 = *v51++;
      *v52++ = v53;
      v49 += 8;
    }
    while (v49);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFF8))
      return result;
    do
    {
LABEL_76:
      a5->i8[v43] = v11->i8[v43];
      ++v43;
    }
    while (v43 != 16);
  }
  return result;
}

BOOL CBS_strdup(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  _QWORD *v8;

  v4 = *a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(v4 - 8);
    v5 = (void *)(v4 - 8);
    v7 = v6 + 8;
    if (v6 != -8)
      bzero(v5, v7);
    free(v5);
  }
  v8 = OPENSSL_strndup(*(_BYTE **)a1, *(_QWORD *)(a1 + 8));
  *a2 = (uint64_t)v8;
  return v8 != 0;
}

uint64_t CBS_get_u64_decimal(unsigned __int8 **a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[1];
  if (v2 && (v3 = (uint64_t)*a1, v4 = **a1 - 48, v4 <= 9))
  {
    *a1 = (unsigned __int8 *)(v3 + 1);
    a1[1] = v2 - 1;
    if (v2 != (unsigned __int8 *)1)
    {
      v6 = v2 - 2;
      v7 = (unsigned __int8 *)(v3 + 2);
      do
      {
        v8 = *(v7 - 1) - 48;
        if (v8 > 9)
          break;
        *a1 = v7;
        a1[1] = v6;
        if ((unint64_t)(v4 - 0x199999999999999ALL) < 0xE666666666666667)
          return 0;
        v9 = 10 * v4;
        if (__CFADD__(v8, v9))
          return 0;
        v4 = v9 + v8;
        --v6;
        ++v7;
      }
      while (v6 != (unsigned __int8 *)-1);
    }
    result = 1;
    *a2 = v4;
  }
  else
  {
    result = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t CBS_get_any_asn1(unsigned __int8 **a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;

  v8 = 0;
  result = cbs_get_any_asn1_element(a1, a2, a3, &v8, 0, 0, 0);
  if ((_DWORD)result)
  {
    v5 = a2[1];
    v6 = v5 >= v8;
    v7 = v5 - v8;
    if (v6)
    {
      *a2 += v8;
      a2[1] = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cbs_get_any_asn1_element(unsigned __int8 **a1, _QWORD *a2, _DWORD *a3, unint64_t *a4, _DWORD *a5, _DWORD *a6, int a7)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unint64_t v25;
  unsigned __int8 *v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v7 = *a1;
  v8 = a1[1];
  if (a7)
  {
    *a5 = 0;
    *a6 = 0;
  }
  if (!v8)
    return 0;
  v9 = v7 + 1;
  v10 = *v7;
  v11 = v8 - 1;
  LODWORD(v12) = v10 & 0x1F;
  if ((_DWORD)v12 == 31)
  {
    v13 = 0;
    while (v11)
    {
      if (v13 >> 57)
        break;
      v15 = *v9++;
      v14 = v15;
      if (!v13 && v14 == 128)
        break;
      v12 = v14 & 0x7F | (v13 << 7);
      --v11;
      v13 = v12;
      if ((v14 & 0x80) == 0)
      {
        if (v12 - 0x20000000 < 0xFFFFFFFFE000001FLL)
          return 0;
        goto LABEL_13;
      }
    }
    return 0;
  }
LABEL_13:
  v16 = v12 | (v10 << 24) & 0xE0000000;
  if ((v16 & 0xDFFFFFFF) == 0)
    return 0;
  if (a3)
    *a3 = v16;
  if (!v11)
    return 0;
  v18 = (char)*v9;
  v17 = v9 + 1;
  v19 = (unint64_t)(v11 - 1);
  v20 = v18;
  v21 = v8 - (v11 - 1);
  if ((v18 & 0x80000000) == 0)
  {
    v22 = v21 + v20;
    if (!a4)
      goto LABEL_20;
    goto LABEL_19;
  }
  v25 = v20 & 0x7F;
  if (a7 && (v16 & 0x20000000) != 0 && !(_DWORD)v25)
  {
    if (a4)
    {
      *a4 = v21;
      v8 = a1[1];
    }
    *a5 = 1;
    *a6 = 1;
    v27 = (unint64_t)v8 >= v21;
    v26 = &v8[-v21];
    if (!v27)
      return 0;
    *a1 = &v7[v21];
    a1[1] = v26;
    if (a2)
    {
LABEL_23:
      *a2 = v7;
      a2[1] = v21;
    }
    return 1;
  }
  v27 = (v25 - 5) >= 0xFFFFFFFC && v19 >= v25;
  if (!v27)
    return 0;
  v28 = 0;
  v29 = v25;
  do
  {
    v30 = *v17++;
    v28 = v30 | (v28 << 8);
    --v29;
  }
  while (v29);
  if (v28 > 0x7F)
  {
    if (v28 >> (8 * v25 - 8))
      goto LABEL_48;
    if (!a7)
      return 0;
  }
  else
  {
    if (!a7)
      return 0;
    *a5 = 1;
    if (v28 >> (8 * v25 - 8))
      goto LABEL_48;
  }
  *a5 = 1;
LABEL_48:
  v21 += v25;
  if (!__CFADD__(v28, v21))
  {
    v22 = v28 + v21;
    if (!a4)
    {
LABEL_20:
      v27 = (unint64_t)v8 >= v22;
      v23 = &v8[-v22];
      if (!v27)
        return 0;
      *a1 = &v7[v22];
      a1[1] = v23;
      v21 = v22;
      if (a2)
        goto LABEL_23;
      return 1;
    }
LABEL_19:
    *a4 = v21;
    v8 = a1[1];
    goto LABEL_20;
  }
  return 0;
}

uint64_t CBS_get_asn1(unsigned __int8 **a1, _QWORD *a2, int a3)
{
  _QWORD *v5;
  int any_asn1_element;
  uint64_t result;
  BOOL v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD v13[2];
  int v14;
  unint64_t v15;

  v15 = 0;
  v14 = 0;
  v13[0] = 0;
  v13[1] = 0;
  if (a2)
    v5 = a2;
  else
    v5 = v13;
  any_asn1_element = cbs_get_any_asn1_element(a1, v5, &v14, &v15, 0, 0, 0);
  result = 0;
  if (any_asn1_element)
    v8 = v14 == a3;
  else
    v8 = 0;
  if (v8)
  {
    if (a2)
      v9 = a2;
    else
      v9 = v13;
    v10 = v9[1];
    v11 = v10 >= v15;
    v12 = v10 - v15;
    if (v11)
    {
      *v5 += v15;
      v9[1] = v12;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL CBS_get_asn1_element(unsigned __int8 **a1, _QWORD *a2, int a3)
{
  _QWORD v6[2];
  int v7;
  unint64_t v8;

  v8 = 0;
  v7 = 0;
  v6[0] = 0;
  v6[1] = 0;
  if (!a2)
    a2 = v6;
  return cbs_get_any_asn1_element(a1, a2, &v7, &v8, 0, 0, 0) && v7 == a3;
}

BOOL CBS_peek_asn1_tag(unsigned __int8 **a1, int a2)
{
  unsigned __int8 *v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  int v10;
  _BOOL4 v11;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = **a1;
  LODWORD(v4) = v3 & 0x1F;
  if ((_DWORD)v4 == 31)
  {
    v5 = 0;
    v6 = *a1 + 1;
    v7 = v2 - 1;
    while (v7)
    {
      if (v5 >> 57)
        break;
      v8 = *v6;
      if (!v5 && v8 == 128)
        break;
      v4 = v8 & 0x7F | (v5 << 7);
      ++v6;
      --v7;
      v5 = v4;
      if ((v8 & 0x80) == 0)
      {
        if (v4 - 0x20000000 >= 0xFFFFFFFFE000001FLL)
          goto LABEL_12;
        return 0;
      }
    }
    return 0;
  }
LABEL_12:
  v10 = v4 | (v3 << 24) & 0xE0000000;
  v11 = (v10 & 0xDFFFFFFF) != 0;
  if ((v10 & 0xDFFFFFFF) == 0)
    v10 = 0;
  return v10 == a2 && v11;
}

BOOL CBS_get_asn1_uint64(unsigned __int8 **a1, unint64_t *a2)
{
  _BOOL8 result;
  unsigned __int8 *v4;
  unint64_t v5;
  int v6;
  int v7;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;

  v16 = 0;
  v17 = 0;
  v19 = 0;
  v18 = 0;
  if (!cbs_get_any_asn1_element(a1, &v16, &v18, &v19, 0, 0, 0) || v18 != 2 || v17 < v19)
    return 0;
  v4 = (unsigned __int8 *)(v16 + v19);
  v5 = v17 - v19;
  v16 += v19;
  v17 = v5;
  if (!v5)
    return 0;
  v6 = *v4;
  if (v5 == 1)
  {
    result = 0;
LABEL_20:
    if (((char)v6 & 0x80000000) == 0)
    {
      v10 = 0;
      v11 = 0;
      if (v5 <= 1)
        v12 = 1;
      else
        v12 = v5;
      v13 = v12 - 1;
      do
      {
        *a2 = v11 << 8;
        v14 = v4[v10] | (v11 << 8);
        *a2 = v14;
        v15 = v10 + 1;
        if (v13 == v10)
          break;
        ++v10;
        v11 = v14;
      }
      while (!HIBYTE(v14));
      return v15 >= v5;
    }
    return result;
  }
  v7 = (char)v4[1];
  if (!*v4 && (v7 & 0x80000000) == 0)
    return 0;
  v9 = v6 == 255 && v7 < 0;
  result = 0;
  if (!v9)
    goto LABEL_20;
  return result;
}

BOOL CBS_is_unsigned_asn1_integer(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  unsigned int v2;
  unsigned int v3;
  int v5;
  _BOOL4 v7;

  v1 = a1[1];
  if (!v1)
    return 0;
  v2 = **a1;
  v3 = v2 >> 7;
  if (v1 == (unsigned __int8 *)1)
    return v3 == 0;
  v5 = (char)(*a1)[1];
  if (!**a1 && (v5 & 0x80000000) == 0)
    return 0;
  v7 = v2 != 255 || v5 >= 0;
  return !v3 && v7;
}

uint64_t CBS_get_optional_asn1(unsigned __int8 **a1, _QWORD *a2, int *a3, int a4)
{
  unsigned __int8 *v5;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v24[2];
  int v25;
  unint64_t v26;

  v5 = a1[1];
  if (!v5)
  {
LABEL_11:
    v14 = 0;
    goto LABEL_29;
  }
  v8 = **a1;
  LODWORD(v9) = v8 & 0x1F;
  if ((_DWORD)v9 == 31)
  {
    v10 = 0;
    v11 = *a1 + 1;
    v12 = v5 - 1;
    while (v12)
    {
      if (v10 >> 57)
        break;
      v13 = *v11;
      if (!v10 && v13 == 128)
        break;
      v9 = v13 & 0x7F | (v10 << 7);
      ++v11;
      --v12;
      v10 = v9;
      if ((v13 & 0x80) == 0)
      {
        if (v9 - 0x20000000 >= 0xFFFFFFFFE000001FLL)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
    goto LABEL_11;
  }
LABEL_12:
  v14 = 0;
  v15 = v9 | (v8 << 24) & 0xE0000000;
  v16 = v15 & 0xDFFFFFFF;
  if ((v15 & 0xDFFFFFFF) == 0)
    v15 = 0;
  if (v16)
    v17 = v15 == a4;
  else
    v17 = 0;
  if (v17)
  {
    v26 = 0;
    v25 = 0;
    v24[0] = 0;
    v24[1] = 0;
    if (a2)
      v18 = a2;
    else
      v18 = v24;
    if (!cbs_get_any_asn1_element(a1, v18, &v25, &v26, 0, 0, 0) || v25 != a4)
      return 0;
    v19 = v24;
    if (a2)
      v19 = a2;
    v20 = v19[1];
    v21 = v20 >= v26;
    v22 = v20 - v26;
    if (!v21)
      return 0;
    *v18 += v26;
    v19[1] = v22;
    v14 = 1;
  }
LABEL_29:
  if (a3)
    *a3 = v14;
  return 1;
}

uint64_t CBS_get_optional_asn1_octet_string(unsigned __int8 **a1, _QWORD *a2, int *a3, int a4)
{
  uint64_t result;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  unint64_t v18;

  v14 = 0;
  v15 = 0;
  v13 = 0;
  result = CBS_get_optional_asn1(a1, &v14, &v13, a4);
  if ((_DWORD)result)
  {
    v7 = v13;
    if (v13)
    {
      v18 = 0;
      v17 = 0;
      v16[0] = 0;
      v16[1] = 0;
      if (a2)
        v8 = a2;
      else
        v8 = v16;
      if (!cbs_get_any_asn1_element(&v14, v8, &v17, &v18, 0, 0, 0) || v17 != 4)
        return 0;
      v9 = v16;
      if (a2)
        v9 = a2;
      v10 = v9[1];
      v11 = v10 >= v18;
      v12 = v10 - v18;
      if (!v11)
        return 0;
      *v8 += v18;
      v9[1] = v12;
      if (v15)
        return 0;
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    if (a3)
      *a3 = v7;
    return 1;
  }
  return result;
}

uint64_t CBS_get_optional_asn1_BOOL(unsigned __int8 **a1, int *a2, int a3, int a4)
{
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;

  v13 = 0;
  v14 = 0;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  result = CBS_get_optional_asn1(a1, &v13, &v10, a3);
  if ((_DWORD)result)
  {
    if (!v10)
    {
      *a2 = a4;
      return 1;
    }
    v16 = 0;
    v15 = 0;
    if (cbs_get_any_asn1_element(&v13, &v11, &v15, &v16, 0, 0, 0)
      && v15 == 1
      && (v7 = v12 - v16, v12 >= v16))
    {
      result = 0;
      v8 = (unsigned __int8 *)(v11 + v16);
      v11 += v16;
      v12 -= v16;
      if (v7 == 1 && !v14)
      {
        v9 = *v8;
        if (v9)
        {
          if (v9 != 255)
            return 0;
          v9 = 1;
        }
        *a2 = v9;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL CBS_is_valid_asn1_bitstring(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  unsigned int v2;

  v1 = a1[1];
  if (!v1)
    return 0;
  v2 = **a1;
  if (v2 > 7)
    return 0;
  if (!**a1)
    return 1;
  if (v1 == (unsigned __int8 *)1)
    return 0;
  return ((*a1)[(_QWORD)v1 - 1] & ~(-1 << v2)) == 0;
}

uint64_t CBS_asn1_bitstring_has_bit(unsigned __int8 **a1, unsigned int a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  unint64_t v4;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = **a1;
  if (v3 > 7 || **a1 && (v2 == (unsigned __int8 *)1 || ((*a1)[(_QWORD)v2 - 1] & ~(-1 << v3)) != 0))
    return 0;
  v4 = (a2 >> 3) + 1;
  if ((unint64_t)v2 <= v4)
    return 0;
  else
    return ((*a1)[v4] >> (~(_BYTE)a2 & 7)) & 1;
}

uint64_t CBS_asn1_oid_to_text(unsigned __int8 **a1)
{
  _QWORD *v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  size_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[3];
  void *v23;
  char __str[24];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  memset(v22, 0, sizeof(v22));
  v2 = malloc_type_malloc(0x28uLL, 0x30772F57uLL);
  if (v2)
  {
    v3 = 0;
    *v2 = 32;
    BYTE8(v22[0]) = 0;
    *(_QWORD *)&v22[0] = 0;
    *(_QWORD *)&v22[1] = v2 + 1;
    *(_OWORD *)((char *)&v22[1] + 8) = xmmword_208F1E4E0;
    BYTE8(v22[2]) = 1;
    v4 = *a1;
    v5 = a1[1];
    while (v5)
    {
      if (v3 >> 57)
        break;
      v8 = *v4++;
      v7 = v8;
      if (!v3 && v7 == 128)
        break;
      v6 = v7 & 0x7F | (v3 << 7);
      --v5;
      v3 = v6;
      if ((v7 & 0x80) == 0)
      {
        if (v6 < 0x50)
        {
          snprintf(__str, 0x18uLL, "%llu", v6 > 0x27);
          v12 = strlen(__str);
          v23 = 0;
          if (!CBB_add_space((uint64_t)v22, &v23, v12))
            break;
          if (v12)
            memcpy(v23, __str, v12);
          *(_QWORD *)__str = 0;
          if (!CBB_add_space((uint64_t)v22, __str, 1))
            break;
          **(_BYTE **)__str = 46;
          v13 = v6 - 40;
          if (v6 < 0x28)
            v13 = v6;
          snprintf(__str, 0x18uLL, "%llu", v13);
        }
        else
        {
          *(_QWORD *)__str = 0;
          if (!CBB_add_space((uint64_t)v22, __str, 2))
            break;
          **(_WORD **)__str = 11826;
          snprintf(__str, 0x18uLL, "%llu", v6 - 80);
        }
        v14 = strlen(__str);
        v23 = 0;
        if (!CBB_add_space((uint64_t)v22, &v23, v14))
          break;
        if (v14)
          memcpy(v23, __str, v14);
LABEL_30:
        if (v5)
        {
          v15 = 0;
          while (v5)
          {
            if (v15 >> 57)
              break;
            v18 = *v4++;
            v17 = v18;
            if (!v15 && v17 == 128)
              break;
            v16 = v17 & 0x7F | (v15 << 7);
            --v5;
            v15 = v16;
            if ((v17 & 0x80) == 0)
            {
              *(_QWORD *)__str = 0;
              if (CBB_add_space((uint64_t)v22, __str, 1))
              {
                **(_BYTE **)__str = 46;
                snprintf(__str, 0x18uLL, "%llu", v16);
                v19 = strlen(__str);
                if (CBB_add_bytes((uint64_t)v22, __str, v19))
                  goto LABEL_30;
              }
              goto LABEL_10;
            }
          }
        }
        else
        {
          v20 = 0;
          v21 = 0;
          *(_QWORD *)__str = 0;
          if (CBB_add_space((uint64_t)v22, __str, 1))
          {
            **(_BYTE **)__str = 0;
            if (CBB_finish((uint64_t)v22, &v21, &v20))
              return v21;
          }
        }
        break;
      }
    }
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  }
LABEL_10:
  if (!BYTE8(v22[0]) && (BYTE8(v22[2]) & 1) != 0 && *(_QWORD *)&v22[1])
  {
    v10 = (void *)(*(_QWORD *)&v22[1] - 8);
    v9 = *(_QWORD *)(*(_QWORD *)&v22[1] - 8);
    if (v9 != -8)
      bzero((void *)(*(_QWORD *)&v22[1] - 8), v9 + 8);
    free(v10);
  }
  return 0;
}

uint64_t CBS_parse_rfc5280_time_internal(__int128 *a1, int a2, int a3, int *a4)
{
  int v4;
  int v6;
  uint64_t result;
  int v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  int two_digits;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  int v43;
  unint64_t v44;
  BOOL v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v51;
  __int128 v52;
  int v53;

  v52 = *a1;
  if (a2)
  {
    if (!*((_QWORD *)&v52 + 1))
      return 0;
    v4 = *(unsigned __int8 *)v52;
    if (*((_QWORD *)&v52 + 1) == 1 || (v4 - 58) < 0xFFFFFFF6)
      return 0;
    v6 = *(unsigned __int8 *)(v52 + 1);
    if ((v6 - 58) < 0xFFFFFFF6 || *((_QWORD *)&v52 + 1) == 2)
      return 0;
    result = 0;
    if (*((_QWORD *)&v52 + 1) == 3)
      return result;
    v8 = *(unsigned __int8 *)(v52 + 2);
    if ((v8 - 58) < 0xFFFFFFF6)
      return result;
    v9 = *(unsigned __int8 *)(v52 + 3);
    if ((v9 - 58) < 0xFFFFFFF6)
      return 0;
    v10 = (unsigned __int8 *)(v52 + 4);
    v11 = *((_QWORD *)&v52 + 1) - 4;
    v12 = 10 * v8 + 100 * (v6 + 10 * v4 - 528) + v9 - 528;
    result = 0;
    if (*((_QWORD *)&v52 + 1) == 4)
      return result;
  }
  else
  {
    if (!*((_QWORD *)&v52 + 1))
      return 0;
    v13 = *(unsigned __int8 *)v52;
    if (*((_QWORD *)&v52 + 1) == 1 || (v13 - 58) < 0xFFFFFFF6)
      return 0;
    v15 = *(unsigned __int8 *)(v52 + 1);
    if ((v15 - 58) < 0xFFFFFFF6)
      return 0;
    v16 = v15 + 10 * v13 - 528;
    v17 = v16 >= 0x32 ? 1900 : 2000;
    v12 = v17 + v16;
    if (v12 > 0x801)
      return 0;
    v10 = (unsigned __int8 *)(v52 + 2);
    v11 = *((_QWORD *)&v52 + 1) - 2;
    result = 0;
    if (*((_QWORD *)&v52 + 1) == 2)
      return result;
  }
  if (v11 == 1)
    return result;
  v18 = *v10;
  if ((v18 - 58) < 0xFFFFFFF6)
    return result;
  v19 = v10[1];
  if ((v19 - 58) < 0xFFFFFFF6)
    return 0;
  result = 0;
  if (v11 == 2)
    return result;
  v20 = v19 + 10 * v18;
  if ((v20 - 541) < 0xFFFFFFF4)
    return result;
  result = 0;
  if (v11 == 3)
    return result;
  v21 = v10[2];
  if ((v21 - 58) < 0xFFFFFFF6)
    return result;
  v22 = v10[3];
  if ((v22 - 58) < 0xFFFFFFF6)
    return 0;
  result = 0;
  v23 = v22 + 10 * v21 - 528;
  if (!v23)
    return result;
  v24 = v20 - 528;
  if (v24 > 0xC)
    return result;
  if (((1 << v24) & 0x15AA) != 0)
  {
    result = 0;
    if (v11 == 4 || v23 > 0x1F)
      return result;
    goto LABEL_46;
  }
  if (((1 << v24) & 0xA50) != 0)
  {
    result = 0;
    if (v11 == 4 || v23 > 0x1E)
      return result;
LABEL_46:
    result = 0;
    if (v11 == 5)
      return result;
    v25 = v10[4];
    if ((v25 - 58) < 0xFFFFFFF6)
      return result;
    v48 = v24;
    v49 = v23;
    v47 = v12;
    v26 = v10[5];
    if ((v26 - 58) < 0xFFFFFFF6)
      return 0;
    result = 0;
    if (v11 == 6)
      return result;
    v27 = v26 + 10 * v25 - 528;
    if (v27 > 0x17)
      return result;
    result = 0;
    if (v11 == 7)
      return result;
    v28 = v10[6];
    if ((v28 - 58) < 0xFFFFFFF6)
      return result;
    *(_QWORD *)&v52 = v10 + 8;
    *((_QWORD *)&v52 + 1) = v11 - 8;
    v29 = v10[7];
    if ((v29 - 58) < 0xFFFFFFF6)
      return 0;
    v30 = v29 + 10 * v28 - 528;
    if (v30 > 0x3B)
      return 0;
    v53 = 0;
    two_digits = cbs_get_two_digits(&v52, &v53);
    result = 0;
    if (!two_digits)
      return result;
    v33 = v53;
    if (v53 > 59)
      return result;
    if (!*((_QWORD *)&v52 + 1))
      return 0;
    v34 = *(unsigned __int8 *)v52;
    v35 = *((_QWORD *)&v52 + 1) - 1;
    *(_QWORD *)&v52 = v52 + 1;
    --*((_QWORD *)&v52 + 1);
    if (v34 == 43)
    {
      v36 = 1;
    }
    else
    {
      result = 0;
      if (v34 == 90)
      {
LABEL_85:
        if (!v35)
        {
          if (!a4)
            return 1;
          a4[4] = v48 - 1;
          a4[5] = v47 - 1900;
          a4[2] = v27;
          a4[3] = v49;
          *a4 = v33;
          a4[1] = v30;
          if (!(_DWORD)result)
            return 1;
          result = OPENSSL_gmtime_adj(a4, 0, (int)result);
          if ((_DWORD)result)
            return 1;
          return result;
        }
        return 0;
      }
      if (v34 != 45)
        return result;
      v36 = -1;
    }
    if (!a3)
      return 0;
    v51 = 0;
    if (!cbs_get_two_digits(&v52, (_DWORD *)&v51 + 1))
      return 0;
    v46 = HIDWORD(v51);
    if (SHIDWORD(v51) > 23 || !cbs_get_two_digits(&v52, &v51) || (int)v51 >= 60)
      return 0;
    LODWORD(result) = (3600 * v46 + 60 * v51) * v36;
    v35 = *((_QWORD *)&v52 + 1);
    goto LABEL_85;
  }
  if (v24 != 2)
    return result;
  v37 = (v12 & 3) == 0;
  v38 = v12;
  v39 = -1030792151 * (unsigned __int16)v12;
  HIDWORD(v41) = v39;
  LODWORD(v41) = v39;
  v40 = v41 >> 2;
  v43 = v37 && v40 > 0x28F5C28;
  HIDWORD(v44) = v39;
  LODWORD(v44) = v39;
  if ((v44 >> 4) < 0xA3D70B || v43)
  {
    result = 0;
    if (v11 == 4)
      return result;
    v45 = v23 > 0x1D;
  }
  else
  {
    result = 0;
    if (v11 == 4)
      return result;
    v45 = v23 > 0x1C;
  }
  v12 = v38;
  if (!v45)
    goto LABEL_46;
  return result;
}

uint64_t cbs_get_two_digits(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v6;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (unsigned __int8 *)(*a1)++;
  a1[1] = v2 - 1;
  v4 = *v3;
  if (v2 == 1 || (v4 - 58) < 0xFFFFFFF6)
    return 0;
  *a1 = v3 + 2;
  a1[1] = v2 - 2;
  v6 = v3[1];
  if ((v6 - 58) < 0xFFFFFFF6)
    return 0;
  *a2 = v6 + 10 * v4 - 528;
  return 1;
}

int8x16_t *CRYPTO_chacha_20(int8x16_t *result, int8x16_t *a2, unint64_t a3, unsigned int *a4, int *a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unint64_t v97;
  int8x16_t *v98;
  int8x16_t *v99;
  unint64_t v100;
  int8x16_t *v101;
  int8x16_t v102;
  unint64_t v103;
  int8x8_t *v104;
  int8x8_t *v105;
  int8x8_t *v106;
  unint64_t v107;
  int8x8_t v108;
  int8x8_t v109;
  int8x8_t v110;
  unint64_t v111;
  __int8 *v112;
  char *v113;
  __int8 *v114;
  char v115;
  char v116;
  char v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  _DWORD v122[4];
  _DWORD v123[12];
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v7 = *a4;
    v8 = a4[1];
    v10 = a4[2];
    v9 = a4[3];
    v11 = a4[4];
    v12 = a4[5];
    v13 = a4[6];
    v14 = a4[7];
    v15 = *a5;
    v16 = a5[1];
    v17 = a5[2];
    v120 = *a5;
    v121 = v11;
    v118 = v17;
    v119 = v16;
    do
    {
      v18 = 22;
      v19 = v7;
      v20 = 1634760805;
      v21 = a6;
      v22 = v11;
      v23 = v8;
      v24 = 857760878;
      v25 = v15;
      v26 = v12;
      v27 = v12;
      v28 = v10;
      v29 = 2036477234;
      v30 = v16;
      v31 = v13;
      v32 = v9;
      v33 = v9;
      v34 = 1797285236;
      v35 = v14;
      do
      {
        v36 = v20 + v7;
        HIDWORD(v38) = v21 ^ v36;
        LODWORD(v38) = v21 ^ v36;
        v37 = v38 >> 16;
        v39 = v37 + v22;
        HIDWORD(v38) = v39 ^ v7;
        LODWORD(v38) = v39 ^ v7;
        v40 = v38 >> 20;
        v41 = v40 + v36;
        HIDWORD(v38) = v41 ^ v37;
        LODWORD(v38) = v41 ^ v37;
        v42 = v38 >> 24;
        v43 = v42 + v39;
        HIDWORD(v38) = v43 ^ v40;
        LODWORD(v38) = v43 ^ v40;
        v44 = v38 >> 25;
        v45 = v24 + v8;
        HIDWORD(v38) = v25 ^ v45;
        LODWORD(v38) = v25 ^ v45;
        v46 = v38 >> 16;
        v47 = v46 + v27;
        HIDWORD(v38) = v47 ^ v8;
        LODWORD(v38) = v47 ^ v8;
        v48 = v38 >> 20;
        v49 = v48 + v45;
        HIDWORD(v38) = v49 ^ v46;
        LODWORD(v38) = v49 ^ v46;
        v50 = v38 >> 24;
        v51 = v50 + v47;
        HIDWORD(v38) = v51 ^ v48;
        LODWORD(v38) = v51 ^ v48;
        v52 = v38 >> 25;
        v53 = v29 + v10;
        HIDWORD(v38) = v30 ^ v53;
        LODWORD(v38) = v30 ^ v53;
        v54 = v38 >> 16;
        v55 = v54 + v13;
        HIDWORD(v38) = v55 ^ v10;
        LODWORD(v38) = v55 ^ v10;
        v56 = v38 >> 20;
        v57 = v56 + v53;
        HIDWORD(v38) = v57 ^ v54;
        LODWORD(v38) = v57 ^ v54;
        v58 = v38 >> 24;
        v59 = v58 + v55;
        HIDWORD(v38) = v59 ^ v56;
        LODWORD(v38) = v59 ^ v56;
        v60 = v38 >> 25;
        v61 = v34 + v33;
        HIDWORD(v38) = v17 ^ v61;
        LODWORD(v38) = v17 ^ v61;
        v62 = v38 >> 16;
        v63 = v62 + v14;
        HIDWORD(v38) = v63 ^ v33;
        LODWORD(v38) = v63 ^ v33;
        v64 = v38 >> 20;
        v65 = v64 + v61;
        HIDWORD(v38) = v65 ^ v62;
        LODWORD(v38) = v65 ^ v62;
        v66 = v38 >> 24;
        v67 = v66 + v63;
        HIDWORD(v38) = v67 ^ v64;
        LODWORD(v38) = v67 ^ v64;
        v68 = v38 >> 25;
        v69 = v52 + v41;
        HIDWORD(v38) = v66 ^ v69;
        LODWORD(v38) = v66 ^ v69;
        v70 = v38 >> 16;
        v71 = v70 + v59;
        HIDWORD(v38) = v71 ^ v52;
        LODWORD(v38) = v71 ^ v52;
        v72 = v38 >> 20;
        v20 = v72 + v69;
        HIDWORD(v38) = v20 ^ v70;
        LODWORD(v38) = v20 ^ v70;
        v17 = v38 >> 24;
        LODWORD(v13) = v17 + v71;
        HIDWORD(v38) = v13 ^ v72;
        LODWORD(v38) = v13 ^ v72;
        LODWORD(v8) = v38 >> 25;
        v73 = v60 + v49;
        HIDWORD(v38) = v73 ^ v42;
        LODWORD(v38) = v73 ^ v42;
        v74 = v38 >> 16;
        v75 = v74 + v67;
        HIDWORD(v38) = (v74 + v67) ^ v60;
        LODWORD(v38) = HIDWORD(v38);
        v76 = v38 >> 20;
        v24 = v76 + v73;
        HIDWORD(v38) = v24 ^ v74;
        LODWORD(v38) = v24 ^ v74;
        v21 = v38 >> 24;
        LODWORD(v14) = v21 + v75;
        HIDWORD(v38) = (v21 + v75) ^ v76;
        LODWORD(v38) = HIDWORD(v38);
        LODWORD(v10) = v38 >> 25;
        v77 = v68 + v57;
        HIDWORD(v38) = v77 ^ v50;
        LODWORD(v38) = v77 ^ v50;
        v78 = v38 >> 16;
        v79 = v78 + v43;
        HIDWORD(v38) = v79 ^ v68;
        LODWORD(v38) = v79 ^ v68;
        v80 = v38 >> 20;
        v29 = v80 + v77;
        HIDWORD(v38) = v29 ^ v78;
        LODWORD(v38) = v29 ^ v78;
        v25 = v38 >> 24;
        v22 = v25 + v79;
        HIDWORD(v38) = v22 ^ v80;
        LODWORD(v38) = v22 ^ v80;
        v33 = v38 >> 25;
        v81 = v65 + v44;
        HIDWORD(v38) = (v65 + v44) ^ v58;
        LODWORD(v38) = HIDWORD(v38);
        v82 = v38 >> 16;
        v83 = v82 + v51;
        HIDWORD(v38) = v83 ^ v44;
        LODWORD(v38) = v83 ^ v44;
        v84 = v38 >> 20;
        v34 = v84 + v81;
        HIDWORD(v38) = (v84 + v81) ^ v82;
        LODWORD(v38) = HIDWORD(v38);
        v30 = v38 >> 24;
        v27 = v30 + v83;
        HIDWORD(v38) = v27 ^ v84;
        LODWORD(v38) = v27 ^ v84;
        LODWORD(v7) = v38 >> 25;
        v18 -= 2;
      }
      while (v18 > 2);
      v85 = 0;
      v122[0] = v20 + 1634760805;
      v122[1] = v24 + 857760878;
      if (a3 >= 0x40)
        v86 = 64;
      else
        v86 = a3;
      v122[2] = v29 + 2036477234;
      v122[3] = v34 + 1797285236;
      v87 = v7 + v19;
      v7 = v19;
      v88 = v8 + v23;
      v8 = v23;
      v89 = v10 + v28;
      v10 = v28;
      v9 = v32;
      v123[0] = v87;
      v123[1] = v88;
      v11 = v121;
      v12 = v26;
      v90 = v27 + v26;
      v91 = v13 + v31;
      v13 = v31;
      v92 = v14 + v35;
      v14 = v35;
      v123[2] = v89;
      v123[3] = v33 + v32;
      v93 = v21 + a6;
      v16 = v119;
      v15 = v120;
      v94 = v25 + v120;
      v95 = v30 + v119;
      v96 = v17 + v118;
      v17 = v118;
      v123[4] = v22 + v121;
      v123[5] = v90;
      v123[6] = v91;
      v123[7] = v92;
      v123[8] = v93;
      v123[9] = v94;
      if (v86 <= 1)
        v97 = 1;
      else
        v97 = v86;
      v123[10] = v95;
      v123[11] = v96;
      if (v97 >= 8 && (unint64_t)((char *)result - (char *)a2) >= 0x20)
      {
        if (v97 < 0x20)
        {
          v85 = 0;
LABEL_20:
          v103 = v85;
          v85 = v97 & 0x78;
          v104 = (int8x8_t *)&a2->i8[v103];
          v105 = (int8x8_t *)((char *)v122 + v103);
          v106 = (int8x8_t *)&result->i8[v103];
          v107 = v103 - v85;
          do
          {
            v108 = *v104++;
            v109 = v108;
            v110 = *v105++;
            *v106++ = veor_s8(v110, v109);
            v107 += 8;
          }
          while (v107);
          if (v97 == v85)
            goto LABEL_3;
          goto LABEL_23;
        }
        v85 = v97 & 0x60;
        v98 = a2 + 1;
        v99 = result + 1;
        v100 = v85;
        v101 = (int8x16_t *)v123;
        do
        {
          v102 = veorq_s8(*v101, *v98);
          v99[-1] = veorq_s8(v101[-1], v98[-1]);
          *v99 = v102;
          v98 += 2;
          v101 += 2;
          v99 += 2;
          v100 -= 32;
        }
        while (v100);
        if (v97 == v85)
          goto LABEL_3;
        if ((v97 & 0x18) != 0)
          goto LABEL_20;
      }
LABEL_23:
      v111 = v97 - v85;
      v112 = &result->i8[v85];
      v113 = (char *)v122 + v85;
      v114 = &a2->i8[v85];
      do
      {
        v116 = *v114++;
        v115 = v116;
        v117 = *v113++;
        *v112++ = v117 ^ v115;
        --v111;
      }
      while (v111);
LABEL_3:
      result = (int8x16_t *)((char *)result + v86);
      a2 = (int8x16_t *)((char *)a2 + v86);
      ++a6;
      a3 -= v86;
    }
    while (a3);
  }
  return result;
}

int EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX *a)
{
  int (__cdecl *cleanup)(EVP_CIPHER_CTX *);
  uint64_t v3;
  void *v4;
  uint64_t v5;
  size_t v6;

  if (a->cipher)
  {
    cleanup = a->cipher->cleanup;
    if (cleanup)
      ((void (*)(EVP_CIPHER_CTX *))cleanup)(a);
  }
  v3 = *(_QWORD *)&a->encrypt;
  if (v3)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v4 = (void *)(v3 - 8);
    v6 = v5 + 8;
    if (v5 != -8)
      bzero(v4, v6);
    free(v4);
  }
  *(_QWORD *)&a->final[8] = 0;
  *(_OWORD *)&a->flags = 0u;
  *(_OWORD *)&a->final_used = 0u;
  *(_OWORD *)&a->buf[24] = 0u;
  *(_OWORD *)&a->app_data = 0u;
  *(_OWORD *)&a->iv[8] = 0u;
  *(_OWORD *)&a->buf[8] = 0u;
  *(_OWORD *)&a->encrypt = 0u;
  *(_OWORD *)&a->oiv[8] = 0u;
  *(_OWORD *)&a->cipher = 0u;
  return 1;
}

void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *a)
{
  int (__cdecl *cleanup)(EVP_CIPHER_CTX *);
  uint64_t v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  size_t v9;

  if (a)
  {
    if (a->cipher)
    {
      cleanup = a->cipher->cleanup;
      if (cleanup)
        ((void (*)(EVP_CIPHER_CTX *))cleanup)(a);
    }
    v3 = *(_QWORD *)&a->encrypt;
    if (v3)
    {
      v5 = *(_QWORD *)(v3 - 8);
      v4 = (void *)(v3 - 8);
      v6 = v5 + 8;
      if (v5 != -8)
        bzero(v4, v6);
      free(v4);
    }
    *(_QWORD *)&a->final[8] = 0;
    *(_OWORD *)&a->flags = 0u;
    *(_OWORD *)&a->final_used = 0u;
    *(_OWORD *)&a->buf[24] = 0u;
    *(_OWORD *)&a->app_data = 0u;
    *(_OWORD *)&a->iv[8] = 0u;
    *(_OWORD *)&a->buf[8] = 0u;
    *(_OWORD *)&a->encrypt = 0u;
    *(_OWORD *)&a->oiv[8] = 0u;
    *(_OWORD *)&a->cipher = 0u;
    v8 = *(_QWORD *)&a[-1].final[24];
    v7 = &a[-1].final[24];
    v9 = v8 + 8;
    if (v8 != -8)
      bzero(v7, v9);
    free(v7);
  }
}

int EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned __int8 *key, const unsigned __int8 *iv, int enc)
{
  uint64_t v10;
  const EVP_CIPHER *v11;
  int (__cdecl *cleanup)(EVP_CIPHER_CTX *);
  uint64_t v13;
  void *v14;
  uint64_t v15;
  size_t v16;
  uint64_t flags_low;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t (*v21)(EVP_CIPHER_CTX *, _QWORD, _QWORD, _QWORD);
  int v22;
  int flags_high;
  size_t v24;
  unsigned __int8 *v25;
  const unsigned __int8 *v26;
  int result;
  int v28;
  int v29;
  size_t iv_len;
  uint64_t (*v31)(EVP_CIPHER_CTX *, uint64_t, _QWORD, size_t *);
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  const EVP_CIPHER *v36;
  size_t __n;

  if (enc == -1)
  {
    v10 = *(unsigned int *)&ctx->oiv[4];
    v11 = ctx->cipher;
    if (cipher)
    {
LABEL_3:
      if (v11)
      {
        cleanup = v11->cleanup;
        if (cleanup)
          ((void (*)(EVP_CIPHER_CTX *))cleanup)(ctx);
        v13 = *(_QWORD *)&ctx->encrypt;
        if (v13)
        {
          v15 = *(_QWORD *)(v13 - 8);
          v14 = (void *)(v13 - 8);
          v16 = v15 + 8;
          if (v15 != -8)
            bzero(v14, v16);
          free(v14);
        }
        *(_QWORD *)&ctx->final[8] = 0;
        *(_OWORD *)&ctx->flags = 0u;
        *(_OWORD *)&ctx->final_used = 0u;
        *(_OWORD *)&ctx->buf[24] = 0u;
        *(_OWORD *)&ctx->app_data = 0u;
        *(_OWORD *)&ctx->iv[8] = 0u;
        *(_OWORD *)&ctx->buf[8] = 0u;
        *(_OWORD *)&ctx->encrypt = 0u;
        *(_OWORD *)&ctx->oiv[8] = 0u;
        *(_OWORD *)&ctx->cipher = 0u;
        *(_DWORD *)&ctx->oiv[4] = v10;
      }
      ctx->cipher = cipher;
      flags_low = LODWORD(cipher->flags);
      if ((_DWORD)flags_low)
      {
        v18 = malloc_type_malloc(flags_low + 8, 0x30772F57uLL);
        if (!v18)
        {
          ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
          result = 0;
          *(_QWORD *)&ctx->encrypt = 0;
          ctx->cipher = 0;
          return result;
        }
        *v18 = flags_low;
        *(_QWORD *)&ctx->encrypt = v18 + 1;
        v11 = ctx->cipher;
        *(_DWORD *)ctx->oiv = cipher->key_len;
        *(_DWORD *)&ctx->oiv[8] = 0;
        if ((v11->flags & 0x20000000000) == 0)
        {
LABEL_23:
          flags_high = HIDWORD(v11->flags);
          if ((flags_high & 0x100) == 0)
          {
            switch(flags_high & 0x3F)
            {
              case 0:
              case 1:
                break;
              case 2:
                goto LABEL_36;
              case 3:
                ctx->key_len = 0;
LABEL_36:
                if (iv)
                {
                  iv_len = v11->iv_len;
                  if ((_DWORD)iv_len)
                  {
                    memcpy(&ctx->oiv[12], iv, iv_len);
                    flags_high = HIDWORD(v11->flags);
                  }
                }
                if ((flags_high & 0x3F) != 6)
                  goto LABEL_47;
                LODWORD(__n) = 0;
                v31 = *(uint64_t (**)(EVP_CIPHER_CTX *, uint64_t, _QWORD, size_t *))&v11->ctx_size;
                if (v31)
                {
                  v32 = v31(ctx, 25, 0, &__n);
                  if (v32 != -1)
                  {
                    if (v32 == 1)
                    {
                      v33 = __n;
                      goto LABEL_48;
                    }
LABEL_47:
                    v33 = ctx->cipher->iv_len;
LABEL_48:
                    if (v33)
                    {
                      v25 = &ctx->iv[12];
                      v26 = &ctx->oiv[12];
                      v24 = v33;
LABEL_50:
                      memcpy(v25, v26, v24);
                    }
                    break;
                  }
                  v34 = 105;
                  v35 = 631;
                }
                else
                {
                  v34 = 104;
                  v35 = 625;
                }
                ERR_put_error(30, 0, v34, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", v35);
                goto LABEL_47;
              case 4:
              case 5:
                ctx->key_len = 0;
                if (!iv)
                  break;
                v24 = v11->iv_len;
                if (!(_DWORD)v24)
                  break;
                v25 = &ctx->iv[12];
                v26 = iv;
                goto LABEL_50;
              default:
                return 0;
            }
          }
          v36 = ctx->cipher;
          if (!key && (v36->flags & 0x8000000000) == 0
            || (result = ((uint64_t (*)(EVP_CIPHER_CTX *, const unsigned __int8 *, const unsigned __int8 *, uint64_t))v36->init)(ctx, key, iv, v10)) != 0)
          {
            HIDWORD(ctx->app_data) = 0;
            *(&ctx->key_len + 1) = 0;
            result = 1;
            *(_DWORD *)&ctx->final[8] = 0;
          }
          return result;
        }
      }
      else
      {
        *(_QWORD *)&ctx->encrypt = 0;
        v11 = cipher;
        *(_DWORD *)ctx->oiv = cipher->key_len;
        *(_DWORD *)&ctx->oiv[8] = 0;
        if ((cipher->flags & 0x20000000000) == 0)
          goto LABEL_23;
      }
      v21 = *(uint64_t (**)(EVP_CIPHER_CTX *, _QWORD, _QWORD, _QWORD))&v11->ctx_size;
      if (v21)
      {
        v22 = v21(ctx, 0, 0, 0);
        if (v22 != -1)
        {
          if (v22)
          {
            v11 = ctx->cipher;
            goto LABEL_23;
          }
          goto LABEL_32;
        }
        v28 = 105;
        v29 = 631;
      }
      else
      {
        v28 = 104;
        v29 = 625;
      }
      ERR_put_error(30, 0, v28, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", v29);
LABEL_32:
      ctx->cipher = 0;
      v19 = 107;
      v20 = 178;
      goto LABEL_33;
    }
  }
  else
  {
    v10 = enc != 0;
    *(_DWORD *)&ctx->oiv[4] = v10;
    v11 = ctx->cipher;
    if (cipher)
      goto LABEL_3;
  }
  if (v11)
    goto LABEL_23;
  v19 = 114;
  v20 = 183;
LABEL_33:
  ERR_put_error(30, 0, v19, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", v20);
  return 0;
}

int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl, const unsigned __int8 *in, int inl)
{
  int v5;
  int v6;
  int v7;
  const EVP_CIPHER *cipher;
  int block_size;
  const unsigned __int8 *v12;
  unsigned __int8 *v14;
  uint64_t app_data_high;
  int v16;
  int v17;
  int result;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  if (*(_DWORD *)&ctx->final[8])
  {
    v5 = 66;
    v6 = 259;
LABEL_13:
    ERR_put_error(30, 0, v5, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", v6);
    return 0;
  }
  v7 = inl;
  *(_DWORD *)&ctx->final[8] = 1;
  cipher = ctx->cipher;
  block_size = ctx->cipher->block_size;
  if (block_size >= 2 && (block_size ^ 0x7FFFFFFF) < inl)
  {
    v5 = 69;
    v6 = 271;
    goto LABEL_13;
  }
  v12 = in;
  v14 = out;
  if ((cipher->flags & 0x40000000000) != 0)
  {
    v19 = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, const unsigned __int8 *, _QWORD))cipher->do_cipher)(ctx, out, in, inl);
    if (v19 < 0)
      return 0;
    *outl = v19;
    goto LABEL_34;
  }
  if (inl <= 0)
  {
    result = 0;
    *outl = 0;
    if (!inl)
      goto LABEL_34;
    return result;
  }
  app_data_high = SHIDWORD(ctx->app_data);
  if (!(_DWORD)app_data_high)
  {
    if (((block_size - 1) & inl) != 0)
    {
      block_size = 0;
      goto LABEL_26;
    }
    result = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, const unsigned __int8 *, _QWORD))cipher->do_cipher)(ctx, out, in, inl);
    if (!result)
    {
      *outl = 0;
      return result;
    }
    *outl = v7;
LABEL_34:
    *(_DWORD *)&ctx->final[8] = 0;
    return 1;
  }
  v16 = block_size - app_data_high;
  v17 = inl - (block_size - app_data_high);
  if (inl < block_size - (int)app_data_high)
  {
    memcpy(&ctx->buf[app_data_high + 12], in, inl);
    HIDWORD(ctx->app_data) += v7;
    *outl = 0;
    goto LABEL_34;
  }
  v20 = v16;
  if (block_size != (_DWORD)app_data_high)
  {
    memcpy(&ctx->buf[app_data_high + 12], in, v16);
    cipher = ctx->cipher;
  }
  result = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, unsigned __int8 *, _QWORD))cipher->do_cipher)(ctx, v14, &ctx->buf[12], block_size);
  if (!result)
    return result;
  v12 += v20;
  v14 += block_size;
  cipher = ctx->cipher;
  v7 = v17;
LABEL_26:
  *outl = block_size;
  v21 = (cipher->block_size - 1) & v7;
  v22 = (v7 - v21);
  if ((int)v22 < 1)
  {
LABEL_29:
    if (v21)
      memcpy(&ctx->buf[12], &v12[(int)v22], v21);
    HIDWORD(ctx->app_data) = v21;
    goto LABEL_34;
  }
  result = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, const unsigned __int8 *, uint64_t))cipher->do_cipher)(ctx, v14, v12, v22);
  if (result)
  {
    *outl += v22;
    goto LABEL_29;
  }
  return result;
}

int EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl)
{
  int v3;
  int v4;
  int result;
  const EVP_CIPHER *cipher;
  uint64_t block_size;
  int v11;
  uint64_t app_data_high;

  if (*(_DWORD *)&ctx->final[8])
  {
    v3 = 66;
    v4 = 352;
LABEL_3:
    ERR_put_error(30, 0, v3, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", v4);
    return 0;
  }
  cipher = ctx->cipher;
  if ((ctx->cipher->flags & 0x40000000000) != 0)
  {
    v11 = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, _QWORD, _QWORD))cipher->do_cipher)(ctx, out, 0, 0);
    if (v11 < 0)
    {
      return 0;
    }
    else
    {
      *outl = v11;
      return 1;
    }
  }
  else
  {
    block_size = cipher->block_size;
    if ((_DWORD)block_size == 1)
      goto LABEL_7;
    app_data_high = HIDWORD(ctx->app_data);
    if ((ctx->oiv[9] & 8) != 0)
    {
      if ((_DWORD)app_data_high)
      {
        v3 = 106;
        v4 = 378;
        goto LABEL_3;
      }
LABEL_7:
      *outl = 0;
      return 1;
    }
    if (block_size > app_data_high)
      memset(&ctx->buf[app_data_high + 12], block_size - app_data_high, (block_size + ~(_DWORD)app_data_high) + 1);
    result = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, unsigned __int8 *, uint64_t))cipher->do_cipher)(ctx, out, &ctx->buf[12], block_size);
    if (result)
    {
      *outl = block_size;
      return 1;
    }
  }
  return result;
}

int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl, const unsigned __int8 *in, int inl)
{
  int v5;
  int v6;
  const EVP_CIPHER *cipher;
  size_t block_size;
  unsigned __int8 *v14;
  int v15;
  int result;
  int v17;
  int v18;

  if (*(_DWORD *)&ctx->final[8])
  {
    v5 = 66;
    v6 = 402;
LABEL_21:
    ERR_put_error(30, 0, v5, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", v6);
    return 0;
  }
  cipher = ctx->cipher;
  block_size = ctx->cipher->block_size;
  if (block_size >= 2 && (int)(block_size ^ 0x7FFFFFFF) < inl)
  {
    v5 = 69;
    v6 = 410;
    goto LABEL_21;
  }
  v14 = out;
  if ((cipher->flags & 0x40000000000) != 0)
  {
    v17 = ((uint64_t (*)(EVP_CIPHER_CTX *, unsigned __int8 *, const unsigned __int8 *, _QWORD))cipher->do_cipher)(ctx, out, in, inl);
    v18 = v17 & ~(v17 >> 31);
    result = v17 >= 0;
    *outl = v18;
    return result;
  }
  if (inl <= 0)
  {
    *outl = 0;
    return inl == 0;
  }
  if ((ctx->oiv[9] & 8) != 0)
    return EVP_EncryptUpdate(ctx, out, outl, in, inl);
  v15 = *(&ctx->key_len + 1);
  if (v15)
  {
    if ((_DWORD)block_size)
      memcpy(out, &ctx->flags, block_size);
    v14 += block_size;
  }
  result = EVP_EncryptUpdate(ctx, v14, outl, in, inl);
  if (result)
  {
    if (block_size < 2 || HIDWORD(ctx->app_data))
    {
      *(&ctx->key_len + 1) = 0;
      if (!v15)
        return 1;
    }
    else
    {
      *outl -= block_size;
      *(&ctx->key_len + 1) = 1;
      memcpy(&ctx->flags, &v14[*outl], block_size);
      if (!v15)
        return 1;
    }
    *outl += block_size;
    return 1;
  }
  return result;
}

int EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned __int8 *outm, int *outl)
{
  const EVP_CIPHER *cipher;
  unsigned int block_size;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 v17;
  int *p_final_used;
  unsigned __int8 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;

  *outl = 0;
  if (*(_DWORD *)&ctx->final[8])
  {
    ERR_put_error(30, 0, 66, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 469);
    return 0;
  }
  cipher = ctx->cipher;
  if ((ctx->cipher->flags & 0x40000000000) != 0)
  {
    v7 = ((uint64_t (*)(void))cipher->do_cipher)();
    if ((v7 & 0x80000000) == 0)
    {
      *outl = v7;
      return 1;
    }
    return 0;
  }
  if ((ctx->oiv[9] & 8) != 0)
  {
    if (!HIDWORD(ctx->app_data))
      return 1;
    ERR_put_error(30, 0, 106, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 486);
    return 0;
  }
  block_size = cipher->block_size;
  if (block_size < 2)
    return 1;
  if (HIDWORD(ctx->app_data) || !*(&ctx->key_len + 1))
  {
    ERR_put_error(30, 0, 123, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 495);
    return 0;
  }
  else
  {
    v8 = block_size - 1;
    v9 = *((unsigned __int8 *)&ctx->flags + v8);
    if (*((_BYTE *)&ctx->flags + v8))
      v10 = (int)block_size < v9;
    else
      v10 = 1;
    if (v10)
    {
      ERR_put_error(30, 0, 101, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 504);
      return 0;
    }
    else
    {
      v11 = *((unsigned __int8 *)&ctx->flags + v8);
      while (*((unsigned __int8 *)&ctx->flags + v8) == v9)
      {
        LODWORD(v8) = v8 - 1;
        if (!--v11)
        {
          v12 = block_size - v9;
          if ((int)v12 >= 1)
          {
            if (v12 < 8 || (unint64_t)(outm - (unsigned __int8 *)ctx - 112) < 0x20)
            {
              v13 = 0;
              goto LABEL_27;
            }
            if (v12 >= 0x20)
            {
              v13 = v12 & 0x7FFFFFE0;
              p_final_used = &ctx->final_used;
              v19 = outm + 16;
              v20 = v12 & 0xFFFFFFE0;
              do
              {
                v21 = *(_OWORD *)p_final_used;
                *((_OWORD *)v19 - 1) = *((_OWORD *)p_final_used - 1);
                *(_OWORD *)v19 = v21;
                p_final_used += 8;
                v19 += 32;
                v20 -= 32;
              }
              while (v20);
              if (v13 != v12)
              {
                if ((v12 & 0x18) == 0)
                  goto LABEL_27;
                goto LABEL_37;
              }
            }
            else
            {
              v13 = 0;
LABEL_37:
              v22 = v13;
              v13 = v12 & 0xFFFFFFF8;
              v23 = (uint64_t *)((char *)&ctx->flags + v22);
              v24 = &outm[v22];
              v25 = v22 - v13;
              do
              {
                v26 = *v23++;
                *(_QWORD *)v24 = v26;
                v24 += 8;
                v25 += 8;
              }
              while (v25);
              if (v13 != v12)
              {
LABEL_27:
                v14 = v12 - v13;
                v15 = &outm[v13];
                v16 = (unsigned __int8 *)&ctx->flags + v13;
                do
                {
                  v17 = *v16++;
                  *v15++ = v17;
                  --v14;
                }
                while (v14);
              }
            }
          }
          *outl = v12;
          return 1;
        }
      }
      ERR_put_error(30, 0, 101, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 510);
      return 0;
    }
  }
}

int EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl, const unsigned __int8 *in, int inl)
{
  if (*(_DWORD *)&ctx->oiv[4])
    return EVP_EncryptUpdate(ctx, out, outl, in, inl);
  else
    return EVP_DecryptUpdate(ctx, out, outl, in, inl);
}

int EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned __int8 *outm, int *outl)
{
  if (*(_DWORD *)&ctx->oiv[4])
    return EVP_EncryptFinal_ex(ctx, outm, outl);
  else
    return EVP_DecryptFinal_ex(ctx, outm, outl);
}

uint64_t bn_cmp_words_consttime(uint64_t *a1, unint64_t a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int8x8_t v15;
  unint64_t v16;
  int8x8_t v17;
  unint64_t v18;
  int8x16_t *v19;
  int8x16_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int8x16_t *v27;
  int8x16_t v28;
  unint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;

  if (a2 >= a4)
    v5 = a4;
  else
    v5 = a2;
  if (v5)
  {
    LODWORD(result) = 0;
    v7 = a1;
    v8 = a3;
    do
    {
      v10 = *v7++;
      v9 = v10;
      v11 = *v8++;
      v12 = (((v11 ^ v9) - 1) & ~(v11 ^ v9)) >> 63;
      result = result & v12 | (((((v9 - v11) ^ v9 | v11 ^ v9) ^ v9) >> 63) | 1) & ~v12;
      --v5;
    }
    while (v5);
    v13 = a2 - a4;
    if (a2 < a4)
    {
LABEL_8:
      v14 = a4 - a2;
      if (a4 - a2 >= 4)
      {
        v16 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + a2;
        v19 = (int8x16_t *)&a3[a2 + 2];
        v20 = 0uLL;
        v21 = v14 & 0xFFFFFFFFFFFFFFFCLL;
        v22 = 0uLL;
        do
        {
          v20 = vorrq_s8(v19[-1], v20);
          v22 = vorrq_s8(*v19, v22);
          v19 += 2;
          v21 -= 4;
        }
        while (v21);
        v23 = vorrq_s8(v22, v20);
        v15 = vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
        if (v14 == (v14 & 0xFFFFFFFFFFFFFFFCLL))
          return result | ~(((*(_QWORD *)&v15 - 1) & ~*(_QWORD *)&v15) >> 63);
      }
      else
      {
        v15 = 0;
        v16 = a2;
      }
      v24 = a4 - v16;
      v25 = &a3[v16];
      do
      {
        v26 = *v25++;
        *(_QWORD *)&v15 |= v26;
        --v24;
      }
      while (v24);
      return result | ~(((*(_QWORD *)&v15 - 1) & ~*(_QWORD *)&v15) >> 63);
    }
  }
  else
  {
    result = 0;
    v13 = a2 - a4;
    if (a2 < a4)
      goto LABEL_8;
  }
  if (a4 >= a2)
    return result;
  if (v13 >= 4)
  {
    v18 = (v13 & 0xFFFFFFFFFFFFFFFCLL) + a4;
    v27 = (int8x16_t *)&a1[a4 + 2];
    v28 = 0uLL;
    v29 = v13 & 0xFFFFFFFFFFFFFFFCLL;
    v30 = 0uLL;
    do
    {
      v28 = vorrq_s8(v27[-1], v28);
      v30 = vorrq_s8(*v27, v30);
      v27 += 2;
      v29 -= 4;
    }
    while (v29);
    v31 = vorrq_s8(v30, v28);
    v17 = vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFFCLL))
      return (((((*(_QWORD *)&v17 - 1) & ~*(_QWORD *)&v17) >> 63) & 1) == 0) | (((*(_QWORD *)&v17 - 1) & ~*(_QWORD *)&v17) >> 63) & result;
  }
  else
  {
    v17 = 0;
    v18 = a4;
  }
  v32 = a2 - v18;
  v33 = &a1[v18];
  do
  {
    v34 = *v33++;
    *(_QWORD *)&v17 |= v34;
    --v32;
  }
  while (v32);
  return (((((*(_QWORD *)&v17 - 1) & ~*(_QWORD *)&v17) >> 63) & 1) == 0) | (((*(_QWORD *)&v17 - 1) & ~*(_QWORD *)&v17) >> 63) & result;
}

int BN_cmp(const BIGNUM *a, const BIGNUM *b)
{
  int neg;
  int result;

  if (a && b)
  {
    neg = a->neg;
    if (neg == b->neg)
    {
      result = bn_cmp_words_consttime((uint64_t *)a->d, a->top, (uint64_t *)b->d, b->top);
      if (neg)
        return -result;
    }
    else if (neg)
    {
      return -1;
    }
    else
    {
      return 1;
    }
  }
  else if (a)
  {
    return -1;
  }
  else
  {
    return b != 0;
  }
  return result;
}

uint64_t BN_cmp_word(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  if (!a1)
    return 1;
  if (*(_DWORD *)(a1 + 16))
    return 0xFFFFFFFFLL;
  return bn_cmp_words_consttime(*(uint64_t **)a1, *(int *)(a1 + 8), &v3, a2 != 0);
}

BOOL BN_is_one(unint64_t **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  unsigned __int128 v8;
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  if (*((_DWORD *)a1 + 4))
    return 0;
  v2 = *((unsigned int *)a1 + 2);
  if (!(_DWORD)v2)
    return 0;
  v3 = *a1;
  v4 = **a1 ^ 1;
  if ((int)v2 >= 2)
  {
    if (v2 >= 5)
    {
      v6 = (v2 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      v5 = v6 | 1;
      v7 = 0uLL;
      v8 = **a1 ^ (unsigned __int128)1uLL;
      v9 = (int8x16_t *)(v3 + 3);
      v10 = v6;
      do
      {
        v8 = (unsigned __int128)vorrq_s8(v9[-1], (int8x16_t)v8);
        v7 = vorrq_s8(*v9, v7);
        v9 += 2;
        v10 -= 4;
      }
      while (v10);
      v11 = vorrq_s8(v7, (int8x16_t)v8);
      v4 = (uint64_t)vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
      if (v2 - 1 == v6)
        return v4 == 0;
    }
    else
    {
      v5 = 1;
    }
    v12 = v2 - v5;
    v13 = &v3[v5];
    do
    {
      v14 = *v13++;
      v4 |= v14;
      --v12;
    }
    while (v12);
  }
  return v4 == 0;
}

BOOL BN_equal_consttime(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x16_t *v4;
  uint64_t v5;
  int8x8_t v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t *v21;
  unint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int8x16_t *v27;
  int8x16_t *v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  uint64_t v34;
  int8x16_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = *(int *)(a1 + 8);
  v3 = *(int *)(a2 + 8);
  if ((int)v2 >= (int)v3)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v4 = *(int8x16_t **)a2;
  v5 = v3 - v2;
  if ((unint64_t)(v3 - v2) < 4)
  {
    v6 = 0;
    v7 = *(int *)(a1 + 8);
LABEL_8:
    v13 = v3 - v7;
    v14 = &v4->i64[v7];
    do
    {
      v15 = *v14++;
      *(_QWORD *)&v6 |= v15;
      --v13;
    }
    while (v13);
    goto LABEL_10;
  }
  v7 = (v5 & 0xFFFFFFFFFFFFFFFCLL) + v2;
  v8 = (int8x16_t *)((char *)v4 + 8 * v2 + 16);
  v9 = 0uLL;
  v10 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  v11 = 0uLL;
  do
  {
    v9 = vorrq_s8(v8[-1], v9);
    v11 = vorrq_s8(*v8, v11);
    v8 += 2;
    v10 -= 4;
  }
  while (v10);
  v12 = vorrq_s8(v11, v9);
  v6 = vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_8;
LABEL_10:
  if ((int)v3 < (int)v2)
  {
    v16 = *(int8x16_t **)a1;
    v17 = v2 - v3;
    if ((unint64_t)(v2 - v3) >= 4)
    {
      v18 = (v17 & 0xFFFFFFFFFFFFFFFCLL) + v3;
      v19 = 0uLL;
      v20 = (int8x16_t)(unint64_t)v6;
      v21 = (int8x16_t *)((char *)v16 + 8 * v3 + 16);
      v22 = v17 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v20 = vorrq_s8(v21[-1], v20);
        v19 = vorrq_s8(*v21, v19);
        v21 += 2;
        v22 -= 4;
      }
      while (v22);
      v23 = vorrq_s8(v19, v20);
      v6 = vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
      if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
    else
    {
      v18 = *(int *)(a2 + 8);
    }
    v24 = v2 - v18;
    v25 = &v16->i64[v18];
    do
    {
      v26 = *v25++;
      *(_QWORD *)&v6 |= v26;
      --v24;
    }
    while (v24);
  }
LABEL_18:
  if ((int)v2 >= (int)v3)
    v3 = v3;
  else
    v3 = v2;
  if ((int)v3 >= 1)
  {
    v27 = *(int8x16_t **)a1;
    v28 = *(int8x16_t **)a2;
    if (v3 < 4)
    {
      v29 = 0;
LABEL_27:
      v36 = v3 - v29;
      v37 = v29;
      v38 = &v28->i64[v37];
      v39 = &v27->i64[v37];
      do
      {
        v41 = *v39++;
        v40 = v41;
        v42 = *v38++;
        *(_QWORD *)&v6 |= v42 ^ v40;
        --v36;
      }
      while (v36);
      return (*(_QWORD *)&v6 | *(_DWORD *)(a2 + 16) ^ *(_DWORD *)(a1 + 16)) == 0;
    }
    v29 = v3 & 0x7FFFFFFC;
    v30 = 0uLL;
    v31 = (int8x16_t)(unint64_t)v6;
    v32 = v27 + 1;
    v33 = v28 + 1;
    v34 = v3 & 0xFFFFFFFC;
    do
    {
      v31 = vorrq_s8(veorq_s8(v33[-1], v32[-1]), v31);
      v30 = vorrq_s8(veorq_s8(*v33, *v32), v30);
      v32 += 2;
      v33 += 2;
      v34 -= 4;
    }
    while (v34);
    v35 = vorrq_s8(v30, v31);
    v6 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
    if (v29 != v3)
      goto LABEL_27;
  }
  return (*(_QWORD *)&v6 | *(_DWORD *)(a2 + 16) ^ *(_DWORD *)(a1 + 16)) == 0;
}

int CONF_parse_list(const char *list, int sep, int nospc, int (__cdecl *list_cb)(const char *, int, void *), void *arg)
{
  char *v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  unsigned int v17;
  int result;
  char *v20;
  char *v21;
  char *v22;

  if (list)
  {
    v8 = (char *)list;
    if (nospc)
    {
      while (1)
      {
        v9 = *v8;
        if (*v8)
        {
          do
          {
            if (v9 != 32 && (v9 - 14) < 0xFFFFFFFB)
              break;
            v10 = *++v8;
            v9 = v10;
          }
          while (v10);
        }
        v11 = strchr(v8, sep);
        v12 = v11;
        if (v11 == v8 || !v9)
        {
          result = ((uint64_t (*)(_QWORD, _QWORD, void *))list_cb)(0, 0, arg);
          if (result < 1)
            return result;
        }
        else
        {
          v13 = v11;
          if (!v11)
            v13 = &v8[strlen(v8)];
          v14 = v13 - v8 + 1;
          v15 = v13 - 1;
          do
          {
            v16 = *v15--;
            v17 = v16 - 14;
            --v14;
          }
          while (v16 == 32 || v17 > 0xFFFFFFFA);
          result = ((uint64_t (*)(char *, uint64_t, void *))list_cb)(v8, v14, arg);
          if (result < 1)
            return result;
        }
        v8 = v12 + 1;
        if (!v12)
          return 1;
      }
    }
    do
    {
      v20 = strchr(v8, sep);
      v21 = v20;
      if (v20 == v8 || !*v8)
      {
        result = ((uint64_t (*)(_QWORD, _QWORD, void *))list_cb)(0, 0, arg);
        if (result < 1)
          return result;
      }
      else
      {
        v22 = v20;
        if (!v20)
          v22 = &v8[strlen(v8)];
        result = ((uint64_t (*)(char *, int64_t, void *))list_cb)(v8, v22 - v8, arg);
        if (result < 1)
          return result;
      }
      v8 = v21 + 1;
    }
    while (v21);
    return 1;
  }
  else
  {
    ERR_put_error(13, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/conf/conf.c", 601);
    return 0;
  }
}

uint64_t lh_CONF_SECTION_call_hash_func(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t lh_CONF_SECTION_call_cmp_func(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

uint64_t BN_bn2cbb_padded(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  char *v6;
  int8x16_t *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  int8x16_t *v13;
  int8x16_t v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  int8x8_t v19;
  unint64_t v20;
  int8x8_t *v21;
  int8x8_t v22;
  uint64_t v23;
  unint64_t v24;
  __int8 *v25;
  char v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  __int8 *v32;
  char v33;
  int8x16_t *v34;
  int8x16_t *v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  unint64_t v40;
  int8x8_t *v41;
  int8x8_t *v42;
  unint64_t v43;
  int8x8_t v44;
  void *v45;

  v45 = 0;
  result = CBB_add_space(a1, &v45, a2);
  if (!(_DWORD)result)
    return result;
  v6 = (char *)v45;
  v7 = *(int8x16_t **)a3;
  v8 = 8 * *(int *)(a3 + 8);
  v9 = v8 - a2;
  if (v8 > a2)
  {
    if (v9 < 8)
    {
      v10 = 0;
      v11 = a2;
      goto LABEL_16;
    }
    if (v9 >= 0x20)
    {
      v12 = v9 & 0xFFFFFFFFFFFFFFE0;
      v13 = (int8x16_t *)((char *)v7 + a2 + 16);
      v14 = 0uLL;
      v15 = v9 & 0xFFFFFFFFFFFFFFE0;
      v16 = 0uLL;
      do
      {
        v14 = vorrq_s8(v13[-1], v14);
        v16 = vorrq_s8(*v13, v16);
        v13 += 2;
        v15 -= 32;
      }
      while (v15);
      v17 = vorrq_s8(v16, v14);
      *(int8x8_t *)v17.i8 = vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
      v18 = v17.i64[0] | HIDWORD(v17.i64[0]) | ((unint64_t)(v17.i64[0] | HIDWORD(v17.i64[0])) >> 16);
      v10 = v18 | BYTE1(v18);
      if (v9 == v12)
        goto LABEL_19;
      if ((v9 & 0x18) == 0)
      {
        v11 = v12 + a2;
LABEL_16:
        v24 = v11 - v8;
        v25 = &v7->i8[v11];
        do
        {
          v26 = *v25++;
          v10 |= v26;
        }
        while (!__CFADD__(v24++, 1));
        goto LABEL_19;
      }
    }
    else
    {
      v10 = 0;
      v12 = 0;
    }
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + a2;
    v19 = (int8x8_t)v10;
    v20 = v12 - (v9 & 0xFFFFFFFFFFFFFFF8);
    v21 = (int8x8_t *)&v7->i8[v12 + a2];
    do
    {
      v22 = *v21++;
      v19 = vorr_s8(v22, v19);
      v20 += 8;
    }
    while (v20);
    v23 = *(_QWORD *)&v19 | HIDWORD(*(_QWORD *)&v19) | ((*(_QWORD *)&v19 | HIDWORD(*(_QWORD *)&v19)) >> 16);
    v10 = v23 | BYTE1(v23);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_16;
LABEL_19:
    if (v10)
      return 0;
  }
  if (v8 >= a2)
    v28 = a2;
  else
    v28 = 8 * *(int *)(a3 + 8);
  if (!v28)
    goto LABEL_32;
  if (v28 < 8 || (char *)v45 + a2 - v28 < &v7->i8[v28] && v7 < (int8x16_t *)((char *)v45 + a2))
  {
    v29 = 0;
    goto LABEL_30;
  }
  if (v28 >= 0x20)
  {
    v29 = v28 & 0xFFFFFFFFFFFFFFE0;
    v34 = v7 + 1;
    v35 = (int8x16_t *)((char *)v45 + a2 - 16);
    v36 = v28 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v37 = vrev64q_s8(v34[-1]);
      v38 = vextq_s8(v37, v37, 8uLL);
      v39 = vrev64q_s8(*v34);
      v35[-1] = vextq_s8(v39, v39, 8uLL);
      *v35 = v38;
      v34 += 2;
      v35 -= 2;
      v36 -= 32;
    }
    while (v36);
    if (v28 == v29)
      goto LABEL_32;
    if ((v28 & 0x18) == 0)
    {
LABEL_30:
      v30 = v28 - v29;
      v31 = &v6[~v29 + a2];
      v32 = &v7->i8[v29];
      do
      {
        v33 = *v32++;
        *v31-- = v33;
        --v30;
      }
      while (v30);
      goto LABEL_32;
    }
  }
  else
  {
    v29 = 0;
  }
  v40 = v29;
  v29 = v28 & 0xFFFFFFFFFFFFFFF8;
  v41 = (int8x8_t *)&v7->i8[v40];
  v42 = (int8x8_t *)&v6[a2 - v40 - 8];
  v43 = v40 - (v28 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v44 = *v41++;
    *v42-- = vrev64_s8(v44);
    v43 += 8;
  }
  while (v43);
  if (v28 != v29)
    goto LABEL_30;
LABEL_32:
  if (v8 < a2)
    bzero(v6, a2 - v28);
  return 1;
}

char *__cdecl BN_bn2hex(const BIGNUM *a)
{
  uint64_t top;
  int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *result;
  char *v11;
  uint64_t v12;
  unint64_t *d;
  unint64_t v14;
  int8x8_t v15;
  int8x16_t *v16;
  int8x16_t v17;
  unint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;

  top = a->top;
  v3 = top & ((int)top >> 31);
  v4 = 8 * top - 8;
  while (1)
  {
    v5 = __OFSUB__((_DWORD)top, 1);
    LODWORD(top) = top - 1;
    if ((int)top < 0 != v5)
      break;
    v6 = *(unint64_t *)((char *)a->d + v4);
    v4 -= 8;
    if (v6)
    {
      v3 = top + 1;
      break;
    }
  }
  v7 = (16 * v3) | 3;
  v8 = (char *)malloc_type_malloc(v7 | 8, 0x30772F57uLL);
  if (!v8)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  v9 = v8;
  *(_QWORD *)v8 = v7;
  result = v8 + 8;
  v11 = result;
  if (a->neg)
  {
    v11 = v9 + 9;
    v9[8] = 45;
  }
  v12 = a->top;
  if (!(_DWORD)v12)
    goto LABEL_18;
  d = a->d;
  if (v12 < 4)
  {
    v14 = 0;
    v15 = 0;
LABEL_15:
    v21 = v12 - v14;
    v22 = &d[v14];
    do
    {
      v23 = *v22++;
      *(_QWORD *)&v15 |= v23;
      --v21;
    }
    while (v21);
    goto LABEL_17;
  }
  v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  v16 = (int8x16_t *)(d + 2);
  v17 = 0uLL;
  v18 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  v19 = 0uLL;
  do
  {
    v17 = vorrq_s8(v16[-1], v17);
    v19 = vorrq_s8(*v16, v19);
    v16 += 2;
    v18 -= 4;
  }
  while (v18);
  v20 = vorrq_s8(v19, v17);
  v15 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
  if (v14 != v12)
    goto LABEL_15;
LABEL_17:
  if (!*(_QWORD *)&v15)
LABEL_18:
    *v11++ = 48;
  if (v3 >= 1)
  {
    v24 = 0;
    v25 = v3 + 1;
    while (1)
    {
      v26 = (v25 - 2);
      v27 = a->d[v26];
      if (v24 || HIBYTE(v27))
        break;
      v28 = HIWORD(v27);
      if (HIWORD(v27))
      {
        v32 = HIWORD(v27);
        goto LABEL_28;
      }
      v29 = v27 >> 40;
      if (v27 >> 40)
      {
        v30 = v27 >> 40;
LABEL_29:
        *v11 = hextable[v29 >> 4];
        v11[1] = hextable[v30 & 0xF];
        v34 = a->d[v26];
        v11 += 2;
        v35 = HIDWORD(v34);
        v36 = BYTE4(v34);
LABEL_30:
        *v11 = hextable[v36 >> 4];
        v11[1] = hextable[v35 & 0xF];
        v37 = a->d[v26];
        v11 += 2;
        v38 = v37 >> 24;
        v39 = BYTE3(v37);
LABEL_31:
        *v11 = hextable[(unint64_t)v39 >> 4];
        v11[1] = hextable[v38 & 0xF];
        v11 += 2;
        v40 = a->d[v26];
        v41 = v40 >> 16;
        v42 = BYTE2(v40);
LABEL_32:
        *v11 = hextable[(unint64_t)v42 >> 4];
        v11[1] = hextable[v41 & 0xF];
        v11 += 2;
        v43 = a->d[v26];
        v44 = v43 >> 8;
        v45 = BYTE1(v43);
LABEL_33:
        *v11 = hextable[(unint64_t)v45 >> 4];
        v11[1] = hextable[v44 & 0xF];
        v11 += 2;
        v27 = a->d[v26];
        v46 = v27;
LABEL_34:
        *v11 = hextable[(unint64_t)v46 >> 4];
        v11[1] = hextable[v27 & 0xF];
        v11 += 2;
        v24 = 1;
        if ((unint64_t)--v25 <= 1)
          goto LABEL_46;
      }
      else
      {
        v36 = HIDWORD(v27);
        if (HIDWORD(v27))
        {
          v35 = HIDWORD(v27);
          goto LABEL_30;
        }
        v39 = BYTE3(v27);
        if (BYTE3(v27))
        {
          v38 = v27 >> 24;
          goto LABEL_31;
        }
        v42 = BYTE2(v27);
        if (BYTE2(v27))
        {
          v41 = v27 >> 16;
          goto LABEL_32;
        }
        v45 = BYTE1(v27);
        if (BYTE1(v27))
        {
          v44 = v27 >> 8;
          goto LABEL_33;
        }
        v46 = a->d[v26];
        if ((_BYTE)v27)
          goto LABEL_34;
        v24 = 0;
        if ((unint64_t)--v25 <= 1)
          goto LABEL_46;
      }
    }
    *v11 = hextable[v27 >> 60];
    v11[1] = hextable[HIBYTE(v27) & 0xF];
    v31 = a->d[v26];
    v11 += 2;
    v32 = HIWORD(v31);
    v28 = BYTE6(v31);
LABEL_28:
    *v11 = hextable[v28 >> 4];
    v11[1] = hextable[v32 & 0xF];
    v33 = a->d[v26];
    v11 += 2;
    v30 = v33 >> 40;
    v29 = BYTE5(v33);
    goto LABEL_29;
  }
LABEL_46:
  *v11 = 0;
  return result;
}

int BN_hex2bn(BIGNUM **a, const char *str)
{
  int v2;
  const char *v4;
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  const char *v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  BIGNUM *v14;
  int v15;
  const char *v16;
  int v17;
  _QWORD *v18;
  int flags;
  unint64_t *d;
  unint64_t *v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  unint64_t *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  const char *v31;
  char v32;
  int v33;
  int v34;
  int *p_neg;
  uint64_t v36;
  size_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  int8x16_t *v41;
  uint64_t v42;
  unint64_t v44;
  int8x8_t v45;
  int8x16_t *v46;
  int8x16_t v47;
  unint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;

  if (!str)
    return 0;
  v2 = *(unsigned __int8 *)str;
  if (!*str)
    return v2;
  v4 = v2 == 45 ? str + 1 : str;
  v5 = v2 == 45;
  v6 = (v2 == 45) - 0x7FFFFFFFLL;
  v7 = 1;
  v8 = -4;
  v9 = v4;
  do
  {
    v10 = *(unsigned __int8 *)v9++;
    v11 = v10 - 48;
    --v7;
    v12 = (v10 & 0xFFFFFFDF) - 65 > 5 && v11 > 9;
    v8 += 4;
  }
  while (!v12 && v6++ != 0);
  v2 = v5 - v7;
  if (!a)
    return v2;
  v14 = *a;
  if (*a)
  {
    v14->neg = 0;
    v14->top = 0;
    v15 = -v7;
    if (v15 >= 0x20000000)
    {
LABEL_18:
      v16 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src"
            "/crypto/bn_extra/convert.c";
      v17 = 116;
LABEL_23:
      ERR_put_error(3, 0, 102, v16, v17);
      goto LABEL_24;
    }
  }
  else
  {
    v18 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
    if (!v18)
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      return 0;
    }
    *v18 = 24;
    v18[1] = 0;
    v14 = (BIGNUM *)(v18 + 1);
    v18[2] = 0;
    v18[3] = 0x100000000;
    v15 = -v7;
    if (v15 >= 0x20000000)
      goto LABEL_18;
  }
  if (v8 >= 0xFFFFFFC1)
  {
    v16 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/fipsmodule/bn/bn.c";
    v17 = 380;
    goto LABEL_23;
  }
  if (!bn_wexpand((uint64_t)v14, (unint64_t)((int)v8 + 63) >> 6))
  {
LABEL_24:
    if (!*a)
    {
      flags = v14->flags;
      if ((flags & 2) == 0)
      {
        d = v14->d;
        if (v14->d)
        {
          v23 = *(d - 1);
          v22 = d - 1;
          v24 = v23 + 8;
          if (v23 != -8)
            bzero(v22, v24);
          free(v22);
          flags = v14->flags;
        }
      }
      if ((flags & 1) != 0)
      {
        v36 = *(_QWORD *)&v14[-1].neg;
        p_neg = &v14[-1].neg;
        v37 = v36 + 8;
        if (v36 != -8)
          bzero(p_neg, v37);
        free(p_neg);
        return 0;
      }
      else
      {
        v2 = 0;
        v14->d = 0;
      }
      return v2;
    }
    return 0;
  }
  if (v15 < 1)
  {
    v27 = 0;
    goto LABEL_59;
  }
  v25 = 0;
  v26 = v14->d;
  while (2)
  {
    v28 = 0;
    if (v15 >= 0x10)
      v29 = 16;
    else
      v29 = v15;
    v30 = v29 + 1;
    v31 = &v4[v15 - v29];
    do
    {
      while (1)
      {
        v34 = *v31++;
        v33 = v34;
        if ((v34 - 58) <= 0xFFFFFFF5)
          break;
        v32 = -48;
LABEL_46:
        v28 = (v32 + v33) | (16 * v28);
        if (--v30 <= 1)
          goto LABEL_37;
      }
      if ((v33 - 97) < 6)
      {
        v32 = -87;
        goto LABEL_46;
      }
      if ((v33 - 65) <= 5)
      {
        v32 = -55;
        goto LABEL_46;
      }
      v28 *= 16;
      --v30;
    }
    while (v30 > 1);
LABEL_37:
    v27 = v25 + 1;
    v26[v25] = v28;
    if (v15 >= 0x10)
      v15 -= 16;
    else
      v15 = 0;
    ++v25;
    if (v15 > 0)
      continue;
    break;
  }
LABEL_59:
  v38 = v27;
  LODWORD(v39) = v27 & (v27 >> 31);
  v40 = v27;
  while ((int)v40 >= 1)
  {
    v41 = (int8x16_t *)v14->d;
    v42 = v40 - 1;
    if (v14->d[--v40])
    {
      v39 = v42 + 1;
      v14->top = v42 + 1;
      goto LABEL_66;
    }
  }
  v14->top = v39;
  if ((v38 & 0x80000000) == 0)
  {
    v5 = 0;
    goto LABEL_74;
  }
  v39 = (int)v39;
  v41 = (int8x16_t *)v14->d;
LABEL_66:
  if (v39 < 4)
  {
    v44 = 0;
    v45 = 0;
    goto LABEL_71;
  }
  v44 = v39 & 0xFFFFFFFFFFFFFFFCLL;
  v46 = v41 + 1;
  v47 = 0uLL;
  v48 = v39 & 0xFFFFFFFFFFFFFFFCLL;
  v49 = 0uLL;
  do
  {
    v47 = vorrq_s8(v46[-1], v47);
    v49 = vorrq_s8(*v46, v49);
    v46 += 2;
    v48 -= 4;
  }
  while (v48);
  v50 = vorrq_s8(v49, v47);
  v45 = vorr_s8(*(int8x8_t *)v50.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL));
  if (v39 != v44)
  {
LABEL_71:
    v51 = v39 - v44;
    v52 = &v41->i64[v44];
    do
    {
      v53 = *v52++;
      *(_QWORD *)&v45 |= v53;
      --v51;
    }
    while (v51);
  }
  if (!*(_QWORD *)&v45)
    goto LABEL_75;
LABEL_74:
  v14->neg = v5;
LABEL_75:
  *a = v14;
  return v2;
}

char *__cdecl BN_bn2dec(const BIGNUM *a)
{
  _QWORD *v2;
  uint64_t top;
  unint64_t *d;
  unint64_t v5;
  int8x8_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  int8x16_t *v11;
  int8x16_t v12;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  BIGNUM *v19;
  BIGNUM *v20;
  signed int v21;
  int flags;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  size_t v26;
  int *p_neg;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  int v34;
  unint64_t *v35;
  unint64_t *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  int8x16_t *v40;
  unint64_t v41;
  int8x8_t v42;
  int8x16_t *v43;
  int8x16_t v44;
  unint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  signed int v53;
  int8x16_t *v54;
  unint64_t v55;
  int8x8_t v56;
  _BOOL4 v57;
  int8x16_t *v58;
  int8x16_t v59;
  unint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  char v68;
  int *v69;
  uint64_t v70;
  size_t v71;
  _OWORD v72[3];
  _BYTE *v73;

  memset(v72, 0, sizeof(v72));
  v2 = malloc_type_malloc(0x18uLL, 0x30772F57uLL);
  if (!v2)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    goto LABEL_7;
  }
  *v2 = 16;
  BYTE8(v72[0]) = 0;
  *(_QWORD *)&v72[0] = 0;
  *(_QWORD *)&v72[1] = v2 + 1;
  *(_OWORD *)((char *)&v72[1] + 8) = xmmword_208F1AB20;
  BYTE8(v72[2]) = 1;
  v73 = 0;
  if (!CBB_add_space((uint64_t)v72, &v73, 1))
  {
LABEL_7:
    if (!BYTE8(v72[0]) && (BYTE8(v72[2]) & 1) != 0 && *(_QWORD *)&v72[1])
    {
      v8 = (void *)(*(_QWORD *)&v72[1] - 8);
      v7 = *(_QWORD *)(*(_QWORD *)&v72[1] - 8);
      if (v7 != -8)
        bzero(v8, v7 + 8);
      free(v8);
    }
    return 0;
  }
  *v73 = 0;
  top = a->top;
  if (!(_DWORD)top)
    goto LABEL_24;
  d = a->d;
  if (top < 4)
  {
    v5 = 0;
    v6 = 0;
LABEL_18:
    v16 = top - v5;
    v17 = &d[v5];
    do
    {
      v18 = *v17++;
      *(_QWORD *)&v6 |= v18;
      --v16;
    }
    while (v16);
    goto LABEL_20;
  }
  v5 = top & 0xFFFFFFFFFFFFFFFCLL;
  v11 = (int8x16_t *)(d + 2);
  v12 = 0uLL;
  v13 = top & 0xFFFFFFFFFFFFFFFCLL;
  v14 = 0uLL;
  do
  {
    v12 = vorrq_s8(v11[-1], v12);
    v14 = vorrq_s8(*v11, v14);
    v11 += 2;
    v13 -= 4;
  }
  while (v13);
  v15 = vorrq_s8(v14, v12);
  v6 = vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
  if (v5 != top)
    goto LABEL_18;
LABEL_20:
  if (v6)
  {
    v19 = BN_dup(a);
    if (!v19)
      goto LABEL_7;
    v20 = v19;
    v21 = v19->top;
    if (v21)
    {
      while (1)
      {
        v39 = v21;
        v40 = (int8x16_t *)v20->d;
        if (v21 < 4)
          break;
        v41 = v21 & 0xFFFFFFFFFFFFFFFCLL;
        v43 = v40 + 1;
        v44 = 0uLL;
        v45 = v39 & 0xFFFFFFFFFFFFFFFCLL;
        v46 = 0uLL;
        do
        {
          v44 = vorrq_s8(v43[-1], v44);
          v46 = vorrq_s8(*v43, v46);
          v43 += 2;
          v45 -= 4;
        }
        while (v45);
        v47 = vorrq_s8(v46, v44);
        v42 = vorr_s8(*(int8x8_t *)v47.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL));
        if (v41 != v39)
          goto LABEL_61;
LABEL_63:
        if (!*(_QWORD *)&v42)
          goto LABEL_26;
        v51 = BN_div_word(v20, 0x8AC7230489E80000);
        if (v51 == -1)
          goto LABEL_31;
        v52 = v51;
        v53 = v20->top;
        if (!v53)
        {
          v57 = 1;
          if (v51)
            goto LABEL_77;
          goto LABEL_76;
        }
        v54 = (int8x16_t *)v20->d;
        if (v53 < 4)
        {
          v55 = 0;
          v56 = 0;
LABEL_73:
          v63 = v53 - v55;
          v64 = &v54->i64[v55];
          do
          {
            v65 = *v64++;
            *(_QWORD *)&v56 |= v65;
            --v63;
          }
          while (v63);
          goto LABEL_75;
        }
        v55 = v53 & 0xFFFFFFFFFFFFFFFCLL;
        v58 = v54 + 1;
        v59 = 0uLL;
        v60 = v55;
        v61 = 0uLL;
        do
        {
          v59 = vorrq_s8(v58[-1], v59);
          v61 = vorrq_s8(*v58, v61);
          v58 += 2;
          v60 -= 4;
        }
        while (v60);
        v62 = vorrq_s8(v61, v59);
        v56 = vorr_s8(*(int8x8_t *)v62.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
        if (v55 != v53)
          goto LABEL_73;
LABEL_75:
        v57 = *(_QWORD *)&v56 == 0;
        if (v51)
          goto LABEL_77;
LABEL_76:
        v21 = v20->top;
        if (!v57)
        {
LABEL_77:
          v66 = 0;
          while (1)
          {
            v73 = 0;
            if (!CBB_add_space((uint64_t)v72, &v73, 1))
              break;
            *v73 = (v52 % 0xA) | 0x30;
            v68 = !v57 || v52 > 9;
            if (v66 <= 0x11)
            {
              ++v66;
              v52 /= 0xAuLL;
              if ((v68 & 1) != 0)
                continue;
            }
            v21 = v20->top;
            goto LABEL_55;
          }
LABEL_31:
          if (v20)
          {
            flags = v20->flags;
            if ((flags & 2) == 0)
            {
              v23 = v20->d;
              if (v20->d)
              {
                v25 = *(v23 - 1);
                v24 = v23 - 1;
                v26 = v25 + 8;
                if (v25 != -8)
                  bzero(v24, v26);
                free(v24);
                flags = v20->flags;
              }
            }
            if ((flags & 1) != 0)
            {
              v28 = *(_QWORD *)&v20[-1].neg;
              p_neg = &v20[-1].neg;
              v29 = v28 + 8;
              if (v28 != -8)
                bzero(p_neg, v29);
              free(p_neg);
            }
            else
            {
              v20->d = 0;
            }
          }
          goto LABEL_7;
        }
LABEL_55:
        if (!v21)
          goto LABEL_26;
      }
      v41 = 0;
      v42 = 0;
LABEL_61:
      v48 = v39 - v41;
      v49 = &v40->i64[v41];
      do
      {
        v50 = *v49++;
        *(_QWORD *)&v42 |= v50;
        --v48;
      }
      while (v48);
      goto LABEL_63;
    }
    goto LABEL_26;
  }
LABEL_24:
  v73 = 0;
  if (!CBB_add_space((uint64_t)v72, &v73, 1))
    goto LABEL_7;
  v20 = 0;
  *v73 = 48;
LABEL_26:
  if (a->neg)
  {
    v73 = 0;
    if (!CBB_add_space((uint64_t)v72, &v73, 1))
      goto LABEL_31;
    *v73 = 45;
  }
  if (BYTE8(v72[0]))
  {
    ERR_put_error(14, 0, 66, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bytestring/cbb.c", 127);
    goto LABEL_31;
  }
  if (!CBB_flush((uint64_t *)v72))
    goto LABEL_31;
  v9 = *(char **)&v72[1];
  *(_QWORD *)&v72[1] = 0;
  if (*((_QWORD *)&v72[1] + 1) >= 2uLL)
  {
    v30 = *((_QWORD *)&v72[1] + 1) >> 1;
    v31 = &v9[*((_QWORD *)&v72[1] + 1) - 1];
    v32 = v9;
    do
    {
      v33 = *v32;
      *v32++ = *v31;
      *v31-- = v33;
      --v30;
    }
    while (v30);
  }
  if (v20)
  {
    v34 = v20->flags;
    if ((v34 & 2) == 0)
    {
      v35 = v20->d;
      if (v20->d)
      {
        v37 = *(v35 - 1);
        v36 = v35 - 1;
        v38 = v37 + 8;
        if (v37 != -8)
          bzero(v36, v38);
        free(v36);
        v34 = v20->flags;
      }
    }
    if ((v34 & 1) != 0)
    {
      v70 = *(_QWORD *)&v20[-1].neg;
      v69 = &v20[-1].neg;
      v71 = v70 + 8;
      if (v70 != -8)
        bzero(v69, v71);
      free(v69);
    }
    else
    {
      v20->d = 0;
    }
  }
  return v9;
}

int BN_dec2bn(BIGNUM **a, const char *str)
{
  int v2;
  uint64_t v4;
  const char *v5;
  _BOOL8 v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  BIGNUM *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  int top;
  int v25;
  uint64_t v26;
  int8x16_t *d;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  int8x8_t v32;
  int8x16_t *v33;
  int8x16_t v34;
  unint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int flags;
  unint64_t *v43;
  unint64_t *v44;
  uint64_t v45;
  size_t v46;
  int *p_neg;
  uint64_t v48;
  size_t v49;

  if (!str)
    return 0;
  v2 = *(unsigned __int8 *)str;
  if (*str)
  {
    v4 = 0;
    v5 = v2 == 45 ? str + 1 : str;
    v6 = v2 == 45;
    v7 = -1;
    do
    {
      v8 = v5[v4] - 48;
      v9 = v6 - 0x7FFFFFFF + v4++;
      ++v7;
    }
    while (v8 <= 9 && v9 != 0);
    v11 = v4 - 1;
    v2 = v4 - 1 + v6;
    if (a)
    {
      v12 = *a;
      if (*a)
      {
        v12->neg = 0;
        v12->top = 0;
        if ((int)v11 < 1)
        {
LABEL_29:
          top = v12->top;
          v25 = top & (top >> 31);
          v26 = top;
          do
          {
            if ((int)v26 < 1)
            {
              v12->top = v25;
              if ((top & 0x80000000) == 0)
              {
                LODWORD(v6) = 0;
                goto LABEL_46;
              }
              v30 = v25;
              d = (int8x16_t *)v12->d;
              if ((unint64_t)v25 >= 4)
                goto LABEL_40;
LABEL_33:
              v31 = 0;
              v32 = 0;
LABEL_43:
              v38 = v30 - v31;
              v39 = &d->i64[v31];
              do
              {
                v40 = *v39++;
                *(_QWORD *)&v32 |= v40;
                --v38;
              }
              while (v38);
              goto LABEL_45;
            }
            d = (int8x16_t *)v12->d;
            v28 = v26 - 1;
          }
          while (!v12->d[--v26]);
          v30 = v28 + 1;
          v12->top = v28 + 1;
          if ((unint64_t)(v28 + 1) < 4)
            goto LABEL_33;
LABEL_40:
          v31 = v30 & 0xFFFFFFFFFFFFFFFCLL;
          v33 = d + 1;
          v34 = 0uLL;
          v35 = v30 & 0xFFFFFFFFFFFFFFFCLL;
          v36 = 0uLL;
          do
          {
            v34 = vorrq_s8(v33[-1], v34);
            v36 = vorrq_s8(*v33, v36);
            v33 += 2;
            v35 -= 4;
          }
          while (v35);
          v37 = vorrq_s8(v36, v34);
          v32 = vorr_s8(*(int8x8_t *)v37.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL));
          if (v30 != v31)
            goto LABEL_43;
LABEL_45:
          if (!*(_QWORD *)&v32)
            goto LABEL_47;
LABEL_46:
          v12->neg = v6;
LABEL_47:
          *a = v12;
          return v2;
        }
      }
      else
      {
        v13 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
        if (!v13)
        {
          ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
          return 0;
        }
        *v13 = 24;
        v13[1] = 0;
        v12 = (BIGNUM *)(v13 + 1);
        v13[2] = 0;
        v13[3] = 0x100000000;
        if ((int)v11 < 1)
          goto LABEL_29;
      }
      v14 = 0;
      v15 = 0;
      v16 = 19 * (v7 / 0x13);
      v17 = v16 + 1;
      v18 = v16 - v4 + 20;
      if (v17 == (_DWORD)v4)
        v18 = 0;
      while (1)
      {
        v15 = v5[v14] + 10 * v15 - 48;
        if (++v18 == 19)
        {
          v19 = v12->top;
          if (v19)
          {
            v20 = bn_mul_words(v12->d, v12->d, v19, 0x8AC7230489E80000);
            if (v20)
            {
              v21 = v20;
              if (!bn_wexpand((uint64_t)v12, v12->top + 1))
              {
LABEL_36:
                if (*a)
                  return 0;
                flags = v12->flags;
                if ((flags & 2) == 0)
                {
                  v43 = v12->d;
                  if (v12->d)
                  {
                    v45 = *(v43 - 1);
                    v44 = v43 - 1;
                    v46 = v45 + 8;
                    if (v45 != -8)
                      bzero(v44, v46);
                    free(v44);
                    flags = v12->flags;
                  }
                }
                if ((flags & 1) != 0)
                {
                  v48 = *(_QWORD *)&v12[-1].neg;
                  p_neg = &v12[-1].neg;
                  v49 = v48 + 8;
                  if (v48 != -8)
                    bzero(p_neg, v49);
                  free(p_neg);
                  return 0;
                }
                else
                {
                  v2 = 0;
                  v12->d = 0;
                }
                return v2;
              }
              v22 = v12->d;
              v23 = v12->top;
              v12->top = v23 + 1;
              v22[v23] = v21;
            }
          }
          if (!BN_add_word(v12, v15))
            goto LABEL_36;
          v18 = 0;
          v15 = 0;
        }
        if (v11 == ++v14)
          goto LABEL_29;
      }
    }
  }
  return v2;
}

uint64_t CRYPTO_ctr128_encrypt(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t a4, _BYTE *a5, _QWORD *a6, unsigned int *a7, uint64_t (*a8)(_BYTE *, _QWORD *, uint64_t))
{
  char *v14;
  unsigned int v15;
  char v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;

  v14 = (char *)result;
  v15 = *a7;
  if (a3 && v15)
  {
    do
    {
      v16 = *v14++;
      *(_BYTE *)a2 = *((_BYTE *)a6 + v15) ^ v16;
      a2 = (_QWORD *)((char *)a2 + 1);
      v17 = a3 - 1;
      v15 = (v15 + 1) & 0xF;
      if (!v15)
        break;
      --a3;
    }
    while (a3);
  }
  else
  {
    v17 = a3;
  }
  if (v17 >= 0x10)
  {
    do
    {
      result = a8(a5, a6, a4);
      v18 = a5[15] + 1;
      a5[15] = v18;
      v19 = a5[14] + (v18 >> 8);
      a5[14] = v19;
      v20 = a5[13] + (v19 >> 8);
      a5[13] = v20;
      v21 = a5[12] + (v20 >> 8);
      a5[12] = v21;
      v22 = a5[11] + (v21 >> 8);
      a5[11] = v22;
      v23 = a5[10] + (v22 >> 8);
      a5[10] = v23;
      v24 = a5[9] + (v23 >> 8);
      a5[9] = v24;
      v25 = a5[8] + (v24 >> 8);
      a5[8] = v25;
      v26 = a5[7] + (v25 >> 8);
      a5[7] = v26;
      v27 = a5[6] + (v26 >> 8);
      a5[6] = v27;
      v28 = a5[5] + (v27 >> 8);
      a5[5] = v28;
      v29 = a5[4] + (v28 >> 8);
      a5[4] = v29;
      v30 = a5[3] + (v29 >> 8);
      a5[3] = v30;
      v31 = a5[2] + (v30 >> 8);
      a5[2] = v31;
      v32 = a5[1] + (v31 >> 8);
      a5[1] = v32;
      *a5 += BYTE1(v32);
      *a2 = *a6 ^ *(_QWORD *)v14;
      a2[1] = a6[1] ^ *((_QWORD *)v14 + 1);
      v17 -= 16;
      a2 += 2;
      v14 += 16;
    }
    while (v17 > 0xF);
    v15 = 0;
  }
  if (v17)
  {
    result = a8(a5, a6, a4);
    v33 = a5[15] + 1;
    a5[15] = v33;
    v34 = a5[14] + (v33 >> 8);
    a5[14] = v34;
    v35 = a5[13] + (v34 >> 8);
    a5[13] = v35;
    v36 = a5[12] + (v35 >> 8);
    a5[12] = v36;
    v37 = a5[11] + (v36 >> 8);
    a5[11] = v37;
    v38 = a5[10] + (v37 >> 8);
    a5[10] = v38;
    v39 = a5[9] + (v38 >> 8);
    a5[9] = v39;
    v40 = a5[8] + (v39 >> 8);
    a5[8] = v40;
    v41 = a5[7] + (v40 >> 8);
    a5[7] = v41;
    v42 = a5[6] + (v41 >> 8);
    a5[6] = v42;
    v43 = a5[5] + (v42 >> 8);
    a5[5] = v43;
    v44 = a5[4] + (v43 >> 8);
    a5[4] = v44;
    v45 = a5[3] + (v44 >> 8);
    a5[3] = v45;
    v46 = a5[2] + (v45 >> 8);
    a5[2] = v46;
    v47 = a5[1] + (v46 >> 8);
    a5[1] = v47;
    *a5 += BYTE1(v47);
    do
    {
      *((_BYTE *)a2 + v15) = *((_BYTE *)a6 + v15) ^ v14[v15];
      ++v15;
      --v17;
    }
    while (v17);
  }
  *a7 = v15;
  return result;
}

uint64_t CRYPTO_ctr128_encrypt_ctr32(uint64_t result, _BYTE *a2, unint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, unsigned int *a7, uint64_t (*a8)(char *, _BYTE *, unint64_t, uint64_t, uint64_t))
{
  char *v12;
  unsigned int v13;
  char v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;

  v12 = (char *)result;
  v13 = *a7;
  if (!a3)
  {
    v15 = 0;
    goto LABEL_7;
  }
  if (v13)
  {
    do
    {
      v14 = *v12++;
      *a2++ = *((_BYTE *)a6 + v13) ^ v14;
      v15 = a3 - 1;
      v13 = ((_BYTE)v13 + 1) & 0xF;
      if (!v13)
        break;
      --a3;
    }
    while (a3);
LABEL_7:
    v16 = bswap32(*(_DWORD *)(a5 + 12));
    if (v15 < 0x10)
      goto LABEL_21;
    goto LABEL_12;
  }
  v15 = a3;
  v16 = bswap32(*(_DWORD *)(a5 + 12));
  if (a3 < 0x10)
    goto LABEL_21;
  do
  {
LABEL_12:
    v17 = v15 >> 4;
    if (v15 >> 4 >= 0x10000000)
      v17 = 0x10000000;
    v18 = v16 + v17;
    if (v17 <= v18)
      v16 += v17;
    else
      v16 = 0;
    if (v17 <= v18)
      v18 = 0;
    v19 = v17 - v18;
    result = a8(v12, a2, v17 - v18, a4, a5);
    *(_DWORD *)(a5 + 12) = bswap32(v16);
    if (!v16)
    {
      v20 = *(unsigned __int8 *)(a5 + 11) + 1;
      *(_BYTE *)(a5 + 11) = v20;
      v21 = *(unsigned __int8 *)(a5 + 10) + (v20 >> 8);
      *(_BYTE *)(a5 + 10) = v21;
      v22 = *(unsigned __int8 *)(a5 + 9) + (v21 >> 8);
      *(_BYTE *)(a5 + 9) = v22;
      v23 = *(unsigned __int8 *)(a5 + 8) + (v22 >> 8);
      *(_BYTE *)(a5 + 8) = v23;
      v24 = *(unsigned __int8 *)(a5 + 7) + (v23 >> 8);
      *(_BYTE *)(a5 + 7) = v24;
      v25 = *(unsigned __int8 *)(a5 + 6) + (v24 >> 8);
      *(_BYTE *)(a5 + 6) = v25;
      v26 = *(unsigned __int8 *)(a5 + 5) + (v25 >> 8);
      *(_BYTE *)(a5 + 5) = v26;
      v27 = *(unsigned __int8 *)(a5 + 4) + (v26 >> 8);
      *(_BYTE *)(a5 + 4) = v27;
      v28 = *(unsigned __int8 *)(a5 + 3) + (v27 >> 8);
      *(_BYTE *)(a5 + 3) = v28;
      v29 = *(unsigned __int8 *)(a5 + 2) + (v28 >> 8);
      *(_BYTE *)(a5 + 2) = v29;
      v30 = *(unsigned __int8 *)(a5 + 1) + (v29 >> 8);
      *(_BYTE *)(a5 + 1) = v30;
      *(_BYTE *)a5 += BYTE1(v30);
    }
    v15 -= 16 * v19;
    a2 += 16 * v19;
    v12 += 16 * v19;
  }
  while (v15 > 0xF);
LABEL_21:
  if (v15)
  {
    *a6 = 0;
    a6[1] = 0;
    result = a8((char *)a6, a6, 1uLL, a4, a5);
    *(_DWORD *)(a5 + 12) = bswap32(v16 + 1);
    if (v16 == -1)
    {
      v31 = *(unsigned __int8 *)(a5 + 11) + 1;
      *(_BYTE *)(a5 + 11) = v31;
      v32 = *(unsigned __int8 *)(a5 + 10) + (v31 >> 8);
      *(_BYTE *)(a5 + 10) = v32;
      v33 = *(unsigned __int8 *)(a5 + 9) + (v32 >> 8);
      *(_BYTE *)(a5 + 9) = v33;
      v34 = *(unsigned __int8 *)(a5 + 8) + (v33 >> 8);
      *(_BYTE *)(a5 + 8) = v34;
      v35 = *(unsigned __int8 *)(a5 + 7) + (v34 >> 8);
      *(_BYTE *)(a5 + 7) = v35;
      v36 = *(unsigned __int8 *)(a5 + 6) + (v35 >> 8);
      *(_BYTE *)(a5 + 6) = v36;
      v37 = *(unsigned __int8 *)(a5 + 5) + (v36 >> 8);
      *(_BYTE *)(a5 + 5) = v37;
      v38 = *(unsigned __int8 *)(a5 + 4) + (v37 >> 8);
      *(_BYTE *)(a5 + 4) = v38;
      v39 = *(unsigned __int8 *)(a5 + 3) + (v38 >> 8);
      *(_BYTE *)(a5 + 3) = v39;
      v40 = *(unsigned __int8 *)(a5 + 2) + (v39 >> 8);
      *(_BYTE *)(a5 + 2) = v40;
      v41 = *(unsigned __int8 *)(a5 + 1) + (v40 >> 8);
      *(_BYTE *)(a5 + 1) = v41;
      *(_BYTE *)a5 += BYTE1(v41);
    }
    do
    {
      a2[v13] = *((_BYTE *)a6 + v13) ^ v12[v13];
      ++v13;
      --v15;
    }
    while (v15);
  }
  *a7 = v13;
  return result;
}

uint64_t CTR_DRBG_init(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t a4)
{
  uint64_t result;
  int8x16_t v6;
  unint64_t v7;
  unint64_t v8;
  int8x8_t *v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t v12;
  unint64_t v13;
  __int8 *v14;
  __int8 *v15;
  char v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a4 > 0x30)
    return 0;
  v6 = a2[1];
  v17 = *a2;
  v18 = v6;
  v19 = a2[2];
  if (a4)
  {
    if (a4 < 8)
    {
      v7 = 0;
LABEL_17:
      v13 = a4 - v7;
      v14 = &v17.i8[v7];
      v15 = &a3->i8[v7];
      do
      {
        v16 = *v15++;
        *v14++ ^= v16;
        --v13;
      }
      while (v13);
      goto LABEL_19;
    }
    if (a4 >= 0x10)
    {
      v7 = a4 & 0x30;
      v17 = veorq_s8(v17, *a3);
      if ((a4 & 0xFFFFFFFFFFFFFFF0) != 0x10)
      {
        v18 = veorq_s8(v18, a3[1]);
        if (v7 != 32)
          v19 = veorq_s8(v19, a3[2]);
      }
      if (v7 == a4)
        goto LABEL_19;
      if ((a4 & 8) == 0)
        goto LABEL_17;
    }
    else
    {
      v7 = 0;
    }
    v8 = v7;
    v7 = a4 & 0xFFFFFFFFFFFFFFF8;
    v9 = (int8x8_t *)&a3->i8[v8];
    v10 = (int8x8_t *)&v17.i8[v8];
    v11 = v8 - (a4 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v12 = *v9++;
      *v10 = veor_s8(*v10, v12);
      ++v10;
      v11 += 8;
    }
    while (v11);
    if (v7 == a4)
      goto LABEL_19;
    goto LABEL_17;
  }
LABEL_19:
  v17 = veorq_s8(v17, (int8x16_t)xmmword_208F1E500);
  v18 = veorq_s8(v18, (int8x16_t)xmmword_208F1E510);
  v19 = veorq_s8(v19, (int8x16_t)xmmword_208F1E520);
  aes_nohw_set_encrypt_key(&v17, 256, (int8x16_t *)a1);
  *(_QWORD *)(a1 + 248) = aes_nohw_encrypt;
  *(_QWORD *)(a1 + 256) = aes_nohw_ctr32_encrypt_blocks;
  *(int8x16_t *)(a1 + 264) = v19;
  result = 1;
  *(_QWORD *)(a1 + 280) = 1;
  return result;
}

uint64_t ctr_drbg_update(uint64_t a1, int8x16_t *a2, unint64_t a3)
{
  int8x16_t *v7;
  unint64_t v8;
  unint64_t v9;
  int8x8_t *v10;
  int8x8_t *v11;
  unint64_t v12;
  int8x8_t v13;
  unint64_t v14;
  __int8 *v15;
  __int8 *v16;
  char v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a3 > 0x30)
    return 0;
  v7 = (int8x16_t *)(a1 + 264);
  *(_DWORD *)(a1 + 276) = bswap32(bswap32(*(_DWORD *)(a1 + 276)) + 1);
  (*(void (**)(uint64_t, int8x16_t *, uint64_t))(a1 + 248))(a1 + 264, &v18, a1);
  *(_DWORD *)(a1 + 276) = bswap32(bswap32(*(_DWORD *)(a1 + 276)) + 1);
  (*(void (**)(int8x16_t *, int8x16_t *, uint64_t))(a1 + 248))(v7, &v19, a1);
  *(_DWORD *)(a1 + 276) = bswap32(bswap32(*(_DWORD *)(a1 + 276)) + 1);
  (*(void (**)(int8x16_t *, int8x16_t *, uint64_t))(a1 + 248))(v7, &v20, a1);
  if (a3)
  {
    if (a3 < 8)
    {
      v8 = 0;
LABEL_17:
      v14 = a3 - v8;
      v15 = &v18.i8[v8];
      v16 = &a2->i8[v8];
      do
      {
        v17 = *v16++;
        *v15++ ^= v17;
        --v14;
      }
      while (v14);
      goto LABEL_19;
    }
    if (a3 >= 0x10)
    {
      v8 = a3 & 0x30;
      v18 = veorq_s8(v18, *a2);
      if ((a3 & 0xFFFFFFFFFFFFFFF0) != 0x10)
      {
        v19 = veorq_s8(v19, a2[1]);
        if (v8 != 32)
          v20 = veorq_s8(v20, a2[2]);
      }
      if (v8 == a3)
        goto LABEL_19;
      if ((a3 & 8) == 0)
        goto LABEL_17;
    }
    else
    {
      v8 = 0;
    }
    v9 = v8;
    v8 = a3 & 0xFFFFFFFFFFFFFFF8;
    v10 = (int8x8_t *)&a2->i8[v9];
    v11 = (int8x8_t *)&v18.i8[v9];
    v12 = v9 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v13 = *v10++;
      *v11 = veor_s8(*v11, v13);
      ++v11;
      v12 += 8;
    }
    while (v12);
    if (v8 == a3)
      goto LABEL_19;
    goto LABEL_17;
  }
LABEL_19:
  aes_nohw_set_encrypt_key(&v18, 256, (int8x16_t *)a1);
  *(_QWORD *)(a1 + 248) = aes_nohw_encrypt;
  *(_QWORD *)(a1 + 256) = aes_nohw_ctr32_encrypt_blocks;
  *v7 = v20;
  return 1;
}

uint64_t CTR_DRBG_generate(uint64_t a1, char *a2, unint64_t a3, int8x16_t *a4, unint64_t a5)
{
  uint64_t result;
  size_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE __src[16];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a3 > 0x10000 || *(_QWORD *)(a1 + 280) > 0x1000000000000uLL)
    return 0;
  v9 = a3;
  if (!a5 || (result = ctr_drbg_update(a1, a4, a5), (_DWORD)result))
  {
    if (v9 >= 0x10)
    {
      do
      {
        if (v9 >= 0x2000)
          v12 = 0x2000;
        else
          v12 = v9;
        v13 = v12 & 0x3FF0;
        if (*(_QWORD *)(a1 + 256))
        {
          if ((v12 & 0x3FF0) != 0)
            bzero(a2, v12 & 0x3FF0);
          v11 = v12 >> 4;
          *(_DWORD *)(a1 + 276) = bswap32(bswap32(*(_DWORD *)(a1 + 276)) + 1);
          (*(void (**)(char *, char *, unint64_t, uint64_t, uint64_t))(a1 + 256))(a2, a2, v11, a1, a1 + 264);
          *(_DWORD *)(a1 + 276) = bswap32(v11 + bswap32(*(_DWORD *)(a1 + 276)) - 1);
        }
        else if ((v12 & 0x3FF0) != 0)
        {
          v14 = 0;
          do
          {
            *(_DWORD *)(a1 + 276) = bswap32(bswap32(*(_DWORD *)(a1 + 276)) + 1);
            (*(void (**)(uint64_t, char *, uint64_t))(a1 + 248))(a1 + 264, &a2[v14], a1);
            v14 += 16;
          }
          while (v14 < v13);
        }
        a2 += v13;
        v9 -= v13;
      }
      while (v9 > 0xF);
    }
    if (v9)
    {
      *(_DWORD *)(a1 + 276) = bswap32(bswap32(*(_DWORD *)(a1 + 276)) + 1);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(a1 + 248))(a1 + 264, __src, a1);
      memcpy(a2, __src, v9);
    }
    result = ctr_drbg_update(a1, a4, a5);
    if ((_DWORD)result)
    {
      ++*(_QWORD *)(a1 + 280);
      return 1;
    }
  }
  return result;
}

BN_CTX *BN_CTX_new(void)
{
  char *v0;

  v0 = (char *)malloc_type_malloc(0x38uLL, 0x30772F57uLL);
  if (v0)
  {
    *(_QWORD *)v0 = 48;
    *(_OWORD *)(v0 + 8) = 0u;
    *(_OWORD *)(v0 + 24) = 0u;
    *(_OWORD *)(v0 + 34) = 0u;
    return (BN_CTX *)(v0 + 8);
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
}

void BN_CTX_free(BN_CTX *c)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  uint64_t *v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  size_t v17;
  unint64_t *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  size_t v24;
  char *v25;
  uint64_t v26;
  size_t v27;

  if (c)
  {
    v2 = *(unint64_t **)c;
    if (*(_QWORD *)c)
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = 0;
        do
        {
          v5 = *(uint64_t **)(v2[1] + 8 * v4);
          if (v5)
          {
            v6 = *((_DWORD *)v5 + 5);
            if ((v6 & 2) == 0)
            {
              v7 = *v5;
              if (*v5)
              {
                v9 = *(_QWORD *)(v7 - 8);
                v8 = (void *)(v7 - 8);
                v10 = v9 + 8;
                if (v9 != -8)
                  bzero(v8, v10);
                free(v8);
                v6 = *((_DWORD *)v5 + 5);
              }
            }
            if ((v6 & 1) != 0)
            {
              v12 = *(v5 - 1);
              v11 = v5 - 1;
              v13 = v12 + 8;
              if (v12 != -8)
                bzero(v11, v13);
              free(v11);
            }
            else
            {
              *v5 = 0;
            }
            v3 = *v2;
          }
          ++v4;
        }
        while (v4 < v3);
      }
      v14 = v2[1];
      if (v14)
      {
        v16 = *(_QWORD *)(v14 - 8);
        v15 = (void *)(v14 - 8);
        v17 = v16 + 8;
        if (v16 != -8)
          bzero(v15, v17);
        free(v15);
      }
      v19 = *(v2 - 1);
      v18 = v2 - 1;
      v20 = v19 + 8;
      if (v19 != -8)
        bzero(v18, v20);
      free(v18);
    }
    v21 = *((_QWORD *)c + 1);
    if (v21)
    {
      v23 = *(_QWORD *)(v21 - 8);
      v22 = (void *)(v21 - 8);
      v24 = v23 + 8;
      if (v23 != -8)
        bzero(v22, v24);
      free(v22);
    }
    v26 = *((_QWORD *)c - 1);
    v25 = (char *)c - 8;
    v27 = v26 + 8;
    if (v26 != -8)
      bzero(v25, v27);
    free(v25);
  }
}

BIGNUM *__cdecl BN_CTX_get(BN_CTX *ctx)
{
  BIGNUM *result;
  unint64_t *v3;
  _QWORD *v4;
  _DWORD *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;

  if (*((_BYTE *)ctx + 40))
  {
    if (!*((_BYTE *)ctx + 41))
      return 0;
    ERR_put_error(3, 0, 116, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/ctx.c", 155);
    result = 0;
    *((_BYTE *)ctx + 41) = 0;
    return result;
  }
  result = *(BIGNUM **)ctx;
  if (!*(_QWORD *)ctx)
  {
    result = (BIGNUM *)OPENSSL_sk_new_null();
    *(_QWORD *)ctx = result;
    if (!result)
    {
LABEL_13:
      *((_BYTE *)ctx + 40) = 1;
      return result;
    }
  }
  v3 = (unint64_t *)*((_QWORD *)ctx + 4);
  if (v3 != result->d)
  {
LABEL_10:
    result = *(BIGNUM **)(*(_QWORD *)&result->top + 8 * (_QWORD)v3);
    result->neg = 0;
    result->top = 0;
    *((_QWORD *)ctx + 4) = (char *)v3 + 1;
    return result;
  }
  v4 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v4)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    ERR_put_error(3, 0, 116, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/ctx.c", 172);
    result = 0;
    goto LABEL_13;
  }
  v5 = v4;
  v4[1] = 0;
  v6 = v4 + 1;
  *v4 = 24;
  v4[2] = 0;
  v4[3] = 0x100000000;
  if (OPENSSL_sk_insert(*(unint64_t **)ctx, (uint64_t)(v4 + 1), **(_QWORD **)ctx))
  {
    result = *(BIGNUM **)ctx;
    v3 = (unint64_t *)*((_QWORD *)ctx + 4);
    goto LABEL_10;
  }
  ERR_put_error(3, 0, 116, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/ctx.c", 172);
  v7 = v5[7];
  if ((v7 & 2) == 0)
  {
    v8 = *v6;
    if (*v6)
    {
      v10 = *(_QWORD *)(v8 - 8);
      v9 = (void *)(v8 - 8);
      v11 = v10 + 8;
      if (v10 != -8)
        bzero(v9, v11);
      free(v9);
      v7 = v5[7];
    }
  }
  if ((v7 & 1) != 0)
  {
    if (*(_QWORD *)v5 != -8)
      __memset_chk();
    free(v5);
  }
  else
  {
    *v6 = 0;
  }
  result = 0;
  *((_BYTE *)ctx + 40) = 1;
  return result;
}

_BYTE *fe_tobytes(_BYTE *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v2 = *a2 - 0x7FFFFFFFFFFEDLL;
  v3 = a2[1] - -(uint64_t)(v2 >> 51) - 0x7FFFFFFFFFFFFLL;
  v4 = a2[2] - -(uint64_t)(v3 >> 51) - 0x7FFFFFFFFFFFFLL;
  v5 = a2[3] - -(uint64_t)(v4 >> 51) - 0x7FFFFFFFFFFFFLL;
  v6 = v2 & 0x7FFFFFFFFFFFFLL;
  v7 = v3 & 0x7FFFFFFFFFFFFLL;
  v8 = v4 & 0x7FFFFFFFFFFFFLL;
  v9 = v5 & 0x7FFFFFFFFFFFFLL;
  v10 = a2[4] - -(uint64_t)(v5 >> 51) - 0x7FFFFFFFFFFFFLL;
  if ((v10 & 0x7F8000000000000) != 0)
    v11 = -1;
  else
    v11 = 0;
  v12 = (v11 & 0x7FFFFFFFFFFEDLL) + v6;
  result[1] = BYTE1(v12);
  result[2] = BYTE2(v12);
  result[3] = (unint64_t)((v11 & 0xFFFFFFED) + v6) >> 24;
  result[4] = BYTE4(v12);
  result[5] = BYTE5(v12);
  v13 = (v11 & 0x7FFFFFFFFFFFFLL) + v7 + (v12 >> 51);
  *result = v12;
  result[6] = BYTE6(v12) & 7 | (8 * (v11 + v7 + (v12 >> 51)));
  result[7] = v13 >> 5;
  result[8] = v13 >> 13;
  result[9] = v13 >> 21;
  result[10] = v13 >> 29;
  result[11] = v13 >> 37;
  v14 = v8 + (v11 & 0x7FFFFFFFFFFFFLL) + (v13 >> 51);
  result[12] = (v13 >> 45) & 0x3F | (((_BYTE)v8 + (_BYTE)v11 + (v13 >> 51)) << 6);
  result[13] = v14 >> 2;
  result[14] = v14 >> 10;
  result[15] = v14 >> 18;
  result[16] = v14 >> 26;
  result[17] = v14 >> 34;
  result[18] = v14 >> 42;
  v15 = v9 + (v11 & 0x7FFFFFFFFFFFFLL) + (v14 >> 51);
  result[19] = ((v14 & 0x4000000000000) != 0) | (2 * (v9 + v11 + (v14 >> 51)));
  result[20] = v15 >> 7;
  result[21] = v15 >> 15;
  result[22] = v15 >> 23;
  result[23] = v15 >> 31;
  result[24] = v15 >> 39;
  v16 = v10 + v11 + (v15 >> 51);
  result[25] = (v15 >> 47) & 0xF | (16 * v16);
  result[26] = v16 >> 4;
  result[27] = v16 >> 12;
  result[28] = v16 >> 20;
  result[29] = v16 >> 28;
  result[30] = v16 >> 36;
  result[31] = (v16 >> 44) & 0x7F;
  return result;
}

uint64_t x25519_ge_add(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6;
  int64x2_t v7;
  uint64_t v8;
  int64x2_t v9;
  unint64_t *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = 0;
  v49 = 0u;
  v50 = 0u;
  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v6 = *(_QWORD *)(a2 + 32) + *(_QWORD *)(a2 + 72);
  v7 = vaddq_s64(*(int64x2_t *)(a2 + 16), *(int64x2_t *)(a2 + 56));
  *(int64x2_t *)a1 = vaddq_s64(*(int64x2_t *)a2, *(int64x2_t *)(a2 + 40));
  *(int64x2_t *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  v8 = *(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 32) + 0xFFFFFFFFFFFFELL;
  v9 = vaddq_s64(vsubq_s64(*(int64x2_t *)(a2 + 56), *(int64x2_t *)(a2 + 16)), vdupq_n_s64(0xFFFFFFFFFFFFEuLL));
  *(int64x2_t *)(a1 + 40) = vaddq_s64(vsubq_s64(*(int64x2_t *)(a2 + 40), *(int64x2_t *)a2), (int64x2_t)xmmword_208F1E530);
  v10 = (unint64_t *)(a1 + 40);
  *(int64x2_t *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 72) = v8;
  fe_mul_impl((uint64_t)&v43, (unint64_t *)a1, a3);
  fe_mul_impl((uint64_t)&v46, v10, a3 + 5);
  fe_mul_impl((uint64_t)&v40, a3 + 15, (unint64_t *)(a2 + 120));
  fe_mul_impl((uint64_t)&v49, (unint64_t *)(a2 + 80), a3 + 10);
  v11 = v49;
  v12 = v50;
  v13 = v51;
  v14 = v43;
  v15 = v46;
  v16 = *((_QWORD *)&v43 + 1) - *((_QWORD *)&v46 + 1) + 0xFFFFFFFFFFFFELL;
  v17 = v44;
  v18 = v47;
  v19 = v44 - v47 + 0xFFFFFFFFFFFFELL;
  v20 = *((_QWORD *)&v44 + 1) - *((_QWORD *)&v47 + 1) + 0xFFFFFFFFFFFFELL;
  v21 = v45;
  v22 = v48;
  v23 = v45 - v48 + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)a1 = v43 + 0xFFFFFFFFFFFDALL - v46;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 32) = v23;
  *v10 = v15 + v14;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)&v15 + 1) + *((_QWORD *)&v14 + 1);
  *(_QWORD *)(a1 + 56) = v18 + v17;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)&v18 + 1) + *((_QWORD *)&v17 + 1);
  *(_QWORD *)(a1 + 72) = v22 + v21;
  v24 = (((unint64_t)v11 >> 50) & 0x1FFF) + 2 * *((_QWORD *)&v11 + 1);
  v25 = (v24 >> 51) + 2 * v12;
  v26 = (v25 >> 51) + 2 * *((_QWORD *)&v12 + 1);
  v27 = (v26 >> 51) + 2 * v13;
  v28 = 2 * (v11 & 0x3FFFFFFFFFFFFLL) + 19 * (v27 >> 51);
  v29 = (v24 & 0x7FFFFFFFFFFFFLL) + (v28 >> 51);
  v28 &= 0x7FFFFFFFFFFFFuLL;
  v30 = v29 & 0x7FFFFFFFFFFFFLL;
  v31 = (v25 & 0x7FFFFFFFFFFFFLL) + (v29 >> 51);
  v32 = v40;
  v33 = *((_QWORD *)&v40 + 1) + v30;
  v35 = *((_QWORD *)&v41 + 1);
  result = v41;
  v36 = v41 + v31;
  v37 = *((_QWORD *)&v41 + 1) + (v26 & 0x7FFFFFFFFFFFFLL);
  v38 = v42;
  v39 = v42 + (v27 & 0x7FFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 80) = v40 + v28;
  *(_QWORD *)(a1 + 88) = v33;
  *(_QWORD *)(a1 + 96) = v36;
  *(_QWORD *)(a1 + 104) = v37;
  *(_QWORD *)(a1 + 112) = v39;
  *(_QWORD *)(a1 + 120) = v28 + 0xFFFFFFFFFFFDALL - v32;
  *(_QWORD *)(a1 + 128) = v30 - *((_QWORD *)&v32 + 1) + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 136) = v31 - result + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 144) = (v26 & 0x7FFFFFFFFFFFFLL) - v35 + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 152) = (v27 & 0x7FFFFFFFFFFFFLL) - v38 + 0xFFFFFFFFFFFFELL;
  return result;
}

uint64_t ge_madd(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6;
  int64x2_t v7;
  uint64_t v8;
  int64x2_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v6 = *(_QWORD *)(a2 + 32) + *(_QWORD *)(a2 + 72);
  v7 = vaddq_s64(*(int64x2_t *)(a2 + 16), *(int64x2_t *)(a2 + 56));
  *(int64x2_t *)a1 = vaddq_s64(*(int64x2_t *)a2, *(int64x2_t *)(a2 + 40));
  *(int64x2_t *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  v8 = *(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 32) + 0xFFFFFFFFFFFFELL;
  v9 = vaddq_s64(vsubq_s64(*(int64x2_t *)(a2 + 56), *(int64x2_t *)(a2 + 16)), vdupq_n_s64(0xFFFFFFFFFFFFEuLL));
  *(int64x2_t *)(a1 + 40) = vaddq_s64(vsubq_s64(*(int64x2_t *)(a2 + 40), *(int64x2_t *)a2), (int64x2_t)xmmword_208F1E530);
  v10 = (unint64_t *)(a1 + 40);
  *(int64x2_t *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 72) = v8;
  fe_mul_impl((uint64_t)&v45, (unint64_t *)a1, a3);
  fe_mul_impl((uint64_t)&v48, v10, a3 + 5);
  fe_mul_impl((uint64_t)&v42, a3 + 10, (unint64_t *)(a2 + 120));
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = v45;
  v17 = v48;
  v18 = *((_QWORD *)&v45 + 1) - *((_QWORD *)&v48 + 1) + 0xFFFFFFFFFFFFELL;
  v19 = v46;
  v20 = v49;
  v21 = v46 - v49 + 0xFFFFFFFFFFFFELL;
  v22 = *((_QWORD *)&v46 + 1) - *((_QWORD *)&v49 + 1) + 0xFFFFFFFFFFFFELL;
  v23 = v47;
  v24 = v50;
  v25 = v47 - v50 + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)a1 = v45 + 0xFFFFFFFFFFFDALL - v48;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v21;
  *(_QWORD *)(a1 + 24) = v22;
  *(_QWORD *)(a1 + 32) = v25;
  *v10 = v17 + v16;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)&v17 + 1) + *((_QWORD *)&v16 + 1);
  *(_QWORD *)(a1 + 56) = v20 + v19;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)&v20 + 1) + *((_QWORD *)&v19 + 1);
  *(_QWORD *)(a1 + 72) = v24 + v23;
  v26 = ((v11 >> 50) & 0x1FFF) + 2 * v12;
  v27 = (v26 >> 51) + 2 * v13;
  v28 = (v27 >> 51) + 2 * v14;
  v29 = (v28 >> 51) + 2 * v15;
  v30 = 2 * (v11 & 0x3FFFFFFFFFFFFLL) + 19 * (v29 >> 51);
  v31 = (v26 & 0x7FFFFFFFFFFFFLL) + (v30 >> 51);
  v30 &= 0x7FFFFFFFFFFFFuLL;
  v32 = v31 & 0x7FFFFFFFFFFFFLL;
  v33 = (v27 & 0x7FFFFFFFFFFFFLL) + (v31 >> 51);
  v34 = v42;
  v35 = *((_QWORD *)&v42 + 1) + v32;
  v37 = *((_QWORD *)&v43 + 1);
  result = v43;
  v38 = v43 + v33;
  v39 = *((_QWORD *)&v43 + 1) + (v28 & 0x7FFFFFFFFFFFFLL);
  v40 = v44;
  v41 = v44 + (v29 & 0x7FFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 80) = v42 + v30;
  *(_QWORD *)(a1 + 88) = v35;
  *(_QWORD *)(a1 + 96) = v38;
  *(_QWORD *)(a1 + 104) = v39;
  *(_QWORD *)(a1 + 112) = v41;
  *(_QWORD *)(a1 + 120) = v30 + 0xFFFFFFFFFFFDALL - v34;
  *(_QWORD *)(a1 + 128) = v32 - *((_QWORD *)&v34 + 1) + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 136) = v33 - result + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 144) = (v28 & 0x7FFFFFFFFFFFFLL) - v37 + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 152) = (v29 & 0x7FFFFFFFFFFFFLL) - v40 + 0xFFFFFFFFFFFFELL;
  return result;
}

void x25519_ge_scalarmult_base(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unint64_t v39;
  __int128 *v40;
  BOOL v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  unint64_t v48;
  _OWORD v49[7];
  uint64_t v50;
  _OWORD v51[5];
  _OWORD v52[2];
  uint64_t v53;
  _OWORD v54[5];
  _OWORD v55[5];
  _OWORD v56[2];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  _BYTE v64[63];
  char v65;
  uint64_t v66;

  v3 = 0;
  v4 = 0;
  v66 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v64[0] = v5 & 0xF;
  v64[1] = v5 >> 4;
  v6 = a2[1];
  v64[2] = v6 & 0xF;
  v64[3] = v6 >> 4;
  v7 = a2[2];
  v64[4] = v7 & 0xF;
  v64[5] = v7 >> 4;
  v8 = a2[3];
  v64[6] = v8 & 0xF;
  v64[7] = v8 >> 4;
  v9 = a2[4];
  v64[8] = v9 & 0xF;
  v64[9] = v9 >> 4;
  v10 = a2[5];
  v64[10] = v10 & 0xF;
  v64[11] = v10 >> 4;
  v11 = a2[6];
  v64[12] = v11 & 0xF;
  v64[13] = v11 >> 4;
  v12 = a2[7];
  v64[14] = v12 & 0xF;
  v64[15] = v12 >> 4;
  v13 = a2[8];
  v64[16] = v13 & 0xF;
  v64[17] = v13 >> 4;
  v14 = a2[9];
  v64[18] = v14 & 0xF;
  v64[19] = v14 >> 4;
  v15 = a2[10];
  v64[20] = v15 & 0xF;
  v64[21] = v15 >> 4;
  v16 = a2[11];
  v64[22] = v16 & 0xF;
  v64[23] = v16 >> 4;
  v17 = a2[12];
  v64[24] = v17 & 0xF;
  v64[25] = v17 >> 4;
  v18 = a2[13];
  v64[26] = v18 & 0xF;
  v64[27] = v18 >> 4;
  v19 = a2[14];
  v64[28] = v19 & 0xF;
  v64[29] = v19 >> 4;
  v20 = a2[15];
  v64[30] = v20 & 0xF;
  v64[31] = v20 >> 4;
  v21 = a2[16];
  v64[32] = v21 & 0xF;
  v64[33] = v21 >> 4;
  v22 = a2[17];
  v64[34] = v22 & 0xF;
  v64[35] = v22 >> 4;
  v23 = a2[18];
  v64[36] = v23 & 0xF;
  v64[37] = v23 >> 4;
  v24 = a2[19];
  v64[38] = v24 & 0xF;
  v64[39] = v24 >> 4;
  v25 = a2[20];
  v64[40] = v25 & 0xF;
  v64[41] = v25 >> 4;
  v26 = a2[21];
  v64[42] = v26 & 0xF;
  v64[43] = v26 >> 4;
  v27 = a2[22];
  v64[44] = v27 & 0xF;
  v64[45] = v27 >> 4;
  v28 = a2[23];
  v64[46] = v28 & 0xF;
  v64[47] = v28 >> 4;
  v29 = a2[24];
  v64[48] = v29 & 0xF;
  v64[49] = v29 >> 4;
  v30 = a2[25];
  v64[50] = v30 & 0xF;
  v64[51] = v30 >> 4;
  v31 = a2[26];
  v64[52] = v31 & 0xF;
  v64[53] = v31 >> 4;
  v32 = a2[27];
  v64[54] = v32 & 0xF;
  v64[55] = v32 >> 4;
  v33 = a2[28];
  v64[56] = v33 & 0xF;
  v64[57] = v33 >> 4;
  v34 = a2[29];
  v64[58] = v34 & 0xF;
  v64[59] = v34 >> 4;
  v35 = a2[30];
  v64[60] = v35 & 0xF;
  v64[61] = v35 >> 4;
  v36 = a2[31];
  v64[62] = v36 & 0xF;
  v65 = v36 >> 4;
  do
  {
    v37 = v64[v3] + v4;
    v4 = (v37 + 8) << 24 >> 28;
    v64[v3++] = v37 - ((v37 + 8) & 0xF0);
  }
  while (v3 != 63);
  v38 = 0;
  memset(v55, 0, sizeof(v55));
  memset(v54, 0, sizeof(v54));
  memset(v49, 0, sizeof(v49));
  v50 = 0;
  v65 += v4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v39 = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  v40 = (__int128 *)(a1 + 80);
  *(_QWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 80) = 1;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  do
  {
    table_select((uint64_t)v49, v38, (char)v64[v39]);
    ge_madd((uint64_t)v54, a1, (unint64_t *)v49);
    fe_mul_impl(a1, (unint64_t *)v54, (unint64_t *)&v55[2] + 1);
    fe_mul_impl(a1 + 40, (unint64_t *)&v54[2] + 1, (unint64_t *)v55);
    fe_mul_impl(a1 + 80, (unint64_t *)v55, (unint64_t *)&v55[2] + 1);
    fe_mul_impl(a1 + 120, (unint64_t *)v54, (unint64_t *)&v54[2] + 1);
    ++v38;
    v41 = v39 >= 0x3E;
    v39 += 2;
  }
  while (!v41);
  v53 = 0;
  memset(v52, 0, sizeof(v52));
  memset(v51, 0, sizeof(v51));
  v42 = *(_OWORD *)(a1 + 16);
  v56[0] = *(_OWORD *)a1;
  v56[1] = v42;
  v43 = *(_QWORD *)(a1 + 32);
  v44 = *(_OWORD *)(a1 + 56);
  v58 = *(_OWORD *)(a1 + 40);
  v59 = v44;
  v45 = *(_QWORD *)(a1 + 72);
  v57 = v43;
  v60 = v45;
  v46 = *(_OWORD *)(a1 + 96);
  v61 = *v40;
  v62 = v46;
  v63 = *(_QWORD *)(a1 + 112);
  ge_p2_dbl((uint64_t)v54, (unint64_t *)v56);
  fe_mul_impl((uint64_t)v51, (unint64_t *)v54, (unint64_t *)&v55[2] + 1);
  fe_mul_impl((uint64_t)&v51[2] + 8, (unint64_t *)&v54[2] + 1, (unint64_t *)v55);
  fe_mul_impl((uint64_t)v52, (unint64_t *)v55, (unint64_t *)&v55[2] + 1);
  ge_p2_dbl((uint64_t)v54, (unint64_t *)v51);
  fe_mul_impl((uint64_t)v51, (unint64_t *)v54, (unint64_t *)&v55[2] + 1);
  fe_mul_impl((uint64_t)&v51[2] + 8, (unint64_t *)&v54[2] + 1, (unint64_t *)v55);
  fe_mul_impl((uint64_t)v52, (unint64_t *)v55, (unint64_t *)&v55[2] + 1);
  ge_p2_dbl((uint64_t)v54, (unint64_t *)v51);
  fe_mul_impl((uint64_t)v51, (unint64_t *)v54, (unint64_t *)&v55[2] + 1);
  fe_mul_impl((uint64_t)&v51[2] + 8, (unint64_t *)&v54[2] + 1, (unint64_t *)v55);
  fe_mul_impl((uint64_t)v52, (unint64_t *)v55, (unint64_t *)&v55[2] + 1);
  ge_p2_dbl((uint64_t)v54, (unint64_t *)v51);
  fe_mul_impl(a1, (unint64_t *)v54, (unint64_t *)&v55[2] + 1);
  fe_mul_impl(a1 + 40, (unint64_t *)&v54[2] + 1, (unint64_t *)v55);
  fe_mul_impl(a1 + 80, (unint64_t *)v55, (unint64_t *)&v55[2] + 1);
  fe_mul_impl(a1 + 120, (unint64_t *)v54, (unint64_t *)&v54[2] + 1);
  v47 = 0;
  v48 = 0;
  do
  {
    table_select((uint64_t)v49, v47, (char)v64[v48]);
    ge_madd((uint64_t)v54, a1, (unint64_t *)v49);
    fe_mul_impl(a1, (unint64_t *)v54, (unint64_t *)&v55[2] + 1);
    fe_mul_impl(a1 + 40, (unint64_t *)&v54[2] + 1, (unint64_t *)v55);
    fe_mul_impl(a1 + 80, (unint64_t *)v55, (unint64_t *)&v55[2] + 1);
    fe_mul_impl(a1 + 120, (unint64_t *)v54, (unint64_t *)&v54[2] + 1);
    ++v47;
    v41 = v48 >= 0x3E;
    v48 += 2;
  }
  while (!v41);
}

uint64_t table_select(uint64_t result, int a2, int a3)
{
  unint64_t v3;
  int v4;
  int8x16_t v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  unint64_t v59;
  unint64_t v60;
  int8x16_t v61;
  unint64_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;

  v3 = (uint64_t)a3 >> 63;
  v69 = 0u;
  v67 = 0u;
  v67.i8[0] = ((a3 - 1) & ~(uint64_t)a3) < 0;
  v69.i8[0] = v67.i8[0];
  v4 = (a3 - 2 * ((a3 >> 31) & a3));
  v5 = vdupq_n_s8(((v4 ^ 1u) - 1) >> 63);
  v6 = (int8x16_t *)((char *)&k25519Precomp + 768 * a2);
  v7 = vdupq_n_s8(((v4 ^ 2u) - 1) >> 63);
  v8 = veorq_s8(vandq_s8(v6[6], v7), veorq_s8(vandq_s8(*v6, v5), v67));
  v9 = veorq_s8(vandq_s8(v6[7], v7), veorq_s8(vandq_s8(v6[1], v5), (int8x16_t)0));
  v10 = veorq_s8(vandq_s8(v6[8], v7), veorq_s8(vandq_s8(v6[2], v5), v69));
  v11 = veorq_s8(vandq_s8(v6[9], v7), veorq_s8(vandq_s8(v6[3], v5), (int8x16_t)0));
  v12 = veorq_s8(vandq_s8(v6[10], v7), veorq_s8(vandq_s8(v6[4], v5), (int8x16_t)0));
  v13 = veorq_s8(vandq_s8(v6[11], v7), veorq_s8(vandq_s8(v6[5], v5), (int8x16_t)0));
  v14 = vdupq_n_s8(((v4 ^ 3u) - 1) >> 63);
  v15 = veorq_s8(vandq_s8(v6[12], v14), v8);
  v66 = veorq_s8(vandq_s8(v6[16], v14), v12);
  v16 = veorq_s8(vandq_s8(v6[17], v14), v13);
  v17 = vdupq_n_s8(((v4 ^ 4u) - 1) >> 63);
  v18 = veorq_s8(vandq_s8(v6[18], v17), v15);
  v19 = veorq_s8(vandq_s8(v6[19], v17), veorq_s8(vandq_s8(v6[13], v14), v9));
  v20 = veorq_s8(vandq_s8(v6[20], v17), veorq_s8(vandq_s8(v6[14], v14), v10));
  v21 = veorq_s8(vandq_s8(v6[21], v17), veorq_s8(vandq_s8(v6[15], v14), v11));
  v22 = vandq_s8(v6[22], v17);
  v23 = vandq_s8(v6[23], v17);
  v24 = vdupq_n_s8(((v4 ^ 5u) - 1) >> 63);
  v25 = vandq_s8(v6[24], v24);
  v26 = vandq_s8(v6[25], v24);
  v27 = vandq_s8(v6[26], v24);
  v28 = vandq_s8(v6[27], v24);
  v29 = (int64x2_t)vandq_s8(v6[28], v24);
  v30 = (int64x2_t)vandq_s8(v6[29], v24);
  v31 = vdupq_n_s8(((v4 ^ 6u) - 1) >> 63);
  v32 = vandq_s8(v6[30], v31);
  v33 = vandq_s8(v6[31], v31);
  v34 = vandq_s8(v6[32], v31);
  v35 = vandq_s8(v6[33], v31);
  v36 = vandq_s8(v6[34], v31);
  v37 = vandq_s8(v6[35], v31);
  v38 = vdupq_n_s8(((v4 ^ 7u) - 1) >> 63);
  v39 = vandq_s8(v6[36], v38);
  v40 = vandq_s8(v6[37], v38);
  v41 = vandq_s8(v6[38], v38);
  v42 = vandq_s8(v6[39], v38);
  v43 = vandq_s8(v6[40], v38);
  v44 = vandq_s8(v6[41], v38);
  v45 = vdupq_n_s8(((v4 ^ 8u) - 1) >> 63);
  v46 = vandq_s8(v6[42], v45);
  v47 = vandq_s8(v6[43], v45);
  v48 = vandq_s8(v6[44], v45);
  v49 = vandq_s8(v6[45], v45);
  v50 = vandq_s8(v6[46], v45);
  v51 = vandq_s8(v6[47], v45);
  v52 = veorq_s8(v25, v18);
  v53 = veorq_s8(v27, v20);
  v54 = veorq_s8(v32, v52);
  v55 = veorq_s8(v34, v53);
  v56 = veorq_s8(v39, v54);
  v57 = veorq_s8(v41, v55);
  v58 = veorq_s8(v46, v56);
  v68 = veorq_s8(v47, veorq_s8(v40, veorq_s8(v33, veorq_s8(v26, v19))));
  v70 = veorq_s8(v48, v57);
  v71 = veorq_s8(v49, veorq_s8(v42, veorq_s8(v35, veorq_s8(v28, v21))));
  v59 = ((unint64_t)v58.u8[5] << 40) & 0xFFF8FFFFFFFFFFFFLL | ((unint64_t)(v58.i8[6] & 7) << 48) | v58.u32[0] | ((unint64_t)v58.u8[4] << 32);
  v60 = (*(_OWORD *)&v68 >> 48);
  v61 = veorq_s8(v51, veorq_s8(v44, veorq_s8(v37, veorq_s8((int8x16_t)v30, veorq_s8(v23, v16)))));
  v58.i64[0] = ((unint64_t)(v58.i8[12] & 0x3F) << 45) | ((unint64_t)v58.u8[11] << 37) | ((unint64_t)v58.u8[10] << 29) | ((unint64_t)v58.u8[9] << 21) | ((unint64_t)v58.u8[8] << 13) | (32 * v58.u8[7]) | ((unint64_t)v58.u8[6] >> 3);
  v16.i64[0] = ((v60 & 0xFFFFFFF) << 23) | ((unint64_t)v68.u8[5] << 15) | ((unint64_t)v68.u8[4] << 7) | ((unint64_t)v68.u32[0] >> 25);
  v72 = veorq_s8(v50, veorq_s8(v43, veorq_s8(v36, veorq_s8((int8x16_t)v29, veorq_s8(v22, v66)))));
  v73 = v61;
  v58.i64[1] = ((unint64_t)(v68.i32[0] & 0x1FFFFFF) << 26) | ((unint64_t)v58.u8[15] << 18) | ((unint64_t)v58.u8[14] << 10) | (4 * v58.u8[13]) | ((unint64_t)v58.u8[12] >> 6);
  v16.i64[1] = ((unint64_t)v68.u32[3] << 20) | ((unint64_t)v68.u8[11] << 12) | (16 * v68.u8[10]) | (v60 >> 28);
  v22.i64[0] = ((unint64_t)v70.u8[5] << 40) & 0xFFF8FFFFFFFFFFFFLL | ((unint64_t)(v70.i8[6] & 7) << 48) | v70.u32[0] | ((unint64_t)v70.u8[4] << 32);
  v22.i64[1] = ((unint64_t)(v70.i8[12] & 0x3F) << 45) | ((unint64_t)v70.u8[11] << 37) | ((unint64_t)v70.u8[10] << 29) | ((unint64_t)v70.u8[9] << 21) | ((unint64_t)v70.u8[8] << 13) | (32 * v70.u8[7]) | ((unint64_t)v70.u8[6] >> 3);
  v61.i64[0] = ((unint64_t)(v71.i32[0] & 0x1FFFFFF) << 26) | ((unint64_t)v70.u8[15] << 18) | ((unint64_t)v70.u8[14] << 10) | (4 * v70.u8[13]) | ((unint64_t)v70.u8[12] >> 6);
  v61.i64[1] = ((unint64_t)(*(__int32 *)((_BYTE *)&v71.i32[1] + 2) & 0xFFFFFFF) << 23) | ((unint64_t)v71.u8[5] << 15) | ((unint64_t)v71.u8[4] << 7) | ((unint64_t)v71.u32[0] >> 25);
  v62 = ((unint64_t)v73.u32[3] << 20) | ((unint64_t)v73.u8[11] << 12) | (16 * v73.u8[10]) | ((unint64_t)*(unsigned int *)((char *)&v73.u32[1] + 2) >> 28);
  v29.i64[0] = ((unint64_t)v72.u8[5] << 40) & 0xFFF8FFFFFFFFFFFFLL | ((unint64_t)(v72.i8[6] & 7) << 48) | v72.u32[0] | ((unint64_t)v72.u8[4] << 32);
  v29.i64[1] = ((unint64_t)(v72.i8[12] & 0x3F) << 45) | ((unint64_t)v72.u8[11] << 37) | ((unint64_t)v72.u8[10] << 29) | ((unint64_t)v72.u8[9] << 21) | ((unint64_t)v72.u8[8] << 13) | (32 * v72.u8[7]) | ((unint64_t)v72.u8[6] >> 3);
  v30.i64[0] = ((unint64_t)(v73.i32[0] & 0x1FFFFFF) << 26) | ((unint64_t)v72.u8[15] << 18) | ((unint64_t)v72.u8[14] << 10) | (4 * v72.u8[13]) | ((unint64_t)v72.u8[12] >> 6);
  v30.i64[1] = ((unint64_t)(*(__int32 *)((_BYTE *)&v73.i32[1] + 2) & 0xFFFFFFF) << 23) | ((unint64_t)v73.u8[5] << 15) | ((unint64_t)v73.u8[4] << 7) | ((unint64_t)v73.u32[0] >> 25);
  *(_QWORD *)result = v59;
  *(int8x16_t *)(result + 8) = v58;
  *(int8x16_t *)(result + 24) = v16;
  *(int8x16_t *)(result + 40) = v22;
  *(int8x16_t *)(result + 56) = v61;
  *(_QWORD *)(result + 72) = ((unint64_t)v71.u32[3] << 20) | ((unint64_t)v71.u8[11] << 12) | (16 * v71.u8[10]) | ((unint64_t)*(unsigned int *)((char *)&v71.u32[1] + 2) >> 28);
  v63 = (int8x16_t)vdupq_n_s64(v3);
  v64 = vbslq_s8(v63, v61, *(int8x16_t *)(result + 16));
  *(int8x16_t *)result = vbslq_s8(v63, v22, *(int8x16_t *)result);
  *(int8x16_t *)(result + 16) = v64;
  v22.i64[0] = ((unint64_t)v71.u32[3] << 20) | ((unint64_t)v71.u8[11] << 12) | (16 * v71.u8[10]) | ((unint64_t)*(unsigned int *)((char *)&v71.u32[1] + 2) >> 28);
  v22.i64[1] = v59;
  v65 = vbslq_s8(v63, v58, *(int8x16_t *)(result + 48));
  *(int8x16_t *)(result + 32) = vbslq_s8(v63, v22, *(int8x16_t *)(result + 32));
  *(int8x16_t *)(result + 48) = v65;
  *(int8x16_t *)(result + 64) = vbslq_s8(v63, v16, *(int8x16_t *)(result + 64));
  *(int8x16_t *)(result + 80) = vbslq_s8(v63, (int8x16_t)vsubq_s64((int64x2_t)xmmword_208F1E530, v29), (int8x16_t)v29);
  *(int8x16_t *)(result + 96) = vbslq_s8(v63, (int8x16_t)vsubq_s64(vdupq_n_s64(0xFFFFFFFFFFFFEuLL), v30), (int8x16_t)v30);
  *(_QWORD *)(result + 112) = (0xFFFFFFFFFFFFELL - v62) & v3 | v62 & ~v3;
  return result;
}

int64x2_t ge_p2_dbl(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  signed __int128 v13;
  unsigned __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int128 v17;
  unsigned __int128 v18;
  unsigned __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int128 v36;
  unsigned __int128 v37;
  unsigned __int128 v38;
  unsigned __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  signed __int128 v60;
  unsigned __int128 v61;
  unsigned __int128 v62;
  unsigned __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  signed __int128 v86;
  unsigned __int128 v87;
  unsigned __int128 v88;
  uint64_t v89;
  unsigned __int128 v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  __int128 v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  int64x2_t result;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;

  v3 = a2[4];
  v2 = a2[5];
  v5 = a2[2];
  v4 = a2[3];
  v7 = *a2;
  v6 = a2[1];
  v8 = v3;
  v9 = (v4 * (unsigned __int128)(38 * v3)) >> 64;
  v10 = v4 * 38 * v3;
  v11 = (v5 * (unsigned __int128)(38 * v3)) >> 64;
  v12 = v5 * 38 * v3;
  v13 = v6 * (unsigned __int128)(38 * v3) + v5 * (unsigned __int128)(38 * v4) + v7 * (unsigned __int128)v7;
  v14 = v6 * (unsigned __int128)(2 * v4) + v5 * (unsigned __int128)v5 + *a2 * (unsigned __int128)(2 * v3);
  v15 = v13 >> 51;
  v17 = v6 * (unsigned __int128)(2 * v5) + 19 * v3 * (unsigned __int128)v3 + *a2 * (unsigned __int128)(2 * v4);
  v16 = *((_QWORD *)&v17 + 1);
  v18 = v6 * (unsigned __int128)v6 + __PAIR128__(v9, v10) + *a2 * (unsigned __int128)(2 * v5);
  v19 = __PAIR128__(v11, v12) + 19 * v4 * (unsigned __int128)v4 + *a2 * (unsigned __int128)(2 * v6);
  v20 = v19 + v15;
  if (__CFADD__((_QWORD)v19, v15))
    v21 = *((_QWORD *)&v19 + 1) + 1;
  else
    v21 = (__PAIR128__(v11, v12) + 19 * v4 * (unsigned __int128)v4 + *a2 * (unsigned __int128)(2 * v6)) >> 64;
  *((_QWORD *)&v23 + 1) = v21;
  *(_QWORD *)&v23 = v20;
  v22 = v23 >> 51;
  v24 = v18 + v22;
  v162 = v18 + v22;
  v164 = v20;
  if (__CFADD__((_QWORD)v18, v22))
    v25 = *((_QWORD *)&v18 + 1) + 1;
  else
    v25 = (v6 * (unsigned __int128)v6 + __PAIR128__(v9, v10) + *a2 * (unsigned __int128)(2 * v5)) >> 64;
  *((_QWORD *)&v27 + 1) = v25;
  *(_QWORD *)&v27 = v24;
  v26 = v27 >> 51;
  v92 = __CFADD__((_QWORD)v17, v26);
  v28 = v17 + v26;
  v167 = v28;
  if (v92)
    v16 = *((_QWORD *)&v17 + 1) + 1;
  *((_QWORD *)&v30 + 1) = v16;
  *(_QWORD *)&v30 = v28;
  v29 = v30 >> 51;
  *(_QWORD *)&v160 = v14 + v29;
  if (__CFADD__((_QWORD)v14, v29))
    v31 = *((_QWORD *)&v14 + 1) + 1;
  else
    v31 = *((_QWORD *)&v14 + 1);
  *((_QWORD *)&v160 + 1) = v31;
  v33 = a2[8];
  v32 = a2[9];
  v35 = a2[6];
  v34 = a2[7];
  v36 = v35 * (unsigned __int128)(38 * v32) + v34 * (unsigned __int128)(38 * v33);
  v156 = v36 + v2 * v2;
  v37 = v35 * (unsigned __int128)(2 * v33) + v34 * (unsigned __int128)v34 + v2 * (unsigned __int128)(2 * v32);
  v38 = v35 * (unsigned __int128)(2 * v34) + 19 * v32 * (unsigned __int128)v32 + v2 * (unsigned __int128)(2 * v33);
  v39 = v35 * (unsigned __int128)v35 + v33 * (unsigned __int128)(38 * v32) + v2 * (unsigned __int128)(2 * v34);
  v40 = (__int128)(v36 + v2 * (unsigned __int128)v2) >> 51;
  v41 = (v34 * (unsigned __int128)(38 * v32) + 19 * v33 * (unsigned __int128)v33 + v2 * (unsigned __int128)(2 * v35)) >> 64;
  v42 = v34 * 38 * v32 + 19 * v33 * v33 + v2 * 2 * v35;
  v43 = v42 + v40;
  if (__CFADD__(v42, v40))
    ++v41;
  *((_QWORD *)&v45 + 1) = v41;
  *(_QWORD *)&v45 = v42 + v40;
  v44 = v45 >> 51;
  v46 = v39 + v44;
  if (__CFADD__((_QWORD)v39, v44))
    v47 = *((_QWORD *)&v39 + 1) + 1;
  else
    v47 = (v35 * (unsigned __int128)v35 + v33 * (unsigned __int128)(38 * v32) + v2 * (unsigned __int128)(2 * v34)) >> 64;
  *((_QWORD *)&v49 + 1) = v47;
  *(_QWORD *)&v49 = v46;
  v48 = v49 >> 51;
  v92 = __CFADD__((_QWORD)v38, v48);
  v50 = v38 + v48;
  v159 = v50;
  if (v92)
    v51 = *((_QWORD *)&v38 + 1) + 1;
  else
    v51 = (v35 * (unsigned __int128)(2 * v34) + 19 * v32 * (unsigned __int128)v32 + v2 * (unsigned __int128)(2 * v33)) >> 64;
  *((_QWORD *)&v53 + 1) = v51;
  *(_QWORD *)&v53 = v50;
  v52 = v53 >> 51;
  v155 = v37 + v52;
  if (__CFADD__((_QWORD)v37, v52))
    v54 = *((_QWORD *)&v37 + 1) + 1;
  else
    v54 = (v35 * (unsigned __int128)(2 * v33) + v34 * (unsigned __int128)v34 + v2 * (unsigned __int128)(2 * v32)) >> 64;
  v154 = v54;
  v56 = a2[13];
  v55 = a2[14];
  v58 = a2[11];
  v57 = a2[12];
  v59 = a2[10];
  v60 = v58 * (unsigned __int128)(38 * v55) + v57 * (unsigned __int128)(38 * v56) + v59 * (unsigned __int128)v59;
  v61 = v58 * (unsigned __int128)(2 * v56) + v57 * (unsigned __int128)v57 + v59 * (unsigned __int128)(2 * v55);
  v62 = v58 * (unsigned __int128)(2 * v57) + 19 * v55 * (unsigned __int128)v55 + v59 * (unsigned __int128)(2 * v56);
  v63 = v58 * (unsigned __int128)v58 + v56 * (unsigned __int128)(38 * v55) + v59 * (unsigned __int128)(2 * v57);
  v64 = (v57 * (unsigned __int128)(38 * v55) + 19 * v56 * (unsigned __int128)v56 + v59 * (unsigned __int128)(2 * v58)) >> 64;
  v65 = v57 * 38 * v55 + 19 * v56 * v56 + v59 * 2 * v58;
  v66 = v60 >> 51;
  v67 = v65 + v66;
  if (__CFADD__(v65, v66))
    ++v64;
  *((_QWORD *)&v69 + 1) = v64;
  *(_QWORD *)&v69 = v65 + v66;
  v68 = v69 >> 51;
  v70 = v63 + v68;
  if (__CFADD__((_QWORD)v63, v68))
    v71 = *((_QWORD *)&v63 + 1) + 1;
  else
    v71 = *((_QWORD *)&v63 + 1);
  *((_QWORD *)&v73 + 1) = v71;
  *(_QWORD *)&v73 = v63 + v68;
  v72 = v73 >> 51;
  v92 = __CFADD__((_QWORD)v62, v72);
  v74 = v62 + v72;
  if (v92)
    v75 = *((_QWORD *)&v62 + 1) + 1;
  else
    v75 = *((_QWORD *)&v62 + 1);
  *((_QWORD *)&v77 + 1) = v75;
  *(_QWORD *)&v77 = v74;
  v76 = v77 >> 51;
  v78 = v61 + v76;
  if (__CFADD__((_QWORD)v61, v76))
    v79 = *((_QWORD *)&v61 + 1) + 1;
  else
    v79 = *((_QWORD *)&v61 + 1);
  v80 = v2 + v7;
  v81 = v35 + v6;
  v82 = v34 + v5;
  v83 = v33 + v4;
  v84 = 2 * (v33 + v4);
  v85 = 38 * (v32 + v8);
  v86 = v81 * (unsigned __int128)(unint64_t)v85
      + v82 * (unsigned __int128)(38 * v83)
      + v80 * (unsigned __int128)v80;
  v87 = v81 * (unsigned __int128)(unint64_t)v84
      + v82 * (unsigned __int128)v82
      + v80 * (unsigned __int128)(2 * (v32 + v8));
  v88 = v81 * (unsigned __int128)(2 * v82) + 19 * (v32 + v8) * (unsigned __int128)(v32 + v8);
  v153 = v88 + v80 * v84;
  v89 = (v88 + v80 * (unsigned __int128)(unint64_t)v84) >> 64;
  v90 = v81 * (unsigned __int128)v81
      + v83 * (unsigned __int128)(unint64_t)v85
      + v80 * (unsigned __int128)(2 * v82);
  v91 = 19 * v83 * v83;
  v92 = __CFADD__(v82 * v85, v91);
  v93 = v82 * v85 + v91;
  *((_QWORD *)&v94 + 1) = v154;
  *(_QWORD *)&v94 = v155;
  v95 = (v13 & 0x7FFFFFFFFFFFFLL) + 19 * (v160 >> 51);
  v96 = (v156 & 0x7FFFFFFFFFFFFLL) + 19 * (v94 >> 51);
  *((_QWORD *)&v94 + 1) = v79;
  *(_QWORD *)&v94 = v61 + v76;
  v97 = (v60 & 0x7FFFFFFFFFFFFLL) + 19 * (v94 >> 51);
  v98 = (19 * v83 * (unsigned __int128)v83) >> 64;
  v99 = (v164 & 0x7FFFFFFFFFFFFLL) + (v95 >> 51);
  v100 = (v162 & 0x7FFFFFFFFFFFFLL) + (v99 >> 51);
  v101 = (v43 & 0x7FFFFFFFFFFFFLL) + (v96 >> 51);
  v102 = (v46 & 0x7FFFFFFFFFFFFLL) + (v101 >> 51);
  v103 = (v67 & 0x7FFFFFFFFFFFFLL) + (v97 >> 51);
  v166 = (v70 & 0x7FFFFFFFFFFFFLL) + (v103 >> 51);
  v104 = 2 * (v74 & 0x7FFFFFFFFFFFFLL) + (v166 >> 50);
  v165 = v104;
  v105 = v86 >> 51;
  v106 = __PAIR128__(v98 + v92 + ((v82 * (unsigned __int128)(unint64_t)v85) >> 64), v93)
       + v80 * (unsigned __int128)(2 * v81);
  v107 = v106 + v105;
  v157 = v106 + v105;
  if (__CFADD__((_QWORD)v106, v105))
    v108 = *((_QWORD *)&v106 + 1) + 1;
  else
    v108 = (__PAIR128__(v98 + v92 + ((v82 * (unsigned __int128)(unint64_t)v85) >> 64), v93)
          + v80 * (unsigned __int128)(2 * v81)) >> 64;
  *((_QWORD *)&v110 + 1) = v108;
  *(_QWORD *)&v110 = v107;
  v109 = v110 >> 51;
  v111 = 2 * (v78 & 0x7FFFFFFFFFFFFLL) + (v104 >> 51);
  v92 = __CFADD__((_QWORD)v90, v109);
  v112 = v90 + v109;
  v161 = v112;
  v163 = v111;
  if (v92)
    v113 = *((_QWORD *)&v90 + 1) + 1;
  else
    v113 = *((_QWORD *)&v90 + 1);
  *((_QWORD *)&v115 + 1) = v113;
  *(_QWORD *)&v115 = v112;
  v114 = v115 >> 51;
  v116 = v95 & 0x7FFFFFFFFFFFFLL;
  v117 = (v96 & 0x7FFFFFFFFFFFFLL) + (v95 & 0x7FFFFFFFFFFFFLL);
  v118 = (v101 & 0x7FFFFFFFFFFFFLL) + (v99 & 0x7FFFFFFFFFFFFLL);
  v119 = v118 + (v117 >> 51);
  v120 = v102 + v100;
  v121 = (v159 & 0x7FFFFFFFFFFFFLL) + (v167 & 0x7FFFFFFFFFFFFLL);
  v122 = (v101 & 0x7FFFFFFFFFFFFLL) - (v99 & 0x7FFFFFFFFFFFFLL);
  v123 = (v155 & 0x7FFFFFFFFFFFFLL) + (v160 & 0x7FFFFFFFFFFFFLL);
  v124 = (v96 & 0x7FFFFFFFFFFFFLL) - v116 + 0xFFFFFFFFFFFDALL;
  v125 = v102 + v100 + (v119 >> 51);
  v126 = v122 + 0xFFFFFFFFFFFFELL;
  v127 = v102 - v100 + 0xFFFFFFFFFFFFELL;
  v128 = (v159 & 0x7FFFFFFFFFFFFLL) - (v167 & 0x7FFFFFFFFFFFFLL) + 0xFFFFFFFFFFFFELL;
  v129 = (v155 & 0x7FFFFFFFFFFFFLL) - (v160 & 0x7FFFFFFFFFFFFLL) + 0xFFFFFFFFFFFFELL;
  v130 = v153 + v114;
  if (__CFADD__(v153, v114))
    ++v89;
  *((_QWORD *)&v132 + 1) = v89;
  *(_QWORD *)&v132 = v153 + v114;
  v131 = v132 >> 51;
  v92 = __CFADD__((_QWORD)v87, v131);
  v133 = v87 + v131;
  if (v92)
    v134 = *((_QWORD *)&v87 + 1) + 1;
  else
    v134 = *((_QWORD *)&v87 + 1);
  *((_QWORD *)&v135 + 1) = v134;
  *(_QWORD *)&v135 = v133;
  v136 = 2 * (v97 & 0x3FFFFFFFFFFFFLL) + 19 * (v111 >> 51);
  v137 = v123 + ((v121 + (v125 >> 51)) >> 51);
  v138 = (v86 & 0x7FFFFFFFFFFFFLL) + 19 * (v135 >> 51);
  v139 = (v117 & 0x7FFFFFFFFFFFFLL) + 19 * (v137 >> 51);
  v140 = v126 + (v124 >> 51);
  v141 = v127 + (v140 >> 51);
  v142 = v128 + (v141 >> 51);
  v143 = v129 + (v142 >> 51);
  v144 = (v124 & 0x7FFFFFFFFFFFFLL) + 19 * (v143 >> 51);
  *(_QWORD *)(a1 + 40) = v117;
  *(_QWORD *)(a1 + 48) = v118;
  *(_QWORD *)(a1 + 56) = v120;
  *(_QWORD *)(a1 + 64) = v121;
  *(_QWORD *)(a1 + 72) = v123;
  *(_QWORD *)(a1 + 80) = v124;
  *(_QWORD *)(a1 + 88) = v126;
  *(_QWORD *)(a1 + 96) = v127;
  v145.i64[0] = v130;
  v145.i64[1] = v133;
  v146 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL);
  *(_QWORD *)(a1 + 104) = v128;
  *(_QWORD *)(a1 + 112) = v129;
  v147.i64[0] = v121 + (v125 >> 51);
  v148 = (v157 & 0x7FFFFFFFFFFFFLL) + (v138 >> 51);
  v149 = (v119 & 0x7FFFFFFFFFFFFLL) + (v139 >> 51);
  v147.i64[1] = v137;
  *(_QWORD *)a1 = (v138 & 0x7FFFFFFFFFFFFLL) + 0xFFFFFFFFFFFDALL - (v139 & 0x7FFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 8) = (v148 & 0x7FFFFFFFFFFFFLL) - (v149 & 0x7FFFFFFFFFFFFLL) + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 16) = (v161 & 0x7FFFFFFFFFFFFLL)
                       + (v148 >> 51)
                       - ((v125 & 0x7FFFFFFFFFFFFLL)
                        + (v149 >> 51))
                       + 0xFFFFFFFFFFFFELL;
  v150 = ((v97 >> 50) & 1 | (2 * (v103 & 0x3FFFFFFFFFFFFLL))) + (v136 >> 51);
  v151 = (v140 & 0x7FFFFFFFFFFFFLL) + (v144 >> 51);
  *(_QWORD *)(a1 + 120) = (v136 & 0x7FFFFFFFFFFFFLL) - (v144 & 0x7FFFFFFFFFFFFLL) + 0xFFFFFFFFFFFDALL;
  *(_QWORD *)(a1 + 128) = (v150 & 0x7FFFFFFFFFFFFLL) - (v151 & 0x7FFFFFFFFFFFFLL) + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 136) = ((v103 >> 50) & 1)
                        - (v141 & 0x7FFFFFFFFFFFFLL)
                        + 2 * (v166 & 0x3FFFFFFFFFFFFLL)
                        - (v151 >> 51)
                        + (v150 >> 51)
                        + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 144) = (v165 & 0x7FFFFFFFFFFFFLL) - (v142 & 0x7FFFFFFFFFFFFLL) + 0xFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 152) = (v163 & 0x7FFFFFFFFFFFFLL) - (v143 & 0x7FFFFFFFFFFFFLL) + 0xFFFFFFFFFFFFELL;
  result = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v145, v146), (int64x2_t)vandq_s8(v147, v146)), vdupq_n_s64(0xFFFFFFFFFFFFEuLL));
  *(int64x2_t *)(a1 + 24) = result;
  return result;
}

unsigned __int16 *x25519_sc_reduce(unsigned __int16 *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;

  v1 = *(unsigned int *)((char *)result + 15);
  v2 = *((unsigned int *)result + 9);
  v3 = (v2 >> 24) | ((unint64_t)*((unsigned __int8 *)result + 40) << 8) | ((unint64_t)*((unsigned __int8 *)result + 41) << 16);
  v4 = ((unint64_t)(HIBYTE(*((_DWORD *)result + 11)) | (*((unsigned __int8 *)result + 48) << 8) | (*((unsigned __int8 *)result + 49) << 16)) >> 2) & 0x1FFFFF;
  v5 = ((unint64_t)*(unsigned int *)((char *)result + 49) >> 7) & 0x1FFFFF;
  v6 = ((unint64_t)*((unsigned int *)result + 13) >> 4) & 0x1FFFFF;
  v7 = ((unint64_t)(HIBYTE(*((_DWORD *)result + 13)) | (*((unsigned __int8 *)result + 56) << 8) | (*((unsigned __int8 *)result + 57) << 16)) >> 1) & 0x1FFFFF;
  v8 = ((v1 >> 6) & 0x1FFFFF) + 666643 * v4;
  v9 = (*(unsigned __int16 *)((char *)result + 21) | ((unint64_t)(*((_BYTE *)result + 23) & 0x1F) << 16))
     + 470296 * v5
     + 666643 * v6
     + 654183 * v4;
  v10 = (((v1 >> 24) | ((unint64_t)*((unsigned __int8 *)result + 19) << 8) | ((unint64_t)*((unsigned __int8 *)result + 20) << 16)) >> 3)
      + 666643 * v5
      + 470296 * v4
      + ((unint64_t)(v8 + 0x100000) >> 21);
  v11 = (((unint64_t)*(unsigned int *)((char *)result + 23) >> 5) & 0x1FFFFF)
      + 654183 * v5
      + 470296 * v6
      - 997805 * (int)v4
      + 666643 * v7
      + ((v9 + 0x100000) >> 21);
  v12 = (((unint64_t)(HIBYTE(*(_DWORD *)((char *)result + 23)) | (*((unsigned __int8 *)result + 27) << 8) | (*((unsigned __int8 *)result + 28) << 16)) >> 2) & 0x1FFFFF)
      - 997805 * (int)v5
      + 654183 * v6
      + 136657 * v4;
  v13 = (((unint64_t)*((unsigned int *)result + 7) >> 7) & 0x1FFFFF)
      + 136657 * v5
      - 997805 * (int)v6
      - 683901 * (int)v4;
  v14 = (((unint64_t)*(unsigned int *)((char *)result + 31) >> 4) & 0x1FFFFF)
      - 683901 * (int)v5
      + 136657 * v6;
  v15 = (((unint64_t)(HIBYTE(*(_DWORD *)((char *)result + 31)) | (*((unsigned __int8 *)result + 35) << 8) | (*((unsigned __int8 *)result + 36) << 16)) >> 1) & 0x1FFFFF)
      - 683901 * (int)v6;
  v16 = (unint64_t)*((unsigned int *)result + 15) >> 3;
  v17 = ((v2 >> 6) & 0x1FFFFF) - 997805 * (int)v16;
  v18 = (v3 >> 3) + 136657 * v16;
  v19 = (result[21] | ((unint64_t)(result[22] & 0x1F) << 16)) - 683901 * (int)v16;
  v20 = v14 + 470296 * v16;
  v21 = v13 + 666643 * v16;
  v22 = v15 + 654183 * v16;
  v23 = ((unint64_t)*(unsigned int *)((char *)result + 57) >> 6) & 0x1FFFFF;
  v24 = v18 - 683901 * (int)v23;
  v25 = v17 + 136657 * v23 - 683901 * (int)v7;
  v26 = v20 + 654183 * v23 - 997805 * (int)v7;
  v27 = v12 + 666643 * v23 + 470296 * v7;
  v28 = v21 + 470296 * v23;
  v29 = v22 - 997805 * (int)v23;
  v30 = v28 + 654183 * v7 + ((v27 + 0x100000) >> 21);
  v31 = v29 + 136657 * v7 + ((v26 + 0x100000) >> 21);
  v32 = v26 - ((v26 + 0x100000) & 0xFFFFFFFFFFE00000);
  v33 = v24 + ((v25 + 0x100000) >> 21);
  v34 = v25 - ((v25 + 0x100000) & 0xFFFFFFFFFFE00000);
  v35 = (((unint64_t)*((unsigned int *)result + 11) >> 5) & 0x1FFFFF) + ((uint64_t)(v19 + 0x100000) >> 21);
  v36 = v19 - ((v19 + 0x100000) & 0xFFFFFFFFFFE00000);
  v37 = v9 - ((v9 + 0x100000) & 0xFFFFFE00000) + ((v10 + 0x100000) >> 21);
  v38 = v10 - ((v10 + 0x100000) & 0x7FFFFFFFFFE00000);
  v39 = v32 + ((v30 + 0x100000) >> 21);
  v40 = v34 + ((v31 + 0x100000) >> 21);
  v41 = v31 - ((v31 + 0x100000) & 0xFFFFFFFFFFE00000);
  v42 = v36 + ((v33 + 0x100000) >> 21);
  v43 = v33 - ((v33 + 0x100000) & 0xFFFFFFFFFFE00000);
  v44 = (*result | ((unint64_t)(result[1] & 0x1F) << 16)) + 666643 * v39;
  v45 = (((unint64_t)*(unsigned int *)(result + 1) >> 5) & 0x1FFFFF)
      + 470296 * v39
      + 666643 * v41
      + ((uint64_t)(v44 + 0x100000) >> 21);
  v46 = v37 - 997805 * v35 + 136657 * v42 - 683901 * v43;
  v47 = (((unint64_t)*(unsigned int *)((char *)result + 7) >> 7) & 0x1FFFFF) - 997805 * v39 + 666643 * v43;
  v48 = (((unint64_t)(HIBYTE(*(_DWORD *)(result + 5)) | (*((unsigned __int8 *)result + 14) << 8) | (*((unsigned __int8 *)result + 15) << 16)) >> 1) & 0x1FFFFF)
      + 666643 * v35
      - 683901 * v39
      + 470296 * v42
      + 654183 * v43;
  v49 = v27 - ((v27 + 0x100000) & 0xFFFFFFFFFFE00000) - 683901 * v35 + ((uint64_t)(v11 + 0x100000) >> 21);
  v50 = v8
      - ((v8 + 0x100000) & 0x7FFFFE00000)
      + 470296 * v35
      + 654183 * v42
      - 997805 * v43
      + 136657 * v40
      - 683901 * v41;
  v51 = (((unint64_t)(HIBYTE(*(_DWORD *)(result + 1)) | (*((unsigned __int8 *)result + 6) << 8) | (*((unsigned __int8 *)result + 7) << 16)) >> 2) & 0x1FFFFF)
      + 654183 * v39
      + 666643 * v40
      + 470296 * v41;
  v52 = (((unint64_t)*(unsigned int *)(result + 5) >> 4) & 0x1FFFFF)
      + 136657 * v39
      + 666643 * v42
      + 470296 * v43
      + 654183 * v40
      - 997805 * v41;
  v53 = v38 + 654183 * v35 - 997805 * v42 + 136657 * v43 - 683901 * v40 + ((v50 + 0x100000) >> 21);
  v54 = v11 + 136657 * v35 - ((v11 + 0x100000) & 0xFFFFFFFFFFE00000) - 683901 * v42 + ((v46 + 0x100000) >> 21);
  v55 = v46 - ((v46 + 0x100000) & 0xFFFFFFFFFFE00000);
  v56 = v30 - ((v30 + 0x100000) & 0xFFFFFFFFFFE00000) + ((uint64_t)(v49 + 0x100000) >> 21);
  v57 = v49 - ((v49 + 0x100000) & 0xFFFFFFFFFFE00000);
  v58 = v45 + 0x100000;
  v59 = v57 + ((uint64_t)(v54 + 0x100000) >> 21);
  v60 = v54 - ((v54 + 0x100000) & 0xFFFFFFFFFFE00000);
  v61 = (uint64_t)(v56 + 0x100000) >> 21;
  v62 = v45 + 470296 * v61 - ((v45 + 0x100000) & 0xFFFFFFFFFFE00000);
  v63 = v47 + 470296 * v40 + 654183 * v41 + ((uint64_t)(v51 + 0x100000) >> 21);
  v64 = v51 + 654183 * v61 - ((v51 + 0x100000) & 0xFFFFFFFFFFE00000) + (v58 >> 21);
  v65 = v63 - 997805 * v61 - ((v63 + 0x100000) & 0xFFFFFFFFFFE00000);
  v66 = v48 - 997805 * v40 + 136657 * v41 + ((uint64_t)(v52 + 0x100000) >> 21);
  v67 = v52 + 136657 * v61 - ((v52 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v63 + 0x100000) >> 21);
  v68 = v44 - ((v44 + 0x100000) & 0xFFFFFFFFFFE00000) + 666643 * v61;
  v69 = v66 - 683901 * v61;
  v66 += 0x100000;
  v70 = v50 - ((v50 + 0x100000) & 0xFFFFFFFFFFE00000) + (v66 >> 21);
  v71 = v62 + (v68 >> 21);
  v72 = v64 + (v71 >> 21);
  v73 = v65 + (v72 >> 21);
  v74 = v67 + (v73 >> 21);
  v75 = v69 - (v66 & 0xFFFFFFFFFFE00000) + (v74 >> 21);
  v76 = v70 + (v75 >> 21);
  v77 = v53 - ((v53 + 0x100000) & 0xFFFFFFFFFFE00000) + (v76 >> 21);
  v78 = v55 + ((v53 + 0x100000) >> 21) + (v77 >> 21);
  v79 = v60 + (v78 >> 21);
  v80 = v59 + (v79 >> 21);
  v81 = v56 - ((v56 + 0x100000) & 0xFFFFFFFFFFE00000) + (v80 >> 21);
  v82 = (v68 & 0x1FFFFF) + 666643 * (v81 >> 21);
  *((_BYTE *)result + 1) = (unsigned __int16)(v68 + 11283 * (v81 >> 21)) >> 8;
  v83 = (v71 & 0x1FFFFF) + 470296 * (v81 >> 21) + (v82 >> 21);
  *(_BYTE *)result = v68 + 19 * (v81 >> 21);
  *((_BYTE *)result + 2) = ((unint64_t)((v68 & 0x1FFFFF) + 666643 * (v81 >> 21)) >> 16) & 0x1F | (32 * (v71 + 24 * (v81 >> 21) + (v82 >> 21)));
  *((_BYTE *)result + 3) = (unint64_t)v83 >> 3;
  *((_BYTE *)result + 4) = (unint64_t)v83 >> 11;
  v84 = (v72 & 0x1FFFFF) + 654183 * (v81 >> 21) + (v83 >> 21);
  *((_BYTE *)result + 5) = (v83 >> 19) & 3 | (4 * (v72 + 103 * (v81 >> 21) + (v83 >> 21)));
  *((_BYTE *)result + 6) = (unint64_t)v84 >> 6;
  v85 = (v73 & 0x1FFFFF) - 997805 * (v81 >> 21) + (v84 >> 21);
  *((_BYTE *)result + 7) = (v84 >> 14) & 0x7F | (((_BYTE)v73
                                                              - -83 * (v81 >> 21)
                                                              + (v84 >> 21)) << 7);
  *((_BYTE *)result + 8) = (unint64_t)v85 >> 1;
  *((_BYTE *)result + 9) = (unint64_t)v85 >> 9;
  v86 = (v74 & 0x1FFFFF) + 136657 * (v81 >> 21) + (v85 >> 21);
  *((_BYTE *)result + 10) = (v85 >> 17) & 0xF | (16 * (v74 - 47 * (v81 >> 21) + (v85 >> 21)));
  *((_BYTE *)result + 11) = (unint64_t)v86 >> 4;
  *((_BYTE *)result + 12) = (unint64_t)v86 >> 12;
  v87 = (v75 & 0x1FFFFF) - 683901 * (v81 >> 21) + (v86 >> 21);
  *((_BYTE *)result + 13) = ((v86 & 0x100000) != 0) | (2 * (v75 - 125 * (v81 >> 21) + (v86 >> 21)));
  *((_BYTE *)result + 14) = (unint64_t)v87 >> 7;
  v88 = (v76 & 0x1FFFFF) + (v87 >> 21);
  *((_BYTE *)result + 15) = (v87 >> 15) & 0x3F | (((_BYTE)v76 + (v87 >> 21)) << 6);
  *((_BYTE *)result + 16) = (unint64_t)v88 >> 2;
  *((_BYTE *)result + 17) = (unint64_t)v88 >> 10;
  v89 = (v77 & 0x1FFFFF) + (v88 >> 21);
  *((_BYTE *)result + 18) = (v88 >> 18) & 7 | (8 * (v53 + (v76 >> 21) + (v88 >> 21)));
  *((_BYTE *)result + 19) = (unint64_t)v89 >> 5;
  *((_BYTE *)result + 20) = (unint64_t)v89 >> 13;
  *((_BYTE *)result + 22) = (unsigned __int16)(v78 + (v89 >> 21)) >> 8;
  v90 = (v79 & 0x1FFFFF) + (((v78 & 0x1FFFFF) + (v89 >> 21)) >> 21);
  *((_BYTE *)result + 21) = v78 + (v89 >> 21);
  *((_BYTE *)result + 23) = ((unint64_t)((v78 & 0x1FFFFF) + (v89 >> 21)) >> 16) & 0x1F | (32 * v90);
  *((_BYTE *)result + 24) = (unint64_t)v90 >> 3;
  *((_BYTE *)result + 25) = (unint64_t)v90 >> 11;
  v91 = (v80 & 0x1FFFFF) + (v90 >> 21);
  *((_BYTE *)result + 26) = (v90 >> 19) & 3 | (4 * v91);
  *((_BYTE *)result + 27) = (unint64_t)v91 >> 6;
  v92 = (v81 & 0x1FFFFF) + (v91 >> 21);
  *((_BYTE *)result + 28) = (v91 >> 14) & 0x7F | ((_BYTE)v92 << 7);
  *((_BYTE *)result + 29) = v92 >> 1;
  *((_BYTE *)result + 30) = v92 >> 9;
  *((_BYTE *)result + 31) = v92 >> 17;
  return result;
}

__n128 ED25519_keypair_from_seed(uint64_t a1, _OWORD *a2, _OWORD *data)
{
  __int128 v6;
  __n128 result;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  _QWORD v15[3];
  char v16;
  _OWORD v17[2];
  unint64_t v18;
  SHA512_CTX c;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)c.h = xmmword_208F1E540;
  *(_OWORD *)&c.h[2] = xmmword_208F1E550;
  *(_OWORD *)&c.h[4] = xmmword_208F1E560;
  *(_OWORD *)&c.h[6] = xmmword_208F1E570;
  memset(&c.Nl, 0, 144);
  *(_QWORD *)&c.num = 0x4000000000;
  SHA512_Update(&c, data, 0x20uLL);
  sha512_final_impl(v15, c.md_len, (int8x16_t *)&c);
  LOBYTE(v15[0]) &= 0xF8u;
  v16 = v16 & 0x3F | 0x40;
  memset(&c, 0, 160);
  x25519_ge_scalarmult_base((uint64_t)&c, (unsigned __int8 *)v15);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v17[0] = *(_OWORD *)c.u.d;
  v17[1] = *(_OWORD *)&c.u.p[16];
  v18 = c.u.d[4];
  fe_loose_invert((uint64_t)v13, (unint64_t *)v17);
  fe_mul_impl((uint64_t)v11, c.h, (unint64_t *)v13);
  fe_mul_impl((uint64_t)v9, &c.h[5], (unint64_t *)v13);
  fe_tobytes((_BYTE *)a1, v9);
  fe_tobytes(v17, v11);
  *(_BYTE *)(a1 + 31) ^= LOBYTE(v17[0]) << 7;
  v6 = data[1];
  *a2 = *data;
  a2[1] = v6;
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  a2[2] = *(_OWORD *)a1;
  a2[3] = v8;
  return result;
}

uint64_t ED25519_sign(_BYTE *a1, const void *a2, size_t a3, char *data)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  int64_t v114;
  uint64_t v115;
  int64_t v116;
  int64_t v117;
  int64_t v118;
  int64_t v119;
  int64_t v120;
  int64_t v121;
  int64_t v122;
  int64_t v123;
  int64_t v124;
  int64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _OWORD v149[5];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _OWORD v155[2];
  uint64_t v156;
  _OWORD v157[2];
  uint64_t v158;
  _OWORD v159[2];
  uint64_t v160;
  _BYTE v161[32];
  uint64_t v162;
  unsigned __int16 v163;
  unsigned int v164;
  unsigned __int8 v165;
  _BYTE v166[7];
  unsigned __int8 v167;
  unsigned int v168;
  unsigned __int8 v169;
  unsigned __int8 v170;
  unsigned __int16 v171;
  unsigned int v172;
  unsigned __int8 v173;
  unsigned int v174;
  unsigned __int16 v175;
  unsigned int v176;
  unsigned __int8 v177;
  _BYTE v178[7];
  unsigned __int8 v179;
  unsigned int v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  unsigned __int16 v183;
  unsigned int v184;
  unsigned __int8 v185;
  unsigned int v186;
  uint64_t v187;
  SHA512_CTX c;
  uint64_t v189;

  v189 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)c.h = xmmword_208F1E540;
  *(_OWORD *)&c.h[2] = xmmword_208F1E550;
  *(_OWORD *)&c.h[4] = xmmword_208F1E560;
  *(_OWORD *)&c.h[6] = xmmword_208F1E570;
  memset(&c.Nl, 0, 144);
  *(_QWORD *)&c.num = 0x4000000000;
  SHA512_Update(&c, data, 0x20uLL);
  sha512_final_impl(&v175, c.md_len, (int8x16_t *)&c);
  LOBYTE(v175) = v175 & 0xF8;
  HIBYTE(v186) = HIBYTE(v186) & 0x3F | 0x40;
  *(_OWORD *)c.h = xmmword_208F1E540;
  *(_OWORD *)&c.h[2] = xmmword_208F1E550;
  *(_OWORD *)&c.h[4] = xmmword_208F1E560;
  *(_OWORD *)&c.h[6] = xmmword_208F1E570;
  memset(&c.Nl, 0, 144);
  *(_QWORD *)&c.num = 0x4000000000;
  SHA512_Update(&c, &v187, 0x20uLL);
  SHA512_Update(&c, a2, a3);
  sha512_final_impl(&v163, c.md_len, (int8x16_t *)&c);
  x25519_sc_reduce(&v163);
  v153 = 0u;
  v154 = 0u;
  v151 = 0u;
  v152 = 0u;
  v150 = 0u;
  memset(v149, 0, sizeof(v149));
  x25519_ge_scalarmult_base((uint64_t)v149, (unsigned __int8 *)&v163);
  v160 = 0;
  memset(v159, 0, sizeof(v159));
  v158 = 0;
  memset(v157, 0, sizeof(v157));
  v156 = 0;
  memset(v155, 0, sizeof(v155));
  *(_OWORD *)v161 = v150;
  *(_OWORD *)&v161[16] = v151;
  v162 = v152;
  fe_loose_invert((uint64_t)v159, (unint64_t *)v161);
  fe_mul_impl((uint64_t)v157, (unint64_t *)v149, (unint64_t *)v159);
  fe_mul_impl((uint64_t)v155, (unint64_t *)&v149[2] + 1, (unint64_t *)v159);
  fe_tobytes(a1, v155);
  fe_tobytes(v161, v157);
  a1[31] ^= v161[0] << 7;
  *(_OWORD *)c.h = xmmword_208F1E540;
  *(_OWORD *)&c.h[2] = xmmword_208F1E550;
  *(_OWORD *)&c.h[4] = xmmword_208F1E560;
  *(_OWORD *)&c.h[6] = xmmword_208F1E570;
  c.Nh = 0;
  c.Nl = 0;
  *(_QWORD *)&c.num = 0x4000000000;
  SHA512_Update(&c, a1, 0x20uLL);
  SHA512_Update(&c, data + 32, 0x20uLL);
  SHA512_Update(&c, a2, a3);
  sha512_final_impl(v161, c.md_len, (int8x16_t *)&c);
  x25519_sc_reduce((unsigned __int16 *)v161);
  v8 = *(unsigned __int16 *)v161 | ((v161[2] & 0x1F) << 16);
  v9 = *(unsigned __int16 *)&v161[21] | ((v161[23] & 0x1F) << 16);
  v10 = v175 | ((v176 & 0x1F) << 16);
  v11 = v183 | ((v184 & 0x1F) << 16);
  v12 = ((unint64_t)*(unsigned int *)&v161[2] >> 5) & 0x1FFFFF;
  v13 = ((unint64_t)(HIBYTE(*(_DWORD *)&v161[2]) | (v161[6] << 8) | (v161[7] << 16)) >> 2) & 0x1FFFFF;
  v14 = ((unint64_t)v176 >> 5) & 0x1FFFFF;
  v15 = ((unint64_t)(HIBYTE(v176) | (v177 << 8) | (v178[0] << 16)) >> 2) & 0x1FFFFF;
  v148 = v14 * v12
       + v10 * (unint64_t)v13
       + v15 * v8
       + (((unint64_t)(HIBYTE(v164) | (v165 << 8) | (v166[0] << 16)) >> 2) & 0x1FFFFF);
  v16 = ((unint64_t)*(unsigned int *)&v161[7] >> 7) & 0x1FFFFF;
  v17 = ((unint64_t)*(unsigned int *)&v161[10] >> 4) & 0x1FFFFF;
  v18 = ((unint64_t)*(unsigned int *)v178 >> 7) & 0x1FFFFF;
  v19 = ((unint64_t)*(unsigned int *)&v178[3] >> 4) & 0x1FFFFF;
  v20 = v14 * (unint64_t)v16
      + v10 * v17
      + v18 * (unint64_t)v12
      + v8 * (unint64_t)v19
      + v15 * (unint64_t)v13
      + (((unint64_t)*(unsigned int *)&v166[3] >> 4) & 0x1FFFFF);
  v21 = ((unint64_t)(HIBYTE(*(_DWORD *)&v161[10]) | (v161[14] << 8) | (v161[15] << 16)) >> 1) & 0x1FFFFF;
  v22 = ((unint64_t)*(unsigned int *)&v161[15] >> 6) & 0x1FFFFF;
  v23 = ((unint64_t)v180 >> 6) & 0x1FFFFF;
  v24 = ((unint64_t)(v178[6] | (v179 << 8) | (v180 << 16)) >> 1) & 0x1FFFFF;
  v146 = v21 * (unint64_t)v14
       + v10 * (unint64_t)v22
       + v18 * (unint64_t)v16
       + v13 * (unint64_t)v19
       + v15 * (unint64_t)v17
       + v8 * (unint64_t)v23
       + v24 * (unint64_t)v12
       + (((unint64_t)v168 >> 6) & 0x1FFFFF);
  v25 = (((unint64_t)*(unsigned int *)&v161[15] >> 24) | ((unint64_t)v161[19] << 8) | ((unint64_t)v161[20] << 16)) >> 3;
  v26 = (((unint64_t)v180 >> 24) | ((unint64_t)v181 << 8) | ((unint64_t)v182 << 16)) >> 3;
  v145 = v25 * (unint64_t)v14
       + v10 * (unint64_t)v9
       + v21 * (unint64_t)v18
       + v19 * (unint64_t)v17
       + v15 * (unint64_t)v22
       + v13 * (unint64_t)v23
       + v24 * (unint64_t)v16
       + v26 * (unint64_t)v12
       + v11 * (unint64_t)v8
       + v171
       + ((unint64_t)(v172 & 0x1F) << 16);
  v27 = ((unint64_t)*(unsigned int *)&v161[23] >> 5) & 0x1FFFFF;
  v28 = ((unint64_t)(HIBYTE(*(_DWORD *)&v161[23]) | (v161[27] << 8) | (v161[28] << 16)) >> 2) & 0x1FFFFF;
  v29 = ((unint64_t)v184 >> 5) & 0x1FFFFF;
  v30 = ((unint64_t)(HIBYTE(v184) | (v185 << 8) | (v186 << 16)) >> 2) & 0x1FFFFF;
  v144 = v14 * v27
       + v10 * v28
       + v25 * (unint64_t)v18
       + v19 * (unint64_t)v22
       + v15 * (unint64_t)v9
       + v23 * (unint64_t)v17
       + v24 * (unint64_t)v21
       + v26 * (unint64_t)v16
       + v29 * v12
       + v11 * (unint64_t)v13
       + v30 * v8
       + (((unint64_t)(HIBYTE(v172) | (v173 << 8) | (v174 << 16)) >> 2) & 0x1FFFFF);
  v31 = (v163 | ((unint64_t)(v164 & 0x1F) << 16)) + v10 * (unint64_t)v8;
  v32 = v8 * (unint64_t)v14
      + v10 * (unint64_t)v12
      + (((unint64_t)v164 >> 5) & 0x1FFFFF)
      + ((v31 + 0x100000) >> 21);
  v147 = v31 - ((v31 + 0x100000) & 0xFFFFFE00000);
  v33 = v13 * (unint64_t)v14
      + v10 * (unint64_t)v16
      + v8 * (unint64_t)v18
      + v15 * (unint64_t)v12
      + (((unint64_t)*(unsigned int *)v166 >> 7) & 0x1FFFFF);
  v142 = v14 * (unint64_t)v17
       + v10 * (unint64_t)v21
       + v13 * (unint64_t)v18
       + v19 * (unint64_t)v12
       + v15 * (unint64_t)v16
       + v24 * (unint64_t)v8
       + ((v20 + 0x100000) >> 21)
       + (((unint64_t)(v166[6] | (v167 << 8) | (v168 << 16)) >> 1) & 0x1FFFFF);
  v34 = v20 - ((v20 + 0x100000) & 0xFFFFFFFFFFE00000);
  v140 = v14 * (unint64_t)v22
       + v10 * (unint64_t)v25
       + v18 * (unint64_t)v17
       + v19 * (unint64_t)v16
       + v15 * (unint64_t)v21
       + v23 * (unint64_t)v12
       + v24 * (unint64_t)v13
       + v26 * (unint64_t)v8
       + ((((unint64_t)v168 >> 24) | ((unint64_t)v169 << 8) | ((unint64_t)v170 << 16)) >> 3);
  v139 = v9 * (unint64_t)v14
       + v10 * (unint64_t)v27
       + v18 * (unint64_t)v22
       + v21 * (unint64_t)v19
       + v15 * (unint64_t)v25
       + v23 * (unint64_t)v16
       + v24 * (unint64_t)v17
       + v26 * (unint64_t)v13
       + v8 * (unint64_t)v29
       + v11 * (unint64_t)v12
       + (((unint64_t)v172 >> 5) & 0x1FFFFF);
  v35 = (unint64_t)*(unsigned int *)&v161[28] >> 7;
  v36 = v28 * (unint64_t)v14 + v10 * (unint64_t)v35;
  v37 = (unint64_t)v186 >> 7;
  v38 = v36
      + v9 * (unint64_t)v18
      + v25 * (unint64_t)v19
      + v15 * (unint64_t)v27
      + v21 * (unint64_t)v23
      + v24 * (unint64_t)v22
      + v26 * (unint64_t)v17
      + v13 * (unint64_t)v29
      + v11 * (unint64_t)v16
      + v8 * (unint64_t)v37;
  v39 = v14 * (unint64_t)v35
      + v18 * (unint64_t)v27
      + v9 * (unint64_t)v19
      + v15 * (unint64_t)v28
      + v23 * (unint64_t)v22
      + v24 * (unint64_t)v25
      + v26 * (unint64_t)v21
      + v29 * (unint64_t)v16
      + v11 * (unint64_t)v17
      + v37 * (unint64_t)v12;
  v40 = v38 + v30 * (unint64_t)v12 + ((unint64_t)v174 >> 7);
  v41 = v39 + v30 * (unint64_t)v13;
  v42 = v18 * (unint64_t)v35
      + v28 * (unint64_t)v19
      + v9 * (unint64_t)v23
      + v24 * (unint64_t)v27
      + v26 * (unint64_t)v25
      + v21 * (unint64_t)v29
      + v11 * (unint64_t)v22
      + v37 * (unint64_t)v16;
  v43 = v28 * (unint64_t)v18
      + v19 * (unint64_t)v27
      + v15 * (unint64_t)v35
      + v25 * (unint64_t)v23
      + v24 * (unint64_t)v9
      + v26 * (unint64_t)v22
      + v29 * (unint64_t)v17
      + v11 * (unint64_t)v21
      + v13 * (unint64_t)v37
      + v30 * (unint64_t)v16;
  v44 = v26 * (unint64_t)v35
      + v29 * (unint64_t)v27
      + v11 * (unint64_t)v28
      + v25 * (unint64_t)v37
      + v30 * (unint64_t)v9;
  v45 = v28 * (unint64_t)v29
      + v11 * (unint64_t)v35
      + v9 * (unint64_t)v37
      + v30 * (unint64_t)v27
      + ((v44 + 0x100000) >> 21);
  v46 = v42 + v30 * (unint64_t)v17;
  v47 = v19 * (unint64_t)v35
      + v23 * (unint64_t)v27
      + v24 * (unint64_t)v28
      + v26 * (unint64_t)v9
      + v29 * (unint64_t)v22
      + v11 * (unint64_t)v25
      + v37 * (unint64_t)v17;
  v48 = v28 * (unint64_t)v23
      + v24 * (unint64_t)v35
      + v26 * (unint64_t)v27
      + v25 * (unint64_t)v29
      + v11 * (unint64_t)v9
      + v21 * (unint64_t)v37;
  v49 = v23 * (unint64_t)v35
      + v26 * (unint64_t)v28
      + v9 * (unint64_t)v29;
  v50 = v33 + ((v148 + 0x100000) >> 21);
  v51 = v43 + ((v41 + 0x100000) >> 21);
  v52 = v48 + v30 * (unint64_t)v22;
  v53 = v47 + v30 * (unint64_t)v21 + ((v46 + 0x100000) >> 21);
  v54 = v49
      + v11 * (unint64_t)v27
      + v37 * (unint64_t)v22
      + v30 * (unint64_t)v25
      + ((v52 + 0x100000) >> 21);
  v55 = v29 * (unint64_t)v35
      + v37 * (unint64_t)v27
      + v30 * (unint64_t)v28;
  v56 = v28 * (unint64_t)v37
      + v30 * (unint64_t)v35
      + ((v55 + 0x100000) >> 21);
  v57 = v37 * (unint64_t)v35;
  v58 = (v57 + 0x100000) >> 21;
  v59 = v32 + 0x100000;
  v141 = v32 - ((v32 + 0x100000) & 0xFFFFFFFFFFE00000);
  v143 = v34 + ((v50 + 0x100000) >> 21);
  v60 = v44 - ((v44 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v54 + 0x100000) >> 21);
  v61 = v54 - ((v54 + 0x100000) & 0xFFFFFFFFFFE00000);
  v62 = v55 - ((v55 + 0x100000) & 0x1FFFFFFE00000) + ((v45 + 0x100000) >> 21);
  v63 = v45 - ((v45 + 0x100000) & 0xFFFFFFFFFFE00000);
  v64 = v57 - ((v57 + 0x100000) & 0x7FFFFFFE00000) + ((v56 + 0x100000) >> 21);
  v65 = v56 - ((v56 + 0x100000) & 0x1FFFFFFE00000);
  v66 = v52 - 683901 * (int)v58 - ((v52 + 0x100000) & 0xFFFFFFFFFFE00000);
  v67 = v46 - 997805 * (int)v58 - ((v46 + 0x100000) & 0xFFFFFFFFFFE00000);
  v68 = v41 + 470296 * v58 - ((v41 + 0x100000) & 0xFFFFFFFFFFE00000);
  v69 = v140 + ((v146 + 0x100000) >> 21);
  v70 = v139 + ((v145 + 0x100000) >> 21);
  v71 = 666643 * v62
      + 470296 * v63
      + 654183 * v60
      + v145
      + ((v69 + 0x100000) >> 21)
      - ((v145 + 0x100000) & 0xFFFFFFFFFFE00000);
  v72 = v40 + ((v144 + 0x100000) >> 21);
  v73 = 666643 * v64
      + 470296 * v65
      + 654183 * v62
      - 997805 * v63
      + 136657 * v60
      + ((v70 + 0x100000) >> 21)
      + v144
      - ((v144 + 0x100000) & 0xFFFFFFFFFFE00000);
  v74 = 666643 * v63 + 470296 * v60 + v69 - ((v69 + 0x100000) & 0xFFFFFFFFFFE00000);
  v75 = 666643 * v65 + 470296 * v62 + 654183 * v63 - 997805 * v60 + v70 - ((v70 + 0x100000) & 0xFFFFFFFFFFE00000);
  v76 = v68 + 654183 * v64 - 997805 * v65 + 136657 * v62 - 683901 * v63 + ((v72 + 0x100000) >> 21);
  v77 = 470296 * v64
      + 666643 * v58
      + 654183 * v65
      - 997805 * v62
      + 136657 * v63
      - 683901 * v60
      + v72
      - ((v72 + 0x100000) & 0xFFFFFFFFFFE00000);
  v78 = v67 + ((v51 + 0x100000) >> 21);
  v79 = v51
      + 654183 * v58
      - ((v51 + 0x100000) & 0xFFFFFFFFFFE00000)
      - 997805 * v64
      + 136657 * v65
      - 683901 * v62
      + ((uint64_t)(v76 + 0x100000) >> 21);
  v80 = v53 + 136657 * v58;
  v53 += 0x100000;
  v81 = v66 + (v53 >> 21);
  v82 = v146 + 666643 * v60 - ((v146 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v142 + 0x100000) >> 21);
  v83 = v75 + ((uint64_t)(v71 + 0x100000) >> 21);
  v84 = v78 + 136657 * v64 - 683901 * v65;
  v85 = v77 + ((uint64_t)(v73 + 0x100000) >> 21);
  v86 = v80 - (v53 & 0xFFFFFFFFFFE00000) - 683901 * v64 + ((v84 + 0x100000) >> 21);
  v87 = v61 + ((uint64_t)(v81 + 0x100000) >> 21);
  v88 = v81 - ((v81 + 0x100000) & 0xFFFFFFFFFFE00000);
  v89 = v76 - ((v76 + 0x100000) & 0xFFFFFFFFFFE00000) + ((uint64_t)(v85 + 0x100000) >> 21);
  v90 = v85 - ((v85 + 0x100000) & 0xFFFFFFFFFFE00000);
  v91 = v84 - ((v84 + 0x100000) & 0xFFFFFFFFFFE00000) + ((uint64_t)(v79 + 0x100000) >> 21);
  v92 = v79 - ((v79 + 0x100000) & 0xFFFFFFFFFFE00000);
  v93 = v88 + ((uint64_t)(v86 + 0x100000) >> 21);
  v94 = v86 - ((v86 + 0x100000) & 0xFFFFFFFFFFE00000);
  v95 = v73 - 683901 * v87 + ((uint64_t)(v83 + 0x100000) >> 21) - ((v73 + 0x100000) & 0xFFFFFFFFFFE00000);
  v96 = v74 + ((uint64_t)(v82 + 0x100000) >> 21);
  v97 = -997805 * v87
      + 136657 * v93
      - 683901 * v94
      + v71
      + ((uint64_t)(v96 + 0x100000) >> 21)
      - ((v71 + 0x100000) & 0xFFFFFFFFFFE00000);
  v98 = v82 + 470296 * v87 - ((v82 + 0x100000) & 0xFFFFFFFFFFE00000);
  v99 = v147 + 666643 * v89;
  v100 = v141 + 470296 * v89 + 666643 * v92 + ((uint64_t)(v99 + 0x100000) >> 21);
  v101 = v98 + 654183 * v93 - 997805 * v94 + 136657 * v91 - 683901 * v92;
  v102 = 654183 * v87
       - 997805 * v93
       + 136657 * v94
       + v96
       - ((v96 + 0x100000) & 0xFFFFFFFFFFE00000)
       - 683901 * v91
       + ((v101 + 0x100000) >> 21);
  v103 = 136657 * v87
       - 683901 * v93
       + v83
       - ((v83 + 0x100000) & 0xFFFFFFFFFFE00000)
       + ((uint64_t)(v97 + 0x100000) >> 21);
  v104 = v90 + ((uint64_t)(v95 + 0x100000) >> 21);
  v105 = (uint64_t)(v104 + 0x100000) >> 21;
  v106 = v148 + (v59 >> 21) - ((v148 + 0x100000) & 0xFFFFFFFFFFE00000) + 654183 * v89 + 666643 * v91 + 470296 * v92;
  v107 = v50
       - ((v50 + 0x100000) & 0xFFFFFFFFFFE00000)
       + 666643 * v94
       - 997805 * v89
       + 470296 * v91
       + 654183 * v92
       + ((uint64_t)(v106 + 0x100000) >> 21);
  v108 = v142 + 666643 * v87 - ((v142 + 0x100000) & 0xFFFFFFFFFFE00000) + 470296 * v93;
  v109 = v143 + 666643 * v93 + 470296 * v94 + 136657 * v89;
  v110 = v108 + 654183 * v94 - 683901 * v89;
  v111 = v109 + 654183 * v91 - 997805 * v92;
  v112 = v110 - 997805 * v91 + 136657 * v92 + ((v111 + 0x100000) >> 21);
  v113 = v99 - ((v99 + 0x100000) & 0xFFFFFFFFFFE00000) + 666643 * v105;
  v114 = v100 + 470296 * v105 - ((v100 + 0x100000) & 0xFFFFFFFFFFE00000) + (v113 >> 21);
  v115 = v113 & 0x1FFFFF;
  v116 = v106 + 654183 * v105 - ((v106 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v100 + 0x100000) >> 21) + (v114 >> 21);
  v117 = v107 - 997805 * v105 - ((v107 + 0x100000) & 0xFFFFFFFFFFE00000) + (v116 >> 21);
  v118 = v111
       + 136657 * v105
       - ((v111 + 0x100000) & 0xFFFFFFFFFFE00000)
       + ((uint64_t)(v107 + 0x100000) >> 21)
       + (v117 >> 21);
  v119 = v112 - 683901 * v105 - ((v112 + 0x100000) & 0xFFFFFFFFFFE00000) + (v118 >> 21);
  v120 = v101 - ((v101 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v112 + 0x100000) >> 21) + (v119 >> 21);
  v121 = v102 - ((v102 + 0x100000) & 0xFFFFFFFFFFE00000) + (v120 >> 21);
  v122 = v97 - ((v97 + 0x100000) & 0xFFFFFFFFFFE00000) + ((uint64_t)(v102 + 0x100000) >> 21) + (v121 >> 21);
  v123 = v103 - ((v103 + 0x100000) & 0xFFFFFFFFFFE00000) + (v122 >> 21);
  v124 = v95 + ((uint64_t)(v103 + 0x100000) >> 21) - ((v95 + 0x100000) & 0xFFFFFFFFFFE00000) + (v123 >> 21);
  v125 = v104 - ((v104 + 0x100000) & 0xFFFFFFFFFFE00000) + (v124 >> 21);
  v126 = v115 + 666643 * (v125 >> 21);
  a1[33] = BYTE1(v126);
  v127 = (v114 & 0x1FFFFF) + 470296 * (v125 >> 21) + (v126 >> 21);
  a1[32] = v126;
  a1[34] = ((v115 + 666643 * (v125 >> 21)) >> 16) & 0x1F | (32
                                                                                      * (v114
                                                                                       + 24 * (v125 >> 21)
                                                                                       + (v126 >> 21)));
  a1[35] = (unint64_t)v127 >> 3;
  a1[36] = (unint64_t)v127 >> 11;
  v128 = (v116 & 0x1FFFFF) + 654183 * (v125 >> 21) + (v127 >> 21);
  a1[37] = (v127 >> 19) & 3 | (4 * (v116 + 103 * (v125 >> 21) + (v127 >> 21)));
  a1[38] = (unint64_t)v128 >> 6;
  v129 = (v117 & 0x1FFFFF) - 997805 * (v125 >> 21) + (v128 >> 21);
  a1[39] = (v128 >> 14) & 0x7F | (((_BYTE)v107
                                               - -83 * (_BYTE)v105
                                               + (v116 >> 21)
                                               - -83 * (v125 >> 21)
                                               + (v128 >> 21)) << 7);
  a1[40] = (unint64_t)v129 >> 1;
  a1[41] = (unint64_t)v129 >> 9;
  v130 = (v118 & 0x1FFFFF) + 136657 * (v125 >> 21) + (v129 >> 21);
  a1[42] = (v129 >> 17) & 0xF | (16 * (v118 - 47 * (v125 >> 21) + (v129 >> 21)));
  a1[43] = (unint64_t)v130 >> 4;
  a1[44] = (unint64_t)v130 >> 12;
  v131 = (v119 & 0x1FFFFF) - 683901 * (v125 >> 21) + (v130 >> 21);
  a1[45] = ((v130 & 0x100000) != 0) | (2 * (v119 - 125 * (v125 >> 21) + (v130 >> 21)));
  a1[46] = (unint64_t)v131 >> 7;
  v132 = (v120 & 0x1FFFFF) + (v131 >> 21);
  a1[47] = (v131 >> 15) & 0x3F | (((_BYTE)v120 + (v131 >> 21)) << 6);
  a1[48] = (unint64_t)v132 >> 2;
  a1[49] = (unint64_t)v132 >> 10;
  v133 = (v121 & 0x1FFFFF) + (v132 >> 21);
  a1[50] = (v132 >> 18) & 7 | (8 * (v121 + (v132 >> 21)));
  a1[51] = (unint64_t)v133 >> 5;
  v134 = (v122 & 0x1FFFFF) + (v133 >> 21);
  a1[52] = (unint64_t)v133 >> 13;
  a1[54] = BYTE1(v134);
  v135 = (v123 & 0x1FFFFF) + (v134 >> 21);
  a1[53] = v134;
  a1[55] = BYTE2(v134) & 0x1F | (32 * (v123 + (v134 >> 21)));
  a1[56] = (unint64_t)v135 >> 3;
  a1[57] = (unint64_t)v135 >> 11;
  v136 = (v124 & 0x1FFFFF) + (v135 >> 21);
  a1[58] = (v135 >> 19) & 3 | (4 * v136);
  a1[59] = (unint64_t)v136 >> 6;
  v137 = (v125 & 0x1FFFFF) + (v136 >> 21);
  a1[60] = (v136 >> 14) & 0x7F | ((_BYTE)v137 << 7);
  a1[61] = v137 >> 1;
  a1[62] = v137 >> 9;
  a1[63] = v137 >> 17;
  return 1;
}

