void *rtc::BasicNetworkManager::StartUpdating(rtc::BasicNetworkManager *this)
{
  void *result;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t (**v20)();
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  char v23;
  char v24;
  _QWORD v25[2];
  uint64_t (*v26)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v27)(uint64_t);
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  result = rtc::Thread::Current(this);
  *((_QWORD *)this + 42) = result;
  if (*((_DWORD *)this + 87))
  {
    if (*((_BYTE *)this + 344))
    {
      v3 = result;
      v4 = (unsigned int *)*((_QWORD *)this + 56);
      if (v4)
      {
        do
          v5 = __ldxr(v4);
        while (__stxr(v5 + 1, v4));
      }
      v6 = (_QWORD *)operator new();
      *v6 = v4;
      v6[1] = this;
      v6[3] = absl::internal_any_invocable::LocalManagerTrivial;
      v6[4] = absl::internal_any_invocable::LocalInvoker<false,void,rtc::BasicNetworkManager::StartUpdating(void)::$_1 &&>;
      v25[0] = v6;
      v26 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
      v27 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
      (*(void (**)(void *, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v25, &v24, &v23);
      result = (void *)v26(1, v25, v25);
    }
    goto LABEL_21;
  }
  v7 = operator new();
  v8 = (unsigned int *)v7;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  do
    v9 = __ldxr((unsigned int *)v7);
  while (__stxr(v9 + 1, (unsigned int *)v7));
  v10 = (unsigned int *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = v8;
  if (!v10)
  {
    v13 = *((_QWORD *)this + 42);
    do
LABEL_15:
      v14 = __ldxr(v8);
    while (__stxr(v14 + 1, v8));
    goto LABEL_16;
  }
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
    MEMORY[0x20BD0ADEC]();
  v8 = (unsigned int *)*((_QWORD *)this + 56);
  v13 = *((_QWORD *)this + 42);
  if (v8)
    goto LABEL_15;
LABEL_16:
  v15 = (_QWORD *)operator new();
  *v15 = v8;
  v15[1] = this;
  v15[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v15[4] = absl::internal_any_invocable::LocalInvoker<false,void,rtc::BasicNetworkManager::StartUpdating(void)::$_2 &&>;
  v25[0] = v15;
  v26 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v27 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v13 + 8))(v13, v25, &v24, &v23);
  v26(1, v25, v25);
  result = (void *)*((_QWORD *)this + 49);
  if (!result)
    goto LABEL_21;
  if (*((_QWORD *)this + 51))
    goto LABEL_18;
  v16 = (**(uint64_t (***)(void *, _QWORD))result)(result, *((_QWORD *)this + 45));
  result = (void *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = v16;
  if (result)
  {
    result = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
    v16 = *((_QWORD *)this + 51);
  }
  if (v16)
  {
    v25[0] = &off_24C0B78F0;
    v25[1] = this;
    v27 = (uint64_t (*)(uint64_t))v25;
    v17 = v16 + 8;
    v18 = *(_QWORD **)(v16 + 32);
    *(_QWORD *)(v16 + 32) = 0;
    if (v18 == (_QWORD *)(v16 + 8))
    {
      v19 = 4;
      v18 = (_QWORD *)(v16 + 8);
    }
    else
    {
      if (!v18)
      {
        v20 = &off_24C0B78F0;
        goto LABEL_35;
      }
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
    if (!v27)
    {
      *(_QWORD *)(v16 + 32) = 0;
      goto LABEL_18;
    }
    if ((char *)v27 != (char *)v25)
    {
      *(_QWORD *)(v16 + 32) = v27;
      v27 = 0;
LABEL_18:
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 51) + 40))(*((_QWORD *)this + 51)))
        *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 168) + 8) = (char *)this + 272;
      result = (void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 51) + 16))(*((_QWORD *)this + 51));
      goto LABEL_21;
    }
    v20 = (uint64_t (**)())v25[0];
LABEL_35:
    *(_QWORD *)(v16 + 32) = v17;
    ((void (*)(_QWORD *, uint64_t))v20[3])(v25, v17);
    v21 = v27;
    if ((char *)v27 == (char *)v25)
    {
      v22 = 4;
      v21 = (uint64_t (*)(uint64_t))v25;
    }
    else
    {
      if (!v27)
        goto LABEL_18;
      v22 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
    goto LABEL_18;
  }
LABEL_21:
  ++*((_DWORD *)this + 87);
  return result;
}

uint64_t rtc::BasicNetworkManager::StopUpdating(uint64_t this)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v1 = *(_DWORD *)(this + 348);
  if (v1)
  {
    v2 = this;
    v3 = v1 - 1;
    *(_DWORD *)(this + 348) = v3;
    if (!v3)
    {
      v4 = *(_QWORD *)(this + 448);
      *(_BYTE *)(v4 + 4) = 0;
      do
      {
        v5 = __ldaxr((unsigned int *)v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)v4));
      if (!v6)
        MEMORY[0x20BD0ADEC]();
      *(_QWORD *)(v2 + 448) = 0;
      *(_BYTE *)(v2 + 344) = 0;
      this = *(_QWORD *)(v2 + 408);
      if (this)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)this + 24))(this);
        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 408) + 40))(*(_QWORD *)(v2 + 408));
        if ((_DWORD)this)
        {
          v7 = *(_QWORD *)(*(_QWORD *)(v2 + 336) + 168);
          if (*(_QWORD *)(v7 + 8) == v2 + 272)
            *(_QWORD *)(v7 + 8) = 0;
        }
      }
    }
  }
  return this;
}

void rtc::BasicNetworkManager::QueryDefaultLocalAddress(rtc::BasicNetworkManager *this, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _BYTE v30[20];
  __int16 v31;

  v3 = a3;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a3, 2);
  if (v5)
  {
    v6 = v5;
    if (v3 == 2)
      v7 = 7;
    else
      v7 = 20;
    __p = 0;
    v27 = 0;
    v28 = 0;
    v29 = &unk_24C0ACDA0;
    if (v3 == 2)
      v8 = "8.8.8.8";
    else
      v8 = "2001:4860:4860::8888";
    memset(v30, 0, sizeof(v30));
    rtc::SocketAddress::SetIP((uint64_t)&__p, (__int128 *)v8, v7);
    v31 = 53;
    v9 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v6 + 40))(v6, &__p);
    v10 = v9;
    if (SHIBYTE(v28) < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_10:
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6);
        *(_QWORD *)this = &unk_24C0ACDA0;
        *((_DWORD *)this + 2) = *(_DWORD *)v30;
        *(_OWORD *)((char *)this + 12) = *(_OWORD *)&v30[4];
        if (SHIBYTE(v28) < 0)
          operator delete(__p);
LABEL_21:
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        return;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6) != 51
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6) != 65
      && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc");
    }
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = &unk_24C0ACDA0;
    *((_DWORD *)this + 6) = 0;
    goto LABEL_21;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    v11 = *__error();
    __p = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc";
    LODWORD(v27) = 8243;
    LODWORD(v28) = 1;
    HIDWORD(v28) = v11;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)&__p);
  }
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_24C0ACDA0;
  *((_DWORD *)this + 6) = 0;
}

void rtc::BasicNetworkManager::DumpNetworks(rtc::BasicNetworkManager *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  rtc::Network **v9;
  rtc::Network **v10;
  rtc::Network *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string __p;
  rtc::Network **v20;
  rtc::Network **v21;

  (*(void (**)(rtc::Network ***__return_ptr))(*(_QWORD *)this + 48))(&v20);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc");
  v9 = v20;
  v10 = v21;
  if (v20 != v21)
  {
    do
    {
      v11 = *v9;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        v1 = v1 & 0xFFFFFFFF00000000 | 0x21D9;
        rtc::Network::ToString(v11, &__p);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc");
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v9;
    }
    while (v9 != v10);
    v9 = v20;
  }
  if (v9)
  {
    v21 = v9;
    operator delete(v9);
  }
}

double rtc::Network::ToString@<D0>(rtc::Network *this@<X0>, std::string *a2@<X8>)
{
  size_t v5;
  void **v6;
  char *v7;
  size_t v8;
  _BYTE *v9;
  unint64_t v10;
  size_t v11;
  void **p_src;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  size_t v17;
  BOOL v18;
  void **v19;
  std::string::size_type size;
  uint64_t v21;
  size_t v22;
  std::string *v23;
  void **v24;
  unint64_t v25;
  int v26;
  std::string::size_type v27;
  std::string::size_type v28;
  unsigned __int8 v29;
  size_t v30;
  BOOL v31;
  char *p_p_new_stuff;
  std::string *v33;
  _BYTE *v34;
  std::string::size_type v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string *v38;
  char *v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string *v43;
  _BYTE *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string *v47;
  std::string::size_type v48;
  int v49;
  std::string::size_type v50;
  unsigned __int8 v51;
  size_t v52;
  BOOL v53;
  char *v54;
  std::string *v55;
  _BYTE *v56;
  std::string::size_type v57;
  int v58;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string::size_type v61;
  int v62;
  std::string::size_type v63;
  std::string *v64;
  char *v65;
  std::string::size_type v66;
  std::string::size_type v67;
  unsigned __int8 v68;
  size_t v69;
  BOOL v70;
  void **v71;
  BOOL v72;
  std::string *v73;
  _BYTE *v74;
  std::string::size_type v75;
  std::string::size_type v76;
  std::string::size_type v77;
  std::string *v78;
  char *v79;
  std::string::size_type v80;
  int v81;
  std::string::size_type v82;
  std::string::size_type v83;
  std::string *v84;
  _DWORD *v85;
  std::string::size_type v86;
  std::string *v87;
  std::string::size_type v88;
  int v89;
  std::string::size_type v90;
  std::string *v91;
  _BYTE *v92;
  std::string::size_type v93;
  double result;
  std::string::value_type *v95;
  size_t v96;
  unsigned __int8 v97;
  std::string::value_type *__p_new_stuff;
  size_t v99;
  unsigned __int8 v100;
  void **__src;
  size_t v102;
  unint64_t v103;
  std::string v104;

  memset(&v104, 0, sizeof(v104));
  if (&v104 <= (std::string *)"Net[" && (char *)v104.__r_.__value_.__r.__words + 4 > "Net[")
    goto LABEL_223;
  strcpy((char *)&v104, "Net[");
  *((_BYTE *)&v104.__r_.__value_.__s + 23) = 4;
  v5 = *((unsigned __int8 *)this + 175);
  v6 = (void **)((char *)this + 152);
  if (*((char *)this + 175) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 19);
    v8 = *((_QWORD *)this + 20);
    if (v8)
    {
LABEL_7:
      v9 = memchr(v7, 32, v8);
      v10 = v9 - v7;
      if (!v9)
        v10 = -1;
      if ((v5 & 0x80) != 0)
        goto LABEL_10;
      goto LABEL_11;
    }
  }
  else
  {
    v7 = (char *)this + 152;
    v8 = *((unsigned __int8 *)this + 175);
    if (*((_BYTE *)this + 175))
      goto LABEL_7;
  }
  v10 = -1;
  if ((v5 & 0x80) != 0)
  {
LABEL_10:
    v6 = (void **)*((_QWORD *)this + 19);
    v5 = *((_QWORD *)this + 20);
  }
LABEL_11:
  if (v5 >= v10)
    v11 = v10;
  else
    v11 = v5;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
LABEL_224:
    abort();
  if (v11 > 0x16)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_src = (void **)operator new(v13 + 1);
    v102 = v11;
    v103 = v14 | 0x8000000000000000;
    __src = p_src;
  }
  else
  {
    HIBYTE(v103) = v11;
    p_src = (void **)&__src;
  }
  v15 = (void **)((char *)p_src + v11);
  if (p_src <= v6 && v15 > v6)
    goto LABEL_223;
  if (v11)
    memmove(p_src, v6, v11);
  *(_BYTE *)v15 = 0;
  if (SHIBYTE(v103) < 0)
  {
    v17 = v102;
    if ((v102 & 0x8000000000000000) != 0)
      goto LABEL_223;
    v19 = __src;
    v18 = v102 == 0;
    if (v102)
    {
      if (!__src)
        goto LABEL_223;
    }
  }
  else
  {
    v17 = HIBYTE(v103);
    v18 = HIBYTE(v103) == 0;
    v19 = (void **)&__src;
  }
  if (v17 <= 0x12)
  {
    if (v18)
    {
      size = 0;
      LODWORD(v25) = 4;
    }
    else
    {
      if ((char *)v104.__r_.__value_.__r.__words + 4 <= (char *)v19
        && (char *)v104.__r_.__value_.__r.__words + v17 + 4 > (char *)v19)
      {
        goto LABEL_223;
      }
      memmove((char *)v104.__r_.__value_.__r.__words + 4, v19, v17);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        v104.__r_.__value_.__l.__size_ = v17 + 4;
      else
        *((_BYTE *)&v104.__r_.__value_.__s + 23) = v17 + 4;
      v104.__r_.__value_.__s.__data_[v17 + 4] = 0;
      LODWORD(v25) = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      size = v104.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    if (v17 - 0x7FFFFFFFFFFFFFF3 <= 0x800000000000001ELL)
      goto LABEL_224;
    size = v17 + 4;
    v21 = 44;
    if (v17 + 4 > 0x2C)
      v21 = v17 + 4;
    v22 = (v21 | 7) + 1;
    v23 = (std::string *)operator new(v22);
    v24 = (void **)((char *)v23->__r_.__value_.__r.__words + 4);
    if (&v104 >= v23 && (std::string *)((char *)v23->__r_.__value_.__r.__words + 4) > &v104)
      goto LABEL_223;
    LODWORD(v23->__r_.__value_.__l.__data_) = 1534354766;
    if (v24 <= v19 && (void **)((char *)v24 + v17) > v19)
      goto LABEL_223;
    memcpy(v24, v19, v17);
    v104.__r_.__value_.__l.__size_ = v17 + 4;
    v104.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v23->__r_.__value_.__s.__data_[size] = 0;
    v25 = (v22 | 0x8000000000000000) >> 56;
  }
  v26 = (char)v25;
  if ((v25 & 0x80u) == 0)
    v27 = 22;
  else
    v27 = (v104.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v25 & 0x80u) == 0)
    v28 = v25;
  else
    v28 = size;
  if (v27 == v28)
  {
    std::string::__grow_by_and_replace(&v104, v27, 1uLL, v27, v27, 0, 1uLL, ":");
    rtc::IPAddress::ToSensitiveString((rtc::Network *)((char *)this + 176), (uint64_t)&__p_new_stuff);
    v29 = v100;
    if (((char)v100 & 0x80000000) == 0)
    {
LABEL_59:
      v30 = v29;
      v31 = v29 == 0;
      p_p_new_stuff = (char *)&__p_new_stuff;
      goto LABEL_69;
    }
  }
  else
  {
    v33 = (std::string *)v104.__r_.__value_.__r.__words[0];
    if (v26 >= 0)
      v33 = &v104;
    v34 = (char *)v33 + v28;
    if ((char *)v33 + v28 <= ":" && v34 + 1 > ":")
      goto LABEL_223;
    *v34 = 58;
    v35 = v28 + 1;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    {
      v104.__r_.__value_.__l.__size_ = v35;
      v33->__r_.__value_.__s.__data_[v35] = 0;
      rtc::IPAddress::ToSensitiveString((rtc::Network *)((char *)this + 176), (uint64_t)&__p_new_stuff);
      v29 = v100;
      if (((char)v100 & 0x80000000) == 0)
        goto LABEL_59;
    }
    else
    {
      *((_BYTE *)&v104.__r_.__value_.__s + 23) = v35 & 0x7F;
      v33->__r_.__value_.__s.__data_[v35] = 0;
      rtc::IPAddress::ToSensitiveString((rtc::Network *)((char *)this + 176), (uint64_t)&__p_new_stuff);
      v29 = v100;
      if (((char)v100 & 0x80000000) == 0)
        goto LABEL_59;
    }
  }
  v30 = v99;
  if ((v99 & 0x8000000000000000) != 0)
    goto LABEL_223;
  p_p_new_stuff = __p_new_stuff;
  v31 = v99 == 0;
  if (v99)
  {
    if (!__p_new_stuff)
      goto LABEL_223;
  }
LABEL_69:
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = 22;
  else
    v36 = (v104.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
  else
    v37 = v104.__r_.__value_.__l.__size_;
  if (v36 - v37 >= v30)
  {
    if (!v31)
    {
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v104;
      else
        v38 = (std::string *)v104.__r_.__value_.__r.__words[0];
      v39 = (char *)v38 + v37;
      if ((char *)v38 + v37 <= p_p_new_stuff && &v39[v30] > p_p_new_stuff)
        goto LABEL_223;
      memmove(v39, p_p_new_stuff, v30);
      v40 = v37 + v30;
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        v104.__r_.__value_.__l.__size_ = v37 + v30;
      else
        *((_BYTE *)&v104.__r_.__value_.__s + 23) = v40 & 0x7F;
      v38->__r_.__value_.__s.__data_[v40] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v104, v36, v37 + v30 - v36, v37, v37, 0, v30, p_p_new_stuff);
  }
  v41 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = 22;
  else
    v42 = (v104.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v41 = v104.__r_.__value_.__l.__size_;
  if (v42 == v41)
  {
    std::string::__grow_by_and_replace(&v104, v42, 1uLL, v42, v42, 0, 1uLL, "/");
  }
  else
  {
    v43 = &v104;
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v43 = (std::string *)v104.__r_.__value_.__r.__words[0];
    v44 = (char *)v43 + v41;
    if ((char *)v43 + v41 <= "/" && v44 + 1 > "/")
      goto LABEL_223;
    *v44 = 47;
    v45 = v41 + 1;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      v104.__r_.__value_.__l.__size_ = v45;
    else
      *((_BYTE *)&v104.__r_.__value_.__s + 23) = v45 & 0x7F;
    v43->__r_.__value_.__s.__data_[v45] = 0;
  }
  v46 = rtc::StringBuilder::operator<<(&v104, *((_DWORD *)this + 52));
  v47 = v46;
  v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
  v49 = (char)v48;
  if ((v48 & 0x80u) == 0)
    v50 = 22;
  else
    v50 = (v46->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v48 & 0x80u) != 0)
    v48 = v46->__r_.__value_.__l.__size_;
  if (v50 == v48)
  {
    std::string::__grow_by_and_replace(v46, v50, 1uLL, v50, v50, 0, 1uLL, ":");
    rtc::AdapterTypeToString(*((unsigned int *)this + 68), (unint64_t)&v95);
    v51 = v97;
    if (((char)v97 & 0x80000000) == 0)
    {
LABEL_111:
      v52 = v51;
      v53 = v51 == 0;
      v54 = (char *)&v95;
      goto LABEL_122;
    }
  }
  else
  {
    if (v49 >= 0)
      v55 = v46;
    else
      v55 = (std::string *)v46->__r_.__value_.__r.__words[0];
    v56 = (char *)v55 + v48;
    if ((char *)v55 + v48 <= ":" && v56 + 1 > ":")
      goto LABEL_223;
    *v56 = 58;
    v57 = v48 + 1;
    if (SHIBYTE(v46->__r_.__value_.__r.__words[2]) < 0)
    {
      v46->__r_.__value_.__l.__size_ = v57;
      v55->__r_.__value_.__s.__data_[v57] = 0;
      rtc::AdapterTypeToString(*((unsigned int *)this + 68), (unint64_t)&v95);
      v51 = v97;
      if (((char)v97 & 0x80000000) == 0)
        goto LABEL_111;
    }
    else
    {
      *((_BYTE *)&v46->__r_.__value_.__s + 23) = v57 & 0x7F;
      v55->__r_.__value_.__s.__data_[v57] = 0;
      rtc::AdapterTypeToString(*((unsigned int *)this + 68), (unint64_t)&v95);
      v51 = v97;
      if (((char)v97 & 0x80000000) == 0)
        goto LABEL_111;
    }
  }
  v52 = v96;
  if ((v96 & 0x8000000000000000) != 0)
    goto LABEL_223;
  v54 = v95;
  v53 = v96 == 0;
  if (v96)
  {
    if (!v95)
      goto LABEL_223;
  }
LABEL_122:
  v58 = SHIBYTE(v47->__r_.__value_.__r.__words[2]);
  if (v58 >= 0)
    v59 = 22;
  else
    v59 = (v47->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v58 >= 0)
    v60 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
  else
    v60 = v47->__r_.__value_.__l.__size_;
  if (v59 - v60 >= v52)
  {
    if (!v53)
    {
      if (v58 >= 0)
        v64 = v47;
      else
        v64 = (std::string *)v47->__r_.__value_.__r.__words[0];
      v65 = (char *)v64 + v60;
      if ((char *)v64 + v60 <= v54 && &v65[v52] > v54)
        goto LABEL_223;
      memmove(v65, v54, v52);
      v66 = v60 + v52;
      if (SHIBYTE(v47->__r_.__value_.__r.__words[2]) < 0)
      {
        v47->__r_.__value_.__l.__size_ = v66;
        v64->__r_.__value_.__s.__data_[v66] = 0;
        if (((char)v97 & 0x80000000) == 0)
          goto LABEL_143;
LABEL_130:
        operator delete(v95);
        if ((char)v100 < 0)
          goto LABEL_131;
        goto LABEL_144;
      }
      *((_BYTE *)&v47->__r_.__value_.__s + 23) = v66 & 0x7F;
      v64->__r_.__value_.__s.__data_[v66] = 0;
    }
    if (((char)v97 & 0x80000000) == 0)
      goto LABEL_143;
    goto LABEL_130;
  }
  std::string::__grow_by_and_replace(v47, v59, v60 + v52 - v59, v60, v60, 0, v52, v54);
  if ((char)v97 < 0)
    goto LABEL_130;
LABEL_143:
  if ((char)v100 < 0)
  {
LABEL_131:
    operator delete(__p_new_stuff);
    if (SHIBYTE(v103) < 0)
      goto LABEL_132;
    goto LABEL_145;
  }
LABEL_144:
  if (SHIBYTE(v103) < 0)
  {
LABEL_132:
    operator delete(__src);
    v61 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    v62 = SHIBYTE(v104.__r_.__value_.__r.__words[2]);
    v63 = v104.__r_.__value_.__l.__size_;
    if (*((_DWORD *)this + 68) != 8)
      goto LABEL_182;
    goto LABEL_146;
  }
LABEL_145:
  v61 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
  v62 = SHIBYTE(v104.__r_.__value_.__r.__words[2]);
  v63 = v104.__r_.__value_.__l.__size_;
  if (*((_DWORD *)this + 68) != 8)
    goto LABEL_182;
LABEL_146:
  if (v62 >= 0)
    v67 = 22;
  else
    v67 = (v104.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v62 >= 0)
    v63 = v61;
  if (v67 == v63)
  {
    std::string::__grow_by_and_replace(&v104, v67, 1uLL, v67, v67, 0, 1uLL, "/");
    rtc::AdapterTypeToString(*((unsigned int *)this + 69), (unint64_t)&__src);
    v68 = HIBYTE(v103);
    if ((SHIBYTE(v103) & 0x80000000) == 0)
    {
LABEL_153:
      v69 = v68;
      v70 = v68 == 0;
      v71 = (void **)&__src;
      goto LABEL_163;
    }
  }
  else
  {
    v72 = v62 < 0;
    v73 = &v104;
    if (v72)
      v73 = (std::string *)v104.__r_.__value_.__r.__words[0];
    v74 = (char *)v73 + v63;
    if ((char *)v73 + v63 <= "/" && v74 + 1 > "/")
      goto LABEL_223;
    *v74 = 47;
    v75 = v63 + 1;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    {
      v104.__r_.__value_.__l.__size_ = v75;
      v73->__r_.__value_.__s.__data_[v75] = 0;
      rtc::AdapterTypeToString(*((unsigned int *)this + 69), (unint64_t)&__src);
      v68 = HIBYTE(v103);
      if ((SHIBYTE(v103) & 0x80000000) == 0)
        goto LABEL_153;
    }
    else
    {
      *((_BYTE *)&v104.__r_.__value_.__s + 23) = v75 & 0x7F;
      v73->__r_.__value_.__s.__data_[v75] = 0;
      rtc::AdapterTypeToString(*((unsigned int *)this + 69), (unint64_t)&__src);
      v68 = HIBYTE(v103);
      if ((SHIBYTE(v103) & 0x80000000) == 0)
        goto LABEL_153;
    }
  }
  v69 = v102;
  if ((v102 & 0x8000000000000000) != 0)
    goto LABEL_223;
  v71 = __src;
  v70 = v102 == 0;
  if (v102)
  {
    if (!__src)
      goto LABEL_223;
  }
LABEL_163:
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v76 = 22;
  else
    v76 = (v104.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
  else
    v77 = v104.__r_.__value_.__l.__size_;
  if (v76 - v77 >= v69)
  {
    if (!v70)
    {
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = &v104;
      else
        v78 = (std::string *)v104.__r_.__value_.__r.__words[0];
      v79 = (char *)v78 + v77;
      if ((char *)v78 + v77 <= (char *)v71 && &v79[v69] > (char *)v71)
        goto LABEL_223;
      memmove(v79, v71, v69);
      v80 = v77 + v69;
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      {
        v104.__r_.__value_.__l.__size_ = v77 + v69;
        v78->__r_.__value_.__s.__data_[v80] = 0;
        if ((SHIBYTE(v103) & 0x80000000) == 0)
          goto LABEL_181;
        goto LABEL_171;
      }
      *((_BYTE *)&v104.__r_.__value_.__s + 23) = v80 & 0x7F;
      v78->__r_.__value_.__s.__data_[v80] = 0;
    }
    if ((SHIBYTE(v103) & 0x80000000) == 0)
      goto LABEL_181;
    goto LABEL_171;
  }
  std::string::__grow_by_and_replace(&v104, v76, v77 + v69 - v76, v77, v77, 0, v69, (const std::string::value_type *)v71);
  if (SHIBYTE(v103) < 0)
LABEL_171:
    operator delete(__src);
LABEL_181:
  LOBYTE(v62) = *((_BYTE *)&v104.__r_.__value_.__s + 23);
  v63 = v104.__r_.__value_.__l.__size_;
LABEL_182:
  v81 = (char)v62;
  if ((v62 & 0x80u) == 0)
    v82 = 22;
  else
    v82 = (v104.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v62 & 0x80u) == 0)
    v83 = v62;
  else
    v83 = v63;
  if (v82 - v83 < 4)
  {
    std::string::__grow_by_and_replace(&v104, v82, v83 - v82 + 4, v83, v83, 0, 4uLL, ":id=");
    goto LABEL_200;
  }
  v84 = (std::string *)v104.__r_.__value_.__r.__words[0];
  if (v81 >= 0)
    v84 = &v104;
  v85 = (_DWORD *)((char *)v84 + v83);
  if ((char *)v84 + v83 <= ":id=" && v85 + 1 > (_DWORD *)":id=")
  {
LABEL_223:
    __break(1u);
    goto LABEL_224;
  }
  *v85 = 1029990714;
  v86 = v83 + 4;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    v104.__r_.__value_.__l.__size_ = v83 + 4;
  else
    *((_BYTE *)&v104.__r_.__value_.__s + 23) = v86 & 0x7F;
  v84->__r_.__value_.__s.__data_[v86] = 0;
LABEL_200:
  v87 = rtc::StringBuilder::operator<<(&v104, *((unsigned __int16 *)this + 143));
  v88 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
  v89 = (char)v88;
  if ((v88 & 0x80u) == 0)
    v90 = 22;
  else
    v90 = (v87->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v88 & 0x80u) != 0)
    v88 = v87->__r_.__value_.__l.__size_;
  if (v90 == v88)
  {
    std::string::__grow_by_and_replace(v87, v90, 1uLL, v90, v90, 0, 1uLL, "]");
    goto LABEL_216;
  }
  if (v89 >= 0)
    v91 = v87;
  else
    v91 = (std::string *)v87->__r_.__value_.__r.__words[0];
  v92 = (char *)v91 + v88;
  if ((char *)v91 + v88 <= "]" && v92 + 1 > "]")
    goto LABEL_223;
  *v92 = 93;
  v93 = v88 + 1;
  if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
    v87->__r_.__value_.__l.__size_ = v93;
  else
    *((_BYTE *)&v87->__r_.__value_.__s + 23) = v93 & 0x7F;
  v91->__r_.__value_.__s.__data_[v93] = 0;
LABEL_216:
  result = *(double *)&v104.__r_.__value_.__l.__data_;
  *a2 = v104;
  return result;
}

uint64_t rtc::BasicNetworkManager::BindSocketToNetwork(rtc::BasicNetworkManager *this, uint64_t a2, const rtc::IPAddress *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  unsigned __int8 v21;
  unint64_t v22;
  void **v23;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  __int128 v27;

  __p[0] = 0;
  __p[1] = 0;
  v26 = 0;
  if (*((_BYTE *)this + 417))
  {
    v6 = (uint64_t *)*((_QWORD *)this + 17);
    v7 = (uint64_t *)*((_QWORD *)this + 18);
    if (v6 != v7)
    {
      v8 = *((_DWORD *)a3 + 2);
      switch(v8)
      {
        case 30:
          do
          {
            v9 = *v6;
            v10 = *(_QWORD *)(*v6 + 240);
            v11 = *(_QWORD *)(*v6 + 248);
            while (v10 != v11)
            {
              v12 = *(_DWORD *)(v10 + 8);
              v27 = *(_OWORD *)(v10 + 12);
              if (v12 == 30
                && *(_QWORD *)((char *)a3 + 12) == (_QWORD)v27
                && *(_QWORD *)((char *)a3 + 20) == *((_QWORD *)&v27 + 1))
              {
                goto LABEL_30;
              }
              v10 += 32;
            }
            ++v6;
          }
          while (v6 != v7);
          break;
        case 2:
          v16 = *((_DWORD *)a3 + 3);
          do
          {
            v9 = *v6;
            v17 = *(_QWORD *)(*v6 + 240);
            v18 = *(_QWORD *)(*v6 + 248);
            while (v17 != v18)
            {
              v19 = *(_DWORD *)(v17 + 8);
              v27 = *(_OWORD *)(v17 + 12);
              if (v19 == 2 && v16 == (_DWORD)v27)
                goto LABEL_30;
              v17 += 32;
            }
            ++v6;
          }
          while (v6 != v7);
          break;
        case 0:
          while (1)
          {
            v9 = *v6;
            v14 = *(_QWORD *)(*v6 + 240);
            v15 = *(_QWORD *)(*v6 + 248);
            if (v14 != v15)
              break;
LABEL_18:
            if (++v6 == v7)
              goto LABEL_34;
          }
          while (*(_DWORD *)(v14 + 8))
          {
            v14 += 32;
            if (v14 == v15)
              goto LABEL_18;
          }
LABEL_30:
          if (v9 && __p != (void **)(v9 + 128))
          {
            if (*(char *)(v9 + 151) < 0)
            {
              std::string::__assign_no_alias<true>(__p, *(char **)(v9 + 128), *(_QWORD *)(v9 + 136));
              result = *((_QWORD *)this + 51);
              v21 = HIBYTE(v26);
              if ((SHIBYTE(v26) & 0x80000000) == 0)
                goto LABEL_35;
              goto LABEL_37;
            }
            *(_OWORD *)__p = *(_OWORD *)(v9 + 128);
            v26 = *(_QWORD *)(v9 + 144);
          }
          break;
      }
    }
  }
LABEL_34:
  result = *((_QWORD *)this + 51);
  v21 = HIBYTE(v26);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
LABEL_35:
    v22 = v21;
    v23 = __p;
    goto LABEL_40;
  }
LABEL_37:
  v22 = (unint64_t)__p[1];
  if (((unint64_t)__p[1] & 0x8000000000000000) != 0 || (v23 = (void **)__p[0], __p[1]) && !__p[0])
  {
    __break(1u);
    return result;
  }
LABEL_40:
  result = (*(uint64_t (**)(uint64_t, uint64_t, const rtc::IPAddress *, void **, unint64_t))(*(_QWORD *)result + 48))(result, a2, a3, v23, v22);
  v24 = result;
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    return v24;
  }
  return result;
}

uint64_t `non-virtual thunk to'rtc::BasicNetworkManager::BindSocketToNetwork(rtc::BasicNetworkManager *this, uint64_t a2, const rtc::IPAddress *a3)
{
  return rtc::BasicNetworkManager::BindSocketToNetwork((rtc::BasicNetworkManager *)((char *)this - 272), a2, a3);
}

uint64_t rtc::Network::Network(uint64_t a1, std::string *__src, size_t __len, char *a4, size_t a5, uint64_t a6, int a7, int a8)
{
  std::string *v16;
  std::string *v17;
  size_t v18;
  size_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 8) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 16) = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1 + 16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 16;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 64) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 72) = a1 + 72;
  *(_QWORD *)(a1 + 80) = a1 + 72;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 72;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_23;
  if (__len > 0x16)
  {
    v18 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v18 = __len | 7;
    v19 = v18 + 1;
    v16 = (std::string *)operator new(v18 + 1);
    *(_QWORD *)(a1 + 136) = __len;
    *(_QWORD *)(a1 + 144) = v19 | 0x8000000000000000;
    *(_QWORD *)(a1 + 128) = v16;
    v17 = (std::string *)((char *)v16 + __len);
    if (v16 > __src)
      goto LABEL_9;
  }
  else
  {
    v16 = (std::string *)(a1 + 128);
    *(_BYTE *)(a1 + 151) = __len;
    v17 = (std::string *)(a1 + 128 + __len);
    if (a1 + 128 > (unint64_t)__src)
      goto LABEL_9;
  }
  if (v17 > __src)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_9:
  if (__len)
    memmove(v16, __src, __len);
  v17->__r_.__value_.__s.__data_[0] = 0;
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_23:
    abort();
  if (a5 <= 0x16)
  {
    v20 = (char *)(a1 + 152);
    *(_BYTE *)(a1 + 175) = a5;
    v21 = (char *)(a1 + 152 + a5);
    if (a1 + 152 > (unint64_t)a4)
      goto LABEL_19;
    goto LABEL_18;
  }
  v22 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a5 | 7) != 0x17)
    v22 = a5 | 7;
  v23 = v22 + 1;
  v20 = (char *)operator new(v22 + 1);
  *(_QWORD *)(a1 + 160) = a5;
  *(_QWORD *)(a1 + 168) = v23 | 0x8000000000000000;
  *(_QWORD *)(a1 + 152) = v20;
  v21 = &v20[a5];
  if (v20 <= a4)
  {
LABEL_18:
    if (v21 <= a4)
      goto LABEL_19;
    goto LABEL_22;
  }
LABEL_19:
  if (a5)
    memmove(v20, a4, a5);
  *v21 = 0;
  *(_QWORD *)(a1 + 176) = &unk_24C0ACDA0;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a6 + 8);
  *(_OWORD *)(a1 + 188) = *(_OWORD *)(a6 + 12);
  *(_DWORD *)(a1 + 208) = a7;
  rtc::MakeNetworkKey((std::string *)(a1 + 216), __src, __len, (rtc::IPAddress *)a6, a7);
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 261) = 0;
  *(_DWORD *)(a1 + 272) = a8;
  *(_QWORD *)(a1 + 276) = 0;
  *(_BYTE *)(a1 + 284) = 1;
  *(_WORD *)(a1 + 286) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  return a1;
}

uint64_t rtc::Network::Network(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t i;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;

  *(_QWORD *)a1 = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 8) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  v4 = a1 + 16;
  *(_QWORD *)(a1 + 16) = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1 + 16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 16;
  *(_BYTE *)(a1 + 48) = 0;
  v5 = a2 + 16;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 != a2 + 16)
  {
    do
    {
      (*(void (**)(void))(*(_QWORD *)(v6 + 24) + 8))();
      v7 = operator new(0x30uLL);
      v8 = *(_OWORD *)(v6 + 32);
      v7[1] = *(_OWORD *)(v6 + 16);
      v7[2] = v8;
      v9 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)v7 = v9;
      *((_QWORD *)v7 + 1) = v4;
      *(_QWORD *)(v9 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v7;
      ++*(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != v5);
  }
  *(_QWORD *)(a1 + 56) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 64) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 72) = a1 + 72;
  *(_QWORD *)(a1 + 80) = a1 + 72;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 72;
  *(_BYTE *)(a1 + 104) = 0;
  for (i = *(_QWORD *)(a2 + 80); i != a2 + 72; i = *(_QWORD *)(i + 8))
  {
    (*(void (**)(void))(*(_QWORD *)(i + 24) + 8))();
    v11 = operator new(0x30uLL);
    v12 = *(_OWORD *)(i + 32);
    v11[1] = *(_OWORD *)(i + 16);
    v11[2] = v12;
    v13 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)v11 = v13;
    *((_QWORD *)v11 + 1) = a1 + 72;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 72) = v11;
    ++*(_QWORD *)(a1 + 88);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v14 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
    v16 = (std::string *)(a1 + 152);
    if ((*(char *)(a2 + 175) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    v16 = (std::string *)(a1 + 152);
    if ((*(char *)(a2 + 175) & 0x80000000) == 0)
    {
LABEL_7:
      v17 = *(_OWORD *)(a2 + 152);
      v16->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 168);
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      goto LABEL_10;
    }
  }
  std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(a2 + 152), *(_QWORD *)(a2 + 160));
LABEL_10:
  *(_QWORD *)(a1 + 176) = &unk_24C0ACDA0;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 188) = *(_OWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  v18 = (std::string *)(a1 + 216);
  if (*(char *)(a2 + 239) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)(a2 + 216), *(_QWORD *)(a2 + 224));
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    v20 = *(_QWORD *)(a2 + 240);
    v21 = *(_QWORD *)(a2 + 248);
    v22 = v21 - v20;
    if (v21 == v20)
      goto LABEL_18;
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    v20 = *(_QWORD *)(a2 + 240);
    v21 = *(_QWORD *)(a2 + 248);
    v22 = v21 - v20;
    if (v21 == v20)
      goto LABEL_18;
  }
  if (v22 < 0)
    abort();
  v23 = v22 >> 5;
  v24 = (char *)operator new(v22);
  v25 = 0;
  *(_QWORD *)(a1 + 240) = v24;
  *(_QWORD *)(a1 + 248) = v24;
  *(_QWORD *)(a1 + 256) = &v24[32 * v23];
  do
  {
    v26 = &v24[v25];
    *((_DWORD *)v26 + 2) = *(_DWORD *)(v20 + v25 + 8);
    *(_OWORD *)(v26 + 12) = *(_OWORD *)(v20 + v25 + 12);
    *(_QWORD *)v26 = &unk_24C0B5310;
    *((_DWORD *)v26 + 7) = *(_DWORD *)(v20 + v25 + 28);
    v25 += 32;
  }
  while (v20 + v25 != v21);
  *(_QWORD *)(a1 + 248) = &v24[v25];
LABEL_18:
  v27 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 276) = *(_OWORD *)(a2 + 276);
  *(_OWORD *)(a1 + 264) = v27;
  return a1;
}

void rtc::Network::~Network(rtc::Network *this)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (void (***)(_QWORD))*((_QWORD *)this + 30);
  if (v2)
  {
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 31);
    v4 = (void *)*((_QWORD *)this + 30);
    if (v3 != v2)
    {
      v5 = v3 - 4;
      v6 = v3 - 4;
      do
      {
        v7 = *v6;
        v6 -= 4;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void *)*((_QWORD *)this + 30);
    }
    *((_QWORD *)this + 31) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 239) < 0)
  {
    operator delete(*((void **)this + 27));
    if ((*((char *)this + 175) & 0x80000000) == 0)
    {
LABEL_10:
      if ((*((char *)this + 151) & 0x80000000) == 0)
        goto LABEL_11;
      goto LABEL_15;
    }
  }
  else if ((*((char *)this + 175) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(*((void **)this + 19));
  if ((*((char *)this + 151) & 0x80000000) == 0)
  {
LABEL_11:
    v9 = *((_QWORD *)this + 11);
    if (!v9)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*((void **)this + 16));
  v9 = *((_QWORD *)this + 11);
  if (!v9)
    goto LABEL_17;
  do
  {
LABEL_16:
    v10 = (uint64_t *)*((_QWORD *)this + 10);
    v11 = v10[3];
    v12 = *v10;
    *(_QWORD *)(v12 + 8) = v10[1];
    *(_QWORD *)v10[1] = v12;
    *((_QWORD *)this + 11) = v9 - 1;
    operator delete(v10);
    (*(void (**)(uint64_t, char *))(v11 + 16))(v11, (char *)this + 56);
    v9 = *((_QWORD *)this + 11);
  }
  while (v9);
LABEL_17:
  *((_QWORD *)this + 12) = (char *)this + 72;
  for (i = *((_QWORD *)this + 4); i; i = *((_QWORD *)this + 4))
  {
    v14 = (uint64_t *)*((_QWORD *)this + 3);
    v15 = v14[3];
    v16 = *v14;
    *(_QWORD *)(v16 + 8) = v14[1];
    *(_QWORD *)v14[1] = v16;
    *((_QWORD *)this + 4) = i - 1;
    operator delete(v14);
    (*(void (**)(uint64_t, rtc::Network *))(v15 + 16))(v15, this);
  }
  *((_QWORD *)this + 5) = (char *)this + 16;
}

_QWORD *rtc::Network::GetCost(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *result;
  int *p_p;
  unint64_t v8;
  _BOOL4 v9;
  int v10;
  int v11;
  int *v13;
  unint64_t v14;
  _BOOL4 v15;
  int v16;
  int v17;
  _BOOL4 v19;
  unsigned __int16 v20;
  BOOL v21;
  __int16 v22;
  BOOL v23;
  unsigned __int16 v24;
  __int16 v25;
  void *__p;
  unint64_t v28;
  unsigned __int8 v29;

  v4 = 272;
  if (*(_DWORD *)(a1 + 272) == 8)
    v4 = 276;
  v5 = *(_DWORD *)(a1 + v4);
  result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-UseDifferentiatedCellularCosts", 37);
  if ((char)v29 < 0)
  {
    v8 = v28;
    if ((v28 & 0x8000000000000000) != 0)
      goto LABEL_61;
    p_p = (int *)__p;
    if (v28)
    {
      if (!__p)
        goto LABEL_61;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v8 = v29;
  }
  if (v8 < 7)
  {
    v9 = 0;
    if ((v29 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  v10 = *p_p;
  v11 = *(int *)((char *)p_p + 3);
  v9 = v10 == 1650552389 && v11 == 1684368482;
  if ((v29 & 0x80) != 0)
LABEL_18:
    operator delete(__p);
LABEL_19:
  result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-AddNetworkCostToVpn", 26);
  if (((char)v29 & 0x80000000) == 0)
  {
    v13 = (int *)&__p;
    v14 = v29;
    goto LABEL_24;
  }
  v14 = v28;
  if ((v28 & 0x8000000000000000) != 0 || (v13 = (int *)__p, v28) && !__p)
  {
LABEL_61:
    __break(1u);
    return result;
  }
LABEL_24:
  if (v14 < 7)
  {
    v15 = 0;
    if ((v29 & 0x80) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
  v16 = *v13;
  v17 = *(int *)((char *)v13 + 3);
  v15 = v16 == 1650552389 && v17 == 1684368482;
  if ((v29 & 0x80) != 0)
LABEL_34:
    operator delete(__p);
LABEL_35:
  v19 = *(_DWORD *)(a1 + 272) == 8 && v15;
  if (v5 > 127)
  {
    switch(v5)
    {
      case 128:
        v21 = !v9;
        v22 = 910;
        break;
      case 256:
        v21 = !v9;
        v22 = 500;
        break;
      case 512:
        v21 = !v9;
        v22 = 250;
        break;
      default:
LABEL_56:
        v23 = !v19;
        v24 = 50;
LABEL_57:
        if (v23)
          return (_QWORD *)v24;
        else
          return (_QWORD *)(unsigned __int16)(v24 + 1);
    }
LABEL_52:
    if (v21)
      v25 = 900;
    else
      v25 = v22;
    return (_QWORD *)(unsigned __int16)(v25 | v19);
  }
  v20 = 50;
  switch(v5)
  {
    case 1:
    case 16:
      v20 = v19;
      break;
    case 2:
      v23 = !v19;
      v24 = 10;
      goto LABEL_57;
    case 4:
      v23 = !v19;
      v24 = 900;
      goto LABEL_57;
    case 8:
      return (_QWORD *)v20;
    case 32:
      v23 = !v19;
      v24 = 999;
      goto LABEL_57;
    case 64:
      v21 = !v9;
      v22 = 980;
      goto LABEL_52;
    default:
      goto LABEL_56;
  }
  return (_QWORD *)v20;
}

uint64_t rtc::Network::GuessAdapterFromNetworkCost(rtc::Network *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((int)this > 500)
  {
    switch((int)this)
    {
      case 900:
        result = 4;
        break;
      case 901:
        result = 0x100000004;
        break;
      case 902:
      case 903:
      case 904:
      case 905:
      case 906:
      case 907:
      case 908:
      case 909:
        goto LABEL_28;
      case 910:
        result = 128;
        break;
      case 911:
        result = 0x100000080;
        break;
      default:
        switch((int)this)
        {
          case 980:
            result = 64;
            break;
          case 981:
            result = 0x100000040;
            break;
          case 982:
          case 983:
          case 984:
          case 985:
          case 986:
          case 987:
          case 988:
          case 989:
          case 990:
          case 991:
          case 992:
          case 993:
          case 994:
          case 995:
          case 996:
          case 997:
          case 998:
            goto LABEL_28;
          case 999:
            result = 32;
            break;
          case 1000:
            result = 0x100000020;
            break;
          default:
            if ((_DWORD)this != 501)
              goto LABEL_28;
            result = 0x100000100;
            break;
        }
        break;
    }
  }
  else if ((int)this > 249)
  {
    switch((_DWORD)this)
    {
      case 0xFA:
        return 512;
      case 0xFB:
        return 0x100000200;
      case 0x1F4:
        return 256;
      default:
LABEL_28:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc");
        return 0;
    }
  }
  else
  {
    v1 = this;
    switch((int)this)
    {
      case 0:
        goto LABEL_5;
      case 1:
        v1 = 0x100000000;
LABEL_5:
        result = v1 | 1;
        break;
      case 10:
        result = 2;
        break;
      case 11:
        result = 0x100000002;
        break;
      case 50:
        return 0;
      case 51:
        result = 0x100000000;
        break;
      default:
        goto LABEL_28;
    }
  }
  return result;
}

void rtc::BasicNetworkManager::set_vpn_list(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p;
  char *v14;
  char *v15;

  v2 = *(_QWORD *)(a1 + 336);
  if (v2)
  {
    v12 = a1;
    __p = 0;
    v14 = 0;
    v15 = 0;
    v3 = *a2;
    v4 = a2[1];
    v5 = v4 - *a2;
    if (v4 != *a2)
    {
      v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
      if (v6 >= 0x666666666666667)
        abort();
      v7 = (char *)operator new(v5);
      v8 = 0;
      __p = v7;
      v15 = &v7[40 * v6];
      do
      {
        v9 = &v7[v8];
        *(_QWORD *)v9 = &unk_24C0ACDA0;
        *((_DWORD *)v9 + 2) = *(_DWORD *)(v3 + v8 + 8);
        *(_OWORD *)(v9 + 12) = *(_OWORD *)(v3 + v8 + 12);
        *((_DWORD *)v9 + 8) = *(_DWORD *)(v3 + v8 + 32);
        v8 += 40;
      }
      while (v3 + v8 != v4);
      v14 = &v7[v8];
    }
    (*(void (**)(uint64_t, uint64_t *, _DWORD *(*)(_QWORD *), char *))(*(_QWORD *)v2 + 96))(v2, &v12, rtc::FunctionView<void ()(void)>::CallVoidPtr<rtc::BasicNetworkManager::set_vpn_list(std::vector<rtc::NetworkMask> const&)::$_0>, &v11);
    if (__p)
    {
      v14 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    v10 = a1 + 424;
    if ((uint64_t *)v10 != a2)
      std::vector<rtc::NetworkMask>::__assign_with_size[abi:sn180100]<rtc::NetworkMask*,rtc::NetworkMask*>(v10, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  }
}

char *std::vector<rtc::InterfaceAddress>::__push_back_slow_path<rtc::InterfaceAddress>(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  void (**v18)(char *);
  BOOL v19;

  v2 = *a1;
  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v7 = a1[2] - v2;
  if (v7 >> 4 > v5)
    v5 = v7 >> 4;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
    v5 = 0x7FFFFFFFFFFFFFFLL;
  if (!v5)
  {
    __break(1u);
LABEL_21:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 >> 59)
    goto LABEL_21;
  v9 = 32 * v5;
  v10 = (char *)operator new(32 * v5);
  v11 = &v10[v9];
  v12 = &v10[32 * v4];
  *((_DWORD *)v12 + 2) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(v12 + 12) = *(_OWORD *)(a2 + 12);
  *(_QWORD *)v12 = &unk_24C0B5310;
  *((_DWORD *)v12 + 7) = *(_DWORD *)(a2 + 28);
  v13 = v12 + 32;
  if (v3 == v2)
  {
    *a1 = v12;
    a1[1] = v13;
    v2 = v3;
    a1[2] = v11;
    if (!v3)
      return v13;
    goto LABEL_15;
  }
  v14 = 0;
  do
  {
    v15 = &v12[v14];
    *((_DWORD *)v15 - 6) = *(_DWORD *)&v3[v14 - 24];
    *(_OWORD *)(v15 - 20) = *(_OWORD *)&v3[v14 - 20];
    *((_QWORD *)v15 - 4) = &unk_24C0B5310;
    *((_DWORD *)v15 - 1) = *(_DWORD *)&v3[v14 - 4];
    v14 -= 32;
  }
  while (&v3[v14] != v2);
  *a1 = &v12[v14];
  a1[1] = v13;
  a1[2] = v11;
  v16 = v3 - 32;
  v17 = v3 - 32;
  do
  {
    v18 = *(void (***)(char *))v17;
    v17 -= 32;
    (*v18)(v16);
    v19 = v16 == v2;
    v16 = v17;
  }
  while (!v19);
  if (v2)
LABEL_15:
    operator delete(v2);
  return v13;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<rtc::Network>>>>::destroy(char *a1)
{
  rtc::Network *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<rtc::Network>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<rtc::Network>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (rtc::Network *)*((_QWORD *)a1 + 7);
    *((_QWORD *)a1 + 7) = 0;
    if (v2)
    {
      rtc::Network::~Network(v2);
      MEMORY[0x20BD0ADEC]();
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

char *std::vector<rtc::InterfaceAddress>::__assign_with_size[abi:sn180100]<rtc::InterfaceAddress*,rtc::InterfaceAddress*>(char *result, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t (***v29)(_QWORD);
  uint64_t (***v30)(_QWORD);
  uint64_t (**v31)(_QWORD);

  v6 = a2;
  v7 = (uint64_t)result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(_QWORD *)result;
  if (__sz > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      v10 = *((_QWORD *)result + 1);
      v11 = *(void **)result;
      if (v10 != v9)
      {
        v12 = (void (***)(_QWORD))(v10 - 32);
        v13 = (void (***)(_QWORD))(v10 - 32);
        do
        {
          v14 = *v13;
          v13 -= 4;
          (*v14)(v12);
          v15 = v12 == (void (***)(_QWORD))v9;
          v12 = v13;
        }
        while (!v15);
        v11 = *(void **)v7;
      }
      *(_QWORD *)(v7 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    if (!(__sz >> 59))
    {
      v16 = v8 >> 4;
      if (v8 >> 4 <= __sz)
        v16 = __sz;
      v17 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
      v18 = 0x7FFFFFFFFFFFFFFLL;
      if (!v17)
        v18 = v16;
      if (!(v18 >> 59))
      {
        v19 = 32 * v18;
        result = (char *)operator new(32 * v18);
        *(_QWORD *)v7 = result;
        *(_QWORD *)(v7 + 8) = result;
        for (*(_QWORD *)(v7 + 16) = &result[v19]; v6 != a3; result += 32)
        {
          *((_DWORD *)result + 2) = *(_DWORD *)(v6 + 8);
          *(_OWORD *)(result + 12) = *(_OWORD *)(v6 + 12);
          *(_QWORD *)result = &unk_24C0B5310;
          *((_DWORD *)result + 7) = *(_DWORD *)(v6 + 28);
          v6 += 32;
        }
        *(_QWORD *)(v7 + 8) = result;
        return result;
      }
    }
LABEL_38:
    abort();
  }
  v20 = *((_QWORD *)result + 1);
  v21 = (v20 - v9) >> 5;
  if (v21 < __sz)
  {
    v22 = a2 + 32 * v21;
    if (v20 != v9)
    {
      v23 = (_DWORD *)(v9 + 28);
      v24 = 32 * v21;
      v25 = (_DWORD *)(a2 + 28);
      do
      {
        *v23 = *v25;
        *(v23 - 5) = *(v25 - 5);
        *((_OWORD *)v23 - 1) = *((_OWORD *)v25 - 1);
        v23 += 8;
        v25 += 8;
        v24 -= 32;
      }
      while (v24);
      v9 = *((_QWORD *)result + 1);
    }
    v26 = v9;
    if (v22 == a3)
    {
LABEL_27:
      *((_QWORD *)result + 1) = v26;
      return result;
    }
    v26 = v9;
    v27 = v9;
    while (v27)
    {
      *(_QWORD *)v27 = &unk_24C0ACDA0;
      *(_DWORD *)(v27 + 8) = *(_DWORD *)(v22 + 8);
      *(_OWORD *)(v27 + 12) = *(_OWORD *)(v22 + 12);
      *(_QWORD *)v27 = &unk_24C0B5310;
      *(_DWORD *)(v27 + 28) = *(_DWORD *)(v22 + 28);
      v22 += 32;
      v26 += 32;
      v27 += 32;
      if (v22 == a3)
        goto LABEL_27;
    }
    __break(1u);
    goto LABEL_38;
  }
  if (a2 != a3)
  {
    v28 = (_DWORD *)(v9 + 28);
    do
    {
      *v28 = *(_DWORD *)(v6 + 28);
      *(v28 - 5) = *(_DWORD *)(v6 + 8);
      *((_OWORD *)v28 - 1) = *(_OWORD *)(v6 + 12);
      v6 += 32;
      v28 += 8;
      v9 += 32;
    }
    while (v6 != a3);
    v20 = *((_QWORD *)result + 1);
  }
  if (v20 != v9)
  {
    v29 = (uint64_t (***)(_QWORD))(v20 - 32);
    v30 = (uint64_t (***)(_QWORD))(v20 - 32);
    do
    {
      v31 = *v30;
      v30 -= 4;
      result = (char *)(*v31)(v29);
      v15 = v29 == (uint64_t (***)(_QWORD))v9;
      v29 = v30;
    }
    while (!v15);
  }
  *(_QWORD *)(v7 + 8) = v9;
  return result;
}

_DWORD *std::vector<rtc::NetworkMask>::__assign_with_size[abi:sn180100]<rtc::NetworkMask*,rtc::NetworkMask*>(uint64_t a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  _DWORD *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  _DWORD *v15;
  _QWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  _DWORD *v26;
  char *v27;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(_DWORD **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v17 = *(_DWORD **)(a1 + 8);
    v16 = (_QWORD *)(a1 + 8);
    v15 = v17;
    v18 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v17 - (char *)result) >> 3);
    if (v18 >= __sz)
    {
      if (a2 == a3)
      {
        *v16 = result;
      }
      else
      {
        v26 = result + 8;
        v27 = (char *)result;
        do
        {
          *(v26 - 6) = *(_DWORD *)(v6 + 8);
          *(_OWORD *)(v26 - 5) = *(_OWORD *)(v6 + 12);
          *v26 = *(_DWORD *)(v6 + 32);
          v26 += 10;
          v6 += 40;
          v27 += 40;
        }
        while (v6 != a3);
        *v16 = v27;
      }
      return result;
    }
    v19 = a2 + 40 * v18;
    if (v15 != result)
    {
      v20 = result + 8;
      v21 = (int *)(a2 + 32);
      v22 = 40 * v18;
      do
      {
        *(v20 - 6) = *(v21 - 6);
        *(_OWORD *)(v20 - 5) = *(_OWORD *)(v21 - 5);
        v23 = *v21;
        v21 += 10;
        *v20 = v23;
        v20 += 10;
        v22 -= 40;
      }
      while (v22);
      result = (_DWORD *)*v16;
    }
    v24 = (char *)result;
    if (v19 == a3)
    {
LABEL_24:
      *v16 = v24;
      return result;
    }
    v24 = (char *)result;
    v25 = (char *)result;
    while (v25)
    {
      *(_QWORD *)v25 = &unk_24C0ACDA0;
      *((_DWORD *)v25 + 2) = *(_DWORD *)(v19 + 8);
      *(_OWORD *)(v25 + 12) = *(_OWORD *)(v19 + 12);
      *((_DWORD *)v25 + 8) = *(_DWORD *)(v19 + 32);
      v19 += 40;
      v24 += 40;
      v25 += 40;
      if (v19 == a3)
        goto LABEL_24;
    }
    __break(1u);
LABEL_31:
    abort();
  }
  if (result)
  {
    *(_QWORD *)(a1 + 8) = result;
    operator delete(result);
    v8 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if (__sz > 0x666666666666666)
    goto LABEL_31;
  v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= __sz)
    v11 = __sz;
  v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
  if (v12 > 0x666666666666666)
    goto LABEL_31;
  v13 = 10 * v12;
  result = operator new(40 * v12);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = &result[v13];
  v14 = (char *)result;
  if (v6 != a3)
  {
    v14 = (char *)result;
    do
    {
      *(_QWORD *)v14 = &unk_24C0ACDA0;
      *((_DWORD *)v14 + 2) = *(_DWORD *)(v6 + 8);
      *(_OWORD *)(v14 + 12) = *(_OWORD *)(v6 + 12);
      *((_DWORD *)v14 + 8) = *(_DWORD *)(v6 + 32);
      v6 += 40;
      v14 += 40;
    }
    while (v6 != a3);
  }
  *(_QWORD *)(a1 + 8) = v14;
  return result;
}

void std::__tree<std::__value_type<std::string,rtc::`anonymous namespace'::AddressList>,std::__map_value_compare<std::string,std::__value_type<std::string,rtc::`anonymous namespace'::AddressList>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rtc::`anonymous namespace'::AddressList>>>::destroy(char *a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  rtc::Network *v9;

  if (a1)
  {
    v2 = (void (***)(_QWORD))*((_QWORD *)a1 + 8);
    if (v2)
    {
      v3 = (void (***)(_QWORD))*((_QWORD *)a1 + 9);
      v4 = (void *)*((_QWORD *)a1 + 8);
      if (v3 != v2)
      {
        v5 = v3 - 4;
        v6 = v3 - 4;
        do
        {
          v7 = *v6;
          v6 -= 4;
          (*v7)(v5);
          v8 = v5 == v2;
          v5 = v6;
        }
        while (!v8);
        v4 = (void *)*((_QWORD *)a1 + 8);
      }
      *((_QWORD *)a1 + 9) = v2;
      operator delete(v4);
    }
    v9 = (rtc::Network *)*((_QWORD *)a1 + 7);
    *((_QWORD *)a1 + 7) = 0;
    if (v9)
    {
      rtc::Network::~Network(v9);
      MEMORY[0x20BD0ADEC]();
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<rtc::Network> const&,std::unique_ptr<rtc::Network> const&),std::unique_ptr<rtc::Network>*,false>(uint64_t result, rtc::Network **a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t (*v15)(uint64_t *, uint64_t *);
  char v16;
  int v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  char v28;
  int v29;
  uint64_t v30;
  rtc::Network **v31;
  uint64_t v32;
  uint64_t v33;
  rtc::Network *v34;
  uint64_t *v35;
  uint64_t *v36;
  char v37;
  int v38;
  uint64_t v39;
  rtc::Network **v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  rtc::Network *v60;
  rtc::Network *v61;
  rtc::Network *v62;
  rtc::Network *v63;
  rtc::Network *v64;
  BOOL v65;
  int v66;
  uint64_t *v67;
  rtc::Network **v68;
  rtc::Network *v69;
  rtc::Network *v70;
  rtc::Network *v71;
  rtc::Network *v72;
  char v73;
  uint64_t *v74;
  uint64_t v75;
  rtc::Network **v76;
  BOOL v77;
  char v78;
  uint64_t *v79;
  rtc::Network **v80;
  rtc::Network *v81;
  uint64_t *v82;
  rtc::Network *v83;
  void (***v84)(_QWORD);
  void (***v85)(_QWORD);
  void *v86;
  void (***v87)(_QWORD);
  void (***v88)(_QWORD);
  void (**v89)(_QWORD);
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t j;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  rtc::Network *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  rtc::Network **v106;
  rtc::Network *v107;
  rtc::Network **v108;
  rtc::Network *v109;
  rtc::Network *v110;
  uint64_t v111;
  uint64_t v112;
  rtc::Network *v113;
  rtc::Network *v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  rtc::Network *v122;
  rtc::Network *v123;
  rtc::Network *v124;
  unint64_t v125;
  uint64_t *v126;
  rtc::Network *v127;
  uint64_t v128;
  rtc::Network *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  rtc::Network *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (***v138)(_QWORD);
  void (***v139)(_QWORD);
  void *v140;
  void (***v141)(_QWORD);
  void (***v142)(_QWORD);
  void (**v143)(_QWORD);
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t i;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  rtc::Network *v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;
  rtc::Network *v159;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = (uint64_t *)(a2 - 1);
  v153 = (uint64_t *)(a2 - 3);
  v154 = (uint64_t *)(a2 - 2);
  v10 = (unint64_t)v8;
  while (2)
  {
    v8 = (uint64_t *)v10;
    v11 = (uint64_t)a2 - v10;
    v12 = (uint64_t)((uint64_t)a2 - v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)((uint64_t *)a2 - 1, (uint64_t *)v10);
        if ((_DWORD)result)
        {
          v53 = *(_QWORD *)v10;
          goto LABEL_122;
        }
        return result;
      case 3uLL:
        a2 = (rtc::Network **)(v10 + 8);
        v73 = (*a3)((uint64_t *)(v10 + 8), (uint64_t *)v10);
        result = (*a3)(v9, (uint64_t *)(v10 + 8));
        if ((v73 & 1) != 0)
        {
          v53 = *(_QWORD *)v10;
          if (!(_DWORD)result)
            goto LABEL_253;
LABEL_122:
          *(_QWORD *)v10 = *v9;
          goto LABEL_123;
        }
        if ((_DWORD)result)
        {
          v130 = *(_QWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 8) = *v9;
          *v9 = v130;
          goto LABEL_220;
        }
        return result;
      case 4uLL:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<rtc::Network> const&,std::unique_ptr<rtc::Network> const&),std::unique_ptr<rtc::Network>*>((uint64_t *)v10, (uint64_t *)(v10 + 8), (uint64_t *)(v10 + 16), (uint64_t *)a2 - 1, a3);
      case 5uLL:
        a2 = (rtc::Network **)(v10 + 8);
        v74 = (uint64_t *)(v10 + 24);
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<rtc::Network> const&,std::unique_ptr<rtc::Network> const&),std::unique_ptr<rtc::Network>*>((uint64_t *)v10, (uint64_t *)(v10 + 8), (uint64_t *)(v10 + 16), (uint64_t *)(v10 + 24), a3);
        result = (*a3)(v9, (uint64_t *)(v10 + 24));
        if ((_DWORD)result)
        {
          v75 = *v74;
          *v74 = *v9;
          *v9 = v75;
          result = (*a3)((uint64_t *)(v10 + 24), (uint64_t *)(v10 + 16));
          if ((_DWORD)result)
          {
            *(int8x16_t *)(v10 + 16) = vextq_s8(*(int8x16_t *)(v10 + 16), *(int8x16_t *)(v10 + 16), 8uLL);
            result = (*a3)((uint64_t *)(v10 + 16), (uint64_t *)(v10 + 8));
            if ((_DWORD)result)
            {
              *(int8x16_t *)(v10 + 8) = vextq_s8(*(int8x16_t *)(v10 + 8), *(int8x16_t *)(v10 + 8), 8uLL);
LABEL_220:
              result = (*a3)((uint64_t *)a2, (uint64_t *)v10);
              if ((_DWORD)result)
                *(int8x16_t *)v10 = vextq_s8(*(int8x16_t *)v10, *(int8x16_t *)v10, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if ((rtc::Network **)v10 == a2)
              return result;
            v53 = (v12 - 2) >> 1;
            v158 = v53;
            do
            {
              v103 = v53;
              if (v158 >= v53)
              {
                v155 = v53;
                v104 = (2 * v53) | 1;
                v9 = &v8[v104];
                v105 = 2 * v53 + 2;
                if (v105 < (uint64_t)v12 && (*a3)(&v8[v104], v9 + 1))
                {
                  ++v9;
                  v104 = v105;
                }
                v103 = v155;
                v106 = (rtc::Network **)&v8[v155];
                result = (*a3)(v9, (uint64_t *)v106);
                if ((result & 1) == 0)
                {
                  v107 = *v106;
                  *v106 = 0;
                  v159 = v107;
                  do
                  {
                    v108 = (rtc::Network **)v9;
                    v109 = (rtc::Network *)*v9;
                    *v9 = 0;
                    v110 = *v106;
                    *v106 = v109;
                    if (v110)
                    {
                      rtc::Network::~Network(v110);
                      MEMORY[0x20BD0ADEC]();
                    }
                    if (v158 < v104)
                      break;
                    v111 = (2 * v104) | 1;
                    v9 = &v8[v111];
                    v112 = 2 * v104 + 2;
                    if (v112 < (uint64_t)v12 && (*a3)(&v8[v111], v9 + 1))
                    {
                      ++v9;
                      v111 = v112;
                    }
                    v106 = v108;
                    v104 = v111;
                  }
                  while (!(*a3)(v9, (uint64_t *)&v159));
                  v113 = v159;
                  v159 = 0;
                  v114 = *v108;
                  *v108 = v113;
                  if (v114)
                  {
                    rtc::Network::~Network(v114);
                    MEMORY[0x20BD0ADEC]();
                  }
                  result = (uint64_t)v159;
                  v159 = 0;
                  v103 = v155;
                  if (result)
                  {
                    rtc::Network::~Network((rtc::Network *)result);
                    result = MEMORY[0x20BD0ADEC]();
                  }
                }
              }
              v53 = v103 - 1;
            }
            while (v103);
            v115 = (unint64_t)v11 >> 3;
            while (1)
            {
              if (v115 <= 0)
                goto LABEL_252;
              if (v115 == 1)
                return result;
              v117 = 0;
              v156 = *v8;
              *v8 = 0;
              v9 = v8;
              do
              {
                v118 = &v9[v117 + 1];
                v119 = 2 * v117;
                v117 = (2 * v117) | 1;
                v120 = v119 + 2;
                if (v119 + 2 < v115 && (*a3)(v118, v118 + 1))
                {
                  ++v118;
                  v117 = v120;
                }
                v121 = *v118;
                *v118 = 0;
                v122 = (rtc::Network *)*v9;
                *v9 = v121;
                if (v122)
                {
                  rtc::Network::~Network(v122);
                  MEMORY[0x20BD0ADEC]();
                }
                v9 = v118;
              }
              while (v117 <= (uint64_t)((unint64_t)(v115 - 2) >> 1));
              if (v118 != (uint64_t *)--a2)
                break;
              result = *v118;
              v53 = v156;
              *v118 = v156;
              if (result)
                goto LABEL_191;
LABEL_192:
              if ((unint64_t)v115-- <= 2)
                return result;
            }
            v123 = *a2;
            *a2 = 0;
            v124 = (rtc::Network *)*v118;
            *v118 = (uint64_t)v123;
            if (v124)
            {
              rtc::Network::~Network(v124);
              MEMORY[0x20BD0ADEC]();
            }
            result = (uint64_t)*a2;
            *a2 = (rtc::Network *)v156;
            if (result)
            {
              rtc::Network::~Network((rtc::Network *)result);
              result = MEMORY[0x20BD0ADEC]();
            }
            v53 = (char *)(v118 + 1) - (char *)v8;
            if (v53 < 9)
              goto LABEL_192;
            v125 = (((unint64_t)v53 >> 3) - 2) >> 1;
            v126 = &v8[v125];
            result = (*a3)(v126, v118);
            if (!(_DWORD)result)
              goto LABEL_192;
            v127 = (rtc::Network *)*v118;
            *v118 = 0;
            v159 = v127;
            do
            {
              v9 = v126;
              v128 = *v126;
              *v126 = 0;
              v129 = (rtc::Network *)*v118;
              *v118 = v128;
              if (v129)
              {
                rtc::Network::~Network(v129);
                MEMORY[0x20BD0ADEC]();
              }
              if (!v125)
                break;
              v125 = (v125 - 1) >> 1;
              v126 = &v8[v125];
              v118 = v9;
            }
            while (((*a3)(v126, (uint64_t *)&v159) & 1) != 0);
            v53 = (uint64_t)v159;
            v159 = 0;
            result = *v9;
            *v9 = v53;
            if (!result)
              goto LABEL_192;
            rtc::Network::~Network((rtc::Network *)result);
            MEMORY[0x20BD0ADEC]();
            result = (uint64_t)v159;
            v159 = 0;
            if (!result)
              goto LABEL_192;
LABEL_191:
            rtc::Network::~Network((rtc::Network *)result);
            result = MEMORY[0x20BD0ADEC]();
            goto LABEL_192;
          }
          v13 = v12 >> 1;
          v14 = (uint64_t *)(v10 + 8 * (v12 >> 1));
          v15 = *a3;
          if ((unint64_t)v11 < 0x401)
          {
            v19 = v15(v8, &v8[v12 >> 1]);
            v20 = (*a3)((uint64_t *)a2 - 1, v8);
            if ((v19 & 1) != 0)
            {
              v21 = *v14;
              if (v20)
              {
                *v14 = *v9;
              }
              else
              {
                *v14 = *v8;
                *v8 = v21;
                if (!(*a3)((uint64_t *)a2 - 1, v8))
                  goto LABEL_32;
                v21 = *v8;
                *v8 = *v9;
              }
              *v9 = v21;
            }
            else if (v20)
            {
              v24 = *v8;
              *v8 = *v9;
              *v9 = v24;
              if ((*a3)(v8, &v8[v12 >> 1]))
              {
                v25 = *v14;
                *v14 = *v8;
                *v8 = v25;
                --a4;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_56;
              }
            }
LABEL_32:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_56:
            v51 = (*a3)(v8 - 1, v8);
            v34 = (rtc::Network *)*v8;
            if ((v51 & 1) != 0)
              goto LABEL_57;
            *v8 = 0;
            v159 = v34;
            if (((*a3)((uint64_t *)&v159, (uint64_t *)a2 - 1) & 1) != 0)
            {
              v10 = (unint64_t)v8;
              while (1)
              {
                v10 += 8;
                if ((rtc::Network **)v10 == a2)
                  goto LABEL_252;
                if (((*a3)((uint64_t *)&v159, (uint64_t *)v10) & 1) != 0)
                  goto LABEL_96;
              }
            }
            v53 = (uint64_t)(v8 + 1);
            do
            {
              v10 = v53;
              if (v53 >= (unint64_t)a2)
                break;
              v66 = (*a3)((uint64_t *)&v159, (uint64_t *)v53);
              v53 = v10 + 8;
            }
            while (!v66);
LABEL_96:
            v67 = (uint64_t *)a2;
            if (v10 < (unint64_t)a2)
            {
              v67 = (uint64_t *)a2;
              while (v67 != v8)
              {
                if (((*a3)((uint64_t *)&v159, --v67) & 1) == 0)
                  goto LABEL_106;
              }
              goto LABEL_252;
            }
LABEL_106:
            if (v10 < (unint64_t)v67)
            {
              v53 = *(_QWORD *)v10;
              *(_QWORD *)v10 = *v67;
              *v67 = v53;
              while (1)
              {
                v10 += 8;
                if ((rtc::Network **)v10 == a2)
                  goto LABEL_252;
                if ((*a3)((uint64_t *)&v159, (uint64_t *)v10))
                {
                  while (v67 != v8)
                  {
                    if (((*a3)((uint64_t *)&v159, --v67) & 1) == 0)
                      goto LABEL_106;
                  }
                  goto LABEL_252;
                }
              }
            }
            v68 = (rtc::Network **)(v10 - 8);
            if ((uint64_t *)(v10 - 8) != v8)
            {
              v69 = *v68;
              *v68 = 0;
              v70 = (rtc::Network *)*v8;
              *v8 = (uint64_t)v69;
              if (v70)
              {
                rtc::Network::~Network(v70);
                MEMORY[0x20BD0ADEC]();
              }
            }
            v71 = v159;
            v159 = 0;
            v72 = *v68;
            *v68 = v71;
            if (v72)
            {
              rtc::Network::~Network(v72);
              MEMORY[0x20BD0ADEC]();
            }
            result = (uint64_t)v159;
            v159 = 0;
            if (result)
            {
              rtc::Network::~Network((rtc::Network *)result);
              result = MEMORY[0x20BD0ADEC]();
            }
            a5 = 0;
            continue;
          }
          v16 = v15(&v8[v12 >> 1], v8);
          v17 = (*a3)((uint64_t *)a2 - 1, &v8[v12 >> 1]);
          if ((v16 & 1) != 0)
          {
            v18 = *v8;
            if (v17)
            {
              *v8 = *v9;
            }
            else
            {
              *v8 = *v14;
              *v14 = v18;
              if (!(*a3)((uint64_t *)a2 - 1, &v8[v12 >> 1]))
                goto LABEL_23;
              v18 = *v14;
              *v14 = *v9;
            }
            *v9 = v18;
          }
          else if (v17)
          {
            v22 = *v14;
            *v14 = *v9;
            *v9 = v22;
            if ((*a3)(&v8[v12 >> 1], v8))
            {
              v23 = *v8;
              *v8 = *v14;
              *v14 = v23;
            }
          }
LABEL_23:
          v26 = v8 + 1;
          v27 = &v8[v13 - 1];
          v28 = (*a3)(v27, v8 + 1);
          v29 = (*a3)(v154, v27);
          if ((v28 & 1) != 0)
          {
            v30 = *v26;
            if (v29)
            {
              v31 = a2 - 2;
              *v26 = *v154;
            }
            else
            {
              *v26 = *v27;
              *v27 = v30;
              if (!(*a3)(v154, &v8[v13 - 1]))
                goto LABEL_37;
              v30 = *v27;
              v31 = a2 - 2;
              *v27 = *v154;
            }
            *v31 = (rtc::Network *)v30;
          }
          else if (v29)
          {
            v32 = *v27;
            *v27 = *v154;
            *v154 = v32;
            if ((*a3)(&v8[v13 - 1], v8 + 1))
            {
              v33 = *v26;
              *v26 = *v27;
              *v27 = v33;
            }
          }
LABEL_37:
          v35 = v8 + 2;
          v36 = &v8[v13 + 1];
          v37 = (*a3)(v36, v8 + 2);
          v38 = (*a3)(v153, v36);
          if ((v37 & 1) != 0)
          {
            v39 = *v35;
            if (v38)
            {
              v40 = a2 - 3;
              *v35 = *v153;
            }
            else
            {
              *v35 = *v36;
              *v36 = v39;
              if (!(*a3)(v153, v36))
                goto LABEL_46;
              v39 = *v36;
              v40 = a2 - 3;
              *v36 = *v153;
            }
            *v40 = (rtc::Network *)v39;
          }
          else if (v38)
          {
            v41 = *v36;
            *v36 = *v153;
            *v153 = v41;
            if ((*a3)(v36, v8 + 2))
            {
              v42 = *v35;
              *v35 = *v36;
              *v36 = v42;
            }
          }
LABEL_46:
          v43 = (*a3)(v14, v27);
          v44 = (*a3)(v36, v14);
          if ((v43 & 1) != 0)
          {
            v45 = *v27;
            if (v44)
            {
              *v27 = *v36;
              *v36 = v45;
              v46 = *v14;
              goto LABEL_55;
            }
            *v27 = *v14;
            *v14 = v45;
            v49 = (*a3)(v36, v14);
            v46 = *v14;
            if (v49)
            {
              v48 = *v36;
              *v14 = *v36;
              *v36 = v46;
              goto LABEL_54;
            }
          }
          else
          {
            v46 = *v14;
            if (v44)
            {
              *v14 = *v36;
              *v36 = v46;
              v47 = (*a3)(v14, v27);
              v46 = *v14;
              if (v47)
              {
                v48 = *v27;
                *v27 = v46;
                *v14 = v48;
LABEL_54:
                v46 = v48;
              }
            }
          }
LABEL_55:
          v50 = *v8;
          *v8 = v46;
          *v14 = v50;
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_56;
LABEL_33:
          v34 = (rtc::Network *)*v8;
LABEL_57:
          v52 = 0;
          *v8 = 0;
          v159 = v34;
          do
          {
            v53 = (uint64_t)&v8[v52];
            v54 = (uint64_t)&v8[v52 + 1];
            if ((rtc::Network **)v54 == a2)
              goto LABEL_252;
            ++v52;
          }
          while (((*a3)((uint64_t *)v54, (uint64_t *)&v159) & 1) != 0);
          v55 = &v8[v52];
          v56 = (uint64_t *)a2;
          if (v52 != 1)
          {
            while (v56 != v8)
            {
              if ((*a3)(--v56, (uint64_t *)&v159))
                goto LABEL_67;
            }
LABEL_252:
            __break(1u);
LABEL_253:
            *v8 = v8[1];
            v8[1] = v53;
            result = (*a3)(v9, (uint64_t *)a2);
            if ((_DWORD)result)
            {
              v53 = (uint64_t)*a2;
              *a2 = (rtc::Network *)*v9;
LABEL_123:
              *v9 = v53;
            }
            return result;
          }
          v56 = (uint64_t *)a2;
          do
          {
            if (v55 >= v56)
              break;
            --v56;
          }
          while (((*a3)(v56, (uint64_t *)&v159) & 1) == 0);
LABEL_67:
          if (v55 >= v56)
          {
            v59 = v55 - 1;
            if (v55 - 1 == v8)
              goto LABEL_80;
LABEL_78:
            v60 = (rtc::Network *)*v59;
            *v59 = 0;
            v61 = (rtc::Network *)*v8;
            *v8 = (uint64_t)v60;
            if (v61)
            {
              rtc::Network::~Network(v61);
              MEMORY[0x20BD0ADEC]();
            }
            goto LABEL_80;
          }
          v57 = &v8[v52];
          v58 = v56;
          do
          {
            v53 = *v57;
            *v57 = *v58;
            *v58 = v53;
            do
            {
              if (++v57 == (uint64_t *)a2)
                goto LABEL_252;
            }
            while (((*a3)(v57, (uint64_t *)&v159) & 1) != 0);
            do
            {
              if (v58 == v8)
                goto LABEL_252;
              --v58;
            }
            while (!(*a3)(v58, (uint64_t *)&v159));
          }
          while (v57 < v58);
          v59 = v57 - 1;
          if (v59 != v8)
            goto LABEL_78;
LABEL_80:
          v62 = v159;
          v159 = 0;
          v63 = (rtc::Network *)*v59;
          *v59 = (uint64_t)v62;
          if (v63)
          {
            rtc::Network::~Network(v63);
            MEMORY[0x20BD0ADEC]();
          }
          v64 = v159;
          v159 = 0;
          if (v64)
          {
            rtc::Network::~Network(v64);
            MEMORY[0x20BD0ADEC]();
          }
          if (v55 < v56)
            goto LABEL_87;
          v65 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<rtc::Network> const&,std::unique_ptr<rtc::Network> const&),std::unique_ptr<rtc::Network>*>(v8, (rtc::Network **)v59, a3);
          v10 = (unint64_t)(v59 + 1);
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<rtc::Network> const&,std::unique_ptr<rtc::Network> const&),std::unique_ptr<rtc::Network>*>(v59 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v65)
              continue;
LABEL_87:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<rtc::Network> const&,std::unique_ptr<rtc::Network> const&),std::unique_ptr<rtc::Network>*,false>(v8, v59, a3, a4, a5 & 1);
            a5 = 0;
            v10 = (unint64_t)(v59 + 1);
            continue;
          }
          a2 = (rtc::Network **)v59;
          if (v65)
            return result;
          goto LABEL_2;
        }
        v76 = (rtc::Network **)(v10 + 8);
        v77 = (rtc::Network **)v10 == a2 || v76 == a2;
        v78 = v77;
        if ((a5 & 1) == 0)
        {
          if ((v78 & 1) != 0)
            return result;
          v131 = 0;
          v132 = 1;
          while (1)
          {
            v133 = v132;
            result = (*a3)((uint64_t *)v76, &v8[v131]);
            if ((_DWORD)result)
              break;
LABEL_224:
            v132 = v133 + 1;
            v76 = (rtc::Network **)&v8[v133 + 1];
            v131 = v133;
            if (v76 == a2)
              return result;
          }
          v134 = *v76;
          *v76 = 0;
          v159 = v134;
          v53 = (uint64_t)v76;
          v9 = &v8[v131];
          v135 = *v9;
          *v9 = 0;
          *(_QWORD *)v53 = v135;
          while (1)
          {
            do
            {
              if (v131 == -1)
                goto LABEL_252;
              if (((*a3)((uint64_t *)&v159, &v8[--v131]) & 1) == 0)
              {
                v152 = v159;
                v159 = 0;
                result = *v9;
                *v9 = (uint64_t)v152;
                if (result)
                {
                  rtc::Network::~Network((rtc::Network *)result);
                  MEMORY[0x20BD0ADEC]();
                  result = (uint64_t)v159;
                  v159 = 0;
                  if (result)
                  {
                    rtc::Network::~Network((rtc::Network *)result);
                    result = MEMORY[0x20BD0ADEC]();
                  }
                }
                goto LABEL_224;
              }
              v136 = *v9;
              v53 = (uint64_t)v9;
              v9 = &v8[v131];
              v137 = *v9;
              *v9 = 0;
              *(_QWORD *)v53 = v137;
            }
            while (!v136);
            v138 = *(void (****)(_QWORD))(v136 + 240);
            if (v138)
            {
              v139 = *(void (****)(_QWORD))(v136 + 248);
              v140 = *(void **)(v136 + 240);
              if (v139 != v138)
              {
                v141 = v139 - 4;
                v142 = v139 - 4;
                do
                {
                  v143 = *v142;
                  v142 -= 4;
                  (*v143)(v141);
                  v77 = v141 == v138;
                  v141 = v142;
                }
                while (!v77);
                v140 = *(void **)(v136 + 240);
              }
              *(_QWORD *)(v136 + 248) = v138;
              operator delete(v140);
            }
            if (*(char *)(v136 + 239) < 0)
            {
              operator delete(*(void **)(v136 + 216));
              if ((*(char *)(v136 + 175) & 0x80000000) == 0)
              {
LABEL_237:
                if ((*(char *)(v136 + 151) & 0x80000000) == 0)
                  goto LABEL_238;
                goto LABEL_242;
              }
            }
            else if ((*(char *)(v136 + 175) & 0x80000000) == 0)
            {
              goto LABEL_237;
            }
            operator delete(*(void **)(v136 + 152));
            if ((*(char *)(v136 + 151) & 0x80000000) == 0)
            {
LABEL_238:
              v144 = *(_QWORD *)(v136 + 88);
              if (!v144)
                goto LABEL_244;
              goto LABEL_243;
            }
LABEL_242:
            operator delete(*(void **)(v136 + 128));
            v144 = *(_QWORD *)(v136 + 88);
            if (!v144)
              goto LABEL_244;
            do
            {
LABEL_243:
              v145 = *(uint64_t **)(v136 + 80);
              v146 = v145[3];
              v147 = *v145;
              *(_QWORD *)(v147 + 8) = v145[1];
              *(_QWORD *)v145[1] = v147;
              *(_QWORD *)(v136 + 88) = v144 - 1;
              operator delete(v145);
              (*(void (**)(uint64_t, uint64_t))(v146 + 16))(v146, v136 + 56);
              v144 = *(_QWORD *)(v136 + 88);
            }
            while (v144);
LABEL_244:
            *(_QWORD *)(v136 + 96) = v136 + 72;
            for (i = *(_QWORD *)(v136 + 32); i; i = *(_QWORD *)(v136 + 32))
            {
              v149 = *(uint64_t **)(v136 + 24);
              v150 = v149[3];
              v151 = *v149;
              *(_QWORD *)(v151 + 8) = v149[1];
              *(_QWORD *)v149[1] = v151;
              *(_QWORD *)(v136 + 32) = i - 1;
              operator delete(v149);
              (*(void (**)(uint64_t, uint64_t))(v150 + 16))(v150, v136);
            }
            *(_QWORD *)(v136 + 40) = v136 + 16;
            MEMORY[0x20BD0ADEC](v136, 0x10F2C40F3034114);
          }
        }
        if ((v78 & 1) != 0)
          return result;
        v79 = (uint64_t *)v10;
        while (2)
        {
          v80 = v76;
          result = (*a3)((uint64_t *)v76, v79);
          if (!(_DWORD)result)
            goto LABEL_138;
          v81 = *v76;
          *v76 = 0;
          v159 = v81;
          v82 = v79;
          v83 = (rtc::Network *)*v79;
          *v79 = 0;
          *v76 = v83;
          while (v82 != v8)
          {
            v98 = v82 - 1;
            if (((*a3)((uint64_t *)&v159, v82 - 1) & 1) == 0)
              goto LABEL_165;
            v99 = *v82;
            v100 = v82--;
            v101 = *v98;
            *v98 = 0;
            *v100 = v101;
            if (v99)
            {
              v84 = *(void (****)(_QWORD))(v99 + 240);
              if (v84)
              {
                v85 = *(void (****)(_QWORD))(v99 + 248);
                v86 = *(void **)(v99 + 240);
                if (v85 != v84)
                {
                  v87 = v85 - 4;
                  v88 = v85 - 4;
                  do
                  {
                    v89 = *v88;
                    v88 -= 4;
                    (*v89)(v87);
                    v77 = v87 == v84;
                    v87 = v88;
                  }
                  while (!v77);
                  v86 = *(void **)(v99 + 240);
                }
                *(_QWORD *)(v99 + 248) = v84;
                operator delete(v86);
              }
              if (*(char *)(v99 + 239) < 0)
              {
                operator delete(*(void **)(v99 + 216));
                if ((*(char *)(v99 + 175) & 0x80000000) == 0)
                {
LABEL_150:
                  if ((*(char *)(v99 + 151) & 0x80000000) == 0)
                    goto LABEL_151;
                  goto LABEL_155;
                }
              }
              else if ((*(char *)(v99 + 175) & 0x80000000) == 0)
              {
                goto LABEL_150;
              }
              operator delete(*(void **)(v99 + 152));
              if ((*(char *)(v99 + 151) & 0x80000000) == 0)
              {
LABEL_151:
                v90 = *(_QWORD *)(v99 + 88);
                if (!v90)
                  goto LABEL_157;
                goto LABEL_156;
              }
LABEL_155:
              operator delete(*(void **)(v99 + 128));
              v90 = *(_QWORD *)(v99 + 88);
              if (!v90)
                goto LABEL_157;
              do
              {
LABEL_156:
                v91 = *(uint64_t **)(v99 + 80);
                v92 = v91[3];
                v93 = *v91;
                *(_QWORD *)(v93 + 8) = v91[1];
                *(_QWORD *)v91[1] = v93;
                *(_QWORD *)(v99 + 88) = v90 - 1;
                operator delete(v91);
                (*(void (**)(uint64_t, uint64_t))(v92 + 16))(v92, v99 + 56);
                v90 = *(_QWORD *)(v99 + 88);
              }
              while (v90);
LABEL_157:
              *(_QWORD *)(v99 + 96) = v99 + 72;
              for (j = *(_QWORD *)(v99 + 32); j; j = *(_QWORD *)(v99 + 32))
              {
                v95 = *(uint64_t **)(v99 + 24);
                v96 = v95[3];
                v97 = *v95;
                *(_QWORD *)(v97 + 8) = v95[1];
                *(_QWORD *)v95[1] = v97;
                *(_QWORD *)(v99 + 32) = j - 1;
                operator delete(v95);
                (*(void (**)(uint64_t, uint64_t))(v96 + 16))(v96, v99);
              }
              *(_QWORD *)(v99 + 40) = v99 + 16;
              MEMORY[0x20BD0ADEC](v99, 0x10F2C40F3034114);
            }
          }
          v82 = v8;
LABEL_165:
          v102 = v159;
          v159 = 0;
          result = *v82;
          *v82 = (uint64_t)v102;
          if (result)
          {
            rtc::Network::~Network((rtc::Network *)result);
            MEMORY[0x20BD0ADEC]();
            result = (uint64_t)v159;
            v159 = 0;
            if (result)
            {
              rtc::Network::~Network((rtc::Network *)result);
              result = MEMORY[0x20BD0ADEC]();
            }
          }
LABEL_138:
          v76 = v80 + 1;
          v79 = (uint64_t *)v80;
          if (v80 + 1 != a2)
            continue;
          return result;
        }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<rtc::Network> const&,std::unique_ptr<rtc::Network> const&),std::unique_ptr<rtc::Network>*>(uint64_t *a1, rtc::Network **a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  rtc::Network **v23;
  uint64_t v24;
  int v25;
  rtc::Network *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  rtc::Network *v31;
  uint64_t v32;
  rtc::Network *v33;
  rtc::Network *v34;
  rtc::Network *v35;
  rtc::Network *v36;
  rtc::Network *v37;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = (uint64_t *)(a2 - 1);
      if ((*a3)((uint64_t *)a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      v10 = a1 + 1;
      v11 = (uint64_t *)(a2 - 1);
      v12 = (*a3)(a1 + 1, a1);
      v13 = (*a3)(v11, a1 + 1);
      if ((v12 & 1) != 0)
      {
        v14 = *a1;
        if (v13)
        {
          *a1 = *v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v14;
          if (!(*a3)(v11, a1 + 1))
            return 1;
          v14 = *v10;
          *v10 = *v11;
        }
        *v11 = v14;
      }
      else if (v13)
      {
        v22 = a1[1];
        a1[1] = *v11;
        *v11 = v22;
        if ((*a3)(a1 + 1, a1))
LABEL_18:
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<rtc::Network> const&,std::unique_ptr<rtc::Network> const&),std::unique_ptr<rtc::Network>*>(a1, a1 + 1, a1 + 2, (uint64_t *)a2 - 1, a3);
      return 1;
    case 5:
      v19 = a1 + 3;
      v20 = (uint64_t *)(a2 - 1);
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<rtc::Network> const&,std::unique_ptr<rtc::Network> const&),std::unique_ptr<rtc::Network>*>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!(*a3)(v20, a1 + 3))
        return 1;
      v21 = *v19;
      *v19 = *v20;
      *v20 = v21;
      if (!(*a3)(a1 + 3, a1 + 2))
        return 1;
      *((int8x16_t *)a1 + 1) = vextq_s8(*((int8x16_t *)a1 + 1), *((int8x16_t *)a1 + 1), 8uLL);
      if (!(*a3)(a1 + 2, a1 + 1))
        return 1;
      *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
      if (!(*a3)(a1 + 1, a1))
        return 1;
      goto LABEL_18;
    default:
      v15 = a1 + 2;
      v16 = (*a3)(a1 + 1, a1);
      v17 = (*a3)(a1 + 2, a1 + 1);
      if ((v16 & 1) != 0)
      {
        v18 = *a1;
        if (v17)
        {
          *a1 = a1[2];
          a1[2] = v18;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v18;
          if ((*a3)(a1 + 2, a1 + 1))
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        }
      }
      else if (v17)
      {
        *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        if ((*a3)(a1 + 1, a1))
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      v23 = (rtc::Network **)(a1 + 3);
      if (a1 + 3 == (uint64_t *)a2)
        return 1;
      v24 = 0;
      v25 = 0;
      break;
  }
  while (2)
  {
    if (!(*a3)((uint64_t *)v23, v15))
      goto LABEL_30;
    v26 = *v23;
    *v23 = 0;
    v37 = v26;
    v27 = v24 * 8;
    v28 = &a1[v24];
    v29 = a1[v24 + 2];
    v28[2] = 0;
    v28[3] = v29;
    while (1)
    {
      if (v27 == -16)
      {
        v33 = v37;
        v37 = 0;
        v34 = (rtc::Network *)*a1;
        *a1 = (uint64_t)v33;
        if (!v34)
          goto LABEL_40;
        goto LABEL_39;
      }
      v30 = (uint64_t)a1 + v27;
      if (((*a3)((uint64_t *)&v37, (uint64_t *)((char *)a1 + v27 + 8)) & 1) == 0)
        break;
      v31 = (rtc::Network *)v28[2];
      v27 -= 8;
      v28 = (uint64_t *)((char *)a1 + v27);
      v32 = *(uint64_t *)((char *)a1 + v27 + 16);
      v28[2] = 0;
      v28[3] = v32;
      if (v31)
      {
        rtc::Network::~Network(v31);
        MEMORY[0x20BD0ADEC]();
      }
    }
    v36 = v37;
    v37 = 0;
    v34 = *(rtc::Network **)(v30 + 16);
    *(_QWORD *)(v30 + 16) = v36;
    if (v34)
    {
LABEL_39:
      rtc::Network::~Network(v34);
      MEMORY[0x20BD0ADEC]();
    }
LABEL_40:
    v35 = v37;
    v37 = 0;
    if (v35)
    {
      rtc::Network::~Network(v35);
      MEMORY[0x20BD0ADEC]();
    }
    if (++v25 == 8)
      return v23 + 1 == a2;
LABEL_30:
    v15 = (uint64_t *)v23;
    ++v24;
    if (++v23 != a2)
      continue;
    return 1;
  }
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<rtc::Network> const&,std::unique_ptr<rtc::Network> const&),std::unique_ptr<rtc::Network>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = (*a5)(a2, a1);
  v11 = (*a5)(a3, a2);
  if ((v10 & 1) != 0)
  {
    v12 = *a1;
    if (v11)
    {
      *a1 = *a3;
LABEL_9:
      *a3 = v12;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v12;
    if ((*a5)(a3, a2))
    {
      v12 = *a2;
      *a2 = *a3;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if ((*a5)(a2, a1))
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
    }
  }
LABEL_10:
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v16 = *a3;
    *a3 = *a4;
    *a4 = v16;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v18 = *a1;
        *a1 = *a2;
        *a2 = v18;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(rtc::Network const*,rtc::Network const*),rtc::Network**,false>(uint64_t result, int8x16_t *a2, unsigned int (**a3)(uint64_t), uint64_t a4, char a5)
{
  int8x16_t *v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int (*v13)(uint64_t);
  char v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int8x16_t *v52;
  char *v53;
  int8x16_t *v54;
  uint64_t v55;
  uint64_t v56;
  int8x16_t *v57;
  int8x16_t *v58;
  uint64_t v59;
  int8x16_t *v60;
  uint64_t v61;
  uint64_t v62;
  int8x16_t *v63;
  BOOL v64;
  int8x16_t *v65;
  uint64_t v66;
  int8x16_t *v67;
  uint64_t v68;
  uint64_t v69;
  int8x16_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  char v75;
  int8x16_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int8x16_t *v83;
  BOOL v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  int8x16_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v122;
  uint64_t v123;

  v8 = (int8x16_t *)result;
LABEL_2:
  v9 = v8;
  while (2)
  {
    v8 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v8->i64[0]);
        if ((_DWORD)result)
        {
          v74 = v8->i64[0];
          v8->i64[0] = a2[-1].i64[1];
          goto LABEL_179;
        }
        return result;
      case 3:
        v75 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[1], v8->i64[0]);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v8->i64[1]);
        if ((v75 & 1) != 0)
        {
          v19 = v8->i64[0];
          if (!(_DWORD)result)
            goto LABEL_177;
          v8->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v19;
        }
        else if ((_DWORD)result)
        {
          v112 = v8->i64[1];
          v8->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v112;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[1], v8->i64[0]);
          goto LABEL_166;
        }
        return result;
      case 4:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(rtc::Network const*,rtc::Network const*),rtc::Network**>(v8, &v8->i64[1], (int8x16_t *)v8[1].i64, &a2[-1].i64[1], a3);
      case 5:
        v76 = v8 + 1;
        v77 = &v8[1].i64[1];
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(rtc::Network const*,rtc::Network const*),rtc::Network**>(v8, &v8->i64[1], (int8x16_t *)v8[1].i64, &v8[1].i64[1], a3);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v8[1].i64[1]);
        if ((_DWORD)result)
        {
          v78 = *v77;
          *v77 = a2[-1].i64[1];
          a2[-1].i64[1] = v78;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v77, v76->i64[0]);
          if ((_DWORD)result)
          {
            v79 = v76->i64[0];
            v76->i64[0] = *v77;
            *v77 = v79;
            result = ((uint64_t (*)(void))*a3)();
            if ((_DWORD)result)
            {
              v81 = v8->i64[1];
              v80 = v8[1].i64[0];
              v82 = v8->i64[0];
              v8->i64[1] = v80;
              v8[1].i64[0] = v81;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v80, v82);
LABEL_166:
              if ((_DWORD)result)
                *v8 = vextq_s8(*v8, *v8, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v10 > 191)
        {
          if (!a4)
          {
            if (v8 != a2)
            {
              v122 = (unint64_t)(v11 - 2) >> 1;
              v93 = v122;
              do
              {
                if (v122 >= v93)
                {
                  v95 = (2 * v93) | 1;
                  v96 = &v8->i64[v95];
                  if (2 * v93 + 2 < v11 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v96, v96[1]))
                  {
                    ++v96;
                    v95 = 2 * v93 + 2;
                  }
                  v97 = &v8->i64[v93];
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v96, *v97);
                  if ((result & 1) == 0)
                  {
                    v118 = v93;
                    v120 = *v97;
                    do
                    {
                      v98 = v96;
                      *v97 = *v96;
                      if (v122 < v95)
                        break;
                      v99 = (2 * v95) | 1;
                      v96 = &v8->i64[v99];
                      v100 = 2 * v95 + 2;
                      if (v100 < v11 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v96, v96[1]))
                      {
                        ++v96;
                        v99 = v100;
                      }
                      result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v96, v120);
                      v97 = v98;
                      v95 = v99;
                    }
                    while (!(_DWORD)result);
                    v93 = v118;
                    *v98 = v120;
                  }
                }
                v94 = v93-- <= 0;
              }
              while (!v94);
              v101 = (unint64_t)v10 >> 3;
              do
              {
                v102 = 0;
                v123 = v8->i64[0];
                v103 = (uint64_t *)v8;
                do
                {
                  v104 = (int8x16_t *)&v103[v102 + 1];
                  v105 = (2 * v102) | 1;
                  v106 = 2 * v102 + 2;
                  if (v106 < v101)
                  {
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v103[v102 + 1], v103[v102 + 2]);
                    if ((_DWORD)result)
                    {
                      v104 = (int8x16_t *)((char *)v104 + 8);
                      v105 = v106;
                    }
                  }
                  *v103 = v104->i64[0];
                  v103 = (uint64_t *)v104;
                  v102 = v105;
                }
                while (v105 <= (uint64_t)((unint64_t)(v101 - 2) >> 1));
                a2 = (int8x16_t *)((char *)a2 - 8);
                if (v104 == a2)
                {
                  v104->i64[0] = v123;
                }
                else
                {
                  v104->i64[0] = a2->i64[0];
                  a2->i64[0] = v123;
                  v107 = (char *)v104 - (char *)v8 + 8;
                  if (v107 >= 9)
                  {
                    v108 = (((unint64_t)v107 >> 3) - 2) >> 1;
                    v109 = &v8->i64[v108];
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v109, v104->i64[0]);
                    if ((_DWORD)result)
                    {
                      v110 = v104->i64[0];
                      do
                      {
                        v111 = v109;
                        v104->i64[0] = *v109;
                        if (!v108)
                          break;
                        v108 = (v108 - 1) >> 1;
                        v109 = &v8->i64[v108];
                        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v109, v110);
                        v104 = (int8x16_t *)v111;
                      }
                      while ((result & 1) != 0);
                      *v111 = v110;
                    }
                  }
                }
                v94 = v101-- <= 2;
              }
              while (!v94);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = *a3;
          if ((unint64_t)v10 >= 0x401)
          {
            v14 = ((uint64_t (*)(uint64_t, uint64_t))v13)(v8->i64[v12], v8->i64[0]);
            v15 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v8->i64[v12]);
            v119 = a4;
            if ((v14 & 1) != 0)
            {
              v16 = v8->i64[0];
              if (v15)
              {
                v8->i64[0] = a2[-1].i64[1];
                a2[-1].i64[1] = v16;
              }
              else
              {
                v8->i64[0] = v8->i64[v12];
                v8->i64[v12] = v16;
                if ((*a3)(a2[-1].i64[1]))
                {
                  v25 = v8->i64[v12];
                  v8->i64[v12] = a2[-1].i64[1];
                  a2[-1].i64[1] = v25;
                }
              }
            }
            else if (v15)
            {
              v21 = v8->i64[v12];
              v8->i64[v12] = a2[-1].i64[1];
              a2[-1].i64[1] = v21;
              if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v8->i64[v12], v8->i64[0]))
              {
                v22 = v8->i64[0];
                v8->i64[0] = v8->i64[v12];
                v8->i64[v12] = v22;
              }
            }
            v26 = v12 - 1;
            v27 = v12 - 1;
            v28 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[v27], v8->i64[1]);
            v29 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[0], v8->i64[v27]);
            if ((v28 & 1) != 0)
            {
              v30 = v8->i64[1];
              if (v29)
              {
                v8->i64[1] = a2[-1].i64[0];
                a2[-1].i64[0] = v30;
              }
              else
              {
                v8->i64[1] = v8->i64[v27];
                v8->i64[v27] = v30;
                if ((*a3)(a2[-1].i64[0]))
                {
                  v34 = v8->i64[v27];
                  v8->i64[v27] = a2[-1].i64[0];
                  a2[-1].i64[0] = v34;
                }
              }
            }
            else if (v29)
            {
              v31 = v8->i64[v27];
              v8->i64[v27] = a2[-1].i64[0];
              a2[-1].i64[0] = v31;
              if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v8->i64[v27], v8->i64[1]))
              {
                v32 = v8->i64[1];
                v8->i64[1] = v8->i64[v27];
                v8->i64[v27] = v32;
              }
            }
            v35 = v12 + 1;
            v36 = v12 + 1;
            v37 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[v36], v8[1].i64[0]);
            v38 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-2].i64[1], v8->i64[v36]);
            if ((v37 & 1) != 0)
            {
              v39 = v8[1].i64[0];
              if (v38)
              {
                v8[1].i64[0] = a2[-2].i64[1];
                a2[-2].i64[1] = v39;
              }
              else
              {
                v8[1].i64[0] = v8->i64[v36];
                v8->i64[v36] = v39;
                if ((*a3)(a2[-2].i64[1]))
                {
                  v42 = v8->i64[v36];
                  v8->i64[v36] = a2[-2].i64[1];
                  a2[-2].i64[1] = v42;
                }
              }
            }
            else if (v38)
            {
              v40 = v8->i64[v36];
              v8->i64[v36] = a2[-2].i64[1];
              a2[-2].i64[1] = v40;
              if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v8->i64[v36], v8[1].i64[0]))
              {
                v41 = v8[1].i64[0];
                v8[1].i64[0] = v8->i64[v36];
                v8->i64[v36] = v41;
              }
            }
            v43 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[v12], v8->i64[v26]);
            v44 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[v35], v8->i64[v12]);
            if ((v43 & 1) != 0)
            {
              v19 = v8->i64[v26];
              if (v44)
              {
                v8->i64[v26] = v8->i64[v36];
                v8->i64[v36] = v19;
                v45 = v8->i64[v12];
                goto LABEL_52;
              }
              v8->i64[v26] = v8->i64[v12];
              v8->i64[v12] = v19;
              v48 = (*a3)(v8->i64[v35]);
              v45 = v8->i64[v12];
              if (v48)
              {
                v47 = v8->i64[v36];
                v8->i64[v12] = v47;
                v8->i64[v36] = v45;
                goto LABEL_51;
              }
            }
            else
            {
              v45 = v8->i64[v12];
              if (v44)
              {
                v8->i64[v12] = v8->i64[v36];
                v8->i64[v36] = v45;
                v46 = ((uint64_t (*)(void))*a3)();
                v45 = v8->i64[v12];
                if (v46)
                {
                  v47 = v8->i64[v27];
                  v8->i64[v27] = v45;
                  v8->i64[v12] = v47;
LABEL_51:
                  v45 = v47;
                }
              }
            }
LABEL_52:
            v49 = v8->i64[0];
            v8->i64[0] = v45;
            v8->i64[v12] = v49;
            a4 = v119 - 1;
            v20 = v8->i64[0];
            if ((a5 & 1) != 0)
              goto LABEL_54;
            goto LABEL_53;
          }
          v17 = ((uint64_t (*)(uint64_t, uint64_t))v13)(v8->i64[0], v8->i64[v12]);
          v18 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v8->i64[0]);
          if ((v17 & 1) != 0)
          {
            v19 = v8->i64[v12];
            if (v18)
            {
              v8->i64[v12] = a2[-1].i64[1];
              a2[-1].i64[1] = v19;
              --a4;
              v20 = v8->i64[0];
              if ((a5 & 1) != 0)
                goto LABEL_54;
              goto LABEL_53;
            }
            v8->i64[v12] = v8->i64[0];
            v8->i64[0] = v19;
            if ((*a3)(a2[-1].i64[1]))
            {
              v33 = v8->i64[0];
              v8->i64[0] = a2[-1].i64[1];
              a2[-1].i64[1] = v33;
            }
          }
          else if (v18)
          {
            v23 = v8->i64[0];
            v8->i64[0] = a2[-1].i64[1];
            a2[-1].i64[1] = v23;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v8->i64[0], v8->i64[v12]))
            {
              v24 = v8->i64[v12];
              v8->i64[v12] = v8->i64[0];
              v8->i64[0] = v24;
              --a4;
              v20 = v24;
              if ((a5 & 1) != 0)
                goto LABEL_54;
              goto LABEL_53;
            }
          }
          --a4;
          v20 = v8->i64[0];
          if ((a5 & 1) != 0)
            goto LABEL_54;
LABEL_53:
          v50 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[-1].i64[1], v20);
          v20 = v8->i64[0];
          if ((v50 & 1) == 0)
          {
            result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8->i64[0], a2[-1].i64[1]);
            v65 = (int8x16_t *)&v8->u64[1];
            if ((result & 1) != 0)
            {
              do
              {
                if (v65 == a2)
                  goto LABEL_176;
                v66 = v65->i64[0];
                v65 = (int8x16_t *)((char *)v65 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v20, v66);
              }
              while ((result & 1) == 0);
              v9 = (int8x16_t *)((char *)v65 - 8);
            }
            else
            {
              do
              {
                v9 = v65;
                if (v65 >= a2)
                  break;
                v65 = (int8x16_t *)((char *)v65 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v20, v9->i64[0]);
              }
              while ((result & 1) == 0);
            }
            v67 = a2;
            if (v9 < a2)
            {
              v67 = a2;
              while (v67 != v8)
              {
                v68 = v67[-1].i64[1];
                v67 = (int8x16_t *)((char *)v67 - 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v20, v68);
                if ((result & 1) == 0)
                  goto LABEL_98;
              }
              goto LABEL_176;
            }
LABEL_98:
            if (v9 < v67)
            {
              v69 = v9->i64[0];
              v9->i64[0] = v67->i64[0];
              v70 = (int8x16_t *)&v9->u64[1];
              v67->i64[0] = v69;
              while (v70 != a2)
              {
                v71 = v70->i64[0];
                v70 = (int8x16_t *)((char *)v70 + 8);
                if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v20, v71))
                {
                  v9 = (int8x16_t *)((char *)v70 - 8);
                  while (v67 != v8)
                  {
                    v72 = v67[-1].i64[1];
                    v67 = (int8x16_t *)((char *)v67 - 8);
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v20, v72);
                    if ((result & 1) == 0)
                      goto LABEL_98;
                  }
                  goto LABEL_176;
                }
              }
              goto LABEL_176;
            }
            v73 = &v9[-1].i64[1];
            if (&v9[-1].u64[1] != (unint64_t *)v8)
              v8->i64[0] = *v73;
            a5 = 0;
            *v73 = v20;
            continue;
          }
LABEL_54:
          v51 = 0;
          do
          {
            v52 = (int8x16_t *)&v8->u64[v51 + 1];
            if (v52 == a2)
              goto LABEL_176;
            ++v51;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v52->i64[0], v20) & 1) != 0);
          v53 = &v8->i8[v51 * 8];
          v54 = a2;
          if (v51 != 1)
          {
            while (v54 != v8)
            {
              v55 = v54[-1].i64[1];
              v54 = (int8x16_t *)((char *)v54 - 8);
              if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v55, v20))
                goto LABEL_64;
            }
            goto LABEL_176;
          }
          v54 = a2;
          do
          {
            if (v53 >= (char *)v54)
              break;
            v56 = v54[-1].i64[1];
            v54 = (int8x16_t *)((char *)v54 - 8);
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v56, v20) & 1) == 0);
LABEL_64:
          if (v53 < (char *)v54)
          {
            v57 = (int8x16_t *)((char *)v8 + v51 * 8);
            v58 = v54;
            do
            {
              v59 = v57->i64[0];
              v57->i64[0] = v58->i64[0];
              v58->i64[0] = v59;
              v60 = (int8x16_t *)&v57->u64[1];
              do
              {
                if (v60 == a2)
                  goto LABEL_176;
                v61 = v60->i64[0];
                v60 = (int8x16_t *)((char *)v60 + 8);
              }
              while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v61, v20) & 1) != 0);
              v57 = (int8x16_t *)((char *)v60 - 8);
              do
              {
                if (v58 == v8)
                  goto LABEL_176;
                v62 = v58[-1].i64[1];
                v58 = (int8x16_t *)((char *)v58 - 8);
              }
              while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v62, v20));
            }
            while (v57 < v58);
            v63 = v60 - 1;
            if (&v60[-1] == v8)
              goto LABEL_77;
LABEL_76:
            v8->i64[0] = v63->i64[0];
            goto LABEL_77;
          }
          v63 = (int8x16_t *)(v53 - 8);
          if (v53 - 8 != (char *)v8)
            goto LABEL_76;
LABEL_77:
          v63->i64[0] = v20;
          if (v53 < (char *)v54)
            goto LABEL_80;
          v64 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(rtc::Network const*,rtc::Network const*),rtc::Network**>(v8, v63, a3);
          v9 = (int8x16_t *)&v63->u64[1];
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(rtc::Network const*,rtc::Network const*),rtc::Network**>(&v63->i64[1], a2, a3);
          if (!(_DWORD)result)
          {
            if (v64)
              continue;
LABEL_80:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(rtc::Network const*,rtc::Network const*),rtc::Network**,false>(v8, v63, a3, a4, a5 & 1);
            a5 = 0;
            v9 = (int8x16_t *)&v63->u64[1];
            continue;
          }
          a2 = v63;
          if (v64)
            return result;
          goto LABEL_2;
        }
        v83 = (int8x16_t *)&v8->u64[1];
        v85 = v8 == a2 || v83 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v85)
          {
            v86 = 0;
            v87 = (uint64_t *)v8;
            do
            {
              v90 = *v87;
              v89 = v87[1];
              v87 = (uint64_t *)v83;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v89, v90);
              if ((_DWORD)result)
              {
                v91 = v83->i64[0];
                v92 = v86;
                do
                {
                  *(uint64_t *)((char *)&v8->i64[1] + v92) = *(uint64_t *)((char *)v8->i64 + v92);
                  if (!v92)
                  {
                    v88 = (uint64_t *)v8;
                    goto LABEL_125;
                  }
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v91, *(uint64_t *)((char *)&v8->i64[-1] + v92));
                  v92 -= 8;
                }
                while ((result & 1) != 0);
                v88 = (uint64_t *)((char *)&v8->i64[1] + v92);
LABEL_125:
                *v88 = v91;
              }
              v83 = (int8x16_t *)(v87 + 1);
              v86 += 8;
            }
            while (v87 + 1 != (uint64_t *)a2);
          }
        }
        else if (!v85)
        {
          v113 = 0;
          v114 = 1;
          while (1)
          {
            v115 = v114;
            result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v83->i64[0], v8->i64[v113]);
            if ((_DWORD)result)
              break;
LABEL_170:
            v114 = v115 + 1;
            v83 = (int8x16_t *)&v8->u64[v115 + 1];
            v113 = v115;
            if (v83 == a2)
              return result;
          }
          v116 = v83->i64[0];
          while (1)
          {
            v117 = &v8->i64[v113];
            v117[1] = *v117;
            if (v113 == -1)
              break;
            --v113;
            result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v116, *(v117 - 1));
            if ((result & 1) == 0)
            {
              v8->i64[v113 + 1] = v116;
              goto LABEL_170;
            }
          }
LABEL_176:
          __break(1u);
LABEL_177:
          v8->i64[0] = v8->i64[1];
          v8->i64[1] = v19;
          result = ((uint64_t (*)(uint64_t))*a3)(a2[-1].i64[1]);
          if ((_DWORD)result)
          {
            v74 = v8->i64[1];
            v8->i64[1] = a2[-1].i64[1];
LABEL_179:
            a2[-1].i64[1] = v74;
          }
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(rtc::Network const*,rtc::Network const*),rtc::Network**>(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(uint64_t))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      v9 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v10 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[1]);
      if ((v9 & 1) != 0)
      {
        v11 = *a1;
        if (v10)
        {
          *a1 = *(a2 - 1);
          *(a2 - 1) = v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v11;
          if ((*a3)(*(a2 - 1)))
          {
            v26 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v26;
          }
        }
      }
      else if (v10)
      {
        v24 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v24;
        v19 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
LABEL_17:
        if (v19)
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(rtc::Network const*,rtc::Network const*),rtc::Network**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v12 = a1 + 2;
      v13 = a1 + 3;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(rtc::Network const*,rtc::Network const*),rtc::Network**>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[3]))
        return 1;
      v14 = *v13;
      *v13 = *(a2 - 1);
      *(a2 - 1) = v14;
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v13, *v12))
        return 1;
      v15 = *v12;
      *v12 = *v13;
      *v13 = v15;
      if (!((unsigned int (*)(void))*a3)())
        return 1;
      v17 = a1[1];
      v16 = a1[2];
      v18 = *a1;
      a1[1] = v16;
      a1[2] = v17;
      v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v16, v18);
      goto LABEL_17;
    default:
      v20 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v21 = a1 + 2;
      v22 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[2], a1[1]);
      if ((v20 & 1) != 0)
      {
        v23 = *a1;
        if (v22)
        {
          *a1 = a1[2];
          a1[2] = v23;
        }
        else
        {
          v27 = a1[2];
          *a1 = a1[1];
          a1[1] = v23;
          if ((*a3)(v27))
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        }
      }
      else if (v22)
      {
        v25 = a1[1];
        a1[1] = a1[2];
        a1[2] = v25;
        if (((unsigned int (*)(void))*a3)())
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      v28 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v29 = 0;
      v30 = 0;
      break;
  }
  while (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v28, *v21))
  {
LABEL_35:
    v21 = v28;
    v29 += 8;
    if (++v28 == a2)
      return 1;
  }
  v31 = *v28;
  v32 = v29;
  do
  {
    v33 = (char *)a1 + v32;
    *(_QWORD *)((char *)a1 + v32 + 24) = *(_QWORD *)((char *)a1 + v32 + 16);
    if (v32 == -16)
    {
      *a1 = v31;
      if (++v30 != 8)
        goto LABEL_35;
      return v28 + 1 == a2;
    }
    v32 -= 8;
  }
  while ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v31, *((_QWORD *)v33 + 1)) & 1) != 0);
  *(_QWORD *)((char *)a1 + v32 + 24) = v31;
  if (++v30 != 8)
    goto LABEL_35;
  return v28 + 1 == a2;
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(rtc::Network const*,rtc::Network const*),rtc::Network**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int (**a5)(_QWORD))
{
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
  v11 = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
  if ((v10 & 1) != 0)
  {
    v12 = *a1;
    if (v11)
    {
      *a1 = *a3;
      *a3 = v12;
    }
    else
    {
      *a1 = *a2;
      *a2 = v12;
      if ((*a5)(*a3))
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
      }
    }
  }
  else if (v11)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((unsigned int (*)(_QWORD, _QWORD))*a5)(*a2, *a1))
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
    }
  }
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,rtc::BasicNetworkManager::StartUpdating(void)::$_1 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void (*v4)(void);

  v1 = *a1;
  v2 = *a1 + 32;
  result = *(_QWORD *)(*a1 + 40);
  for (*(_QWORD *)(v1 + 56) = result; result != v2; result = *(_QWORD *)(v1 + 56))
  {
    v4 = *(void (**)(void))(result + 16);
    *(_QWORD *)(v1 + 56) = *(_QWORD *)(result + 8);
    v4();
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,rtc::BasicNetworkManager::StartUpdating(void)::$_2 &&>(rtc::BasicNetworkManager **a1)
{
  rtc::BasicNetworkManager *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  char v7;
  char v8;
  _QWORD v9[2];
  uint64_t (*v10)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v11)(uint64_t);

  v1 = *a1;
  rtc::BasicNetworkManager::UpdateNetworksOnce(*a1);
  v2 = *((_QWORD *)v1 + 42);
  v3 = (unsigned int *)*((_QWORD *)v1 + 56);
  if (v3)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = (_QWORD *)operator new();
  *v5 = v3;
  v5[1] = v1;
  v5[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v5[4] = absl::internal_any_invocable::LocalInvoker<false,void,rtc::BasicNetworkManager::UpdateNetworksContinually(void)::$_0 &&>;
  v9[0] = v5;
  v10 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v11 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  v8 = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, char *, char *))(*(_QWORD *)v2 + 16))(v2, v9, 2000000, &v8, &v7);
  return v10(1, v9, v9);
}

void std::__function::__func<rtc::BasicNetworkManager::StartNetworkMonitor(void)::$_0,std::allocator<rtc::BasicNetworkManager::StartNetworkMonitor(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<rtc::BasicNetworkManager::StartNetworkMonitor(void)::$_0,std::allocator<rtc::BasicNetworkManager::StartNetworkMonitor(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B78F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<rtc::BasicNetworkManager::StartNetworkMonitor(void)::$_0,std::allocator<rtc::BasicNetworkManager::StartNetworkMonitor(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B78F0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<rtc::BasicNetworkManager::StartNetworkMonitor(void)::$_0,std::allocator<rtc::BasicNetworkManager::StartNetworkMonitor(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  rtc::BasicNetworkManager *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(rtc::BasicNetworkManager **)(a1 + 8);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc");
  rtc::BasicNetworkManager::UpdateNetworksOnce(v1);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,rtc::BasicNetworkManager::UpdateNetworksContinually(void)::$_0 &&>(rtc::BasicNetworkManager **a1)
{
  rtc::BasicNetworkManager *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  char v7;
  char v8;
  _QWORD v9[2];
  uint64_t (*v10)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v11)(uint64_t);

  v1 = *a1;
  rtc::BasicNetworkManager::UpdateNetworksOnce(*a1);
  v2 = *((_QWORD *)v1 + 42);
  v3 = (unsigned int *)*((_QWORD *)v1 + 56);
  if (v3)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = (_QWORD *)operator new();
  *v5 = v3;
  v5[1] = v1;
  v5[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v5[4] = absl::internal_any_invocable::LocalInvoker<false,void,rtc::BasicNetworkManager::UpdateNetworksContinually(void)::$_0 &&>;
  v9[0] = v5;
  v10 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v11 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  v8 = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, char *, char *))(*(_QWORD *)v2 + 16))(v2, v9, 2000000, &v8, &v7);
  return v10(1, v9, v9);
}

_DWORD *rtc::FunctionView<void ()(void)>::CallVoidPtr<rtc::BasicNetworkManager::set_vpn_list(std::vector<rtc::NetworkMask> const&)::$_0>(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *result;

  v2 = a1 + 1;
  result = (_DWORD *)(*a1 + 424);
  if (result != v2)
    return std::vector<rtc::NetworkMask>::__assign_with_size[abi:sn180100]<rtc::NetworkMask*,rtc::NetworkMask*>((uint64_t)result, a1[1], a1[2], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - a1[1]) >> 3));
  return result;
}

uint64_t rtc::AdapterTypeToString@<X0>(uint64_t result@<X0>, unint64_t a2@<X8>)
{
  if ((int)result > 127)
  {
    switch((_DWORD)result)
    {
      case 0x80:
        *(_BYTE *)(a2 + 23) = 10;
        if (a2 > (unint64_t)"Cellular3G" || a2 + 10 <= (unint64_t)"Cellular3G")
        {
          strcpy((char *)a2, "Cellular3G");
          return result;
        }
        break;
      case 0x100:
        *(_BYTE *)(a2 + 23) = 10;
        if (a2 > (unint64_t)"Cellular4G" || a2 + 10 <= (unint64_t)"Cellular4G")
        {
          strcpy((char *)a2, "Cellular4G");
          return result;
        }
        break;
      case 0x200:
        *(_BYTE *)(a2 + 23) = 10;
        if (a2 > (unint64_t)"Cellular5G" || a2 + 10 <= (unint64_t)"Cellular5G")
        {
          strcpy((char *)a2, "Cellular5G");
          return result;
        }
        break;
      default:
LABEL_39:
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        return result;
    }
LABEL_40:
    __break(1u);
  }
  else
  {
    switch((int)result)
    {
      case 0:
        *(_BYTE *)(a2 + 23) = 7;
        if (a2 <= (unint64_t)"Unknown" && a2 + 7 > (unint64_t)"Unknown")
          goto LABEL_40;
        strcpy((char *)a2, "Unknown");
        break;
      case 1:
        *(_BYTE *)(a2 + 23) = 8;
        if (a2 <= (unint64_t)"Ethernet" && a2 + 8 > (unint64_t)"Ethernet")
          goto LABEL_40;
        strcpy((char *)a2, "Ethernet");
        break;
      case 2:
        *(_BYTE *)(a2 + 23) = 4;
        if (a2 <= (unint64_t)"Wifi" && a2 + 4 > (unint64_t)"Wifi")
          goto LABEL_40;
        strcpy((char *)a2, "Wifi");
        break;
      case 4:
        *(_BYTE *)(a2 + 23) = 8;
        if (a2 <= (unint64_t)"Cellular" && a2 + 8 > (unint64_t)"Cellular")
          goto LABEL_40;
        strcpy((char *)a2, "Cellular");
        break;
      case 8:
        *(_BYTE *)(a2 + 23) = 3;
        if (a2 <= (unint64_t)"VPN" && a2 + 3 > (unint64_t)"VPN")
          goto LABEL_40;
        *(_DWORD *)a2 = 5132374;
        break;
      case 16:
        *(_BYTE *)(a2 + 23) = 8;
        if (a2 <= (unint64_t)"Loopback" && a2 + 8 > (unint64_t)"Loopback")
          goto LABEL_40;
        strcpy((char *)a2, "Loopback");
        break;
      case 32:
        *(_BYTE *)(a2 + 23) = 8;
        if (a2 <= (unint64_t)"Wildcard" && a2 + 8 > (unint64_t)"Wildcard")
          goto LABEL_40;
        strcpy((char *)a2, "Wildcard");
        break;
      case 64:
        *(_BYTE *)(a2 + 23) = 10;
        if (a2 <= (unint64_t)"Cellular2G" && a2 + 10 > (unint64_t)"Cellular2G")
          goto LABEL_40;
        strcpy((char *)a2, "Cellular2G");
        break;
      default:
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t webrtc::TransportPacketsFeedback::TransportPacketsFeedback(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(_BYTE **)(a2 + 16);
  v4 = *(_BYTE **)(a2 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v6 >> 4) >= 0x333333333333334)
      goto LABEL_8;
    v7 = (char *)operator new(v6);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = &v7[16 * (v6 >> 4)];
    v8 = 80 * ((v6 - 80) / 0x50uLL) + 80;
    memcpy(v7, v5, v8);
    *(_QWORD *)(a1 + 24) = &v7[v8];
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = *(_BYTE **)(a2 + 40);
  v9 = *(_BYTE **)(a2 + 48);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((v11 & 0x8000000000000000) == 0)
    {
      v12 = (char *)operator new(v9 - v10);
      *(_QWORD *)(a1 + 40) = v12;
      *(_QWORD *)(a1 + 48) = v12;
      v13 = &v12[8 * (v11 >> 3)];
      *(_QWORD *)(a1 + 56) = v13;
      memcpy(v12, v10, v11);
      *(_QWORD *)(a1 + 48) = v13;
      return a1;
    }
LABEL_8:
    abort();
  }
  return a1;
}

void webrtc::TransportPacketsFeedback::ReceivedWithSendInfo(webrtc::TransportPacketsFeedback *this@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  char *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if (v2 != v3)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)(v2 + 72) == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_5;
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 < v7)
      {
        if (!v5)
          goto LABEL_26;
        *(_OWORD *)v5 = *(_OWORD *)v2;
        v8 = *(_OWORD *)(v2 + 16);
        v9 = *(_OWORD *)(v2 + 32);
        v10 = *(_OWORD *)(v2 + 64);
        *((_OWORD *)v5 + 3) = *(_OWORD *)(v2 + 48);
        *((_OWORD *)v5 + 4) = v10;
        *((_OWORD *)v5 + 1) = v8;
        *((_OWORD *)v5 + 2) = v9;
        v5 += 80;
        goto LABEL_4;
      }
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4) + 1;
      if (v11 > 0x333333333333333)
        goto LABEL_27;
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (_QWORD)v6) >> 4);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x199999999999999)
        v13 = 0x333333333333333;
      else
        v13 = v11;
      if (!v13)
      {
LABEL_26:
        __break(1u);
LABEL_27:
        abort();
      }
      if (v13 > 0x333333333333333)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v14 = 80 * v13;
      v15 = (char *)operator new(80 * v13);
      v16 = &v15[16 * ((v5 - v6) >> 4)];
      *(_OWORD *)v16 = *(_OWORD *)v2;
      v17 = *(_OWORD *)(v2 + 64);
      v19 = *(_OWORD *)(v2 + 16);
      v18 = *(_OWORD *)(v2 + 32);
      *((_OWORD *)v16 + 3) = *(_OWORD *)(v2 + 48);
      *((_OWORD *)v16 + 4) = v17;
      *((_OWORD *)v16 + 1) = v19;
      *((_OWORD *)v16 + 2) = v18;
      if (v5 != v6)
        break;
      v21 = &v15[16 * ((v5 - v6) >> 4)];
      v5 = v16 + 80;
      *a2 = v16;
      a2[1] = v16 + 80;
      a2[2] = &v15[v14];
      if (v6)
        goto LABEL_24;
LABEL_3:
      v6 = v21;
LABEL_4:
      a2[1] = v5;
LABEL_5:
      v2 += 80;
      if (v2 == v3)
        return;
    }
    v20 = &v15[16 * ((v5 - v6) >> 4)];
    do
    {
      v21 = v20 - 80;
      *((_OWORD *)v20 - 5) = *((_OWORD *)v5 - 5);
      v22 = *((_OWORD *)v5 - 4);
      v23 = *((_OWORD *)v5 - 3);
      v24 = *((_OWORD *)v5 - 1);
      *((_OWORD *)v20 - 2) = *((_OWORD *)v5 - 2);
      *((_OWORD *)v20 - 1) = v24;
      *((_OWORD *)v20 - 4) = v22;
      *((_OWORD *)v20 - 3) = v23;
      v5 -= 80;
      v20 -= 80;
    }
    while (v5 != v6);
    v5 = v16 + 80;
    *a2 = v21;
    a2[1] = v16 + 80;
    a2[2] = &v15[v14];
    if (!v6)
      goto LABEL_3;
LABEL_24:
    operator delete(v6);
    goto LABEL_3;
  }
}

void webrtc::TransportPacketsFeedback::SortedByReceiveTime(webrtc::TransportPacketsFeedback *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  char *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if (v2 != v3)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)(v2 + 72) == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_5;
      v7 = a2[2];
      if ((unint64_t)v5 < v7)
      {
        if (!v5)
          goto LABEL_31;
        *(_OWORD *)v5 = *(_OWORD *)v2;
        v8 = *(_OWORD *)(v2 + 16);
        v9 = *(_OWORD *)(v2 + 32);
        v10 = *(_OWORD *)(v2 + 64);
        *((_OWORD *)v5 + 3) = *(_OWORD *)(v2 + 48);
        *((_OWORD *)v5 + 4) = v10;
        *((_OWORD *)v5 + 1) = v8;
        *((_OWORD *)v5 + 2) = v9;
        v5 += 80;
        goto LABEL_4;
      }
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4) + 1;
      if (v11 > 0x333333333333333)
        goto LABEL_32;
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (_QWORD)v6) >> 4);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x199999999999999)
        v13 = 0x333333333333333;
      else
        v13 = v11;
      if (!v13)
      {
LABEL_31:
        __break(1u);
LABEL_32:
        abort();
      }
      if (v13 > 0x333333333333333)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v14 = 80 * v13;
      v15 = (char *)operator new(80 * v13);
      v16 = &v15[16 * ((v5 - v6) >> 4)];
      *(_OWORD *)v16 = *(_OWORD *)v2;
      v17 = *(_OWORD *)(v2 + 64);
      v19 = *(_OWORD *)(v2 + 16);
      v18 = *(_OWORD *)(v2 + 32);
      *((_OWORD *)v16 + 3) = *(_OWORD *)(v2 + 48);
      *((_OWORD *)v16 + 4) = v17;
      *((_OWORD *)v16 + 1) = v19;
      *((_OWORD *)v16 + 2) = v18;
      if (v5 != v6)
        break;
      v21 = &v15[16 * ((v5 - v6) >> 4)];
      v5 = v16 + 80;
      *a2 = (uint64_t)v16;
      a2[1] = (uint64_t)(v16 + 80);
      a2[2] = (uint64_t)&v15[v14];
      if (v6)
        goto LABEL_24;
LABEL_3:
      v6 = v21;
LABEL_4:
      a2[1] = (uint64_t)v5;
LABEL_5:
      v2 += 80;
      if (v2 == v3)
      {
        v25 = *a2;
        goto LABEL_27;
      }
    }
    v20 = &v15[16 * ((v5 - v6) >> 4)];
    do
    {
      v21 = v20 - 80;
      *((_OWORD *)v20 - 5) = *((_OWORD *)v5 - 5);
      v22 = *((_OWORD *)v5 - 4);
      v23 = *((_OWORD *)v5 - 3);
      v24 = *((_OWORD *)v5 - 1);
      *((_OWORD *)v20 - 2) = *((_OWORD *)v5 - 2);
      *((_OWORD *)v20 - 1) = v24;
      *((_OWORD *)v20 - 4) = v22;
      *((_OWORD *)v20 - 3) = v23;
      v5 -= 80;
      v20 -= 80;
    }
    while (v5 != v6);
    v5 = v16 + 80;
    *a2 = (uint64_t)v21;
    a2[1] = (uint64_t)(v16 + 80);
    a2[2] = (uint64_t)&v15[v14];
    if (!v6)
      goto LABEL_3;
LABEL_24:
    operator delete(v6);
    goto LABEL_3;
  }
  v5 = 0;
  v25 = 0;
LABEL_27:
  v26 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v5[-v25] >> 4));
  if (v5 == (char *)v25)
    v27 = 0;
  else
    v27 = v26;
  std::__introsort<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*,false>(v25, v5, v27, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*,false>(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  BOOL v47;
  __int128 v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  _OWORD *v55;
  uint64_t v56;
  BOOL v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  _OWORD *v70;
  BOOL v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  _OWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  BOOL v90;
  int64_t v91;
  int64_t v92;
  _OWORD *v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _OWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  int64_t v123;
  uint64_t v124;
  unint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _OWORD *v129;
  uint64_t v130;
  uint64_t v131;
  int64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _OWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _OWORD *v151;
  unint64_t v152;
  uint64_t v153;
  BOOL v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  _OWORD *v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  BOOL v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;

__n128 std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v3 = *(_QWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = v3 < v4;
  if (v3 == v4)
  {
    v5 = *(_QWORD *)a2 < *(_QWORD *)a1;
    if (*(_QWORD *)a2 == *(_QWORD *)a1)
      v5 = *(_QWORD *)(a2 + 56) < *(_QWORD *)(a1 + 56);
  }
  if (v5)
  {
    v6 = *(_QWORD *)(a3 + 72);
    v7 = v6 < v3;
    if (v6 == v3 && (v7 = *(_QWORD *)a3 < *(_QWORD *)a2, *(_QWORD *)a3 == *(_QWORD *)a2))
    {
      if (*(_QWORD *)(a3 + 56) >= *(_QWORD *)(a2 + 56))
        goto LABEL_9;
    }
    else if (!v7)
    {
LABEL_9:
      v40 = *(_OWORD *)(a1 + 32);
      v44 = *(_OWORD *)(a1 + 48);
      v48 = *(_OWORD *)(a1 + 64);
      v32 = *(__n128 *)a1;
      v36 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v8 = *(_OWORD *)(a2 + 64);
      v10 = *(_OWORD *)(a2 + 16);
      v9 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v8;
      *(_OWORD *)(a1 + 16) = v10;
      *(_OWORD *)(a1 + 32) = v9;
      *(_OWORD *)(a2 + 48) = v44;
      *(_OWORD *)(a2 + 64) = v48;
      result = v32;
      *(__n128 *)a2 = v32;
      *(_OWORD *)(a2 + 16) = v36;
      *(_OWORD *)(a2 + 32) = v40;
      v12 = *(_QWORD *)(a3 + 72);
      v13 = *(_QWORD *)(a2 + 72);
      v14 = v12 < v13;
      if (v12 == v13 && (v14 = *(_QWORD *)a3 < *(_QWORD *)a2, *(_QWORD *)a3 == *(_QWORD *)a2))
      {
        if (*(_QWORD *)(a3 + 56) >= *(_QWORD *)(a2 + 56))
          return result;
      }
      else if (!v14)
      {
        return result;
      }
      v41 = *(_OWORD *)(a2 + 32);
      v45 = *(_OWORD *)(a2 + 48);
      v49 = *(_OWORD *)(a2 + 64);
      v33 = *(__n128 *)a2;
      v37 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v26 = *(_OWORD *)(a3 + 64);
      v28 = *(_OWORD *)(a3 + 16);
      v27 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v26;
      *(_OWORD *)(a2 + 16) = v28;
      *(_OWORD *)(a2 + 32) = v27;
LABEL_29:
      *(_OWORD *)(a3 + 48) = v45;
      *(_OWORD *)(a3 + 64) = v49;
      result = v33;
      *(__n128 *)a3 = v33;
      *(_OWORD *)(a3 + 16) = v37;
      *(_OWORD *)(a3 + 32) = v41;
      return result;
    }
    v41 = *(_OWORD *)(a1 + 32);
    v45 = *(_OWORD *)(a1 + 48);
    v49 = *(_OWORD *)(a1 + 64);
    v33 = *(__n128 *)a1;
    v37 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    v17 = *(_OWORD *)(a3 + 64);
    v19 = *(_OWORD *)(a3 + 16);
    v18 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a1 + 64) = v17;
    *(_OWORD *)(a1 + 16) = v19;
    *(_OWORD *)(a1 + 32) = v18;
    goto LABEL_29;
  }
  v15 = *(_QWORD *)(a3 + 72);
  v16 = v15 < v3;
  if (v15 == v3 && (v16 = *(_QWORD *)a3 < *(_QWORD *)a2, *(_QWORD *)a3 == *(_QWORD *)a2))
  {
    if (*(_QWORD *)(a3 + 56) >= *(_QWORD *)(a2 + 56))
      return result;
  }
  else if (!v16)
  {
    return result;
  }
  v42 = *(_OWORD *)(a2 + 32);
  v46 = *(_OWORD *)(a2 + 48);
  v50 = *(_OWORD *)(a2 + 64);
  v34 = *(__n128 *)a2;
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  v20 = *(_OWORD *)(a3 + 64);
  v22 = *(_OWORD *)(a3 + 16);
  v21 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v20;
  *(_OWORD *)(a2 + 16) = v22;
  *(_OWORD *)(a2 + 32) = v21;
  *(_OWORD *)(a3 + 48) = v46;
  *(_OWORD *)(a3 + 64) = v50;
  result = v34;
  *(__n128 *)a3 = v34;
  *(_OWORD *)(a3 + 16) = v38;
  *(_OWORD *)(a3 + 32) = v42;
  v23 = *(_QWORD *)(a2 + 72);
  v24 = *(_QWORD *)(a1 + 72);
  v25 = v23 < v24;
  if (v23 == v24)
  {
    v25 = *(_QWORD *)a2 < *(_QWORD *)a1;
    if (*(_QWORD *)a2 == *(_QWORD *)a1)
    {
      if (*(_QWORD *)(a2 + 56) >= *(_QWORD *)(a1 + 56))
        return result;
      goto LABEL_32;
    }
  }
  if (v25)
  {
LABEL_32:
    v43 = *(_OWORD *)(a1 + 32);
    v47 = *(_OWORD *)(a1 + 48);
    v51 = *(_OWORD *)(a1 + 64);
    v35 = *(__n128 *)a1;
    v39 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v29 = *(_OWORD *)(a2 + 64);
    v31 = *(_OWORD *)(a2 + 16);
    v30 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v29;
    *(_OWORD *)(a1 + 16) = v31;
    *(_OWORD *)(a1 + 32) = v30;
    *(_OWORD *)(a2 + 48) = v47;
    *(_OWORD *)(a2 + 64) = v51;
    result = v35;
    *(__n128 *)a2 = v35;
    *(_OWORD *)(a2 + 16) = v39;
    *(_OWORD *)(a2 + 32) = v43;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v24 = (_QWORD *)(a2 - 80);
      v25 = *(_QWORD *)(a2 - 8);
      v26 = *(_QWORD *)(a1 + 72);
      v27 = v25 < v26;
      if (v25 == v26 && (v27 = *v24 < *(_QWORD *)a1, *v24 == *(_QWORD *)a1))
      {
        if (*(_QWORD *)(a2 - 24) >= *(_QWORD *)(a1 + 56))
          return result;
      }
      else if (!v27)
      {
        return result;
      }
      v36 = *(_OWORD *)(a1 + 32);
      v37 = *(_OWORD *)(a1 + 48);
      v38 = *(_OWORD *)(a1 + 64);
      v32 = *(_OWORD *)a1;
      v34 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v24;
      v28 = *(_OWORD *)(a2 - 16);
      v30 = *(_OWORD *)(a2 - 64);
      v29 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 64) = v28;
      *(_OWORD *)(a1 + 16) = v30;
      *(_OWORD *)(a1 + 32) = v29;
      *(_OWORD *)(a2 - 32) = v37;
      *(_OWORD *)(a2 - 16) = v38;
      *(_OWORD *)v24 = v32;
      *(_OWORD *)(a2 - 64) = v34;
      *(_OWORD *)(a2 - 48) = v36;
      return result;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(a1, a1 + 80, a2 - 80);
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 80);
      return 1;
    default:
      v6 = a1 + 160;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(a1, a1 + 80, a1 + 160);
      v7 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (2)
  {
    v11 = *(_QWORD *)(v7 + 72);
    v12 = *(_QWORD *)(v6 + 72);
    if (v11 == v12)
    {
      v13 = *(_QWORD *)v7;
      if (*(_QWORD *)v7 == *(_QWORD *)v6)
      {
        if (*(_QWORD *)(v7 + 56) >= *(_QWORD *)(v6 + 56))
          goto LABEL_6;
      }
      else if (*(_QWORD *)v7 >= *(_QWORD *)v6)
      {
        goto LABEL_6;
      }
    }
    else
    {
      if (v11 >= v12)
        goto LABEL_6;
      v13 = *(_QWORD *)v7;
    }
    v33 = *(_OWORD *)(v7 + 24);
    v35 = *(_OWORD *)(v7 + 40);
    v31 = *(_OWORD *)(v7 + 8);
    v14 = *(_OWORD *)(v7 + 56);
    v15 = *(_OWORD *)(v6 + 64);
    v16 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(v7 + 64) = v15;
    v17 = *(_OWORD *)v6;
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(v7 + 32) = v16;
    *(_OWORD *)v7 = v17;
    v10 = a1;
    if (v6 == a1)
      goto LABEL_5;
    v18 = v8;
    while (1)
    {
      v22 = (_OWORD *)(a1 + v18 + 80);
      v23 = *(_QWORD *)(a1 + v18 + 152);
      if (v11 == v23)
        break;
      if (v11 >= v23)
        goto LABEL_24;
LABEL_17:
      v19 = (_OWORD *)(a1 + v18 + 160);
      v6 -= 80;
      v20 = *(_OWORD *)(a1 + v18 + 128);
      v19[2] = *(_OWORD *)(a1 + v18 + 112);
      v19[3] = v20;
      v19[4] = *(_OWORD *)(a1 + v18 + 144);
      v21 = *(_OWORD *)(a1 + v18 + 96);
      *v19 = *v22;
      v19[1] = v21;
      v18 -= 80;
      if (v18 == -160)
      {
        v10 = a1;
        goto LABEL_5;
      }
    }
    if (v13 != *(_QWORD *)v22)
    {
      if (v13 >= *(_QWORD *)v22)
      {
        v10 = a1 + v18 + 160;
        goto LABEL_5;
      }
      goto LABEL_17;
    }
    if ((uint64_t)v14 < *(_QWORD *)(a1 + v18 + 136))
      goto LABEL_17;
LABEL_24:
    v10 = v6;
LABEL_5:
    *(_QWORD *)v10 = v13;
    *(_OWORD *)(v10 + 40) = v35;
    *(_OWORD *)(v10 + 24) = v33;
    *(_OWORD *)(v10 + 8) = v31;
    *(_OWORD *)(v10 + 56) = v14;
    *(_QWORD *)(v10 + 72) = v11;
    if (++v9 == 8)
      return v7 + 80 == a2;
LABEL_6:
    v6 = v7;
    v8 += 80;
    v7 += 80;
    if (v7 != a2)
      continue;
    return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  result.n128_u64[0] = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(a1, a2, a3).n128_u64[0];
  v9 = *(_QWORD *)(a4 + 72);
  v10 = *(_QWORD *)(a3 + 72);
  v11 = v9 < v10;
  if (v9 == v10 && (v11 = *(_QWORD *)a4 < *(_QWORD *)a3, *(_QWORD *)a4 == *(_QWORD *)a3))
  {
    if (*(_QWORD *)(a4 + 56) >= *(_QWORD *)(a3 + 56))
      return result;
  }
  else if (!v11)
  {
    return result;
  }
  v33 = *(_OWORD *)(a3 + 32);
  v36 = *(_OWORD *)(a3 + 48);
  v39 = *(_OWORD *)(a3 + 64);
  v27 = *(__n128 *)a3;
  v30 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  v12 = *(_OWORD *)(a4 + 64);
  v14 = *(_OWORD *)(a4 + 16);
  v13 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a3 + 64) = v12;
  *(_OWORD *)(a3 + 16) = v14;
  *(_OWORD *)(a3 + 32) = v13;
  *(_OWORD *)(a4 + 48) = v36;
  *(_OWORD *)(a4 + 64) = v39;
  result = v27;
  *(__n128 *)a4 = v27;
  *(_OWORD *)(a4 + 16) = v30;
  *(_OWORD *)(a4 + 32) = v33;
  v15 = *(_QWORD *)(a3 + 72);
  v16 = *(_QWORD *)(a2 + 72);
  v17 = v15 < v16;
  if (v15 == v16)
  {
    v17 = *(_QWORD *)a3 < *(_QWORD *)a2;
    if (*(_QWORD *)a3 == *(_QWORD *)a2)
      v17 = *(_QWORD *)(a3 + 56) < *(_QWORD *)(a2 + 56);
  }
  if (v17)
  {
    v34 = *(_OWORD *)(a2 + 32);
    v37 = *(_OWORD *)(a2 + 48);
    v40 = *(_OWORD *)(a2 + 64);
    v28 = *(__n128 *)a2;
    v31 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v18 = *(_OWORD *)(a3 + 64);
    v20 = *(_OWORD *)(a3 + 16);
    v19 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v18;
    *(_OWORD *)(a2 + 16) = v20;
    *(_OWORD *)(a2 + 32) = v19;
    *(_OWORD *)(a3 + 48) = v37;
    *(_OWORD *)(a3 + 64) = v40;
    result = v28;
    *(__n128 *)a3 = v28;
    *(_OWORD *)(a3 + 16) = v31;
    *(_OWORD *)(a3 + 32) = v34;
    v21 = *(_QWORD *)(a2 + 72);
    v22 = *(_QWORD *)(a1 + 72);
    v23 = v21 < v22;
    if (v21 == v22)
    {
      v23 = *(_QWORD *)a2 < *(_QWORD *)a1;
      if (*(_QWORD *)a2 == *(_QWORD *)a1)
        v23 = *(_QWORD *)(a2 + 56) < *(_QWORD *)(a1 + 56);
    }
    if (v23)
    {
      v35 = *(_OWORD *)(a1 + 32);
      v38 = *(_OWORD *)(a1 + 48);
      v41 = *(_OWORD *)(a1 + 64);
      v29 = *(__n128 *)a1;
      v32 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v24 = *(_OWORD *)(a2 + 64);
      v26 = *(_OWORD *)(a2 + 16);
      v25 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v24;
      *(_OWORD *)(a1 + 16) = v26;
      *(_OWORD *)(a1 + 32) = v25;
      *(_OWORD *)(a2 + 48) = v38;
      *(_OWORD *)(a2 + 64) = v41;
      result = v29;
      *(__n128 *)a2 = v29;
      *(_OWORD *)(a2 + 16) = v32;
      *(_OWORD *)(a2 + 32) = v35;
    }
  }
  return result;
}

__n128 std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  result.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(a1, a2, a3, a4).n128_u64[0];
  v11 = *(_QWORD *)(a5 + 72);
  v12 = *(_QWORD *)(a4 + 72);
  v13 = v11 < v12;
  if (v11 == v12 && (v13 = *(_QWORD *)a5 < *(_QWORD *)a4, *(_QWORD *)a5 == *(_QWORD *)a4))
  {
    if (*(_QWORD *)(a5 + 56) >= *(_QWORD *)(a4 + 56))
      return result;
  }
  else if (!v13)
  {
    return result;
  }
  v43 = *(_OWORD *)(a4 + 32);
  v47 = *(_OWORD *)(a4 + 48);
  v51 = *(_OWORD *)(a4 + 64);
  v35 = *(__n128 *)a4;
  v39 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  v14 = *(_OWORD *)(a5 + 64);
  v16 = *(_OWORD *)(a5 + 16);
  v15 = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a4 + 64) = v14;
  *(_OWORD *)(a4 + 16) = v16;
  *(_OWORD *)(a4 + 32) = v15;
  *(_OWORD *)(a5 + 48) = v47;
  *(_OWORD *)(a5 + 64) = v51;
  result = v35;
  *(__n128 *)a5 = v35;
  *(_OWORD *)(a5 + 16) = v39;
  *(_OWORD *)(a5 + 32) = v43;
  v17 = *(_QWORD *)(a4 + 72);
  v18 = *(_QWORD *)(a3 + 72);
  v19 = v17 < v18;
  if (v17 == v18)
  {
    v19 = *(_QWORD *)a4 < *(_QWORD *)a3;
    if (*(_QWORD *)a4 == *(_QWORD *)a3)
      v19 = *(_QWORD *)(a4 + 56) < *(_QWORD *)(a3 + 56);
  }
  if (v19)
  {
    v44 = *(_OWORD *)(a3 + 32);
    v48 = *(_OWORD *)(a3 + 48);
    v52 = *(_OWORD *)(a3 + 64);
    v36 = *(__n128 *)a3;
    v40 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v20 = *(_OWORD *)(a4 + 64);
    v22 = *(_OWORD *)(a4 + 16);
    v21 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v20;
    *(_OWORD *)(a3 + 16) = v22;
    *(_OWORD *)(a3 + 32) = v21;
    *(_OWORD *)(a4 + 48) = v48;
    *(_OWORD *)(a4 + 64) = v52;
    result = v36;
    *(__n128 *)a4 = v36;
    *(_OWORD *)(a4 + 16) = v40;
    *(_OWORD *)(a4 + 32) = v44;
    v23 = *(_QWORD *)(a3 + 72);
    v24 = *(_QWORD *)(a2 + 72);
    v25 = v23 < v24;
    if (v23 == v24)
    {
      v25 = *(_QWORD *)a3 < *(_QWORD *)a2;
      if (*(_QWORD *)a3 == *(_QWORD *)a2)
        v25 = *(_QWORD *)(a3 + 56) < *(_QWORD *)(a2 + 56);
    }
    if (v25)
    {
      v45 = *(_OWORD *)(a2 + 32);
      v49 = *(_OWORD *)(a2 + 48);
      v53 = *(_OWORD *)(a2 + 64);
      v37 = *(__n128 *)a2;
      v41 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v26 = *(_OWORD *)(a3 + 64);
      v28 = *(_OWORD *)(a3 + 16);
      v27 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v26;
      *(_OWORD *)(a2 + 16) = v28;
      *(_OWORD *)(a2 + 32) = v27;
      *(_OWORD *)(a3 + 48) = v49;
      *(_OWORD *)(a3 + 64) = v53;
      result = v37;
      *(__n128 *)a3 = v37;
      *(_OWORD *)(a3 + 16) = v41;
      *(_OWORD *)(a3 + 32) = v45;
      v29 = *(_QWORD *)(a2 + 72);
      v30 = *(_QWORD *)(a1 + 72);
      v31 = v29 < v30;
      if (v29 == v30)
      {
        v31 = *(_QWORD *)a2 < *(_QWORD *)a1;
        if (*(_QWORD *)a2 == *(_QWORD *)a1)
          v31 = *(_QWORD *)(a2 + 56) < *(_QWORD *)(a1 + 56);
      }
      if (v31)
      {
        v46 = *(_OWORD *)(a1 + 32);
        v50 = *(_OWORD *)(a1 + 48);
        v54 = *(_OWORD *)(a1 + 64);
        v38 = *(__n128 *)a1;
        v42 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v32 = *(_OWORD *)(a2 + 64);
        v34 = *(_OWORD *)(a2 + 16);
        v33 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v32;
        *(_OWORD *)(a1 + 16) = v34;
        *(_OWORD *)(a1 + 32) = v33;
        *(_OWORD *)(a2 + 48) = v50;
        *(_OWORD *)(a2 + 64) = v54;
        result = v38;
        *(__n128 *)a2 = v38;
        *(_OWORD *)(a2 + 16) = v42;
        *(_OWORD *)(a2 + 32) = v46;
      }
    }
  }
  return result;
}

double dcsctp::NoUserDataCause::SerializeTo(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  double result;

  v4 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v5 > 0xFFFFFFFFFFFFFFF7)
  {
    *(_QWORD *)(a2 + 8) = &v4[v5 + 8];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 8uLL);
    v4 = *(char **)a2;
  }
  *(_QWORD *)&result = 134220032;
  *(_DWORD *)&v4[v5] = 134220032;
  *(_DWORD *)(*(_QWORD *)a2 + v5 + 4) = bswap32(*(_DWORD *)(a1 + 8));
  return result;
}

std::string *dcsctp::NoUserDataCause::ToString@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  std::string v4;

  memset(&v4, 0, sizeof(v4));
  if (&v4 <= (std::string *)"No User Data, tsn=" && (char *)&v4.__r_.__value_.__r.__words[2] + 2 > "No User Data, tsn=")
  {
    __break(1u);
  }
  else
  {
    strcpy((char *)&v4, "No User Data, tsn=");
    *((_BYTE *)&v4.__r_.__value_.__s + 23) = 18;
    this = rtc::StringBuilder::operator<<(&v4, this->__r_.__value_.__r.__words[1]);
    *a2 = v4;
  }
  return this;
}

void dcsctp::NoUserDataCause::~NoUserDataCause(dcsctp::NoUserDataCause *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::NoiseEstimator::PreUpdate(float32x4_t *a1, int a2, uint32x4_t *a3, float a4)
{
  int32x2_t v8;
  int32x2_t v9;
  uint64_t v10;
  float32x4_t *v11;
  __int8 *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  int32x4_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  float32x4_t v37;
  float v38;
  float32x4_t v39;
  float v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  int64x2_t v64;
  float32x4_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float v68;
  int64x2_t v69;
  float v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int32x2_t v74;
  int64x2_t v75;

  webrtc::QuantileNoiseEstimator::Estimate((uint64_t)a1[130].i64 + 4, a3, &a1[98]);
  if (a2 <= 49)
  {
    v10 = 0;
    v11 = (float32x4_t *)((char *)a1 + 1052);
    v12 = &a3[1].i8[4];
    v13 = 0.0;
    v14 = 0.0;
    v15 = 0.0;
    v16 = 0.0;
    do
    {
      v19 = (float)((float)((float)*(unsigned int *)&v12[v10] * 0.00000011921) + -126.94) * 0.69315;
      v20 = (float)((float)((float)*(unsigned int *)&v12[v10 + 4] * 0.00000011921) + -126.94) * 0.69315;
      v13 = (float)(v13 + (float)(v17 * v19)) + (float)(v18 * v20);
      v14 = (float)(v14 + v17) + v18;
      v15 = (float)(v15 + (float)(v17 * v17)) + (float)(v18 * v18);
      v16 = (float)(v16 + v19) + v20;
      v10 += 8;
    }
    while (v10 != 496);
    *(float *)v9.i32 = a1->f32[2] + (float)((float)(a4 * 0.0077519) * *(float *)a1->i64[0]);
    v21 = (float)(v15 * 124.0) - (float)(v14 * v14);
    v22 = (float)((float)(v15 * v16) - (float)(v14 * v13)) / v21;
    v23 = 0.0;
    if (v22 < 0.0)
      v22 = 0.0;
    v24 = v22 + a1->f32[3];
    a1->i32[2] = v9.i32[0];
    a1->f32[3] = v24;
    v25 = (float)((float)(v13 * -124.0) + (float)(v14 * v16)) / v21;
    if (v25 > 1.0)
      v25 = 1.0;
    if (v25 < 0.0)
      v25 = 0.0;
    v26 = v25 + a1[1].f32[0];
    a1[1].f32[0] = v26;
    v27 = (float)a2;
    v28 = (float)a2 + 1.0;
    v29 = 1.0 / v28;
    v8.i32[0] = 0;
    if (v26 > 0.0)
    {
      v74 = v9;
      *(float *)v8.i32 = exp2f((float)((float)(v29 * v24) * 0.43429) * 3.3073);
      v9 = v74;
      v27 = (float)a2;
      v29 = 1.0 / v28;
      *(float *)v8.i32 = v28 * *(float *)v8.i32;
      v23 = (float)(1.0 / v28) * v26;
    }
    if (v26 == 0.0)
    {
      v30 = vdupq_lane_s32(v9, 0);
      *v11 = (float32x4_t)v30;
      *(int32x4_t *)((char *)a1 + 1068) = v30;
      *(int32x4_t *)((char *)a1 + 1084) = v30;
      *(int32x4_t *)((char *)a1 + 1100) = v30;
      *(int32x4_t *)((char *)a1 + 1116) = v30;
      *(int32x4_t *)((char *)a1 + 1132) = v30;
      *(int32x4_t *)((char *)a1 + 1148) = v30;
      *(int32x4_t *)((char *)a1 + 1164) = v30;
      *(int32x4_t *)((char *)a1 + 1180) = v30;
      *(int32x4_t *)((char *)a1 + 1196) = v30;
      *(int32x4_t *)((char *)a1 + 1212) = v30;
      *(int32x4_t *)((char *)a1 + 1228) = v30;
      *(int32x4_t *)((char *)a1 + 1244) = v30;
      *(int32x4_t *)((char *)a1 + 1260) = v30;
      *(int32x4_t *)((char *)a1 + 1276) = v30;
      *(int32x4_t *)((char *)a1 + 1292) = v30;
      *(int32x4_t *)((char *)a1 + 1308) = v30;
      *(int32x4_t *)((char *)a1 + 1324) = v30;
      *(int32x4_t *)((char *)a1 + 1340) = v30;
      *(int32x4_t *)((char *)a1 + 1356) = v30;
      *(int32x4_t *)((char *)a1 + 1372) = v30;
      *(int32x4_t *)((char *)a1 + 1388) = v30;
      *(int32x4_t *)((char *)a1 + 1404) = v30;
      *(int32x4_t *)((char *)a1 + 1420) = v30;
      *(int32x4_t *)((char *)a1 + 1436) = v30;
      *(int32x4_t *)((char *)a1 + 1452) = v30;
      *(int32x4_t *)((char *)a1 + 1468) = v30;
      *(int32x4_t *)((char *)a1 + 1484) = v30;
      *(int32x4_t *)((char *)a1 + 1500) = v30;
      *(int32x4_t *)((char *)a1 + 1516) = v30;
      *(int32x4_t *)((char *)a1 + 1532) = v30;
      *(int32x4_t *)((char *)a1 + 1548) = v30;
    }
    else
    {
      v62 = v27;
      v63 = v29;
      v31 = 0;
      v61 = *(float *)v8.i32;
      v67 = (float32x4_t)vdupq_lane_s32(v8, 0);
      v32 = (int8x16_t)xmmword_208F08AD0;
      v33 = (int8x16_t)xmmword_208F05120;
      v65 = (float32x4_t)vdupq_n_s32(0xC2FDE2A9);
      v66 = (int8x16_t)vdupq_n_s64(5uLL);
      v64 = vdupq_n_s64(4uLL);
      v68 = v23;
      do
      {
        v69 = (int64x2_t)v33;
        v75 = (int64x2_t)v32;
        v34.i64[0] = 0x3400000034000000;
        v34.i64[1] = 0x3400000034000000;
        v73 = vmulq_n_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v33, (uint64x2_t)v66), v33, v66))), vcvtq_f64_u64((uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v32, (uint64x2_t)v66), v32, v66)))), v34), v65), v23);
        v70 = exp2f(v73.f32[1]);
        v35.f32[0] = exp2f(v73.f32[0]);
        v35.f32[1] = v70;
        v71 = v35;
        v36 = exp2f(v73.f32[2]);
        v37 = v71;
        v37.f32[2] = v36;
        v72 = v37;
        v38 = exp2f(v73.f32[3]);
        v23 = v68;
        v39 = v72;
        v39.f32[3] = v38;
        v11[v31] = vdivq_f32(v67, v39);
        v32 = (int8x16_t)vaddq_s64(v75, v64);
        v33 = (int8x16_t)vaddq_s64(v69, v64);
        ++v31;
      }
      while (v31 != 32);
      v40 = exp2f(v68 * 7.0573);
      v27 = v62;
      *(float *)v9.i32 = v61 / v40;
      v29 = v63;
    }
    a1[97].i32[3] = v9.i32[0];
    v41 = (float)(50 - a2);
    v42 = (float32x4_t)vdupq_n_s32(0x3CA3D70Au);
    v43 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[99], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1068), v41), v29), v42);
    a1[98] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[98], v27), vmulq_n_f32(*v11, v41), v29), v42);
    a1[99] = v43;
    v44 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[101], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1100), v41), v29), v42);
    a1[100] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[100], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1084), v41), v29), v42);
    a1[101] = v44;
    v45 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[103], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1132), v41), v29), v42);
    a1[102] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[102], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1116), v41), v29), v42);
    a1[103] = v45;
    v46 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[105], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1164), v41), v29), v42);
    a1[104] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[104], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1148), v41), v29), v42);
    a1[105] = v46;
    v47 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[107], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1196), v41), v29), v42);
    a1[106] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[106], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1180), v41), v29), v42);
    a1[107] = v47;
    v48 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[109], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1228), v41), v29), v42);
    a1[108] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[108], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1212), v41), v29), v42);
    a1[109] = v48;
    v49 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[111], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1260), v41), v29), v42);
    a1[110] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[110], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1244), v41), v29), v42);
    a1[111] = v49;
    v50 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[113], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1292), v41), v29), v42);
    a1[112] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[112], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1276), v41), v29), v42);
    a1[113] = v50;
    v51 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[115], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1324), v41), v29), v42);
    a1[114] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[114], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1308), v41), v29), v42);
    a1[115] = v51;
    v52 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[117], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1356), v41), v29), v42);
    a1[116] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[116], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1340), v41), v29), v42);
    a1[117] = v52;
    v53 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[119], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1388), v41), v29), v42);
    a1[118] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[118], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1372), v41), v29), v42);
    a1[119] = v53;
    v54 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[121], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1420), v41), v29), v42);
    a1[120] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[120], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1404), v41), v29), v42);
    a1[121] = v54;
    v55 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[123], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1452), v41), v29), v42);
    a1[122] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[122], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1436), v41), v29), v42);
    a1[123] = v55;
    v56 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[125], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1484), v41), v29), v42);
    a1[124] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[124], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1468), v41), v29), v42);
    a1[125] = v56;
    v57 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[127], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1516), v41), v29), v42);
    a1[126] = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[126], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1500), v41), v29), v42);
    a1[127] = v57;
    v58 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[128], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1532), v41), v29), v42);
    v59 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(a1[129], v27), vmulq_n_f32(*(float32x4_t *)((char *)a1 + 1548), v41), v29), v42);
    v57.f32[0] = a1[130].f32[0] * v27;
    v60 = a1[97].f32[3];
    a1[128] = v58;
    a1[129] = v59;
    a1[130].f32[0] = (float)(v57.f32[0] + (float)((float)(v60 * v41) * v29)) * 0.02;
  }
}

void webrtc::`anonymous namespace'::NoiseFloorEstimator::~NoiseFloorEstimator(webrtc::_anonymous_namespace_::NoiseFloorEstimator *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

float webrtc::`anonymous namespace'::NoiseFloorEstimator::Analyze(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t i;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float v15;

  v2 = *(int *)(a2 + 12);
  v3 = 100 * v2;
  if (100 * (_DWORD)v2 != *(_DWORD *)(a1 + 16))
  {
    *(_DWORD *)(a1 + 16) = v3;
    *(_WORD *)(a1 + 24) = 1;
    v4 = (float)((float)((float)v3 + (float)v3) + (float)((float)v3 + (float)v3)) / 100.0;
    *(float *)(a1 + 20) = v4;
    *(float *)(a1 + 28) = v4;
    *(float *)(a1 + 32) = v4;
    *(_DWORD *)(a1 + 36) = 500;
  }
  v5 = *(unsigned int *)(a2 + 8);
  v6 = 0.0;
  if ((int)v5 >= 1 && (_DWORD)v2)
  {
    for (i = 0; i != v5; ++i)
    {
      v8 = *(float **)(*(_QWORD *)a2 + 8 * i);
      v9 = 4 * v2;
      v10 = 0.0;
      do
      {
        v11 = *v8++;
        v10 = v10 + (float)(v11 * v11);
        v9 -= 4;
      }
      while (v9);
      if (v10 >= v6)
        v6 = v10;
    }
  }
  if (v6 > *(float *)(a1 + 20))
  {
    if (*(_BYTE *)(a1 + 25))
    {
      if (v6 >= *(float *)(a1 + 28))
        v6 = *(float *)(a1 + 28);
      *(float *)(a1 + 28) = v6;
      v12 = *(_DWORD *)(a1 + 36);
      if (v12)
      {
LABEL_16:
        if (!*(_BYTE *)(a1 + 24) && v6 >= *(float *)(a1 + 32))
          v6 = *(float *)(a1 + 32);
        *(float *)(a1 + 32) = v6;
        *(_DWORD *)(a1 + 36) = v12 - 1;
        v13 = v6 / (float)(int)v2;
        if (v13 <= 1.0)
          return -90.309;
        return (float)(log10f(v13) * 10.0) + -90.309;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
      *(float *)(a1 + 28) = v6;
      v12 = *(_DWORD *)(a1 + 36);
      if (v12)
        goto LABEL_16;
    }
    *(_WORD *)(a1 + 24) = 0;
    v15 = *(float *)(a1 + 32);
    if (v15 < v6)
      v6 = (float)(v15 * 0.5) + (float)(v6 * 0.5);
    *(float *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 36) = 500;
    v13 = v6 / (float)(int)v2;
    if (v13 <= 1.0)
      return -90.309;
    return (float)(log10f(v13) * 10.0) + -90.309;
  }
  v13 = *(float *)(a1 + 32) / (float)(int)v2;
  if (v13 > 1.0)
    return (float)(log10f(v13) * 10.0) + -90.309;
  return -90.309;
}

float std::array<float,96ul>::fill[abi:sn180100](_DWORD *a1, _DWORD *a2)
{
  float result;

  *a1 = *a2;
  a1[1] = *a2;
  a1[2] = *a2;
  a1[3] = *a2;
  a1[4] = *a2;
  a1[5] = *a2;
  a1[6] = *a2;
  a1[7] = *a2;
  a1[8] = *a2;
  a1[9] = *a2;
  a1[10] = *a2;
  a1[11] = *a2;
  a1[12] = *a2;
  a1[13] = *a2;
  a1[14] = *a2;
  a1[15] = *a2;
  a1[16] = *a2;
  a1[17] = *a2;
  a1[18] = *a2;
  a1[19] = *a2;
  a1[20] = *a2;
  a1[21] = *a2;
  a1[22] = *a2;
  a1[23] = *a2;
  a1[24] = *a2;
  a1[25] = *a2;
  a1[26] = *a2;
  a1[27] = *a2;
  a1[28] = *a2;
  a1[29] = *a2;
  a1[30] = *a2;
  a1[31] = *a2;
  a1[32] = *a2;
  a1[33] = *a2;
  a1[34] = *a2;
  a1[35] = *a2;
  a1[36] = *a2;
  a1[37] = *a2;
  a1[38] = *a2;
  a1[39] = *a2;
  a1[40] = *a2;
  a1[41] = *a2;
  a1[42] = *a2;
  a1[43] = *a2;
  a1[44] = *a2;
  a1[45] = *a2;
  a1[46] = *a2;
  a1[47] = *a2;
  a1[48] = *a2;
  a1[49] = *a2;
  a1[50] = *a2;
  a1[51] = *a2;
  a1[52] = *a2;
  a1[53] = *a2;
  a1[54] = *a2;
  a1[55] = *a2;
  a1[56] = *a2;
  a1[57] = *a2;
  a1[58] = *a2;
  a1[59] = *a2;
  a1[60] = *a2;
  a1[61] = *a2;
  a1[62] = *a2;
  a1[63] = *a2;
  a1[64] = *a2;
  a1[65] = *a2;
  a1[66] = *a2;
  a1[67] = *a2;
  a1[68] = *a2;
  a1[69] = *a2;
  a1[70] = *a2;
  a1[71] = *a2;
  a1[72] = *a2;
  a1[73] = *a2;
  a1[74] = *a2;
  a1[75] = *a2;
  a1[76] = *a2;
  a1[77] = *a2;
  a1[78] = *a2;
  a1[79] = *a2;
  a1[80] = *a2;
  a1[81] = *a2;
  a1[82] = *a2;
  a1[83] = *a2;
  a1[84] = *a2;
  a1[85] = *a2;
  a1[86] = *a2;
  a1[87] = *a2;
  a1[88] = *a2;
  a1[89] = *a2;
  a1[90] = *a2;
  a1[91] = *a2;
  a1[92] = *a2;
  a1[93] = *a2;
  a1[94] = *a2;
  result = *(float *)a2;
  a1[95] = *a2;
  return result;
}

uint64_t webrtc::NoiseSuppressor::NoiseSuppressor(uint64_t a1, int *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  int64x2_t *v7;
  float *v8;
  float *v9;
  float32x4_t v10;
  unint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  float v37[258];

  *(_QWORD *)a1 = a3 / 0x3E80;
  *(_QWORD *)(a1 + 8) = a4;
  v5 = *a2;
  if (v5 <= 3)
  {
    v6 = dword_208F0E0D0[v5];
    *(_DWORD *)(a1 + 16) = dword_208F0E0C0[v5];
    *(_DWORD *)(a1 + 20) = v6;
    *(_BYTE *)(a1 + 24) = 0x1010100u >> (8 * v5);
  }
  *(_DWORD *)(a1 + 28) = -1;
  v7 = (int64x2_t *)operator new(0x400uLL);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = v7 + 64;
  bzero(&v7->u64[1], 0x3F8uLL);
  *(_QWORD *)(a1 + 40) = v7 + 64;
  v8 = (float *)operator new(0x200uLL);
  *(_QWORD *)(a1 + 72) = v8 + 128;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_OWORD *)v8 + 12) = 0u;
  *((_OWORD *)v8 + 13) = 0u;
  *((_OWORD *)v8 + 14) = 0u;
  *((_OWORD *)v8 + 15) = 0u;
  *((_OWORD *)v8 + 16) = 0u;
  *((_OWORD *)v8 + 17) = 0u;
  *((_OWORD *)v8 + 18) = 0u;
  *((_OWORD *)v8 + 19) = 0u;
  *((_OWORD *)v8 + 20) = 0u;
  *((_OWORD *)v8 + 21) = 0u;
  *((_OWORD *)v8 + 22) = 0u;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_OWORD *)v8 + 26) = 0u;
  *((_OWORD *)v8 + 27) = 0u;
  *((_OWORD *)v8 + 28) = 0u;
  *((_OWORD *)v8 + 29) = 0u;
  *((_OWORD *)v8 + 30) = 0u;
  *((_OWORD *)v8 + 31) = 0u;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v8 + 128;
  v7->i64[0] = 0;
  bzero(v37, 0x400uLL);
  webrtc::WebRtc_rdft((webrtc *)0x100, 1, v37, v7, v8, v9, v10);
  *(_BYTE *)(a1 + 80) = 1;
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  if (v11 >= 3)
  {
    if (v11 >= 0x15555555555556)
      goto LABEL_23;
    v13 = (char *)operator new(3072 * v11);
    *(_QWORD *)(a1 + 88) = v13;
    v14 = &v13[3072 * v11];
    *(_QWORD *)(a1 + 104) = v14;
    bzero(v13, 3072 * ((3072 * v11 - 3072) / 0xC00) + 3072);
    *(_QWORD *)(a1 + 96) = v14;
    v15 = (char *)operator new(4 * v11);
    *(_QWORD *)(a1 + 112) = v15;
    v16 = &v15[4 * v11];
    *(_QWORD *)(a1 + 128) = v16;
    bzero(v15, 4 * v11);
    *(_QWORD *)(a1 + 120) = v16;
    v17 = (char *)operator new(4 * v11);
    *(_QWORD *)(a1 + 136) = v17;
    v18 = &v17[4 * v11];
    *(_QWORD *)(a1 + 152) = v18;
    bzero(v17, 4 * v11);
    *(_QWORD *)(a1 + 144) = v18;
    v19 = (char *)operator new(4 * v11);
    *(_QWORD *)(a1 + 160) = v19;
    v20 = &v19[4 * v11];
    *(_QWORD *)(a1 + 176) = v20;
    bzero(v19, 4 * v11);
    *(_QWORD *)(a1 + 168) = v20;
    *(_QWORD *)(a1 + 184) = 0;
LABEL_8:
    v21 = a1 + 16;
    v22 = 8 * v11;
    v23 = (char *)operator new(8 * v11);
    *(_QWORD *)(a1 + 184) = v23;
    v24 = &v23[v22];
    *(_QWORD *)(a1 + 200) = &v23[v22];
    bzero(v23, v22);
    v25 = 0;
    *(_QWORD *)(a1 + 192) = v24;
    while (1)
    {
      v26 = operator new();
      v27 = *(_QWORD *)a1;
      bzero((void *)v26, 0x2EE8uLL);
      *(_DWORD *)(v26 + 12008) = 500;
      *(_DWORD *)(v26 + 12044) = 1056964608;
      *(_OWORD *)(v26 + 12012) = xmmword_208F0DDB0;
      *(_OWORD *)(v26 + 12028) = xmmword_208F0DDC0;
      memset_pattern16((void *)(v26 + 12048), &memset_pattern_1, 0x204uLL);
      *(_DWORD *)(v26 + 12564) = 1056964608;
      bzero((void *)(v26 + 12568), 0x204uLL);
      *(_QWORD *)(v26 + 13088) = v21;
      memset_pattern16((void *)(v26 + 14128), &memset_pattern_3, 0x204uLL);
      bzero((void *)(v26 + 13096), 0x408uLL);
      *(_QWORD *)(v26 + 14648) = v21;
      *(_QWORD *)(v26 + 14656) = 0;
      *(_DWORD *)(v26 + 14664) = 0;
      bzero((void *)(v26 + 19828), 0x204uLL);
      memset_pattern16((void *)(v26 + 16732), &memset_pattern_0, 0x60CuLL);
      memset_pattern16((void *)(v26 + 18280), &memset_pattern_1, 0x60CuLL);
      *(_OWORD *)(v26 + 20344) = xmmword_208F0DB90;
      bzero((void *)(v26 + 14668), 0x810uLL);
      v28 = v27 - 1;
      if (!v27)
        v28 = 0;
      *(_QWORD *)(v26 + 22048) = 0;
      *(_OWORD *)(v26 + 22032) = 0u;
      if (v27 >= 2)
      {
        if (v28 >= 0xAAAAAAAAAAAAABLL)
          goto LABEL_23;
        v29 = 384 * v28;
        v30 = (char *)operator new(384 * v28);
        *(_QWORD *)(v26 + 22032) = v30;
        v31 = &v30[v29];
        *(_QWORD *)(v26 + 22048) = &v30[v29];
        bzero(v30, 384 * ((v29 - 384) / 0x180uLL) + 384);
        *(_QWORD *)(v26 + 22040) = v31;
      }
      v37[0] = 0.0;
      std::array<float,96ul>::fill[abi:sn180100]((_DWORD *)(v26 + 20876), v37);
      memset_pattern16((void *)(v26 + 20360), &unk_208F0E0B0, 0x204uLL);
      v37[0] = 0.0;
      std::array<float,96ul>::fill[abi:sn180100]((_DWORD *)(v26 + 21260), v37);
      v37[0] = 0.0;
      std::array<float,96ul>::fill[abi:sn180100]((_DWORD *)(v26 + 21644), v37);
      v32 = *(_BYTE **)(v26 + 22032);
      v33 = *(_BYTE **)(v26 + 22040);
      if (v32 != v33)
        bzero(v32, 384 * ((v33 - v32 - 384) / 0x180uLL) + 384);
      v34 = *(_QWORD *)(a1 + 184);
      if (v25 >= (*(_QWORD *)(a1 + 192) - v34) >> 3)
        break;
      v35 = *(_QWORD *)(v34 + 8 * v25);
      *(_QWORD *)(v34 + 8 * v25) = v26;
      if (v35)
      {
        v36 = *(void **)(v35 + 22032);
        if (v36)
        {
          *(_QWORD *)(v35 + 22040) = v36;
          operator delete(v36);
        }
        MEMORY[0x20BD0ADEC](v35, 0x1060C409552E4C7);
      }
      if (++v25 >= *(_QWORD *)(a1 + 8))
        return a1;
    }
    __break(1u);
LABEL_23:
    abort();
  }
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  if (v11)
    goto LABEL_8;
  return a1;
}

void *webrtc::NoiseSuppressor::Analyze(webrtc::NoiseSuppressor *this, const webrtc::AudioBuffer *a2)
{
  void *result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unint64_t v24;
  int v25;
  int v26;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  void *v32;
  float32x4_t v33;
  float *v34;
  uint64_t v35;
  const float *v36;
  const float *v37;
  const float *v38;
  const float *v39;
  const float *v40;
  const float *v41;
  const float *v42;
  const float *v43;
  const float *v44;
  const float *v45;
  const float *v46;
  const float *v47;
  const float *v48;
  const float *v49;
  const float *v50;
  const float *v51;
  const float *v52;
  const float *v53;
  const float *v54;
  const float *v55;
  const float *v56;
  const float *v57;
  const float *v58;
  const float *v59;
  const float *v60;
  const float *v61;
  const float *v62;
  const float *v63;
  const float *v64;
  const float *v65;
  float v69;
  float32x4_t v70;
  float32x4_t v71;
  uint64_t v72;
  float v73;
  float v74;
  uint64_t v75;
  unint64_t v76;
  BOOL v77;
  _BOOL4 v78;
  int v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int8x16_t v87;
  float32x4_t v88;
  float32x4_t v90;
  uint64_t v91;
  float v92;
  float v93;
  float v94;
  BOOL v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  uint64_t v104;
  float v105;
  float v106;
  float v107;
  float v108;
  _BOOL4 v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  void *v113;
  _BYTE v114[516];
  _BYTE v115[516];
  _BYTE __src[516];
  int v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  float v155;
  __int32 v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  float v194;
  float32x4_t v195[24];
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _DWORD v205[100];
  float32x4x2_t v206;
  float32x4x2_t v207;
  float32x4x2_t v208;
  float32x4x2_t v209;
  float32x4x2_t v210;
  float32x4x2_t v211;
  float32x4x2_t v212;
  float32x4x2_t v213;
  float32x4x2_t v214;
  float32x4x2_t v215;
  float32x4x2_t v216;
  float32x4x2_t v217;
  float32x4x2_t v218;
  float32x4x2_t v219;
  float32x4x2_t v220;
  float32x4x2_t v221;
  float32x4x2_t v222;
  float32x4x2_t v223;
  float32x4x2_t v224;
  float32x4x2_t v225;
  float32x4x2_t v226;
  float32x4x2_t v227;
  float32x4x2_t v228;
  float32x4x2_t v229;
  float32x4x2_t v230;
  float32x4x2_t v231;
  float32x4x2_t v232;
  float32x4x2_t v233;
  float32x4x2_t v234;
  float32x4x2_t v235;

  result = (void *)MEMORY[0x24BDAC7A8](this, a2);
  v110 = v3;
  v113 = result;
  if (*((_QWORD *)result + 1))
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v113 + 23);
      if (v4 >= (*((_QWORD *)v113 + 24) - v5) >> 3)
        break;
      result = memcpy((void *)(*(_QWORD *)(v5 + 8 * v4) + 14668), (const void *)(*(_QWORD *)(v5 + 8 * v4) + 16216), 0x204uLL);
      ++v4;
      v6 = *((_QWORD *)v113 + 1);
      if (v4 >= v6)
      {
        if (!v6)
          return result;
        v7 = 0;
        v8 = *(_QWORD *)(v110 + 80);
        if (*(_QWORD *)(v110 + 88))
          v8 = *(_QWORD *)(v110 + 88);
        v9 = *(_QWORD *)(v8 + 56);
        v10 = *(_QWORD *)(v8 + 16);
        v11 = *((_QWORD *)v113 + 23);
        while (v7 != (*((_QWORD *)v113 + 24) - v11) >> 3)
        {
          v12 = 0;
          v13 = (float *)(*(_QWORD *)(v11 + 8 * v7) + 20876);
          v14 = *(float *)(*(_QWORD *)(v11 + 8 * v7) + 20920);
          v15 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*v13 * *v13) + 0.0) + (float)(v13[1] * v13[1])) + (float)(v13[2] * v13[2])) + (float)(v13[3] * v13[3])) + (float)(v13[4] * v13[4])) + (float)(v13[5] * v13[5])) + (float)(v13[6] * v13[6])) + (float)(v13[7] * v13[7])) + (float)(v13[8] * v13[8])) + (float)(v13[9] * v13[9])) + (float)(v13[10] * v13[10]))
                                                                                              + (float)(v14 * v14))
                                                                                      + (float)(v13[12] * v13[12]))
                                                                              + (float)(v13[13] * v13[13]))
                                                                      + (float)(v13[14] * v13[14]))
                                                              + (float)(v13[15] * v13[15]))
                                                      + (float)(v13[16] * v13[16]))
                                              + (float)(v13[17] * v13[17]))
                                      + (float)(v13[18] * v13[18]))
                              + (float)(v13[19] * v13[19]))
                      + (float)(v13[20] * v13[20]))
              + (float)(v13[21] * v13[21]);
          v16 = *(float *)(*(_QWORD *)(v11 + 8 * v7) + 21008);
          v17 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v15 + (float)(v13[22] * v13[22])) + (float)(v13[23] * v13[23])) + (float)(v13[24] * v13[24])) + (float)(v13[25] * v13[25])) + (float)(v13[26] * v13[26])) + (float)(v13[27] * v13[27])) + (float)(v13[28] * v13[28])) + (float)(v13[29] * v13[29])) + (float)(v13[30] * v13[30])) + (float)(v13[31] * v13[31])) + (float)(v13[32] * v13[32]))
                                                                                              + (float)(v16 * v16))
                                                                                      + (float)(v13[34] * v13[34]))
                                                                              + (float)(v13[35] * v13[35]))
                                                                      + (float)(v13[36] * v13[36]))
                                                              + (float)(v13[37] * v13[37]))
                                                      + (float)(v13[38] * v13[38]))
                                              + (float)(v13[39] * v13[39]))
                                      + (float)(v13[40] * v13[40]))
                              + (float)(v13[41] * v13[41]))
                      + (float)(v13[42] * v13[42]))
              + (float)(v13[43] * v13[43]);
          v18 = *(float *)(*(_QWORD *)(v11 + 8 * v7) + 21096);
          v19 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v17 + (float)(v13[44] * v13[44])) + (float)(v13[45] * v13[45])) + (float)(v13[46] * v13[46])) + (float)(v13[47] * v13[47])) + (float)(v13[48] * v13[48])) + (float)(v13[49] * v13[49])) + (float)(v13[50] * v13[50]))
                                                                                              + (float)(v13[51] * v13[51]))
                                                                                      + (float)(v13[52] * v13[52]))
                                                                              + (float)(v13[53] * v13[53]))
                                                                      + (float)(v13[54] * v13[54]))
                                                              + (float)(v18 * v18))
                                                      + (float)(v13[56] * v13[56]))
                                              + (float)(v13[57] * v13[57]))
                                      + (float)(v13[58] * v13[58]))
                              + (float)(v13[59] * v13[59]))
                      + (float)(v13[60] * v13[60]))
              + (float)(v13[61] * v13[61]);
          v20 = *(float *)(*(_QWORD *)(v11 + 8 * v7) + 21128);
          v21 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v19 + (float)(v13[62] * v13[62])) + (float)(v20 * v20)) + (float)(v13[64] * v13[64])) + (float)(v13[65] * v13[65])) + (float)(v13[66] * v13[66])) + (float)(v13[67] * v13[67])) + (float)(v13[68] * v13[68])) + (float)(v13[69] * v13[69])) + (float)(v13[70] * v13[70])) + (float)(v13[71] * v13[71])) + (float)(v13[72] * v13[72]))
                                                                                              + (float)(v13[73] * v13[73]))
                                                                                      + (float)(v13[74] * v13[74]))
                                                                              + (float)(v13[75] * v13[75]))
                                                                      + (float)(v13[76] * v13[76]))
                                                              + (float)(v13[77] * v13[77]))
                                                      + (float)(v13[78] * v13[78]))
                                              + (float)(v13[79] * v13[79]))
                                      + (float)(v13[80] * v13[80]))
                              + (float)(v13[81] * v13[81]))
                      + (float)(v13[82] * v13[82]))
              + (float)(v13[83] * v13[83]);
          v22 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v21 + (float)(v13[84] * v13[84]))
                                                                                              + (float)(v13[85] * v13[85]))
                                                                                      + (float)(v13[86] * v13[86]))
                                                                              + (float)(v13[87] * v13[87]))
                                                                      + (float)(v13[88] * v13[88]))
                                                              + (float)(v13[89] * v13[89]))
                                                      + (float)(v13[90] * v13[90]))
                                              + (float)(v13[91] * v13[91]))
                                      + (float)(v13[92] * v13[92]))
                              + (float)(v13[93] * v13[93]))
                      + (float)(v13[94] * v13[94]))
              + (float)(v13[95] * v13[95]);
          do
          {
            v23 = *(float *)(*(_QWORD *)(v10 + 8 * v7 * v9) + v12);
            v22 = v22 + (float)(v23 * v23);
            v12 += 4;
          }
          while (v12 != 640);
          if (v22 > 0.0)
          {
            v24 = 0;
            v25 = *((_DWORD *)v113 + 7);
            if (v25 >= -1)
              v26 = v25 + 1;
            else
              v26 = 0;
            *((_DWORD *)v113 + 7) = v26;
            v28 = v114 < (_BYTE *)&v117 && __src < v115;
            v109 = v28;
            while (1)
            {
              v29 = *((_QWORD *)v113 + 23);
              if (v24 >= (*((_QWORD *)v113 + 24) - v29) >> 3)
                break;
              v30 = *(_QWORD *)(v110 + 88);
              if (!v30)
                v30 = *(_QWORD *)(v110 + 80);
              v31 = *(const void **)(*(_QWORD *)(v30 + 16) + 8 * *(_QWORD *)(v30 + 56) * v24);
              v111 = v24;
              v112 = *((_QWORD *)v113 + 23);
              v32 = (void *)(*(_QWORD *)(v29 + 8 * v24) + 20876);
              memcpy(v195, v32, sizeof(v195));
              memmove(&v196, v31, 0x280uLL);
              memcpy(v32, v205, 0x180uLL);
              v195[0] = vmulq_f32(v195[0], (float32x4_t)xmmword_208F0DDD0);
              v195[1] = vmulq_f32(v195[1], (float32x4_t)xmmword_208F0DDE0);
              v195[2] = vmulq_f32(v195[2], (float32x4_t)xmmword_208F0DDF0);
              v195[3] = vmulq_f32(v195[3], (float32x4_t)xmmword_208F0DE00);
              v195[4] = vmulq_f32(v195[4], (float32x4_t)xmmword_208F0DE10);
              v195[5] = vmulq_f32(v195[5], (float32x4_t)xmmword_208F0DE20);
              v195[6] = vmulq_f32(v195[6], (float32x4_t)xmmword_208F0DE30);
              v195[7] = vmulq_f32(v195[7], (float32x4_t)xmmword_208F0DE40);
              v195[8] = vmulq_f32(v195[8], (float32x4_t)xmmword_208F0DE50);
              v195[9] = vmulq_f32(v195[9], (float32x4_t)xmmword_208F0DE60);
              v195[10] = vmulq_f32(v195[10], (float32x4_t)xmmword_208F0DE70);
              v195[11] = vmulq_f32(v195[11], (float32x4_t)xmmword_208F0DE80);
              v195[12] = vmulq_f32(v195[12], (float32x4_t)xmmword_208F0DE90);
              v195[13] = vmulq_f32(v195[13], (float32x4_t)xmmword_208F0DEA0);
              v195[14] = vmulq_f32(v195[14], (float32x4_t)xmmword_208F0DEB0);
              v195[15] = vmulq_f32(v195[15], (float32x4_t)xmmword_208F0DEC0);
              v195[16] = vmulq_f32(v195[16], (float32x4_t)xmmword_208F0DED0);
              v195[17] = vmulq_f32(v195[17], (float32x4_t)xmmword_208F0DEE0);
              v195[18] = vmulq_f32(v195[18], (float32x4_t)xmmword_208F0DEF0);
              v195[19] = vmulq_f32(v195[19], (float32x4_t)xmmword_208F0DF00);
              v195[20] = vmulq_f32(v195[20], (float32x4_t)xmmword_208F0DF10);
              v195[21] = vmulq_f32(v195[21], (float32x4_t)xmmword_208F0DF20);
              v195[22] = vmulq_f32(v195[22], (float32x4_t)xmmword_208F0DF30);
              v195[23] = vmulq_f32(v195[23], (float32x4_t)xmmword_208F0DF40);
              *(float32x4_t *)&v205[1] = vmulq_f32(*(float32x4_t *)&v205[1], (float32x4_t)xmmword_208F0DF50);
              *(float32x4_t *)&v205[5] = vmulq_f32(*(float32x4_t *)&v205[5], (float32x4_t)xmmword_208F0DF60);
              *(float32x4_t *)&v205[9] = vmulq_f32(*(float32x4_t *)&v205[9], (float32x4_t)xmmword_208F0DF70);
              *(float32x4_t *)&v205[13] = vmulq_f32(*(float32x4_t *)&v205[13], (float32x4_t)xmmword_208F0DF80);
              *(float32x4_t *)&v205[17] = vmulq_f32(*(float32x4_t *)&v205[17], (float32x4_t)xmmword_208F0DF90);
              *(float32x4_t *)&v205[21] = vmulq_f32(*(float32x4_t *)&v205[21], (float32x4_t)xmmword_208F0DFA0);
              *(float32x4_t *)&v205[25] = vmulq_f32(*(float32x4_t *)&v205[25], (float32x4_t)xmmword_208F0DFB0);
              *(float32x4_t *)&v205[29] = vmulq_f32(*(float32x4_t *)&v205[29], (float32x4_t)xmmword_208F0DFC0);
              *(float32x4_t *)&v205[33] = vmulq_f32(*(float32x4_t *)&v205[33], (float32x4_t)xmmword_208F0DFD0);
              *(float32x4_t *)&v205[37] = vmulq_f32(*(float32x4_t *)&v205[37], (float32x4_t)xmmword_208F0DFE0);
              *(float32x4_t *)&v205[41] = vmulq_f32(*(float32x4_t *)&v205[41], (float32x4_t)xmmword_208F0DFF0);
              *(float32x4_t *)&v205[45] = vmulq_f32(*(float32x4_t *)&v205[45], (float32x4_t)xmmword_208F0E000);
              *(float32x4_t *)&v205[49] = vmulq_f32(*(float32x4_t *)&v205[49], (float32x4_t)xmmword_208F0E010);
              *(float32x4_t *)&v205[53] = vmulq_f32(*(float32x4_t *)&v205[53], (float32x4_t)xmmword_208F0E020);
              *(float32x4_t *)&v205[57] = vmulq_f32(*(float32x4_t *)&v205[57], (float32x4_t)xmmword_208F0E030);
              *(float32x4_t *)&v205[61] = vmulq_f32(*(float32x4_t *)&v205[61], (float32x4_t)xmmword_208F0E040);
              *(float32x4_t *)&v205[65] = vmulq_f32(*(float32x4_t *)&v205[65], (float32x4_t)xmmword_208F0E050);
              *(float32x4_t *)&v205[69] = vmulq_f32(*(float32x4_t *)&v205[69], (float32x4_t)xmmword_208F0E060);
              *(float32x4_t *)&v205[73] = vmulq_f32(*(float32x4_t *)&v205[73], (float32x4_t)xmmword_208F0E070);
              *(float32x4_t *)&v205[77] = vmulq_f32(*(float32x4_t *)&v205[77], (float32x4_t)xmmword_208F0E080);
              v33 = vmulq_f32(*(float32x4_t *)&v205[81], (float32x4_t)xmmword_208F0E090);
              *(float32x4_t *)&v205[81] = v33;
              *(float32x4_t *)&v205[85] = vmulq_f32(*(float32x4_t *)&v205[85], (float32x4_t)xmmword_208F0E0A0);
              *(float *)&v205[89] = *(float *)&v205[89] * 0.11429;
              *(float *)&v205[90] = *(float *)&v205[90] * 0.098017;
              *(float *)&v205[91] = *(float *)&v205[91] * 0.081721;
              *(float *)&v205[92] = *(float *)&v205[92] * 0.065403;
              *(float *)&v205[93] = *(float *)&v205[93] * 0.049068;
              *(float *)&v205[94] = *(float *)&v205[94] * 0.032719;
              *(float *)&v205[95] = *(float *)&v205[95] * 0.016362;
              v33.f32[0] = *(float *)&v205[95];
              webrtc::WebRtc_rdft((webrtc *)0x100, 1, v195[0].f32, *((int64x2_t **)v113 + 4), *((float **)v113 + 7), v34, v33);
              v35 = 0;
              v36 = &v195[0].f32[2];
              v206 = vld2q_f32(v36);
              v37 = &v195[2].f32[2];
              v219 = vld2q_f32(v37);
              v157 = v206.val[0];
              v158 = v219.val[0];
              v38 = &v195[4].f32[2];
              v229 = vld2q_f32(v38);
              v118 = v206.val[1];
              v119 = v219.val[1];
              v39 = &v195[6].f32[2];
              v207 = vld2q_f32(v39);
              v159 = v229.val[0];
              v160 = v207.val[0];
              v40 = &v195[8].f32[2];
              v220 = vld2q_f32(v40);
              v120 = v229.val[1];
              v121 = v207.val[1];
              v41 = &v195[10].f32[2];
              v208 = vld2q_f32(v41);
              v161 = v220.val[0];
              v162 = v208.val[0];
              v42 = &v195[12].f32[2];
              v230 = vld2q_f32(v42);
              v122 = v220.val[1];
              v123 = v208.val[1];
              v43 = &v195[14].f32[2];
              v209 = vld2q_f32(v43);
              v163 = v230.val[0];
              v164 = v209.val[0];
              v44 = &v195[16].f32[2];
              v221 = vld2q_f32(v44);
              v124 = v230.val[1];
              v125 = v209.val[1];
              v45 = &v195[18].f32[2];
              v210 = vld2q_f32(v45);
              v165 = v221.val[0];
              v166 = v210.val[0];
              v46 = &v195[20].f32[2];
              v231 = vld2q_f32(v46);
              v126 = v221.val[1];
              v127 = v210.val[1];
              v47 = &v195[22].f32[2];
              v211 = vld2q_f32(v47);
              v167 = v231.val[0];
              v168 = v211.val[0];
              v48 = (const float *)&v197;
              v222 = vld2q_f32(v48);
              v128 = v231.val[1];
              v129 = v211.val[1];
              v49 = (const float *)&v198;
              v212 = vld2q_f32(v49);
              v169 = v222.val[0];
              v170 = v212.val[0];
              v50 = (const float *)&v199;
              v232 = vld2q_f32(v50);
              v130 = v222.val[1];
              v131 = v212.val[1];
              v51 = (const float *)&v200;
              v213 = vld2q_f32(v51);
              v171 = v232.val[0];
              v172 = v213.val[0];
              v52 = (const float *)&v201;
              v223 = vld2q_f32(v52);
              v132 = v232.val[1];
              v133 = v213.val[1];
              v53 = (const float *)&v202;
              v214 = vld2q_f32(v53);
              v173 = v223.val[0];
              v174 = v214.val[0];
              v54 = (const float *)&v203;
              v233 = vld2q_f32(v54);
              v134 = v223.val[1];
              v135 = v214.val[1];
              v55 = (const float *)&v204;
              v215 = vld2q_f32(v55);
              v175 = v233.val[0];
              v176 = v215.val[0];
              v56 = (const float *)&v205[2];
              v224 = vld2q_f32(v56);
              v136 = v233.val[1];
              v137 = v215.val[1];
              v57 = (const float *)&v205[10];
              v216 = vld2q_f32(v57);
              v177 = v224.val[0];
              v178 = v216.val[0];
              v58 = (const float *)&v205[18];
              v234 = vld2q_f32(v58);
              v138 = v224.val[1];
              v139 = v216.val[1];
              v59 = (const float *)&v205[26];
              v225 = vld2q_f32(v59);
              v179 = v234.val[0];
              v180 = v225.val[0];
              v60 = (const float *)&v205[34];
              v235 = vld2q_f32(v60);
              v140 = v234.val[1];
              v141 = v225.val[1];
              v61 = (const float *)&v205[42];
              v226 = vld2q_f32(v61);
              v142 = v235.val[1];
              v143 = v226.val[1];
              v181 = v235.val[0];
              v182 = v226.val[0];
              v62 = (const float *)&v205[50];
              v217 = vld2q_f32(v62);
              v63 = (const float *)&v205[58];
              v227 = vld2q_f32(v63);
              v144 = v217.val[1];
              v145 = v227.val[1];
              v183 = v217.val[0];
              v184 = v227.val[0];
              v64 = (const float *)&v205[66];
              v228 = vld2q_f32(v64);
              v65 = (const float *)&v205[74];
              v218 = vld2q_f32(v65);
              v185 = v228.val[0];
              v186 = v218.val[0];
              v146 = v228.val[1];
              v147 = v218.val[1];
              __asm { FMOV            V0.4S, #1.0 }
              v148 = v205[83];
              v187 = v205[82];
              v188 = v205[84];
              v149 = v205[85];
              v189 = v205[86];
              v150 = v205[87];
              v190 = v205[88];
              v151 = v205[89];
              v191 = v205[90];
              v152 = v205[91];
              v192 = v205[92];
              v153 = v205[93];
              v193 = v205[94];
              v154 = v205[95];
              v194 = v195[0].f32[1];
              *(float *)&__src[512] = fabsf(v195[0].f32[1]) + 1.0;
              *(float32x4_t *)&__src[4] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v118, v118), v157, v157)), v218.val[0]);
              *(float32x4_t *)&__src[20] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v119, v119), v158, v158)), v218.val[0]);
              *(float32x4_t *)&__src[36] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v120, v120), v159, v159)), v218.val[0]);
              *(float32x4_t *)&__src[52] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v121, v121), v160, v160)), v218.val[0]);
              *(float32x4_t *)&__src[68] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v122, v122), v161, v161)), v218.val[0]);
              *(float32x4_t *)&__src[84] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v123, v123), v162, v162)), v218.val[0]);
              v156 = v195[0].i32[0];
              *(float32x4_t *)&__src[100] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v124, v124), v163, v163)), v218.val[0]);
              *(float32x4_t *)&__src[116] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v125, v125), v164, v164)), v218.val[0]);
              *(float32x4_t *)&__src[132] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v126, v126), v165, v165)), v218.val[0]);
              *(float32x4_t *)&__src[148] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v127, v127), v166, v166)), v218.val[0]);
              *(float32x4_t *)&__src[164] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v128, v128), v167, v167)), v218.val[0]);
              *(float32x4_t *)&__src[180] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v129, v129), v168, v168)), v218.val[0]);
              *(float32x4_t *)&__src[196] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v130, v130), v169, v169)), v218.val[0]);
              *(float32x4_t *)&__src[212] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v131, v131), v170, v170)), v218.val[0]);
              *(float32x4_t *)&__src[228] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v132, v132), v171, v171)), v218.val[0]);
              *(float32x4_t *)&__src[244] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v133, v133), v172, v172)), v218.val[0]);
              *(float32x4_t *)&__src[260] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v134, v134), v173, v173)), v218.val[0]);
              *(float32x4_t *)&__src[276] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v135, v135), v174, v174)), v218.val[0]);
              *(float32x4_t *)&__src[292] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v136, v136), v175, v175)), v218.val[0]);
              *(float32x4_t *)&__src[308] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v137, v137), v176, v176)), v218.val[0]);
              *(float32x4_t *)&__src[324] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v138, v138), v177, v177)), v218.val[0]);
              *(float32x4_t *)&__src[340] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v139, v139), v178, v178)), v218.val[0]);
              *(float32x4_t *)&__src[356] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v140, v140), v179, v179)), v218.val[0]);
              *(float32x4_t *)&__src[372] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v141, v141), v180, v180)), v218.val[0]);
              *(float32x4_t *)&__src[388] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v142, v142), v181, v181)), v218.val[0]);
              *(float32x4_t *)&__src[404] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v143, v143), v182, v182)), v218.val[0]);
              *(float32x4_t *)&__src[420] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v144, v144), v183, v183)), v218.val[0]);
              *(float32x4_t *)&__src[436] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v145, v145), v184, v184)), v218.val[0]);
              *(float32x4_t *)&__src[452] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v146, v146), v185, v185)), v218.val[0]);
              *(float32x4_t *)&__src[468] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v147, v147), v186, v186)), v218.val[0]);
              *(float *)__src = fabsf(v195[0].f32[0]) + 1.0;
              *(float *)&__src[484] = sqrtf((float)(*(float *)&v205[83] * *(float *)&v205[83])+ (float)(*(float *)&v205[82] * *(float *)&v205[82]))+ 1.0;
              *(float *)&__src[488] = sqrtf((float)(*(float *)&v205[85] * *(float *)&v205[85])+ (float)(*(float *)&v205[84] * *(float *)&v205[84]))+ 1.0;
              v117 = 0;
              v155 = 0.0;
              *(float *)&__src[492] = sqrtf((float)(*(float *)&v205[87] * *(float *)&v205[87])+ (float)(*(float *)&v205[86] * *(float *)&v205[86]))+ 1.0;
              *(float *)&__src[496] = sqrtf((float)(*(float *)&v205[89] * *(float *)&v205[89])+ (float)(*(float *)&v205[88] * *(float *)&v205[88]))+ 1.0;
              *(float *)&__src[500] = sqrtf((float)(*(float *)&v205[91] * *(float *)&v205[91])+ (float)(*(float *)&v205[90] * *(float *)&v205[90]))+ 1.0;
              *(float *)&__src[504] = sqrtf((float)(*(float *)&v205[93] * *(float *)&v205[93])+ (float)(*(float *)&v205[92] * *(float *)&v205[92]))+ 1.0;
              v69 = 0.0;
              *(float *)&__src[508] = sqrtf((float)(*(float *)&v205[95] * *(float *)&v205[95])+ (float)(*(float *)&v205[94] * *(float *)&v205[94]))+ 1.0;
              do
              {
                v70 = vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)&v117 + v35), *(float32x4_t *)((char *)&v117 + v35)), *(float32x4_t *)((char *)&v156 + v35), *(float32x4_t *)((char *)&v156 + v35));
                v71 = vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)&v118 + v35 + 12), *(float32x4_t *)((char *)&v118 + v35 + 12)), *(float32x4_t *)((char *)&v157 + v35 + 12), *(float32x4_t *)((char *)&v157 + v35 + 12));
                v69 = (float)((float)((float)((float)((float)((float)((float)(v69 + v70.f32[0]) + v70.f32[1])
                                                            + v70.f32[2])
                                                    + v70.f32[3])
                                            + v71.f32[0])
                                    + v71.f32[1])
                            + v71.f32[2])
                    + v71.f32[3];
                v35 += 32;
              }
              while (v35 != 512);
              v72 = 0;
              v73 = v69 + (float)((float)(v155 * v155) + (float)(v194 * v194));
              v74 = 0.0;
              do
              {
                v74 = v74 + *(float *)&__src[v72];
                v72 += 4;
              }
              while (v72 != 516);
              webrtc::NoiseEstimator::PreUpdate((float32x4_t *)(*(_QWORD *)(v112 + 8 * v24) + 14648), *((_DWORD *)v113 + 7), (uint32x4_t *)__src, v74);
              v75 = *(_QWORD *)(v112 + 8 * v24);
              v76 = v75 + 14128;
              v77 = (unint64_t)v115 >= v75 + 20876 || v76 >= (unint64_t)__src;
              v78 = !v77;
              v80 = (unint64_t)v114 < v75 + 20876 && v76 < (unint64_t)v115 || v78;
              if (((v80 | v109) & 1) != 0)
              {
                v81 = 0;
              }
              else
              {
                v82 = -512;
                do
                {
                  v83 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
                  v84 = vmulq_f32(*(float32x4_t *)(v75 + v82 + 14640), vdivq_f32(*(float32x4_t *)(v75 + 20360 + v82 + 512), vaddq_f32(*(float32x4_t *)(v75 + 14668 + v82 + 512), v83)));
                  v85 = *(float32x4_t *)&__src[v82 + 512];
                  v86 = *(float32x4_t *)(v75 + 16216 + v82 + 512);
                  v87 = (int8x16_t)vcgtq_f32(v85, v86);
                  v88 = vdivq_f32(v85, vaddq_f32(v86, v83));
                  __asm { FMOV            V2.4S, #-1.0 }
                  v90 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(v88, _Q2), v87);
                  *(float32x4_t *)&v115[v82 + 512] = v90;
                  *(float32x4_t *)&v114[v82 + 512] = vmlaq_f32(vmulq_f32(v90, (float32x4_t)vdupq_n_s32(0x3CA3D700u)), (float32x4_t)vdupq_n_s32(0x3F7AE148u), v84);
                  v82 += 16;
                }
                while (v82);
                v81 = 128;
              }
              v91 = 4 * v81;
              do
              {
                v92 = *(float *)(v76 + v91)
                    * (float)(*(float *)(v76 + v91 + 6232) / (float)(*(float *)(v76 + v91 + 540) + 0.0001));
                v93 = *(float *)&__src[v91];
                v94 = *(float *)(v76 + v91 + 2088);
                v95 = v93 <= v94;
                v96 = (float)(v93 / (float)(v94 + 0.0001)) + -1.0;
                if (v95)
                  v96 = 0.0;
                *(float *)&v115[v91] = v96;
                *(float *)&v114[v91] = (float)(v96 * 0.02) + (float)(v92 * 0.98);
                v91 += 4;
              }
              while (v91 != 516);
              webrtc::SpeechProbabilityEstimator::Update(*(float **)(v112 + 8 * v24), *((_DWORD *)v113 + 7), (unint64_t)v114, (unint64_t)v115, *(_QWORD *)(v112 + 8 * v24) + 15184, (float *)__src, v74, v73 / 129.0);
              v97 = 0;
              v98 = *(_QWORD *)(v112 + 8 * v24) + 12568;
              v99 = 0.9;
              do
              {
                v104 = v98 + v97;
                v105 = *(float *)(v98 + v97);
                v106 = *(float *)&__src[v97];
                v107 = *(float *)(v98 + v97 + 2100);
                v108 = 0.9;
                if (v105 > 0.2)
                  v108 = 0.99;
                if (v105 < 0.2)
                  *(float *)(v104 + 2616) = *(float *)(v104 + 2616)
                                          + (float)((float)(v106 - *(float *)(v104 + 2616)) * 0.05);
                v100 = (float)(v105 * v107) + (float)((float)(1.0 - v105) * v106);
                v101 = (float)((float)(1.0 - v99) * v100) + (float)(v99 * v107);
                v102 = (float)((float)(1.0 - v108) * v100) + (float)(v108 * v107);
                if (v101 < v102)
                  v102 = v101;
                if (v108 == v99)
                  v103 = v101;
                else
                  v103 = v102;
                *(float *)(v104 + 3648) = v103;
                v97 += 4;
                v99 = v108;
              }
              while (v97 != 516);
              result = memcpy((void *)(*(_QWORD *)(v112 + 8 * v24++) + 20360), __src, 0x204uLL);
              if (v111 + 1 >= *((_QWORD *)v113 + 1))
                return result;
            }
            goto LABEL_62;
          }
          if (++v7 == v6)
            return result;
        }
        break;
      }
    }
LABEL_62:
    __break(1u);
  }
  return result;
}

void webrtc::NoiseSuppressor::Process(webrtc::NoiseSuppressor *this, webrtc::AudioBuffer *a2)
{
  uint64_t v2;
  float32x4_t *v3;
  float32x4_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t *v9;
  float32x4_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float *v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t *v35;
  float v36;
  __int32 v37;
  float32x4_t *v38;
  uint64_t i;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  float *v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  const float *v65;
  float32x4_t v66;
  int8x16_t v67;
  uint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  unint64_t v77;
  uint64_t v78;
  float *v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  uint64_t v87;
  const float *v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x16_t v91;
  float32x4_t *v92;
  uint64_t v93;
  float32x4_t *v94;
  float32x4_t v95;
  float32x4_t *v96;
  float32x4_t v97;
  float32x4_t *v98;
  int8x16_t v99;
  int8x16_t v100;
  uint64_t v101;
  float v102;
  float v103;
  float *v104;
  float32x4_t v105;
  uint64_t v106;
  float *v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float *v114;
  float32x4_t *v115;
  float32x4_t *v116;
  uint64_t v117;
  uint64_t v118;
  int8x16_t v119;
  float32x4_t *v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  float32_t v149;
  uint64_t v150;
  float32x4_t *v151;
  unint64_t v152;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  uint64_t v218;
  uint64_t v219;
  float *v220;
  unint64_t v221;
  float32x4_t *v222;
  float32x4_t *v223;
  float32x4_t *v224;
  float32x4_t *v225;
  uint64_t j;
  int v227;
  __int32 *v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  uint64_t v262;
  uint64_t v263;
  float32x4_t *v264;
  float v265;
  uint64_t v266;
  float32x4_t *v267;
  unint64_t v268;
  float32x4_t *v269;
  unint64_t v270;
  float32x4_t *v271;
  float v272;
  uint64_t k;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  uint64_t v286;
  uint64_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t *v298;
  float32x4_t v299;
  uint64_t v300;
  float *v301;
  float v302;
  uint64_t v303;
  uint64_t v304;
  float v306;
  float v307;
  float v308;
  float v309;
  unint64_t v310;
  float *v311;
  float v312;
  float v313;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v361;
  float32x4_t v362;
  unint64_t v363;
  float32x4_t *v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t *v377;
  float32x4_t *v378;
  BOOL v379;
  uint64_t m;
  float v381;
  unint64_t v382;
  float *v383;
  float v384;
  float v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  float32x4_t *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t v397;
  int8x16_t v398;
  int8x16_t v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  int8x16_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int8x16_t v406;
  int8x16_t v407;
  int8x16_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  int8x16_t v412;
  int8x16_t v413;
  int8x16_t v414;
  int8x16_t v415;
  int8x16_t v416;
  int8x16_t v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int8x16_t v428;
  int8x16_t v429;
  int8x16_t v430;
  int8x16_t v431;
  int8x16_t v432;
  int8x16_t v433;
  int8x16_t v434;
  int8x16_t v435;
  int8x16_t v436;
  int8x16_t v437;
  int8x16_t v438;
  int8x16_t v439;
  int8x16_t v440;
  int8x16_t v441;
  int8x16_t v442;
  int8x16_t v443;
  int8x16_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t *v448;
  uint64_t v449;
  int8x16_t v450;
  int8x16_t v451;
  uint64_t *v452;
  uint64_t v453;
  uint64_t v454;
  int8x16_t v455;
  int8x16_t v456;
  int8x16_t v457;
  int8x16_t v458;
  int8x16_t v459;
  int8x16_t v460;
  int8x16_t v461;
  int8x16_t v462;
  int8x16_t v463;
  int8x16_t v464;
  int8x16_t v465;
  int8x16_t v466;
  int8x16_t v467;
  int8x16_t v468;
  int8x16_t v469;
  int8x16_t v470;
  int8x16_t v471;
  int8x16_t v472;
  int8x16_t v473;
  int8x16_t v474;
  int8x16_t v475;
  int8x16_t v476;
  int8x16_t v477;
  int8x16_t v478;
  int8x16_t v479;
  int8x16_t v480;
  int8x16_t v481;
  int8x16_t v482;
  int8x16_t v483;
  int8x16_t v484;
  int8x16_t v485;
  int8x16_t v486;
  int8x16_t v487;
  int8x16_t v488;
  int8x16_t v489;
  int8x16_t v490;
  int8x16_t v491;
  int8x16_t v492;
  int8x16_t v493;
  int8x16_t v494;
  int8x16_t v495;
  int8x16_t v496;
  float *v497;
  float *v498;
  float v499;
  uint64_t v500;
  float32x4_t v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  float32x4_t v506;
  float v507;
  float32x4_t v508;
  int8x16_t v509;
  float32x4_t v510;
  int8x16_t v511;
  float32x4_t v512;
  int8x16_t v513;
  float32x4_t v514;
  int8x16_t v515;
  float32x4_t v516;
  int8x16_t v517;
  float32x4_t v518;
  int8x16_t v519;
  float32x4_t v520;
  int8x16_t v521;
  float32x4_t v522;
  int8x16_t v523;
  float32x4_t v524;
  int8x16_t v525;
  float32x4_t v526;
  int8x16_t v527;
  float32x4_t v528;
  int8x16_t v529;
  float32x4_t v530;
  int8x16_t v531;
  float32x4_t v532;
  int8x16_t v533;
  float32x4_t v534;
  int8x16_t v535;
  float32x4_t v536;
  int8x16_t v537;
  float32x4_t v538;
  int8x16_t v539;
  float32x4_t v540;
  int8x16_t v541;
  float32x4_t v542;
  int8x16_t v543;
  float32x4_t v544;
  int8x16_t v545;
  float32x4_t v546;
  int8x16_t v547;
  float32x4_t v548;
  int8x16_t v549;
  float32x4_t v550;
  int8x16_t v551;
  float32x4_t v552;
  int8x16_t v553;
  float32x4_t v554;
  int8x16_t v555;
  float32x4_t v556;
  int8x16_t v557;
  float32x4_t v558;
  int8x16_t v559;
  float32x4_t v560;
  int8x16_t v561;
  float32x4_t v562;
  int8x16_t v563;
  float32x4_t v564;
  int8x16_t v565;
  float32x4_t v566;
  char *v567;
  float32x4_t v568;
  float32x4_t *v569;
  int8x16_t v570;
  float32x4_t v571;
  float32x4_t *v572;
  int8x16_t v573;
  float32x4_t v574;
  unint64_t v575;
  int8x16_t v576;
  float32x4_t v577;
  _BYTE __src[516];
  char v579;
  char v580;
  char v581;
  char v582;

  v2 = MEMORY[0x24BDAC7A8](this, a2);
  v4 = v3;
  v5 = v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = (uint64_t)&unk_208F0D000;
  v8 = (float32x4_t *)&unk_208F0D000;
  v9 = (float32x4_t *)&unk_208F0D000;
  v500 = v2;
  if (v6 >= 3)
  {
    v569 = v3;
    v10 = *(float32x4_t **)(v2 + 88);
    v498 = *(float **)(v2 + 112);
    v567 = *(char **)(v2 + 136);
    v497 = *(float **)(v2 + 160);
  }
  else
  {
    if (!v6)
    {
      if (!*(_BYTE *)(v2 + 80))
        return;
      v115 = 0;
      v114 = 0;
      v567 = 0;
      v497 = 0;
      v12 = 0;
      v117 = *(_QWORD *)(v2 + 184);
      v13 = *(_QWORD *)(v2 + 192);
      v118 = v13 - v117;
      if (v13 == v117)
        goto LABEL_162;
      goto LABEL_61;
    }
    v569 = v3;
    v497 = (float *)&v579;
    v567 = &v580;
    v498 = (float *)&v581;
    v10 = (float32x4_t *)&v582;
  }
  v4 = v10 + 128;
  v11 = 0;
  v572 = v10;
  do
  {
    v13 = v569[5].u64[1];
    if (!v13)
      v13 = v569[5].u64[0];
    v7 = *(_QWORD *)(v5 + 184);
    if (v11 >= (*(_QWORD *)(v5 + 192) - v7) >> 3)
      goto LABEL_162;
    v14 = *(const void **)(*(_QWORD *)(v13 + 16) + 8 * *(_QWORD *)(v13 + 56) * v11);
    v15 = *(_QWORD *)(v7 + 8 * v11);
    v16 = v11;
    v17 = (void *)(v15 + 21260);
    v575 = v16;
    v18 = &v572[192 * v16];
    v19 = v18 + 128;
    memmove(&v18[128], (const void *)(v15 + 21260), 0x180uLL);
    memmove(&v18[152], v14, 0x280uLL);
    memmove(v17, &v18[168], 0x180uLL);
    v21 = 0;
    v22 = vmulq_f32(v18[129], (float32x4_t)xmmword_208F0DDE0);
    v18[128] = vmulq_f32(v18[128], (float32x4_t)xmmword_208F0DDD0);
    v18[129] = v22;
    v23 = vmulq_f32(v18[131], (float32x4_t)xmmword_208F0DE00);
    v18[130] = vmulq_f32(v18[130], (float32x4_t)xmmword_208F0DDF0);
    v18[131] = v23;
    v24 = vmulq_f32(v18[133], (float32x4_t)xmmword_208F0DE20);
    v18[132] = vmulq_f32(v18[132], (float32x4_t)xmmword_208F0DE10);
    v18[133] = v24;
    v25 = vmulq_f32(v18[135], (float32x4_t)xmmword_208F0DE40);
    v18[134] = vmulq_f32(v18[134], (float32x4_t)xmmword_208F0DE30);
    v18[135] = v25;
    v26 = vmulq_f32(v18[137], (float32x4_t)xmmword_208F0DE60);
    v18[136] = vmulq_f32(v18[136], (float32x4_t)xmmword_208F0DE50);
    v18[137] = v26;
    v27 = vmulq_f32(v18[139], (float32x4_t)xmmword_208F0DE80);
    v18[138] = vmulq_f32(v18[138], (float32x4_t)xmmword_208F0DE70);
    v18[139] = v27;
    v28 = vmulq_f32(v18[141], (float32x4_t)xmmword_208F0DEA0);
    v18[140] = vmulq_f32(v18[140], (float32x4_t)xmmword_208F0DE90);
    v18[141] = v28;
    v29 = vmulq_f32(v18[143], (float32x4_t)xmmword_208F0DEC0);
    v18[142] = vmulq_f32(v18[142], (float32x4_t)xmmword_208F0DEB0);
    v18[143] = v29;
    v30 = vmulq_f32(v18[145], (float32x4_t)xmmword_208F0DEE0);
    v18[144] = vmulq_f32(v18[144], (float32x4_t)xmmword_208F0DED0);
    v18[145] = v30;
    v31 = vmulq_f32(v18[147], (float32x4_t)xmmword_208F0DF00);
    v18[146] = vmulq_f32(v18[146], (float32x4_t)xmmword_208F0DEF0);
    v18[147] = v31;
    v32 = vmulq_f32(v18[149], (float32x4_t)xmmword_208F0DF20);
    v18[148] = vmulq_f32(v18[148], (float32x4_t)xmmword_208F0DF10);
    v18[149] = v32;
    v33 = vmulq_f32(v18[151], (float32x4_t)xmmword_208F0DF40);
    v18[150] = vmulq_f32(v18[150], (float32x4_t)xmmword_208F0DF30);
    v18[151] = v33;
    *(float32x4_t *)((char *)v18 + 2692) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2692), (float32x4_t)xmmword_208F0DF50);
    *(float32x4_t *)((char *)v18 + 2708) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2708), (float32x4_t)xmmword_208F0DF60);
    *(float32x4_t *)((char *)v18 + 2724) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2724), (float32x4_t)xmmword_208F0DF70);
    *(float32x4_t *)((char *)v18 + 2740) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2740), (float32x4_t)xmmword_208F0DF80);
    *(float32x4_t *)((char *)v18 + 2756) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2756), (float32x4_t)xmmword_208F0DF90);
    *(float32x4_t *)((char *)v18 + 2772) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2772), (float32x4_t)xmmword_208F0DFA0);
    *(float32x4_t *)((char *)v18 + 2788) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2788), (float32x4_t)xmmword_208F0DFB0);
    *(float32x4_t *)((char *)v18 + 2804) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2804), (float32x4_t)xmmword_208F0DFC0);
    *(float32x4_t *)((char *)v18 + 2820) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2820), (float32x4_t)xmmword_208F0DFD0);
    *(float32x4_t *)((char *)v18 + 2836) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2836), (float32x4_t)xmmword_208F0DFE0);
    *(float32x4_t *)((char *)v18 + 2852) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2852), (float32x4_t)xmmword_208F0DFF0);
    *(float32x4_t *)((char *)v18 + 2868) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2868), (float32x4_t)xmmword_208F0E000);
    *(float32x4_t *)((char *)v18 + 2884) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2884), (float32x4_t)xmmword_208F0E010);
    *(float32x4_t *)((char *)v18 + 2900) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2900), (float32x4_t)xmmword_208F0E020);
    *(float32x4_t *)((char *)v18 + 2916) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2916), (float32x4_t)xmmword_208F0E030);
    *(float32x4_t *)((char *)v18 + 2932) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2932), (float32x4_t)xmmword_208F0E040);
    *(float32x4_t *)((char *)v18 + 2948) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2948), (float32x4_t)xmmword_208F0E050);
    *(float32x4_t *)((char *)v18 + 2964) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2964), (float32x4_t)xmmword_208F0E060);
    *(float32x4_t *)((char *)v18 + 2980) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2980), (float32x4_t)xmmword_208F0E070);
    *(float32x4_t *)((char *)v18 + 2996) = vmulq_f32(*(float32x4_t *)((char *)v18 + 2996), (float32x4_t)xmmword_208F0E080);
    *(float32x4_t *)((char *)v18 + 3012) = vmulq_f32(*(float32x4_t *)((char *)v18 + 3012), (float32x4_t)xmmword_208F0E090);
    v34 = vmulq_f32(*(float32x4_t *)((char *)v18 + 3028), (float32x4_t)xmmword_208F0E0A0);
    *(float32x4_t *)((char *)v18 + 3028) = v34;
    v18[190].f32[1] = v18[190].f32[1] * 0.11429;
    v18[190].f32[2] = v18[190].f32[2] * 0.098017;
    v18[190].f32[3] = v18[190].f32[3] * 0.081721;
    v18[191].f32[0] = v18[191].f32[0] * 0.065403;
    v18[191].f32[1] = v18[191].f32[1] * 0.049068;
    v18[191].f32[2] = v18[191].f32[2] * 0.032719;
    v18[191].f32[3] = v18[191].f32[3] * 0.016362;
    v34.i32[0] = 0;
    do
    {
      v34.f32[0] = v34.f32[0] + (float)(v4->f32[v21] * v4->f32[v21]);
      ++v21;
    }
    while (v21 != 256);
    v35 = &v572[192 * v575];
    *(_DWORD *)&v567[4 * v575] = v34.i32[0];
    v5 = v500;
    webrtc::WebRtc_rdft((webrtc *)0x100, 1, v19->f32, *(int64x2_t **)(v500 + 32), *(float **)(v500 + 56), v20, v34);
    v35[64].i32[0] = 0;
    v36 = v19->f32[0];
    v37 = v19->i32[1];
    v35->i32[0] = v19->i32[0];
    v35[96].i32[0] = 0;
    v35[32].i32[0] = v37;
    v38 = v10;
    for (i = 514; i != 768; i += 2)
    {
      v38->i32[1] = v10->i32[i];
      v38 = (float32x4_t *)((char *)v38 + 4);
      v38[64].i32[0] = v10->i32[i + 1];
    }
    *(float *)__src = fabsf(v36) + 1.0;
    *(float *)&__src[512] = fabsf(v35[32].f32[0]) + 1.0;
    __asm { FMOV            V0.4S, #1.0 }
    v43 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1044), *(float32x4_t *)((char *)v35 + 1044)), *(float32x4_t *)((char *)v35 + 20), *(float32x4_t *)((char *)v35 + 20))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[4] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1028), *(float32x4_t *)((char *)v35 + 1028)), *(float32x4_t *)((char *)v35 + 4), *(float32x4_t *)((char *)v35 + 4))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[20] = v43;
    v44 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1076), *(float32x4_t *)((char *)v35 + 1076)), *(float32x4_t *)((char *)v35 + 52), *(float32x4_t *)((char *)v35 + 52))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[36] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1060), *(float32x4_t *)((char *)v35 + 1060)), *(float32x4_t *)((char *)v35 + 36), *(float32x4_t *)((char *)v35 + 36))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[52] = v44;
    v45 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1108), *(float32x4_t *)((char *)v35 + 1108)), *(float32x4_t *)((char *)v35 + 84), *(float32x4_t *)((char *)v35 + 84))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[68] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1092), *(float32x4_t *)((char *)v35 + 1092)), *(float32x4_t *)((char *)v35 + 68), *(float32x4_t *)((char *)v35 + 68))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[84] = v45;
    v46 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1140), *(float32x4_t *)((char *)v35 + 1140)), *(float32x4_t *)((char *)v35 + 116), *(float32x4_t *)((char *)v35 + 116))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[100] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1124), *(float32x4_t *)((char *)v35 + 1124)), *(float32x4_t *)((char *)v35 + 100), *(float32x4_t *)((char *)v35 + 100))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[116] = v46;
    v47 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1172), *(float32x4_t *)((char *)v35 + 1172)), *(float32x4_t *)((char *)v35 + 148), *(float32x4_t *)((char *)v35 + 148))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[132] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1156), *(float32x4_t *)((char *)v35 + 1156)), *(float32x4_t *)((char *)v35 + 132), *(float32x4_t *)((char *)v35 + 132))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[148] = v47;
    v48 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1204), *(float32x4_t *)((char *)v35 + 1204)), *(float32x4_t *)((char *)v35 + 180), *(float32x4_t *)((char *)v35 + 180))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[164] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1188), *(float32x4_t *)((char *)v35 + 1188)), *(float32x4_t *)((char *)v35 + 164), *(float32x4_t *)((char *)v35 + 164))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[180] = v48;
    v49 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1236), *(float32x4_t *)((char *)v35 + 1236)), *(float32x4_t *)((char *)v35 + 212), *(float32x4_t *)((char *)v35 + 212))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[196] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1220), *(float32x4_t *)((char *)v35 + 1220)), *(float32x4_t *)((char *)v35 + 196), *(float32x4_t *)((char *)v35 + 196))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[212] = v49;
    v50 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1268), *(float32x4_t *)((char *)v35 + 1268)), *(float32x4_t *)((char *)v35 + 244), *(float32x4_t *)((char *)v35 + 244))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[228] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1252), *(float32x4_t *)((char *)v35 + 1252)), *(float32x4_t *)((char *)v35 + 228), *(float32x4_t *)((char *)v35 + 228))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[244] = v50;
    v51 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1300), *(float32x4_t *)((char *)v35 + 1300)), *(float32x4_t *)((char *)v35 + 276), *(float32x4_t *)((char *)v35 + 276))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[260] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1284), *(float32x4_t *)((char *)v35 + 1284)), *(float32x4_t *)((char *)v35 + 260), *(float32x4_t *)((char *)v35 + 260))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[276] = v51;
    v52 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1332), *(float32x4_t *)((char *)v35 + 1332)), *(float32x4_t *)((char *)v35 + 308), *(float32x4_t *)((char *)v35 + 308))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[292] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1316), *(float32x4_t *)((char *)v35 + 1316)), *(float32x4_t *)((char *)v35 + 292), *(float32x4_t *)((char *)v35 + 292))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[308] = v52;
    v53 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1364), *(float32x4_t *)((char *)v35 + 1364)), *(float32x4_t *)((char *)v35 + 340), *(float32x4_t *)((char *)v35 + 340))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[324] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1348), *(float32x4_t *)((char *)v35 + 1348)), *(float32x4_t *)((char *)v35 + 324), *(float32x4_t *)((char *)v35 + 324))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[340] = v53;
    v54 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1396), *(float32x4_t *)((char *)v35 + 1396)), *(float32x4_t *)((char *)v35 + 372), *(float32x4_t *)((char *)v35 + 372))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[356] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1380), *(float32x4_t *)((char *)v35 + 1380)), *(float32x4_t *)((char *)v35 + 356), *(float32x4_t *)((char *)v35 + 356))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[372] = v54;
    v55 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1428), *(float32x4_t *)((char *)v35 + 1428)), *(float32x4_t *)((char *)v35 + 404), *(float32x4_t *)((char *)v35 + 404))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[388] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1412), *(float32x4_t *)((char *)v35 + 1412)), *(float32x4_t *)((char *)v35 + 388), *(float32x4_t *)((char *)v35 + 388))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[404] = v55;
    v56 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1460), *(float32x4_t *)((char *)v35 + 1460)), *(float32x4_t *)((char *)v35 + 436), *(float32x4_t *)((char *)v35 + 436))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[420] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1444), *(float32x4_t *)((char *)v35 + 1444)), *(float32x4_t *)((char *)v35 + 420), *(float32x4_t *)((char *)v35 + 420))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[436] = v56;
    v57 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1492), *(float32x4_t *)((char *)v35 + 1492)), *(float32x4_t *)((char *)v35 + 468), *(float32x4_t *)((char *)v35 + 468))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[452] = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v35 + 1476), *(float32x4_t *)((char *)v35 + 1476)), *(float32x4_t *)((char *)v35 + 452), *(float32x4_t *)((char *)v35 + 452))), (float32x4_t)_Q0);
    *(float32x4_t *)&__src[468] = v57;
    *(float *)&__src[484] = sqrtf((float)(v35[94].f32[1] * v35[94].f32[1]) + (float)(v35[30].f32[1] * v35[30].f32[1]))
                          + 1.0;
    *(float *)&__src[488] = sqrtf((float)(v35[94].f32[2] * v35[94].f32[2]) + (float)(v35[30].f32[2] * v35[30].f32[2]))
                          + 1.0;
    *(float *)&__src[492] = sqrtf((float)(v35[94].f32[3] * v35[94].f32[3]) + (float)(v35[30].f32[3] * v35[30].f32[3]))
                          + 1.0;
    *(float *)&__src[496] = sqrtf((float)(v35[95].f32[0] * v35[95].f32[0]) + (float)(v35[31].f32[0] * v35[31].f32[0]))
                          + 1.0;
    *(float *)&__src[500] = sqrtf((float)(v35[95].f32[1] * v35[95].f32[1]) + (float)(v35[31].f32[1] * v35[31].f32[1]))
                          + 1.0;
    *(float *)&__src[504] = sqrtf((float)(v35[95].f32[2] * v35[95].f32[2]) + (float)(v35[31].f32[2] * v35[31].f32[2]))
                          + 1.0;
    *(float *)&__src[508] = sqrtf((float)(v35[95].f32[3] * v35[95].f32[3]) + (float)(v35[31].f32[3] * v35[31].f32[3]))
                          + 1.0;
    v13 = *(_QWORD *)(v500 + 184);
    v7 = *(_QWORD *)(v500 + 192) - v13;
    if (v575 >= v7 >> 3)
      goto LABEL_162;
    v58 = *(_QWORD *)(v13 + 8 * v575);
    v59 = (char *)(v58 + 13096);
    v60 = *(_DWORD *)(v500 + 28);
    v61 = *(float **)(v58 + 13088);
    v62 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    if (v58 + 13096 >= (unint64_t)(v61 + 2) || (unint64_t)v61 >= v58 + 16732)
    {
      v64 = 0;
      v65 = *(const float **)(v58 + 13088);
      v66 = vld1q_dup_f32(v65++);
      v67 = (int8x16_t)vld1q_dup_f32(v65);
      v68 = v58 + 13096;
      do
      {
        v69 = *(float32x4_t *)&__src[v64];
        v70 = *(float32x4_t *)(v68 + 3120);
        v71 = (int8x16_t)vcgtq_f32(v69, v70);
        v72 = vdivq_f32(v69, vaddq_f32(v70, v62));
        __asm { FMOV            V7.4S, #-1.0 }
        v74 = vmlaq_f32((float32x4_t)vandq_s8((int8x16_t)vmulq_f32(vaddq_f32(v72, _Q7), (float32x4_t)vdupq_n_s32(0x3CA3D700u)), v71), (float32x4_t)vdupq_n_s32(0x3F7AE148u), vmulq_f32(*(float32x4_t *)(v68 + 1032), vdivq_f32(*(float32x4_t *)v68, vaddq_f32(*(float32x4_t *)(v68 + 1572), v62))));
        v75 = (int8x16_t)vdivq_f32(v74, vaddq_f32(v66, v74));
        v76 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v75, (float32x4_t)_Q0), _Q0, v75);
        *(int8x16_t *)(v68 + 1032) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v67, (float32x4_t)v76), v67, v76);
        v68 += 16;
        v64 += 16;
      }
      while (v64 != 512);
      v63 = 128;
    }
    else
    {
      v63 = 0;
    }
    v77 = v58 + 13612;
    v78 = 4 * v63;
    do
    {
      v79 = (float *)&v59[v78];
      v80 = *(float *)&__src[v78];
      v81 = *(float *)&v59[v78 + 3120];
      v379 = v80 <= v81;
      v83 = (float)(v80 / (float)(v81 + 0.0001)) + -1.0;
      if (v379)
        v83 = 0.0;
      v82 = *(float *)&v59[v78 + 1032] * (float)(*(float *)&v59[v78] / (float)(*(float *)&v59[v78 + 1572] + 0.0001));
      v84 = (float)((float)(v83 * 0.02) + (float)(v82 * 0.98))
          / (float)(*v61 + (float)((float)(v83 * 0.02) + (float)(v82 * 0.98)));
      v79[258] = v84;
      if (v84 > 1.0)
        v84 = 1.0;
      if (v84 < v61[1])
        v84 = v61[1];
      v79[258] = v84;
      v78 += 4;
    }
    while (v78 != 516);
    if (v60 <= 49)
    {
      v85 = (float)(50 - v60);
      v86 = (float)v60;
      if (v77 >= (unint64_t)(v61 + 2) || (unint64_t)v61 >= v58 + 16216)
      {
        v88 = v61;
        v89 = vld1q_dup_f32(v88++);
        v90 = vnegq_f32(v89);
        v91 = (int8x16_t)vld1q_dup_f32(v88);
        v92 = (float32x4_t *)__src;
        v93 = 128;
        v94 = (float32x4_t *)v77;
        do
        {
          v95 = *v92++;
          v96 = (float32x4_t *)((char *)v94 + 516);
          v97 = vaddq_f32(v95, *v94);
          v98 = (float32x4_t *)((char *)v94 + 2088);
          *v94++ = v97;
          v99 = (int8x16_t)vdivq_f32(vmlaq_f32(v97, *v98, v90), vaddq_f32(v97, v62));
          v100 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v99, (float32x4_t)_Q0), _Q0, v99);
          *v96 = vmulq_f32(vaddq_f32(vmulq_n_f32(*v96, v86), vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v91, (float32x4_t)v100), v91, v100), v85)), (float32x4_t)vdupq_n_s32(0x3CA3D70Au));
          v93 -= 4;
        }
        while (v93);
        v87 = 128;
      }
      else
      {
        v87 = 0;
      }
      v101 = 4 * v87;
      do
      {
        v102 = *(float *)&__src[v101] + *(float *)(v77 + v101);
        *(float *)(v77 + v101) = v102;
        v103 = (float)(v102 - (float)(*v61 * *(float *)(v77 + v101 + 2088))) / (float)(v102 + 0.0001);
        if (v103 > 1.0)
          v103 = 1.0;
        if (v103 < v61[1])
          v103 = v61[1];
        *(float *)(v77 + v101 + 516) = (float)((float)(*(float *)(v77 + v101 + 516) * v86) + (float)(v103 * v85)) * 0.02;
        v101 += 4;
      }
      while (v101 != 516);
    }
    memcpy(v59, __src, 0x204uLL);
    if (*(_QWORD *)v500 >= 2uLL)
    {
      v7 = *(_QWORD *)(v500 + 184);
      v13 = *(_QWORD *)(v500 + 192) - v7;
      if (v575 >= (uint64_t)v13 >> 3)
        goto LABEL_162;
      v106 = 0;
      v107 = *(float **)(v7 + 8 * v575);
      v108 = 0.0;
      v109 = 0.0;
      v110 = *(float *)(v500 + 20);
      do
      {
        v109 = v109 + v107[v106 + 5090];
        v108 = v108 + *(float *)&__src[v106 * 4];
        ++v106;
      }
      while (v106 != 129);
      v111 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v107[3628] + 0.0) + v107[3629]) + v107[3630]) + v107[3631]) + v107[3632]) + v107[3633]) + v107[3634]) + v107[3635]) + v107[3636]) + v107[3637]) + v107[3638]) + v107[3639]) + v107[3640]) + v107[3641]) + v107[3642]) + v107[3643]) + v107[3644]) + v107[3645]) + v107[3646]) + v107[3647]) + v107[3648]) + v107[3649])
                                                                                           + v107[3650])
                                                                                   + v107[3651])
                                                                           + v107[3652])
                                                                   + v107[3653])
                                                           + v107[3654])
                                                   + v107[3655])
                                           + v107[3656])
                                   + v107[3657])
                           + v107[3658])
                   + v107[3659])
           * 0.03125;
      v112 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v107[3238] + 0.0) + v107[3239]) + v107[3240]) + v107[3241]) + v107[3242]) + v107[3243]) + v107[3244]) + v107[3245]) + v107[3246]) + v107[3247]) + v107[3248]) + v107[3249]) + v107[3250]) + v107[3251]) + v107[3252]) + v107[3253]) + v107[3254]) + v107[3255]) + v107[3256]) + v107[3257]) + v107[3258]) + v107[3259]) + v107[3260])
                                                                                           + v107[3261])
                                                                                   + v107[3262])
                                                                           + v107[3263])
                                                                   + v107[3264])
                                                           + v107[3265])
                                                   + v107[3266])
                                           + v107[3267])
                                   + v107[3268])
                           + v107[3269])
                   * 0.03125)
           * (float)(v108 / v109);
      v105.f32[0] = (float)(tanhf((float)(v112 * 2.0) + -1.0) + 1.0) * 0.5;
      v113 = (float)(v111 * 0.5) + (float)(v105.f32[0] * 0.5);
      v105.f32[0] = (float)(v111 * 0.75) + (float)(v105.f32[0] * 0.25);
      if (v112 < 0.5)
        v105.f32[0] = v113;
      if (v105.f32[0] < v110)
        v105.f32[0] = v110;
      if (v105.f32[0] > 1.0)
        v105.f32[0] = 1.0;
      v498[v575] = v105.f32[0];
    }
    v11 = v575 + 1;
    v12 = *(_QWORD *)(v500 + 8);
    v4 += 192;
    v10 += 192;
  }
  while (v575 + 1 < v12);
  v4 = v569;
  v8 = (float32x4_t *)&unk_208F0D000;
  v9 = (float32x4_t *)&unk_208F0D000;
  if (!*(_BYTE *)(v500 + 80))
    return;
  if (v12 == 1)
  {
    v13 = *(_QWORD *)(v500 + 184);
    v7 = *(_QWORD *)(v500 + 192);
    v114 = v498;
    v115 = v572;
    if (v7 == v13)
      goto LABEL_162;
    v116 = (float32x4_t *)(*(_QWORD *)v13 + 14128);
    v12 = 1;
    goto LABEL_70;
  }
  v114 = v498;
  v115 = v572;
  v117 = *(_QWORD *)(v500 + 184);
  v13 = *(_QWORD *)(v500 + 192);
  v118 = v13 - v117;
  if (v13 == v117)
    goto LABEL_162;
LABEL_61:
  memcpy(__src, (const void *)(*(_QWORD *)v117 + 14128), sizeof(__src));
  if (v12 < 2)
  {
    v13 = 0;
    v7 = *(_QWORD *)v5;
    if (*(_QWORD *)v5 <= 1uLL)
      goto LABEL_154;
LABEL_138:
    v381 = *v114;
    if (v13 >= 2)
    {
      v382 = v13 - 1;
      v383 = v114 + 1;
      do
      {
        v384 = *v383++;
        v385 = v384;
        if (v384 < v381)
          v381 = v385;
        --v382;
      }
      while (v382);
    }
    if (v13)
    {
      v386 = 0;
      v387 = 0;
      v499 = v381;
      while ((unint64_t)v7 < 2)
      {
LABEL_145:
        ++v387;
        v386 += 8;
        if (v387 >= v13)
          goto LABEL_154;
      }
      v388 = 0;
      v389 = 1;
      while (1)
      {
        v13 = v4[5].u64[1];
        if (!v13)
          v13 = v4[5].u64[0];
        v7 = *(_QWORD *)(v5 + 184);
        if (v387 >= (*(_QWORD *)(v5 + 192) - v7) >> 3)
          goto LABEL_162;
        v390 = *(_QWORD *)(v7 + 8 * v387);
        v391 = *(_QWORD *)(v390 + 22040);
        v7 = *(_QWORD *)(v390 + 22032);
        if (0xAAAAAAAAAAAAAAABLL * ((v391 - v7) >> 7) <= v389 - 1)
          goto LABEL_162;
        v392 = *(float32x4_t **)(*(_QWORD *)(v13 + 16) + v386 * *(_QWORD *)(v13 + 56) + 8 * v389);
        v501 = *(float32x4_t *)(v7 + v388 + 16);
        v502 = *(float32x4_t *)(v7 + v388);
        v503 = *(float32x4_t *)(v7 + v388 + 48);
        v504 = *(float32x4_t *)(v7 + v388 + 32);
        v505 = *(float32x4_t *)(v7 + v388 + 80);
        v506 = *(float32x4_t *)(v7 + v388 + 64);
        v508 = *(float32x4_t *)(v7 + v388 + 112);
        v510 = *(float32x4_t *)(v7 + v388 + 96);
        v512 = *(float32x4_t *)(v7 + v388 + 144);
        v514 = *(float32x4_t *)(v7 + v388 + 128);
        v516 = *(float32x4_t *)(v7 + v388 + 176);
        v518 = *(float32x4_t *)(v7 + v388 + 160);
        v520 = *(float32x4_t *)(v7 + v388 + 208);
        v522 = *(float32x4_t *)(v7 + v388 + 192);
        v524 = *(float32x4_t *)(v7 + v388 + 240);
        v526 = *(float32x4_t *)(v7 + v388 + 224);
        v528 = *(float32x4_t *)(v7 + v388 + 272);
        v530 = *(float32x4_t *)(v7 + v388 + 256);
        v532 = *(float32x4_t *)(v7 + v388 + 304);
        v534 = *(float32x4_t *)(v7 + v388 + 288);
        v536 = *(float32x4_t *)(v7 + v388 + 336);
        v538 = *(float32x4_t *)(v7 + v388 + 320);
        v540 = *(float32x4_t *)(v7 + v388 + 368);
        v542 = *(float32x4_t *)(v7 + v388 + 352);
        v544 = v392[1];
        v546 = *v392;
        v548 = v392[3];
        v550 = v392[2];
        v552 = v392[5];
        v554 = v392[4];
        v556 = v392[7];
        v558 = v392[6];
        v560 = v392[9];
        v562 = v392[8];
        v564 = v392[11];
        v566 = v392[10];
        v568 = v392[13];
        v571 = v392[12];
        v574 = v392[15];
        v577 = v392[14];
        memmove((void *)(v7 + v388), &v392[16], 0x180uLL);
        *v392 = vmulq_n_f32(v502, v499);
        v392[1] = vmulq_n_f32(v501, v499);
        v392[2] = vmulq_n_f32(v504, v499);
        v392[3] = vmulq_n_f32(v503, v499);
        v392[4] = vmulq_n_f32(v506, v499);
        v392[5] = vmulq_n_f32(v505, v499);
        v392[6] = vmulq_n_f32(v510, v499);
        v392[7] = vmulq_n_f32(v508, v499);
        v392[8] = vmulq_n_f32(v514, v499);
        v392[9] = vmulq_n_f32(v512, v499);
        v392[10] = vmulq_n_f32(v518, v499);
        v392[11] = vmulq_n_f32(v516, v499);
        v392[12] = vmulq_n_f32(v522, v499);
        v392[13] = vmulq_n_f32(v520, v499);
        v392[14] = vmulq_n_f32(v526, v499);
        v392[15] = vmulq_n_f32(v524, v499);
        v392[16] = vmulq_n_f32(v530, v499);
        v392[17] = vmulq_n_f32(v528, v499);
        v392[18] = vmulq_n_f32(v534, v499);
        v392[19] = vmulq_n_f32(v532, v499);
        v392[20] = vmulq_n_f32(v538, v499);
        v392[21] = vmulq_n_f32(v536, v499);
        v392[22] = vmulq_n_f32(v542, v499);
        v392[23] = vmulq_n_f32(v540, v499);
        v392[24] = vmulq_n_f32(v546, v499);
        v392[25] = vmulq_n_f32(v544, v499);
        v392[26] = vmulq_n_f32(v550, v499);
        v392[27] = vmulq_n_f32(v548, v499);
        v392[28] = vmulq_n_f32(v554, v499);
        v392[29] = vmulq_n_f32(v552, v499);
        v392[30] = vmulq_n_f32(v558, v499);
        v392[31] = vmulq_n_f32(v556, v499);
        v392[32] = vmulq_n_f32(v562, v499);
        v392[33] = vmulq_n_f32(v560, v499);
        v392[34] = vmulq_n_f32(v566, v499);
        v392[35] = vmulq_n_f32(v564, v499);
        v392[36] = vmulq_n_f32(v571, v499);
        v392[37] = vmulq_n_f32(v568, v499);
        v392[38] = vmulq_n_f32(v577, v499);
        v392[39] = vmulq_n_f32(v574, v499);
        v5 = v500;
        ++v389;
        v388 += 384;
        v7 = *(_QWORD *)v500;
        if (v389 >= *(_QWORD *)v500)
        {
          v13 = *(_QWORD *)(v500 + 8);
          goto LABEL_145;
        }
      }
    }
    return;
  }
  v13 = v118 >> 3;
  if ((unint64_t)(v118 >> 3) <= 1)
    v13 = 1;
  v119 = *(int8x16_t *)__src;
  v570 = *(int8x16_t *)&__src[32];
  v573 = *(int8x16_t *)&__src[16];
  v563 = *(int8x16_t *)&__src[64];
  v565 = *(int8x16_t *)&__src[48];
  v559 = *(int8x16_t *)&__src[96];
  v561 = *(int8x16_t *)&__src[80];
  v555 = *(int8x16_t *)&__src[128];
  v557 = *(int8x16_t *)&__src[112];
  v551 = *(int8x16_t *)&__src[160];
  v553 = *(int8x16_t *)&__src[144];
  v547 = *(int8x16_t *)&__src[192];
  v549 = *(int8x16_t *)&__src[176];
  v543 = *(int8x16_t *)&__src[224];
  v545 = *(int8x16_t *)&__src[208];
  v539 = *(int8x16_t *)&__src[256];
  v541 = *(int8x16_t *)&__src[240];
  v535 = *(int8x16_t *)&__src[288];
  v537 = *(int8x16_t *)&__src[272];
  v531 = *(int8x16_t *)&__src[320];
  v533 = *(int8x16_t *)&__src[304];
  v527 = *(int8x16_t *)&__src[352];
  v529 = *(int8x16_t *)&__src[336];
  v523 = *(int8x16_t *)&__src[384];
  v525 = *(int8x16_t *)&__src[368];
  v519 = *(int8x16_t *)&__src[416];
  v521 = *(int8x16_t *)&__src[400];
  v515 = *(int8x16_t *)&__src[448];
  v517 = *(int8x16_t *)&__src[432];
  v511 = *(int8x16_t *)&__src[480];
  v513 = *(int8x16_t *)&__src[464];
  v509 = *(int8x16_t *)&__src[496];
  v7 = 1;
  v507 = *(float *)&__src[512];
  do
  {
    if (v13 == v7)
      goto LABEL_162;
    v120 = *(float32x4_t **)(v117 + 8 * v7);
    v576 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v119, v120[883]), (int8x16_t)v120[883], v119);
    v573 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v573, v120[884]), (int8x16_t)v120[884], v573);
    v570 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v570, v120[885]), (int8x16_t)v120[885], v570);
    v121 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v565, v120[886]), (int8x16_t)v120[886], v565);
    v122 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v563, v120[887]), (int8x16_t)v120[887], v563);
    v123 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v561, v120[888]), (int8x16_t)v120[888], v561);
    v124 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v559, v120[889]), (int8x16_t)v120[889], v559);
    v125 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v557, v120[890]), (int8x16_t)v120[890], v557);
    v126 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v555, v120[891]), (int8x16_t)v120[891], v555);
    v127 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v553, v120[892]), (int8x16_t)v120[892], v553);
    v128 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v551, v120[893]), (int8x16_t)v120[893], v551);
    v129 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v549, v120[894]), (int8x16_t)v120[894], v549);
    v130 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v547, v120[895]), (int8x16_t)v120[895], v547);
    v131 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v545, v120[896]), (int8x16_t)v120[896], v545);
    v132 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v543, v120[897]), (int8x16_t)v120[897], v543);
    v133 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v541, v120[898]), (int8x16_t)v120[898], v541);
    v134 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v539, v120[899]), (int8x16_t)v120[899], v539);
    v135 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v537, v120[900]), (int8x16_t)v120[900], v537);
    v136 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v535, v120[901]), (int8x16_t)v120[901], v535);
    v137 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v533, v120[902]), (int8x16_t)v120[902], v533);
    v138 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v531, v120[903]), (int8x16_t)v120[903], v531);
    v139 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v529, v120[904]), (int8x16_t)v120[904], v529);
    v140 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v527, v120[905]), (int8x16_t)v120[905], v527);
    v141 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v525, v120[906]), (int8x16_t)v120[906], v525);
    v142 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v523, v120[907]), (int8x16_t)v120[907], v523);
    v143 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v521, v120[908]), (int8x16_t)v120[908], v521);
    v144 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v519, v120[909]), (int8x16_t)v120[909], v519);
    v145 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v517, v120[910]), (int8x16_t)v120[910], v517);
    v146 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v515, v120[911]), (int8x16_t)v120[911], v515);
    v147 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v513, v120[912]), (int8x16_t)v120[912], v513);
    v148 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v511, v120[913]), (int8x16_t)v120[913], v511);
    v105 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v509, v120[914]), (int8x16_t)v120[914], v509);
    v149 = v507;
    if (v120[915].f32[0] < v507)
      v149 = v120[915].f32[0];
    v119 = v576;
    *(int8x16_t *)__src = v576;
    *(int8x16_t *)&__src[16] = v573;
    *(int8x16_t *)&__src[32] = v570;
    *(int8x16_t *)&__src[48] = v121;
    v563 = v122;
    v565 = v121;
    *(int8x16_t *)&__src[64] = v122;
    *(int8x16_t *)&__src[80] = v123;
    v559 = v124;
    v561 = v123;
    *(int8x16_t *)&__src[96] = v124;
    *(int8x16_t *)&__src[112] = v125;
    v555 = v126;
    v557 = v125;
    *(int8x16_t *)&__src[128] = v126;
    *(int8x16_t *)&__src[144] = v127;
    v551 = v128;
    v553 = v127;
    *(int8x16_t *)&__src[160] = v128;
    *(int8x16_t *)&__src[176] = v129;
    v547 = v130;
    v549 = v129;
    *(int8x16_t *)&__src[192] = v130;
    v543 = v132;
    v545 = v131;
    *(int8x16_t *)&__src[208] = v131;
    *(int8x16_t *)&__src[224] = v132;
    v539 = v134;
    v541 = v133;
    *(int8x16_t *)&__src[240] = v133;
    *(int8x16_t *)&__src[256] = v134;
    v535 = v136;
    v537 = v135;
    *(int8x16_t *)&__src[272] = v135;
    *(int8x16_t *)&__src[288] = v136;
    v531 = v138;
    v533 = v137;
    *(int8x16_t *)&__src[304] = v137;
    *(int8x16_t *)&__src[320] = v138;
    v527 = v140;
    v529 = v139;
    *(int8x16_t *)&__src[336] = v139;
    *(int8x16_t *)&__src[352] = v140;
    v523 = v142;
    v525 = v141;
    *(int8x16_t *)&__src[368] = v141;
    *(int8x16_t *)&__src[384] = v142;
    v519 = v144;
    v521 = v143;
    *(int8x16_t *)&__src[400] = v143;
    *(int8x16_t *)&__src[416] = v144;
    v515 = v146;
    v517 = v145;
    *(int8x16_t *)&__src[432] = v145;
    *(int8x16_t *)&__src[448] = v146;
    v511 = v148;
    v513 = v147;
    *(int8x16_t *)&__src[464] = v147;
    *(int8x16_t *)&__src[480] = v148;
    v509 = (int8x16_t)v105;
    *(float32x4_t *)&__src[496] = v105;
    ++v7;
    v507 = v149;
    *(float32_t *)&__src[512] = v149;
  }
  while (v12 != v7);
  v116 = (float32x4_t *)__src;
LABEL_70:
  v150 = 0;
  v151 = v115;
  do
  {
    v152 = (unint64_t)&v115[192 * v150];
    if (v152 >= (unint64_t)v116[32].u64 + 4 || (unint64_t)v116 >= v152 + 1540)
    {
      v154 = *v116;
      v155 = *(float32x4_t *)(v152 + 16);
      *(float32x4_t *)v152 = vmulq_f32(*v116, *(float32x4_t *)v152);
      v156 = *(float32x4_t *)(v152 + 1040);
      *(float32x4_t *)(v152 + 1024) = vmulq_f32(v154, *(float32x4_t *)(v152 + 1024));
      v157 = v116[1];
      *(float32x4_t *)(v152 + 16) = vmulq_f32(v157, v155);
      *(float32x4_t *)(v152 + 1040) = vmulq_f32(v157, v156);
      v158 = v116[2];
      v159 = *(float32x4_t *)(v152 + 48);
      *(float32x4_t *)(v152 + 32) = vmulq_f32(v158, *(float32x4_t *)(v152 + 32));
      v160 = *(float32x4_t *)(v152 + 1072);
      *(float32x4_t *)(v152 + 1056) = vmulq_f32(v158, *(float32x4_t *)(v152 + 1056));
      v161 = v116[3];
      *(float32x4_t *)(v152 + 48) = vmulq_f32(v161, v159);
      *(float32x4_t *)(v152 + 1072) = vmulq_f32(v161, v160);
      v162 = v116[4];
      v163 = *(float32x4_t *)(v152 + 80);
      *(float32x4_t *)(v152 + 64) = vmulq_f32(v162, *(float32x4_t *)(v152 + 64));
      v164 = *(float32x4_t *)(v152 + 1104);
      *(float32x4_t *)(v152 + 1088) = vmulq_f32(v162, *(float32x4_t *)(v152 + 1088));
      v165 = v116[5];
      *(float32x4_t *)(v152 + 80) = vmulq_f32(v165, v163);
      *(float32x4_t *)(v152 + 1104) = vmulq_f32(v165, v164);
      v166 = v116[6];
      v167 = *(float32x4_t *)(v152 + 112);
      *(float32x4_t *)(v152 + 96) = vmulq_f32(v166, *(float32x4_t *)(v152 + 96));
      v168 = *(float32x4_t *)(v152 + 1136);
      *(float32x4_t *)(v152 + 1120) = vmulq_f32(v166, *(float32x4_t *)(v152 + 1120));
      v169 = v116[7];
      *(float32x4_t *)(v152 + 112) = vmulq_f32(v169, v167);
      *(float32x4_t *)(v152 + 1136) = vmulq_f32(v169, v168);
      v170 = v116[8];
      v171 = *(float32x4_t *)(v152 + 144);
      *(float32x4_t *)(v152 + 128) = vmulq_f32(v170, *(float32x4_t *)(v152 + 128));
      v172 = *(float32x4_t *)(v152 + 1168);
      *(float32x4_t *)(v152 + 1152) = vmulq_f32(v170, *(float32x4_t *)(v152 + 1152));
      v173 = v116[9];
      *(float32x4_t *)(v152 + 144) = vmulq_f32(v173, v171);
      *(float32x4_t *)(v152 + 1168) = vmulq_f32(v173, v172);
      v174 = v116[10];
      v175 = *(float32x4_t *)(v152 + 176);
      *(float32x4_t *)(v152 + 160) = vmulq_f32(v174, *(float32x4_t *)(v152 + 160));
      v176 = *(float32x4_t *)(v152 + 1200);
      *(float32x4_t *)(v152 + 1184) = vmulq_f32(v174, *(float32x4_t *)(v152 + 1184));
      v177 = v116[11];
      *(float32x4_t *)(v152 + 176) = vmulq_f32(v177, v175);
      *(float32x4_t *)(v152 + 1200) = vmulq_f32(v177, v176);
      v178 = v116[12];
      v179 = *(float32x4_t *)(v152 + 208);
      *(float32x4_t *)(v152 + 192) = vmulq_f32(v178, *(float32x4_t *)(v152 + 192));
      v180 = *(float32x4_t *)(v152 + 1232);
      *(float32x4_t *)(v152 + 1216) = vmulq_f32(v178, *(float32x4_t *)(v152 + 1216));
      v181 = v116[13];
      *(float32x4_t *)(v152 + 208) = vmulq_f32(v181, v179);
      *(float32x4_t *)(v152 + 1232) = vmulq_f32(v181, v180);
      v182 = v116[14];
      v183 = *(float32x4_t *)(v152 + 240);
      *(float32x4_t *)(v152 + 224) = vmulq_f32(v182, *(float32x4_t *)(v152 + 224));
      v184 = *(float32x4_t *)(v152 + 1264);
      *(float32x4_t *)(v152 + 1248) = vmulq_f32(v182, *(float32x4_t *)(v152 + 1248));
      v185 = v116[15];
      *(float32x4_t *)(v152 + 240) = vmulq_f32(v185, v183);
      *(float32x4_t *)(v152 + 1264) = vmulq_f32(v185, v184);
      v186 = v116[16];
      v187 = *(float32x4_t *)(v152 + 272);
      *(float32x4_t *)(v152 + 256) = vmulq_f32(v186, *(float32x4_t *)(v152 + 256));
      v188 = *(float32x4_t *)(v152 + 1296);
      *(float32x4_t *)(v152 + 1280) = vmulq_f32(v186, *(float32x4_t *)(v152 + 1280));
      v189 = v116[17];
      *(float32x4_t *)(v152 + 272) = vmulq_f32(v189, v187);
      *(float32x4_t *)(v152 + 1296) = vmulq_f32(v189, v188);
      v190 = v116[18];
      v191 = *(float32x4_t *)(v152 + 304);
      *(float32x4_t *)(v152 + 288) = vmulq_f32(v190, *(float32x4_t *)(v152 + 288));
      v192 = *(float32x4_t *)(v152 + 1328);
      *(float32x4_t *)(v152 + 1312) = vmulq_f32(v190, *(float32x4_t *)(v152 + 1312));
      v193 = v116[19];
      *(float32x4_t *)(v152 + 304) = vmulq_f32(v193, v191);
      *(float32x4_t *)(v152 + 1328) = vmulq_f32(v193, v192);
      v194 = v116[20];
      v195 = *(float32x4_t *)(v152 + 336);
      *(float32x4_t *)(v152 + 320) = vmulq_f32(v194, *(float32x4_t *)(v152 + 320));
      v196 = *(float32x4_t *)(v152 + 1360);
      *(float32x4_t *)(v152 + 1344) = vmulq_f32(v194, *(float32x4_t *)(v152 + 1344));
      v197 = v116[21];
      *(float32x4_t *)(v152 + 336) = vmulq_f32(v197, v195);
      *(float32x4_t *)(v152 + 1360) = vmulq_f32(v197, v196);
      v198 = v116[22];
      v199 = *(float32x4_t *)(v152 + 368);
      *(float32x4_t *)(v152 + 352) = vmulq_f32(v198, *(float32x4_t *)(v152 + 352));
      v200 = *(float32x4_t *)(v152 + 1392);
      *(float32x4_t *)(v152 + 1376) = vmulq_f32(v198, *(float32x4_t *)(v152 + 1376));
      v201 = v116[23];
      *(float32x4_t *)(v152 + 368) = vmulq_f32(v201, v199);
      *(float32x4_t *)(v152 + 1392) = vmulq_f32(v201, v200);
      v202 = v116[24];
      v203 = *(float32x4_t *)(v152 + 400);
      *(float32x4_t *)(v152 + 384) = vmulq_f32(v202, *(float32x4_t *)(v152 + 384));
      v204 = *(float32x4_t *)(v152 + 1424);
      *(float32x4_t *)(v152 + 1408) = vmulq_f32(v202, *(float32x4_t *)(v152 + 1408));
      v205 = v116[25];
      *(float32x4_t *)(v152 + 400) = vmulq_f32(v205, v203);
      *(float32x4_t *)(v152 + 1424) = vmulq_f32(v205, v204);
      v206 = v116[26];
      v207 = *(float32x4_t *)(v152 + 432);
      *(float32x4_t *)(v152 + 416) = vmulq_f32(v206, *(float32x4_t *)(v152 + 416));
      v208 = *(float32x4_t *)(v152 + 1456);
      *(float32x4_t *)(v152 + 1440) = vmulq_f32(v206, *(float32x4_t *)(v152 + 1440));
      v209 = v116[27];
      *(float32x4_t *)(v152 + 432) = vmulq_f32(v209, v207);
      *(float32x4_t *)(v152 + 1456) = vmulq_f32(v209, v208);
      v210 = v116[28];
      v211 = *(float32x4_t *)(v152 + 464);
      *(float32x4_t *)(v152 + 448) = vmulq_f32(v210, *(float32x4_t *)(v152 + 448));
      v212 = *(float32x4_t *)(v152 + 1488);
      *(float32x4_t *)(v152 + 1472) = vmulq_f32(v210, *(float32x4_t *)(v152 + 1472));
      v213 = v116[29];
      *(float32x4_t *)(v152 + 464) = vmulq_f32(v213, v211);
      *(float32x4_t *)(v152 + 1488) = vmulq_f32(v213, v212);
      v214 = v116[30];
      v215 = *(float32x4_t *)(v152 + 496);
      *(float32x4_t *)(v152 + 480) = vmulq_f32(v214, *(float32x4_t *)(v152 + 480));
      v216 = *(float32x4_t *)(v152 + 1520);
      *(float32x4_t *)(v152 + 1504) = vmulq_f32(v214, *(float32x4_t *)(v152 + 1504));
      v217 = v116[31];
      *(float32x4_t *)(v152 + 496) = vmulq_f32(v217, v215);
      v105 = vmulq_f32(v217, v216);
      *(float32x4_t *)(v152 + 1520) = v105;
      v218 = 128;
    }
    else
    {
      v218 = 0;
    }
    v219 = v218;
    do
    {
      v220 = &v151->f32[v219];
      *v220 = v116->f32[v219] * v151->f32[v219];
      v220[256] = v116->f32[v219] * v151[64].f32[v219];
      ++v219;
    }
    while (v219 != 129);
    ++v150;
    v151 += 192;
  }
  while (v150 != v12);
  v221 = 0;
  v222 = v115;
  do
  {
    v223 = &v115[192 * v221];
    v224 = v223 + 128;
    v223[128].i32[0] = v223->i32[0];
    v223[128].i32[1] = v223[32].i32[0];
    v225 = v222;
    for (j = 2056; j != 3072; j += 8)
    {
      v227 = v225->i32[1];
      v225 = (float32x4_t *)((char *)v225 + 4);
      v228 = (__int32 *)((char *)v222 + j);
      *v228 = v227;
      v105.i32[0] = v225[64].i32[0];
      v228[1] = v105.i32[0];
    }
    webrtc::WebRtc_rdft((webrtc *)0x100, -1, v224->f32, *(int64x2_t **)(v5 + 32), *(float **)(v5 + 56), v104, v105);
    v229.i64[0] = 0x3C0000003C000000;
    v229.i64[1] = 0x3C0000003C000000;
    v230 = vmulq_f32(v224[1], v229);
    *v224 = vmulq_f32(*v224, v229);
    v224[1] = v230;
    v231 = vmulq_f32(v224[3], v229);
    v224[2] = vmulq_f32(v224[2], v229);
    v224[3] = v231;
    v232 = vmulq_f32(v224[5], v229);
    v224[4] = vmulq_f32(v224[4], v229);
    v224[5] = v232;
    v233 = vmulq_f32(v224[7], v229);
    v224[6] = vmulq_f32(v224[6], v229);
    v224[7] = v233;
    v234 = vmulq_f32(v224[9], v229);
    v224[8] = vmulq_f32(v224[8], v229);
    v224[9] = v234;
    v235 = vmulq_f32(v224[11], v229);
    v224[10] = vmulq_f32(v224[10], v229);
    v224[11] = v235;
    v236 = vmulq_f32(v224[13], v229);
    v224[12] = vmulq_f32(v224[12], v229);
    v224[13] = v236;
    v237 = vmulq_f32(v224[15], v229);
    v224[14] = vmulq_f32(v224[14], v229);
    v224[15] = v237;
    v238 = vmulq_f32(v224[17], v229);
    v224[16] = vmulq_f32(v224[16], v229);
    v224[17] = v238;
    v239 = vmulq_f32(v224[19], v229);
    v224[18] = vmulq_f32(v224[18], v229);
    v224[19] = v239;
    v240 = vmulq_f32(v224[21], v229);
    v224[20] = vmulq_f32(v224[20], v229);
    v224[21] = v240;
    v241 = vmulq_f32(v224[23], v229);
    v224[22] = vmulq_f32(v224[22], v229);
    v224[23] = v241;
    v242 = vmulq_f32(v224[25], v229);
    v224[24] = vmulq_f32(v224[24], v229);
    v224[25] = v242;
    v243 = vmulq_f32(v224[27], v229);
    v224[26] = vmulq_f32(v224[26], v229);
    v224[27] = v243;
    v244 = vmulq_f32(v224[29], v229);
    v224[28] = vmulq_f32(v224[28], v229);
    v224[29] = v244;
    v245 = vmulq_f32(v224[31], v229);
    v224[30] = vmulq_f32(v224[30], v229);
    v224[31] = v245;
    v246 = vmulq_f32(v224[33], v229);
    v224[32] = vmulq_f32(v224[32], v229);
    v224[33] = v246;
    v247 = vmulq_f32(v224[35], v229);
    v224[34] = vmulq_f32(v224[34], v229);
    v224[35] = v247;
    v248 = vmulq_f32(v224[37], v229);
    v224[36] = vmulq_f32(v224[36], v229);
    v224[37] = v248;
    v249 = vmulq_f32(v224[39], v229);
    v224[38] = vmulq_f32(v224[38], v229);
    v224[39] = v249;
    v250 = vmulq_f32(v224[41], v229);
    v224[40] = vmulq_f32(v224[40], v229);
    v224[41] = v250;
    v251 = vmulq_f32(v224[43], v229);
    v224[42] = vmulq_f32(v224[42], v229);
    v224[43] = v251;
    v252 = vmulq_f32(v224[45], v229);
    v224[44] = vmulq_f32(v224[44], v229);
    v224[45] = v252;
    v253 = vmulq_f32(v224[47], v229);
    v224[46] = vmulq_f32(v224[46], v229);
    v224[47] = v253;
    v254 = vmulq_f32(v224[49], v229);
    v224[48] = vmulq_f32(v224[48], v229);
    v224[49] = v254;
    v255 = vmulq_f32(v224[51], v229);
    v224[50] = vmulq_f32(v224[50], v229);
    v224[51] = v255;
    v256 = vmulq_f32(v224[53], v229);
    v224[52] = vmulq_f32(v224[52], v229);
    v224[53] = v256;
    v257 = vmulq_f32(v224[55], v229);
    v224[54] = vmulq_f32(v224[54], v229);
    v224[55] = v257;
    v258 = vmulq_f32(v224[57], v229);
    v224[56] = vmulq_f32(v224[56], v229);
    v224[57] = v258;
    v259 = vmulq_f32(v224[59], v229);
    v224[58] = vmulq_f32(v224[58], v229);
    v224[59] = v259;
    v260 = vmulq_f32(v224[61], v229);
    v224[60] = vmulq_f32(v224[60], v229);
    v224[61] = v260;
    v105 = vmulq_f32(v224[62], v229);
    v261 = vmulq_f32(v224[63], v229);
    v224[62] = v105;
    v224[63] = v261;
    ++v221;
    v222 += 192;
    v13 = *(_QWORD *)(v5 + 8);
  }
  while (v221 < v13);
  if (v13)
  {
    v7 = 0;
    v262 = *(_QWORD *)(v5 + 184);
    v263 = (*(_QWORD *)(v5 + 192) - v262) >> 3;
    v264 = v115 + 128;
    while (1)
    {
      v266 = 0;
      v267 = &v115[192 * v7];
      v268 = (unint64_t)&v267[128];
      v269 = v267 + 152;
      v270 = (unint64_t)v267[168].u64 + 4;
      v271 = v267 + 192;
      v272 = 0.0;
      do
      {
        v272 = v272 + (float)(v264->f32[v266] * v264->f32[v266]);
        ++v266;
      }
      while (v266 != 256);
      if (v268 >= (unint64_t)"WebRTC-NormalizeSimulcastResolution"
      {
        v274 = vmulq_f32(*(float32x4_t *)(v268 + 16), (float32x4_t)xmmword_208F0DDE0);
        *(float32x4_t *)v268 = vmulq_f32(*(float32x4_t *)v268, (float32x4_t)xmmword_208F0DDD0);
        *(float32x4_t *)(v268 + 16) = v274;
        v275 = vmulq_f32(*(float32x4_t *)(v268 + 48), (float32x4_t)xmmword_208F0DE00);
        *(float32x4_t *)(v268 + 32) = vmulq_f32(*(float32x4_t *)(v268 + 32), (float32x4_t)xmmword_208F0DDF0);
        *(float32x4_t *)(v268 + 48) = v275;
        v276 = vmulq_f32(*(float32x4_t *)(v268 + 80), (float32x4_t)xmmword_208F0DE20);
        *(float32x4_t *)(v268 + 64) = vmulq_f32(*(float32x4_t *)(v268 + 64), (float32x4_t)xmmword_208F0DE10);
        *(float32x4_t *)(v268 + 80) = v276;
        v277 = vmulq_f32(*(float32x4_t *)(v268 + 112), (float32x4_t)xmmword_208F0DE40);
        *(float32x4_t *)(v268 + 96) = vmulq_f32(*(float32x4_t *)(v268 + 96), (float32x4_t)xmmword_208F0DE30);
        *(float32x4_t *)(v268 + 112) = v277;
        v278 = vmulq_f32(*(float32x4_t *)(v268 + 144), (float32x4_t)xmmword_208F0DE60);
        *(float32x4_t *)(v268 + 128) = vmulq_f32(*(float32x4_t *)(v268 + 128), (float32x4_t)xmmword_208F0DE50);
        *(float32x4_t *)(v268 + 144) = v278;
        v279 = vmulq_f32(*(float32x4_t *)(v268 + 176), v9[232]);
        *(float32x4_t *)(v268 + 160) = vmulq_f32(*(float32x4_t *)(v268 + 160), v8[231]);
        *(float32x4_t *)(v268 + 176) = v279;
        v280 = vmulq_f32(*(float32x4_t *)(v268 + 208), (float32x4_t)xmmword_208F0DEA0);
        *(float32x4_t *)(v268 + 192) = vmulq_f32(*(float32x4_t *)(v268 + 192), (float32x4_t)xmmword_208F0DE90);
        *(float32x4_t *)(v268 + 208) = v280;
        v281 = vmulq_f32(*(float32x4_t *)(v268 + 240), (float32x4_t)xmmword_208F0DEC0);
        *(float32x4_t *)(v268 + 224) = vmulq_f32(*(float32x4_t *)(v268 + 224), (float32x4_t)xmmword_208F0DEB0);
        *(float32x4_t *)(v268 + 240) = v281;
        v282 = vmulq_f32(*(float32x4_t *)(v268 + 272), (float32x4_t)xmmword_208F0DEE0);
        *(float32x4_t *)(v268 + 256) = vmulq_f32(*(float32x4_t *)(v268 + 256), (float32x4_t)xmmword_208F0DED0);
        *(float32x4_t *)(v268 + 272) = v282;
        v283 = vmulq_f32(*(float32x4_t *)(v268 + 304), (float32x4_t)xmmword_208F0DF00);
        *(float32x4_t *)(v268 + 288) = vmulq_f32(*(float32x4_t *)(v268 + 288), (float32x4_t)xmmword_208F0DEF0);
        *(float32x4_t *)(v268 + 304) = v283;
        v284 = vmulq_f32(*(float32x4_t *)(v268 + 336), (float32x4_t)xmmword_208F0DF20);
        *(float32x4_t *)(v268 + 320) = vmulq_f32(*(float32x4_t *)(v268 + 320), (float32x4_t)xmmword_208F0DF10);
        *(float32x4_t *)(v268 + 336) = v284;
        v285 = vmulq_f32(*(float32x4_t *)(v268 + 368), (float32x4_t)xmmword_208F0DF40);
        *(float32x4_t *)(v268 + 352) = vmulq_f32(*(float32x4_t *)(v268 + 352), (float32x4_t)xmmword_208F0DF30);
        *(float32x4_t *)(v268 + 368) = v285;
        if (v270 >= (unint64_t)"WebRTC-NormalizeSimulcastResolution")
          goto LABEL_99;
      }
      else
      {
        for (k = 0; k != 96; ++k)
        if (v270 >= (unint64_t)"WebRTC-NormalizeSimulcastResolution")
          goto LABEL_99;
      }
      if (v271 > &xmmword_208F0E0E4)
      {
        v286 = 95;
        v287 = 161;
        goto LABEL_100;
      }
LABEL_99:
      v288 = vmulq_f32(*(float32x4_t *)(v268 + 660), (float32x4_t)xmmword_208F0DF60);
      *(float32x4_t *)(v268 + 644) = vmulq_f32(*(float32x4_t *)(v268 + 644), (float32x4_t)xmmword_208F0DF50);
      *(float32x4_t *)(v268 + 660) = v288;
      v289 = vmulq_f32(*(float32x4_t *)(v268 + 692), (float32x4_t)xmmword_208F0DF80);
      *(float32x4_t *)(v268 + 676) = vmulq_f32(*(float32x4_t *)(v268 + 676), (float32x4_t)xmmword_208F0DF70);
      *(float32x4_t *)(v268 + 692) = v289;
      v290 = vmulq_f32(*(float32x4_t *)(v268 + 724), (float32x4_t)xmmword_208F0DFA0);
      *(float32x4_t *)(v268 + 708) = vmulq_f32(*(float32x4_t *)(v268 + 708), (float32x4_t)xmmword_208F0DF90);
      *(float32x4_t *)(v268 + 724) = v290;
      v291 = vmulq_f32(*(float32x4_t *)(v268 + 756), (float32x4_t)xmmword_208F0DFC0);
      *(float32x4_t *)(v268 + 740) = vmulq_f32(*(float32x4_t *)(v268 + 740), (float32x4_t)xmmword_208F0DFB0);
      *(float32x4_t *)(v268 + 756) = v291;
      v292 = vmulq_f32(*(float32x4_t *)(v268 + 788), (float32x4_t)xmmword_208F0DFE0);
      *(float32x4_t *)(v268 + 772) = vmulq_f32(*(float32x4_t *)(v268 + 772), (float32x4_t)xmmword_208F0DFD0);
      *(float32x4_t *)(v268 + 788) = v292;
      v293 = vmulq_f32(*(float32x4_t *)(v268 + 820), (float32x4_t)xmmword_208F0E000);
      *(float32x4_t *)(v268 + 804) = vmulq_f32(*(float32x4_t *)(v268 + 804), (float32x4_t)xmmword_208F0DFF0);
      *(float32x4_t *)(v268 + 820) = v293;
      v294 = vmulq_f32(*(float32x4_t *)(v268 + 852), (float32x4_t)xmmword_208F0E020);
      *(float32x4_t *)(v268 + 836) = vmulq_f32(*(float32x4_t *)(v268 + 836), (float32x4_t)xmmword_208F0E010);
      *(float32x4_t *)(v268 + 852) = v294;
      v295 = vmulq_f32(*(float32x4_t *)(v268 + 884), (float32x4_t)xmmword_208F0E040);
      *(float32x4_t *)(v268 + 868) = vmulq_f32(*(float32x4_t *)(v268 + 868), (float32x4_t)xmmword_208F0E030);
      *(float32x4_t *)(v268 + 884) = v295;
      v296 = vmulq_f32(*(float32x4_t *)(v268 + 916), (float32x4_t)xmmword_208F0E060);
      *(float32x4_t *)(v268 + 900) = vmulq_f32(*(float32x4_t *)(v268 + 900), (float32x4_t)xmmword_208F0E050);
      *(float32x4_t *)(v268 + 916) = v296;
      v297 = vmulq_f32(*(float32x4_t *)(v268 + 948), (float32x4_t)xmmword_208F0E080);
      *(float32x4_t *)(v268 + 932) = vmulq_f32(*(float32x4_t *)(v268 + 932), (float32x4_t)xmmword_208F0E070);
      *(float32x4_t *)(v268 + 948) = v297;
      v298 = (float32x4_t *)(v268 + 980);
      v299 = vmulq_f32(*(float32x4_t *)(v268 + 980), (float32x4_t)xmmword_208F0E0A0);
      *(float32x4_t *)(v268 + 964) = vmulq_f32(*(float32x4_t *)(v268 + 964), (float32x4_t)xmmword_208F0E090);
      v286 = 7;
      v287 = 249;
      *v298 = v299;
LABEL_100:
      v300 = v287;
      do
      {
        v302 = *v301--;
        v264->f32[v300] = v302 * v264->f32[v300];
        ++v300;
      }
      while (v300 != 256);
      if (v7 == v263)
        goto LABEL_162;
      v303 = *(_QWORD *)(v262 + 8 * v7);
      v304 = *(_QWORD *)(v303 + 13088);
      v265 = 1.0;
      if (*(int *)(v5 + 28) >= 201 && *(_BYTE *)(v304 + 8) != 0)
      {
        v306 = sqrtf(v272 / (float)(*(float *)&v567[4 * v7] + 1.0));
        v307 = 1.0;
        if (v306 > 0.5)
        {
          v307 = (float)((float)(v306 + -0.5) * 1.3) + 1.0;
          if ((float)(v306 * v307) > 1.0)
            v307 = 1.0 / v306;
        }
        if (v306 < 0.5)
        {
          v308 = *(float *)(v304 + 4);
          if (v306 >= v308)
            v308 = v306;
          v265 = (float)((float)(0.5 - v308) * -0.3) + 1.0;
        }
        v265 = (float)((float)(1.0 - *(float *)(v303 + 12564)) * v265) + (float)(*(float *)(v303 + 12564) * v307);
      }
      v497[v7++] = v265;
      v264 += 192;
      if (v7 == v13)
      {
        v309 = *v497;
        if (v13 >= 2)
        {
          v310 = v13 - 1;
          v311 = v497 + 1;
          do
          {
            v312 = *v311++;
            v313 = v312;
            if (v312 < v309)
              v309 = v313;
            --v310;
          }
          while (v310);
        }
        _X9 = v115;
        do
        {
          __asm { PRFM            #0, [X9,#0x1400] }
          v316 = vmulq_n_f32(_X9[129], v309);
          _X9[128] = vmulq_n_f32(_X9[128], v309);
          _X9[129] = v316;
          v317 = vmulq_n_f32(_X9[131], v309);
          _X9[130] = vmulq_n_f32(_X9[130], v309);
          _X9[131] = v317;
          __asm { PRFM            #0, [X9,#0x1440] }
          v319 = vmulq_n_f32(_X9[133], v309);
          _X9[132] = vmulq_n_f32(_X9[132], v309);
          _X9[133] = v319;
          v320 = vmulq_n_f32(_X9[135], v309);
          _X9[134] = vmulq_n_f32(_X9[134], v309);
          _X9[135] = v320;
          __asm { PRFM            #0, [X9,#0x1480] }
          v322 = vmulq_n_f32(_X9[137], v309);
          _X9[136] = vmulq_n_f32(_X9[136], v309);
          _X9[137] = v322;
          v323 = vmulq_n_f32(_X9[139], v309);
          _X9[138] = vmulq_n_f32(_X9[138], v309);
          _X9[139] = v323;
          __asm { PRFM            #0, [X9,#0x14C0] }
          v325 = vmulq_n_f32(_X9[141], v309);
          _X9[140] = vmulq_n_f32(_X9[140], v309);
          _X9[141] = v325;
          v326 = vmulq_n_f32(_X9[143], v309);
          _X9[142] = vmulq_n_f32(_X9[142], v309);
          _X9[143] = v326;
          __asm { PRFM            #0, [X9,#0x1500] }
          v328 = vmulq_n_f32(_X9[145], v309);
          _X9[144] = vmulq_n_f32(_X9[144], v309);
          _X9[145] = v328;
          v329 = vmulq_n_f32(_X9[147], v309);
          _X9[146] = vmulq_n_f32(_X9[146], v309);
          _X9[147] = v329;
          __asm { PRFM            #0, [X9,#0x1540] }
          v331 = vmulq_n_f32(_X9[149], v309);
          _X9[148] = vmulq_n_f32(_X9[148], v309);
          _X9[149] = v331;
          v332 = vmulq_n_f32(_X9[151], v309);
          _X9[150] = vmulq_n_f32(_X9[150], v309);
          _X9[151] = v332;
          __asm { PRFM            #0, [X9,#0x1580] }
          v334 = vmulq_n_f32(_X9[153], v309);
          _X9[152] = vmulq_n_f32(_X9[152], v309);
          _X9[153] = v334;
          v335 = vmulq_n_f32(_X9[155], v309);
          _X9[154] = vmulq_n_f32(_X9[154], v309);
          _X9[155] = v335;
          __asm { PRFM            #0, [X9,#0x15C0] }
          v337 = vmulq_n_f32(_X9[157], v309);
          _X9[156] = vmulq_n_f32(_X9[156], v309);
          _X9[157] = v337;
          v338 = vmulq_n_f32(_X9[159], v309);
          _X9[158] = vmulq_n_f32(_X9[158], v309);
          _X9[159] = v338;
          __asm { PRFM            #0, [X9,#0x1600] }
          v340 = vmulq_n_f32(_X9[161], v309);
          _X9[160] = vmulq_n_f32(_X9[160], v309);
          _X9[161] = v340;
          v341 = vmulq_n_f32(_X9[163], v309);
          _X9[162] = vmulq_n_f32(_X9[162], v309);
          _X9[163] = v341;
          __asm { PRFM            #0, [X9,#0x1640] }
          v343 = vmulq_n_f32(_X9[165], v309);
          _X9[164] = vmulq_n_f32(_X9[164], v309);
          _X9[165] = v343;
          v344 = vmulq_n_f32(_X9[167], v309);
          _X9[166] = vmulq_n_f32(_X9[166], v309);
          _X9[167] = v344;
          __asm { PRFM            #0, [X9,#0x1680] }
          v346 = vmulq_n_f32(_X9[169], v309);
          _X9[168] = vmulq_n_f32(_X9[168], v309);
          _X9[169] = v346;
          v347 = vmulq_n_f32(_X9[171], v309);
          _X9[170] = vmulq_n_f32(_X9[170], v309);
          _X9[171] = v347;
          __asm { PRFM            #0, [X9,#0x16C0] }
          v349 = vmulq_n_f32(_X9[173], v309);
          _X9[172] = vmulq_n_f32(_X9[172], v309);
          _X9[173] = v349;
          v350 = vmulq_n_f32(_X9[175], v309);
          _X9[174] = vmulq_n_f32(_X9[174], v309);
          _X9[175] = v350;
          __asm { PRFM            #0, [X9,#0x1700] }
          v352 = vmulq_n_f32(_X9[177], v309);
          _X9[176] = vmulq_n_f32(_X9[176], v309);
          _X9[177] = v352;
          v353 = vmulq_n_f32(_X9[179], v309);
          _X9[178] = vmulq_n_f32(_X9[178], v309);
          _X9[179] = v353;
          __asm { PRFM            #0, [X9,#0x1740] }
          v355 = vmulq_n_f32(_X9[181], v309);
          _X9[180] = vmulq_n_f32(_X9[180], v309);
          _X9[181] = v355;
          v356 = vmulq_n_f32(_X9[183], v309);
          _X9[182] = vmulq_n_f32(_X9[182], v309);
          _X9[183] = v356;
          __asm { PRFM            #0, [X9,#0x1780] }
          v358 = vmulq_n_f32(_X9[185], v309);
          _X9[184] = vmulq_n_f32(_X9[184], v309);
          _X9[185] = v358;
          v359 = vmulq_n_f32(_X9[187], v309);
          _X9[186] = vmulq_n_f32(_X9[186], v309);
          _X9[187] = v359;
          __asm { PRFM            #0, [X9,#0x17C0] }
          v361 = vmulq_n_f32(_X9[189], v309);
          _X9[188] = vmulq_n_f32(_X9[188], v309);
          _X9[189] = v361;
          v362 = vmulq_n_f32(_X9[191], v309);
          _X9[190] = vmulq_n_f32(_X9[190], v309);
          _X9[191] = v362;
          _X9 += 192;
          --v13;
        }
        while (v13);
        v363 = 0;
        v364 = v115 + 128;
        while (1)
        {
          v13 = v4[5].u64[1];
          if (!v13)
            v13 = v4[5].u64[0];
          v7 = *(_QWORD *)(v500 + 184);
          if (v363 >= (*(_QWORD *)(v500 + 192) - v7) >> 3)
            break;
          v377 = *(float32x4_t **)(*(_QWORD *)(v13 + 16) + 8 * *(_QWORD *)(v13 + 56) * v363);
          v378 = (float32x4_t *)(*(_QWORD *)(v7 + 8 * v363) + 21644);
          v379 = (unint64_t)((char *)v377 - (char *)v378) >= 0x20
              && (unint64_t)((char *)v377 - (char *)&v115[192 * v363 + 128]) > 0x1F;
          if (v379)
          {
            v365 = vaddq_f32(*(float32x4_t *)(*(_QWORD *)(v7 + 8 * v363) + 21660), v115[192 * v363 + 129]);
            *v377 = vaddq_f32(*v378, v115[192 * v363 + 128]);
            v377[1] = v365;
            v366 = vaddq_f32(v378[3], v115[192 * v363 + 131]);
            v377[2] = vaddq_f32(v378[2], v115[192 * v363 + 130]);
            v377[3] = v366;
            v367 = vaddq_f32(v378[5], v115[192 * v363 + 133]);
            v377[4] = vaddq_f32(v378[4], v115[192 * v363 + 132]);
            v377[5] = v367;
            v368 = vaddq_f32(v378[7], v115[192 * v363 + 135]);
            v377[6] = vaddq_f32(v378[6], v115[192 * v363 + 134]);
            v377[7] = v368;
            v369 = vaddq_f32(v378[9], v115[192 * v363 + 137]);
            v377[8] = vaddq_f32(v378[8], v115[192 * v363 + 136]);
            v377[9] = v369;
            v370 = vaddq_f32(v378[11], v115[192 * v363 + 139]);
            v377[10] = vaddq_f32(v378[10], v115[192 * v363 + 138]);
            v377[11] = v370;
            v371 = vaddq_f32(v378[13], v115[192 * v363 + 141]);
            v377[12] = vaddq_f32(v378[12], v115[192 * v363 + 140]);
            v377[13] = v371;
            v372 = vaddq_f32(v378[15], v115[192 * v363 + 143]);
            v377[14] = vaddq_f32(v378[14], v115[192 * v363 + 142]);
            v377[15] = v372;
            v373 = vaddq_f32(v378[17], v115[192 * v363 + 145]);
            v377[16] = vaddq_f32(v378[16], v115[192 * v363 + 144]);
            v377[17] = v373;
            v374 = vaddq_f32(v378[19], v115[192 * v363 + 147]);
            v377[18] = vaddq_f32(v378[18], v115[192 * v363 + 146]);
            v377[19] = v374;
            v375 = vaddq_f32(v378[21], v115[192 * v363 + 149]);
            v377[20] = vaddq_f32(v378[20], v115[192 * v363 + 148]);
            v377[21] = v375;
            v376 = vaddq_f32(v378[23], v115[192 * v363 + 151]);
            v377[22] = vaddq_f32(v378[22], v115[192 * v363 + 150]);
            v377[23] = v376;
          }
          else
          {
            for (m = 0; m != 96; ++m)
              v377->f32[m] = v378->f32[m] + v364->f32[m];
          }
          memmove(&v377[24], &v115[192 * v363 + 152], 0x100uLL);
          memmove(v378, &v115[192 * v363++ + 168], 0x180uLL);
          v13 = *(_QWORD *)(v500 + 8);
          v364 += 192;
          if (v363 >= v13)
          {
            v5 = v500;
            goto LABEL_135;
          }
        }
LABEL_162:
        __break(1u);
LABEL_163:
        v445 = 0;
        v446 = v4[5].i64[0];
        v447 = *(_QWORD *)(v446 + 56);
        v448 = *(uint64_t **)(v446 + 16);
        v449 = 8 * v447;
        v450.i64[0] = 0xC7000000C7000000;
        v450.i64[1] = 0xC7000000C7000000;
        v451 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
        do
        {
          v452 = v448;
          v453 = v7;
          do
          {
            v454 = *v452++;
            v455 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)v454), v450, *(int8x16_t *)v454);
            v456 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 16)), v450, *(int8x16_t *)(v454 + 16));
            v457 = *(int8x16_t *)(v454 + 32);
            v458 = *(int8x16_t *)(v454 + 48);
            *(int8x16_t *)v454 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v455, (float32x4_t)v451), v451, v455);
            *(int8x16_t *)(v454 + 16) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v456, (float32x4_t)v451), v451, v456);
            v459 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, (float32x4_t)v457), v450, v457);
            v460 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, (float32x4_t)v458), v450, v458);
            *(int8x16_t *)(v454 + 32) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v459, (float32x4_t)v451), v451, v459);
            *(int8x16_t *)(v454 + 48) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v460, (float32x4_t)v451), v451, v460);
            v461 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 64)), v450, *(int8x16_t *)(v454 + 64));
            v462 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 80)), v450, *(int8x16_t *)(v454 + 80));
            *(int8x16_t *)(v454 + 64) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v461, (float32x4_t)v451), v451, v461);
            *(int8x16_t *)(v454 + 80) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v462, (float32x4_t)v451), v451, v462);
            v463 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 96)), v450, *(int8x16_t *)(v454 + 96));
            v464 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 112)), v450, *(int8x16_t *)(v454 + 112));
            *(int8x16_t *)(v454 + 96) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v463, (float32x4_t)v451), v451, v463);
            *(int8x16_t *)(v454 + 112) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v464, (float32x4_t)v451), v451, v464);
            v465 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 128)), v450, *(int8x16_t *)(v454 + 128));
            v466 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 144)), v450, *(int8x16_t *)(v454 + 144));
            *(int8x16_t *)(v454 + 128) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v465, (float32x4_t)v451), v451, v465);
            *(int8x16_t *)(v454 + 144) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v466, (float32x4_t)v451), v451, v466);
            v467 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 160)), v450, *(int8x16_t *)(v454 + 160));
            v468 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 176)), v450, *(int8x16_t *)(v454 + 176));
            *(int8x16_t *)(v454 + 160) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v467, (float32x4_t)v451), v451, v467);
            *(int8x16_t *)(v454 + 176) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v468, (float32x4_t)v451), v451, v468);
            v469 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 192)), v450, *(int8x16_t *)(v454 + 192));
            v470 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 208)), v450, *(int8x16_t *)(v454 + 208));
            *(int8x16_t *)(v454 + 192) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v469, (float32x4_t)v451), v451, v469);
            *(int8x16_t *)(v454 + 208) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v470, (float32x4_t)v451), v451, v470);
            v471 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 224)), v450, *(int8x16_t *)(v454 + 224));
            v472 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 240)), v450, *(int8x16_t *)(v454 + 240));
            *(int8x16_t *)(v454 + 224) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v471, (float32x4_t)v451), v451, v471);
            *(int8x16_t *)(v454 + 240) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v472, (float32x4_t)v451), v451, v472);
            v473 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 256)), v450, *(int8x16_t *)(v454 + 256));
            v474 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 272)), v450, *(int8x16_t *)(v454 + 272));
            *(int8x16_t *)(v454 + 256) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v473, (float32x4_t)v451), v451, v473);
            *(int8x16_t *)(v454 + 272) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v474, (float32x4_t)v451), v451, v474);
            v475 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 288)), v450, *(int8x16_t *)(v454 + 288));
            v476 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 304)), v450, *(int8x16_t *)(v454 + 304));
            *(int8x16_t *)(v454 + 288) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v475, (float32x4_t)v451), v451, v475);
            *(int8x16_t *)(v454 + 304) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v476, (float32x4_t)v451), v451, v476);
            v477 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 320)), v450, *(int8x16_t *)(v454 + 320));
            v478 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 336)), v450, *(int8x16_t *)(v454 + 336));
            *(int8x16_t *)(v454 + 320) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v477, (float32x4_t)v451), v451, v477);
            *(int8x16_t *)(v454 + 336) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v478, (float32x4_t)v451), v451, v478);
            v479 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 352)), v450, *(int8x16_t *)(v454 + 352));
            v480 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 368)), v450, *(int8x16_t *)(v454 + 368));
            *(int8x16_t *)(v454 + 352) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v479, (float32x4_t)v451), v451, v479);
            *(int8x16_t *)(v454 + 368) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v480, (float32x4_t)v451), v451, v480);
            v481 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 384)), v450, *(int8x16_t *)(v454 + 384));
            v482 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 400)), v450, *(int8x16_t *)(v454 + 400));
            *(int8x16_t *)(v454 + 384) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v481, (float32x4_t)v451), v451, v481);
            *(int8x16_t *)(v454 + 400) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v482, (float32x4_t)v451), v451, v482);
            v483 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 416)), v450, *(int8x16_t *)(v454 + 416));
            v484 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 432)), v450, *(int8x16_t *)(v454 + 432));
            *(int8x16_t *)(v454 + 416) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v483, (float32x4_t)v451), v451, v483);
            *(int8x16_t *)(v454 + 432) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v484, (float32x4_t)v451), v451, v484);
            v485 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 448)), v450, *(int8x16_t *)(v454 + 448));
            v486 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 464)), v450, *(int8x16_t *)(v454 + 464));
            *(int8x16_t *)(v454 + 448) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v485, (float32x4_t)v451), v451, v485);
            *(int8x16_t *)(v454 + 464) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v486, (float32x4_t)v451), v451, v486);
            v487 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 480)), v450, *(int8x16_t *)(v454 + 480));
            v488 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 496)), v450, *(int8x16_t *)(v454 + 496));
            *(int8x16_t *)(v454 + 480) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v487, (float32x4_t)v451), v451, v487);
            *(int8x16_t *)(v454 + 496) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v488, (float32x4_t)v451), v451, v488);
            v489 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 512)), v450, *(int8x16_t *)(v454 + 512));
            v490 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 528)), v450, *(int8x16_t *)(v454 + 528));
            *(int8x16_t *)(v454 + 512) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v489, (float32x4_t)v451), v451, v489);
            *(int8x16_t *)(v454 + 528) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v490, (float32x4_t)v451), v451, v490);
            v491 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 544)), v450, *(int8x16_t *)(v454 + 544));
            v492 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 560)), v450, *(int8x16_t *)(v454 + 560));
            *(int8x16_t *)(v454 + 544) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v491, (float32x4_t)v451), v451, v491);
            *(int8x16_t *)(v454 + 560) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v492, (float32x4_t)v451), v451, v492);
            v493 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 576)), v450, *(int8x16_t *)(v454 + 576));
            v494 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 592)), v450, *(int8x16_t *)(v454 + 592));
            *(int8x16_t *)(v454 + 576) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v493, (float32x4_t)v451), v451, v493);
            *(int8x16_t *)(v454 + 592) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v494, (float32x4_t)v451), v451, v494);
            v495 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 608)), v450, *(int8x16_t *)(v454 + 608));
            v496 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v450, *(float32x4_t *)(v454 + 624)), v450, *(int8x16_t *)(v454 + 624));
            *(int8x16_t *)(v454 + 608) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v495, (float32x4_t)v451), v451, v495);
            *(int8x16_t *)(v454 + 624) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v496, (float32x4_t)v451), v451, v496);
            --v453;
          }
          while (v453);
          ++v445;
          v448 = (uint64_t *)((char *)v448 + v449);
        }
        while (v445 != v13);
        return;
      }
    }
  }
LABEL_135:
  v7 = *(_QWORD *)v5;
  if (*(_QWORD *)v5 > 1uLL)
    goto LABEL_138;
LABEL_154:
  if (v13 && v7)
  {
    v393 = v4[5].i64[1];
    if (!v393)
      goto LABEL_163;
    v394 = 0;
    v395 = *(_QWORD *)(v393 + 56);
    v396 = *(uint64_t **)(v393 + 16);
    v397 = 8 * v395;
    v398.i64[0] = 0xC7000000C7000000;
    v398.i64[1] = 0xC7000000C7000000;
    v399 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
    do
    {
      v400 = v396;
      v401 = v7;
      do
      {
        v402 = *v400++;
        v403 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)v402), v398, *(int8x16_t *)v402);
        v404 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 16)), v398, *(int8x16_t *)(v402 + 16));
        v405 = *(int8x16_t *)(v402 + 32);
        v406 = *(int8x16_t *)(v402 + 48);
        *(int8x16_t *)v402 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v403, (float32x4_t)v399), v399, v403);
        *(int8x16_t *)(v402 + 16) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v404, (float32x4_t)v399), v399, v404);
        v407 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, (float32x4_t)v405), v398, v405);
        v408 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, (float32x4_t)v406), v398, v406);
        *(int8x16_t *)(v402 + 32) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v407, (float32x4_t)v399), v399, v407);
        *(int8x16_t *)(v402 + 48) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v408, (float32x4_t)v399), v399, v408);
        v409 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 64)), v398, *(int8x16_t *)(v402 + 64));
        v410 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 80)), v398, *(int8x16_t *)(v402 + 80));
        *(int8x16_t *)(v402 + 64) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v409, (float32x4_t)v399), v399, v409);
        *(int8x16_t *)(v402 + 80) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v410, (float32x4_t)v399), v399, v410);
        v411 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 96)), v398, *(int8x16_t *)(v402 + 96));
        v412 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 112)), v398, *(int8x16_t *)(v402 + 112));
        *(int8x16_t *)(v402 + 96) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v411, (float32x4_t)v399), v399, v411);
        *(int8x16_t *)(v402 + 112) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v412, (float32x4_t)v399), v399, v412);
        v413 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 128)), v398, *(int8x16_t *)(v402 + 128));
        v414 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 144)), v398, *(int8x16_t *)(v402 + 144));
        *(int8x16_t *)(v402 + 128) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v413, (float32x4_t)v399), v399, v413);
        *(int8x16_t *)(v402 + 144) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v414, (float32x4_t)v399), v399, v414);
        v415 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 160)), v398, *(int8x16_t *)(v402 + 160));
        v416 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 176)), v398, *(int8x16_t *)(v402 + 176));
        *(int8x16_t *)(v402 + 160) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v415, (float32x4_t)v399), v399, v415);
        *(int8x16_t *)(v402 + 176) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v416, (float32x4_t)v399), v399, v416);
        v417 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 192)), v398, *(int8x16_t *)(v402 + 192));
        v418 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 208)), v398, *(int8x16_t *)(v402 + 208));
        *(int8x16_t *)(v402 + 192) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v417, (float32x4_t)v399), v399, v417);
        *(int8x16_t *)(v402 + 208) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v418, (float32x4_t)v399), v399, v418);
        v419 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 224)), v398, *(int8x16_t *)(v402 + 224));
        v420 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 240)), v398, *(int8x16_t *)(v402 + 240));
        *(int8x16_t *)(v402 + 224) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v419, (float32x4_t)v399), v399, v419);
        *(int8x16_t *)(v402 + 240) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v420, (float32x4_t)v399), v399, v420);
        v421 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 256)), v398, *(int8x16_t *)(v402 + 256));
        v422 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 272)), v398, *(int8x16_t *)(v402 + 272));
        *(int8x16_t *)(v402 + 256) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v421, (float32x4_t)v399), v399, v421);
        *(int8x16_t *)(v402 + 272) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v422, (float32x4_t)v399), v399, v422);
        v423 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 288)), v398, *(int8x16_t *)(v402 + 288));
        v424 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 304)), v398, *(int8x16_t *)(v402 + 304));
        *(int8x16_t *)(v402 + 288) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v423, (float32x4_t)v399), v399, v423);
        *(int8x16_t *)(v402 + 304) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v424, (float32x4_t)v399), v399, v424);
        v425 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 320)), v398, *(int8x16_t *)(v402 + 320));
        v426 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 336)), v398, *(int8x16_t *)(v402 + 336));
        *(int8x16_t *)(v402 + 320) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v425, (float32x4_t)v399), v399, v425);
        *(int8x16_t *)(v402 + 336) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v426, (float32x4_t)v399), v399, v426);
        v427 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 352)), v398, *(int8x16_t *)(v402 + 352));
        v428 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 368)), v398, *(int8x16_t *)(v402 + 368));
        *(int8x16_t *)(v402 + 352) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v427, (float32x4_t)v399), v399, v427);
        *(int8x16_t *)(v402 + 368) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v428, (float32x4_t)v399), v399, v428);
        v429 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 384)), v398, *(int8x16_t *)(v402 + 384));
        v430 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 400)), v398, *(int8x16_t *)(v402 + 400));
        *(int8x16_t *)(v402 + 384) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v429, (float32x4_t)v399), v399, v429);
        *(int8x16_t *)(v402 + 400) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v430, (float32x4_t)v399), v399, v430);
        v431 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 416)), v398, *(int8x16_t *)(v402 + 416));
        v432 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 432)), v398, *(int8x16_t *)(v402 + 432));
        *(int8x16_t *)(v402 + 416) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v431, (float32x4_t)v399), v399, v431);
        *(int8x16_t *)(v402 + 432) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v432, (float32x4_t)v399), v399, v432);
        v433 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 448)), v398, *(int8x16_t *)(v402 + 448));
        v434 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 464)), v398, *(int8x16_t *)(v402 + 464));
        *(int8x16_t *)(v402 + 448) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v433, (float32x4_t)v399), v399, v433);
        *(int8x16_t *)(v402 + 464) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v434, (float32x4_t)v399), v399, v434);
        v435 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 480)), v398, *(int8x16_t *)(v402 + 480));
        v436 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 496)), v398, *(int8x16_t *)(v402 + 496));
        *(int8x16_t *)(v402 + 480) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v435, (float32x4_t)v399), v399, v435);
        *(int8x16_t *)(v402 + 496) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v436, (float32x4_t)v399), v399, v436);
        v437 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 512)), v398, *(int8x16_t *)(v402 + 512));
        v438 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 528)), v398, *(int8x16_t *)(v402 + 528));
        *(int8x16_t *)(v402 + 512) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v437, (float32x4_t)v399), v399, v437);
        *(int8x16_t *)(v402 + 528) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v438, (float32x4_t)v399), v399, v438);
        v439 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 544)), v398, *(int8x16_t *)(v402 + 544));
        v440 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 560)), v398, *(int8x16_t *)(v402 + 560));
        *(int8x16_t *)(v402 + 544) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v439, (float32x4_t)v399), v399, v439);
        *(int8x16_t *)(v402 + 560) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v440, (float32x4_t)v399), v399, v440);
        v441 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 576)), v398, *(int8x16_t *)(v402 + 576));
        v442 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 592)), v398, *(int8x16_t *)(v402 + 592));
        *(int8x16_t *)(v402 + 576) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v441, (float32x4_t)v399), v399, v441);
        *(int8x16_t *)(v402 + 592) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v442, (float32x4_t)v399), v399, v442);
        v443 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 608)), v398, *(int8x16_t *)(v402 + 608));
        v444 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v398, *(float32x4_t *)(v402 + 624)), v398, *(int8x16_t *)(v402 + 624));
        *(int8x16_t *)(v402 + 608) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v443, (float32x4_t)v399), v399, v443);
        *(int8x16_t *)(v402 + 624) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v444, (float32x4_t)v399), v399, v444);
        --v401;
      }
      while (v401);
      ++v394;
      v396 = (uint64_t *)((char *)v396 + v397);
    }
    while (v394 != v13);
  }
}

unint64_t webrtc::Normal::Process(uint64_t a1, uint64_t a2, unint64_t a3, int a4, _QWORD *a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  int16x8_t *v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  char v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __int16 v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  __int16 v82;
  uint64_t *v83;
  __int16 v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  __int128 *v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;

  v6 = a3;
  v103 = *MEMORY[0x24BDAC8D0];
  v7 = *a5;
  if (!a3)
  {
    (*(void (**)(_QWORD *))(v7 + 16))(a5);
    return v6;
  }
  if (a3 % (*(uint64_t (**)(_QWORD *))(v7 + 112))(a5))
  {
    (*(void (**)(_QWORD *))(*a5 + 16))(a5);
    return 0;
  }
  webrtc::AudioMultiVector::PushBackInterleaved(a5, a2, v6);
  v12 = *(int *)(a1 + 8);
  v13 = (int)v12 / 8000;
  if ((int)v12 >= -7999)
    v14 = (int)v12 / 8000;
  else
    v14 = ~v13;
  if (a4 == 1)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
    v20 = (*(uint64_t (**)(_QWORD *))(*a5 + 112))(a5);
    webrtc::AudioMultiVector::AudioMultiVector((webrtc::AudioMultiVector *)&v97, v20);
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), &v97);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
    v96 = (*(uint64_t (**)(_QWORD *))(*a5 + 112))(a5);
    v21 = v6 / v96;
    v22 = (int16x8_t *)operator new[]();
    if (!(*(uint64_t (**)(_QWORD *))(*a5 + 112))(a5))
    {
LABEL_78:
      MEMORY[0x20BD0ADD4](v22, 0x1000C80BDFB0063);
      *(_QWORD *)&v97 = &off_24C0AE108;
      v78 = (_QWORD *)*((_QWORD *)&v97 + 1);
      v77 = (_QWORD *)v98;
      if (*((_QWORD *)&v97 + 1) != (_QWORD)v98)
      {
        do
        {
          if (*v78)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)*v78 + 8))(*v78);
            v77 = (_QWORD *)v98;
          }
          ++v78;
        }
        while (v78 != v77);
        v78 = (_QWORD *)*((_QWORD *)&v97 + 1);
      }
      if (v78)
      {
        *(_QWORD *)&v98 = v78;
        operator delete(v78);
      }
      return v6;
    }
    v23 = 0;
    v24 = 37 - __clz(v14);
    v25 = v13 << 6;
    if (v21 < v25)
      v25 = v6 / v96;
    v95 = v25;
    if ((v12 + 7999) >= 0x3E7F)
      v26 = v24;
    else
      v26 = 36;
    if (v21 <= 1)
      v27 = 1;
    else
      v27 = v6 / v96;
    v92 = v27;
    v93 = 64 / v13;
    v94 = v26;
    while (1)
    {
      v28 = a5[1];
      if (v23 >= (a5[2] - v28) >> 3)
        goto LABEL_101;
      v29 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 128) + (v23 << 7));
      (*(void (**)(_QWORD, unint64_t, _QWORD, int16x8_t *))(**(_QWORD **)(v28 + 8 * v23) + 32))(*(_QWORD *)(v28 + 8 * v23), v21, 0, v22);
      v30 = WebRtcSpl_MaxAbsValueW16C(v22, v21);
      v31 = __clz(v30 * v30) - 1;
      if (!v30)
        v31 = 0;
      v32 = v94 - v31;
      v33 = v32 & ~(v32 >> 31);
      WebRtcSpl_DotProductWithScale((uint64_t)v22, (uint64_t)v22, v95, v32 & ~(v32 >> 31));
      v35 = v95 >> v33;
      if ((int)(v95 >> v33) >= 1
        && (v36 = v34 / (int)v35) != 0
        && (v37 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 56 * v23), v36 > v37))
      {
        v38 = v36 ^ (v36 >> 31);
        v39 = __clz(v38);
        v40 = v36 << (v39 - 17);
        v41 = v36 >> (17 - v39);
        if (v38 < 0x8000)
          LOWORD(v41) = v40;
        if ((_WORD)v41)
        {
          v42 = v37 << (v39 - 3);
          v43 = v37 >> (3 - v39);
          if (!(v38 >> 29))
            v43 = v42;
          v44 = v43 / (__int16)v41;
        }
        else
        {
          v44 = 0x7FFFFFFF;
        }
        v71 = WebRtcSpl_SqrtFloor(v44 << 14);
        if (v71 >= 0x4000)
          v45 = 0x4000;
        else
          v45 = v71;
      }
      else
      {
        v45 = 0x4000;
      }
      v46 = v29;
      if (v29 <= v45)
        v46 = v45;
      v47 = (0x4000 - v46) / v21;
      if (v93 > (int)v47)
        LODWORD(v47) = v93;
      if (v96 <= v6)
      {
        v48 = a5[1];
        if (v23 >= (a5[2] - v48) >> 3)
          goto LABEL_101;
        v49 = *(_QWORD **)(v48 + 8 * v23);
        v51 = v49[2];
        v50 = v49[3];
        v52 = v49[1];
        v53 = v92;
        do
        {
          if (v50 >= v51)
            v54 = v51;
          else
            v54 = 0;
          *(_WORD *)(v52 - 2 * v54 + 2 * v50) = (*(__int16 *)(v52 - 2 * v54 + 2 * v50) * (__int16)v46
                                                             + 0x2000) >> 14;
          v46 = v47 + (__int16)v46;
          if (v46 >= 0x4000)
            LOWORD(v46) = 0x4000;
          ++v50;
          --v53;
        }
        while (v53);
      }
      v55 = *(_QWORD *)(a1 + 40);
      v56 = *(_WORD *)(a1 + 48);
      if (v55 > (*(uint64_t (**)(_QWORD *))(*a5 + 120))(a5))
      {
        v55 = (*(uint64_t (**)(_QWORD *))(*a5 + 120))(a5);
        v56 = 0x4000 / (__int16)v55;
      }
      if (v55)
      {
        v57 = a5[1];
        if (v23 >= (a5[2] - v57) >> 3 || v23 >= (uint64_t)(v98 - *((_QWORD *)&v97 + 1)) >> 3)
          goto LABEL_101;
        v58 = 0;
        v59 = *(_QWORD *)(v57 + 8 * v23);
        v60 = *(_QWORD *)(v59 + 8);
        v63 = v59 + 16;
        v62 = *(_QWORD *)(v59 + 16);
        v61 = *(_QWORD *)(v63 + 8);
        v64 = *(_QWORD **)(*((_QWORD *)&v97 + 1) + 8 * v23);
        v66 = v64[2];
        v65 = v64[3];
        v67 = v64[1];
        do
        {
          v58 += v56;
          if (v61 >= v62)
            v68 = v62;
          else
            v68 = 0;
          v69 = v60 - 2 * v68;
          if (v65 >= v66)
            v70 = v66;
          else
            v70 = 0;
          *(_WORD *)(v69 + 2 * v61) = ((0x4000 - v58) * *(__int16 *)(v67 - 2 * v70 + 2 * v65++)
                                                   + v58 * *(__int16 *)(v69 + 2 * v61)
                                                   + 0x2000) >> 14;
          ++v61;
          --v55;
        }
        while (v55);
      }
      if (++v23 >= (*(uint64_t (**)(_QWORD *))(*a5 + 112))(a5))
        goto LABEL_78;
    }
  }
  if (a4 == 9)
  {
    v72 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
    if (v72)
    {
      if ((webrtc::ComfortNoiseDecoder::Generate(v72, (uint64_t)&v97, 0x30uLL, 0, v73, v74, v75, v76) & 1) == 0)
      {
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
      }
    }
    else
    {
      v79 = (_QWORD *)a5[1];
      if ((_QWORD *)a5[2] == v79)
        goto LABEL_101;
      (*(void (**)(_QWORD, _QWORD, _QWORD, __int128 *))(*(_QWORD *)*v79 + 32))(*v79, 8 * v13, 0, &v97);
    }
    v80 = *(_QWORD *)(a1 + 40);
    v81 = 48;
    if (v80 < 0x30)
      v81 = *(_QWORD *)(a1 + 40);
    if (!v81)
      return v6;
    if (v80 <= 0x30)
      v82 = *(_WORD *)(a1 + 48);
    else
      v82 = 341;
    v83 = (uint64_t *)a5[1];
    if ((uint64_t *)a5[2] != v83)
    {
      v84 = 0;
      v85 = *v83;
      v87 = *(_QWORD *)(*v83 + 16);
      v86 = *(_QWORD *)(*v83 + 24);
      v88 = *(_QWORD *)(v85 + 8);
      v89 = &v97;
      do
      {
        v84 += v82;
        if (v86 >= v87)
          v90 = v87;
        else
          v90 = 0;
        v91 = *(__int16 *)v89;
        v89 = (__int128 *)((char *)v89 + 2);
        *(_WORD *)(v88 - 2 * v90 + 2 * v86) = ((0x4000 - v84) * v91
                                                           + v84 * *(__int16 *)(v88 - 2 * v90 + 2 * v86)
                                                           + 0x2000) >> 14;
        ++v86;
        --v81;
      }
      while (v81);
      return v6;
    }
LABEL_101:
    __break(1u);
  }
  if (a4 == 11)
  {
    v15 = *(_QWORD *)(a1 + 56);
    v16 = 1000 * (*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 264)) / v12;
    if ((int)v16 >= 150 && *(_BYTE *)(v15 + 504))
    {
      v17 = *(_DWORD *)(v15 + 148) + v16;
      ++*(_DWORD *)(v15 + 144);
      *(_DWORD *)(v15 + 148) = v17;
      v18 = atomic_load(&webrtc::StatisticsCalculator::EndExpandEvent(int)::atomic_histogram_pointer);
      if (v18)
      {
        webrtc::metrics::HistogramAdd(v18, v16);
      }
      else
      {
        while (!__ldaxr(&webrtc::StatisticsCalculator::EndExpandEvent(int)::atomic_histogram_pointer))
        {
          if (!__stlxr(0, &webrtc::StatisticsCalculator::EndExpandEvent(int)::atomic_histogram_pointer))
            goto LABEL_19;
        }
        __clrex();
      }
    }
LABEL_19:
    *(_QWORD *)(v15 + 264) = *(_QWORD *)(v15 + 16);
  }
  return v6;
}

_QWORD *webrtc::NormalizeSimulcastSizeExperiment::GetBase2Exponent(uint64_t a1)
{
  _QWORD *result;
  int *p_p;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  const char *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  void *__p;
  unint64_t v20;
  unsigned __int8 v21;

  result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(&__p, a1, "WebRTC-NormalizeSimulcastResolution", 35);
  if (((char)v21 & 0x80000000) == 0)
  {
    p_p = (int *)&__p;
    v4 = v21;
    goto LABEL_6;
  }
  v4 = v20;
  if ((v20 & 0x8000000000000000) == 0)
  {
    p_p = (int *)__p;
    if (!v20 || __p)
    {
LABEL_6:
      if (v4 >= 7)
      {
        v6 = *p_p;
        v7 = *(int *)((char *)p_p + 3);
        v5 = v6 == 1650552389 && v7 == 1684368482;
        if ((v21 & 0x80) != 0)
        {
LABEL_20:
          operator delete(__p);
          if (!(_DWORD)v5)
            goto LABEL_21;
          goto LABEL_17;
        }
      }
      else
      {
        v5 = 0;
        if ((v21 & 0x80) != 0)
          goto LABEL_20;
      }
      if (!(_DWORD)v5)
      {
LABEL_21:
        v10 = 0;
        return (_QWORD *)(v10 | (unint64_t)(v5 << 32));
      }
LABEL_17:
      (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(&__p, a1, "WebRTC-NormalizeSimulcastResolution", 35);
      if ((char)v21 < 0)
      {
        if (!v20)
        {
          v10 = 0;
          v5 = 0;
          goto LABEL_37;
        }
        v18 = 0;
        v9 = (const char *)__p;
      }
      else
      {
        if (!v21)
          return 0;
        v18 = 0;
        v9 = (const char *)&__p;
      }
      if (sscanf(v9, "Enabled-%d", &v18) != 1)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          goto LABEL_31;
        goto LABEL_30;
      }
      v10 = v18;
      if (v18 >= 6)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          goto LABEL_31;
LABEL_30:
        rtc::webrtc_logging_impl::Log("\r\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/normalize_simulcast_size_experiment.cc");
LABEL_31:
        v5 = 0;
        v10 = 0;
        if (((char)v21 & 0x80000000) == 0)
          return (_QWORD *)(v10 | (unint64_t)(v5 << 32));
        goto LABEL_37;
      }
      v5 = 1;
      if (((char)v21 & 0x80000000) == 0)
        return (_QWORD *)(v10 | (unint64_t)(v5 << 32));
LABEL_37:
      operator delete(__p);
      return (_QWORD *)(v10 | (unint64_t)(v5 << 32));
    }
  }
  __break(1u);
  return result;
}

void sub_208690330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_208690344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void rtc::NullSocketServer::~NullSocketServer(rtc::NullSocketServer *this)
{
  pthread_cond_t *v1;

  *(_QWORD *)this = &off_24C0B7990;
  v1 = (pthread_cond_t *)((char *)this + 80);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
  pthread_cond_destroy(v1);
}

{
  pthread_cond_t *v1;

  *(_QWORD *)this = &off_24C0B7990;
  v1 = (pthread_cond_t *)((char *)this + 80);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
  pthread_cond_destroy(v1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::NullSocketServer::Wait(rtc::NullSocketServer *this, TimeDelta a2)
{
  TimeDelta v2;

  v2.var0 = 0x7FFFFFFFFFFFFFFFLL;
  rtc::Event::Wait((rtc::NullSocketServer *)((char *)this + 16), a2, v2);
  return 1;
}

uint64_t rtc::NullSocketServer::WakeUp(rtc::NullSocketServer *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  *((_BYTE *)this + 129) = 1;
  pthread_cond_broadcast((pthread_cond_t *)((char *)this + 80));
  return pthread_mutex_unlock(v2);
}

uint64_t rtc::NullSocketServer::CreateSocket(rtc::NullSocketServer *this)
{
  return 0;
}

uint64_t webrtc::ObjCFrameBuffer::ObjCFrameBuffer(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  pthread_mutexattr_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  *(_QWORD *)a1 = &unk_24C0B79D0;
  v4 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = objc_msgSend(v4, "width");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v4, "height");
  pthread_mutexattr_init(&v6);
  pthread_mutexattr_setpolicy_np(&v6, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 56), &v6);
  pthread_mutexattr_destroy(&v6);

  return a1;
}

void sub_20869055C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);

  _Unwind_Resume(a1);
}

void webrtc::ObjCFrameBuffer::~ObjCFrameBuffer(webrtc::ObjCFrameBuffer *this)
{
  void (*v2)(_QWORD);
  uint64_t v3;

  *(_QWORD *)this = &unk_24C0B79D0;
  if (!*((_QWORD *)this + 5))
  {
    objc_msgSend(*((id *)this + 1), "close");
    v2 = (void (*)(_QWORD))*((_QWORD *)this + 4);
    if (v2)
      v2(*((_QWORD *)this + 2));
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 56));
  v3 = *((_QWORD *)this + 5);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

}

void sub_208690600(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 40);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  _Unwind_Resume(a1);
}

uint64_t webrtc::ObjCFrameBuffer::type(webrtc::ObjCFrameBuffer *this)
{
  return 0;
}

uint64_t webrtc::ObjCFrameBuffer::width(webrtc::ObjCFrameBuffer *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t webrtc::ObjCFrameBuffer::height(webrtc::ObjCFrameBuffer *this)
{
  return *((unsigned int *)this + 13);
}

void webrtc::ObjCFrameBuffer::ToI420(webrtc::ObjCFrameBuffer *this@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  webrtc::ObjCFrameBuffer::wrapped_frame_buffer(this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    webrtc::ObjCFrameBuffer::wrapped_frame_buffer(this);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "toI420");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = operator new();
    v8 = v6;
    *(_QWORD *)v7 = &unk_24C0B7AF8;
    v9 = v8;
    *(_QWORD *)(v7 + 8) = v9;
    *(_DWORD *)(v7 + 16) = objc_msgSend(v9, "width");
    *(_DWORD *)(v7 + 20) = objc_msgSend(v9, "height");

    *(_QWORD *)v7 = off_24C0B7A40;
    *(_DWORD *)(v7 + 24) = 0;
    v10 = (unsigned int *)(v7 + 24);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    *a2 = v7;

    v12 = *((_DWORD *)this + 12);
    if (v12 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7)
      || (v13 = *((_DWORD *)this + 13), v13 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7)))
    {
      v15 = *((unsigned int *)this + 12);
      v14 = *((unsigned int *)this + 13);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 72))(&v19, v7, 0, 0, v16, v17, v15, v14);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v19 + 56))(&v20);
      v18 = v20;
      v20 = 0;
      *a2 = v18;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  else
  {
    *a2 = 0;
  }

}

void sub_20869082C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);

  _Unwind_Resume(a1);
}

id webrtc::ObjCFrameBuffer::wrapped_frame_buffer(webrtc::ObjCFrameBuffer *this)
{
  pthread_mutex_t *v2;
  id v3;
  uint64_t (*v5)(void);
  WK_RTCCVPixelBuffer *v6;
  void *v7;

  v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  if (!*((_QWORD *)this + 1))
  {
    v5 = (uint64_t (*)(void))*((_QWORD *)this + 3);
    if (v5)
    {
      if (*((_QWORD *)this + 2) && v5())
      {
        v6 = -[WK_RTCCVPixelBuffer initWithPixelBuffer:]([WK_RTCCVPixelBuffer alloc], "initWithPixelBuffer:", (*((uint64_t (**)(_QWORD))this + 3))(*((_QWORD *)this + 2)));
        v7 = (void *)*((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v6;

      }
    }
  }
  v3 = *((id *)this + 1);
  pthread_mutex_unlock(v2);
  return v3;
}

void sub_208690980(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

webrtc::I420BufferInterface *webrtc::ObjCFrameBuffer::CropAndScale@<X0>(webrtc::ObjCFrameBuffer *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t *a8@<X8>)
{
  webrtc::ObjCFrameBuffer *v14;
  pthread_mutex_t *v16;
  uint64_t v17;
  id v18;
  id v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  int v26;
  pthread_mutexattr_t v27;
  uint64_t v28;

  v14 = this;
  v28 = *MEMORY[0x24BDAC8D0];
  v25 = a7;
  v26 = a6;
  if (a3 | a2
    || (*(unsigned int (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)this + 40))(this) != (_DWORD)a4
    || (*(unsigned int (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)v14 + 48))(v14) != (_DWORD)a5)
  {
    return webrtc::VideoFrameBuffer::CropAndScale(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (pthread_mutex_t *)((char *)v14 + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)v14 + 56));
  if (!*((_QWORD *)v14 + 1) && *((_QWORD *)v14 + 3) && *((_QWORD *)v14 + 2))
  {
    rtc::make_ref_counted<webrtc::ObjCFrameBuffer,webrtc::ObjCFrameBuffer::BufferProvider &,int &,int &,(webrtc::ObjCFrameBuffer*)0>(&v24, (uint64_t)v14 + 16, &v26, &v25);
    v17 = v24;
  }
  else
  {
    v17 = operator new();
    v18 = *((id *)v14 + 1);
    *(_QWORD *)v17 = &unk_24C0B79D0;
    v19 = v18;
    *(_QWORD *)(v17 + 8) = v19;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_DWORD *)(v17 + 48) = a6;
    *(_DWORD *)(v17 + 52) = a7;
    pthread_mutexattr_init(&v27);
    pthread_mutexattr_setpolicy_np(&v27, 3);
    pthread_mutex_init((pthread_mutex_t *)(v17 + 56), &v27);
    pthread_mutexattr_destroy(&v27);

    *(_QWORD *)v17 = &unk_24C0B7BA8;
    *(_DWORD *)(v17 + 120) = 0;
    v20 = (unsigned int *)(v17 + 120);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (*((_QWORD *)v14 + 5))
    v14 = (webrtc::ObjCFrameBuffer *)*((_QWORD *)v14 + 5);
  (**(void (***)(webrtc::ObjCFrameBuffer *))v14)(v14);
  v22 = *(_QWORD *)(v17 + 40);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  *(_QWORD *)(v17 + 40) = v14;
  *a8 = v17;
  return (webrtc::I420BufferInterface *)pthread_mutex_unlock(v16);
}

void sub_208690BC4(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_208690C08()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);

  MEMORY[0x20BD0ADEC](v0, 0x10A1C40A31BA2F2);
  JUMPOUT(0x208690C44);
}

uint64_t rtc::make_ref_counted<webrtc::ObjCFrameBuffer,webrtc::ObjCFrameBuffer::BufferProvider &,int &,int &,(webrtc::ObjCFrameBuffer*)0>(uint64_t *a1, uint64_t a2, int *a3, int *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  unsigned int *v13;
  unsigned int v14;
  pthread_mutexattr_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  v9 = *a3;
  v10 = *a4;
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)v8 = &unk_24C0B79D0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 32) = v11;
  *(_QWORD *)(v8 + 40) = 0;
  *(_DWORD *)(v8 + 48) = v9;
  *(_DWORD *)(v8 + 52) = v10;
  pthread_mutexattr_init(&v15);
  pthread_mutexattr_setpolicy_np(&v15, 3);
  pthread_mutex_init((pthread_mutex_t *)(v8 + 56), &v15);
  result = pthread_mutexattr_destroy(&v15);
  *(_QWORD *)v8 = &unk_24C0B7BA8;
  *(_DWORD *)(v8 + 120) = 0;
  v13 = (unsigned int *)(v8 + 120);
  *a1 = v8;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  return result;
}

void sub_208690D5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 40);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  MEMORY[0x20BD0ADEC](v1, 0x10A1C40A31BA2F2);
  _Unwind_Resume(a1);
}

id webrtc::ToObjCVideoFrameBuffer(webrtc::ObjCFrameBuffer **a1)
{
  WK_RTCI420Buffer *v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  if ((*(unsigned int (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)*a1 + 32))(*a1))
  {
    v2 = [WK_RTCI420Buffer alloc];
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 56))(&v6);
    v3 = -[WK_RTCI420Buffer initWithFrameBuffer:](v2, "initWithFrameBuffer:", &v6);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v4 = (void *)v3;
  }
  else
  {
    webrtc::ObjCFrameBuffer::wrapped_frame_buffer(*a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v4;
}

void sub_208690E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::ObjCI420FrameBuffer>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 24);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::ObjCI420FrameBuffer>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 6;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::ObjCI420FrameBuffer>::~RefCountedObject(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0B7AF8;
  objc_msgSend(*(id *)(a1 + 8), "close");

  return a1;
}

void sub_208690F00(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void rtc::RefCountedObject<webrtc::`anonymous namespace'::ObjCI420FrameBuffer>::~RefCountedObject(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0B7AF8;
  objc_msgSend(*(id *)(a1 + 8), "close");

  JUMPOUT(0x20BD0ADECLL);
}

void sub_208690F60(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t webrtc::`anonymous namespace'::ObjCI420FrameBuffer::width(webrtc::_anonymous_namespace_::ObjCI420FrameBuffer *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t webrtc::`anonymous namespace'::ObjCI420FrameBuffer::height(webrtc::_anonymous_namespace_::ObjCI420FrameBuffer *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t webrtc::`anonymous namespace'::ObjCI420FrameBuffer::StrideY(id *this)
{
  return objc_msgSend(this[1], "strideY");
}

uint64_t webrtc::`anonymous namespace'::ObjCI420FrameBuffer::StrideU(id *this)
{
  return objc_msgSend(this[1], "strideU");
}

uint64_t webrtc::`anonymous namespace'::ObjCI420FrameBuffer::StrideV(id *this)
{
  return objc_msgSend(this[1], "strideV");
}

uint64_t webrtc::`anonymous namespace'::ObjCI420FrameBuffer::DataY(id *this)
{
  return objc_msgSend(this[1], "dataY");
}

uint64_t webrtc::`anonymous namespace'::ObjCI420FrameBuffer::DataU(id *this)
{
  return objc_msgSend(this[1], "dataU");
}

uint64_t webrtc::`anonymous namespace'::ObjCI420FrameBuffer::DataV(id *this)
{
  return objc_msgSend(this[1], "dataV");
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::ObjCI420FrameBuffer>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 24));
  return v1 == 1;
}

uint64_t rtc::RefCountedObject<webrtc::ObjCFrameBuffer>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 120);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::ObjCFrameBuffer>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 30;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::ObjCFrameBuffer>::~RefCountedObject(webrtc::ObjCFrameBuffer *a1)
{
  webrtc::ObjCFrameBuffer::~ObjCFrameBuffer(a1);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::ObjCFrameBuffer>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 120));
  return v1 == 1;
}

void webrtc::ObjCVideoDecoderFactory::~ObjCVideoDecoderFactory(id *this)
{

}

{

  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::ObjCVideoDecoderFactory::QueryCodecSupport(webrtc::ObjCVideoDecoderFactory *this, const webrtc::SdpVideoFormat *a2)
{
  const webrtc::SdpVideoFormat *v3;
  char *v4;
  const webrtc::SdpVideoFormat *v5;
  uint64_t v6;
  uint64_t v7;
  const webrtc::SdpVideoFormat *v9;
  void *v10;
  void *__p;
  const webrtc::SdpVideoFormat *v12;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 16))(&__p);
  v3 = (const webrtc::SdpVideoFormat *)__p;
  if (v12 == __p)
    v4 = 0;
  else
    v4 = (char *)__p;
  if (v12 == __p)
  {
    v7 = 0;
    if (!__p)
      return v7;
  }
  else
  {
    v5 = (const webrtc::SdpVideoFormat *)&v4[v12 - (const webrtc::SdpVideoFormat *)__p];
    do
    {
      webrtc::SdpVideoFormat::IsSameCodec(a2, v3);
      v7 = v6;
      if ((v6 & 1) != 0)
        break;
      v3 = (const webrtc::SdpVideoFormat *)((char *)v3 + 96);
    }
    while (v3 != v5);
    v3 = (const webrtc::SdpVideoFormat *)__p;
    if (!__p)
      return v7;
  }
  v9 = v12;
  v10 = v3;
  if (v12 != v3)
  {
    do
    {
      while (1)
      {
        if ((*((_BYTE *)v9 - 48) & 1) != 0)
          operator delete(*((void **)v9 - 5));
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v9 - 72, *((_QWORD *)v9 - 8));
        if (*((char *)v9 - 73) < 0)
          break;
        v9 = (const webrtc::SdpVideoFormat *)((char *)v9 - 96);
        if (v9 == v3)
          goto LABEL_18;
      }
      operator delete(*((void **)v9 - 12));
      v9 = (const webrtc::SdpVideoFormat *)((char *)v9 - 96);
    }
    while (v9 != v3);
LABEL_18:
    v10 = __p;
  }
  v12 = v3;
  operator delete(v10);
  return v7;
}

void **std::vector<webrtc::SdpVideoFormat>::~vector[abi:sn180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        while (1)
        {
          if ((*(_BYTE *)(v3 - 6) & 1) != 0)
            operator delete(*(v3 - 5));
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v3 - 9), (uint64_t)*(v3 - 8));
          if (*((char *)v3 - 73) < 0)
            break;
          v3 -= 12;
          if (v3 == v2)
            goto LABEL_9;
        }
        operator delete(*(v3 - 12));
        v3 -= 12;
      }
      while (v3 != v2);
LABEL_9:
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void webrtc::ObjCVideoDecoderFactory::Create(uint64_t a1@<X0>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  char v15;
  _QWORD *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) < 0)
    a2 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  objc_msgSend(*(id *)(a1 + 8), "supportedCodecs", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v22;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v22 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        objc_msgSend(v10, "name");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v5, "isEqualToString:", v11);

        if (v12)
        {
          objc_msgSend(*(id *)(a1 + 8), "createDecoder:", v10);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "implementationName");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v14, "isEqual:", CFSTR("VideoToolbox"));

          if ((v15 & 1) != 0)
          {
            v16 = (_QWORD *)operator new();
            v17 = v13;
            *v16 = off_24C0B7C58;
            v18 = v17;
            v16[1] = v18;
            objc_msgSend(v18, "implementationName");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = v19;
            if (v19)
            {
              objc_msgSend(v19, "rtcStdString");
            }
            else
            {
              v16[2] = 0;
              v16[3] = 0;
              v16[4] = 0;
            }

            *a3 = v16;
          }
          else if (v13)
          {
            objc_msgSend(v13, "releaseWrappedDecoder");
          }
          else
          {
            *a3 = 0;
          }

          goto LABEL_21;
        }
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (v7)
        continue;
      break;
    }
  }

  *a3 = 0;
LABEL_21:

}

void sub_208691494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  MEMORY[0x20BD0ADEC](v4, 0x1093C402AB95488);
  _Unwind_Resume(a1);
}

void webrtc::ObjCVideoDecoderFactory::GetSupportedFormats(id *this@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  unint64_t v8;
  __int128 v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  __int128 *v14;
  BOOL v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *__p[2];
  __int128 v22;
  __int128 v23;
  void *v24[6];
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  objc_msgSend(this[1], "supportedCodecs");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v18;
    v16 = v3;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        while (1)
        {
          if (*(_QWORD *)v18 != v5)
            objc_enumerationMutation(v3);
          v7 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
          if (v7)
          {
            objc_msgSend(v7, "nativeSdpVideoFormat");
            v8 = *(_QWORD *)(a2 + 8);
            if (v8 >= *(_QWORD *)(a2 + 16))
              goto LABEL_14;
          }
          else
          {
            v23 = 0u;
            memset(v24, 0, sizeof(v24));
            *(_OWORD *)__p = 0u;
            v22 = 0u;
            v8 = *(_QWORD *)(a2 + 8);
            if (v8 >= *(_QWORD *)(a2 + 16))
            {
LABEL_14:
              *(_QWORD *)(a2 + 8) = std::vector<webrtc::SdpVideoFormat>::__push_back_slow_path<webrtc::SdpVideoFormat const&>((std::string **)a2, (const webrtc::SdpVideoFormat *)__p);
              if (((uint64_t)v24[0] & 1) == 0)
                goto LABEL_4;
              goto LABEL_24;
            }
          }
          if (!v8)
            __break(1u);
          if (SBYTE7(v22) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v8, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v9 = *(_OWORD *)__p;
            *(_QWORD *)(v8 + 16) = v22;
            *(_OWORD *)v8 = v9;
          }
          *(_QWORD *)(v8 + 32) = 0;
          *(_QWORD *)(v8 + 24) = v8 + 32;
          *(_QWORD *)(v8 + 40) = 0;
          v10 = (__int128 *)*((_QWORD *)&v22 + 1);
          if (*((__int128 **)&v22 + 1) != &v23)
          {
            do
            {
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)(v8 + 24), (uint64_t *)(v8 + 32), (uint64_t)(v10 + 2), (uint64_t)(v10 + 2));
              v13 = (__int128 *)*((_QWORD *)v10 + 1);
              if (v13)
              {
                do
                {
                  v14 = v13;
                  v13 = *(__int128 **)v13;
                }
                while (v13);
              }
              else
              {
                do
                {
                  v14 = (__int128 *)*((_QWORD *)v10 + 2);
                  v15 = *(_QWORD *)v14 == (_QWORD)v10;
                  v10 = v14;
                }
                while (!v15);
              }
              v10 = v14;
            }
            while (v14 != &v23);
          }
          *(_QWORD *)(v8 + 48) = 0;
          v3 = v16;
          if (v24[0] < (void *)2)
            goto LABEL_23;
          if (((uint64_t)v24[0] & 1) == 0)
          {
            *(void **)(v8 + 48) = v24[0];
            v11 = *(_OWORD *)&v24[1];
            v12 = *(_OWORD *)&v24[3];
            *(void **)(v8 + 88) = v24[5];
            *(_OWORD *)(v8 + 72) = v12;
            *(_OWORD *)(v8 + 56) = v11;
LABEL_23:
            *(_QWORD *)(a2 + 8) = v8 + 96;
            *(_QWORD *)(a2 + 8) = v8 + 96;
            if (((uint64_t)v24[0] & 1) == 0)
              goto LABEL_4;
LABEL_24:
            operator delete(v24[1]);
            goto LABEL_4;
          }
          absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom((unint64_t *)(v8 + 48), (unint64_t *)v24);
          *(_QWORD *)(a2 + 8) = v8 + 96;
          *(_QWORD *)(a2 + 8) = v8 + 96;
          if (((uint64_t)v24[0] & 1) != 0)
            goto LABEL_24;
LABEL_4:
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v22 + 8, v23);
          if (SBYTE7(v22) < 0)
            break;
          if (++i == v4)
            goto LABEL_34;
        }
        operator delete(__p[0]);
      }
LABEL_34:
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
    }
    while (v4);
  }

}

void sub_2086917E0(_Unwind_Exception *a1)
{
  void **v1;
  void *v2;

  std::vector<webrtc::SdpVideoFormat>::~vector[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void webrtc::`anonymous namespace'::ObjCVideoDecoder::~ObjCVideoDecoder(void **this)
{
  *this = off_24C0B7C58;
  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);

  }
  else
  {

  }
}

{
  *this = off_24C0B7C58;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);

  JUMPOUT(0x20BD0ADECLL);
}

BOOL webrtc::`anonymous namespace'::ObjCVideoDecoder::Configure(id *this, const webrtc::VideoDecoder::Settings *a2)
{
  return objc_msgSend(this[1], "startDecodeWithNumberOfCores:", *((unsigned int *)a2 + 4)) == 0;
}

uint64_t webrtc::`anonymous namespace'::ObjCVideoDecoder::Decode(id *this, const webrtc::EncodedImage *a2, uint64_t a3, uint64_t a4)
{
  WK_RTCEncodedImage *v7;
  uint64_t v8;

  v7 = -[WK_RTCEncodedImage initWithNativeEncodedImage:]([WK_RTCEncodedImage alloc], "initWithNativeEncodedImage:", a2);
  v8 = objc_msgSend(this[1], "decode:missingFrames:codecSpecificInfo:renderTimeMs:", v7, a3, 0, a4);

  return v8;
}

void sub_20869196C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t webrtc::`anonymous namespace'::ObjCVideoDecoder::RegisterDecodeCompleteCallback(webrtc::_anonymous_namespace_::ObjCVideoDecoder *this, webrtc::DecodedImageCallback *a2)
{
  void *v2;
  _QWORD v4[5];

  v2 = (void *)*((_QWORD *)this + 1);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = ___ZN6webrtc12_GLOBAL__N_116ObjCVideoDecoder30RegisterDecodeCompleteCallbackEPNS_20DecodedImageCallbackE_block_invoke;
  v4[3] = &__block_descriptor_40_e26_v16__0__WK_RTCVideoFrame_8l;
  v4[4] = a2;
  objc_msgSend(v2, "setCallback:", v4);
  return 0;
}

uint64_t webrtc::`anonymous namespace'::ObjCVideoDecoder::Release(id *this)
{
  return objc_msgSend(this[1], "releaseDecoder");
}

uint64_t webrtc::`anonymous namespace'::ObjCVideoDecoder::ImplementationName(webrtc::_anonymous_namespace_::ObjCVideoDecoder *this)
{
  uint64_t result;

  result = (uint64_t)this + 16;
  if (*((char *)this + 39) < 0)
    return *(_QWORD *)result;
  return result;
}

void ___ZN6webrtc12_GLOBAL__N_116ObjCVideoDecoder30RegisterDecodeCompleteCallbackEPNS_20DecodedImageCallbackE_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  int v22;
  __int16 v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;
  char v31;
  char v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  char v38;
  char v39;

  v3 = a2;
  objc_msgSend(v3, "buffer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (unsigned int *)operator new();
  webrtc::ObjCFrameBuffer::ObjCFrameBuffer((uint64_t)v5, v4);
  *(_QWORD *)v5 = &unk_24C0B7BA8;
  v5[30] = 0;
  v6 = v5 + 30;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));

  BYTE8(v15) = 0;
  LOBYTE(v16) = 0;
  BYTE8(v16) = 0;
  LOBYTE(v19) = 0;
  BYTE4(v19) = 0;
  LOBYTE(v20) = 0;
  LOBYTE(v21) = 0;
  LOBYTE(v22) = 0;
  LOBYTE(v15) = 0;
  (**(void (***)(unsigned int *))v5)(v5);
  v17 = (int)objc_msgSend(v3, "timeStampNs") / 1000;
  v18 = objc_msgSend(v3, "rotation");
  v23 = 0;
  v24 = v5;
  (**(void (***)(unsigned int *))v5)(v5);
  v25 = v17;
  v26 = 0;
  v27 = 0;
  v28 = v15;
  v29 = v16;
  v30 = v18;
  v31 = 0;
  v32 = 0;
  v33 = v19;
  v34 = v20;
  v35 = v21;
  v36 = v22;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  v25 = objc_msgSend(v3, "timeStamp");
  (*(void (**)(_QWORD, __int16 *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v23);
  v8 = v37;
  if (v37)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      v11 = *(_QWORD *)(v8 + 8);
      if (v11)
      {
        v12 = *(_QWORD *)(v8 + 16);
        v13 = *(void **)(v8 + 8);
        if (v12 != v11)
        {
          do
          {
            v14 = *(void **)(v12 - 96);
            if (v14)
            {
              *(_QWORD *)(v12 - 88) = v14;
              operator delete(v14);
            }
            v12 -= 104;
          }
          while (v12 != v11);
          v13 = *(void **)(v8 + 8);
        }
        *(_QWORD *)(v8 + 16) = v11;
        operator delete(v13);
      }
      MEMORY[0x20BD0ADEC](v8, 0x1020C40E72D6CFBLL);
    }
  }
  if (v24)
    (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
  (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);

}

void sub_208691C9C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  MEMORY[0x20BD0ADEC](v2, 0x10A1C40A31BA2F2);

  _Unwind_Resume(a1);
}

void sub_208691CC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_208691CDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208691CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;
  uint64_t v35;

  webrtc::VideoFrame::~VideoFrame((webrtc::VideoFrame *)&a34);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);

  _Unwind_Resume(a1);
}

void webrtc::ObjCVideoEncoderFactory::~ObjCVideoEncoderFactory(id *this)
{

}

{

  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ObjCVideoEncoderFactory::GetSupportedFormats(id *this@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  unint64_t v8;
  __int128 v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  __int128 *v14;
  BOOL v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *__p[2];
  __int128 v22;
  __int128 v23;
  void *v24[6];
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  objc_msgSend(this[1], "supportedCodecs");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v18;
    v16 = v3;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        while (1)
        {
          if (*(_QWORD *)v18 != v5)
            objc_enumerationMutation(v3);
          v7 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
          if (v7)
          {
            objc_msgSend(v7, "nativeSdpVideoFormat");
            v8 = *(_QWORD *)(a2 + 8);
            if (v8 >= *(_QWORD *)(a2 + 16))
              goto LABEL_14;
          }
          else
          {
            v23 = 0u;
            memset(v24, 0, sizeof(v24));
            *(_OWORD *)__p = 0u;
            v22 = 0u;
            v8 = *(_QWORD *)(a2 + 8);
            if (v8 >= *(_QWORD *)(a2 + 16))
            {
LABEL_14:
              *(_QWORD *)(a2 + 8) = std::vector<webrtc::SdpVideoFormat>::__push_back_slow_path<webrtc::SdpVideoFormat const&>((std::string **)a2, (const webrtc::SdpVideoFormat *)__p);
              if (((uint64_t)v24[0] & 1) == 0)
                goto LABEL_4;
              goto LABEL_24;
            }
          }
          if (!v8)
            __break(1u);
          if (SBYTE7(v22) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v8, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v9 = *(_OWORD *)__p;
            *(_QWORD *)(v8 + 16) = v22;
            *(_OWORD *)v8 = v9;
          }
          *(_QWORD *)(v8 + 32) = 0;
          *(_QWORD *)(v8 + 24) = v8 + 32;
          *(_QWORD *)(v8 + 40) = 0;
          v10 = (__int128 *)*((_QWORD *)&v22 + 1);
          if (*((__int128 **)&v22 + 1) != &v23)
          {
            do
            {
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)(v8 + 24), (uint64_t *)(v8 + 32), (uint64_t)(v10 + 2), (uint64_t)(v10 + 2));
              v13 = (__int128 *)*((_QWORD *)v10 + 1);
              if (v13)
              {
                do
                {
                  v14 = v13;
                  v13 = *(__int128 **)v13;
                }
                while (v13);
              }
              else
              {
                do
                {
                  v14 = (__int128 *)*((_QWORD *)v10 + 2);
                  v15 = *(_QWORD *)v14 == (_QWORD)v10;
                  v10 = v14;
                }
                while (!v15);
              }
              v10 = v14;
            }
            while (v14 != &v23);
          }
          *(_QWORD *)(v8 + 48) = 0;
          v3 = v16;
          if (v24[0] < (void *)2)
            goto LABEL_23;
          if (((uint64_t)v24[0] & 1) == 0)
          {
            *(void **)(v8 + 48) = v24[0];
            v11 = *(_OWORD *)&v24[1];
            v12 = *(_OWORD *)&v24[3];
            *(void **)(v8 + 88) = v24[5];
            *(_OWORD *)(v8 + 72) = v12;
            *(_OWORD *)(v8 + 56) = v11;
LABEL_23:
            *(_QWORD *)(a2 + 8) = v8 + 96;
            *(_QWORD *)(a2 + 8) = v8 + 96;
            if (((uint64_t)v24[0] & 1) == 0)
              goto LABEL_4;
LABEL_24:
            operator delete(v24[1]);
            goto LABEL_4;
          }
          absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom((unint64_t *)(v8 + 48), (unint64_t *)v24);
          *(_QWORD *)(a2 + 8) = v8 + 96;
          *(_QWORD *)(a2 + 8) = v8 + 96;
          if (((uint64_t)v24[0] & 1) != 0)
            goto LABEL_24;
LABEL_4:
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v22 + 8, v23);
          if (SBYTE7(v22) < 0)
            break;
          if (++i == v4)
            goto LABEL_34;
        }
        operator delete(__p[0]);
      }
LABEL_34:
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
    }
    while (v4);
  }

}

void sub_20869203C(_Unwind_Exception *a1)
{
  void **v1;
  void *v2;

  std::vector<webrtc::SdpVideoFormat>::~vector[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void webrtc::ObjCVideoEncoderFactory::GetImplementations(id *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  unint64_t v9;
  __int128 v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  __int128 *v15;
  BOOL v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *__p[2];
  __int128 v23;
  __int128 v24;
  void *v25[6];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    objc_msgSend(this[1], "implementations");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    if (!v5)
      goto LABEL_36;
    v6 = *(_QWORD *)v19;
    v17 = v4;
    while (1)
    {
      for (i = 0; i != v5; ++i)
      {
        while (1)
        {
          if (*(_QWORD *)v19 != v6)
            objc_enumerationMutation(v4);
          v8 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
          if (v8)
          {
            objc_msgSend(v8, "nativeSdpVideoFormat");
            v9 = *(_QWORD *)(a2 + 8);
            if (v9 >= *(_QWORD *)(a2 + 16))
              goto LABEL_15;
          }
          else
          {
            v24 = 0u;
            memset(v25, 0, sizeof(v25));
            *(_OWORD *)__p = 0u;
            v23 = 0u;
            v9 = *(_QWORD *)(a2 + 8);
            if (v9 >= *(_QWORD *)(a2 + 16))
            {
LABEL_15:
              *(_QWORD *)(a2 + 8) = std::vector<webrtc::SdpVideoFormat>::__push_back_slow_path<webrtc::SdpVideoFormat const&>((std::string **)a2, (const webrtc::SdpVideoFormat *)__p);
              if (((uint64_t)v25[0] & 1) == 0)
                goto LABEL_5;
              goto LABEL_34;
            }
          }
          if (!v9)
            __break(1u);
          if (SBYTE7(v23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v9, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v10 = *(_OWORD *)__p;
            *(_QWORD *)(v9 + 16) = v23;
            *(_OWORD *)v9 = v10;
          }
          *(_QWORD *)(v9 + 32) = 0;
          *(_QWORD *)(v9 + 24) = v9 + 32;
          *(_QWORD *)(v9 + 40) = 0;
          v11 = (__int128 *)*((_QWORD *)&v23 + 1);
          if (*((__int128 **)&v23 + 1) != &v24)
          {
            do
            {
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)(v9 + 24), (uint64_t *)(v9 + 32), (uint64_t)(v11 + 2), (uint64_t)(v11 + 2));
              v14 = (__int128 *)*((_QWORD *)v11 + 1);
              if (v14)
              {
                do
                {
                  v15 = v14;
                  v14 = *(__int128 **)v14;
                }
                while (v14);
              }
              else
              {
                do
                {
                  v15 = (__int128 *)*((_QWORD *)v11 + 2);
                  v16 = *(_QWORD *)v15 == (_QWORD)v11;
                  v11 = v15;
                }
                while (!v16);
              }
              v11 = v15;
            }
            while (v15 != &v24);
          }
          *(_QWORD *)(v9 + 48) = 0;
          v4 = v17;
          if (v25[0] >= (void *)2)
          {
            if (((uint64_t)v25[0] & 1) != 0)
            {
              absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom((unint64_t *)(v9 + 48), (unint64_t *)v25);
              *(_QWORD *)(a2 + 8) = v9 + 96;
              *(_QWORD *)(a2 + 8) = v9 + 96;
              if (((uint64_t)v25[0] & 1) == 0)
                goto LABEL_5;
              goto LABEL_34;
            }
            *(void **)(v9 + 48) = v25[0];
            v12 = *(_OWORD *)&v25[1];
            v13 = *(_OWORD *)&v25[3];
            *(void **)(v9 + 88) = v25[5];
            *(_OWORD *)(v9 + 72) = v13;
            *(_OWORD *)(v9 + 56) = v12;
          }
          *(_QWORD *)(a2 + 8) = v9 + 96;
          *(_QWORD *)(a2 + 8) = v9 + 96;
          if (((uint64_t)v25[0] & 1) == 0)
            goto LABEL_5;
LABEL_34:
          operator delete(v25[1]);
LABEL_5:
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v23 + 8, v24);
          if (SBYTE7(v23) < 0)
            break;
          if (++i == v5)
            goto LABEL_35;
        }
        operator delete(__p[0]);
      }
LABEL_35:
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
      if (!v5)
      {
LABEL_36:

        return;
      }
    }
  }
  (*(void (**)(id *))*this)(this);
}

void sub_2086923A0(_Unwind_Exception *a1)
{
  void **v1;
  void *v2;

  std::vector<webrtc::SdpVideoFormat>::~vector[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void webrtc::ObjCVideoEncoderFactory::Create(uint64_t a1@<X0>, const webrtc::SdpVideoFormat *a2@<X2>, _QWORD *a3@<X8>)
{
  WK_RTCVideoCodecInfo *v6;
  WK_RTCVideoCodecInfo *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  _QWORD *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  std::string v18;
  uint64_t v19[3];
  char v20;
  void *__p;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = [WK_RTCVideoCodecInfo alloc];
  webrtc::SdpVideoFormat::SdpVideoFormat(&v18, a2);
  v7 = -[WK_RTCVideoCodecInfo initWithNativeSdpVideoFormat:](v6, "initWithNativeSdpVideoFormat:", &v18);
  if ((v20 & 1) != 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v19, v19[1]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  objc_msgSend(*(id *)(a1 + 8), "createEncoder:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[WK_RTCVideoCodecInfo name](v7, "name");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v9, "isEqual:", CFSTR("VP8")) & 1) != 0)
    goto LABEL_8;
  -[WK_RTCVideoCodecInfo name](v7, "name");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "isEqual:", CFSTR("VP9")))
  {

LABEL_8:
    goto LABEL_9;
  }
  -[WK_RTCVideoCodecInfo name](v7, "name");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "isEqual:", CFSTR("AV1"));

  if ((v12 & 1) != 0)
  {
LABEL_9:
    if (v8)
      objc_msgSend(v8, "releaseWrappedEncoder");
    else
      *a3 = 0;
    goto LABEL_17;
  }
  v13 = (_QWORD *)operator new();
  v14 = v8;
  *v13 = off_24C0B7D18;
  v15 = v14;
  v13[1] = v15;
  objc_msgSend(v15, "implementationName");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v16;
  if (v16)
  {
    objc_msgSend(v16, "rtcStdString");
  }
  else
  {
    v13[2] = 0;
    v13[3] = 0;
    v13[4] = 0;
  }

  *a3 = v13;
LABEL_17:

}

void sub_2086925DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  MEMORY[0x20BD0ADEC](v3, 0x1093C402AB95488);
  _Unwind_Resume(a1);
}

uint64_t webrtc::VideoEncoderFactory::QueryCodecSupport(void (***a1)(void **__return_ptr), webrtc::SdpVideoFormat *a2, uint64_t a3)
{
  uint64_t v3;
  const webrtc::SdpVideoFormat *v6;
  char *v7;
  const webrtc::SdpVideoFormat *v8;
  uint64_t v9;
  const webrtc::SdpVideoFormat *v10;
  void *v11;
  void *__p;
  const webrtc::SdpVideoFormat *v13;

  if (*(_BYTE *)(a3 + 24))
    return 0;
  (**a1)(&__p);
  v6 = (const webrtc::SdpVideoFormat *)__p;
  if (v13 == __p)
    v7 = 0;
  else
    v7 = (char *)__p;
  if (v13 == __p)
  {
    v3 = 0;
    if (!__p)
      return v3;
  }
  else
  {
    v8 = (const webrtc::SdpVideoFormat *)&v7[v13 - (const webrtc::SdpVideoFormat *)__p];
    do
    {
      webrtc::SdpVideoFormat::IsSameCodec(a2, v6);
      v3 = v9;
      if ((v9 & 1) != 0)
        break;
      v6 = (const webrtc::SdpVideoFormat *)((char *)v6 + 96);
    }
    while (v6 != v8);
    v6 = (const webrtc::SdpVideoFormat *)__p;
    if (!__p)
      return v3;
  }
  v10 = v13;
  v11 = v6;
  if (v13 != v6)
  {
    do
    {
      while (1)
      {
        if ((*((_BYTE *)v10 - 48) & 1) != 0)
          operator delete(*((void **)v10 - 5));
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v10 - 72, *((_QWORD *)v10 - 8));
        if (*((char *)v10 - 73) < 0)
          break;
        v10 = (const webrtc::SdpVideoFormat *)((char *)v10 - 96);
        if (v10 == v6)
          goto LABEL_21;
      }
      operator delete(*((void **)v10 - 12));
      v10 = (const webrtc::SdpVideoFormat *)((char *)v10 - 96);
    }
    while (v10 != v6);
LABEL_21:
    v11 = __p;
  }
  v13 = v6;
  operator delete(v11);
  return v3;
}

void webrtc::`anonymous namespace'::ObjCVideoEncoder::~ObjCVideoEncoder(void **this)
{
  *this = off_24C0B7D18;
  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);

  }
  else
  {

  }
}

{
  *this = off_24C0B7D18;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);

  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::ObjCVideoEncoder::InitEncode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int32 *v9;
  int32x4_t v10;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  BOOL v18;
  WK_RTCVideoEncoderSettings *v19;
  uint64_t v20;

  v5 = *(unsigned __int8 *)(a2 + 32);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(unsigned __int8 *)(a2 + 32);
  if (v6 >= 8)
  {
    v7 = v6 & 0xF8;
    v9 = (__int32 *)(a2 + 160);
    v10 = 0uLL;
    v11 = v7;
    v12 = 0uLL;
    do
    {
      v13.i32[0] = *(v9 - 27);
      v13.i32[1] = *(v9 - 18);
      v13.i32[2] = *(v9 - 9);
      v13.i32[3] = *v9;
      v14.i32[0] = v9[9];
      v14.i32[1] = v9[18];
      v14.i32[2] = v9[27];
      v14.i32[3] = v9[36];
      v10 = vaddq_s32(v13, v10);
      v12 = vaddq_s32(v14, v12);
      v9 += 72;
      v11 -= 8;
    }
    while (v11);
    v8 = vaddvq_s32(vaddq_s32(v12, v10));
    if (v7 == v6)
      goto LABEL_11;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v15 = v6 - v7;
  v16 = (int *)(a2 + 36 * v7 + 52);
  do
  {
    v17 = *v16;
    v16 += 9;
    v8 += v17;
    --v15;
  }
  while (v15);
LABEL_11:
  if (v8)
    v18 = v5 > 1;
  else
    v18 = 0;
  if (v18)
    return 4294967281;
  v19 = -[WK_RTCVideoEncoderSettings initWithNativeVideoCodec:]([WK_RTCVideoEncoderSettings alloc], "initWithNativeVideoCodec:", a2);
  v20 = objc_msgSend(*(id *)(a1 + 8), "startEncodeWithSettings:numberOfCores:", v19, *(unsigned int *)(a3 + 4));

  return v20;
}

void sub_20869297C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t webrtc::`anonymous namespace'::ObjCVideoEncoder::RegisterEncodeCompleteCallback(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD v4[5];

  v2 = *(void **)(a1 + 8);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = ___ZN6webrtc12_GLOBAL__N_116ObjCVideoEncoder30RegisterEncodeCompleteCallbackEPNS_20EncodedImageCallbackE_block_invoke;
  v4[3] = &__block_descriptor_40_e88_B32__0__WK_RTCEncodedImage_8___RTCCodecSpecificInfo__16__WK_RTCRtpFragmentationHeader_24l;
  v4[4] = a2;
  objc_msgSend(v2, "setCallback:", v4);
  return 0;
}

uint64_t webrtc::`anonymous namespace'::ObjCVideoEncoder::Release(id *this)
{
  return objc_msgSend(this[1], "releaseEncoder");
}

uint64_t webrtc::`anonymous namespace'::ObjCVideoEncoder::Encode(uint64_t a1, webrtc *a2, uint64_t *a3)
{
  const webrtc::VideoFrame *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *a3;
  if (a3[1] != *a3)
  {
    v9 = 0;
    do
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", *(int *)(v8 + 4 * v9));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "addObject:", v10);

      ++v9;
      v8 = *a3;
    }
    while (v9 < (a3[1] - *a3) >> 2);
  }
  v11 = *(void **)(a1 + 8);
  webrtc::ToObjCVideoFrame(a2, v6);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v11, "encode:codecSpecificInfo:frameTypes:", v12, 0, v7);

  return v13;
}

void sub_208692AD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_208692AE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208692AF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_208692B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t webrtc::`anonymous namespace'::ObjCVideoEncoder::SetRates(id *this, const webrtc::VideoEncoder::RateControlParameters *a2)
{
  return objc_msgSend(this[1], "setBitrate:framerate:", *((unsigned int *)a2 + 44) / 0x3E8uLL, (*((double *)a2 + 43) + 0.5));
}

void webrtc::`anonymous namespace'::ObjCVideoEncoder::GetEncoderInfo(webrtc::_anonymous_namespace_::ObjCVideoEncoder *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  void *v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  void *v9;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 12) = 0x10000E100;
  *(_WORD *)(a2 + 20) = 0;
  v4 = (_QWORD *)(a2 + 24);
  *(_BYTE *)(a2 + 47) = 7;
  if (a2 + 24 <= (unint64_t)"unknown" && a2 + 31 > (unint64_t)"unknown")
  {
    __break(1u);
  }
  else
  {
    strcpy((char *)(a2 + 24), "unknown");
    *(_WORD *)(a2 + 48) = 256;
    *(_BYTE *)(a2 + 64) = -1;
    *(_QWORD *)(a2 + 56) = 2;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_BYTE *)(a2 + 200) = 0;
    *(_DWORD *)(a2 + 216) = 1;
    *(_QWORD *)(a2 + 208) = 2;
    *(_WORD *)(a2 + 240) = 0;
    *(_BYTE *)(a2 + 21) = 1;
    if (v4 != (_QWORD *)((char *)this + 16))
    {
      if (*((char *)this + 39) < 0)
      {
        std::string::__assign_no_alias<true>(v4, *((char **)this + 2), *((_QWORD *)this + 3));
      }
      else
      {
        *(_OWORD *)v4 = *((_OWORD *)this + 1);
        *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 4);
      }
    }
    objc_msgSend(*((id *)this + 1), "scalingSettings");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v9 = v5;
      v6 = objc_msgSend(v5, "low");
      v7 = v6 | ((unint64_t)objc_msgSend(v9, "high") << 32);
      v8 = 1;
      v5 = v9;
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    *(_QWORD *)a2 = v7;
    *(_BYTE *)(a2 + 8) = v8;
    *(_DWORD *)(a2 + 12) = 57600;
    *(_BYTE *)(a2 + 49) = 1;

  }
}

void sub_208692C90(_Unwind_Exception *a1)
{
  void **v1;

  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v1);
  _Unwind_Resume(a1);
}

void sub_208692CA4(_Unwind_Exception *a1)
{
  void **v1;

  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v1);
  _Unwind_Resume(a1);
}

void sub_208692CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void **v10;

  webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v10);
  _Unwind_Resume(a1);
}

BOOL ___ZN6webrtc12_GLOBAL__N_116ObjCVideoEncoder30RegisterEncodeCompleteCallbackEPNS_20EncodedImageCallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _BOOL8 v12;
  objc_class *v13;
  void *v14;
  int v15;
  int v16;
  objc_class *v17;
  void *v18;
  int v19;
  int v20;
  char v21;
  void **v22;
  void **v23;
  void *v24;
  char v25;
  void **v26;
  void **v27;
  void **v28;
  void *v29;
  _OWORD v31[20];
  _BYTE __src[1640];
  uint64_t v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  void *v42;
  unsigned __int8 v43;
  _BYTE v44[24];
  void *v45;
  char v46;
  void *v47;
  void *v48;
  void **v49;
  char v50;
  __int16 v51;
  _DWORD __dst[410];
  unint64_t v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  void *__p;
  unsigned __int8 v63;
  _BYTE v64[24];
  void *v65;
  char v66;
  void *v67;
  void *v68;
  void **v69;
  char v70;
  __int16 v71;
  uint64_t v72;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v6 = v5;
  v7 = v2;
  v72 = *MEMORY[0x24BDAC8D0];
  v9 = v8;
  v10 = v6;
  v11 = v4;
  if (*(_QWORD *)(v7 + 32))
  {
    if (v9)
      objc_msgSend(v9, "nativeEncodedImage");
    else
      memset(v31, 0, sizeof(v31));
    __dst[0] = 0;
    LOBYTE(__dst[408]) = 1;
    LOBYTE(v53) = 0;
    v63 = 0;
    v64[0] = 0;
    v70 = 0;
    v71 = 0;
    bzero(&__dst[2], 0x658uLL);
    v13 = (objc_class *)objc_opt_class();
    NSStringFromClass(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "isEqual:", CFSTR("WK_RTCCodecSpecificInfoH264"));

    if (v15)
    {
      if (v10)
      {
        objc_msgSend(v10, "nativeCodecSpecificInfo");
        v16 = v43;
      }
      else
      {
        bzero(__src, 0x7D0uLL);
        v16 = 0;
      }
      memcpy(__dst, __src, 0x661uLL);
      if (v63 == v16)
      {
        if (v63)
          webrtc::GenericFrameInfo::operator=(&v53, (uint64_t)&v33);
LABEL_27:
        std::__optional_storage_base<webrtc::FrameDependencyStructure,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<webrtc::FrameDependencyStructure,false> const&>((webrtc::FrameDependencyStructure *)v64, (webrtc::FrameDependencyStructure *)v44);
        v71 = v51;
        if (!v50)
          goto LABEL_76;
        v22 = (void **)v48;
        if (!v48)
          goto LABEL_72;
        v23 = v49;
        v24 = v48;
        if (v49 == v48)
          goto LABEL_71;
        while (1)
        {
          if ((*(_BYTE *)(v23 - 3) & 1) != 0)
          {
            operator delete(*(v23 - 2));
            if ((*(_BYTE *)(v23 - 6) & 1) == 0)
            {
LABEL_34:
              if ((*(_BYTE *)(v23 - 12) & 1) != 0)
                goto LABEL_38;
              goto LABEL_31;
            }
          }
          else if ((*(_BYTE *)(v23 - 6) & 1) == 0)
          {
            goto LABEL_34;
          }
          operator delete(*(v23 - 5));
          if ((*(_BYTE *)(v23 - 12) & 1) != 0)
LABEL_38:
            operator delete(*(v23 - 11));
LABEL_31:
          v23 -= 13;
          if (v23 == v22)
            goto LABEL_70;
        }
      }
      if (!v63)
      {
        webrtc::GenericFrameInfo::GenericFrameInfo((webrtc::GenericFrameInfo *)&v53, (const webrtc::GenericFrameInfo *)&v33);
        v21 = 1;
        goto LABEL_26;
      }
      if (__p)
        operator delete(__p);
      if ((v60 & 1) != 0)
      {
        operator delete(v61);
        if ((v58 & 1) == 0)
        {
LABEL_21:
          if ((v56 & 1) == 0)
            goto LABEL_22;
          goto LABEL_54;
        }
      }
      else if ((v58 & 1) == 0)
      {
        goto LABEL_21;
      }
      operator delete(v59);
      if ((v56 & 1) == 0)
      {
LABEL_22:
        if ((v54 & 1) == 0)
        {
LABEL_24:
          v21 = 0;
LABEL_26:
          v63 = v21;
          goto LABEL_27;
        }
LABEL_23:
        operator delete(v55);
        goto LABEL_24;
      }
LABEL_54:
      operator delete(v57);
      if ((v54 & 1) == 0)
        goto LABEL_24;
      goto LABEL_23;
    }
    v17 = (objc_class *)objc_opt_class();
    NSStringFromClass(v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "isEqual:", CFSTR("WK_RTCCodecSpecificInfoH265"));

    if (!v19)
      goto LABEL_84;
    if (v10)
    {
      objc_msgSend(v10, "nativeCodecSpecificInfo");
      v20 = v43;
    }
    else
    {
      bzero(__src, 0x7D0uLL);
      v20 = 0;
    }
    memcpy(__dst, __src, 0x661uLL);
    if (v63 == v20)
    {
      if (v63)
        webrtc::GenericFrameInfo::operator=(&v53, (uint64_t)&v33);
LABEL_58:
      std::__optional_storage_base<webrtc::FrameDependencyStructure,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<webrtc::FrameDependencyStructure,false> const&>((webrtc::FrameDependencyStructure *)v64, (webrtc::FrameDependencyStructure *)v44);
      v71 = v51;
      if (!v50)
        goto LABEL_76;
      v22 = (void **)v48;
      if (!v48)
      {
LABEL_72:
        if ((v46 & 1) != 0)
          operator delete(v47);
        if ((v44[16] & 1) != 0)
          operator delete(v45);
LABEL_76:
        if (!v43)
          goto LABEL_84;
        if (v42)
          operator delete(v42);
        if ((v40 & 1) != 0)
        {
          operator delete(v41);
          if ((v38 & 1) == 0)
          {
LABEL_81:
            if ((v36 & 1) == 0)
              goto LABEL_82;
            goto LABEL_118;
          }
        }
        else if ((v38 & 1) == 0)
        {
          goto LABEL_81;
        }
        operator delete(v39);
        if ((v36 & 1) == 0)
        {
LABEL_82:
          if ((v34 & 1) != 0)
LABEL_83:
            operator delete(v35);
LABEL_84:
          v12 = (*(unsigned int (**)(_QWORD, _OWORD *, _DWORD *))(**(_QWORD **)(v7 + 32) + 16))(*(_QWORD *)(v7 + 32), v31, __dst) == 0;
          if (!v70)
            goto LABEL_102;
          v27 = (void **)v68;
          if (!v68)
          {
LABEL_98:
            if ((v66 & 1) != 0)
              operator delete(v67);
            if ((v64[16] & 1) != 0)
              operator delete(v65);
LABEL_102:
            if (!v63)
              goto LABEL_110;
            if (__p)
              operator delete(__p);
            if ((v60 & 1) != 0)
            {
              operator delete(v61);
              if ((v58 & 1) == 0)
              {
LABEL_107:
                if ((v56 & 1) == 0)
                  goto LABEL_108;
                goto LABEL_114;
              }
            }
            else if ((v58 & 1) == 0)
            {
              goto LABEL_107;
            }
            operator delete(v59);
            if ((v56 & 1) == 0)
            {
LABEL_108:
              if ((v54 & 1) != 0)
LABEL_109:
                operator delete(v55);
LABEL_110:
              webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)v31);
              goto LABEL_111;
            }
LABEL_114:
            operator delete(v57);
            if ((v54 & 1) == 0)
              goto LABEL_110;
            goto LABEL_109;
          }
          v28 = v69;
          v29 = v68;
          if (v69 == v68)
          {
LABEL_97:
            v69 = v27;
            operator delete(v29);
            goto LABEL_98;
          }
          while (1)
          {
            if ((*(_BYTE *)(v28 - 3) & 1) != 0)
            {
              operator delete(*(v28 - 2));
              if ((*(_BYTE *)(v28 - 6) & 1) == 0)
              {
LABEL_91:
                if ((*(_BYTE *)(v28 - 12) & 1) != 0)
                  goto LABEL_95;
                goto LABEL_88;
              }
            }
            else if ((*(_BYTE *)(v28 - 6) & 1) == 0)
            {
              goto LABEL_91;
            }
            operator delete(*(v28 - 5));
            if ((*(_BYTE *)(v28 - 12) & 1) != 0)
LABEL_95:
              operator delete(*(v28 - 11));
LABEL_88:
            v28 -= 13;
            if (v28 == v27)
            {
              v29 = v68;
              goto LABEL_97;
            }
          }
        }
LABEL_118:
        operator delete(v37);
        if ((v34 & 1) == 0)
          goto LABEL_84;
        goto LABEL_83;
      }
      v26 = v49;
      v24 = v48;
      if (v49 == v48)
      {
LABEL_71:
        v49 = v22;
        operator delete(v24);
        goto LABEL_72;
      }
      while (1)
      {
        if ((*(_BYTE *)(v26 - 3) & 1) != 0)
        {
          operator delete(*(v26 - 2));
          if ((*(_BYTE *)(v26 - 6) & 1) == 0)
          {
LABEL_65:
            if ((*(_BYTE *)(v26 - 12) & 1) != 0)
              goto LABEL_69;
            goto LABEL_62;
          }
        }
        else if ((*(_BYTE *)(v26 - 6) & 1) == 0)
        {
          goto LABEL_65;
        }
        operator delete(*(v26 - 5));
        if ((*(_BYTE *)(v26 - 12) & 1) != 0)
LABEL_69:
          operator delete(*(v26 - 11));
LABEL_62:
        v26 -= 13;
        if (v26 == v22)
        {
LABEL_70:
          v24 = v48;
          goto LABEL_71;
        }
      }
    }
    if (!v63)
    {
      webrtc::GenericFrameInfo::GenericFrameInfo((webrtc::GenericFrameInfo *)&v53, (const webrtc::GenericFrameInfo *)&v33);
      v25 = 1;
      goto LABEL_57;
    }
    if (__p)
      operator delete(__p);
    if ((v60 & 1) != 0)
    {
      operator delete(v61);
      if ((v58 & 1) == 0)
      {
LABEL_48:
        if ((v56 & 1) == 0)
          goto LABEL_49;
        goto LABEL_122;
      }
    }
    else if ((v58 & 1) == 0)
    {
      goto LABEL_48;
    }
    operator delete(v59);
    if ((v56 & 1) == 0)
    {
LABEL_49:
      if ((v54 & 1) == 0)
      {
LABEL_51:
        v25 = 0;
LABEL_57:
        v63 = v25;
        goto LABEL_58;
      }
LABEL_50:
      operator delete(v55);
      goto LABEL_51;
    }
LABEL_122:
    operator delete(v57);
    if ((v54 & 1) == 0)
      goto LABEL_51;
    goto LABEL_50;
  }
  v12 = 0;
LABEL_111:

  return v12;
}

void sub_208693328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  webrtc::CodecSpecificInfo::~CodecSpecificInfo((webrtc::CodecSpecificInfo *)&STACK[0x918]);
  webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)&a9);

  _Unwind_Resume(a1);
}

WK_RTCVideoFrame *webrtc::ToObjCVideoFrame(webrtc *this, const webrtc::VideoFrame *a2)
{
  WK_RTCVideoFrame *v3;
  webrtc::ObjCFrameBuffer *v4;
  void *v5;
  WK_RTCVideoFrame *v6;
  webrtc::ObjCFrameBuffer *v8;

  v3 = [WK_RTCVideoFrame alloc];
  v4 = (webrtc::ObjCFrameBuffer *)*((_QWORD *)this + 1);
  v8 = v4;
  if (v4)
    (**(void (***)(webrtc::ObjCFrameBuffer *))v4)(v4);
  webrtc::ToObjCVideoFrameBuffer(&v8);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[WK_RTCVideoFrame initWithBuffer:rotation:timeStampNs:](v3, "initWithBuffer:rotation:timeStampNs:", v5, *((unsigned int *)this + 18), 1000 * *((_QWORD *)this + 4));

  if (v8)
    (*(void (**)(webrtc::ObjCFrameBuffer *))(*(_QWORD *)v8 + 8))(v8);
  -[WK_RTCVideoFrame setTimeStamp:](v6, "setTimeStamp:", *((unsigned int *)this + 4));
  return v6;
}

void sub_208693444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208693454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (!a10)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

float webrtc::OouraFft::bitrv2_128(webrtc::OouraFft *this, float *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  float result;
  int v84;
  int v85;

  v2 = *((_DWORD *)a2 + 8);
  v3 = *((_DWORD *)a2 + 9);
  v4 = *((_DWORD *)a2 + 17);
  a2[8] = a2[16];
  *((_DWORD *)a2 + 9) = v4;
  *((_DWORD *)a2 + 16) = v2;
  *((_DWORD *)a2 + 17) = v3;
  v5 = *((_DWORD *)a2 + 64);
  v6 = *((_DWORD *)a2 + 65);
  v7 = *((_DWORD *)a2 + 3);
  a2[64] = a2[2];
  *((_DWORD *)a2 + 65) = v7;
  *((_DWORD *)a2 + 2) = v5;
  *((_DWORD *)a2 + 3) = v6;
  v8 = *((_DWORD *)a2 + 72);
  v9 = *((_DWORD *)a2 + 73);
  v10 = *((_DWORD *)a2 + 19);
  a2[72] = a2[18];
  *((_DWORD *)a2 + 73) = v10;
  *((_DWORD *)a2 + 18) = v8;
  *((_DWORD *)a2 + 19) = v9;
  v11 = *((_DWORD *)a2 + 80);
  v12 = *((_DWORD *)a2 + 81);
  v13 = *((_DWORD *)a2 + 11);
  a2[80] = a2[10];
  *((_DWORD *)a2 + 81) = v13;
  *((_DWORD *)a2 + 10) = v11;
  *((_DWORD *)a2 + 11) = v12;
  v14 = *((_DWORD *)a2 + 88);
  v15 = *((_DWORD *)a2 + 89);
  v16 = *((_DWORD *)a2 + 27);
  a2[88] = a2[26];
  *((_DWORD *)a2 + 89) = v16;
  *((_DWORD *)a2 + 26) = v14;
  *((_DWORD *)a2 + 27) = v15;
  v17 = *((_DWORD *)a2 + 74);
  v18 = *((_DWORD *)a2 + 75);
  v19 = *((_DWORD *)a2 + 83);
  a2[74] = a2[82];
  *((_DWORD *)a2 + 75) = v19;
  *((_DWORD *)a2 + 82) = v17;
  *((_DWORD *)a2 + 83) = v18;
  v20 = *((_DWORD *)a2 + 32);
  v21 = *((_DWORD *)a2 + 33);
  v22 = *((_DWORD *)a2 + 5);
  a2[32] = a2[4];
  *((_DWORD *)a2 + 33) = v22;
  *((_DWORD *)a2 + 4) = v20;
  *((_DWORD *)a2 + 5) = v21;
  v23 = *((_DWORD *)a2 + 40);
  v24 = *((_DWORD *)a2 + 41);
  v25 = *((_DWORD *)a2 + 21);
  a2[40] = a2[20];
  *((_DWORD *)a2 + 41) = v25;
  *((_DWORD *)a2 + 20) = v23;
  *((_DWORD *)a2 + 21) = v24;
  v26 = *((_DWORD *)a2 + 48);
  v27 = *((_DWORD *)a2 + 49);
  v28 = *((_DWORD *)a2 + 13);
  a2[48] = a2[12];
  *((_DWORD *)a2 + 49) = v28;
  *((_DWORD *)a2 + 12) = v26;
  *((_DWORD *)a2 + 13) = v27;
  v29 = *((_DWORD *)a2 + 56);
  v30 = *((_DWORD *)a2 + 57);
  v31 = *((_DWORD *)a2 + 29);
  a2[56] = a2[28];
  *((_DWORD *)a2 + 57) = v31;
  *((_DWORD *)a2 + 28) = v29;
  *((_DWORD *)a2 + 29) = v30;
  v32 = *((_DWORD *)a2 + 34);
  v33 = *((_DWORD *)a2 + 35);
  v34 = *((_DWORD *)a2 + 69);
  a2[34] = a2[68];
  *((_DWORD *)a2 + 35) = v34;
  *((_DWORD *)a2 + 68) = v32;
  *((_DWORD *)a2 + 69) = v33;
  v35 = *((_DWORD *)a2 + 42);
  v36 = *((_DWORD *)a2 + 43);
  v37 = *((_DWORD *)a2 + 85);
  a2[42] = a2[84];
  *((_DWORD *)a2 + 43) = v37;
  *((_DWORD *)a2 + 84) = v35;
  *((_DWORD *)a2 + 85) = v36;
  v38 = *((_DWORD *)a2 + 50);
  v39 = *((_DWORD *)a2 + 51);
  v40 = *((_DWORD *)a2 + 77);
  a2[50] = a2[76];
  *((_DWORD *)a2 + 51) = v40;
  *((_DWORD *)a2 + 76) = v38;
  *((_DWORD *)a2 + 77) = v39;
  v41 = *((_DWORD *)a2 + 58);
  v42 = *((_DWORD *)a2 + 59);
  v43 = *((_DWORD *)a2 + 93);
  a2[58] = a2[92];
  *((_DWORD *)a2 + 59) = v43;
  *((_DWORD *)a2 + 92) = v41;
  *((_DWORD *)a2 + 93) = v42;
  v44 = *((_DWORD *)a2 + 44);
  v45 = *((_DWORD *)a2 + 45);
  v46 = *((_DWORD *)a2 + 53);
  a2[44] = a2[52];
  *((_DWORD *)a2 + 45) = v46;
  *((_DWORD *)a2 + 52) = v44;
  *((_DWORD *)a2 + 53) = v45;
  v47 = *((_DWORD *)a2 + 96);
  v48 = *((_DWORD *)a2 + 97);
  v49 = *((_DWORD *)a2 + 7);
  a2[96] = a2[6];
  *((_DWORD *)a2 + 97) = v49;
  *((_DWORD *)a2 + 6) = v47;
  *((_DWORD *)a2 + 7) = v48;
  v50 = *((_DWORD *)a2 + 104);
  v51 = *((_DWORD *)a2 + 105);
  v52 = *((_DWORD *)a2 + 23);
  a2[104] = a2[22];
  *((_DWORD *)a2 + 105) = v52;
  *((_DWORD *)a2 + 22) = v50;
  *((_DWORD *)a2 + 23) = v51;
  v53 = *((_DWORD *)a2 + 112);
  v54 = *((_DWORD *)a2 + 113);
  v55 = *((_DWORD *)a2 + 15);
  a2[112] = a2[14];
  *((_DWORD *)a2 + 113) = v55;
  *((_DWORD *)a2 + 14) = v53;
  *((_DWORD *)a2 + 15) = v54;
  v56 = *((_DWORD *)a2 + 120);
  v57 = *((_DWORD *)a2 + 121);
  v58 = *((_DWORD *)a2 + 31);
  a2[120] = a2[30];
  *((_DWORD *)a2 + 121) = v58;
  *((_DWORD *)a2 + 30) = v56;
  *((_DWORD *)a2 + 31) = v57;
  v59 = *((_DWORD *)a2 + 98);
  v60 = *((_DWORD *)a2 + 99);
  v61 = *((_DWORD *)a2 + 71);
  a2[98] = a2[70];
  *((_DWORD *)a2 + 99) = v61;
  *((_DWORD *)a2 + 70) = v59;
  *((_DWORD *)a2 + 71) = v60;
  v62 = *((_DWORD *)a2 + 106);
  v63 = *((_DWORD *)a2 + 107);
  v64 = *((_DWORD *)a2 + 87);
  a2[106] = a2[86];
  *((_DWORD *)a2 + 107) = v64;
  *((_DWORD *)a2 + 86) = v62;
  *((_DWORD *)a2 + 87) = v63;
  v65 = *((_DWORD *)a2 + 114);
  v66 = *((_DWORD *)a2 + 115);
  v67 = *((_DWORD *)a2 + 79);
  a2[114] = a2[78];
  *((_DWORD *)a2 + 115) = v67;
  *((_DWORD *)a2 + 78) = v65;
  *((_DWORD *)a2 + 79) = v66;
  v68 = *((_DWORD *)a2 + 122);
  v69 = *((_DWORD *)a2 + 123);
  v70 = *((_DWORD *)a2 + 95);
  a2[122] = a2[94];
  *((_DWORD *)a2 + 123) = v70;
  *((_DWORD *)a2 + 94) = v68;
  *((_DWORD *)a2 + 95) = v69;
  v71 = *((_DWORD *)a2 + 100);
  v72 = *((_DWORD *)a2 + 101);
  v73 = *((_DWORD *)a2 + 39);
  a2[100] = a2[38];
  *((_DWORD *)a2 + 101) = v73;
  *((_DWORD *)a2 + 38) = v71;
  *((_DWORD *)a2 + 39) = v72;
  v74 = *((_DWORD *)a2 + 108);
  v75 = *((_DWORD *)a2 + 109);
  v76 = *((_DWORD *)a2 + 55);
  a2[108] = a2[54];
  *((_DWORD *)a2 + 109) = v76;
  *((_DWORD *)a2 + 54) = v74;
  *((_DWORD *)a2 + 55) = v75;
  v77 = *((_DWORD *)a2 + 116);
  v78 = *((_DWORD *)a2 + 117);
  v79 = *((_DWORD *)a2 + 47);
  a2[116] = a2[46];
  *((_DWORD *)a2 + 117) = v79;
  *((_DWORD *)a2 + 46) = v77;
  *((_DWORD *)a2 + 47) = v78;
  v80 = *((_DWORD *)a2 + 124);
  v81 = *((_DWORD *)a2 + 125);
  v82 = *((_DWORD *)a2 + 63);
  a2[124] = a2[62];
  *((_DWORD *)a2 + 125) = v82;
  *((_DWORD *)a2 + 62) = v80;
  *((_DWORD *)a2 + 63) = v81;
  result = a2[110];
  v84 = *((_DWORD *)a2 + 111);
  v85 = *((_DWORD *)a2 + 119);
  a2[110] = a2[118];
  *((_DWORD *)a2 + 111) = v85;
  a2[118] = result;
  *((_DWORD *)a2 + 119) = v84;
  return result;
}

float32x4_t webrtc::OouraFft::cftfsub_128(webrtc::OouraFft *this, float *a2)
{
  webrtc::OouraFft *v3;
  float *v4;
  float *v5;
  float *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float32x4_t v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float32x4_t v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  float32x4_t v24;
  float32x4_t result;
  float32x4x2_t v26;
  float32x4x2_t v27;
  float32x4x2_t v28;
  float32x4x2_t v29;
  float32x4x2_t v30;
  float32x4x2_t v31;
  float32x4x2_t v32;
  float32x4x2_t v33;
  float32x4x2_t v34;
  float32x4x2_t v35;
  float32x4x2_t v36;
  float32x4x2_t v37;
  float32x4x2_t v38;

  webrtc::OouraFft::cft1st_128(this, a2);
  webrtc::OouraFft::cftmdl_128(v3, a2);
  v26 = vld2q_f32(a2);
  v4 = a2 + 32;
  v30 = vld2q_f32(v4);
  v5 = a2 + 64;
  v34 = vld2q_f32(v5);
  v6 = a2 + 96;
  v35 = vld2q_f32(v6);
  v7 = vaddq_f32(v26.val[0], v30.val[0]);
  v8 = vaddq_f32(v26.val[1], v30.val[1]);
  v9 = vsubq_f32(v26.val[0], v30.val[0]);
  v26.val[0] = vsubq_f32(v26.val[1], v30.val[1]);
  v26.val[1] = vaddq_f32(v34.val[0], v35.val[0]);
  v30.val[0] = vaddq_f32(v34.val[1], v35.val[1]);
  v30.val[1] = vsubq_f32(v34.val[0], v35.val[0]);
  v34.val[0] = vsubq_f32(v34.val[1], v35.val[1]);
  v34.val[1] = vaddq_f32(v7, v26.val[1]);
  v35.val[0] = vaddq_f32(v8, v30.val[0]);
  v10 = a2;
  vst2q_f32(v10, *(float32x4x2_t *)((char *)&v34 + 16));
  v10 += 8;
  v34.val[1] = vsubq_f32(v7, v26.val[1]);
  v35.val[0] = vsubq_f32(v8, v30.val[0]);
  vst2q_f32(v5, *(float32x4x2_t *)((char *)&v34 + 16));
  v26.val[1] = vsubq_f32(v9, v34.val[0]);
  v30.val[0] = vaddq_f32(v26.val[0], v30.val[1]);
  vst2q_f32(v4, *(float32x4x2_t *)((char *)&v26 + 16));
  v26.val[1] = vaddq_f32(v9, v34.val[0]);
  v30.val[0] = vsubq_f32(v26.val[0], v30.val[1]);
  vst2q_f32(v6, *(float32x4x2_t *)((char *)&v26 + 16));
  v27 = vld2q_f32(v10);
  v11 = a2 + 40;
  v31 = vld2q_f32(v11);
  v34.val[0] = vaddq_f32(v27.val[0], v31.val[0]);
  v12 = a2 + 72;
  *(float32x4x2_t *)((char *)&v34 + 16) = vld2q_f32(v12);
  v35.val[1] = vaddq_f32(v27.val[1], v31.val[1]);
  v13 = a2 + 104;
  v36 = vld2q_f32(v13);
  v14 = vsubq_f32(v27.val[0], v31.val[0]);
  v27.val[0] = vsubq_f32(v27.val[1], v31.val[1]);
  v27.val[1] = vaddq_f32(v34.val[1], v36.val[0]);
  v31.val[0] = vaddq_f32(v35.val[0], v36.val[1]);
  v31.val[1] = vsubq_f32(v34.val[1], v36.val[0]);
  v34.val[1] = vsubq_f32(v35.val[0], v36.val[1]);
  v36.val[0] = vaddq_f32(v34.val[0], v27.val[1]);
  v36.val[1] = vaddq_f32(v35.val[1], v31.val[0]);
  vst2q_f32(v10, v36);
  v36.val[0] = vsubq_f32(v34.val[0], v27.val[1]);
  v36.val[1] = vsubq_f32(v35.val[1], v31.val[0]);
  vst2q_f32(v12, v36);
  v27.val[1] = vsubq_f32(v14, v34.val[1]);
  v31.val[0] = vaddq_f32(v27.val[0], v31.val[1]);
  vst2q_f32(v11, *(float32x4x2_t *)((char *)&v27 + 16));
  v27.val[1] = vaddq_f32(v14, v34.val[1]);
  v31.val[0] = vsubq_f32(v27.val[0], v31.val[1]);
  vst2q_f32(v13, *(float32x4x2_t *)((char *)&v27 + 16));
  v15 = a2 + 16;
  v28 = vld2q_f32(v15);
  v16 = a2 + 48;
  v32 = vld2q_f32(v16);
  v34.val[0] = vaddq_f32(v28.val[0], v32.val[0]);
  v17 = a2 + 80;
  *(float32x4x2_t *)((char *)&v34 + 16) = vld2q_f32(v17);
  v35.val[1] = vaddq_f32(v28.val[1], v32.val[1]);
  v18 = a2 + 112;
  v37 = vld2q_f32(v18);
  v19 = vsubq_f32(v28.val[0], v32.val[0]);
  v28.val[0] = vsubq_f32(v28.val[1], v32.val[1]);
  v28.val[1] = vaddq_f32(v34.val[1], v37.val[0]);
  v32.val[0] = vaddq_f32(v35.val[0], v37.val[1]);
  v32.val[1] = vsubq_f32(v34.val[1], v37.val[0]);
  v34.val[1] = vsubq_f32(v35.val[0], v37.val[1]);
  v37.val[0] = vaddq_f32(v34.val[0], v28.val[1]);
  v37.val[1] = vaddq_f32(v35.val[1], v32.val[0]);
  vst2q_f32(v15, v37);
  v37.val[0] = vsubq_f32(v34.val[0], v28.val[1]);
  v37.val[1] = vsubq_f32(v35.val[1], v32.val[0]);
  vst2q_f32(v17, v37);
  v28.val[1] = vsubq_f32(v19, v34.val[1]);
  v32.val[0] = vaddq_f32(v28.val[0], v32.val[1]);
  vst2q_f32(v16, *(float32x4x2_t *)((char *)&v28 + 16));
  v28.val[1] = vaddq_f32(v19, v34.val[1]);
  v32.val[0] = vsubq_f32(v28.val[0], v32.val[1]);
  vst2q_f32(v18, *(float32x4x2_t *)((char *)&v28 + 16));
  v20 = a2 + 24;
  v29 = vld2q_f32(v20);
  v21 = a2 + 56;
  v33 = vld2q_f32(v21);
  v34.val[0] = vaddq_f32(v29.val[0], v33.val[0]);
  v22 = a2 + 88;
  *(float32x4x2_t *)((char *)&v34 + 16) = vld2q_f32(v22);
  v35.val[1] = vaddq_f32(v29.val[1], v33.val[1]);
  v23 = a2 + 120;
  v38 = vld2q_f32(v23);
  v24 = vsubq_f32(v29.val[0], v33.val[0]);
  result = vsubq_f32(v29.val[1], v33.val[1]);
  v29.val[1] = vaddq_f32(v34.val[1], v38.val[0]);
  v33.val[0] = vaddq_f32(v35.val[0], v38.val[1]);
  v33.val[1] = vsubq_f32(v34.val[1], v38.val[0]);
  v34.val[1] = vsubq_f32(v35.val[0], v38.val[1]);
  v38.val[0] = vaddq_f32(v34.val[0], v29.val[1]);
  v38.val[1] = vaddq_f32(v35.val[1], v33.val[0]);
  vst2q_f32(v20, v38);
  v38.val[0] = vsubq_f32(v34.val[0], v29.val[1]);
  v38.val[1] = vsubq_f32(v35.val[1], v33.val[0]);
  vst2q_f32(v22, v38);
  v29.val[1] = vsubq_f32(v24, v34.val[1]);
  v33.val[0] = vaddq_f32(result, v33.val[1]);
  vst2q_f32(v21, *(float32x4x2_t *)((char *)&v29 + 16));
  v29.val[1] = vaddq_f32(v24, v34.val[1]);
  v33.val[0] = vsubq_f32(result, v33.val[1]);
  vst2q_f32(v23, *(float32x4x2_t *)((char *)&v29 + 16));
  return result;
}

double webrtc::OouraFft::InverseFft(webrtc::OouraFft *this, float *a2)
{
  uint64_t v3;
  float v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  webrtc::OouraFft *v20;
  double result;

  v3 = 0;
  v4 = (float)(*a2 - a2[1]) * 0.5;
  *a2 = *a2 - v4;
  a2[1] = -v4;
  v5 = a2 + 126;
  v6 = (float *)&dword_208F0E314;
  v7 = (float *)&dword_208F0E38C;
  v8 = a2 + 3;
  do
  {
    v9 = *v7--;
    v10 = 0.5 - v9;
    v11 = *v6++;
    v12 = *(v8 - 1);
    v13 = &v5[v3];
    v14 = v12 - v5[v3];
    v15 = *v8 + v5[v3 + 1];
    v16 = (float)(v11 * v15) + (float)(v10 * v14);
    v17 = (float)(v10 * v15) - (float)(v11 * v14);
    v18 = v17 - *v8;
    *(v8 - 1) = v12 - v16;
    *v8 = v18;
    v19 = v17 - v5[v3 + 1];
    *v13 = v16 + v5[v3];
    v13[1] = v19;
    v3 -= 2;
    v8 += 2;
  }
  while (v3 != -62);
  a2[65] = -a2[65];
  webrtc::OouraFft::bitrv2_128(this, a2);
  *(_QWORD *)&result = webrtc::OouraFft::cftbsub_128(v20, a2).u64[0];
  return result;
}

float32x4_t webrtc::OouraFft::cftbsub_128(webrtc::OouraFft *this, float *a2)
{
  webrtc::OouraFft *v3;
  float *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float *v8;
  float *v9;
  float32x4_t v10;
  float32x4_t v11;
  float *v12;
  float *v13;
  float32x4_t v14;
  float *v15;
  float32x4_t v16;
  float *v17;
  float32x4_t v18;
  float *v19;
  float *v20;
  float32x4_t v21;
  float *v22;
  float32x4_t v23;
  float *v24;
  float32x4_t v25;
  float *v26;
  float *v27;
  float32x4_t v28;
  float *v29;
  float32x4_t v30;
  float *v31;
  float32x4_t v32;
  float32x4_t result;
  float32x4x2_t v34;
  float32x4x2_t v35;
  float32x4x2_t v36;
  float32x4x2_t v37;
  float32x4x2_t v38;
  float32x4x2_t v39;
  float32x4x2_t v40;
  float32x4x2_t v41;
  float32x4x2_t v42;
  float32x4x2_t v43;
  float32x4x2_t v44;
  float32x4x2_t v45;
  float32x4x2_t v46;
  float32x4x2_t v47;
  float32x4x2_t v48;

  webrtc::OouraFft::cft1st_128(this, a2);
  webrtc::OouraFft::cftmdl_128(v3, a2);
  v34 = vld2q_f32(a2);
  v4 = a2 + 32;
  v38 = vld2q_f32(v4);
  v5 = vaddq_f32(v34.val[0], v38.val[0]);
  v6 = vsubq_f32(vnegq_f32(v34.val[1]), v38.val[1]);
  v7 = vsubq_f32(v34.val[0], v38.val[0]);
  v8 = a2 + 64;
  v45 = vld2q_f32(v8);
  v34.val[0] = vsubq_f32(v38.val[1], v34.val[1]);
  v9 = a2 + 96;
  *(float32x4x2_t *)((char *)&v34 + 16) = vld2q_f32(v9);
  v38.val[1] = vaddq_f32(v45.val[0], v34.val[1]);
  v10 = vaddq_f32(v45.val[1], v38.val[0]);
  v11 = vsubq_f32(v45.val[0], v34.val[1]);
  v34.val[1] = vsubq_f32(v45.val[1], v38.val[0]);
  v45.val[0] = vaddq_f32(v5, v38.val[1]);
  v45.val[1] = vsubq_f32(v6, v10);
  v12 = a2;
  vst2q_f32(v12, v45);
  v12 += 8;
  v38.val[0] = vsubq_f32(v5, v38.val[1]);
  v38.val[1] = vaddq_f32(v6, v10);
  vst2q_f32(v8, v38);
  v38.val[0] = vsubq_f32(v7, v34.val[1]);
  v38.val[1] = vsubq_f32(v34.val[0], v11);
  vst2q_f32(v4, v38);
  v34.val[1] = vaddq_f32(v7, v34.val[1]);
  v38.val[0] = vaddq_f32(v34.val[0], v11);
  vst2q_f32(v9, *(float32x4x2_t *)((char *)&v34 + 16));
  v35 = vld2q_f32(v12);
  v13 = a2 + 40;
  v39 = vld2q_f32(v13);
  v14 = vaddq_f32(v35.val[0], v39.val[0]);
  v15 = a2 + 72;
  v42 = vld2q_f32(v15);
  v16 = vsubq_f32(vnegq_f32(v35.val[1]), v39.val[1]);
  v17 = a2 + 104;
  v46 = vld2q_f32(v17);
  v18 = vsubq_f32(v35.val[0], v39.val[0]);
  v35.val[0] = vsubq_f32(v39.val[1], v35.val[1]);
  v35.val[1] = vaddq_f32(v42.val[0], v46.val[0]);
  v39.val[0] = vaddq_f32(v42.val[1], v46.val[1]);
  v39.val[1] = vsubq_f32(v42.val[0], v46.val[0]);
  v42.val[0] = vsubq_f32(v42.val[1], v46.val[1]);
  v46.val[0] = vaddq_f32(v14, v35.val[1]);
  v46.val[1] = vsubq_f32(v16, v39.val[0]);
  vst2q_f32(v12, v46);
  v46.val[0] = vsubq_f32(v14, v35.val[1]);
  v46.val[1] = vaddq_f32(v16, v39.val[0]);
  vst2q_f32(v15, v46);
  v35.val[1] = vsubq_f32(v18, v42.val[0]);
  v39.val[0] = vsubq_f32(v35.val[0], v39.val[1]);
  vst2q_f32(v13, *(float32x4x2_t *)((char *)&v35 + 16));
  v35.val[1] = vaddq_f32(v18, v42.val[0]);
  v39.val[0] = vaddq_f32(v35.val[0], v39.val[1]);
  vst2q_f32(v17, *(float32x4x2_t *)((char *)&v35 + 16));
  v19 = a2 + 16;
  v36 = vld2q_f32(v19);
  v20 = a2 + 48;
  v40 = vld2q_f32(v20);
  v21 = vaddq_f32(v36.val[0], v40.val[0]);
  v22 = a2 + 80;
  v43 = vld2q_f32(v22);
  v23 = vsubq_f32(vnegq_f32(v36.val[1]), v40.val[1]);
  v24 = a2 + 112;
  v47 = vld2q_f32(v24);
  v25 = vsubq_f32(v36.val[0], v40.val[0]);
  v36.val[0] = vsubq_f32(v40.val[1], v36.val[1]);
  v36.val[1] = vaddq_f32(v43.val[0], v47.val[0]);
  v40.val[0] = vaddq_f32(v43.val[1], v47.val[1]);
  v40.val[1] = vsubq_f32(v43.val[0], v47.val[0]);
  v43.val[0] = vsubq_f32(v43.val[1], v47.val[1]);
  v47.val[0] = vaddq_f32(v21, v36.val[1]);
  v47.val[1] = vsubq_f32(v23, v40.val[0]);
  vst2q_f32(v19, v47);
  v47.val[0] = vsubq_f32(v21, v36.val[1]);
  v47.val[1] = vaddq_f32(v23, v40.val[0]);
  vst2q_f32(v22, v47);
  v36.val[1] = vsubq_f32(v25, v43.val[0]);
  v40.val[0] = vsubq_f32(v36.val[0], v40.val[1]);
  vst2q_f32(v20, *(float32x4x2_t *)((char *)&v36 + 16));
  v36.val[1] = vaddq_f32(v25, v43.val[0]);
  v40.val[0] = vaddq_f32(v36.val[0], v40.val[1]);
  vst2q_f32(v24, *(float32x4x2_t *)((char *)&v36 + 16));
  v26 = a2 + 24;
  v37 = vld2q_f32(v26);
  v27 = a2 + 56;
  v41 = vld2q_f32(v27);
  v28 = vaddq_f32(v37.val[0], v41.val[0]);
  v29 = a2 + 88;
  v44 = vld2q_f32(v29);
  v30 = vsubq_f32(vnegq_f32(v37.val[1]), v41.val[1]);
  v31 = a2 + 120;
  v48 = vld2q_f32(v31);
  v32 = vsubq_f32(v37.val[0], v41.val[0]);
  result = vsubq_f32(v41.val[1], v37.val[1]);
  v37.val[1] = vaddq_f32(v44.val[0], v48.val[0]);
  v41.val[0] = vaddq_f32(v44.val[1], v48.val[1]);
  v41.val[1] = vsubq_f32(v44.val[0], v48.val[0]);
  v44.val[0] = vsubq_f32(v44.val[1], v48.val[1]);
  v48.val[0] = vaddq_f32(v28, v37.val[1]);
  v48.val[1] = vsubq_f32(v30, v41.val[0]);
  vst2q_f32(v26, v48);
  v48.val[0] = vsubq_f32(v28, v37.val[1]);
  v48.val[1] = vaddq_f32(v30, v41.val[0]);
  vst2q_f32(v29, v48);
  v37.val[1] = vsubq_f32(v32, v44.val[0]);
  v41.val[0] = vsubq_f32(result, v41.val[1]);
  vst2q_f32(v27, *(float32x4x2_t *)((char *)&v37 + 16));
  v37.val[1] = vaddq_f32(v32, v44.val[0]);
  v41.val[0] = vaddq_f32(result, v41.val[1]);
  vst2q_f32(v31, *(float32x4x2_t *)((char *)&v37 + 16));
  return result;
}

float webrtc::OouraFft::cft1st_128(webrtc::OouraFft *this, float *a2)
{
  unint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float *v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float result;

  v2 = 0;
  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a2 + v4;
  v7 = v3 + v5;
  v8 = *a2 - v4;
  v9 = v3 - v5;
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  v13 = a2[7];
  v14 = v10 + v12;
  v15 = v11 + v13;
  v16 = v10 - v12;
  v17 = v11 - v13;
  *a2 = v6 + v14;
  a2[1] = v7 + v15;
  a2[4] = v6 - v14;
  a2[5] = v7 - v15;
  a2[2] = v8 - v17;
  a2[3] = v9 + v16;
  a2[6] = v8 + v17;
  a2[7] = v9 - v16;
  v18 = a2[8];
  v19 = a2[9];
  v20 = a2[10];
  v21 = a2[11];
  v22 = v18 + v20;
  v23 = v19 + v21;
  v24 = v18 - v20;
  v25 = v19 - v21;
  v26 = a2[12];
  v27 = a2[13];
  v28 = a2[14];
  v29 = a2[15];
  v30 = v26 + v28;
  v31 = v27 + v29;
  v32 = v26 - v28;
  v33 = v27 - v29;
  a2[8] = v22 + v30;
  a2[9] = v23 + v31;
  a2[12] = v31 - v23;
  a2[13] = v22 - v30;
  a2[10] = (float)((float)(v24 - v33) - (float)(v25 + v32)) * 0.70711;
  a2[11] = (float)((float)(v25 + v32) + (float)(v24 - v33)) * 0.70711;
  v34 = v24 + v33;
  v35 = v32 - v25;
  a2[14] = (float)(v35 - v34) * 0.70711;
  a2[15] = (float)(v35 + v34) * 0.70711;
  v36 = a2 + 31;
  v37 = 0xCu;
  do
  {
    v38 = *(float *)((char *)&webrtc::rdft_w + v37 - 4);
    v39 = *(float *)((char *)&webrtc::rdft_w + v37);
    v40 = *(float *)((char *)&webrtc::rdft_w + v2 + 16);
    v41 = *(float *)((char *)&webrtc::rdft_w + v2 + 20);
    v42 = *(float *)((char *)&webrtc::rdft_wk3ri_first + v37 - 4);
    v43 = *(float *)((char *)&webrtc::rdft_wk3ri_first + v37);
    v44 = *(v36 - 15);
    v45 = *(v36 - 14);
    v46 = *(v36 - 13);
    v47 = *(v36 - 12);
    v48 = v44 + v46;
    v49 = v45 + v47;
    v50 = v44 - v46;
    v51 = v45 - v47;
    v52 = *(v36 - 11);
    v53 = *(v36 - 10);
    v54 = *(v36 - 9);
    v55 = *(v36 - 8);
    v56 = v52 + v54;
    v57 = v53 + v55;
    v58 = v52 - v54;
    v59 = v53 - v55;
    *(v36 - 15) = v48 + v56;
    *(v36 - 14) = v49 + v57;
    v60 = v48 - v56;
    v61 = v49 - v57;
    *(v36 - 11) = (float)(v38 * v60) - (float)(v39 * v61);
    *(v36 - 10) = (float)(v39 * v60) + (float)(v38 * v61);
    *(v36 - 13) = (float)(v40 * (float)(v50 - v59)) - (float)(v41 * (float)(v51 + v58));
    *(v36 - 12) = (float)(v41 * (float)(v50 - v59)) + (float)(v40 * (float)(v51 + v58));
    *(v36 - 9) = (float)(v42 * (float)(v50 + v59)) - (float)(v43 * (float)(v51 - v58));
    *(v36 - 8) = (float)(v43 * (float)(v50 + v59)) + (float)(v42 * (float)(v51 - v58));
    v62 = *(float *)((char *)&webrtc::rdft_w + v2 + 24);
    v63 = *(float *)((char *)&webrtc::rdft_w + v2 + 28);
    v64 = *(float *)((char *)&webrtc::rdft_wk3ri_second + v37 - 4);
    v65 = *(float *)((char *)&webrtc::rdft_wk3ri_second + v37);
    v66 = *(v36 - 7);
    v67 = *(v36 - 6);
    v68 = *(v36 - 5);
    v69 = *(v36 - 4);
    v70 = v66 + v68;
    v71 = v67 + v69;
    v72 = v66 - v68;
    v73 = v67 - v69;
    v75 = *(v36 - 2);
    v74 = *(v36 - 1);
    v76 = *(v36 - 3);
    v77 = v76 + v74;
    v78 = v75 + *v36;
    v79 = v76 - v74;
    v80 = v75 - *v36;
    *(v36 - 7) = v70 + v77;
    *(v36 - 6) = v71 + v78;
    v81 = v70 - v77;
    v82 = v71 - v78;
    *(v36 - 3) = (float)-(float)(v38 * v82) - (float)(v39 * v81);
    *(v36 - 2) = (float)(v38 * v81) - (float)(v39 * v82);
    *(v36 - 5) = (float)(v62 * (float)(v72 - v80)) - (float)(v63 * (float)(v73 + v79));
    *(v36 - 4) = (float)(v63 * (float)(v72 - v80)) + (float)(v62 * (float)(v73 + v79));
    result = (float)(v65 * (float)(v72 + v80)) + (float)(v64 * (float)(v73 - v79));
    *(v36 - 1) = (float)(v64 * (float)(v72 + v80)) - (float)(v65 * (float)(v73 - v79));
    *v36 = result;
    v2 += 16;
    v37 += 8;
    v36 += 16;
  }
  while (v2 < 0x70);
  return result;
}

float webrtc::OouraFft::cftmdl_128(webrtc::OouraFft *this, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float result;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float v402;
  float v403;
  float v404;
  float v405;

  v2 = a2[1];
  v3 = a2[8];
  v4 = a2[9];
  v5 = *a2 + v3;
  v6 = v2 + v4;
  v7 = *a2 - v3;
  v8 = v2 - v4;
  v9 = a2[16];
  v10 = a2[17];
  v11 = a2[24];
  v12 = a2[25];
  v13 = v9 + v11;
  v14 = v9 - v11;
  v15 = v10 - v12;
  v16 = v5 + v13;
  v17 = v6 + (float)(v10 + v12);
  v18 = v5 - v13;
  v19 = v6 - (float)(v10 + v12);
  v20 = v7 - (float)(v10 - v12);
  v21 = v8 + v14;
  v22 = v7 + v15;
  v23 = a2[2];
  v24 = a2[3];
  v25 = v8 - v14;
  v26 = a2[10];
  v27 = a2[11];
  v28 = v23 + v26;
  v29 = v24 + v27;
  v30 = v23 - v26;
  v31 = v24 - v27;
  v32 = a2[18];
  v33 = a2[19];
  v34 = a2[26];
  v35 = a2[27];
  v36 = v32 + v34;
  v37 = v33 + v35;
  v38 = v32 - v34;
  v39 = v33 - v35;
  v40 = v28 + (float)(v32 + v34);
  v41 = v29 + v37;
  v42 = v28 - v36;
  v43 = a2[4];
  v44 = a2[5];
  v45 = v29 - v37;
  v46 = v30 - v39;
  v47 = v31 + v38;
  v48 = a2[12];
  v49 = a2[13];
  v50 = v30 + v39;
  v51 = v31 - v38;
  v52 = v43 + v48;
  v53 = a2[20];
  v54 = a2[21];
  v55 = v44 + v49;
  v56 = v43 - v48;
  v57 = v44 - v49;
  v58 = a2[28];
  v59 = a2[29];
  *a2 = v16;
  v60 = v54 + v59;
  a2[1] = v17;
  v61 = v53 - v58;
  v62 = v54 - v59;
  a2[16] = v18;
  v63 = v52 + (float)(v53 + v58);
  v64 = v55 + v60;
  v65 = v52 - (float)(v53 + v58);
  v66 = a2[6];
  v67 = a2[7];
  v68 = v55 - v60;
  v69 = v56 - v62;
  v70 = v57 + v61;
  v71 = a2[14];
  v72 = a2[15];
  v393 = v56 + v62;
  v73 = v57 - v61;
  v74 = v66 + v71;
  v75 = a2[22];
  v76 = a2[23];
  v77 = v67 + v72;
  v78 = v66 - v71;
  v79 = v67 - v72;
  v80 = a2[30];
  v81 = a2[31];
  v82 = v75 + v80;
  a2[17] = v19;
  v83 = v76 + v81;
  v84 = v75 - v80;
  a2[8] = v20;
  v85 = v76 - v81;
  a2[9] = v21;
  v86 = v74 + (float)(v75 + v80);
  v87 = v77 + v83;
  v387 = v77 - v83;
  v389 = v74 - v82;
  v88 = a2[32];
  v89 = a2[33];
  v90 = v78 - v85;
  v405 = v78 + v85;
  v91 = a2[40];
  v92 = a2[41];
  v403 = v79 + v84;
  v404 = v79 - v84;
  v93 = v88 + v91;
  v94 = v89 + v92;
  v95 = v88 - v91;
  v96 = v89 - v92;
  v97 = a2[48];
  v98 = a2[49];
  v99 = a2[56];
  v100 = a2[57];
  v101 = v97 + v99;
  v102 = v97 - v99;
  a2[24] = v22;
  v103 = v98 + v100;
  v104 = v98 - v100;
  a2[25] = v25;
  a2[2] = v40;
  v397 = v93 + v101;
  a2[3] = v41;
  v395 = v94 + v103;
  v402 = v103 - v94;
  v400 = v93 - v101;
  a2[18] = v42;
  v105 = (float)(v95 - v104) - (float)(v96 + v102);
  v106 = (float)(v96 + v102) + (float)(v95 - v104);
  v107 = v95 + v104;
  v108 = a2[34];
  v109 = a2[35];
  v110 = v102 - v96;
  v111 = v110 - v107;
  v112 = v110 + v107;
  v113 = a2[42];
  v114 = a2[43];
  v115 = v108 + v113;
  v116 = v108 - v113;
  v117 = v109 + v114;
  v118 = v109 - v114;
  v119 = a2[50];
  v120 = a2[51];
  v122 = a2[58];
  v121 = a2[59];
  v123 = v119 + v122;
  v124 = v119 - v122;
  a2[19] = v45;
  a2[10] = v46;
  v125 = v120 + v121;
  v126 = v120 - v121;
  a2[11] = v47;
  v127 = v117 + v125;
  v401 = v125 - v117;
  a2[26] = v50;
  v128 = v115 + v123;
  a2[27] = v51;
  a2[4] = v63;
  v398 = (float)(v116 - v126) - (float)(v118 + v124);
  v399 = v115 - v123;
  v396 = (float)(v118 + v124) + (float)(v116 - v126);
  v129 = v116 + v126;
  v391 = (float)(v124 - v118) + v129;
  v392 = (float)(v124 - v118) - v129;
  v130 = a2[36];
  v131 = a2[37];
  v132 = a2[44];
  v133 = a2[45];
  v134 = v130 + v132;
  v135 = v130 - v132;
  v136 = v131 + v133;
  v137 = v131 - v133;
  v138 = a2[52];
  v139 = a2[53];
  v140 = a2[60];
  v141 = a2[61];
  v142 = v138 + v140;
  v143 = v138 - v140;
  a2[5] = v64;
  v144 = v139 + v141;
  v145 = v139 - v141;
  a2[20] = v65;
  v146 = v136 + v144;
  a2[21] = v68;
  a2[12] = v69;
  v147 = v134 + v142;
  v385 = v134 - v142;
  v386 = v144 - v136;
  a2[13] = v70;
  v383 = (float)(v137 + v143) + (float)(v135 - v145);
  v384 = (float)(v135 - v145) - (float)(v137 + v143);
  v148 = v135 + v145;
  v149 = v143 - v137;
  v150 = v149 - v148;
  v151 = v149 + v148;
  v152 = a2[38];
  v153 = a2[39];
  v154 = a2[46];
  v155 = a2[47];
  v156 = v152 + v154;
  v157 = v152 - v154;
  v158 = v153 + v155;
  v159 = v153 - v155;
  v160 = a2[54];
  v161 = a2[55];
  v162 = a2[62];
  v163 = a2[63];
  v164 = v160 + v162;
  v165 = v160 - v162;
  a2[28] = v393;
  v166 = v161 + v163;
  v167 = v161 - v163;
  a2[29] = v73;
  a2[6] = v86;
  v168 = v158 + v166;
  v394 = v166 - v158;
  a2[7] = v87;
  v169 = v156 + v164;
  a2[22] = v389;
  a2[23] = v387;
  a2[14] = v90;
  v388 = (float)(v159 + v165) + (float)(v157 - v167);
  v390 = (float)(v157 - v167) - (float)(v159 + v165);
  v170 = v157 + v167;
  v171 = v165 - v159;
  v381 = v171 - v170;
  v382 = v156 - v164;
  v172 = v171 + v170;
  v173 = a2[64];
  v174 = a2[72];
  v175 = v173 + v174;
  v176 = v173 - v174;
  v177 = a2[65];
  v178 = a2[73];
  v179 = v177 + v178;
  v180 = v177 - v178;
  v181 = a2[80];
  v182 = a2[88];
  v183 = v181 + v182;
  v184 = v181 - v182;
  v185 = a2[81];
  v186 = a2[89];
  a2[15] = v403;
  v187 = v175 + v183;
  v188 = v175 - v183;
  a2[30] = v405;
  v189 = v179 + (float)(v185 + v186);
  v190 = v179 - (float)(v185 + v186);
  a2[31] = v404;
  a2[32] = v397;
  a2[33] = v395;
  v191 = (float)(v190 * -0.70711) + (float)(v188 * 0.70711);
  v192 = (float)(v188 * 0.70711) + (float)(v190 * 0.70711);
  a2[48] = v402;
  a2[49] = v400;
  a2[40] = v105 * 0.70711;
  a2[41] = v106 * 0.70711;
  a2[56] = v111 * 0.70711;
  a2[57] = v112 * 0.70711;
  a2[34] = v128;
  v193 = v176 - (float)(v185 - v186);
  v194 = (float)((float)(v180 + v184) * -0.38268) + (float)(v193 * 0.92388);
  v195 = (float)(v193 * 0.38268) + (float)((float)(v180 + v184) * 0.92388);
  a2[35] = v127;
  v196 = v176 + (float)(v185 - v186);
  v197 = (float)((float)(v180 - v184) * -0.92388) + (float)(v196 * 0.38268);
  v198 = (float)(v196 * 0.92388) + (float)((float)(v180 - v184) * 0.38268);
  v199 = a2[66];
  v200 = a2[74];
  v201 = v199 + v200;
  v202 = v199 - v200;
  v203 = a2[67];
  v204 = a2[75];
  v205 = v203 + v204;
  v206 = v203 - v204;
  v207 = a2[82];
  v208 = a2[90];
  v209 = v207 + v208;
  v210 = v207 - v208;
  v211 = a2[83];
  v212 = a2[91];
  v213 = v211 + v212;
  v214 = v211 - v212;
  a2[50] = v401;
  a2[51] = v399;
  v215 = v201 + v209;
  v216 = v201 - v209;
  a2[42] = v398 * 0.70711;
  a2[43] = v396 * 0.70711;
  a2[58] = v392 * 0.70711;
  v217 = v205 + v213;
  v218 = v205 - v213;
  a2[59] = v391 * 0.70711;
  a2[36] = v147;
  a2[37] = v146;
  v219 = (float)(v218 * -0.70711) + (float)(v216 * 0.70711);
  v220 = (float)(v216 * 0.70711) + (float)(v218 * 0.70711);
  a2[52] = v386;
  a2[53] = v385;
  a2[44] = v384 * 0.70711;
  a2[45] = v383 * 0.70711;
  a2[60] = v150 * 0.70711;
  a2[61] = v151 * 0.70711;
  a2[38] = v169;
  v221 = (float)((float)(v206 + v210) * -0.38268) + (float)((float)(v202 - v214) * 0.92388);
  v222 = (float)((float)(v202 - v214) * 0.38268) + (float)((float)(v206 + v210) * 0.92388);
  a2[39] = v168;
  v223 = v202 + v214;
  v224 = v206 - v210;
  v225 = a2[68];
  v226 = (float)((float)(v206 - v210) * -0.92388) + (float)(v223 * 0.38268);
  v227 = a2[76];
  v228 = a2[69];
  v229 = (float)(v223 * 0.92388) + (float)(v224 * 0.38268);
  v230 = v225 + v227;
  v231 = v225 - v227;
  v232 = a2[77];
  v233 = v228 + v232;
  v234 = v228 - v232;
  v235 = a2[84];
  v236 = a2[92];
  v237 = v235 + v236;
  v238 = v235 - v236;
  v239 = a2[85];
  v240 = a2[93];
  v241 = v239 + v240;
  v242 = v239 - v240;
  a2[54] = v394;
  a2[55] = v382;
  v243 = v230 + v237;
  v244 = v230 - v237;
  a2[46] = v390 * 0.70711;
  a2[47] = v388 * 0.70711;
  a2[62] = v381 * 0.70711;
  v245 = v233 + v241;
  a2[63] = v172 * 0.70711;
  v246 = v233 - v241;
  a2[64] = v187;
  v247 = (float)(v246 * -0.70711) + (float)(v244 * 0.70711);
  a2[65] = v189;
  v248 = (float)(v244 * 0.70711) + (float)(v246 * 0.70711);
  a2[80] = v191;
  a2[81] = v192;
  a2[72] = v194;
  v249 = (float)((float)(v234 + v238) * -0.38268) + (float)((float)(v231 - v242) * 0.92388);
  a2[73] = v195;
  v250 = (float)((float)(v231 - v242) * 0.38268) + (float)((float)(v234 + v238) * 0.92388);
  a2[88] = v197;
  v251 = v231 + v242;
  v252 = v234 - v238;
  v253 = a2[70];
  v254 = a2[78];
  v255 = (float)(v252 * -0.92388) + (float)(v251 * 0.38268);
  v256 = a2[71];
  v257 = (float)(v251 * 0.92388) + (float)(v252 * 0.38268);
  v258 = a2[79];
  v259 = v253 + v254;
  v260 = v256 + v258;
  v261 = a2[86];
  v262 = v253 - v254;
  v263 = a2[94];
  v264 = v256 - v258;
  v265 = v261 + v263;
  v266 = a2[87];
  v267 = v261 - v263;
  v268 = a2[95];
  v269 = v266 + v268;
  v270 = v266 - v268;
  a2[89] = v198;
  a2[66] = v215;
  v271 = v259 + v265;
  v272 = v259 - v265;
  a2[67] = v217;
  v273 = v260 + v269;
  v274 = v260 - v269;
  a2[82] = v219;
  a2[83] = v220;
  v275 = (float)(v274 * -0.70711) + (float)(v272 * 0.70711);
  a2[74] = v221;
  v276 = (float)(v272 * 0.70711) + (float)(v274 * 0.70711);
  a2[75] = v222;
  a2[90] = v226;
  a2[91] = v229;
  v277 = (float)((float)(v264 + v267) * -0.38268) + (float)((float)(v262 - v270) * 0.92388);
  a2[68] = v243;
  v278 = (float)((float)(v262 - v270) * 0.38268) + (float)((float)(v264 + v267) * 0.92388);
  a2[69] = v245;
  v279 = v262 + v270;
  v280 = v264 - v267;
  v281 = a2[96];
  v282 = (float)(v280 * -0.92388) + (float)(v279 * 0.38268);
  v283 = a2[104];
  v284 = a2[97];
  v285 = (float)(v279 * 0.92388) + (float)(v280 * 0.38268);
  v286 = v281 + v283;
  v287 = a2[105];
  v288 = v284 + v287;
  v289 = a2[112];
  v290 = v281 - v283;
  v291 = v284 - v287;
  v292 = a2[120];
  v293 = v289 + v292;
  v294 = a2[113];
  v295 = v289 - v292;
  v296 = a2[121];
  v297 = v294 + v296;
  v298 = v294 - v296;
  a2[84] = v247;
  v299 = v286 + v293;
  v300 = v286 - v293;
  a2[85] = v248;
  a2[76] = v249;
  v301 = v288 + v297;
  a2[77] = v250;
  v302 = (float)((float)(v288 - v297) * -0.70711) + (float)(v300 * -0.70711);
  a2[92] = v255;
  a2[93] = v257;
  v303 = (float)(v300 * 0.70711) + (float)((float)(v288 - v297) * -0.70711);
  a2[70] = v271;
  a2[71] = v273;
  v304 = (float)((float)(v291 + v295) * -0.92388) + (float)((float)(v290 - v298) * 0.38268);
  a2[86] = v275;
  a2[87] = v276;
  v305 = (float)((float)(v290 - v298) * 0.92388) + (float)((float)(v291 + v295) * 0.38268);
  v306 = v290 + v298;
  a2[78] = v277;
  v307 = v291 - v295;
  v308 = a2[98];
  v309 = (float)((float)(v291 - v295) * 0.38268) + (float)(v306 * -0.92388);
  v310 = a2[106];
  v311 = (float)(v306 * -0.38268) + (float)(v307 * -0.92388);
  v312 = a2[99];
  v313 = v308 + v310;
  v314 = a2[107];
  v315 = v312 + v314;
  v316 = v308 - v310;
  v317 = a2[114];
  v318 = v312 - v314;
  v319 = a2[122];
  v320 = v317 + v319;
  v321 = v317 - v319;
  v322 = a2[115];
  v323 = a2[123];
  v324 = v322 + v323;
  v325 = v322 - v323;
  a2[79] = v278;
  v326 = v313 + v320;
  v327 = v313 - v320;
  a2[94] = v282;
  v328 = v315 + v324;
  a2[95] = v285;
  v329 = (float)(v315 - v324) * -0.70711;
  a2[96] = v299;
  v330 = v329 + (float)(v327 * -0.70711);
  a2[97] = v301;
  v331 = (float)(v327 * 0.70711) + v329;
  a2[112] = v302;
  a2[113] = v303;
  a2[104] = v304;
  v332 = (float)((float)(v318 + v321) * -0.92388) + (float)((float)(v316 - v325) * 0.38268);
  a2[105] = v305;
  v333 = (float)((float)(v316 - v325) * 0.92388) + (float)((float)(v318 + v321) * 0.38268);
  a2[120] = v309;
  v334 = v318 - v321;
  v335 = a2[100];
  v336 = a2[108];
  v337 = (float)(v334 * 0.38268) + (float)((float)(v316 + v325) * -0.92388);
  v338 = (float)(v316 + v325) * -0.38268;
  v339 = a2[101];
  v340 = v338 + (float)(v334 * -0.92388);
  v341 = a2[109];
  v342 = v335 + v336;
  v343 = v339 + v341;
  v344 = a2[116];
  v345 = v335 - v336;
  v346 = a2[124];
  v347 = v339 - v341;
  v348 = v344 + v346;
  v349 = a2[117];
  v350 = v344 - v346;
  v351 = a2[125];
  v352 = v349 + v351;
  v353 = v349 - v351;
  a2[121] = v311;
  a2[98] = v326;
  a2[99] = v328;
  a2[114] = v330;
  a2[115] = v331;
  v354 = (float)((float)(v343 - v352) * -0.70711) + (float)((float)(v342 - v348) * -0.70711);
  a2[106] = v332;
  v355 = (float)((float)(v342 - v348) * 0.70711) + (float)((float)(v343 - v352) * -0.70711);
  a2[107] = v333;
  a2[122] = v337;
  a2[123] = v340;
  v356 = (float)((float)(v347 + v350) * -0.92388) + (float)((float)(v345 - v353) * 0.38268);
  a2[100] = v342 + v348;
  v357 = (float)((float)(v345 - v353) * 0.92388) + (float)((float)(v347 + v350) * 0.38268);
  a2[101] = v343 + v352;
  v358 = v345 + v353;
  v359 = v347 - v350;
  v360 = a2[102];
  v361 = (float)(v359 * 0.38268) + (float)((float)(v345 + v353) * -0.92388);
  v362 = a2[110];
  v363 = a2[103];
  v364 = (float)(v358 * -0.38268) + (float)(v359 * -0.92388);
  v365 = v360 + v362;
  v366 = a2[111];
  v367 = v363 + v366;
  v368 = a2[118];
  v369 = v360 - v362;
  v370 = v363 - v366;
  v371 = a2[126];
  v372 = v368 + v371;
  v373 = a2[119];
  v374 = v368 - v371;
  v375 = a2[127];
  v376 = v373 + v375;
  v377 = v373 - v375;
  a2[116] = v354;
  v378 = v365 + v372;
  v379 = v365 - v372;
  a2[117] = v355;
  a2[108] = v356;
  a2[109] = v357;
  a2[124] = v361;
  a2[125] = v364;
  a2[102] = v378;
  a2[103] = v367 + v376;
  a2[118] = (float)((float)(v367 - v376) * -0.70711) + (float)(v379 * -0.70711);
  a2[119] = (float)(v379 * 0.70711) + (float)((float)(v367 - v376) * -0.70711);
  a2[110] = (float)((float)(v370 + v374) * -0.92388) + (float)((float)(v369 - v377) * 0.38268);
  a2[111] = (float)((float)(v369 - v377) * 0.92388) + (float)((float)(v370 + v374) * 0.38268);
  a2[126] = (float)((float)(v370 - v374) * 0.38268) + (float)((float)(v369 + v377) * -0.92388);
  result = (float)((float)(v369 + v377) * -0.38268) + (float)((float)(v370 - v374) * -0.92388);
  a2[127] = result;
  return result;
}

void rtc::OpenSSLAdapter::~OpenSSLAdapter(void **this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void **v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;
  void *v11;
  rtc::BoringSSLIdentity *v12;
  void *v13;

  rtc::OpenSSLAdapter::Cleanup((rtc::OpenSSLAdapter *)this);
  v2 = (unsigned int *)this[74];
  *((_BYTE *)v2 + 4) = 0;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
    MEMORY[0x20BD0ADEC]();
  v5 = (void **)this[70];
  if (v5)
  {
    v6 = (void **)this[71];
    v7 = this[70];
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = this[70];
    }
    this[71] = v5;
    operator delete(v7);
  }
  v8 = (void **)this[67];
  if (v8)
  {
    v9 = (void **)this[68];
    v10 = this[67];
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = this[67];
    }
    this[68] = v8;
    operator delete(v10);
  }
  if ((*((char *)this + 527) & 0x80000000) == 0)
  {
    v11 = this[60];
    this[60] = 0;
    if (!v11)
      goto LABEL_24;
    goto LABEL_23;
  }
  operator delete(this[63]);
  v11 = this[60];
  this[60] = 0;
  if (v11)
LABEL_23:
    MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
LABEL_24:
  v12 = (rtc::BoringSSLIdentity *)this[56];
  this[56] = 0;
  if (v12)
  {
    rtc::BoringSSLIdentity::~BoringSSLIdentity(v12);
    MEMORY[0x20BD0ADEC]();
  }
  *this = &off_24C0ACE50;
  this[45] = &unk_24C0ACF18;
  v13 = this[52];
  this[52] = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  this[45] = &unk_24C0ACE30;
  ((void (*)(char *))this[48])((char *)this + 360);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(this + 49), this[50]);
  rtc::Socket::~Socket((rtc::Socket *)this);
}

{
  rtc::OpenSSLAdapter::~OpenSSLAdapter(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::OpenSSLAdapter::Cleanup(rtc::OpenSSLAdapter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  unsigned int *v13;
  unsigned int i;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  size_t v18;
  rtc::BoringSSLIdentity *v19;
  uint64_t result;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
  *((_DWORD *)this + 110) = 0;
  *((_WORD *)this + 230) = 0;
  *((_BYTE *)this + 584) = 0;
  *((_QWORD *)this + 58) = 0;
  v9 = *((_QWORD *)this + 61);
  if (v9)
  {
    ssl_st::~ssl_st(*((ssl_st **)this + 61));
    v11 = *(_QWORD *)(v9 - 8);
    v10 = (void *)(v9 - 8);
    v12 = v11 + 8;
    if (v11 != -8)
      bzero(v10, v12);
    free(v10);
    *((_QWORD *)this + 61) = 0;
  }
  v13 = (unsigned int *)*((_QWORD *)this + 62);
  if (v13)
  {
    for (i = atomic_load(v13); i != -1; i = v15)
    {
      if (!i)
        abort();
      v15 = __ldaxr(v13);
      if (v15 == i)
      {
        if (!__stlxr(i - 1, v13))
        {
          if (i == 1)
          {
            ssl_ctx_st::~ssl_ctx_st((ssl_ctx_st *)v13);
            v17 = *((_QWORD *)v13 - 1);
            v16 = v13 - 2;
            v18 = v17 + 8;
            if (v17 != -8)
              bzero(v16, v18);
            free(v16);
          }
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
    *((_QWORD *)this + 62) = 0;
  }
  v19 = (rtc::BoringSSLIdentity *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v19)
  {
    rtc::BoringSSLIdentity::~BoringSSLIdentity(v19);
    MEMORY[0x20BD0ADEC]();
  }
  result = operator new();
  *(_DWORD *)result = 0;
  *(_BYTE *)(result + 4) = 1;
  do
    v21 = __ldxr((unsigned int *)result);
  while (__stxr(v21 + 1, (unsigned int *)result));
  v22 = *((_QWORD *)this + 74);
  *(_BYTE *)(v22 + 4) = 0;
  *((_QWORD *)this + 74) = result;
  do
  {
    v23 = __ldaxr((unsigned int *)v22);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, (unsigned int *)v22));
  if (!v24)
    JUMPOUT(0x20BD0ADECLL);
  return result;
}

void `non-virtual thunk to'rtc::OpenSSLAdapter::~OpenSSLAdapter(void **this)
{
  rtc::OpenSSLAdapter::~OpenSSLAdapter(this - 45);
}

{
  rtc::OpenSSLAdapter::~OpenSSLAdapter(this - 45);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::OpenSSLAdapter::SetIgnoreBadCert(uint64_t this, char a2)
{
  *(_BYTE *)(this + 532) = a2;
  return this;
}

void rtc::OpenSSLAdapter::SetAlpnProtocols(uint64_t a1, __int128 **a2)
{
  std::string **v2;

  v2 = (std::string **)(a1 + 536);
  if (v2 != (std::string **)a2)
    std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
}

void rtc::OpenSSLAdapter::SetEllipticCurves(uint64_t a1, __int128 **a2)
{
  std::string **v2;

  v2 = (std::string **)(a1 + 560);
  if (v2 != (std::string **)a2)
    std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
}

uint64_t rtc::OpenSSLAdapter::SetMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 528) = a2;
  return result;
}

uint64_t rtc::OpenSSLAdapter::SetCertVerifier(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 432) = a2;
  return result;
}

rtc::BoringSSLIdentity *rtc::OpenSSLAdapter::SetIdentity(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  rtc::BoringSSLIdentity *result;

  v3 = *a2;
  *a2 = 0;
  result = *(rtc::BoringSSLIdentity **)(a1 + 448);
  *(_QWORD *)(a1 + 448) = v3;
  if (result)
  {
    rtc::BoringSSLIdentity::~BoringSSLIdentity(result);
    JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

uint64_t rtc::OpenSSLAdapter::SetRole(uint64_t result, int a2)
{
  *(_DWORD *)(result + 456) = a2;
  return result;
}

uint64_t rtc::OpenSSLAdapter::StartSSL(uint64_t result, const std::string::value_type *a2, std::string::size_type a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(result + 440))
    return 0xFFFFFFFFLL;
  v4 = result;
  if (!a2 && a3)
  {
    __break(1u);
  }
  else
  {
    std::string::__assign_external((std::string *)(result + 504), a2, a3);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 + 416) + 128))(*(_QWORD *)(v4 + 416)) == 2)
    {
      *(_DWORD *)(v4 + 440) = 2;
      v3 = rtc::OpenSSLAdapter::BeginSSL((rtc::OpenSSLAdapter *)v4);
      if (!(_DWORD)v3)
        return v3;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
      *(_DWORD *)(v4 + 440) = 4;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 416) + 120))(*(_QWORD *)(v4 + 416), v3);
      return v3;
    }
    else
    {
      *(_DWORD *)(v4 + 440) = 1;
      return 0;
    }
  }
  return result;
}

uint64_t rtc::OpenSSLAdapter::BeginSSL(rtc::OpenSSLAdapter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SSL_CTX *Context;
  rtc::BoringSSLIdentity *v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  BIO *v16;
  unsigned int *v17;
  unsigned int (*v18)(char *);
  SSL *v19;
  SSL *v20;
  char *s2;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  char *v25;
  uint64_t *v26;
  SSL_SESSION *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  const char *v39;
  uint64_t v40;
  size_t v41;
  BOOL v42;
  char *v43;
  std::string::size_type v44;
  std::string::size_type size;
  const char *v46;
  std::string *p_dst;
  char *v48;
  std::string::size_type v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  size_t v67;
  BOOL v68;
  char *v69;
  BIO *v70;
  uint64_t v71;
  size_t v72;
  char *v73;
  char *v74;
  std::string::size_type v76;
  unint64_t v77;
  std::string::size_type v78;
  std::string::size_type v79;
  int v80;
  std::string::size_type v81;
  BOOL v82;
  const std::string::value_type *v83;
  std::string *v84;
  std::string::size_type v86;
  std::string::size_type v87;
  std::string::size_type v88;
  std::string *v89;
  char *v90;
  std::string::size_type v91;
  uint64_t v92;
  std::string *p_p;
  unsigned int v94;
  unsigned int v95;
  char v96;
  BIO *v97;
  BIO *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v108;
  uint64_t v109;
  BIO *v110;
  std::string __p;
  std::string __dst;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
  if (*((_QWORD *)this + 53))
  {
    Context = (SSL_CTX *)*((_QWORD *)this + 62);
    if (!Context)
      goto LABEL_185;
  }
  else
  {
    Context = rtc::OpenSSLAdapter::CreateContext(*((_DWORD *)this + 132), 0);
    *((_QWORD *)this + 62) = Context;
    if (!Context)
      goto LABEL_185;
  }
  v10 = (rtc::BoringSSLIdentity *)*((_QWORD *)this + 56);
  if (v10 && !rtc::BoringSSLIdentity::ConfigureIdentity(v10, Context))
    goto LABEL_185;
  v11 = *((_QWORD *)this + 52);
  v12 = atomic_load((unsigned __int8 *)&qword_253EA56C0);
  if ((v12 & 1) == 0)
    goto LABEL_192;
LABEL_10:
  v13 = _MergedGlobals_13;
  v14 = (char *)malloc_type_malloc(0x50uLL, 0x30772F57uLL);
  if (v14)
  {
    v15 = v14;
    *(_QWORD *)v14 = 72;
    *((_QWORD *)v14 + 1) = v13;
    v16 = (BIO *)(v14 + 8);
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *((_QWORD *)v14 + 9) = 0;
    *((_DWORD *)v14 + 7) = 1;
    *((_DWORD *)v14 + 11) = 1;
    v17 = (unsigned int *)(v14 + 44);
    *((_QWORD *)v14 + 2) = 0;
    v18 = *(unsigned int (**)(char *))(v13 + 56);
    if (v18 && !v18(v14 + 8))
    {
      if (*v15 != -8)
        __memset_chk();
      free(v15);
      goto LABEL_185;
    }
    v15[6] = v11;
    v19 = SSL_new(*((SSL_CTX **)this + 62));
    *((_QWORD *)this + 61) = v19;
    if (!v19)
      goto LABEL_184;
    v20 = v19;
    s2 = (char *)v19->s2;
    if (s2 || (s2 = OPENSSL_sk_new_null(), (v20->s2 = (ssl2_state_st *)s2) != 0))
    {
      if (*(_QWORD *)s2
        || OPENSSL_sk_insert((unint64_t *)s2, 0, 0) && (s2 = (char *)v20->s2) != 0 && *(_QWORD *)s2)
      {
        **((_QWORD **)s2 + 1) = this;
      }
    }
    v22 = *((_QWORD *)this + 61);
    *(_DWORD *)(v22 + 132) |= 3u;
    v11 = (unint64_t)this + 504;
    if (*((char *)this + 527) < 0)
    {
      if (!*((_QWORD *)this + 64))
        goto LABEL_42;
      SSL_set_tlsext_host_name(v22, *(char **)v11);
      v23 = *((_QWORD *)this + 53);
      if (!v23)
        goto LABEL_42;
    }
    else if (!*((_BYTE *)this + 527)
           || (SSL_set_tlsext_host_name(v22, (char *)this + 504), (v23 = *((_QWORD *)this + 53)) == 0))
    {
LABEL_42:
      v110 = v16;
      v35 = *(_QWORD *)(*((_QWORD *)this + 61) + 8);
      if (v35)
      {
        *(_WORD *)(v35 + 237) |= 4u;
        v36 = *(_QWORD *)(*((_QWORD *)this + 61) + 8);
        if (v36)
          *(_WORD *)(v36 + 237) |= 2u;
      }
      v37 = (char *)*((_QWORD *)this + 67);
      v38 = (char *)*((_QWORD *)this + 68);
      if (v37 == v38)
        goto LABEL_86;
      memset(&__dst, 0, sizeof(__dst));
      v39 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc";
      while (1)
      {
        if (v37[23] < 0)
        {
          v40 = *((_QWORD *)v37 + 1);
          if ((unint64_t)(v40 - 256) < 0xFFFFFFFFFFFFFF01)
          {
LABEL_76:
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
            {
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
              __p.__r_.__value_.__s.__data_[0] = 0;
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_78;
            }
            else
            {
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v57, v58, v59, v60, v61, v62, v63, (uint64_t)v39);
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
              __p.__r_.__value_.__s.__data_[0] = 0;
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_78:
                v64 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_79;
LABEL_83:
                if (!__p.__r_.__value_.__l.__size_)
                  goto LABEL_85;
                SSL_set_alpn_protos(*((_QWORD *)this + 61), __p.__r_.__value_.__l.__data_, LODWORD(__p.__r_.__value_.__r.__words[1]));
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_85;
                goto LABEL_86;
              }
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            v64 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_83;
            goto LABEL_79;
          }
        }
        else
        {
          LOBYTE(v40) = v37[23];
          if (!(_BYTE)v40)
            goto LABEL_76;
        }
        std::string::push_back(&__dst, v40);
        if (v37[23] < 0)
        {
          v43 = *(char **)v37;
          v41 = *((_QWORD *)v37 + 1);
          v42 = v41 == 0;
          if (!*(_QWORD *)v37 && v41)
            goto LABEL_191;
        }
        else
        {
          v41 = v37[23];
          v42 = v37[23] == 0;
          v43 = v37;
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44 = 22;
        else
          v44 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          size = __dst.__r_.__value_.__l.__size_;
        if (v44 - size >= v41)
        {
          if (!v42)
          {
            v46 = v39;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            v48 = (char *)p_dst + size;
            if ((char *)p_dst + size <= v43 && &v48[v41] > v43)
              goto LABEL_191;
            memmove(v48, v43, v41);
            v49 = size + v41;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              __dst.__r_.__value_.__l.__size_ = size + v41;
            else
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v49 & 0x7F;
            p_dst->__r_.__value_.__s.__data_[v49] = 0;
            v39 = v46;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&__dst, v44, size + v41 - v44, size, size, 0, v41, v43);
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
        {
          v11 = v11 & 0xFFFFFFFF00000000 | 0x2068;
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v50, v51, v52, v53, v54, v55, v56, (uint64_t)v39);
        }
        v37 += 24;
        if (v37 == v38)
        {
          __p = __dst;
          v64 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_83;
LABEL_79:
          if (v64)
          {
            SSL_set_alpn_protos(*((_QWORD *)this + 61), &__p, v64);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_85:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
LABEL_86:
          v11 = *((_QWORD *)this + 70);
          v65 = *((_QWORD *)this + 71);
          v66 = *((_QWORD *)this + 61);
          if (v11 == v65)
          {
            v70 = v110;
            if (*(BIO **)(v66 + 24) == v110)
              goto LABEL_161;
          }
          else
          {
            v109 = *((_QWORD *)this + 61);
            memset(&__dst, 0, sizeof(__dst));
            if ((*(char *)(v11 + 23) & 0x80000000) == 0)
            {
              v67 = *(unsigned __int8 *)(v11 + 23);
              v68 = *(_BYTE *)(v11 + 23) == 0;
              v69 = (char *)v11;
              goto LABEL_94;
            }
            v67 = *(_QWORD *)(v11 + 8);
            if ((v67 & 0x8000000000000000) != 0)
              goto LABEL_191;
            v69 = *(char **)v11;
            v68 = v67 == 0;
            if (v67)
            {
              if (!v69)
                goto LABEL_191;
            }
LABEL_94:
            if (v67 > 0x16)
            {
              if (v67 - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
                abort();
              v71 = 44;
              if (v67 > 0x2C)
                v71 = v67;
              v72 = (v71 | 7) + 1;
              v73 = (char *)operator new(v72);
              v74 = &v73[v67];
              if (v73 > v69 || v74 <= v69)
              {
                v76 = (std::string::size_type)v73;
                memcpy(v73, v69, v67);
                __dst.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = v76;
                goto LABEL_103;
              }
LABEL_191:
              __break(1u);
LABEL_192:
              if (__cxa_guard_acquire(&qword_253EA56C0))
              {
                v108 = BIO_meth_new(1043, (uint64_t)"socket");
                *((_QWORD *)v108 + 2) = socket_write;
                *((_QWORD *)v108 + 3) = socket_read;
                *((_QWORD *)v108 + 6) = socket_ctrl;
                *((_QWORD *)v108 + 7) = socket_new;
                *((_QWORD *)v108 + 8) = socket_free;
                _MergedGlobals_13 = (uint64_t)v108;
                __cxa_guard_release(&qword_253EA56C0);
              }
              goto LABEL_10;
            }
            if (!v68)
            {
              v74 = (char *)&__dst + v67;
              if (&__dst <= (std::string *)v69 && v74 > v69)
                goto LABEL_191;
              memmove(&__dst, v69, v67);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_103:
                __dst.__r_.__value_.__l.__size_ = v67;
              else
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v67;
              *v74 = 0;
            }
            v77 = v11 + 24;
            if (v11 + 24 != v65)
            {
              v11 = (unint64_t)&__dst;
              do
              {
                v78 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v79 = 22;
                else
                  v79 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v78 = __dst.__r_.__value_.__l.__size_;
                if (v79 == v78)
                {
                  std::string::__grow_by_and_replace(&__dst, v79, 1uLL, v79, v79, 0, 1uLL, ":");
                  v80 = *(char *)(v77 + 23);
                  if ((v80 & 0x80000000) == 0)
                    goto LABEL_121;
                }
                else
                {
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v84 = &__dst;
                  else
                    v84 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((char *)v84 + v78 <= ":" && (char *)&v84->__r_.__value_.__l.__data_ + v78 + 1 > ":")
                    goto LABEL_191;
                  v84->__r_.__value_.__s.__data_[v78] = 58;
                  v86 = v78 + 1;
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    __dst.__r_.__value_.__l.__size_ = v86;
                    v84->__r_.__value_.__s.__data_[v86] = 0;
                    v80 = *(char *)(v77 + 23);
                    if ((v80 & 0x80000000) == 0)
                    {
LABEL_121:
                      v81 = v80;
                      v82 = v80 == 0;
                      v83 = (const std::string::value_type *)v77;
                      goto LABEL_134;
                    }
                  }
                  else
                  {
                    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v86 & 0x7F;
                    v84->__r_.__value_.__s.__data_[v86] = 0;
                    v80 = *(char *)(v77 + 23);
                    if ((v80 & 0x80000000) == 0)
                      goto LABEL_121;
                  }
                }
                v81 = *(_QWORD *)(v77 + 8);
                if ((v81 & 0x8000000000000000) != 0)
                  goto LABEL_191;
                v83 = *(const std::string::value_type **)v77;
                v82 = v81 == 0;
                if (v81)
                {
                  if (!v83)
                    goto LABEL_191;
                }
LABEL_134:
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v87 = 22;
                else
                  v87 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v88 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                else
                  v88 = __dst.__r_.__value_.__l.__size_;
                if (v87 - v88 < v81)
                {
                  std::string::__grow_by_and_replace(&__dst, v87, v88 + v81 - v87, v88, v88, 0, v81, v83);
                }
                else if (!v82)
                {
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v89 = &__dst;
                  else
                    v89 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  v90 = (char *)v89 + v88;
                  if ((char *)v89 + v88 <= v83 && &v90[v81] > v83)
                    goto LABEL_191;
                  memmove(v90, v83, v81);
                  v91 = v88 + v81;
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                    __dst.__r_.__value_.__l.__size_ = v88 + v81;
                  else
                    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v91 & 0x7F;
                  v89->__r_.__value_.__s.__data_[v91] = 0;
                }
                v77 += 24;
              }
              while (v77 != v65);
            }
            __p = __dst;
            v92 = *(_QWORD *)(v109 + 8);
            if (v92)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              ssl_str_to_group_ids((bssl **)(v92 + 96), (char *)p_p);
            }
            v70 = v110;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v66 = *((_QWORD *)this + 61);
            if (*(BIO **)(v66 + 24) == v110)
            {
LABEL_161:
              if (*(BIO **)(v66 + 32) != v70)
                goto LABEL_162;
LABEL_179:
              v99 = rtc::OpenSSLAdapter::ContinueSSL(this);
              if (!(_DWORD)v99)
                return v99;
              goto LABEL_186;
            }
          }
LABEL_162:
          v94 = atomic_load(v17);
          if (v94 != -1)
          {
            while (2)
            {
              v95 = __ldaxr(v17);
              if (v95 == v94)
              {
                if (!__stlxr(v94 + 1, v17))
                {
                  v96 = 1;
LABEL_168:
                  if ((v96 & 1) != 0)
                    goto LABEL_170;
                  v94 = v95;
                  if (v95 == -1)
                    goto LABEL_170;
                  continue;
                }
              }
              else
              {
                __clrex();
              }
              break;
            }
            v96 = 0;
            goto LABEL_168;
          }
LABEL_170:
          v98 = *(BIO **)(v66 + 24);
          v97 = *(BIO **)(v66 + 32);
          if (v98 != v70)
          {
            *(_QWORD *)(v66 + 24) = v70;
            if (v97 == v70 && v98 != v97)
            {
              v97 = v98;
              if (!v98)
                goto LABEL_179;
LABEL_178:
              BIO_free(v97);
              goto LABEL_179;
            }
            if (v98)
            {
              BIO_free(v98);
              v97 = *(BIO **)(v66 + 32);
            }
          }
          *(_QWORD *)(v66 + 32) = v70;
          if (!v97)
            goto LABEL_179;
          goto LABEL_178;
        }
      }
    }
    if (*((char *)this + 527) < 0)
    {
      v24 = *((_QWORD *)this + 64);
      if ((v24 & 0x8000000000000000) != 0)
        goto LABEL_191;
      v25 = *(char **)v11;
      if (v24)
      {
        if (!v25)
          goto LABEL_191;
      }
    }
    else
    {
      v24 = *((unsigned __int8 *)this + 527);
      v25 = (char *)this + 504;
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = v24;
    v26 = std::__tree<std::__value_type<std::string,ssl_session_st *>,std::__map_value_compare<std::string,std::__value_type<std::string,ssl_session_st *>,rtc::AbslStringViewCmp,true>,std::allocator<std::__value_type<std::string,ssl_session_st *>>>::find<std::string_view>(v23 + 16, (uint64_t)&__dst);
    if ((uint64_t *)(v23 + 24) != v26)
    {
      v27 = (SSL_SESSION *)v26[7];
      if (v27)
      {
        if (!SSL_set_session(*((SSL **)this + 61), v27))
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v100, v101, v102, v103, v104, v105, v106, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
LABEL_184:
          BIO_free(v16);
          goto LABEL_185;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
      }
    }
    goto LABEL_42;
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
LABEL_185:
  v99 = 0xFFFFFFFFLL;
LABEL_186:
  rtc::OpenSSLAdapter::Cleanup(this);
  return v99;
}

SSL_CTX *rtc::OpenSSLAdapter::CreateContext(int a1, int a2)
{
  SSL_METHOD *v3;
  SSL_CTX *v4;
  ssl_ctx_st *v5;
  SSL_CTX *v6;
  unsigned __int8 v7;
  unsigned int error;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int i;
  unsigned int v26;
  void **p_tlsext_status_arg;
  void *tlsext_status_arg;
  size_t v29;
  int __key;

  if (a1 == 1)
    v3 = (SSL_METHOD *)&DTLS_method::kMethod;
  else
    v3 = (SSL_METHOD *)&TLS_method::kMethod;
  v4 = SSL_CTX_new(v3);
  if (!v4)
  {
    error = ERR_get_error();
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      v17 = error & 0xFFF;
      if (HIBYTE(error) == 2)
      {
        if (v17 <= 0x7E)
          strerror(error & 0xFFF);
      }
      else if (v17 >= 0x64 && !(error >> 30) && v17 <= 0x7FF)
      {
        __key = (v17 << 15) | (HIBYTE(error) << 26);
        bsearch(&__key, &kOpenSSLReasonValues, 0x2F2uLL, 4uLL, (int (__cdecl *)(const void *, const void *))err_string_cmp);
      }
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
    }
    return 0;
  }
  v6 = v4;
  if (!rtc::openssl::LoadBuiltinSSLRootCertificates((rtc::openssl *)v4, v5))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
    for (i = atomic_load((unsigned int *)v6); i != -1; i = v26)
    {
      if (!i)
        abort();
      v26 = __ldaxr((unsigned int *)v6);
      if (v26 == i)
      {
        if (!__stlxr(i - 1, (unsigned int *)v6))
        {
          if (i == 1)
          {
            ssl_ctx_st::~ssl_ctx_st(v6);
            tlsext_status_arg = v6[-1].tlsext_status_arg;
            p_tlsext_status_arg = &v6[-1].tlsext_status_arg;
            v29 = (size_t)tlsext_status_arg + 8;
            if (tlsext_status_arg != (void *)-8)
              bzero(p_tlsext_status_arg, v29);
            free(p_tlsext_status_arg);
          }
          return 0;
        }
      }
      else
      {
        __clrex();
      }
    }
    return 0;
  }
  {
    rtc::openssl::GetBufferPool(void)::instance = (uint64_t)CRYPTO_BUFFER_POOL_new();
  }
  v6[1].app_verify_cookie_cb = (int (__cdecl *)(SSL *, unsigned __int8 *, unsigned int))rtc::openssl::GetBufferPool(void)::instance;
  *(_DWORD *)v6->tlsext_tick_hmac_key = 1;
  *(_QWORD *)&v6->tlsext_tick_hmac_key[8] = rtc::OpenSSLAdapter::SSLVerifyCallback;
  *(_DWORD *)(*(_QWORD *)v6->tlsext_tick_aes_key + 24) = 4;
  bssl::ssl_create_cipher_list((BUF_MEM ***)&v6->sha1, (~LOWORD(v6[1].comp_methods) & 0x1800) == 0, (uint64_t)"ALL:!SHA256:!SHA384:!aPSK:!ECDSA+SHA1:!ADH:!LOW:!EXP:!MD5:!3DES", 0);
  if (a2)
  {
    HIDWORD(v6->mode) = 1;
    v6->cert = (cert_st *)rtc::OpenSSLAdapter::NewSSLSessionCallback;
  }
  return v6;
}

uint64_t rtc::OpenSSLAdapter::ContinueSSL(rtc::OpenSSLAdapter *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void (*v23)(_QWORD *, rtc::OpenSSLAdapter *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  char v51;
  unint64_t v52;
  int v53;
  char v54;
  _QWORD v55[2];
  uint64_t (*v56)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v57)(uint64_t);

  v2 = operator new();
  *(_DWORD *)v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  do
    v3 = __ldxr((unsigned int *)v2);
  while (__stxr(v3 + 1, (unsigned int *)v2));
  v4 = *((_QWORD *)this + 74);
  *(_BYTE *)(v4 + 4) = 0;
  *((_QWORD *)this + 74) = v2;
  do
  {
    v5 = __ldaxr((unsigned int *)v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, (unsigned int *)v4));
  if (!v6)
    MEMORY[0x20BD0ADEC](v4, 0x1000C4090D0E795);
  v7 = *((_QWORD *)this + 61);
  v8 = *(_QWORD *)(v7 + 40);
  if (*((_DWORD *)this + 114))
  {
    if (v8)
      goto LABEL_13;
    *(_BYTE *)(v7 + 164) |= 1u;
    v9 = bssl::ssl_server_handshake;
  }
  else
  {
    if (v8)
      goto LABEL_13;
    *(_BYTE *)(v7 + 164) &= ~1u;
    v9 = bssl::ssl_client_handshake;
  }
  *(_QWORD *)(v7 + 40) = v9;
LABEL_13:
  result = SSL_do_handshake((SSL *)v7);
  v11 = (_QWORD *)*((_QWORD *)this + 61);
  if ((int)result <= 0)
  {
    v14 = result;
    v15 = ERR_peek_error();
    if (v14 && !v15)
    {
      v16 = *(_DWORD *)(v11[6] + 196);
      if (v16 == 3)
      {
        v31 = *(_DWORD *)(v11[4] + 24);
        if ((v31 & 2) != 0)
          return 0;
        if ((v31 & 1) == 0)
          goto LABEL_44;
        goto LABEL_49;
      }
      if (v16 == 2)
      {
        if (!v11[19])
        {
          v17 = *(_DWORD *)(v11[3] + 24);
          if ((v17 & 1) == 0)
          {
            if ((v17 & 2) != 0)
              return 0;
            goto LABEL_44;
          }
        }
LABEL_49:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
        result = DTLSv1_get_timeout(*((_QWORD *)this + 61), &v52);
        if ((_DWORD)result)
        {
          v46 = v53 + 1000000 * v52;
          v47 = rtc::Thread::Current((rtc::Thread *)result);
          v48 = (unsigned int *)*((_QWORD *)this + 74);
          if (v48)
          {
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          v50 = (_QWORD *)operator new();
          *v50 = v48;
          v50[1] = this;
          v50[3] = absl::internal_any_invocable::LocalManagerTrivial;
          v50[4] = absl::internal_any_invocable::LocalInvoker<false,void,rtc::OpenSSLAdapter::ContinueSSL(void)::$_0 &&>;
          v55[0] = v50;
          v56 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
          v57 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
          v54 = 0;
          (*(void (**)(void *, _QWORD *, unint64_t, char *, char *))(*(_QWORD *)v47 + 16))(v47, v55, v46, &v54, &v51);
          v56(1, v55, v55);
          return 0;
        }
        return result;
      }
    }
LABEL_44:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
    if (v14)
      return v14;
    else
      return 0xFFFFFFFFLL;
  }
  v12 = (_QWORD *)((char *)this + 504);
  if (*((char *)this + 527) < 0)
  {
    v13 = *((_QWORD *)this + 64);
    if ((v13 & 0x8000000000000000) != 0 || (v12 = (_QWORD *)*v12, v13) && !v12)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v13 = *((unsigned __int8 *)this + 527);
  }
  if (rtc::openssl::VerifyPeerCertMatchesHost(*((_QWORD *)this + 61), v12, v13)
    && (((v18 = v11[6], (v19 = *(_QWORD *)(v18 + 464)) != 0)
      || (v20 = *(_QWORD **)(v18 + 280), (v19 = v20[189]) != 0)
      || (v19 = v20[188]) != 0
      || (v19 = *(_QWORD *)(*v20 + 88)) != 0)
     && !*(_QWORD *)(v19 + 176)
     || *((_BYTE *)this + 584))
    || *((_BYTE *)this + 532))
  {
    *((_DWORD *)this + 110) = 3;
    v21 = (_QWORD *)*((_QWORD *)this + 34);
    *((_QWORD *)this + 36) = v21;
    if (v21 != (_QWORD *)((char *)this + 264))
    {
      do
      {
        v23 = (void (*)(_QWORD *, rtc::OpenSSLAdapter *))v21[2];
        v22 = v21 + 2;
        *((_QWORD *)this + 36) = *(v22 - 1);
        v23(v22, this);
        v21 = (_QWORD *)*((_QWORD *)this + 36);
      }
      while (v21 != (_QWORD *)((char *)this + 264));
      return 0;
    }
    return 0;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
  rtc::OpenSSLAdapter::Cleanup(this);
  return 0xFFFFFFFFLL;
}

void rtc::OpenSSLAdapter::DoSslWrite(rtc::OpenSSLAdapter *this, const void *a2, unint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  _QWORD *v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  *((_BYTE *)this + 461) = 0;
  if (!(a3 >> 31))
  {
    v10 = SSL_write(*((SSL **)this + 61), a2, a3);
    if (v10 >= 1)
    {
      *a4 = 0;
      return;
    }
    v11 = (_QWORD *)*((_QWORD *)this + 61);
    v12 = ERR_peek_error();
    if (v12)
    {
      if (HIBYTE(v12) != 2)
      {
        *a4 = 1;
        LogSslError();
        goto LABEL_17;
      }
      goto LABEL_6;
    }
    v14 = *(_DWORD *)(v11[6] + 196);
    if (v10)
    {
      if ((v14 - 11) >= 0xA && v14 != 4)
      {
        if (v14 == 3)
        {
          v24 = v11[4];
          v25 = *(_DWORD *)(v24 + 24);
          if ((v25 & 2) != 0)
          {
LABEL_40:
            *a4 = 3;
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
              rtc::webrtc_logging_impl::Log("\r\t", v34, v35, v36, v37, v38, v39, v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
            goto LABEL_42;
          }
          if ((v25 & 1) == 0)
          {
LABEL_31:
            v13 = 5;
            if ((v25 & 4) != 0)
            {
              v26 = *(_DWORD *)(v24 + 28);
              v13 = v26 == 3 ? 8 : 5;
              if (v26 == 2)
              {
                *a4 = 7;
                goto LABEL_17;
              }
            }
            goto LABEL_7;
          }
LABEL_37:
          *a4 = 2;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
          *((_BYTE *)this + 461) = 1;
          goto LABEL_42;
        }
        if (v14 == 2)
        {
          if (!v11[19])
          {
            v24 = v11[3];
            v25 = *(_DWORD *)(v24 + 24);
            if ((v25 & 1) == 0)
            {
              if ((v25 & 2) == 0)
                goto LABEL_31;
              goto LABEL_40;
            }
          }
          goto LABEL_37;
        }
LABEL_6:
        v13 = 5;
LABEL_7:
        *a4 = v13;
LABEL_17:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
        *((_DWORD *)this + 110) = 4;
        v23 = *(void (**)(void))(**((_QWORD **)this + 52) + 120);
        goto LABEL_20;
      }
      *a4 = v14;
      if (v14 != 6)
        goto LABEL_17;
    }
    else
    {
      if (v14 != 6)
        goto LABEL_6;
      *a4 = 6;
    }
LABEL_42:
    v23 = *(void (**)(void))(**((_QWORD **)this + 52) + 120);
LABEL_20:
    v23();
    return;
  }
  rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v41);
  LogSslError();
}

void LogSslError(void)
{
  unsigned int error_values;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;

  v9 = 0;
  v8 = 0;
  while (1)
  {
    error_values = get_error_values(1, 0, &v9, &v8, 0, 0);
    if (HIBYTE(error_values) == 16)
      break;
    if (!error_values)
      return;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v1, v2, v3, v4, v5, v6, v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
}

unint64_t rtc::OpenSSLAdapter::Send(rtc::OpenSSLAdapter *this, const void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unint64_t v10;
  void (*v13)(void);
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  int v30;

  v9 = *((_DWORD *)this + 110);
  if ((v9 - 1) < 2)
  {
    v13 = *(void (**)(void))(**((_QWORD **)this + 52) + 120);
  }
  else
  {
    v10 = a3;
    if (v9 != 3)
    {
      if (!v9)
        return (*(uint64_t (**)(_QWORD, const void *, unint64_t))(**((_QWORD **)this + 52) + 48))(*((_QWORD *)this + 52), a2, a3);
      return 0xFFFFFFFFLL;
    }
    v30 = 0;
    v14 = *((_QWORD *)this + 58);
    if (!v14)
    {
LABEL_12:
      if (v10)
      {
        rtc::OpenSSLAdapter::DoSslWrite(this, a2, v10, &v30, a5, a6, a7, a8);
        if ((v30 & 0xFFFFFFFE) == 2)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
          v24 = 0;
          *((_QWORD *)this + 58) = 0;
          v25 = *((_QWORD *)this + 59);
          if (v25 < v10)
          {
            if (v25 + (v25 >> 1) <= v10)
              v26 = v10;
            else
              v26 = v25 + (v25 >> 1);
            v27 = (void *)operator new[]();
            v28 = v27;
            v29 = *((_QWORD *)this + 60);
            if (v29)
            {
              memcpy(v27, *((const void **)this + 60), *((_QWORD *)this + 58));
              *((_QWORD *)this + 60) = v28;
              MEMORY[0x20BD0ADD4](v29, 0x1000C8077774924);
            }
            else
            {
              *((_QWORD *)this + 60) = v27;
            }
            *((_QWORD *)this + 59) = v26;
            v24 = *((_QWORD *)this + 58);
          }
          memcpy((void *)(*((_QWORD *)this + 60) + v24), a2, v10);
          *((_QWORD *)this + 58) = v10;
        }
        else
        {
          return v16;
        }
      }
      return v10;
    }
    rtc::OpenSSLAdapter::DoSslWrite(this, *((const void **)this + 60), v14, &v30, a5, a6, a7, a8);
    if (v15 == *((_DWORD *)this + 116))
    {
      *((_QWORD *)this + 58) = 0;
      goto LABEL_12;
    }
    v13 = *(void (**)(void))(**((_QWORD **)this + 52) + 120);
  }
  v13();
  return 0xFFFFFFFFLL;
}

uint64_t rtc::OpenSSLAdapter::SendTo(rtc::OpenSSLAdapter *this, const void *a2, unint64_t a3, const rtc::SocketAddress *a4)
{
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  void *__p[2];
  char v17;
  unsigned __int16 v18;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 52) + 128))(*((_QWORD *)this + 52)) == 2)
  {
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 52) + 24))(__p);
    v8 = rtc::SocketAddress::EqualIPs(a4, (const rtc::SocketAddress *)__p);
    v14 = *((unsigned __int16 *)a4 + 28) == v18 && v8;
    if (v17 < 0)
    {
      operator delete(__p[0]);
      if (v14)
        return rtc::OpenSSLAdapter::Send(this, a2, a3, v9, v10, v11, v12, v13);
    }
    else if (v14)
    {
      return rtc::OpenSSLAdapter::Send(this, a2, a3, v9, v10, v11, v12, v13);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 52) + 120))(*((_QWORD *)this + 52), 57);
  return 0xFFFFFFFFLL;
}

uint64_t rtc::OpenSSLAdapter::Recv(rtc::OpenSSLAdapter *this, void *a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  void (*v11)(void);
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  void *v26;
  unint64_t v27;
  rtc::SocketAddress *v28;
  uint64_t *v29;
  uint64_t v30;

  v9 = *((_DWORD *)this + 110);
  if ((v9 - 1) < 2)
  {
    v11 = *(void (**)(void))(**((_QWORD **)this + 52) + 120);
LABEL_6:
    v11();
    return 0xFFFFFFFFLL;
  }
  if (v9 != 3)
  {
    if (!v9)
      return (*(uint64_t (**)(_QWORD, void *, unint64_t, uint64_t *))(**((_QWORD **)this + 52) + 64))(*((_QWORD *)this + 52), a2, a3, a4);
    return 0xFFFFFFFFLL;
  }
  if (!a3)
    return 0;
  *((_BYTE *)this + 460) = 0;
  if (!(a3 >> 31))
  {
    v12 = SSL_read(*((SSL **)this + 61), a2, a3);
    if ((int)v12 > 0)
      return v12;
    v13 = (_QWORD *)*((_QWORD *)this + 61);
    v14 = ERR_peek_error();
    if (v14)
    {
      if (HIBYTE(v14) != 2)
        LogSslError();
      goto LABEL_27;
    }
    v15 = *(_DWORD *)(v13[6] + 196);
    if ((_DWORD)v12)
    {
      if (v15 == 3)
      {
        v17 = *(_DWORD *)(v13[4] + 24);
        if ((v17 & 2) != 0)
        {
LABEL_30:
          *((_BYTE *)this + 460) = 1;
          goto LABEL_31;
        }
        if ((v17 & 1) != 0)
        {
LABEL_31:
          v11 = *(void (**)(void))(**((_QWORD **)this + 52) + 120);
          goto LABEL_6;
        }
      }
      else if (v15 == 2)
      {
        if (v13[19])
          goto LABEL_31;
        v16 = *(_DWORD *)(v13[3] + 24);
        if ((v16 & 1) != 0)
          goto LABEL_31;
        if ((v16 & 2) != 0)
          goto LABEL_30;
      }
    }
    else if (v15 == 6)
    {
      goto LABEL_31;
    }
LABEL_27:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
    *((_DWORD *)this + 110) = 4;
    v11 = *(void (**)(void))(**((_QWORD **)this + 52) + 120);
    goto LABEL_6;
  }
  v25 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v30);
  return rtc::OpenSSLAdapter::RecvFrom((rtc::OpenSSLAdapter *)v25, v26, v27, v28, v29);
}

uint64_t rtc::OpenSSLAdapter::RecvFrom(rtc::OpenSSLAdapter *this, void *a2, unint64_t a3, void **a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  size_t v16;
  void *__p[2];
  void *v19;
  int v20;
  __int128 v21;
  __int16 v22;
  int v23;
  char v24;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 52) + 128))(*((_QWORD *)this + 52)) == 2)
  {
    v14 = rtc::OpenSSLAdapter::Recv(this, a2, a3, a5, v10, v11, v12, v13);
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 52) + 24))(__p);
    if (__p != a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        if (SHIBYTE(v19) >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        if (SHIBYTE(v19) >= 0)
          v16 = HIBYTE(v19);
        else
          v16 = (size_t)__p[1];
        std::string::__assign_no_alias<false>((std::string *)a4, (const std::string::value_type *)v15, v16);
      }
      else if ((HIBYTE(v19) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(a4, (char *)__p[0], (size_t)__p[1]);
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)__p;
        a4[2] = v19;
      }
    }
    *((_DWORD *)a4 + 8) = v20;
    *(_OWORD *)((char *)a4 + 36) = v21;
    *((_WORD *)a4 + 28) = v22;
    *((_BYTE *)a4 + 64) = v24;
    *((_DWORD *)a4 + 15) = v23;
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 52) + 120))(*((_QWORD *)this + 52), 57);
    return 0xFFFFFFFFLL;
  }
  return v14;
}

uint64_t rtc::OpenSSLAdapter::Close(rtc::OpenSSLAdapter *this)
{
  rtc::OpenSSLAdapter::Cleanup(this);
  *((_DWORD *)this + 110) = 0;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 52) + 104))(*((_QWORD *)this + 52));
}

uint64_t rtc::OpenSSLAdapter::GetState(rtc::OpenSSLAdapter *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 52) + 128))(*((_QWORD *)this + 52));
  if ((_DWORD)result == 2)
  {
    if ((*((_DWORD *)this + 110) - 1) < 2)
      return 1;
    else
      return 2;
  }
  return result;
}

uint64_t rtc::OpenSSLAdapter::IsResumedSession(rtc::OpenSSLAdapter *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 61);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 48);
  if ((*(_WORD *)(v2 + 220) & 0x40) == 0)
  {
    v3 = *(_QWORD *)(v2 + 280);
    if (v3)
      return (*(unsigned __int8 *)(v3 + 1569) >> 2) & 1;
    return 0;
  }
  return 1;
}

_QWORD *rtc::OpenSSLAdapter::OnConnectEvent(rtc::OpenSSLAdapter *this, rtc::Socket *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD *v11;
  _QWORD *v12;
  void (*v13)(_QWORD *, rtc::OpenSSLAdapter *, _QWORD *);
  _QWORD *v14;
  void (*v15)(_QWORD *, rtc::OpenSSLAdapter *);

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
  if (*((_DWORD *)this + 110) == 1)
  {
    *((_DWORD *)this + 110) = 2;
    result = (_QWORD *)rtc::OpenSSLAdapter::BeginSSL(this);
    if ((_DWORD)result)
    {
      v11 = result;
      result = (_QWORD *)*((_QWORD *)this + 41);
      for (*((_QWORD *)this + 43) = result;
            result != (_QWORD *)((char *)this + 320);
            result = (_QWORD *)*((_QWORD *)this + 43))
      {
        v13 = (void (*)(_QWORD *, rtc::OpenSSLAdapter *, _QWORD *))result[2];
        v12 = result + 2;
        *((_QWORD *)this + 43) = *(v12 - 1);
        v13(v12, this, v11);
      }
    }
  }
  else
  {
    result = (_QWORD *)*((_QWORD *)this + 34);
    for (*((_QWORD *)this + 36) = result;
          result != (_QWORD *)((char *)this + 264);
          result = (_QWORD *)*((_QWORD *)this + 36))
    {
      v15 = (void (*)(_QWORD *, rtc::OpenSSLAdapter *))result[2];
      v14 = result + 2;
      *((_QWORD *)this + 36) = *(v14 - 1);
      v15(v14, this);
    }
  }
  return result;
}

uint64_t rtc::OpenSSLAdapter::OnReadEvent(uint64_t this, rtc::Socket *a2)
{
  uint64_t v2;
  int v3;
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);

  v2 = this;
  v3 = *(_DWORD *)(this + 440);
  if (v3 == 3)
  {
    if (*(_BYTE *)(this + 461))
    {
      pthread_mutex_lock((pthread_mutex_t *)(this + 144));
      v8 = *(_QWORD *)(v2 + 216);
      for (*(_QWORD *)(v2 + 232) = v8; v8 != v2 + 208; v8 = *(_QWORD *)(v2 + 232))
      {
        v10 = *(void (**)(uint64_t, uint64_t))(v8 + 16);
        v9 = v8 + 16;
        *(_QWORD *)(v2 + 232) = *(_QWORD *)(v9 - 8);
        v10(v9, v2);
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 144));
    }
    v4 = (pthread_mutex_t *)(v2 + 24);
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 24));
    v11 = *(_QWORD *)(v2 + 96);
    for (*(_QWORD *)(v2 + 112) = v11; v11 != v2 + 88; v11 = *(_QWORD *)(v2 + 112))
    {
      v13 = *(void (**)(uint64_t, uint64_t))(v11 + 16);
      v12 = v11 + 16;
      *(_QWORD *)(v2 + 112) = *(_QWORD *)(v12 - 8);
      v13(v12, v2);
    }
    return pthread_mutex_unlock(v4);
  }
  if (v3 != 2)
  {
    if (v3)
      return this;
    v4 = (pthread_mutex_t *)(this + 24);
    pthread_mutex_lock((pthread_mutex_t *)(this + 24));
    v5 = *(_QWORD *)(v2 + 96);
    for (*(_QWORD *)(v2 + 112) = v5; v5 != v2 + 88; v5 = *(_QWORD *)(v2 + 112))
    {
      v7 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
      v6 = v5 + 16;
      *(_QWORD *)(v2 + 112) = *(_QWORD *)(v6 - 8);
      v7(v6, v2);
    }
    return pthread_mutex_unlock(v4);
  }
  this = rtc::OpenSSLAdapter::ContinueSSL((rtc::OpenSSLAdapter *)this);
  if ((_DWORD)this)
  {
    v14 = this;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
    *(_DWORD *)(v2 + 440) = 4;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 416) + 120))(*(_QWORD *)(v2 + 416), v14);
    this = *(_QWORD *)(v2 + 328);
    for (*(_QWORD *)(v2 + 344) = this; this != v2 + 320; this = *(_QWORD *)(v2 + 344))
    {
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(this + 16);
      v22 = this + 16;
      *(_QWORD *)(v2 + 344) = *(_QWORD *)(v22 - 8);
      v23(v22, v2, v14);
    }
  }
  return this;
}

uint64_t rtc::OpenSSLAdapter::OnWriteEvent(uint64_t this, rtc::Socket *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  pthread_mutex_t *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  int v32[2];
  uint64_t v33;

  v8 = this;
  v9 = *(_DWORD *)(this + 440);
  if (v9 == 3)
  {
    if (*(_BYTE *)(this + 460))
    {
      pthread_mutex_lock((pthread_mutex_t *)(this + 24));
      v14 = *(_QWORD *)(v8 + 96);
      for (*(_QWORD *)(v8 + 112) = v14; v14 != v8 + 88; v14 = *(_QWORD *)(v8 + 112))
      {
        v16 = *(void (**)(uint64_t, uint64_t))(v14 + 16);
        v15 = v14 + 16;
        *(_QWORD *)(v8 + 112) = *(_QWORD *)(v15 - 8);
        v16(v15, v8);
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v8 + 24));
    }
    v17 = *(_QWORD *)(v8 + 464);
    if (v17)
    {
      rtc::OpenSSLAdapter::DoSslWrite((rtc::OpenSSLAdapter *)v8, *(const void **)(v8 + 480), v17, v32, a5, a6, a7, a8);
      if (v18 == *(_DWORD *)(v8 + 464))
        *(_QWORD *)(v8 + 464) = 0;
    }
    v10 = (pthread_mutex_t *)(v8 + 144);
    pthread_mutex_lock((pthread_mutex_t *)(v8 + 144));
    v19 = *(_QWORD *)(v8 + 216);
    for (*(_QWORD *)(v8 + 232) = v19; v19 != v8 + 208; v19 = *(_QWORD *)(v8 + 232))
    {
      v21 = *(void (**)(uint64_t, uint64_t))(v19 + 16);
      v20 = v19 + 16;
      *(_QWORD *)(v8 + 232) = *(_QWORD *)(v20 - 8);
      v21(v20, v8);
    }
    return pthread_mutex_unlock(v10);
  }
  if (v9 != 2)
  {
    if (v9)
      return this;
    v10 = (pthread_mutex_t *)(this + 144);
    pthread_mutex_lock((pthread_mutex_t *)(this + 144));
    v11 = *(_QWORD *)(v8 + 216);
    for (*(_QWORD *)(v8 + 232) = v11; v11 != v8 + 208; v11 = *(_QWORD *)(v8 + 232))
    {
      v13 = *(void (**)(uint64_t, uint64_t))(v11 + 16);
      v12 = v11 + 16;
      *(_QWORD *)(v8 + 232) = *(_QWORD *)(v12 - 8);
      v13(v12, v8);
    }
    return pthread_mutex_unlock(v10);
  }
  this = rtc::OpenSSLAdapter::ContinueSSL((rtc::OpenSSLAdapter *)this);
  if ((_DWORD)this)
  {
    v22 = this;
    *(_QWORD *)v32 = "ContinueSSL";
    v33 = 11;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
    *(_DWORD *)(v8 + 440) = 4;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 416) + 120))(*(_QWORD *)(v8 + 416), v22);
    this = *(_QWORD *)(v8 + 328);
    for (*(_QWORD *)(v8 + 344) = this; this != v8 + 320; this = *(_QWORD *)(v8 + 344))
    {
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(this + 16);
      v30 = this + 16;
      *(_QWORD *)(v8 + 344) = *(_QWORD *)(v30 - 8);
      v31(v30, v8, v22);
    }
  }
  return this;
}

_QWORD *rtc::OpenSSLAdapter::OnCloseEvent(rtc::OpenSSLAdapter *this, rtc::Socket *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  _QWORD *v13;
  void (*v14)(_QWORD *, rtc::OpenSSLAdapter *, uint64_t);

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
  result = (_QWORD *)*((_QWORD *)this + 41);
  for (*((_QWORD *)this + 43) = result; result != (_QWORD *)((char *)this + 320); result = (_QWORD *)*((_QWORD *)this + 43))
  {
    v14 = (void (*)(_QWORD *, rtc::OpenSSLAdapter *, uint64_t))result[2];
    v13 = result + 2;
    *((_QWORD *)this + 43) = *(v13 - 1);
    v14(v13, this, a3);
  }
  return result;
}

void rtc::OpenSSLAdapter::SSLInfoCallback(const SSL *this, const ssl_st *a2, int a3)
{
  const char *v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[4];
  uint64_t *v23;
  __int128 v24;
  uint64_t v25;

  v24 = 0uLL;
  v25 = 0;
  if ((int)a2 <= 0x2000)
  {
    if ((int)a2 <= 31)
    {
      if ((_DWORD)a2 == 2)
      {
        HIBYTE(v25) = 4;
        LODWORD(v24) = 1953069157;
      }
      else
      {
        if ((_DWORD)a2 != 16)
          goto LABEL_30;
        HIBYTE(v25) = 15;
        qmemcpy(&v24, "handshake_start", 15);
      }
      goto LABEL_28;
    }
    switch((_DWORD)a2)
    {
      case 0x20:
        HIBYTE(v25) = 14;
        qmemcpy(&v24, "handshake_done", 14);
        goto LABEL_28;
      case 0x1001:
        HIBYTE(v25) = 12;
        DWORD2(v24) = 1886351212;
        v4 = "connect_loop";
        break;
      case 0x1002:
        HIBYTE(v25) = 12;
        DWORD2(v24) = 1953069157;
        v4 = "connect_exit";
        break;
      default:
        goto LABEL_30;
    }
LABEL_27:
    *(_QWORD *)&v24 = *(_QWORD *)v4;
LABEL_28:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      SSL_state_string_long(this);
      rtc::webrtc_logging_impl::Log("\r\n\t\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
    }
    goto LABEL_30;
  }
  if ((int)a2 < 0x4000)
  {
    if ((_DWORD)a2 == 8193)
    {
      HIBYTE(v25) = 11;
      *(_DWORD *)((char *)&v24 + 7) = 1886351212;
      v4 = "accept_loop";
    }
    else
    {
      if ((_DWORD)a2 != 8194)
        goto LABEL_30;
      HIBYTE(v25) = 11;
      *(_DWORD *)((char *)&v24 + 7) = 1953069157;
      v4 = "accept_exit";
    }
    goto LABEL_27;
  }
  switch((_DWORD)a2)
  {
    case 0x4000:
      HIBYTE(v25) = 5;
      qmemcpy(&v24, "alert", 5);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_30;
LABEL_24:
      v22[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc";
      v22[1] = 6562;
      v22[2] = &v21;
      v22[3] = &v24;
      v23 = v22;
      SSL_alert_desc_string_long(a3);
      SSL_state_string_long(this);
      rtc::webrtc_logging_impl::Log("\r\n\t\t\t\t\t\t", v7, v8, v9, v10, v11, v12, v13, *v23);
      goto LABEL_30;
    case 0x4004:
      HIBYTE(v25) = 10;
      WORD4(v24) = 29810;
      v6 = "read_alert";
      break;
    case 0x4008:
      HIBYTE(v25) = 11;
      *(_DWORD *)((char *)&v24 + 7) = 1953654124;
      v6 = "write_alert";
      break;
    default:
      goto LABEL_30;
  }
  *(_QWORD *)&v24 = *(_QWORD *)v6;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    goto LABEL_24;
LABEL_30:
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
}

BOOL rtc::OpenSSLAdapter::SSLVerifyCallback(_BOOL8 this, uint64_t a2, x509_store_ctx_st *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  size_t v15;
  unsigned __int8 v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  size_t v50;
  int v51;
  size_t v52;
  void (**v53)(rtc::BoringSSLCertificate *__hidden);
  void *v54;
  unsigned __int8 *out;

  v4 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 128) + 8) + 120);
  if (v4 && *(_QWORD *)v4)
  {
    v5 = **(_QWORD **)(v4 + 8);
    if ((_DWORD)this)
      return this;
  }
  else
  {
    v5 = 0;
    if ((_DWORD)this)
      return this;
  }
  if (*(_QWORD *)(v5 + 432))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
    out = 0;
    v13 = i2d_X509(*(X509 **)(a2 + 96), &out);
    if ((v13 & 0x80000000) == 0)
    {
      v14 = out;
      v15 = v13;
      if ((v16 & 1) == 0)
      {
        v52 = v13;
        v15 = v52;
        if (v51)
        {
          rtc::openssl::GetBufferPool(void)::instance = (uint64_t)CRYPTO_BUFFER_POOL_new();
          v15 = v52;
        }
      }
      v17 = crypto_buffer_new(v14, v15, 0, (uint64_t *)rtc::openssl::GetBufferPool(void)::instance);
      if (v17)
      {
        v53 = &off_24C0B02E8;
        v54 = v17;
        if (((*(uint64_t (**)(_QWORD, void (***)(rtc::BoringSSLCertificate *__hidden)))(**(_QWORD **)(v5 + 432) + 16))(*(_QWORD *)(v5 + 432), &v53) & 1) != 0)
        {
          v18 = 1;
          *(_BYTE *)(v5 + 584) = 1;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
        }
        else
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
          v18 = 0;
        }
        v47 = (unsigned int *)v54;
        v54 = 0;
        if (v47)
          CRYPTO_BUFFER_free(v47);
        if (!v14)
        {
LABEL_29:
          if (v18)
            return 1;
          return *(_BYTE *)(v5 + 532) != 0;
        }
      }
      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      {
        v18 = 0;
        if (!v14)
          goto LABEL_29;
      }
      else
      {
        rtc::webrtc_logging_impl::Log("\r\t", v33, v34, v35, v36, v37, v38, v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
        v18 = 0;
        if (!v14)
          goto LABEL_29;
      }
      v49 = *((_QWORD *)v14 - 1);
      v48 = v14 - 8;
      v50 = v49 + 8;
      if (v49 != -8)
        bzero(v48, v50);
      free(v48);
      goto LABEL_29;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
  }
  return *(_BYTE *)(v5 + 532) != 0;
}

uint64_t rtc::OpenSSLAdapter::NewSSLSessionCallback(rtc::OpenSSLAdapter *this, ssl_st *a2, ssl_session_st *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  void **v14;
  size_t v15;

  v4 = *((_QWORD *)this + 15);
  if (!v4 || !*(_QWORD *)v4)
  {
    v5 = 0;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v5 = **(_QWORD **)(v4 + 8);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
LABEL_6:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
LABEL_7:
  result = *(_QWORD *)(v5 + 424);
  v14 = (void **)(v5 + 504);
  if ((*(char *)(v5 + 527) & 0x80000000) == 0)
  {
    v15 = *(unsigned __int8 *)(v5 + 527);
LABEL_12:
    rtc::OpenSSLSessionCache::AddSession(result, v14, v15, a2);
    return 1;
  }
  v15 = *(_QWORD *)(v5 + 512);
  if ((v15 & 0x8000000000000000) == 0)
  {
    v14 = (void **)*v14;
    if (!v15 || v14)
      goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t rtc::SSLAdapter::Listen(rtc::SSLAdapter *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v8;
  rtc::SocketAddress *v9;
  uint64_t vars0;

  v8 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/ssl_adapter.h", 109, "false", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, vars0);
  return rtc::SSLAdapter::Accept((rtc::SSLAdapter *)v8, v9);
}

uint64_t rtc::SSLAdapter::Accept(rtc::SSLAdapter *this, rtc::SocketAddress *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v8;
  const char *v9;
  int v10;
  uint64_t vars0;

  v8 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/ssl_adapter.h", 110, "false", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, vars0);
  return socket_write((bio_st *)v8, v9, v10);
}

uint64_t socket_write(bio_st *a1, const char *a2, int a3)
{
  uint64_t v4;
  uint64_t result;

  if (!a2)
    return 0xFFFFFFFFLL;
  v4 = *(_QWORD *)&a1->num;
  a1->init &= 0xFFFFFFF0;
  a1->shutdown = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)v4 + 48))(v4, a2, a3);
  if ((int)result <= 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4) - 35 <= 1)
      a1->init |= 0xAu;
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t socket_read(bio_st *a1, char *a2, int a3)
{
  uint64_t v4;
  uint64_t result;

  if (!a2)
    return 0xFFFFFFFFLL;
  v4 = *(_QWORD *)&a1->num;
  a1->init &= 0xFFFFFFF0;
  a1->shutdown = 0;
  result = (*(uint64_t (**)(uint64_t, char *, _QWORD, _QWORD))(*(_QWORD *)v4 + 64))(v4, a2, a3, 0);
  if ((int)result <= 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4) - 35 <= 1)
      a1->init |= 9u;
    return 0xFFFFFFFFLL;
  }
  return result;
}

BOOL socket_ctrl(bio_st *a1, int a2, uint64_t a3, void *a4)
{
  if (a2 == 11)
    return 1;
  if (a2 == 2)
    return (*(unsigned int (**)(void *))(*(_QWORD *)a4 + 128))(a4) == 0;
  return 0;
}

uint64_t socket_new(bio_st *a1)
{
  a1->cb_arg = (char *)1;
  *(_QWORD *)&a1->num = 0;
  return 1;
}

BOOL socket_free(bio_st *a1)
{
  return a1 != 0;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,rtc::OpenSSLAdapter::ContinueSSL(void)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_adapter.cc");
  DTLSv1_handle_timeout(v1[61]);
  return rtc::OpenSSLAdapter::ContinueSSL((rtc::OpenSSLAdapter *)v1);
}

uint64_t rtc::OpenSSLDigest::GetDigestEVP(unsigned __int16 *a1, uint64_t a2, const EVP_MD **a3)
{
  switch(a2)
  {
    case 7:
      if (*(_DWORD *)a1 == *(_DWORD *)"sha-224" && *(_DWORD *)((char *)a1 + 3) == *(_DWORD *)"-224")
      {
        if (pthread_once(&EVP_sha224_once, (void (*)(void))EVP_sha224_init))
          goto LABEL_41;
        *a3 = (const EVP_MD *)&EVP_sha224_storage;
        return 1;
      }
      else if (*(_DWORD *)a1 == *(_DWORD *)"sha-256" && *(_DWORD *)((char *)a1 + 3) == *(_DWORD *)"-256")
      {
        if (pthread_once(&EVP_sha256_once, (void (*)(void))EVP_sha256_init))
          goto LABEL_41;
        *a3 = (const EVP_MD *)&EVP_sha256_storage;
        return 1;
      }
      else
      {
        if (*(_DWORD *)a1 != *(_DWORD *)"sha-384" || *(_DWORD *)((char *)a1 + 3) != *(_DWORD *)"-384")
        {
          if (*(_DWORD *)a1 == *(_DWORD *)"sha-512" && *(_DWORD *)((char *)a1 + 3) == *(_DWORD *)"-512")
          {
            *a3 = EVP_sha512();
            return 1;
          }
          return 0;
        }
        *a3 = EVP_sha384();
        return 1;
      }
    case 5:
      if (*(_DWORD *)a1 != *(_DWORD *)"sha-1" || *((unsigned __int8 *)a1 + 4) != rtc::DIGEST_SHA_1[4])
        return 0;
      if (pthread_once(&EVP_sha1_once, (void (*)(void))EVP_sha1_init))
        goto LABEL_41;
      *a3 = (const EVP_MD *)&EVP_sha1_storage;
      return 1;
    case 3:
      if (*a1 != (unsigned __int16)rtc::DIGEST_MD5 || *((_BYTE *)a1 + 2) != 53)
        return 0;
      if (!pthread_once(&EVP_md5_once, (void (*)(void))EVP_md5_init))
      {
        *a3 = (const EVP_MD *)&EVP_md5_storage;
        return 1;
      }
LABEL_41:
      abort();
    default:
      return 0;
  }
}

void rtc::OpenSSLDigest::OpenSSLDigest(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;

  *(_QWORD *)a1 = &off_24C0B7F08;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (char *)malloc_type_malloc(0x28uLL, 0x30772F57uLL);
  if (v6)
  {
    *(_QWORD *)v6 = 32;
    *(_QWORD *)(a1 + 8) = v6 + 8;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 8) = 0u;
    if (rtc::OpenSSLDigest::GetDigestEVP(a2, a3, (const EVP_MD **)(a1 + 16)))
    {
      v7 = *(_QWORD **)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 16);
      if (*v7 == v8)
      {
LABEL_10:
        (*(void (**)(_QWORD *))(v8 + 16))(v7);
        return;
      }
      v9 = *(unsigned int *)(v8 + 44);
      v10 = malloc_type_malloc(v9 + 8, 0x30772F57uLL);
      if (v10)
      {
        *v10 = v9;
        v11 = v10 + 1;
        v12 = v7[1];
        if (v12)
        {
          v14 = *(_QWORD *)(v12 - 8);
          v13 = (void *)(v12 - 8);
          v15 = v14 + 8;
          if (v14 != -8)
            bzero(v13, v15);
          free(v13);
        }
        *v7 = v8;
        v7[1] = v11;
        goto LABEL_10;
      }
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    *(_QWORD *)(a1 + 8) = 0;
    v20 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_digest.cc", 21, "ctx_ != nullptr", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v16, v17, v18, v19, v21);
    rtc::OpenSSLDigest::~OpenSSLDigest((rtc::OpenSSLDigest *)v20);
  }
}

void rtc::OpenSSLDigest::~OpenSSLDigest(EVP_MD_CTX **this)
{
  EVP_MD_CTX_destroy(this[1]);
}

{
  EVP_MD_CTX_destroy(this[1]);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::OpenSSLDigest::Size(rtc::OpenSSLDigest *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    return *(unsigned int *)(v1 + 4);
  else
    return 0;
}

uint64_t rtc::OpenSSLDigest::Update(uint64_t this, const void *a2)
{
  if (*(_QWORD *)(this + 16))
    return (*(uint64_t (**)(_QWORD, const void *))(**(_QWORD **)(this + 8) + 24))(*(_QWORD *)(this + 8), a2);
  return this;
}

uint64_t rtc::OpenSSLDigest::Finish(rtc::OpenSSLDigest *this, void *a2, unint64_t a3)
{
  uint64_t v3;
  void **v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  size_t v17;

  v3 = *((_QWORD *)this + 2);
  if (!v3 || *(unsigned int *)(v3 + 4) > a3)
    return 0;
  v6 = (void **)*((_QWORD *)this + 1);
  (*((void (**)(void **, void *))*v6 + 4))(v6, a2);
  v7 = *((unsigned int *)*v6 + 1);
  v8 = *((unsigned int *)*v6 + 11);
  if ((_DWORD)v8)
    bzero(v6[1], v8);
  v9 = (_QWORD *)*((_QWORD *)this + 1);
  v10 = *((_QWORD *)this + 2);
  if (*v9 == v10)
    goto LABEL_13;
  v11 = *(unsigned int *)(v10 + 44);
  v12 = malloc_type_malloc(v11 + 8, 0x30772F57uLL);
  if (v12)
  {
    *v12 = v11;
    v13 = v12 + 1;
    v14 = v9[1];
    if (v14)
    {
      v16 = *(_QWORD *)(v14 - 8);
      v15 = (void *)(v14 - 8);
      v17 = v16 + 8;
      if (v16 != -8)
        bzero(v15, v17);
      free(v15);
    }
    *v9 = v10;
    v9[1] = v13;
LABEL_13:
    (*(void (**)(_QWORD *))(v10 + 16))(v9);
    return v7;
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  return v7;
}

_QWORD *rtc::OpenSSLKeyPair::Generate@<X0>(rtc::OpenSSLKeyPair *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned int *v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  BIGNUM *v18;
  RSA *v19;
  unsigned int i;
  unsigned int v21;
  uint64_t v22;
  void (*v23)(unsigned int *);
  char *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int m;
  unsigned int v35;
  uint64_t v36;
  void (*v37)(unsigned int *);
  char *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  void (*v42)(unsigned int *);
  int v43;
  unint64_t *v44;
  unint64_t *v45;
  uint64_t v46;
  size_t v47;
  unsigned int ii;
  unsigned int v49;
  uint64_t v50;
  void (*v51)(unsigned int *);
  char *v52;
  uint64_t v53;
  size_t v54;
  int flags;
  unint64_t *d;
  unint64_t *v57;
  uint64_t v58;
  size_t v59;
  char *v60;
  EC_KEY *v61;
  uint64_t v62;
  void (*v63)(unsigned int *);
  int *p_neg;
  uint64_t v65;
  size_t v66;
  unint64_t n;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *result;
  unsigned int j;
  unsigned int v77;
  uint64_t v78;
  void (*v79)(unsigned int *);
  char *v80;
  uint64_t v81;
  size_t v82;
  int *v83;
  uint64_t v84;
  size_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int k;
  unsigned int v94;
  uint64_t v95;
  void (*v96)(unsigned int *);
  char *v97;
  uint64_t v98;
  size_t v99;
  char buf[200];
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_key_pair.cc");
  v13 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v13)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    v14 = 0;
    v15 = *(_DWORD *)this;
    if (*(_DWORD *)this != 1)
      goto LABEL_5;
LABEL_10:
    if (*((_DWORD *)this + 1))
    {
      if (v14)
      {
        for (i = atomic_load(v14); i != -1; i = v21)
        {
          if (!i)
            goto LABEL_143;
          v21 = __ldaxr(v14);
          if (v21 == i)
          {
            if (!__stlxr(i - 1, v14))
            {
              if (i == 1)
              {
                v22 = *((_QWORD *)v14 + 2);
                if (v22)
                {
                  v23 = *(void (**)(unsigned int *))(v22 + 160);
                  if (v23)
                  {
                    v23(v14);
                    *((_QWORD *)v14 + 1) = 0;
                    v14[1] = 0;
                  }
                }
                v25 = *((_QWORD *)v14 - 1);
                v24 = (char *)(v14 - 2);
                v26 = v25 + 8;
                if (v25 != -8)
                  bzero(v24, v26);
                free(v24);
              }
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_97;
      goto LABEL_96;
    }
    v60 = (char *)malloc_type_malloc(0x40uLL, 0x30772F57uLL);
    if (!v60)
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      if (v14)
      {
        for (j = atomic_load(v14); j != -1; j = v77)
        {
          if (!j)
            goto LABEL_143;
          v77 = __ldaxr(v14);
          if (v77 == j)
          {
            if (!__stlxr(j - 1, v14))
            {
              if (j == 1)
              {
                v78 = *((_QWORD *)v14 + 2);
                if (v78)
                {
                  v79 = *(void (**)(unsigned int *))(v78 + 160);
                  if (v79)
                  {
                    v79(v14);
                    *((_QWORD *)v14 + 1) = 0;
                    v14[1] = 0;
                  }
                }
                v81 = *((_QWORD *)v14 - 1);
                v80 = (char *)(v14 - 2);
                v82 = v81 + 8;
                if (v81 != -8)
                  bzero(v80, v82);
                free(v80);
              }
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_97;
      goto LABEL_96;
    }
    *(_QWORD *)v60 = 56;
    *(_OWORD *)(v60 + 8) = 0u;
    v61 = (EC_KEY *)(v60 + 8);
    *(_OWORD *)(v60 + 24) = 0u;
    *(_OWORD *)(v60 + 40) = 0u;
    *((_QWORD *)v60 + 7) = 0;
    *(_QWORD *)(v60 + 36) = 0x100000004;
    if (pthread_once(&EC_group_p256_once, (void (*)(void))EC_group_p256_init))
LABEL_143:
      abort();
    *(_QWORD *)v61 = EC_group_p256_storage;
    if (v14)
    {
      if (EC_KEY_generate_key(v61))
      {
        v62 = *((_QWORD *)v14 + 2);
        if (v62)
        {
          v63 = *(void (**)(unsigned int *))(v62 + 160);
          if (v63)
            v63(v14);
        }
        v14[1] = 408;
        *((_QWORD *)v14 + 1) = v61;
        *((_QWORD *)v14 + 2) = &ec_asn1_meth;
        goto LABEL_124;
      }
      for (k = atomic_load(v14); k != -1; k = v94)
      {
        if (!k)
          goto LABEL_143;
        v94 = __ldaxr(v14);
        if (v94 == k)
        {
          if (!__stlxr(k - 1, v14))
          {
            if (k == 1)
            {
              v95 = *((_QWORD *)v14 + 2);
              if (v95)
              {
                v96 = *(void (**)(unsigned int *))(v95 + 160);
                if (v96)
                {
                  v96(v14);
                  *((_QWORD *)v14 + 1) = 0;
                  v14[1] = 0;
                }
              }
              v98 = *((_QWORD *)v14 - 1);
              v97 = (char *)(v14 - 2);
              v99 = v98 + 8;
              if (v98 != -8)
                bzero(v97, v99);
              free(v97);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    EC_KEY_free(v61);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      goto LABEL_97;
    goto LABEL_96;
  }
  *(_QWORD *)v13 = 24;
  *((_DWORD *)v13 + 2) = 1;
  v14 = (unsigned int *)(v13 + 8);
  *(_QWORD *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 12) = 0;
  *((_DWORD *)v13 + 7) = 0;
  v15 = *(_DWORD *)this;
  if (*(_DWORD *)this == 1)
    goto LABEL_10;
LABEL_5:
  if (v15)
  {
    if (v14)
    {
      for (m = atomic_load(v14); m != -1; m = v35)
      {
        if (!m)
          goto LABEL_143;
        v35 = __ldaxr(v14);
        if (v35 == m)
        {
          if (!__stlxr(m - 1, v14))
          {
            if (m == 1)
            {
              v36 = *((_QWORD *)v14 + 2);
              if (v36)
              {
                v37 = *(void (**)(unsigned int *))(v36 + 160);
                if (v37)
                {
                  v37(v14);
                  *((_QWORD *)v14 + 1) = 0;
                  v14[1] = 0;
                }
              }
              v39 = *((_QWORD *)v14 - 1);
              v38 = (char *)(v14 - 2);
              v40 = v39 + 8;
              if (v39 != -8)
                bzero(v38, v40);
              free(v38);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      goto LABEL_97;
    goto LABEL_96;
  }
  v16 = *((_DWORD *)this + 1);
  v17 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (v17)
  {
    *v17 = 24;
    v17[1] = 0;
    v18 = (BIGNUM *)(v17 + 1);
    v17[2] = 0;
    v17[3] = 0x100000000;
    v19 = RSA_new_method(0);
    if (!v14)
      goto LABEL_60;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    v18 = 0;
    v19 = RSA_new_method(0);
    if (!v14)
      goto LABEL_60;
  }
  if (!v18 || !v19)
  {
LABEL_60:
    if (!v14)
    {
LABEL_75:
      if (!v18)
        goto LABEL_83;
      flags = v18->flags;
      if ((flags & 2) == 0)
      {
        d = v18->d;
        if (v18->d)
        {
          v58 = *(d - 1);
          v57 = d - 1;
          v59 = v58 + 8;
          if (v58 != -8)
            bzero(v57, v59);
          free(v57);
          flags = v18->flags;
        }
      }
      if ((flags & 1) == 0)
      {
        v18->d = 0;
LABEL_83:
        RSA_free(v19);
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
          goto LABEL_97;
        goto LABEL_96;
      }
      v65 = *(_QWORD *)&v18[-1].neg;
      p_neg = &v18[-1].neg;
      v66 = v65 + 8;
      if (v65 != -8)
        bzero(p_neg, v66);
      free(p_neg);
      RSA_free(v19);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_97;
LABEL_96:
      rtc::webrtc_logging_impl::Log("\r\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_key_pair.cc");
LABEL_97:
      for (n = ERR_get_error(); (_DWORD)n; n = ERR_get_error())
      {
        ERR_error_string_n(n, buf, 0xC8uLL);
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          v3 = v3 & 0xFFFFFFFF00000000 | 0x783;
          rtc::webrtc_logging_impl::Log("\r\v\t\t\t", v68, v69, v70, v71, v72, v73, v74, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_utility.cc");
        }
      }
      result = 0;
      goto LABEL_103;
    }
LABEL_61:
    for (ii = atomic_load(v14); ii != -1; ii = v49)
    {
      if (!ii)
        goto LABEL_143;
      v49 = __ldaxr(v14);
      if (v49 == ii)
      {
        if (!__stlxr(ii - 1, v14))
        {
          if (ii == 1)
          {
            v50 = *((_QWORD *)v14 + 2);
            if (v50)
            {
              v51 = *(void (**)(unsigned int *))(v50 + 160);
              if (v51)
              {
                v51(v14);
                *((_QWORD *)v14 + 1) = 0;
                v14[1] = 0;
              }
            }
            v53 = *((_QWORD *)v14 - 1);
            v52 = (char *)(v14 - 2);
            v54 = v53 + 8;
            if (v53 != -8)
              bzero(v52, v54);
            free(v52);
          }
          goto LABEL_75;
        }
      }
      else
      {
        __clrex();
      }
    }
    goto LABEL_75;
  }
  if (!BN_set_word(v18, *((unsigned int *)this + 2))
    || !RSA_generate_key_ex_maybe_fips((uint64_t)v19, v16, (uint64_t)v18, 0, 0))
  {
    goto LABEL_61;
  }
  v41 = *((_QWORD *)v14 + 2);
  if (v41)
  {
    v42 = *(void (**)(unsigned int *))(v41 + 160);
    if (v42)
      v42(v14);
  }
  v14[1] = 6;
  *((_QWORD *)v14 + 1) = v19;
  *((_QWORD *)v14 + 2) = &rsa_asn1_meth;
  v43 = v18->flags;
  if ((v43 & 2) == 0)
  {
    v44 = v18->d;
    if (v18->d)
    {
      v46 = *(v44 - 1);
      v45 = v44 - 1;
      v47 = v46 + 8;
      if (v46 != -8)
        bzero(v45, v47);
      free(v45);
      v43 = v18->flags;
    }
  }
  if ((v43 & 1) != 0)
  {
    v84 = *(_QWORD *)&v18[-1].neg;
    v83 = &v18[-1].neg;
    v85 = v84 + 8;
    if (v84 != -8)
      bzero(v83, v85);
    free(v83);
  }
  else
  {
    v18->d = 0;
  }
LABEL_124:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v86, v87, v88, v89, v90, v91, v92, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_key_pair.cc");
  result = (_QWORD *)operator new();
  *result = v14;
LABEL_103:
  *a2 = result;
  return result;
}

_QWORD *rtc::OpenSSLKeyPair::FromPrivateKeyPEMString@<X0>(void *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  BIO *v4;
  BIO *v5;
  uint64_t (__cdecl *ctrl)(BIO *, int, uint64_t, void *);
  EVP_PKEY *bio_PrivateKey;
  char *ptr;
  unsigned int (*v9)(EVP_PKEY *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int i;
  unsigned int v18;
  char *v19;
  void (*v20)(EVP_PKEY *);
  STACK **p_attributes;
  STACK *attributes;
  size_t p_data;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *result;

  v4 = BIO_new_mem_buf(a1, a2);
  if (!v4)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      goto LABEL_31;
LABEL_30:
    rtc::webrtc_logging_impl::Log("\r\t", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_key_pair.cc");
    goto LABEL_31;
  }
  v5 = v4;
  if (v4->method && (ctrl = v4->method->ctrl) != 0)
    ((void (*)(BIO *, uint64_t, _QWORD, _QWORD))ctrl)(v4, 130, 0, 0);
  else
    ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 217);
  bio_PrivateKey = PEM_read_bio_PrivateKey(v5, 0, 0, 0);
  BIO_free(v5);
  if (!bio_PrivateKey)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      goto LABEL_31;
    goto LABEL_30;
  }
  ptr = bio_PrivateKey->pkey.ptr;
  if (!ptr || (v9 = (unsigned int (*)(EVP_PKEY *))*((_QWORD *)ptr + 17)) == 0 || !v9(bio_PrivateKey))
  {
    result = (_QWORD *)operator new();
    *result = bio_PrivateKey;
    *a3 = result;
    return result;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_key_pair.cc");
  for (i = atomic_load((unsigned int *)bio_PrivateKey); i != -1; i = v18)
  {
    if (!i)
      abort();
    v18 = __ldaxr((unsigned int *)bio_PrivateKey);
    if (v18 == i)
    {
      if (!__stlxr(i - 1, (unsigned int *)bio_PrivateKey))
      {
        if (i == 1)
        {
          v19 = bio_PrivateKey->pkey.ptr;
          if (v19)
          {
            v20 = (void (*)(EVP_PKEY *))*((_QWORD *)v19 + 20);
            if (v20)
            {
              v20(bio_PrivateKey);
              *(_QWORD *)&bio_PrivateKey->references = 0;
              bio_PrivateKey->save_type = 0;
            }
          }
          attributes = bio_PrivateKey[-1].attributes;
          p_attributes = &bio_PrivateKey[-1].attributes;
          p_data = (size_t)&attributes->data;
          if (attributes != (STACK *)-8)
            bzero(p_attributes, p_data);
          free(p_attributes);
        }
        break;
      }
    }
    else
    {
      __clrex();
    }
  }
LABEL_31:
  result = 0;
  *a3 = 0;
  return result;
}

void rtc::OpenSSLKeyPair::PrivateKeyToPEMString(EVP_PKEY **this@<X0>, _BYTE *a2@<X8>)
{
  char *v4;
  _QWORD *v5;
  BIO *v6;
  uint64_t (__cdecl *ctrl)(BIO *, int, uint64_t, void *);
  unint64_t v8;
  _BYTE *v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  void *__src;

  v4 = (char *)malloc_type_malloc(0x50uLL, 0x30772F57uLL);
  if (!v4)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      goto LABEL_22;
    goto LABEL_18;
  }
  v5 = v4;
  *(_QWORD *)v4 = 72;
  *((_QWORD *)v4 + 1) = &mem_method;
  v6 = (BIO *)(v4 + 8);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = 0;
  *((_DWORD *)v4 + 7) = 1;
  *((_DWORD *)v4 + 11) = 1;
  *((_QWORD *)v4 + 2) = 0;
  if (!mem_new((uint64_t)(v4 + 8)))
  {
    if (*v5 != -8)
      __memset_chk();
    free(v5);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      goto LABEL_22;
LABEL_18:
    rtc::webrtc_logging_impl::Log("\r\t\t\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_key_pair.cc");
LABEL_22:
    a2[23] = 0;
    *a2 = 0;
    return;
  }
  if (!do_pk8pkey(v6, *this, 0, -1, 0, 0, 0, 0, 0))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_key_pair.cc");
    BIO_free(v6);
    goto LABEL_22;
  }
  __src = 0;
  if (!v6->method || (ctrl = v6->method->ctrl) == 0)
  {
    ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 217);
    goto LABEL_34;
  }
  v8 = ((uint64_t (*)(BIO *, uint64_t, _QWORD, void **))ctrl)(v6, 3, 0, &__src);
  v9 = __src;
  if (v8)
    v10 = __src == 0;
  else
    v10 = 0;
  if (v10)
    goto LABEL_34;
  v11 = v8;
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_35;
  if (v8 > 0x16)
  {
    v26 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v26 = v8 | 7;
    v27 = v26 + 1;
    v28 = operator new(v26 + 1);
    *((_QWORD *)a2 + 1) = v11;
    *((_QWORD *)a2 + 2) = v27 | 0x8000000000000000;
    *(_QWORD *)a2 = v28;
    a2 = v28;
  }
  else
  {
    a2[23] = v8;
  }
  v29 = &a2[v11];
  if (a2 <= v9 && v29 > v9)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    abort();
  }
  if (v11)
    memmove(a2, v9, v11);
  *v29 = 0;
  BIO_free(v6);
}

void rtc::OpenSSLKeyPair::PublicKeyToPEMString(char **this@<X0>, char *a2@<X8>)
{
  char *v4;
  _QWORD *v5;
  BIO *v6;
  _DWORD *v7;
  int (__cdecl *bwrite)(BIO *, const char *, int);
  int v9;
  BIO_METHOD *method;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (__cdecl *ctrl)(BIO *, int, uint64_t, void *);
  char *v19;
  size_t v20;
  size_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *__s;

  v4 = (char *)malloc_type_malloc(0x50uLL, 0x30772F57uLL);
  if (!v4)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      goto LABEL_27;
    goto LABEL_15;
  }
  v5 = v4;
  *((_QWORD *)v4 + 1) = &mem_method;
  v6 = (BIO *)(v4 + 8);
  *(_QWORD *)v4 = 72;
  *(_OWORD *)(v4 + 24) = 0u;
  v7 = v4 + 24;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = 0;
  *((_DWORD *)v4 + 7) = 1;
  *((_DWORD *)v4 + 11) = 1;
  *((_QWORD *)v4 + 2) = 0;
  if (!mem_new((uint64_t)(v4 + 8)))
  {
    if (*v5 != -8)
      __memset_chk();
    free(v5);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      goto LABEL_27;
LABEL_15:
    rtc::webrtc_logging_impl::Log("\r\t\t\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_key_pair.cc");
LABEL_27:
    a2[23] = 0;
    *a2 = 0;
    return;
  }
  if (!PEM_ASN1_write_bio((i2d_of_void *)pem_write_bio_PUBKEY_i2d, "PUBLIC KEY", v6, *this, 0, 0, 0, 0, 0))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\t", v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_key_pair.cc");
    BIO_free(v6);
    goto LABEL_27;
  }
  if (v6->method && (bwrite = v6->method->bwrite) != 0)
  {
    if (!*v7)
    {
      ERR_put_error(17, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 171);
      __s = 0;
      method = v6->method;
      if (!v6->method)
        goto LABEL_36;
      goto LABEL_18;
    }
    v9 = ((uint64_t (*)(BIO *, void *, uint64_t))bwrite)(v6, &str_10_36, 1);
    if (v9 >= 1)
    {
      v5[9] += v9;
      __s = 0;
      method = v6->method;
      if (!v6->method)
        goto LABEL_36;
      goto LABEL_18;
    }
  }
  else
  {
    ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 167);
  }
  __s = 0;
  method = v6->method;
  if (!v6->method)
  {
LABEL_36:
    ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 217);
    goto LABEL_37;
  }
LABEL_18:
  ctrl = method->ctrl;
  if (!ctrl)
    goto LABEL_36;
  ((void (*)(BIO *, uint64_t, _QWORD, char **))ctrl)(v6, 3, 0, &__s);
  v19 = __s;
  if (!__s)
    goto LABEL_37;
  v20 = strlen(__s);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_38;
  v21 = v20;
  if (v20 > 0x16)
  {
    v30 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v30 = v20 | 7;
    v31 = v30 + 1;
    v32 = (char *)operator new(v30 + 1);
    *((_QWORD *)a2 + 1) = v21;
    *((_QWORD *)a2 + 2) = v31 | 0x8000000000000000;
    *(_QWORD *)a2 = v32;
    a2 = v32;
    v22 = &v32[v21];
    if (v32 > v19)
      goto LABEL_32;
  }
  else
  {
    a2[23] = v20;
    v22 = &a2[v20];
    if (a2 > v19)
      goto LABEL_32;
  }
  if (v22 > v19)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    abort();
  }
LABEL_32:
  if (v21)
    memmove(a2, v19, v21);
  *v22 = 0;
  BIO_free(v6);
}

void rtc::OpenSSLSessionCache::AddSession(uint64_t a1, void **a2, size_t a3, const void *a4)
{
  const void **v7;
  uint64_t *v8;
  ssl_session_st *v9;
  unsigned int i;
  unsigned int v11;
  uint64_t *p_tlsext_tick_lifetime_hint;
  uint64_t tlsext_tick_lifetime_hint;
  size_t v14;
  void **p_p;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  size_t v20;
  unint64_t v21;
  const void *v22;

  v22 = a4;
  __p = a2;
  v20 = a3;
  v7 = (const void **)(a1 + 16);
  v8 = std::__tree<std::__value_type<std::string,ssl_session_st *>,std::__map_value_compare<std::string,std::__value_type<std::string,ssl_session_st *>,rtc::AbslStringViewCmp,true>,std::allocator<std::__value_type<std::string,ssl_session_st *>>>::find<std::string_view>(a1 + 16, (uint64_t)&__p);
  if ((uint64_t *)(a1 + 24) != v8)
  {
    v9 = (ssl_session_st *)v8[7];
    if (v9)
    {
      for (i = atomic_load((unsigned int *)v9); i != -1; i = v11)
      {
        if (!i)
          goto LABEL_27;
        v11 = __ldaxr((unsigned int *)v9);
        if (v11 == i)
        {
          if (!__stlxr(i - 1, (unsigned int *)v9))
          {
            if (i == 1)
            {
              ssl_session_st::~ssl_session_st(v9);
              tlsext_tick_lifetime_hint = v9[-1].tlsext_tick_lifetime_hint;
              p_tlsext_tick_lifetime_hint = &v9[-1].tlsext_tick_lifetime_hint;
              v14 = tlsext_tick_lifetime_hint + 8;
              if (tlsext_tick_lifetime_hint != -8)
                bzero(p_tlsext_tick_lifetime_hint, v14);
              free(p_tlsext_tick_lifetime_hint);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_27;
  if (a3 <= 0x16)
  {
    HIBYTE(v21) = a3;
    p_p = &__p;
    v16 = (void **)((char *)&__p + a3);
    if (&__p > a2)
      goto LABEL_22;
    goto LABEL_21;
  }
  v17 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a3 | 7) != 0x17)
    v17 = a3 | 7;
  v18 = v17 + 1;
  p_p = (void **)operator new(v17 + 1);
  v20 = a3;
  v21 = v18 | 0x8000000000000000;
  __p = p_p;
  v16 = (void **)((char *)p_p + a3);
  if (p_p <= a2)
  {
LABEL_21:
    if (v16 <= a2)
      goto LABEL_22;
    __break(1u);
LABEL_27:
    abort();
  }
LABEL_22:
  if (a3)
    memmove(p_p, a2, a3);
  *(_BYTE *)v16 = 0;
  std::map<std::string,ssl_session_st *,rtc::AbslStringViewCmp,std::allocator<std::pair<std::string const,ssl_session_st *>>>::insert_or_assign[abi:sn180100]<ssl_session_st *&>(v7, (uint64_t **)&__p, &v22);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

const void **std::map<std::string,ssl_session_st *,rtc::AbslStringViewCmp,std::allocator<std::pair<std::string const,ssl_session_st *>>>::insert_or_assign[abi:sn180100]<ssl_session_st *&>(const void **result, uint64_t **__s2, const void **a3)
{
  uint64_t v4;
  const void **v5;
  const void **v6;
  size_t v7;
  uint64_t *v8;
  size_t v9;
  BOOL v10;
  int v11;
  const void **v12;
  size_t v13;
  size_t v15;
  int v16;
  size_t v17;
  size_t v19;
  int v20;
  size_t v21;
  const void **v22;
  size_t v23;
  const void *v24;
  size_t v25;
  size_t v26;
  int v27;
  size_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  char v32;
  uint64_t *v33;
  size_t v34;
  size_t v35;
  int v36;
  const void *v37;
  const void **v38;
  const void **v39;
  const void **v40;
  size_t v41;
  size_t v42;
  uint64_t *v43;
  size_t v44;
  int v45;
  BOOL v46;
  const void *v47;
  _QWORD *v48;
  _QWORD *v49;
  const void **v50;
  _QWORD *v51;
  size_t v52;
  size_t v53;
  int v54;
  uint64_t *v55;
  const void *v56;
  const void **v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char v61;
  const void **v63;

  v4 = (uint64_t)result;
  v5 = result + 1;
  v6 = (const void **)result[1];
  if (!v6)
    goto LABEL_89;
  v7 = *((unsigned __int8 *)__s2 + 23);
  v8 = *__s2;
  v9 = (size_t)__s2[1];
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 0;
  v11 = !v10;
  if ((*((_BYTE *)__s2 + 23) & 0x80) == 0)
  {
    v12 = result + 1;
    while (1)
    {
      result = v6 + 4;
      if (*((char *)v6 + 55) < 0)
      {
        v13 = (size_t)v6[5];
        if ((v13 & 0x8000000000000000) != 0)
          goto LABEL_148;
        result = (const void **)*result;
        if (v13 && result == 0)
          goto LABEL_148;
      }
      else
      {
        v13 = *((unsigned __int8 *)v6 + 55);
      }
      if (v7 >= v13)
        v15 = v13;
      else
        v15 = v7;
      v16 = memcmp(result, __s2, v15);
      if (v16)
      {
        if (v16 < 0)
          goto LABEL_12;
LABEL_10:
        v12 = v6;
        v6 = (const void **)*v6;
        if (!v6)
          goto LABEL_47;
      }
      else
      {
        if (v13 >= v7)
          goto LABEL_10;
LABEL_12:
        v6 = (const void **)v6[1];
        if (!v6)
          goto LABEL_47;
      }
    }
  }
  if ((v9 & 0x8000000000000000) != 0 || !v11)
    goto LABEL_148;
  v12 = result + 1;
  do
  {
    while (1)
    {
      result = v6 + 4;
      if (*((char *)v6 + 55) < 0)
      {
        v17 = (size_t)v6[5];
        if ((v17 & 0x8000000000000000) != 0)
          goto LABEL_148;
        result = (const void **)*result;
        if (v17 && result == 0)
          goto LABEL_148;
      }
      else
      {
        v17 = *((unsigned __int8 *)v6 + 55);
      }
      v19 = v9 >= v17 ? v17 : v9;
      v20 = memcmp(result, v8, v19);
      if (v20)
        break;
      if (v17 >= v9)
        goto LABEL_46;
LABEL_31:
      v6 = (const void **)v6[1];
      if (!v6)
        goto LABEL_47;
    }
    if (v20 < 0)
      goto LABEL_31;
LABEL_46:
    v12 = v6;
    v6 = (const void **)*v6;
  }
  while (v6);
LABEL_47:
  if (v5 == v12)
    goto LABEL_89;
  v61 = v11;
  result = (const void **)__s2;
  v21 = v7;
  if ((v7 & 0x80) != 0)
  {
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_148;
    result = (const void **)v8;
    v21 = v9;
    if ((v61 & 1) == 0)
      goto LABEL_148;
  }
  v60 = v4;
  v22 = v12 + 4;
  v23 = *((unsigned __int8 *)v12 + 55);
  v24 = v12 + 4;
  v25 = v23;
  if (*((char *)v12 + 55) < 0)
  {
    v25 = (size_t)v12[5];
    if ((v25 & 0x8000000000000000) != 0)
      goto LABEL_148;
    v24 = *v22;
    if (v25)
    {
      if (!v24)
        goto LABEL_148;
    }
  }
  if (v25 >= v21)
    v26 = v21;
  else
    v26 = v25;
  v27 = memcmp(result, v24, v26);
  if (!v27)
  {
    if (v21 < v25)
      goto LABEL_62;
LABEL_60:
    v12[7] = *a3;
    return v12;
  }
  if ((v27 & 0x80000000) == 0)
    goto LABEL_60;
LABEL_62:
  result = (const void **)__s2;
  v28 = v7;
  if ((v7 & 0x80) != 0)
  {
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_148;
    result = (const void **)v8;
    v28 = v9;
    if ((v61 & 1) == 0)
      goto LABEL_148;
  }
  v29 = v12 + 4;
  v30 = v23;
  if ((v23 & 0x80) != 0)
  {
    v30 = (size_t)v12[5];
    if ((v30 & 0x8000000000000000) != 0)
      goto LABEL_148;
    v29 = *v22;
    if (v30)
    {
      if (!v29)
        goto LABEL_148;
    }
  }
  if (v30 >= v28)
    v31 = v28;
  else
    v31 = v30;
  result = (const void **)memcmp(result, v29, v31);
  if (!(_DWORD)result)
  {
    v32 = v61;
    if (v28 < v30)
      goto LABEL_88;
LABEL_74:
    if ((v23 & 0x80) != 0)
    {
      v23 = (size_t)v12[5];
      if ((v23 & 0x8000000000000000) != 0)
        goto LABEL_148;
      v22 = (const void **)*v22;
      if (v23)
      {
        if (!v22)
          goto LABEL_148;
      }
    }
    v33 = (uint64_t *)__s2;
    v34 = v7;
    if ((v7 & 0x80) != 0)
    {
      if ((v9 & 0x8000000000000000) != 0)
        goto LABEL_148;
      v33 = v8;
      v34 = v9;
      if ((v32 & 1) == 0)
        goto LABEL_148;
    }
    if (v34 >= v23)
      v35 = v23;
    else
      v35 = v34;
    v36 = memcmp(v22, v33, v35);
    if (v36)
    {
      v4 = v60;
      if ((v36 & 0x80000000) == 0)
        return v12;
    }
    else
    {
      v46 = v23 >= v34;
      v4 = v60;
      if (v46)
        return v12;
    }
    v47 = v12[1];
    if (v47)
    {
      v48 = v12[1];
      do
      {
        v49 = v48;
        v48 = (_QWORD *)*v48;
      }
      while (v48);
    }
    else
    {
      v50 = v12;
      do
      {
        v49 = v50[2];
        v10 = *v49 == (_QWORD)v50;
        v50 = (const void **)v49;
      }
      while (!v10);
    }
    if (v49 != v5)
    {
      result = (const void **)__s2;
      if ((v7 & 0x80) != 0)
      {
        if ((v9 & 0x8000000000000000) != 0)
          goto LABEL_148;
        result = (const void **)v8;
        v7 = v9;
        if ((v61 & 1) == 0)
          goto LABEL_148;
      }
      v51 = v49 + 4;
      if (*((char *)v49 + 55) < 0)
      {
        v52 = v49[5];
        if ((v52 & 0x8000000000000000) != 0)
          goto LABEL_148;
        v51 = (_QWORD *)*v51;
        if (v52)
        {
          if (!v51)
            goto LABEL_148;
        }
      }
      else
      {
        v52 = *((unsigned __int8 *)v49 + 55);
      }
      if (v52 >= v7)
        v53 = v7;
      else
        v53 = v52;
      v54 = memcmp(result, v51, v53);
      if (v54)
      {
        if ((v54 & 0x80000000) == 0)
          goto LABEL_138;
      }
      else if (v7 >= v52)
      {
        goto LABEL_138;
      }
    }
    if (v47)
    {
      v63 = (const void **)v49;
      v5 = (const void **)v49;
    }
    else
    {
      v63 = v12;
      v5 = v12 + 1;
    }
    goto LABEL_139;
  }
  v32 = v61;
  if ((result & 0x80000000) == 0)
    goto LABEL_74;
LABEL_88:
  v5 = v12;
  v4 = v60;
LABEL_89:
  v37 = *v5;
  v38 = v5;
  if (*(const void ***)v4 == v5)
  {
LABEL_113:
    if (v37)
    {
      v63 = v38;
      v5 = v38 + 1;
    }
    else
    {
      v63 = v5;
    }
    goto LABEL_139;
  }
  if (v37)
  {
    v39 = (const void **)*v5;
    do
    {
      v38 = v39;
      v39 = (const void **)v39[1];
    }
    while (v39);
  }
  else
  {
    v40 = v5;
    do
    {
      v38 = (const void **)v40[2];
      v10 = *v38 == v40;
      v40 = v38;
    }
    while (v10);
  }
  result = v38 + 4;
  if ((*((char *)v38 + 55) & 0x80000000) == 0)
  {
    v41 = *((unsigned __int8 *)v38 + 55);
    goto LABEL_101;
  }
  v41 = (size_t)v38[5];
  if ((v41 & 0x8000000000000000) != 0 || (result = (const void **)*result, v41) && !result)
  {
LABEL_148:
    __break(1u);
    return result;
  }
LABEL_101:
  if (*((char *)__s2 + 23) < 0)
  {
    v42 = (size_t)__s2[1];
    if ((v42 & 0x8000000000000000) == 0)
    {
      v43 = *__s2;
      if (!v42 || v43)
        goto LABEL_106;
    }
    goto LABEL_148;
  }
  v42 = *((unsigned __int8 *)__s2 + 23);
  v43 = (uint64_t *)__s2;
LABEL_106:
  if (v42 >= v41)
    v44 = v41;
  else
    v44 = v42;
  v45 = memcmp(result, v43, v44);
  if (!v45)
  {
    if (v41 >= v42)
      goto LABEL_138;
    goto LABEL_113;
  }
  if (v45 < 0)
    goto LABEL_113;
LABEL_138:
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v4, &v63, (const void **)__s2);
LABEL_139:
  v12 = (const void **)*v5;
  if (!*v5)
  {
    v12 = (const void **)operator new(0x40uLL);
    *((_OWORD *)v12 + 2) = *(_OWORD *)__s2;
    v55 = __s2[2];
    *__s2 = 0;
    __s2[1] = 0;
    __s2[2] = 0;
    v56 = *a3;
    v12[6] = v55;
    v12[7] = v56;
    v57 = v63;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v57;
    *v5 = v12;
    v58 = **(_QWORD **)v4;
    v59 = (uint64_t *)v12;
    if (v58)
    {
      *(_QWORD *)v4 = v58;
      v59 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 8), v59);
    ++*(_QWORD *)(v4 + 16);
  }
  return v12;
}

uint64_t *std::__tree<std::__value_type<std::string,ssl_session_st *>,std::__map_value_compare<std::string,std::__value_type<std::string,ssl_session_st *>,rtc::AbslStringViewCmp,true>,std::allocator<std::__value_type<std::string,ssl_session_st *>>>::find<std::string_view>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  const void *v4;
  size_t v5;
  uint64_t *v6;
  uint64_t *result;
  size_t v8;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  size_t v13;
  int v14;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      result = v3 + 4;
      if (*((char *)v3 + 55) < 0)
      {
        v8 = v3[5];
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_35;
        result = (uint64_t *)*result;
        if (v8 && result == 0)
          goto LABEL_35;
      }
      else
      {
        v8 = *((unsigned __int8 *)v3 + 55);
      }
      v10 = v5 >= v8 ? v8 : v5;
      result = (uint64_t *)memcmp(result, v4, v10);
      if ((_DWORD)result)
        break;
      if (v8 < v5)
        goto LABEL_5;
LABEL_3:
      v6 = v3;
      v3 = (uint64_t *)*v3;
      if (!v3)
        goto LABEL_21;
    }
    if ((result & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    v3 = (uint64_t *)v3[1];
  }
  while (v3);
LABEL_21:
  if (v6 == v2)
    return v2;
  v11 = v6 + 4;
  if (*((char *)v6 + 55) < 0)
  {
    v12 = v6[5];
    if ((v12 & 0x8000000000000000) == 0)
    {
      v11 = (_QWORD *)*v11;
      if (!v12 || v11)
        goto LABEL_27;
    }
LABEL_35:
    __break(1u);
  }
  else
  {
    v12 = *((unsigned __int8 *)v6 + 55);
LABEL_27:
    if (v12 >= v5)
      v13 = v5;
    else
      v13 = v12;
    v14 = memcmp(v4, v11, v13);
    if (v14)
    {
      if (v14 < 0)
        return v2;
      return v6;
    }
    if (v5 >= v12)
      return v6;
    return v2;
  }
  return result;
}

uint64_t rtc::OpenSSLStreamAdapter::OpenSSLStreamAdapter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  rtc::Thread *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  void *v11;
  size_t *v12;
  size_t *v13;
  size_t *v14;
  _DWORD *v15;
  size_t *v16;
  BOOL v19;
  uint64_t v20;
  size_t v22[2];
  unsigned __int8 v23;

  *(_QWORD *)(a1 + 16) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 24) = a1 + 24;
  *(_QWORD *)(a1 + 32) = a1 + 24;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 24;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 80) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 120) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *(_QWORD *)(a1 + 128) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)a1 = &off_24C0B7F40;
  *(_QWORD *)(a1 + 8) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 104) = &unk_24C0B8010;
  *(_QWORD *)(a1 + 112) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 160) = v5;
  v6 = (rtc::Thread *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a3 + 16))(0, a3, a1 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a1 + 200) = rtc::Thread::Current(v6);
  v7 = operator new();
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_QWORD *)(a1 + 208) = v7;
  do
    v8 = __ldxr((unsigned int *)v7);
  while (__stxr(v8 + 1, (unsigned int *)v7));
  *(_WORD *)(a1 + 236) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-PermuteTlsClientHello", 0x1CuLL, v22);
  v9 = v23;
  v10 = (char)v23;
  v11 = (void *)v22[0];
  if ((v23 & 0x80u) == 0)
  {
    v12 = v22;
  }
  else
  {
    v9 = v22[1];
    v12 = (size_t *)v22[0];
  }
  v13 = (size_t *)((char *)v12 + v9);
  if (v9 >= 7)
  {
    v14 = v12;
    do
    {
      v15 = memchr(v14, 69, v9 - 6);
      if (!v15)
        break;
      v16 = (size_t *)v15;
      if (*v15 == 1650552389 && *(_DWORD *)((char *)v15 + 3) == 1684368482)
        goto LABEL_15;
      v14 = (size_t *)((char *)v15 + 1);
      v9 = (char *)v13 - ((char *)v16 + 1);
    }
    while (v9 > 6);
  }
  v16 = v13;
LABEL_15:
  if (v10 < 0)
    operator delete(v11);
  v19 = v16 != v13 && v16 == v12;
  *(_BYTE *)(a1 + 264) = v19;
  *(_QWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_QWORD *)(a1 + 364) = 0x3200000002;
  v20 = *(_QWORD *)(a1 + 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 80))(1, v20 + 64, v20 + 64);
  *(_QWORD *)(v20 + 64) = a1;
  *(_QWORD *)(v20 + 80) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v20 + 88) = absl::internal_any_invocable::LocalInvoker<false,void,rtc::OpenSSLStreamAdapter::OpenSSLStreamAdapter(std::unique_ptr<rtc::StreamInterface>,absl::AnyInvocable<void ()(rtc::SSLHandshakeError)>)::$_0 &,int,int>;
  return a1;
}

void rtc::OpenSSLStreamAdapter::~OpenSSLStreamAdapter(rtc::OpenSSLStreamAdapter *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  rtc::BoringSSLIdentity *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t i;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *((_QWORD *)this + 27);
  if (v2)
  {
    *(_BYTE *)(v2 + 4) = 0;
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 27) = 0;
  }
  rtc::OpenSSLStreamAdapter::Cleanup(this, 0);
  if (*((char *)this + 359) < 0)
  {
    operator delete(*((void **)this + 42));
    if ((*((char *)this + 335) & 0x80000000) == 0)
    {
LABEL_9:
      v5 = *((_QWORD *)this + 38);
      *((_QWORD *)this + 38) = 0;
      if (!v5)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else if ((*((char *)this + 335) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*((void **)this + 39));
  v5 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v5)
LABEL_10:
    MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
LABEL_11:
  v6 = (_QWORD *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v6)
  {
    v7 = (_QWORD *)*v6;
    if (*v6)
    {
      v8 = (_QWORD *)v6[1];
      v9 = (_QWORD *)*v6;
      if (v8 != v7)
      {
        do
        {
          v11 = *--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        while (v8 != v7);
        v9 = (_QWORD *)*v6;
      }
      v6[1] = v7;
      operator delete(v9);
    }
    MEMORY[0x20BD0ADEC](v6, 0x20C40960023A9);
  }
  v12 = (rtc::BoringSSLIdentity *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v12)
  {
    rtc::BoringSSLIdentity::~BoringSSLIdentity(v12);
    MEMORY[0x20BD0ADEC]();
  }
  v13 = (unsigned int *)*((_QWORD *)this + 27);
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      MEMORY[0x20BD0ADEC]();
  }
  v16 = *((_QWORD *)this + 26);
  *(_BYTE *)(v16 + 4) = 0;
  do
  {
    v17 = __ldaxr((unsigned int *)v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)v16));
  if (!v18)
    MEMORY[0x20BD0ADEC]();
  (*((void (**)(uint64_t, char *, char *))this + 23))(1, (char *)this + 168, (char *)this + 168);
  v19 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  *((_QWORD *)this + 13) = &unk_24C0ACE30;
  (*((void (**)(char *))this + 16))((char *)this + 104);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 136, *((_QWORD **)this + 18));
  *(_QWORD *)this = &unk_24C0C13F8;
  (*((void (**)(uint64_t, char *, char *))this + 10))(1, (char *)this + 64, (char *)this + 64);
  for (i = *((_QWORD *)this + 5); i; i = *((_QWORD *)this + 5))
  {
    v21 = (uint64_t *)*((_QWORD *)this + 4);
    v22 = v21[3];
    v23 = *v21;
    *(_QWORD *)(v23 + 8) = v21[1];
    *(_QWORD *)v21[1] = v23;
    *((_QWORD *)this + 5) = i - 1;
    operator delete(v21);
    (*(void (**)(uint64_t, char *))(v22 + 16))(v22, (char *)this + 8);
  }
  *((_QWORD *)this + 6) = (char *)this + 24;
}

{
  rtc::OpenSSLStreamAdapter::~OpenSSLStreamAdapter(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::OpenSSLStreamAdapter::Cleanup(rtc::OpenSSLStreamAdapter *this, int a2)
{
  SSL *v3;
  int (__cdecl *handshake_func)(SSL *);
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  size_t v16;
  unsigned int *v17;
  unsigned int i;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;
  size_t v22;
  rtc::BoringSSLIdentity *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  unsigned int v31;
  unsigned int v32;

  if (*((_DWORD *)this + 56) != 4)
  {
    *((_DWORD *)this + 56) = 5;
    *((_DWORD *)this + 58) = 0;
  }
  v3 = (SSL *)*((_QWORD *)this + 30);
  if (v3)
  {
    if (!a2)
    {
      if ((SSL_shutdown(v3) & 0x80000000) == 0 || (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_18;
      goto LABEL_17;
    }
    handshake_func = v3->handshake_func;
    v5 = *((_WORD *)handshake_func + 110);
    if ((v5 & 0x800) != 0)
    {
      if (*((_BYTE *)handshake_func + 461) == 2 && *((unsigned __int8 *)handshake_func + 462) == a2)
        goto LABEL_15;
      ERR_put_error(16, 0, 194, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/ssl_lib.cc", 1213);
    }
    else
    {
      if (*((_DWORD *)handshake_func + 44))
      {
        ERR_put_error(16, 0, 194, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/s3_pkt.cc", 412);
        goto LABEL_16;
      }
      *((_DWORD *)handshake_func + 44) = 2;
      *((_WORD *)handshake_func + 110) = v5 | 0x800;
      *((_BYTE *)v3->handshake_func + 461) = 2;
      *((_BYTE *)v3->handshake_func + 462) = a2;
      if (!*((_WORD *)v3->handshake_func + 57))
      {
LABEL_15:
        if (((*(uint64_t (**)(SSL *))(*(_QWORD *)&v3->version + 80))(v3) & 0x80000000) == 0)
          goto LABEL_18;
      }
    }
LABEL_16:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
LABEL_17:
      ERR_peek_error();
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_stream_adapter.cc");
    }
LABEL_18:
    v13 = *((_QWORD *)this + 30);
    if (v13)
    {
      ssl_st::~ssl_st(*((ssl_st **)this + 30));
      v15 = *(_QWORD *)(v13 - 8);
      v14 = (void *)(v13 - 8);
      v16 = v15 + 8;
      if (v15 != -8)
        bzero(v14, v16);
      free(v14);
    }
    *((_QWORD *)this + 30) = 0;
  }
  v17 = (unsigned int *)*((_QWORD *)this + 31);
  if (v17)
  {
    for (i = atomic_load(v17); i != -1; i = v19)
    {
      if (!i)
        abort();
      v19 = __ldaxr(v17);
      if (v19 == i)
      {
        if (!__stlxr(i - 1, v17))
        {
          if (i == 1)
          {
            ssl_ctx_st::~ssl_ctx_st((ssl_ctx_st *)v17);
            v21 = *((_QWORD *)v17 - 1);
            v20 = v17 - 2;
            v22 = v21 + 8;
            if (v21 != -8)
              bzero(v20, v22);
            free(v20);
          }
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
    *((_QWORD *)this + 31) = 0;
  }
  v23 = (rtc::BoringSSLIdentity *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v23)
  {
    rtc::BoringSSLIdentity::~BoringSSLIdentity(v23);
    MEMORY[0x20BD0ADEC]();
  }
  v24 = (_QWORD *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v24)
  {
    v25 = (_QWORD *)*v24;
    if (*v24)
    {
      v26 = (_QWORD *)v24[1];
      v27 = (_QWORD *)*v24;
      if (v26 != v25)
      {
        do
        {
          v29 = *--v26;
          v28 = v29;
          *v26 = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
        while (v26 != v25);
        v27 = (_QWORD *)*v24;
      }
      v24[1] = v25;
      operator delete(v27);
    }
    MEMORY[0x20BD0ADEC](v24, 0x20C40960023A9);
  }
  result = *((_QWORD *)this + 27);
  if (result)
  {
    *(_BYTE *)(result + 4) = 0;
    do
    {
      v31 = __ldaxr((unsigned int *)result);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)result));
    if (!v32)
      result = MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 27) = 0;
  }
  return result;
}

void `non-virtual thunk to'rtc::OpenSSLStreamAdapter::~OpenSSLStreamAdapter(rtc::OpenSSLStreamAdapter *this)
{
  rtc::OpenSSLStreamAdapter::~OpenSSLStreamAdapter((rtc::OpenSSLStreamAdapter *)((char *)this - 104));
}

{
  rtc::OpenSSLStreamAdapter::~OpenSSLStreamAdapter((rtc::OpenSSLStreamAdapter *)((char *)this - 104));
  JUMPOUT(0x20BD0ADECLL);
}

rtc::BoringSSLIdentity *rtc::OpenSSLStreamAdapter::SetIdentity(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  rtc::BoringSSLIdentity *result;

  v3 = *a2;
  *a2 = 0;
  result = *(rtc::BoringSSLIdentity **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v3;
  if (result)
  {
    rtc::BoringSSLIdentity::~BoringSSLIdentity(result);
    JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

uint64_t rtc::OpenSSLStreamAdapter::GetIdentityForTesting(rtc::OpenSSLStreamAdapter *this)
{
  return *((_QWORD *)this + 32);
}

uint64_t rtc::OpenSSLStreamAdapter::SetServerRole(uint64_t result, int a2)
{
  *(_DWORD *)(result + 228) = a2;
  return result;
}

uint64_t rtc::OpenSSLStreamAdapter::SetPeerCertificateDigest(uint64_t a1, unsigned __int16 *a2, size_t a3, const void *a4, size_t a5, int *a6)
{
  size_t v12;
  size_t v13;
  size_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v45;
  char v46;
  __int128 v47;
  void (*v48)(uint64_t, __int128 *, __int128 *);
  uint64_t (*v49)(uint64_t);

  if (a6)
    *a6 = 0;
  *(_QWORD *)&v47 = 0;
  if ((rtc::OpenSSLDigest::GetDigestEVP(a2, a3, (const EVP_MD **)&v47) & 1) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_stream_adapter.cc");
    v25 = 0;
    if (!a6)
      return v25;
    v26 = 1;
LABEL_46:
    *a6 = v26;
    return v25;
  }
  if (*(_DWORD *)(v47 + 4) != a5)
  {
    v25 = 0;
    if (!a6)
      return v25;
    v26 = 2;
    goto LABEL_46;
  }
  *(_QWORD *)(a1 + 288) = 0;
  if (a5)
  {
    v12 = *(_QWORD *)(a1 + 296);
    if (v12 >= a5)
    {
      v27 = 0;
    }
    else
    {
      v13 = v12 + (v12 >> 1);
      if (v13 <= a5)
        v14 = a5;
      else
        v14 = v13;
      v15 = (void *)operator new[]();
      v16 = v15;
      v17 = *(_QWORD *)(a1 + 304);
      if (v17)
      {
        memcpy(v15, *(const void **)(a1 + 304), *(_QWORD *)(a1 + 288));
        *(_QWORD *)(a1 + 304) = v16;
        MEMORY[0x20BD0ADD4](v17, 0x1000C8077774924);
      }
      else
      {
        *(_QWORD *)(a1 + 304) = v15;
      }
      *(_QWORD *)(a1 + 296) = v14;
      v27 = *(_QWORD *)(a1 + 288);
    }
    memcpy((void *)(*(_QWORD *)(a1 + 304) + v27), a4, a5);
    *(_QWORD *)(a1 + 288) = a5;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_49;
  if (a3 <= 0x16)
  {
    HIBYTE(v48) = a3;
    v28 = (unsigned __int16 *)&v47;
    v29 = (unsigned __int16 *)((char *)&v47 + a3);
    if (&v47 > (__int128 *)a2)
      goto LABEL_30;
    goto LABEL_29;
  }
  v30 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a3 | 7) != 0x17)
    v30 = a3 | 7;
  v31 = v30 + 1;
  v28 = (unsigned __int16 *)operator new(v30 + 1);
  *((_QWORD *)&v47 + 1) = a3;
  v48 = (void (*)(uint64_t, __int128 *, __int128 *))(v31 | 0x8000000000000000);
  *(_QWORD *)&v47 = v28;
  v29 = (unsigned __int16 *)((char *)v28 + a3);
  if (v28 <= a2)
  {
LABEL_29:
    if (v29 <= a2)
      goto LABEL_30;
    __break(1u);
LABEL_49:
    abort();
  }
LABEL_30:
  if (a3)
    memmove(v28, a2, a3);
  *(_BYTE *)v29 = 0;
  v32 = (void **)(a1 + 312);
  if (*(char *)(a1 + 335) < 0)
  {
    operator delete(*v32);
    *(_OWORD *)v32 = v47;
    *(_QWORD *)(a1 + 328) = v48;
    if (!*(_QWORD *)(a1 + 272))
      return 1;
  }
  else
  {
    *(_OWORD *)v32 = v47;
    *(_QWORD *)(a1 + 328) = v48;
    if (!*(_QWORD *)(a1 + 272))
      return 1;
  }
  if ((rtc::OpenSSLStreamAdapter::VerifyPeerCertificate((rtc::OpenSSLStreamAdapter *)a1) & 1) != 0)
  {
    if (*(_DWORD *)(a1 + 224) == 3)
    {
      v33 = *(_QWORD *)(a1 + 200);
      v34 = *(unsigned int **)(a1 + 208);
      if (v34)
      {
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v36 = (_QWORD *)operator new();
      *v36 = v34;
      v36[1] = a1;
      v36[2] = 7;
      v36[3] = absl::internal_any_invocable::LocalManagerTrivial;
      v36[4] = absl::internal_any_invocable::LocalInvoker<false,void,rtc::OpenSSLStreamAdapter::PostEvent(int,int)::$_0 &&>;
      *(_QWORD *)&v47 = v36;
      v48 = (void (*)(uint64_t, __int128 *, __int128 *))_ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
      v49 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
      (*(void (**)(uint64_t, __int128 *, char *, char *))(*(_QWORD *)v33 + 8))(v33, &v47, &v46, &v45);
      v25 = 1;
      v48(1, &v47, &v47);
      return v25;
    }
    return 1;
  }
  *(_QWORD *)&v47 = "SetPeerCertificateDigest";
  *((_QWORD *)&v47 + 1) = 24;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v37, v38, v39, v40, v41, v42, v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_stream_adapter.cc");
  *(_DWORD *)(a1 + 224) = 4;
  *(_DWORD *)(a1 + 232) = -1;
  rtc::OpenSSLStreamAdapter::Cleanup((rtc::OpenSSLStreamAdapter *)a1, 42);
  v25 = 0;
  if (a6)
  {
    v26 = 3;
    goto LABEL_46;
  }
  return v25;
}

uint64_t rtc::OpenSSLStreamAdapter::VerifyPeerCertificate(rtc::OpenSSLStreamAdapter *this)
{
  char v2;
  _QWORD **v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p;
  char v27;
  void *v28;
  char v29;
  char v30;
  _QWORD v31[4];
  uint64_t *v32;
  size_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *((_BYTE *)this + 335);
  if (v2 < 0)
  {
    if (!*((_QWORD *)this + 40))
      goto LABEL_10;
  }
  else if (!*((_BYTE *)this + 335))
  {
    goto LABEL_10;
  }
  if (*((_QWORD *)this + 36))
  {
    v3 = (_QWORD **)*((_QWORD *)this + 34);
    if (v3)
    {
      v4 = *v3;
      if (*(_QWORD **)(*((_QWORD *)this + 34) + 8) != v4)
      {
        v33 = 0;
        if (v2 < 0)
        {
          v15 = *((_QWORD *)this + 40);
          if (v15 < 0)
            goto LABEL_33;
          v5 = (char *)*((_QWORD *)this + 39);
          if (v15)
          {
            if (!v5)
              goto LABEL_33;
          }
        }
        else
        {
          v5 = (char *)this + 312;
        }
        if (((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*v4 + 48))(*v4, v5) & 1) == 0)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
            return 0;
          goto LABEL_11;
        }
        v16 = v33;
        if (!*((_QWORD *)this + 36) && !memcmp(0, *((const void **)this + 38), v33))
        {
          v13 = 1;
          *((_BYTE *)this + 280) = 1;
          return v13;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          return 0;
        v31[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/open"
                 "ssl_stream_adapter.cc";
        v31[1] = 8818;
        v31[2] = &v30;
        v31[3] = "Rejected peer certificate due to mismatched digest using ";
        v32 = v31;
        v17 = *((_QWORD *)this + 36);
        if ((v17 & 0x8000000000000000) == 0)
        {
          v18 = (unsigned __int8 *)*((_QWORD *)this + 38);
          if (v18 || !v17)
          {
            rtc::hex_encode_with_delimiter(v18, v17, 58, &v28);
            rtc::hex_encode_with_delimiter(0, v16, 58, &__p);
            rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t\n", v19, v20, v21, v22, v23, v24, v25, *v32);
            if (v27 < 0)
              operator delete(__p);
            if (v29 < 0)
              operator delete(v28);
            return 0;
          }
        }
LABEL_33:
        __break(1u);
      }
    }
  }
LABEL_10:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_11:
    rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_stream_adapter.cc");
  return 0;
}

uint64_t rtc::OpenSSLStreamAdapter::Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_stream_adapter.cc");
  *(_DWORD *)(a1 + 224) = 4;
  *(_DWORD *)(a1 + 232) = a4;
  result = rtc::OpenSSLStreamAdapter::Cleanup((rtc::OpenSSLStreamAdapter *)a1, a5);
  if (a6)
  {
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 88);
    if (v18)
      v18(a1 + 64, 8, a4);
    result = *(_QWORD *)(a1 + 32);
    for (*(_QWORD *)(a1 + 48) = result; result != a1 + 24; result = *(_QWORD *)(a1 + 48))
    {
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(result + 16);
      v19 = result + 16;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(v19 - 8);
      v20(v19, a1, 8, a4);
    }
  }
  return result;
}

unint64_t rtc::OpenSSLStreamAdapter::SslCipherSuiteToName@<X0>(rtc::OpenSSLStreamAdapter *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t result;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE __key[16];
  int v11;

  v11 = (unsigned __int16)this | 0x3000000;
  result = (unint64_t)bsearch(__key, bssl::kCiphers, 0x18uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))ssl_cipher_id_cmp_void);
  if (!result)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  v4 = *(_QWORD **)(result + 8);
  if (!v4)
    goto LABEL_17;
  result = strlen(*(const char **)(result + 8));
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_18;
  v5 = result;
  if (result > 0x16)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    result = (unint64_t)operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = result;
    a2 = (_QWORD *)result;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
  }
  v8 = (char *)a2 + v5;
  if (a2 <= v4 && v8 > (_BYTE *)v4)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    abort();
  }
  if (v5)
    result = (unint64_t)memmove(a2, v4, v5);
  *v8 = 0;
  return result;
}

uint64_t rtc::OpenSSLStreamAdapter::GetSslCipherSuite(rtc::OpenSSLStreamAdapter *this, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (*((_DWORD *)this + 56) != 3)
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 30) + 48);
  v3 = *(_QWORD *)(v2 + 464);
  if (!v3)
  {
    v4 = *(_QWORD **)(v2 + 280);
    v3 = v4[189];
    if (!v3)
    {
      v3 = v4[188];
      if (!v3)
      {
        v3 = *(_QWORD *)(*v4 + 88);
        if (!v3)
          return 0;
      }
    }
  }
  v5 = *(_QWORD *)(v3 + 200);
  if (!v5)
    return 0;
  *a2 = *(unsigned __int16 *)(v5 + 16);
  return 1;
}

uint64_t rtc::OpenSSLStreamAdapter::GetSslVersion(rtc::OpenSSLStreamAdapter *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v6;

  if (*((_DWORD *)this + 56) != 3)
    return 0xFFFFFFFFLL;
  v1 = *((_QWORD *)this + 30);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 280);
  if (v2 && (*(_BYTE *)(v2 + 1569) & 4) != 0 && (*(_BYTE *)(v1 + 164) & 1) == 0)
  {
    v3 = *(unsigned __int16 *)(*(_QWORD *)(v2 + 1512) + 4);
    if (*((_DWORD *)this + 90) != 1)
      goto LABEL_6;
  }
  else
  {
    v3 = *(unsigned __int16 *)(v1 + 16);
    if (*((_DWORD *)this + 90) != 1)
    {
LABEL_6:
      v4 = v3 - 769;
      if (v4 >= 3)
        return 0xFFFFFFFFLL;
      else
        return (unsigned __int16)v4;
    }
  }
  if (v3 == 65277)
    v6 = 2;
  else
    v6 = -1;
  if (v3 == 65279)
    return 1;
  else
    return v6;
}

BOOL rtc::OpenSSLStreamAdapter::GetSslVersionBytes(rtc::OpenSSLStreamAdapter *this, int *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;

  v2 = *((_DWORD *)this + 56);
  if (v2 == 3)
  {
    v3 = *((_QWORD *)this + 30);
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 280);
    if (v4 && (*(_BYTE *)(v4 + 1569) & 4) != 0 && (*(_BYTE *)(v3 + 164) & 1) == 0)
      v5 = (unsigned __int16 *)(*(_QWORD *)(v4 + 1512) + 4);
    else
      v5 = (unsigned __int16 *)(v3 + 16);
    *a2 = *v5;
  }
  return v2 == 3;
}

BOOL rtc::OpenSSLStreamAdapter::ExportKeyingMaterial(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5, uint64_t a6, int8x16_t *a7, const ssl_cipher_st *a8)
{
  return SSL_export_keying_material(*(_QWORD *)(a1 + 240), a7, a8, a2, a3, a4, a5, a6) == 1;
}

uint64_t rtc::OpenSSLStreamAdapter::GetPeerSignatureAlgorithm(rtc::OpenSSLStreamAdapter *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (*((_DWORD *)this + 56) == 3
    && ((v1 = *(_QWORD *)(*((_QWORD *)this + 30) + 48), (v2 = *(_QWORD *)(v1 + 464)) != 0)
     || (v3 = *(_QWORD **)(v1 + 280), (v2 = v3[189]) != 0)
     || (v2 = v3[188]) != 0
     || (v2 = *(_QWORD *)(*v3 + 88)) != 0))
  {
    return *(unsigned __int16 *)(v2 + 8);
  }
  else
  {
    return 0;
  }
}

void rtc::OpenSSLStreamAdapter::SetDtlsSrtpCryptoSuites(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;
  unsigned int v5;
  const char **v6;
  std::string::size_type v7;
  std::string::size_type size;
  const char *v9;
  std::string *v10;
  std::string::size_type v12;
  size_t v13;
  size_t v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  size_t v28;
  std::string *v29;
  std::string v30;

  if (*(_DWORD *)(a1 + 224))
    return;
  memset(&v30, 0, sizeof(v30));
  v3 = *(_DWORD **)a2;
  v4 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 == v4)
  {
LABEL_58:
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_65;
    return;
  }
  while (1)
  {
    v5 = *v3 - 1;
    if (v5 > 7 || ((0xC3u >> v5) & 1) == 0)
      break;
    v6 = (const char **)(&off_24C0B8060)[v5];
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v30.__r_.__value_.__l.__size_;
      if (!v30.__r_.__value_.__l.__size_)
        goto LABEL_24;
      v7 = (v30.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v7 != v30.__r_.__value_.__l.__size_)
      {
LABEL_16:
        v10 = &v30;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v10 = (std::string *)v30.__r_.__value_.__r.__words[0];
        if ((char *)v10 + size <= ":" && (char *)&v10->__r_.__value_.__l.__data_ + size + 1 > ":")
        {
LABEL_68:
          __break(1u);
          return;
        }
        v10->__r_.__value_.__s.__data_[size] = 58;
        v12 = size + 1;
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        {
          v30.__r_.__value_.__l.__size_ = v12;
          v10->__r_.__value_.__s.__data_[v12] = 0;
          v9 = *v6;
          if (!v9)
            goto LABEL_68;
          goto LABEL_25;
        }
        *((_BYTE *)&v30.__r_.__value_.__s + 23) = v12 & 0x7F;
        v10->__r_.__value_.__s.__data_[v12] = 0;
LABEL_24:
        v9 = *v6;
        if (!v9)
          goto LABEL_68;
        goto LABEL_25;
      }
    }
    else
    {
      if (!*((_BYTE *)&v30.__r_.__value_.__s + 23))
        goto LABEL_24;
      v7 = 22;
      size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      if (HIBYTE(v30.__r_.__value_.__r.__words[2]) != 22)
        goto LABEL_16;
    }
    std::string::__grow_by_and_replace(&v30, v7, 1uLL, v7, v7, 0, 1uLL, ":");
    v9 = *v6;
    if (!v9)
      goto LABEL_68;
LABEL_25:
    v13 = strlen(v9);
    v14 = v13;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = 22;
    else
      v15 = (v30.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    else
      v16 = v30.__r_.__value_.__l.__size_;
    if (v15 - v16 < v13)
    {
      std::string::__grow_by_and_replace(&v30, v15, v16 + v13 - v15, v16, v16, 0, v13, v9);
    }
    else if (v13)
    {
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v30;
      else
        v17 = (std::string *)v30.__r_.__value_.__r.__words[0];
      if ((char *)v17 + v16 <= v9 && (char *)v17 + v16 + v13 > v9)
        goto LABEL_68;
      memmove((char *)v17 + v16, v9, v13);
      v19 = v16 + v14;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        v30.__r_.__value_.__l.__size_ = v16 + v14;
      else
        *((_BYTE *)&v30.__r_.__value_.__s + 23) = v19 & 0x7F;
      v17->__r_.__value_.__s.__data_[v19] = 0;
    }
    if (++v3 == v4)
    {
      v28 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v28 = v30.__r_.__value_.__l.__size_;
      if (!v28)
        goto LABEL_58;
      v27 = (std::string *)(a1 + 336);
      if ((std::string *)(a1 + 336) != &v30)
      {
        if ((*(char *)(a1 + 359) & 0x80000000) == 0)
        {
          if ((*((_BYTE *)&v30.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v27, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
            if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return;
          }
          else
          {
            *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
            *(_QWORD *)(a1 + 352) = *((_QWORD *)&v30.__r_.__value_.__l + 2);
            if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return;
          }
          goto LABEL_65;
        }
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = &v30;
        else
          v29 = (std::string *)v30.__r_.__value_.__r.__words[0];
        std::string::__assign_no_alias<false>(v27, (const std::string::value_type *)v29, v28);
      }
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_65;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    goto LABEL_58;
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_stream_adapter.cc");
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_65:
  operator delete(v30.__r_.__value_.__l.__data_);
}

uint64_t rtc::OpenSSLStreamAdapter::GetDtlsSrtpCryptoSuite(rtc::OpenSSLStreamAdapter *this, int *a2)
{
  uint64_t v2;

  if (*((_DWORD *)this + 56) != 3)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 30) + 48) + 592);
  if (!v2)
    return 0;
  *a2 = *(_QWORD *)(v2 + 8);
  return 1;
}

BOOL rtc::OpenSSLStreamAdapter::IsTlsConnected(rtc::OpenSSLStreamAdapter *this)
{
  return *((_DWORD *)this + 56) == 3;
}

uint64_t rtc::OpenSSLStreamAdapter::StartSSL(rtc::OpenSSLStreamAdapter *this)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_DWORD *)this + 56))
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20)) == 2)
  {
    *((_DWORD *)this + 56) = 2;
    v1 = rtc::OpenSSLStreamAdapter::BeginSSL(this);
    if (!(_DWORD)v1)
      return v1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_stream_adapter.cc");
    *((_DWORD *)this + 56) = 4;
    *((_DWORD *)this + 58) = v1;
    rtc::OpenSSLStreamAdapter::Cleanup(this, 0);
    return v1;
  }
  else
  {
    *((_DWORD *)this + 56) = 1;
    return 0;
  }
}

uint64_t rtc::OpenSSLStreamAdapter::BeginSSL(rtc::OpenSSLStreamAdapter *this)
{
  SSL_METHOD *v2;
  SSL_CTX *v3;
  SSL_CTX *v4;
  int v5;
  unsigned __int16 v6;
  int num;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  unsigned __int8 v21;
  rtc::BoringSSLIdentity *v22;
  int v23;
  char **v24;
  unsigned int i;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  BIO *v33;
  unsigned int *v34;
  unsigned int (*v35)(char *);
  SSL *v36;
  SSL *v37;
  char *s2;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  BIO *v43;
  BIO *v44;
  unsigned int j;
  unsigned int v47;
  void **p_tlsext_status_arg;
  void *tlsext_status_arg;
  size_t v50;
  uint64_t v51;
  char *v52;

  if (*((_DWORD *)this + 90) == 1)
    v2 = (SSL_METHOD *)&DTLS_with_buffers_method::kMethod;
  else
    v2 = (SSL_METHOD *)&TLS_with_buffers_method::kMethod;
  v3 = SSL_CTX_new(v2);
  if (!v3)
  {
LABEL_93:
    *((_QWORD *)this + 31) = 0;
    return 0xFFFFFFFFLL;
  }
  v4 = v3;
  v5 = *((_DWORD *)this + 90);
  if (v5 == 1)
    v6 = -259;
  else
    v6 = 771;
  num = v3->cipher_list->num;
  v8 = 8;
  if (v3->cipher_list->num)
  {
    v8 = 4;
    v9 = (unsigned __int16 *)&bssl::kDTLSVersions;
  }
  else
  {
    v9 = (unsigned __int16 *)&bssl::kTLSVersions;
  }
  v10 = v8 - 2;
  do
  {
    v12 = *v9++;
    v11 = v12;
    v13 = v12 == v6 || v10 == 0;
    v10 -= 2;
  }
  while (!v13);
  if (v11 == v6)
  {
    WORD1(v3->rsa_md5) = v6;
  }
  else
  {
    ERR_put_error(16, 0, 234, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/ssl_versions.cc", 133);
    v5 = *((_DWORD *)this + 90);
    num = v4->cipher_list->num;
  }
  if (v5 == 1)
    v14 = -259;
  else
    v14 = 771;
  v15 = 8;
  if (num)
  {
    v15 = 4;
    v16 = (unsigned __int16 *)&bssl::kDTLSVersions;
  }
  else
  {
    v16 = (unsigned __int16 *)&bssl::kTLSVersions;
  }
  v17 = v15 - 2;
  do
  {
    v19 = *v16++;
    v18 = v19;
    v20 = v19 == v14 || v17 == 0;
    v17 -= 2;
  }
  while (!v20);
  if (v18 == v14)
  {
    LOWORD(v4->rsa_md5) = v14;
    if (_MergedGlobals_14 != 1)
      goto LABEL_37;
    goto LABEL_36;
  }
  ERR_put_error(16, 0, 234, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/ssl_versions.cc", 133);
  if (_MergedGlobals_14 == 1)
LABEL_36:
LABEL_37:
  {
    rtc::openssl::GetBufferPool(void)::instance = (uint64_t)CRYPTO_BUFFER_POOL_new();
  }
  v4[1].app_verify_cookie_cb = (int (__cdecl *)(SSL *, unsigned __int8 *, unsigned int))rtc::openssl::GetBufferPool(void)::instance;
  v22 = (rtc::BoringSSLIdentity *)*((_QWORD *)this + 32);
  if (v22 && !rtc::BoringSSLIdentity::ConfigureIdentity(v22, v4))
  {
    for (i = atomic_load((unsigned int *)v4); i != -1; i = v27)
    {
      if (!i)
LABEL_109:
        abort();
      v26 = i - 1;
      v27 = __ldaxr((unsigned int *)v4);
      if (v27 == i)
      {
        if (!__stlxr(v26, (unsigned int *)v4))
        {
LABEL_89:
          if (!v26)
          {
            ssl_ctx_st::~ssl_ctx_st(v4);
            tlsext_status_arg = v4[-1].tlsext_status_arg;
            p_tlsext_status_arg = &v4[-1].tlsext_status_arg;
            v50 = (size_t)tlsext_status_arg + 8;
            if (tlsext_status_arg != (void *)-8)
              bzero(p_tlsext_status_arg, v50);
            free(p_tlsext_status_arg);
          }
          goto LABEL_93;
        }
      }
      else
      {
        __clrex();
      }
    }
    goto LABEL_93;
  }
  v4->generate_session_id = (GEN_SESSION_CB)rtc::OpenSSLAdapter::SSLInfoCallback;
  if (*((_BYTE *)this + 96))
    v23 = 3;
  else
    v23 = 1;
  *(_DWORD *)v4->tlsext_tick_hmac_key = v23;
  *(_QWORD *)v4->sid_ctx = rtc::OpenSSLStreamAdapter::SSLVerifyCallback;
  bssl::ssl_create_cipher_list((BUF_MEM ***)&v4->sha1, (~LOWORD(v4[1].comp_methods) & 0x1800) == 0, (uint64_t)"DEFAULT:!NULL:!aNULL:!SHA256:!SHA384:!aECDH:!AESGCM+AES256:!aPSK:!3DES", 0);
  v24 = (char **)((char *)this + 336);
  if (*((char *)this + 359) < 0)
  {
    if (*((_QWORD *)this + 43)
      && !ssl_ctx_make_profiles(*v24, (unint64_t **)&v4[1].stats.sess_accept_renegotiate))
    {
LABEL_82:
      for (j = atomic_load((unsigned int *)v4); j != -1; j = v47)
      {
        if (!j)
          goto LABEL_109;
        v26 = j - 1;
        v47 = __ldaxr((unsigned int *)v4);
        if (v47 == j)
        {
          if (!__stlxr(v26, (unsigned int *)v4))
            goto LABEL_89;
        }
        else
        {
          __clrex();
        }
      }
      goto LABEL_93;
    }
  }
  else if (*((_BYTE *)this + 359)
         && !ssl_ctx_make_profiles((char *)v24, (unint64_t **)&v4[1].stats.sess_accept_renegotiate))
  {
    goto LABEL_82;
  }
  LOWORD(v4[1].comp_methods) = (uint64_t)v4[1].comp_methods & 0xFFBF | (*((unsigned __int8 *)this + 264) << 6);
  *((_QWORD *)this + 31) = v4;
  v28 = *((_QWORD *)this + 20);
  v29 = atomic_load((unsigned __int8 *)&qword_253EA56D8);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_253EA56D8))
  {
    v52 = BIO_meth_new(1043, (uint64_t)"stream");
    *((_QWORD *)v52 + 2) = rtc::stream_write;
    *((_QWORD *)v52 + 3) = rtc::stream_read;
    *((_QWORD *)v52 + 6) = rtc::stream_ctrl;
    *((_QWORD *)v52 + 7) = rtc::stream_new;
    *((_QWORD *)v52 + 8) = rtc::stream_free;
    qword_253EA56D0 = (uint64_t)v52;
    __cxa_guard_release(&qword_253EA56D8);
  }
  v30 = qword_253EA56D0;
  v31 = (char *)malloc_type_malloc(0x50uLL, 0x30772F57uLL);
  if (!v31)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0xFFFFFFFFLL;
  }
  v32 = v31;
  *(_QWORD *)v31 = 72;
  *((_QWORD *)v31 + 1) = v30;
  v33 = (BIO *)(v31 + 8);
  *(_OWORD *)(v31 + 24) = 0u;
  *(_OWORD *)(v31 + 40) = 0u;
  *(_OWORD *)(v31 + 56) = 0u;
  *((_QWORD *)v31 + 9) = 0;
  *((_DWORD *)v31 + 7) = 1;
  *((_DWORD *)v31 + 11) = 1;
  v34 = (unsigned int *)(v31 + 44);
  *((_QWORD *)v31 + 2) = 0;
  v35 = *(unsigned int (**)(char *))(v30 + 56);
  if (!v35 || v35(v31 + 8))
  {
    v32[6] = v28;
    v36 = SSL_new(*((SSL_CTX **)this + 31));
    *((_QWORD *)this + 30) = v36;
    if (!v36)
    {
      BIO_free(v33);
      return 0xFFFFFFFFLL;
    }
    v37 = v36;
    s2 = (char *)v36->s2;
    if (s2 || (s2 = OPENSSL_sk_new_null(), (v37->s2 = (ssl2_state_st *)s2) != 0))
    {
      if (*(_QWORD *)s2
        || OPENSSL_sk_insert((unint64_t *)s2, 0, 0) && (s2 = (char *)v37->s2) != 0 && *(_QWORD *)s2)
      {
        **((_QWORD **)s2 + 1) = this;
      }
    }
    v39 = *((_QWORD *)this + 30);
    if (*(BIO **)(v39 + 24) == v33 && *(BIO **)(v39 + 32) == v33)
      goto LABEL_106;
    v40 = atomic_load(v34);
    if (v40 != -1)
    {
      while (1)
      {
        v41 = __ldaxr(v34);
        if (v41 == v40)
        {
          if (!__stlxr(v40 + 1, v34))
          {
            v42 = 1;
            goto LABEL_74;
          }
        }
        else
        {
          __clrex();
        }
        v42 = 0;
LABEL_74:
        if ((v42 & 1) == 0)
        {
          v40 = v41;
          if (v41 != -1)
            continue;
        }
        break;
      }
    }
    v44 = *(BIO **)(v39 + 24);
    v43 = *(BIO **)(v39 + 32);
    if (v44 != v33)
    {
      *(_QWORD *)(v39 + 24) = v33;
      if (v43 == v33 && v44 != v43)
      {
        v43 = v44;
        if (!v44)
          goto LABEL_106;
        goto LABEL_105;
      }
      if (v44)
      {
        BIO_free(v44);
        v43 = *(BIO **)(v39 + 32);
      }
    }
    *(_QWORD *)(v39 + 32) = v33;
    if (!v43)
    {
LABEL_106:
      v51 = *((_QWORD *)this + 30);
      if (*((_DWORD *)this + 90) == 1)
        *(_DWORD *)(v51 + 80) = *((_DWORD *)this + 92);
      *(_DWORD *)(v51 + 132) |= 3u;
      return rtc::OpenSSLStreamAdapter::ContinueSSL(this);
    }
LABEL_105:
    BIO_free(v43);
    goto LABEL_106;
  }
  if (*v32 != -8)
    __memset_chk();
  free(v32);
  return 0xFFFFFFFFLL;
}

uint64_t rtc::OpenSSLStreamAdapter::SetMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 360) = a2;
  return result;
}

uint64_t rtc::OpenSSLStreamAdapter::SetMaxProtocolVersion(uint64_t result, int a2)
{
  *(_DWORD *)(result + 364) = a2;
  return result;
}

uint64_t rtc::OpenSSLStreamAdapter::SetInitialRetransmissionTimeout(uint64_t this, int a2)
{
  *(_DWORD *)(this + 368) = a2;
  return this;
}

uint64_t rtc::OpenSSLStreamAdapter::Write(uint64_t a1, const void *a2, unint64_t a3, _QWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  uint64_t result;
  int v14;
  int v15;
  _QWORD *v16;
  unsigned int v17;
  int v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  std::string *v30;
  uint64_t v31;

  v8 = *(_DWORD *)(a1 + 224);
  if ((v8 - 1) < 2)
    return 2;
  if (v8 == 3)
  {
    if (*(_BYTE *)(a1 + 96) && !*(_BYTE *)(a1 + 280))
      return 2;
    if (!a3)
    {
      *a4 = 0;
      return 1;
    }
    *(_BYTE *)(a1 + 237) = 0;
    if (a3 >> 31)
    {
      v30 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, (uint64_t)a5, a6, a7, a8, v31);
      return rtc::OpenSSLStreamAdapter::Read(v30);
    }
    v14 = SSL_write(*(SSL **)(a1 + 240), a2, a3);
    v15 = v14;
    if (v14 > 0)
    {
      *a4 = v14;
      return 1;
    }
    v16 = *(_QWORD **)(a1 + 240);
    v17 = ERR_peek_error();
    if (v17)
    {
      if (HIBYTE(v17) == 2)
        v18 = 5;
      else
        v18 = 1;
      goto LABEL_33;
    }
    v18 = *(_DWORD *)(v16[6] + 196);
    if (!v15)
    {
      if (v18 == 6)
        v18 = 6;
      else
        v18 = 5;
      goto LABEL_33;
    }
    if ((v18 - 11) < 0xA || v18 == 4)
      goto LABEL_33;
    if (v18 == 3)
    {
      v20 = v16[4];
      v21 = *(_DWORD *)(v20 + 24);
      if ((v21 & 2) != 0)
        return 2;
      if ((v21 & 1) == 0)
      {
LABEL_39:
        v18 = 5;
        if ((v21 & 4) != 0)
        {
          v29 = *(_DWORD *)(v20 + 28);
          v18 = v29 == 3 ? 8 : 5;
          if (v29 == 2)
            v18 = 7;
        }
        goto LABEL_33;
      }
    }
    else
    {
      if (v18 != 2)
      {
        v18 = 5;
LABEL_33:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_stream_adapter.cc");
        *(_DWORD *)(a1 + 224) = 4;
        *(_DWORD *)(a1 + 232) = v18;
        rtc::OpenSSLStreamAdapter::Cleanup((rtc::OpenSSLStreamAdapter *)a1, 0);
        goto LABEL_36;
      }
      if (!v16[19])
      {
        v20 = v16[3];
        v21 = *(_DWORD *)(v20 + 24);
        if ((v21 & 1) == 0)
        {
          if ((v21 & 2) == 0)
            goto LABEL_39;
          return 2;
        }
      }
    }
    *(_BYTE *)(a1 + 237) = 1;
    return 2;
  }
  if (v8)
  {
LABEL_36:
    result = 0;
    *a5 = *(_DWORD *)(a1 + 232);
    return result;
  }
  v12 = *(_QWORD *)(a1 + 160);
  if (!a3)
    a2 = 0;
  return (*(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)v12 + 32))(v12, a2);
}

uint64_t rtc::OpenSSLStreamAdapter::Read(uint64_t a1, void *a2, unint64_t a3, _QWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t result;
  int v13;
  int v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  int v22;
  SSL **v23;
  unsigned int v24;
  uint64_t v25;

  v10 = *(_DWORD *)(a1 + 224);
  result = 2;
  switch(v10)
  {
    case 0:
      if (!a3)
        a2 = 0;
      return (*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(a1 + 160) + 24))(*(_QWORD *)(a1 + 160), a2);
    case 1:
    case 2:
      return result;
    case 3:
      if (*(_BYTE *)(a1 + 96) && !*(_BYTE *)(a1 + 280))
        return result;
      if (!a3)
      {
        *a4 = 0;
        return 1;
      }
      *(_BYTE *)(a1 + 236) = 0;
      if (a3 >> 31)
      {
        v23 = (SSL **)rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, (uint64_t)a5, a6, a7, a8, v25);
        return rtc::OpenSSLStreamAdapter::FlushInput(v23, v24);
      }
      v13 = SSL_read(*(SSL **)(a1 + 240), a2, a3);
      v14 = v13;
      v15 = *(_QWORD **)(a1 + 240);
      if (v13 <= 0)
      {
        v17 = ERR_peek_error();
        if (v17)
        {
          if (HIBYTE(v17) == 2)
            v18 = 5;
          else
            v18 = 1;
          goto LABEL_33;
        }
        v18 = *(unsigned int *)(v15[6] + 196);
        if (v14)
        {
          if ((v18 - 11) < 0xA || (_DWORD)v18 == 4)
            goto LABEL_33;
          if ((_DWORD)v18 == 3)
          {
            v20 = v15[4];
            v21 = *(_DWORD *)(v20 + 24);
            if ((v21 & 2) == 0)
            {
              if ((v21 & 1) == 0)
                goto LABEL_40;
              return 2;
            }
LABEL_46:
            *(_BYTE *)(a1 + 236) = 1;
            return 2;
          }
          if ((_DWORD)v18 == 2)
          {
            if (v15[19])
              return 2;
            v20 = v15[3];
            v21 = *(_DWORD *)(v20 + 24);
            if ((v21 & 1) != 0)
              return 2;
            if ((v21 & 2) == 0)
            {
LABEL_40:
              v18 = 5;
              if ((v21 & 4) != 0)
              {
                v22 = *(_DWORD *)(v20 + 28);
                v18 = v22 == 3 ? 8 : 5;
                if (v22 == 2)
                  v18 = 7;
              }
              goto LABEL_33;
            }
            goto LABEL_46;
          }
        }
        else if ((_DWORD)v18 == 6)
        {
          rtc::OpenSSLStreamAdapter::Cleanup((rtc::OpenSSLStreamAdapter *)a1, 0);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 40))(*(_QWORD *)(a1 + 160));
          return 3;
        }
        v18 = 5;
LABEL_33:
        rtc::OpenSSLStreamAdapter::Error(a1, (uint64_t)"SSL_read", 8, v18, 0, 0);
        goto LABEL_34;
      }
      *a4 = v13;
      if (*(_DWORD *)(a1 + 360) != 1)
        return 1;
      v16 = *(_DWORD *)(v15[6] + 136);
      if (!v16)
        return 1;
      rtc::OpenSSLStreamAdapter::FlushInput((SSL **)a1, v16);
      result = 0;
      *a5 = 16711681;
      return result;
    case 5:
      return 3;
    default:
LABEL_34:
      result = 0;
      *a5 = *(_DWORD *)(a1 + 232);
      return result;
  }
}

uint64_t rtc::OpenSSLStreamAdapter::FlushInput(SSL **this, unsigned int a2)
{
  int v4;
  uint64_t result;
  int v6;
  SSL *v7;
  unsigned int v8;
  int v9;
  BIO *bbio;
  int v12;
  int shutdown;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int init;
  char buf[2048];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    v4 = a2 >= 0x800 ? 2048 : a2;
    result = SSL_read(this[30], buf, v4);
    v6 = result;
    if ((int)result <= 0)
      break;
    a2 -= result;
    if (!a2)
      return result;
  }
  v7 = this[30];
  v8 = ERR_peek_error();
  if (v8)
  {
    if (HIBYTE(v8) == 2)
      v9 = 5;
    else
      v9 = 1;
    goto LABEL_32;
  }
  v9 = *((_DWORD *)v7->handshake_func + 49);
  if (v6)
  {
    if ((v9 - 11) < 0xA || v9 == 4)
      goto LABEL_32;
    if (v9 == 3)
    {
      bbio = v7->bbio;
      init = bbio->init;
      if ((init & 2) != 0)
        goto LABEL_40;
      if ((init & 1) == 0)
      {
        if ((init & 4) != 0)
          goto LABEL_23;
        goto LABEL_38;
      }
    }
    else
    {
      if (v9 != 2)
        goto LABEL_38;
      if (!v7->msg_callback)
      {
        bbio = v7->wbio;
        v12 = bbio->init;
        if ((v12 & 1) == 0)
        {
          if ((v12 & 2) == 0)
          {
            if ((v12 & 4) != 0)
            {
LABEL_23:
              shutdown = bbio->shutdown;
              if (shutdown == 3)
                v14 = 8;
              else
                v14 = 5;
              if (shutdown == 2)
                v9 = 7;
              else
                v9 = v14;
              goto LABEL_32;
            }
LABEL_38:
            v9 = 5;
            goto LABEL_32;
          }
LABEL_40:
          v9 = 3;
          goto LABEL_32;
        }
      }
    }
    v9 = 2;
    goto LABEL_32;
  }
  if (v9 == 6)
    v9 = 6;
  else
    v9 = 5;
LABEL_32:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_stream_adapter.cc");
  *((_DWORD *)this + 56) = 4;
  *((_DWORD *)this + 58) = v9;
  return rtc::OpenSSLStreamAdapter::Cleanup((rtc::OpenSSLStreamAdapter *)this, 0);
}

uint64_t rtc::OpenSSLStreamAdapter::Close(rtc::OpenSSLStreamAdapter *this)
{
  rtc::OpenSSLStreamAdapter::Cleanup(this, 0);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 20) + 40))(*((_QWORD *)this + 20));
}

uint64_t rtc::OpenSSLStreamAdapter::GetState(rtc::OpenSSLStreamAdapter *this)
{
  int v1;

  v1 = *((_DWORD *)this + 56);
  if ((v1 - 1) < 2)
    return 1;
  if (v1 != 3)
    return 0;
  if (!*((_BYTE *)this + 96))
    return 2;
  if (*((_BYTE *)this + 280))
    return 2;
  return 1;
}

uint64_t rtc::OpenSSLStreamAdapter::ContinueSSL(rtc::OpenSSLStreamAdapter *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  void (*v9)(char *, uint64_t, _QWORD);
  _QWORD *v10;
  _QWORD *v11;
  void (*v12)(_QWORD *, rtc::OpenSSLStreamAdapter *, uint64_t, _QWORD);
  uint64_t v13;
  int v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v19;
  int v20;
  __int16 error;
  void (*v22)(char *, BOOL);
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned __int8 v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  unint64_t v39;
  int v40;
  char v41;
  _QWORD v42[2];
  unsigned int *(*v43)(char, __int128 *, _OWORD *);
  uint64_t (*v44)(_QWORD *);
  unsigned int *v45;

  v2 = *((_QWORD *)this + 27);
  if (v2)
  {
    *(_BYTE *)(v2 + 4) = 0;
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 27) = 0;
  }
  v5 = *((_QWORD *)this + 30);
  v6 = *(_QWORD *)(v5 + 40);
  if (*((_DWORD *)this + 57))
  {
    if (v6)
      goto LABEL_13;
    *(_BYTE *)(v5 + 164) |= 1u;
    v7 = bssl::ssl_server_handshake;
  }
  else
  {
    if (v6)
      goto LABEL_13;
    *(_BYTE *)(v5 + 164) &= ~1u;
    v7 = bssl::ssl_client_handshake;
  }
  *(_QWORD *)(v5 + 40) = v7;
LABEL_13:
  v8 = SSL_do_handshake((SSL *)v5);
  if (v8 > 0)
  {
    *((_DWORD *)this + 56) = 3;
    if (!*((_BYTE *)this + 96) || *((_BYTE *)this + 280))
    {
      v9 = (void (*)(char *, uint64_t, _QWORD))*((_QWORD *)this + 11);
      if (v9)
        v9((char *)this + 64, 7, 0);
      v10 = (_QWORD *)*((_QWORD *)this + 4);
      for (*((_QWORD *)this + 6) = v10; v10 != (_QWORD *)((char *)this + 24); v10 = (_QWORD *)*((_QWORD *)this + 6))
      {
        v12 = (void (*)(_QWORD *, rtc::OpenSSLStreamAdapter *, uint64_t, _QWORD))v10[2];
        v11 = v10 + 2;
        *((_QWORD *)this + 6) = *(v11 - 1);
        v12(v11, this, 7, 0);
      }
    }
    return 0;
  }
  v15 = v8;
  v16 = (_QWORD *)*((_QWORD *)this + 30);
  v17 = ERR_peek_error();
  if (v17)
  {
    if (HIBYTE(v17) == 2)
      v13 = 5;
    else
      v13 = 1;
    goto LABEL_40;
  }
  v13 = *(unsigned int *)(v16[6] + 196);
  if (!v15)
  {
    if ((_DWORD)v13 == 6)
      v13 = 6;
    else
      v13 = 5;
    goto LABEL_40;
  }
  if ((v13 - 11) >= 0xA && (_DWORD)v13 != 4)
  {
    if ((_DWORD)v13 == 3)
    {
      v19 = v16[4];
      v20 = *(_DWORD *)(v19 + 24);
      if ((v20 & 2) != 0)
        return 0;
      if ((v20 & 1) == 0)
      {
LABEL_44:
        v13 = 5;
        if ((v20 & 4) != 0)
        {
          v23 = *(_DWORD *)(v19 + 28);
          v13 = v23 == 3 ? 8 : 5;
          if (v23 == 2)
            v13 = 7;
        }
        goto LABEL_40;
      }
    }
    else
    {
      if ((_DWORD)v13 != 2)
      {
        v13 = 5;
        goto LABEL_40;
      }
      if (!v16[19])
      {
        v19 = v16[3];
        v20 = *(_DWORD *)(v19 + 24);
        if ((v20 & 1) == 0)
        {
          if ((v20 & 2) == 0)
            goto LABEL_44;
          return 0;
        }
      }
    }
    if (DTLSv1_get_timeout(*((_QWORD *)this + 30), &v39))
    {
      v24 = 1000 * (v40 / 1000 + 1000 * (int)v39);
      v25 = *((_QWORD *)this + 25);
      v26 = (unsigned int *)*((_QWORD *)this + 26);
      if (v26)
      {
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v42[0] = v26;
      v42[1] = this;
      v43 = absl::internal_any_invocable::LocalManagerNontrivial<rtc::OpenSSLStreamAdapter::SetTimeout(int)::$_0>;
      v44 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,rtc::OpenSSLStreamAdapter::SetTimeout(int)::$_0 &>;
      if ((v28 & 1) == 0)
      {
        v36 = v25;
        v25 = v36;
        if (v37)
        {
          v38 = (_QWORD *)operator new();
          *v38 = &unk_24C0B13E8;
          webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v38;
          v25 = v36;
        }
      }
      webrtc::RepeatingTaskHandle::DelayedStart(v25, v24, (uint64_t)v42, 0, webrtc::Clock::GetRealTimeClock(void)::clock, (uint64_t)&v41, &v45);
      v29 = v45;
      v45 = 0;
      v30 = (unsigned int *)*((_QWORD *)this + 27);
      *((_QWORD *)this + 27) = v29;
      if (v30)
      {
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
          MEMORY[0x20BD0ADEC]();
        v33 = v45;
        if (v45)
        {
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
            MEMORY[0x20BD0ADEC]();
        }
      }
      v43(1, (__int128 *)v42, v42);
    }
    return 0;
  }
LABEL_40:
  error = ERR_peek_last_error();
  v22 = (void (*)(char *, BOOL))*((_QWORD *)this + 24);
  if (!v22)
    return v13;
  v22((char *)this + 168, (error & 0xFFF) == 184);
  return v13;
}

uint64_t rtc::`anonymous namespace'::TimeCallbackForTesting(rtc::_anonymous_namespace_ *this, const ssl_st *a2, timeval *a3)
{
  uint64_t result;

  if (rtc::g_clock)
  {
    result = (*(uint64_t (**)(uint64_t, const ssl_st *, timeval *))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock, a2, a3);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    result = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
           / dword_253EA791C;
  }
  *(_QWORD *)&a2->version = result / 1000000000;
  LODWORD(a2->method) = result % 1000000000 / 1000;
  return result;
}

uint64_t rtc::OpenSSLStreamAdapter::SSLVerifyCallback(rtc::OpenSSLStreamAdapter *this, ssl_st *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  rtc::OpenSSLStreamAdapter *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  char *v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  rtc::OpenSSLStreamAdapter *v60;
  uint64_t v61;

  v3 = *((_QWORD *)this + 15);
  if (v3 && *(_QWORD *)v3)
  {
    v4 = **(rtc::OpenSSLStreamAdapter ***)(v3 + 8);
    v5 = *((_QWORD *)this + 6);
    v6 = *(_QWORD *)(v5 + 464);
    v60 = v4;
    if (!v6)
      goto LABEL_6;
  }
  else
  {
    v5 = *((_QWORD *)this + 6);
    v6 = *(_QWORD *)(v5 + 464);
    v60 = 0;
    if (!v6)
    {
LABEL_6:
      v7 = *(_QWORD **)(v5 + 280);
      v6 = v7[189];
      if (!v6)
      {
        v6 = v7[188];
        if (!v6)
        {
          v6 = *(_QWORD *)(*v7 + 88);
          if (!v6)
            goto LABEL_54;
        }
      }
    }
  }
  v8 = *(unint64_t **)(v6 + 136);
  if (v8)
  {
    v9 = *v8;
    if (*v8)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        if (*v8 <= v13)
        {
          v16 = (_QWORD *)operator new();
          *v16 = &off_24C0B02E8;
          v16[1] = 0;
          if (v11 >= v12)
            goto LABEL_26;
LABEL_17:
          if (!v11)
            goto LABEL_72;
          *(_QWORD *)v11 = v16;
          v11 += 8;
          v19 = v11;
          if (++v13 == v9)
            goto LABEL_55;
        }
        else
        {
          v14 = *(_QWORD *)(v8[1] + 8 * v13);
          v15 = (_QWORD *)operator new();
          v16 = v15;
          if (v14)
          {
            v17 = (unsigned int *)(v14 + 24);
            v18 = atomic_load((unsigned int *)(v14 + 24));
            if (v18 != -1)
            {
              do
              {
                v20 = __ldaxr(v17);
                if (v20 == v18)
                {
                  if (!__stlxr(v18 + 1, v17))
                    break;
                }
                else
                {
                  __clrex();
                }
                v18 = v20;
              }
              while (v20 != -1);
            }
          }
          *v15 = &off_24C0B02E8;
          v15[1] = v14;
          if (v11 < v12)
            goto LABEL_17;
LABEL_26:
          v21 = v12;
          v22 = v11 - v10;
          v23 = (v11 - v10) >> 3;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61)
            abort();
          v25 = v21 - v10;
          v26 = (v21 - v10) >> 2;
          if (v26 > v24)
            v24 = v26;
          if (v25 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v24)
          {
LABEL_72:
            __break(1u);
LABEL_73:
            std::__throw_bad_array_new_length[abi:sn180100]();
          }
          if (v24 >> 61)
            goto LABEL_73;
          v61 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v23];
          *(_QWORD *)v28 = v16;
          v19 = v28 + 8;
          v29 = v11 - v10;
          if (v11 == v10)
            goto LABEL_42;
          v30 = v29 - 8;
          if ((unint64_t)(v29 - 8) < 0x138)
          {
            v31 = v11;
            goto LABEL_36;
          }
          v36 = v11 - 8 - v10;
          if (&v11[-(v36 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
          {
            v31 = v11;
            goto LABEL_36;
          }
          if (&v27[v22 - 8 - (v36 & 0xFFFFFFFFFFFFFFF8)] > &v27[v22 - 8])
          {
            v31 = v11;
            do
            {
LABEL_36:
              v32 = *((_QWORD *)v31 - 1);
              v31 -= 8;
              *(_QWORD *)v31 = 0;
              *((_QWORD *)v28 - 1) = v32;
              v28 -= 8;
            }
            while (v31 != v10);
            goto LABEL_37;
          }
          v37 = v36 & 0xFFFFFFFFFFFFFFF8;
          if (&v11[-v37 - 8] < v28)
          {
            v31 = v11;
            if (&v27[v22 - v37 - 8] < v11)
              goto LABEL_36;
          }
          v38 = (v30 >> 3) + 1;
          v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
          v31 = &v11[-v39];
          v28 -= v39;
          v40 = &v27[8 * v23 - 16];
          v41 = v11 - 16;
          v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v44 = *((_OWORD *)v41 - 1);
            v43 = *(_OWORD *)v41;
            *((_OWORD *)v41 - 1) = 0uLL;
            *(_OWORD *)v41 = 0uLL;
            *((_OWORD *)v40 - 1) = v44;
            *(_OWORD *)v40 = v43;
            v40 -= 32;
            v41 -= 32;
            v42 -= 4;
          }
          while (v42);
          if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_36;
LABEL_37:
          v33 = v27;
          do
          {
            v35 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            v34 = v35;
            *(_QWORD *)v11 = 0;
            if (v35)
              (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          }
          while (v11 != v10);
          v27 = v33;
LABEL_42:
          v12 = &v27[v61];
          if (v10)
            operator delete(v10);
          v10 = v28;
          ++v13;
          v11 = v19;
          if (v13 == v9)
            goto LABEL_55;
        }
      }
    }
  }
LABEL_54:
  v12 = 0;
  v19 = 0;
  v10 = 0;
LABEL_55:
  v45 = (_QWORD *)operator new();
  *v45 = v10;
  v45[1] = v19;
  v45[2] = v12;
  v46 = (_QWORD *)*((_QWORD *)v60 + 34);
  *((_QWORD *)v60 + 34) = v45;
  if (v46)
  {
    v47 = (_QWORD *)*v46;
    if (*v46)
    {
      v48 = (_QWORD *)v46[1];
      v49 = (_QWORD *)*v46;
      if (v48 != v47)
      {
        do
        {
          v51 = *--v48;
          v50 = v51;
          *v48 = 0;
          if (v51)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        }
        while (v48 != v47);
        v49 = (_QWORD *)*v46;
      }
      v46[1] = v47;
      operator delete(v49);
    }
    MEMORY[0x20BD0ADEC](v46, 0x20C40960023A9);
  }
  if (*((char *)v60 + 335) < 0)
  {
    if (*((_QWORD *)v60 + 40))
      return rtc::OpenSSLStreamAdapter::VerifyPeerCertificate(v60) ^ 1;
  }
  else if (*((_BYTE *)v60 + 335))
  {
    return rtc::OpenSSLStreamAdapter::VerifyPeerCertificate(v60) ^ 1;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v53, v54, v55, v56, v57, v58, v59, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_stream_adapter.cc");
  return 0;
}

rtc::SSLCertChain *rtc::OpenSSLStreamAdapter::GetPeerSSLCertChain@<X0>(rtc::OpenSSLStreamAdapter *this@<X0>, _QWORD *a2@<X8>)
{
  rtc::SSLCertChain *result;

  result = (rtc::SSLCertChain *)*((_QWORD *)this + 34);
  if (result)
    return (rtc::SSLCertChain *)rtc::SSLCertChain::Clone(result, a2);
  *a2 = 0;
  return result;
}

unint64_t rtc::stream_write(rtc *this, bio_st *a2, const char *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  std::string *v11;
  bio_st *v12;
  char *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;

  if (!a2)
    return 0xFFFFFFFFLL;
  v4 = *((_QWORD *)this + 5);
  *((_DWORD *)this + 6) &= 0xFFFFFFF0;
  *((_DWORD *)this + 7) = 0;
  v16 = 0;
  HIDWORD(v15) = 0;
  if (!(_DWORD)a3)
    a2 = 0;
  v5 = (*(uint64_t (**)(uint64_t, bio_st *, _QWORD, unint64_t *, char *))(*(_QWORD *)v4 + 32))(v4, a2, (int)a3, &v16, (char *)&v15 + 4);
  if (v5 == 2)
  {
    *((_DWORD *)this + 6) |= 0xAu;
    return 0xFFFFFFFFLL;
  }
  if (v5 != 1)
    return 0xFFFFFFFFLL;
  result = v16;
  if (v16 >> 31)
  {
    v11 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v6, v7, v8, v9, v15);
    return rtc::stream_read((rtc *)v11, v12, v13, v14);
  }
  return result;
}

unint64_t rtc::stream_read(rtc *this, bio_st *a2, char *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  std::string *v11;
  bio_st *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;

  if (!a2)
    return 0xFFFFFFFFLL;
  v4 = *((_QWORD *)this + 5);
  *((_DWORD *)this + 6) &= 0xFFFFFFF0;
  *((_DWORD *)this + 7) = 0;
  v17 = 0;
  HIDWORD(v16) = 0;
  if (!(_DWORD)a3)
    a2 = 0;
  v5 = (*(uint64_t (**)(uint64_t, bio_st *, _QWORD, unint64_t *, char *))(*(_QWORD *)v4 + 24))(v4, a2, (int)a3, &v17, (char *)&v16 + 4);
  if (v5 == 2)
  {
    *((_DWORD *)this + 6) |= 9u;
    return 0xFFFFFFFFLL;
  }
  if (v5 != 1)
    return 0xFFFFFFFFLL;
  result = v17;
  if (v17 >> 31)
  {
    v11 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v6, v7, v8, v9, v16);
    return rtc::stream_ctrl((rtc *)v11, v12, v13, v14, v15);
  }
  return result;
}

uint64_t rtc::stream_ctrl(rtc *this, bio_st *a2, int a3, uint64_t a4, void *a5)
{
  switch((_DWORD)a2)
  {
    case 0x28:
      return 1200;
    case 0xB:
      return 1;
    case 2:
      return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4) == 0;
  }
  return 0;
}

uint64_t rtc::stream_new(rtc *this, bio_st *a2)
{
  *((_QWORD *)this + 2) = 1;
  *((_QWORD *)this + 5) = 0;
  return 1;
}

BOOL rtc::stream_free(rtc *this, bio_st *a2)
{
  return this != 0;
}

uint64_t *absl::internal_any_invocable::LocalInvoker<false,void,rtc::OpenSSLStreamAdapter::OpenSSLStreamAdapter(std::unique_ptr<rtc::StreamInterface>,absl::AnyInvocable<void ()(rtc::SSLHandshakeError)>)::$_0 &,int,int>(uint64_t *result, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t *v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t);

  v5 = *result;
  if ((a2 & 1) != 0)
  {
    if (*(_DWORD *)(v5 + 224) != 1)
    {
      v6 = 1;
      v7 = a2 & 6;
      if ((a2 & 6) == 0)
        goto LABEL_21;
      goto LABEL_8;
    }
    *(_DWORD *)(v5 + 224) = 2;
    result = (uint64_t *)rtc::OpenSSLStreamAdapter::BeginSSL((rtc::OpenSSLStreamAdapter *)v5);
    if ((_DWORD)result)
      return (uint64_t *)rtc::OpenSSLStreamAdapter::Error(v5, (uint64_t)"BeginSSL", 8, (uint64_t)result, 0, 1);
  }
  v6 = 0;
  v7 = a2 & 6;
  if ((a2 & 6) == 0)
    goto LABEL_21;
LABEL_8:
  v8 = *(_DWORD *)(v5 + 224);
  switch(v8)
  {
    case 3:
      if ((a2 & 2) != 0)
      {
        if (a2 & 4 | *(unsigned __int8 *)(v5 + 237))
          LODWORD(v6) = v6 | 4;
      }
      else
      {
        if ((a2 & 4) == 0)
          break;
        v6 = v6 | 4;
        if (!*(_BYTE *)(v5 + 236))
          break;
      }
      v6 = v6 | 2;
      break;
    case 2:
      result = (uint64_t *)rtc::OpenSSLStreamAdapter::ContinueSSL((rtc::OpenSSLStreamAdapter *)v5);
      if ((_DWORD)result)
        return (uint64_t *)rtc::OpenSSLStreamAdapter::Error(v5, (uint64_t)"ContinueSSL", 11, (uint64_t)result, 0, 1);
      break;
    case 0:
      v6 = v6 | v7;
      break;
  }
LABEL_21:
  if ((a2 & 8) != 0)
  {
    rtc::OpenSSLStreamAdapter::Cleanup((rtc::OpenSSLStreamAdapter *)v5, 0);
    v6 = v6 | 8;
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 88);
    if (!v9)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (!(_DWORD)v6)
    return result;
  a3 = 0;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 88);
  if (v9)
LABEL_26:
    v9(v5 + 64, v6, a3);
LABEL_27:
  result = *(uint64_t **)(v5 + 32);
  for (*(_QWORD *)(v5 + 48) = result; result != (uint64_t *)(v5 + 24); result = *(uint64_t **)(v5 + 48))
  {
    v11 = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))result[2];
    v10 = result + 2;
    *(_QWORD *)(v5 + 48) = *(v10 - 1);
    v11(v10, v5, v6, a3);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,rtc::OpenSSLStreamAdapter::PostEvent(int,int)::$_0 &&>(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)a1;
  v2 = a1[2];
  v3 = a1[3];
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 88);
  if (v4)
    v4(v1 + 64, v2, v3);
  result = *(_QWORD *)(v1 + 32);
  for (*(_QWORD *)(v1 + 48) = result; result != v1 + 24; result = *(_QWORD *)(v1 + 48))
  {
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(result + 16);
    v6 = result + 16;
    *(_QWORD *)(v1 + 48) = *(_QWORD *)(v6 - 8);
    v7(v6, v1, v2, v3);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,rtc::OpenSSLStreamAdapter::SetTimeout(int)::$_0 &>(_QWORD *a1)
{
  rtc::OpenSSLStreamAdapter *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!*(_BYTE *)(*a1 + 4))
    return 0x7FFFFFFFFFFFFFFFLL;
  v1 = (rtc::OpenSSLStreamAdapter *)a1[1];
  v2 = *((_QWORD *)v1 + 27);
  if (v2)
  {
    *(_BYTE *)(v2 + 4) = 0;
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)v1 + 27) = 0;
  }
  v5 = DTLSv1_handle_timeout(*((_QWORD *)v1 + 30));
  if ((int)v5 >= 1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_stream_adapter.cc");
    goto LABEL_12;
  }
  v13 = v5;
  if ((v5 & 0x80000000) == 0)
  {
LABEL_12:
    rtc::OpenSSLStreamAdapter::ContinueSSL(v1);
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_stream_adapter.cc");
  rtc::OpenSSLStreamAdapter::Error((uint64_t)v1, (uint64_t)"DTLSv1_handle_timeout", 21, v13, 255, 1);
  return 0x7FFFFFFFFFFFFFFFLL;
}

unsigned int *absl::internal_any_invocable::LocalManagerNontrivial<rtc::OpenSSLStreamAdapter::SetTimeout(int)::$_0>(char a1, __int128 *a2, _OWORD *a3)
{
  __int128 v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *(_QWORD *)a2 = 0;
    *a3 = v3;
  }
  result = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
      JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

uint64_t rtc::openssl::ParseCertificate(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  uint64_t result;
  unint64_t *v7;
  unint64_t *v8;
  rtc *v9;
  BOOL v10;
  int64_t v11;
  rtc *v12[2];
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unsigned __int8 *v19[2];
  unint64_t v20;
  rtc *v21;
  int v22;

  v5 = *(unsigned __int8 **)(a1 + 16);
  v19[0] = *(unsigned __int8 **)(a1 + 8);
  v19[1] = v5;
  v20 = 0;
  LODWORD(v15) = 0;
  if (!cbs_get_any_asn1_element(v19, &v17, &v15, &v20, 0, 0, 0)
    || (_DWORD)v15 != 536870928
    || v18 < v20)
  {
    return 0;
  }
  v17 += v20;
  v18 -= v20;
  v20 = 0;
  LODWORD(v13) = 0;
  if (!cbs_get_any_asn1_element(&v17, &v15, &v13, &v20, 0, 0, 0)
    || (_DWORD)v13 != 536870928
    || v16 < v20)
  {
    return 0;
  }
  v15 += v20;
  v16 -= v20;
  v20 = 0;
  LODWORD(v12[0]) = 0;
  if (!cbs_get_any_asn1_element(&v17, &v13, v12, &v20, 0, 0, 0)
    || LODWORD(v12[0]) != 536870928
    || v14 < v20)
  {
    return 0;
  }
  v13 += v20;
  v14 -= v20;
  v12[0] = 0;
  v22 = 0;
  v20 = 0;
  v21 = 0;
  if (a2)
    v7 = a2;
  else
    v7 = &v20;
  if (!cbs_get_any_asn1_element(&v13, v7, &v22, (unint64_t *)v12, 0, 0, 0) || v22 != 6)
    return 0;
  v8 = &v20;
  if (a2)
    v8 = a2;
  v9 = (rtc *)v8[1];
  v10 = v9 >= v12[0];
  v11 = v9 - v12[0];
  if (!v10)
    return 0;
  *v7 += (unint64_t)v12[0];
  v8[1] = v11;
  v12[0] = 0;
  v22 = 0;
  v20 = 0;
  v21 = 0;
  if (!cbs_get_any_asn1_element(&v17, &v20, &v22, (unint64_t *)v12, 0, 0, 0)
    || v22 != 3
    || v21 < v12[0])
  {
    return 0;
  }
  if (v18)
    return 0;
  result = CBS_get_optional_asn1(&v15, 0, 0, -1610612736);
  if ((_DWORD)result)
  {
    v12[0] = 0;
    v22 = 0;
    v20 = 0;
    v21 = 0;
    if (cbs_get_any_asn1_element(&v15, &v20, &v22, (unint64_t *)v12, 0, 0, 0)
      && v22 == 2
      && v21 >= v12[0])
    {
      v12[0] = 0;
      v22 = 0;
      v20 = 0;
      v21 = 0;
      if (cbs_get_any_asn1_element(&v15, &v20, &v22, (unint64_t *)v12, 0, 0, 0)
        && v22 == 536870928
        && v21 >= v12[0])
      {
        result = CBS_get_asn1(&v15, 0, 536870928);
        if ((_DWORD)result)
        {
          result = CBS_get_asn1(&v15, &v20, 536870928);
          if ((_DWORD)result)
          {
            result = cbs_get_any_asn1_element((unsigned __int8 **)&v20, 0, 0, 0, 0, 0, 0);
            if ((_DWORD)result)
            {
              v22 = 0;
              result = CBS_get_any_asn1((unsigned __int8 **)&v20, v12, &v22);
              if ((_DWORD)result)
              {
                if ((v22 - 25) >= 0xFFFFFFFE)
                {
                  if (a3)
                    *a3 = rtc::ASN1TimeToSec(v12[0], (const unsigned __int8 *)v12[1], v22 != 23);
                  result = CBS_get_asn1_element(&v15, 0, 536870928);
                  if ((_DWORD)result)
                  {
                    result = CBS_get_asn1(&v15, 0, 536870928);
                    if ((_DWORD)result)
                    {
                      result = CBS_get_optional_asn1(&v15, 0, 0, -2147483647);
                      if ((_DWORD)result)
                      {
                        result = CBS_get_optional_asn1(&v15, 0, 0, -2147483646);
                        if ((_DWORD)result)
                        {
                          result = CBS_get_optional_asn1(&v15, 0, 0, -1610612733);
                          if ((_DWORD)result)
                            return v16 == 0;
                        }
                      }
                    }
                  }
                }
                else
                {
                  return 0;
                }
              }
            }
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL rtc::openssl::VerifyPeerCertMatchesHost(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  X509 *v11;
  X509 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v21;
  unsigned __int8 *v22;
  uint64_t v23;

  if (!a1 || !a3)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 464);
  if (!v6
    && (v7 = *(_QWORD **)(v5 + 280), (v6 = v7[189]) == 0)
    && (v6 = v7[188]) == 0
    && (v6 = *(_QWORD *)(*v7 + 88)) == 0
    || (v8 = *(_QWORD *)(v6 + 136)) == 0
    || !*(_QWORD *)v8)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
LABEL_15:
    rtc::webrtc_logging_impl::Log("\r\t", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_utility.cc");
    return 0;
  }
  v9 = **(_QWORD **)(v8 + 8);
  v10 = *(_QWORD *)(v9 + 16);
  v22 = *(unsigned __int8 **)(v9 + 8);
  v23 = v10;
  v11 = x509_parse(&v22, v9);
  if (!v11)
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_15;
  }
  v12 = v11;
  if (v23)
  {
    X509_free(v11);
    goto LABEL_12;
  }
  if (a2)
  {
    v21 = 0;
    if (!memchr(a2, 0, a3))
      v21 = do_x509_check((uint64_t)v12, a2, a3, 0, 2, 0) == 1;
  }
  else
  {
    v21 = 0;
  }
  X509_free(v12);
  return v21;
}

BOOL rtc::openssl::LoadBuiltinSSLRootCertificates(rtc::openssl *this, ssl_ctx_st *a2)
{
  unint64_t v2;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  X509 *v7;
  X509 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v17[2];

  v4 = 0;
  v5 = 0;
  do
  {
    v6 = (unsigned __int8 *)kSSLCertCertificateSizeList[v4];
    v17[0] = *(unsigned __int8 **)((char *)&kSSLCertCertificateList + v4 * 8);
    v17[1] = v6;
    v7 = x509_parse(v17, 0);
    if (v7)
    {
      v8 = v7;
      if (x509_store_add(*((_QWORD *)this + 31), (uint64_t)v7, 0))
      {
        ++v5;
      }
      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      {
        v2 = v2 & 0xFFFFFFFF00000000 | 0x7FA;
        rtc::webrtc_logging_impl::Log("\r\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_utility.cc");
      }
      X509_free(v8);
    }
    ++v4;
  }
  while (v4 != 36);
  return v5 > 0;
}

uint64_t rtc::openssl::GetBufferPool(rtc::openssl *this)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;

  v2 = &unk_253EA7000;
  if ((v1 & 1) != 0)
    return v2[289];
  v2 = (_QWORD *)&unk_253EA7000;
  if (!v4)
    return v2[289];
  rtc::openssl::GetBufferPool(void)::instance = (uint64_t)CRYPTO_BUFFER_POOL_new();
  return rtc::openssl::GetBufferPool(void)::instance;
}

_QWORD *std::__function::__func<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0,std::allocator<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = &off_24C0B81D0;
  v2 = a1[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 8);
      if (!v5)
        goto LABEL_14;
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (v7)
        goto LABEL_14;
      if (*(_BYTE *)(v5 + 88))
      {
        v8 = *(_QWORD **)(v5 + 80);
        if (v8 == (_QWORD *)(v5 + 56))
        {
          v9 = 4;
          v8 = (_QWORD *)(v5 + 56);
          goto LABEL_12;
        }
        if (v8)
        {
          v9 = 5;
LABEL_12:
          (*(void (**)(void))(*v8 + 8 * v9))();
        }
      }
      std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::~deque[abi:sn180100]((void **)(v5 + 8));
      MEMORY[0x20BD0ADEC](v5, 0x10A0C402ADD0C5BLL);
LABEL_14:
      MEMORY[0x20BD0ADEC](v2, 0x1020C40D5A9D86FLL);
    }
  }
  return a1;
}

void std::__function::__func<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0,std::allocator<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &off_24C0B81D0;
  v1 = a1[1];
  if (!v1)
    goto LABEL_15;
  do
  {
    v2 = __ldaxr((unsigned int *)v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)v1));
  if (v3)
LABEL_15:
    JUMPOUT(0x20BD0ADECLL);
  v4 = *(_QWORD *)(v1 + 8);
  if (!v4)
    goto LABEL_14;
  do
  {
    v5 = __ldaxr((unsigned int *)v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, (unsigned int *)v4));
  if (v6)
  {
LABEL_14:
    MEMORY[0x20BD0ADEC](v1, 0x1020C40D5A9D86FLL);
    goto LABEL_15;
  }
  if (*(_BYTE *)(v4 + 88))
  {
    v7 = *(_QWORD **)(v4 + 80);
    if (v7 == (_QWORD *)(v4 + 56))
    {
      v8 = 4;
      v7 = (_QWORD *)(v4 + 56);
      goto LABEL_12;
    }
    if (v7)
    {
      v8 = 5;
LABEL_12:
      (*(void (**)(void))(*v7 + 8 * v8))();
    }
  }
  std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::~deque[abi:sn180100]((void **)(v4 + 8));
  MEMORY[0x20BD0ADEC](v4, 0x10A0C402ADD0C5BLL);
  goto LABEL_14;
}

_QWORD *std::__function::__func<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0,std::allocator<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unsigned int *v3;
  unsigned int v4;

  result = operator new(0x10uLL);
  v3 = *(unsigned int **)(a1 + 8);
  *result = &off_24C0B81D0;
  result[1] = v3;
  if (v3)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0,std::allocator<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(result + 8);
  *a2 = &off_24C0B81D0;
  a2[1] = v2;
  if (v2)
  {
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  return result;
}

uint64_t std::__function::__func<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0,std::allocator<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0>,void ()(void)>::destroy(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      v4 = *(_QWORD *)(v1 + 8);
      if (!v4)
        goto LABEL_15;
      do
      {
        v5 = __ldaxr((unsigned int *)v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)v4));
      if (v6)
LABEL_15:
        JUMPOUT(0x20BD0ADECLL);
      if (*(_BYTE *)(v4 + 88))
      {
        v7 = *(_QWORD **)(v4 + 80);
        if (v7 == (_QWORD *)(v4 + 56))
        {
          v8 = 4;
          v7 = (_QWORD *)(v4 + 56);
          goto LABEL_13;
        }
        if (v7)
        {
          v8 = 5;
LABEL_13:
          (*(void (**)(void))(*v7 + 8 * v8))();
        }
      }
      std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::~deque[abi:sn180100]((void **)(v4 + 8));
      MEMORY[0x20BD0ADEC](v4, 0x10A0C402ADD0C5BLL);
      goto LABEL_15;
    }
  }
  return result;
}

void std::__function::__func<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0,std::allocator<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = __p[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 8);
      if (!v5)
        goto LABEL_14;
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (v7)
        goto LABEL_14;
      if (*(_BYTE *)(v5 + 88))
      {
        v8 = *(_QWORD **)(v5 + 80);
        if (v8 == (_QWORD *)(v5 + 56))
        {
          v9 = 4;
          v8 = (_QWORD *)(v5 + 56);
          goto LABEL_12;
        }
        if (v8)
        {
          v9 = 5;
LABEL_12:
          (*(void (**)(void))(*v8 + 8 * v9))();
        }
      }
      std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::~deque[abi:sn180100]((void **)(v5 + 8));
      MEMORY[0x20BD0ADEC](v5, 0x10A0C402ADD0C5BLL);
LABEL_14:
      MEMORY[0x20BD0ADEC](v2, 0x1020C40D5A9D86FLL);
    }
  }
  operator delete(__p);
}

void std::__function::__func<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0,std::allocator<rtc::OperationsChain::CreateOperationsChainCallback(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  void ***v16;
  void *v17;
  int v18;
  int v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + ((v3 >> 6) & 0x3FFFFFFFFFFFFF8));
  if (v4)
  {
    v5 = 8 * (*(_QWORD *)(v2 + 40) & 0x1FFLL);
    v6 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(v4 + v5) = 0;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v3 = *(_QWORD *)(v2 + 40);
    }
    v7 = *(_QWORD *)(v2 + 48) - 1;
    v8 = v3 + 1;
    *(_QWORD *)(v2 + 40) = v8;
    *(_QWORD *)(v2 + 48) = v7;
    if (v8 >= 0x400)
    {
      operator delete(**(void ***)(v2 + 16));
      *(_QWORD *)(v2 + 16) += 8;
      v7 = *(_QWORD *)(v2 + 48);
      v8 = *(_QWORD *)(v2 + 40) - 512;
      *(_QWORD *)(v2 + 40) = v8;
    }
    if (v7)
    {
      v9 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
      v10 = 2;
LABEL_11:
      (*(void (**)(void))(*v9 + 8 * v10))();
      goto LABEL_12;
    }
    if (!*(_BYTE *)(v2 + 88))
    {
LABEL_12:
      v11 = *(_QWORD *)(v1 + 8);
      if (!v11)
        goto LABEL_22;
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (v13)
        goto LABEL_22;
      if (*(_BYTE *)(v11 + 88))
      {
        v14 = *(_QWORD **)(v11 + 80);
        if (v14 == (_QWORD *)(v11 + 56))
        {
          v15 = 4;
          v14 = (_QWORD *)(v11 + 56);
          goto LABEL_20;
        }
        if (v14)
        {
          v15 = 5;
LABEL_20:
          (*(void (**)(void))(*v14 + 8 * v15))();
        }
      }
      std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::~deque[abi:sn180100]((void **)(v11 + 8));
      MEMORY[0x20BD0ADEC](v11, 0x10A0C402ADD0C5BLL);
LABEL_22:
      *(_QWORD *)(v1 + 8) = 0;
      return;
    }
    v9 = *(_QWORD **)(v2 + 80);
    if (v9)
    {
      v10 = 6;
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  v16 = (void ***)std::__throw_bad_function_call[abi:sn180100]();
  WebRtcOpus_EncoderCreate(v16, v17, v18, v19);
}

uint64_t WebRtcOpus_EncoderCreate(void ***a1, void *a2, int a3, int a4)
{
  int v7;
  void **v9;
  char *v10;
  char *v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  void *v15;
  size_t *v16;
  size_t *v17;
  size_t *v18;
  _DWORD *v19;
  size_t *v20;
  BOOL v23;
  size_t v24[2];
  unsigned __int8 v25;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (!a3)
  {
    v7 = 2048;
LABEL_7:
    v9 = (void **)malloc_type_calloc(1uLL, 0x28uLL, 0x1020040283C3373uLL);
    if (a4 <= 15999)
    {
      if (a4 != 8000 && a4 != 12000)
        goto LABEL_18;
    }
    else if (a4 != 16000 && a4 != 48000 && a4 != 24000)
    {
LABEL_18:
      *v9 = 0;
      free(v9[1]);
      free(v9);
      return -1;
    }
    if (((_DWORD)a2 - 1) <= 1)
    {
      v10 = (char *)malloc_type_malloc((4912 * (_DWORD)a2 + 38668), 0x22FC433FuLL);
      if (v10)
      {
        v11 = v10;
        if (!opus_encoder_init(v10, a4, (int)a2, v7))
        {
          *v9 = v11;
          *((_DWORD *)v9 + 6) = 0;
          v9[2] = a2;
          *((_DWORD *)v9 + 8) = a4;
          *((_DWORD *)v9 + 9) = 0;
          webrtc::field_trial::FindFullName((size_t)"WebRTC-Audio-OpusAvoidNoisePumpingDuringDtx", 0x2BuLL, v24);
          v13 = v25;
          v14 = (char)v25;
          v15 = (void *)v24[0];
          if ((v25 & 0x80u) == 0)
          {
            v16 = v24;
          }
          else
          {
            v13 = v24[1];
            v16 = (size_t *)v24[0];
          }
          v17 = (size_t *)((char *)v16 + v13);
          if (v13 >= 7)
          {
            v18 = v16;
            do
            {
              v19 = memchr(v18, 69, v13 - 6);
              if (!v19)
                break;
              v20 = (size_t *)v19;
              if (*v19 == 1650552389 && *(_DWORD *)((char *)v19 + 3) == 1684368482)
                goto LABEL_33;
              v18 = (size_t *)((char *)v19 + 1);
              v13 = (char *)v17 - ((char *)v20 + 1);
            }
            while (v13 > 6);
          }
          v20 = v17;
LABEL_33:
          if (v14 < 0)
            operator delete(v15);
          v12 = 0;
          v23 = v20 != v17 && v20 == v16;
          *((_BYTE *)v9 + 28) = v23;
          *a1 = v9;
          return v12;
        }
        free(v11);
      }
    }
    goto LABEL_18;
  }
  if (a3 == 1)
  {
    v7 = 2049;
    goto LABEL_7;
  }
  return -1;
}

uint64_t WebRtcOpus_EncoderFree(void **a1)
{
  void *v2;

  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = *a1;
  if (!v2)
    v2 = a1[1];
  free(v2);
  free(a1);
  return 0;
}

uint64_t WebRtcOpus_MultistreamEncoderCreate(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  int v11;
  _DWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  __int16 v16;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (a3)
  {
    if (a3 != 1)
      return -1;
    v11 = 2049;
  }
  else
  {
    v11 = 2048;
  }
  v13 = malloc_type_calloc(1uLL, 0x28uLL, 0x1020040283C3373uLL);
  if ((a2 - 256) >= 0xFFFFFF01
    && (a5 & 0x80000000) == 0
    && a4 >= 1
    && a5 <= a4
    && 255 - a5 >= a4
    && a5 + a4 <= (int)a2)
  {
    v14 = (unsigned int *)malloc_type_malloc(43584 * (a4 - a5) + 48496 * a5 + 296, 0x22FC433FuLL);
    if (v14)
    {
      v15 = v14;
      if (!opus_multistream_encoder_init_impl(v14, 48000, a2, a4, a5, a6, v11, 0))
      {
        v16 = 0;
        v13[6] = 0;
        *((_QWORD *)v13 + 1) = v15;
        *((_QWORD *)v13 + 2) = a2;
        *((_QWORD *)v13 + 4) = 48000;
        *((_BYTE *)v13 + 28) = 0;
        *a1 = v13;
        return v16;
      }
      free(v15);
    }
  }
  *((_QWORD *)v13 + 1) = 0;
  if (*(_QWORD *)v13)
    free(*(void **)v13);
  free(v13);
  return -1;
}

uint64_t WebRtcOpus_Encode(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v5;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int16x8_t *v24;
  unint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v40;
  float v41;
  __int16 *v42;
  unint64_t v43;
  unint64_t v44;
  int16x8_t *v45;
  unint64_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int v55;
  int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  _OWORD v61[24];
  int16x8_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (a3 > 0xB40)
    return 0xFFFFFFFFLL;
  v11 = *(int **)a1;
  if (v11)
  {
    v5 = opus_encode((uint64_t)v11, a2, a3);
    if ((int)v5 < 1)
      return 0xFFFFFFFFLL;
  }
  else
  {
    v5 = opus_multistream_encode_native(*(_QWORD *)(a1 + 8), (uint64_t)opus_copy_channel_in_short, a2, a3, (uint64_t)a5, a4, 16, (uint64_t)downmix_int, 0, 0);
    if ((int)v5 < 1)
      return 0xFFFFFFFFLL;
  }
  if (v5 > 2)
  {
    if (!*(_BYTE *)(a1 + 28))
      goto LABEL_69;
    LODWORD(v61[0]) = 0;
    if (*(_QWORD *)a1)
    {
      if (opus_encoder_ctl(*(int **)a1, 4017, v12, v13, v14, v15, v16, v17, (uint64_t)v61))
        goto LABEL_69;
    }
    else if (opus_multistream_encoder_ctl(*(int **)(a1 + 8), 4017, v12, v13, v14, v15, v16, v17, (uint64_t)v61))
    {
      goto LABEL_69;
    }
    if (LOWORD(v61[0]) != 1)
      goto LABEL_69;
    v24 = a3 ? (int16x8_t *)a2 : 0;
    v25 = a3 / (20 * (*(_DWORD *)(a1 + 32) / 1000));
    if (!(_DWORD)v25)
      goto LABEL_69;
    if (!a5)
    {
LABEL_51:
      if (!a3)
      {
        v41 = 0.0;
        goto LABEL_59;
      }
      v40 = (a3 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v40 >= 0xF)
      {
        v43 = v40 + 1;
        v44 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
        v42 = &v24->i16[v44];
        v45 = v24 + 1;
        v41 = 0.0;
        v46 = v44;
        do
        {
          v47 = v45[-1];
          v48 = *v45;
          v49 = vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v47.i8);
          v50 = vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v48.i8);
          v51 = vcvtq_f32_s32(vmull_high_s16(v47, v47));
          v52 = vcvtq_f32_s32(v49);
          v53 = vcvtq_f32_s32(vmull_high_s16(v48, v48));
          v54 = vcvtq_f32_s32(v50);
          v41 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v41 + v52.f32[0]) + v52.f32[1]) + v52.f32[2]) + v52.f32[3]) + v51.f32[0])
                                                                                              + v51.f32[1])
                                                                                      + v51.f32[2])
                                                                              + v51.f32[3])
                                                                      + v54.f32[0])
                                                              + v54.f32[1])
                                                      + v54.f32[2])
                                              + v54.f32[3])
                                      + v53.f32[0])
                              + v53.f32[1])
                      + v53.f32[2])
              + v53.f32[3];
          v45 += 2;
          v46 -= 16;
        }
        while (v46);
        if (v43 == v44)
        {
LABEL_59:
          LODWORD(v61[0]) = 0;
          if (*(_QWORD *)a1)
            v56 = opus_encoder_ctl(*(int **)a1, 4049, v18, v19, v20, v21, v22, v23, (uint64_t)v61);
          else
            v56 = opus_multistream_encoder_ctl(*(int **)(a1 + 8), 4049, v18, v19, v20, v21, v22, v23, (uint64_t)v61);
          v57 = *(float *)(a1 + 36);
          v58 = v57 * 0.5;
          v59 = v41 / (float)(int)v25;
          if (!v56 && LODWORD(v61[0]) == 1 && v59 >= v58)
          {
            *a5 &= 0xFCu;
            v5 = 1;
            *(_DWORD *)(a1 + 24) = 1;
            return v5;
          }
          v60 = v57 + (float)((float)(v59 - v57) * 0.25);
          if (v59 < v58)
            v60 = v41 / (float)(int)v25;
          *(float *)(a1 + 36) = v60;
LABEL_69:
          *(_DWORD *)(a1 + 24) = 0;
          return v5;
        }
      }
      else
      {
        v41 = 0.0;
        v42 = (__int16 *)v24;
      }
      do
      {
        v55 = *v42++;
        v41 = v41 + (float)(v55 * v55);
      }
      while (v42 != (__int16 *)((char *)v24 + 2 * a3));
      goto LABEL_59;
    }
    v26 = *a5;
    if ((*a5 & 0x80) != 0)
      goto LABEL_69;
    v27 = *a5;
    if ((~(char)v26 & 0x60) != 0)
    {
      v29 = (v26 >> 3) & 3;
      if (v29 == 3)
      {
        v30 = 3;
LABEL_35:
        memset(v61, 0, sizeof(v61));
        v32 = opus_packet_parse_impl(a5, v5, 0, 0, (char **)v61, &v62, 0, 0);
        if ((v32 & 0x80000000) != 0)
          goto LABEL_69;
        if (v32)
        {
          v33 = 8 - v30;
          v34 = 0;
          if ((v27 & 4) != 0)
          {
            v35 = 1;
            do
            {
              if (v62.i16[v34] >= 1)
              {
                v36 = **((unsigned __int8 **)v61 + v34);
                v37 = v36 >> v33;
                v38 = v36 << (v30 + 1) >> v33;
                if (v37 || v38 != 0)
                  break;
              }
              v35 = ++v34 < (unint64_t)v32;
            }
            while (v32 != v34);
          }
          else
          {
            v35 = 1;
            do
            {
              if (v62.i16[v34] >= 1 && **((unsigned __int8 **)v61 + v34) >> v33)
                break;
              v35 = ++v34 < (unint64_t)v32;
            }
            while (v32 != v34);
          }
          if (v35)
            goto LABEL_69;
        }
        goto LABEL_51;
      }
      v28 = (42949673 * (unint64_t)(48000 << v29)) >> 32;
    }
    else if ((*a5 & 8) != 0)
    {
      LOWORD(v28) = 960;
    }
    else
    {
      LOWORD(v28) = 480;
    }
    v31 = (unsigned __int16)v28 / 0x30u;
    v30 = 1;
    if (v31 != 10 && v31 != 20)
    {
      if (v31 != 40)
        goto LABEL_69;
      v30 = 2;
    }
    goto LABEL_35;
  }
  if (*(_DWORD *)(a1 + 24))
    return 0;
  *(_DWORD *)(a1 + 24) = 1;
  return v5;
}

uint64_t WebRtcOpus_SetBitRate(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;

  if (!a1)
    return 0xFFFFFFFFLL;
  v9 = *a1;
  if (v9)
    return (__int16)opus_encoder_ctl(v9, 4002, a3, a4, a5, a6, a7, a8, a2);
  else
    return (__int16)opus_multistream_encoder_ctl(a1[1], 4002, a3, a4, a5, a6, a7, a8, a2);
}

uint64_t WebRtcOpus_SetPacketLossRate(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;

  if (!a1)
    return 0xFFFFFFFFLL;
  v9 = *a1;
  if (v9)
    return (__int16)opus_encoder_ctl(v9, 4014, a3, a4, a5, a6, a7, a8, a2);
  else
    return (__int16)opus_multistream_encoder_ctl(a1[1], 4014, a3, a4, a5, a6, a7, a8, a2);
}

uint64_t WebRtcOpus_SetMaxPlaybackRate(int **a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (a2 < 0x5DC1)
    v8 = 1104;
  else
    v8 = 1105;
  if (a2 >= 0x3E81)
    v9 = v8;
  else
    v9 = 1103;
  if (a2 >= 0x2EE1)
    v10 = v9;
  else
    v10 = 1102;
  if ((int)a2 >= 8001)
    v11 = v10;
  else
    v11 = 1101;
  if (*a1)
    return (__int16)opus_encoder_ctl(*a1, 4004, a3, a4, a5, a6, a7, a8, v11);
  else
    return (__int16)opus_multistream_encoder_ctl(a1[1], 4004, a3, a4, a5, a6, a7, a8, v11);
}

uint64_t WebRtcOpus_EnableFec(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;

  if (!a1)
    return 0xFFFFFFFFLL;
  v9 = *a1;
  if (v9)
    return (__int16)opus_encoder_ctl(v9, 4012, a3, a4, a5, a6, a7, a8, 1);
  else
    return (__int16)opus_multistream_encoder_ctl(a1[1], 4012, a3, a4, a5, a6, a7, a8, 1);
}

uint64_t WebRtcOpus_DisableFec(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;

  if (!a1)
    return 0xFFFFFFFFLL;
  v9 = *a1;
  if (v9)
    return (__int16)opus_encoder_ctl(v9, 4012, a3, a4, a5, a6, a7, a8, 0);
  else
    return (__int16)opus_multistream_encoder_ctl(a1[1], 4012, a3, a4, a5, a6, a7, a8, 0);
}

uint64_t WebRtcOpus_EnableDtx(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;

  if (!a1)
    return 0xFFFFFFFFLL;
  v9 = *a1;
  if (v9)
    return (__int16)opus_encoder_ctl(v9, 4016, a3, a4, a5, a6, a7, a8, 1);
  else
    return (__int16)opus_multistream_encoder_ctl(a1[1], 4016, a3, a4, a5, a6, a7, a8, 1);
}

uint64_t WebRtcOpus_DisableDtx(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;

  if (!a1)
    return 0xFFFFFFFFLL;
  v9 = *a1;
  if (v9)
    return (__int16)opus_encoder_ctl(v9, 4016, a3, a4, a5, a6, a7, a8, 0);
  else
    return (__int16)opus_multistream_encoder_ctl(a1[1], 4016, a3, a4, a5, a6, a7, a8, 0);
}

uint64_t WebRtcOpus_EnableCbr(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;

  if (!a1)
    return 0xFFFFFFFFLL;
  v9 = *a1;
  if (v9)
    return (__int16)opus_encoder_ctl(v9, 4006, a3, a4, a5, a6, a7, a8, 0);
  else
    return (__int16)opus_multistream_encoder_ctl(a1[1], 4006, a3, a4, a5, a6, a7, a8, 0);
}

uint64_t WebRtcOpus_DisableCbr(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;

  if (!a1)
    return 0xFFFFFFFFLL;
  v9 = *a1;
  if (v9)
    return (__int16)opus_encoder_ctl(v9, 4006, a3, a4, a5, a6, a7, a8, 1);
  else
    return (__int16)opus_multistream_encoder_ctl(a1[1], 4006, a3, a4, a5, a6, a7, a8, 1);
}

uint64_t WebRtcOpus_SetComplexity(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;

  if (!a1)
    return 0xFFFFFFFFLL;
  v9 = *a1;
  if (v9)
    return (__int16)opus_encoder_ctl(v9, 4010, a3, a4, a5, a6, a7, a8, a2);
  else
    return (__int16)opus_multistream_encoder_ctl(a1[1], 4010, a3, a4, a5, a6, a7, a8, a2);
}

uint64_t WebRtcOpus_SetBandwidth(int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;

  if (!a1)
    return 0xFFFFFFFFLL;
  v9 = *a1;
  if (v9)
    return (__int16)opus_encoder_ctl(v9, 4008, a3, a4, a5, a6, a7, a8, a2);
  else
    return (__int16)opus_multistream_encoder_ctl(a1[1], 4008, a3, a4, a5, a6, a7, a8, a2);
}

uint64_t WebRtcOpus_SetForceChannels(int **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    return 0xFFFFFFFFLL;
  if (a2)
  {
    if (a2 <= 2)
    {
      if (*a1)
        return (__int16)opus_encoder_ctl(*a1, 4022, a3, a4, a5, a6, a7, a8, a2);
      return (__int16)opus_multistream_encoder_ctl(a1[1], 4022, a3, a4, a5, a6, a7, a8, a2);
    }
    return 0xFFFFFFFFLL;
  }
  if (*a1)
    return (__int16)opus_encoder_ctl(*a1, 4022, a3, a4, a5, a6, a7, a8, 4294966296);
  return (__int16)opus_multistream_encoder_ctl(a1[1], 4022, a3, a4, a5, a6, a7, a8, 4294966296);
}

uint64_t WebRtcOpus_DecoderCreate(char ***a1, char *a2, int a3)
{
  char **v6;
  char **v7;
  char *v9;
  char *v10;
  __int16 v11;
  uint64_t v12;
  int v13;
  void *v14;
  size_t *v15;
  size_t *v16;
  size_t *v17;
  _DWORD *v18;
  size_t *v19;
  BOOL v21;
  char v22;
  size_t v23[2];
  unsigned __int8 v24;

  if (!a1)
    return 0xFFFFFFFFLL;
  v6 = (char **)malloc_type_calloc(1uLL, 0x28uLL, 0x1020040FDDC1CEBuLL);
  if (!v6)
    return -1;
  v7 = v6;
  if (a3 <= 15999)
  {
    if (a3 != 8000 && a3 != 12000)
      goto LABEL_15;
LABEL_11:
    if (((_DWORD)a2 - 3) >= 0xFFFFFFFE)
    {
      v9 = (char *)malloc_type_malloc((8768 * (_DWORD)a2 + 9460), 0x22FC433FuLL);
      if (v9)
      {
        v10 = v9;
        if (!opus_decoder_init(v9, a3, (int)a2))
        {
          *v7 = v10;
          v7[3] = a2;
          *((_DWORD *)v7 + 9) = a3;
          webrtc::field_trial::FindFullName((size_t)"WebRTC-Audio-OpusPlcUsePrevDecodedSamples", 0x29uLL, v23);
          v12 = v24;
          v13 = (char)v24;
          v14 = (void *)v23[0];
          if ((v24 & 0x80u) == 0)
          {
            v15 = v23;
          }
          else
          {
            v12 = v23[1];
            v15 = (size_t *)v23[0];
          }
          v16 = (size_t *)((char *)v15 + v12);
          if (v12 >= 7)
          {
            v17 = v15;
            do
            {
              v18 = memchr(v17, 69, v12 - 6);
              if (!v18)
                break;
              v19 = (size_t *)v18;
              if (*v18 == 1650552389 && *(_DWORD *)((char *)v18 + 3) == 1684368482)
                goto LABEL_30;
              v17 = (size_t *)((char *)v18 + 1);
              v12 = (char *)v16 - ((char *)v19 + 1);
            }
            while (v12 > 6);
          }
          v19 = v16;
LABEL_30:
          if (v13 < 0)
            operator delete(v14);
          v21 = v19 != v16 && v19 == v15;
          v22 = v21;
          *((_BYTE *)v7 + 20) = v22;
          if (v21)
            *((_DWORD *)v7 + 4) = 20 * (*((_DWORD *)v7 + 9) / 1000);
          v11 = 0;
          *((_DWORD *)v7 + 8) = 0;
          *a1 = v7;
          return v11;
        }
        free(v10);
      }
    }
    goto LABEL_15;
  }
  if (a3 == 16000 || a3 == 48000 || a3 == 24000)
    goto LABEL_11;
LABEL_15:
  free(v7);
  return -1;
}

uint64_t WebRtcOpus_MultistreamDecoderCreate(_QWORD *a1, uint64_t a2, int a3, int a4, _OWORD *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  __int16 v12;
  void *v14;
  void *v15;
  uint64_t v16;
  int v17;
  void *v18;
  size_t *v19;
  size_t *v20;
  size_t *v21;
  _DWORD *v22;
  size_t *v23;
  BOOL v25;
  char v26;
  size_t v27[2];
  unsigned __int8 v28;

  if (a1)
  {
    v10 = malloc_type_calloc(1uLL, 0x28uLL, 0x1020040FDDC1CEBuLL);
    if (v10)
    {
      v11 = v10;
      if ((a2 - 256) >= 0xFFFFFF01 && (a4 & 0x80000000) == 0 && a3 >= 1 && a4 <= a3 && 255 - a4 >= a3)
      {
        v14 = malloc_type_malloc(18232 * (a3 - a4) + 27000 * a4 + 272, 0x22FC433FuLL);
        if (v14)
        {
          v15 = v14;
          if (!opus_multistream_decoder_init((uint64_t)v14, 48000, a2, a3, a4, a5))
          {
            v11[1] = v15;
            v11[3] = a2;
            *((_DWORD *)v11 + 9) = 48000;
            webrtc::field_trial::FindFullName((size_t)"WebRTC-Audio-OpusPlcUsePrevDecodedSamples", 0x29uLL, v27);
            v16 = v28;
            v17 = (char)v28;
            v18 = (void *)v27[0];
            if ((v28 & 0x80u) == 0)
            {
              v19 = v27;
            }
            else
            {
              v16 = v27[1];
              v19 = (size_t *)v27[0];
            }
            v20 = (size_t *)((char *)v19 + v16);
            if (v16 >= 7)
            {
              v21 = v19;
              do
              {
                v22 = memchr(v21, 69, v16 - 6);
                if (!v22)
                  break;
                v23 = (size_t *)v22;
                if (*v22 == 1650552389 && *(_DWORD *)((char *)v22 + 3) == 1684368482)
                  goto LABEL_27;
                v21 = (size_t *)((char *)v22 + 1);
                v16 = (char *)v20 - ((char *)v23 + 1);
              }
              while (v16 > 6);
            }
            v23 = v20;
LABEL_27:
            if (v17 < 0)
              operator delete(v18);
            v25 = v23 != v20 && v23 == v19;
            v26 = v25;
            *((_BYTE *)v11 + 20) = v26;
            if (v25)
              *((_DWORD *)v11 + 4) = 20 * (*((_DWORD *)v11 + 9) / 1000);
            v12 = 0;
            *((_DWORD *)v11 + 8) = 0;
            *a1 = v11;
            return v12;
          }
          free(v15);
        }
      }
      free(v11);
    }
    return -1;
  }
  return 0xFFFFFFFFLL;
}

uint64_t WebRtcOpus_DecoderInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  uint64_t result;
  int *v11;

  v9 = *(int **)a1;
  if (v9)
    result = opus_decoder_ctl(v9, 4028, a3, a4, a5, a6, a7, a8, v11);
  else
    result = opus_multistream_decoder_ctl(*(int **)(a1 + 8), 4028, a3, a4, a5, a6, a7, a8, (uint64_t)v11);
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t WebRtcOpus_Decode(uint64_t a1, unsigned __int8 *a2, unint64_t a3, _WORD *a4, _WORD *a5)
{
  int v8;
  int8x16_t *v9;
  uint64_t result;
  _BOOL4 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int8x16_t *v17;

  if (!a3)
  {
    v12 = *(_DWORD *)(a1 + 32);
    if (v12)
      LOWORD(v12) = 2;
    else
      *(_DWORD *)(a1 + 32) = 0;
    *a5 = v12;
    v13 = *(_DWORD *)(a1 + 36) / 1000;
    if (*(_BYTE *)(a1 + 20))
    {
      v14 = *(_DWORD *)(a1 + 16);
      v15 = 120 * v13;
      if (v14 >= v15)
        v16 = v15;
      else
        v16 = v14;
      v17 = *(int8x16_t **)a1;
      if (*(_QWORD *)a1)
      {
LABEL_16:
        result = opus_decode(v17, 0, 0, a4, v16, 0);
        if ((int)result >= 1)
          goto LABEL_17;
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      v16 = (10 * v13);
      v17 = *(int8x16_t **)a1;
      if (*(_QWORD *)a1)
        goto LABEL_16;
    }
    result = opus_multistream_decode_native(*(int **)(a1 + 8), 0, 0, (uint64_t)a4, (uint64_t)opus_copy_channel_out_short, v16, 0, 1, 0);
    if ((int)result >= 1)
    {
LABEL_17:
      if (!*(_DWORD *)(a1 + 32))
        *(_DWORD *)(a1 + 32) = 0;
      goto LABEL_19;
    }
    return 0xFFFFFFFFLL;
  }
  v8 = *(_DWORD *)(a1 + 36) / 1000;
  v9 = *(int8x16_t **)a1;
  if (!*(_QWORD *)a1)
  {
    result = opus_multistream_decode_native(*(int **)(a1 + 8), a2, a3, (uint64_t)a4, (uint64_t)opus_copy_channel_out_short, (120 * v8), 0, 1, 0);
    if ((int)result >= 1)
      goto LABEL_4;
    return 0xFFFFFFFFLL;
  }
  result = opus_decode(v9, a2, a3, a4, 120 * v8, 0);
  if ((int)result < 1)
    return 0xFFFFFFFFLL;
LABEL_4:
  v11 = a3 < 3;
  *(_DWORD *)(a1 + 32) = v11;
  *a5 = 2 * v11;
LABEL_19:
  if (*(_BYTE *)(a1 + 20))
    *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t WebRtcOpus_DecodeFec(uint64_t a1, unsigned __int8 *a2, unint64_t a3, _WORD *a4, __int16 *a5)
{
  uint64_t result;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int8x16_t *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  result = WebRtcOpus_PacketHasFec(a2, a3);
  if ((_DWORD)result)
  {
    v11 = *(_DWORD *)(a1 + 36);
    v12 = *a2;
    if ((char)*a2 < 0)
    {
      v23 = 1374389535 * (v11 << ((*a2 >> 3) & 3));
      v19 = (v23 >> 39) + ((unint64_t)v23 >> 63);
      v20 = *(int8x16_t **)a1;
      if (*(_QWORD *)a1)
        goto LABEL_12;
    }
    else
    {
      v13 = 1374389535 * (v11 << ((*a2 >> 3) & 3));
      v14 = (v13 >> 37) + ((unint64_t)v13 >> 63);
      if (((v12 >> 3) & 3) == 3)
        v15 = 60 * v11 / 1000;
      else
        v15 = v14;
      v16 = 1374389535 * v11;
      v17 = (v16 >> 37) + ((unint64_t)v16 >> 63);
      v18 = (v16 >> 36) + ((unint64_t)v16 >> 63);
      if ((v12 & 8) == 0)
        v18 = v17;
      if ((~v12 & 0x60) != 0)
        v19 = v15;
      else
        v19 = v18;
      v20 = *(int8x16_t **)a1;
      if (*(_QWORD *)a1)
      {
LABEL_12:
        result = opus_decode(v20, a2, a3, a4, v19, 1);
        if ((int)result >= 1)
          goto LABEL_13;
        return 0xFFFFFFFFLL;
      }
    }
    result = opus_multistream_decode_native(*(int **)(a1 + 8), a2, a3, (uint64_t)a4, (uint64_t)opus_copy_channel_out_short, v19, 1, 1, 0);
    if ((int)result >= 1)
    {
LABEL_13:
      if (a3)
      {
        if (a3 < 3)
        {
          v21 = 2;
          v22 = 1;
LABEL_23:
          *(_DWORD *)(a1 + 32) = v22;
          goto LABEL_24;
        }
      }
      else if (*(_DWORD *)(a1 + 32))
      {
        v21 = 2;
LABEL_24:
        *a5 = v21;
        return result;
      }
      v22 = 0;
      v21 = 0;
      goto LABEL_23;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

BOOL WebRtcOpus_PacketHasFec(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  int v6;
  char v7;
  unsigned int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _OWORD v16[24];
  int16x8_t v17[6];
  uint64_t v18;

  v2 = 0;
  v18 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a2)
    return v2;
  v3 = (char)*a1;
  if (v3 < 0)
    return 0;
  v4 = *a1;
  if ((~v4 & 0x60) != 0)
  {
    v6 = (v4 >> 3) & 3;
    if (v6 == 3)
    {
      v7 = 4;
      goto LABEL_19;
    }
    v5 = (42949673 * (unint64_t)(48000 << v6)) >> 32;
  }
  else if ((v3 & 8) != 0)
  {
    LOWORD(v5) = 960;
  }
  else
  {
    LOWORD(v5) = 480;
  }
  v8 = (unsigned __int16)v5 / 0x30u;
  if (v8 == 10 || v8 == 20)
  {
    v7 = 2;
    goto LABEL_19;
  }
  if (v8 != 40)
    return 0;
  v7 = 3;
LABEL_19:
  memset(&v16[22], 0, 32);
  if ((v4 & 4) != 0)
    v10 = 2;
  else
    v10 = 1;
  memset(v16, 0, 352);
  v11 = opus_packet_parse_impl(a1, a2, 0, 0, (char **)v16, v17, 0, 0);
  v2 = 0;
  if ((v11 & 0x80000000) == 0 && v17[0].i16[0] >= 1)
  {
    v12 = (0x80u >> (v7 - 1)) & **(_BYTE **)&v16[0];
    if (v12)
      v13 = 0;
    else
      v13 = v10;
    if (!v12 && (v4 & 4) != 0)
    {
      v14 = (0x80u >> (2 * v7 - 1)) & **(_BYTE **)&v16[0];
      if (v14)
        v13 = 1;
      else
        v13 = v10;
      if (!v14 && (v4 & 4) == 0)
      {
        if (((**(_BYTE **)&v16[0] << (3 * v7 - 1)) & 0x80) != 0)
          v13 = 2;
        else
          v13 = 3;
      }
    }
    return v13 < v10;
  }
  return v2;
}

double dcsctp::OutOfResourceErrorCause::SerializeTo(uint64_t a1, uint64_t a2)
{
  char *v3;
  unint64_t v4;
  double result;

  v3 = *(char **)a2;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v4 > 0xFFFFFFFFFFFFFFFBLL)
  {
    *(_QWORD *)(a2 + 8) = &v3[v4 + 4];
    result = 2.0542726e-289;
    *(_DWORD *)&v3[v4] = 67109888;
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 4uLL);
    result = 2.0542726e-289;
    *(_DWORD *)(*(_QWORD *)a2 + v4) = 67109888;
  }
  return result;
}

void dcsctp::OutOfResourceErrorCause::ToString(char *a1@<X8>)
{
  a1[23] = 15;
  if (a1 <= "Out Of Resource" && a1 + 15 > "Out Of Resource")
    __break(1u);
  else
    strcpy(a1, "Out Of Resource");
}

void dcsctp::OutgoingSSNResetRequestParameter::Parse(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int16 *v3;
  int v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  char *v36;
  unint64_t v37;
  __int128 v38;
  __int16 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;

  if (a2)
    v3 = a1;
  else
    v3 = 0;
  if (a2 < 0x10
    || __rev16(*v3) != 13
    || (v4 = *((unsigned __int8 *)v3 + 3), (v4 & 1) != 0)
    || ((v5 = v4 | (*((unsigned __int8 *)v3 + 2) << 8), v5 >= 0x10) ? (v6 = a2 >= v5) : (v6 = 0),
        v6 ? (v7 = a2 - v5 >= 4) : (v7 = 1),
        v7))
  {
    v12 = 0;
    *a3 = 0;
    goto LABEL_17;
  }
  v46 = a3;
  v44 = *((_DWORD *)v3 + 2);
  v45 = *((_DWORD *)v3 + 1);
  v43 = *((_DWORD *)v3 + 3);
  v8 = v5 - 16;
  if (v5 - 16 >= 2)
  {
    v13 = v8 >> 1;
    v11 = (char *)operator new(v8 & 0xFFFFFFFFFFFFFFFELL);
    v18 = 0;
    v19 = (v5 - 15) >> 1;
    v20 = v11;
    v9 = &v11[2 * v13];
    v47 = v19;
    v48 = v5;
    while (1)
    {
      while (1)
      {
        if (2 * v18 + 18 > v5)
          goto LABEL_52;
        if (v18 == v19)
          goto LABEL_51;
        v21 = 2 * v18 + 16;
        v22 = v5 - v21;
        if (v5 - v21 >= 2)
          v22 = 2;
        if (v22 <= 1)
        {
LABEL_51:
          rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 55, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v14, v15, v16, v17, v42);
LABEL_52:
          rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 80, "FixedSize + variable_offset + SubSize <= data_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v14, v15, v16, v17, v42);
LABEL_53:
          abort();
        }
        v23 = bswap32(*(unsigned __int16 *)((char *)v3 + v21)) >> 16;
        if (v20 >= v9)
          break;
        *(_WORD *)v20 = v23;
        v20 += 2;
        v10 = v20;
        if (++v18 == v13)
          goto LABEL_50;
      }
      v24 = v20 - v11;
      if (v20 - v11 <= -3)
        goto LABEL_53;
      v25 = v24 >> 1;
      if (v9 - v11 <= (unint64_t)((v24 >> 1) + 1))
        v26 = v25 + 1;
      else
        v26 = v9 - v11;
      if ((unint64_t)(v9 - v11) >= 0x7FFFFFFFFFFFFFFELL)
        v26 = 0x7FFFFFFFFFFFFFFFLL;
      if (!v26)
      {
        __break(1u);
LABEL_55:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
      if (v26 < 0)
        goto LABEL_55;
      v27 = 2 * v26;
      v28 = operator new(2 * v26);
      v29 = &v28[2 * v25];
      *(_WORD *)v29 = v23;
      v10 = v29 + 2;
      if (v20 != v11)
      {
        v30 = v20 - v11 - 2;
        if (v30 >= 0x5E)
        {
          v32 = (v20 - 2 - v11) & 0xFFFFFFFFFFFFFFFELL;
          if (&v28[(v24 & 0xFFFFFFFFFFFFFFFELL) - 2 - v32] > &v28[(v24 & 0xFFFFFFFFFFFFFFFELL) - 2])
          {
            v31 = v20;
          }
          else if (&v20[-v32 - 2] > v20 - 2)
          {
            v31 = v20;
          }
          else if ((unint64_t)(&v20[-(v24 & 0xFFFFFFFFFFFFFFFELL)] - v28) >= 0x20)
          {
            v33 = (v30 >> 1) + 1;
            v34 = 2 * (v33 & 0xFFFFFFFFFFFFFFF0);
            v31 = &v20[-v34];
            v29 -= v34;
            v35 = &v28[2 * v25 - 16];
            v36 = v20 - 16;
            v37 = v33 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v38 = *(_OWORD *)v36;
              *(v35 - 1) = *((_OWORD *)v36 - 1);
              *v35 = v38;
              v35 -= 2;
              v36 -= 32;
              v37 -= 16;
            }
            while (v37);
            if (v33 == (v33 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_47;
          }
          else
          {
            v31 = v20;
          }
        }
        else
        {
          v31 = v20;
        }
        do
        {
          v39 = *((_WORD *)v31 - 1);
          v31 -= 2;
          *((_WORD *)v29 - 1) = v39;
          v29 -= 2;
        }
        while (v31 != v11);
      }
LABEL_47:
      v9 = &v28[v27];
      if (v11)
      {
        v40 = v11;
        v41 = v10;
        operator delete(v40);
        v10 = v41;
      }
      v11 = v29;
      v19 = v47;
      v5 = v48;
      ++v18;
      v20 = v10;
      if (v18 == v13)
        goto LABEL_50;
    }
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
LABEL_50:
  a3 = v46;
  *(_QWORD *)v46 = &off_24C0B8218;
  *((_DWORD *)v46 + 2) = bswap32(v45);
  *((_DWORD *)v46 + 3) = bswap32(v44);
  *((_DWORD *)v46 + 4) = bswap32(v43);
  *((_QWORD *)v46 + 3) = v11;
  *((_QWORD *)v46 + 4) = v10;
  v12 = 1;
  *((_QWORD *)v46 + 5) = v9;
LABEL_17:
  a3[48] = v12;
}

void dcsctp::OutgoingSSNResetRequestParameter::~OutgoingSSNResetRequestParameter(dcsctp::OutgoingSSNResetRequestParameter *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0B8218;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0B8218;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::OutgoingSSNResetRequestParameter::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  std::string *v20;
  uint64_t v21;

  v10 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v13 = v10 + 16;
  v14 = v12 + v10 + 16;
  if (v12 >= v14)
  {
    if (v12 > v14)
      *(_QWORD *)(a2 + 8) = &v11[v14];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v10 + 16);
    v11 = *(char **)a2;
  }
  v15 = &v11[v12];
  *(_WORD *)v15 = 3328;
  v15[2] = BYTE1(v13);
  v15[3] = v13;
  if (v10 >= 0xFFFFFFFFFFFFFFF0)
  {
LABEL_14:
    v20 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v21);
    dcsctp::OutgoingSSNResetRequestParameter::ToString((dcsctp::OutgoingSSNResetRequestParameter *)v20);
    return;
  }
  v16 = (_DWORD *)(*(_QWORD *)a2 + v12);
  v16[1] = bswap32(*(_DWORD *)(a1 + 8));
  v16[2] = bswap32(*(_DWORD *)(a1 + 12));
  v16[3] = bswap32(*(_DWORD *)(a1 + 16));
  v17 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) != v17)
  {
    v18 = 0;
    for (i = 16; i + 2 <= v13; i += 2)
    {
      if (v13 <= i || v10 <= 1)
        goto LABEL_14;
      *(_WORD *)((char *)v16 + i) = bswap32(*(unsigned __int16 *)(v17 + 2 * v18++)) >> 16;
      v17 = *(_QWORD *)(a1 + 24);
      v10 -= 2;
      if (v18 >= (*(_QWORD *)(a1 + 32) - v17) >> 1)
        return;
    }
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 84, "FixedSize + variable_offset + SubSize <= data_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v21);
    goto LABEL_14;
  }
}

std::string *dcsctp::OutgoingSSNResetRequestParameter::ToString@<X0>(dcsctp::OutgoingSSNResetRequestParameter *this@<X0>, std::string *a2@<X8>)
{
  std::string *result;
  std::string *v5;
  int v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v11;
  std::string *v12;
  int v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v18;
  std::string v19;

  result = (std::string *)operator new(0x30uLL);
  if (result > (std::string *)"Outgoing SSN Reset Request, req_seq_nbr="
    || &result[1].__r_.__value_.__r.__words[2] <= (std::string::size_type *)"Outgoing SSN Reset Request, req_seq_nbr=")
  {
    strcpy((char *)result, "Outgoing SSN Reset Request, req_seq_nbr=");
    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)result;
    *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_208F086B0;
    result = rtc::StringBuilder::operator<<(&v19, *((_DWORD *)this + 2));
    v5 = result;
    v6 = SHIBYTE(result->__r_.__value_.__r.__words[2]);
    if (v6 >= 0)
      v7 = 22;
    else
      v7 = (result->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v6 >= 0)
      size = HIBYTE(result->__r_.__value_.__r.__words[2]);
    else
      size = result->__r_.__value_.__l.__size_;
    if (v7 - size >= 0xF)
    {
      if (v6 >= 0)
        v9 = result;
      else
        v9 = (std::string *)result->__r_.__value_.__r.__words[0];
      if ((char *)v9 + size <= ", resp_seq_nbr="
        && (char *)&v9->__r_.__value_.__r.__words[1] + size + 7 > ", resp_seq_nbr=")
      {
        goto LABEL_42;
      }
      qmemcpy((char *)v9 + size, ", resp_seq_nbr=", 15);
      v11 = size + 15;
      if (SHIBYTE(result->__r_.__value_.__r.__words[2]) < 0)
        result->__r_.__value_.__l.__size_ = v11;
      else
        *((_BYTE *)&result->__r_.__value_.__s + 23) = v11 & 0x7F;
      v9->__r_.__value_.__s.__data_[v11] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(result, v7, size - v7 + 15, size, size, 0, 0xFuLL, ", resp_seq_nbr=");
    }
    result = rtc::StringBuilder::operator<<(v5, *((_DWORD *)this + 3));
    v12 = result;
    v13 = SHIBYTE(result->__r_.__value_.__r.__words[2]);
    if (v13 >= 0)
      v14 = 22;
    else
      v14 = (result->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v13 >= 0)
      v15 = HIBYTE(result->__r_.__value_.__r.__words[2]);
    else
      v15 = result->__r_.__value_.__l.__size_;
    if (v14 - v15 < 0x16)
    {
      std::string::__grow_by_and_replace(result, v14, v15 - v14 + 22, v15, v15, 0, 0x16uLL, ", sender_last_asg_tsn=");
LABEL_41:
      result = rtc::StringBuilder::operator<<(v12, *((_DWORD *)this + 4));
      *a2 = v19;
      return result;
    }
    if (v13 >= 0)
      v16 = result;
    else
      v16 = (std::string *)result->__r_.__value_.__r.__words[0];
    if ((char *)v16 + v15 > ", sender_last_asg_tsn="
      || (char *)&v16->__r_.__value_.__r.__words[2] + v15 + 6 <= ", sender_last_asg_tsn=")
    {
      qmemcpy((char *)v16 + v15, ", sender_last_asg_tsn=", 22);
      v18 = v15 + 22;
      if (SHIBYTE(result->__r_.__value_.__r.__words[2]) < 0)
        result->__r_.__value_.__l.__size_ = v18;
      else
        *((_BYTE *)&result->__r_.__value_.__s + 23) = v18 & 0x7F;
      v16->__r_.__value_.__s.__data_[v18] = 0;
      goto LABEL_41;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *std::set<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>>::insert[abi:sn180100]<std::__tree_const_iterator<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,std::__tree_node<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,void *> *,long>>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = std::__tree<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>>::__find_equal<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>>(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6[4];
        v12 = v18[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = v12;
        *v10 = v11;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v14 = *v10;
        }
        else
        {
          v14 = v11;
        }
        result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v7[1], v14);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

void dcsctp::OutstandingData::HandleSack(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL i;

  *(_QWORD *)a6 = 0;
  *(_BYTE *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = a2;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  dcsctp::OutstandingData::RemoveAcked(a1, a2, (_QWORD *)a6);
  if (a4)
    v12 = a3;
  else
    v12 = 0;
  dcsctp::OutstandingData::AckGapBlocks(a1, a2, v12, a4, (_QWORD *)a6);
  v13 = *(_QWORD *)(a6 + 16);
  if (a5 && *(_QWORD *)(a1 + 8) < a2)
  {
    if (a4)
      v14 = a3[2 * a4 - 1];
    else
      v14 = 0;
    v13 = v14 + a2;
  }
  if (a4)
  {
    v15 = &v12[2 * a4];
    v16 = a5 ^ 1;
    v17 = *(unsigned __int8 *)(a6 + 8);
    v18 = a2;
    do
    {
      v19 = *a3 + a2;
      v20 = v18 + 1;
      for (i = v18 + 1 < v19 && v18 < v13; i; i = v20++ < v13)
      {
        v17 |= dcsctp::OutstandingData::NackItem(a1, v20, 0, v16);
        *(_BYTE *)(a6 + 8) = v17;
        if (v20 + 1 >= v19)
          break;
      }
      v18 = a3[1] + a2;
      a3 += 2;
    }
    while (a3 != v15);
  }
}

void dcsctp::OutstandingData::RemoveAcked(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  int v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  char *v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t **v93;

  v3 = a2;
  if (*(_QWORD *)(a1 + 88))
  {
    v6 = *(_QWORD *)(a1 + 8);
    v93 = (uint64_t **)(a1 + 144);
    while (1)
    {
      if (v6 >= v3)
        goto LABEL_86;
      v7 = *(_QWORD *)(a1 + 80);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v7 / 0x2E));
      v9 = v7 % 0x2E;
      v10 = v8 + 88 * (v7 % 0x2E);
      v13 = *(unsigned __int8 *)(v10 + 19);
      v12 = (_BYTE *)(v10 + 19);
      v11 = v13;
      if (v13 != 1)
        break;
LABEL_33:
      v35 = *(_QWORD *)(v8 + 88 * v9 + 32);
      if (v35)
      {
        if (*(_BYTE *)(v8 + 88 * v9 + 18) == 2)
        {
          v37 = (char *)a3[7];
          v36 = a3[8];
          if ((unint64_t)v37 < v36)
          {
            if (!v37)
              goto LABEL_99;
            *(_QWORD *)v37 = v35;
            a3[7] = v37 + 8;
            goto LABEL_81;
          }
          v41 = (char *)a3[6];
          v42 = (v37 - v41) >> 3;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61)
            goto LABEL_101;
          v44 = v36 - (_QWORD)v41;
          if (v44 >> 2 > v43)
            v43 = v44 >> 2;
          v45 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8;
          v46 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v45)
            v46 = v43;
          if (!v46)
            goto LABEL_99;
          if (v46 >> 61)
            goto LABEL_100;
          v47 = 8 * v46;
          v48 = (char *)operator new(8 * v46);
          v49 = &v48[8 * v42];
          *(_QWORD *)v49 = v35;
          v50 = v49 + 8;
          if (v37 == v41)
          {
            v3 = a2;
          }
          else
          {
            v51 = v37 - v41 - 8;
            if (v51 < 0x58)
            {
              v3 = a2;
              goto LABEL_67;
            }
            v3 = a2;
            if ((unint64_t)(v41 - v48) < 0x20)
              goto LABEL_104;
            v61 = (v51 >> 3) + 1;
            v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = &v37[-v62];
            v49 -= v62;
            v64 = &v48[8 * v42 - 16];
            v65 = v37 - 16;
            v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v67 = *(_OWORD *)v65;
              *((_OWORD *)v64 - 1) = *((_OWORD *)v65 - 1);
              *(_OWORD *)v64 = v67;
              v64 -= 32;
              v65 -= 32;
              v66 -= 4;
            }
            while (v66);
            v37 = v63;
            if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_104:
              do
              {
LABEL_67:
                v68 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v49 - 1) = v68;
                v49 -= 8;
              }
              while (v37 != v41);
            }
            v37 = v41;
          }
          a3[6] = v49;
          a3[7] = v50;
          a3[8] = &v48[v47];
          if (v37)
            operator delete(v37);
          a3[7] = v50;
          goto LABEL_81;
        }
        v39 = (char *)a3[4];
        v38 = a3[5];
        if ((unint64_t)v39 < v38)
        {
          if (!v39)
            goto LABEL_99;
          *(_QWORD *)v39 = v35;
          v40 = v39 + 8;
          goto LABEL_80;
        }
        v52 = (char *)a3[3];
        v53 = (v39 - v52) >> 3;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61)
LABEL_101:
          abort();
        v55 = v38 - (_QWORD)v52;
        if (v55 >> 2 > v54)
          v54 = v55 >> 2;
        v45 = (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8;
        v56 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v45)
          v56 = v54;
        if (!v56)
          goto LABEL_99;
        if (v56 >> 61)
          goto LABEL_100;
        v57 = 8 * v56;
        v58 = (char *)operator new(8 * v56);
        v59 = &v58[8 * v53];
        *(_QWORD *)v59 = v35;
        v40 = v59 + 8;
        if (v39 == v52)
        {
          v3 = a2;
        }
        else
        {
          v60 = v39 - v52 - 8;
          if (v60 < 0x58)
          {
            v3 = a2;
            goto LABEL_76;
          }
          v3 = a2;
          if ((unint64_t)(v52 - v58) < 0x20)
            goto LABEL_105;
          v69 = (v60 >> 3) + 1;
          v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
          v71 = &v39[-v70];
          v59 -= v70;
          v72 = &v58[8 * v53 - 16];
          v73 = (__int128 *)(v39 - 16);
          v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v75 = *v73;
            *((_OWORD *)v72 - 1) = *(v73 - 1);
            *(_OWORD *)v72 = v75;
            v72 -= 32;
            v73 -= 2;
            v74 -= 4;
          }
          while (v74);
          v39 = v71;
          if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_105:
            do
            {
LABEL_76:
              v76 = *((_QWORD *)v39 - 1);
              v39 -= 8;
              *((_QWORD *)v59 - 1) = v76;
              v59 -= 8;
            }
            while (v39 != v52);
          }
          v39 = v52;
        }
        a3[3] = v59;
        a3[4] = v40;
        a3[5] = &v58[v57];
        if (v39)
          operator delete(v39);
LABEL_80:
        a3[4] = v40;
      }
LABEL_81:
      v77 = *(_QWORD *)(a1 + 80);
      v78 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v77 / 0x2E));
      if (!v78)
        goto LABEL_99;
      v79 = *(void **)(v78 + 88 * (v77 % 0x2E) + 56);
      if (v79)
      {
        *(_QWORD *)(v78 + 88 * (v77 % 0x2E) + 64) = v79;
        operator delete(v79);
        v77 = *(_QWORD *)(a1 + 80);
      }
      v80 = *(_QWORD *)(a1 + 88) - 1;
      v81 = v77 + 1;
      *(_QWORD *)(a1 + 80) = v81;
      *(_QWORD *)(a1 + 88) = v80;
      if (v81 >= 0x5C)
      {
        operator delete(**(void ***)(a1 + 56));
        *(_QWORD *)(a1 + 56) += 8;
        v80 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 80) -= 46;
      }
      v6 = *(_QWORD *)(a1 + 8) + 1;
      *(_QWORD *)(a1 + 8) = v6;
      if (!v80)
        goto LABEL_86;
    }
    v14 = (*(_QWORD *)a1 + *(_QWORD *)(v8 + 88 * v9 + 64) - *(_QWORD *)(v8 + 88 * v9 + 56) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    *a3 += v14;
    if (v11)
    {
      v15 = v6 + 1;
      v16 = v8 + 88 * v9;
      v19 = *(unsigned __int8 *)(v16 + 18);
      v18 = (_BYTE *)(v16 + 18);
      v17 = v19;
      if (v19 != 1)
        goto LABEL_8;
    }
    else
    {
      v20.i64[1] = -1;
      v20.i64[0] = v14;
      v21 = *(int64x2_t *)(a1 + 96);
      v20.i64[0] = vsubq_s64(v21, v20).u64[0];
      v22.i64[0] = -1;
      v22.i64[1] = -1;
      v20.i64[1] = vaddq_s64(v21, v22).i64[1];
      *(int64x2_t *)(a1 + 96) = v20;
      v15 = v6 + 1;
      v23 = v8 + 88 * v9;
      v24 = *(unsigned __int8 *)(v23 + 18);
      v18 = (_BYTE *)(v23 + 18);
      v17 = v24;
      if (v24 != 1)
      {
LABEL_8:
        if (v17 == 2)
          goto LABEL_30;
        goto LABEL_29;
      }
    }
    v25 = *v93;
    if (*v93)
    {
      v26 = (uint64_t *)v93;
      v27 = *v93;
      do
      {
        v28 = v27[4];
        v29 = v28 <= v6;
        if (v28 <= v6)
          v30 = (uint64_t **)(v27 + 1);
        else
          v30 = (uint64_t **)v27;
        if (!v29)
          v26 = v27;
        v27 = *v30;
      }
      while (*v30);
      if (v26 != (uint64_t *)v93 && v26[4] <= v15)
      {
        v31 = (uint64_t *)v26[1];
        v32 = v26;
        if (v31)
        {
          do
          {
            v33 = v31;
            v31 = (uint64_t *)*v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            v33 = (uint64_t *)v32[2];
            v90 = *v33 == (_QWORD)v32;
            v32 = v33;
          }
          while (!v90);
        }
        if (*(uint64_t **)(a1 + 136) == v26)
          *(_QWORD *)(a1 + 136) = v33;
        --*(_QWORD *)(a1 + 152);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v25, v26);
        operator delete(v26);
        if (*v18 == 2)
          goto LABEL_30;
      }
    }
LABEL_29:
    *v18 = 0;
LABEL_30:
    *v12 = 1;
    v34 = a3[2];
    if (v34 <= v15)
      v34 = v15;
    a3[2] = v34;
    goto LABEL_33;
  }
LABEL_86:
  v83 = *(char **)(a1 + 160);
  v82 = *(_BYTE **)(a1 + 168);
  if (v82 != v83)
  {
    v84 = (v82 - v83) >> 3;
    v85 = *(char **)(a1 + 160);
    do
    {
      v86 = v84 >> 1;
      v87 = &v85[8 * (v84 >> 1)];
      v89 = *(_QWORD *)v87;
      v88 = v87 + 8;
      v84 += ~(v84 >> 1);
      if (v3 + 1 < v89)
        v84 = v86;
      else
        v85 = v88;
    }
    while (v84);
    v90 = v85 == v83;
    if (v85 - v83 >= 0)
      goto LABEL_93;
LABEL_99:
    __break(1u);
LABEL_100:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v85 = *(char **)(a1 + 168);
  v90 = v82 == v83;
  if (v82 - v83 < 0)
    goto LABEL_99;
LABEL_93:
  if (!v90)
  {
    v91 = v82 - v85;
    if (v82 != v85)
      memmove(*(void **)(a1 + 160), v85, v82 - v85);
    *(_QWORD *)(a1 + 168) = &v83[v91];
  }
}

void dcsctp::OutstandingData::AckGapBlocks(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, _QWORD *a5)
{
  unsigned __int16 *v6;
  uint64_t **v8;
  int64x2_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  _BYTE *v30;
  int v31;
  int64x2_t v32;
  int64x2_t v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  unsigned __int16 *v45;
  uint64_t v46;

  if (a4)
  {
    v6 = a3;
    v8 = (uint64_t **)(a1 + 144);
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    v10 = &a3[2 * a4];
    v45 = v10;
    v46 = a2;
    while (1)
    {
      v11 = *v6;
      v12 = v6[1];
      if (v11 <= v12)
        break;
LABEL_3:
      v6 += 2;
      if (v6 == v10)
        return;
    }
    v13 = v12 + a2;
    v14 = v11 + a2;
    if (v11 + a2 <= v13)
      v15 = v13;
    else
      v15 = v11 + a2;
    while (1)
    {
      v18 = *(_QWORD *)(a1 + 8);
      v19 = v14 - v18;
      if (v14 <= v18 || v14 >= v18 + *(int *)(a1 + 88) + 1)
        goto LABEL_12;
      if (v19 < 0)
        LODWORD(v19) = v18 - v14;
      v20 = *(_QWORD *)(a1 + 80) + (int)v19 - 1;
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v20 / 0x2E));
      v22 = v20 % 0x2E;
      v23 = v21 + 88 * v22;
      v26 = *(unsigned __int8 *)(v23 + 19);
      v25 = (_BYTE *)(v23 + 19);
      v24 = v26;
      if (v26 == 1)
        goto LABEL_12;
      v27 = (*(_QWORD *)a1 + *(_QWORD *)(v21 + 88 * v22 + 64) - *(_QWORD *)(v21 + 88 * v22 + 56) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      *a5 += v27;
      if (v24)
      {
        v28 = v21 + 88 * v22;
        v31 = *(unsigned __int8 *)(v28 + 18);
        v30 = (_BYTE *)(v28 + 18);
        v29 = v31;
        if (v31 != 1)
          goto LABEL_20;
      }
      else
      {
        v32.i64[1] = -1;
        v32.i64[0] = v27;
        v33 = *(int64x2_t *)(a1 + 96);
        v32.i64[0] = vsubq_s64(v33, v32).u64[0];
        v32.i64[1] = vaddq_s64(v33, v9).i64[1];
        *(int64x2_t *)(a1 + 96) = v32;
        v34 = v21 + 88 * v22;
        v35 = *(unsigned __int8 *)(v34 + 18);
        v30 = (_BYTE *)(v34 + 18);
        v29 = v35;
        if (v35 != 1)
        {
LABEL_20:
          if (v29 == 2)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
      v36 = *v8;
      if (*v8)
      {
        v37 = (uint64_t *)v8;
        v38 = *v8;
        do
        {
          v39 = v38[4];
          v40 = v39 < v14;
          if (v39 >= v14)
            v41 = (uint64_t **)v38;
          else
            v41 = (uint64_t **)(v38 + 1);
          if (!v40)
            v37 = v38;
          v38 = *v41;
        }
        while (*v41);
        if (v37 != (uint64_t *)v8 && v37[4] <= v14)
        {
          v42 = (uint64_t *)v37[1];
          v43 = v37;
          if (v42)
          {
            do
            {
              v44 = v42;
              v42 = (uint64_t *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v44 = (uint64_t *)v43[2];
              v17 = *v44 == (_QWORD)v43;
              v43 = v44;
            }
            while (!v17);
          }
          if (*(uint64_t **)(a1 + 136) == v37)
            *(_QWORD *)(a1 + 136) = v44;
          --*(_QWORD *)(a1 + 152);
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v36, v37);
          operator delete(v37);
          v10 = v45;
          a2 = v46;
          v9.i64[0] = -1;
          v9.i64[1] = -1;
          if (*v30 == 2)
            goto LABEL_9;
        }
      }
LABEL_8:
      *v30 = 0;
LABEL_9:
      *v25 = 1;
      v16 = a5[2];
      if (v16 <= v14)
        v16 = v14;
      a5[2] = v16;
LABEL_12:
      v17 = v14++ == v15;
      if (v17)
        goto LABEL_3;
    }
  }
}

uint64_t dcsctp::OutstandingData::NackItem(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  char v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;

  v6 = a2 - *(_QWORD *)(a1 + 8);
  if (v6 < 0)
    v6 = *(_QWORD *)(a1 + 8) - a2;
  v7 = *(_QWORD *)(a1 + 80) + (int)v6 - 1;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v7 / 0x2E));
  v9 = v7 % 0x2E;
  v10 = v8 + 88 * v9;
  if (!*(_BYTE *)(v10 + 19))
  {
    v11 = *(int64x2_t *)(a1 + 96);
    v12.i64[1] = -1;
    v12.i64[0] = (*(_QWORD *)a1 + *(_QWORD *)(v8 + 88 * v9 + 64) - *(_QWORD *)(v8 + 88 * v9 + 56) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v13.i64[0] = -1;
    v13.i64[1] = -1;
    v12.i64[0] = vsubq_s64(v11, v12).u64[0];
    v12.i64[1] = vaddq_s64(v11, v13).i64[1];
    *(int64x2_t *)(a1 + 96) = v12;
  }
  *(_BYTE *)(v10 + 19) = 2;
  v14 = v8 + 88 * v9;
  v16 = *(unsigned __int8 *)(v14 + 18);
  v15 = (char *)(v14 + 18);
  v17 = ++v15[2];
  v18 = v16 - 3;
  if (v17 > 2)
    a3 = 1;
  if (v18 < 0xFFFFFFFE)
    v20 = a3;
  else
    v20 = 0;
  if ((_DWORD)v20 != 1)
    return v20;
  v21 = v8 + 88 * v9;
  v22 = *(unsigned __int16 *)(v21 + 22);
  LODWORD(v21) = *(unsigned __int16 *)(v21 + 16);
  v23 = v22 >= v21;
  if (v22 < v21)
    v24 = 1;
  else
    v24 = 2;
  *v15 = v24;
  if (v23)
  {
    dcsctp::OutstandingData::AbandonAllFor((_QWORD *)a1, (int *)v10);
    return v20;
  }
  if (a4)
  {
    v26 = (uint64_t **)(a1 + 120);
    v25 = *(uint64_t **)(a1 + 120);
    if (!v25)
    {
      v27 = (uint64_t **)(a1 + 120);
LABEL_24:
      v29 = (uint64_t *)operator new(0x28uLL);
      v29[4] = a2;
      *v29 = 0;
      v29[1] = 0;
      v29[2] = (uint64_t)v27;
      *v26 = v29;
      v30 = **(_QWORD **)(a1 + 112);
      if (v30)
      {
        *(_QWORD *)(a1 + 112) = v30;
        v31 = *v26;
      }
      else
      {
        v31 = v29;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v31);
      ++*(_QWORD *)(a1 + 128);
      return v20;
    }
    while (1)
    {
      while (1)
      {
        v27 = (uint64_t **)v25;
        v28 = v25[4];
        if (v28 <= a2)
          break;
        v25 = *v27;
        v26 = v27;
        if (!*v27)
          goto LABEL_24;
      }
      if (v28 >= a2)
        return v20;
      v25 = v27[1];
      if (!v25)
      {
        v26 = v27 + 1;
        goto LABEL_24;
      }
    }
  }
  v34 = (uint64_t **)(a1 + 144);
  v33 = *(uint64_t **)(a1 + 144);
  if (v33)
  {
    while (1)
    {
      while (1)
      {
        v35 = (uint64_t **)v33;
        v36 = v33[4];
        if (v36 <= a2)
          break;
        v33 = *v35;
        v34 = v35;
        if (!*v35)
          goto LABEL_35;
      }
      if (v36 >= a2)
        return v20;
      v33 = v35[1];
      if (!v33)
      {
        v34 = v35 + 1;
        goto LABEL_35;
      }
    }
  }
  v35 = (uint64_t **)(a1 + 144);
LABEL_35:
  v37 = (uint64_t *)operator new(0x28uLL);
  v37[4] = a2;
  *v37 = 0;
  v37[1] = 0;
  v37[2] = (uint64_t)v35;
  *v34 = v37;
  v38 = **(_QWORD **)(a1 + 136);
  if (v38)
  {
    *(_QWORD *)(a1 + 136) = v38;
    v39 = *v34;
  }
  else
  {
    v39 = v37;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 144), v39);
  ++*(_QWORD *)(a1 + 152);
  return v20;
}

void dcsctp::OutstandingData::AbandonAllFor(_QWORD *a1, int *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  BOOL v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  __int16 v56;

  v3 = *a2;
  v56 = *((_WORD *)a2 + 20);
  v55 = v3;
  v4 = a1[5];
  if (!v4)
  {
    std::__throw_bad_function_call[abi:sn180100]();
    goto LABEL_67;
  }
  if (((*(uint64_t (**)(uint64_t, __int16 *, int *))(*(_QWORD *)v4 + 48))(v4, &v56, &v55) & 1) == 0)
  {
    v18 = a1[10];
    v23 = a1[7];
    if (a1[8] == v23)
      return;
    goto LABEL_17;
  }
  v6 = a1[7];
  v7 = a1[8];
  v8 = 46 * ((v7 - v6) >> 3) - 1;
  v9 = *((_WORD *)a2 + 20);
  v10 = *((_WORD *)a2 + 21);
  v11 = *(_QWORD *)(a2 + 11);
  v12 = a2[13];
  v13 = *((_BYTE *)a2 + 82);
  v14 = *a2;
  if (v7 == v6)
    v8 = 0;
  if (v8 == a1[11] + a1[10])
  {
    std::deque<dcsctp::OutstandingData::Item>::__add_back_capacity((uint64_t)(a1 + 6));
    v6 = a1[7];
    v7 = a1[8];
  }
  if (v7 == v6 || (v15 = a1[11] + a1[10], (v16 = *(_QWORD *)(v6 + 8 * (v15 / 0x2E))) == 0))
  {
LABEL_67:
    __break(1u);
    return;
  }
  v17 = v16 + 88 * (v15 % 0x2E);
  *(_DWORD *)v17 = v14;
  *(_WORD *)(v17 + 22) = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 13) = 0;
  *(_OWORD *)(v17 + 24) = xmmword_208F16BF0;
  *(_WORD *)(v17 + 40) = v9;
  *(_WORD *)(v17 + 42) = v10;
  *(_QWORD *)(v17 + 44) = v11;
  *(_DWORD *)(v17 + 52) = v12;
  *(_QWORD *)(v17 + 64) = 0;
  *(_QWORD *)(v17 + 72) = 0;
  *(_QWORD *)(v17 + 56) = 0;
  *(_WORD *)(v17 + 80) = 256;
  *(_BYTE *)(v17 + 82) = v13;
  v18 = a1[10];
  v19 = a1[11] + 1;
  a1[11] = v19;
  v20 = v18 + v19;
  v21 = (v18 + v19) / 0x2E;
  v23 = a1[7];
  v22 = a1[8];
  v24 = (_QWORD *)(v23 + 8 * v21);
  v25 = *v24 + 88 * (v20 - 46 * v21);
  if (v22 == v23)
    v25 = 0;
  if (v25 != *v24)
  {
    if (*(_BYTE *)(v25 - 70) == 2)
      goto LABEL_14;
    goto LABEL_13;
  }
  v25 = *(v24 - 1) + 4048;
  if (*(_BYTE *)(*(v24 - 1) + 3978) != 2)
LABEL_13:
    *(_BYTE *)(v25 - 70) = 0;
LABEL_14:
  *(_BYTE *)(v25 - 69) = 1;
  if (v22 == v23)
    return;
LABEL_17:
  v26 = *(_QWORD *)(v23 + 8 * (v18 / 0x2E));
  v27 = v26 + 88 * (v18 % 0x2E);
  v28 = *(_QWORD *)(v23 + 8 * ((a1[11] + v18) / 0x2E)) + 88 * ((a1[11] + v18) % 0x2E);
  if (v27 != v28)
  {
    v29 = a1[1];
    v30 = (uint64_t **)(a1 + 15);
    v31 = (uint64_t **)(a1 + 18);
    v32 = (uint64_t *)(v23 + 8 * (v18 / 0x2E));
    do
    {
      v33 = v29 + 1;
      v34 = *(unsigned __int8 *)(v27 + 18);
      if (v34 != 2 && *(unsigned __int16 *)(v27 + 40) == *((unsigned __int16 *)a2 + 20) && *(_DWORD *)v27 == *a2)
      {
        if (v34 == 1)
        {
          v35 = *v30;
          if (*v30)
          {
            v36 = a1 + 15;
            v37 = *v30;
            do
            {
              v38 = v37[4];
              v39 = v38 <= v29;
              if (v38 <= v29)
                v40 = (uint64_t **)(v37 + 1);
              else
                v40 = (uint64_t **)v37;
              if (!v39)
                v36 = v37;
              v37 = *v40;
            }
            while (*v40);
            if (v36 != (uint64_t *)v30 && v33 >= v36[4])
            {
              v41 = (uint64_t *)v36[1];
              v42 = v36;
              if (v41)
              {
                do
                {
                  v43 = v41;
                  v41 = (uint64_t *)*v41;
                }
                while (v41);
              }
              else
              {
                do
                {
                  v43 = (uint64_t *)v42[2];
                  v44 = *v43 == (_QWORD)v42;
                  v42 = v43;
                }
                while (!v44);
              }
              if ((uint64_t *)a1[14] == v36)
                a1[14] = v43;
              --a1[16];
              std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v35, v36);
              operator delete(v36);
            }
          }
          v45 = *v31;
          if (*v31)
          {
            v46 = a1 + 18;
            v47 = *v31;
            do
            {
              v48 = v47[4];
              v49 = v48 <= v29;
              if (v48 <= v29)
                v50 = (uint64_t **)(v47 + 1);
              else
                v50 = (uint64_t **)v47;
              if (!v49)
                v46 = v47;
              v47 = *v50;
            }
            while (*v50);
            if (v46 != (uint64_t *)v31 && v33 >= v46[4])
            {
              v51 = (uint64_t *)v46[1];
              v52 = v46;
              if (v51)
              {
                do
                {
                  v53 = v51;
                  v51 = (uint64_t *)*v51;
                }
                while (v51);
              }
              else
              {
                do
                {
                  v53 = (uint64_t *)v52[2];
                  v44 = *v53 == (_QWORD)v52;
                  v52 = v53;
                }
                while (!v44);
              }
              if ((uint64_t *)a1[17] == v46)
                a1[17] = v53;
              --a1[19];
              std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v45, v46);
              operator delete(v46);
            }
          }
        }
        *(_BYTE *)(v27 + 18) = 2;
        v26 = *v32;
      }
      v27 += 88;
      if (v27 - v26 == 4048)
      {
        v54 = v32[1];
        ++v32;
        v26 = v54;
        v27 = v54;
      }
      ++v29;
    }
    while (v27 != v28);
  }
}

void dcsctp::OutstandingData::ExtractChunksThatCanFit(int64x2_t *a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int64x2_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;
  uint64_t v25;
  int v26;
  size_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int16 v31;
  unint64_t v32;
  uint64_t **v33;
  char *v34;
  void *v35;
  int64x2_t v36;
  uint64_t *v37;
  uint64_t *v38;
  BOOL v39;
  int64x2_t v40;
  uint64_t *v41;
  int v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  void *__p[2];
  char *v50;
  __int16 v51;
  char v52;
  int v53[3];

  v4 = a1;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v7 = (uint64_t *)*a2;
  v5 = a2 + 1;
  v6 = v7;
  v40 = vdupq_n_s64(1uLL);
  v41 = v5;
  while (v6 != v5)
  {
    v10 = v6[4];
    v9 = v4->i64[0];
    v11 = v10 - v4->i64[1];
    if (v11 < 0)
      v11 = v4->i64[1] - v10;
    v12 = v4[5].i64[0] + (int)v11 - 1;
    v13 = *(_QWORD *)(v4[3].i64[1] + 8 * (v12 / 0x2E));
    v14 = v12 % 0x2E;
    v15 = v13 + 88 * (v12 % 0x2E);
    v17 = *(_BYTE **)(v15 + 56);
    v16 = *(_BYTE **)(v15 + 64);
    v18 = (&v16[v9] - v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (a3 >= v18)
    {
      v22 = v13 + 88 * v14;
      *(_WORD *)(v22 + 18) = 0;
      *(_BYTE *)(v22 + 20) = 0;
      ++*(_WORD *)(v22 + 22);
      v53[0] = v10;
      v23 = *(_WORD *)(v22 + 40);
      v24 = *(_WORD *)(v22 + 42);
      v25 = *(_QWORD *)(v22 + 44);
      v26 = *(_DWORD *)(v22 + 52);
      v27 = v16 - v17;
      v46 = v18;
      v47 = a3 - v18;
      if (v16 == v17)
      {
        v28 = 0;
        v29 = 0;
      }
      else
      {
        v45 = v10;
        if ((v27 & 0x8000000000000000) != 0)
          goto LABEL_31;
        v28 = (char *)operator new(v16 - v17);
        v29 = &v28[v27];
        memcpy(v28, v17, v27);
        LODWORD(v10) = v45;
      }
      v30 = v13 + 88 * v14;
      v31 = *(_WORD *)(v30 + 80);
      LOBYTE(v30) = *(_BYTE *)(v30 + 82);
      LOWORD(v48) = v23;
      WORD1(v48) = v24;
      *(_QWORD *)((char *)&v48 + 4) = v25;
      HIDWORD(v48) = v26;
      __p[0] = v28;
      __p[1] = v29;
      v50 = v29;
      v51 = v31;
      v52 = v30;
      v32 = *(_QWORD *)(a4 + 8);
      if (v32 >= *(_QWORD *)(a4 + 16))
      {
        v34 = std::vector<std::pair<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,dcsctp::Data>>::__emplace_back_slow_path<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,dcsctp::Data>((void **)a4, v53, (uint64_t)&v48);
        v35 = __p[0];
        *(_QWORD *)(a4 + 8) = v34;
        v33 = (uint64_t **)a2;
        v4 = a1;
        if (v35)
        {
          __p[1] = v35;
          operator delete(v35);
        }
      }
      else
      {
        v33 = (uint64_t **)a2;
        v4 = a1;
        if (!v32)
        {
          __break(1u);
LABEL_31:
          abort();
        }
        *(_DWORD *)v32 = v10;
        *(_OWORD *)(v32 + 8) = v48;
        *(_OWORD *)(v32 + 24) = *(_OWORD *)__p;
        *(_QWORD *)(v32 + 40) = v50;
        __p[0] = 0;
        __p[1] = 0;
        v50 = 0;
        *(_WORD *)(v32 + 48) = v51;
        *(_BYTE *)(v32 + 50) = v52;
        *(_QWORD *)(a4 + 8) = v32 + 56;
      }
      v36.i64[1] = v40.i64[1];
      v36.i64[0] = v46;
      v4[6] = vaddq_s64(v4[6], v36);
      v37 = (uint64_t *)v6[1];
      v38 = v6;
      if (v37)
      {
        do
        {
          v20 = v37;
          v37 = (uint64_t *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v20 = (uint64_t *)v38[2];
          v39 = *v20 == (_QWORD)v38;
          v38 = v20;
        }
        while (!v39);
      }
      if (*v33 == v6)
        *v33 = v20;
      v8 = v33[1];
      v33[2] = (uint64_t *)((char *)v33[2] - 1);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v8, v6);
      operator delete(v6);
      v9 = v4->i64[0];
      a3 = v47;
      v5 = v41;
    }
    else
    {
      v19 = (uint64_t *)v6[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v21 = v6;
          v6 = (uint64_t *)v6[2];
        }
        while ((uint64_t *)*v6 != v21);
        v20 = v6;
      }
    }
    v6 = v20;
    if (a3 <= v9)
      return;
  }
}

uint64_t dcsctp::OutstandingData::Insert(int64x2_t *a1, int a2, __int16 *a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v9;
  _BYTE *v10;
  int64x2_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  __int16 v37;
  __int16 v38;
  int v39;

  v10 = (_BYTE *)*((_QWORD *)a3 + 2);
  v9 = (_BYTE *)*((_QWORD *)a3 + 3);
  v36 = a1->i64[1];
  v11 = vdupq_n_s64(1uLL);
  v11.i64[0] = (&v9[a1->i64[0]] - v10 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  a1[6] = vaddq_s64(v11, a1[6]);
  v12 = a1[5].i64[1];
  v13 = *(_QWORD *)(a3 + 2);
  v14 = v9 - v10;
  v38 = a3[1];
  v39 = *((_DWORD *)a3 + 3);
  v37 = *a3;
  if (v9 == v10)
  {
    v15 = a2;
    v16 = a4;
    v17 = a5;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_19;
    v15 = a2;
    v16 = a4;
    v17 = a5;
    v18 = operator new(v9 - v10);
    v19 = (unint64_t)v18 + v14;
    memcpy(v18, v10, v14);
  }
  v20 = a1[3].i64[1];
  v21 = a1[4].i64[0];
  v22 = 46 * ((v21 - v20) >> 3) - 1;
  v23 = *((_BYTE *)a3 + 40);
  v24 = *((_BYTE *)a3 + 41);
  v25 = *((_BYTE *)a3 + 42);
  if (v21 == v20)
    v22 = 0;
  if (v22 == v12 + a1[5].i64[0])
  {
    std::deque<dcsctp::OutstandingData::Item>::__add_back_capacity((uint64_t)a1[3].i64);
    v20 = a1[3].i64[1];
    v21 = a1[4].i64[0];
  }
  if (v21 == v20 || (v26 = a1[5].i64[1] + a1[5].i64[0], (v27 = *(_QWORD *)(v20 + 8 * (v26 / 0x2E))) == 0))
  {
    __break(1u);
LABEL_19:
    abort();
  }
  v28 = v27 + 88 * (v26 % 0x2E);
  *(_DWORD *)v28 = v15;
  *(_QWORD *)(v28 + 8) = v16;
  *(_WORD *)(v28 + 16) = v17;
  *(_WORD *)(v28 + 18) = 0;
  *(_BYTE *)(v28 + 20) = 0;
  *(_WORD *)(v28 + 22) = 0;
  *(_QWORD *)(v28 + 24) = a6;
  *(_QWORD *)(v28 + 32) = a7;
  *(_WORD *)(v28 + 40) = v37;
  *(_WORD *)(v28 + 42) = v38;
  *(_QWORD *)(v28 + 44) = v13;
  *(_DWORD *)(v28 + 52) = v39;
  *(_QWORD *)(v28 + 56) = v18;
  *(int64x2_t *)(v28 + 64) = vdupq_n_s64(v19);
  *(_BYTE *)(v28 + 80) = v23;
  *(_BYTE *)(v28 + 81) = v24;
  *(_BYTE *)(v28 + 82) = v25;
  v29 = a1[5].i64[0];
  v30 = a1[5].i64[1] + 1;
  a1[5].i64[1] = v30;
  v31 = v29 + v30;
  v32 = a1[3].i64[1];
  v33 = (_QWORD *)(v32 + 8 * (v31 / 0x2E));
  v34 = *v33 + 88 * (v31 % 0x2E);
  if (a1[4].i64[0] == v32)
    v34 = 0;
  if (v34 == *v33)
  {
    v34 = *(v33 - 1) + 4048;
    if (*(_QWORD *)(*(v33 - 1) + 3984) > v16)
      return v36 + (int)v12 + 1;
  }
  else if (*(_QWORD *)(v34 - 64) > v16)
  {
    return v36 + (int)v12 + 1;
  }
  dcsctp::OutstandingData::AbandonAllFor(a1, (int *)(v34 - 88));
  return 0;
}

void dcsctp::OutstandingData::NackAll(dcsctp::OutstandingData *this)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v30;

  v1 = *((_QWORD *)this + 7);
  if (*((_QWORD *)this + 8) == v1)
    return;
  v2 = *((_QWORD *)this + 10);
  v3 = (_QWORD *)(v1 + 8 * (v2 / 0x2E));
  v4 = *v3 + 88 * (v2 % 0x2E);
  v5 = *(_QWORD *)(v1 + 8 * ((*((_QWORD *)this + 11) + v2) / 0x2E)) + 88 * ((*((_QWORD *)this + 11) + v2) % 0x2E);
  if (v4 == v5)
    return;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v30 = *(_QWORD *)(v1 + 8 * ((*((_QWORD *)this + 11) + v2) / 0x2E)) + 88 * ((*((_QWORD *)this + 11) + v2) % 0x2E);
  v9 = *((_QWORD *)this + 1);
  do
  {
    ++v9;
    if (*(_BYTE *)(v4 + 19) == 1)
      goto LABEL_9;
    if (v7 < v8)
    {
      if (!v7)
        goto LABEL_42;
      *(_QWORD *)v7 = v9;
      v7 += 8;
LABEL_9:
      v4 += 88;
      if (v4 - *v3 != 4048)
        continue;
LABEL_25:
      v19 = v3[1];
      ++v3;
      v4 = v19;
      continue;
    }
    v10 = (v7 - v6) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      goto LABEL_43;
    if ((v8 - v6) >> 2 > v11)
      v11 = (v8 - v6) >> 2;
    if ((unint64_t)(v8 - v6) >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
    {
LABEL_42:
      __break(1u);
LABEL_43:
      abort();
    }
    if (v11 >> 61)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v12 = 8 * v11;
    v13 = operator new(8 * v11);
    v14 = &v13[8 * v10];
    *(_QWORD *)v14 = v9;
    v15 = v14 + 8;
    if (v7 != v6)
    {
      v16 = v7 - v6 - 8;
      if (v16 < 0x168)
      {
        v17 = v7;
        goto LABEL_21;
      }
      v20 = (v7 - 8 - v6) & 0xFFFFFFFFFFFFFFF8;
      if (&v13[v7 - v6 - 8 - v20] > &v13[v7 - v6 - 8])
      {
        v17 = v7;
        goto LABEL_21;
      }
      if (&v7[-v20 - 8] > v7 - 8)
      {
        v17 = v7;
        do
        {
LABEL_21:
          v18 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v17 != v6);
        goto LABEL_22;
      }
      if ((unint64_t)(v6 - v13) < 0x20)
      {
        v17 = v7;
        goto LABEL_21;
      }
      v21 = (v16 >> 3) + 1;
      v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v17 = &v7[-v22];
      v14 -= v22;
      v23 = &v13[8 * v10 - 16];
      v24 = v7 - 16;
      v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_21;
    }
LABEL_22:
    v8 = &v13[v12];
    if (v6)
      operator delete(v6);
    v7 = v15;
    v6 = v14;
    v5 = v30;
    v4 += 88;
    if (v4 - *v3 == 4048)
      goto LABEL_25;
  }
  while (v4 != v5);
  if (v6 != v7)
  {
    v27 = (uint64_t *)v6;
    do
    {
      v28 = *v27++;
      dcsctp::OutstandingData::NackItem((uint64_t)this, v28, 1u, 0);
    }
    while (v27 != (uint64_t *)v7);
  }
  if (v6)
    operator delete(v6);
}

void dcsctp::OutstandingData::CreateForwardTsn(dcsctp::OutstandingData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t **v21;
  uint64_t **v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t **v29;
  uint64_t **v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t **v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t *v47;
  uint64_t **v48;
  BOOL v49;
  uint64_t v50;
  uint64_t **v52;
  uint64_t *v53;
  uint64_t v54;

  v53 = 0;
  v54 = 0;
  v52 = &v53;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 7);
  if (*((_QWORD *)this + 8) == v3
    || (v5 = *((_QWORD *)this + 10),
        v6 = v5 / 0x2E,
        v7 = *(_QWORD *)(v3 + 8 * (v5 / 0x2E)) + 88 * (v5 % 0x2E),
        v8 = *(_QWORD *)(v3 + 8 * ((*((_QWORD *)this + 11) + v5) / 0x2E)) + 88 * ((*((_QWORD *)this + 11) + v5) % 0x2E),
        v7 == v8))
  {
    v35 = 0;
    v36 = 0;
  }
  else
  {
    v9 = 0;
    v10 = (_QWORD *)(v3 + 8 * v6);
    while (1)
    {
      v11 = (_QWORD *)*((_QWORD *)this + 20);
      v12 = (_QWORD *)*((_QWORD *)this + 21);
      if (v12 != v11)
      {
        v13 = v12 - v11;
        do
        {
          v14 = v13 >> 1;
          v15 = &v11[v13 >> 1];
          v17 = *v15;
          v16 = v15 + 1;
          v13 += ~(v13 >> 1);
          if (v17 <= v2)
            v11 = v16;
          else
            v13 = v14;
        }
        while (v13);
      }
      v18 = v2 + 1;
      if (v11 != v12 && v18 >= *v11)
      {
        LODWORD(v18) = v2;
        if (v9)
          goto LABEL_67;
        goto LABEL_71;
      }
      if (*(_BYTE *)(v7 + 18) != 2)
        break;
      if (!*(_BYTE *)(v7 + 82))
      {
        v19 = v53;
        v20 = *(unsigned __int16 *)(v7 + 40);
        v21 = &v53;
        v22 = &v53;
        if (v53)
        {
          while (1)
          {
            while (1)
            {
              v22 = (uint64_t **)v19;
              v23 = *((unsigned __int16 *)v19 + 13);
              if (v20 >= v23)
                break;
              v19 = *v22;
              v21 = v22;
              if (!*v22)
                goto LABEL_22;
            }
            if (v23 >= v20)
              break;
            v19 = v22[1];
            if (!v19)
            {
              v21 = v22 + 1;
              goto LABEL_22;
            }
          }
        }
        else
        {
LABEL_22:
          v24 = (uint64_t *)v22;
          v22 = (uint64_t **)operator new(0x20uLL);
          *((_WORD *)v22 + 13) = v20;
          *((_WORD *)v22 + 14) = 0;
          *v22 = 0;
          v22[1] = 0;
          v22[2] = v24;
          *v21 = (uint64_t *)v22;
          v25 = (uint64_t *)v22;
          if (*v52)
          {
            v52 = (uint64_t **)*v52;
            v25 = *v21;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v53, v25);
          v9 = ++v54;
        }
        v26 = *(unsigned __int16 *)(v7 + 42);
        if (v26 > *((unsigned __int16 *)v22 + 14))
        {
          v27 = v53;
          v28 = *(unsigned __int16 *)(v7 + 40);
          v29 = &v53;
          v30 = &v53;
          if (v53)
          {
            while (1)
            {
              while (1)
              {
                v30 = (uint64_t **)v27;
                v31 = *((unsigned __int16 *)v27 + 13);
                if (v28 >= v31)
                  break;
                v27 = *v30;
                v29 = v30;
                if (!*v30)
                  goto LABEL_33;
              }
              if (v31 >= v28)
                break;
              v27 = v30[1];
              if (!v27)
              {
                v29 = v30 + 1;
                goto LABEL_33;
              }
            }
          }
          else
          {
LABEL_33:
            v32 = (uint64_t *)v30;
            v30 = (uint64_t **)operator new(0x20uLL);
            *((_WORD *)v30 + 13) = v28;
            *((_WORD *)v30 + 14) = 0;
            *v30 = 0;
            v30[1] = 0;
            v30[2] = v32;
            *v29 = (uint64_t *)v30;
            v33 = (uint64_t *)v30;
            if (*v52)
            {
              v52 = (uint64_t **)*v52;
              v33 = *v29;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v53, v33);
            v9 = ++v54;
            LOWORD(v26) = *(_WORD *)(v7 + 42);
          }
          *((_WORD *)v30 + 14) = v26;
        }
      }
      v7 += 88;
      if (v7 - *v10 == 4048)
      {
        v34 = v10[1];
        ++v10;
        v7 = v34;
      }
      v2 = v18;
      if (v7 == v8)
        goto LABEL_66;
    }
    LODWORD(v18) = v2;
LABEL_66:
    if (v9)
    {
LABEL_67:
      if (v9 > 0x1555555555555555)
LABEL_76:
        abort();
      v50 = 12 * v9;
      v35 = (char *)operator new(12 * v9);
      v36 = &v35[v50];
      LODWORD(v2) = v18;
      v38 = v52;
      if (v52 == &v53)
        goto LABEL_72;
LABEL_40:
      v37 = v35;
      while (2)
      {
        if (v35 < v36)
        {
          if (!v35)
            goto LABEL_74;
          *(_DWORD *)v35 = *(_DWORD *)((char *)v38 + 26);
          v35[4] = 0;
          *((_DWORD *)v35 + 2) = 0;
          v35 += 12;
LABEL_57:
          v47 = v38[1];
          if (v47)
          {
            do
            {
              v48 = (uint64_t **)v47;
              v47 = (uint64_t *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              v48 = (uint64_t **)v38[2];
              v49 = *v48 == (uint64_t *)v38;
              v38 = v48;
            }
            while (!v49);
          }
          v38 = v48;
          if (v48 == &v53)
            goto LABEL_73;
          continue;
        }
        break;
      }
      v39 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v37) >> 2) + 1;
      if (v39 > 0x1555555555555555)
        goto LABEL_76;
      if (0x5555555555555556 * ((v36 - v37) >> 2) > v39)
        v39 = 0x5555555555555556 * ((v36 - v37) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v36 - v37) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v39 = 0x1555555555555555;
      if (!v39)
      {
LABEL_74:
        __break(1u);
LABEL_75:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
      if (v39 > 0x1555555555555555)
        goto LABEL_75;
      v40 = 12 * v39;
      v41 = (char *)operator new(12 * v39);
      v42 = &v41[4 * ((v35 - v37) >> 2)];
      *(_DWORD *)v42 = *(_DWORD *)((char *)v38 + 26);
      v42[4] = 0;
      *((_DWORD *)v42 + 2) = 0;
      if (v35 == v37)
      {
        v46 = v35;
        v37 = &v41[4 * ((v35 - v37) >> 2)];
        v36 = &v41[v40];
        v35 = v42 + 12;
        if (!v46)
          goto LABEL_57;
      }
      else
      {
        v43 = &v41[4 * ((v35 - v37) >> 2)];
        do
        {
          v44 = *(_QWORD *)(v35 - 12);
          v35 -= 12;
          v45 = *((_DWORD *)v35 + 2);
          *(_QWORD *)(v43 - 12) = v44;
          v43 -= 12;
          *((_DWORD *)v43 + 2) = v45;
        }
        while (v35 != v37);
        v46 = v37;
        v37 = v43;
        v36 = &v41[v40];
        v35 = v42 + 12;
        if (!v46)
          goto LABEL_57;
      }
      operator delete(v46);
      goto LABEL_57;
    }
LABEL_71:
    v35 = 0;
    v36 = 0;
    LODWORD(v2) = v18;
    v38 = v52;
    if (v52 != &v53)
      goto LABEL_40;
  }
LABEL_72:
  v37 = v35;
LABEL_73:
  *(_DWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v37;
  *(_QWORD *)(a2 + 24) = v35;
  *(_QWORD *)(a2 + 32) = v36;
  *(_QWORD *)a2 = &off_24C0B4418;
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v53);
}

void dcsctp::OutstandingData::CreateIForwardTsn(dcsctp::OutstandingData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  dcsctp::OutstandingData *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  size_t v20;
  size_t *v21;
  size_t *v22;
  unsigned int v23;
  _BOOL4 v24;
  unsigned int v25;
  _BOOL4 v26;
  BOOL v27;
  _BOOL4 v28;
  dcsctp::OutstandingData *v29;
  _QWORD *v30;
  size_t *v31;
  uint64_t *v32;
  unsigned int v33;
  size_t v34;
  size_t *v35;
  size_t *v36;
  unsigned int v37;
  _BOOL4 v38;
  unsigned int v39;
  _BOOL4 v40;
  _BOOL4 v41;
  size_t *v42;
  uint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  size_t *v48;
  char v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  int v56;
  char *v57;
  uint64_t v58;
  int v59;
  char *v60;
  size_t *v61;
  size_t *v62;
  uint64_t v63;
  unint64_t v65;
  int v66;
  size_t *p_sz;
  size_t __sz;
  uint64_t v69;

  __sz = 0;
  v69 = 0;
  p_sz = &__sz;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 7);
  if (*((_QWORD *)this + 8) == v3
    || (v4 = this,
        v5 = *((_QWORD *)this + 10),
        v6 = v5 / 0x2E,
        v7 = *(_QWORD *)(v3 + 8 * (v5 / 0x2E)) + 88 * (v5 % 0x2E),
        v65 = *(_QWORD *)(v3 + 8 * ((*((_QWORD *)this + 11) + v5) / 0x2E)) + 88 * ((*((_QWORD *)this + 11) + v5) % 0x2E),
        v7 == v65))
  {
    v45 = 0;
    v46 = 0;
    goto LABEL_80;
  }
  v8 = 0;
  v9 = (_QWORD *)(v3 + 8 * v6);
  while (1)
  {
    v10 = (_QWORD *)*((_QWORD *)v4 + 20);
    v11 = (_QWORD *)*((_QWORD *)v4 + 21);
    if (v11 != v10)
    {
      v12 = v11 - v10;
      do
      {
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        v16 = *v14;
        v15 = v14 + 1;
        v12 += ~(v12 >> 1);
        if (v16 <= v2)
          v10 = v15;
        else
          v12 = v13;
      }
      while (v12);
    }
    v17 = v2 + 1;
    if (v10 != v11 && v17 >= *v10)
    {
      LODWORD(v17) = v2;
      if (v8)
        goto LABEL_75;
      goto LABEL_79;
    }
    if (*(_BYTE *)(v7 + 18) != 2)
      break;
    v18 = *(unsigned __int8 *)(v7 + 82);
    v19 = *(unsigned __int16 *)(v7 + 40);
    v66 = v19 << 16;
    v20 = __sz;
    v21 = &__sz;
    v22 = &__sz;
    if (__sz)
    {
      while (1)
      {
        while (1)
        {
          v22 = (size_t *)v20;
          v23 = *(unsigned __int8 *)(v20 + 28);
          v24 = v18 < v23;
          v25 = *((unsigned __int16 *)v22 + 15);
          if (v23 == v18)
            v24 = v19 < v25;
          if (!v24)
            break;
          v20 = *v22;
          v21 = v22;
          if (!*v22)
            goto LABEL_25;
        }
        v26 = v25 < v19;
        v27 = v23 == v18;
        v28 = v23 < v18;
        if (v27)
          v28 = v26;
        if (!v28)
          break;
        v20 = v22[1];
        if (!v20)
        {
          v21 = v22 + 1;
          goto LABEL_25;
        }
      }
    }
    else
    {
LABEL_25:
      v29 = v4;
      v30 = v9;
      v31 = v22;
      v22 = (size_t *)operator new(0x28uLL);
      *((_DWORD *)v22 + 7) = v66 | v18;
      *((_DWORD *)v22 + 8) = 0;
      *v22 = 0;
      v22[1] = 0;
      v22[2] = (size_t)v31;
      *v21 = (size_t)v22;
      v32 = (uint64_t *)v22;
      if (*p_sz)
      {
        p_sz = (size_t *)*p_sz;
        v32 = (uint64_t *)*v21;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)__sz, v32);
      v8 = ++v69;
      v9 = v30;
      v4 = v29;
    }
    v33 = *(_DWORD *)(v7 + 44);
    if (v33 > *((_DWORD *)v22 + 8))
    {
      v34 = __sz;
      v35 = &__sz;
      v36 = &__sz;
      if (__sz)
      {
        while (1)
        {
          while (1)
          {
            v36 = (size_t *)v34;
            v37 = *(unsigned __int8 *)(v34 + 28);
            v38 = v18 < v37;
            v39 = *((unsigned __int16 *)v36 + 15);
            if (v37 == v18)
              v38 = v19 < v39;
            if (!v38)
              break;
            v34 = *v36;
            v35 = v36;
            if (!*v36)
              goto LABEL_42;
          }
          v40 = v39 < v19;
          v27 = v37 == v18;
          v41 = v37 < v18;
          if (v27)
            v41 = v40;
          if (!v41)
            break;
          v34 = v36[1];
          if (!v34)
          {
            v35 = v36 + 1;
            goto LABEL_42;
          }
        }
      }
      else
      {
LABEL_42:
        v42 = v36;
        v36 = (size_t *)operator new(0x28uLL);
        *((_DWORD *)v36 + 7) = v66 | v18;
        *((_DWORD *)v36 + 8) = 0;
        *v36 = 0;
        v36[1] = 0;
        v36[2] = (size_t)v42;
        *v35 = (size_t)v36;
        v43 = (uint64_t *)v36;
        if (*p_sz)
        {
          p_sz = (size_t *)*p_sz;
          v43 = (uint64_t *)*v35;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)__sz, v43);
        v8 = ++v69;
        v33 = *(_DWORD *)(v7 + 44);
      }
      *((_DWORD *)v36 + 8) = v33;
      v7 += 88;
      if (v7 - *v9 != 4048)
        goto LABEL_4;
LABEL_46:
      v44 = v9[1];
      ++v9;
      v7 = v44;
      goto LABEL_4;
    }
    v7 += 88;
    if (v7 - *v9 == 4048)
      goto LABEL_46;
LABEL_4:
    v2 = v17;
    if (v7 == v65)
      goto LABEL_74;
  }
  LODWORD(v17) = v2;
LABEL_74:
  if (v8)
  {
LABEL_75:
    if (v8 > 0x1555555555555555)
LABEL_84:
      abort();
    v63 = 12 * v8;
    v45 = (char *)operator new(12 * v8);
    v46 = &v45[v63];
    LODWORD(v2) = v17;
    v48 = p_sz;
    if (p_sz == &__sz)
      goto LABEL_80;
LABEL_48:
    v47 = v45;
    while (2)
    {
      if (v45 < v46)
      {
        if (!v45)
          goto LABEL_82;
        v49 = *((_BYTE *)v48 + 28);
        v50 = *((_DWORD *)v48 + 8);
        *(_DWORD *)v45 = *((unsigned __int16 *)v48 + 15);
        v45[4] = v49;
        *((_DWORD *)v45 + 2) = v50;
        v45 += 12;
LABEL_65:
        v61 = (size_t *)v48[1];
        if (v61)
        {
          do
          {
            v62 = v61;
            v61 = (size_t *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = (size_t *)v48[2];
            v27 = *v62 == (_QWORD)v48;
            v48 = v62;
          }
          while (!v27);
        }
        v48 = v62;
        if (v62 == &__sz)
          goto LABEL_81;
        continue;
      }
      break;
    }
    v51 = 0xAAAAAAAAAAAAAAABLL * ((v45 - v47) >> 2) + 1;
    if (v51 > 0x1555555555555555)
      goto LABEL_84;
    if (0x5555555555555556 * ((v46 - v47) >> 2) > v51)
      v51 = 0x5555555555555556 * ((v46 - v47) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((v46 - v47) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v51 = 0x1555555555555555;
    if (!v51)
    {
LABEL_82:
      __break(1u);
LABEL_83:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    if (v51 > 0x1555555555555555)
      goto LABEL_83;
    v52 = 12 * v51;
    v53 = (char *)operator new(12 * v51);
    v54 = &v53[4 * ((v45 - v47) >> 2)];
    v55 = *((_BYTE *)v48 + 28);
    v56 = *((_DWORD *)v48 + 8);
    *(_DWORD *)v54 = *((unsigned __int16 *)v48 + 15);
    v54[4] = v55;
    *((_DWORD *)v54 + 2) = v56;
    if (v45 == v47)
    {
      v60 = v45;
      v47 = &v53[4 * ((v45 - v47) >> 2)];
      v46 = &v53[v52];
      v45 = v54 + 12;
      if (!v60)
        goto LABEL_65;
    }
    else
    {
      v57 = &v53[4 * ((v45 - v47) >> 2)];
      do
      {
        v58 = *(_QWORD *)(v45 - 12);
        v45 -= 12;
        v59 = *((_DWORD *)v45 + 2);
        *(_QWORD *)(v57 - 12) = v58;
        v57 -= 12;
        *((_DWORD *)v57 + 2) = v59;
      }
      while (v45 != v47);
      v60 = v47;
      v47 = v57;
      v46 = &v53[v52];
      v45 = v54 + 12;
      if (!v60)
        goto LABEL_65;
    }
    operator delete(v60);
    goto LABEL_65;
  }
LABEL_79:
  v45 = 0;
  v46 = 0;
  LODWORD(v2) = v17;
  v48 = p_sz;
  if (p_sz != &__sz)
    goto LABEL_48;
LABEL_80:
  v47 = v45;
LABEL_81:
  *(_DWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v47;
  *(_QWORD *)(a2 + 24) = v45;
  *(_QWORD *)(a2 + 32) = v46;
  *(_QWORD *)a2 = &off_24C0B5330;
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy((_QWORD *)__sz);
}

char *std::vector<std::pair<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,dcsctp::Data>>::__emplace_back_slow_path<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,dcsctp::Data>(void **a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int16 v20;
  char *v21;
  void *v22;

  v3 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  if (!v6)
  {
    __break(1u);
LABEL_23:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v6 > 0x492492492492492)
    goto LABEL_23;
  v9 = 56 * v6;
  v10 = (char *)operator new(56 * v6);
  v11 = *(_OWORD *)(a3 + 16);
  v12 = &v10[56 * v3];
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  v13 = &v10[v9];
  *(_DWORD *)v12 = *a2;
  *(_OWORD *)(v12 + 24) = v11;
  *((_QWORD *)v12 + 5) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *((_WORD *)v12 + 24) = *(_WORD *)(a3 + 40);
  v12[50] = *(_BYTE *)(a3 + 42);
  v14 = v12 + 56;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = &v12[v17];
      v19 = &v16[v17];
      *((_DWORD *)v18 - 14) = *(_DWORD *)&v16[v17 - 56];
      *((_OWORD *)v18 - 3) = *(_OWORD *)&v16[v17 - 48];
      *((_OWORD *)v18 - 2) = *(_OWORD *)&v16[v17 - 32];
      *((_QWORD *)v18 - 2) = *(_QWORD *)&v16[v17 - 16];
      *((_QWORD *)v19 - 4) = 0;
      *((_QWORD *)v19 - 3) = 0;
      *((_QWORD *)v19 - 2) = 0;
      v20 = *(_WORD *)&v16[v17 - 8];
      *(v18 - 6) = v16[v17 - 6];
      *((_WORD *)v18 - 4) = v20;
      v17 -= 56;
    }
    while (&v16[v17] != v15);
    v16 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v12[v17];
    a1[1] = v14;
    a1[2] = v13;
    while (v21 != v16)
    {
      v22 = (void *)*((_QWORD *)v21 - 4);
      if (v22)
      {
        *((_QWORD *)v21 - 3) = v22;
        operator delete(v22);
      }
      v21 -= 56;
    }
  }
  if (v16)
    operator delete(v16);
  return v14;
}

_QWORD *std::__tree<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>>::__find_equal<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (_QWORD *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v18 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = v18;
          v20 = v18[4];
          if (v16 >= v20)
            break;
          v18 = (_QWORD *)*v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = (_QWORD *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (_QWORD *)a2[1];
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (_QWORD *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = (_QWORD *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = v22;
            v24 = v22[4];
            if (v6 >= v24)
              break;
            v22 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = (_QWORD *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void std::deque<dcsctp::OutstandingData::Item>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  BOOL v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  _OWORD *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2E;
  v4 = v2 - 46;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v30 = *(char **)a1;
    if ((unint64_t)v7 > *(_QWORD *)a1)
    {
      v31 = (uint64_t)&v7[-*(_QWORD *)a1] >> 3;
      if (v31 >= -1)
        v32 = v31 + 1;
      else
        v32 = v31 + 2;
      v33 = v32 >> 1;
      v34 = -v33;
      v35 = &v7[-8 * v33];
      v36 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v33], v7, v5 - v7);
        v7 = *(char **)(a1 + 8);
      }
      v5 = &v35[v36];
      v37 = &v7[8 * v34];
      goto LABEL_32;
    }
    v39 = (v5 - v30) >> 2;
    if (v5 == v30)
      v39 = 1;
    if (v39 >> 61)
      goto LABEL_108;
    v40 = v39 >> 2;
    v41 = 8 * v39;
    v42 = (char *)operator new(8 * v39);
    v43 = &v42[8 * v40];
    v45 = v5 - v7;
    v44 = v5 == v7;
    v5 = v43;
    if (!v44)
    {
      v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
      v46 = v45 - 8;
      if ((unint64_t)(v45 - 8) < 0x38)
      {
        v47 = &v42[8 * v40];
        do
        {
LABEL_91:
          v100 = *(_QWORD *)v7;
          v7 += 8;
          *(_QWORD *)v47 = v100;
          v47 += 8;
        }
        while (v47 != v5);
        goto LABEL_92;
      }
      v93 = &v42[8 * v40];
      v47 = v93;
      if ((unint64_t)(v93 - v7) < 0x20)
        goto LABEL_91;
      v94 = (v46 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v47 = &v43[v95];
      v7 += v95;
      v96 = (__int128 *)(v6 + 3);
      v97 = v93 + 16;
      v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v99 = *v96;
        *(v97 - 1) = *(v96 - 1);
        *v97 = v99;
        v96 += 2;
        v97 += 2;
        v98 -= 4;
      }
      while (v98);
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_91;
    }
LABEL_92:
    *(_QWORD *)a1 = v42;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = &v42[v41];
    if (v30)
    {
      operator delete(v30);
      v5 = *(char **)(a1 + 16);
    }
LABEL_4:
    if (!v5)
    {
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
LABEL_5:
    *(_QWORD *)v5 = v8;
LABEL_10:
    *(_QWORD *)(a1 + 16) += 8;
    return;
  }
  v10 = *(char **)(a1 + 16);
  v9 = *(char **)(a1 + 24);
  v12 = *(char **)a1;
  v11 = *(char **)(a1 + 8);
  v13 = v10 - v11;
  v14 = (v10 - v11) >> 3;
  v15 = (uint64_t)&v9[-*(_QWORD *)a1];
  if (v14 < (unint64_t)(v15 >> 3))
  {
    v16 = operator new(0xFD0uLL);
    v17 = v16;
    if (v9 != v10)
    {
      if (v10)
      {
        *(_QWORD *)v10 = v16;
        goto LABEL_10;
      }
      goto LABEL_107;
    }
    if (v11 == v12)
    {
      v70 = (v9 - v11) >> 2;
      if (v10 == v11)
        v70 = 1;
      if (v70 >> 61)
        goto LABEL_108;
      v71 = (v70 + 3) >> 2;
      v72 = 8 * v70;
      v73 = (char *)operator new(8 * v70);
      v38 = &v73[8 * v71];
      v74 = v38;
      if (v10 != v11)
      {
        v74 = &v38[8 * v14];
        v75 = &v73[8 * v71];
        v76 = v11;
        if ((unint64_t)(v13 - 8) < 0x38)
          goto LABEL_111;
        v77 = &v73[8 * v71];
        v75 = v77;
        v76 = v11;
        if ((unint64_t)(v77 - v11) < 0x20)
          goto LABEL_111;
        v78 = ((unint64_t)(v13 - 8) >> 3) + 1;
        v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v38[v79];
        v76 = &v11[v79];
        v80 = (__int128 *)(v11 + 16);
        v81 = v77 + 16;
        v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v83 = *v80;
          *(v81 - 1) = *(v80 - 1);
          *v81 = v83;
          v80 += 2;
          v81 += 2;
          v82 -= 4;
        }
        while (v82);
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_111:
          do
          {
            v84 = *(_QWORD *)v76;
            v76 += 8;
            *(_QWORD *)v75 = v84;
            v75 += 8;
          }
          while (v75 != v74);
        }
      }
      *(_QWORD *)a1 = v73;
      *(_QWORD *)(a1 + 8) = v38;
      *(_QWORD *)(a1 + 16) = v74;
      *(_QWORD *)(a1 + 24) = &v73[v72];
      if (v11)
      {
        operator delete(v11);
        v38 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v38 = v11;
    }
    *((_QWORD *)v38 - 1) = v17;
    v85 = *(char **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v85 - 8;
    v8 = *((_QWORD *)v85 - 1);
    *(_QWORD *)(a1 + 8) = v85;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v86 = *(char **)a1;
    if ((unint64_t)v85 > *(_QWORD *)a1)
    {
      v87 = (uint64_t)&v85[-*(_QWORD *)a1] >> 3;
      if (v87 >= -1)
        v88 = v87 + 1;
      else
        v88 = v87 + 2;
      v89 = v88 >> 1;
      v90 = -v89;
      v91 = &v85[-8 * v89];
      v92 = v5 - v85;
      if (v5 != v85)
      {
        memmove(&v85[-8 * v89], v85, v5 - v85);
        v85 = *(char **)(a1 + 8);
      }
      v5 = &v91[v92];
      v37 = &v85[8 * v90];
LABEL_32:
      *(_QWORD *)(a1 + 8) = v37;
      *(_QWORD *)(a1 + 16) = v5;
      goto LABEL_5;
    }
    v101 = (v5 - v86) >> 2;
    if (v5 == v86)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v85;
      v44 = v5 == v85;
      v5 = v105;
      if (v44)
        goto LABEL_105;
      v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
      v107 = v106 - 8;
      if ((unint64_t)(v106 - 8) >= 0x38)
      {
        v109 = &v104[8 * v102];
        v108 = v109;
        if ((unint64_t)(v109 - v85) >= 0x20)
        {
          v110 = (v107 >> 3) + 1;
          v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = &v105[v111];
          v112 = &v85[v111];
          v113 = (__int128 *)(v85 + 16);
          v114 = v109 + 16;
          v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116 = *v113;
            *(v114 - 1) = *(v113 - 1);
            *v114 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          v85 = v112;
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_105:
            *(_QWORD *)a1 = v104;
            *(_QWORD *)(a1 + 8) = v105;
            *(_QWORD *)(a1 + 16) = v5;
            *(_QWORD *)(a1 + 24) = &v104[v103];
            if (v86)
            {
              operator delete(v86);
              v5 = *(char **)(a1 + 16);
            }
            goto LABEL_4;
          }
        }
      }
      else
      {
        v108 = &v104[8 * v102];
      }
      do
      {
        v117 = *(_QWORD *)v85;
        v85 += 8;
        *(_QWORD *)v108 = v117;
        v108 += 8;
      }
      while (v108 != v5);
      goto LABEL_105;
    }
LABEL_108:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v18 = v15 >> 2;
  if (v9 == v12)
    v19 = 1;
  else
    v19 = v18;
  if (v19 >> 61)
    goto LABEL_108;
  v20 = (char *)operator new(8 * v19);
  v21 = &v20[8 * v14];
  v22 = &v20[8 * v19];
  v23 = operator new(0xFD0uLL);
  v24 = v23;
  if (v14 != v19)
    goto LABEL_21;
  if (v13 >= 1)
  {
    v25 = v14 + 2;
    if (v14 >= -1)
      v25 = v14 + 1;
    v21 -= 8 * (v25 >> 1);
LABEL_21:
    *(_QWORD *)v21 = v23;
    v26 = v21 + 8;
    if (v10 != v11)
      goto LABEL_48;
    goto LABEL_22;
  }
  v48 = v13 >> 2;
  if (v10 == v11)
    v48 = 1;
  if (v48 >> 61)
    goto LABEL_108;
  v49 = 8 * v48;
  v21 = (char *)operator new(8 * v48);
  operator delete(v20);
  v22 = &v21[v49];
  v50 = *(char **)(a1 + 8);
  v10 = *(char **)(a1 + 16);
  v20 = v21;
  *(_QWORD *)v21 = v24;
  v26 = v21 + 8;
  if (v10 != v50)
  {
    while (1)
    {
LABEL_48:
      if (v21 == v20)
      {
        if (v26 >= v22)
        {
          v55 = (v22 - v21) >> 2;
          if (v22 == v21)
            v55 = 1;
          if (v55 >> 61)
            goto LABEL_108;
          v56 = (v55 + 3) >> 2;
          v57 = 8 * v55;
          v58 = (char *)operator new(8 * v55);
          v20 = v58;
          v51 = &v58[8 * v56];
          v28 = v51;
          v59 = v26 - v21;
          if (v26 != v21)
          {
            v28 = &v51[v59 & 0xFFFFFFFFFFFFFFF8];
            v60 = v59 - 8;
            v61 = &v58[8 * v56];
            v62 = v21;
            if (v60 < 0x38)
              goto LABEL_112;
            v61 = &v58[8 * v56];
            v62 = v21;
            if ((unint64_t)(v61 - v21) < 0x20)
              goto LABEL_112;
            v63 = (v60 >> 3) + 1;
            v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
            v61 = &v51[v64];
            v62 = &v21[v64];
            v65 = (__int128 *)(v21 + 16);
            v66 = &v58[8 * v56 + 16];
            v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v68 = *v65;
              *((_OWORD *)v66 - 1) = *(v65 - 1);
              *(_OWORD *)v66 = v68;
              v65 += 2;
              v66 += 32;
              v67 -= 4;
            }
            while (v67);
            if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_112:
              do
              {
                v69 = *(_QWORD *)v62;
                v62 += 8;
                *(_QWORD *)v61 = v69;
                v61 += 8;
              }
              while (v61 != v28);
            }
          }
          v22 = &v58[v57];
          operator delete(v21);
        }
        else
        {
          v53 = (v22 - v26) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v28 = &v26[8 * (v54 >> 1)];
          v51 = &v21[8 * (v54 >> 1)];
          if (v26 == v21)
          {
            v20 = v26;
          }
          else
          {
            memmove(&v21[8 * (v54 >> 1)], v21, v26 - v21);
            v20 = v21;
          }
        }
      }
      else
      {
        v51 = v21;
        v28 = v26;
      }
      v52 = *((_QWORD *)v10 - 1);
      v10 -= 8;
      *((_QWORD *)v51 - 1) = v52;
      v27 = v51 - 8;
      v26 = v28;
      v21 = v27;
      if (v10 == *(char **)(a1 + 8))
        goto LABEL_23;
    }
  }
LABEL_22:
  v27 = v21;
  v28 = v26;
LABEL_23:
  v29 = *(char **)a1;
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v28;
  *(_QWORD *)(a1 + 24) = v22;
  if (v29)
    operator delete(v29);
}

char *std::vector<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>>::emplace<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>>(void **a1, _BYTE *a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 != (char *)v5)
    {
      v11 = *a3;
      v12 = v5 - (_QWORD)(v9 + 8);
      v13 = v12 >> 3;
      v14 = (uint64_t *)(v5 - 8);
      if (v5 < 8)
      {
        v18 = a1[1];
      }
      else
      {
        v15 = (v7 & 0xFFFFFFFFFFFFFFF8) + v12;
        v16 = v15 + v6 + 8;
        if (v5 > v16)
          v16 = (unint64_t)a1[1];
        v17 = v16 + ~v6 - v15;
        if (v17 >= 0x58)
        {
          v18 = a1[1];
          if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
          {
            v44 = (v17 >> 3) + 1;
            v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
            v14 = (uint64_t *)((char *)v14 + v45);
            v18 = (_QWORD *)(v5 + v45);
            v46 = (_OWORD *)(v5 + 16);
            v47 = (__int128 *)(8 * v13 + 8 * v8 + v6 + 16);
            v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v49 = *v47;
              *(v46 - 1) = *(v47 - 1);
              *v46 = v49;
              v46 += 2;
              v47 += 2;
              v48 -= 4;
            }
            while (v48);
            if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_51;
          }
        }
        else
        {
          v18 = a1[1];
        }
        do
        {
          v50 = *v14++;
          *v18++ = v50;
        }
        while ((unint64_t)v14 < v5);
      }
LABEL_51:
      a1[1] = v18;
      if ((char *)v5 != v9 + 8)
        memmove((void *)(v5 - 8 * v13), v9, v12);
      *(_QWORD *)v9 = v11;
      return v9;
    }
    if (v6)
    {
      *(_QWORD *)v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    goto LABEL_55;
  }
  v19 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v19 >> 61)
    goto LABEL_56;
  v21 = v10 - v6;
  if (v21 >> 2 > v19)
    v19 = v21 >> 2;
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
    v22 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v22 = v19;
  if (v22)
  {
    if (v22 >> 61)
      goto LABEL_57;
    v23 = (char *)operator new(8 * v22);
    v24 = &v23[8 * v8];
    if (v8 != v22)
      goto LABEL_25;
  }
  else
  {
    v23 = 0;
    v24 = (char *)(8 * v8);
    if (v8)
    {
LABEL_25:
      if (!v24)
      {
LABEL_55:
        __break(1u);
LABEL_56:
        abort();
      }
      v26 = &v23[8 * v22];
      goto LABEL_27;
    }
  }
  if (v7 >= 1)
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v24 -= 8 * (v25 >> 1);
    goto LABEL_25;
  }
  v42 = v7 >> 2;
  if ((_BYTE *)v6 == a2)
    v42 = 1;
  if (v42 >> 61)
LABEL_57:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v43 = 8 * v42;
  v24 = (char *)operator new(8 * v42);
  v26 = &v24[v43];
  if (v23)
  {
    operator delete(v23);
    v27 = (char *)*a1;
    *(_QWORD *)v24 = *a3;
    v28 = v24 + 8;
    v29 = v24;
    if (v27 != v9)
      goto LABEL_28;
    goto LABEL_34;
  }
LABEL_27:
  v27 = (char *)v6;
  *(_QWORD *)v24 = *a3;
  v28 = v24 + 8;
  v29 = v24;
  if ((char *)v6 != v9)
  {
LABEL_28:
    v30 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v31 = v30 - v27 - 8;
    v32 = v9;
    v29 = v24;
    if (v31 < 0x58)
      goto LABEL_60;
    v32 = v9;
    v29 = v24;
    if ((unint64_t)(v30 - v24) < 0x20)
      goto LABEL_60;
    v33 = (v31 >> 3) + 1;
    v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    v32 = &v9[-v34];
    v29 = &v24[-v34];
    v35 = v24 - 16;
    v36 = (__int128 *)(v6 + 8 * v8 - 16);
    v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *v36;
      *((_OWORD *)v35 - 1) = *(v36 - 1);
      *(_OWORD *)v35 = v38;
      v35 -= 32;
      v36 -= 2;
      v37 -= 4;
    }
    while (v37);
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_60:
      do
      {
        v39 = *((_QWORD *)v32 - 1);
        v32 -= 8;
        *((_QWORD *)v29 - 1) = v39;
        v29 -= 8;
      }
      while (v32 != v27);
    }
  }
LABEL_34:
  v40 = (char *)a1[1];
  v41 = v40 - v9;
  if (v40 != v9)
  {
    memmove(v28, v9, v40 - v9);
    v27 = (char *)*a1;
  }
  *a1 = v29;
  a1[1] = &v28[v41];
  a1[2] = v26;
  if (v27)
    operator delete(v27);
  return v24;
}

double webrtc::OveruseEstimator::Update(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  unint64_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int64_t v16;
  void **v17;
  _BYTE *v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  char *v34;
  void **v35;
  void *v36;
  void *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  char *v54;
  void **v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  BOOL v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  void *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  int64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  void **v94;
  char *v95;
  void **v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  __int128 *v100;
  _OWORD *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  double v110;
  double v111;
  int v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  double result;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  int64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  __int128 *v159;
  _OWORD *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  int64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  __int128 *v176;
  _OWORD *v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  double v182;
  int v183;
  double v184;
  int v185;
  int v186;
  double v187;

  v10 = *(_QWORD *)(a1 + 136);
  if (v10 > 0x3B)
  {
    v11 = *(void ***)(a1 + 104);
    v12 = *(_QWORD *)(a1 + 128);
    if (!*(void **)((char *)v11 + ((v12 >> 6) & 0x3FFFFFFFFFFFFF8)))
      goto LABEL_153;
    v13 = v10 - 1;
    v14 = v12 + 1;
    *(_QWORD *)(a1 + 128) = v12 + 1;
    *(_QWORD *)(a1 + 136) = v13;
    if (v12 + 1 >= 0x400)
    {
      operator delete(*v11);
      v11 = (void **)(*(_QWORD *)(a1 + 104) + 8);
      *(_QWORD *)(a1 + 104) = v11;
      v14 = *(_QWORD *)(a1 + 128) - 512;
      *(_QWORD *)(a1 + 128) = v14;
    }
    v15 = *(char **)(a1 + 112);
    v16 = v15 - (char *)v11;
    if (v15 != (char *)v11)
      goto LABEL_6;
LABEL_13:
    v20 = *(_QWORD *)(a1 + 136);
    v21 = v20 + v14;
    v22 = a5;
    goto LABEL_14;
  }
  v11 = *(void ***)(a1 + 104);
  v15 = *(char **)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 128);
  v16 = v15 - (char *)v11;
  if (v15 == (char *)v11)
    goto LABEL_13;
LABEL_6:
  v17 = &v11[v14 >> 9];
  v18 = *v17;
  v19 = (double *)((char *)*v17 + 8 * (v14 & 0x1FF));
  v20 = *(_QWORD *)(a1 + 136);
  v21 = v20 + v14;
  v22 = a5;
  while (v19 != (double *)(*(char **)((char *)v11 + (((v20 + v14) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((v20 + v14) & 0x1FF)))
  {
    v23 = *v19++;
    v24 = v23;
    if (v22 >= v23)
      v22 = v24;
    if ((char *)v19 - v18 == 4096)
    {
      v25 = (double *)v17[1];
      ++v17;
      v18 = v25;
      v19 = v25;
    }
  }
LABEL_14:
  v26 = (v16 << 6) - 1;
  v27 = v15 - (char *)v11;
  if (v15 == (char *)v11)
    v26 = 0;
  if (v26 == v21)
  {
    v28 = v14 >= 0x200;
    v29 = v14 - 512;
    if (!v28)
    {
      v185 = a3;
      v183 = a4;
      v33 = v27 >> 3;
      v34 = *(char **)(a1 + 120);
      v35 = *(void ***)(a1 + 96);
      if (v27 >> 3 >= (unint64_t)((v34 - (char *)v35) >> 3))
      {
        v181 = a2;
        if (v34 == (char *)v35)
          v38 = 1;
        else
          v38 = (v34 - (char *)v35) >> 2;
        if (v38 >> 61)
          goto LABEL_154;
        v39 = (char *)operator new(8 * v38);
        v40 = &v39[8 * v33];
        v41 = &v39[8 * v38];
        v42 = operator new(0x1000uLL);
        v43 = v42;
        if (v33 == v38)
        {
          a3 = v185;
          if (v27 < 1)
          {
            v65 = v27 >> 2;
            if (v15 == (char *)v11)
              v65 = 1;
            if (v65 >> 61)
              goto LABEL_154;
            v66 = 8 * v65;
            v40 = (char *)operator new(8 * v65);
            operator delete(v39);
            v41 = &v40[v66];
            v67 = *(char **)(a1 + 104);
            v15 = *(char **)(a1 + 112);
            v39 = v40;
            *(_QWORD *)v40 = v43;
            v45 = v40 + 8;
            if (v15 != v67)
              goto LABEL_62;
          }
          else
          {
            v44 = v33 + 2;
            if (v33 >= -1)
              v44 = v33 + 1;
            v40 -= 8 * (v44 >> 1);
            *(_QWORD *)v40 = v42;
            v45 = v40 + 8;
            if (v15 != (char *)v11)
            {
              while (1)
              {
LABEL_62:
                if (v40 == v39)
                {
                  if (v45 >= v41)
                  {
                    v75 = (v41 - v40) >> 2;
                    if (v41 == v40)
                      v75 = 1;
                    if (v75 >> 61)
                      goto LABEL_154;
                    v76 = (v75 + 3) >> 2;
                    v77 = 8 * v75;
                    v78 = (char *)operator new(8 * v75);
                    v39 = v78;
                    v71 = &v78[8 * v76];
                    v69 = v71;
                    v79 = v45 - v40;
                    if (v45 != v40)
                    {
                      v69 = &v71[v79 & 0xFFFFFFFFFFFFFFF8];
                      v80 = v79 - 8;
                      v81 = &v78[8 * v76];
                      v82 = v40;
                      if (v80 < 0x38)
                        goto LABEL_157;
                      v81 = &v78[8 * v76];
                      v82 = v40;
                      if ((unint64_t)(v81 - v40) < 0x20)
                        goto LABEL_157;
                      v83 = (v80 >> 3) + 1;
                      v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
                      v81 = &v71[v84];
                      v82 = &v40[v84];
                      v85 = (__int128 *)(v40 + 16);
                      v86 = &v78[8 * v76 + 16];
                      v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v88 = *v85;
                        *((_OWORD *)v86 - 1) = *(v85 - 1);
                        *(_OWORD *)v86 = v88;
                        v85 += 2;
                        v86 += 32;
                        v87 -= 4;
                      }
                      while (v87);
                      if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_157:
                        do
                        {
                          v89 = *(_QWORD *)v82;
                          v82 += 8;
                          *(_QWORD *)v81 = v89;
                          v81 += 8;
                        }
                        while (v81 != v69);
                      }
                    }
                    v41 = &v78[v77];
                    operator delete(v40);
                  }
                  else
                  {
                    v73 = (v41 - v45) >> 3;
                    if (v73 >= -1)
                      v74 = v73 + 1;
                    else
                      v74 = v73 + 2;
                    v69 = &v45[8 * (v74 >> 1)];
                    v71 = &v40[8 * (v74 >> 1)];
                    if (v45 == v40)
                    {
                      v39 = v45;
                    }
                    else
                    {
                      memmove(&v40[8 * (v74 >> 1)], v40, v45 - v40);
                      v39 = v40;
                    }
                  }
                }
                else
                {
                  v71 = v40;
                  v69 = v45;
                }
                v72 = *((_QWORD *)v15 - 1);
                v15 -= 8;
                *((_QWORD *)v71 - 1) = v72;
                v68 = v71 - 8;
                v45 = v69;
                v40 = v68;
                if (v15 == *(char **)(a1 + 104))
                  goto LABEL_58;
              }
            }
          }
        }
        else
        {
          a3 = v185;
          *(_QWORD *)v40 = v42;
          v45 = v40 + 8;
          if (v15 != (char *)v11)
            goto LABEL_62;
        }
        v68 = v40;
        v69 = v45;
LABEL_58:
        v70 = *(void **)(a1 + 96);
        *(_QWORD *)(a1 + 96) = v39;
        *(_QWORD *)(a1 + 104) = v68;
        v15 = v69;
        *(_QWORD *)(a1 + 112) = v69;
        *(_QWORD *)(a1 + 120) = v41;
        a4 = v183;
        a2 = v181;
        if (v70)
        {
          operator delete(v70);
          v15 = *(char **)(a1 + 112);
        }
        goto LABEL_96;
      }
      v36 = operator new(0x1000uLL);
      v37 = v36;
      if (v34 != v15)
      {
        if (v15)
        {
          *(_QWORD *)v15 = v36;
          v15 = (char *)(*(_QWORD *)(a1 + 112) + 8);
          *(_QWORD *)(a1 + 112) = v15;
          a4 = v183;
          a3 = v185;
          goto LABEL_96;
        }
LABEL_153:
        __break(1u);
        goto LABEL_154;
      }
      if (v11 == v35)
      {
        v90 = (v34 - (char *)v11) >> 2;
        if (v15 == (char *)v11)
          v90 = 1;
        if (v90 >> 61)
          goto LABEL_154;
        v91 = (v90 + 3) >> 2;
        v92 = 8 * v90;
        v93 = (char *)operator new(8 * v90);
        v55 = (void **)&v93[8 * v91];
        v94 = v55;
        a3 = v185;
        if (v15 != (char *)v11)
        {
          v94 = &v55[v33];
          v95 = &v93[8 * v91];
          v96 = v11;
          if ((unint64_t)(v27 - 8) < 0x38)
            goto LABEL_158;
          v97 = &v93[8 * v91];
          v95 = v97;
          v96 = v11;
          if ((unint64_t)(v97 - (char *)v11) < 0x20)
            goto LABEL_158;
          v98 = ((unint64_t)(v27 - 8) >> 3) + 1;
          v99 = v98 & 0x3FFFFFFFFFFFFFFCLL;
          v95 = (char *)&v55[v99];
          v96 = &v11[v99];
          v100 = (__int128 *)(v11 + 2);
          v101 = v97 + 16;
          v102 = v98 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v103 = *v100;
            *(v101 - 1) = *(v100 - 1);
            *v101 = v103;
            v100 += 2;
            v101 += 2;
            v102 -= 4;
          }
          while (v102);
          if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_158:
            do
            {
              v104 = (uint64_t)*v96++;
              *(_QWORD *)v95 = v104;
              v95 += 8;
            }
            while (v95 != (char *)v94);
          }
        }
        *(_QWORD *)(a1 + 96) = v93;
        *(_QWORD *)(a1 + 104) = v55;
        *(_QWORD *)(a1 + 112) = v94;
        *(_QWORD *)(a1 + 120) = &v93[v92];
        if (v11)
        {
          operator delete(v11);
          v55 = *(void ***)(a1 + 104);
        }
      }
      else
      {
        v55 = v11;
        a3 = v185;
      }
      *(v55 - 1) = v37;
      v106 = *(char **)(a1 + 104);
      v105 = *(char **)(a1 + 112);
      *(_QWORD *)(a1 + 104) = v106 - 8;
      v107 = *((_QWORD *)v106 - 1);
      *(_QWORD *)(a1 + 104) = v106;
      a4 = v183;
      if (v105 != *(char **)(a1 + 120))
        goto LABEL_94;
      v149 = *(char **)(a1 + 96);
      if (v106 > v149)
      {
        v150 = (v106 - v149) >> 3;
        if (v150 >= -1)
          v151 = v150 + 1;
        else
          v151 = v150 + 2;
        v152 = v151 >> 1;
        v153 = -v152;
        v154 = &v106[-8 * v152];
        v155 = v105 - v106;
        if (v105 != v106)
        {
          memmove(&v106[-8 * v152], v106, v105 - v106);
          v106 = *(char **)(a1 + 104);
        }
        v105 = &v154[v155];
        *(_QWORD *)(a1 + 104) = &v106[8 * v153];
        *(_QWORD *)(a1 + 112) = &v154[v155];
        a4 = v183;
        goto LABEL_95;
      }
      v164 = (v105 - v149) >> 2;
      if (v105 == v149)
        v164 = 1;
      if (!(v164 >> 61))
      {
        v165 = v164 >> 2;
        v166 = 8 * v164;
        v167 = (char *)operator new(8 * v164);
        v168 = &v167[8 * v165];
        v169 = v105 - v106;
        v61 = v105 == v106;
        v105 = v168;
        if (v61)
          goto LABEL_151;
        v105 = &v168[v169 & 0xFFFFFFFFFFFFFFF8];
        v170 = v169 - 8;
        if ((unint64_t)(v169 - 8) >= 0x38)
        {
          v172 = &v167[8 * v165];
          v171 = v172;
          if ((unint64_t)(v172 - v106) >= 0x20)
          {
            v173 = (v170 >> 3) + 1;
            v174 = 8 * (v173 & 0x3FFFFFFFFFFFFFFCLL);
            v171 = &v168[v174];
            v175 = &v106[v174];
            v176 = (__int128 *)(v106 + 16);
            v177 = v172 + 16;
            v178 = v173 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v179 = *v176;
              *(v177 - 1) = *(v176 - 1);
              *v177 = v179;
              v176 += 2;
              v177 += 2;
              v178 -= 4;
            }
            while (v178);
            v106 = v175;
            if (v173 == (v173 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_151:
              *(_QWORD *)(a1 + 96) = v167;
              *(_QWORD *)(a1 + 104) = v168;
              *(_QWORD *)(a1 + 112) = v105;
              *(_QWORD *)(a1 + 120) = &v167[v166];
              a3 = v185;
              if (v149)
              {
                operator delete(v149);
                v105 = *(char **)(a1 + 112);
              }
LABEL_94:
              if (!v105)
                goto LABEL_153;
LABEL_95:
              *(_QWORD *)v105 = v107;
              v15 = (char *)(*(_QWORD *)(a1 + 112) + 8);
              *(_QWORD *)(a1 + 112) = v15;
              goto LABEL_96;
            }
          }
        }
        else
        {
          v171 = &v167[8 * v165];
        }
        do
        {
          v180 = *(_QWORD *)v106;
          v106 += 8;
          *(_QWORD *)v171 = v180;
          v171 += 8;
        }
        while (v171 != v105);
        goto LABEL_151;
      }
LABEL_154:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    v30 = a2;
    *(_QWORD *)(a1 + 128) = v29;
    v31 = (char *)(v11 + 1);
    v32 = *v11;
    *(_QWORD *)(a1 + 104) = v11 + 1;
    if (v15 != *(char **)(a1 + 120))
      goto LABEL_20;
    v46 = *(char **)(a1 + 96);
    if (v31 > v46)
    {
      v47 = a3;
      v48 = (v31 - v46) >> 3;
      if (v48 >= -1)
        v49 = v48 + 1;
      else
        v49 = v48 + 2;
      v50 = v49 >> 1;
      v51 = -v50;
      v52 = &v31[-8 * v50];
      v53 = v15 - v31;
      if (v15 != v31)
      {
        memmove(&v31[-8 * v50], v31, v15 - v31);
        v15 = *(char **)(a1 + 104);
      }
      v54 = &v15[8 * v51];
      v15 = &v52[v53];
      *(_QWORD *)(a1 + 104) = v54;
      *(_QWORD *)(a1 + 112) = &v52[v53];
      a3 = v47;
      goto LABEL_21;
    }
    v186 = a3;
    v56 = (v15 - v46) >> 2;
    if (v15 == v46)
      v56 = 1;
    if (v56 >> 61)
      goto LABEL_154;
    v57 = v56 >> 2;
    v58 = 8 * v56;
    v59 = (char *)operator new(8 * v56);
    v60 = &v59[8 * v57];
    v62 = v15 - v31;
    v61 = v15 == v31;
    v15 = v60;
    if (!v61)
    {
      v15 = &v60[v62 & 0xFFFFFFFFFFFFFFF8];
      v63 = v62 - 8;
      if ((unint64_t)(v62 - 8) < 0x38)
      {
        v64 = &v59[8 * v57];
        do
        {
LABEL_137:
          v163 = *(_QWORD *)v31;
          v31 += 8;
          *(_QWORD *)v64 = v163;
          v64 += 8;
        }
        while (v64 != v15);
        goto LABEL_138;
      }
      v156 = &v59[8 * v57];
      v64 = v156;
      if ((unint64_t)(v156 - v31) < 0x20)
        goto LABEL_137;
      v157 = (v63 >> 3) + 1;
      v158 = 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL);
      v64 = &v60[v158];
      v31 += v158;
      v159 = (__int128 *)(v11 + 3);
      v160 = v156 + 16;
      v161 = v157 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v162 = *v159;
        *(v160 - 1) = *(v159 - 1);
        *v160 = v162;
        v159 += 2;
        v160 += 2;
        v161 -= 4;
      }
      while (v161);
      if (v157 != (v157 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_137;
    }
LABEL_138:
    *(_QWORD *)(a1 + 96) = v59;
    *(_QWORD *)(a1 + 104) = v60;
    *(_QWORD *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 120) = &v59[v58];
    a3 = v186;
    if (v46)
    {
      operator delete(v46);
      v15 = *(char **)(a1 + 112);
    }
LABEL_20:
    if (!v15)
      goto LABEL_153;
LABEL_21:
    *(_QWORD *)v15 = v32;
    v15 = (char *)(*(_QWORD *)(a1 + 112) + 8);
    *(_QWORD *)(a1 + 112) = v15;
    a2 = v30;
LABEL_96:
    v20 = *(_QWORD *)(a1 + 136);
    v11 = *(void ***)(a1 + 104);
  }
  if (v15 == (char *)v11)
    goto LABEL_153;
  v108 = *(_QWORD *)(a1 + 128) + v20;
  v109 = *(uint64_t *)((char *)v11 + ((v108 >> 6) & 0x3FFFFFFFFFFFFF8));
  if (!v109)
    goto LABEL_153;
  *(double *)(v109 + 8 * (v108 & 0x1FF)) = a5;
  *(_QWORD *)(a1 + 136) = v20 + 1;
  v110 = (double)a2 - a5;
  v111 = (double)a3;
  if (*(int *)a1 < 1000)
    v112 = *(_DWORD *)a1 + 1;
  else
    v112 = 1000;
  *(_DWORD *)a1 = v112;
  v113 = *(double *)(a1 + 64) + *(double *)(a1 + 32);
  v114 = *(double *)(a1 + 72);
  v115 = v114 + *(double *)(a1 + 56);
  if (a4 == 1)
  {
    v116 = *(double *)(a1 + 16);
    if (v116 <= *(double *)(a1 + 24))
      goto LABEL_109;
    goto LABEL_107;
  }
  if (a4 != 2)
  {
    v116 = *(double *)(a1 + 16);
    goto LABEL_109;
  }
  v116 = *(double *)(a1 + 16);
  if (v116 < *(double *)(a1 + 24))
LABEL_107:
    v115 = v115 + v114 * 10.0;
LABEL_109:
  v117 = *(double *)(a1 + 40);
  v118 = *(double *)(a1 + 48);
  v119 = v117 + v113 * v111;
  v120 = v115 + v118 * v111;
  v121 = v110 - *(double *)(a1 + 8) * v111;
  v122 = *(double *)(a1 + 88);
  v123 = sqrt(v122) * 3.0;
  v187 = v121 - v116;
  if (vabdd_f64(v121, v116) >= v123)
  {
    if (a4)
      goto LABEL_120;
    if (v121 - v116 < 0.0)
      v123 = -v123;
    v182 = v123;
    v184 = *(double *)(a1 + 64) + *(double *)(a1 + 32);
    v124 = pow(dbl_208F16C40[v112 > 300], v22 * 30.0 / 1000.0);
    v125 = *(double *)(a1 + 80);
    v126 = 1.0 - v124;
    v127 = v182;
  }
  else
  {
    if (a4)
      goto LABEL_120;
    v184 = *(double *)(a1 + 64) + *(double *)(a1 + 32);
    v124 = pow(dbl_208F16C40[v112 > 300], v22 * 30.0 / 1000.0);
    v125 = *(double *)(a1 + 80);
    v126 = 1.0 - v124;
    v127 = v187;
  }
  v128 = v126 * v127 + v124 * v125;
  *(double *)(a1 + 80) = v128;
  v129 = (v128 - v127) * (v126 * (v128 - v127)) + v124 * v122;
  if (v129 >= 1.0)
    v122 = v129;
  else
    v122 = 1.0;
  *(double *)(a1 + 88) = v122;
  v113 = v184;
LABEL_120:
  v130 = v120 + v122 + v111 * v119;
  v131 = v119 / v130;
  v132 = v120 / v130;
  v133 = 1.0 - v119 / v130 * v111;
  v134 = -(v120 / v130 * v111);
  v135 = 1.0 - v120 / v130;
  v136 = v113 * v133 - v119 / v130 * v118;
  v137 = v117 * v133 - v131 * v115;
  *(double *)(a1 + 32) = v136;
  *(double *)(a1 + 40) = v137;
  v138 = v118 * v135 + v113 * v134;
  v139 = v115 * v135 + v117 * v134;
  *(double *)(a1 + 48) = v138;
  *(double *)(a1 + 56) = v139;
  if ((v136 + v139 < 0.0 || v136 < 0.0 || v136 * v139 - v137 * v138 < 0.0)
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v140, v141, v142, v143, v144, v145, v146, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/overuse_estimator.cc");
  }
  v147 = *(double *)(a1 + 16);
  result = *(double *)(a1 + 8) + v131 * v187;
  *(double *)(a1 + 24) = v147;
  *(double *)(a1 + 8) = result;
  *(double *)(a1 + 16) = v147 + v132 * v187;
  return result;
}

void webrtc::OveruseFrameDetector::CreateProcessingUsage(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char *v42[2];
  char v43;

  if (*(int *)(a2 + 24) < 1)
  {
    v6 = operator new();
    *(_QWORD *)v6 = &off_24C0B82B8;
    *(_QWORD *)(v6 + 8) = 0x3F7EB8523F7F7CEELL;
    *(_DWORD *)(v6 + 16) = 1109393408;
    *(_OWORD *)(v6 + 20) = *(_OWORD *)a2;
    *(_OWORD *)(v6 + 32) = *(_OWORD *)(a2 + 12);
    *(_QWORD *)(v6 + 48) = v6 + 48;
    *(_QWORD *)(v6 + 56) = v6 + 48;
    *(_QWORD *)(v6 + 64) = 0;
    *(_QWORD *)(v6 + 72) = 0;
    *(_QWORD *)(v6 + 80) = -1;
    *(_DWORD *)(v6 + 88) = 1110704128;
    v7 = operator new();
    *(_DWORD *)v7 = *(_DWORD *)(v6 + 12);
    __asm { FMOV            V8.2S, #-1.0 }
    *(_QWORD *)(v7 + 4) = _D8;
    *(_QWORD *)(v6 + 96) = v7;
    v13 = operator new();
    *(_DWORD *)v13 = *(_DWORD *)(v6 + 8);
    *(_QWORD *)(v13 + 4) = _D8;
    *(_QWORD *)(v6 + 104) = v13;
    (**(void (***)(uint64_t))v6)(v6);
  }
  else
  {
    v6 = operator new();
    *(_QWORD *)v6 = &off_24C0B8270;
    *(_OWORD *)(v6 + 8) = *(_OWORD *)a2;
    *(_OWORD *)(v6 + 20) = *(_OWORD *)(a2 + 12);
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 40) = v6 + 48;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = -1;
    *(double *)(v6 + 72) = (double)(*(_DWORD *)(v6 + 8) + *(_DWORD *)(v6 + 12)) / 200.0;
  }
  *a3 = v6;
  (*(void (**)(char **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(v42, a1, "WebRTC-ForceSimulatedOveruseIntervalMs", 38);
  if (v43 < 0)
  {
    if (!v42[1])
    {
LABEL_21:
      operator delete(v42[0]);
      return;
    }
    v41 = 0;
    v40 = 0;
    v14 = v42[0];
  }
  else
  {
    if (!v43)
      return;
    v41 = 0;
    v14 = (const char *)v42;
    v40 = 0;
  }
  if (sscanf(v14, "%d-%d-%d", (char *)&v41 + 4, &v41, &v40) == 3)
  {
    if (SHIDWORD(v41) < 1 || (int)v41 < 1 || v40 < 1)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v33, v34, v35, v36, v37, v38, v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/adaptation/overuse_frame_detector.cc");
    }
    else
    {
      v15 = operator new();
      v17 = (int)v41;
      v16 = SHIDWORD(v41);
      v18 = v40;
      *(_QWORD *)v15 = &off_24C0B8300;
      *(_QWORD *)(v15 + 8) = v6;
      *(_QWORD *)(v15 + 16) = v16;
      *(_QWORD *)(v15 + 24) = v17;
      *(_QWORD *)(v15 + 32) = v18;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = -1;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/adaptation/overuse_frame_detector.cc");
      *a3 = v15;
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/adaptation/overuse_frame_detector.cc");
  }
  if (v43 < 0)
    goto LABEL_21;
}

uint64_t webrtc::OveruseFrameDetector::OveruseFrameDetector(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *p_p;
  void *__p;
  uint64_t v13;
  unsigned __int8 v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C0B8248;
  *(_OWORD *)(a1 + 8) = xmmword_208F16C90;
  *(_QWORD *)(a1 + 24) = 0x200000003;
  *(_DWORD *)(a1 + 32) = 0;
  v4 = *a2;
  *(_QWORD *)(a1 + 40) = *a2;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a2 + 1);
  v8 = *(_OWORD *)(a2 + 3);
  *(_QWORD *)(a1 + 168) = off_24C0B4170;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a3;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 100) = 0;
  *(_OWORD *)(a1 + 104) = xmmword_208F08CC0;
  *(_QWORD *)(a1 + 120) = 0x1E00000000;
  *(_QWORD *)(a1 + 128) = -1;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = -1;
  *(_BYTE *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 40000;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 223) = 3;
  *(_QWORD *)(a1 + 176) = 0;
  if (a1 + 200 <= (unint64_t)"tau" && a1 + 203 > (unint64_t)"tau")
    goto LABEL_14;
  *(_BYTE *)(a1 + 202) = 117;
  *(_WORD *)(a1 + 200) = 24948;
  *(_BYTE *)(a1 + 203) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 168) = &unk_24C0B4230;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  v15[0] = a1 + 168;
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(&__p, *(_QWORD *)(a1 + 48), "WebRTC-CpuLoadEstimator", 23);
  if (((char)v14 & 0x80000000) == 0)
  {
    v9 = v14;
    p_p = (char *)&__p;
    goto LABEL_11;
  }
  v9 = v13;
  if (v13 < 0 || (p_p = (char *)__p, v13) && !__p)
LABEL_14:
    __break(1u);
LABEL_11:
  webrtc::ParseFieldTrial(v15, 1, p_p, v9);
  if ((char)v14 < 0)
    operator delete(__p);
  return a1;
}

void webrtc::OveruseFrameDetector::~OveruseFrameDetector(webrtc::OveruseFrameDetector *this)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_24C0B8248;
  *((_QWORD *)this + 21) = off_24C0B4170;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 10);
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      MEMORY[0x20BD0ADEC]();
  }
  v7 = (unsigned int *)*((_QWORD *)this + 5);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
}

{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_24C0B8248;
  *((_QWORD *)this + 21) = off_24C0B4170;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 10);
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      MEMORY[0x20BD0ADEC]();
  }
  v7 = (unsigned int *)*((_QWORD *)this + 5);
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::OveruseFrameDetector::StartCheckForOveruse(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v22;
  char v23;
  _QWORD v24[2];
  __n128 (*v25)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v26)(_QWORD *);
  unsigned int *v27;

  v7 = *a3;
  *(_OWORD *)(a1 + 20) = *(__int128 *)((char *)a3 + 12);
  *(_OWORD *)(a1 + 8) = v7;
  if (*(_BYTE *)(a1 + 240))
  {
    v8 = *(_QWORD *)(a1 + 232);
    v9 = v8 / 0x3E8uLL;
    if (v8 % 0x3E8uLL > 0x1F3)
      LODWORD(v9) = v9 + 1;
    if (-v8 % 0x3E8uLL <= 0x1F4)
      v10 = 0;
    else
      v10 = -1;
    if (v8 < 0)
      v11 = v10 - -v8 / 0x3E8uLL;
    else
      v11 = v9;
    *(_DWORD *)(a1 + 32) = v11;
  }
  *(_DWORD *)(a1 + 120) = 0;
  webrtc::OveruseFrameDetector::CreateProcessingUsage(*(_QWORD *)(a1 + 48), (uint64_t)a3, (uint64_t *)&v27);
  v12 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v27;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
  v24[0] = a1;
  v24[1] = a4;
  v25 = absl::internal_any_invocable::LocalManagerTrivial;
  v26 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::OveruseFrameDetector::StartCheckForOveruse(webrtc::TaskQueueBase *,webrtc::CpuOveruseOptions const&,webrtc::OveruseFrameDetectorObserverInterface *)::$_1 &>;
  {
    v22 = (_QWORD *)operator new();
    *v22 = &unk_24C0B13E8;
    webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v22;
  }
  webrtc::RepeatingTaskHandle::DelayedStart(a2, 100000, (uint64_t)v24, 0, webrtc::Clock::GetRealTimeClock(void)::clock, (uint64_t)&v23, &v27);
  v14 = v27;
  v27 = 0;
  v15 = *(unsigned int **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      MEMORY[0x20BD0ADEC]();
    v18 = v27;
    if (v27)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        MEMORY[0x20BD0ADEC]();
    }
  }
  return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *))v25)(1, v24, v24);
}

uint64_t webrtc::OveruseFrameDetector::OnTargetFramerateUpdated(webrtc::OveruseFrameDetector *this, int a2)
{
  int v2;
  uint64_t v3;

  if (a2 >= 30)
    v2 = 30;
  else
    v2 = a2;
  *((_DWORD *)this + 31) = v2;
  v3 = *((_QWORD *)this + 20);
  if (v2 <= 7)
    v2 = 7;
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v3 + 8))(v3, (float)(0x3E8u / v2) * 1.35);
}

uint64_t webrtc::OveruseFrameDetector::FrameCaptured(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;

  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
      LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    if (*(_DWORD *)(a1 + 120) != (_DWORD)v8 * v7)
      goto LABEL_9;
LABEL_7:
    v9 = *(_QWORD *)(a1 + 112);
    if (v9 == -1 || a3 - v9 <= 1000 * *(int *)(a1 + 16))
      goto LABEL_16;
    goto LABEL_9;
  }
  if (!*(_DWORD *)(a1 + 120))
    goto LABEL_7;
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v10 = *(_QWORD *)(a2 + 8);
    if (v10)
      LODWORD(v10) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  }
  else
  {
    v11 = 0;
  }
  *(_DWORD *)(a1 + 120) = v10 * v11;
  (***(void (****)(_QWORD))(a1 + 160))(*(_QWORD *)(a1 + 160));
  *(_OWORD *)(a1 + 104) = xmmword_208F08CC0;
  if (*(_BYTE *)(a1 + 100))
    *(_BYTE *)(a1 + 100) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, *(unsigned int *)(a1 + 124));
  v9 = *(_QWORD *)(a1 + 112);
LABEL_16:
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160), a2, a3, v9);
  *(_QWORD *)(a1 + 112) = a3;
  return result;
}

double webrtc::`anonymous namespace'::SendProcessingUsage2::Reset(webrtc::_anonymous_namespace_::SendProcessingUsage2 *this)
{
  double result;

  *((_QWORD *)this + 8) = -1;
  result = (double)(*((_DWORD *)this + 2) + *((_DWORD *)this + 3)) / 200.0;
  *((double *)this + 9) = result;
  return result;
}

uint64_t webrtc::`anonymous namespace'::SendProcessingUsage2::FrameSent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v35;
  std::string *v36;

  v9 = a4;
  if ((a5 & 0xFF00000000) == 0)
    goto LABEL_32;
  v11 = *(uint64_t **)(a1 + 40);
  v12 = (uint64_t **)(a1 + 48);
  if (v11 != (uint64_t *)(a1 + 48))
  {
    v13 = a4 - 2000000;
    do
    {
      if (v11[4] >= v13)
        break;
      v15 = (uint64_t *)v11[1];
      v16 = v11;
      if (v15)
      {
        do
        {
          v17 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v17 = (uint64_t *)v16[2];
          v18 = *v17 == (_QWORD)v16;
          v16 = v17;
        }
        while (!v18);
      }
      if (*(uint64_t **)(a1 + 40) == v11)
        *(_QWORD *)(a1 + 40) = v17;
      v14 = *(uint64_t **)(a1 + 48);
      --*(_QWORD *)(a1 + 56);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v14, v11);
      operator delete(v11);
      v11 = v17;
    }
    while (v17 != (uint64_t *)v12);
  }
  v19 = *v12;
  v20 = (uint64_t *)(a1 + 48);
  if (*v12)
  {
    while (1)
    {
      while (1)
      {
        v20 = v19;
        v21 = v19[4];
        if (v21 <= v9)
          break;
        v19 = (uint64_t *)*v20;
        v12 = (uint64_t **)v20;
        if (!*v20)
          goto LABEL_20;
      }
      if (v21 >= v9)
        break;
      v19 = (uint64_t *)v20[1];
      if (!v19)
      {
        v12 = (uint64_t **)(v20 + 1);
        goto LABEL_20;
      }
    }
    v35 = *((int *)v20 + 10);
    if ((int)a5 <= v35)
    {
      v25 = 0;
    }
    else
    {
      v25 = a5 - v35;
      *((_DWORD *)v20 + 10) = a5;
    }
  }
  else
  {
LABEL_20:
    v22 = operator new(0x30uLL);
    v22[4] = v9;
    *((_DWORD *)v22 + 10) = a5;
    *v22 = 0;
    v22[1] = 0;
    v22[2] = v20;
    *v12 = v22;
    v23 = **(_QWORD **)(a1 + 40);
    if (v23)
    {
      *(_QWORD *)(a1 + 40) = v23;
      v24 = *v12;
    }
    else
    {
      v24 = v22;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 48), v24);
    ++*(_QWORD *)(a1 + 56);
    v25 = a5;
  }
  v26 = *(_QWORD *)(a1 + 64);
  if (v26 == -1)
    goto LABEL_32;
  if (v26 > v9)
    v9 = *(_QWORD *)(a1 + 64);
  v27 = (double)(v9 - v26);
  v28 = v27 * 0.000001;
  if (v27 * 0.000001 >= 0.0)
  {
    v29 = (double)v25 * 0.000001;
    v30 = (double)*(int *)(a1 + 32) * 0.001;
    v31 = v28 / v30;
    if (v28 / v30 >= 0.0001)
    {
      v33 = -v31;
      v32 = -expm1(-v31) / v28;
    }
    else
    {
      v32 = (v31 * -0.5 + 1.0) / v30;
      v33 = -v31;
    }
    *(long double *)(a1 + 72) = exp(v33) * *(double *)(a1 + 72) + v32 * v29;
LABEL_32:
    *(_QWORD *)(a1 + 64) = v9;
    return a5;
  }
  v36 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/adaptation/overuse_frame_detector.cc", 273, "diff_time >= 0.0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)7,double> const&)::t, a5, a6, a7, a8, COERCE__INT64(v27 * 0.000001));
}

uint64_t webrtc::`anonymous namespace'::SendProcessingUsage2::Value(webrtc::_anonymous_namespace_::SendProcessingUsage2 *this)
{
  return (int)(*((double *)this + 9) * 100.0 + 0.5);
}

void webrtc::`anonymous namespace'::SendProcessingUsage2::~SendProcessingUsage2(webrtc::_anonymous_namespace_::SendProcessingUsage2 *this)
{
  *(_QWORD *)this = &off_24C0B8270;
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 6));
}

{
  *(_QWORD *)this = &off_24C0B8270;
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 6));
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webrtc::`anonymous namespace'::SendProcessingUsage1::Reset(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v10;
  float v11;
  float v12;

  v1 = this;
  if (this[8])
  {
    v2 = this + 6;
    v3 = this[6];
    this = (_QWORD *)this[7];
    v4 = *this;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    v1[8] = 0;
    if (this != v1 + 6)
    {
      do
      {
        v5 = (_QWORD *)this[1];
        operator delete(this);
        this = v5;
      }
      while (v5 != v2);
    }
  }
  *(_OWORD *)(v1 + 9) = xmmword_208F08CC0;
  *((_DWORD *)v1 + 22) = 1110704128;
  v6 = v1[13];
  v7 = *((float *)v1 + 4);
  v8 = *(float *)(v6 + 8);
  if (v7 > v8 && v8 != -1.0)
    v7 = *(float *)(v6 + 8);
  *(_DWORD *)v6 = *((_DWORD *)v1 + 2);
  *(float *)(v6 + 4) = v7;
  v10 = v1[12];
  v11 = (float)(*((float *)v1 + 4) * (float)((float)(*((_DWORD *)v1 + 6) + *((_DWORD *)v1 + 5)) * 0.5)) / 100.0;
  v12 = *(float *)(v10 + 8);
  if (v11 > v12 && v12 != -1.0)
    v11 = *(float *)(v10 + 8);
  *(_DWORD *)v10 = *((_DWORD *)v1 + 3);
  *(float *)(v10 + 4) = v11;
  return this;
}

uint64_t webrtc::`anonymous namespace'::SendProcessingUsage1::SetMaxSampleDiffMs(uint64_t this, float a2)
{
  *(float *)(this + 88) = a2;
  return this;
}

_DWORD *webrtc::`anonymous namespace'::SendProcessingUsage1::FrameCaptured(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v14;
  int v15;
  _DWORD *result;
  _QWORD *v17;
  uint64_t v18;

  if (a4 != -1)
  {
    v7 = (double)(a3 - a4) * 0.001;
    v8 = *(float **)(a1 + 104);
    v9 = 7.0;
    if ((float)(v7 / 33.333) <= 7.0)
      v9 = v7 / 33.333;
    v10 = v8[1];
    if (v10 != -1.0)
    {
      v11 = *v8;
      if (v9 != 1.0)
        v11 = powf(v11, v9);
      v7 = (float)((float)(1.0 - v11) * v7) + (float)(v11 * v10);
    }
    v12 = v8[2];
    if (v7 <= v12 || v12 == -1.0)
      v12 = v7;
    v8[1] = v12;
  }
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_DWORD *)(a2 + 16);
  result = operator new(0x30uLL);
  result[6] = v15;
  *((_QWORD *)result + 4) = a3;
  *((_QWORD *)result + 5) = -1;
  v18 = *(_QWORD *)(a1 + 48);
  v17 = (_QWORD *)(a1 + 48);
  *((_QWORD *)result + 1) = v17;
  *((_QWORD *)result + 2) = v14;
  *(_QWORD *)result = v18;
  *(_QWORD *)(v18 + 8) = result;
  *v17 = result;
  ++v17[2];
  return result;
}

void webrtc::`anonymous namespace'::SendProcessingUsage1::FrameSent(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  float v18;

  v5 = a1[7];
  if ((_QWORD *)v5 == a1 + 6)
  {
LABEL_4:
    v6 = a1[8];
    if (v6)
      goto LABEL_8;
  }
  else
  {
    while (*(_DWORD *)(v5 + 24) != a2)
    {
      v5 = *(_QWORD *)(v5 + 8);
      if ((_QWORD *)v5 == a1 + 6)
        goto LABEL_4;
    }
    *(_QWORD *)(v5 + 40) = a3;
    v6 = a1[8];
    if (v6)
    {
LABEL_8:
      do
      {
        v8 = (uint64_t *)a1[7];
        v9 = v8[4];
        if (a3 - v9 < 1000000)
          break;
        v10 = v8[5];
        if (v10 != -1)
        {
          v11 = v10 - v9;
          v12 = a1[10];
          if (v12 == -1)
          {
            a1[10] = v9;
          }
          else
          {
            v13 = (double)v11 * 0.001;
            ++a1[9];
            if ((float)((float)(uint64_t)((double)(v9 - v12) * 0.001) / 33.333) <= 7.0)
              v14 = (float)(uint64_t)((double)(v9 - v12) * 0.001) / 33.333;
            else
              v14 = 7.0;
            v15 = (float *)a1[12];
            v16 = v15[1];
            if (v16 != -1.0)
            {
              v17 = *v15;
              if (v14 != 1.0)
                v17 = powf(v17, v14);
              v13 = (float)((float)(1.0 - v17) * v13) + (float)(v17 * v16);
            }
            v18 = v15[2];
            if (v13 <= v18 || v18 == -1.0)
              v18 = v13;
            v15[1] = v18;
            v6 = a1[8];
            a1[10] = v9;
            if (!v6)
            {
              __break(1u);
              return;
            }
            v8 = (uint64_t *)a1[7];
          }
        }
        v7 = *v8;
        *(_QWORD *)(v7 + 8) = v8[1];
        *(_QWORD *)v8[1] = v7;
        a1[8] = v6 - 1;
        operator delete(v8);
        v6 = a1[8];
      }
      while (v6);
    }
  }
}

uint64_t webrtc::`anonymous namespace'::SendProcessingUsage1::Value(webrtc::_anonymous_namespace_::SendProcessingUsage1 *this)
{
  float v2;

  if (*((_QWORD *)this + 9) < (unint64_t)*((unsigned int *)this + 8))
    return (int)(float)((float)((float)(*((_DWORD *)this + 6) + *((_DWORD *)this + 5)) * 0.5) + 0.5);
  v2 = *(float *)(*((_QWORD *)this + 13) + 4);
  if (v2 < 1.0)
    v2 = 1.0;
  if (*((float *)this + 22) < v2)
    v2 = *((float *)this + 22);
  return (int)((float)((float)(*(float *)(*((_QWORD *)this + 12) + 4) * 100.0) / v2) + 0.5);
}

void webrtc::`anonymous namespace'::SendProcessingUsage1::~SendProcessingUsage1(webrtc::_anonymous_namespace_::SendProcessingUsage1 *this)
{
  uint64_t v2;
  uint64_t v3;
  webrtc::_anonymous_namespace_::SendProcessingUsage1 *v4;
  uint64_t v5;
  uint64_t v6;
  webrtc::_anonymous_namespace_::SendProcessingUsage1 *v7;

  *(_QWORD *)this = &off_24C0B82B8;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    MEMORY[0x20BD0ADEC](v2, 0x1000C403E1C8BA9);
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    MEMORY[0x20BD0ADEC](v3, 0x1000C403E1C8BA9);
  if (*((_QWORD *)this + 8))
  {
    v5 = *((_QWORD *)this + 6);
    v4 = (webrtc::_anonymous_namespace_::SendProcessingUsage1 *)*((_QWORD *)this + 7);
    v6 = *(_QWORD *)v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    *((_QWORD *)this + 8) = 0;
    if (v4 != (webrtc::_anonymous_namespace_::SendProcessingUsage1 *)((char *)this + 48))
    {
      do
      {
        v7 = (webrtc::_anonymous_namespace_::SendProcessingUsage1 *)*((_QWORD *)v4 + 1);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != (webrtc::_anonymous_namespace_::SendProcessingUsage1 *)((char *)this + 48));
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  webrtc::_anonymous_namespace_::SendProcessingUsage1 *v4;
  uint64_t v5;
  uint64_t v6;
  webrtc::_anonymous_namespace_::SendProcessingUsage1 *v7;

  *(_QWORD *)this = &off_24C0B82B8;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    MEMORY[0x20BD0ADEC](v2, 0x1000C403E1C8BA9);
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    MEMORY[0x20BD0ADEC](v3, 0x1000C403E1C8BA9);
  if (*((_QWORD *)this + 8))
  {
    v5 = *((_QWORD *)this + 6);
    v4 = (webrtc::_anonymous_namespace_::SendProcessingUsage1 *)*((_QWORD *)this + 7);
    v6 = *(_QWORD *)v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    *((_QWORD *)this + 8) = 0;
    if (v4 != (webrtc::_anonymous_namespace_::SendProcessingUsage1 *)((char *)this + 48))
    {
      do
      {
        v7 = (webrtc::_anonymous_namespace_::SendProcessingUsage1 *)*((_QWORD *)v4 + 1);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != (webrtc::_anonymous_namespace_::SendProcessingUsage1 *)((char *)this + 48));
    }
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::OverdoseInjector::Reset(webrtc::_anonymous_namespace_::OverdoseInjector *this)
{
  return (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
}

uint64_t webrtc::`anonymous namespace'::OverdoseInjector::SetMaxSampleDiffMs(webrtc::_anonymous_namespace_::OverdoseInjector *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), a2);
}

uint64_t webrtc::`anonymous namespace'::OverdoseInjector::FrameCaptured(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t webrtc::`anonymous namespace'::OverdoseInjector::FrameSent(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t webrtc::`anonymous namespace'::OverdoseInjector::Value(webrtc::_anonymous_namespace_::OverdoseInjector *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _BOOL4 v15;
  unsigned int v16;
  uint64_t result;

  if (rtc::g_clock)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v2 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  v3 = v2 / 1000000;
  v4 = *((_QWORD *)this + 6);
  if (v4 == -1)
  {
    *((_QWORD *)this + 6) = v3;
  }
  else
  {
    v5 = *((_DWORD *)this + 10);
    if (v5 == 2)
    {
      if (v3 <= *((_QWORD *)this + 4) + v4)
        goto LABEL_20;
      *((_DWORD *)this + 10) = 0;
      *((_QWORD *)this + 6) = v3;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
        goto LABEL_20;
    }
    else if (v5 == 1)
    {
      if (v3 <= *((_QWORD *)this + 3) + v4)
        goto LABEL_20;
      *((_DWORD *)this + 10) = 2;
      *((_QWORD *)this + 6) = v3;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
        goto LABEL_20;
    }
    else
    {
      if (v5)
        goto LABEL_20;
      if (v3 <= *((_QWORD *)this + 2) + v4)
        goto LABEL_20;
      *((_DWORD *)this + 10) = 1;
      *((_QWORD *)this + 6) = v3;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
        goto LABEL_20;
    }
    rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/adaptation/overuse_frame_detector.cc");
  }
LABEL_20:
  v13 = *((_DWORD *)this + 10);
  if (v13 == 1)
    v14 = 250;
  else
    v14 = 0;
  v15 = v13 != 2 && v13 != 1;
  if (v13 == 2)
    v16 = 5;
  else
    v16 = v14;
  LODWORD(result) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  if (v15)
    return result;
  else
    return v16;
}

void webrtc::`anonymous namespace'::OverdoseInjector::~OverdoseInjector(webrtc::_anonymous_namespace_::OverdoseInjector *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24C0B8300;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24C0B8300;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::OveruseFrameDetector::StartCheckForOveruse(webrtc::TaskQueueBase *,webrtc::CpuOveruseOptions const&,webrtc::OveruseFrameDetectorObserverInterface *)::$_1 &>(_QWORD *a1)
{
  void (***v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  void (**v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v2 = *a1;
  v1 = (void (***)(_QWORD))a1[1];
  v3 = *(_QWORD *)(*a1 + 104);
  *(_QWORD *)(v2 + 104) = v3 + 1;
  if (v3 < *(int *)(v2 + 24) || !*(_BYTE *)(v2 + 100))
    return 5000000;
  if (rtc::g_clock)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    if (!*(_BYTE *)(v2 + 100))
      goto LABEL_34;
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    result = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
           / dword_253EA791C;
    if (!*(_BYTE *)(v2 + 100))
      goto LABEL_34;
  }
  v5 = result / 1000000;
  v6 = *(_DWORD *)(v2 + 96);
  if (*(_DWORD *)(v2 + 8) <= v6)
  {
    v9 = *(_DWORD *)(v2 + 136) + 1;
    *(_DWORD *)(v2 + 136) = v9;
    if (v9 >= *(_DWORD *)(v2 + 28))
      goto LABEL_11;
LABEL_17:
    if (*(_BYTE *)(v2 + 152))
    {
      if (*(_QWORD *)(v2 + 144) + 10000 > v5)
        goto LABEL_23;
    }
    else if (*(_QWORD *)(v2 + 144) + *(int *)(v2 + 156) > v5)
    {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v2 + 12) > v6)
    {
      *(_QWORD *)(v2 + 144) = v5;
      *(_BYTE *)(v2 + 152) = 1;
      v10 = *v1;
      goto LABEL_29;
    }
LABEL_23:
    if (*(_BYTE *)(v2 + 152))
      goto LABEL_30;
    goto LABEL_24;
  }
  *(_DWORD *)(v2 + 136) = 0;
  if (*(int *)(v2 + 28) > 0)
    goto LABEL_17;
LABEL_11:
  v7 = *(_QWORD *)(v2 + 144);
  if (v7 > *(_QWORD *)(v2 + 128))
  {
    if (v5 - v7 >= 40000 && *(int *)(v2 + 140) < 5)
    {
      v8 = 40000;
    }
    else
    {
      v8 = 2 * *(_DWORD *)(v2 + 156);
      if (v8 >= 240000)
        v8 = 240000;
    }
    *(_DWORD *)(v2 + 156) = v8;
  }
  *(_QWORD *)(v2 + 128) = v5;
  *(_BYTE *)(v2 + 152) = 0;
  v18 = *(_DWORD *)(v2 + 140) + 1;
  *(_DWORD *)(v2 + 136) = 0;
  *(_DWORD *)(v2 + 140) = v18;
  v10 = *v1 + 1;
LABEL_29:
  (*v10)(v1);
  if (*(_BYTE *)(v2 + 152))
  {
LABEL_30:
    result = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
    if ((result & 1) == 0)
      goto LABEL_31;
    return 5000000;
  }
LABEL_24:
  result = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
  if ((result & 1) != 0)
    return 5000000;
LABEL_31:
  if (*(_BYTE *)(v2 + 100))
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/adaptation/overuse_frame_detector.cc");
    return 5000000;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t cricket::P2PTransportChannel::P2PTransportChannel(uint64_t a1, char *a2, size_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *p_p;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int *v38;
  unint64_t v39;
  _BOOL4 v40;
  int v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  unint64_t v91;
  void *v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  unint64_t v103;
  BOOL v104;
  int v105;
  int v106;
  int *v108;
  unint64_t v109;
  BOOL v110;
  int v111;
  int v112;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(void);
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  void **v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  void **v135;
  uint64_t v136;
  int *v138;
  uint64_t v139;
  int v140;
  void *__p;
  unint64_t v142;
  unsigned __int8 v143;
  void **v144;
  _BYTE v145[24];
  _BYTE *v146;
  _BYTE v147[24];
  _BYTE *v148;
  _BYTE *v149;
  std::string v150;
  uint64_t v151;
  void *v152[2];
  char v153;
  void **v154;
  _QWORD v155[3];
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE *v159;
  std::string v160;
  uint64_t v161;

  v161 = *MEMORY[0x24BDAC8D0];
  cricket::IceTransportInternal::IceTransportInternal((cricket::IceTransportInternal *)a1);
  *v19 = &off_24C0B8348;
  v19[117] = &unk_24C0B8498;
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_197:
    abort();
  if (a3 > 0x16)
  {
    v22 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v22 = a3 | 7;
    v23 = v22 + 1;
    v20 = (char *)operator new(v22 + 1);
    *(_QWORD *)(a1 + 944) = v20;
    *(_QWORD *)(a1 + 960) = v23 | 0x8000000000000000;
    *(_QWORD *)(a1 + 952) = a3;
    v21 = &v20[a3];
    if (v20 > a2)
      goto LABEL_9;
LABEL_8:
    if (v21 > a2)
      goto LABEL_196;
    goto LABEL_9;
  }
  v20 = (char *)(a1 + 944);
  *(_BYTE *)(a1 + 967) = a3;
  v21 = (char *)(a1 + 944 + a3);
  if (a1 + 944 <= (unint64_t)a2)
    goto LABEL_8;
LABEL_9:
  if (a3)
    v20 = (char *)memmove(v20, a2, a3);
  *v21 = 0;
  *(_DWORD *)(a1 + 968) = a4;
  *(_QWORD *)(a1 + 976) = a5;
  v24 = *a7;
  if (!*a7)
    v24 = a6;
  *(_QWORD *)(a1 + 984) = v24;
  v25 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 992) = v25;
  *(_QWORD *)(a1 + 1000) = rtc::Thread::Current((rtc::Thread *)v20);
  *(_BYTE *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1012) = 0u;
  *(_OWORD *)(a1 + 1028) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1060) = 0u;
  *(_OWORD *)(a1 + 1076) = 0u;
  *(_OWORD *)(a1 + 1092) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1124) = 0u;
  *(_QWORD *)(a1 + 1137) = 0;
  *(_QWORD *)(a1 + 1152) = a1 + 1160;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_BYTE *)(a1 + 1224) = 0;
  *(_QWORD *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_QWORD *)(a1 + 1256) = 0x200000000;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_DWORD *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1280) = 0u;
  if (!a11)
    goto LABEL_19;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a11 + 16))(&__p, a11, "WebRTC-StunInterPacketDelay", 27);
  if ((v143 & 0x80u) == 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v27 = strtoul(p_p, 0, 10);
  v28 = v27;
  if (((char)v143 & 0x80000000) == 0)
  {
    if (v27)
      goto LABEL_20;
    goto LABEL_19;
  }
  operator delete(__p);
  if (!v28)
LABEL_19:
    v28 = 48;
LABEL_20:
  *(_DWORD *)(a1 + 1296) = v28;
  *(_DWORD *)(a1 + 1300) = 0;
  *(_QWORD *)(a1 + 1304) = 0x9C400000000;
  *(_BYTE *)(a1 + 1312) = 1;
  *(_DWORD *)(a1 + 1316) = 25000;
  *(_BYTE *)(a1 + 1320) = 1;
  *(_DWORD *)(a1 + 1324) = 0;
  *(_BYTE *)(a1 + 1328) = 0;
  *(_DWORD *)(a1 + 1332) = 2500;
  *(_BYTE *)(a1 + 1336) = 1;
  *(_WORD *)(a1 + 1340) = 1;
  *(_DWORD *)(a1 + 1344) = 300000;
  *(_BYTE *)(a1 + 1348) = 1;
  *(_DWORD *)(a1 + 1352) = 1000;
  *(_BYTE *)(a1 + 1356) = 1;
  *(_DWORD *)(a1 + 1360) = 2;
  *(_BYTE *)(a1 + 1364) = 0;
  *(_BYTE *)(a1 + 1368) = 0;
  *(_BYTE *)(a1 + 1372) = 0;
  *(_BYTE *)(a1 + 1376) = 0;
  *(_BYTE *)(a1 + 1380) = 0;
  *(_BYTE *)(a1 + 1384) = 0;
  *(_BYTE *)(a1 + 1388) = 0;
  *(_BYTE *)(a1 + 1392) = 0;
  *(_BYTE *)(a1 + 1396) = 0;
  *(_BYTE *)(a1 + 1400) = 0;
  *(_BYTE *)(a1 + 1404) = 0;
  *(_BYTE *)(a1 + 1408) = 0;
  *(_BYTE *)(a1 + 1412) = 0;
  *(_BYTE *)(a1 + 1416) = 0;
  *(_BYTE *)(a1 + 1420) = 0;
  *(_BYTE *)(a1 + 1424) = 0;
  *(_QWORD *)(a1 + 1428) = 0xFFFFFFFF00000000;
  *(_BYTE *)(a1 + 1444) = 0;
  *(_BYTE *)(a1 + 1480) = 0;
  *(_DWORD *)(a1 + 1439) = 0;
  *(_DWORD *)(a1 + 1436) = 0;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_QWORD *)(a1 + 1520) = 0;
  *(_DWORD *)(a1 + 1528) = 1065353216;
  *(_QWORD *)(a1 + 1608) = 0;
  *(_BYTE *)(a1 + 1616) = 0;
  *(_BYTE *)(a1 + 1620) = 0;
  *(_BYTE *)(a1 + 1624) = 0;
  *(_BYTE *)(a1 + 1628) = 0;
  *(_BYTE *)(a1 + 1632) = 0;
  *(_BYTE *)(a1 + 1636) = 0;
  *(_BYTE *)(a1 + 1640) = 0;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_DWORD *)(a1 + 1600) = 0;
  *(_WORD *)(a1 + 1644) = 1;
  *(_DWORD *)(a1 + 1648) = 500;
  *(_WORD *)(a1 + 1652) = 0;
  *(_BYTE *)(a1 + 1654) = 0;
  *(_DWORD *)(a1 + 1656) = 30000;
  *(_BYTE *)(a1 + 1660) = 1;
  *(_BYTE *)(a1 + 1664) = 0;
  *(_BYTE *)(a1 + 1668) = 0;
  *(_DWORD *)(a1 + 1672) = 16842752;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_QWORD *)(a1 + 1688) = 1;
  *(_QWORD *)(a1 + 1744) = 0;
  *(_QWORD *)(a1 + 1736) = 0;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_QWORD *)(a1 + 1728) = a1 + 1736;
  v29 = operator new();
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)(v29 + 16) = 0u;
  *(_QWORD *)v29 = v29 + 8;
  *(_QWORD *)(v29 + 40) = 0;
  *(_QWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 24) = v29 + 32;
  *(_QWORD *)(v29 + 48) = 0x4000;
  v30 = *(_QWORD *)(a1 + 1696);
  *(_QWORD *)(a1 + 1696) = v29;
  if (v30)
  {
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*(_QWORD **)(v30 + 32));
    std::__tree<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>>>::destroy(*(_QWORD **)(v30 + 8));
    MEMORY[0x20BD0ADEC](v30, 0x1020C4014A78C51);
  }
  v31 = (_BYTE *)(a1 + 1616);
  *(_QWORD *)(a1 + 1768) = 0;
  *(_QWORD *)(a1 + 1760) = 0;
  *(_QWORD *)(a1 + 1752) = a1 + 1760;
  *(_QWORD *)(a1 + 1792) = 0;
  *(_QWORD *)(a1 + 1784) = 0;
  *(_QWORD *)(a1 + 1776) = a1 + 1784;
  *(_QWORD *)(a1 + 1800) = 0x4000;
  if (*(_BYTE *)(a1 + 1348))
    v32 = (int *)(a1 + 1344);
  else
    v32 = (int *)&cricket::REGATHER_ON_FAILED_NETWORKS_INTERVAL;
  v140 = *v32;
  v33 = operator new();
  webrtc::BasicRegatheringController::BasicRegatheringController(v33, &v140, (_QWORD *)a1, *(_QWORD *)(a1 + 1000));
  v34 = *(_QWORD *)(a1 + 1280);
  *(_QWORD *)(a1 + 1280) = v33;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *(_QWORD **)(a1 + 976);
  v36 = operator new(0x30uLL);
  v36[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,unsigned int,unsigned int>;
  v36[3] = a1;
  v36[4] = cricket::P2PTransportChannel::OnCandidateFilterChanged;
  v36[5] = 0;
  v37 = v35[9];
  v35 += 9;
  *v36 = v37;
  v36[1] = v35;
  *(_QWORD *)(v37 + 8) = v36;
  *v35 = v36;
  ++v35[2];
  (*(void (**)(uint64_t, _QWORD *))(a1 + 8))(a1, v35 - 2);
  *(_QWORD *)(a1 + 1488) = a8;
  if (!a11)
    goto LABEL_130;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a11 + 16))(&__p, a11, "WebRTC-ExtraICEPing", 19);
  if ((char)v143 < 0)
  {
    v39 = v142;
    if ((v142 & 0x8000000000000000) != 0)
      goto LABEL_196;
    v38 = (int *)__p;
    if (v142)
    {
      if (!__p)
        goto LABEL_196;
    }
  }
  else
  {
    v38 = (int *)&__p;
    v39 = v143;
  }
  if (v39 >= 7)
  {
    v41 = *v38;
    v42 = *(int *)((char *)v38 + 3);
    v40 = v41 == 1650552389 && v42 == 1684368482;
  }
  else
  {
    v40 = 0;
  }
  v138 = (int *)(a1 + 1656);
  if ((v143 & 0x80) != 0)
  {
    operator delete(__p);
    if (!v40)
      goto LABEL_49;
  }
  else if (!v40)
  {
    goto LABEL_49;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_49:
  v51 = operator new(0x1C0uLL);
  *v51 = "skip_relay_to_non_relay_connections";
  v51[1] = v31;
  v51[2] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v51[3] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v51[4] = "max_outstanding_pings";
  v51[5] = a1 + 1620;
  v51[6] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Parse;
  v51[7] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Encode;
  v51[8] = "initial_select_dampening";
  v51[9] = a1 + 1628;
  v51[10] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Parse;
  v51[11] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Encode;
  v51[12] = "initial_select_dampening_ping_received";
  v51[13] = a1 + 1636;
  v51[14] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Parse;
  v51[15] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Encode;
  v51[16] = "announce_goog_ping";
  v51[17] = a1 + 1644;
  v51[18] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v51[19] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v51[20] = "enable_goog_ping";
  v51[21] = a1 + 1645;
  v51[22] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v51[23] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v51[24] = "rtt_estimate_halftime_ms";
  v51[25] = a1 + 1648;
  v51[26] = webrtc::struct_parser_impl::TypedParser<int>::Parse;
  v51[27] = webrtc::struct_parser_impl::TypedParser<int>::Encode;
  v51[28] = "send_ping_on_switch_ice_controlling";
  v51[29] = a1 + 1652;
  v51[30] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v51[31] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v51[32] = "send_ping_on_selected_ice_controlling";
  v51[33] = a1 + 1653;
  v51[34] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v51[35] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v51[36] = "send_ping_on_nomination_ice_controlled";
  v51[37] = a1 + 1654;
  v51[38] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v51[39] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v51[40] = "dead_connection_timeout_ms";
  v51[41] = v138;
  v51[42] = webrtc::struct_parser_impl::TypedParser<int>::Parse;
  v51[43] = webrtc::struct_parser_impl::TypedParser<int>::Encode;
  v51[44] = "stop_gather_on_strongly_connected";
  v51[45] = a1 + 1660;
  v51[46] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v51[47] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v51[48] = "enable_goog_delta";
  v51[49] = a1 + 1674;
  v51[50] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v51[51] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v51[52] = "answer_goog_delta";
  v51[53] = a1 + 1675;
  v51[54] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v51[55] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v52 = (uint64_t *)operator new();
  *v52 = (uint64_t)v51;
  v52[1] = (uint64_t)(v51 + 56);
  v52[2] = (uint64_t)(v51 + 56);
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a11 + 16))(&__p, a11, "WebRTC-IceFieldTrials", 21);
  if (((char)v143 & 0x80000000) == 0)
  {
    v31 = (_BYTE *)(a1 + 1616);
    webrtc::StructParametersParser::Parse(v52, (uint64_t)&__p, v143);
    if (((char)v143 & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
  if ((v142 & 0x8000000000000000) != 0)
    goto LABEL_196;
  if (v142)
  {
    v31 = (_BYTE *)(a1 + 1616);
    if (!__p)
      goto LABEL_196;
    webrtc::StructParametersParser::Parse(v52, (uint64_t)__p, v142);
    if ((char)v143 < 0)
      goto LABEL_56;
  }
  else
  {
    v31 = (_BYTE *)(a1 + 1616);
    webrtc::StructParametersParser::Parse(v52, (uint64_t)__p, 0);
    if ((char)v143 < 0)
LABEL_56:
      operator delete(__p);
  }
LABEL_57:
  v53 = (void *)*v52;
  if (*v52)
  {
    v52[1] = (uint64_t)v53;
    operator delete(v53);
  }
  MEMORY[0x20BD0ADEC](v52, 0x20C40960023A9);
  if (*v138 <= 29999)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v54, v55, v56, v57, v58, v59, v60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    *v138 = 30000;
  }
  if (*v31 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v61, v62, v63, v64, v65, v66, v67, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  if (*(_BYTE *)(a1 + 1624) && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 1624))
      goto LABEL_196;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v68, v69, v70, v71, v72, v73, v74, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  }
  if (*(_BYTE *)(a1 + 1632) && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 1632))
      goto LABEL_196;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v75, v76, v77, v78, v79, v80, v81, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  }
  if (*(_BYTE *)(a1 + 1640) && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 1640))
      goto LABEL_196;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v82, v83, v84, v85, v86, v87, v88, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  }
  v89 = operator new(0x20uLL);
  *v89 = "override_dscp";
  v89[1] = a1 + 1664;
  v89[2] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Parse;
  v89[3] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Encode;
  v90 = (uint64_t *)operator new();
  *v90 = (uint64_t)v89;
  v90[1] = (uint64_t)(v89 + 4);
  v90[2] = (uint64_t)(v89 + 4);
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a11 + 16))(&__p, a11, "WebRTC-DscpFieldTrial", 21);
  if ((char)v143 < 0)
  {
    v91 = v142;
    if ((v142 & 0x8000000000000000) != 0)
      goto LABEL_196;
    v92 = __p;
    if (v142)
    {
      if (!__p)
        goto LABEL_196;
    }
  }
  else
  {
    v91 = v143;
    v92 = &__p;
  }
  webrtc::StructParametersParser::Parse(v90, (uint64_t)v92, v91);
  if ((char)v143 < 0)
    operator delete(__p);
  v93 = (void *)*v90;
  if (*v90)
  {
    v90[1] = (uint64_t)v93;
    operator delete(v93);
  }
  MEMORY[0x20BD0ADEC](v90, 0x20C40960023A9);
  if (*(_BYTE *)(a1 + 1668))
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, 5, *(unsigned int *)(a1 + 1664));
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a11 + 16))(v152, a11, "WebRTC-SetSocketReceiveBuffer", 29);
  LODWORD(v139) = 0;
  if (v153 >= 0)
    v94 = (const char *)v152;
  else
    v94 = (const char *)v152[0];
  sscanf(v94, "Enabled-%d", &v139);
  if ((int)v139 >= 1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v95, v96, v97, v98, v99, v100, v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, 1, ((_DWORD)v139 << 10));
  }
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a11 + 16))(&__p, a11, "WebRTC-PiggybackIceCheckAcknowledgement", 39);
  if (((char)v143 & 0x80000000) == 0)
  {
    v102 = (int *)&__p;
    v103 = v143;
    goto LABEL_101;
  }
  v103 = v142;
  if ((v142 & 0x8000000000000000) != 0 || (v102 = (int *)__p, v142) && !__p)
  {
LABEL_196:
    __break(1u);
    goto LABEL_197;
  }
LABEL_101:
  if (v103 < 7)
  {
    v104 = 0;
    if ((v143 & 0x80) == 0)
      goto LABEL_112;
    goto LABEL_111;
  }
  v105 = *v102;
  v106 = *(int *)((char *)v102 + 3);
  v104 = v105 == 1650552389 && v106 == 1684368482;
  if ((v143 & 0x80) != 0)
LABEL_111:
    operator delete(__p);
LABEL_112:
  *(_BYTE *)(a1 + 1672) = v104;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a11 + 16))(&__p, a11, "WebRTC-ExtraICEPing", 19);
  if (((char)v143 & 0x80000000) == 0)
  {
    v108 = (int *)&__p;
    v109 = v143;
    goto LABEL_117;
  }
  v109 = v142;
  if ((v142 & 0x8000000000000000) != 0)
    goto LABEL_196;
  v108 = (int *)__p;
  if (v142)
  {
    if (!__p)
      goto LABEL_196;
  }
LABEL_117:
  if (v109 >= 7)
  {
    v111 = *v108;
    v112 = *(int *)((char *)v108 + 3);
    v110 = v111 == 1650552389 && v112 == 1684368482;
    if ((v143 & 0x80) == 0)
      goto LABEL_128;
    goto LABEL_127;
  }
  v110 = 0;
  if ((v143 & 0x80) != 0)
LABEL_127:
    operator delete(__p);
LABEL_128:
  *(_BYTE *)(a1 + 1673) = v110;
  if (*(_BYTE *)(a1 + 1674))
  {
    if ((v153 & 0x80000000) == 0)
      goto LABEL_130;
  }
  else
  {
    *(_BYTE *)(a1 + 1680) = 1;
    if ((v153 & 0x80000000) == 0)
      goto LABEL_130;
  }
  operator delete(v152[0]);
LABEL_130:
  v152[0] = &off_24C0B8530;
  v152[1] = (void *)a1;
  v114 = v155;
  v154 = v152;
  v155[0] = &off_24C0B8578;
  v155[1] = a1;
  v115 = v157;
  v156 = v155;
  v157[0] = &off_24C0B85C0;
  v157[1] = a1;
  v158 = v157;
  v159 = v31;
  if (a11)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a11 + 16))(&v160, a11, "WebRTC-IceControllerFieldTrials", 31);
    v116 = (uint64_t *)(a1 + 1536);
    if (a10)
      goto LABEL_132;
LABEL_137:
    v119 = operator new();
    cricket::WrappingActiveIceController::WrappingActiveIceController(v119, a1 + 936, a9, v152);
    v120 = *v116;
    *v116 = v119;
    if (!v120)
      goto LABEL_176;
    v121 = *(void (**)(void))(*(_QWORD *)v120 + 8);
    goto LABEL_175;
  }
  *((_BYTE *)&v160.__r_.__value_.__s + 23) = 0;
  v160.__r_.__value_.__s.__data_[0] = 0;
  v116 = (uint64_t *)(a1 + 1536);
  if (!a10)
    goto LABEL_137;
LABEL_132:
  if (v154)
  {
    if (v154 == v152)
    {
      v144 = &__p;
      (*((void (**)(void **, void **))v152[0] + 3))(v152, &__p);
      v117 = v145;
      v118 = v156;
      if (!v156)
        goto LABEL_146;
    }
    else
    {
      v144 = (void **)(*((uint64_t (**)(void))*v154 + 2))();
      v117 = v145;
      v118 = v156;
      if (!v156)
      {
LABEL_146:
        v146 = 0;
        v122 = v147;
        v123 = v158;
        if (v158)
          goto LABEL_147;
LABEL_151:
        v148 = 0;
        v149 = v159;
        if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_152;
LABEL_154:
        std::string::__init_copy_ctor_external(&v150, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
        goto LABEL_155;
      }
    }
  }
  else
  {
    v144 = 0;
    v117 = v145;
    v118 = v156;
    if (!v156)
      goto LABEL_146;
  }
  if (v118 != v155)
  {
    v146 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v118 + 16))(v118);
    v122 = v147;
    v123 = v158;
    if (v158)
      goto LABEL_147;
    goto LABEL_151;
  }
  v146 = v145;
  (*(void (**)(_QWORD *, _BYTE *))(v155[0] + 24))(v155, v145);
  v122 = v147;
  v123 = v158;
  if (!v158)
    goto LABEL_151;
LABEL_147:
  if (v123 == v157)
  {
    v148 = v147;
    (*(void (**)(_QWORD *, _BYTE *))(v157[0] + 24))(v157, v147);
    v149 = v159;
    if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_152;
    goto LABEL_154;
  }
  v148 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v123 + 16))(v123);
  v149 = v159;
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_154;
LABEL_152:
  v150 = v160;
LABEL_155:
  v151 = a1 + 936;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)a10 + 16))(&v139, a10, &__p);
  v124 = v139;
  v139 = 0;
  v125 = *v116;
  *v116 = v124;
  if (v125)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
    v126 = v139;
    v139 = 0;
    if (v126)
      (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  }
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v150.__r_.__value_.__l.__data_);
    v127 = v148;
    if (v148 != v147)
      goto LABEL_160;
LABEL_163:
    v128 = 4;
    goto LABEL_164;
  }
  v127 = v148;
  if (v148 == v147)
    goto LABEL_163;
LABEL_160:
  if (!v127)
    goto LABEL_165;
  v128 = 5;
  v122 = v127;
LABEL_164:
  (*(void (**)(_QWORD *))(*v122 + 8 * v128))(v122);
LABEL_165:
  if (v146 == v145)
  {
    v129 = 4;
    goto LABEL_169;
  }
  if (v146)
  {
    v129 = 5;
    v117 = v146;
LABEL_169:
    (*(void (**)(_QWORD *))(*v117 + 8 * v129))(v117);
  }
  v130 = v144;
  if (v144 == &__p)
  {
    v131 = 4;
    v130 = &__p;
  }
  else
  {
    if (!v144)
      goto LABEL_176;
    v131 = 5;
  }
  v121 = (void (*)(void))*((_QWORD *)*v130 + v131);
LABEL_175:
  v121();
LABEL_176:
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v160.__r_.__value_.__l.__data_);
    v132 = v158;
    if (v158 != v157)
      goto LABEL_178;
LABEL_181:
    v133 = 4;
    goto LABEL_182;
  }
  v132 = v158;
  if (v158 == v157)
    goto LABEL_181;
LABEL_178:
  if (!v132)
    goto LABEL_183;
  v133 = 5;
  v115 = v132;
LABEL_182:
  (*(void (**)(_QWORD *))(*v115 + 8 * v133))(v115);
LABEL_183:
  if (v156 == v155)
  {
    v134 = 4;
  }
  else
  {
    if (!v156)
      goto LABEL_188;
    v134 = 5;
    v114 = v156;
  }
  (*(void (**)(_QWORD *))(*v114 + 8 * v134))(v114);
LABEL_188:
  v135 = v154;
  if (v154 == v152)
  {
    v136 = 4;
    v135 = v152;
    goto LABEL_192;
  }
  if (v154)
  {
    v136 = 5;
LABEL_192:
    (*((void (**)(void))*v135 + v136))();
  }
  return a1;
}

uint64_t cricket::P2PTransportChannel::OnCandidateFilterChanged(uint64_t this, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 != (_DWORD)a3)
  {
    v3 = *(_QWORD *)(this + 1024);
    if (*(_QWORD *)(this + 1016) != v3)
    {
      v4 = *(_QWORD *)(v3 - 8);
      if (v4)
      {
        if (*(_BYTE *)(this + 1341))
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a3);
      }
    }
  }
  return this;
}

void cricket::P2PTransportChannel::~P2PTransportChannel(cricket::P2PTransportChannel *this)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v5;
  cricket::Connection **v6;
  cricket::Connection *v7;
  uint64_t v8;
  uint64_t *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void **v20;
  void **v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void **v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  void **v43;

  *(_QWORD *)this = &off_24C0B8348;
  *((_QWORD *)this + 117) = &unk_24C0B8498;
  v2 = (_BYTE *)*((_QWORD *)this + 137);
  v3 = (_BYTE *)*((_QWORD *)this + 138);
  v4 = v3 - v2;
  if (v3 != v2)
  {
    if (v4 < 0)
      abort();
    v5 = (char *)operator new(v3 - v2);
    memmove(v5, v2, v4);
    v6 = (cricket::Connection **)v5;
    while (1)
    {
      v7 = *v6;
      v8 = (uint64_t)*v6 + 80;
      v9 = (uint64_t *)*((_QWORD *)*v6 + 11);
      if (v9 != (uint64_t *)v8)
        break;
LABEL_8:
      cricket::P2PTransportChannel::RemoveConnection(this, *v6);
      v10 = (_BYTE *)*((_QWORD *)v7 + 31);
      if (v10)
        goto LABEL_13;
LABEL_4:
      if (++v6 == (cricket::Connection **)&v5[8 * (v4 >> 3)])
        goto LABEL_17;
    }
    while ((cricket::P2PTransportChannel *)v9[3] != this)
    {
      v9 = (uint64_t *)v9[1];
      if (v9 == (uint64_t *)v8)
        goto LABEL_8;
    }
    v11 = *v9;
    v12 = v9[1];
    *(_QWORD *)(v11 + 8) = v12;
    *(_QWORD *)v9[1] = v11;
    v13 = (uint64_t *)*((_QWORD *)v7 + 13);
    --*((_QWORD *)v7 + 12);
    operator delete(v9);
    if (v13 == v9)
      *((_QWORD *)v7 + 13) = v12;
    (*((void (**)(cricket::P2PTransportChannel *, _QWORD *))this + 2))(this, (_QWORD *)v7 + 8);
    cricket::P2PTransportChannel::RemoveConnection(this, v7);
    v10 = (_BYTE *)*((_QWORD *)v7 + 31);
    if (!v10)
      goto LABEL_4;
LABEL_13:
    if (*v10)
    {
      v14 = *((_QWORD *)v7 + 32);
      if (v14)
        (*(void (**)(uint64_t, cricket::Connection *))(*(_QWORD *)v14 + 192))(v14, v7);
    }
    goto LABEL_4;
  }
  v5 = 0;
LABEL_17:
  v15 = (void **)*((_QWORD *)this + 194);
  v16 = (void **)*((_QWORD *)this + 193);
  while (v15 != v16)
  {
    v17 = (uint64_t)*(v15 - 1);
    *(v15 - 1) = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v15 -= 55;
    cricket::Candidate::~Candidate(v15);
  }
  *((_QWORD *)this + 194) = v16;
  if (v5)
    operator delete(v5);
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 223));
  std::__tree<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>>>::destroy(*((_QWORD **)this + 220));
  std::__tree<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>>>::destroy(*((_QWORD **)this + 217));
  v18 = (void *)*((_QWORD *)this + 213);
  if (v18)
  {
    *((_QWORD *)this + 214) = v18;
    operator delete(v18);
  }
  v19 = *((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v19)
  {
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*(_QWORD **)(v19 + 32));
    std::__tree<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>>>::destroy(*(_QWORD **)(v19 + 8));
    MEMORY[0x20BD0ADEC](v19, 0x1020C4014A78C51);
  }
  v20 = (void **)*((_QWORD *)this + 193);
  if (v20)
  {
    v21 = (void **)*((_QWORD *)this + 194);
    v22 = (void *)*((_QWORD *)this + 193);
    if (v21 != v20)
    {
      do
      {
        v23 = (uint64_t)*(v21 - 1);
        *(v21 - 1) = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        v21 -= 55;
        cricket::Candidate::~Candidate(v21);
      }
      while (v21 != v20);
      v22 = (void *)*((_QWORD *)this + 193);
    }
    *((_QWORD *)this + 194) = v20;
    operator delete(v22);
  }
  v24 = *((_QWORD *)this + 192);
  *((_QWORD *)this + 192) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = (_QWORD *)*((_QWORD *)this + 189);
  if (v25)
  {
    do
    {
      v26 = (_QWORD *)*v25;
      operator delete(v25);
      v25 = v26;
    }
    while (v26);
  }
  v27 = (void *)*((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = 0;
  if (v27)
    operator delete(v27);
  v28 = *((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *((_QWORD *)this + 154);
  if (v29)
  {
    v30 = *((_QWORD *)this + 155);
    v31 = (void *)*((_QWORD *)this + 154);
    if (v30 == v29)
    {
LABEL_54:
      *((_QWORD *)this + 155) = v29;
      operator delete(v31);
      goto LABEL_55;
    }
    while (1)
    {
      if (*(char *)(v30 - 9) < 0)
      {
        operator delete(*(void **)(v30 - 32));
        if (*(char *)(v30 - 33) < 0)
LABEL_52:
          operator delete(*(void **)(v30 - 56));
      }
      else if (*(char *)(v30 - 33) < 0)
      {
        goto LABEL_52;
      }
      v30 -= 56;
      if (v30 == v29)
      {
        v31 = (void *)*((_QWORD *)this + 154);
        goto LABEL_54;
      }
    }
  }
LABEL_55:
  if (*((char *)this + 1223) < 0)
  {
    operator delete(*((void **)this + 150));
    if ((*((char *)this + 1199) & 0x80000000) == 0)
    {
LABEL_57:
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 1152, *((_QWORD **)this + 145));
      v32 = (void **)*((_QWORD *)this + 140);
      if (!v32)
        goto LABEL_58;
      goto LABEL_79;
    }
  }
  else if ((*((char *)this + 1199) & 0x80000000) == 0)
  {
    goto LABEL_57;
  }
  operator delete(*((void **)this + 147));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 1152, *((_QWORD **)this + 145));
  v32 = (void **)*((_QWORD *)this + 140);
  if (!v32)
  {
LABEL_58:
    v33 = (void *)*((_QWORD *)this + 137);
    if (!v33)
      goto LABEL_60;
    goto LABEL_59;
  }
LABEL_79:
  v42 = (void **)*((_QWORD *)this + 141);
  v43 = v32;
  if (v42 != v32)
  {
    do
      cricket::Candidate::~Candidate(v42 - 55);
    while (v42 != v32);
    v43 = (void **)*((_QWORD *)this + 140);
  }
  *((_QWORD *)this + 141) = v32;
  operator delete(v43);
  v33 = (void *)*((_QWORD *)this + 137);
  if (v33)
  {
LABEL_59:
    *((_QWORD *)this + 138) = v33;
    operator delete(v33);
  }
LABEL_60:
  v34 = (void *)*((_QWORD *)this + 133);
  if (v34)
  {
    *((_QWORD *)this + 134) = v34;
    operator delete(v34);
  }
  v35 = (void *)*((_QWORD *)this + 130);
  if (v35)
  {
    *((_QWORD *)this + 131) = v35;
    operator delete(v35);
  }
  v36 = (_QWORD *)*((_QWORD *)this + 127);
  if (v36)
  {
    v37 = (_QWORD *)*((_QWORD *)this + 128);
    v38 = (void *)*((_QWORD *)this + 127);
    if (v37 != v36)
    {
      do
      {
        v40 = *--v37;
        v39 = v40;
        *v37 = 0;
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      }
      while (v37 != v36);
      v38 = (void *)*((_QWORD *)this + 127);
    }
    *((_QWORD *)this + 128) = v36;
    operator delete(v38);
  }
  v41 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  if (*((char *)this + 967) < 0)
    operator delete(*((void **)this + 118));
  cricket::IceTransportInternal::~IceTransportInternal((void (**)(uint64_t, char *, char *))this);
}

{
  cricket::P2PTransportChannel::~P2PTransportChannel(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::P2PTransportChannel::RemoveConnection(cricket::P2PTransportChannel *this, cricket::Connection *a2)
{
  cricket::Connection **v4;
  cricket::Connection **v5;
  uint64_t result;
  cricket::Connection **v7;
  int64_t v8;
  cricket::Connection *v9;
  uint64_t v10;
  cricket::Connection *v11;
  uint64_t v12;

  v4 = (cricket::Connection **)*((_QWORD *)this + 137);
  v5 = (cricket::Connection **)*((_QWORD *)this + 138);
  if (v4 != v5)
  {
    while (*v4 != a2)
    {
      if (++v4 == v5)
      {
        v4 = (cricket::Connection **)*((_QWORD *)this + 138);
        break;
      }
    }
  }
  result = (*((uint64_t (**)(uint64_t, char *, char *))a2 + 351))(1, (char *)a2 + 2792, (char *)a2 + 2792);
  *((_QWORD *)a2 + 351) = absl::internal_any_invocable::EmptyManager;
  *((_QWORD *)a2 + 352) = 0;
  v7 = (cricket::Connection **)*((_QWORD *)this + 138);
  if (v7 != v4)
  {
    v8 = (char *)v7 - (char *)(v4 + 1);
    if (v7 != v4 + 1)
      memmove(v4, v4 + 1, (char *)v7 - (char *)(v4 + 1));
    *((_QWORD *)this + 138) = (char *)v4 + v8;
    if (!*((_BYTE *)a2 + 2744))
    {
LABEL_15:
      if (!*((_BYTE *)a2 + 2784))
        return (*(uint64_t (**)(_QWORD, cricket::Connection *))(**((_QWORD **)this + 192) + 40))(*((_QWORD *)this + 192), a2);
      v11 = (cricket::Connection *)*((_QWORD *)a2 + 347);
      if (v11 == (cricket::Connection *)((char *)a2 + 2752))
      {
        v12 = 4;
        v11 = (cricket::Connection *)((char *)a2 + 2752);
      }
      else
      {
        if (!v11)
        {
LABEL_21:
          *((_BYTE *)a2 + 2784) = 0;
          return (*(uint64_t (**)(_QWORD, cricket::Connection *))(**((_QWORD **)this + 192) + 40))(*((_QWORD *)this + 192), a2);
        }
        v12 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
      goto LABEL_21;
    }
    v9 = (cricket::Connection *)*((_QWORD *)a2 + 342);
    if (v9 == (cricket::Connection *)((char *)a2 + 2712))
    {
      v10 = 4;
      v9 = (cricket::Connection *)((char *)a2 + 2712);
    }
    else
    {
      if (!v9)
      {
LABEL_14:
        *((_BYTE *)a2 + 2744) = 0;
        goto LABEL_15;
      }
      v10 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

void `non-virtual thunk to'cricket::P2PTransportChannel::~P2PTransportChannel(cricket::P2PTransportChannel *this)
{
  cricket::P2PTransportChannel::~P2PTransportChannel((cricket::P2PTransportChannel *)((char *)this - 936));
}

{
  cricket::P2PTransportChannel::~P2PTransportChannel((cricket::P2PTransportChannel *)((char *)this - 936));
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::P2PTransportChannel::AddAllocatorSession(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  int64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  const void *v71;
  size_t v72;
  char *v73;
  void *v74;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*a2 + 136))(*a2, (*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  v4 = (_QWORD *)*a2;
  v5 = operator new(0x30uLL);
  v5[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortAllocatorSession *,cricket::PortInterface *>;
  v5[3] = a1;
  v5[4] = cricket::P2PTransportChannel::OnPortReady;
  v5[5] = 0;
  v6 = v4[9];
  v4 += 9;
  *v5 = v6;
  v5[1] = v4;
  *(_QWORD *)(v6 + 8) = v5;
  *v4 = v5;
  ++v4[2];
  (*(void (**)(uint64_t, _QWORD *))(a1 + 8))(a1, v4 - 2);
  v7 = (_QWORD *)*a2;
  v8 = operator new(0x30uLL);
  v8[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortAllocatorSession *,std::vector<cricket::PortInterface *> const&>;
  v8[3] = a1;
  v8[4] = cricket::P2PTransportChannel::OnPortsPruned;
  v8[5] = 0;
  v9 = v7[16];
  v7 += 16;
  *v8 = v9;
  v8[1] = v7;
  *(_QWORD *)(v9 + 8) = v8;
  *v7 = v8;
  ++v7[2];
  (*(void (**)(uint64_t, _QWORD *))(a1 + 8))(a1, v7 - 2);
  v10 = (_QWORD *)*a2;
  v11 = operator new(0x30uLL);
  v11[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortAllocatorSession *,std::vector<cricket::Candidate> const&>;
  v11[3] = a1;
  v11[4] = cricket::P2PTransportChannel::OnCandidatesReady;
  v11[5] = 0;
  v12 = v10[23];
  v10 += 23;
  *v11 = v12;
  v11[1] = v10;
  *(_QWORD *)(v12 + 8) = v11;
  *v10 = v11;
  ++v10[2];
  (*(void (**)(uint64_t, _QWORD *))(a1 + 8))(a1, v10 - 2);
  v13 = (_QWORD *)*a2;
  v14 = operator new(0x30uLL);
  v14[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortAllocatorSession *,cricket::IceCandidateErrorEvent const&>;
  v14[3] = a1;
  v14[4] = cricket::P2PTransportChannel::OnCandidateError;
  v14[5] = 0;
  v15 = v13[30];
  v13 += 30;
  *v14 = v15;
  v14[1] = v13;
  *(_QWORD *)(v15 + 8) = v14;
  *v13 = v14;
  ++v13[2];
  (*(void (**)(uint64_t, _QWORD *))(a1 + 8))(a1, v13 - 2);
  v16 = *a2;
  v17 = *a2 + 280;
  v18 = *a2 + 296;
  v19 = operator new(0x30uLL);
  v19[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortAllocatorSession *,std::vector<cricket::Candidate> const&>;
  v19[3] = a1;
  v19[4] = cricket::P2PTransportChannel::OnCandidatesRemoved;
  v19[5] = 0;
  v20 = *(_QWORD *)(v16 + 296);
  *v19 = v20;
  v19[1] = v18;
  *(_QWORD *)(v20 + 8) = v19;
  *(_QWORD *)(v16 + 296) = v19;
  ++*(_QWORD *)(v16 + 312);
  (*(void (**)(uint64_t, uint64_t))(a1 + 8))(a1, v17);
  v21 = *a2;
  v22 = *a2 + 336;
  v23 = *a2 + 352;
  v24 = operator new(0x30uLL);
  v24[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortAllocatorSession *>;
  v24[3] = a1;
  v24[4] = cricket::P2PTransportChannel::OnCandidatesAllocationDone;
  v24[5] = 0;
  v25 = *(_QWORD *)(v21 + 352);
  *v24 = v25;
  v24[1] = v23;
  *(_QWORD *)(v25 + 8) = v24;
  *(_QWORD *)(v21 + 352) = v24;
  ++*(_QWORD *)(v21 + 368);
  (*(void (**)(uint64_t, uint64_t))(a1 + 8))(a1, v22);
  v26 = *(uint64_t **)(a1 + 1016);
  v27 = *(uint64_t **)(a1 + 1024);
  if (v26 != v27)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*(v27 - 1) + 120))(*(v27 - 1));
    v26 = *(uint64_t **)(a1 + 1024);
  }
  if ((unint64_t)v26 >= *(_QWORD *)(a1 + 1032))
  {
    v29 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(a1 + 1016), a2);
    *(_QWORD *)(a1 + 1024) = v29;
    v30 = *(_QWORD *)(a1 + 1280);
    if (*(_QWORD **)(a1 + 1016) == v29)
    {
LABEL_6:
      *(_QWORD *)(v30 + 80) = 0;
      v31 = *(char **)(a1 + 1040);
      v32 = *(char **)(a1 + 1048);
      v33 = v32 - v31;
      if (v32 - v31 < 1)
        goto LABEL_51;
      goto LABEL_10;
    }
  }
  else
  {
    if (!v26)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    v28 = *a2;
    *a2 = 0;
    *v26 = v28;
    v29 = v26 + 1;
    *(_QWORD *)(a1 + 1024) = v29;
    v30 = *(_QWORD *)(a1 + 1280);
    if (*(_QWORD **)(a1 + 1016) == v29)
      goto LABEL_6;
  }
  *(_QWORD *)(v30 + 80) = *(v29 - 1);
  v31 = *(char **)(a1 + 1040);
  v32 = *(char **)(a1 + 1048);
  v33 = v32 - v31;
  if (v32 - v31 < 1)
    goto LABEL_51;
LABEL_10:
  v34 = *(uint64_t **)(a1 + 1072);
  v35 = v33 >> 3;
  v36 = *(char **)(a1 + 1064);
  v37 = (char *)v34 - v36;
  v38 = &v36[((char *)v34 - v36) & 0xFFFFFFFFFFFFFFF8];
  v39 = *(_QWORD *)(a1 + 1080);
  if (v35 > (v39 - (uint64_t)v34) >> 3)
  {
    v40 = v37 >> 3;
    v41 = (v37 >> 3) + v35;
    if (!(v41 >> 61))
    {
      v42 = v39 - (_QWORD)v36;
      if (v42 >> 2 > v41)
        v41 = v42 >> 2;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v43 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
      {
        if (v43 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v44 = (char *)operator new(8 * v43);
      }
      else
      {
        v44 = 0;
      }
      v54 = &v44[8 * v40];
      v55 = &v44[8 * v43];
      v56 = 8 * v35;
      v57 = &v54[8 * v35];
      v58 = v54;
      do
      {
        if (!v58)
          goto LABEL_52;
        v59 = *(_QWORD *)v31;
        v31 += 8;
        *(_QWORD *)v58 = v59;
        v58 += 8;
        v56 -= 8;
      }
      while (v56);
      v60 = v37 - 8;
      if ((unint64_t)v37 < 8)
        goto LABEL_47;
      if (v60 >= 0x68)
      {
        v61 = &v36[((char *)v34 - v36) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(&v36[v37 & 0xFFFFFFFFFFFFFFF8] - &v44[v37 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
        {
          v62 = (v60 >> 3) + 1;
          v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
          v61 = &v38[-v63];
          v54 -= v63;
          v64 = 8 * v40 - 16;
          v65 = &v44[v64];
          v66 = &v36[v64];
          v67 = v62 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68 = *(_OWORD *)v66;
            *((_OWORD *)v65 - 1) = *((_OWORD *)v66 - 1);
            *(_OWORD *)v65 = v68;
            v65 -= 32;
            v66 -= 32;
            v67 -= 4;
          }
          while (v67);
          if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_46;
        }
      }
      else
      {
        v61 = &v36[((char *)v34 - v36) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v69 = *((_QWORD *)v61 - 1);
        v61 -= 8;
        *((_QWORD *)v54 - 1) = v69;
        v54 -= 8;
      }
      while (v61 != v36);
LABEL_46:
      v34 = *(uint64_t **)(a1 + 1072);
LABEL_47:
      v70 = (char *)v34 - v38;
      if (v34 != (uint64_t *)v38)
      {
        v71 = v38;
        v72 = (char *)v34 - v38;
        v73 = v55;
        memmove(v57, v71, v72);
        v55 = v73;
      }
      v74 = *(void **)(a1 + 1064);
      *(_QWORD *)(a1 + 1064) = v54;
      *(_QWORD *)(a1 + 1072) = &v57[v70];
      *(_QWORD *)(a1 + 1080) = v55;
      if (v74)
        operator delete(v74);
      goto LABEL_51;
    }
LABEL_53:
    abort();
  }
  v45 = ((char *)v34 - v38) >> 3;
  if (v45 >= v35)
  {
    v46 = &v31[8 * v35];
    v48 = *(char **)(a1 + 1072);
    v49 = 8 * v35;
    v50 = &v34[-v35];
    v51 = v48;
    if (v50 >= v34)
    {
LABEL_30:
      v53 = &v38[v49];
      *(_QWORD *)(a1 + 1072) = v51;
      if (v48 != v53)
        memmove(&v48[-8 * ((v48 - v53) >> 3)], v38, v48 - v53);
      if (v46 != v31)
        memmove(v38, v31, v46 - v31);
      goto LABEL_51;
    }
    goto LABEL_27;
  }
  v46 = &v31[8 * v45];
  v47 = v32 - v46;
  if (v32 != v46)
    memmove(*(void **)(a1 + 1072), &v31[8 * v45], v32 - v46);
  v48 = (char *)v34 + v47;
  *(_QWORD *)(a1 + 1072) = (char *)v34 + v47;
  if ((char *)v34 - v38 >= 1)
  {
    v49 = 8 * v35;
    v50 = (uint64_t *)&v48[-8 * v35];
    v51 = (char *)v34 + v47;
    if (v50 >= v34)
      goto LABEL_30;
LABEL_27:
    v51 = v48;
    while (v51)
    {
      v52 = *v50++;
      *(_QWORD *)v51 = v52;
      v51 += 8;
      if (v50 >= v34)
        goto LABEL_30;
    }
    goto LABEL_52;
  }
LABEL_51:
  *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a1 + 1040);
}

uint64_t cricket::P2PTransportChannel::OnPortReady(cricket::P2PTransportChannel *this, cricket::PortAllocatorSession *a2, cricket::PortInterface *a3)
{
  unint64_t v3;
  unint64_t v4;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  char *v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  cricket::PortInterface **i;
  void *__p[2];
  char v53;
  char v54;
  _QWORD v55[3];
  _QWORD v56[3];
  _QWORD *v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v7 = (char *)*((_QWORD *)this + 144);
  v8 = (char *)this + 1160;
  if (v7 != (char *)this + 1160)
  {
    do
    {
      if (((*(uint64_t (**)(cricket::PortInterface *, _QWORD, _QWORD))(*(_QWORD *)a3 + 104))(a3, *((unsigned int *)v7 + 7), *((unsigned int *)v7 + 8)) & 0x80000000) != 0&& (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        v3 = v3 & 0xFFFFFFFF00000000 | 0x1CB1;
        v55[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_"
                 "transport_channel.cc";
        v55[1] = v3;
        v55[2] = &v54;
        (*(void (**)(void **__return_ptr, cricket::PortInterface *))(*(_QWORD *)a3 + 176))(__p, a3);
        v56[0] = __p;
        v56[1] = v55;
        v56[2] = ": SetOption(";
        v57 = v56;
        v9 = *((unsigned int *)v7 + 7);
        (*(void (**)(cricket::PortInterface *))(*(_QWORD *)a3 + 120))(a3);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v10, v11, v12, v13, v14, v15, v16, *(_QWORD *)v57[1]);
        if (v53 < 0)
          operator delete(__p[0]);
        v4 = v4 & 0xFFFFFFFF00000000 | v9;
      }
      v17 = (char *)*((_QWORD *)v7 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(char **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (char *)*((_QWORD *)v7 + 2);
          v19 = *(_QWORD *)v18 == (_QWORD)v7;
          v7 = v18;
        }
        while (!v19);
      }
      v7 = v18;
    }
    while (v18 != v8);
  }
  (*(void (**)(cricket::PortInterface *, _QWORD))(*(_QWORD *)a3 + 32))(a3, *((unsigned int *)this + 315));
  (*(void (**)(cricket::PortInterface *, _QWORD))(*(_QWORD *)a3 + 48))(a3, *((_QWORD *)this + 158));
  v20 = (char *)*((_QWORD *)this + 131);
  v21 = *((_QWORD *)this + 132);
  if ((unint64_t)v20 < v21)
  {
    if (v20)
    {
      *(_QWORD *)v20 = a3;
      v22 = v20 + 8;
      goto LABEL_35;
    }
LABEL_43:
    __break(1u);
  }
  v23 = (char *)*((_QWORD *)this + 130);
  v24 = (v20 - v23) >> 3;
  v25 = v24 + 1;
  if ((unint64_t)(v24 + 1) >> 61)
    abort();
  v26 = v21 - (_QWORD)v23;
  if (v26 >> 2 > v25)
    v25 = v26 >> 2;
  v27 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8;
  v28 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v27)
    v28 = v25;
  if (!v28)
    goto LABEL_43;
  if (v28 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v29 = 8 * v28;
  v30 = (char *)operator new(8 * v28);
  v31 = &v30[v29];
  v32 = &v30[8 * v24];
  *(_QWORD *)v32 = a3;
  v22 = v32 + 8;
  if (v20 != v23)
  {
    v33 = v20 - v23 - 8;
    if (v33 < 0x58)
      goto LABEL_48;
    if ((unint64_t)(v23 - v30) < 0x20)
      goto LABEL_48;
    v34 = (v33 >> 3) + 1;
    v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v20[-v35];
    v32 -= v35;
    v37 = &v30[8 * v24 - 16];
    v38 = (__int128 *)(v20 - 16);
    v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *v38;
      *((_OWORD *)v37 - 1) = *(v38 - 1);
      *(_OWORD *)v37 = v40;
      v37 -= 32;
      v38 -= 2;
      v39 -= 4;
    }
    while (v39);
    v20 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_48:
      do
      {
        v41 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v32 - 1) = v41;
        v32 -= 8;
      }
      while (v20 != v23);
    }
    v20 = v23;
  }
  *((_QWORD *)this + 130) = v32;
  *((_QWORD *)this + 131) = v22;
  *((_QWORD *)this + 132) = v31;
  if (v20)
    operator delete(v20);
LABEL_35:
  *((_QWORD *)this + 131) = v22;
  v42 = operator new(0x30uLL);
  v42[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortInterface *,rtc::SocketAddress const&,cricket::ProtocolType,cricket::IceMessage *,std::string const&,BOOL>;
  v42[3] = this;
  v42[4] = cricket::P2PTransportChannel::OnUnknownAddress;
  v42[5] = 0;
  v43 = *((_QWORD *)a3 + 3);
  *v42 = v43;
  v42[1] = (char *)a3 + 24;
  *(_QWORD *)(v43 + 8) = v42;
  *((_QWORD *)a3 + 3) = v42;
  ++*((_QWORD *)a3 + 5);
  (*((void (**)(cricket::P2PTransportChannel *, char *))this + 1))(this, (char *)a3 + 8);
  v58[0] = &off_24C0B8698;
  v58[1] = this;
  v59 = v58;
  (*(void (**)(cricket::PortInterface *, _QWORD *))(*(_QWORD *)a3 + 160))(a3, v58);
  v44 = v59;
  if (v59 == v58)
  {
    v45 = 4;
    v44 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_40;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_40:
  v46 = operator new(0x30uLL);
  v46[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortInterface *>;
  v46[3] = this;
  v46[4] = cricket::P2PTransportChannel::OnRoleConflict;
  v46[5] = 0;
  v47 = *((_QWORD *)a3 + 10);
  *v46 = v47;
  v46[1] = (char *)a3 + 80;
  *(_QWORD *)(v47 + 8) = v46;
  *((_QWORD *)a3 + 10) = v46;
  ++*((_QWORD *)a3 + 12);
  (*((void (**)(cricket::P2PTransportChannel *, char *))this + 1))(this, (char *)a3 + 64);
  v48 = operator new(0x30uLL);
  v49 = *((_QWORD *)a3 + 24);
  v48[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,rtc::SentPacket const&>;
  v48[3] = this;
  v48[4] = cricket::P2PTransportChannel::OnSentPacket;
  v48[5] = 0;
  *v48 = v49;
  v48[1] = (char *)a3 + 192;
  *(_QWORD *)(v49 + 8) = v48;
  *((_QWORD *)a3 + 24) = v48;
  ++*((_QWORD *)a3 + 26);
  (*((void (**)(cricket::P2PTransportChannel *, char *))this + 1))(this, (char *)a3 + 176);
  for (i = (cricket::PortInterface **)*((_QWORD *)this + 140); i != *((cricket::PortInterface ***)this + 141); i += 55)
    cricket::P2PTransportChannel::CreateConnection(this, a3, (const cricket::Candidate *)i, i[54]);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 192) + 80))(*((_QWORD *)this + 192), 3);
}

void cricket::P2PTransportChannel::OnPortsPruned(_QWORD *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  char *v7;
  char *v8;
  int64_t v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *__p;
  char v40;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      v6 = *v3;
      v7 = (char *)a1[130];
      v8 = (char *)a1[131];
      if (v7 != v8)
      {
        while (*(_QWORD *)v7 != v6)
        {
          v7 += 8;
          if (v7 == v8)
          {
            v7 = (char *)a1[131];
            break;
          }
        }
      }
      if (v7 != v8)
      {
        v9 = v8 - (v7 + 8);
        if (v8 != v7 + 8)
          memmove(v7, v7 + 8, v8 - (v7 + 8));
        a1[131] = &v7[v9];
        v10 = (char *)a1[134];
        v11 = a1[135];
        if ((unint64_t)v10 >= v11)
        {
          v13 = (char *)a1[133];
          v14 = (v10 - v13) >> 3;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            goto LABEL_36;
          v16 = v11 - (_QWORD)v13;
          if (v16 >> 2 > v15)
            v15 = v16 >> 2;
          v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8;
          v18 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v17)
            v18 = v15;
          if (!v18)
          {
LABEL_35:
            __break(1u);
LABEL_36:
            abort();
          }
          if (v18 >> 61)
            std::__throw_bad_array_new_length[abi:sn180100]();
          v19 = 8 * v18;
          v20 = (char *)operator new(8 * v18);
          v21 = &v20[8 * v14];
          *(_QWORD *)v21 = v6;
          v12 = v21 + 8;
          if (v10 != v13)
          {
            v22 = v10 - v13 - 8;
            if (v22 < 0x58)
              goto LABEL_40;
            if ((unint64_t)(v13 - v20) < 0x20)
              goto LABEL_40;
            v23 = (v22 >> 3) + 1;
            v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
            v25 = &v10[-v24];
            v21 -= v24;
            v26 = &v20[8 * v14 - 16];
            v27 = (__int128 *)(v10 - 16);
            v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v29 = *v27;
              *((_OWORD *)v26 - 1) = *(v27 - 1);
              *(_OWORD *)v26 = v29;
              v26 -= 32;
              v27 -= 2;
              v28 -= 4;
            }
            while (v28);
            v10 = v25;
            if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_40:
              do
              {
                v30 = *((_QWORD *)v10 - 1);
                v10 -= 8;
                *((_QWORD *)v21 - 1) = v30;
                v21 -= 8;
              }
              while (v10 != v13);
            }
            v10 = v13;
          }
          a1[133] = v21;
          a1[134] = v12;
          a1[135] = &v20[v19];
          if (v10)
            operator delete(v10);
        }
        else
        {
          if (!v10)
            goto LABEL_35;
          *(_QWORD *)v10 = v6;
          v12 = v10 + 8;
        }
        a1[134] = v12;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v6 + 176))(&__p, v6);
          v38 = v38 & 0xFFFFFFFF00000000 | 0x4339;
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
          if (v40 < 0)
            operator delete(__p);
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
}

_QWORD *cricket::P2PTransportChannel::OnCandidatesReady(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v11;

  v3 = *a3;
  if (a3[1] != *a3)
  {
    v5 = result;
    v6 = result + 53;
    if ((_QWORD *)result[54] == result + 53)
    {
      v11 = 0;
      do
      {
        result[56] = v6;
        ++v11;
      }
      while (v11 < 0x84BDA12F684BDA13 * ((a3[1] - *a3) >> 4));
    }
    else
    {
      v7 = 0;
      do
      {
        result = (_QWORD *)v5[54];
        v5[56] = result;
        if (result != v6)
        {
          v8 = v3 + 432 * v7;
          do
          {
            v10 = (void (*)(_QWORD *, _QWORD *, uint64_t))result[2];
            v9 = result + 2;
            v5[56] = *(v9 - 1);
            v10(v9, v5, v8);
            result = (_QWORD *)v5[56];
          }
          while (result != v6);
        }
        ++v7;
        v3 = *a3;
      }
      while (v7 < 0x84BDA12F684BDA13 * ((a3[1] - *a3) >> 4));
    }
  }
  return result;
}

uint64_t cricket::P2PTransportChannel::OnCandidateError(uint64_t result)
{
  uint64_t (*v1)(uint64_t, uint64_t);

  v1 = *(uint64_t (**)(uint64_t, uint64_t))(result + 864);
  if (v1)
    return v1(result + 840, result);
  return result;
}

void cricket::P2PTransportChannel::OnCandidatesRemoved(uint64_t a1, uint64_t a2, std::string **a3)
{
  uint64_t v4;
  std::string *v5;
  std::string *v6;
  uint64_t v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  BOOL v10;
  void (*v11)(uint64_t, uint64_t, std::string **);
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string v15;
  std::string v16[2];
  std::string *v17;
  std::string *v18;
  unint64_t v19;

  if (*(_DWORD *)(a1 + 1324) == 1)
  {
    v4 = *(_QWORD *)(a1 + 1024);
    if (*(_QWORD *)(a1 + 1016) == v4)
    {
      if (a2)
        return;
    }
    else if (*(_QWORD *)(v4 - 8) != a2)
    {
      return;
    }
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v5 = *a3;
    v6 = a3[1];
    if (*a3 != v6)
    {
      while (1)
      {
        cricket::Candidate::Candidate(&v15, v5);
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        v8 = (const std::string::value_type *)v7;
        if (*(char *)(v7 + 23) < 0)
        {
          v9 = *(_QWORD *)(v7 + 8);
          if ((v9 & 0x8000000000000000) != 0
            || ((v8 = *(const std::string::value_type **)v7, v9) ? (v10 = v8 == 0) : (v10 = 0), v10))
          {
LABEL_26:
            __break(1u);
            return;
          }
        }
        else
        {
          v9 = *(unsigned __int8 *)(v7 + 23);
        }
        std::string::__assign_external(v16, v8, v9);
        if ((unint64_t)v18 >= v19)
        {
          v18 = std::vector<cricket::Candidate>::__push_back_slow_path<cricket::Candidate>(&v17, &v15);
          cricket::Candidate::~Candidate((void **)&v15.__r_.__value_.__l.__data_);
          v5 += 18;
          if (v5 == v6)
            break;
        }
        else
        {
          if (!v18)
            goto LABEL_26;
          v18 = cricket::Candidate::Candidate(v18, &v15) + 18;
          cricket::Candidate::~Candidate((void **)&v15.__r_.__value_.__l.__data_);
          v5 += 18;
          if (v5 == v6)
            break;
        }
      }
    }
    v11 = *(void (**)(uint64_t, uint64_t, std::string **))(a1 + 896);
    if (v11)
      v11(a1 + 872, a1, &v17);
    v12 = v17;
    if (v17)
    {
      v13 = v18;
      v14 = v17;
      if (v18 != v17)
      {
        do
          cricket::Candidate::~Candidate((void **)&v13[-18].__r_.__value_.__l.__data_);
        while (v13 != v12);
        v14 = v17;
      }
      v18 = v12;
      operator delete(v14);
    }
  }
}

void cricket::P2PTransportChannel::OnCandidatesAllocationDone(cricket::P2PTransportChannel *this, cricket::PortAllocatorSession *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE *v25;
  std::string *v26;
  cricket::Connection *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (*((_DWORD *)this + 331) == 1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      (*(void (**)(cricket::P2PTransportChannel *))(*(_QWORD *)this + 16))(this);
      (*(void (**)(cricket::P2PTransportChannel *))(*(_QWORD *)this + 96))(this);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    }
  }
  else
  {
    *((_DWORD *)this + 318) = 2;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      (*(void (**)(cricket::P2PTransportChannel *))(*(_QWORD *)this + 16))(this);
      (*(void (**)(cricket::P2PTransportChannel *))(*(_QWORD *)this + 96))(this);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    }
    if (*((_BYTE *)this + 832))
    {
      v26 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v10, v11, v12, v13, v34);
      cricket::P2PTransportChannel::AddConnection((cricket::P2PTransportChannel *)v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      v21 = (char *)this + 832;
      *((_BYTE *)this + 832) = 1;
      v22 = *((_QWORD *)this + 101);
      v23 = *((_QWORD *)this + 102);
      if (v22 == v23)
      {
        *v21 = 0;
      }
      else
      {
        v24 = 0;
        do
        {
          (*(void (**)(uint64_t, cricket::P2PTransportChannel *))(v22 + 40))(v22 + 8, this);
          v25 = *(_BYTE **)v22;
          v22 += 56;
          v24 |= v25 == v21;
        }
        while (v22 != v23);
        *v21 = 0;
        if ((v24 & 1) != 0)
          webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((cricket::P2PTransportChannel *)((char *)this + 808), (char *)this + 832);
      }
    }
  }
}

uint64_t cricket::P2PTransportChannel::AddConnection(cricket::P2PTransportChannel *this, cricket::Connection *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _OWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t (**v20)();
  char *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v56;
  __int128 v57;
  uint64_t (*v58)(_QWORD, _QWORD, _QWORD);
  uint64_t v59;
  _QWORD v60[3];
  _QWORD *v61;
  _QWORD v62[3];
  _QWORD *v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)((char *)this + 1308);
  *((_DWORD *)a2 + 641) = v8;
  *((_BYTE *)a2 + 2568) = BYTE4(v8);
  LODWORD(v8) = *((_DWORD *)this + 347);
  *((_BYTE *)a2 + 2540) = *((_BYTE *)this + 1392);
  *((_DWORD *)a2 + 634) = v8;
  LODWORD(v8) = *((_DWORD *)this + 349);
  *((_BYTE *)a2 + 2548) = *((_BYTE *)this + 1400);
  *((_DWORD *)a2 + 636) = v8;
  LODWORD(v8) = *((_DWORD *)this + 351);
  *((_BYTE *)a2 + 2556) = *((_BYTE *)this + 1408);
  *((_DWORD *)a2 + 638) = v8;
  *(_QWORD *)&v57 = this;
  if (*((_QWORD *)a2 + 352))
LABEL_64:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc", 459, "!received_packet_callback_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v56);
  v11 = (_OWORD *)((char *)a2 + 2792);
  (*((void (**)(uint64_t, _OWORD *, _OWORD *))a2 + 351))(1, v11, v11);
  *v11 = v57;
  *((_QWORD *)a2 + 351) = absl::internal_any_invocable::LocalManagerTrivial;
  *((_QWORD *)a2 + 352) = absl::internal_any_invocable::LocalInvoker<false,void,cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_1 &,cricket::Connection *,rtc::ReceivedPacket const&>;
  v58 = absl::internal_any_invocable::EmptyManager;
  v59 = 0;
  absl::internal_any_invocable::EmptyManager(1, &v57, &v57);
  v12 = operator new(0x30uLL);
  v12[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::Connection *>;
  v12[3] = this;
  v12[4] = cricket::P2PTransportChannel::OnReadyToSend;
  v12[5] = 0;
  v13 = *((_QWORD *)a2 + 17);
  *v12 = v13;
  v12[1] = (char *)a2 + 136;
  *(_QWORD *)(v13 + 8) = v12;
  *((_QWORD *)a2 + 17) = v12;
  ++*((_QWORD *)a2 + 19);
  (*((void (**)(cricket::P2PTransportChannel *, char *))this + 1))(this, (char *)a2 + 120);
  v14 = operator new(0x30uLL);
  v14[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::Connection *>;
  v14[3] = this;
  v14[4] = cricket::P2PTransportChannel::OnConnectionStateChange;
  v14[5] = 0;
  v15 = *((_QWORD *)a2 + 3);
  *v14 = v15;
  v14[1] = (char *)a2 + 24;
  *(_QWORD *)(v15 + 8) = v14;
  *((_QWORD *)a2 + 3) = v14;
  ++*((_QWORD *)a2 + 5);
  (*((void (**)(cricket::P2PTransportChannel *, char *))this + 1))(this, (char *)a2 + 8);
  v16 = operator new(0x30uLL);
  v16[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::Connection *>;
  v16[3] = this;
  v16[4] = cricket::P2PTransportChannel::OnConnectionDestroyed;
  v16[5] = 0;
  v17 = *((_QWORD *)a2 + 10);
  *v16 = v17;
  v16[1] = (char *)a2 + 80;
  *(_QWORD *)(v17 + 8) = v16;
  *((_QWORD *)a2 + 10) = v16;
  ++*((_QWORD *)a2 + 12);
  (*((void (**)(cricket::P2PTransportChannel *, char *))this + 1))(this, (char *)a2 + 64);
  v18 = operator new(0x30uLL);
  v19 = *((_QWORD *)a2 + 24);
  v18[2] = sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::Connection *>;
  v18[3] = this;
  v18[4] = cricket::P2PTransportChannel::OnNominated;
  v18[5] = 0;
  *v18 = v19;
  v18[1] = (char *)a2 + 192;
  *(_QWORD *)(v19 + 8) = v18;
  *((_QWORD *)a2 + 24) = v18;
  ++*((_QWORD *)a2 + 26);
  (*((void (**)(cricket::P2PTransportChannel *, char *))this + 1))(this, (char *)a2 + 176);
  *((_BYTE *)this + 1144) = 1;
  *((_QWORD *)a2 + 329) = (char *)this + 1488;
  *((_QWORD *)a2 + 332) = (char *)this + 1616;
  *((double *)a2 + 333) = (double)*((int *)this + 412) / 0.693147181;
  *((double *)a2 + 334) = nan("uninit");
  *((_QWORD *)a2 + 335) = 0x7FF0000000000000;
  *((_QWORD *)a2 + 336) = 0x3FF0000000000000;
  if (*((_BYTE *)a2 + 2704))
    *((_BYTE *)a2 + 2704) = 0;
  v20 = &off_24C0B8608;
  v62[0] = &off_24C0B8608;
  v62[1] = this;
  v63 = v62;
  v60[0] = &unk_24C0B8650;
  v60[1] = this;
  v61 = v60;
  v21 = (char *)a2 + 2712;
  if (*((_BYTE *)a2 + 2744))
  {
    v22 = (char *)*((_QWORD *)a2 + 342);
    *((_QWORD *)a2 + 342) = 0;
    if (v22 == v21)
    {
      (*(void (**)(char *))(*(_QWORD *)v21 + 32))((char *)a2 + 2712);
      v23 = v63;
      if (v63)
        goto LABEL_8;
    }
    else
    {
      if (!v22)
        goto LABEL_20;
      (*(void (**)(char *))(*(_QWORD *)v22 + 40))(v22);
      v23 = v63;
      if (v63)
      {
LABEL_8:
        if (v23 != v62)
        {
          *((_QWORD *)a2 + 342) = v23;
          v63 = 0;
          v24 = (char *)a2 + 2752;
          if (!*((_BYTE *)a2 + 2784))
            goto LABEL_15;
LABEL_21:
          v25 = (char *)*((_QWORD *)a2 + 347);
          *((_QWORD *)a2 + 347) = 0;
          if (v25 == v24)
          {
            v26 = 4;
            v25 = v24;
          }
          else
          {
            if (!v25)
              goto LABEL_26;
            v26 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_26:
          if (!v61)
          {
            *((_QWORD *)a2 + 347) = 0;
            goto LABEL_37;
          }
          if (v61 != v60)
          {
            *((_QWORD *)a2 + 347) = v61;
            v61 = 0;
            goto LABEL_37;
          }
          *((_QWORD *)a2 + 347) = v24;
          (*(void (**)(_QWORD *, char *))(v60[0] + 24))(v60, v24);
          v27 = v61;
          if (v61 != v60)
            goto LABEL_34;
LABEL_31:
          v28 = 4;
          v27 = v60;
          goto LABEL_36;
        }
        v20 = (uint64_t (**)())v62[0];
LABEL_20:
        *((_QWORD *)a2 + 342) = v21;
        ((void (*)(_QWORD *, char *))v20[3])(v62, (char *)a2 + 2712);
        v24 = (char *)a2 + 2752;
        if (!*((_BYTE *)a2 + 2784))
          goto LABEL_15;
        goto LABEL_21;
      }
    }
    *((_QWORD *)a2 + 342) = 0;
    v24 = (char *)a2 + 2752;
    if (!*((_BYTE *)a2 + 2784))
      goto LABEL_15;
    goto LABEL_21;
  }
  *((_QWORD *)a2 + 342) = v21;
  *((_QWORD *)a2 + 339) = &off_24C0B8608;
  *((_QWORD *)a2 + 340) = this;
  *((_BYTE *)a2 + 2744) = 1;
  v24 = (char *)a2 + 2752;
  if (*((_BYTE *)a2 + 2784))
    goto LABEL_21;
LABEL_15:
  if (v61)
  {
    if (v61 == v60)
    {
      *((_QWORD *)a2 + 347) = v24;
      (*(void (**)(_QWORD *, char *))(v60[0] + 24))(v60, v24);
    }
    else
    {
      *((_QWORD *)a2 + 347) = v61;
      v61 = 0;
    }
  }
  else
  {
    *((_QWORD *)a2 + 347) = 0;
  }
  *((_BYTE *)a2 + 2784) = 1;
  v27 = v61;
  if (v61 == v60)
    goto LABEL_31;
LABEL_34:
  if (!v27)
    goto LABEL_37;
  v28 = 5;
LABEL_36:
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_37:
  v29 = v63;
  if (v63 == v62)
  {
    v30 = 4;
    v29 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_42;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_42:
  v31 = *((_DWORD *)a2 + 60);
  v32 = cricket::Connection::ToLogDescription(a2);
  webrtc::IceEventLog::LogCandidatePairConfig((float *)this + 372, 0, v31, v32);
  v33 = (char *)*((_QWORD *)this + 138);
  v34 = *((_QWORD *)this + 139);
  if ((unint64_t)v33 < v34)
  {
    if (v33)
    {
      *(_QWORD *)v33 = a2;
      v35 = v33 + 8;
      goto LABEL_62;
    }
    goto LABEL_63;
  }
  v36 = (char *)*((_QWORD *)this + 137);
  v37 = (v33 - v36) >> 3;
  v38 = v37 + 1;
  if ((unint64_t)(v37 + 1) >> 61)
    abort();
  v39 = v34 - (_QWORD)v36;
  if (v39 >> 2 > v38)
    v38 = v39 >> 2;
  v40 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8;
  v41 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v40)
    v41 = v38;
  if (!v41)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v41 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v42 = 8 * v41;
  v43 = (char *)operator new(8 * v41);
  v44 = &v43[v42];
  v45 = &v43[8 * v37];
  *(_QWORD *)v45 = a2;
  v35 = v45 + 8;
  if (v33 != v36)
  {
    v46 = v33 - v36 - 8;
    if (v46 < 0x58)
      goto LABEL_69;
    if ((unint64_t)(v36 - v43) < 0x20)
      goto LABEL_69;
    v47 = (v46 >> 3) + 1;
    v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v49 = &v33[-v48];
    v45 -= v48;
    v50 = &v43[8 * v37 - 16];
    v51 = (__int128 *)(v33 - 16);
    v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v53 = *v51;
      *((_OWORD *)v50 - 1) = *(v51 - 1);
      *(_OWORD *)v50 = v53;
      v50 -= 32;
      v51 -= 2;
      v52 -= 4;
    }
    while (v52);
    v33 = v49;
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_69:
      do
      {
        v54 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *((_QWORD *)v45 - 1) = v54;
        v45 -= 8;
      }
      while (v33 != v36);
    }
    v33 = v36;
  }
  *((_QWORD *)this + 137) = v45;
  *((_QWORD *)this + 138) = v35;
  *((_QWORD *)this + 139) = v44;
  if (v33)
    operator delete(v33);
LABEL_62:
  *((_QWORD *)this + 138) = v35;
  return (*(uint64_t (**)(_QWORD, cricket::Connection *))(**((_QWORD **)this + 192) + 24))(*((_QWORD *)this + 192), a2);
}

uint64_t cricket::P2PTransportChannel::OnReadyToSend(uint64_t this, cricket::Connection *a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  if (*(cricket::Connection **)(this + 1088) == a2)
  {
    v2 = this;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
    if ((_DWORD)this)
    {
      this = *(_QWORD *)(v2 + 136);
      for (*(_QWORD *)(v2 + 152) = this; this != v2 + 128; this = *(_QWORD *)(v2 + 152))
      {
        v4 = *(void (**)(uint64_t, uint64_t))(this + 16);
        v3 = this + 16;
        *(_QWORD *)(v2 + 152) = *(_QWORD *)(v3 - 8);
        v4(v3, v2);
      }
    }
  }
  return this;
}

uint64_t cricket::P2PTransportChannel::OnConnectionStateChange(cricket::P2PTransportChannel *this, cricket::Connection *a2)
{
  BOOL v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  if (*((_BYTE *)this + 1660))
  {
    v3 = *((_DWORD *)a2 + 582) || !*((_BYTE *)a2 + 2332) || *((_BYTE *)a2 + 2333) == 0;
    v4 = *(_DWORD *)((*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)a2 + 16))(a2) + 248);
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 128) - 8) + 128))(*(_QWORD *)(*((_QWORD *)this + 128) - 8));
    if (!v3
      && v4 >= v5
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 128) - 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 128) - 8)))
    {
      v6 = (_QWORD *)*((_QWORD *)this + 127);
      v7 = (_QWORD *)*((_QWORD *)this + 128);
      while (1)
      {
        if (v6 == v7)
          return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 192) + 72))(*((_QWORD *)this + 192), 8);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 64))(*v6);
        if ((result & 1) == 0)
          break;
LABEL_13:
        ++v6;
      }
      if (*((_DWORD *)this + 331) == 1)
      {
        v11 = *((_QWORD *)this + 128);
        if (*((_QWORD *)this + 127) == v11)
        {
          __break(1u);
          return result;
        }
        v8 = (_QWORD *)*v6;
        if (*v6 == *(_QWORD *)(v11 - 8))
        {
          v9 = 6;
          goto LABEL_12;
        }
      }
      else
      {
        v8 = (_QWORD *)*v6;
      }
      v9 = 4;
LABEL_12:
      (*(void (**)(void))(*v8 + 8 * v9))();
      goto LABEL_13;
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 192) + 72))(*((_QWORD *)this + 192), 8);
}

void cricket::P2PTransportChannel::OnConnectionDestroyed(cricket::P2PTransportChannel *this, cricket::Connection *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string v18;

  cricket::P2PTransportChannel::RemoveConnection(this, a2);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0
    && (cricket::P2PTransportChannel::ToString(&v18, (uint64_t)this),
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc"), SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if (*((cricket::Connection **)this + 136) != a2)
      goto LABEL_4;
  }
  else if (*((cricket::Connection **)this + 136) != a2)
  {
LABEL_4:
    cricket::P2PTransportChannel::UpdateTransportState(this);
    return;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  cricket::P2PTransportChannel::SwitchSelectedConnectionInternal((uint64_t)this, 0, (char *)9);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 192) + 72))(*((_QWORD *)this + 192), 9);
}

void cricket::P2PTransportChannel::OnNominated(cricket::P2PTransportChannel *this, cricket::Connection *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string __p;

  if (*((cricket::Connection **)this + 136) != a2)
  {
    if (a2 && *((_BYTE *)this + 1654))
    {
      cricket::P2PTransportChannel::PingConnection(this, a2);
      (*(void (**)(_QWORD, cricket::Connection *))(**((_QWORD **)this + 192) + 48))(*((_QWORD *)this + 192), a2);
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t, cricket::Connection *))(**((_QWORD **)this + 192) + 88))(*((_QWORD *)this + 192), 6, a2))
    {
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 192) + 72))(*((_QWORD *)this + 192), 6);
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      cricket::Connection::ToString(a2, &__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void cricket::P2PTransportChannel::ForgetLearnedStateForConnections(uint64_t a1, char ***a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;

  if (a3)
  {
    v4 = 8 * a3;
    do
    {
      v5 = *a2++;
      cricket::Connection::ForgetLearnedState(v5);
      v4 -= 8;
    }
    while (v4);
  }
}

void `non-virtual thunk to'cricket::P2PTransportChannel::ForgetLearnedStateForConnections(uint64_t a1, char ***a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;

  if (a3)
  {
    v4 = 8 * a3;
    do
    {
      v5 = *a2++;
      cricket::Connection::ForgetLearnedState(v5);
      v4 -= 8;
    }
    while (v4);
  }
}

uint64_t cricket::P2PTransportChannel::SetIceRole(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *j;
  uint64_t v9;

  if (*(_DWORD *)(result + 1260) != (_DWORD)a2)
  {
    v3 = result;
    *(_DWORD *)(result + 1260) = a2;
    v4 = *(uint64_t **)(result + 1040);
    for (i = *(uint64_t **)(result + 1048);
          v4 != i;
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2))
    {
      v6 = *v4++;
    }
    v7 = *(uint64_t **)(v3 + 1064);
    for (j = *(uint64_t **)(v3 + 1072);
          v7 != j;
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a2))
    {
      v9 = *v7++;
    }
  }
  return result;
}

uint64_t cricket::P2PTransportChannel::GetIceRole(cricket::P2PTransportChannel *this)
{
  return *((unsigned int *)this + 315);
}

uint64_t `non-virtual thunk to'cricket::P2PTransportChannel::GetIceRole(cricket::P2PTransportChannel *this)
{
  return *((unsigned int *)this + 81);
}

void cricket::P2PTransportChannel::SetIceTiebreaker(cricket::P2PTransportChannel *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*((_QWORD *)this + 130) == *((_QWORD *)this + 131) && *((_QWORD *)this + 133) == *((_QWORD *)this + 134))
  {
    *((_QWORD *)this + 158) = a2;
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  }
}

uint64_t cricket::P2PTransportChannel::GetState(cricket::P2PTransportChannel *this)
{
  return *((unsigned int *)this + 325);
}

uint64_t cricket::P2PTransportChannel::GetIceTransportState(cricket::P2PTransportChannel *this)
{
  return *((unsigned int *)this + 326);
}

uint64_t cricket::P2PTransportChannel::transport_name(cricket::P2PTransportChannel *this)
{
  return (uint64_t)this + 944;
}

uint64_t cricket::P2PTransportChannel::component(cricket::P2PTransportChannel *this)
{
  return *((unsigned int *)this + 242);
}

uint64_t cricket::P2PTransportChannel::writable(cricket::P2PTransportChannel *this)
{
  return *((unsigned __int8 *)this + 1441);
}

uint64_t cricket::P2PTransportChannel::receiving(cricket::P2PTransportChannel *this)
{
  return *((unsigned __int8 *)this + 1440);
}

uint64_t cricket::P2PTransportChannel::gathering_state(cricket::P2PTransportChannel *this)
{
  return *((unsigned int *)this + 318);
}

uint64_t cricket::P2PTransportChannel::GetRttEstimate(cricket::P2PTransportChannel *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 136);
  if (v1)
  {
    if (*(int *)(v1 + 2420) >= 1)
      return *(unsigned int *)(v1 + 2416) | 0x100000000;
    return 0;
  }
  return v1;
}

void cricket::P2PTransportChannel::GetSelectedCandidatePair(cricket::P2PTransportChannel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _BOOL4 v19;
  char *v20;
  int v21;
  int v22;
  int v24;
  std::string *v25;
  std::string v26[18];
  void *v27;
  std::string v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  int v40;
  char v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  __int128 v47;
  __int128 v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int16 v57;
  int v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  __int128 v64;
  _OWORD v65[2];
  int v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  __int16 v76;
  int v77;
  char v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  __int128 v84;
  __int128 v85;
  int v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  __int16 v94;
  int v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  if (!*((_QWORD *)this + 136))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 872) = 0;
    return;
  }
  v27 = &unk_24C0B8500;
  memset(&v28, 0, sizeof(v28));
    goto LABEL_39;
  v29 = 1;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = &unk_24C0ACDA0;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  v37 = 0;
  v36 = 0;
  v38 = 0;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0;
  v46 = 0;
  v49 = 0;
  v47 = 0u;
  v48 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v59 = 0;
  v57 = 0;
  v58 = 0;
  v56 = 0;
  v53 = &unk_24C0ACDA0;
  v54 = 0;
  v55 = 0;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0;
  memset(v65, 0, sizeof(v65));
  v64 = 0u;
    goto LABEL_39;
  v66 = 1;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0;
  v72 = &unk_24C0ACDA0;
  v78 = 0;
  v76 = 0;
  v77 = 0;
  v74 = 0;
  v73 = 0;
  v75 = 0;
  v79 = 0;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0;
  v86 = 0;
  v85 = 0u;
  v84 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = &unk_24C0ACDA0;
  v96 = 0;
  v94 = 0;
  v95 = 0;
  v93 = 0;
  v91 = 0;
  v92 = 0;
  v103 = 0;
  v101 = 0;
  v102 = 0;
  v98 = 0u;
  v99 = 0u;
  v97 = 0u;
  v100 = 0;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 136) + 16))(*((_QWORD *)this + 136));
  v9 = (_DWORD *)*((_QWORD *)this + 122);
  if ((*(_DWORD *)(v8 + 208) | 2) == 2)
  {
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 72))(*((_QWORD *)this + 122));
    if ((~v9[29] & 0xC00) == 0)
      goto LABEL_10;
  }
  else
  {
    v10 = 0;
    if ((~v9[29] & 0xC00) == 0)
    {
LABEL_10:
      v11 = 0;
      goto LABEL_12;
    }
  }
  if ((v9[35] & 1) == 0)
    goto LABEL_10;
  v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 72))(v9) ^ 1;
LABEL_12:
  v12 = v9[35];
  v13 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 72))(v9);
  v14 = *(_DWORD *)(v8 + 208);
  if ((v14 != 1 || v11) && (v14 != 3 || (v12 & 2) != 0))
  {
    if (v14 == 2)
      v15 = v13;
    else
      v15 = 0;
  }
  else
  {
    v15 = 1;
  }
  cricket::Candidate::ToSanitizedCopy((std::string *)v8, v10, v15, (uint64_t)v26);
  cricket::Candidate::operator=(&v28, v26);
  cricket::Candidate::~Candidate((void **)&v26[0].__r_.__value_.__l.__data_);
  v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 136) + 24))(*((_QWORD *)this + 136));
  v17 = (_QWORD *)(v16 + 80);
  if (*(char *)(v16 + 103) < 0)
  {
    v18 = *(_QWORD *)(v16 + 88);
    if ((v18 & 0x8000000000000000) == 0)
    {
      v17 = (_QWORD *)*v17;
      if (!v18 || v17)
        goto LABEL_25;
    }
    __break(1u);
LABEL_39:
    v25 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v4, v5, v6, v7, (uint64_t)v26[0].__r_.__value_.__l.__data_);
    cricket::CandidatePair::~CandidatePair((cricket::CandidatePair *)v25);
    return;
  }
  v18 = *(unsigned __int8 *)(v16 + 103);
LABEL_25:
  if (v18 >= 6)
  {
    v20 = (char *)v17 + v18;
    v21 = *(_DWORD *)(v20 - 6);
    v22 = *((unsigned __int16 *)v20 - 1);
    v19 = v21 == *(_DWORD *)".local" && v22 == *(unsigned __int16 *)"al";
  }
  else
  {
    v19 = 0;
  }
  v24 = *(_DWORD *)(v16 + 208) == 2 || v19;
  cricket::Candidate::ToSanitizedCopy((std::string *)v16, v24, 0, (uint64_t)v26);
  cricket::Candidate::operator=((std::string *)((char *)v65 + 8), v26);
  cricket::Candidate::~Candidate((void **)&v26[0].__r_.__value_.__l.__data_);
  *(_QWORD *)a2 = &unk_24C0B8500;
  cricket::Candidate::Candidate((std::string *)(a2 + 8), &v28);
  cricket::Candidate::Candidate((std::string *)(a2 + 440), (std::string *)((char *)v65 + 8));
  *(_BYTE *)(a2 + 872) = 1;
  cricket::Candidate::~Candidate((void **)v65 + 1);
  cricket::Candidate::~Candidate((void **)&v28.__r_.__value_.__l.__data_);
}

void cricket::CandidatePair::~CandidatePair(void **this)
{
  cricket::Candidate::~Candidate(this + 55);
  cricket::Candidate::~Candidate(this + 1);
}

{
  cricket::Candidate::~Candidate(this + 55);
  cricket::Candidate::~Candidate(this + 1);
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::P2PTransportChannel::ToString(std::string *this, uint64_t a2)
{
  char *v4;
  size_t v5;
  BOOL v6;
  uint64_t v7;
  size_t v8;
  std::string *v9;
  char *v10;
  unint64_t v11;
  int v12;
  std::string::size_type v13;
  std::string::size_type size;
  std::string *v15;
  _BYTE *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string *v19;
  std::string::size_type v20;
  int v21;
  std::string::size_type v22;
  void **v23;
  int v24;
  size_t v25;
  BOOL v26;
  std::string *v27;
  _BYTE *v28;
  std::string::size_type v29;
  int v30;
  std::string::size_type v31;
  std::string::size_type v32;
  void **v33;
  int v34;
  size_t v35;
  BOOL v36;
  std::string *v37;
  char *v38;
  std::string::size_type v39;
  int v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string *v43;
  char *v44;
  std::string::size_type v45;
  std::string::size_type v46;
  int v47;
  std::string::size_type v48;
  std::string *v49;
  _BYTE *v50;
  std::string::size_type v51;
  std::string v52;
  void *v53[2];
  char v54;
  void *__p[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v58 = 1;
  if (v57 <= (void **)"_" && (char *)v57 + 1 > "_")
    goto LABEL_135;
  LOWORD(v57[0]) = 95;
  v60 = 1;
  if (v59 <= (void **)"R" && (char *)v59 + 1 > "R")
    goto LABEL_135;
  LOWORD(v59[0]) = 82;
  v54 = 1;
  if (v53 <= (void **)"_" && (char *)v53 + 1 > "_")
    goto LABEL_135;
  LOWORD(v53[0]) = 95;
  v56 = 1;
  if (__p <= (void **)"W" && (char *)__p + 1 > "W")
    goto LABEL_135;
  LOWORD(__p[0]) = 87;
  memset(&v52, 0, sizeof(v52));
  if (&v52 <= (std::string *)"Channel[" && &v52.__r_.__value_.__r.__words[1] > (std::string::size_type *)"Channel[")
    goto LABEL_135;
  strcpy((char *)&v52, "Channel[");
  *((_BYTE *)&v52.__r_.__value_.__s + 23) = 8;
  v4 = (char *)(a2 + 944);
  if (*(char *)(a2 + 967) < 0)
  {
    v5 = *(_QWORD *)(a2 + 952);
    if ((v5 & 0x8000000000000000) != 0)
      goto LABEL_135;
    v4 = *(char **)v4;
    v6 = v5 == 0;
    if (v5)
    {
      if (!v4)
        goto LABEL_135;
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a2 + 967);
    v6 = *(_BYTE *)(a2 + 967) == 0;
  }
  if (v5 <= 0xE)
  {
    if (v6)
    {
      LODWORD(v11) = 8;
    }
    else
    {
      if (&v52.__r_.__value_.__r.__words[1] <= (std::string::size_type *)v4
        && (char *)&v52.__r_.__value_.__r.__words[1] + v5 > v4)
      {
        goto LABEL_135;
      }
      memmove(&v52.__r_.__value_.__r.__words[1], v4, v5);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        v52.__r_.__value_.__l.__size_ = v5 + 8;
      else
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = v5 + 8;
      v52.__r_.__value_.__s.__data_[v5 + 8] = 0;
      LODWORD(v11) = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    }
  }
  else
  {
    if (v5 - 0x7FFFFFFFFFFFFFEFLL <= 0x800000000000001ELL)
      goto LABEL_136;
    v7 = 44;
    if (v5 + 8 > 0x2C)
      v7 = v5 + 8;
    v8 = (v7 | 7) + 1;
    v9 = (std::string *)operator new(v8);
    v10 = &v9->__r_.__value_.__s.__data_[8];
    if (&v52 >= v9 && &v9->__r_.__value_.__r.__words[1] > (std::string::size_type *)&v52
      || (v9->__r_.__value_.__r.__words[0] = 0x5B6C656E6E616843, v10 <= v4) && &v10[v5] > v4)
    {
LABEL_135:
      __break(1u);
LABEL_136:
      abort();
    }
    memcpy(v10, v4, v5);
    v52.__r_.__value_.__l.__size_ = v5 + 8;
    v52.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    v9->__r_.__value_.__s.__data_[v5 + 8] = 0;
    v11 = (v8 | 0x8000000000000000) >> 56;
  }
  v12 = (char)v11;
  if ((v11 & 0x80u) == 0)
    v13 = 22;
  else
    v13 = (v52.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v11 & 0x80u) == 0)
    size = v11;
  else
    size = v52.__r_.__value_.__l.__size_;
  if (v13 == size)
  {
    std::string::__grow_by_and_replace(&v52, v13, 1uLL, v13, v13, 0, 1uLL, "|");
  }
  else
  {
    v15 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if (v12 >= 0)
      v15 = &v52;
    v16 = (char *)v15 + size;
    if ((char *)v15 + size <= "|" && v16 + 1 > "|")
      goto LABEL_135;
    *v16 = 124;
    v17 = size + 1;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      v52.__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&v52.__r_.__value_.__s + 23) = v17 & 0x7F;
    v15->__r_.__value_.__s.__data_[v17] = 0;
  }
  v18 = rtc::StringBuilder::operator<<(&v52, *(_DWORD *)(a2 + 968));
  v19 = v18;
  v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
  v21 = (char)v20;
  if ((v20 & 0x80u) == 0)
    v22 = 22;
  else
    v22 = (v18->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v20 & 0x80u) != 0)
    v20 = v18->__r_.__value_.__l.__size_;
  if (v22 == v20)
  {
    std::string::__grow_by_and_replace(v18, v22, 1uLL, v22, v22, 0, 1uLL, "|");
    v23 = &v57[3 * *(unsigned __int8 *)(a2 + 1440)];
    v24 = *((char *)v23 + 23);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_56:
      v25 = v24;
      v26 = v24 == 0;
      goto LABEL_69;
    }
  }
  else
  {
    if (v21 >= 0)
      v27 = v18;
    else
      v27 = (std::string *)v18->__r_.__value_.__r.__words[0];
    v28 = (char *)v27 + v20;
    if ((char *)v27 + v20 <= "|" && v28 + 1 > "|")
      goto LABEL_135;
    *v28 = 124;
    v29 = v20 + 1;
    if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
      v18->__r_.__value_.__l.__size_ = v29;
    else
      *((_BYTE *)&v18->__r_.__value_.__s + 23) = v29 & 0x7F;
    v27->__r_.__value_.__s.__data_[v29] = 0;
    v23 = &v57[3 * *(unsigned __int8 *)(a2 + 1440)];
    v24 = *((char *)v23 + 23);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_56;
  }
  v25 = (size_t)v23[1];
  if ((v25 & 0x8000000000000000) != 0)
    goto LABEL_135;
  v23 = (void **)*v23;
  v26 = v25 == 0;
  if (v25)
  {
    if (!v23)
      goto LABEL_135;
  }
LABEL_69:
  v30 = SHIBYTE(v19->__r_.__value_.__r.__words[2]);
  if (v30 >= 0)
    v31 = 22;
  else
    v31 = (v19->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v30 >= 0)
    v32 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
  else
    v32 = v19->__r_.__value_.__l.__size_;
  if (v31 - v32 >= v25)
  {
    if (!v26)
    {
      if (v30 >= 0)
        v37 = v19;
      else
        v37 = (std::string *)v19->__r_.__value_.__r.__words[0];
      v38 = (char *)v37 + v32;
      if ((char *)v37 + v32 <= (char *)v23 && &v38[v25] > (char *)v23)
        goto LABEL_135;
      memmove(v38, v23, v25);
      v39 = v32 + v25;
      if (SHIBYTE(v19->__r_.__value_.__r.__words[2]) < 0)
      {
        v19->__r_.__value_.__l.__size_ = v39;
        v37->__r_.__value_.__s.__data_[v39] = 0;
        v33 = &v53[3 * *(unsigned __int8 *)(a2 + 1441)];
        v34 = *((char *)v33 + 23);
        if (v34 < 0)
          goto LABEL_77;
        goto LABEL_90;
      }
      *((_BYTE *)&v19->__r_.__value_.__s + 23) = v39 & 0x7F;
      v37->__r_.__value_.__s.__data_[v39] = 0;
    }
    v33 = &v53[3 * *(unsigned __int8 *)(a2 + 1441)];
    v34 = *((char *)v33 + 23);
    if (v34 < 0)
      goto LABEL_77;
LABEL_90:
    v35 = v34;
    v36 = v34 == 0;
    goto LABEL_91;
  }
  std::string::__grow_by_and_replace(v19, v31, v32 + v25 - v31, v32, v32, 0, v25, (const std::string::value_type *)v23);
  v33 = &v53[3 * *(unsigned __int8 *)(a2 + 1441)];
  v34 = *((char *)v33 + 23);
  if ((v34 & 0x80000000) == 0)
    goto LABEL_90;
LABEL_77:
  v35 = (size_t)v33[1];
  if ((v35 & 0x8000000000000000) != 0)
    goto LABEL_135;
  v33 = (void **)*v33;
  v36 = v35 == 0;
  if (v35)
  {
    if (!v33)
      goto LABEL_135;
  }
LABEL_91:
  v40 = SHIBYTE(v19->__r_.__value_.__r.__words[2]);
  if (v40 >= 0)
    v41 = 22;
  else
    v41 = (v19->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v40 >= 0)
    v42 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
  else
    v42 = v19->__r_.__value_.__l.__size_;
  if (v41 - v42 >= v35)
  {
    if (!v36)
    {
      if (v40 >= 0)
        v43 = v19;
      else
        v43 = (std::string *)v19->__r_.__value_.__r.__words[0];
      v44 = (char *)v43 + v42;
      if ((char *)v43 + v42 <= (char *)v33 && &v44[v35] > (char *)v33)
        goto LABEL_135;
      memmove(v44, v33, v35);
      v45 = v42 + v35;
      if (SHIBYTE(v19->__r_.__value_.__r.__words[2]) < 0)
        v19->__r_.__value_.__l.__size_ = v45;
      else
        *((_BYTE *)&v19->__r_.__value_.__s + 23) = v45 & 0x7F;
      v43->__r_.__value_.__s.__data_[v45] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v19, v41, v42 + v35 - v41, v42, v42, 0, v35, (const std::string::value_type *)v33);
  }
  v46 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
  v47 = (char)v46;
  if ((v46 & 0x80u) == 0)
    v48 = 22;
  else
    v48 = (v19->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v46 & 0x80u) != 0)
    v46 = v19->__r_.__value_.__l.__size_;
  if (v48 == v46)
  {
    std::string::__grow_by_and_replace(v19, v48, 1uLL, v48, v48, 0, 1uLL, "]");
    *this = v52;
    if ((v56 & 0x80000000) == 0)
      goto LABEL_118;
  }
  else
  {
    if (v47 >= 0)
      v49 = v19;
    else
      v49 = (std::string *)v19->__r_.__value_.__r.__words[0];
    v50 = (char *)v49 + v46;
    if ((char *)v49 + v46 <= "]" && v50 + 1 > "]")
      goto LABEL_135;
    *v50 = 93;
    v51 = v46 + 1;
    if (SHIBYTE(v19->__r_.__value_.__r.__words[2]) < 0)
      v19->__r_.__value_.__l.__size_ = v51;
    else
      *((_BYTE *)&v19->__r_.__value_.__s + 23) = v51 & 0x7F;
    v49->__r_.__value_.__s.__data_[v51] = 0;
    *this = v52;
    if ((v56 & 0x80000000) == 0)
    {
LABEL_118:
      if ((v54 & 0x80000000) == 0)
        goto LABEL_119;
      goto LABEL_132;
    }
  }
  operator delete(__p[0]);
  if ((v54 & 0x80000000) == 0)
  {
LABEL_119:
    if ((v60 & 0x80000000) == 0)
      goto LABEL_120;
    goto LABEL_133;
  }
LABEL_132:
  operator delete(v53[0]);
  if ((v60 & 0x80000000) == 0)
  {
LABEL_120:
    if ((v58 & 0x80000000) == 0)
      return;
LABEL_134:
    operator delete(v57[0]);
    return;
  }
LABEL_133:
  operator delete(v59[0]);
  if (v58 < 0)
    goto LABEL_134;
}

std::string *cricket::P2PTransportChannel::SetIceParameters(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *result;
  char v12;
  __int128 v13;
  const std::string::value_type *v14;
  size_t v15;
  const std::string::value_type *v16;
  size_t v17;
  __int128 v18;
  const std::string::value_type *v19;
  size_t v20;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t\n", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  }
  result = (std::string *)(a1 + 1176);
  if ((__int128 *)(a1 + 1176) != a2)
  {
    v12 = *((_BYTE *)a2 + 23);
    if (*(char *)(a1 + 1199) < 0)
    {
      if (v12 >= 0)
        v16 = (const std::string::value_type *)a2;
      else
        v16 = *(const std::string::value_type **)a2;
      if (v12 >= 0)
        v17 = *((unsigned __int8 *)a2 + 23);
      else
        v17 = *((_QWORD *)a2 + 1);
      std::string::__assign_no_alias<false>(result, v16, v17);
      result = (std::string *)(a1 + 1200);
      v14 = (char *)a2 + 24;
      v15 = *((unsigned __int8 *)a2 + 47);
      if (*(char *)(a1 + 1223) < 0)
        goto LABEL_18;
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(result, *(char **)a2, *((_QWORD *)a2 + 1));
      result = (std::string *)(a1 + 1200);
      v14 = (char *)a2 + 24;
      v15 = *((unsigned __int8 *)a2 + 47);
      if (*(char *)(a1 + 1223) < 0)
      {
LABEL_18:
        if ((v15 & 0x80u) == 0)
          v19 = v14;
        else
          v19 = (const std::string::value_type *)*((_QWORD *)a2 + 3);
        if ((v15 & 0x80u) == 0)
          v20 = v15;
        else
          v20 = *((_QWORD *)a2 + 4);
        result = std::string::__assign_no_alias<false>(result, v19, v20);
        goto LABEL_26;
      }
    }
    else
    {
      v13 = *a2;
      *(_QWORD *)(a1 + 1192) = *((_QWORD *)a2 + 2);
      *(_OWORD *)&result->__r_.__value_.__l.__data_ = v13;
      result = (std::string *)(a1 + 1200);
      v14 = (char *)a2 + 24;
      v15 = *((unsigned __int8 *)a2 + 47);
      if (*(char *)(a1 + 1223) < 0)
        goto LABEL_18;
    }
    if ((v15 & 0x80) != 0)
    {
      result = (std::string *)std::string::__assign_no_alias<true>(result, *((char **)a2 + 3), *((_QWORD *)a2 + 4));
    }
    else
    {
      v18 = *(_OWORD *)v14;
      result->__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&result->__r_.__value_.__l.__data_ = v18;
    }
  }
LABEL_26:
  *(_BYTE *)(a1 + 1224) = *((_BYTE *)a2 + 48);
  return result;
}

uint64_t cricket::P2PTransportChannel::SetRemoteIceParameters(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const std::string::value_type *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  std::string *v32;
  char *v33;
  std::string::value_type *v34;
  void **v35;
  void **v36;
  __int128 v37;
  __int128 v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  const std::string::value_type *v46;
  uint64_t v47;
  std::string::size_type v48;
  const std::string::value_type *v49;
  std::string **v50;
  std::string **v51;
  std::string *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned __int8 *v58;
  uint64_t v59;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\n\t\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  v11 = *(_QWORD *)(a1 + 1232);
  v12 = *(_QWORD *)(a1 + 1240);
  if (v11 == v12)
  {
    v13 = *(std::string **)(a1 + 1232);
    goto LABEL_20;
  }
  v13 = *(std::string **)(a1 + 1240);
  v14 = *(unsigned __int8 *)(v12 - 33);
  if ((v14 & 0x80u) == 0)
    v15 = *(unsigned __int8 *)(v12 - 33);
  else
    v15 = *(_QWORD *)(v12 - 48);
  v16 = *((unsigned __int8 *)a2 + 23);
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = *((_QWORD *)a2 + 1);
  if (v15 != v16)
  {
LABEL_20:
    v20 = *(_QWORD *)(a1 + 1248);
    if ((unint64_t)v13 < v20)
    {
      if (v13)
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
          v22 = v13 + 1;
          if ((*((char *)a2 + 47) & 0x80000000) == 0)
            goto LABEL_24;
        }
        else
        {
          v21 = *a2;
          v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v21;
          v22 = v13 + 1;
          if ((*((char *)a2 + 47) & 0x80000000) == 0)
          {
LABEL_24:
            v23 = *(__int128 *)((char *)a2 + 24);
            v22->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
            *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
LABEL_53:
            v13[2].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 48);
            v34 = &v13[2].__r_.__value_.__s.__data_[8];
LABEL_54:
            *(_QWORD *)(a1 + 1240) = v34;
            goto LABEL_55;
          }
        }
        std::string::__init_copy_ctor_external(v22, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
        goto LABEL_53;
      }
      goto LABEL_105;
    }
    v24 = 0x6DB6DB6DB6DB6DB7 * ((v12 - v11) >> 3);
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) > 0x492492492492492)
      goto LABEL_106;
    v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v20 - v11) >> 3);
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x249249249249249)
      v27 = 0x492492492492492;
    else
      v27 = v25;
    if (!v27)
    {
LABEL_105:
      __break(1u);
LABEL_106:
      abort();
    }
    if (v27 > 0x492492492492492)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v28 = 56 * v27;
    v29 = (char *)operator new(56 * v27);
    v30 = v29;
    v31 = &v29[56 * v24];
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v29[56 * v24], *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      v32 = (std::string *)&v30[56 * v24 + 24];
      if ((*((char *)a2 + 47) & 0x80000000) == 0)
        goto LABEL_35;
    }
    else
    {
      *(_OWORD *)v31 = *a2;
      *((_QWORD *)v31 + 2) = *((_QWORD *)a2 + 2);
      v32 = (std::string *)&v29[56 * v24 + 24];
      if ((*((char *)a2 + 47) & 0x80000000) == 0)
      {
LABEL_35:
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = *(__int128 *)((char *)a2 + 24);
        v32->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
LABEL_38:
        v33 = &v30[v28];
        v30[56 * v24 + 48] = *((_BYTE *)a2 + 48);
        v34 = v31 + 56;
        v35 = *(void ***)(a1 + 1240);
        v36 = *(void ***)(a1 + 1232);
        if (v35 == v36)
        {
          *(_QWORD *)(a1 + 1232) = v31;
          *(_QWORD *)(a1 + 1240) = v34;
          *(_QWORD *)(a1 + 1248) = v33;
LABEL_49:
          if (v35)
            operator delete(v35);
          goto LABEL_54;
        }
        do
        {
          v37 = *(_OWORD *)(v35 - 7);
          *((_QWORD *)v31 - 5) = *(v35 - 5);
          *(_OWORD *)(v31 - 56) = v37;
          *(v35 - 6) = 0;
          *(v35 - 5) = 0;
          *(v35 - 7) = 0;
          v38 = *((_OWORD *)v35 - 2);
          *((_QWORD *)v31 - 2) = *(v35 - 2);
          *((_OWORD *)v31 - 2) = v38;
          *(v35 - 3) = 0;
          *(v35 - 2) = 0;
          *(v35 - 4) = 0;
          *(v31 - 8) = *((_BYTE *)v35 - 8);
          v31 -= 56;
          v35 -= 7;
        }
        while (v35 != v36);
        v35 = *(void ***)(a1 + 1232);
        v39 = *(void ***)(a1 + 1240);
        *(_QWORD *)(a1 + 1232) = v31;
        *(_QWORD *)(a1 + 1240) = v34;
        *(_QWORD *)(a1 + 1248) = v33;
        while (1)
        {
          if (v39 == v35)
            goto LABEL_49;
          if (*((char *)v39 - 9) < 0)
          {
            operator delete(*(v39 - 4));
            if ((*((char *)v39 - 33) & 0x80000000) == 0)
              goto LABEL_41;
          }
          else if ((*((char *)v39 - 33) & 0x80000000) == 0)
          {
            goto LABEL_41;
          }
          operator delete(*(v39 - 7));
LABEL_41:
          v39 -= 7;
        }
      }
    }
    std::string::__init_copy_ctor_external(v32, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
    goto LABEL_38;
  }
  if (v17 >= 0)
    v18 = (const std::string::value_type *)a2;
  else
    v18 = *(const std::string::value_type **)a2;
  if ((v14 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(v12 - 56), v18, *(_QWORD *)(v12 - 48)))
      goto LABEL_20;
  }
  else if (*(_BYTE *)(v12 - 33))
  {
    v19 = 0;
    while (*(unsigned __int8 *)(v12 + v19 - 56) == v18[v19])
    {
      if (v14 == ++v19)
        goto LABEL_87;
    }
    goto LABEL_20;
  }
LABEL_87:
  v54 = *(unsigned __int8 *)(v12 - 9);
  if ((v54 & 0x80u) == 0)
    v55 = *(unsigned __int8 *)(v12 - 9);
  else
    v55 = *(_QWORD *)(v12 - 24);
  v56 = *((unsigned __int8 *)a2 + 47);
  v57 = (char)v56;
  if ((v56 & 0x80u) != 0)
    v56 = *((_QWORD *)a2 + 4);
  if (v55 != v56)
    goto LABEL_20;
  if (v57 >= 0)
    v58 = (unsigned __int8 *)a2 + 24;
  else
    v58 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
  if ((v54 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(v12 - 32), v58, *(_QWORD *)(v12 - 24)))
      goto LABEL_20;
  }
  else if (*(_BYTE *)(v12 - 9))
  {
    v59 = 0;
    while (*(unsigned __int8 *)(v12 + v59 - 32) == v58[v59])
    {
      if (v54 == ++v59)
        goto LABEL_103;
    }
    goto LABEL_20;
  }
LABEL_103:
  if (*(unsigned __int8 *)(v12 - 8) != *((unsigned __int8 *)a2 + 48))
    goto LABEL_20;
LABEL_55:
  v40 = *(_QWORD *)(a1 + 1120);
  v41 = *(_QWORD *)(a1 + 1128);
  while (v40 != v41)
  {
    v42 = *(unsigned __int8 *)(v40 + 183);
    if ((v42 & 0x80u) == 0)
      v43 = *(unsigned __int8 *)(v40 + 183);
    else
      v43 = *(_QWORD *)(v40 + 168);
    v44 = *((unsigned __int8 *)a2 + 23);
    v45 = (char)v44;
    if ((v44 & 0x80u) != 0)
      v44 = *((_QWORD *)a2 + 1);
    if (v43 != v44)
      goto LABEL_58;
    if (v45 >= 0)
      v46 = (const std::string::value_type *)a2;
    else
      v46 = *(const std::string::value_type **)a2;
    if ((v42 & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v40 + 160), v46, *(_QWORD *)(v40 + 168)))
        goto LABEL_58;
    }
    else if (*(_BYTE *)(v40 + 183))
    {
      v47 = 0;
      while (*(unsigned __int8 *)(v40 + v47 + 160) == v46[v47])
      {
        if (v42 == ++v47)
          goto LABEL_73;
      }
      goto LABEL_58;
    }
LABEL_73:
    if (*(char *)(v40 + 207) < 0)
    {
      if (*(_QWORD *)(v40 + 192))
        goto LABEL_58;
    }
    else if (*(_BYTE *)(v40 + 207))
    {
      goto LABEL_58;
    }
    if (*((char *)a2 + 47) < 0)
    {
      v48 = *((_QWORD *)a2 + 4);
      if ((v48 & 0x8000000000000000) != 0)
        goto LABEL_105;
      v49 = (const std::string::value_type *)*((_QWORD *)a2 + 3);
      if (v48)
      {
        if (!v49)
          goto LABEL_105;
      }
    }
    else
    {
      v48 = *((unsigned __int8 *)a2 + 47);
      v49 = (char *)a2 + 24;
    }
    std::string::__assign_external((std::string *)(v40 + 184), v49, v48);
LABEL_58:
    v40 += 440;
  }
  v50 = *(std::string ***)(a1 + 1096);
  v51 = *(std::string ***)(a1 + 1104);
  while (v50 != v51)
  {
    v52 = *v50++;
    cricket::Connection::MaybeSetRemoteIceParametersAndGeneration(v52, (unsigned __int8 *)a2, -1 - 1227133513 * ((*(_QWORD *)(a1 + 1240) - *(_QWORD *)(a1 + 1232)) >> 3));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1536) + 72))(*(_QWORD *)(a1 + 1536), 1);
}

uint64_t cricket::P2PTransportChannel::SetRemoteIceMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1256) = a2;
  return result;
}

uint64_t cricket::P2PTransportChannel::SetIceConfig(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int *v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t *i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  int *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  int *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  int *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  int *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  int *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  int *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  int *v143;
  int v144;
  uint64_t *v145;
  uint64_t *j;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int *v156;
  int *v157;
  int v158;
  uint64_t *v159;
  uint64_t *k;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int *v170;
  int *v171;
  int v172;
  uint64_t *v173;
  uint64_t *m;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _DWORD *v184;
  int *v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _DWORD *v194;
  int *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int *v204;
  int v205;
  uint64_t v206;
  int v207;

  v4 = a2[4];
  if (*(_DWORD *)(a1 + 1324) != v4)
  {
    if (*(_QWORD *)(a1 + 1016) == *(_QWORD *)(a1 + 1024))
    {
      *(_DWORD *)(a1 + 1324) = v4;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    }
  }
  v19 = (_DWORD *)(a1 + 1308);
  v20 = (_DWORD *)(a1 + 1316);
  v21 = a2 + 2;
  v22 = *((unsigned __int8 *)a2 + 12);
  if (*(_BYTE *)(a1 + 1320))
    v23 = v22 == 0;
  else
    v23 = 1;
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 1320) != 0) == (v22 != 0))
      goto LABEL_17;
  }
  else if (*v20 == *v21)
  {
    goto LABEL_17;
  }
  v24 = *v21;
  *(_BYTE *)(a1 + 1320) = *((_BYTE *)a2 + 12);
  *v20 = v24;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v25, v26, v27, v28, v29, v30, v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_17:
  if (*(_BYTE *)(a1 + 1312) && *((_BYTE *)a2 + 4))
  {
    if (*v19 == *a2)
      goto LABEL_26;
  }
  else if ((*(_BYTE *)(a1 + 1312) != 0) == (*((_BYTE *)a2 + 4) != 0))
  {
    goto LABEL_26;
  }
  v32 = *a2;
  *(_BYTE *)(a1 + 1312) = *((_BYTE *)a2 + 4);
  *v19 = v32;
  v33 = *(uint64_t **)(a1 + 1096);
  for (i = *(uint64_t **)(a1 + 1104); v33 != i; *(_BYTE *)(v35 + 2568) = BYTE4(v36))
  {
    v35 = *v33++;
    v36 = *(_QWORD *)v19;
    *(_DWORD *)(v35 + 2564) = *(_QWORD *)v19;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v37, v38, v39, v40, v41, v42, v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_26:
  *(_BYTE *)(a1 + 1328) = *((_BYTE *)a2 + 20);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  v51 = (_DWORD *)(a1 + 1332);
  v52 = a2 + 6;
  if (*(_BYTE *)(a1 + 1336) && *((_BYTE *)a2 + 28))
  {
    if (*v51 == *v52)
      goto LABEL_35;
  }
  else if ((*(_BYTE *)(a1 + 1336) != 0) == (*((_BYTE *)a2 + 28) != 0))
  {
    goto LABEL_35;
  }
  v53 = *v52;
  *(_BYTE *)(a1 + 1336) = *((_BYTE *)a2 + 28);
  *v51 = v53;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v54, v55, v56, v57, v58, v59, v60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_35:
  v61 = *((unsigned __int8 *)a2 + 32);
  if (*(unsigned __int8 *)(a1 + 1340) != v61)
  {
    if (*(_QWORD *)(a1 + 1096) == *(_QWORD *)(a1 + 1104))
    {
      *(_BYTE *)(a1 + 1340) = v61;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v69, v70, v71, v72, v73, v74, v75, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t", v62, v63, v64, v65, v66, v67, v68, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    }
  }
  v76 = *((unsigned __int8 *)a2 + 33);
  *(_BYTE *)(a1 + 1341) = v76;
  if (v76 && *(_DWORD *)(a1 + 1324) != 1 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v77, v78, v79, v80, v81, v82, v83, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  v84 = (_DWORD *)(a1 + 1344);
  v85 = a2 + 9;
  if (*(_BYTE *)(a1 + 1348) && *((_BYTE *)a2 + 40))
  {
    if (*v84 == *v85)
      goto LABEL_52;
  }
  else if ((*(_BYTE *)(a1 + 1348) != 0) == (*((_BYTE *)a2 + 40) != 0))
  {
    goto LABEL_52;
  }
  v86 = *v85;
  *(_BYTE *)(a1 + 1348) = *((_BYTE *)a2 + 40);
  *v84 = v86;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v87, v88, v89, v90, v91, v92, v93, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_52:
  v94 = (_DWORD *)(a1 + 1352);
  v95 = a2 + 11;
  if (*(_BYTE *)(a1 + 1356) && *((_BYTE *)a2 + 48))
  {
    if (*v94 == *v95)
      goto LABEL_59;
  }
  else if ((*(_BYTE *)(a1 + 1356) != 0) == (*((_BYTE *)a2 + 48) != 0))
  {
    goto LABEL_59;
  }
  v96 = *v95;
  *(_BYTE *)(a1 + 1356) = *((_BYTE *)a2 + 48);
  *v94 = v96;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v97, v98, v99, v100, v101, v102, v103, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_59:
  v104 = a2[13];
  if (*(_DWORD *)(a1 + 1360) != v104)
  {
    *(_DWORD *)(a1 + 1360) = v104;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v105, v106, v107, v108, v109, v110, v111, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  }
  v112 = (_DWORD *)(a1 + 1364);
  v113 = a2 + 14;
  if (*(_BYTE *)(a1 + 1368) && *((_BYTE *)a2 + 60))
  {
    if (*v112 == *v113)
      goto LABEL_69;
  }
  else if ((*(_BYTE *)(a1 + 1368) != 0) == (*((_BYTE *)a2 + 60) != 0))
  {
    goto LABEL_69;
  }
  v114 = *v113;
  *(_BYTE *)(a1 + 1368) = *((_BYTE *)a2 + 60);
  *v112 = v114;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v115, v116, v117, v118, v119, v120, v121, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_69:
  v122 = (_DWORD *)(a1 + 1372);
  v123 = a2 + 16;
  if (*(_BYTE *)(a1 + 1376) && *((_BYTE *)a2 + 68))
  {
    if (*v122 == *v123)
      goto LABEL_76;
  }
  else if ((*(_BYTE *)(a1 + 1376) != 0) == (*((_BYTE *)a2 + 68) != 0))
  {
    goto LABEL_76;
  }
  v124 = *v123;
  *(_BYTE *)(a1 + 1376) = *((_BYTE *)a2 + 68);
  *v122 = v124;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v125, v126, v127, v128, v129, v130, v131, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_76:
  v132 = (_DWORD *)(a1 + 1380);
  v133 = a2 + 18;
  if (*(_BYTE *)(a1 + 1384) && *((_BYTE *)a2 + 76))
  {
    if (*v132 == *v133)
      goto LABEL_83;
  }
  else if ((*(_BYTE *)(a1 + 1384) != 0) == (*((_BYTE *)a2 + 76) != 0))
  {
    goto LABEL_83;
  }
  v134 = *v133;
  *(_BYTE *)(a1 + 1384) = *((_BYTE *)a2 + 76);
  *v132 = v134;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v135, v136, v137, v138, v139, v140, v141, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_83:
  v142 = (int *)(a1 + 1388);
  v143 = a2 + 20;
  if (*(_BYTE *)(a1 + 1392) && *((_BYTE *)a2 + 84))
  {
    if (*v142 == *v143)
      goto LABEL_92;
  }
  else if ((*(_BYTE *)(a1 + 1392) != 0) == (*((_BYTE *)a2 + 84) != 0))
  {
    goto LABEL_92;
  }
  v144 = *v143;
  *(_BYTE *)(a1 + 1392) = *((_BYTE *)a2 + 84);
  *v142 = v144;
  v145 = *(uint64_t **)(a1 + 1096);
  for (j = *(uint64_t **)(a1 + 1104); v145 != j; *(_DWORD *)(v147 + 2536) = v148)
  {
    v147 = *v145++;
    v148 = *v142;
    *(_BYTE *)(v147 + 2540) = *(_BYTE *)(a1 + 1392);
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v149, v150, v151, v152, v153, v154, v155, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_92:
  v156 = (int *)(a1 + 1396);
  v157 = a2 + 22;
  if (*(_BYTE *)(a1 + 1400) && *((_BYTE *)a2 + 92))
  {
    if (*v156 == *v157)
      goto LABEL_101;
  }
  else if ((*(_BYTE *)(a1 + 1400) != 0) == (*((_BYTE *)a2 + 92) != 0))
  {
    goto LABEL_101;
  }
  v158 = *v157;
  *(_BYTE *)(a1 + 1400) = *((_BYTE *)a2 + 92);
  *v156 = v158;
  v159 = *(uint64_t **)(a1 + 1096);
  for (k = *(uint64_t **)(a1 + 1104); v159 != k; *(_DWORD *)(v161 + 2544) = v162)
  {
    v161 = *v159++;
    v162 = *v156;
    *(_BYTE *)(v161 + 2548) = *(_BYTE *)(a1 + 1400);
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v163, v164, v165, v166, v167, v168, v169, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_101:
  v170 = (int *)(a1 + 1404);
  v171 = a2 + 24;
  if (*(_BYTE *)(a1 + 1408) && *((_BYTE *)a2 + 100))
  {
    if (*v170 == *v171)
      goto LABEL_110;
  }
  else if ((*(_BYTE *)(a1 + 1408) != 0) == (*((_BYTE *)a2 + 100) != 0))
  {
    goto LABEL_110;
  }
  v172 = *v171;
  *(_BYTE *)(a1 + 1408) = *((_BYTE *)a2 + 100);
  *v170 = v172;
  v173 = *(uint64_t **)(a1 + 1096);
  for (m = *(uint64_t **)(a1 + 1104); v173 != m; *(_DWORD *)(v175 + 2552) = v176)
  {
    v175 = *v173++;
    v176 = *v170;
    *(_BYTE *)(v175 + 2556) = *(_BYTE *)(a1 + 1408);
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v177, v178, v179, v180, v181, v182, v183, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_110:
  v184 = (_DWORD *)(a1 + 1420);
  v185 = a2 + 28;
  if (*(_BYTE *)(a1 + 1424) && *((_BYTE *)a2 + 116))
  {
    if (*v184 == *v185)
      goto LABEL_117;
  }
  else if ((*(_BYTE *)(a1 + 1424) != 0) == (*((_BYTE *)a2 + 116) != 0))
  {
    goto LABEL_117;
  }
  v186 = *v185;
  *(_BYTE *)(a1 + 1424) = *((_BYTE *)a2 + 116);
  *v184 = v186;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1536) + 72))(*(_QWORD *)(a1 + 1536), 2);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v187, v188, v189, v190, v191, v192, v193, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_117:
  v194 = (_DWORD *)(a1 + 1412);
  v195 = a2 + 26;
  if (*(_BYTE *)(a1 + 1416) && *((_BYTE *)a2 + 108))
  {
    if (*v194 == *v195)
      goto LABEL_124;
  }
  else if ((*(_BYTE *)(a1 + 1416) != 0) == (*((_BYTE *)a2 + 108) != 0))
  {
    goto LABEL_124;
  }
  v196 = *v195;
  *(_BYTE *)(a1 + 1416) = *((_BYTE *)a2 + 108);
  *v194 = v196;
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 1024) - 8) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 1024)
                                                                                                  - 8));
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v197, v198, v199, v200, v201, v202, v203, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_124:
  if (*(_BYTE *)(a1 + 1348))
    v204 = (int *)(a1 + 1344);
  else
    v204 = (int *)&cricket::REGATHER_ON_FAILED_NETWORKS_INTERVAL;
  v205 = *v204;
  v206 = *(_QWORD *)(a1 + 1280);
  if (*(_QWORD *)(v206 + 56))
  {
    v207 = *(_DWORD *)(v206 + 64);
    *(_DWORD *)(v206 + 64) = v205;
    if (v207 != v205)
      webrtc::BasicRegatheringController::ScheduleRecurringRegatheringOnFailedNetworks((webrtc::BasicRegatheringController *)v206);
  }
  else
  {
    *(_DWORD *)(v206 + 64) = v205;
  }
  *(_DWORD *)(a1 + 1428) = a2[30];
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 976) + 40))(*(_QWORD *)(a1 + 976));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1536) + 16))(*(_QWORD *)(a1 + 1536), a1 + 1308);
}

char *cricket::P2PTransportChannel::ValidateIceConfig@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if (result[60])
    v3 = *((_DWORD *)result + 14);
  else
    v3 = 480;
  if (result[68])
    v4 = *((_DWORD *)result + 16);
  else
    v4 = 48;
  if (v3 >= v4)
  {
    if (result[4])
      v5 = *(_DWORD *)result;
    else
      v5 = 2500;
    if (result[76])
      v6 = *((_DWORD *)result + 18);
    else
      v6 = -1;
    if (v3 > v6)
      v6 = v3;
    if (v5 >= v6)
    {
      if (result[12])
        v7 = *((_DWORD *)result + 2);
      else
        v7 = 25000;
      if (v7 >= v3)
      {
        if (result[28])
          v8 = *((_DWORD *)result + 6);
        else
          v8 = 2500;
        if (v8 >= v3)
        {
          if (result[84])
            v9 = *((_DWORD *)result + 20);
          else
            v9 = 5000;
          if (result[100])
            v10 = *((_DWORD *)result + 24);
          else
            v10 = 15000;
          if (v9 <= v10)
          {
            *(_DWORD *)a2 = 0;
            *(_BYTE *)(a2 + 38) = 0;
            *(_QWORD *)(a2 + 16) = 0;
            *(_QWORD *)(a2 + 24) = 0;
            *(_QWORD *)(a2 + 8) = 0;
            *(_QWORD *)(a2 + 29) = 0;
            return result;
          }
          *(_DWORD *)a2 = 3;
          result = (char *)operator new(0x70uLL);
          *(_QWORD *)(a2 + 8) = result;
          *(_OWORD *)(a2 + 16) = xmmword_208F16D50;
          if (result > "The timeout period for the writability state to become UNRELIABLE is longer than that to become TIMEOUT."
            || result + 104 <= "The timeout period for the writability state to become UNRELIABLE is longer than that to become TIMEOUT.")
          {
            strcpy(result, "The timeout period for the writability state to become UNRELIABLE is longer than that to become TIMEOUT.");
            *(_DWORD *)(a2 + 32) = 0;
            *(_BYTE *)(a2 + 36) = 0;
            *(_BYTE *)(a2 + 38) = 0;
            return result;
          }
        }
        else
        {
          *(_DWORD *)a2 = 3;
          result = (char *)operator new(0x88uLL);
          *(_QWORD *)(a2 + 8) = result;
          *(_OWORD *)(a2 + 16) = xmmword_208F16D60;
          if (result > "Ping interval of stable and writable candidate pairs is shorter than that of general candidate p"
                        "airs when ICE is strongly connected"
            || result + 131 <= "Ping interval of stable and writable candidate pairs is shorter than that of general cand"
                               "idate pairs when ICE is strongly connected")
          {
            strcpy(result, "Ping interval of stable and writable candidate pairs is shorter than that of general candidate pairs when ICE is strongly connected");
            *(_DWORD *)(a2 + 32) = 0;
            *(_BYTE *)(a2 + 36) = 0;
            *(_BYTE *)(a2 + 38) = 0;
            return result;
          }
        }
      }
      else
      {
        *(_DWORD *)a2 = 3;
        result = (char *)operator new(0x78uLL);
        *(_QWORD *)(a2 + 8) = result;
        *(_OWORD *)(a2 + 16) = xmmword_208F16D70;
        if (result > "Ping interval of backup candidate pairs is shorter than that of general candidate pairs when ICE i"
                      "s strongly connected"
          || result + 118 <= "Ping interval of backup candidate pairs is shorter than that of general candidate pairs whe"
                             "n ICE is strongly connected")
        {
          strcpy(result, "Ping interval of backup candidate pairs is shorter than that of general candidate pairs when ICE is strongly connected");
          *(_DWORD *)(a2 + 32) = 0;
          *(_BYTE *)(a2 + 36) = 0;
          *(_BYTE *)(a2 + 38) = 0;
          return result;
        }
      }
    }
    else
    {
      *(_DWORD *)a2 = 3;
      result = (char *)operator new(0x40uLL);
      *(_QWORD *)(a2 + 8) = result;
      *(_OWORD *)(a2 + 16) = xmmword_208F086A0;
      if (result > "Receiving timeout is shorter than the minimal ping interval."
        || result + 60 <= "Receiving timeout is shorter than the minimal ping interval.")
      {
        strcpy(result, "Receiving timeout is shorter than the minimal ping interval.");
        *(_DWORD *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 36) = 0;
        *(_BYTE *)(a2 + 38) = 0;
        return result;
      }
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    result = (char *)operator new(0x78uLL);
    *(_QWORD *)(a2 + 8) = result;
    *(_OWORD *)(a2 + 16) = xmmword_208F16D80;
    if (result > "Ping interval of candidate pairs is shorter when ICE is strongly connected than that when ICE is weakly connected"
      || result + 113 <= "Ping interval of candidate pairs is shorter when ICE is strongly connected than that when ICE i"
                         "s weakly connected")
    {
      strcpy(result, "Ping interval of candidate pairs is shorter when ICE is strongly connected than that when ICE is weakly connected");
      *(_DWORD *)(a2 + 32) = 0;
      *(_BYTE *)(a2 + 36) = 0;
      *(_BYTE *)(a2 + 38) = 0;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t cricket::P2PTransportChannel::selected_connection(cricket::P2PTransportChannel *this)
{
  return *((_QWORD *)this + 136);
}

void cricket::P2PTransportChannel::MaybeStartGathering(cricket::P2PTransportChannel *this, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, size_t a6, char *a7, size_t a8)
{
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  size_t v27;
  const void *v29;
  char *v30;
  int v31;
  BOOL v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  size_t v41;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  void **v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  void (*v53)(uint64_t, cricket::P2PTransportChannel *, void **);
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  cricket::PortAllocatorSession *v59;
  cricket::PortInterface **v60;
  cricket::PortInterface **v61;
  cricket::PortInterface *v62;
  uint64_t v63;
  cricket::PortAllocatorSession *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::string *v70;
  uint64_t v71;
  unsigned __int16 *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  uint64_t v78;
  uint64_t v79;
  void *__p;
  cricket::PortInterface **v81;
  uint64_t v82;
  uint64_t v83;

  v9 = (const void **)((char *)this + 1176);
  v10 = *((unsigned __int8 *)this + 1199);
  if (*((char *)this + 1199) < 0)
  {
    if (!*((_QWORD *)this + 148))
      goto LABEL_11;
  }
  else if (!*((_BYTE *)this + 1199))
  {
LABEL_11:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\n\t\n", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    return;
  }
  v11 = *((unsigned __int8 *)this + 1223);
  if (*((char *)this + 1223) < 0)
  {
    if (!*((_QWORD *)this + 151))
      goto LABEL_11;
  }
  else if (!*((_BYTE *)this + 1223))
  {
    goto LABEL_11;
  }
  v12 = (char **)((char *)this + 1200);
  v13 = (_QWORD *)*((_QWORD *)this + 127);
  v14 = (_QWORD *)*((_QWORD *)this + 128);
  if (v13 != v14)
  {
    v15 = *(v14 - 1);
    v16 = (_QWORD *)(v15 + 488);
    if (*(char *)(v15 + 511) < 0)
    {
      v17 = *(_QWORD *)(v15 + 496);
      if ((v17 & 0x8000000000000000) != 0)
        goto LABEL_124;
      v16 = (_QWORD *)*v16;
      if (v17 && v16 == 0)
        goto LABEL_124;
    }
    else
    {
      v17 = *(unsigned __int8 *)(v15 + 511);
    }
    v26 = (_QWORD *)(v15 + 512);
    if (*(char *)(v15 + 535) < 0)
    {
      v27 = *(_QWORD *)(v15 + 520);
      if ((v27 & 0x8000000000000000) != 0)
        goto LABEL_124;
      v26 = (_QWORD *)*v26;
      if (v27 && v26 == 0)
        goto LABEL_124;
    }
    else
    {
      v27 = *(unsigned __int8 *)(v15 + 535);
    }
    v29 = v9;
    if ((v10 & 0x80) != 0)
    {
      v10 = *((_QWORD *)this + 148);
      if (v10 < 0)
        goto LABEL_124;
      v29 = *v9;
      if (v10)
      {
        if (!v29)
          goto LABEL_124;
      }
    }
    v30 = (char *)this + 1200;
    if ((v11 & 0x80) != 0)
    {
      v11 = *((_QWORD *)this + 151);
      if (v11 < 0)
        goto LABEL_124;
      v30 = *v12;
      if (v11)
      {
        if (!v30)
          goto LABEL_124;
      }
    }
    if (v17 == v10)
    {
      v31 = memcmp(v16, v29, v17);
      v32 = v27 == v11 && v31 == 0;
      if (v32 && !memcmp(v26, v30, v27))
        return;
    }
  }
  if (*((_DWORD *)this + 318) != 1)
  {
    *((_DWORD *)this + 318) = 1;
    if (*((_BYTE *)this + 832))
    {
LABEL_125:
      v70 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, (uint64_t)a5, a6, (uint64_t)a7, a8, v78);
      cricket::P2PTransportChannel::OnUnknownAddress((cricket::P2PTransportChannel *)v70, v71, v72, v73, v74, v75, v76, v77);
      return;
    }
    v33 = (char *)this + 832;
    *((_BYTE *)this + 832) = 1;
    v34 = *((_QWORD *)this + 101);
    v35 = *((_QWORD *)this + 102);
    if (v34 == v35)
    {
      *v33 = 0;
    }
    else
    {
      v36 = 0;
      do
      {
        (*(void (**)(uint64_t, cricket::P2PTransportChannel *))(v34 + 40))(v34 + 8, this);
        v37 = *(_BYTE **)v34;
        v34 += 56;
        v36 |= v37 == v33;
      }
      while (v34 != v35);
      *v33 = 0;
      if ((v36 & 1) != 0)
        webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((cricket::P2PTransportChannel *)((char *)this + 808), (char *)this + 832);
    }
    v13 = (_QWORD *)*((_QWORD *)this + 127);
    v14 = (_QWORD *)*((_QWORD *)this + 128);
  }
  while (v13 != v14)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 64))(*v13) & 1) == 0)
      (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 32))(*v13);
    ++v13;
  }
  v38 = *((_QWORD *)this + 122);
  v39 = (*(uint64_t (**)(cricket::P2PTransportChannel *))(*(_QWORD *)this + 16))(this);
  v40 = (__int128 *)v39;
  if (*(char *)(v39 + 23) < 0)
  {
    v41 = *(_QWORD *)(v39 + 8);
    if ((v41 & 0x8000000000000000) != 0)
      goto LABEL_124;
    v40 = *(__int128 **)v39;
    if (v41 && v40 == 0)
      goto LABEL_124;
  }
  else
  {
    v41 = *(unsigned __int8 *)(v39 + 23);
  }
  v43 = (*(uint64_t (**)(cricket::P2PTransportChannel *))(*(_QWORD *)this + 96))(this);
  if (*((char *)this + 1199) < 0)
  {
    a6 = *((_QWORD *)this + 148);
    if ((a6 & 0x8000000000000000) != 0)
      goto LABEL_124;
    a5 = (__int128 *)*v9;
    if (a6)
    {
      if (!a5)
        goto LABEL_124;
    }
  }
  else
  {
    a6 = *((unsigned __int8 *)this + 1199);
    a5 = (__int128 *)v9;
  }
  if (*((char *)this + 1223) < 0)
  {
    a8 = *((_QWORD *)this + 151);
    if ((a8 & 0x8000000000000000) != 0)
      goto LABEL_124;
    a7 = *v12;
    if (a8)
    {
      if (!a7)
        goto LABEL_124;
    }
  }
  else
  {
    a8 = *((unsigned __int8 *)this + 1223);
    a7 = (char *)this + 1200;
  }
  cricket::PortAllocator::TakePooledSession(a5, a6, a7, v38, v40, v41, v43, a8, &v83);
  if (!v83)
  {
    v54 = (unsigned int *)*((_QWORD *)this + 122);
    v55 = (*(uint64_t (**)(cricket::P2PTransportChannel *))(*(_QWORD *)this + 16))(this);
    v56 = v55;
    if (*(char *)(v55 + 23) < 0)
    {
      v57 = *(_QWORD *)(v55 + 8);
      if (v57 < 0)
        goto LABEL_124;
      v56 = *(_QWORD *)v55;
      if (v57 && v56 == 0)
        goto LABEL_124;
    }
    else
    {
      v57 = *(unsigned __int8 *)(v55 + 23);
    }
    v67 = (*(uint64_t (**)(cricket::P2PTransportChannel *))(*(_QWORD *)this + 96))(this);
    if (*((char *)this + 1199) < 0)
    {
      a6 = *((_QWORD *)this + 148);
      if ((a6 & 0x8000000000000000) != 0)
        goto LABEL_124;
      v9 = (const void **)*v9;
      if (a6)
      {
        if (!v9)
          goto LABEL_124;
      }
    }
    else
    {
      a6 = *((unsigned __int8 *)this + 1199);
    }
    if ((*((char *)this + 1223) & 0x80000000) == 0)
    {
      a8 = *((unsigned __int8 *)this + 1223);
      goto LABEL_119;
    }
    a8 = *((_QWORD *)this + 151);
    if ((a8 & 0x8000000000000000) == 0)
    {
      v12 = (char **)*v12;
      if (!a8 || v12)
      {
LABEL_119:
        v79 = (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, uint64_t, const void **, size_t, char **, size_t))(*(_QWORD *)v54 + 64))(v54, v56, v57, v67, v9, a6, v12, a8);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 16))(v79, v54[35]);
        cricket::P2PTransportChannel::AddAllocatorSession((uint64_t)this, &v79);
        v68 = v79;
        v79 = 0;
        if (v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
        v69 = *((_QWORD *)this + 128);
        if (*((_QWORD *)this + 127) != v69)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v69 - 8) + 24))(*(_QWORD *)(v69 - 8));
          v65 = v83;
          v83 = 0;
          if (!v65)
            return;
LABEL_100:
          (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
          return;
        }
      }
    }
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
  v82 = v83;
  v83 = 0;
  cricket::P2PTransportChannel::AddAllocatorSession((uint64_t)this, &v82);
  v44 = v82;
  v82 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *((_QWORD *)this + 128);
  if (*((_QWORD *)this + 127) == v45)
    goto LABEL_124;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v45 - 8) + 104))(&__p);
  v47 = (void **)__p;
  v46 = (void **)v81;
  if (v81 == __p)
  {
    v47 = (void **)v81;
    goto LABEL_85;
  }
  v48 = (char *)this + 424;
  if (*((cricket::P2PTransportChannel **)this + 54) != (cricket::P2PTransportChannel *)((char *)this + 424))
  {
    v49 = 0;
    do
    {
      v50 = *((_QWORD *)this + 54);
      *((_QWORD *)this + 56) = v50;
      if ((char *)v50 != v48)
      {
        v51 = &v47[54 * v49];
        do
        {
          v53 = *(void (**)(uint64_t, cricket::P2PTransportChannel *, void **))(v50 + 16);
          v52 = v50 + 16;
          *((_QWORD *)this + 56) = *(_QWORD *)(v52 - 8);
          v53(v52, this, v51);
          v50 = *((_QWORD *)this + 56);
        }
        while ((char *)v50 != v48);
        v47 = (void **)__p;
        v46 = (void **)v81;
      }
      ++v49;
    }
    while (v49 < 0x84BDA12F684BDA13 * (((char *)v46 - (char *)v47) >> 4));
LABEL_85:
    if (!v47)
      goto LABEL_90;
    goto LABEL_86;
  }
  *((_QWORD *)this + 56) = v48;
  if (!v47)
    goto LABEL_90;
LABEL_86:
  if (v46 != v47)
  {
    do
      cricket::Candidate::~Candidate(v46 - 54);
    while (v46 != v47);
    v46 = (void **)__p;
  }
  v81 = (cricket::PortInterface **)v47;
  operator delete(v46);
LABEL_90:
  v58 = *((_QWORD *)this + 128);
  if (*((_QWORD *)this + 127) == v58)
    goto LABEL_124;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v58 - 8) + 96))(&__p);
  v60 = (cricket::PortInterface **)__p;
  v61 = v81;
  if (__p != v81)
  {
    do
    {
      v62 = *v60++;
      cricket::P2PTransportChannel::OnPortReady(this, v59, v62);
    }
    while (v60 != v61);
    v60 = (cricket::PortInterface **)__p;
  }
  if (v60)
  {
    v81 = v60;
    operator delete(v60);
  }
  v63 = *((_QWORD *)this + 128);
  if (*((_QWORD *)this + 127) == v63)
    goto LABEL_124;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v63 - 8) + 112))(*(_QWORD *)(v63 - 8)) & 1) != 0)
    cricket::P2PTransportChannel::OnCandidatesAllocationDone(this, v64);
  v65 = v83;
  v83 = 0;
  if (v65)
    goto LABEL_100;
}

void cricket::P2PTransportChannel::OnUnknownAddress(cricket::P2PTransportChannel *a1, uint64_t a2, unsigned __int16 *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, size_t a8)
{
  unsigned __int8 *v8;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  std::string::pointer data;
  char *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  std::string::size_type *p_size;
  size_t v22;
  cricket::IceMessage *v23;
  size_t v24;
  unsigned __int8 *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  BOOL v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  cricket::Connection *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  size_t v70;
  size_t v71;
  char *p_dst;
  char *v73;
  std::string *v74;
  void *__src;
  int v76;
  int v78;
  std::string __p[18];
  std::string v81;
  int v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  __int16 v92;
  int v93;
  char v94;
  int v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  int v99;
  __int128 v100;
  __int128 v101;
  int v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  __int16 v110;
  int v111;
  char v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 __dst;
  uint64_t v121;

  v78 = a7;
  v8 = (unsigned __int8 *)a6;
  v12 = (std::string *)*((_QWORD *)a1 + 140);
  v13 = (std::string *)*((_QWORD *)a1 + 141);
  if (v12 != v13)
  {
    v14 = a4;
    do
    {
      v15 = v12[7].__r_.__value_.__s.__data_[15];
      if ((v15 & 0x80u) == 0)
        data = (std::string::pointer)v12[7].__r_.__value_.__s.__data_[15];
      else
        data = v12[7].__r_.__value_.__l.__data_;
      v17 = (char *)v8[23];
      v18 = (char)v17;
      if ((char)v17 < 0)
        v17 = (char *)*((_QWORD *)v8 + 1);
      if (data != v17)
        goto LABEL_4;
      if (v18 >= 0)
        v19 = v8;
      else
        v19 = *(unsigned __int8 **)v8;
      if ((v15 & 0x80) != 0)
      {
        if (memcmp((const void *)v12[6].__r_.__value_.__r.__words[2], v19, v12[7].__r_.__value_.__r.__words[0]))
          goto LABEL_4;
      }
      else if (v12[7].__r_.__value_.__s.__data_[15])
      {
        v20 = 0;
        while (v12[6].__r_.__value_.__s.__data_[v20 + 16] == v19[v20])
        {
          if (v15 == ++v20)
            goto LABEL_19;
        }
        goto LABEL_4;
      }
LABEL_19:
      if (rtc::SocketAddress::EqualIPs((rtc::SocketAddress *)&v12[3].__r_.__value_.__r.__words[1], (const rtc::SocketAddress *)a3)&& LOWORD(v12[5].__r_.__value_.__r.__words[2]) == a3[28])
      {
        p_size = &v12[1].__r_.__value_.__l.__size_;
        if (v12[2].__r_.__value_.__s.__data_[7] < 0)
        {
          v22 = v12[1].__r_.__value_.__r.__words[2];
          if ((v22 & 0x8000000000000000) != 0)
            goto LABEL_101;
          p_size = (std::string::size_type *)*p_size;
          if (v22)
          {
            if (!p_size)
              goto LABEL_101;
          }
        }
        else
        {
          v22 = v12[2].__r_.__value_.__s.__data_[7];
        }
        if (v22 == strlen(*((const char **)&cricket::PROTO_NAMES + v14))
          && !memcmp(p_size, *((const void **)&cricket::PROTO_NAMES + v14), v22))
        {
          goto LABEL_30;
        }
      }
LABEL_4:
      v12 = (std::string *)((char *)v12 + 440);
    }
    while (v12 != v13);
  }
  v12 = 0;
LABEL_30:
  __dst = 0uLL;
  v121 = 0;
  v23 = (cricket::IceMessage *)a5;
  if ((char)v8[23] < 0)
  {
    v24 = *((_QWORD *)v8 + 1);
    if ((v24 & 0x8000000000000000) != 0)
      goto LABEL_101;
    v25 = *(unsigned __int8 **)v8;
    if (v24)
    {
      if (!v25)
        goto LABEL_101;
    }
  }
  else
  {
    v24 = v8[23];
    v25 = v8;
  }
  v26 = (char *)*((_QWORD *)a1 + 155);
  v27 = (char *)*((_QWORD *)a1 + 154);
  if (v26 != v27)
  {
    v28 = v26 - 56;
    while (1)
    {
      if (v28[23] < 0)
      {
        v29 = *((_QWORD *)v28 + 1);
        if (v29 < 0)
          goto LABEL_101;
        v30 = *(char **)v28;
        v31 = v29 && v30 == 0;
        if (v31)
          goto LABEL_101;
      }
      else
      {
        v29 = v28[23];
        v30 = v28;
      }
      if (v29 == v24 && !memcmp(v25, v30, v24))
        break;
      v31 = v28 == v27;
      v28 -= 56;
      if (v31)
        goto LABEL_52;
    }
    v26 = v28 + 56;
  }
  if (v26 == v27)
  {
LABEL_52:
    v32 = 0;
  }
  else
  {
    v32 = -1227133513 * ((unint64_t)(v26 - v27) >> 3) - 1;
    if (&__dst != (__int128 *)(v26 - 32))
    {
      if (*(v26 - 9) < 0)
      {
        std::string::__assign_no_alias<true>(&__dst, *((char **)v26 - 4), *((_QWORD *)v26 - 3));
      }
      else
      {
        v33 = *((_OWORD *)v26 - 2);
        v121 = *((_QWORD *)v26 - 2);
        __dst = v33;
      }
    }
  }
  memset(&v81, 0, sizeof(v81));
    goto LABEL_102;
  v82 = 1;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0;
  v88 = &unk_24C0ACDA0;
  v94 = 0;
  v92 = 0;
  v93 = 0;
  v90 = 0;
  v89 = 0;
  v91 = 0;
  v95 = 0;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0;
  v102 = 0;
  v101 = 0u;
  v100 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  v112 = 0;
  v110 = 0;
  v111 = 0;
  v109 = 0;
  v106 = &unk_24C0ACDA0;
  v107 = 0;
  v108 = 0;
  v119 = 0;
  v117 = 0;
  v118 = 0;
  v116 = 0;
  v114 = 0u;
  v115 = 0u;
  v113 = 0u;
  if (v12)
  {
    cricket::Candidate::operator=(&v81, v12);
    v34 = a2;
    goto LABEL_56;
  }
  v42 = *((_QWORD *)v23 + 1);
  v43 = *((_QWORD *)v23 + 2);
  if (v42 == v43)
  {
LABEL_66:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v45, v46, v47, v48, v49, v50, v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    (*(void (**)(uint64_t, cricket::IceMessage *, unsigned __int16 *, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 152))(a2, v23, a3, 400, "Bad Request", 11);
    cricket::Candidate::~Candidate((void **)&v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v121) < 0)
      goto LABEL_78;
    return;
  }
  v44 = *((_QWORD *)v23 + 1);
  while (*(_WORD *)(*(_QWORD *)v44 + 8) != 36)
  {
    v44 += 8;
    if (v44 == v43)
      goto LABEL_66;
  }
  v76 = *(_DWORD *)(*(_QWORD *)v44 + 12);
  while (*(unsigned __int16 *)(*(_QWORD *)v42 + 8) != 49239)
  {
    v42 += 8;
    if (v42 == v43)
    {
      LOWORD(v67) = 0;
      LOWORD(v68) = 0;
      goto LABEL_85;
    }
  }
  v68 = *(_DWORD *)(*(_QWORD *)v42 + 12);
  v67 = HIWORD(v68);
LABEL_85:
  v69 = (*(uint64_t (**)(cricket::P2PTransportChannel *))(*(_QWORD *)a1 + 96))(a1);
  v70 = strlen(*((const char **)&cricket::PROTO_NAMES + a4));
  if (((char)v8[23] & 0x80000000) == 0)
  {
    a8 = v8[23];
    goto LABEL_90;
  }
  a8 = *((_QWORD *)v8 + 1);
  if ((a8 & 0x8000000000000000) != 0 || (v8 = *(unsigned __int8 **)v8, a8) && !v8)
  {
LABEL_101:
    __break(1u);
LABEL_102:
    v74 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, (uint64_t)__src);
    cricket::P2PTransportChannel::OnRoleConflict((uint64_t)v74);
    return;
  }
LABEL_90:
  if (SHIBYTE(v121) < 0)
  {
    v71 = *((_QWORD *)&__dst + 1);
    if ((*((_QWORD *)&__dst + 1) & 0x8000000000000000) == 0)
    {
      p_dst = (char *)__dst;
      if (!*((_QWORD *)&__dst + 1) || (_QWORD)__dst)
        goto LABEL_95;
    }
    goto LABEL_101;
  }
  v71 = HIBYTE(v121);
  p_dst = (char *)&__dst;
LABEL_95:
  cricket::Candidate::Candidate((uint64_t)__p, v69, *((char **)&cricket::PROTO_NAMES + a4), v70, (__int128 *)a3, v76, (char *)v8, a8, p_dst, v71, 2, v32, &byte_208EB9246, 0, v67, v68);
  cricket::Candidate::operator=(&v81, __p);
  cricket::Candidate::~Candidate((void **)&__p[0].__r_.__value_.__l.__data_);
  v34 = a2;
  if (a4 == 1)
  {
    if (SBYTE7(v114) < 0)
    {
      *((_QWORD *)&v113 + 1) = 6;
      v73 = (char *)v113;
    }
    else
    {
      BYTE7(v114) = 6;
      v73 = (char *)&v113;
    }
    strcpy(v73, "active");
  }
  cricket::Candidate::ComputePrflxFoundation((cricket::Candidate *)&v81);
LABEL_56:
  if (!(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v34 + 88))(v34, &v86))
  {
    v52 = (*(uint64_t (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)v34 + 96))(v34, &v81, 0);
    if (v52)
    {
      v53 = (cricket::Connection *)v52;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        cricket::Candidate::ToStringInternal((cricket::Candidate *)&v81, 1, __p);
        rtc::webrtc_logging_impl::Log("\r\t\t\t\n", v60, v61, v62, v63, v64, v65, v66, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      cricket::P2PTransportChannel::AddConnection(a1, v53, v54, v55, v56, v57, v58, v59);
      cricket::Connection::HandleStunBindingOrGoogPingRequest(v53, v23);
      (*(void (**)(_QWORD *, uint64_t))(**((_QWORD **)a1 + 192) + 80))(*((_QWORD **)a1 + 192), 5);
LABEL_75:
      cricket::Candidate::~Candidate((void **)&v81.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v121) & 0x80000000) == 0)
        return;
      goto LABEL_78;
    }
LABEL_77:
    (*(void (**)(uint64_t, cricket::IceMessage *, unsigned __int16 *, uint64_t, const char *, uint64_t))(*(_QWORD *)v34 + 152))(v34, v23, a3, 500, "Server Error", 12);
    cricket::Candidate::~Candidate((void **)&v81.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v121) & 0x80000000) == 0)
      return;
LABEL_78:
    operator delete((void *)__dst);
    return;
  }
  if (!v78)
    goto LABEL_77;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    goto LABEL_75;
  cricket::Candidate::ToStringInternal((cricket::Candidate *)&v81, 1, __p);
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_75;
  operator delete(__p[0].__r_.__value_.__l.__data_);
  cricket::Candidate::~Candidate((void **)&v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v121) < 0)
    goto LABEL_78;
}

uint64_t cricket::P2PTransportChannel::OnRoleConflict(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v2 = a1 + 536;
  result = *(_QWORD *)(a1 + 544);
  for (*(_QWORD *)(a1 + 560) = result; result != v2; result = *(_QWORD *)(a1 + 560))
  {
    v5 = *(void (**)(uint64_t, uint64_t))(result + 16);
    v4 = result + 16;
    *(_QWORD *)(a1 + 560) = *(_QWORD *)(v4 - 8);
    v5(v4, a1);
  }
  return result;
}

uint64_t cricket::P2PTransportChannel::OnSentPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v3 = a1 + 240;
  result = *(_QWORD *)(a1 + 248);
  for (*(_QWORD *)(a1 + 264) = result; result != v3; result = *(_QWORD *)(a1 + 264))
  {
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(result + 16);
    v6 = result + 16;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(v6 - 8);
    v7(v6, a1, a2);
  }
  return result;
}

void cricket::P2PTransportChannel::CreateConnection(cricket::P2PTransportChannel *this, cricket::PortInterface *a2, const cricket::Candidate *a3, cricket::PortInterface *a4)
{
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  std::string::size_type v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  cricket::Connection *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const cricket::Candidate *v41;
  cricket::Candidate *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  const char *v51;
  uint64_t v52;
  std::string __p;
  const char *v54;
  uint64_t v55;
  std::string v56;

  v8 = (_QWORD *)((char *)a3 + 32);
  if (*((char *)a3 + 55) < 0)
  {
    v9 = *((_QWORD *)a3 + 5);
    if (v9 < 0 || ((v8 = (_QWORD *)*v8, v9) ? (v10 = v8 == 0) : (v10 = 0), v10))
    {
      __break(1u);
      return;
    }
  }
  else
  {
    v9 = *((unsigned __int8 *)a3 + 55);
  }
  if ((*(unsigned int (**)(cricket::PortInterface *, _QWORD *, uint64_t))(*(_QWORD *)a2 + 72))(a2, v8, v9))
  {
    if (*((_BYTE *)this + 1616))
    {
      v11 = (*(uint64_t (**)(cricket::PortInterface *))(*(_QWORD *)a2 + 16))(a2);
      v12 = *((_DWORD *)a3 + 52);
      if (v11 != v12)
      {
        v13 = v11;
        if (v11 == 3 || v12 == 3)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
            return;
          cricket::P2PTransportChannel::ToString(&v56, (uint64_t)this);
          if ((v13 - 1) > 2)
          {
            v22 = "host";
            v23 = 4;
          }
          else
          {
            v22 = off_24C0B86D0[v13 - 1];
            v23 = 5;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
          __p.__r_.__value_.__l.__size_ = v23;
          v50 = *((_DWORD *)a3 + 52) - 1;
          if (v50 > 2)
          {
            v51 = "host";
            v52 = 4;
          }
          else
          {
            v51 = off_24C0B86D0[v50];
            v52 = 5;
          }
          v54 = v51;
          v55 = v52;
          rtc::webrtc_logging_impl::Log("\r\n\t\v\t\v", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
          goto LABEL_39;
        }
      }
    }
    v24 = (*(uint64_t (**)(cricket::PortInterface *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a3 + 80);
    if (v24
      && (v25 = v24,
          *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24) + 248) >= *((_DWORD *)a3 + 62)))
    {
      v41 = (const cricket::Candidate *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
      if (!cricket::Candidate::IsEquivalent(a3, v41) && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        v42 = (cricket::Candidate *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
        cricket::Candidate::ToStringInternal(v42, 1, &v56);
        cricket::Candidate::ToStringInternal(a3, 1, &__p);
        rtc::webrtc_logging_impl::Log("\r\t\n\t\n", v43, v44, v45, v46, v47, v48, v49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_39;
      }
    }
    else
    {
      if (a4)
        v26 = a2 != a4;
      else
        v26 = 2;
      if (a4 || !*((_BYTE *)this + 1008))
      {
        v27 = (cricket::Connection *)(*(uint64_t (**)(cricket::PortInterface *, const cricket::Candidate *, uint64_t))(*(_QWORD *)a2 + 96))(a2, a3, v26);
        if (v27)
        {
          cricket::P2PTransportChannel::AddConnection(this, v27, v28, v29, v30, v31, v32, v33);
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          {
            cricket::P2PTransportChannel::ToString(&v56, (uint64_t)this);
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v34, v35, v36, v37, v38, v39, v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_39:
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v56.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
}

void cricket::P2PTransportChannel::AddRemoteCandidate(cricket::P2PTransportChannel *this, std::string *a2)
{
  std::string::size_type *v4;
  std::string::value_type *v5;
  size_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string::pointer data;
  const std::string::value_type *v26;
  std::string::size_type v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::string::size_type size;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  std::string *p_s1;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string::pointer v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type v47;
  std::string *v48;
  unint64_t v49;
  std::string *v50;
  std::string::size_type v51;
  std::string::value_type *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  std::string *v68;
  std::string::size_type v69;
  void **v70;
  void **v71;
  std::string *v72;
  std::string::size_type v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::string::size_type v83;
  std::string v84;
  _QWORD v85[2];
  unsigned __int8 v86;
  int v87;
  char v88;
  std::string __s1;
  std::string v90[2];
  unsigned int v91;
  std::string v92;
  _QWORD v93[2];
  __n128 (*v94)(uint64_t, __n128 *, __n128 *);
  void (*v95)(cricket::P2PTransportChannel **);
  std::string::size_type v96;

  v4 = &a2[6].__r_.__value_.__r.__words[2];
  if (a2[7].__r_.__value_.__s.__data_[15] < 0)
  {
    v6 = a2[7].__r_.__value_.__r.__words[0];
    if (!v6)
      goto LABEL_22;
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_109;
    v5 = (std::string::value_type *)*v4;
    if (!*v4)
      goto LABEL_109;
  }
  else
  {
    v5 = &a2[6].__r_.__value_.__s.__data_[16];
    v6 = a2[7].__r_.__value_.__s.__data_[15];
    if (!a2[7].__r_.__value_.__s.__data_[15])
    {
LABEL_22:
      v15 = a2[10].__r_.__value_.__r.__words[1];
      v8 = (char *)*((_QWORD *)this + 154);
      v7 = (char *)*((_QWORD *)this + 155);
      if (!v15)
      {
        if (v8 == v7)
        {
          v15 = 0;
          goto LABEL_31;
        }
        v14 = v7 - v8;
        goto LABEL_25;
      }
      goto LABEL_26;
    }
  }
  v7 = (char *)*((_QWORD *)this + 155);
  v8 = (char *)*((_QWORD *)this + 154);
  v9 = v7;
  if (v7 != v8)
  {
    v10 = v7 - 56;
    while (1)
    {
      if (v10[23] < 0)
      {
        v11 = *((_QWORD *)v10 + 1);
        if (v11 < 0)
          goto LABEL_109;
        v12 = *(char **)v10;
        v13 = v11 && v12 == 0;
        if (v13)
          goto LABEL_109;
      }
      else
      {
        v11 = v10[23];
        v12 = v10;
      }
      if (v11 == v6 && !memcmp(v5, v12, v6))
        break;
      v13 = v10 == v8;
      v10 -= 56;
      if (v13)
        goto LABEL_21;
    }
    v9 = v10 + 56;
  }
  v14 = v9 - v8;
  if (v14)
  {
LABEL_25:
    v15 = -1227133513 * (v14 >> 3) - 1;
    goto LABEL_26;
  }
LABEL_21:
  v15 = -1227133513 * ((unint64_t)(v7 - v8) >> 3);
LABEL_26:
  if (v8 == v7 || v15 >= -1227133513 * ((unint64_t)(v7 - v8) >> 3) - 1)
  {
LABEL_31:
    cricket::Candidate::Candidate(&v84, a2);
    v91 = v15;
    v23 = *((_QWORD *)this + 154);
    v24 = *((_QWORD *)this + 155);
    if (v23 == v24)
      goto LABEL_71;
    data = (std::string::pointer)a2[7].__r_.__value_.__s.__data_[15];
    if ((char)data < 0)
      data = a2[7].__r_.__value_.__l.__data_;
    if (!data)
    {
      v26 = (const std::string::value_type *)(v24 - 56);
      if (*(char *)(v24 - 33) < 0)
      {
        v27 = *(_QWORD *)(v24 - 48);
        if ((v27 & 0x8000000000000000) != 0)
          goto LABEL_109;
        v26 = *(const std::string::value_type **)v26;
        if (v27)
        {
          if (!v26)
            goto LABEL_109;
        }
      }
      else
      {
        v27 = *(unsigned __int8 *)(v24 - 33);
      }
      std::string::__assign_external(&__s1, v26, v27);
      v23 = *((_QWORD *)this + 154);
      v24 = *((_QWORD *)this + 155);
    }
    if (v23 == v24)
      v28 = 0;
    else
      v28 = (unsigned __int8 *)(v24 - 56);
    v29 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      size = __s1.__r_.__value_.__l.__size_;
    v31 = v28[23];
    v32 = (char)v31;
    if ((v31 & 0x80u) != 0)
      v31 = *((_QWORD *)v28 + 1);
    if (size != v31)
      goto LABEL_60;
    if (v32 >= 0)
      v33 = v28;
    else
      v33 = *(unsigned __int8 **)v28;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__s1.__r_.__value_.__l.__data_, v33, __s1.__r_.__value_.__l.__size_))
      {
LABEL_60:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
        goto LABEL_71;
      }
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      while (p_s1->__r_.__value_.__s.__data_[0] == *v33)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v33;
        if (!--v29)
          goto LABEL_62;
      }
      goto LABEL_60;
    }
LABEL_62:
    v42 = (std::string::pointer)a2[8].__r_.__value_.__s.__data_[15];
    if ((char)v42 < 0)
      v42 = a2[8].__r_.__value_.__l.__data_;
    if (!v42)
    {
      v43 = (const std::string::value_type *)(v28 + 24);
      if ((char)v28[47] < 0)
      {
        v44 = *((_QWORD *)v28 + 4);
        if ((v44 & 0x8000000000000000) != 0)
          goto LABEL_109;
        v43 = *(const std::string::value_type **)v43;
        if (v44)
        {
          if (!v43)
            goto LABEL_109;
        }
      }
      else
      {
        v44 = v28[47];
      }
      std::string::__assign_external(v90, v43, v44);
    }
LABEL_71:
    if (v87 || v88)
      goto LABEL_81;
    v45 = v86;
    if ((v86 & 0x80u) != 0)
      v45 = v85[1];
    if (!v45)
    {
LABEL_81:
      cricket::P2PTransportChannel::FinishAddingRemoteCandidate(this, (const cricket::Candidate *)&v84);
    }
    else if ((*(_BYTE *)(*((_QWORD *)this + 122) + 140) & 3) != 0)
    {
      v46 = *((_QWORD *)this + 123);
      if (!v46)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v53, v54, v55, v56, v57, v58, v59, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
        goto LABEL_82;
      }
      (*(void (**)(std::string::size_type *__return_ptr))(*(_QWORD *)v46 + 32))(&v96);
      v47 = v96;
      v48 = (std::string *)*((_QWORD *)this + 194);
      v49 = *((_QWORD *)this + 195);
      if ((unint64_t)v48 >= v49)
      {
        v60 = *((_QWORD *)this + 193);
        v61 = 0x6FB586FB586FB587 * (((uint64_t)v48 - v60) >> 3);
        if ((unint64_t)(v61 + 1) > 0x94F2094F2094F2)
          goto LABEL_110;
        v62 = 0x6FB586FB586FB587 * ((uint64_t)(v49 - v60) >> 3);
        v63 = 2 * v62;
        if (2 * v62 <= v61 + 1)
          v63 = v61 + 1;
        if (v62 >= 0x4A7904A7904A79)
          v64 = 0x94F2094F2094F2;
        else
          v64 = v63;
        if (v64)
        {
          if (v64 > 0x94F2094F2094F2)
            std::__throw_bad_array_new_length[abi:sn180100]();
          v65 = 440 * v64;
          v66 = (char *)operator new(440 * v64);
          v67 = &v66[v65];
          v68 = cricket::Candidate::Candidate((std::string *)&v66[440 * v61], &v84);
          v69 = v96;
          v96 = 0;
          v68[18].__r_.__value_.__r.__words[0] = v69;
          v52 = &v68[18].__r_.__value_.__s.__data_[8];
          v70 = (void **)*((_QWORD *)this + 194);
          v71 = (void **)*((_QWORD *)this + 193);
          if (v70 == v71)
          {
            *((_QWORD *)this + 193) = v68;
            *((_QWORD *)this + 194) = v52;
            *((_QWORD *)this + 195) = v67;
          }
          else
          {
            do
            {
              v72 = v68;
              v68 = cricket::Candidate::Candidate((std::string *)((char *)v68 - 440), (std::string *)(v70 - 55));
              v73 = (std::string::size_type)*(v70 - 1);
              *(v70 - 1) = 0;
              v72[-1].__r_.__value_.__r.__words[2] = v73;
              v70 -= 55;
            }
            while (v70 != v71);
            v70 = (void **)*((_QWORD *)this + 193);
            v74 = (void **)*((_QWORD *)this + 194);
            *((_QWORD *)this + 193) = v68;
            *((_QWORD *)this + 194) = v52;
            *((_QWORD *)this + 195) = v67;
            while (v74 != v70)
            {
              v75 = (uint64_t)*(v74 - 1);
              *(v74 - 1) = 0;
              if (v75)
                (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
              v74 -= 55;
              cricket::Candidate::~Candidate(v74);
            }
          }
          if (v70)
            operator delete(v70);
          goto LABEL_104;
        }
      }
      else if (v48)
      {
        v50 = cricket::Candidate::Candidate(v48, &v84);
        v51 = v96;
        v96 = 0;
        v50[18].__r_.__value_.__r.__words[0] = v51;
        v52 = &v50[18].__r_.__value_.__s.__data_[8];
LABEL_104:
        *((_QWORD *)this + 194) = v52;
        v93[0] = this;
        v93[1] = v47;
        v94 = absl::internal_any_invocable::LocalManagerTrivial;
        v95 = absl::internal_any_invocable::LocalInvoker<false,void,cricket::P2PTransportChannel::ResolveHostnameCandidate(cricket::Candidate const&)::$_1 &>;
        (*(void (**)(std::string::size_type, _QWORD *, _QWORD *))(*(_QWORD *)v47 + 16))(v47, v85, v93);
        v94(1, (__n128 *)v93, (__n128 *)v93);
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        {
          rtc::SocketAddress::HostAsSensitiveURIString((rtc::SocketAddress *)v85, &v92);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v76, v77, v78, v79, v80, v81, v82, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v92.__r_.__value_.__l.__data_);
        }
        v83 = v96;
        v96 = 0;
        if (v83)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v83 + 8))(v83);
        goto LABEL_82;
      }
LABEL_109:
      __break(1u);
LABEL_110:
      abort();
    }
LABEL_82:
    cricket::Candidate::~Candidate((void **)&v84.__r_.__value_.__l.__data_);
    return;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\n\t", v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
}

uint64_t cricket::P2PTransportChannel::FinishAddingRemoteCandidate(cricket::P2PTransportChannel *this, const cricket::Candidate *a2)
{
  unint64_t v2;
  std::string **v5;
  std::string **v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  cricket::PortInterface *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void **v25;
  uint64_t v26;
  unint64_t v27;
  std::string *v28;
  unint64_t v29;
  std::string *v30;
  std::string::value_type *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  std::string *v40;
  void **v41;
  void **v42;
  std::string *v43;
  void **v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::string __p[18];
  std::string::size_type v54;

  v5 = (std::string **)*((_QWORD *)this + 137);
  v6 = (std::string **)*((_QWORD *)this + 138);
  while (v5 != v6)
  {
    v7 = *v5++;
    cricket::Connection::MaybeUpdatePeerReflexiveCandidate(v7, a2);
  }
  v8 = *((_QWORD *)this + 141);
  if (v8 == *((_QWORD *)this + 140))
  {
    v11 = *((_QWORD *)this + 141);
    v12 = *((_QWORD *)this + 131);
    if (v12 == *((_QWORD *)this + 130))
      goto LABEL_8;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v8 = *((_QWORD *)this + 140);
    do
    {
      if (cricket::Candidate::IsEquivalent((cricket::Candidate *)(v8 + v9), a2))
        return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 192) + 80))(*((_QWORD *)this + 192), 4);
      ++v10;
      v11 = *((_QWORD *)this + 141);
      v8 = *((_QWORD *)this + 140);
      v9 += 440;
    }
    while (v10 < 0x6FB586FB586FB587 * ((v11 - v8) >> 3));
    v12 = *((_QWORD *)this + 131);
    if (v12 == *((_QWORD *)this + 130))
    {
LABEL_8:
      if (v11 == v8)
        goto LABEL_33;
      goto LABEL_13;
    }
  }
  do
  {
    v13 = *(cricket::PortInterface **)(v12 - 8);
    v12 -= 8;
    cricket::P2PTransportChannel::CreateConnection(this, v13, a2, 0);
  }
  while (v12 != *((_QWORD *)this + 130));
  v11 = *((_QWORD *)this + 141);
  v8 = *((_QWORD *)this + 140);
  if (v11 == v8)
    goto LABEL_33;
LABEL_13:
  v14 = 0;
  do
  {
    while (*(_DWORD *)(v8 + 440 * v14 + 248) >= *((_DWORD *)a2 + 62))
    {
      if (++v14 >= 0x6FB586FB586FB587 * ((v11 - v8) >> 3))
        goto LABEL_29;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v15 = *((_QWORD *)this + 140);
      if (0x6FB586FB586FB587 * ((*((_QWORD *)this + 141) - v15) >> 3) <= v14)
        goto LABEL_57;
      v2 = v2 & 0xFFFFFFFF00000000 | 0x2F19;
      rtc::SocketAddress::ToSensitiveString((rtc::SocketAddress *)(v15 + 440 * v14 + 80), (char *)__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    v23 = *((_QWORD *)this + 140) + 440 * v14;
    v24 = (void **)*((_QWORD *)this + 141);
    if (v24 == (void **)v23)
      goto LABEL_57;
    if ((void **)(v23 + 440) == v24)
    {
      v11 = *((_QWORD *)this + 140) + 440 * v14;
    }
    else
    {
      v11 = *((_QWORD *)this + 140) + 440 * v14;
      do
      {
        cricket::Candidate::operator=((std::string *)v23, (std::string *)(v23 + 440));
        *(_QWORD *)(v23 + 432) = *(_QWORD *)(v23 + 872);
        v11 += 440;
        v25 = (void **)(v23 + 880);
        v23 += 440;
      }
      while (v25 != v24);
      v24 = (void **)*((_QWORD *)this + 141);
    }
    while (v24 != (void **)v11)
    {
      v24 -= 55;
      cricket::Candidate::~Candidate(v24);
    }
    *((_QWORD *)this + 141) = v11;
    v8 = *((_QWORD *)this + 140);
  }
  while (v14 < 0x6FB586FB586FB587 * ((v11 - v8) >> 3));
LABEL_29:
  if (v11 == v8)
  {
LABEL_33:
    cricket::Candidate::Candidate(__p, (std::string *)a2);
    v54 = 0;
    v28 = (std::string *)*((_QWORD *)this + 141);
    v29 = *((_QWORD *)this + 142);
    if ((unint64_t)v28 >= v29)
    {
      v32 = *((_QWORD *)this + 140);
      v33 = 0x6FB586FB586FB587 * (((uint64_t)v28 - v32) >> 3);
      if ((unint64_t)(v33 + 1) > 0x94F2094F2094F2)
        goto LABEL_58;
      v34 = 0x6FB586FB586FB587 * ((uint64_t)(v29 - v32) >> 3);
      v35 = 2 * v34;
      if (2 * v34 <= v33 + 1)
        v35 = v33 + 1;
      if (v34 >= 0x4A7904A7904A79)
        v36 = 0x94F2094F2094F2;
      else
        v36 = v35;
      if (v36)
      {
        if (v36 > 0x94F2094F2094F2)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v37 = 440 * v36;
        v38 = (char *)operator new(440 * v36);
        v39 = &v38[v37];
        v40 = cricket::Candidate::Candidate((std::string *)&v38[440 * v33], __p);
        v40[18].__r_.__value_.__r.__words[0] = v54;
        v31 = &v40[18].__r_.__value_.__s.__data_[8];
        v41 = (void **)*((_QWORD *)this + 141);
        v42 = (void **)*((_QWORD *)this + 140);
        if (v41 == v42)
        {
          *((_QWORD *)this + 140) = v40;
          *((_QWORD *)this + 141) = v31;
          *((_QWORD *)this + 142) = v39;
          if (!v41)
            goto LABEL_50;
        }
        else
        {
          do
          {
            v43 = v40;
            v40 = cricket::Candidate::Candidate((std::string *)((char *)v40 - 440), (std::string *)(v41 - 55));
            v43[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v41 - 1);
            v41 -= 55;
          }
          while (v41 != v42);
          v41 = (void **)*((_QWORD *)this + 140);
          v44 = (void **)*((_QWORD *)this + 141);
          *((_QWORD *)this + 140) = v40;
          *((_QWORD *)this + 141) = v31;
          *((_QWORD *)this + 142) = v39;
          while (v44 != v41)
          {
            v44 -= 55;
            cricket::Candidate::~Candidate(v44);
          }
          if (!v41)
            goto LABEL_50;
        }
        operator delete(v41);
LABEL_50:
        *((_QWORD *)this + 141) = v31;
        cricket::Candidate::~Candidate((void **)&__p[0].__r_.__value_.__l.__data_);
        return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 192) + 80))(*((_QWORD *)this + 192), 4);
      }
    }
    else if (v28)
    {
      v30 = cricket::Candidate::Candidate(v28, __p);
      v30[18].__r_.__value_.__r.__words[0] = v54;
      v31 = &v30[18].__r_.__value_.__s.__data_[8];
      goto LABEL_50;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    abort();
  }
  v26 = 0;
  v27 = 0;
  while (!cricket::Candidate::IsEquivalent((cricket::Candidate *)(v8 + v26), a2))
  {
    ++v27;
    v8 = *((_QWORD *)this + 140);
    v26 += 440;
    if (v27 >= 0x6FB586FB586FB587 * ((*((_QWORD *)this + 141) - v8) >> 3))
      goto LABEL_33;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    cricket::Candidate::ToStringInternal(a2, 1, __p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v46, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 192) + 80))(*((_QWORD *)this + 192), 4);
}

void cricket::P2PTransportChannel::RemoveRemoteCandidate(cricket::P2PTransportChannel *this, std::string *a2)
{
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  void **v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  void **p_s1;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  std::string __p;
  std::string v30;
  int v31;
  void *__s1;
  size_t __n;
  unsigned __int8 v34;
  _BYTE v35[56];
  __int16 v36;

  v4 = *((_QWORD *)this + 140);
  v5 = (std::string *)*((_QWORD *)this + 141);
  cricket::Candidate::Candidate(&v30, a2);
  if ((std::string *)v4 == v5)
    goto LABEL_50;
  do
  {
    if (v31 != *(_DWORD *)(v4 + 24))
      goto LABEL_4;
    v6 = v34;
    if ((v34 & 0x80u) == 0)
      v7 = v34;
    else
      v7 = __n;
    v8 = *(unsigned __int8 *)(v4 + 55);
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(v4 + 40);
    if (v7 != v8)
      goto LABEL_4;
    if (v9 >= 0)
      v10 = (unsigned __int8 *)(v4 + 32);
    else
      v10 = *(unsigned __int8 **)(v4 + 32);
    if ((v34 & 0x80) != 0)
    {
      if (memcmp(__s1, v10, __n))
        goto LABEL_4;
LABEL_20:
      if (!rtc::SocketAddress::EqualIPs((rtc::SocketAddress *)v35, (const rtc::SocketAddress *)(v4 + 80))
        || v36 != *(_WORD *)(v4 + 136))
      {
        goto LABEL_4;
      }
      if ((std::string *)v4 != v5)
      {
        v12 = v4 + 440;
        if ((std::string *)(v4 + 440) != v5)
        {
          v13 = (std::string *)v4;
          while (1)
          {
            v14 = v12;
            if (v31 == *(_DWORD *)(v12 + 24))
            {
              v15 = v34;
              if ((v34 & 0x80u) == 0)
                v16 = v34;
              else
                v16 = __n;
              v17 = *(unsigned __int8 *)(v14 + 55);
              v18 = (char)v17;
              if ((v17 & 0x80u) != 0)
                v17 = *(_QWORD *)(v14 + 40);
              if (v16 == v17)
              {
                if (v18 >= 0)
                  v19 = (unsigned __int8 *)(v14 + 32);
                else
                  v19 = *(unsigned __int8 **)(v14 + 32);
                if ((v34 & 0x80) != 0)
                {
                  if (!memcmp(__s1, v19, __n))
                  {
LABEL_42:
                    if (rtc::SocketAddress::EqualIPs((rtc::SocketAddress *)v35, (const rtc::SocketAddress *)(v14 + 80))
                      && v36 == *(_WORD *)(v14 + 136))
                    {
                      goto LABEL_45;
                    }
                  }
                }
                else
                {
                  if (!v34)
                    goto LABEL_42;
                  p_s1 = &__s1;
                  while (*(unsigned __int8 *)p_s1 == *v19)
                  {
                    p_s1 = (void **)((char *)p_s1 + 1);
                    ++v19;
                    if (!--v15)
                      goto LABEL_42;
                  }
                }
              }
            }
            cricket::Candidate::operator=(v13, (std::string *)v14);
            v13[18].__r_.__value_.__r.__words[0] = *(_QWORD *)(v4 + 872);
            v13 = (std::string *)((char *)v13 + 440);
LABEL_45:
            v12 = v14 + 440;
            v4 = v14;
            if ((std::string *)(v14 + 440) == v5)
              goto LABEL_48;
          }
        }
      }
LABEL_50:
      v13 = (std::string *)v4;
      cricket::Candidate::~Candidate((void **)&v30.__r_.__value_.__l.__data_);
      if (v4 == *((_QWORD *)this + 141))
        return;
      goto LABEL_51;
    }
    if (!v34)
      goto LABEL_20;
    v11 = &__s1;
    while (*(unsigned __int8 *)v11 == *v10)
    {
      v11 = (void **)((char *)v11 + 1);
      ++v10;
      if (!--v6)
        goto LABEL_20;
    }
LABEL_4:
    v4 += 440;
  }
  while ((std::string *)v4 != v5);
  v13 = v5;
LABEL_48:
  cricket::Candidate::~Candidate((void **)&v30.__r_.__value_.__l.__data_);
  if (v13 != *((std::string **)this + 141))
  {
LABEL_51:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    {
      cricket::Candidate::ToStringInternal((cricket::Candidate *)a2, 1, &__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v28 = (void **)*((_QWORD *)this + 141);
    if (v28 < (void **)v13)
    {
      __break(1u);
    }
    else if (v13 != (std::string *)v28)
    {
      while (v28 != (void **)v13)
      {
        v28 -= 55;
        cricket::Candidate::~Candidate(v28);
      }
      *((_QWORD *)this + 141) = v13;
    }
  }
}

void cricket::P2PTransportChannel::RemoveAllRemoteCandidates(cricket::P2PTransportChannel *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 141);
  v3 = *((_QWORD *)this + 140);
  while (v2 != v3)
    cricket::Candidate::~Candidate((void **)(v2 - 440));
  *((_QWORD *)this + 141) = v3;
}

uint64_t cricket::P2PTransportChannel::SetOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t **v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if ((_DWORD)a2 == 5 && *(_BYTE *)(a1 + 1668))
    a3 = *(unsigned int *)(a1 + 1664);
  v7 = (uint64_t **)(a1 + 1160);
  v8 = *(uint64_t **)(a1 + 1160);
  if (v8)
  {
    v9 = a1 + 1160;
    v10 = *(_QWORD *)(a1 + 1160);
    do
    {
      v11 = *(_DWORD *)(v10 + 28);
      v12 = v11 < (int)a2;
      if (v11 >= (int)a2)
        v13 = (uint64_t *)v10;
      else
        v13 = (uint64_t *)(v10 + 8);
      if (!v12)
        v9 = v10;
      v10 = *v13;
    }
    while (*v13);
    if ((uint64_t **)v9 == v7 || *(_DWORD *)(v9 + 28) > (int)a2)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v8;
          v15 = *((_DWORD *)v8 + 7);
          if (v15 <= (int)a2)
            break;
          v8 = *v14;
          v7 = v14;
          if (!*v14)
            goto LABEL_22;
        }
        if (v15 >= (int)a2)
          break;
        v8 = v14[1];
        if (!v8)
        {
          v7 = v14 + 1;
          goto LABEL_22;
        }
      }
    }
    else
    {
      if (*(_DWORD *)(v9 + 32) == (_DWORD)a3)
        return 0;
      *(_DWORD *)(v9 + 32) = a3;
    }
  }
  else
  {
    v14 = (uint64_t **)(a1 + 1160);
LABEL_22:
    v16 = operator new(0x28uLL);
    v16[7] = a2;
    v16[8] = a3;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = v14;
    *v7 = (uint64_t *)v16;
    v17 = **(_QWORD **)(a1 + 1152);
    if (v17)
    {
      *(_QWORD *)(a1 + 1152) = v17;
      v18 = *v7;
    }
    else
    {
      v18 = (uint64_t *)v16;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1160), v18);
    ++*(_QWORD *)(a1 + 1168);
  }
  v19 = *(_QWORD **)(a1 + 1040);
  for (i = *(_QWORD **)(a1 + 1048); v19 != i; ++v19)
  {
    v21 = *v19;
    if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v19 + 104))(*v19, a2, a3) & 0x80000000) != 0
      && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      v3 = v3 & 0xFFFFFFFF00000000 | 0x3062;
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 120))(v21);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    }
  }
  return 0;
}

uint64_t cricket::P2PTransportChannel::GetOption(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v3 = *(_QWORD *)(a1 + 1160);
  if (!v3)
    return 0;
  v4 = a1 + 1160;
  do
  {
    v5 = *(_DWORD *)(v3 + 28);
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 1160 || *(_DWORD *)(v4 + 28) > a2)
    return 0;
  *a3 = *(_DWORD *)(v4 + 32);
  return 1;
}

uint64_t cricket::P2PTransportChannel::GetError(cricket::P2PTransportChannel *this)
{
  return *((unsigned int *)this + 253);
}

uint64_t cricket::P2PTransportChannel::SendPacket(cricket::P2PTransportChannel *this, const char *a2, uint64_t a3, const rtc::PacketOptions *a4, int a5)
{
  int v6;
  _DWORD *v7;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v22;
  int v23;
  void *__p;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int16 v31;

  if (a5)
  {
    v6 = 22;
  }
  else
  {
    v7 = (_DWORD *)*((_QWORD *)this + 136);
    if (v7)
    {
      v11 = v7[582];
      if (v11 < 2
        || v11 == 2
        && *((_BYTE *)this + 1340)
        && *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 16))(*((_QWORD *)this + 136)) + 208) == 3
        && (*(_DWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7) + 208) == 3
         || *(_DWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7) + 208) == 2))
      {
        ++*((_QWORD *)this + 198);
        *((_DWORD *)this + 358) = *((_QWORD *)a4 + 1);
        v22 = *(_OWORD *)a4;
        v23 = *((_DWORD *)a4 + 4);
        v25 = 0;
        v26 = 0;
        __p = 0;
        v13 = (_BYTE *)*((_QWORD *)a4 + 3);
        v12 = (_BYTE *)*((_QWORD *)a4 + 4);
        v14 = v12 - v13;
        if (v12 != v13)
        {
          if ((v14 & 0x8000000000000000) != 0)
            abort();
          v15 = (char *)operator new(v12 - v13);
          v16 = &v15[v14];
          __p = v15;
          v26 = &v15[v14];
          memcpy(v15, v13, v14);
          v25 = v16;
        }
        v17 = *((_OWORD *)a4 + 4);
        v27 = *((_OWORD *)a4 + 3);
        v28 = v17;
        v30 = *((_QWORD *)a4 + 12);
        v29 = *((_OWORD *)a4 + 5);
        v31 = *((_WORD *)a4 + 52);
        DWORD1(v28) = 1;
        v18 = (*(uint64_t (**)(_QWORD, const char *, uint64_t, __int128 *))(**((_QWORD **)this + 136) + 56))(*((_QWORD *)this + 136), a2, a3, &v22);
        v19 = v18;
        if ((int)v18 <= 0)
        {
          *((_DWORD *)this + 253) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 136) + 64))(*((_QWORD *)this + 136));
          v20 = (char *)__p;
          if (!__p)
            return v19;
        }
        else
        {
          *((_QWORD *)this + 196) += v18;
          v20 = (char *)__p;
          if (!__p)
            return v19;
        }
        v25 = v20;
        operator delete(v20);
        return v19;
      }
    }
    v6 = 57;
  }
  *((_DWORD *)this + 253) = v6;
  return 0xFFFFFFFFLL;
}

uint64_t cricket::P2PTransportChannel::GetStats(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  uint64_t v8;
  cricket::Connection **v9;
  cricket::Connection **v10;
  cricket::Connection *v11;
  __n128 v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  _BOOL4 v22;
  char *v23;
  int v24;
  int v25;
  int v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  void **v68;
  std::string *v69;
  char v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  const std::string::value_type *v74;
  size_t v75;
  int v76;
  _BYTE *v77;
  int v78;
  cricket::Connection **v80;
  std::string v82[18];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  std::string v91[8];
  int v92;
  std::string v93[3];
  _QWORD *v94;
  unint64_t v95;
  unsigned __int8 v96;
  int v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _OWORD v101[2];

  v4 = *a2;
  v3 = a2[1];
  if (v3 != *a2)
  {
    do
      cricket::Candidate::~Candidate((void **)(v3 - 464));
    while (v3 != v4);
  }
  a2[1] = v4;
  v5 = a2[3];
  for (i = a2[4]; i != v5; i -= 1064)
  {
    cricket::Candidate::~Candidate((void **)(i - 512));
    cricket::Candidate::~Candidate((void **)(i - 944));
  }
  a2[4] = v5;
  v7 = a1;
  v8 = a1[128];
  if (a1[127] != v8)
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v8 - 8) + 80))(*(_QWORD *)(v8 - 8), a2);
  v9 = (cricket::Connection **)a1[137];
  v10 = (cricket::Connection **)a1[138];
  if (v9 != v10)
  {
    v80 = (cricket::Connection **)a1[138];
    do
    {
      v11 = *v9;
      v12 = cricket::Connection::stats(*v9, (uint64_t)&v83);
      v13 = (_DWORD *)v7[122];
      if ((v92 | 2) == 2)
      {
        v14 = (*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)v13 + 72))(v7[122], v12);
        if ((~v13[29] & 0xC00) == 0)
          goto LABEL_17;
      }
      else
      {
        v14 = 0;
        if ((~v13[29] & 0xC00) == 0)
          goto LABEL_17;
      }
      if ((v13[35] & 1) == 0)
      {
LABEL_17:
        v15 = 0;
        goto LABEL_19;
      }
      v15 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 72))(v13) ^ 1;
LABEL_19:
      v16 = v13[35];
      v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 72))(v13);
      if (v92 == 1 && v15 == 0)
      {
        v19 = 1;
      }
      else if (v92 != 3 || (v16 & 2) != 0)
      {
        if (v92 == 2)
          v19 = v17;
        else
          v19 = 0;
      }
      else
      {
        v19 = 1;
      }
      cricket::Candidate::ToSanitizedCopy(v91, v14, v19, (uint64_t)v82);
      cricket::Candidate::operator=(v91, v82);
      cricket::Candidate::~Candidate((void **)&v82[0].__r_.__value_.__l.__data_);
      if ((char)v96 < 0)
      {
        v20 = v95;
        if ((v95 & 0x8000000000000000) != 0)
          goto LABEL_98;
        v21 = v94;
        if (v95)
        {
          if (!v94)
            goto LABEL_98;
        }
      }
      else
      {
        v20 = v96;
        v21 = &v94;
      }
      if (v20 >= 6)
      {
        v23 = (char *)v21 + v20;
        v24 = *(_DWORD *)(v23 - 6);
        v25 = *((unsigned __int16 *)v23 - 1);
        v22 = v24 == *(_DWORD *)".local" && v25 == *(unsigned __int16 *)"al";
      }
      else
      {
        v22 = 0;
      }
      v27 = v97 == 2 || v22;
      cricket::Candidate::ToSanitizedCopy(v93, v27, 0, (uint64_t)v82);
      cricket::Candidate::operator=(v93, v82);
      cricket::Candidate::~Candidate((void **)&v82[0].__r_.__value_.__l.__data_);
      LOBYTE(v83) = v7[136] == (_QWORD)v11;
      v29 = a2[4];
      v28 = a2[5];
      if (v29 >= v28)
      {
        v40 = a2[3];
        v41 = 0x133F84CFE133F84DLL * ((uint64_t)(v29 - v40) >> 3);
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) > 0x3D980F6603D980)
          goto LABEL_99;
        v43 = 0x133F84CFE133F84DLL * ((uint64_t)(v28 - v40) >> 3);
        if (2 * v43 > v42)
          v42 = 2 * v43;
        if (v43 >= 0x1ECC07B301ECC0)
          v44 = 0x3D980F6603D980;
        else
          v44 = v42;
        if (!v44)
        {
LABEL_98:
          __break(1u);
LABEL_99:
          abort();
        }
        if (v44 > 0x3D980F6603D980)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v45 = 1064 * v44;
        v46 = (char *)operator new(1064 * v44);
        v47 = &v46[v45];
        v48 = v88;
        v49 = &v46[1064 * v41];
        *((_OWORD *)v49 + 4) = v87;
        *((_OWORD *)v49 + 5) = v48;
        *((_OWORD *)v49 + 6) = v89;
        *((_QWORD *)v49 + 14) = v90;
        v50 = v84;
        *(_OWORD *)v49 = v83;
        *((_OWORD *)v49 + 1) = v50;
        v51 = v86;
        *((_OWORD *)v49 + 2) = v85;
        *((_OWORD *)v49 + 3) = v51;
        cricket::Candidate::Candidate((std::string *)v49 + 5, v91);
        cricket::Candidate::Candidate((std::string *)v49 + 23, v93);
        v52 = v101[0];
        *(_OWORD *)(v49 + 1016) = v100;
        *(_OWORD *)(v49 + 1032) = v52;
        *(_OWORD *)(v49 + 1041) = *(_OWORD *)((char *)v101 + 9);
        v53 = v99;
        *(_OWORD *)(v49 + 984) = v98;
        *(_OWORD *)(v49 + 1000) = v53;
        v39 = v49 + 1064;
        v54 = (char *)a2[3];
        v55 = (char *)a2[4];
        if (v55 != v54)
        {
          v56 = 0;
          do
          {
            v57 = &v49[v56];
            v58 = (uint64_t)&v49[v56 - 1064];
            v59 = *(_OWORD *)&v55[v56 - 1064];
            v60 = *(_OWORD *)&v55[v56 - 1048];
            v61 = *(_OWORD *)&v55[v56 - 1016];
            *(_OWORD *)(v58 + 32) = *(_OWORD *)&v55[v56 - 1032];
            *(_OWORD *)(v58 + 48) = v61;
            *(_OWORD *)v58 = v59;
            *(_OWORD *)(v58 + 16) = v60;
            v62 = *(_OWORD *)&v55[v56 - 1000];
            v63 = *(_OWORD *)&v55[v56 - 984];
            v64 = *(_OWORD *)&v55[v56 - 968];
            *(_QWORD *)(v58 + 112) = *(_QWORD *)&v55[v56 - 952];
            *(_OWORD *)(v58 + 80) = v63;
            *(_OWORD *)(v58 + 96) = v64;
            *(_OWORD *)(v58 + 64) = v62;
            cricket::Candidate::Candidate((std::string *)&v49[v56 - 944], (std::string *)&v55[v56 - 944]);
            cricket::Candidate::Candidate((std::string *)&v49[v56 - 512], (std::string *)&v55[v56 - 512]);
            *((_OWORD *)v57 - 5) = *(_OWORD *)&v55[v56 - 80];
            v65 = *(_OWORD *)&v55[v56 - 64];
            v66 = *(_OWORD *)&v55[v56 - 48];
            v67 = *(_OWORD *)&v55[v56 - 32];
            *(_OWORD *)(v57 - 23) = *(_OWORD *)&v55[v56 - 23];
            *((_OWORD *)v57 - 3) = v66;
            *((_OWORD *)v57 - 2) = v67;
            *((_OWORD *)v57 - 4) = v65;
            v56 -= 1064;
          }
          while (&v55[v56] != v54);
          v55 = (char *)a2[3];
          v68 = (void **)a2[4];
          a2[3] = (uint64_t)&v49[v56];
          a2[4] = (uint64_t)v39;
          a2[5] = (uint64_t)v47;
          if (v68 == (void **)v55)
          {
            v10 = v80;
            v7 = a1;
            if (!v55)
              goto LABEL_11;
          }
          else
          {
            v7 = a1;
            do
            {
              cricket::Candidate::~Candidate(v68 - 64);
              cricket::Candidate::~Candidate(v68 - 118);
              v68 -= 133;
            }
            while (v68 != (void **)v55);
            v10 = v80;
            if (!v55)
              goto LABEL_11;
          }
LABEL_10:
          operator delete(v55);
          goto LABEL_11;
        }
        a2[3] = (uint64_t)v49;
        a2[4] = (uint64_t)v39;
        a2[5] = (uint64_t)v47;
        if (v55)
          goto LABEL_10;
      }
      else
      {
        if (!v29)
          goto LABEL_98;
        v30 = v83;
        v31 = v84;
        v32 = v86;
        *(_OWORD *)(v29 + 32) = v85;
        *(_OWORD *)(v29 + 48) = v32;
        *(_OWORD *)v29 = v30;
        *(_OWORD *)(v29 + 16) = v31;
        v33 = v87;
        v34 = v88;
        v35 = v89;
        *(_QWORD *)(v29 + 112) = v90;
        *(_OWORD *)(v29 + 80) = v34;
        *(_OWORD *)(v29 + 96) = v35;
        *(_OWORD *)(v29 + 64) = v33;
        cricket::Candidate::Candidate((std::string *)(v29 + 120), v91);
        cricket::Candidate::Candidate((std::string *)(v29 + 552), v93);
        *(_OWORD *)(v29 + 984) = v98;
        v36 = v99;
        v37 = v100;
        v38 = v101[0];
        *(_OWORD *)(v29 + 1041) = *(_OWORD *)((char *)v101 + 9);
        *(_OWORD *)(v29 + 1016) = v37;
        *(_OWORD *)(v29 + 1032) = v38;
        *(_OWORD *)(v29 + 1000) = v36;
        v39 = (char *)(v29 + 1064);
      }
LABEL_11:
      a2[4] = (uint64_t)v39;
      cricket::Candidate::~Candidate((void **)&v93[0].__r_.__value_.__l.__data_);
      cricket::Candidate::~Candidate((void **)&v91[0].__r_.__value_.__l.__data_);
      ++v9;
    }
    while (v9 != v10);
  }
  *((_DWORD *)a2 + 12) = *((_DWORD *)v7 + 400);
  *(_OWORD *)(a2 + 7) = *((_OWORD *)v7 + 98);
  *(_OWORD *)(a2 + 9) = *((_OWORD *)v7 + 99);
  *((_DWORD *)a2 + 22) = (*(uint64_t (**)(_QWORD *))(*v7 + 104))(v7);
  v69 = (std::string *)(a2 + 12);
  if (a2 + 12 == v7 + 147)
    goto LABEL_81;
  v70 = *((_BYTE *)v7 + 1199);
  if ((*((char *)a2 + 119) & 0x80000000) == 0)
  {
    if ((*((_BYTE *)v7 + 1199) & 0x80) == 0)
    {
      v71 = *(_OWORD *)(v7 + 147);
      a2[14] = v7[149];
      *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v71;
      v72 = v7[137];
      v73 = v7[138];
      if (v72 != v73)
        goto LABEL_82;
      goto LABEL_84;
    }
    std::string::__assign_no_alias<true>(v69, (char *)v7[147], v7[148]);
LABEL_81:
    v72 = v7[137];
    v73 = v7[138];
    if (v72 != v73)
      goto LABEL_82;
LABEL_84:
    if (*((_BYTE *)v7 + 1144))
    {
      v76 = 4;
      goto LABEL_97;
    }
    v78 = 0;
    v77 = v7 + 143;
    if (((*(uint64_t (**)(_QWORD *))(*v7 + 24))(v7) & 1) == 0)
      goto LABEL_89;
    goto LABEL_91;
  }
  if (v70 >= 0)
    v74 = (const std::string::value_type *)(v7 + 147);
  else
    v74 = (const std::string::value_type *)v7[147];
  if (v70 >= 0)
    v75 = *((unsigned __int8 *)v7 + 1199);
  else
    v75 = v7[148];
  std::string::__assign_no_alias<false>(v69, v74, v75);
  v72 = v7[137];
  v73 = v7[138];
  if (v72 == v73)
    goto LABEL_84;
LABEL_82:
  while (*(_DWORD *)(*(_QWORD *)v72 + 2328) == 3)
  {
    v72 += 8;
    if (v72 == v73)
      goto LABEL_84;
  }
  v77 = v7 + 143;
  v78 = 1;
  if (((*(uint64_t (**)(_QWORD *))(*v7 + 24))(v7) & 1) == 0)
  {
LABEL_89:
    if (*((_BYTE *)v7 + 1442))
    {
      v76 = 5;
      goto LABEL_97;
    }
  }
LABEL_91:
  if (((*v77 == 0) & ~v78) != 0)
  {
    v76 = 0;
  }
  else if (v78 && !(*(unsigned int (**)(_QWORD *))(*v7 + 24))(v7))
  {
    v76 = 1;
  }
  else
  {
    v76 = 2;
  }
LABEL_97:
  *((_DWORD *)a2 + 30) = v76;
  return 1;
}

__n128 cricket::P2PTransportChannel::network_route@<Q0>(cricket::P2PTransportChannel *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)((char *)this + 1444);
  v3 = *(_OWORD *)((char *)this + 1460);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)((char *)this + 1476);
  return result;
}

void cricket::P2PTransportChannel::UpdateConnectionStates(cricket::P2PTransportChannel *this)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  if (rtc::g_clock)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    v3 = (_BYTE *)*((_QWORD *)this + 137);
    v4 = (_BYTE *)*((_QWORD *)this + 138);
    v5 = v4 - v3;
    if (v4 == v3)
      return;
    goto LABEL_3;
  }
  if (!dword_253EA791C)
    mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
  v2 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
     / dword_253EA791C;
  v3 = (_BYTE *)*((_QWORD *)this + 137);
  v10 = (_BYTE *)*((_QWORD *)this + 138);
  v5 = v10 - v3;
  if (v10 != v3)
  {
LABEL_3:
    if (v5 < 0)
      abort();
    v6 = v2 / 1000000;
    v7 = (char *)operator new(v5);
    memmove(v7, v3, v5);
    v8 = 0;
    v9 = 8 * (v5 >> 3);
    do
    {
      cricket::Connection::UpdateState(*(cricket::Connection **)&v7[v8], v6);
      v8 += 8;
    }
    while (v9 != v8);
    operator delete(v7);
  }
}

void `non-virtual thunk to'cricket::P2PTransportChannel::UpdateConnectionStates(cricket::P2PTransportChannel *this)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  if (rtc::g_clock)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    v4 = (_BYTE *)*((_QWORD *)this + 20);
    v3 = (_BYTE *)*((_QWORD *)this + 21);
    v5 = v3 - v4;
    if (v3 == v4)
      return;
    goto LABEL_3;
  }
  if (!dword_253EA791C)
    mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
  v2 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
     / dword_253EA791C;
  v4 = (_BYTE *)*((_QWORD *)this + 20);
  v10 = (_BYTE *)*((_QWORD *)this + 21);
  v5 = v10 - v4;
  if (v10 != v4)
  {
LABEL_3:
    if (v5 < 0)
      abort();
    v6 = v2 / 1000000;
    v7 = (char *)operator new(v5);
    memmove(v7, v4, v5);
    v8 = 0;
    v9 = 8 * (v5 >> 3);
    do
    {
      cricket::Connection::UpdateState(*(cricket::Connection **)&v7[v8], v6);
      v8 += 8;
    }
    while (v9 != v8);
    operator delete(v7);
  }
}

uint64_t cricket::P2PTransportChannel::OnStartedPinging(webrtc::BasicRegatheringController **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string __p;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    return webrtc::BasicRegatheringController::ScheduleRecurringRegatheringOnFailedNetworks(this[160]);
  cricket::P2PTransportChannel::ToString(&__p, (uint64_t)this);
  rtc::webrtc_logging_impl::Log("\r\n\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return webrtc::BasicRegatheringController::ScheduleRecurringRegatheringOnFailedNetworks(this[160]);
  operator delete(__p.__r_.__value_.__l.__data_);
  return webrtc::BasicRegatheringController::ScheduleRecurringRegatheringOnFailedNetworks(this[160]);
}

uint64_t `non-virtual thunk to'cricket::P2PTransportChannel::OnStartedPinging(webrtc::BasicRegatheringController **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string __p;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    return webrtc::BasicRegatheringController::ScheduleRecurringRegatheringOnFailedNetworks(this[43]);
  cricket::P2PTransportChannel::ToString(&__p, (uint64_t)(this - 117));
  rtc::webrtc_logging_impl::Log("\r\n\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return webrtc::BasicRegatheringController::ScheduleRecurringRegatheringOnFailedNetworks(this[43]);
  operator delete(__p.__r_.__value_.__l.__data_);
  return webrtc::BasicRegatheringController::ScheduleRecurringRegatheringOnFailedNetworks(this[43]);
}

void cricket::P2PTransportChannel::UpdateState(cricket::P2PTransportChannel *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 137);
  v3 = *((_QWORD *)this + 138);
  if (v2 == v3)
  {
LABEL_4:
    cricket::P2PTransportChannel::HandleAllTimedOut(this);
  }
  else
  {
    while (*(_DWORD *)(*(_QWORD *)v2 + 2328) == 3)
    {
      v2 += 8;
      if (v2 == v3)
        goto LABEL_4;
    }
  }
  cricket::P2PTransportChannel::UpdateTransportState(this);
}

void cricket::P2PTransportChannel::HandleAllTimedOut(cricket::P2PTransportChannel *this)
{
  _BYTE *v1;
  _BYTE *v2;
  int64_t v3;
  char *v5;
  char v6;
  cricket::Connection **v7;
  cricket::Connection *v8;
  uint64_t *v9;
  uint64_t *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (_BYTE *)*((_QWORD *)this + 137);
  v2 = (_BYTE *)*((_QWORD *)this + 138);
  v3 = v2 - v1;
  if (v2 == v1)
    return;
  if (v3 < 0)
    abort();
  v5 = (char *)operator new(v2 - v1);
  memmove(v5, v1, v3);
  v6 = 0;
  v7 = (cricket::Connection **)v5;
  do
  {
    v8 = *v7;
    if (*((cricket::Connection **)this + 136) != *v7)
    {
      v9 = (uint64_t *)((char *)v8 + 80);
      v10 = (uint64_t *)*((_QWORD *)v8 + 11);
      if (v10 != (uint64_t *)((char *)v8 + 80))
        goto LABEL_9;
LABEL_11:
      cricket::P2PTransportChannel::RemoveConnection(this, v8);
      v11 = (_BYTE *)*((_QWORD *)v8 + 31);
      if (!v11)
        goto LABEL_4;
LABEL_16:
      if (*v11)
      {
        v15 = *((_QWORD *)v8 + 32);
        if (v15)
          (*(void (**)(uint64_t, cricket::Connection *))(*(_QWORD *)v15 + 192))(v15, v8);
      }
      goto LABEL_4;
    }
    *((_QWORD *)this + 136) = 0;
    v6 = 1;
    v9 = (uint64_t *)((char *)v8 + 80);
    v10 = (uint64_t *)*((_QWORD *)v8 + 11);
    if (v10 == (uint64_t *)((char *)v8 + 80))
      goto LABEL_11;
LABEL_9:
    while ((cricket::P2PTransportChannel *)v10[3] != this)
    {
      v10 = (uint64_t *)v10[1];
      if (v10 == v9)
        goto LABEL_11;
    }
    v12 = *v10;
    v13 = v10[1];
    *(_QWORD *)(v12 + 8) = v13;
    *(_QWORD *)v10[1] = v12;
    v14 = (uint64_t *)*((_QWORD *)v8 + 13);
    --*((_QWORD *)v8 + 12);
    operator delete(v10);
    if (v14 == v10)
      *((_QWORD *)v8 + 13) = v13;
    (*((void (**)(cricket::P2PTransportChannel *, _QWORD *))this + 2))(this, (_QWORD *)v8 + 8);
    cricket::P2PTransportChannel::RemoveConnection(this, v8);
    v11 = (_BYTE *)*((_QWORD *)v8 + 31);
    if (v11)
      goto LABEL_16;
LABEL_4:
    ++v7;
  }
  while (v7 != (cricket::Connection **)&v5[8 * (v3 >> 3)]);
  if ((v6 & 1) != 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    cricket::P2PTransportChannel::SwitchSelectedConnectionInternal((uint64_t)this, 0, (char *)9);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 192) + 72))(*((_QWORD *)this + 192), 9);
  }
  operator delete(v5);
}

void cricket::P2PTransportChannel::UpdateTransportState(cricket::P2PTransportChannel *this)
{
  _DWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  void (*v33)(_QWORD *, cricket::P2PTransportChannel *);
  char *v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  rtc::Network *v38;
  std::string::size_type size;
  std::string::size_type *p_size;
  std::string::size_type *v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  void (*v70)(_QWORD *, cricket::P2PTransportChannel *);
  _QWORD *v71;
  _QWORD *v72;
  void (*v73)(_QWORD *, cricket::P2PTransportChannel *);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  void (*v83)(_QWORD *, cricket::P2PTransportChannel *);
  _QWORD *v84;
  _QWORD *v85;
  void (*v86)(_QWORD *, cricket::P2PTransportChannel *);
  uint64_t *v87;
  std::string __p;
  std::string v89;
  std::string v90;

  v2 = (_DWORD *)*((_QWORD *)this + 136);
  if (!v2)
  {
LABEL_12:
    if (*((unsigned __int8 *)this + 1441) == (_DWORD)v2)
      goto LABEL_13;
    goto LABEL_128;
  }
  v3 = v2[582];
  if (!v3)
  {
    LODWORD(v2) = 1;
    goto LABEL_12;
  }
  if (v3 == 2
    && *((_BYTE *)this + 1340)
    && *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 16))(*((_QWORD *)this + 136)) + 208) == 3)
  {
    if (*(_DWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2) + 208) == 3)
    {
      LODWORD(v2) = 1;
      if (*((_BYTE *)this + 1441) == 1)
        goto LABEL_13;
    }
    else
    {
      LODWORD(v2) = *(_DWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2) + 208) == 2;
      if (*((unsigned __int8 *)this + 1441) == (_DWORD)v2)
        goto LABEL_13;
    }
  }
  else
  {
    LODWORD(v2) = 0;
    if (!*((_BYTE *)this + 1441))
      goto LABEL_13;
  }
LABEL_128:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
  {
    cricket::P2PTransportChannel::ToString(&v90, (uint64_t)this);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v74, v75, v76, v77, v78, v79, v80, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)this + 1441) = (_BYTE)v2;
  if ((_DWORD)v2)
  {
    *((_BYTE *)this + 1442) = 1;
    v81 = (_QWORD *)*((_QWORD *)this + 17);
    for (*((_QWORD *)this + 19) = v81; v81 != (_QWORD *)((char *)this + 128); v81 = (_QWORD *)*((_QWORD *)this + 19))
    {
      v83 = (void (*)(_QWORD *, cricket::P2PTransportChannel *))v81[2];
      v82 = v81 + 2;
      *((_QWORD *)this + 19) = *(v82 - 1);
      v83(v82, this);
    }
  }
  v84 = (_QWORD *)*((_QWORD *)this + 10);
  for (*((_QWORD *)this + 12) = v84; v84 != (_QWORD *)((char *)this + 72); v84 = (_QWORD *)*((_QWORD *)this + 12))
  {
    v86 = (void (*)(_QWORD *, cricket::P2PTransportChannel *))v84[2];
    v85 = v84 + 2;
    *((_QWORD *)this + 12) = *(v85 - 1);
    v86(v85, this);
  }
LABEL_13:
  v4 = *((_QWORD *)this + 137);
  v5 = *((_QWORD *)this + 138);
  if (v4 == v5)
  {
    LOBYTE(v7) = 0;
    if (!*((_BYTE *)this + 1440))
      goto LABEL_23;
  }
  else
  {
    v6 = v4 + 8;
    do
    {
      v7 = *(_BYTE *)(*(_QWORD *)(v6 - 8) + 2332) != 0;
      if (*(_BYTE *)(*(_QWORD *)(v6 - 8) + 2332))
        v8 = 1;
      else
        v8 = v6 == v5;
      v6 += 8;
    }
    while (!v8);
    if (*((unsigned __int8 *)this + 1440) == v7)
      goto LABEL_23;
  }
  *((_BYTE *)this + 1440) = v7;
  v31 = (_QWORD *)*((_QWORD *)this + 24);
  for (*((_QWORD *)this + 26) = v31; v31 != (_QWORD *)((char *)this + 184); v31 = (_QWORD *)*((_QWORD *)this + 26))
  {
    v33 = (void (*)(_QWORD *, cricket::P2PTransportChannel *))v31[2];
    v32 = v31 + 2;
    *((_QWORD *)this + 26) = *(v32 - 1);
    v33(v32, this);
  }
LABEL_23:
  if (!*((_BYTE *)this + 1144))
  {
    v48 = 0;
    v49 = *((_QWORD *)this + 137);
    v50 = *((_QWORD *)this + 138);
    if (v49 != v50)
      goto LABEL_97;
LABEL_99:
    if (*((_BYTE *)this + 1144))
    {
      v59 = 4;
      if (*((_DWORD *)this + 325) == v48)
        goto LABEL_116;
      goto LABEL_118;
    }
    v60 = 0;
    if (((*(uint64_t (**)(cricket::P2PTransportChannel *))(*(_QWORD *)this + 24))(this) & 1) != 0)
      goto LABEL_108;
    goto LABEL_105;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 137);
  v10 = (uint64_t *)*((_QWORD *)this + 138);
  if (v9 == v10)
  {
    v48 = 3;
    v49 = *((_QWORD *)this + 137);
    v50 = *((_QWORD *)this + 138);
    if (v49 != v50)
      goto LABEL_97;
    goto LABEL_99;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v87 = (uint64_t *)*((_QWORD *)this + 138);
  do
  {
    v14 = *v9;
    if (*(_DWORD *)(*v9 + 2328) == 3)
      goto LABEL_27;
    if (v12 >= v13)
    {
      v15 = (v12 - v11) >> 3;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        goto LABEL_138;
      if ((v13 - v11) >> 2 > v16)
        v16 = (v13 - v11) >> 2;
      if ((unint64_t)(v13 - v11) >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v16)
      {
LABEL_137:
        __break(1u);
LABEL_138:
        abort();
      }
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v17 = 8 * v16;
      v18 = operator new(8 * v16);
      v19 = &v18[8 * v15];
      *(_QWORD *)v19 = v14;
      v20 = v19 + 8;
      if (v12 == v11)
        goto LABEL_43;
      v21 = v12 - v11 - 8;
      if (v21 >= 0x168)
      {
        v24 = (v12 - 8 - v11) & 0xFFFFFFFFFFFFFFF8;
        if (&v18[v12 - v11 - 8 - v24] > &v18[v12 - v11 - 8])
        {
          v22 = v12;
        }
        else if (&v12[-v24 - 8] > v12 - 8)
        {
          v22 = v12;
        }
        else if ((unint64_t)(v11 - v18) >= 0x20)
        {
          v25 = (v21 >> 3) + 1;
          v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = &v12[-v26];
          v19 -= v26;
          v27 = &v18[8 * v15 - 16];
          v28 = v12 - 16;
          v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v30 = *(_OWORD *)v28;
            *(v27 - 1) = *((_OWORD *)v28 - 1);
            *v27 = v30;
            v27 -= 2;
            v28 -= 32;
            v29 -= 4;
          }
          while (v29);
          if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_43;
        }
        else
        {
          v22 = v12;
        }
      }
      else
      {
        v22 = v12;
      }
      do
      {
        v23 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v22 != v11);
LABEL_43:
      v13 = &v18[v17];
      if (v11)
        operator delete(v11);
      v12 = v20;
      v11 = v19;
      v10 = v87;
      goto LABEL_27;
    }
    if (!v12)
      goto LABEL_137;
    *(_QWORD *)v12 = v14;
    v12 += 8;
LABEL_27:
    ++v9;
  }
  while (v9 != v10);
  if (v11 == v12)
  {
    v48 = 3;
    if (v11)
      goto LABEL_95;
    goto LABEL_96;
  }
  *(_OWORD *)&v90.__r_.__value_.__r.__words[1] = 0uLL;
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90.__r_.__value_.__l.__size_;
  v34 = v11;
  while (2)
  {
    v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v34 + 32))(*(_QWORD *)v34);
    v38 = (rtc::Network *)v37;
    size = v90.__r_.__value_.__l.__size_;
    p_size = &v90.__r_.__value_.__l.__size_;
    v41 = &v90.__r_.__value_.__l.__size_;
    if (!v90.__r_.__value_.__l.__size_)
    {
LABEL_60:
      v35 = (uint64_t *)operator new(0x28uLL);
      v35[4] = (uint64_t)v38;
      *v35 = 0;
      v35[1] = 0;
      v35[2] = (uint64_t)v41;
      *p_size = (std::string::size_type)v35;
      if (*(_QWORD *)v90.__r_.__value_.__l.__data_)
      {
        v90.__r_.__value_.__r.__words[0] = *(_QWORD *)v90.__r_.__value_.__l.__data_;
        v36 = (uint64_t *)*p_size;
      }
      else
      {
        v36 = v35;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v90.__r_.__value_.__l.__size_, v36);
      ++v90.__r_.__value_.__r.__words[2];
      goto LABEL_63;
    }
    v42 = (std::string *)&v90.__r_.__value_.__r.__words[1];
    v43 = (std::string *)v90.__r_.__value_.__l.__size_;
    do
    {
      v44 = v43;
      v45 = v42;
      v46 = v43[1].__r_.__value_.__l.__size_;
      if (v46 >= v37)
        v42 = v43;
      else
        v43 = (std::string *)((char *)v43 + 8);
      v43 = (std::string *)v43->__r_.__value_.__r.__words[0];
    }
    while (v43);
    if (v42 == (std::string *)&v90.__r_.__value_.__r.__words[1])
      goto LABEL_77;
    if (v46 < v37)
      v44 = v45;
    if (v37 < v44[1].__r_.__value_.__l.__size_)
    {
LABEL_77:
      while (1)
      {
        while (1)
        {
          v41 = (std::string::size_type *)size;
          v47 = *(_QWORD *)(size + 32);
          if (v37 >= v47)
            break;
          size = *v41;
          p_size = v41;
          if (!*v41)
            goto LABEL_60;
        }
        if (v47 >= v37)
          break;
        size = v41[1];
        if (!size)
        {
          p_size = v41 + 1;
          goto LABEL_60;
        }
      }
LABEL_63:
      v34 += 8;
      if (v34 == v12)
      {
        webrtc::IceEventLog::DumpCandidatePairDescriptionToMemoryAsConfigEvents((uint64_t *)this + 186);
        v48 = 2;
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
  v51 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>();
  if ((v51 & 1) == 0)
  {
    cricket::P2PTransportChannel::ToString(&v89, (uint64_t)this);
    rtc::Network::ToString(v38, &__p);
    rtc::webrtc_logging_impl::Log("\r\n\t\n\t", v52, v53, v54, v55, v56, v57, v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
  }
  v48 = 1;
LABEL_94:
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy((_QWORD *)v90.__r_.__value_.__l.__size_);
  if (v11)
LABEL_95:
    operator delete(v11);
LABEL_96:
  v49 = *((_QWORD *)this + 137);
  v50 = *((_QWORD *)this + 138);
  if (v49 == v50)
    goto LABEL_99;
LABEL_97:
  while (*(_DWORD *)(*(_QWORD *)v49 + 2328) == 3)
  {
    v49 += 8;
    if (v49 == v50)
      goto LABEL_99;
  }
  v60 = 1;
  if (((*(uint64_t (**)(cricket::P2PTransportChannel *))(*(_QWORD *)this + 24))(this) & 1) == 0)
  {
LABEL_105:
    if (!*((_BYTE *)this + 1442))
      goto LABEL_108;
    v59 = 5;
    if (*((_DWORD *)this + 325) == v48)
      goto LABEL_116;
LABEL_118:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      cricket::P2PTransportChannel::ToString(&v90, (uint64_t)this);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v61, v62, v63, v64, v65, v66, v67, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
    }
    *((_DWORD *)this + 325) = v48;
    v68 = (_QWORD *)*((_QWORD *)this + 75);
    for (*((_QWORD *)this + 77) = v68; v68 != (_QWORD *)((char *)this + 592); v68 = (_QWORD *)*((_QWORD *)this + 77))
    {
      v70 = (void (*)(_QWORD *, cricket::P2PTransportChannel *))v68[2];
      v69 = v68 + 2;
      *((_QWORD *)this + 77) = *(v69 - 1);
      v70(v69, this);
    }
    goto LABEL_116;
  }
LABEL_108:
  if (((*((_BYTE *)this + 1144) == 0) & ~v60) != 0)
  {
    v59 = 0;
    if (*((_DWORD *)this + 325) != v48)
      goto LABEL_118;
    goto LABEL_116;
  }
  if (v60 && !(*(unsigned int (**)(cricket::P2PTransportChannel *))(*(_QWORD *)this + 24))(this))
  {
    v59 = 1;
    if (*((_DWORD *)this + 325) == v48)
      goto LABEL_116;
    goto LABEL_118;
  }
  v59 = 2;
  if (*((_DWORD *)this + 325) != v48)
    goto LABEL_118;
LABEL_116:
  if (*((_DWORD *)this + 326) != v59)
  {
    *((_DWORD *)this + 326) = v59;
    v71 = (_QWORD *)*((_QWORD *)this + 82);
    for (*((_QWORD *)this + 84) = v71; v71 != (_QWORD *)((char *)this + 648); v71 = (_QWORD *)*((_QWORD *)this + 84))
    {
      v73 = (void (*)(_QWORD *, cricket::P2PTransportChannel *))v71[2];
      v72 = v71 + 2;
      *((_QWORD *)this + 84) = *(v72 - 1);
      v73(v72, this);
    }
  }
}

void `non-virtual thunk to'cricket::P2PTransportChannel::UpdateState(cricket::P2PTransportChannel *this)
{
  cricket::P2PTransportChannel *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (cricket::P2PTransportChannel *)((char *)this - 936);
  v2 = *((_QWORD *)this + 20);
  v3 = *((_QWORD *)this + 21);
  if (v2 == v3)
  {
LABEL_4:
    cricket::P2PTransportChannel::HandleAllTimedOut((cricket::P2PTransportChannel *)((char *)this - 936));
  }
  else
  {
    while (*(_DWORD *)(*(_QWORD *)v2 + 2328) == 3)
    {
      v2 += 8;
      if (v2 == v3)
        goto LABEL_4;
    }
  }
  cricket::P2PTransportChannel::UpdateTransportState(v1);
}

uint64_t cricket::P2PTransportChannel::PruneConnections(uint64_t a1, char ***a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!*(_DWORD *)(a1 + 1260)
    || (v4 = *(_QWORD *)(a1 + 1088)) != 0 && (*(_DWORD *)(v4 + 2344) || *(_DWORD *)(v4 + 2348)))
  {
    if (a3)
    {
      v5 = 8 * a3;
      do
      {
        v6 = *a2++;
        cricket::Connection::Prune(v6);
        v5 -= 8;
      }
      while (v5);
    }
    return 1;
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    return 0;
  }
}

uint64_t `non-virtual thunk to'cricket::P2PTransportChannel::PruneConnections(uint64_t a1, char ***a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!*(_DWORD *)(a1 + 324) || (v4 = *(_QWORD *)(a1 + 152)) != 0 && (*(_DWORD *)(v4 + 2344) || *(_DWORD *)(v4 + 2348)))
  {
    if (a3)
    {
      v5 = 8 * a3;
      do
      {
        v6 = *a2++;
        cricket::Connection::Prune(v6);
        v5 -= 8;
      }
      while (v5);
    }
    return 1;
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    return 0;
  }
}

uint64_t cricket::P2PTransportChannel::SwitchSelectedConnectionInternal(uint64_t a1, cricket::Connection *this, char *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  _BOOL4 v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  void (*v64)(uint64_t, void **);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, void **);
  uint64_t v68;
  std::string *v70;
  uint64_t v71;
  BOOL v72;
  _BOOL4 v73;
  uint64_t v74;
  unsigned int v75;
  void *v76[2];
  __int128 v77;
  uint64_t v78;
  std::string v79[18];
  char v80;
  void *__p[2];
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  __int16 v93;
  int v94;
  char v95;
  int v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int v100;
  __int128 v101;
  __int128 v102;
  int v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  __int16 v111;
  int v112;
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  int v117;
  __int128 v118;
  _OWORD v119[2];
  int v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  void *v126;
  __int128 v127;
  int v128;
  __int16 v129;
  int v130;
  char v131;
  int v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  int v136;
  __int128 v137;
  __int128 v138;
  int v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  void *v143;
  __int128 v144;
  int v145;
  __int16 v146;
  int v147;
  char v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  int v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  void *v156[2];
  uint64_t v157;
  uint64_t v158;

  v6 = *(_QWORD *)(a1 + 1088);
  *(_QWORD *)(a1 + 1088) = this;
  if (this)
  {
    v7 = *((_DWORD *)this + 60);
    v8 = cricket::Connection::ToLogDescription(this);
    webrtc::IceEventLog::LogCandidatePairConfig((float *)(a1 + 1488), 3, v7, v8);
  }
  if (*(_BYTE *)(a1 + 1480))
    *(_BYTE *)(a1 + 1480) = 0;
  if (!v6)
  {
    v17 = *(_QWORD *)(a1 + 1088);
    if (v17)
    {
      ++*(_DWORD *)(a1 + 1436);
      *(_BYTE *)(v17 + 2335) = 1;
      goto LABEL_18;
    }
LABEL_13:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      cricket::P2PTransportChannel::ToString((std::string *)__p, a1);
      rtc::webrtc_logging_impl::Log("\r\n\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
      if (SBYTE7(v82) < 0)
        operator delete(__p[0]);
    }
    goto LABEL_62;
  }
  *(_BYTE *)(v6 + 2335) = 0;
  v9 = *(_QWORD *)(a1 + 1088);
  if (!v9)
    goto LABEL_13;
  ++*(_DWORD *)(a1 + 1436);
  *(_BYTE *)(v9 + 2335) = 1;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    goto LABEL_18;
  cricket::P2PTransportChannel::ToString((std::string *)__p, a1);
  cricket::Connection::ToString((cricket::Connection *)v6, (std::string *)v76);
  rtc::webrtc_logging_impl::Log("\r\n\t\n", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  if (SBYTE7(v77) < 0)
  {
    operator delete(v76[0]);
    if ((SBYTE7(v82) & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if ((SBYTE7(v82) & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p[0]);
LABEL_18:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    cricket::P2PTransportChannel::ToString((std::string *)__p, a1);
    cricket::Connection::ToString(*(cricket::Connection **)(a1 + 1088), (std::string *)v76);
    rtc::webrtc_logging_impl::Log("\r\n\t\n", v25, v26, v27, v28, v29, v30, v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    if (SBYTE7(v77) < 0)
    {
      operator delete(v76[0]);
      if ((SBYTE7(v82) & 0x80000000) == 0)
        goto LABEL_21;
    }
    else if ((SBYTE7(v82) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(__p[0]);
  }
LABEL_21:
  v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1088) + 24))(*(_QWORD *)(a1 + 1088));
  v33 = *(_QWORD *)(a1 + 488);
  for (*(_QWORD *)(a1 + 504) = v33; v33 != a1 + 480; v33 = *(_QWORD *)(a1 + 504))
  {
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
    v34 = v33 + 16;
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(v34 - 8);
    v35(v34, a1, v32);
  }
  v36 = *(_QWORD *)(a1 + 1088);
  v37 = *(_DWORD *)(v36 + 2328);
  v74 = v6;
  v75 = a3;
  if (!v37)
    goto LABEL_29;
  if (v37 != 2)
    goto LABEL_32;
  if (*(_BYTE *)(a1 + 1340)
    && *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36) + 208) == 3
    && (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36) + 208) == 3
     || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36) + 208) == 2))
  {
LABEL_29:
    v38 = *(_QWORD *)(a1 + 136);
    for (*(_QWORD *)(a1 + 152) = v38; v38 != a1 + 128; v38 = *(_QWORD *)(a1 + 152))
    {
      v40 = *(void (**)(uint64_t, uint64_t))(v38 + 16);
      v39 = v38 + 16;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(v39 - 8);
      v40(v39, a1);
    }
  }
  v36 = *(_QWORD *)(a1 + 1088);
  if (!v36)
    goto LABEL_39;
LABEL_32:
  v41 = *(_DWORD *)(v36 + 2328);
  if (v41 < 2)
    goto LABEL_33;
  if (v41 != 2
    || !*(_BYTE *)(a1 + 1340)
    || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36) + 208) != 3)
  {
LABEL_39:
    v72 = 0;
    goto LABEL_40;
  }
  if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36) + 208) != 3)
  {
    v72 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36) + 208) == 2;
    goto LABEL_40;
  }
LABEL_33:
  v72 = 1;
LABEL_40:
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  v73 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v36 + 256) + 16))(*(_QWORD *)(v36 + 256)) == 3;
  v43 = *(unsigned int *)(v42 + 240);
  v44 = *(unsigned __int16 *)(v42 + 400);
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
  v46 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36) + 208);
  v47 = *(_DWORD *)(v45 + 240);
  if (!v47)
    v47 = rtc::Network::GuessAdapterFromNetworkCost((rtc::Network *)*(unsigned __int16 *)(v45 + 402));
  v48 = v46 == 3;
  v49 = *(unsigned __int16 *)(v45 + 400);
  v50 = *(_DWORD *)(a1 + 1432);
  v51 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36) + 112);
  v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  v57 = (unsigned __int16 *)(v52 + 32);
  if (*(char *)(v52 + 55) < 0)
  {
    v58 = *(_QWORD *)(v52 + 40);
    if (v58 < 0 || (v57 = *(unsigned __int16 **)v57, v58) && !v57)
    {
LABEL_101:
      __break(1u);
      goto LABEL_102;
    }
  }
  else
  {
    v58 = *(unsigned __int8 *)(v52 + 55);
  }
  v59 = ((unint64_t)(unsigned __int16)v43 << 32) | (v44 << 48) | v43;
  v60 = 8;
  if (v58 == 6)
  {
    if (*(_DWORD *)v57 ^ *(_DWORD *)"ssltcp" | v57[2] ^ *(unsigned __int16 *)"cp")
      v60 = 8;
    else
      v60 = 20;
    a3 = (char *)v75;
  }
  else
  {
    a3 = (char *)v75;
    if (v58 == 3)
    {
      if (*v57 ^ (unsigned __int16)cricket::TCP_PROTOCOL_NAME | *((unsigned __int8 *)v57 + 2) ^ 0x70)
        v60 = 8;
      else
        v60 = 20;
    }
  }
  *(_BYTE *)(a1 + 1444) = v72;
  if (v51 == 30)
    v61 = 40;
  else
    v61 = 0;
  if (v51 == 2)
    v61 = 20;
  *(_BYTE *)(a1 + 1447) = BYTE2(__p[0]);
  *(_WORD *)(a1 + 1445) = __p[0];
  *(_QWORD *)(a1 + 1448) = v59;
  *(_DWORD *)(a1 + 1456) = v73;
  *(_QWORD *)(a1 + 1460) = ((unint64_t)(unsigned __int16)v47 << 32) | (v49 << 48) | v47;
  *(_DWORD *)(a1 + 1468) = v48;
  *(_DWORD *)(a1 + 1472) = v50;
  *(_DWORD *)(a1 + 1476) = v60 + v61;
  *(_BYTE *)(a1 + 1480) = 1;
  v6 = v74;
LABEL_62:
  if (this && !*(_DWORD *)(a1 + 1260) && (v6 && *(_BYTE *)(a1 + 1652) || *(_BYTE *)(a1 + 1653)))
  {
    cricket::P2PTransportChannel::PingConnection((cricket::P2PTransportChannel *)a1, this);
    (*(void (**)(_QWORD, cricket::Connection *))(**(_QWORD **)(a1 + 1536) + 48))(*(_QWORD *)(a1 + 1536), this);
  }
  v62 = *(_OWORD *)(a1 + 1460);
  *(_OWORD *)v76 = *(_OWORD *)(a1 + 1444);
  v77 = v62;
  v78 = *(_QWORD *)(a1 + 1476);
  v63 = *(_QWORD *)(a1 + 304);
  for (*(_QWORD *)(a1 + 320) = v63; v63 != a1 + 296; v63 = *(_QWORD *)(a1 + 320))
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(v63 + 8);
    v64 = *(void (**)(uint64_t, void **))(v63 + 16);
    *(_OWORD *)__p = *(_OWORD *)v76;
    v82 = v77;
    v83 = v78;
    v64(v63 + 16, __p);
  }
  if (!*(_QWORD *)(a1 + 1088))
  {
    v66 = 0;
LABEL_98:
    ++*(_DWORD *)(a1 + 1600);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1536) + 32))(*(_QWORD *)(a1 + 1536), v66);
  }
  __p[0] = &unk_24C0B8500;
  __p[1] = 0;
  v82 = 0uLL;
  {
    LODWORD(v83) = 1;
    v84 = 0u;
    v85 = 0u;
    v86 = 0u;
    v87 = 0u;
    v88 = 0;
    v89 = &unk_24C0ACDA0;
    v95 = 0;
    v93 = 0;
    v94 = 0;
    v91 = 0;
    v90 = 0;
    v92 = 0;
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0;
    v100 = 0;
    v103 = 0;
    v102 = 0u;
    v101 = 0u;
    v104 = 0u;
    v105 = 0u;
    v106 = 0u;
    v113 = 0;
    v111 = 0;
    v112 = 0;
    v110 = 0;
    v107 = &unk_24C0ACDA0;
    v108 = 0;
    v109 = 0;
    v114 = 0u;
    v115 = 0u;
    v116 = 0u;
    v117 = 0;
    memset(v119, 0, sizeof(v119));
    v118 = 0u;
    {
      v120 = 1;
      v121 = 0u;
      v122 = 0u;
      v123 = 0u;
      v124 = 0u;
      v125 = 0;
      v126 = &unk_24C0ACDA0;
      v131 = 0;
      v129 = 0;
      v130 = 0;
      v127 = 0u;
      v128 = 0;
      v132 = 0;
      v133 = 0u;
      v134 = 0u;
      v135 = 0u;
      v136 = 0;
      v139 = 0;
      v138 = 0u;
      v137 = 0u;
      v141 = 0u;
      v142 = 0u;
      v140 = 0u;
      v143 = &unk_24C0ACDA0;
      v148 = 0;
      v146 = 0;
      v147 = 0;
      v145 = 0;
      v144 = 0u;
      v154 = 0;
      v153 = 0u;
      v149 = 0u;
      v150 = 0u;
      v151 = 0u;
      v152 = 0;
      *(_OWORD *)v156 = 0u;
      v157 = 0;
      cricket::IceSwitchReasonToString(a3, (unint64_t)v76);
      if (SHIBYTE(v157) < 0)
        operator delete(v156[0]);
      *(_OWORD *)v156 = *(_OWORD *)v76;
      v157 = v77;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 240))(v76, a1);
      if (v80)
      {
        cricket::Candidate::operator=((std::string *)&__p[1], (std::string *)&v76[1]);
        cricket::Candidate::operator=((std::string *)((char *)v119 + 8), v79);
        if (v80)
        {
          cricket::Candidate::~Candidate((void **)&v79[0].__r_.__value_.__l.__data_);
          cricket::Candidate::~Candidate(&v76[1]);
        }
        v155 = *(_QWORD *)(*(_QWORD *)(a1 + 1088) + 2456);
        if (v6)
        {
          if (rtc::g_clock)
          {
            v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
          }
          else
          {
            if (!dword_253EA791C)
              mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
            v65 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
                / dword_253EA791C;
          }
          v68 = *(_QWORD *)(v6 + 2448);
          if (v68 <= *(_QWORD *)(v6 + 2464))
            v68 = *(_QWORD *)(v6 + 2464);
          if (*(_QWORD *)(v6 + 2456) > v68)
            v68 = *(_QWORD *)(v6 + 2456);
          if (v68 <= *(_QWORD *)(a1 + 1608))
            v68 = *(_QWORD *)(a1 + 1608);
          v158 = v65 / 1000000 - v68;
          v67 = *(void (**)(uint64_t, void **))(a1 + 928);
          if (!v67)
            goto LABEL_95;
        }
        else
        {
          v158 = 0;
          v67 = *(void (**)(uint64_t, void **))(a1 + 928);
          if (!v67)
            goto LABEL_95;
        }
        v67(a1 + 904, __p);
LABEL_95:
        if (SHIBYTE(v157) < 0)
          operator delete(v156[0]);
        cricket::Candidate::~Candidate((void **)v119 + 1);
        cricket::Candidate::~Candidate(&__p[1]);
        v66 = *(_QWORD *)(a1 + 1088);
        goto LABEL_98;
      }
      goto LABEL_101;
    }
  }
LABEL_102:
  v70 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v53, v54, v55, v56, v71);
}

uint64_t `non-virtual thunk to'cricket::P2PTransportChannel::SwitchSelectedConnection(uint64_t a1, cricket::Connection *a2, char *a3)
{
  return cricket::P2PTransportChannel::SwitchSelectedConnectionInternal(a1 - 936, a2, a3);
}

uint64_t cricket::P2PTransportChannel::GetLastPingSentMs(cricket::P2PTransportChannel *this)
{
  return *((_QWORD *)this + 161);
}

uint64_t `non-virtual thunk to'cricket::P2PTransportChannel::GetLastPingSentMs(cricket::P2PTransportChannel *this)
{
  return *((_QWORD *)this + 44);
}

uint64_t cricket::P2PTransportChannel::SendPingRequest(cricket::P2PTransportChannel *this, const cricket::Connection *a2)
{
  cricket::P2PTransportChannel::PingConnection(this, a2);
  return (*(uint64_t (**)(_QWORD, const cricket::Connection *))(**((_QWORD **)this + 192) + 48))(*((_QWORD *)this + 192), a2);
}

uint64_t `non-virtual thunk to'cricket::P2PTransportChannel::SendPingRequest(cricket::P2PTransportChannel *this, const cricket::Connection *a2)
{
  cricket::P2PTransportChannel::PingConnection((cricket::P2PTransportChannel *)((char *)this - 936), a2);
  return (*(uint64_t (**)(_QWORD, const cricket::Connection *))(**((_QWORD **)this + 75) + 48))(*((_QWORD *)this + 75), a2);
}

_WORD *cricket::P2PTransportChannel::PingConnection(cricket::P2PTransportChannel *this, cricket::Connection *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *result;
  _WORD *v10;

  if (*((_DWORD *)this + 315))
    goto LABEL_2;
  if (!*((_BYTE *)this + 1224) || (v5 = *((_QWORD *)this + 155), *((_QWORD *)this + 154) == v5) || !*(_BYTE *)(v5 - 8))
  {
    v4 = (*(uint64_t (**)(_QWORD, cricket::Connection *, _QWORD, _QWORD))(**((_QWORD **)this + 192) + 64))(*((_QWORD *)this + 192), a2, *((unsigned int *)this + 340), *((unsigned int *)this + 314));
LABEL_12:
    *((_DWORD *)a2 + 585) = 0;
    *((_BYTE *)a2 + 2336) = v4;
    v6 = rtc::g_clock;
    if (rtc::g_clock)
      goto LABEL_13;
    goto LABEL_8;
  }
  if (*((cricket::Connection **)this + 136) != a2)
  {
LABEL_2:
    v4 = 0;
    goto LABEL_12;
  }
  *((_DWORD *)a2 + 585) = *((_DWORD *)this + 359);
  *((_BYTE *)a2 + 2336) = 0;
  v6 = rtc::g_clock;
  if (rtc::g_clock)
  {
LABEL_13:
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    goto LABEL_14;
  }
LABEL_8:
  if (!dword_253EA791C)
    mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
  v7 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
     / dword_253EA791C;
LABEL_14:
  v8 = v7 / 1000000;
  *((_QWORD *)this + 161) = v7 / 1000000;
  cricket::StunDictionaryWriter::CreateDelta((_QWORD *)this + 210, (uint64_t *)&v10);
  cricket::Connection::Ping((uint64_t)a2, (std::string *)v8, &v10);
  result = v10;
  v10 = 0;
  if (result)
    return (_WORD *)(*(uint64_t (**)(_WORD *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t cricket::P2PTransportChannel::GetDictionaryWriter(cricket::P2PTransportChannel *this)
{
  return (uint64_t)this + 1680;
}

void std::__tree<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>>>::destroy(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::unique_ptr<cricket::StunAttribute>>>>::destroy(a1[1]);
    v2 = a1[5];
    a1[5] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    operator delete(a1);
  }
}

uint64_t cricket::CandidatePair::local_candidate(cricket::CandidatePair *this)
{
  return (uint64_t)this + 8;
}

uint64_t cricket::CandidatePair::remote_candidate(cricket::CandidatePair *this)
{
  return (uint64_t)this + 440;
}

uint64_t sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,unsigned int,unsigned int>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void std::__function::__func<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_0,std::allocator<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_0>,cricket::IceTransportState ()(void)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_0,std::allocator<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_0>,cricket::IceTransportState ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B8530;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_0,std::allocator<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_0>,cricket::IceTransportState ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B8530;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_0,std::allocator<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_0>,cricket::IceTransportState ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
}

void std::__function::__func<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_1,std::allocator<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_1>,cricket::IceRole ()(void)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_1,std::allocator<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_1>,cricket::IceRole ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B8578;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_1,std::allocator<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_1>,cricket::IceRole ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B8578;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_1,std::allocator<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_1>,cricket::IceRole ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
}

void std::__function::__func<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_2,std::allocator<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_2>,BOOL ()(cricket::Connection const*)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_2,std::allocator<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_2>,BOOL ()(cricket::Connection const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B85C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_2,std::allocator<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_2>,BOOL ()(cricket::Connection const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B85C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_2,std::allocator<cricket::P2PTransportChannel::P2PTransportChannel(std::string_view,int,cricket::PortAllocator *,webrtc::AsyncDnsResolverFactoryInterface *,std::unique_ptr<webrtc::AsyncDnsResolverFactoryInterface>,webrtc::RtcEventLog *,cricket::IceControllerFactoryInterface *,cricket::ActiveIceControllerFactoryInterface *,webrtc::FieldTrialsView const*)::$_2>,BOOL ()(cricket::Connection const*)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _BYTE *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)a2;
  v4 = *(_BYTE **)(*(_QWORD *)a2 + 248);
  if (v4 && *v4)
  {
    v5 = v3[32];
    v6 = (_QWORD *)v2[130];
    v7 = (_QWORD *)v2[131];
    if (v6 != v7)
      goto LABEL_6;
  }
  else
  {
    v5 = 0;
    v6 = (_QWORD *)v2[130];
    v7 = (_QWORD *)v2[131];
    if (v6 != v7)
    {
LABEL_6:
      while (*v6 != v5)
      {
        if (++v6 == v7)
        {
          v6 = v7;
          break;
        }
      }
    }
  }
  if (v6 == v7)
    return 1;
  v8 = (*(uint64_t (**)(_QWORD *))(*v3 + 24))(v3);
  v9 = (unsigned __int8 *)v2[140];
  v10 = (unsigned __int8 *)v2[141];
  if (v9 != v10)
  {
    v11 = (unsigned __int8 *)v8;
    while (!cricket::Candidate::operator==(v9, v11))
    {
      v9 += 440;
      if (v9 == v10)
      {
        v9 = v10;
        return v9 == v10;
      }
    }
  }
  return v9 == v10;
}

uint64_t sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortAllocatorSession *,cricket::PortInterface *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortAllocatorSession *,std::vector<cricket::PortInterface *> const&>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortAllocatorSession *,std::vector<cricket::Candidate> const&>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortAllocatorSession *,cricket::IceCandidateErrorEvent const&>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortAllocatorSession *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void absl::internal_any_invocable::LocalInvoker<false,void,cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_1 &,cricket::Connection *,rtc::ReceivedPacket const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  _BYTE *v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v9 = *a1;
  if (*(_QWORD *)(*a1 + 1088) == a2)
    goto LABEL_7;
  v10 = *(_QWORD **)(v9 + 1096);
  v11 = *(_QWORD **)(v9 + 1104);
  if (v10 != v11)
  {
    while (*v10 != a2)
    {
      if (++v10 == v11)
      {
        v10 = *(_QWORD **)(v9 + 1104);
        break;
      }
    }
  }
  if (v10 != v11)
  {
LABEL_7:
    ++*(_QWORD *)(v9 + 1592);
    *(_QWORD *)(v9 + 1576) += *(_QWORD *)(a3 + 8);
    v12 = *(_QWORD *)(a2 + 2456);
    if (*(_QWORD *)(v9 + 1608) > v12)
      v12 = *(_QWORD *)(v9 + 1608);
    *(_QWORD *)(v9 + 1608) = v12;
    v20 = v9;
    v21[0] = &v20;
    v21[1] = a3;
    if (*(_BYTE *)(v9 + 368))
    {
      v18 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v19);
      sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::Connection *>(v18);
      return;
    }
    v13 = (_BYTE *)(v9 + 368);
    *(_BYTE *)(v9 + 368) = 1;
    v14 = *(_QWORD **)(v9 + 344);
    v15 = *(_QWORD **)(v9 + 352);
    if (v14 == v15)
    {
      *v13 = 0;
      if (*(_DWORD *)(v9 + 1260) != 1)
        return;
    }
    else
    {
      v16 = 0;
      do
      {
        rtc::FunctionView<void ()(webrtc::UntypedFunction &)>::CallVoidPtr<void webrtc::CallbackList<rtc::PacketTransportInternal *,rtc::ReceivedPacket const&>::Send<rtc::PacketTransportInternal *,rtc::ReceivedPacket const&>(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)::{lambda(webrtc::UntypedFunction &)#1}>((uint64_t)v21, (uint64_t)(v14 + 1));
        v17 = (_BYTE *)*v14;
        v14 += 7;
        v16 |= v17 == v13;
      }
      while (v14 != v15);
      *v13 = 0;
      if ((v16 & 1) != 0)
        webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(v9 + 344), (const void *)(v9 + 368));
      if (*(_DWORD *)(v9 + 1260) != 1)
        return;
    }
    if (*(_QWORD *)(v9 + 1088) != a2)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v9 + 1536) + 88))(*(_QWORD *)(v9 + 1536), 7, a2);
  }
}

uint64_t sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::Connection *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void std::__function::__func<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_2,std::allocator<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_2>,std::unique_ptr<cricket::StunAttribute> ()(cricket::StunByteStringAttribute const*)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_2,std::allocator<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_2>,std::unique_ptr<cricket::StunAttribute> ()(cricket::StunByteStringAttribute const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B8608;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_2,std::allocator<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_2>,std::unique_ptr<cricket::StunAttribute> ()(cricket::StunByteStringAttribute const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B8608;
  a2[1] = v2;
  return result;
}

void std::__function::__func<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_2,std::allocator<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_2>,std::unique_ptr<cricket::StunAttribute> ()(cricket::StunByteStringAttribute const*)>::operator()(uint64_t a1@<X0>, const cricket::StunByteStringAttribute **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *__p;
  _BYTE *v34;
  char v35;

  v4 = *(_QWORD *)(a1 + 8);
  cricket::StunDictionaryView::ApplyDelta((cricket::StunDictionaryView *)(v4 + 1752), *a2, (uint64_t)&v29);
  if (v29)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    *a3 = 0;
    if (!v35)
      goto LABEL_25;
    goto LABEL_21;
  }
  if (!v35)
  {
    __break(1u);
    goto LABEL_29;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v16, v17, v18, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  if (*(_BYTE *)(v4 + 768))
  {
LABEL_29:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v5, v6, v7, v8, v28);
    JUMPOUT(0x2086AE6C8);
  }
  v19 = (_BYTE *)(v4 + 768);
  *(_BYTE *)(v4 + 768) = 1;
  v20 = *(_QWORD *)(v4 + 744);
  v21 = *(_QWORD *)(v4 + 752);
  if (v20 == v21)
  {
    *v19 = 0;
    v26 = v32;
    v32 = 0;
    *a3 = v26;
    if (!v35)
      goto LABEL_25;
    goto LABEL_21;
  }
  v22 = 0;
  do
  {
    if (v34 == __p)
      v23 = 0;
    else
      v23 = __p;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *, int64_t))(v20 + 40))(v20 + 8, v4, v4 + 1752, v23, (v34 - (_BYTE *)__p) >> 1);
    v24 = *(_BYTE **)v20;
    v20 += 56;
    v22 |= v24 == v19;
  }
  while (v20 != v21);
  *v19 = 0;
  if ((v22 & 1) != 0)
    webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(v4 + 744), (const void *)(v4 + 768));
  v25 = v32;
  v32 = 0;
  *a3 = v25;
  if (v35)
  {
LABEL_21:
    if (__p)
    {
      v34 = __p;
      operator delete(__p);
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
LABEL_25:
  if (v31 < 0)
    operator delete(v30);
}

void std::__function::__func<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_3,std::allocator<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_3>,void ()(webrtc::RTCErrorOr<cricket::StunUInt64Attribute const*>)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_3,std::allocator<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_3>,void ()(webrtc::RTCErrorOr<cricket::StunUInt64Attribute const*>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C0B8650;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_3,std::allocator<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_3>,void ()(webrtc::RTCErrorOr<cricket::StunUInt64Attribute const*>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C0B8650;
  a2[1] = v2;
  return result;
}

void std::__function::__func<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_3,std::allocator<cricket::P2PTransportChannel::AddConnection(cricket::Connection *)::$_3>,void ()(webrtc::RTCErrorOr<cricket::StunUInt64Attribute const*>)>::operator()(uint64_t a1, int *a2)
{
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE *v23;
  std::string *v24;
  uint64_t v25;
  void *__p;
  cricket::StunUInt64Attribute *v27[2];

  v2 = *a2;
  __p = (void *)*((_QWORD *)a2 + 1);
  v3 = *((_BYTE *)a2 + 31);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v27 = *(_OWORD *)(a2 + 10);
  v4 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    *(_BYTE *)(v4 + 1680) = 1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
      if ((v3 & 0x80) == 0)
        return;
      goto LABEL_15;
    }
LABEL_14:
    if ((v3 & 0x80) == 0)
      return;
    goto LABEL_15;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  if (!LOBYTE(v27[1]))
  {
    __break(1u);
    goto LABEL_20;
  }
  cricket::StunDictionaryWriter::ApplyDeltaAck((cricket::StunDictionaryWriter *)(v4 + 1680), v27[0]);
  if (*(_BYTE *)(v4 + 800))
  {
LABEL_20:
    v24 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v15, v16, v17, v18, v25);
    sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortInterface *,rtc::SocketAddress const&,cricket::ProtocolType,cricket::IceMessage *,std::string const&,BOOL>(v24);
    return;
  }
  v19 = (_BYTE *)(v4 + 800);
  *(_BYTE *)(v4 + 800) = 1;
  v20 = *(_QWORD *)(v4 + 776);
  v21 = *(_QWORD *)(v4 + 784);
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 40))(v20 + 8, v4, v4 + 1680);
      v23 = *(_BYTE **)v20;
      v20 += 56;
      v22 |= v23 == v19;
    }
    while (v20 != v21);
    *v19 = 0;
    if ((v22 & 1) != 0)
      webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(v4 + 776), (const void *)(v4 + 800));
    goto LABEL_14;
  }
  *v19 = 0;
  if (v3 < 0)
LABEL_15:
    operator delete(__p);
}

uint64_t sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortInterface *,rtc::SocketAddress const&,cricket::ProtocolType,cricket::IceMessage *,std::string const&,BOOL>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void std::__function::__func<cricket::P2PTransportChannel::OnPortReady(cricket::PortAllocatorSession *,cricket::PortInterface *)::$_1,std::allocator<cricket::P2PTransportChannel::OnPortReady(cricket::PortAllocatorSession *,cricket::PortInterface *)::$_1>,void ()(cricket::PortInterface *)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::P2PTransportChannel::OnPortReady(cricket::PortAllocatorSession *,cricket::PortInterface *)::$_1,std::allocator<cricket::P2PTransportChannel::OnPortReady(cricket::PortAllocatorSession *,cricket::PortInterface *)::$_1>,void ()(cricket::PortInterface *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B8698;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cricket::P2PTransportChannel::OnPortReady(cricket::PortAllocatorSession *,cricket::PortInterface *)::$_1,std::allocator<cricket::P2PTransportChannel::OnPortReady(cricket::PortAllocatorSession *,cricket::PortInterface *)::$_1>,void ()(cricket::PortInterface *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B8698;
  a2[1] = v2;
  return result;
}

void std::__function::__func<cricket::P2PTransportChannel::OnPortReady(cricket::PortAllocatorSession *,cricket::PortInterface *)::$_1,std::allocator<cricket::P2PTransportChannel::OnPortReady(cricket::PortAllocatorSession *,cricket::PortInterface *)::$_1>,void ()(cricket::PortInterface *)>::operator()(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *a2;
  v4 = (_QWORD *)v2[130];
  v5 = (_QWORD *)v2[131];
  if (v4 != v5)
  {
    while (*v4 != v3)
    {
      if (++v4 == v5)
      {
        v4 = (_QWORD *)v2[131];
        break;
      }
    }
  }
  v6 = v4 + 1;
  if (v4 != v5 && v6 != v5)
  {
    do
    {
      if (*v6 != v3)
        *v4++ = *v6;
      ++v6;
    }
    while (v6 != v5);
    v5 = (_QWORD *)v2[131];
  }
  if (v5 < v4)
    goto LABEL_35;
  if (v4 != v5)
    v2[131] = v4;
  v8 = (_QWORD *)v2[133];
  v9 = (_QWORD *)v2[134];
  if (v8 != v9)
  {
    while (*v8 != v3)
    {
      if (++v8 == v9)
      {
        v8 = (_QWORD *)v2[134];
        break;
      }
    }
  }
  if (v8 != v9)
  {
    v10 = v8 + 1;
    if (v8 + 1 != v9)
    {
      do
      {
        if (*v10 != v3)
          *v8++ = *v10;
        ++v10;
      }
      while (v10 != v9);
      v9 = (_QWORD *)v2[134];
    }
  }
  if (v9 < v8)
  {
LABEL_35:
    __break(1u);
  }
  else
  {
    if (v8 != v9)
      v2[134] = v8;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
  }
}

uint64_t sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,cricket::PortInterface *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t sigslot::_opaque_connection::emitter<cricket::P2PTransportChannel,rtc::SentPacket const&>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void absl::internal_any_invocable::LocalInvoker<false,void,cricket::P2PTransportChannel::ResolveHostnameCandidate(cricket::Candidate const&)::$_1 &>(cricket::P2PTransportChannel **a1)
{
  cricket::P2PTransportChannel *v1;
  cricket::P2PTransportChannel *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  size_t size;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string v43;
  std::string v44;
  int v45;
  __int128 v46;
  __int16 v47;
  int v48;
  char v49;
  std::string v50;
  void *v51[2];
  char v52;
  std::string v53;
  std::string v54;
  _QWORD v55[4];
  __int16 v56;
  int v57;
  char v58;

  v1 = *a1;
  v2 = a1[1];
  v3 = *((_QWORD *)*a1 + 193);
  v4 = *((_QWORD *)*a1 + 194);
  if (v3 != v4)
  {
    while (*(cricket::P2PTransportChannel **)(v3 + 432) != v2)
    {
      v3 += 440;
      if (v3 == v4)
        goto LABEL_9;
    }
  }
  if (v3 == v4)
  {
LABEL_9:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
    return;
  }
  cricket::Candidate::Candidate(&v50, (std::string *)v3);
  cricket::Candidate::Candidate(&v43, &v50);
  v5 = (*(uint64_t (**)(cricket::P2PTransportChannel *))(*(_QWORD *)v2 + 32))(v2);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5))
  {
    memset(&v54, 0, sizeof(v54));
    v55[0] = &unk_24C0ACDA0;
    v58 = 0;
    v56 = 0;
    v57 = 0;
    memset(&v55[1], 0, 20);
    if (((*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v5 + 16))(v5, 30, &v54) & 1) != 0
      || ((*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v5 + 16))(v5, 2, &v54) & 1) != 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        rtc::SocketAddress::HostAsSensitiveURIString((rtc::SocketAddress *)&v44, &v53);
        rtc::IPAddress::ToSensitiveString((rtc::IPAddress *)v55, (uint64_t)v51);
        rtc::webrtc_logging_impl::Log("\r\t\n\t\n", v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
        if (v52 < 0)
          operator delete(v51[0]);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v54;
        else
          v27 = (std::string *)v54.__r_.__value_.__r.__words[0];
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        else
          size = v54.__r_.__value_.__l.__size_;
        std::string::__assign_no_alias<false>(&v44, (const std::string::value_type *)v27, size);
      }
      else if ((*((_BYTE *)&v54.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(&v44, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
      }
      else
      {
        v44 = v54;
      }
      v45 = v55[1];
      v46 = *(_OWORD *)((char *)&v55[1] + 4);
      v47 = v56;
      v49 = v58;
      v48 = v57;
      cricket::P2PTransportChannel::FinishAddingRemoteCandidate(v1, (const cricket::Candidate *)&v43);
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      rtc::SocketAddress::HostAsSensitiveURIString((rtc::SocketAddress *)&v44, &v53);
      rtc::webrtc_logging_impl::Log("\r\t\n\t", v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
    }
    goto LABEL_34;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::SocketAddress::HostAsSensitiveURIString((rtc::SocketAddress *)&v44, &v54);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/p2p_transport_channel.cc");
LABEL_34:
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
  }
  cricket::Candidate::~Candidate((void **)&v43.__r_.__value_.__l.__data_);
  v36 = *(_QWORD *)(v3 + 432);
  *(_QWORD *)(v3 + 432) = 0;
  v37 = *((_QWORD *)v1 + 125);
  v54.__r_.__value_.__r.__words[0] = v36;
  v54.__r_.__value_.__r.__words[2] = (std::string::size_type)absl::internal_any_invocable::LocalManagerNontrivial<cricket::P2PTransportChannel::OnCandidateResolved(webrtc::AsyncDnsResolverInterface *)::$_2>;
  v55[0] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::P2PTransportChannel::OnCandidateResolved(webrtc::AsyncDnsResolverInterface *)::$_2 &&>;
  (*(void (**)(uint64_t, std::string *, std::string *, void **))(*(_QWORD *)v37 + 8))(v37, &v54, &v53, v51);
  ((void (*)(uint64_t, std::string *, std::string *))v54.__r_.__value_.__r.__words[2])(1, &v54, &v54);
  v38 = (void **)*((_QWORD *)v1 + 194);
  if (v38 == (void **)v3)
  {
    __break(1u);
  }
  else
  {
    if ((void **)(v3 + 440) != v38)
    {
      do
      {
        v39 = v3 + 440;
        cricket::Candidate::operator=((std::string *)v3, (std::string *)(v3 + 440));
        v40 = *(_QWORD *)(v3 + 872);
        *(_QWORD *)(v3 + 872) = 0;
        v41 = *(_QWORD *)(v3 + 432);
        *(_QWORD *)(v3 + 432) = v40;
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        v3 += 440;
      }
      while ((void **)(v39 + 440) != v38);
      v38 = (void **)*((_QWORD *)v1 + 194);
      v3 = v39;
    }
    while (v38 != (void **)v3)
    {
      v42 = (uint64_t)*(v38 - 1);
      *(v38 - 1) = 0;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      v38 -= 55;
      cricket::Candidate::~Candidate(v38);
    }
    *((_QWORD *)v1 + 194) = v3;
    cricket::Candidate::~Candidate((void **)&v50.__r_.__value_.__l.__data_);
  }
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<cricket::P2PTransportChannel::OnCandidateResolved(webrtc::AsyncDnsResolverInterface *)::$_2>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *a2 = 0;
    *a3 = v3;
  }
  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *webrtc::PacingController::PacingController(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  char v8;
  _QWORD *result;
  _QWORD *p_p;
  unint64_t v11;
  BOOL v12;
  int *v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  int *v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  int *v25;
  unint64_t v26;
  BOOL v27;
  int v28;
  int v29;
  int *v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  int v35;
  BOOL v37;
  int *v38;
  unint64_t v39;
  int v40;
  int v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  void *__p;
  unint64_t v62;
  unsigned __int8 v63;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  v8 = *a5;
  if (*a5)
  {
    result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a4 + 16))(&__p, a4, "WebRTC-Pacer-DrainQueue", 23);
    if ((char)v63 < 0)
    {
      v11 = v62;
      if ((v62 & 0x8000000000000000) != 0)
        goto LABEL_102;
      p_p = __p;
      if (v62)
      {
        if (!__p)
          goto LABEL_102;
      }
    }
    else
    {
      p_p = &__p;
      v11 = v63;
    }
    if (v11 >= 8)
    {
      v12 = *p_p == 0x64656C6261736944;
      if ((v63 & 0x80) != 0)
LABEL_11:
        operator delete(__p);
    }
    else
    {
      v12 = 0;
      if ((v63 & 0x80) != 0)
        goto LABEL_11;
    }
    v8 = !v12;
    a4 = a1[2];
  }
  *((_BYTE *)a1 + 24) = v8;
  result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a4 + 16))(&__p, a4, "WebRTC-Pacer-PadInSilence", 25);
  if ((char)v63 < 0)
  {
    v14 = v62;
    if ((v62 & 0x8000000000000000) != 0)
      goto LABEL_102;
    v13 = (int *)__p;
    if (v62)
    {
      if (!__p)
        goto LABEL_102;
    }
  }
  else
  {
    v13 = (int *)&__p;
    v14 = v63;
  }
  if (v14 < 7)
  {
    v15 = 0;
    if ((v63 & 0x80) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  v16 = *v13;
  v17 = *(int *)((char *)v13 + 3);
  v15 = v16 == 1650552389 && v17 == 1684368482;
  if ((v63 & 0x80) != 0)
LABEL_28:
    operator delete(__p);
LABEL_29:
  *((_BYTE *)a1 + 25) = v15;
  result = (*(_QWORD *(**)(void **__return_ptr, _QWORD, const char *, uint64_t))(*(_QWORD *)a1[2] + 16))(&__p, a1[2], "WebRTC-Pacer-BlockAudio", 23);
  if ((char)v63 < 0)
  {
    v20 = v62;
    if ((v62 & 0x8000000000000000) != 0)
      goto LABEL_102;
    v19 = (int *)__p;
    if (v62)
    {
      if (!__p)
        goto LABEL_102;
    }
  }
  else
  {
    v19 = (int *)&__p;
    v20 = v63;
  }
  if (v20 < 7)
  {
    v21 = 0;
    if ((v63 & 0x80) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
  v22 = *v19;
  v23 = *(int *)((char *)v19 + 3);
  v21 = v22 == 1650552389 && v23 == 1684368482;
  if ((v63 & 0x80) != 0)
LABEL_44:
    operator delete(__p);
LABEL_45:
  *((_BYTE *)a1 + 26) = v21;
  result = (*(_QWORD *(**)(void **__return_ptr, _QWORD, const char *, uint64_t))(*(_QWORD *)a1[2] + 16))(&__p, a1[2], "WebRTC-Pacer-IgnoreTransportOverhead", 36);
  if ((char)v63 < 0)
  {
    v26 = v62;
    if ((v62 & 0x8000000000000000) != 0)
      goto LABEL_102;
    v25 = (int *)__p;
    if (v62)
    {
      if (!__p)
        goto LABEL_102;
    }
  }
  else
  {
    v25 = (int *)&__p;
    v26 = v63;
  }
  if (v26 < 7)
  {
    v27 = 0;
    if ((v63 & 0x80) == 0)
      goto LABEL_61;
    goto LABEL_60;
  }
  v28 = *v25;
  v29 = *(int *)((char *)v25 + 3);
  v27 = v28 == 1650552389 && v29 == 1684368482;
  if ((v63 & 0x80) != 0)
LABEL_60:
    operator delete(__p);
LABEL_61:
  *((_BYTE *)a1 + 27) = v27;
  result = (*(_QWORD *(**)(void **__return_ptr, _QWORD, const char *, uint64_t))(*(_QWORD *)a1[2] + 16))(&__p, a1[2], "WebRTC-Pacer-FastRetransmissions", 32);
  if ((char)v63 < 0)
  {
    v32 = v62;
    if ((v62 & 0x8000000000000000) != 0)
      goto LABEL_102;
    v31 = (int *)__p;
    if (v62)
    {
      if (!__p)
        goto LABEL_102;
    }
  }
  else
  {
    v31 = (int *)&__p;
    v32 = v63;
  }
  if (v32 < 7)
  {
    v33 = 0;
    if ((v63 & 0x80) != 0)
      goto LABEL_78;
LABEL_76:
    *((_BYTE *)a1 + 28) = v33;
    if (!a5[16])
      goto LABEL_79;
LABEL_77:
    v37 = 1;
    goto LABEL_95;
  }
  v34 = *v31;
  v35 = *(int *)((char *)v31 + 3);
  v33 = v34 == 1650552389 && v35 == 1684368482;
  if ((v63 & 0x80) == 0)
    goto LABEL_76;
LABEL_78:
  operator delete(__p);
  *((_BYTE *)a1 + 28) = v33;
  if (a5[16])
    goto LABEL_77;
LABEL_79:
  result = (*(_QWORD *(**)(void **__return_ptr, _QWORD, const char *, uint64_t))(*(_QWORD *)a1[2] + 16))(&__p, a1[2], "WebRTC-Pacer-KeyframeFlushing", 29);
  if (((char)v63 & 0x80000000) == 0)
  {
    v38 = (int *)&__p;
    v39 = v63;
    goto LABEL_84;
  }
  v39 = v62;
  if ((v62 & 0x8000000000000000) != 0 || (v38 = (int *)__p, v62) && !__p)
  {
LABEL_102:
    __break(1u);
    return result;
  }
LABEL_84:
  if (v39 >= 7)
  {
    v40 = *v38;
    v41 = *(int *)((char *)v38 + 3);
    v37 = v40 == 1650552389 && v41 == 1684368482;
    if ((v63 & 0x80) == 0)
      goto LABEL_95;
  }
  else
  {
    v37 = 0;
    if ((v63 & 0x80) == 0)
      goto LABEL_95;
  }
  operator delete(__p);
LABEL_95:
  *((_BYTE *)a1 + 29) = v37;
  *((_OWORD *)a1 + 2) = xmmword_208F16DD0;
  a1[6] = *((_QWORD *)a5 + 6);
  a1[7] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  *((_BYTE *)a1 + 64) = 0;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  a1[13] = 0;
  v43 = a1[2];
  *((_DWORD *)a1 + 28) = 0;
  *(_OWORD *)(a1 + 15) = 0u;
  *(_OWORD *)(a1 + 17) = 0u;
  a1[21] = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 19) = 0u;
  webrtc::BitrateProberConfig::BitrateProberConfig((uint64_t)(a1 + 22), v43);
  if (!*((_DWORD *)a1 + 28))
  {
    *((_DWORD *)a1 + 28) = 1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/bitrate_prober.cc");
  }
  *((_BYTE *)a1 + 400) = 0;
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  a1[51] = v51;
  a1[52] = v51;
  *((_BYTE *)a1 + 424) = 0;
  *((_BYTE *)a1 + 432) = 0;
  *((_BYTE *)a1 + 440) = 0;
  v60 = *(_OWORD *)(a5 + 24);
  v52 = *((_QWORD *)a5 + 5);
  *((_BYTE *)a1 + 448) = a5[17];
  memset_pattern16(a1 + 58, &memset_pattern, 0x28uLL);
  a1[57] = 10;
  *(_OWORD *)(a1 + 77) = 0u;
  *(_OWORD *)(a1 + 59) = v60;
  a1[61] = v52;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  *(_OWORD *)(a1 + 67) = 0u;
  a1[69] = v51;
  *((_BYTE *)a1 + 560) = 0;
  a1[71] = v51;
  *((_OWORD *)a1 + 36) = 0u;
  *((_OWORD *)a1 + 37) = 0u;
  *((_DWORD *)a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 85) = 0u;
  *(_OWORD *)(a1 + 87) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 91) = 0u;
  *(_OWORD *)(a1 + 93) = 0u;
  *(_OWORD *)(a1 + 95) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  *(_OWORD *)(a1 + 99) = 0u;
  *(_OWORD *)(a1 + 101) = 0u;
  *(_OWORD *)(a1 + 103) = 0u;
  *(_OWORD *)(a1 + 105) = 0u;
  *((_DWORD *)a1 + 214) = -1;
  a1[108] = a1 + 108;
  a1[109] = a1 + 108;
  a1[110] = 0;
  *((_BYTE *)a1 + 888) = 0;
  a1[112] = *((_QWORD *)a5 + 1);
  *((_WORD *)a1 + 452) = 0;
  *((_DWORD *)a1 + 227) = 0x10000;
  if (!*((_BYTE *)a1 + 24) && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v53, v54, v55, v56, v57, v58, v59, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
  return a1;
}

void webrtc::PacingController::~PacingController(webrtc::PacingController *this)
{
  void *v2;
  void *v3;
  void *v4;

  webrtc::PrioritizedPacketQueue::~PrioritizedPacketQueue((webrtc::PacingController *)((char *)this + 448));
  *((_QWORD *)this + 40) = off_24C0B4170;
  if ((*((char *)this + 375) & 0x80000000) == 0)
  {
    v2 = (void *)*((_QWORD *)this + 41);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*((void **)this + 44));
  v2 = (void *)*((_QWORD *)this + 41);
  if (v2)
  {
LABEL_3:
    *((_QWORD *)this + 42) = v2;
    operator delete(v2);
  }
LABEL_4:
  *((_QWORD *)this + 31) = off_24C0B4170;
  if ((*((char *)this + 303) & 0x80000000) == 0)
  {
    v3 = (void *)*((_QWORD *)this + 32);
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(*((void **)this + 35));
  v3 = (void *)*((_QWORD *)this + 32);
  if (v3)
  {
LABEL_6:
    *((_QWORD *)this + 33) = v3;
    operator delete(v3);
  }
LABEL_7:
  *((_QWORD *)this + 22) = off_24C0B4170;
  if (*((char *)this + 231) < 0)
  {
    operator delete(*((void **)this + 26));
    v4 = (void *)*((_QWORD *)this + 23);
    if (!v4)
      goto LABEL_10;
    goto LABEL_9;
  }
  v4 = (void *)*((_QWORD *)this + 23);
  if (v4)
  {
LABEL_9:
    *((_QWORD *)this + 24) = v4;
    operator delete(v4);
  }
LABEL_10:
  std::deque<webrtc::BitrateProber::ProbeCluster>::~deque[abi:sn180100]((void **)this + 15);
}

uint64_t webrtc::PacingController::Pause(webrtc::PacingController *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Timestamp v17;
  uint64_t result;

  if (!*((_BYTE *)this + 64) && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
  *((_BYTE *)this + 64) = 1;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  if (v9 < *((_QWORD *)this + 7))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
    v9 = *((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 7) = v9;
  v17.var0 = v9;
  result = webrtc::PrioritizedPacketQueue::UpdateAverageQueueTime((uint64_t)this + 448, v17);
  *((_BYTE *)this + 560) = 1;
  return result;
}

uint64_t webrtc::PacingController::Resume(webrtc::PacingController *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Timestamp v17;
  uint64_t result;

  if (*((_BYTE *)this + 64) && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
  *((_BYTE *)this + 64) = 0;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  if (v9 < *((_QWORD *)this + 7))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
    v9 = *((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 7) = v9;
  v17.var0 = v9;
  result = webrtc::PrioritizedPacketQueue::UpdateAverageQueueTime((uint64_t)this + 448, v17);
  *((_BYTE *)this + 560) = 0;
  return result;
}

uint64_t webrtc::PacingController::SetCongested(uint64_t this, char a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Timestamp v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v3 = this;
  if (*(_BYTE *)(this + 888) && (a2 & 1) == 0)
  {
    v4 = (*(uint64_t (**)(void))(**(_QWORD **)this + 16))();
    if (v4 < *(_QWORD *)(v3 + 56))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
      v4 = *(_QWORD *)(v3 + 56);
    }
    *(_QWORD *)(v3 + 56) = v4;
    v12.var0 = v4;
    this = webrtc::PacingController::UpdateTimeAndGetElapsed((Timestamp *)v3, v12);
    v13 = (*(_QWORD *)(v3 + 96) * this + 4000000) / 8000000;
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(_QWORD *)(v3 + 80);
    if (v13 >= v14)
      v13 = *(_QWORD *)(v3 + 72);
    v16 = v14 - v13;
    if (v14 == 0x8000000000000000)
      v16 = 0x8000000000000000;
    if (v13 == 0x8000000000000000 || v14 == 0x7FFFFFFFFFFFFFFFLL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    v18 = (*(_QWORD *)(v3 + 104) * this + 4000000) / 8000000;
    if (v18 >= v15)
      v18 = *(_QWORD *)(v3 + 80);
    v19 = v15 - v18;
    if (v15 == 0x8000000000000000)
      v19 = *(_QWORD *)(v3 + 80);
    if (v18 == 0x8000000000000000 || v15 == 0x7FFFFFFFFFFFFFFFLL)
      v21 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    *(_QWORD *)(v3 + 72) = v16;
    *(_QWORD *)(v3 + 80) = v21;
  }
  *(_BYTE *)(v3 + 888) = a2;
  return this;
}

uint64_t webrtc::PacingController::UpdateTimeAndGetElapsed(Timestamp *this, Timestamp timestamp)
{
  int64_t var0;
  uint64_t v4;
  uint64_t v6;
  TimeDelta v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  char v16;
  void *v17;
  char v18;
  TimeDelta v19;

  var0 = this[51].var0;
  if (var0 == 0x8000000000000000 || timestamp.var0 < var0)
    return 0;
  v6 = 0x7FFFFFFFFFFFFFFFLL;
  if (timestamp.var0 == 0x7FFFFFFFFFFFFFFFLL)
  {
    this[51].var0 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    if (timestamp.var0 == 0x8000000000000000 || var0 == 0x7FFFFFFFFFFFFFFFLL)
    {
      this[51].var0 = timestamp.var0;
      return 0x8000000000000000;
    }
    v6 = timestamp.var0 - var0;
    this[51].var0 = timestamp.var0;
    v4 = timestamp.var0 - var0;
    if (timestamp.var0 - var0 <= 2000000)
      return v4;
  }
  v4 = 2000000;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
    return v4;
  webrtc::ToString((webrtc *)v6, v7, (char *)&v17);
  webrtc::ToString((webrtc *)0x1E8480, v19, (char *)&__p);
  rtc::webrtc_logging_impl::Log("\r\t\n\t\n", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
  if ((v16 & 0x80000000) == 0)
  {
    if (v18 < 0)
      goto LABEL_19;
    return v4;
  }
  operator delete(__p);
  if ((v18 & 0x80000000) == 0)
    return v4;
LABEL_19:
  operator delete(v17);
  return 2000000;
}

void webrtc::PacingController::SetPacingRates(webrtc::PacingController *a1, uint64_t x1_0, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  Timestamp v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  Timestamp v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::string *v50;
  char v51;
  std::string v52;
  char *v53;
  std::string v54;
  std::string *v55;
  void *v56[3];
  Timestamp v57;

  if (x1_0 <= 0)
  {
    rtc::webrtc_checks_impl::MakeVal<webrtc::DataRate,(std::string *)0>((char *)&v54, x1_0);
    rtc::webrtc_checks_impl::ToStringVal::ToStringVal(&v52, (const rtc::webrtc_checks_impl::ToStringVal *)&v54);
    v53 = &v51;
    rtc::webrtc_checks_impl::ToStringVal::~ToStringVal((void **)&v54.__r_.__value_.__l.__data_);
    rtc::webrtc_checks_impl::MakeVal<webrtc::DataRate,(std::string *)0>((char *)v56, 0);
    rtc::webrtc_checks_impl::ToStringVal::ToStringVal(&v54, (const rtc::webrtc_checks_impl::ToStringVal *)v56);
    v55 = &v52;
    rtc::webrtc_checks_impl::ToStringVal::~ToStringVal(v56);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc", 170, "pacing_rate > DataRate::Zero()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::ToStringVal,rtc::webrtc_checks_impl::ToStringVal>(char const*,int,char const*,rtc::webrtc_checks_impl::ToStringVal,rtc::webrtc_checks_impl::ToStringVal const&)::t, v42, v43, v44, v45, (uint64_t)v55);
    goto LABEL_25;
  }
  v3 = a3;
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_25:
    rtc::webrtc_checks_impl::MakeVal<webrtc::DataRate,(std::string *)0>((char *)&v54, v3);
    rtc::webrtc_checks_impl::ToStringVal::ToStringVal(&v52, (const rtc::webrtc_checks_impl::ToStringVal *)&v54);
    v53 = &v51;
    rtc::webrtc_checks_impl::ToStringVal::~ToStringVal((void **)&v54.__r_.__value_.__l.__data_);
    rtc::webrtc_checks_impl::MakeVal<webrtc::DataRate,(std::string *)0>((char *)v56, 0);
    rtc::webrtc_checks_impl::ToStringVal::ToStringVal(&v54, (const rtc::webrtc_checks_impl::ToStringVal *)v56);
    v55 = &v52;
    rtc::webrtc_checks_impl::ToStringVal::~ToStringVal(v56);
    v50 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc", 171, "padding_rate >= DataRate::Zero()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::ToStringVal,rtc::webrtc_checks_impl::ToStringVal>(char const*,int,char const*,rtc::webrtc_checks_impl::ToStringVal,rtc::webrtc_checks_impl::ToStringVal const&)::t, v46, v47, v48, v49, (uint64_t)v55);
    webrtc::PacingController::MaybeUpdateMediaRateDueToLongQueue((webrtc::PacingController *)v50, v57);
    return;
  }
  if (a3 <= x1_0)
  {
    v13 = a3;
  }
  else
  {
    v13 = x1_0;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
      v13 = x1_0;
    }
  }
  v14 = *((_QWORD *)a1 + 4);
  if (v14 < x1_0 || v13 > v14)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
    if (x1_0 <= v13)
      v23 = v13;
    else
      v23 = x1_0;
    *((_QWORD *)a1 + 4) = llround((double)v23 * 1.1);
  }
  *((_QWORD *)a1 + 11) = x1_0;
  *((_QWORD *)a1 + 13) = v13;
  v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1);
  if (v24 >= *((_QWORD *)a1 + 7))
  {
    *((_QWORD *)a1 + 7) = v24;
    v25.var0 = v24;
    webrtc::PacingController::MaybeUpdateMediaRateDueToLongQueue(a1, v25);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
      return;
LABEL_23:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
    return;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v33, v34, v35, v36, v37, v38, v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
  v40 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = v40;
  v41.var0 = v40;
  webrtc::PacingController::MaybeUpdateMediaRateDueToLongQueue(a1, v41);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    goto LABEL_23;
}

void webrtc::PacingController::MaybeUpdateMediaRateDueToLongQueue(webrtc::PacingController *this, Timestamp a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
  if (!*((_BYTE *)this + 24))
    return;
  v3 = *((_QWORD *)this + 68);
  if (!*((_BYTE *)this + 905))
  {
    v5 = *((_QWORD *)this + 68);
    if (v3 < 1)
      return;
LABEL_12:
    webrtc::PrioritizedPacketQueue::UpdateAverageQueueTime((uint64_t)this + 448, a2);
    v7 = *((int *)this + 130);
    if ((_DWORD)v7)
    {
      v8 = *((_QWORD *)this + 63) / v7;
      v9 = *((_QWORD *)this + 112);
      v10 = 0x7FFFFFFFFFFFFFFFLL;
      if (v9 == 0x7FFFFFFFFFFFFFFFLL)
      {
LABEL_24:
        v12 = 8000000 * v5 / v10;
        if (v12 > *((_QWORD *)this + 11))
        {
          *((_QWORD *)this + 12) = v12;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
        }
        return;
      }
    }
    else
    {
      v8 = 0;
      v9 = *((_QWORD *)this + 112);
      v10 = 0x7FFFFFFFFFFFFFFFLL;
      if (v9 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_24;
    }
    if (v8 != 0x8000000000000000)
    {
      v10 = v9 - v8;
      if (v8 == 0x7FFFFFFFFFFFFFFFLL || v9 == 0x8000000000000000)
        v10 = 0x8000000000000000;
      if (v10 < 1001)
        v10 = 1000;
    }
    goto LABEL_24;
  }
  v4 = *((_QWORD *)this + 5) * *((int *)this + 130);
  v5 = 0x7FFFFFFFFFFFFFFFLL;
  if (v3 == 0x7FFFFFFFFFFFFFFFLL || v4 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_12;
  if (v3 != 0x8000000000000000 && v4 != 0x8000000000000000)
  {
    v5 = v4 + v3;
    if (v4 + v3 >= 1)
      goto LABEL_12;
  }
}

void webrtc::PacingController::EnqueuePacket(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v11;
  unint64_t v12;
  int8x8_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t SendTime;
  int64_t v38;
  Timestamp v39;
  uint64_t Elapsed;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  void *v62;
  Timestamp v63;
  std::string *v64;
  uint64_t v65;
  _QWORD *v66;

  v8 = *a2;
  if (!*(_BYTE *)(*a2 + 128))
  {
    v64 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc", 197, "packet->packet_type()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v65);
    webrtc::PacingController::NextSendTime((webrtc::PacingController *)v64);
    return;
  }
  if (*((_BYTE *)a1 + 29))
    v11 = *(_QWORD *)(v8 + 120) == 1;
  else
    v11 = 0;
  if (!v11 || !*(_BYTE *)(v8 + 185) || !*(_BYTE *)(v8 + 184))
    goto LABEL_33;
  v12 = *(unsigned int *)(v8 + 12);
  v13 = (int8x8_t)a1[73];
  if (!*(_QWORD *)&v13)
    goto LABEL_31;
  v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = *(unsigned int *)(v8 + 12);
    if (*(_QWORD *)&v13 <= v12)
      v15 = v12 % *(_QWORD *)&v13;
  }
  else
  {
    v15 = (v13.i32[0] - 1) & v12;
  }
  v16 = *(uint64_t ***)(a1[72] + 8 * v15);
  if (!v16 || (v17 = *v16) == 0)
  {
LABEL_31:
    webrtc::PrioritizedPacketQueue::RemovePacketsForSsrc((webrtc::PrioritizedPacketQueue *)(a1 + 56), v12, a3, a4, a5, a6, a7, a8);
    v21 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a1[1] + 56))(a1[1], *(unsigned int *)(*a2 + 12));
    if ((v21 & 0xFF00000000) != 0)
      webrtc::PrioritizedPacketQueue::RemovePacketsForSsrc((webrtc::PrioritizedPacketQueue *)(a1 + 56), v21, v22, v23, v24, v25, v26, v27);
    goto LABEL_33;
  }
  if (v14.u32[0] < 2uLL)
  {
    v18 = *(_QWORD *)&v13 - 1;
    while (1)
    {
      v20 = v17[1];
      if (v20 == v12)
      {
        if (*((_DWORD *)v17 + 4) == (_DWORD)v12)
          goto LABEL_30;
      }
      else if ((v20 & v18) != v15)
      {
        goto LABEL_31;
      }
      v17 = (uint64_t *)*v17;
      if (!v17)
        goto LABEL_31;
    }
  }
  while (1)
  {
    v19 = v17[1];
    if (v19 == v12)
      break;
    if (v19 >= *(_QWORD *)&v13)
      v19 %= *(_QWORD *)&v13;
    if (v19 != v15)
      goto LABEL_31;
LABEL_19:
    v17 = (uint64_t *)*v17;
    if (!v17)
      goto LABEL_31;
  }
  if (*((_DWORD *)v17 + 4) != (_DWORD)v12)
    goto LABEL_19;
LABEL_30:
  if (*(int *)(v17[3] + 248) <= 0)
    goto LABEL_31;
LABEL_33:
  if (a1[20] && *((_DWORD *)a1 + 28) == 1)
  {
    if (*((_BYTE *)a1 + 392))
      goto LABEL_39;
    v28 = (*(_QWORD *)(*(_QWORD *)(a1[16] + 8 * (a1[19] / 0x49uLL)) + 56 * (a1[19] % 0x49uLL)) * a1[30] + 4000000)
        / 8000000;
    if (a1[48] < v28)
      v28 = a1[48];
    if (v28 <= *(_QWORD *)(*a2 + 24))
    {
LABEL_39:
      a1[21] = 0x8000000000000000;
      *((_DWORD *)a1 + 28) = 2;
    }
  }
  v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  if (v29 < a1[7])
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
    v29 = a1[7];
  }
  a1[7] = v29;
  if (!*((_DWORD *)a1 + 130))
  {
    SendTime = webrtc::PacingController::NextSendTime((webrtc::PacingController *)a1);
    if (SendTime >= v29)
      v38 = v29;
    else
      v38 = SendTime;
    if ((unint64_t)(SendTime + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
      v39.var0 = v29;
    else
      v39.var0 = v38;
    Elapsed = webrtc::PacingController::UpdateTimeAndGetElapsed((Timestamp *)a1, v39);
    v41 = (a1[12] * Elapsed + 4000000) / 8000000;
    v42 = a1[9];
    v43 = a1[10];
    if (v41 >= v42)
      v41 = a1[9];
    v44 = v42 - v41;
    if (v42 == 0x8000000000000000)
      v44 = 0x8000000000000000;
    if (v41 == 0x8000000000000000 || v42 == 0x7FFFFFFFFFFFFFFFLL)
      v46 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v47 = (a1[13] * Elapsed + 4000000) / 8000000;
    if (v47 >= v43)
      v47 = a1[10];
    v48 = v43 - v47;
    if (v43 == 0x8000000000000000)
      v48 = a1[10];
    if (v47 == 0x8000000000000000 || v43 == 0x7FFFFFFFFFFFFFFFLL)
      v50 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    a1[9] = v46;
    a1[10] = v50;
  }
  v51 = *a2;
  *a2 = 0;
  v66 = (_QWORD *)v51;
  webrtc::PrioritizedPacketQueue::Push((uint64_t)(a1 + 56), v29, (uint64_t *)&v66);
  v52 = v66;
  v66 = 0;
  if (v52)
  {
    v53 = (unsigned int *)v52[22];
    if (v53)
    {
      v54 = v53 + 2;
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
        (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 8))(v53);
    }
    v57 = v52[11];
    if (v57)
    {
      v58 = (unsigned int *)(v57 + 24);
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        v61 = *(_QWORD *)(v57 + 16);
        *(_QWORD *)(v57 + 16) = 0;
        if (v61)
          MEMORY[0x20BD0ADD4](v61, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v57, 0x1010C40EE34DA14);
      }
    }
    v62 = (void *)v52[7];
    if (v62)
    {
      v52[8] = v62;
      operator delete(v62);
    }
    MEMORY[0x20BD0ADEC](v52, 0x1020C4000E59722);
  }
  *((_BYTE *)a1 + 440) = 1;
  v63.var0 = v29;
  webrtc::PacingController::MaybeUpdateMediaRateDueToLongQueue((webrtc::PacingController *)a1, v63);
}

uint64_t webrtc::PacingController::NextSendTime(webrtc::PacingController *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  if (v2 < *((_QWORD *)this + 7))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
    v2 = *((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 7) = v2;
  if (*((_BYTE *)this + 64))
    goto LABEL_6;
  if (*((_DWORD *)this + 28) == 2 && !*((_BYTE *)this + 400))
  {
    if (*((_QWORD *)this + 20))
    {
      v20 = *((_QWORD *)this + 21);
      if (v20 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v20 == 0x8000000000000000)
          return v2;
        else
          return *((_QWORD *)this + 21);
      }
    }
  }
  if (!*((_BYTE *)this + 26))
  {
    if (*((_QWORD *)this + 82))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 78) + ((*((_QWORD *)this + 81) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*((_QWORD *)this + 81) & 0x1FFLL));
      result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 8 * (*(_QWORD *)(v18 + 32) / 0xAAuLL))
                         + 24 * (*(_QWORD *)(v18 + 32) % 0xAAuLL)
                         + 8);
      if ((unint64_t)(result + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
        return result;
    }
  }
  if (!*((_BYTE *)this + 28))
    goto LABEL_37;
  v13 = *((_QWORD *)this + 88);
  if (!*((_BYTE *)this + 448))
  {
    if (v13)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 84) + ((*((_QWORD *)this + 87) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*((_QWORD *)this + 87) & 0x1FFLL));
      result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * (*(_QWORD *)(v19 + 80) / 0xAAuLL))
                         + 24 * (*(_QWORD *)(v19 + 80) % 0xAAuLL)
                         + 8);
      if ((unint64_t)(result + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
        return result;
    }
    goto LABEL_37;
  }
  if (v13)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 84) + ((*((_QWORD *)this + 87) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (*((_QWORD *)this + 87) & 0x1FFLL));
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * (*(_QWORD *)(v14 + 80) / 0xAAuLL))
                    + 24 * (*(_QWORD *)(v14 + 80) % 0xAAuLL)
                    + 8);
    if (*((_QWORD *)this + 94))
    {
LABEL_19:
      v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 90) + ((*((_QWORD *)this + 93) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*((_QWORD *)this + 93) & 0x1FFLL));
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 104) + 8 * (*(_QWORD *)(v16 + 128) / 0xAAuLL))
                      + 24 * (*(_QWORD *)(v16 + 128) % 0xAAuLL)
                      + 8);
      goto LABEL_33;
    }
  }
  else
  {
    v15 = 0x7FFFFFFFFFFFFFFFLL;
    if (*((_QWORD *)this + 94))
      goto LABEL_19;
  }
  v17 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_33:
  if (v17 >= v15)
    result = v15;
  else
    result = v17;
  if ((unint64_t)(result + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
    return result;
LABEL_37:
  if (*((_BYTE *)this + 888) || !*((_BYTE *)this + 440))
  {
LABEL_6:
    v10 = *((_QWORD *)this + 52);
    v11 = v10 + 500000;
    if (v10 == 0x8000000000000000)
      v11 = 0x8000000000000000;
    if (v10 == 0x7FFFFFFFFFFFFFFFLL)
      return 0x7FFFFFFFFFFFFFFFLL;
    else
      return v11;
  }
  v21 = *((_QWORD *)this + 12);
  if (v21 >= 1 && *((_DWORD *)this + 130))
  {
    v22 = 0x7558BDB000uLL / v21;
    if ((int64_t)(0x7558BDB000uLL / v21) >= *((_QWORD *)this + 6))
      v22 = *((_QWORD *)this + 6);
    v23 = 8000000 * *((_QWORD *)this + 9) / v21;
    if (v22 > v23)
      v23 = 0;
  }
  else
  {
    v24 = *((_QWORD *)this + 13);
    if (v24 < 1 || *((_DWORD *)this + 130))
    {
      v25 = *((_QWORD *)this + 51);
      v26 = v25 + 500000;
      if (v25 == 0x8000000000000000)
        v26 = 0x8000000000000000;
      if (v25 == 0x7FFFFFFFFFFFFFFFLL)
        result = 0x7FFFFFFFFFFFFFFFLL;
      else
        result = v26;
      goto LABEL_65;
    }
    v27 = *((_QWORD *)this + 9);
    v28 = *((_QWORD *)this + 10);
    v23 = 8000000 * v27 / v21;
    v29 = 8000000 * v28 / v24;
    if (v23 <= v29)
      v23 = v29;
    if (!v23)
      v23 = (v28 | v27) != 0;
  }
  v30 = *((_QWORD *)this + 51);
  result = 0x7FFFFFFFFFFFFFFFLL;
  if (v30 != 0x7FFFFFFFFFFFFFFFLL && v23 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v31 = v23 == 0x8000000000000000 || v30 == 0x8000000000000000;
    v32 = v23 + v30;
    if (v31)
      result = 0x8000000000000000;
    else
      result = v32;
  }
LABEL_65:
  if (*((_BYTE *)this + 25))
  {
    v33 = *((_QWORD *)this + 52);
    v34 = v33 + 500000;
    if (v33 == 0x8000000000000000)
      v34 = 0x8000000000000000;
    if (v33 != 0x7FFFFFFFFFFFFFFFLL)
      v33 = v34;
    if (v33 < result)
      return v33;
  }
  return result;
}

void webrtc::PacingController::ProcessPackets(Timestamp *this)
{
  int64_t var0;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  BOOL v12;
  BOOL v13;
  std::string::size_type v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  std::string::size_type v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  void *v69;
  _QWORD *v70;
  _QWORD *v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  _BOOL4 v85;
  _BOOL4 v86;
  int64_t v87;
  int v88;
  int64_t SendTime;
  int64_t v90;
  uint64_t v91;
  int64_t v92;
  Timestamp v93;
  uint64_t Elapsed;
  uint64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  uint64_t v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v104;
  Timestamp v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  int64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  __int128 v121;
  uint64_t v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v125;
  void **v126;
  int64_t v127;
  unint64_t v128;
  unint64_t v129;
  char v130;
  std::string *v131;
  int var0_high;
  int v133;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  Timestamp v151;
  unint64_t v152;
  int v153;
  int64_t v155;
  uint64_t v156;
  int64_t v157;
  uint64_t v158;
  int64_t v159;
  std::string::size_type v160;
  std::string::size_type v161;
  _QWORD *v162;
  void *v163;
  _QWORD *v164;
  _QWORD *v165;
  unsigned int *v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  std::string::size_type v177;
  uint64_t v178;
  int64_t v179;
  uint64_t v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int64_t v188;
  BOOL v189;
  unint64_t v190;
  BOOL v191;
  unint64_t v192;
  uint64_t v194;
  uint64_t v196;
  int64_t v197;
  _QWORD *v198;
  unsigned int *v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  void *v208;
  int64_t v209;
  uint64_t v210;
  uint64_t v211;
  std::string::size_type v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t v215;
  _QWORD *v216;
  unsigned int *v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int *v222;
  unsigned int v223;
  unsigned int v224;
  uint64_t v225;
  void *v226;
  _QWORD *v227;
  _QWORD *v228;
  unsigned int *v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  unsigned int v236;
  uint64_t v237;
  void *v238;
  uint64_t v240;
  uint64_t v241;
  _BOOL4 v242;
  _BOOL4 v243;
  int64_t v244;
  uint64_t v245;
  int v246;
  _QWORD *v247;
  unsigned int *v248;
  unsigned int *v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  unsigned int *v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  void *v257;
  Timestamp v258;
  uint64_t v259;
  uint64_t v260;
  int64_t v261;
  int64_t v262;
  unint64_t v263;
  uint64_t v265;
  uint64_t v266;
  int64_t v267;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  std::string::size_type v273;
  std::string::size_type v274;
  std::string::size_type v275;
  uint64_t *v276;
  uint64_t v277;
  _QWORD *v278;
  unsigned int *v279;
  unsigned int *v280;
  unsigned int v281;
  unsigned int v282;
  uint64_t v283;
  unsigned int *v284;
  unsigned int v285;
  unsigned int v286;
  uint64_t v287;
  void *v288;
  int64_t v289;
  unint64_t v290;
  uint64_t v292;
  _QWORD *v293;
  void *v294;
  _QWORD *v295;
  _QWORD *v296;
  unsigned int *v297;
  unsigned int *v298;
  unsigned int v299;
  unsigned int v300;
  uint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  unsigned int v304;
  uint64_t v305;
  void *v306;
  const char *v307;
  int64_t v308;
  int64_t v309;
  const char *v310;
  int64_t v311;
  int64_t v312;
  int64_t v313;
  int64_t v314;
  int64_t v315;
  uint64_t var0_low;
  _QWORD *v317;
  uint64_t v318;
  std::string::size_type v319;
  unsigned int v320;
  Timestamp *v321;
  unint64_t v322;
  int64_t v323;
  int64_t v324;
  int64_t v325;
  int v326;
  int64_t v327;
  int64_t v328;
  int64_t v329;
  std::string::size_type size;
  unsigned int v331;
  char v332;
  _QWORD v333[3];
  _QWORD v334[2];
  _QWORD v335[2];
  _QWORD v336[2];
  _QWORD v337[2];
  _QWORD v338[2];
  _QWORD v339[2];
  _QWORD v340[2];
  _QWORD v341[2];
  _QWORD v342[2];
  _QWORD v343[2];
  _QWORD v344[2];
  _QWORD v345[2];
  _QWORD v346[2];
  _QWORD v347[2];
  _QWORD v348[2];
  _QWORD v349[2];
  _QWORD v350[2];
  _QWORD v351[2];
  _QWORD v352[2];
  _QWORD v353[2];
  _QWORD v354[2];
  _QWORD v355[2];
  _QWORD v356[2];
  _QWORD v357[2];
  _QWORD v358[2];
  _QWORD v359[2];
  _QWORD v360[2];
  _QWORD v361[2];
  _QWORD v362[2];
  _QWORD v363[2];
  _QWORD v364[2];
  _QWORD v365[2];
  _QWORD v366[2];
  _QWORD v367[2];
  _QWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  std::string v371;
  _QWORD *v372;
  _BYTE v373[24];
  _QWORD *v374;
  _QWORD *v375;
  std::string v376;

  var0 = this[1].var0;
  v3 = (*(uint64_t (**)(int64_t))(*(_QWORD *)this->var0 + 16))(this->var0);
  if (v3 < this[7].var0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
    v3 = this[7].var0;
  }
  this[7].var0 = v3;
  v327 = v3;
  if (!BYTE1(this[3].var0) && !LOBYTE(this[8].var0) && !LOBYTE(this[111].var0) && LOBYTE(this[55].var0))
    goto LABEL_132;
  v11 = this[52].var0;
  v12 = v3 == 0x7FFFFFFFFFFFFFFFLL || v11 == 0x8000000000000000;
  if (!v12)
  {
    v13 = v3 == 0x8000000000000000 || v11 == 0x7FFFFFFFFFFFFFFFLL;
    if (v13 || v3 - v11 <= 499999)
      goto LABEL_132;
  }
  if (!LOBYTE(this[55].var0))
    goto LABEL_131;
  (*(void (**)(std::string *__return_ptr, int64_t, uint64_t))(*(_QWORD *)this[1].var0 + 32))(&v371, this[1].var0, 1);
  size = v371.__r_.__value_.__l.__size_;
  v15 = v371.__r_.__value_.__r.__words[0];
  v324 = var0;
  v16 = 0;
  if (v371.__r_.__value_.__r.__words[0] == v371.__r_.__value_.__l.__size_)
    goto LABEL_93;
  do
  {
    v18 = *(_QWORD **)v15;
    v19 = *(_QWORD *)(*(_QWORD *)v15 + 24) + *(unsigned __int8 *)(*(_QWORD *)v15 + 2);
    v20 = v19 == 0x8000000000000000 || v16 == 0x8000000000000000;
    v21 = v19 + v16;
    if (v20)
      v21 = 0x8000000000000000;
    if (v19 == 0x7FFFFFFFFFFFFFFFLL)
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v16 == 0x7FFFFFFFFFFFFFFFLL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v16 = v22;
    v23 = this[1].var0;
    *(_QWORD *)v15 = 0;
    v375 = v18;
    v376.__r_.__value_.__r.__words[0] = 0;
    *(_OWORD *)&v376.__r_.__value_.__r.__words[1] = xmmword_208F08CB0;
    (*(void (**)(int64_t, _QWORD **, std::string *))(*(_QWORD *)v23 + 16))(v23, &v375, &v376);
    v24 = v375;
    v375 = 0;
    if (v24)
    {
      v25 = (unsigned int *)v24[22];
      if (v25)
      {
        v26 = v25 + 2;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
          (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
      }
      v29 = v24[11];
      if (v29)
      {
        v30 = (unsigned int *)(v29 + 24);
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          v33 = *(_QWORD *)(v29 + 16);
          *(_QWORD *)(v29 + 16) = 0;
          if (v33)
            MEMORY[0x20BD0ADD4](v33, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v29, 0x1010C40EE34DA14);
        }
      }
      v34 = (void *)v24[7];
      if (v34)
      {
        v24[8] = v34;
        operator delete(v34);
      }
      MEMORY[0x20BD0ADEC](v24, 0x1020C4000E59722);
    }
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)this[1].var0 + 24))(&v376);
    v42 = v376.__r_.__value_.__l.__size_;
    v41 = (_QWORD *)v376.__r_.__value_.__r.__words[0];
    if (v376.__r_.__value_.__r.__words[0] == v376.__r_.__value_.__l.__size_)
    {
      if (!v376.__r_.__value_.__r.__words[0])
        goto LABEL_24;
LABEL_73:
      v55 = (_QWORD *)v376.__r_.__value_.__l.__size_;
      v17 = v41;
      if ((_QWORD *)v376.__r_.__value_.__l.__size_ != v41)
      {
        do
        {
          v57 = (_QWORD *)*--v55;
          v56 = v57;
          *v55 = 0;
          if (v57)
          {
            v58 = (unsigned int *)v56[22];
            if (v58)
            {
              v59 = v58 + 2;
              do
              {
                v60 = __ldaxr(v59);
                v61 = v60 - 1;
              }
              while (__stlxr(v61, v59));
              if (!v61)
                (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
            }
            v62 = v56[11];
            if (v62)
            {
              v63 = (unsigned int *)(v62 + 24);
              do
              {
                v64 = __ldaxr(v63);
                v65 = v64 - 1;
              }
              while (__stlxr(v65, v63));
              if (!v65)
              {
                v66 = *(_QWORD *)(v62 + 16);
                *(_QWORD *)(v62 + 16) = 0;
                if (v66)
                  MEMORY[0x20BD0ADD4](v66, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v62, 0x1010C40EE34DA14);
              }
            }
            v67 = (void *)v56[7];
            if (v67)
            {
              v56[8] = v67;
              operator delete(v67);
            }
            MEMORY[0x20BD0ADEC](v56, 0x1020C4000E59722);
          }
        }
        while (v55 != v41);
        v17 = (void *)v376.__r_.__value_.__r.__words[0];
      }
      v376.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
      operator delete(v17);
      goto LABEL_24;
    }
    do
    {
      v43 = *v41;
      *v41 = 0;
      v374 = (_QWORD *)v43;
      webrtc::PacingController::EnqueuePacket(this, (uint64_t *)&v374, v35, v36, v37, v38, v39, v40);
      v44 = v374;
      v374 = 0;
      if (v44)
      {
        v45 = (unsigned int *)v44[22];
        if (v45)
        {
          v46 = v45 + 2;
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
            (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
        }
        v49 = v44[11];
        if (v49)
        {
          v50 = (unsigned int *)(v49 + 24);
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v53 = *(_QWORD *)(v49 + 16);
            *(_QWORD *)(v49 + 16) = 0;
            if (v53)
              MEMORY[0x20BD0ADD4](v53, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v49, 0x1010C40EE34DA14);
          }
        }
        v54 = (void *)v44[7];
        if (v54)
        {
          v44[8] = v54;
          operator delete(v54);
        }
        MEMORY[0x20BD0ADEC](v44, 0x1020C4000E59722);
      }
      ++v41;
    }
    while (v41 != (_QWORD *)v42);
    v41 = (_QWORD *)v376.__r_.__value_.__r.__words[0];
    if (v376.__r_.__value_.__r.__words[0])
      goto LABEL_73;
LABEL_24:
    v15 += 8;
  }
  while (v15 != size);
  v15 = v371.__r_.__value_.__r.__words[0];
LABEL_93:
  if (v15)
  {
    v68 = (_QWORD *)v371.__r_.__value_.__l.__size_;
    v69 = (void *)v15;
    if (v371.__r_.__value_.__l.__size_ != v15)
    {
      do
      {
        v71 = (_QWORD *)*--v68;
        v70 = v71;
        *v68 = 0;
        if (v71)
        {
          v72 = (unsigned int *)v70[22];
          if (v72)
          {
            v73 = v72 + 2;
            do
            {
              v74 = __ldaxr(v73);
              v75 = v74 - 1;
            }
            while (__stlxr(v75, v73));
            if (!v75)
              (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
          }
          v76 = v70[11];
          if (v76)
          {
            v77 = (unsigned int *)(v76 + 24);
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
            {
              v80 = *(_QWORD *)(v76 + 16);
              *(_QWORD *)(v76 + 16) = 0;
              if (v80)
                MEMORY[0x20BD0ADD4](v80, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v76, 0x1010C40EE34DA14);
            }
          }
          v81 = (void *)v70[7];
          if (v81)
          {
            v70[8] = v81;
            operator delete(v81);
          }
          MEMORY[0x20BD0ADEC](v70, 0x1020C4000E59722);
        }
      }
      while (v68 != (_QWORD *)v15);
      v69 = (void *)v371.__r_.__value_.__r.__words[0];
    }
    v371.__r_.__value_.__l.__size_ = v15;
    operator delete(v69);
  }
  var0 = v324;
  v3 = v327;
  if (v16 >= 1)
  {
    v82 = 0x7FFFFFFFFFFFFFFFLL;
    v83 = this[9].var0;
    v84 = this[10].var0;
    v85 = v83 == 0x7FFFFFFFFFFFFFFFLL;
    if (v83 != 0x8000000000000000)
      v83 += v16;
    v86 = v84 == 0x7FFFFFFFFFFFFFFFLL;
    if (v16 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v85 = 1;
      v86 = 1;
    }
    if (v85)
      v83 = 0x7FFFFFFFFFFFFFFFLL;
    if ((500000 * this[12].var0 + 4000000) / 8000000 < v83)
      v83 = (500000 * this[12].var0 + 4000000) / 8000000;
    if (v84 != 0x8000000000000000)
      v84 += v16;
    if (!v86)
      v82 = v84;
    v87 = this[13].var0;
    if ((500000 * v87 + 4000000) / 8000000 < v82)
      v82 = (500000 * v87 + 4000000) / 8000000;
    this[9].var0 = v83;
    this[10].var0 = v82;
  }
LABEL_131:
  this[52].var0 = v3;
LABEL_132:
  if (LOBYTE(this[8].var0))
  {
LABEL_133:
    (*(void (**)(int64_t))(*(_QWORD *)var0 + 40))(var0);
    return;
  }
  v88 = this[14].var0;
  v321 = this + 14;
  SendTime = webrtc::PacingController::NextSendTime((webrtc::PacingController *)this);
  v90 = SendTime;
  if (v3 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v91 = 1000;
    if (v88 != 2)
      v91 = 0;
    v92 = v91 + v3;
    if (v3 == 0x8000000000000000)
      v92 = 0x8000000000000000;
    if (v92 < SendTime)
    {
      v93.var0 = v3;
      Elapsed = webrtc::PacingController::UpdateTimeAndGetElapsed(this, v93);
      v95 = (this[12].var0 * Elapsed + 4000000) / 8000000;
      v96 = this[9].var0;
      v97 = this[10].var0;
      if (v95 >= v96)
        v95 = this[9].var0;
      v98 = v96 - v95;
      if (v96 == 0x8000000000000000)
        v98 = this[9].var0;
      if (v95 == 0x8000000000000000 || v96 == 0x7FFFFFFFFFFFFFFFLL)
        v100 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v100 = v98;
      v101 = (this[13].var0 * Elapsed + 4000000) / 8000000;
      if (v101 >= v97)
        v101 = this[10].var0;
      v102 = v97 - v101;
      if (v97 == 0x8000000000000000)
        v102 = this[10].var0;
      if (v101 == 0x8000000000000000 || v97 == 0x7FFFFFFFFFFFFFFFLL)
        v104 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v104 = v102;
      this[9].var0 = v100;
      this[10].var0 = v104;
      goto LABEL_133;
    }
  }
  v105.var0 = SendTime;
  v106 = webrtc::PacingController::UpdateTimeAndGetElapsed(this, v105);
  if (v106 >= 1)
  {
    v111 = (this[12].var0 * v106 + 4000000) / 8000000;
    v112 = this[9].var0;
    v113 = this[10].var0;
    if (v111 >= v112)
      v111 = this[9].var0;
    v114 = v112 - v111;
    if (v112 == 0x8000000000000000)
      v114 = 0x8000000000000000;
    v12 = v111 == 0x8000000000000000;
    v115 = 0x7FFFFFFFFFFFFFFFLL;
    if (v12 || v112 == 0x7FFFFFFFFFFFFFFFLL)
      v117 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v117 = v114;
    v118 = (this[13].var0 * v106 + 4000000) / 8000000;
    if (v118 >= v113)
      v118 = this[10].var0;
    v119 = v113 - v118;
    if (v113 == 0x8000000000000000)
      v119 = this[10].var0;
    if (v118 != 0x8000000000000000 && v113 != 0x7FFFFFFFFFFFFFFFLL)
      v115 = v119;
    this[9].var0 = v117;
    this[10].var0 = v115;
  }
  *(_QWORD *)v373 = 0;
  v121 = xmmword_208F08CB0;
  *(_OWORD *)&v373[8] = xmmword_208F08CB0;
  if (LODWORD(v321->var0) != 2)
    goto LABEL_218;
  v122 = this[20].var0;
  if (!v122)
  {
    v130 = 0;
    goto LABEL_199;
  }
  v123 = this[21].var0;
  if ((unint64_t)(v123 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
    goto LABEL_195;
  v124 = v3 - v123;
  if (v3 == 0x8000000000000000)
    v124 = 0x8000000000000000;
  v125 = v3 == 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v124;
  if (v125 <= this[39].var0)
  {
LABEL_195:
    v129 = *(_QWORD *)(this[16].var0 + 8 * (this[19].var0 / 0x49uLL)) + 56 * (this[19].var0 % 0x49uLL);
    *(_OWORD *)&v371.__r_.__value_.__l.__data_ = *(_OWORD *)v129;
    LODWORD(v371.__r_.__value_.__r.__words[2]) = *(_DWORD *)(v129 + 16);
    HIDWORD(v371.__r_.__value_.__r.__words[2]) = *(_DWORD *)(v129 + 28);
    v130 = 1;
    v131 = &v371;
    goto LABEL_200;
  }
  v126 = (void **)this[16].var0;
  v127 = this[19].var0;
  if (*(void **)((char *)v126
                + (((unint64_t)(((unint64_t)v127 * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8)))
  {
    --v122;
    v128 = v127 + 1;
    this[19].var0 = v128;
    this[20].var0 = v122;
    if (v128 >= 0x92)
    {
      operator delete(*v126);
      v121 = xmmword_208F08CB0;
      this[16].var0 += 8;
      v122 = this[20].var0;
      this[19].var0 -= 73;
    }
    if (v122)
      goto LABEL_195;
    v130 = 0;
    LODWORD(v321->var0) = 1;
LABEL_199:
    v371.__r_.__value_.__s.__data_[0] = 0;
    v131 = &v376;
LABEL_200:
    LOBYTE(v372) = v130;
    v376.__r_.__value_.__r.__words[0] = 0;
    *(_OWORD *)&v376.__r_.__value_.__r.__words[1] = v121;
    *(_OWORD *)v373 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
    *(_QWORD *)&v373[16] = *((_QWORD *)&v131->__r_.__value_.__l + 2);
    if (*(_DWORD *)&v373[8] != -1)
    {
      if (v122)
        v122 = (this[30].var0
              * *(_QWORD *)(*(_QWORD *)(this[16].var0 + 8 * (this[19].var0 / 0x49uLL)) + 56 * (this[19].var0 % 0x49uLL))
              + 4000000)
             / 8000000;
      v326 = 1;
      v323 = v122;
      v325 = var0;
      var0_high = HIDWORD(this[113].var0);
      if (var0_high < 1)
      {
LABEL_204:
        v133 = 0;
        v134 = 0;
        v320 = 0;
        v331 = 0;
LABEL_205:
        if (v133 >= var0_high)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
          {
            var0 = v325;
          }
          else
          {
            v333[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/"
                      "pacing/pacing_controller.cc";
            v333[1] = 4315;
            v333[2] = &v332;
            v334[0] = "PacingController exceeded max iterations in send-loop. Debug info: ";
            v334[1] = v333;
            v335[0] = " packets sent = ";
            v335[1] = v334;
            v336[0] = v331;
            v336[1] = v335;
            v337[0] = ", padding packets generated = ";
            v337[1] = v336;
            v338[0] = v320;
            v338[1] = v337;
            v339[0] = ", bytes sent = ";
            v339[1] = v338;
            v340[0] = v134;
            v340[1] = v339;
            v341[0] = ", probing = ";
            if (v326)
              v307 = "true";
            else
              v307 = "false";
            v341[1] = v340;
            v342[0] = v307;
            v342[1] = v341;
            v343[0] = ", recommended_probe_size = ";
            v343[1] = v342;
            v344[0] = v323;
            v344[1] = v343;
            v345[0] = ", now = ";
            v345[1] = v344;
            v346[0] = v3;
            v346[1] = v345;
            v347[0] = ", target_send_time = ";
            v347[1] = v346;
            v348[0] = v90;
            v348[1] = v347;
            v349[0] = ", last_process_time = ";
            v308 = this[51].var0;
            v309 = this[52].var0;
            v349[1] = v348;
            v350[0] = v308;
            v350[1] = v349;
            v351[0] = ", last_send_time = ";
            v351[1] = v350;
            v352[0] = v309;
            v352[1] = v351;
            v353[0] = ", paused = ";
            if (LOBYTE(this[8].var0))
              v310 = "true";
            else
              v310 = "false";
            v353[1] = v352;
            v354[0] = v310;
            v354[1] = v353;
            v355[0] = ", media_debt = ";
            v311 = this[9].var0;
            v312 = this[10].var0;
            v355[1] = v354;
            v356[0] = v311;
            v356[1] = v355;
            v357[0] = ", padding_debt = ";
            v357[1] = v356;
            v358[0] = v312;
            v358[1] = v357;
            v359[0] = ", pacing_rate = ";
            v313 = this[11].var0;
            v314 = this[12].var0;
            v359[1] = v358;
            v360[0] = v313;
            v360[1] = v359;
            v361[0] = ", adjusted_media_rate = ";
            v361[1] = v360;
            v362[0] = v314;
            v362[1] = v361;
            v363[0] = ", padding_rate = ";
            v315 = this[13].var0;
            v363[1] = v362;
            v364[0] = v315;
            v364[1] = v363;
            v365[0] = ", queue size (packets) = ";
            var0_low = LODWORD(this[65].var0);
            v365[1] = v364;
            v366[0] = var0_low;
            v366[1] = v365;
            v367[0] = ", queue size (payload bytes) = ";
            v367[1] = v366;
            webrtc::ToString(this[68].var0, (char *)&v376);
            if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v371, v376.__r_.__value_.__l.__data_, v376.__r_.__value_.__l.__size_);
              v317 = v367;
              v372 = v367;
              if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v376.__r_.__value_.__l.__data_);
                v317 = v372;
              }
            }
            else
            {
              v371 = v376;
              v317 = v367;
              v372 = v367;
            }
            v318 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v317[1] + 8) + 8) + 8)
                                                                                         + 8)
                                                                             + 8)
                                                                 + 8)
                                                     + 8)
                                         + 8)
                             + 8);
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal const&)::t, **(_QWORD **)(v318 + 8), **(_QWORD **)(*(_QWORD *)(v318 + 8) + 8), **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v318 + 8) + 8) + 8), **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v318 + 8) + 8) + 8) + 8), **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v318 + 8) + 8) + 8) + 8) + 8), **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v318 + 8) + 8) + 8) + 8)+ 8)+ 8), **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v318 + 8) + 8)+ 8)+ 8)+ 8)+ 8)+ 8), **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v318 + 8) + 8) + 8) + 8) + 8) + 8) + 8) + 8) + 8) + 8) + 8) + 8) + 8) + 8) + 8) + 8) + 8)+ 8)+ 8)+ 8)
                                                              + 8)
                                                  + 8)
                                      + 8)
                          + 8));
            if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v371.__r_.__value_.__l.__data_);
            var0 = v325;
            v3 = v327;
          }
          this[51].var0 = v3;
          this[52].var0 = v3;
        }
        else
        {
          if (v326)
          {
            LOBYTE(this[50].var0) = v134 == 0;
            if (v134)
            {
              v140 = (*(uint64_t (**)(int64_t))(*(_QWORD *)this->var0 + 16))(this->var0);
              if (v140 < this[7].var0)
              {
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v141, v142, v135, v136, v137, v138, v139, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
                v140 = this[7].var0;
              }
              this[7].var0 = v140;
              webrtc::BitrateProber::ProbeSent((uint64_t)v321, v140, v134, v135, v136, v137, v138, v139);
            }
          }
          v143 = (*(uint64_t (**)(int64_t))(*(_QWORD *)this->var0 + 16))(this->var0);
          if (v143 < this[7].var0)
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v144, v145, v146, v147, v148, v149, v150, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/pacing_controller.cc");
            v143 = this[7].var0;
          }
          this[7].var0 = v143;
          v151.var0 = v143;
          webrtc::PacingController::MaybeUpdateMediaRateDueToLongQueue((webrtc::PacingController *)this, v151);
          var0 = v325;
        }
        goto LABEL_133;
      }
LABEL_219:
      v133 = 0;
      v331 = 0;
      v320 = 0;
      v134 = 0;
      if (v3 == 0x8000000000000000)
        v152 = 0x8000000000000000;
      else
        v152 = v3 - 50000;
      v322 = v152;
      while (2)
      {
        v153 = *(_DWORD *)&v373[8];
        if (*(_DWORD *)&v373[8] == -1 || *(_DWORD *)&v373[20] != 0)
        {
LABEL_227:
          if (!LODWORD(this[65].var0))
            goto LABEL_274;
          if (!BYTE2(this[3].var0))
          {
            if (this[82].var0)
            {
              v176 = *(_QWORD *)(*(_QWORD *)(this[78].var0
                                           + (((unint64_t)this[81].var0 >> 6) & 0x3FFFFFFFFFFFFF8))
                               + 8 * (this[81].var0 & 0x1FF));
              v157 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v176 + 8) + 8 * (*(_QWORD *)(v176 + 32) / 0xAAuLL))
                               + 24 * (*(_QWORD *)(v176 + 32) % 0xAAuLL)
                               + 8);
              if ((unint64_t)(v157 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
                goto LABEL_271;
            }
          }
          if (!BYTE4(this[3].var0))
            goto LABEL_270;
          v155 = this[88].var0;
          if (LOBYTE(this[56].var0))
          {
            if (v155)
            {
              v156 = *(_QWORD *)(*(_QWORD *)(this[84].var0
                                           + (((unint64_t)this[87].var0 >> 6) & 0x3FFFFFFFFFFFFF8))
                               + 8 * (this[87].var0 & 0x1FF));
              v157 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v156 + 56) + 8 * (*(_QWORD *)(v156 + 80) / 0xAAuLL))
                               + 24 * (*(_QWORD *)(v156 + 80) % 0xAAuLL)
                               + 8);
              if (this[94].var0)
                goto LABEL_233;
LABEL_468:
              if ((unint64_t)(v157 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
                goto LABEL_270;
            }
            else
            {
              v157 = 0x7FFFFFFFFFFFFFFFLL;
              if (!this[94].var0)
                goto LABEL_468;
LABEL_233:
              v158 = *(_QWORD *)(*(_QWORD *)(this[90].var0
                                           + (((unint64_t)this[93].var0 >> 6) & 0x3FFFFFFFFFFFFF8))
                               + 8 * (this[93].var0 & 0x1FF));
              v159 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v158 + 104) + 8 * (*(_QWORD *)(v158 + 128) / 0xAAuLL))
                               + 24 * (*(_QWORD *)(v158 + 128) % 0xAAuLL)
                               + 8);
              if (v159 < v157)
                v157 = v159;
              if ((unint64_t)(v157 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
LABEL_270:
                v157 = 0x8000000000000000;
            }
          }
          else
          {
            if (!v155)
              goto LABEL_270;
            v178 = *(_QWORD *)(*(_QWORD *)(this[84].var0 + (((unint64_t)this[87].var0 >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * (this[87].var0 & 0x1FF));
            v157 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v178 + 56) + 8 * (*(_QWORD *)(v178 + 80) / 0xAAuLL))
                             + 24 * (*(_QWORD *)(v178 + 80) % 0xAAuLL)
                             + 8);
            if ((unint64_t)(v157 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
              goto LABEL_270;
          }
          if (v153 != -1 || (unint64_t)(v157 - 0x7FFFFFFFFFFFFFFFLL) > 1)
            goto LABEL_305;
LABEL_271:
          if (LOBYTE(this[111].var0))
            goto LABEL_274;
          if (v3 > v90 || this[6].var0)
            goto LABEL_305;
          v181 = 8000000 * this[9].var0 / this[12].var0;
          v182 = v181 == 0x8000000000000000 || v3 == 0x8000000000000000;
          v183 = v181 + v3;
          if (v182)
            v183 = 0x8000000000000000;
          v184 = v181 == 0x7FFFFFFFFFFFFFFFLL || v3 == 0x7FFFFFFFFFFFFFFFLL;
          v185 = v184 ? 0x7FFFFFFFFFFFFFFFLL : v183;
          if (v185 > v90)
          {
LABEL_274:
            v376.__r_.__value_.__r.__words[0] = 0;
            if (v3 == 0x7FFFFFFFFFFFFFFFLL)
              goto LABEL_281;
          }
          else
          {
LABEL_305:
            webrtc::PrioritizedPacketQueue::Pop((webrtc::PrioritizedPacketQueue *)&this[56], v107, v108, v109, v110, &v376);
            v177 = v376.__r_.__value_.__r.__words[0];
            if (v376.__r_.__value_.__r.__words[0])
              goto LABEL_306;
LABEL_266:
            if (v3 == 0x7FFFFFFFFFFFFFFFLL)
            {
LABEL_281:
              v90 = 0x7FFFFFFFFFFFFFFFLL;
              if (v3 != 0x7FFFFFFFFFFFFFFFLL)
                goto LABEL_282;
LABEL_283:
              v179 = this[51].var0;
              if (v179 <= v90)
                v179 = v90;
              this[51].var0 = v179;
              if (!LODWORD(this[65].var0))
                goto LABEL_286;
LABEL_426:
              v246 = 6;
LABEL_427:
              v247 = (_QWORD *)v376.__r_.__value_.__r.__words[0];
              v376.__r_.__value_.__r.__words[0] = 0;
              if (v247)
              {
                v248 = (unsigned int *)v247[22];
                if (v248)
                {
                  v249 = v248 + 2;
                  do
                  {
                    v250 = __ldaxr(v249);
                    v251 = v250 - 1;
                  }
                  while (__stlxr(v251, v249));
                  if (!v251)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v248 + 8))(v248);
                }
                v252 = v247[11];
                if (v252)
                {
                  v253 = (unsigned int *)(v252 + 24);
                  do
                  {
                    v254 = __ldaxr(v253);
                    v255 = v254 - 1;
                  }
                  while (__stlxr(v255, v253));
                  if (!v255)
                  {
                    v256 = *(_QWORD *)(v252 + 16);
                    *(_QWORD *)(v252 + 16) = 0;
                    if (v256)
                      MEMORY[0x20BD0ADD4](v256, 0x1000C8077774924);
                    MEMORY[0x20BD0ADEC](v252, 0x1010C40EE34DA14);
                  }
                }
                v257 = (void *)v247[7];
                if (v257)
                {
                  v247[8] = v257;
                  operator delete(v257);
                }
                MEMORY[0x20BD0ADEC](v247, 0x1020C4000E59722);
              }
              var0_high = HIDWORD(this[113].var0);
              if (v246 == 6)
                goto LABEL_205;
              if (++v133 >= var0_high)
                goto LABEL_205;
              continue;
            }
          }
          if (v90 == 0x8000000000000000)
            goto LABEL_281;
          if (v3 != 0x8000000000000000 && v90 != 0x7FFFFFFFFFFFFFFFLL && v3 - v90 > 50000)
          {
LABEL_282:
            v90 = v322;
            goto LABEL_283;
          }
          if (LODWORD(this[65].var0))
            goto LABEL_426;
LABEL_286:
          if (LOBYTE(this[111].var0))
            goto LABEL_426;
          if (v323)
          {
            v180 = v323 - v134;
            if (v323 <= v134)
              goto LABEL_426;
            if (v134 == 0x8000000000000000)
            {
              v180 = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_474;
            }
          }
          else
          {
            v270 = this[13].var0;
            if (v270 < 1 || this[10].var0)
              goto LABEL_426;
            v180 = (5000 * v270 + 4000000) / 8000000;
          }
          if (v180 < 1)
            goto LABEL_426;
LABEL_474:
          v329 = v134;
          (*(void (**)(std::string *__return_ptr, int64_t, uint64_t))(*(_QWORD *)this[1].var0 + 32))(&v371, this[1].var0, v180);
          v273 = v371.__r_.__value_.__l.__size_;
          v274 = v371.__r_.__value_.__r.__words[0];
          v319 = v371.__r_.__value_.__r.__words[0];
          if (v371.__r_.__value_.__r.__words[0] == v371.__r_.__value_.__l.__size_)
          {
            v246 = 0;
            v289 = this[10].var0;
            v290 = v289 + v180;
            if (v289 == 0x8000000000000000)
              v290 = 0x8000000000000000;
            if (v289 == 0x7FFFFFFFFFFFFFFFLL || v180 == 0x7FFFFFFFFFFFFFFFLL)
              v292 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v292 = v290;
            if ((500000 * this[13].var0 + 4000000) / 8000000 < v292)
              v292 = (500000 * this[13].var0 + 4000000) / 8000000;
            this[10].var0 = v292;
            if (!v274)
            {
LABEL_527:
              v3 = v327;
              v134 = v329;
              if (v319 == v273)
                goto LABEL_426;
              goto LABEL_427;
            }
          }
          else
          {
            v275 = v371.__r_.__value_.__l.__size_ - v371.__r_.__value_.__r.__words[0];
            v276 = (uint64_t *)v371.__r_.__value_.__r.__words[0];
            do
            {
              v277 = *v276;
              *v276 = 0;
              v370 = (_QWORD *)v277;
              webrtc::PacingController::EnqueuePacket(this, (uint64_t *)&v370, v271, v272, v107, v108, v109, v110);
              v278 = v370;
              v370 = 0;
              if (v278)
              {
                v279 = (unsigned int *)v278[22];
                if (v279)
                {
                  v280 = v279 + 2;
                  do
                  {
                    v281 = __ldaxr(v280);
                    v282 = v281 - 1;
                  }
                  while (__stlxr(v282, v280));
                  if (!v282)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v279 + 8))(v279);
                }
                v283 = v278[11];
                if (v283)
                {
                  v284 = (unsigned int *)(v283 + 24);
                  do
                  {
                    v285 = __ldaxr(v284);
                    v286 = v285 - 1;
                  }
                  while (__stlxr(v286, v284));
                  if (!v286)
                  {
                    v287 = *(_QWORD *)(v283 + 16);
                    *(_QWORD *)(v283 + 16) = 0;
                    if (v287)
                      MEMORY[0x20BD0ADD4](v287, 0x1000C8077774924);
                    MEMORY[0x20BD0ADEC](v283, 0x1010C40EE34DA14);
                  }
                }
                v288 = (void *)v278[7];
                if (v288)
                {
                  v278[8] = v288;
                  operator delete(v288);
                }
                MEMORY[0x20BD0ADEC](v278, 0x1020C4000E59722);
              }
              ++v276;
            }
            while (v276 != (uint64_t *)v273);
            v320 += v275 >> 3;
            v246 = 8;
            v274 = v371.__r_.__value_.__r.__words[0];
            if (!v371.__r_.__value_.__r.__words[0])
              goto LABEL_527;
          }
          v293 = (_QWORD *)v371.__r_.__value_.__l.__size_;
          v294 = (void *)v274;
          if (v371.__r_.__value_.__l.__size_ != v274)
          {
            do
            {
              v296 = (_QWORD *)*--v293;
              v295 = v296;
              *v293 = 0;
              if (v296)
              {
                v297 = (unsigned int *)v295[22];
                if (v297)
                {
                  v298 = v297 + 2;
                  do
                  {
                    v299 = __ldaxr(v298);
                    v300 = v299 - 1;
                  }
                  while (__stlxr(v300, v298));
                  if (!v300)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v297 + 8))(v297);
                }
                v301 = v295[11];
                if (v301)
                {
                  v302 = (unsigned int *)(v301 + 24);
                  do
                  {
                    v303 = __ldaxr(v302);
                    v304 = v303 - 1;
                  }
                  while (__stlxr(v304, v302));
                  if (!v304)
                  {
                    v305 = *(_QWORD *)(v301 + 16);
                    *(_QWORD *)(v301 + 16) = 0;
                    if (v305)
                      MEMORY[0x20BD0ADD4](v305, 0x1000C8077774924);
                    MEMORY[0x20BD0ADEC](v301, 0x1010C40EE34DA14);
                  }
                }
                v306 = (void *)v295[7];
                if (v306)
                {
                  v295[8] = v306;
                  operator delete(v306);
                }
                MEMORY[0x20BD0ADEC](v295, 0x1020C4000E59722);
              }
            }
            while (v293 != (_QWORD *)v274);
            v294 = (void *)v371.__r_.__value_.__r.__words[0];
          }
          v371.__r_.__value_.__l.__size_ = v274;
          operator delete(v294);
          goto LABEL_527;
        }
        break;
      }
      (*(void (**)(std::string *__return_ptr, int64_t, uint64_t))(*(_QWORD *)this[1].var0 + 32))(&v371, this[1].var0, 1);
      if (v371.__r_.__value_.__r.__words[0] == v371.__r_.__value_.__l.__size_)
      {
        if (v371.__r_.__value_.__r.__words[0])
        {
          v371.__r_.__value_.__l.__size_ = v371.__r_.__value_.__r.__words[0];
          operator delete(v371.__r_.__value_.__l.__data_);
        }
        goto LABEL_227;
      }
      v160 = *(_QWORD *)v371.__r_.__value_.__l.__data_;
      *(_QWORD *)v371.__r_.__value_.__l.__data_ = 0;
      v376.__r_.__value_.__r.__words[0] = v160;
      v161 = v371.__r_.__value_.__r.__words[0];
      if (v371.__r_.__value_.__r.__words[0])
      {
        v162 = (_QWORD *)v371.__r_.__value_.__l.__size_;
        v163 = (void *)v371.__r_.__value_.__r.__words[0];
        if (v371.__r_.__value_.__l.__size_ != v371.__r_.__value_.__r.__words[0])
        {
          do
          {
            v165 = (_QWORD *)*--v162;
            v164 = v165;
            *v162 = 0;
            if (v165)
            {
              v166 = (unsigned int *)v164[22];
              if (v166)
              {
                v167 = v166 + 2;
                do
                {
                  v168 = __ldaxr(v167);
                  v169 = v168 - 1;
                }
                while (__stlxr(v169, v167));
                if (!v169)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v166 + 8))(v166);
              }
              v170 = v164[11];
              if (v170)
              {
                v171 = (unsigned int *)(v170 + 24);
                do
                {
                  v172 = __ldaxr(v171);
                  v173 = v172 - 1;
                }
                while (__stlxr(v173, v171));
                if (!v173)
                {
                  v174 = *(_QWORD *)(v170 + 16);
                  *(_QWORD *)(v170 + 16) = 0;
                  if (v174)
                    MEMORY[0x20BD0ADD4](v174, 0x1000C8077774924);
                  MEMORY[0x20BD0ADEC](v170, 0x1010C40EE34DA14);
                }
              }
              v175 = (void *)v164[7];
              if (v175)
              {
                v164[8] = v175;
                operator delete(v175);
              }
              MEMORY[0x20BD0ADEC](v164, 0x1020C4000E59722);
            }
          }
          while (v162 != (_QWORD *)v161);
          v163 = (void *)v371.__r_.__value_.__r.__words[0];
        }
        v371.__r_.__value_.__l.__size_ = v161;
        operator delete(v163);
      }
      v177 = v376.__r_.__value_.__r.__words[0];
      if (!v376.__r_.__value_.__r.__words[0])
        goto LABEL_266;
LABEL_306:
      if (!*(_BYTE *)(v177 + 128))
        goto LABEL_546;
      v186 = *(_QWORD *)(v177 + 24) + *(unsigned __int8 *)(v177 + 2);
      if (BYTE1(this[113].var0))
      {
        v187 = *(_QWORD *)(v177 + 16);
        v188 = this[5].var0;
        v189 = v188 == 0x8000000000000000 || v187 == 0x8000000000000000;
        v190 = v188 + v187;
        if (v189)
          v190 = 0x8000000000000000;
        v191 = v190 == 0x8000000000000000 || v186 == 0x8000000000000000;
        v192 = v190 + v186;
        if (v191)
          v192 = 0x8000000000000000;
        if (v186 == 0x7FFFFFFFFFFFFFFFLL || v190 == 0x7FFFFFFFFFFFFFFFLL)
          v194 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v194 = v192;
        if (v187 == 0x7FFFFFFFFFFFFFFFLL || v188 == 0x7FFFFFFFFFFFFFFFLL)
          v186 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v186 = v194;
      }
      v196 = *(_QWORD *)(v177 + 120);
      v197 = this[1].var0;
      v376.__r_.__value_.__r.__words[0] = 0;
      v369 = (_QWORD *)v177;
      (*(void (**)(int64_t, _QWORD **, _BYTE *))(*(_QWORD *)v197 + 16))(v197, &v369, v373);
      v198 = v369;
      v369 = 0;
      if (v198)
      {
        v199 = (unsigned int *)v198[22];
        if (v199)
        {
          v200 = v199 + 2;
          do
          {
            v201 = __ldaxr(v200);
            v202 = v201 - 1;
          }
          while (__stlxr(v202, v200));
          if (!v202)
            (*(void (**)(unsigned int *))(*(_QWORD *)v199 + 8))(v199);
        }
        v203 = v198[11];
        if (v203)
        {
          v204 = (unsigned int *)(v203 + 24);
          do
          {
            v205 = __ldaxr(v204);
            v206 = v205 - 1;
          }
          while (__stlxr(v206, v204));
          if (!v206)
          {
            v207 = *(_QWORD *)(v203 + 16);
            *(_QWORD *)(v203 + 16) = 0;
            if (v207)
              MEMORY[0x20BD0ADD4](v207, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v203, 0x1010C40EE34DA14);
          }
        }
        v208 = (void *)v198[7];
        if (v208)
        {
          v198[8] = v208;
          operator delete(v208);
        }
        MEMORY[0x20BD0ADEC](v198, 0x1020C4000E59722);
      }
      v328 = v90;
      v209 = v134;
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)this[1].var0 + 24))(&v371);
      v212 = v371.__r_.__value_.__l.__size_;
      v213 = (uint64_t *)v371.__r_.__value_.__r.__words[0];
      if (v371.__r_.__value_.__r.__words[0] == v371.__r_.__value_.__l.__size_)
      {
        if (v371.__r_.__value_.__r.__words[0])
          goto LABEL_348;
LABEL_387:
        v134 = 0x7FFFFFFFFFFFFFFFLL;
        if (v209 != 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_388:
          v3 = v327;
          if (v186 != 0x7FFFFFFFFFFFFFFFLL)
          {
            if (v186 == 0x8000000000000000 || v209 == 0x8000000000000000)
              v134 = 0x8000000000000000;
            else
              v134 = v186 + v209;
          }
          if (v196 != 4)
          {
LABEL_396:
            if (!LOBYTE(this[54].var0))
            {
              LOBYTE(this[54].var0) = 1;
              this[53].var0 = v3;
            }
          }
LABEL_398:
          v90 = v328;
          if (v196)
          {
            if (v186 < 1)
            {
LABEL_420:
              this[52].var0 = v3;
              ++v331;
              if ((v326 & 1) != 0)
              {
                *(_DWORD *)&v373[20] += v186;
                if (v134 >= v323)
                  goto LABEL_426;
                v245 = webrtc::PacingController::NextSendTime((webrtc::PacingController *)this);
                if (v245 >= v3)
                  v90 = v3;
                else
                  v90 = v245;
              }
              else
              {
                v90 = webrtc::PacingController::NextSendTime((webrtc::PacingController *)this);
                if (v90 > v3)
                  goto LABEL_426;
              }
              v258.var0 = v90;
              v259 = webrtc::PacingController::UpdateTimeAndGetElapsed(this, v258);
              v246 = 0;
              v260 = (this[12].var0 * v259 + 4000000) / 8000000;
              v261 = this[9].var0;
              v262 = this[10].var0;
              if (v260 >= v261)
                v260 = this[9].var0;
              v263 = v261 - v260;
              if (v261 == 0x8000000000000000)
                v263 = 0x8000000000000000;
              if (v260 == 0x8000000000000000 || v261 == 0x7FFFFFFFFFFFFFFFLL)
                v265 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v265 = v263;
              v266 = (this[13].var0 * v259 + 4000000) / 8000000;
              if (v266 >= v262)
                v266 = this[10].var0;
              v267 = v262 - v266;
              if (v262 == 0x8000000000000000)
                v267 = this[10].var0;
              if (v266 == 0x8000000000000000 || v262 == 0x7FFFFFFFFFFFFFFFLL)
                v269 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v269 = v267;
              this[9].var0 = v265;
              this[10].var0 = v269;
              goto LABEL_427;
            }
          }
          else if (!LOBYTE(this[113].var0) || v186 <= 0)
          {
            goto LABEL_420;
          }
          v240 = this[9].var0;
          v241 = this[10].var0;
          v242 = v240 == 0x7FFFFFFFFFFFFFFFLL;
          if (v240 != 0x8000000000000000)
            v240 += v186;
          v243 = v241 == 0x7FFFFFFFFFFFFFFFLL;
          if (v186 == 0x7FFFFFFFFFFFFFFFLL)
          {
            v242 = 1;
            v243 = 1;
          }
          if (v242)
            v240 = 0x7FFFFFFFFFFFFFFFLL;
          if ((500000 * this[12].var0 + 4000000) / 8000000 < v240)
            v240 = (500000 * this[12].var0 + 4000000) / 8000000;
          if (v241 != 0x8000000000000000)
            v241 += v186;
          if (v243)
            v241 = 0x7FFFFFFFFFFFFFFFLL;
          v244 = this[13].var0;
          if ((500000 * v244 + 4000000) / 8000000 < v241)
            v241 = (500000 * v244 + 4000000) / 8000000;
          this[9].var0 = v240;
          this[10].var0 = v241;
          goto LABEL_420;
        }
      }
      else
      {
        do
        {
          v215 = *v213;
          *v213 = 0;
          v368 = (_QWORD *)v215;
          webrtc::PacingController::EnqueuePacket(this, (uint64_t *)&v368, v210, v211, v107, v108, v109, v110);
          v216 = v368;
          v368 = 0;
          if (v216)
          {
            v217 = (unsigned int *)v216[22];
            if (v217)
            {
              v218 = v217 + 2;
              do
              {
                v219 = __ldaxr(v218);
                v220 = v219 - 1;
              }
              while (__stlxr(v220, v218));
              if (!v220)
                (*(void (**)(unsigned int *))(*(_QWORD *)v217 + 8))(v217);
            }
            v221 = v216[11];
            if (v221)
            {
              v222 = (unsigned int *)(v221 + 24);
              do
              {
                v223 = __ldaxr(v222);
                v224 = v223 - 1;
              }
              while (__stlxr(v224, v222));
              if (!v224)
              {
                v225 = *(_QWORD *)(v221 + 16);
                *(_QWORD *)(v221 + 16) = 0;
                if (v225)
                  MEMORY[0x20BD0ADD4](v225, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v221, 0x1010C40EE34DA14);
              }
            }
            v226 = (void *)v216[7];
            if (v226)
            {
              v216[8] = v226;
              operator delete(v226);
            }
            MEMORY[0x20BD0ADEC](v216, 0x1020C4000E59722);
          }
          ++v213;
        }
        while (v213 != (uint64_t *)v212);
        v213 = (uint64_t *)v371.__r_.__value_.__r.__words[0];
        if (!v371.__r_.__value_.__r.__words[0])
          goto LABEL_387;
LABEL_348:
        v214 = (uint64_t *)v371.__r_.__value_.__l.__size_;
        if ((uint64_t *)v371.__r_.__value_.__l.__size_ == v213)
        {
          v371.__r_.__value_.__l.__size_ = (std::string::size_type)v213;
          operator delete(v213);
          v134 = 0x7FFFFFFFFFFFFFFFLL;
          if (v209 != 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_388;
        }
        else
        {
          do
          {
            v228 = (_QWORD *)*--v214;
            v227 = v228;
            *v214 = 0;
            if (v228)
            {
              v229 = (unsigned int *)v227[22];
              if (v229)
              {
                v230 = v229 + 2;
                do
                {
                  v231 = __ldaxr(v230);
                  v232 = v231 - 1;
                }
                while (__stlxr(v232, v230));
                if (!v232)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v229 + 8))(v229);
              }
              v233 = v227[11];
              if (v233)
              {
                v234 = (unsigned int *)(v233 + 24);
                do
                {
                  v235 = __ldaxr(v234);
                  v236 = v235 - 1;
                }
                while (__stlxr(v236, v234));
                if (!v236)
                {
                  v237 = *(_QWORD *)(v233 + 16);
                  *(_QWORD *)(v233 + 16) = 0;
                  if (v237)
                    MEMORY[0x20BD0ADD4](v237, 0x1000C8077774924);
                  MEMORY[0x20BD0ADEC](v233, 0x1010C40EE34DA14);
                }
              }
              v238 = (void *)v227[7];
              if (v238)
              {
                v227[8] = v238;
                operator delete(v238);
              }
              MEMORY[0x20BD0ADEC](v227, 0x1020C4000E59722);
            }
          }
          while (v214 != v213);
          v371.__r_.__value_.__l.__size_ = (std::string::size_type)v213;
          operator delete(v371.__r_.__value_.__l.__data_);
          v134 = 0x7FFFFFFFFFFFFFFFLL;
          if (v209 != 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_388;
        }
      }
      v3 = v327;
      if (v196 != 4)
        goto LABEL_396;
      goto LABEL_398;
    }
LABEL_218:
    v326 = 0;
    v323 = 0;
    v325 = var0;
    var0_high = HIDWORD(this[113].var0);
    if (var0_high < 1)
      goto LABEL_204;
    goto LABEL_219;
  }
LABEL_546:
  __break(1u);
}

void webrtc::PrioritizedPacketQueue::~PrioritizedPacketQueue(webrtc::PrioritizedPacketQueue *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  webrtc::PrioritizedPacketQueue::StreamQueue *v10;

  if (*((_QWORD *)this + 54))
  {
    v2 = (char *)this + 416;
    v4 = *((_QWORD *)this + 52);
    v3 = (char *)*((_QWORD *)this + 53);
    v5 = *(_QWORD *)v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *((_QWORD *)this + 54) = 0;
    if (v3 != (char *)this + 416)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  std::deque<long long>::~deque[abi:sn180100]((void **)this + 45);
  std::deque<long long>::~deque[abi:sn180100]((void **)this + 39);
  std::deque<long long>::~deque[abi:sn180100]((void **)this + 33);
  std::deque<long long>::~deque[abi:sn180100]((void **)this + 27);
  std::deque<long long>::~deque[abi:sn180100]((void **)this + 21);
  v7 = (_QWORD *)*((_QWORD *)this + 18);
  if (v7)
  {
    do
    {
      v9 = (_QWORD *)*v7;
      v10 = (webrtc::PrioritizedPacketQueue::StreamQueue *)v7[3];
      v7[3] = 0;
      if (v10)
      {
        webrtc::PrioritizedPacketQueue::StreamQueue::~StreamQueue(v10);
        MEMORY[0x20BD0ADEC]();
      }
      operator delete(v7);
      v7 = v9;
    }
    while (v9);
  }
  v8 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v8)
    operator delete(v8);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    operator delete(*((void **)this + 2));
}

void webrtc::PrioritizedPacketQueue::StreamQueue::~StreamQueue(webrtc::PrioritizedPacketQueue::StreamQueue *this)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  void **v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  v2 = (void **)((char *)this + 192);
  std::deque<webrtc::PrioritizedPacketQueue::QueuedPacket>::clear((_QWORD *)this + 24);
  v3 = (void **)*((_QWORD *)this + 25);
  v4 = (void **)*((_QWORD *)this + 26);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = *((_QWORD *)this + 25);
    v6 = *((_QWORD *)this + 26);
    if (v6 != v7)
      *((_QWORD *)this + 26) = v6 + ((v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v2)
    operator delete(*v2);
  v8 = (void **)((char *)this + 144);
  std::deque<webrtc::PrioritizedPacketQueue::QueuedPacket>::clear((_QWORD *)this + 18);
  v9 = (void **)*((_QWORD *)this + 19);
  v10 = (void **)*((_QWORD *)this + 20);
  if (v9 != v10)
  {
    do
    {
      v11 = *v9++;
      operator delete(v11);
    }
    while (v9 != v10);
    v13 = *((_QWORD *)this + 19);
    v12 = *((_QWORD *)this + 20);
    if (v12 != v13)
      *((_QWORD *)this + 20) = v12 + ((v13 - v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v8)
    operator delete(*v8);
  v14 = (void **)((char *)this + 96);
  std::deque<webrtc::PrioritizedPacketQueue::QueuedPacket>::clear((_QWORD *)this + 12);
  v15 = (void **)*((_QWORD *)this + 13);
  v16 = (void **)*((_QWORD *)this + 14);
  if (v15 != v16)
  {
    do
    {
      v17 = *v15++;
      operator delete(v17);
    }
    while (v15 != v16);
    v19 = *((_QWORD *)this + 13);
    v18 = *((_QWORD *)this + 14);
    if (v18 != v19)
      *((_QWORD *)this + 14) = v18 + ((v19 - v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v14)
    operator delete(*v14);
  v20 = (void **)((char *)this + 48);
  std::deque<webrtc::PrioritizedPacketQueue::QueuedPacket>::clear((_QWORD *)this + 6);
  v21 = (void **)*((_QWORD *)this + 7);
  v22 = (void **)*((_QWORD *)this + 8);
  if (v21 != v22)
  {
    do
    {
      v23 = *v21++;
      operator delete(v23);
    }
    while (v21 != v22);
    v25 = *((_QWORD *)this + 7);
    v24 = *((_QWORD *)this + 8);
    if (v24 != v25)
      *((_QWORD *)this + 8) = v24 + ((v25 - v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v20)
    operator delete(*v20);
  std::deque<webrtc::PrioritizedPacketQueue::QueuedPacket>::clear(this);
  v26 = (void **)*((_QWORD *)this + 1);
  v27 = (void **)*((_QWORD *)this + 2);
  if (v26 != v27)
  {
    do
    {
      v28 = *v26++;
      operator delete(v28);
    }
    while (v26 != v27);
    v30 = *((_QWORD *)this + 1);
    v29 = *((_QWORD *)this + 2);
    if (v29 != v30)
      *((_QWORD *)this + 2) = v29 + ((v30 - v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)this)
    operator delete(*(void **)this);
}

void std::deque<webrtc::PrioritizedPacketQueue::QueuedPacket>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v20 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0xAA];
    v6 = (char *)*v5 + 24 * (v4 % 0xAA);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0xAA] + 24 * ((a1[5] + v4) % 0xAA);
    if (v6 != (char *)v7)
    {
      while (v6)
      {
        v8 = *(_QWORD **)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
        {
          v9 = (unsigned int *)v8[22];
          if (v9)
          {
            v10 = v9 + 2;
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
              (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
          }
          v13 = v8[11];
          if (v13)
          {
            v14 = (unsigned int *)(v13 + 24);
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              v17 = *(_QWORD *)(v13 + 16);
              *(_QWORD *)(v13 + 16) = 0;
              if (v17)
                MEMORY[0x20BD0ADD4](v17, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v13, 0x1010C40EE34DA14);
            }
          }
          v18 = (void *)v8[7];
          if (v18)
          {
            v8[8] = v18;
            operator delete(v18);
          }
          MEMORY[0x20BD0ADEC](v8, 0x1020C4000E59722);
        }
        v6 += 24;
        if (v6 - (_BYTE *)*v5 == 4080)
        {
          v19 = (char *)v5[1];
          ++v5;
          v6 = v19;
        }
        if (v6 == (char *)v7)
        {
          v2 = (void **)a1[1];
          v3 = (void **)a1[2];
          goto LABEL_25;
        }
      }
      __break(1u);
      return;
    }
LABEL_25:
    a1[5] = 0;
    v20 = (char *)v3 - (char *)v2;
    if (v20 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v21 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v20 = v21 - (_QWORD)v2;
      }
      while (v20 > 0x10);
    }
  }
  if (v20 >> 3 == 1)
  {
    v22 = 85;
  }
  else
  {
    if (v20 >> 3 != 2)
      return;
    v22 = 170;
  }
  a1[4] = v22;
}

void **std::deque<webrtc::BitrateProber::ProbeCluster>::~deque[abi:sn180100](void **result)
{
  void **v1;
  void **v2;
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  _BYTE *v15;

  v1 = result;
  v2 = (void **)result[1];
  v3 = (void **)result[2];
  v4 = (char *)v3 - (char *)v2;
  if (v3 == v2)
  {
    v5 = result + 5;
  }
  else
  {
    v5 = result + 5;
    v6 = (unint64_t)result[4];
    v7 = &v2[v6 / 0x49];
    v8 = (unint64_t)*v7;
    v9 = (unint64_t)*v7 + 56 * (v6 % 0x49);
    while ((void *)v9 != (char *)v2[((unint64_t)result[5] + v6) / 0x49]
                        + 56 * (((unint64_t)result[5] + v6) % 0x49))
    {
      if (!v9)
      {
        __break(1u);
        return result;
      }
      v9 += 56;
      if (v9 - v8 == 4088)
      {
        v10 = (unint64_t)v7[1];
        ++v7;
        v8 = v10;
        v9 = v10;
      }
    }
  }
  *v5 = 0;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)v1[2];
      v2 = (void **)((char *)v1[1] + 8);
      v1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v4 >> 3;
  if (v11 == 1)
  {
    v12 = 36;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_15;
    v12 = 73;
  }
  v1[4] = (void *)v12;
LABEL_15:
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = v1[1];
    v14 = v1[2];
    if (v14 != v15)
      v1[2] = &v14[(v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*v1)
    operator delete(*v1);
  return v1;
}

void rtc::webrtc_checks_impl::ToStringVal::~ToStringVal(void **this)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

size_t rtc::webrtc_checks_impl::MakeVal<webrtc::DataRate,(std::string *)0>(char *a1, uint64_t a2)
{
  return webrtc::ToString(a2, a1);
}

std::string *rtc::webrtc_checks_impl::ToStringVal::ToStringVal(std::string *this, const rtc::webrtc_checks_impl::ToStringVal *a2)
{
  std::string *v2;
  __int128 v3;

  v2 = this;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    return v2;
  }
  else
  {
    v3 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  return this;
}

uint64_t webrtc::Packet::operator=(uint64_t a1, int *a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v4 = *a2;
  *(_DWORD *)(a1 + 3) = *(int *)((char *)a2 + 3);
  *(_DWORD *)a1 = v4;
  v5 = a2 + 2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 2);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v6)
    MEMORY[0x20BD0ADD4](v6, 0x1000C8077774924);
  *v5 = 0;
  v5[1] = 0;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  if (*(unsigned __int8 *)(a1 + 144) != *((unsigned __int8 *)a2 + 144))
  {
    if (!*(_BYTE *)(a1 + 144))
    {
      *(_DWORD *)(a1 + 40) = a2[10];
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *((_QWORD *)a2 + 7) = 0;
      *((_QWORD *)a2 + 8) = 0;
      *((_QWORD *)a2 + 6) = 0;
      v18 = *(_OWORD *)(a2 + 22);
      v19 = *(_OWORD *)(a2 + 26);
      v20 = *(_OWORD *)(a2 + 30);
      *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
      *(_OWORD *)(a1 + 120) = v20;
      *(_OWORD *)(a1 + 104) = v19;
      *(_OWORD *)(a1 + 88) = v18;
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 18);
      *(_BYTE *)(a1 + 144) = 1;
      v21 = *((_QWORD *)a2 + 19);
      *((_QWORD *)a2 + 19) = 0;
      v12 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v21;
      if (!v12)
        goto LABEL_15;
LABEL_14:
      MEMORY[0x20BD0ADEC](v12, 0x1060C40C2E02434);
      goto LABEL_15;
    }
    v13 = *(void **)(a1 + 48);
    if (v13)
    {
      *(_QWORD *)(a1 + 56) = v13;
      operator delete(v13);
    }
    *(_BYTE *)(a1 + 144) = 0;
LABEL_13:
    v14 = *((_QWORD *)a2 + 19);
    *((_QWORD *)a2 + 19) = 0;
    v12 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v14;
    if (!v12)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (!*(_BYTE *)(a1 + 144))
    goto LABEL_13;
  v7 = *(void **)(a1 + 48);
  *(_DWORD *)(a1 + 40) = a2[10];
  if (v7)
  {
    *(_QWORD *)(a1 + 56) = v7;
    operator delete(v7);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v8 = *(_OWORD *)(a2 + 26);
  v9 = *(_OWORD *)(a2 + 30);
  v10 = *((_BYTE *)a2 + 136);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 22);
  *(_BYTE *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 18);
  v11 = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = 0;
  v12 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v11;
  if (v12)
    goto LABEL_14;
LABEL_15:
  v15 = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = 0;
  v16 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v15;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return a1;
}

void webrtc::PacketArrivalHistory::Insert(webrtc::PacketArrivalHistory *this, unsigned int a2, int a3)
{
  uint64_t *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  BOOL v19;
  char *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  uint64_t *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void **v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v5 = (uint64_t *)*((_QWORD *)this + 1);
  if (*((_BYTE *)this + 36))
  {
    v6 = *((_DWORD *)this + 8);
    v7 = a2 >= v6;
    v8 = a2 - v6;
    v9 = (_DWORD)v8 != 0 && v7;
    if ((_DWORD)v8 != 0x80000000)
      v9 = (int)v8 >= 0;
    if (!v9)
      v8 |= 0xFFFFFFFF00000000;
    v10 = v8 + *((_QWORD *)this + 3);
  }
  else
  {
    v10 = a2;
  }
  v11 = *v5;
  v12 = *((int *)v5 + 2);
  v13 = *((int *)this + 5);
  *((_QWORD *)this + 3) = v10;
  *((_DWORD *)this + 8) = a2;
  *((_BYTE *)this + 36) = 1;
  v14 = *((_QWORD *)this + 7);
  if (!v14)
  {
    v15 = (_QWORD *)*((_QWORD *)this + 6);
    v20 = (char *)this + 48;
    v21 = (uint64_t *)((char *)this + 48);
    if (!v15)
      goto LABEL_28;
    goto LABEL_21;
  }
  v16 = (char *)this + 48;
  v15 = (_QWORD *)*((_QWORD *)this + 6);
  if (v15)
  {
    v17 = (char *)*((_QWORD *)this + 6);
    do
    {
      v18 = v17;
      v17 = (char *)*((_QWORD *)v17 + 1);
    }
    while (v17);
  }
  else
  {
    do
    {
      v18 = (char *)*((_QWORD *)v16 + 2);
      v19 = *(_QWORD *)v18 == (_QWORD)v16;
      v16 = v18;
    }
    while (v19);
  }
  if (v10 + *((int *)this + 4) * (uint64_t)(int)v13 < *((_QWORD *)v18 + 5))
    return;
  v20 = (char *)this + 48;
  v21 = (uint64_t *)((char *)this + 48);
  if (v15)
  {
LABEL_21:
    v21 = (uint64_t *)v20;
    v22 = v15;
    do
    {
      v23 = v22[4];
      v24 = v10 < v23;
      if (v10 >= v23)
        v25 = v22 + 1;
      else
        v25 = v22;
      if (v24)
        v21 = v22;
      v22 = (_QWORD *)*v25;
    }
    while (*v25);
  }
LABEL_28:
  if (v21 == *((uint64_t **)this + 5))
    goto LABEL_35;
  v26 = *v21;
  if (*v21)
  {
    do
    {
      v27 = v26;
      v26 = *(_QWORD *)(v26 + 8);
    }
    while (v26);
  }
  else
  {
    do
    {
      v27 = v21[2];
      v19 = *(_QWORD *)v27 == (_QWORD)v21;
      v21 = (uint64_t *)v27;
    }
    while (v19);
  }
  v28 = *(_QWORD *)(v27 + 40);
  if (v28 > v10 || v28 + *(int *)(v27 + 56) < v10 + a3)
  {
LABEL_35:
    v29 = v11 * v12 * v13;
    v30 = (uint64_t **)v20;
    v31 = (uint64_t **)v20;
    if (v15)
    {
      v32 = v15;
      while (1)
      {
        while (1)
        {
          v31 = (uint64_t **)v32;
          v33 = v32[4];
          if (v10 >= v33)
            break;
          v32 = *v31;
          v30 = v31;
          if (!*v31)
            goto LABEL_42;
        }
        if (v33 >= v10)
          break;
        v32 = v31[1];
        if (!v32)
        {
          v30 = v31 + 1;
          goto LABEL_42;
        }
      }
    }
    else
    {
LABEL_42:
      v34 = operator new(0x40uLL);
      v34[4] = v10;
      v34[5] = v10;
      v34[6] = v29;
      *((_DWORD *)v34 + 14) = a3;
      *v34 = 0;
      v34[1] = 0;
      v34[2] = v31;
      *v30 = v34;
      v35 = **((_QWORD **)this + 5);
      if (v35)
      {
        *((_QWORD *)this + 5) = v35;
        v36 = *v30;
      }
      else
      {
        v36 = v34;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 6), v36);
      v15 = (_QWORD *)*((_QWORD *)this + 6);
      v14 = *((_QWORD *)this + 7) + 1;
      *((_QWORD *)this + 7) = v14;
    }
    if (v15)
    {
      do
      {
        v37 = (char *)v15;
        v15 = (_QWORD *)v15[1];
      }
      while (v15);
    }
    else
    {
      v38 = v20;
      do
      {
        v37 = (char *)*((_QWORD *)v38 + 2);
        v19 = *(_QWORD *)v37 == (_QWORD)v38;
        v38 = v37;
      }
      while (v19);
    }
    if (v10 == *((_QWORD *)v37 + 5) && v29 == *((_QWORD *)v37 + 6) && *((_DWORD *)v37 + 14) == a3)
    {
      if (v14)
      {
        do
        {
          v40 = (_QWORD *)*((_QWORD *)this + 6);
          v41 = v20;
          if (v40)
          {
            do
            {
              v42 = v40;
              v40 = (_QWORD *)v40[1];
            }
            while (v40);
          }
          else
          {
            do
            {
              v42 = (_QWORD *)v41[2];
              v19 = *v42 == (_QWORD)v41;
              v41 = v42;
            }
            while (v19);
          }
          v43 = *((_QWORD *)this + 5);
          v44 = *(_QWORD *)(v43 + 40);
          if (v44 + *((int *)this + 5) * (uint64_t)*((int *)this + 4) >= v42[5])
            break;
          v45 = (void **)*((_QWORD *)this + 9);
          v46 = *((_QWORD *)this + 12);
          v47 = v45[v46 / 0xAA];
          v48 = v46 % 0xAA;
          if (v44 == v47[3 * (v46 % 0xAA)]
            && *(_QWORD *)(v43 + 48) == v47[3 * v48 + 1]
            && *(_DWORD *)(v43 + 56) == LODWORD(v47[3 * v48 + 2]))
          {
            v49 = *((_QWORD *)this + 13) - 1;
            v50 = v46 + 1;
            *((_QWORD *)this + 12) = v50;
            *((_QWORD *)this + 13) = v49;
            if (v50 >= 0x154)
            {
              operator delete(*v45);
              *((_QWORD *)this + 9) += 8;
              *((_QWORD *)this + 12) -= 170;
              v43 = *((_QWORD *)this + 5);
              v44 = *(_QWORD *)(v43 + 40);
            }
          }
          v51 = (void **)*((_QWORD *)this + 15);
          v52 = *((_QWORD *)this + 18);
          v53 = v51[v52 / 0xAA];
          v54 = v52 % 0xAA;
          if (v44 == v53[3 * (v52 % 0xAA)]
            && *(_QWORD *)(v43 + 48) == v53[3 * v54 + 1]
            && *(_DWORD *)(v43 + 56) == LODWORD(v53[3 * v54 + 2]))
          {
            v55 = *((_QWORD *)this + 19) - 1;
            v56 = v52 + 1;
            *((_QWORD *)this + 18) = v56;
            *((_QWORD *)this + 19) = v55;
            if (v56 >= 0x154)
            {
              operator delete(*v51);
              *((_QWORD *)this + 15) += 8;
              *((_QWORD *)this + 18) -= 170;
              v43 = *((_QWORD *)this + 5);
            }
          }
          v57 = *(_QWORD **)(v43 + 8);
          v58 = (_QWORD *)v43;
          if (v57)
          {
            do
            {
              v59 = v57;
              v57 = (_QWORD *)*v57;
            }
            while (v57);
          }
          else
          {
            do
            {
              v59 = (_QWORD *)v58[2];
              v19 = *v59 == (_QWORD)v58;
              v58 = v59;
            }
            while (!v19);
          }
          *((_QWORD *)this + 5) = v59;
          v39 = (uint64_t *)*((_QWORD *)this + 6);
          --*((_QWORD *)this + 7);
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v39, (uint64_t *)v43);
          operator delete((void *)v43);
        }
        while (*((_QWORD *)this + 7));
      }
      v60 = *((_QWORD *)this + 13);
      while (v60)
      {
        v61 = *((_QWORD *)this + 12);
        v62 = *((_QWORD *)this + 9);
        if (v29 - v10 > *(_QWORD *)(*(_QWORD *)(v62 + 8 * ((v61 + v60 - 1) / 0xAAuLL))
                                   + 24 * ((v61 + v60 - 1) % 0xAAuLL)
                                   + 8)
                       - *(_QWORD *)(*(_QWORD *)(v62 + 8 * ((v61 + v60 - 1) / 0xAAuLL))
                                   + 24 * ((v61 + v60 - 1) % 0xAAuLL)))
          break;
        v63 = *((_QWORD *)this + 10);
        v64 = v63 - v62;
        v19 = v64 == 0;
        v65 = 170 * (v64 >> 3) - 1;
        *((_QWORD *)this + 13) = v60 - 1;
        if (v19)
          v65 = 0;
        v66 = v65 - (v60 + v61) + 1;
        --v60;
        if (v66 >= 0x154)
        {
          operator delete(*(void **)(v63 - 8));
          *((_QWORD *)this + 10) -= 8;
          v60 = *((_QWORD *)this + 13);
        }
      }
      v67 = *((_QWORD *)this + 19);
      if (v67)
      {
        do
        {
          v68 = *((_QWORD *)this + 18);
          v69 = *((_QWORD *)this + 15);
          if (v29 - v10 < *(_QWORD *)(*(_QWORD *)(v69 + 8 * ((v68 + v67 - 1) / 0xAAuLL))
                                     + 24 * ((v68 + v67 - 1) % 0xAAuLL)
                                     + 8)
                         - *(_QWORD *)(*(_QWORD *)(v69 + 8 * ((v68 + v67 - 1) / 0xAAuLL))
                                     + 24 * ((v68 + v67 - 1) % 0xAAuLL)))
            break;
          v70 = *((_QWORD *)this + 16);
          v71 = v70 - v69;
          v19 = v71 == 0;
          v72 = 170 * (v71 >> 3) - 1;
          *((_QWORD *)this + 19) = v67 - 1;
          if (v19)
            v72 = 0;
          v73 = v72 - (v67 + v68) + 1;
          --v67;
          if (v73 >= 0x154)
          {
            operator delete(*(void **)(v70 - 8));
            *((_QWORD *)this + 16) -= 8;
            v67 = *((_QWORD *)this + 19);
          }
        }
        while (v67);
        v60 = *((_QWORD *)this + 13);
      }
      v74 = *((_QWORD *)this + 9);
      v75 = *((_QWORD *)this + 10);
      v76 = 170 * ((v75 - v74) >> 3) - 1;
      if (v75 == v74)
        v76 = 0;
      if (v76 == *((_QWORD *)this + 12) + v60)
      {
        std::deque<webrtc::PacketArrivalHistory::PacketArrival>::__add_back_capacity((uint64_t)this + 64);
        v74 = *((_QWORD *)this + 9);
        v75 = *((_QWORD *)this + 10);
      }
      if (v75 == v74)
        goto LABEL_110;
      v77 = *((_QWORD *)this + 13);
      v78 = v77 + *((_QWORD *)this + 12);
      v79 = *(_QWORD *)(v74 + 8 * (v78 / 0xAA));
      if (!v79)
        goto LABEL_110;
      v80 = *((_QWORD *)this + 15);
      v81 = *((_QWORD *)this + 16);
      v82 = 170 * ((v81 - v80) >> 3) - 1;
      if (v81 == v80)
        v82 = 0;
      v83 = v79 + 24 * (v78 % 0xAA);
      *(_QWORD *)v83 = v10;
      *(_QWORD *)(v83 + 8) = v29;
      *(_DWORD *)(v83 + 16) = a3;
      *((_QWORD *)this + 13) = v77 + 1;
      if (v82 == *((_QWORD *)this + 19) + *((_QWORD *)this + 18))
      {
        std::deque<webrtc::PacketArrivalHistory::PacketArrival>::__add_back_capacity((uint64_t)this + 112);
        v80 = *((_QWORD *)this + 15);
        v81 = *((_QWORD *)this + 16);
      }
      if (v81 == v80
        || (v84 = *((_QWORD *)this + 19),
            v85 = v84 + *((_QWORD *)this + 18),
            (v86 = *(_QWORD *)(v80 + 8 * (v85 / 0xAA))) == 0))
      {
LABEL_110:
        __break(1u);
      }
      else
      {
        v87 = v86 + 24 * (v85 % 0xAA);
        *(_QWORD *)v87 = v10;
        *(_QWORD *)(v87 + 8) = v29;
        *(_DWORD *)(v87 + 16) = a3;
        *((_QWORD *)this + 19) = v84 + 1;
      }
    }
  }
}

void webrtc::PacketArrivalHistory::Reset(webrtc::PacketArrivalHistory *this)
{
  _QWORD *v2;
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  void **v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = (_QWORD *)((char *)this + 48);
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 6));
  *(v2 - 1) = v2;
  *v2 = 0;
  v2[1] = 0;
  v3 = (void **)v2[3];
  v4 = v2[4] - (_QWORD)v3;
  if (v4)
  {
    v5 = (_QWORD *)((char *)this + 104);
    v6 = *((_QWORD *)this + 12);
    v7 = &v3[v6 / 0xAA];
    v8 = (unint64_t)*v7;
    v9 = (unint64_t)*v7 + 24 * (v6 % 0xAA);
    while ((void *)v9 != (char *)v3[(*((_QWORD *)this + 13) + v6) / 0xAA] + 24 * ((*((_QWORD *)this + 13) + v6) % 0xAA))
    {
      if (!v9)
      {
LABEL_32:
        __break(1u);
        return;
      }
      v9 += 24;
      if (v9 - v8 == 4080)
      {
        v10 = (unint64_t)v7[1];
        ++v7;
        v8 = v10;
        v9 = v10;
      }
    }
  }
  else
  {
    v5 = (_QWORD *)((char *)this + 104);
  }
  *v5 = 0;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v11 = *((_QWORD *)this + 10);
      v3 = (void **)(*((_QWORD *)this + 9) + 8);
      *((_QWORD *)this + 9) = v3;
      v4 = v11 - (_QWORD)v3;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v12 = 85;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_15;
    v12 = 170;
  }
  *((_QWORD *)this + 12) = v12;
LABEL_15:
  v13 = (void **)*((_QWORD *)this + 15);
  v14 = *((_QWORD *)this + 16) - (_QWORD)v13;
  if (v14)
  {
    v15 = (_QWORD *)((char *)this + 152);
    v16 = *((_QWORD *)this + 18);
    v17 = &v13[v16 / 0xAA];
    v18 = (unint64_t)*v17;
    v19 = (unint64_t)*v17 + 24 * (v16 % 0xAA);
    while ((void *)v19 != (char *)v13[(*((_QWORD *)this + 19) + v16) / 0xAA]
                         + 24 * ((*((_QWORD *)this + 19) + v16) % 0xAA))
    {
      if (!v19)
        goto LABEL_32;
      v19 += 24;
      if (v19 - v18 == 4080)
      {
        v20 = (unint64_t)v17[1];
        ++v17;
        v18 = v20;
        v19 = v20;
      }
    }
  }
  else
  {
    v15 = (_QWORD *)((char *)this + 152);
  }
  *v15 = 0;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v13);
      v21 = *((_QWORD *)this + 16);
      v13 = (void **)(*((_QWORD *)this + 15) + 8);
      *((_QWORD *)this + 15) = v13;
      v14 = v21 - (_QWORD)v13;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v22 = 85;
  }
  else
  {
    if (v14 >> 3 != 2)
      goto LABEL_29;
    v22 = 170;
  }
  *((_QWORD *)this + 18) = v22;
LABEL_29:
  *((_QWORD *)this + 3) = 0;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
}

uint64_t webrtc::PacketArrivalHistory::GetDelayMs(webrtc::PacketArrivalHistory *this, unsigned int a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;

  if (*((_BYTE *)this + 36))
  {
    v2 = *((_DWORD *)this + 8);
    v3 = a2 >= v2;
    v4 = a2 - v2;
    v5 = (_DWORD)v4 != 0 && v3;
    if ((_DWORD)v4 != 0x80000000)
      v5 = (int)v4 >= 0;
    if (!v5)
      v4 |= 0xFFFFFFFF00000000;
    v6 = v4 + *((_QWORD *)this + 3);
    if (*((_QWORD *)this + 13))
      goto LABEL_10;
  }
  else
  {
    v6 = a2;
    if (*((_QWORD *)this + 13))
    {
LABEL_10:
      v7 = *((int *)this + 5);
      v8 = *((_QWORD *)this + 12);
      v9 = **((_QWORD **)this + 1) * *(int *)(*((_QWORD *)this + 1) + 8) * v7 / v7
         - v6 / v7
         - *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v8 / 0xAA)) + 24 * (v8 % 0xAA) + 8) / v7
         + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v8 / 0xAA)) + 24 * (v8 % 0xAA)) / v7;
      return v9 & ~(v9 >> 31);
    }
  }
  return 0;
}

uint64_t webrtc::PacketArrivalHistory::GetMaxDelayMs(webrtc::PacketArrivalHistory *this)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  int v5;

  if (!*((_QWORD *)this + 19) || !*((_QWORD *)this + 13))
    return 0;
  v1 = *((int *)this + 5);
  v2 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 15) + 8 * (*((_QWORD *)this + 18) / 0xAAuLL))
                + 24 * (*((_QWORD *)this + 18) % 0xAAuLL));
  v3 = *((_QWORD *)this + 12);
  v4 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * (v3 / 0xAA));
  v5 = v2[1] / v1 - (*(_QWORD *)(v4 + 24 * (v3 % 0xAA) + 8) / v1 + *v2 / v1) + *(_QWORD *)(v4 + 24 * (v3 % 0xAA)) / v1;
  return v5 & ~(v5 >> 31);
}

void webrtc::PacketArrivalHistory::~PacketArrivalHistory(void **this)
{
  *this = &off_24C0B86F8;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 14);
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 8);
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(this[6]);
}

{
  *this = &off_24C0B86F8;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 14);
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 8);
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(this[6]);
  JUMPOUT(0x20BD0ADECLL);
}

void std::deque<webrtc::PacketArrivalHistory::PacketArrival>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  BOOL v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  _OWORD *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v30 = *(char **)a1;
    if ((unint64_t)v7 > *(_QWORD *)a1)
    {
      v31 = (uint64_t)&v7[-*(_QWORD *)a1] >> 3;
      if (v31 >= -1)
        v32 = v31 + 1;
      else
        v32 = v31 + 2;
      v33 = v32 >> 1;
      v34 = -v33;
      v35 = &v7[-8 * v33];
      v36 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v33], v7, v5 - v7);
        v7 = *(char **)(a1 + 8);
      }
      v5 = &v35[v36];
      v37 = &v7[8 * v34];
      goto LABEL_32;
    }
    v39 = (v5 - v30) >> 2;
    if (v5 == v30)
      v39 = 1;
    if (v39 >> 61)
      goto LABEL_108;
    v40 = v39 >> 2;
    v41 = 8 * v39;
    v42 = (char *)operator new(8 * v39);
    v43 = &v42[8 * v40];
    v45 = v5 - v7;
    v44 = v5 == v7;
    v5 = v43;
    if (!v44)
    {
      v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
      v46 = v45 - 8;
      if ((unint64_t)(v45 - 8) < 0x38)
      {
        v47 = &v42[8 * v40];
        do
        {
LABEL_91:
          v100 = *(_QWORD *)v7;
          v7 += 8;
          *(_QWORD *)v47 = v100;
          v47 += 8;
        }
        while (v47 != v5);
        goto LABEL_92;
      }
      v93 = &v42[8 * v40];
      v47 = v93;
      if ((unint64_t)(v93 - v7) < 0x20)
        goto LABEL_91;
      v94 = (v46 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v47 = &v43[v95];
      v7 += v95;
      v96 = (__int128 *)(v6 + 3);
      v97 = v93 + 16;
      v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v99 = *v96;
        *(v97 - 1) = *(v96 - 1);
        *v97 = v99;
        v96 += 2;
        v97 += 2;
        v98 -= 4;
      }
      while (v98);
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_91;
    }
LABEL_92:
    *(_QWORD *)a1 = v42;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = &v42[v41];
    if (v30)
    {
      operator delete(v30);
      v5 = *(char **)(a1 + 16);
    }
LABEL_4:
    if (!v5)
    {
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
LABEL_5:
    *(_QWORD *)v5 = v8;
LABEL_10:
    *(_QWORD *)(a1 + 16) += 8;
    return;
  }
  v10 = *(char **)(a1 + 16);
  v9 = *(char **)(a1 + 24);
  v12 = *(char **)a1;
  v11 = *(char **)(a1 + 8);
  v13 = v10 - v11;
  v14 = (v10 - v11) >> 3;
  v15 = (uint64_t)&v9[-*(_QWORD *)a1];
  if (v14 < (unint64_t)(v15 >> 3))
  {
    v16 = operator new(0xFF0uLL);
    v17 = v16;
    if (v9 != v10)
    {
      if (v10)
      {
        *(_QWORD *)v10 = v16;
        goto LABEL_10;
      }
      goto LABEL_107;
    }
    if (v11 == v12)
    {
      v70 = (v9 - v11) >> 2;
      if (v10 == v11)
        v70 = 1;
      if (v70 >> 61)
        goto LABEL_108;
      v71 = (v70 + 3) >> 2;
      v72 = 8 * v70;
      v73 = (char *)operator new(8 * v70);
      v38 = &v73[8 * v71];
      v74 = v38;
      if (v10 != v11)
      {
        v74 = &v38[8 * v14];
        v75 = &v73[8 * v71];
        v76 = v11;
        if ((unint64_t)(v13 - 8) < 0x38)
          goto LABEL_111;
        v77 = &v73[8 * v71];
        v75 = v77;
        v76 = v11;
        if ((unint64_t)(v77 - v11) < 0x20)
          goto LABEL_111;
        v78 = ((unint64_t)(v13 - 8) >> 3) + 1;
        v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v38[v79];
        v76 = &v11[v79];
        v80 = (__int128 *)(v11 + 16);
        v81 = v77 + 16;
        v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v83 = *v80;
          *(v81 - 1) = *(v80 - 1);
          *v81 = v83;
          v80 += 2;
          v81 += 2;
          v82 -= 4;
        }
        while (v82);
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_111:
          do
          {
            v84 = *(_QWORD *)v76;
            v76 += 8;
            *(_QWORD *)v75 = v84;
            v75 += 8;
          }
          while (v75 != v74);
        }
      }
      *(_QWORD *)a1 = v73;
      *(_QWORD *)(a1 + 8) = v38;
      *(_QWORD *)(a1 + 16) = v74;
      *(_QWORD *)(a1 + 24) = &v73[v72];
      if (v11)
      {
        operator delete(v11);
        v38 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v38 = v11;
    }
    *((_QWORD *)v38 - 1) = v17;
    v85 = *(char **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v85 - 8;
    v8 = *((_QWORD *)v85 - 1);
    *(_QWORD *)(a1 + 8) = v85;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v86 = *(char **)a1;
    if ((unint64_t)v85 > *(_QWORD *)a1)
    {
      v87 = (uint64_t)&v85[-*(_QWORD *)a1] >> 3;
      if (v87 >= -1)
        v88 = v87 + 1;
      else
        v88 = v87 + 2;
      v89 = v88 >> 1;
      v90 = -v89;
      v91 = &v85[-8 * v89];
      v92 = v5 - v85;
      if (v5 != v85)
      {
        memmove(&v85[-8 * v89], v85, v5 - v85);
        v85 = *(char **)(a1 + 8);
      }
      v5 = &v91[v92];
      v37 = &v85[8 * v90];
LABEL_32:
      *(_QWORD *)(a1 + 8) = v37;
      *(_QWORD *)(a1 + 16) = v5;
      goto LABEL_5;
    }
    v101 = (v5 - v86) >> 2;
    if (v5 == v86)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v85;
      v44 = v5 == v85;
      v5 = v105;
      if (v44)
        goto LABEL_105;
      v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
      v107 = v106 - 8;
      if ((unint64_t)(v106 - 8) >= 0x38)
      {
        v109 = &v104[8 * v102];
        v108 = v109;
        if ((unint64_t)(v109 - v85) >= 0x20)
        {
          v110 = (v107 >> 3) + 1;
          v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = &v105[v111];
          v112 = &v85[v111];
          v113 = (__int128 *)(v85 + 16);
          v114 = v109 + 16;
          v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116 = *v113;
            *(v114 - 1) = *(v113 - 1);
            *v114 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          v85 = v112;
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_105:
            *(_QWORD *)a1 = v104;
            *(_QWORD *)(a1 + 8) = v105;
            *(_QWORD *)(a1 + 16) = v5;
            *(_QWORD *)(a1 + 24) = &v104[v103];
            if (v86)
            {
              operator delete(v86);
              v5 = *(char **)(a1 + 16);
            }
            goto LABEL_4;
          }
        }
      }
      else
      {
        v108 = &v104[8 * v102];
      }
      do
      {
        v117 = *(_QWORD *)v85;
        v85 += 8;
        *(_QWORD *)v108 = v117;
        v108 += 8;
      }
      while (v108 != v5);
      goto LABEL_105;
    }
LABEL_108:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v18 = v15 >> 2;
  if (v9 == v12)
    v19 = 1;
  else
    v19 = v18;
  if (v19 >> 61)
    goto LABEL_108;
  v20 = (char *)operator new(8 * v19);
  v21 = &v20[8 * v14];
  v22 = &v20[8 * v19];
  v23 = operator new(0xFF0uLL);
  v24 = v23;
  if (v14 != v19)
    goto LABEL_21;
  if (v13 >= 1)
  {
    v25 = v14 + 2;
    if (v14 >= -1)
      v25 = v14 + 1;
    v21 -= 8 * (v25 >> 1);
LABEL_21:
    *(_QWORD *)v21 = v23;
    v26 = v21 + 8;
    if (v10 != v11)
      goto LABEL_48;
    goto LABEL_22;
  }
  v48 = v13 >> 2;
  if (v10 == v11)
    v48 = 1;
  if (v48 >> 61)
    goto LABEL_108;
  v49 = 8 * v48;
  v21 = (char *)operator new(8 * v48);
  operator delete(v20);
  v22 = &v21[v49];
  v50 = *(char **)(a1 + 8);
  v10 = *(char **)(a1 + 16);
  v20 = v21;
  *(_QWORD *)v21 = v24;
  v26 = v21 + 8;
  if (v10 != v50)
  {
    while (1)
    {
LABEL_48:
      if (v21 == v20)
      {
        if (v26 >= v22)
        {
          v55 = (v22 - v21) >> 2;
          if (v22 == v21)
            v55 = 1;
          if (v55 >> 61)
            goto LABEL_108;
          v56 = (v55 + 3) >> 2;
          v57 = 8 * v55;
          v58 = (char *)operator new(8 * v55);
          v20 = v58;
          v51 = &v58[8 * v56];
          v28 = v51;
          v59 = v26 - v21;
          if (v26 != v21)
          {
            v28 = &v51[v59 & 0xFFFFFFFFFFFFFFF8];
            v60 = v59 - 8;
            v61 = &v58[8 * v56];
            v62 = v21;
            if (v60 < 0x38)
              goto LABEL_112;
            v61 = &v58[8 * v56];
            v62 = v21;
            if ((unint64_t)(v61 - v21) < 0x20)
              goto LABEL_112;
            v63 = (v60 >> 3) + 1;
            v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
            v61 = &v51[v64];
            v62 = &v21[v64];
            v65 = (__int128 *)(v21 + 16);
            v66 = &v58[8 * v56 + 16];
            v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v68 = *v65;
              *((_OWORD *)v66 - 1) = *(v65 - 1);
              *(_OWORD *)v66 = v68;
              v65 += 2;
              v66 += 32;
              v67 -= 4;
            }
            while (v67);
            if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_112:
              do
              {
                v69 = *(_QWORD *)v62;
                v62 += 8;
                *(_QWORD *)v61 = v69;
                v61 += 8;
              }
              while (v61 != v28);
            }
          }
          v22 = &v58[v57];
          operator delete(v21);
        }
        else
        {
          v53 = (v22 - v26) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v28 = &v26[8 * (v54 >> 1)];
          v51 = &v21[8 * (v54 >> 1)];
          if (v26 == v21)
          {
            v20 = v26;
          }
          else
          {
            memmove(&v21[8 * (v54 >> 1)], v21, v26 - v21);
            v20 = v21;
          }
        }
      }
      else
      {
        v51 = v21;
        v28 = v26;
      }
      v52 = *((_QWORD *)v10 - 1);
      v10 -= 8;
      *((_QWORD *)v51 - 1) = v52;
      v27 = v51 - 8;
      v26 = v28;
      v21 = v27;
      if (v10 == *(char **)(a1 + 8))
        goto LABEL_23;
    }
  }
LABEL_22:
  v27 = v21;
  v28 = v26;
LABEL_23:
  v29 = *(char **)a1;
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v28;
  *(_QWORD *)(a1 + 24) = v22;
  if (v29)
    operator delete(v29);
}

void webrtc::PacketArrivalTimeMap::AddPacket(webrtc::PacketArrivalTimeMap *this, uint64_t a2, Timestamp a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  Timestamp *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v16 = (Timestamp *)operator new[](0x400uLL);
    v17 = *((_QWORD *)this + 2);
    v18 = *((_QWORD *)this + 3);
    v19 = *(_QWORD *)this;
    if (v17 >= v18)
    {
      *(_QWORD *)this = v16;
      if (!v19)
      {
LABEL_24:
        *((_DWORD *)this + 2) = 127;
        *((_QWORD *)this + 2) = a2;
        *((_QWORD *)this + 3) = a2 + 1;
        v16[a2 & 0x7F] = a3;
        return;
      }
    }
    else
    {
      v20 = *((int *)this + 2);
      do
      {
        v16[v17 & 0x7F] = *(Timestamp *)(v19 + 8 * (v17 & v20));
        ++v17;
      }
      while (v18 != v17);
      *(_QWORD *)this = v16;
    }
    MEMORY[0x20BD0ADD4](v19, 0x1000C8000313F17);
    v16 = *(Timestamp **)this;
    goto LABEL_24;
  }
  v7 = *((_QWORD *)this + 2);
  v8 = *((_QWORD *)this + 3);
  if (v7 <= a2)
  {
    if (v8 <= a2)
    {
      v21 = a2 + 1;
      if (v8 + 0x7FFF > a2)
      {
        if (v7 < a2 - 0x7FFF)
        {
          *((_QWORD *)this + 2) = a2 - 0x7FFF;
          LODWORD(v7) = a2 - 0x7FFF;
        }
        webrtc::PacketArrivalTimeMap::AdjustToSize((uint64_t)this, v21 - v7);
        v22 = *((_DWORD *)this + 2);
        v23 = v22 & *((_DWORD *)this + 6);
        v24 = v22 & a2;
        v25 = *(_QWORD *)this;
        v26 = (void *)(*(_QWORD *)this + 8 * v23);
        if (v23 <= (int)v24)
        {
          v29 = v25 + 8 * (int)v24 - (_QWORD)v26;
          if (v29 < 1)
          {
LABEL_35:
            *((_QWORD *)this + 3) = v21;
            *(Timestamp *)(*(_QWORD *)this + 8 * (int)(*((_DWORD *)this + 2) & a2)) = a3;
            return;
          }
          v24 = ((unint64_t)v29 >> 3) - ((unint64_t)v29 > 7) + 1;
        }
        else
        {
          v27 = v25 + 8 * (v22 + 1) - (_QWORD)v26;
          if (v27 >= 1)
            memset_pattern16(v26, &unk_208F0B600, 8 * (((unint64_t)v27 >> 3) - ((unint64_t)v27 > 7)) + 8);
          if ((int)v24 < 1)
            goto LABEL_35;
          v26 = *(void **)this;
        }
        memset_pattern16(v26, &unk_208F0B600, 8 * v24);
        goto LABEL_35;
      }
      *((_QWORD *)this + 2) = a2;
      *((_QWORD *)this + 3) = v21;
    }
    *(Timestamp *)(v6 + 8 * (int)(*((_DWORD *)this + 2) & a2)) = a3;
    return;
  }
  v9 = v8 - a2;
  if (v8 - a2 <= 0x8000)
  {
    webrtc::PacketArrivalTimeMap::AdjustToSize((uint64_t)this, v9);
    *(Timestamp *)(*(_QWORD *)this + 8 * (int)(*((_DWORD *)this + 2) & a2)) = a3;
    v10 = *((_DWORD *)this + 2);
    v11 = v10 & (a2 + 1);
    v12 = v10 & *((_DWORD *)this + 4);
    v13 = *(_QWORD *)this;
    v14 = (void *)(*(_QWORD *)this + 8 * v11);
    if (v11 <= (int)v12)
    {
      v28 = v13 + 8 * (int)v12 - (_QWORD)v14;
      if (v28 < 1)
      {
LABEL_29:
        *((_QWORD *)this + 2) = a2;
        return;
      }
      v12 = ((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7) + 1;
    }
    else
    {
      v15 = v13 + 8 * (int)(v10 + 1) - (_QWORD)v14;
      if (v15 >= 1)
        memset_pattern16(v14, &unk_208F0B600, 8 * (((unint64_t)v15 >> 3) - ((unint64_t)v15 > 7)) + 8);
      if ((int)v12 < 1)
        goto LABEL_29;
      v14 = *(void **)this;
    }
    memset_pattern16(v14, &unk_208F0B600, 8 * v12);
    goto LABEL_29;
  }
}

uint64_t webrtc::PacketArrivalTimeMap::AdjustToSize(uint64_t this, int a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = this;
  v4 = *(_DWORD *)(this + 8);
  v5 = v4 + 1;
  if (v4 + 1 >= a2)
  {
    v6 = 4 * a2;
    if (4 * a2 <= 128)
      v6 = 128;
    if (v4 < v6)
      return this;
LABEL_16:
    v13 = v4 + 1;
    if (a2 <= 128)
      v14 = 128;
    else
      v14 = a2;
    v15 = 2 * v14;
    if (v4 >= v15)
    {
      do
        v13 /= 2;
      while (v13 > v15);
    }
    v16 = v13 - 1;
    v17 = operator new[](8 * v13);
    v18 = *(_QWORD *)(v3 + 16);
    v19 = *(_QWORD *)(v3 + 24);
    this = *(_QWORD *)v3;
    if (v18 >= v19)
    {
      *(_QWORD *)v3 = v17;
      if (!this)
      {
LABEL_27:
        *(_DWORD *)(v3 + 8) = v16;
        return this;
      }
    }
    else
    {
      v20 = *(int *)(v3 + 8);
      do
      {
        v17[v18 & v16] = *(_QWORD *)(this + 8 * (v18 & v20));
        ++v18;
      }
      while (v19 != v18);
      *(_QWORD *)v3 = v17;
    }
    this = MEMORY[0x20BD0ADD4]();
    goto LABEL_27;
  }
  do
  {
    v7 = v5;
    v5 *= 2;
  }
  while (v7 < a2);
  v4 = v7 - 1;
  v8 = operator new[](8 * v7);
  v9 = *(_QWORD *)(v3 + 16);
  v10 = *(_QWORD *)(v3 + 24);
  this = *(_QWORD *)v3;
  if (v9 >= v10)
  {
    *(_QWORD *)v3 = v8;
    if (!this)
      goto LABEL_13;
  }
  else
  {
    v11 = *(int *)(v3 + 8);
    do
    {
      v8[v9 & v4] = *(_QWORD *)(this + 8 * (v9 & v11));
      ++v9;
    }
    while (v10 != v9);
    *(_QWORD *)v3 = v8;
  }
  this = MEMORY[0x20BD0ADD4]();
LABEL_13:
  *(_DWORD *)(v3 + 8) = v4;
  v12 = 4 * a2;
  if (4 * a2 <= 128)
    v12 = 128;
  if (v4 >= v12)
    goto LABEL_16;
  return this;
}

void webrtc::PacketBuffer::~PacketBuffer(webrtc::PacketBuffer *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  *(_QWORD *)this = &off_24C0B8728;
  if (*((_QWORD *)this + 4))
  {
    v2 = (char *)this + 16;
    v3 = *((_QWORD *)this + 2);
    v4 = (char *)*((_QWORD *)this + 3);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 4) = 0;
    if (v4 != (char *)this + 16)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v4 + 1);
        v7 = *((_QWORD *)v4 + 22);
        *((_QWORD *)v4 + 22) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v8 = *((_QWORD *)v4 + 21);
        *((_QWORD *)v4 + 21) = 0;
        if (v8)
          MEMORY[0x20BD0ADEC](v8, 0x1060C40C2E02434);
        if (v4[160])
        {
          v9 = (void *)*((_QWORD *)v4 + 8);
          if (v9)
          {
            *((_QWORD *)v4 + 9) = v9;
            operator delete(v9);
          }
        }
        v10 = *((_QWORD *)v4 + 5);
        *((_QWORD *)v4 + 5) = 0;
        if (v10)
          MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
        operator delete(v4);
        v4 = v6;
      }
      while (v6 != v2);
      if (*((_QWORD *)this + 4))
      {
        v11 = *((_QWORD *)this + 2);
        v12 = (char *)*((_QWORD *)this + 3);
        v13 = *(_QWORD *)v12;
        *(_QWORD *)(v13 + 8) = *(_QWORD *)(v11 + 8);
        **(_QWORD **)(v11 + 8) = v13;
        *((_QWORD *)this + 4) = 0;
        if (v12 != v2)
        {
          do
          {
            v14 = (char *)*((_QWORD *)v12 + 1);
            v15 = *((_QWORD *)v12 + 22);
            *((_QWORD *)v12 + 22) = 0;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
            v16 = *((_QWORD *)v12 + 21);
            *((_QWORD *)v12 + 21) = 0;
            if (v16)
              MEMORY[0x20BD0ADEC](v16, 0x1060C40C2E02434);
            if (v12[160])
            {
              v17 = (void *)*((_QWORD *)v12 + 8);
              if (v17)
              {
                *((_QWORD *)v12 + 9) = v17;
                operator delete(v17);
              }
            }
            v18 = *((_QWORD *)v12 + 5);
            *((_QWORD *)v12 + 5) = 0;
            if (v18)
              MEMORY[0x20BD0ADD4](v18, 0x1000C8077774924);
            operator delete(v12);
            v12 = v14;
          }
          while (v14 != v2);
        }
      }
    }
  }
}

{
  webrtc::PacketBuffer::~PacketBuffer(this);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::PacketBuffer::Flush(webrtc::PacketBuffer *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v2 = (char *)this + 16;
  v3 = *((_QWORD *)this + 3);
  if ((webrtc::PacketBuffer *)v3 != (webrtc::PacketBuffer *)((char *)this + 16))
  {
    do
    {
      if (*(int *)(v3 + 48) <= 0)
        v4 = 16;
      else
        v4 = 24;
      (*(void (**)(void))(**((_QWORD **)this + 6) + v4))();
      v3 = *(_QWORD *)(v3 + 8);
    }
    while ((char *)v3 != v2);
  }
  if (*((_QWORD *)this + 4))
  {
    v5 = *((_QWORD *)this + 2);
    v6 = (char *)*((_QWORD *)this + 3);
    v7 = *(_QWORD *)v6;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v7;
    *((_QWORD *)this + 4) = 0;
    if (v6 != v2)
    {
      do
      {
        v9 = (char *)*((_QWORD *)v6 + 1);
        v10 = *((_QWORD *)v6 + 22);
        *((_QWORD *)v6 + 22) = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v11 = *((_QWORD *)v6 + 21);
        *((_QWORD *)v6 + 21) = 0;
        if (v11)
          MEMORY[0x20BD0ADEC](v11, 0x1060C40C2E02434);
        if (v6[160])
        {
          v12 = (void *)*((_QWORD *)v6 + 8);
          if (v12)
          {
            *((_QWORD *)v6 + 9) = v12;
            operator delete(v12);
          }
        }
        v13 = *((_QWORD *)v6 + 5);
        *((_QWORD *)v6 + 5) = 0;
        if (v13)
          MEMORY[0x20BD0ADD4](v13, 0x1000C8077774924);
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != v2);
    }
  }
  v8 = *((_QWORD *)this + 6);
  ++*(_QWORD *)(v8 + 176);
  ++*(_DWORD *)(v8 + 500);
}

BOOL webrtc::PacketBuffer::Empty(webrtc::PacketBuffer *this)
{
  return *((_QWORD *)this + 4) == 0;
}

uint64_t webrtc::PacketBuffer::InsertPacket(uint64_t a1, int *a2)
{
  _QWORD *v2;
  BOOL v3;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  unsigned int v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  v2 = a2 + 2;
  if (*((_QWORD *)a2 + 20))
    v3 = 0;
  else
    v3 = *((_QWORD *)a2 + 1) == 0;
  if (v3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/packet_buffer.cc");
    return 4;
  }
  v6 = *(uint64_t **)(a1 + 40);
  v7 = (_QWORD *)operator new();
  v8 = *v6;
  *v7 = v6;
  v7[1] = v8;
  v9 = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v7;
  if (v9)
    MEMORY[0x20BD0ADEC](v9, 0x1060C40C2E02434);
  v10 = (uint64_t *)(a1 + 16);
  if (*(_QWORD *)(a1 + 32) >= *(_QWORD *)(a1 + 8))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/packet_buffer.cc");
    v11 = 1;
    v12 = *(uint64_t **)(a1 + 24);
    if (v10 == v12)
      goto LABEL_46;
  }
  else
  {
    v11 = 0;
    v12 = *(uint64_t **)(a1 + 24);
    if (v10 == v12)
      goto LABEL_46;
  }
  v27 = *a2;
  v28 = (uint64_t *)(a1 + 16);
  v29 = a2[8];
  while (1)
  {
    v30 = v28;
    v28 = (uint64_t *)*v28;
    v31 = *((_DWORD *)v28 + 4) - v27;
    if (v31)
    {
      if (v31 >= 0x7FFFFFFF)
        goto LABEL_31;
      goto LABEL_18;
    }
    v32 = *((unsigned __int16 *)v28 + 10) - *((unsigned __int16 *)a2 + 2);
    if (!v32)
      break;
    if ((unsigned __int16)v32 >= 0x7FFFu)
      goto LABEL_26;
LABEL_18:
    if (v28 == v12)
    {
      v30 = v12;
      goto LABEL_31;
    }
  }
  v33 = *((_DWORD *)v28 + 12);
  v34 = v29 < v33;
  if (v29 == v33)
    v34 = a2[9] < *((_DWORD *)v28 + 13);
  if (v34)
    goto LABEL_18;
LABEL_26:
  v3 = v30 == v12;
  v30 = v12;
  if (!v3)
  {
    v35 = 16;
    if (v29 > 0)
      v35 = 24;
    (*(void (**)(void))(**(_QWORD **)(a1 + 48) + v35))();
    return v11;
  }
LABEL_31:
  if (v30 != v10)
  {
    if (v27 == *((_DWORD *)v30 + 4))
    {
      v36 = 16;
      if (*((int *)v30 + 12) > 0)
        v36 = 24;
      (*(void (**)(void))(**(_QWORD **)(a1 + 48) + v36))();
      v37 = *v30;
      v10 = (uint64_t *)v30[1];
      *(_QWORD *)(v37 + 8) = v10;
      *(_QWORD *)v30[1] = v37;
      --*(_QWORD *)(a1 + 32);
      v38 = v30[22];
      v30[22] = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      v39 = v30[21];
      v30[21] = 0;
      if (v39)
        MEMORY[0x20BD0ADEC](v39, 0x1060C40C2E02434);
      if (*((_BYTE *)v30 + 160))
      {
        v40 = (void *)v30[8];
        if (v40)
        {
          v30[9] = (uint64_t)v40;
          operator delete(v40);
        }
      }
      v41 = v30[5];
      v30[5] = 0;
      if (v41)
        MEMORY[0x20BD0ADD4](v41, 0x1000C8077774924);
      operator delete(v30);
    }
    else
    {
      v10 = v30;
    }
  }
LABEL_46:
  v42 = (char *)operator new(0xB8uLL);
  *(_QWORD *)v42 = 0;
  *((_QWORD *)v42 + 1) = 0;
  *((_DWORD *)v42 + 4) = *a2;
  *(_DWORD *)(v42 + 19) = *(int *)((char *)a2 + 3);
  *(_OWORD *)(v42 + 24) = *(_OWORD *)(a2 + 2);
  *v2 = 0;
  v2[1] = 0;
  v43 = *((_QWORD *)a2 + 3);
  v44 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)v42 + 5) = v43;
  *((_QWORD *)v42 + 6) = v44;
  v42[56] = 0;
  v42[160] = 0;
  if (*((_BYTE *)a2 + 144))
  {
    *((_DWORD *)v42 + 14) = a2[10];
    *((_OWORD *)v42 + 4) = *((_OWORD *)a2 + 3);
    *((_QWORD *)v42 + 10) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_OWORD *)(v42 + 104) = *(_OWORD *)(a2 + 22);
    *(_OWORD *)(v42 + 120) = *(_OWORD *)(a2 + 26);
    *(_OWORD *)(v42 + 136) = *(_OWORD *)(a2 + 30);
    v42[152] = *((_BYTE *)a2 + 136);
    *(_OWORD *)(v42 + 88) = *(_OWORD *)(a2 + 18);
    v42[160] = 1;
  }
  v45 = *(_OWORD *)(a2 + 38);
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 20) = 0;
  *(_OWORD *)(v42 + 168) = v45;
  v46 = *v10;
  *(_QWORD *)(v46 + 8) = v42;
  *(_QWORD *)v42 = v46;
  *v10 = (uint64_t)v42;
  *((_QWORD *)v42 + 1) = v10;
  ++*(_QWORD *)(a1 + 32);
  return v11;
}

uint64_t webrtc::PacketBuffer::NextTimestamp(webrtc::PacketBuffer *this, unsigned int *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(webrtc::PacketBuffer *))(*(_QWORD *)this + 24))(this);
  if ((result & 1) != 0)
    return 3;
  if (!a2)
    return 5;
  if (*((_QWORD *)this + 4))
  {
    result = 0;
    *a2 = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t webrtc::PacketBuffer::NextHigherTimestamp(webrtc::PacketBuffer *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;

  if (((*(uint64_t (**)(webrtc::PacketBuffer *))(*(_QWORD *)this + 24))(this) & 1) != 0)
    return 3;
  if (!a3)
    return 5;
  v7 = *((_QWORD *)this + 3);
  if ((webrtc::PacketBuffer *)v7 == (webrtc::PacketBuffer *)((char *)this + 16))
    return 2;
  while (1)
  {
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 >= a2)
      break;
    v7 = *(_QWORD *)(v7 + 8);
    if ((webrtc::PacketBuffer *)v7 == (webrtc::PacketBuffer *)((char *)this + 16))
      return 2;
  }
  result = 0;
  *a3 = v8;
  return result;
}

uint64_t webrtc::PacketBuffer::PeekNextPacket(webrtc::PacketBuffer *this)
{
  if (*((_QWORD *)this + 4))
    return *((_QWORD *)this + 3) + 16;
  else
    return 0;
}

void webrtc::PacketBuffer::GetNextPacket(webrtc::PacketBuffer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  if ((*(unsigned int (**)(webrtc::PacketBuffer *))(*(_QWORD *)this + 24))(this))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 168) = 0;
  }
  else
  {
    if (!*((_QWORD *)this + 4))
      goto LABEL_17;
    v4 = *((_QWORD *)this + 3);
    *(_DWORD *)a2 = *(_DWORD *)(v4 + 16);
    *(_DWORD *)(a2 + 3) = *(_DWORD *)(v4 + 19);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v4 + 24);
    v5 = *(_QWORD *)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 48);
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(a2 + 24) = v5;
    *(_QWORD *)(a2 + 32) = v6;
    *(_BYTE *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 144) = 0;
    if (*(_BYTE *)(v4 + 160))
    {
      *(_DWORD *)(a2 + 40) = *(_DWORD *)(v4 + 56);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(v4 + 64);
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(v4 + 80);
      *(_QWORD *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 0;
      *(_QWORD *)(v4 + 80) = 0;
      *(_OWORD *)(a2 + 88) = *(_OWORD *)(v4 + 104);
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(v4 + 120);
      *(_OWORD *)(a2 + 120) = *(_OWORD *)(v4 + 136);
      *(_BYTE *)(a2 + 136) = *(_BYTE *)(v4 + 152);
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(v4 + 88);
      *(_BYTE *)(a2 + 144) = 1;
    }
    v7 = *(_OWORD *)(v4 + 168);
    *(_QWORD *)(v4 + 168) = 0;
    *(_QWORD *)(v4 + 176) = 0;
    *(_OWORD *)(a2 + 152) = v7;
    *(_BYTE *)(a2 + 168) = 1;
    v8 = *((_QWORD *)this + 4);
    if (v8)
    {
      v9 = (_QWORD *)*((_QWORD *)this + 3);
      v10 = *v9;
      *(_QWORD *)(v10 + 8) = v9[1];
      *(_QWORD *)v9[1] = v10;
      *((_QWORD *)this + 4) = v8 - 1;
      v11 = v9[22];
      v9[22] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v12 = v9[21];
      v9[21] = 0;
      if (v12)
        MEMORY[0x20BD0ADEC](v12, 0x1060C40C2E02434);
      if (*((_BYTE *)v9 + 160))
      {
        v13 = (void *)v9[8];
        if (v13)
        {
          v9[9] = v13;
          operator delete(v13);
        }
      }
      v14 = v9[5];
      v9[5] = 0;
      if (v14)
        MEMORY[0x20BD0ADD4](v14, 0x1000C8077774924);
      operator delete(v9);
    }
    else
    {
LABEL_17:
      __break(1u);
    }
  }
}

uint64_t webrtc::PacketBuffer::DiscardNextPacket(webrtc::PacketBuffer *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  result = (*(uint64_t (**)(webrtc::PacketBuffer *))(*(_QWORD *)this + 24))(this);
  if ((result & 1) != 0)
    return 3;
  if (!*((_QWORD *)this + 4))
    goto LABEL_17;
  v3 = 16;
  if (*(int *)(*((_QWORD *)this + 3) + 48) > 0)
    v3 = 24;
  result = (*(uint64_t (**)(void))(**((_QWORD **)this + 6) + v3))();
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = (_QWORD *)*((_QWORD *)this + 3);
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = v5[1];
    *(_QWORD *)v5[1] = v6;
    *((_QWORD *)this + 4) = v4 - 1;
    v7 = v5[22];
    v5[22] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v5[21];
    v5[21] = 0;
    if (v8)
      MEMORY[0x20BD0ADEC](v8, 0x1060C40C2E02434);
    if (*((_BYTE *)v5 + 160))
    {
      v9 = (void *)v5[8];
      if (v9)
      {
        v5[9] = v9;
        operator delete(v9);
      }
    }
    v10 = v5[5];
    v5[5] = 0;
    if (v10)
      MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
    operator delete(v5);
    return 0;
  }
  else
  {
LABEL_17:
    __break(1u);
  }
  return result;
}

void webrtc::PacketBuffer::DiscardOldPackets(webrtc::PacketBuffer *this, unsigned int a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;

  v3 = (_QWORD *)((char *)this + 16);
  v33 = &v33;
  v34 = &v33;
  v35 = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 3);
  if (v4 == (_QWORD *)((char *)this + 16))
    return;
  v7 = a2 - a3;
  do
  {
    v9 = *((_DWORD *)v4 + 4);
    v10 = a2 - v9;
    if (a2 == v9)
    {
LABEL_3:
      v8 = v4;
LABEL_4:
      v8 = (_QWORD *)v8[1];
      goto LABEL_5;
    }
    if (v10 == 0x80000000)
    {
      if (a2 <= v9)
        goto LABEL_3;
    }
    else if ((v10 & 0x80000000) != 0)
    {
      goto LABEL_3;
    }
    if (a3)
    {
      if (v9 - v7 == 0x80000000)
      {
        if (v9 <= v7)
          goto LABEL_3;
      }
      else if (v9 == v7 || ((v9 - v7) & 0x80000000) != 0)
      {
        goto LABEL_3;
      }
    }
    if (*((int *)v4 + 12) <= 0)
      v11 = 16;
    else
      v11 = 24;
    v12 = 1;
    (*(void (**)(void))(**((_QWORD **)this + 6) + v11))();
    v8 = (_QWORD *)v4[1];
    if (v8 == v3)
    {
      v8 = v3;
      if (v4 == v3)
        goto LABEL_54;
    }
    else
    {
      if (a3)
      {
        while (1)
        {
          v14 = *((_DWORD *)v8 + 4);
          v15 = a2 - v14;
          if (a2 == v14)
            break;
          if (v15 == 0x80000000)
          {
            if (a2 <= v14)
              break;
          }
          else if ((v15 & 0x80000000) != 0)
          {
            break;
          }
          if (v14 - v7 == 0x80000000)
          {
            if (v14 <= v7)
              break;
          }
          else if (v14 == v7 || ((v14 - v7) & 0x80000000) != 0)
          {
            break;
          }
          if (*((int *)v8 + 12) <= 0)
            v13 = 16;
          else
            v13 = 24;
          v12 = 1;
          (*(void (**)(void))(**((_QWORD **)this + 6) + v13))();
          v8 = (_QWORD *)v8[1];
          if (v8 == v3)
          {
LABEL_56:
            v8 = v3;
            if (v4 != v3)
              goto LABEL_46;
            goto LABEL_54;
          }
        }
      }
      else
      {
        while (1)
        {
          v17 = *((_DWORD *)v8 + 4);
          v18 = a2 - v17;
          if (a2 == v17)
            break;
          if (v18 == 0x80000000)
          {
            if (a2 <= v17)
              break;
          }
          else if ((v18 & 0x80000000) != 0)
          {
            break;
          }
          if (*((int *)v8 + 12) <= 0)
            v16 = 16;
          else
            v16 = 24;
          v12 = 1;
          (*(void (**)(void))(**((_QWORD **)this + 6) + v16))();
          v8 = (_QWORD *)v8[1];
          if (v8 == v3)
            goto LABEL_56;
        }
      }
      v12 = 0;
      if (v4 == v8)
      {
LABEL_54:
        if ((v12 & 1) == 0)
          goto LABEL_4;
        goto LABEL_5;
      }
    }
LABEL_46:
    v19 = (_QWORD *)*v8;
    if (&v33 != v3)
    {
      v20 = 1;
      if (v19 != v4)
      {
        v21 = v4;
        do
        {
          v21 = (_QWORD *)v21[1];
          ++v20;
        }
        while (v21 != v19);
      }
      *((_QWORD *)this + 4) -= v20;
      v35 += v20;
    }
    v22 = *v4;
    *(_QWORD *)(v22 + 8) = v19[1];
    *(_QWORD *)v19[1] = v22;
    v23 = v33;
    v33[1] = v4;
    *v4 = v23;
    v33 = v19;
    v19[1] = &v33;
    if ((v12 & 1) == 0)
      goto LABEL_4;
LABEL_5:
    v4 = v8;
  }
  while (v8 != v3);
  if (v35)
  {
    v24 = v33;
    v25 = v34;
    v26 = *v34;
    *(_QWORD *)(v26 + 8) = v33[1];
    *(_QWORD *)v24[1] = v26;
    v35 = 0;
    if (v25 != &v33)
    {
      do
      {
        v27 = (_QWORD *)v25[1];
        v28 = v25[22];
        v25[22] = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        v29 = v25[21];
        v25[21] = 0;
        if (v29)
          MEMORY[0x20BD0ADEC](v29, 0x1060C40C2E02434);
        if (*((_BYTE *)v25 + 160))
        {
          v30 = (void *)v25[8];
          if (v30)
          {
            v25[9] = v30;
            operator delete(v30);
          }
        }
        v31 = v25[5];
        v25[5] = 0;
        if (v31)
          MEMORY[0x20BD0ADD4](v31, 0x1000C8077774924);
        operator delete(v25);
        v25 = v27;
      }
      while (v27 != &v33);
    }
  }
}

uint64_t webrtc::PacketBuffer::DiscardAllOldPackets(webrtc::PacketBuffer *this, uint64_t a2)
{
  return (*(uint64_t (**)(webrtc::PacketBuffer *, uint64_t, _QWORD))(*(_QWORD *)this + 80))(this, a2, 0);
}

void webrtc::PacketBuffer::DiscardPacketsWithPayloadType(webrtc::PacketBuffer *this, int a2)
{
  int *v2;
  int *v3;
  int *v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v2 = (int *)((char *)this + 16);
  v24 = (uint64_t)&v24;
  v25 = &v24;
  v26 = 0;
  v3 = (int *)*((_QWORD *)this + 3);
  if (v3 == (int *)((char *)this + 16))
    return;
  do
  {
    if (*((unsigned __int8 *)v3 + 22) != a2)
    {
      v6 = v3;
LABEL_4:
      v6 = (int *)*((_QWORD *)v6 + 1);
      goto LABEL_5;
    }
    if (v3[12] <= 0)
      v7 = 16;
    else
      v7 = 24;
    v8 = 1;
    (*(void (**)(void))(**((_QWORD **)this + 6) + v7))();
    v6 = (int *)*((_QWORD *)v3 + 1);
    if (v6 == v2)
    {
LABEL_16:
      v6 = v2;
    }
    else
    {
      while (1)
      {
        v9 = *((unsigned __int8 *)v6 + 22);
        v8 = v9 == a2;
        if (v9 != a2)
          break;
        if (v6[12] <= 0)
          v10 = 16;
        else
          v10 = 24;
        (*(void (**)(void))(**((_QWORD **)this + 6) + v10))();
        v6 = (int *)*((_QWORD *)v6 + 1);
        if (v6 == v2)
          goto LABEL_16;
      }
    }
    if (v3 != v6)
    {
      v11 = *(_QWORD *)v6;
      if (&v24 != (uint64_t *)v2)
      {
        v12 = 1;
        if ((int *)v11 != v3)
        {
          v13 = v3;
          do
          {
            v13 = (int *)*((_QWORD *)v13 + 1);
            ++v12;
          }
          while (v13 != (int *)v11);
        }
        *((_QWORD *)this + 4) -= v12;
        v26 += v12;
      }
      v14 = *(_QWORD *)v3;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(v11 + 8);
      **(_QWORD **)(v11 + 8) = v14;
      v15 = v24;
      *(_QWORD *)(v24 + 8) = v3;
      *(_QWORD *)v3 = v15;
      v24 = v11;
      *(_QWORD *)(v11 + 8) = &v24;
    }
    if (!v8)
      goto LABEL_4;
LABEL_5:
    v3 = v6;
  }
  while (v6 != v2);
  if (v26)
  {
    v16 = v24;
    v17 = v25;
    v18 = *v25;
    *(_QWORD *)(v18 + 8) = *(_QWORD *)(v24 + 8);
    **(_QWORD **)(v16 + 8) = v18;
    v26 = 0;
    if (v17 != &v24)
    {
      do
      {
        v19 = (uint64_t *)v17[1];
        v20 = v17[22];
        v17[22] = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        v21 = v17[21];
        v17[21] = 0;
        if (v21)
          MEMORY[0x20BD0ADEC](v21, 0x1060C40C2E02434);
        if (*((_BYTE *)v17 + 160))
        {
          v22 = (void *)v17[8];
          if (v22)
          {
            v17[9] = (uint64_t)v22;
            operator delete(v22);
          }
        }
        v23 = v17[5];
        v17[5] = 0;
        if (v23)
          MEMORY[0x20BD0ADD4](v23, 0x1000C8077774924);
        operator delete(v17);
        v17 = v19;
      }
      while (v19 != &v24);
    }
  }
}

uint64_t webrtc::PacketBuffer::NumPacketsInBuffer(webrtc::PacketBuffer *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t webrtc::PacketBuffer::NumSamplesInBuffer(webrtc::PacketBuffer *this, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (char *)this + 16;
  v3 = *((_QWORD *)this + 3);
  if ((webrtc::PacketBuffer *)v3 != (webrtc::PacketBuffer *)((char *)this + 16))
  {
    v5 = 0;
    while (1)
    {
      v6 = *(_QWORD *)(v3 + 176);
      if (v6)
      {
        if (*(_DWORD *)(v3 + 48) || *(_DWORD *)(v3 + 52))
          goto LABEL_4;
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        if (v7)
          a2 = v7;
      }
      v5 += a2;
LABEL_4:
      v3 = *(_QWORD *)(v3 + 8);
      if ((char *)v3 == v2)
        return v5;
    }
  }
  return 0;
}

unint64_t webrtc::PacketBuffer::GetSpanSamples(webrtc::PacketBuffer *this, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t result;
  unint64_t v20;
  int v21;
  unint64_t v22;

  if (!*((_QWORD *)this + 4))
    return 0;
  v5 = *((_QWORD *)this + 2);
  v6 = *(_DWORD *)(v5 + 16);
  v7 = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
  v8 = *(_QWORD **)(v5 + 168);
  v9 = (_QWORD *)*v8;
  v10 = *(_QWORD *)*v8 - v8[1];
  v11 = *((int *)v9 + 2);
  v12 = 0xFFFFFFFFFFFFFFFFLL / v11;
  v13 = v10 * v11;
  if (v10 >= v12)
    v14 = -1;
  else
    v14 = v13;
  v15 = v14 * (a3 / 0x3E8);
  v16 = v15;
  if ((a4 & 1) != 0)
    return v16 + (v6 - v7);
  v18 = *(_QWORD *)(v5 + 176);
  if (!v18)
  {
    v16 = a2;
    return v16 + (v6 - v7);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  v16 = a2;
  if (!result)
    return v16 + (v6 - v7);
  if (*((_QWORD *)this + 4))
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 176) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 176));
    if (*((_QWORD *)this + 4))
    {
      v20 = result;
      v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 176) + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 176));
      if (v20 <= v15)
        v22 = v15;
      else
        v22 = v20;
      if (v21)
        v16 = v22;
      else
        v16 = v20;
      return v16 + (v6 - v7);
    }
  }
  __break(1u);
  return result;
}

uint64_t webrtc::PacketBuffer::ContainsDtxOrCngPacket(webrtc::PacketBuffer *this, const webrtc::DecoderDatabase *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = (char *)this + 16;
  v3 = *((_QWORD *)this + 3);
  if ((webrtc::PacketBuffer *)v3 == (webrtc::PacketBuffer *)((char *)this + 16))
    return 0;
  while (1)
  {
    v5 = *(_QWORD *)(v3 + 176);
    if (v5)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) & 1) != 0)
        break;
    }
    v6 = (*(uint64_t (**)(const webrtc::DecoderDatabase *, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(unsigned __int8 *)(v3 + 22));
    if (v6)
    {
      if (*(_BYTE *)(v6 + 128) == 1)
        break;
    }
    v3 = *(_QWORD *)(v3 + 8);
    if ((char *)v3 == v2)
      return 0;
  }
  return 1;
}

void webrtc::video_coding::PacketBuffer::~PacketBuffer(webrtc::video_coding::PacketBuffer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  webrtc::video_coding::PacketBuffer::ClearInternal(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 == v2)
    {
LABEL_23:
      *((_QWORD *)this + 3) = v2;
      operator delete(v4);
      return;
    }
    while (1)
    {
      v6 = *--v3;
      v5 = v6;
      *v3 = 0;
      if (v6)
        break;
LABEL_6:
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 2);
        goto LABEL_23;
      }
    }
    if (*(_BYTE *)(v5 + 184))
    {
      if ((*(_BYTE *)(v5 + 152) & 1) != 0)
      {
        operator delete(*(void **)(v5 + 160));
        if ((*(_BYTE *)(v5 + 104) & 1) == 0)
        {
LABEL_11:
          if ((*(_BYTE *)(v5 + 56) & 1) == 0)
            goto LABEL_13;
          goto LABEL_12;
        }
      }
      else if ((*(_BYTE *)(v5 + 104) & 1) == 0)
      {
        goto LABEL_11;
      }
      operator delete(*(void **)(v5 + 112));
      if ((*(_BYTE *)(v5 + 56) & 1) != 0)
LABEL_12:
        operator delete(*(void **)(v5 + 64));
    }
LABEL_13:
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 24);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD *)(v7 + 16);
        *(_QWORD *)(v7 + 16) = 0;
        if (v11)
          MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v7, 0x1010C40EE34DA14);
      }
    }
    MEMORY[0x20BD0ADEC](v5, 0x10B2C4061102D9CLL);
    goto LABEL_6;
  }
}

double webrtc::video_coding::PacketBuffer::InsertPacket@<D0>(webrtc::video_coding::PacketBuffer *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unsigned int v9;
  unsigned __int16 v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  int v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  unsigned int v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  __int128 v91;
  uint64_t v92;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = *a2;
  v5 = *(unsigned __int16 *)(*a2 + 4);
  v7 = (char *)*((_QWORD *)this + 2);
  v6 = (char *)*((_QWORD *)this + 3);
  v8 = v5 % ((v6 - v7) >> 3);
  if (*((_BYTE *)this + 10))
  {
    v9 = *((unsigned __int16 *)this + 4);
    v10 = v5 - v9;
    if ((_DWORD)v5 != v9)
    {
      v11 = v9 >= v5;
      v12 = v9 - v5;
      v13 = v12 != 0 && v11;
      v14 = v12 == 0x8000 ? v13 : (v12 & 0x8000u) == 0;
      if (v14 == 1)
      {
        if (*((_BYTE *)this + 11))
          return result;
        if (*(_QWORD *)this <= (unint64_t)v10)
        {
          webrtc::video_coding::PacketBuffer::ClearInternal(this);
          *((_BYTE *)this + 10) = 1;
          v7 = (char *)*((_QWORD *)this + 2);
          v6 = (char *)*((_QWORD *)this + 3);
          *((_WORD *)this + 4) = v5;
          if (v8 >= (v6 - v7) >> 3)
          {
LABEL_144:
            __break(1u);
            goto LABEL_145;
          }
          v4 = *a2;
          v15 = *(_QWORD *)&v7[8 * v8];
          if (!v15)
            goto LABEL_84;
        }
        else
        {
          *((_WORD *)this + 4) = v5;
          v15 = *(_QWORD *)&v7[8 * v8];
          if (!v15)
            goto LABEL_84;
        }
        goto LABEL_16;
      }
    }
  }
  else
  {
    *((_WORD *)this + 4) = v5;
    *((_BYTE *)this + 10) = 1;
  }
  v15 = *(_QWORD *)&v7[8 * v8];
  if (!v15)
  {
LABEL_84:
    v51 = a2;
    goto LABEL_85;
  }
LABEL_16:
  if (*(unsigned __int16 *)(v15 + 4) == *(unsigned __int16 *)(v4 + 4))
    return result;
LABEL_19:
  if (*(_QWORD *)this != (v6 - v7) >> 3)
  {
    if ((unint64_t)((v6 - v7) >> 2) >= *(_QWORD *)this)
      v16 = *(_QWORD *)this;
    else
      v16 = (v6 - v7) >> 2;
    if (v16)
    {
      if (!(v16 >> 61))
      {
        v17 = (char *)operator new(8 * v16);
        v18 = &v17[8 * v16];
        bzero(v17, 8 * v16);
        if (v7 != v6)
          goto LABEL_32;
LABEL_50:
        v28 = (char *)*((_QWORD *)this + 3);
        v29 = v7;
        if (v28 == v7)
        {
LABEL_71:
          *((_QWORD *)this + 3) = v7;
          operator delete(v29);
          goto LABEL_72;
        }
        while (2)
        {
          v31 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          v30 = v31;
          *(_QWORD *)v28 = 0;
          if (v31)
          {
            if (!*(_BYTE *)(v30 + 184))
              goto LABEL_61;
            if ((*(_BYTE *)(v30 + 152) & 1) == 0)
            {
              if ((*(_BYTE *)(v30 + 104) & 1) == 0)
                goto LABEL_59;
LABEL_68:
              operator delete(*(void **)(v30 + 112));
              if ((*(_BYTE *)(v30 + 56) & 1) == 0)
                goto LABEL_61;
LABEL_60:
              operator delete(*(void **)(v30 + 64));
              goto LABEL_61;
            }
            operator delete(*(void **)(v30 + 160));
            if ((*(_BYTE *)(v30 + 104) & 1) != 0)
              goto LABEL_68;
LABEL_59:
            if ((*(_BYTE *)(v30 + 56) & 1) != 0)
              goto LABEL_60;
LABEL_61:
            v32 = *(_QWORD *)(v30 + 16);
            if (v32)
            {
              v33 = (unsigned int *)(v32 + 24);
              do
              {
                v34 = __ldaxr(v33);
                v35 = v34 - 1;
              }
              while (__stlxr(v35, v33));
              if (!v35)
              {
                v36 = *(_QWORD *)(v32 + 16);
                *(_QWORD *)(v32 + 16) = 0;
                if (v36)
                  MEMORY[0x20BD0ADD4](v36, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v32, 0x1010C40EE34DA14);
              }
            }
            MEMORY[0x20BD0ADEC](v30, 0x10B2C4061102D9CLL);
          }
          if (v28 == v7)
          {
            v29 = (char *)*((_QWORD *)this + 2);
            goto LABEL_71;
          }
          continue;
        }
      }
LABEL_145:
      abort();
    }
    v18 = 0;
    v17 = 0;
    if (v7 == v6)
      goto LABEL_50;
    while (1)
    {
LABEL_32:
      v19 = *(_QWORD *)v7;
      if (!*(_QWORD *)v7)
        goto LABEL_31;
      v20 = *(unsigned __int16 *)(v19 + 4) % v16;
      if ((v18 - v17) >> 3 <= v20)
        goto LABEL_144;
      v21 = 8 * v20;
      *(_QWORD *)v7 = 0;
      v22 = *(_QWORD *)&v17[v21];
      *(_QWORD *)&v17[v21] = v19;
      if (!v22)
        goto LABEL_31;
      if (*(_BYTE *)(v22 + 184))
      {
        if ((*(_BYTE *)(v22 + 152) & 1) != 0)
        {
          operator delete(*(void **)(v22 + 160));
          if ((*(_BYTE *)(v22 + 104) & 1) == 0)
          {
LABEL_38:
            if ((*(_BYTE *)(v22 + 56) & 1) == 0)
              goto LABEL_40;
LABEL_39:
            operator delete(*(void **)(v22 + 64));
            goto LABEL_40;
          }
        }
        else if ((*(_BYTE *)(v22 + 104) & 1) == 0)
        {
          goto LABEL_38;
        }
        operator delete(*(void **)(v22 + 112));
        if ((*(_BYTE *)(v22 + 56) & 1) != 0)
          goto LABEL_39;
      }
LABEL_40:
      v23 = *(_QWORD *)(v22 + 16);
      if (v23)
      {
        v24 = (unsigned int *)(v23 + 24);
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *(_QWORD *)(v23 + 16);
          *(_QWORD *)(v23 + 16) = 0;
          if (v27)
            MEMORY[0x20BD0ADD4](v27, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v23, 0x1010C40EE34DA14);
        }
      }
      MEMORY[0x20BD0ADEC](v22, 0x10B2C4061102D9CLL);
LABEL_31:
      v7 += 8;
      if (v7 == v6)
      {
        v7 = (char *)*((_QWORD *)this + 2);
        if (v7)
          goto LABEL_50;
LABEL_72:
        *((_QWORD *)this + 2) = v17;
        *((_QWORD *)this + 3) = v18;
        *((_QWORD *)this + 4) = v18;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v37, v38, v39, v40, v41, v42, v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/packet_buffer.cc");
        v7 = (char *)*((_QWORD *)this + 2);
        v6 = (char *)*((_QWORD *)this + 3);
        v8 = v5 % ((v6 - v7) >> 3);
        if (!*(_QWORD *)&v7[8 * v8])
        {
          v51 = a2;
          goto LABEL_81;
        }
        goto LABEL_19;
      }
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/packet_buffer.cc");
  v7 = (char *)*((_QWORD *)this + 2);
  v8 = v5 % ((uint64_t)(*((_QWORD *)this + 3) - (_QWORD)v7) >> 3);
  v51 = a2;
  if (*(_QWORD *)&v7[8 * v8])
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v52, v53, v54, v55, v56, v57, v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/packet_buffer.cc");
    webrtc::video_coding::PacketBuffer::ClearInternal(this);
    *(_BYTE *)(a3 + 24) = 1;
    return result;
  }
LABEL_81:
  v4 = *v51;
LABEL_85:
  *(_BYTE *)v4 = 0;
  v60 = 8 * v8;
  *v51 = 0;
  v61 = *(_QWORD *)&v7[8 * v8];
  *(_QWORD *)&v7[v60] = v4;
  if (v61)
  {
    if (!*(_BYTE *)(v61 + 184))
      goto LABEL_91;
    if ((*(_BYTE *)(v61 + 152) & 1) != 0)
    {
      operator delete(*(void **)(v61 + 160));
      if ((*(_BYTE *)(v61 + 104) & 1) == 0)
      {
LABEL_89:
        if ((*(_BYTE *)(v61 + 56) & 1) == 0)
          goto LABEL_91;
        goto LABEL_90;
      }
    }
    else if ((*(_BYTE *)(v61 + 104) & 1) == 0)
    {
      goto LABEL_89;
    }
    operator delete(*(void **)(v61 + 112));
    if ((*(_BYTE *)(v61 + 56) & 1) == 0)
    {
LABEL_91:
      v62 = *(_QWORD *)(v61 + 16);
      if (v62)
      {
        v63 = (unsigned int *)(v62 + 24);
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          v66 = *(_QWORD *)(v62 + 16);
          *(_QWORD *)(v62 + 16) = 0;
          if (v66)
            MEMORY[0x20BD0ADD4](v66, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v62, 0x1010C40EE34DA14);
        }
      }
      MEMORY[0x20BD0ADEC](v61, 0x10B2C4061102D9CLL);
      goto LABEL_99;
    }
LABEL_90:
    operator delete(*(void **)(v61 + 64));
    goto LABEL_91;
  }
LABEL_99:
  webrtc::video_coding::PacketBuffer::UpdateMissingPackets(this, v5);
  v68 = (uint64_t *)((char *)this + 80);
  v67 = (uint64_t *)*((_QWORD *)this + 10);
  v69 = (uint64_t *)*((_QWORD *)this + 9);
  if (v67)
  {
    v70 = v5 - ((*((_DWORD *)this + 6) - *((_DWORD *)this + 4)) >> 5);
    do
    {
      while (1)
      {
        v74 = *((unsigned __int16 *)v67 + 13);
        if (v74 != (unsigned __int16)v70)
          break;
        v68 = v67;
        v67 = (uint64_t *)*v67;
        if (!v67)
          goto LABEL_109;
      }
      v71 = (unsigned __int16)(v5 - ((*((_DWORD *)this + 6) - *((_DWORD *)this + 4)) >> 5)) - v74;
      v72 = v74 < (unsigned __int16)v70;
      v73 = (__int16)(v70 - v74) >= 0;
      if (v71 == 0x8000)
        v73 = v72;
      if (v73)
        ++v67;
      else
        v68 = v67;
      v67 = (uint64_t *)*v67;
    }
    while (v67);
  }
LABEL_109:
  if (v69 != v68)
  {
    do
    {
      v78 = (uint64_t *)v69[1];
      v79 = v69;
      if (v78)
      {
        do
        {
          v80 = v78;
          v78 = (uint64_t *)*v78;
        }
        while (v78);
      }
      else
      {
        do
        {
          v80 = (uint64_t *)v79[2];
          v81 = *v80 == (_QWORD)v79;
          v79 = v80;
        }
        while (!v81);
      }
      if (*((uint64_t **)this + 9) == v69)
        *((_QWORD *)this + 9) = v80;
      v77 = (uint64_t *)*((_QWORD *)this + 10);
      --*((_QWORD *)this + 11);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v77, v69);
      operator delete(v69);
      v69 = v80;
    }
    while (v80 != v68);
  }
  webrtc::video_coding::PacketBuffer::FindFrames(this, v5, (unint64_t *)&v91);
  v75 = *(_QWORD **)a3;
  if (*(_QWORD *)a3)
  {
    v76 = *(_QWORD **)(a3 + 8);
    while (1)
    {
      do
      {
        if (v76 == v75)
        {
          operator delete(v75);
          goto LABEL_139;
        }
        v83 = *--v76;
        v82 = v83;
        *v76 = 0;
      }
      while (!v83);
      if (*(_BYTE *)(v82 + 184))
      {
        if ((*(_BYTE *)(v82 + 152) & 1) != 0)
        {
          operator delete(*(void **)(v82 + 160));
          if ((*(_BYTE *)(v82 + 104) & 1) != 0)
          {
LABEL_136:
            operator delete(*(void **)(v82 + 112));
            if ((*(_BYTE *)(v82 + 56) & 1) == 0)
              goto LABEL_129;
LABEL_128:
            operator delete(*(void **)(v82 + 64));
            goto LABEL_129;
          }
        }
        else if ((*(_BYTE *)(v82 + 104) & 1) != 0)
        {
          goto LABEL_136;
        }
        if ((*(_BYTE *)(v82 + 56) & 1) != 0)
          goto LABEL_128;
      }
LABEL_129:
      v84 = *(_QWORD *)(v82 + 16);
      if (v84)
      {
        v85 = (unsigned int *)(v84 + 24);
        do
        {
          v86 = __ldaxr(v85);
          v87 = v86 - 1;
        }
        while (__stlxr(v87, v85));
        if (!v87)
        {
          v88 = *(_QWORD *)(v84 + 16);
          *(_QWORD *)(v84 + 16) = 0;
          if (v88)
            MEMORY[0x20BD0ADD4](v88, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v84, 0x1010C40EE34DA14);
        }
      }
      MEMORY[0x20BD0ADEC](v82, 0x10B2C4061102D9CLL);
    }
  }
LABEL_139:
  result = *(double *)&v91;
  *(_OWORD *)a3 = v91;
  *(_QWORD *)(a3 + 16) = v92;
  return result;
}

void webrtc::video_coding::PacketBuffer::ClearInternal(webrtc::video_coding::PacketBuffer *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = (uint64_t *)*((_QWORD *)this + 3);
  while (v2 != v3)
  {
    v4 = *v2;
    *v2 = 0;
    if (!v4)
      goto LABEL_4;
    if (*(_BYTE *)(v4 + 184))
    {
      if ((*(_BYTE *)(v4 + 152) & 1) != 0)
      {
        operator delete(*(void **)(v4 + 160));
        if ((*(_BYTE *)(v4 + 104) & 1) == 0)
        {
LABEL_10:
          if ((*(_BYTE *)(v4 + 56) & 1) == 0)
            goto LABEL_12;
LABEL_11:
          operator delete(*(void **)(v4 + 64));
          goto LABEL_12;
        }
      }
      else if ((*(_BYTE *)(v4 + 104) & 1) == 0)
      {
        goto LABEL_10;
      }
      operator delete(*(void **)(v4 + 112));
      if ((*(_BYTE *)(v4 + 56) & 1) != 0)
        goto LABEL_11;
    }
LABEL_12:
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 24);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        v9 = *(_QWORD *)(v5 + 16);
        *(_QWORD *)(v5 + 16) = 0;
        if (v9)
          MEMORY[0x20BD0ADD4](v9, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v5, 0x1010C40EE34DA14);
      }
    }
    MEMORY[0x20BD0ADEC](v4, 0x10B2C4061102D9CLL);
LABEL_4:
    ++v2;
  }
  *((_WORD *)this + 5) = 0;
  if (*((_BYTE *)this + 42))
    *((_BYTE *)this + 42) = 0;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  *((_QWORD *)this + 6) = (char *)this + 56;
  *((_QWORD *)this + 7) = 0;
  v11 = (_QWORD *)*((_QWORD *)this + 10);
  v10 = (_QWORD *)((char *)this + 80);
  *(v10 - 2) = 0;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(v10 - 1), v11);
  *(v10 - 1) = v10;
  *v10 = 0;
  v10[1] = 0;
}

void webrtc::video_coding::PacketBuffer::UpdateMissingPackets(webrtc::video_coding::PacketBuffer *this, unsigned int a2)
{
  char *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int16 v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **i;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  char *v23;
  char *v24;
  int v25;
  BOOL v26;
  int v27;
  char v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  char v34;
  BOOL v35;
  char *v36;
  char *v37;
  unsigned int v38;
  _BOOL4 v39;
  _BOOL4 v40;
  unsigned __int16 v41;
  unsigned int v42;
  _BOOL4 v43;
  _BOOL4 v44;
  char *v45;

  if (*((_BYTE *)this + 42))
  {
    v4 = (char *)this + 40;
    v5 = *((unsigned __int16 *)this + 20);
    v6 = a2 - v5;
    if (a2 != v5 && (v6 == 0x8000 ? a2 > v5 : (v6 & 0x8000u) == 0))
    {
      v8 = a2 - 1000;
      v10 = (uint64_t *)((char *)this + 56);
      v9 = (uint64_t *)*((_QWORD *)this + 7);
      for (i = (uint64_t **)((char *)this + 48); v9; v9 = (uint64_t *)*v9)
      {
        while (1)
        {
          v15 = *((unsigned __int16 *)v9 + 13);
          if (v15 != v8)
            break;
          v10 = v9;
          v9 = (uint64_t *)*v9;
          if (!v9)
            goto LABEL_17;
        }
        v12 = (unsigned __int16)(a2 - 1000) - v15;
        v13 = v15 < v8;
        v14 = (__int16)(v8 - v15) >= 0;
        if (v12 == 0x8000)
          v14 = v13;
        if (v14)
          ++v9;
        else
          v10 = v9;
      }
LABEL_17:
      v16 = *i;
      if (*i == v10)
      {
        if (v5 == v8)
          goto LABEL_60;
LABEL_56:
        v38 = v8 - v5;
        v39 = v8 > v5;
        v40 = (__int16)(v8 - v5) >= 0;
        if (v38 == 0x8000)
          v40 = v39;
        if (v40)
          *(_WORD *)v4 = v8;
LABEL_60:
        while (1)
        {
          v41 = *(_WORD *)v4 + 1;
          *(_WORD *)v4 = v41;
          if (a2 == v41)
            break;
          v42 = a2 - v41;
          v43 = a2 > v41;
          v44 = (__int16)(a2 - v41) >= 0;
          if (v42 == 0x8000)
            v44 = v43;
          if (!v44)
            break;
          v18 = std::__tree<unsigned short,webrtc::DescendingSeqNumComp<unsigned short,(unsigned short)0>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)this + 6, (unsigned __int16 *)this + 20, (_WORD *)this + 20);
          if (!*((_BYTE *)this + 42))
            goto LABEL_65;
        }
        return;
      }
      do
      {
        v19 = (uint64_t *)v16[1];
        v20 = v16;
        if (v19)
        {
          do
          {
            v21 = v19;
            v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v21 = (uint64_t *)v20[2];
            v22 = *v21 == (_QWORD)v20;
            v20 = v21;
          }
          while (!v22);
        }
        if (*i == v16)
          *i = v21;
        v17 = (uint64_t *)*((_QWORD *)this + 7);
        --*((_QWORD *)this + 8);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v17, v16);
        operator delete(v16);
        v16 = v21;
      }
      while (v21 != v10);
      if (*((_BYTE *)this + 42))
      {
        v5 = *(unsigned __int16 *)v4;
        if (v5 == v8)
          goto LABEL_60;
        goto LABEL_56;
      }
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
  }
  else
  {
    *((_WORD *)this + 20) = a2;
    *((_BYTE *)this + 42) = 1;
  }
  v23 = (char *)this + 56;
  v18 = (uint64_t *)*((_QWORD *)this + 7);
  if (v18)
  {
    v4 = (char *)this + 56;
    v24 = (char *)*((_QWORD *)this + 7);
    do
    {
      while (1)
      {
        v30 = *((unsigned __int16 *)v24 + 13);
        if (a2 != v30)
          break;
        v4 = v24;
        v24 = *(char **)v24;
        if (!v24)
          goto LABEL_42;
      }
      v25 = a2 - v30;
      v26 = a2 >= v30;
      v27 = a2 - v30;
      v28 = v27 != 0 && v26;
      v29 = (v27 & 0x8000u) == 0;
      if (v25 == 0x8000)
        v29 = v28;
      if (v29)
        v24 += 8;
      else
        v4 = v24;
      v24 = *(char **)v24;
    }
    while (v24);
LABEL_42:
    if (v4 != v23)
    {
      v31 = *((unsigned __int16 *)v4 + 13);
      if (v31 == a2)
        goto LABEL_51;
      v32 = v31 - a2;
      v26 = v31 >= a2;
      v33 = v31 - a2;
      v34 = v33 != 0 && v26;
      v35 = (v33 & 0x8000u) == 0;
      if (v32 == 0x8000)
        v35 = v34;
      if (!v35)
      {
LABEL_51:
        v36 = (char *)*((_QWORD *)v4 + 1);
        if (v36)
        {
          do
          {
            v37 = v36;
            v36 = *(char **)v36;
          }
          while (v36);
LABEL_69:
          if (*((char **)this + 6) == v4)
            *((_QWORD *)this + 6) = v37;
          --*((_QWORD *)this + 8);
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v18, (uint64_t *)v4);
          operator delete(v4);
          return;
        }
LABEL_66:
        v45 = v4;
        do
        {
          v37 = (char *)*((_QWORD *)v45 + 2);
          v22 = *(_QWORD *)v37 == (_QWORD)v45;
          v45 = v37;
        }
        while (!v22);
        goto LABEL_69;
      }
    }
  }
}

void webrtc::video_coding::PacketBuffer::FindFrames(webrtc::video_coding::PacketBuffer *this@<X0>, unsigned int a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  char v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  unsigned int v67;
  BOOL v68;
  _QWORD *v69;
  BOOL v70;
  _QWORD *v71;
  BOOL v72;
  _QWORD *v73;
  uint64_t v74;
  unsigned __int16 v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  uint64_t *v99;
  unsigned int v100;
  int v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  uint64_t *v105;
  uint64_t *v106;
  unsigned int v107;
  BOOL v108;
  uint64_t **v109;
  BOOL v110;
  uint64_t *v111;
  BOOL v112;
  uint64_t **v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  unsigned int v123;
  BOOL v124;
  unsigned int v125;
  char v126;
  BOOL v127;
  unsigned int v128;
  unsigned int v129;
  BOOL v130;
  uint64_t **v131;
  BOOL v132;
  uint64_t *v133;
  BOOL v134;
  uint64_t **v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char v150;
  int v151;
  unint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  char v155;
  const char *v156;
  unint64_t v157;
  char *v158;
  const char *v159;
  const char **v160;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3);
  if (v5 == v4)
    return;
  v8 = 0;
  v9 = (v5 - v4) >> 3;
  v154 = (uint64_t *)((char *)this + 80);
  v153 = (uint64_t *)((char *)this + 56);
  v10 = a2;
  while (1)
  {
    v11 = *v154;
    if (!*v154)
      goto LABEL_220;
    v12 = v154;
    do
    {
      while (1)
      {
        v16 = *(unsigned __int16 *)(v11 + 26);
        if (v16 != (unsigned __int16)v10)
          break;
        v12 = (uint64_t *)v11;
        v11 = *(_QWORD *)v11;
        if (!v11)
          goto LABEL_14;
      }
      v13 = (unsigned __int16)v10 - v16;
      v14 = v16 < (unsigned __int16)v10;
      v15 = (__int16)(v10 - v16) >= 0;
      if (v13 == 0x8000)
        v15 = v14;
      if (v15)
        v11 += 8;
      else
        v12 = (uint64_t *)v11;
      v11 = *(_QWORD *)v11;
    }
    while (v11);
LABEL_14:
    if (v12 == v154
      || (v17 = *((unsigned __int16 *)v12 + 13), v17 != (unsigned __int16)v10)
      && ((v18 = v17 - (unsigned __int16)v10,
           v19 = v17 <= (unsigned __int16)v10,
           v20 = (__int16)(v17 - v10) < 0,
           v18 != 0x8000)
        ? (v21 = v20)
        : (v21 = v19),
          !v21))
    {
LABEL_220:
      v22 = (v5 - v4) >> 3;
      v23 = (unsigned __int16)v10 % v22;
      if (v23)
        v24 = (unsigned __int16)v10 % v22;
      else
        v24 = (v5 - v4) >> 3;
      v25 = v24 - 1;
      if (v22 <= v25)
      {
LABEL_216:
        __break(1u);
LABEL_217:
        abort();
      }
      v26 = *(_QWORD *)(v4 + 8 * v23);
      if (!v26)
        return;
      if (*(unsigned __int16 *)(v26 + 4) != (unsigned __int16)v10)
        return;
      if (!*(_BYTE *)(v26 + 205))
      {
        v27 = *(_QWORD *)(v4 + 8 * v25);
        if (!v27
          || *(unsigned __int16 *)(v27 + 4) != (unsigned __int16)(v10 - 1)
          || *(_DWORD *)(v27 + 8) != *(_DWORD *)(v26 + 8)
          || !*(_BYTE *)v27)
        {
          return;
        }
      }
      v28 = (unsigned __int16)v10 % v9;
      v29 = *(_QWORD *)(v4 + 8 * v28);
      *(_BYTE *)v29 = 1;
      if (*(_BYTE *)(v29 + 206))
        break;
    }
LABEL_3:
    ++v10;
    ++v8;
    v4 = *((_QWORD *)this + 2);
    v5 = *((_QWORD *)this + 3);
    v9 = (v5 - v4) >> 3;
    if (v8 >= v9)
      return;
  }
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = *(_DWORD *)(v29 + 8);
  v36 = *(unsigned __int8 *)(v29 + 184);
  v37 = *(_DWORD *)(v29 + 212);
  if (v36)
    v38 = 0;
  else
    v38 = v37 == 4;
  v39 = v38;
  v40 = -1;
  v41 = v10;
  v42 = -1;
  while (1)
  {
    while (1)
    {
      ++v34;
      if ((v39 & 1) != 0)
        break;
      if (v9 <= (int)v28)
        goto LABEL_216;
      v56 = *(_QWORD *)(v4 + 8 * (int)v28);
      if (!v56)
        goto LABEL_3;
      if (*(_BYTE *)(v56 + 205))
        goto LABEL_111;
      if (v34 == v9)
        goto LABEL_3;
      if ((int)v28 <= 0)
        LODWORD(v28) = v9 - 1;
      else
        LODWORD(v28) = v28 - 1;
      --v41;
    }
    if (v9 <= (int)v28)
      goto LABEL_216;
    v43 = *(_QWORD *)(v4 + 8 * (int)v28);
    v44 = *(_QWORD *)(v43 + 1976);
    v45 = v44 == 3;
    if (v44 == 3)
      v46 = v43 + 336;
    else
      v46 = 0;
    if (!v45)
      return;
    v47 = *(_QWORD *)(v43 + 464);
    if (v47 > 9)
      return;
    if (v47)
    {
      v48 = (unsigned __int8 *)(v46 + 8);
      do
      {
        v50 = *v48;
        v48 += 12;
        v49 = v50;
        if (v50 == 8)
          v51 = 1;
        else
          v51 = v31;
        if (v49 == 7)
          v52 = 1;
        else
          v52 = v30;
        if (v49 == 7)
          v51 = v31;
        if (v49 == 5)
        {
          v32 = 1;
        }
        else
        {
          v30 = v52;
          v31 = v51;
        }
        --v47;
      }
      while (v47);
    }
    if (((*((_BYTE *)this + 96) != 0) & v32 & v30 & v31) != 0
      || ((*((_BYTE *)this + 96) == 0) & v32) != 0)
    {
      v53 = *(unsigned __int16 *)(v43 + 196);
      if (*(_WORD *)(v43 + 196))
      {
        v54 = *(unsigned __int16 *)(v43 + 198);
        if (v54)
        {
          v40 = v53;
          v42 = v54;
        }
      }
      v33 = 1;
    }
    if (v34 == v9)
      break;
    if ((int)v28 <= 0)
      LODWORD(v28) = v9 - 1;
    else
      LODWORD(v28) = v28 - 1;
    if (v9 <= (int)v28)
      goto LABEL_216;
    v55 = *(_QWORD *)(v4 + 8 * (int)v28);
    if (!v55 || *(_DWORD *)(v55 + 8) != v35)
      break;
    --v41;
  }
  if ((v32 & 1) == 0 || (v30 & v31 & 1) != 0)
  {
    v64 = (unsigned __int16)v41 % (unint64_t)((v5 - v4) >> 3);
    if ((v33 & 1) == 0)
      goto LABEL_88;
LABEL_108:
    v74 = *(_QWORD *)(v4 + 8 * v64);
    *(_DWORD *)(v74 + 192) = 3;
    if (v40 >= 1 && v42 >= 1)
    {
      *(_WORD *)(v74 + 196) = v40;
      *(_WORD *)(v74 + 198) = v42;
    }
LABEL_111:
    v152 = v8;
    v75 = v10 + 1;
    v77 = (char *)*a3;
    v76 = (char *)a3[1];
    v78 = (uint64_t)&v76[-*a3] >> 3;
    v79 = v78 + (unsigned __int16)(v10 + 1 - v41);
    if (v79 <= (uint64_t)(a3[2] - *a3) >> 3)
    {
LABEL_127:
      v8 = v152;
      if (v75 != (unsigned __int16)v41)
      {
        v99 = (uint64_t *)a3[1];
        v100 = v41;
        do
        {
          while (1)
          {
            v102 = (uint64_t *)(*((_QWORD *)this + 2)
                             + 8
                             * ((unsigned __int16)v100
                              % (unint64_t)((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3)));
            v103 = *v102;
            *(_BYTE *)(*v102 + 205) = (unsigned __int16)v100 == (unsigned __int16)v41;
            *(_BYTE *)(v103 + 206) = (unsigned __int16)v100 == (unsigned __int16)v10;
            if ((unint64_t)v99 < a3[2])
              break;
            v99 = std::vector<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>::__push_back_slow_path<std::unique_ptr<webrtc::video_coding::PacketBuffer::Packet>>(a3, v102);
            v101 = (unsigned __int16)v100;
            a3[1] = (unint64_t)v99;
            ++v100;
            if (v101 == (unsigned __int16)v10)
              goto LABEL_133;
          }
          if (!v99)
            goto LABEL_216;
          *v102 = 0;
          *v99++ = v103;
          v104 = (unsigned __int16)v100;
          a3[1] = (unint64_t)v99;
          ++v100;
        }
        while (v104 != (unsigned __int16)v10);
      }
LABEL_133:
      v105 = (uint64_t *)*((_QWORD *)this + 7);
      v106 = v153;
      if (v105)
      {
        v106 = v153;
        do
        {
          v107 = *((unsigned __int16 *)v105 + 13);
          if (v107 - (unsigned __int16)v10 == 0x8000)
            v108 = v107 > (unsigned __int16)v10;
          else
            v108 = (__int16)(v107 - v10) >= 0;
          v109 = (uint64_t **)(v105 + 1);
          v110 = !v108;
          if (v108)
            v111 = v105;
          else
            v111 = v105 + 1;
          if (v110)
            v105 = v106;
          v112 = v107 == (unsigned __int16)v10;
          if (v107 == (unsigned __int16)v10)
            v113 = v109;
          else
            v113 = (uint64_t **)v111;
          if (!v112)
            v106 = v105;
          v105 = *v113;
        }
        while (*v113);
      }
      v114 = (uint64_t *)*((_QWORD *)this + 6);
      if (v114 != v106)
      {
        do
        {
          v120 = (uint64_t *)v114[1];
          v121 = v114;
          if (v120)
          {
            do
            {
              v122 = v120;
              v120 = (uint64_t *)*v120;
            }
            while (v120);
          }
          else
          {
            do
            {
              v122 = (uint64_t *)v121[2];
              v38 = *v122 == (_QWORD)v121;
              v121 = v122;
            }
            while (!v38);
          }
          if (*((uint64_t **)this + 6) == v114)
            *((_QWORD *)this + 6) = v122;
          v119 = (uint64_t *)*((_QWORD *)this + 7);
          --*((_QWORD *)this + 8);
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v119, v114);
          operator delete(v114);
          v114 = v122;
        }
        while (v122 != v106);
      }
      v115 = v154;
      v116 = (uint64_t *)*v154;
      if (*v154)
      {
        v117 = v154;
        v118 = *v154;
        do
        {
          while (1)
          {
            v128 = *(unsigned __int16 *)(v118 + 26);
            if (a2 != v128)
              break;
            v117 = (uint64_t *)v118;
            v118 = *(_QWORD *)v118;
            if (!v118)
              goto LABEL_172;
          }
          v123 = a2 - v128;
          v124 = a2 >= v128;
          v125 = a2 - v128;
          v126 = v125 != 0 && v124;
          v127 = (v125 & 0x8000u) == 0;
          if (v123 == 0x8000)
            v127 = v126;
          if (v127)
            v118 += 8;
          else
            v117 = (uint64_t *)v118;
          v118 = *(_QWORD *)v118;
        }
        while (v118);
        do
        {
LABEL_172:
          v129 = *((unsigned __int16 *)v116 + 13);
          if (v129 - (unsigned __int16)v10 == 0x8000)
            v130 = v129 > (unsigned __int16)v10;
          else
            v130 = (__int16)(v129 - v10) >= 0;
          v131 = (uint64_t **)(v116 + 1);
          v132 = !v130;
          if (v130)
            v133 = v116;
          else
            v133 = v116 + 1;
          if (v132)
            v116 = v115;
          v134 = v129 == (unsigned __int16)v10;
          if (v129 == (unsigned __int16)v10)
            v135 = v131;
          else
            v135 = (uint64_t **)v133;
          if (!v134)
            v115 = v116;
          v116 = *v135;
        }
        while (*v135);
        if (v117 != v115)
        {
          do
          {
            v137 = (uint64_t *)v117[1];
            v138 = v117;
            if (v137)
            {
              do
              {
                v139 = v137;
                v137 = (uint64_t *)*v137;
              }
              while (v137);
            }
            else
            {
              do
              {
                v139 = (uint64_t *)v138[2];
                v38 = *v139 == (_QWORD)v138;
                v138 = v139;
              }
              while (!v38);
            }
            if (*((uint64_t **)this + 9) == v117)
              *((_QWORD *)this + 9) = v139;
            v136 = (uint64_t *)*((_QWORD *)this + 10);
            --*((_QWORD *)this + 11);
            std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v136, v117);
            operator delete(v117);
            v117 = v139;
          }
          while (v139 != v115);
        }
      }
      goto LABEL_3;
    }
    v149 = &v76[-*a3];
    if (v79 >> 61)
      goto LABEL_217;
    v80 = 8 * v79;
    v81 = (char *)operator new(8 * v79);
    v82 = (unint64_t)&v81[8 * v78];
    v83 = &v81[v80];
    v84 = (char *)(v76 - v77);
    if (v76 == v77)
    {
      *a3 = v82;
      a3[1] = v82;
      a3[2] = (unint64_t)v83;
LABEL_117:
      v75 = v10 + 1;
      goto LABEL_125;
    }
    v85 = v84 - 8;
    if ((unint64_t)(v84 - 8) >= 0x78)
    {
      v87 = (v76 - 8 - v77) & 0xFFFFFFFFFFFFFFF8;
      v75 = v10 + 1;
      if ((unint64_t)&v76[-v87 - 8] >= v82
        || (v88 = (unint64_t)&v149[(_QWORD)v81 - v87 - 8], v86 = &v81[8 * v78], v88 >= (unint64_t)v76))
      {
        v89 = ((unint64_t)v85 >> 3) + 1;
        v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
        v91 = &v76[-v90];
        v86 = (char *)(v82 - v90);
        v92 = &v81[8 * v78 - 16];
        v93 = v76 - 16;
        v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v96 = *((_OWORD *)v93 - 1);
          v95 = *(_OWORD *)v93;
          *((_OWORD *)v93 - 1) = 0uLL;
          *(_OWORD *)v93 = 0uLL;
          *((_OWORD *)v92 - 1) = v96;
          *(_OWORD *)v92 = v95;
          v92 -= 32;
          v93 -= 32;
          v94 -= 4;
        }
        while (v94);
        v76 = v91;
        if (v89 == (v89 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_124:
          v76 = (char *)*a3;
          v98 = (char *)a3[1];
          *a3 = (unint64_t)v86;
          a3[1] = v82;
          a3[2] = (unint64_t)v83;
          if (v98 == v76)
          {
LABEL_125:
            if (v76)
              operator delete(v76);
            goto LABEL_127;
          }
          while (1)
          {
            v141 = *((_QWORD *)v98 - 1);
            v98 -= 8;
            v140 = v141;
            *(_QWORD *)v98 = 0;
            if (v141)
              break;
LABEL_199:
            if (v98 == v76)
              goto LABEL_117;
          }
          if (*(_BYTE *)(v140 + 184))
          {
            if ((*(_BYTE *)(v140 + 152) & 1) != 0)
            {
              operator delete(*(void **)(v140 + 160));
              if ((*(_BYTE *)(v140 + 104) & 1) == 0)
              {
LABEL_204:
                if ((*(_BYTE *)(v140 + 56) & 1) == 0)
                  goto LABEL_206;
                goto LABEL_205;
              }
            }
            else if ((*(_BYTE *)(v140 + 104) & 1) == 0)
            {
              goto LABEL_204;
            }
            operator delete(*(void **)(v140 + 112));
            if ((*(_BYTE *)(v140 + 56) & 1) != 0)
LABEL_205:
              operator delete(*(void **)(v140 + 64));
          }
LABEL_206:
          v142 = *(_QWORD *)(v140 + 16);
          if (v142)
          {
            v143 = (unsigned int *)(v142 + 24);
            do
            {
              v144 = __ldaxr(v143);
              v145 = v144 - 1;
            }
            while (__stlxr(v145, v143));
            if (!v145)
            {
              v146 = *(_QWORD *)(v142 + 16);
              *(_QWORD *)(v142 + 16) = 0;
              if (v146)
                MEMORY[0x20BD0ADD4](v146, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v142, 0x1010C40EE34DA14);
            }
          }
          MEMORY[0x20BD0ADEC](v140, 0x10B2C4061102D9CLL);
          goto LABEL_199;
        }
      }
    }
    else
    {
      v86 = &v81[8 * v78];
      v75 = v10 + 1;
    }
    do
    {
      v97 = *((_QWORD *)v76 - 1);
      v76 -= 8;
      *(_QWORD *)v76 = 0;
      *((_QWORD *)v86 - 1) = v97;
      v86 -= 8;
    }
    while (v76 != v77);
    goto LABEL_124;
  }
  v150 = v33;
  v151 = v40;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    v156 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_codin"
           "g/packet_buffer.cc";
    v157 = v147 & 0xFFFFFFFF00000000 | 0xAAA;
    v158 = &v155;
    v159 = "Received H.264-IDR frame (SPS: ";
    v160 = &v156;
    v148 = v148 & 0xFFFFFFFF00000000 | v30 & 1;
    v147 = v157;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v57, v58, v59, v60, v61, v62, v63, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/packet_buffer.cc");
  }
  v4 = *((_QWORD *)this + 2);
  v64 = (unsigned __int16)v41 % (unint64_t)((*((_QWORD *)this + 3) - v4) >> 3);
  v40 = v151;
  if ((v150 & 1) != 0)
    goto LABEL_108;
LABEL_88:
  *(_DWORD *)(*(_QWORD *)(v4 + 8 * v64) + 192) = 4;
  v65 = v153;
  v66 = (_QWORD *)*v153;
  if (*v153)
  {
    v65 = v153;
    do
    {
      v67 = *((unsigned __int16 *)v66 + 13);
      if (v67 - (unsigned __int16)v41 == 0x8000)
        v68 = v67 > (unsigned __int16)v41;
      else
        v68 = (__int16)(v67 - v41) >= 0;
      v69 = v66 + 1;
      v70 = !v68;
      if (v68)
        v71 = v66;
      else
        v71 = v66 + 1;
      if (v70)
        v66 = v65;
      v72 = v67 == (unsigned __int16)v41;
      if (v67 == (unsigned __int16)v41)
        v73 = v69;
      else
        v73 = v71;
      if (!v72)
        v65 = v66;
      v66 = (_QWORD *)*v73;
    }
    while (*v73);
  }
  if (v65 == *((uint64_t **)this + 6))
    goto LABEL_111;
}

void webrtc::video_coding::PacketBuffer::ClearTo(webrtc::video_coding::PacketBuffer *this, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  char v6;
  BOOL v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *j;
  unsigned int v28;
  BOOL v29;
  BOOL v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *k;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  BOOL v39;
  unsigned int v40;
  BOOL v41;
  BOOL v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;

  if (!*((_BYTE *)this + 11)
    || (v3 = *((unsigned __int16 *)this + 4), v4 = v3 >= a2, (v5 = v3 - a2) == 0)
    || (v5 == 0 || !v4 ? (v6 = 0) : (v6 = 1), v5 != 0x8000 ? (v7 = (v5 & 0x8000u) == 0) : (v7 = v6), !v7))
  {
    if (*((_BYTE *)this + 10))
    {
      v8 = a2 + 1;
      v9 = *((_WORD *)this + 4);
      v10 = *((_QWORD *)this + 2);
      if ((*((_QWORD *)this + 3) - v10) >> 3 >= (unint64_t)(unsigned __int16)(a2 + 1 - v9))
        v11 = (unsigned __int16)(a2 + 1 - v9);
      else
        v11 = (*((_QWORD *)this + 3) - v10) >> 3;
      if (v11)
      {
        for (i = 0; i != v11; ++i)
        {
          v13 = *((_QWORD *)this + 2);
          v14 = v9 % (unint64_t)((*((_QWORD *)this + 3) - v13) >> 3);
          v15 = *(_QWORD *)(v13 + 8 * v14);
          if (!v15)
            goto LABEL_18;
          v16 = *(unsigned __int16 *)(v15 + 4);
          if (v16 == v8)
            goto LABEL_18;
          v17 = v8 - v16;
          v18 = v16 < v8;
          v19 = (__int16)(v8 - v16) >= 0;
          if (v17 == 0x8000)
            v19 = v18;
          if (!v19)
            goto LABEL_18;
          *(_QWORD *)(v13 + 8 * v14) = 0;
          if (*(_BYTE *)(v15 + 184))
          {
            if ((*(_BYTE *)(v15 + 152) & 1) != 0)
            {
              operator delete(*(void **)(v15 + 160));
              if ((*(_BYTE *)(v15 + 104) & 1) == 0)
              {
LABEL_27:
                if ((*(_BYTE *)(v15 + 56) & 1) == 0)
                  goto LABEL_29;
LABEL_28:
                operator delete(*(void **)(v15 + 64));
                goto LABEL_29;
              }
            }
            else if ((*(_BYTE *)(v15 + 104) & 1) == 0)
            {
              goto LABEL_27;
            }
            operator delete(*(void **)(v15 + 112));
            if ((*(_BYTE *)(v15 + 56) & 1) != 0)
              goto LABEL_28;
          }
LABEL_29:
          v20 = *(_QWORD *)(v15 + 16);
          if (v20)
          {
            v21 = (unsigned int *)(v20 + 24);
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              v24 = *(_QWORD *)(v20 + 16);
              *(_QWORD *)(v20 + 16) = 0;
              if (v24)
                MEMORY[0x20BD0ADD4](v24, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v20, 0x1010C40EE34DA14);
            }
          }
          MEMORY[0x20BD0ADEC](v15, 0x10B2C4061102D9CLL);
          v9 = *((_WORD *)this + 4);
LABEL_18:
          *((_WORD *)this + 4) = ++v9;
        }
      }
      v26 = (uint64_t *)((char *)this + 56);
      v25 = (uint64_t *)*((_QWORD *)this + 7);
      *((_WORD *)this + 4) = v8;
      *((_BYTE *)this + 11) = 1;
      for (j = (uint64_t *)*((_QWORD *)this + 6); v25; v25 = (uint64_t *)*v25)
      {
        while (1)
        {
          v31 = *((unsigned __int16 *)v25 + 13);
          if (v31 != v8)
            break;
          v26 = v25;
          v25 = (uint64_t *)*v25;
          if (!v25)
            goto LABEL_48;
        }
        v28 = v8 - v31;
        v29 = v31 < v8;
        v30 = (__int16)(v8 - v31) >= 0;
        if (v28 == 0x8000)
          v30 = v29;
        if (v30)
          ++v25;
        else
          v26 = v25;
      }
LABEL_48:
      if (j != v26)
      {
        do
        {
          v36 = (uint64_t *)j[1];
          v37 = j;
          if (v36)
          {
            do
            {
              v38 = v36;
              v36 = (uint64_t *)*v36;
            }
            while (v36);
          }
          else
          {
            do
            {
              v38 = (uint64_t *)v37[2];
              v39 = *v38 == (_QWORD)v37;
              v37 = v38;
            }
            while (!v39);
          }
          if (*((uint64_t **)this + 6) == j)
            *((_QWORD *)this + 6) = v38;
          v35 = (uint64_t *)*((_QWORD *)this + 7);
          --*((_QWORD *)this + 8);
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v35, j);
          operator delete(j);
          j = v38;
        }
        while (v38 != v26);
      }
      v33 = (uint64_t *)((char *)this + 80);
      v32 = (uint64_t *)*((_QWORD *)this + 10);
      for (k = (uint64_t *)*((_QWORD *)this + 9); v32; v32 = (uint64_t *)*v32)
      {
        while (1)
        {
          v43 = *((unsigned __int16 *)v32 + 13);
          if (v43 != v8)
            break;
          v33 = v32;
          v32 = (uint64_t *)*v32;
          if (!v32)
            goto LABEL_67;
        }
        v40 = v8 - v43;
        v41 = v43 < v8;
        v42 = (__int16)(v8 - v43) >= 0;
        if (v40 == 0x8000)
          v42 = v41;
        if (v42)
          ++v32;
        else
          v33 = v32;
      }
LABEL_67:
      if (k != v33)
      {
        do
        {
          v45 = (uint64_t *)k[1];
          v46 = k;
          if (v45)
          {
            do
            {
              v47 = v45;
              v45 = (uint64_t *)*v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              v47 = (uint64_t *)v46[2];
              v39 = *v47 == (_QWORD)v46;
              v46 = v47;
            }
            while (!v39);
          }
          if (*((uint64_t **)this + 9) == k)
            *((_QWORD *)this + 9) = v47;
          v44 = (uint64_t *)*((_QWORD *)this + 10);
          --*((_QWORD *)this + 11);
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v44, k);
          operator delete(k);
          k = v47;
        }
        while (v47 != v33);
      }
    }
  }
}

void webrtc::PacketRouter::~PacketRouter(webrtc::PacketRouter *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  webrtc::PacketRouter *v20;
  uint64_t v21;
  uint64_t v22;
  webrtc::PacketRouter *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;

  *(_QWORD *)this = &off_24C0B87C0;
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 30));
  v2 = (_QWORD *)*((_QWORD *)this + 26);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 27);
    v4 = (void *)*((_QWORD *)this + 26);
    if (v3 != v2)
    {
      do
      {
        v6 = (_QWORD *)*--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = (unsigned int *)v5[22];
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
          }
          v11 = v5[11];
          if (v11)
          {
            v12 = (unsigned int *)(v11 + 24);
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              v15 = *(_QWORD *)(v11 + 16);
              *(_QWORD *)(v11 + 16) = 0;
              if (v15)
                MEMORY[0x20BD0ADD4](v15, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v11, 0x1010C40EE34DA14);
            }
          }
          v16 = (void *)v5[7];
          if (v16)
          {
            v5[8] = v16;
            operator delete(v16);
          }
          MEMORY[0x20BD0ADEC](v5, 0x1020C4000E59722);
        }
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 26);
    }
    *((_QWORD *)this + 27) = v2;
    operator delete(v4);
  }
  (*((void (**)(uint64_t, char *, char *))this + 24))(1, (char *)this + 176, (char *)this + 176);
  v17 = (void *)*((_QWORD *)this + 17);
  if (v17)
  {
    *((_QWORD *)this + 18) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 14);
  if (v18)
  {
    *((_QWORD *)this + 15) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 11);
  if (v19)
  {
    *((_QWORD *)this + 12) = v19;
    operator delete(v19);
  }
  if (*((_QWORD *)this + 9))
  {
    v21 = *((_QWORD *)this + 7);
    v20 = (webrtc::PacketRouter *)*((_QWORD *)this + 8);
    v22 = *(_QWORD *)v20;
    *(_QWORD *)(v22 + 8) = *(_QWORD *)(v21 + 8);
    **(_QWORD **)(v21 + 8) = v22;
    *((_QWORD *)this + 9) = 0;
    if (v20 != (webrtc::PacketRouter *)((char *)this + 56))
    {
      do
      {
        v23 = (webrtc::PacketRouter *)*((_QWORD *)v20 + 1);
        operator delete(v20);
        v20 = v23;
      }
      while (v23 != (webrtc::PacketRouter *)((char *)this + 56));
    }
  }
  v24 = (_QWORD *)*((_QWORD *)this + 4);
  if (v24)
  {
    do
    {
      v25 = (_QWORD *)*v24;
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
  v26 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v26)
    operator delete(v26);
}

{
  webrtc::PacketRouter::~PacketRouter(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::PacketRouter::AddSendRtpModule(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2);
  webrtc::PacketRouter::AddSendRtpModuleToMap((uint64_t)a1, a2, v6, v7, v8, v9, v10, v11);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 240))(a2);
  if ((v12 & 0xFF00000000) != 0)
    webrtc::PacketRouter::AddSendRtpModuleToMap((uint64_t)a1, a2, v12, v13, v14, v15, v16, v17);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 256))(a2);
  if ((v18 & 0xFF00000000) != 0)
    webrtc::PacketRouter::AddSendRtpModuleToMap((uint64_t)a1, a2, v18, v19, v20, v21, v22, v23);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2);
  if ((_DWORD)result)
    a1[10] = a2;
  if (a3)
    return webrtc::PacketRouter::AddRembModuleCandidate(a1, a2, 1);
  return result;
}

void webrtc::PacketRouter::AddSendRtpModuleToMap(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  _QWORD *v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t prime;
  void *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  size_t v46;
  size_t v47;
  size_t v48;
  _QWORD *i;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  size_t v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;

  v12 = a3;
  v13 = *(_QWORD *)(a1 + 24);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v15 = a3;
      if (v13 <= a3)
        v15 = a3 % v13;
    }
    else
    {
      v15 = ((_DWORD)v13 - 1) & a3;
    }
    v16 = *(uint64_t ***)(*(_QWORD *)(a1 + 16) + 8 * v15);
    if (v16)
    {
      v17 = *v16;
      if (v17)
      {
        if (v14.u32[0] < 2uLL)
        {
          v18 = v13 - 1;
          while (1)
          {
            v20 = v17[1];
            if (v20 == a3)
            {
              if (*((_DWORD *)v17 + 4) == a3)
                goto LABEL_119;
            }
            else if ((v20 & v18) != v15)
            {
              goto LABEL_21;
            }
            v17 = (uint64_t *)*v17;
            if (!v17)
              goto LABEL_21;
          }
        }
        do
        {
          v19 = v17[1];
          if (v19 == a3)
          {
            if (*((_DWORD *)v17 + 4) == a3)
            {
LABEL_119:
              rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/packet_router.cc", 88, "send_modules_map_.find(ssrc) == send_modules_map_.end()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v64);
LABEL_120:
              std::__throw_bad_array_new_length[abi:sn180100]();
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v15)
              break;
          }
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
    }
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 440))(a2);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 296))(a2);
  v22 = (_QWORD *)(a1 + 56);
  v23 = operator new(0x18uLL);
  v23[2] = a2;
  if (v21)
  {
    v24 = *v22;
    v25 = (_QWORD *)(*v22 + 8);
    v26 = (_QWORD *)(a1 + 56);
  }
  else
  {
    v24 = a1 + 56;
    v22 = (_QWORD *)(a1 + 64);
    v26 = *(_QWORD **)(a1 + 64);
    v25 = v26;
  }
  *v23 = v24;
  v23[1] = v26;
  *v25 = v23;
  *v22 = v23;
  ++*(_QWORD *)(a1 + 72);
  v27 = *(_QWORD *)(a1 + 24);
  if (v27)
  {
    v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.u32[0] > 1uLL)
    {
      v8 = v12;
      if (v27 <= v12)
        v8 = v12 % v27;
    }
    else
    {
      v8 = ((_DWORD)v27 - 1) & v12;
    }
    v29 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * v8);
    if (v29)
    {
      v30 = (_QWORD *)*v29;
      if (*v29)
      {
        if (v28.u32[0] < 2uLL)
        {
          while (1)
          {
            v32 = v30[1];
            if (v32 == v12)
            {
              if (*((_DWORD *)v30 + 4) == a3)
                goto LABEL_118;
            }
            else if ((v32 & (v27 - 1)) != v8)
            {
              goto LABEL_45;
            }
            v30 = (_QWORD *)*v30;
            if (!v30)
              goto LABEL_45;
          }
        }
        do
        {
          v31 = v30[1];
          if (v31 == v12)
          {
            if (*((_DWORD *)v30 + 4) == a3)
              goto LABEL_118;
          }
          else
          {
            if (v31 >= v27)
              v31 %= v27;
            if (v31 != v8)
              break;
          }
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
    }
  }
LABEL_45:
  v30 = operator new(0x20uLL);
  *v30 = 0;
  v30[1] = v12;
  *((_DWORD *)v30 + 4) = a3;
  v30[3] = 0;
  v33 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v34 = *(float *)(a1 + 48);
  if (!v27 || (float)(v34 * (float)v27) < v33)
  {
    v37 = 1;
    if (v27 >= 3)
      v37 = (v27 & (v27 - 1)) != 0;
    v38 = v37 | (2 * v27);
    v39 = vcvtps_u32_f32(v33 / v34);
    if (v38 <= v39)
      prime = v39;
    else
      prime = v38;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v27 = *(_QWORD *)(a1 + 24);
    }
    if (prime > v27)
      goto LABEL_59;
    if (prime < v27)
    {
      v53 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
      if (v27 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v27), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v60 = std::__next_prime(v53);
        if (prime <= v60)
          prime = v60;
        if (prime >= v27)
        {
LABEL_82:
          v27 = *(_QWORD *)(a1 + 24);
          if ((v27 & (v27 - 1)) == 0)
            goto LABEL_109;
          goto LABEL_96;
        }
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
        if (prime <= v53)
          prime = v53;
        if (prime >= v27)
          goto LABEL_82;
      }
      if (prime)
      {
LABEL_59:
        if (prime >> 61)
          goto LABEL_120;
        v41 = operator new(8 * prime);
        v42 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v41;
        if (v42)
          operator delete(v42);
        v43 = 0;
        *(_QWORD *)(a1 + 24) = prime;
        do
          *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v43++) = 0;
        while (prime != v43);
        v45 = a1 + 32;
        v44 = *(_QWORD **)(a1 + 32);
        if (!v44)
          goto LABEL_95;
        v46 = v44[1];
        v47 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v48 = v46 & v47;
          *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v48) = v45;
          for (i = (_QWORD *)*v44; *v44; i = (_QWORD *)*v44)
          {
            v50 = i[1] & v47;
            if (v50 == v48)
            {
              v44 = i;
            }
            else
            {
              v51 = *(_QWORD *)(a1 + 16);
              if (*(_QWORD *)(v51 + 8 * v50))
              {
                *v44 = *i;
                v52 = 8 * v50;
                *i = **(_QWORD **)(*(_QWORD *)(a1 + 16) + v52);
                **(_QWORD **)(*(_QWORD *)(a1 + 16) + v52) = i;
              }
              else
              {
                *(_QWORD *)(v51 + 8 * v50) = v44;
                v44 = i;
                v48 = v50;
              }
            }
          }
          goto LABEL_95;
        }
        if (v46 >= prime)
          v46 %= prime;
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v46) = v45;
        v56 = (_QWORD *)*v44;
        if (!*v44)
        {
LABEL_95:
          v27 = prime;
          if ((prime & (prime - 1)) != 0)
            goto LABEL_96;
LABEL_109:
          v8 = ((_DWORD)v27 - 1) & v12;
          v35 = *(_QWORD *)(a1 + 16);
          v36 = *(_QWORD **)(v35 + 8 * v8);
          if (v36)
            goto LABEL_48;
          goto LABEL_110;
        }
        while (1)
        {
          v58 = v56[1];
          if (v58 >= prime)
            v58 %= prime;
          if (v58 == v46)
            goto LABEL_89;
          v59 = *(_QWORD *)(a1 + 16);
          if (*(_QWORD *)(v59 + 8 * v58))
          {
            *v44 = *v56;
            v57 = 8 * v58;
            *v56 = **(_QWORD **)(*(_QWORD *)(a1 + 16) + v57);
            **(_QWORD **)(*(_QWORD *)(a1 + 16) + v57) = v56;
            v56 = v44;
LABEL_89:
            v44 = v56;
            v56 = (_QWORD *)*v56;
            if (!v56)
              goto LABEL_95;
          }
          else
          {
            *(_QWORD *)(v59 + 8 * v58) = v44;
            v44 = v56;
            v56 = (_QWORD *)*v56;
            v46 = v58;
            if (!v56)
              goto LABEL_95;
          }
        }
      }
      v61 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v61)
        operator delete(v61);
      v27 = 0;
      *(_QWORD *)(a1 + 24) = 0;
    }
    if ((v27 & (v27 - 1)) == 0)
      goto LABEL_109;
LABEL_96:
    if (v27 <= v12)
    {
      v8 = v12 % v27;
      v35 = *(_QWORD *)(a1 + 16);
      v36 = *(_QWORD **)(v35 + 8 * (v12 % v27));
      if (v36)
        goto LABEL_48;
    }
    else
    {
      v8 = v12;
      v35 = *(_QWORD *)(a1 + 16);
      v36 = *(_QWORD **)(v35 + 8 * v12);
      if (v36)
        goto LABEL_48;
    }
    goto LABEL_110;
  }
  v35 = *(_QWORD *)(a1 + 16);
  v36 = *(_QWORD **)(v35 + 8 * v8);
  if (v36)
  {
LABEL_48:
    *v30 = *v36;
LABEL_116:
    *v36 = v30;
    goto LABEL_117;
  }
LABEL_110:
  v62 = *(_QWORD *)(a1 + 32);
  *v30 = v62;
  *(_QWORD *)(a1 + 32) = v30;
  *(_QWORD *)(v35 + 8 * v8) = a1 + 32;
  if (v62)
  {
    v63 = *(_QWORD *)(v62 + 8);
    if ((v27 & (v27 - 1)) != 0)
    {
      if (v63 >= v27)
        v63 %= v27;
    }
    else
    {
      v63 &= v27 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v63);
    goto LABEL_116;
  }
LABEL_117:
  ++*(_QWORD *)(a1 + 40);
LABEL_118:
  v30[3] = a2;
}

uint64_t webrtc::PacketRouter::AddRembModuleCandidate(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t result;

  if (a3)
    v5 = 14;
  else
    v5 = 17;
  if (a3)
    v6 = a1 + 14;
  else
    v6 = a1 + 17;
  v8 = (char *)v6[1];
  v7 = v6[2];
  v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    if (v8)
    {
      *(_QWORD *)v8 = a2;
      v10 = v8 + 8;
      goto LABEL_27;
    }
    goto LABEL_35;
  }
  v11 = (char *)a1[v5];
  v12 = (v8 - v11) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    goto LABEL_36;
  v14 = v7 - (_QWORD)v11;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8;
  v16 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v15)
    v16 = v13;
  if (!v16)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    abort();
  }
  if (v16 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v17 = 8 * v16;
  v18 = (char *)operator new(8 * v16);
  v19 = &v18[v17];
  v20 = &v18[8 * v12];
  *(_QWORD *)v20 = a2;
  v10 = v20 + 8;
  if (v8 != v11)
  {
    v21 = v8 - v11 - 8;
    if (v21 < 0x58)
      goto LABEL_40;
    if ((unint64_t)(v11 - v18) < 0x20)
      goto LABEL_40;
    v22 = (v21 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v9 = &v8[-v23];
    v20 -= v23;
    v24 = &v18[8 * v12 - 16];
    v25 = (__int128 *)(v8 - 16);
    v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *v25;
      *((_OWORD *)v24 - 1) = *(v25 - 1);
      *(_OWORD *)v24 = v27;
      v24 -= 32;
      v25 -= 2;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_40:
      do
      {
        v28 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v20 - 1) = v28;
        v20 -= 8;
      }
      while (v9 != v11);
    }
    v9 = v11;
  }
  a1[v5] = v20;
  v6[1] = v10;
  v6[2] = v19;
  if (v9)
    operator delete(v9);
LABEL_27:
  v6[1] = v10;
  v29 = (uint64_t *)a1[14];
  if (v29 == (uint64_t *)a1[15] && (v29 = (uint64_t *)a1[17], v29 == (uint64_t *)a1[18]))
  {
    v30 = 0;
    result = a1[20];
    if (!result)
      goto LABEL_32;
  }
  else
  {
    v30 = *v29;
    result = a1[20];
    if (*v29 == result)
      goto LABEL_32;
  }
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
LABEL_32:
  a1[20] = v30;
  return result;
}

void webrtc::PacketRouter::RemoveSendRtpModuleFromMap(webrtc::PacketRouter *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  std::string *v54;
  uint64_t v55;
  _QWORD *v56;
  void *__p;
  uint64_t v58;

  v8 = *((_QWORD *)this + 3);
  if (!v8)
    goto LABEL_21;
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = a2;
    if (v8 <= a2)
      v11 = a2 % v8;
  }
  else
  {
    v11 = ((_DWORD)v8 - 1) & a2;
  }
  v12 = *(void ***)(*((_QWORD *)this + 2) + 8 * v11);
  if (!v12 || (v13 = *v12) == 0)
  {
LABEL_21:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/packet_router.cc");
    return;
  }
  if (v10.u32[0] < 2uLL)
  {
    v14 = v8 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == a2)
      {
        if (*((_DWORD *)v13 + 4) == a2)
          goto LABEL_24;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_21;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == a2)
      break;
    if (v15 >= v8)
      v15 %= v8;
    if (v15 != v11)
      goto LABEL_21;
LABEL_11:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_21;
  }
  if (*((_DWORD *)v13 + 4) != a2)
    goto LABEL_11;
LABEL_24:
  v24 = (_QWORD *)((char *)this + 56);
  v56 = &v56;
  __p = &v56;
  v25 = (_QWORD *)*((_QWORD *)this + 8);
  if (v25 == (_QWORD *)((char *)this + 56))
    goto LABEL_45;
  if (&v56 == v24)
  {
    while (1)
    {
      v46 = (_QWORD *)v25[1];
      v47 = v25[2];
      if (v47 == v13[3])
        break;
LABEL_62:
      v25 = v46;
      if (v46 == &v56)
        goto LABEL_45;
    }
    if (v46 == &v56)
    {
      v48 = 1;
    }
    else
    {
      if (v46[2] != v47)
      {
        v48 = 0;
LABEL_72:
        if (v25 != v46)
        {
          v49 = *v46;
          v50 = *v25;
          *(_QWORD *)(v50 + 8) = *(_QWORD *)(*v46 + 8);
          **(_QWORD **)(v49 + 8) = v50;
          v51 = v56;
          v56[1] = v25;
          *v25 = v51;
          v56 = (_QWORD *)v49;
          *(_QWORD *)(v49 + 8) = &v56;
        }
        if (!v48)
          v46 = (_QWORD *)v46[1];
        goto LABEL_62;
      }
      while (1)
      {
        v46 = (_QWORD *)v46[1];
        v48 = v46 == &v56;
        if (v46 == &v56)
          break;
        if (v46[2] != v47)
          goto LABEL_72;
      }
    }
    v46 = &v56;
    goto LABEL_72;
  }
  v26 = 0;
  v27 = &v56;
  do
  {
    v28 = (_QWORD *)v25[1];
    v29 = v25[2];
    if (v29 == v13[3])
    {
      if (v28 == v24)
      {
        v30 = 1;
LABEL_34:
        v28 = (_QWORD *)((char *)this + 56);
      }
      else
      {
        while (1)
        {
          v30 = v28[2] == v29;
          if (v28[2] != v29)
            break;
          v28 = (_QWORD *)v28[1];
          if (v28 == v24)
            goto LABEL_34;
        }
      }
      if (v25 != v28)
      {
        v27 = (_QWORD *)*v28;
        v31 = 1;
        if ((_QWORD *)*v28 != v25)
        {
          v32 = v25;
          do
          {
            v32 = (_QWORD *)v32[1];
            ++v31;
          }
          while (v32 != v27);
        }
        *((_QWORD *)this + 9) -= v31;
        v26 += v31;
        v33 = *v25;
        *(_QWORD *)(v33 + 8) = v27[1];
        *(_QWORD *)v27[1] = v33;
        v34 = v56;
        v56[1] = v25;
        *v25 = v34;
        v56 = v27;
        v27[1] = &v56;
      }
      if (!v30)
        v28 = (_QWORD *)v28[1];
    }
    v25 = v28;
  }
  while (v28 != v24);
  if (v26)
  {
    v35 = __p;
    v36 = *(_QWORD *)__p;
    *(_QWORD *)(v36 + 8) = v27[1];
    *(_QWORD *)v27[1] = v36;
    v58 = 0;
    if (v35 != &v56)
    {
      do
      {
        v37 = (_QWORD *)v35[1];
        operator delete(v35);
        v35 = v37;
      }
      while (v37 != &v56);
    }
  }
LABEL_45:
  if (*((_QWORD *)this + 31))
  {
    v54 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/packet_router.cc", 113, "modules_used_in_current_batch_.empty()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v55);
    webrtc::PacketRouter::RemoveSendRtpModule(v54);
  }
  else
  {
    v38 = *(int8x8_t *)((char *)this + 24);
    v39 = v13[1];
    v40 = (uint8x8_t)vcnt_s8(v38);
    v40.i16[0] = vaddlv_u8(v40);
    if (v40.u32[0] > 1uLL)
    {
      if (v39 >= *(_QWORD *)&v38)
        v39 %= *(_QWORD *)&v38;
    }
    else
    {
      v39 &= *(_QWORD *)&v38 - 1;
    }
    v41 = *((_QWORD *)this + 2);
    v42 = *(_QWORD **)(v41 + 8 * v39);
    do
    {
      v43 = v42;
      v42 = (_QWORD *)*v42;
    }
    while (v42 != v13);
    if (v43 == (_QWORD *)((char *)this + 32))
      goto LABEL_78;
    v44 = v43[1];
    if (v40.u32[0] > 1uLL)
    {
      if (v44 >= *(_QWORD *)&v38)
        v44 %= *(_QWORD *)&v38;
    }
    else
    {
      v44 &= *(_QWORD *)&v38 - 1;
    }
    if (v44 != v39)
    {
LABEL_78:
      if (!*v13)
        goto LABEL_79;
      v45 = *(_QWORD *)(*v13 + 8);
      if (v40.u32[0] > 1uLL)
      {
        if (v45 >= *(_QWORD *)&v38)
          v45 %= *(_QWORD *)&v38;
      }
      else
      {
        v45 &= *(_QWORD *)&v38 - 1;
      }
      if (v45 != v39)
LABEL_79:
        *(_QWORD *)(v41 + 8 * v39) = 0;
    }
    v52 = *v13;
    if (*v13)
    {
      v53 = *(_QWORD *)(v52 + 8);
      if (v40.u32[0] > 1uLL)
      {
        if (v53 >= *(_QWORD *)&v38)
          v53 %= *(_QWORD *)&v38;
      }
      else
      {
        v53 &= *(_QWORD *)&v38 - 1;
      }
      if (v53 != v39)
      {
        *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v53) = v43;
        v52 = *v13;
      }
    }
    *v43 = v52;
    *v13 = 0;
    --*((_QWORD *)this + 5);
    operator delete(v13);
  }
}

uint64_t webrtc::PacketRouter::RemoveSendRtpModule(webrtc::PacketRouter *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  webrtc::PacketRouter::MaybeRemoveRembModuleCandidate(a1, a2, 1, a4, a5, a6, a7, a8);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2);
  webrtc::PacketRouter::RemoveSendRtpModuleFromMap(a1, v10, v11, v12, v13, v14, v15, v16);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 240))(a2);
  if ((v17 & 0xFF00000000) != 0)
    webrtc::PacketRouter::RemoveSendRtpModuleFromMap(a1, v17, v18, v19, v20, v21, v22, v23);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 256))(a2);
  if ((v24 & 0xFF00000000) != 0)
    webrtc::PacketRouter::RemoveSendRtpModuleFromMap(a1, v24, v25, v26, v27, v28, v29, v30);
  if (*((_QWORD *)a1 + 10) == a2)
    *((_QWORD *)a1 + 10) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 440))(a2);
}

void webrtc::PacketRouter::MaybeRemoveRembModuleCandidate(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v9 = 17;
  if (a3)
  {
    v9 = 14;
    v10 = a1 + 14;
  }
  else
  {
    v10 = a1 + 17;
  }
  v11 = (char *)a1[v9];
  v12 = (char *)v10[1];
  if (v11 != v12)
  {
    while (*(_QWORD *)v11 != a2)
    {
      v11 += 8;
      if (v11 == v12)
      {
        v11 = (char *)v10[1];
        break;
      }
    }
  }
  if (v11 != v12)
  {
    v13 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 == a1[20])
    {
      if (!v13)
        goto LABEL_25;
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
      a1[20] = 0;
      v12 = (char *)v10[1];
    }
    if (v12 != v11)
    {
      v14 = v12 - (v11 + 8);
      if (v12 != v11 + 8)
        memmove(v11, v11 + 8, v12 - (v11 + 8));
      v10[1] = &v11[v14];
      v15 = (uint64_t *)a1[14];
      if (v15 == (uint64_t *)a1[15] && (v15 = (uint64_t *)a1[17], v15 == (uint64_t *)a1[18]))
      {
        v16 = 0;
        v17 = a1[20];
        if (v17)
        {
LABEL_18:
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
        }
      }
      else
      {
        v16 = *v15;
        v17 = a1[20];
        if (*v15 != v17)
          goto LABEL_18;
      }
      a1[20] = v16;
      return;
    }
    __break(1u);
LABEL_25:
    v18 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/packet_router.cc", 355, "active_remb_module_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v21);
    webrtc::PacketRouter::AddReceiveRtpModule(v18, v19, v20);
  }
}

void webrtc::PacketRouter::AddReceiveRtpModule(_QWORD *a1, uint64_t a2, int a3)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v7 = (uint64_t *)a1[12];
  v6 = a1[13];
  v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    if (v7)
    {
      *v7 = a2;
      v9 = v7 + 1;
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  v10 = (uint64_t *)a1[11];
  v11 = v7 - v10;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61)
    goto LABEL_25;
  v13 = v6 - (_QWORD)v10;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
  v15 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v14)
    v15 = v12;
  if (!v15)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    abort();
  }
  if (v15 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v16 = 8 * v15;
  v17 = (char *)operator new(8 * v15);
  v18 = &v17[v16];
  v19 = (uint64_t *)&v17[8 * v11];
  *v19 = a2;
  v9 = v19 + 1;
  if (v7 != v10)
  {
    v20 = (char *)v7 - (char *)v10 - 8;
    if (v20 < 0x58)
      goto LABEL_29;
    if ((unint64_t)((char *)v10 - v17) < 0x20)
      goto LABEL_29;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = &v7[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (uint64_t *)((char *)v19 - v22);
    v23 = &v17[8 * v11 - 16];
    v24 = v7 - 2;
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 4;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        v27 = *--v8;
        *--v19 = v27;
      }
      while (v8 != v10);
    }
    v8 = v10;
  }
  a1[11] = v19;
  a1[12] = v9;
  a1[13] = v18;
  if (v8)
    operator delete(v8);
LABEL_21:
  a1[12] = v9;
  if (a3)
    webrtc::PacketRouter::AddRembModuleCandidate(a1, a2, 0);
}

void webrtc::PacketRouter::SendPacket(uint64_t a1, webrtc::RtpPacketToSend **a2, uint64_t a3)
{
  int8x8_t v4;
  webrtc::RtpPacketToSend *v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  webrtc::RtpPacketToSend *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, webrtc::RtpPacketToSend *, uint64_t);
  webrtc::RtpPacketToSend *v36;
  webrtc::RtpPacketToSend *v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t **v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  void *v62;
  void *__p;
  uint64_t *v64;
  webrtc::RtpPacketToSend *v65;

  v4 = *(int8x8_t *)(a1 + 24);
  if (!*(_QWORD *)&v4)
    goto LABEL_21;
  v7 = *a2;
  v8 = *((unsigned int *)*a2 + 3);
  v9 = (uint8x8_t)vcnt_s8(v4);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = *((unsigned int *)*a2 + 3);
    if (*(_QWORD *)&v4 <= v8)
      v10 = v8 % *(_QWORD *)&v4;
  }
  else
  {
    v10 = (v4.i32[0] - 1) & v8;
  }
  v11 = *(uint64_t ***)(*(_QWORD *)(a1 + 16) + 8 * v10);
  if (!v11 || (v12 = *v11) == 0)
  {
LABEL_21:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/packet_router.cc");
    return;
  }
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v15 == v8)
      {
        if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
          goto LABEL_24;
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_21;
      }
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v14 == v8)
      break;
    if (v14 >= *(_QWORD *)&v4)
      v14 %= *(_QWORD *)&v4;
    if (v14 != v10)
      goto LABEL_21;
LABEL_11:
    v12 = (uint64_t *)*v12;
    if (!v12)
      goto LABEL_21;
  }
  if (*((_DWORD *)v12 + 4) != (_DWORD)v8)
    goto LABEL_11;
LABEL_24:
  if (v7 && (v23 = v12[3], ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v23 + 352))(v23) & 1) != 0))
  {
    v24 = *a2;
    if (*((_BYTE *)*a2 + 40))
    {
      v25 = (unsigned __int8 *)*((_QWORD *)v24 + 7);
      v26 = (unsigned __int8 *)*((_QWORD *)v24 + 8);
      if (v25 != v26)
      {
        while (*v25 != *((unsigned __int8 *)*a2 + 40))
        {
          v25 += 4;
          if (v25 == v26)
            goto LABEL_34;
        }
        v34 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 168) = v34 + 1;
        *((_QWORD *)v24 + 19) = v34;
        *((_BYTE *)v24 + 160) = 1;
      }
    }
LABEL_34:
    (*(void (**)(unint64_t))(*(_QWORD *)v23 + 360))(v23);
    v35 = *(void (**)(uint64_t, webrtc::RtpPacketToSend *, uint64_t))(a1 + 200);
    if (v35)
      v35(a1 + 176, *a2, a3);
    v36 = *a2;
    *a2 = 0;
    v65 = v36;
    (*(void (**)(unint64_t, webrtc::RtpPacketToSend **, uint64_t))(*(_QWORD *)v23 + 368))(v23, &v65, a3);
    v37 = v65;
    v65 = 0;
    if (v37)
    {
      webrtc::RtpPacketToSend::~RtpPacketToSend(v37);
      MEMORY[0x20BD0ADEC]();
    }
    v39 = (uint64_t **)(a1 + 240);
    v38 = *(uint64_t **)(a1 + 240);
    if (v38)
    {
      while (1)
      {
        while (1)
        {
          v40 = (uint64_t **)v38;
          v41 = v38[4];
          if (v23 >= v41)
            break;
          v38 = *v40;
          v39 = v40;
          if (!*v40)
            goto LABEL_45;
        }
        if (v41 >= v23)
          break;
        v38 = v40[1];
        if (!v38)
        {
          v39 = v40 + 1;
          goto LABEL_45;
        }
      }
    }
    else
    {
      v40 = (uint64_t **)(a1 + 240);
LABEL_45:
      v42 = (uint64_t *)operator new(0x28uLL);
      v42[4] = v23;
      *v42 = 0;
      v42[1] = 0;
      v42[2] = (uint64_t)v40;
      *v39 = v42;
      v43 = **(_QWORD **)(a1 + 232);
      if (v43)
      {
        *(_QWORD *)(a1 + 232) = v43;
        v44 = *v39;
      }
      else
      {
        v44 = v42;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 240), v44);
      ++*(_QWORD *)(a1 + 248);
    }
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v23 + 128))(v23))
      *(_QWORD *)(a1 + 80) = v23;
    (*(void (**)(void **__return_ptr, unint64_t))(*(_QWORD *)v23 + 392))(&__p, v23);
    v45 = (uint64_t *)__p;
    v46 = v64;
    if (__p == v64)
    {
LABEL_58:
      if (v45)
      {
        v49 = v64;
        v50 = v45;
        if (v64 != v45)
        {
          do
          {
            v52 = (_QWORD *)*--v49;
            v51 = v52;
            *v49 = 0;
            if (v52)
            {
              v53 = (unsigned int *)v51[22];
              if (v53)
              {
                v54 = v53 + 2;
                do
                {
                  v55 = __ldaxr(v54);
                  v56 = v55 - 1;
                }
                while (__stlxr(v56, v54));
                if (!v56)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 8))(v53);
              }
              v57 = v51[11];
              if (v57)
              {
                v58 = (unsigned int *)(v57 + 24);
                do
                {
                  v59 = __ldaxr(v58);
                  v60 = v59 - 1;
                }
                while (__stlxr(v60, v58));
                if (!v60)
                {
                  v61 = *(_QWORD *)(v57 + 16);
                  *(_QWORD *)(v57 + 16) = 0;
                  if (v61)
                    MEMORY[0x20BD0ADD4](v61, 0x1000C8077774924);
                  MEMORY[0x20BD0ADEC](v57, 0x1010C40EE34DA14);
                }
              }
              v62 = (void *)v51[7];
              if (v62)
              {
                v51[8] = v62;
                operator delete(v62);
              }
              MEMORY[0x20BD0ADEC](v51, 0x1020C4000E59722);
            }
          }
          while (v49 != v45);
          v50 = __p;
        }
        v64 = v45;
        operator delete(v50);
      }
    }
    else
    {
      v47 = *(uint64_t **)(a1 + 216);
      while (1)
      {
        while ((unint64_t)v47 >= *(_QWORD *)(a1 + 224))
        {
          v47 = std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>::__push_back_slow_path<std::unique_ptr<webrtc::RtpPacketToSend>>((_QWORD *)(a1 + 208), v45);
          *(_QWORD *)(a1 + 216) = v47;
          if (++v45 == v46)
            goto LABEL_57;
        }
        if (!v47)
          break;
        v48 = *v45;
        *v45++ = 0;
        *v47++ = v48;
        *(_QWORD *)(a1 + 216) = v47;
        if (v45 == v46)
        {
LABEL_57:
          v45 = (uint64_t *)__p;
          goto LABEL_58;
        }
      }
      __break(1u);
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/packet_router.cc");
  }
}

void webrtc::PacketRouter::OnBatchComplete(webrtc::PacketRouter *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  v2 = (char *)*((_QWORD *)this + 29);
  v3 = (char *)this + 240;
  if (v2 != (char *)this + 240)
  {
    do
    {
      (*(void (**)(_QWORD))(**((_QWORD **)v2 + 4) + 376))(*((_QWORD *)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 30));
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = v3;
}

__n128 webrtc::PacketRouter::FetchFec@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[13];
  *a2 = result;
  a2[1].n128_u64[0] = this[14].n128_u64[0];
  this[13].n128_u64[1] = 0;
  this[14].n128_u64[0] = 0;
  this[13].n128_u64[0] = 0;
  return result;
}

void webrtc::PacketRouter::GeneratePadding(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  __int128 v28;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *(_QWORD *)(a1 + 80);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 128))(v6))
  {
    (*(void (**)(_QWORD **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 416))(&v27, *(_QWORD *)(a1 + 80), a2);
    v7 = v27;
    *a3 = v27;
    v8 = (_QWORD *)v28;
    *(_OWORD *)(a3 + 1) = v28;
    v9 = v8;
    if (v7 != v8)
      return;
LABEL_6:
    v10 = a1 + 56;
    v11 = *(_QWORD *)(a1 + 64);
    if (v11 == a1 + 56)
      return;
    goto LABEL_9;
  }
  v9 = 0;
  v10 = a1 + 56;
  v11 = *(_QWORD *)(a1 + 64);
  if (v11 == a1 + 56)
    return;
LABEL_9:
  v12 = v9;
  while (1)
  {
    v14 = *(_QWORD *)(v11 + 16);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 120))(v14))
    {
      (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 416))(&v27, v14, a2);
      if (v12)
      {
        while (v9 != v12)
        {
          v16 = (_QWORD *)*--v9;
          v15 = v16;
          *v9 = 0;
          if (v16)
          {
            v17 = (unsigned int *)v15[22];
            if (v17)
            {
              v18 = v17 + 2;
              do
              {
                v19 = __ldaxr(v18);
                v20 = v19 - 1;
              }
              while (__stlxr(v20, v18));
              if (!v20)
                (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
            }
            v21 = v15[11];
            if (v21)
            {
              v22 = (unsigned int *)(v21 + 24);
              do
              {
                v23 = __ldaxr(v22);
                v24 = v23 - 1;
              }
              while (__stlxr(v24, v22));
              if (!v24)
              {
                v25 = *(_QWORD *)(v21 + 16);
                *(_QWORD *)(v21 + 16) = 0;
                if (v25)
                  MEMORY[0x20BD0ADD4](v25, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v21, 0x1010C40EE34DA14);
              }
            }
            v26 = (void *)v15[7];
            if (v26)
            {
              v15[8] = v26;
              operator delete(v26);
            }
            MEMORY[0x20BD0ADEC](v15, 0x1020C4000E59722);
          }
        }
        a3[1] = v12;
        operator delete(v12);
      }
      v9 = v27;
      *a3 = v27;
      v13 = (_QWORD *)v28;
      *(_OWORD *)(a3 + 1) = v28;
      v12 = v9;
      if (v9 != v13)
        break;
    }
    v11 = *(_QWORD *)(v11 + 8);
    if (v11 == v10)
      return;
  }
  *(_QWORD *)(a1 + 80) = v14;
}

uint64_t webrtc::PacketRouter::OnAbortedRetransmissions(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(result + 24);
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a2;
      if (v4 <= a2)
        v6 = a2 % v4;
    }
    else
    {
      v6 = ((_DWORD)v4 - 1) & a2;
    }
    v7 = *(uint64_t ***)(*(_QWORD *)(result + 16) + 8 * v6);
    if (v7)
    {
      v8 = *v7;
      if (v8)
      {
        if (v5.u32[0] < 2uLL)
        {
          v9 = v4 - 1;
          while (1)
          {
            v11 = v8[1];
            if (v11 == a2)
            {
              if (*((_DWORD *)v8 + 4) == a2)
                goto LABEL_22;
            }
            else if ((v11 & v9) != v6)
            {
              return result;
            }
            v8 = (uint64_t *)*v8;
            if (!v8)
              return result;
          }
        }
        do
        {
          v10 = v8[1];
          if (v10 == a2)
          {
            if (*((_DWORD *)v8 + 4) == a2)
            {
LABEL_22:
              if (a4)
                v12 = a3;
              else
                v12 = 0;
              return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[3] + 400))(v8[3], v12, a4);
            }
          }
          else
          {
            if (v10 >= v4)
              v10 %= v4;
            if (v10 != v6)
              return result;
          }
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
    }
  }
  return result;
}

uint64_t webrtc::PacketRouter::GetRtxSsrcForMedia(webrtc::PacketRouter *this, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*((_QWORD *)this + 2) + 8 * v4);
  if (!v5)
    return 0;
  v6 = *v5;
  if (!*v5)
    return 0;
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          goto LABEL_23;
      }
      else if ((v9 & v7) != v4)
      {
        return 0;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        return 0;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      return 0;
LABEL_12:
    v6 = (uint64_t *)*v6;
    if (!v6)
      return 0;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_12;
LABEL_23:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6[3] + 208))(v6[3]) == a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6[3] + 240))(v6[3]);
  return 0;
}

void webrtc::PacketRouter::SendRemb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *__p[2];
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 160);
  if (v3)
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v5 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v3 + 24))(v3, a2, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void webrtc::PacketRouter::SendCombinedRtcpPacket(_QWORD *a1, __int128 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void *__p[2];
  uint64_t v21;

  v4 = a1 + 7;
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 7)
  {
LABEL_4:
    v7 = (uint64_t *)a1[11];
    if (v7 != (uint64_t *)a1[12])
    {
      v8 = *v7;
      v18 = *a2;
      v19 = *((_QWORD *)a2 + 2);
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 16))(v8, &v18);
      v9 = (_QWORD *)v18;
      if ((_QWORD)v18)
      {
        v10 = (_QWORD *)*((_QWORD *)&v18 + 1);
        v11 = (void *)v18;
        if (*((_QWORD *)&v18 + 1) != (_QWORD)v18)
        {
          do
          {
            v13 = *--v10;
            v12 = v13;
            *v10 = 0;
            if (v13)
              (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          }
          while (v10 != v9);
          v11 = (void *)v18;
        }
        *((_QWORD *)&v18 + 1) = v9;
LABEL_20:
        operator delete(v11);
      }
    }
  }
  else
  {
    while (1)
    {
      v6 = v5[2];
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 448))(v6))
        break;
      v5 = (_QWORD *)v5[1];
      if (v5 == v4)
        goto LABEL_4;
    }
    *(_OWORD *)__p = *a2;
    v21 = *((_QWORD *)a2 + 2);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 16))(v6, __p);
    v14 = __p[0];
    if (__p[0])
    {
      v15 = __p[1];
      if (__p[1] == __p[0])
      {
        __p[1] = __p[0];
        v11 = __p[0];
      }
      else
      {
        do
        {
          v17 = *--v15;
          v16 = v17;
          *v15 = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
        while (v15 != v14);
        v11 = __p[0];
        __p[1] = v14;
      }
      goto LABEL_20;
    }
  }
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,absl::AnyInvocable<void ()(webrtc::RtpPacketToSend const&,webrtc::PacedPacketInfo const&)> &,webrtc::RtpPacketToSend&,webrtc::PacedPacketInfo const&>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 24))();
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<absl::AnyInvocable<void ()(webrtc::RtpPacketToSend const&,webrtc::PacedPacketInfo const&)>>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(1, *a2, v3);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t dcsctp::PacketSender::Send(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  std::string *v16;
  webrtc::RtpPacketToSend *v17;
  uint64_t v18;
  int v19;
  _QWORD v20[2];

  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v3 = (_QWORD *)(a2 + 16);
  if (v5 == v4)
    return 0;
  *v3 = 0;
  v3[1] = 0;
  v7 = v4 - v5;
  v3[2] = 0;
  if (a3)
  {
    v8 = crc32c::ExtendPortable(0, (const unsigned __int8 *)v5, (const unsigned __int8 *)(v4 - v5));
    if (v7 <= 0xB)
    {
LABEL_11:
      v16 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v9, v10, v11, v12, v18);
      return webrtc::PacketSequencer::Sequence((webrtc::PacketSequencer *)v16, v17);
    }
    *(_DWORD *)(v5 + 8) = v8;
  }
  v13 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*a1 + 24))(*a1, v5, v7);
  v20[0] = v5;
  v20[1] = v7;
  v19 = v13;
  v14 = a1[4];
  if (!v14)
  {
    std::__throw_bad_function_call[abi:sn180100]();
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, _QWORD *, int *))(*(_QWORD *)v14 + 48))(v14, v20, &v19);
  if (v5)
    operator delete((void *)v5);
  return (v13 - 3) < 0xFFFFFFFE;
}

uint64_t *webrtc::PacketSequencer::Sequence(uint64_t *this, webrtc::RtpPacketToSend *a2)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  v3 = this;
  v4 = *((_DWORD *)a2 + 3);
  if (v4 == *(_DWORD *)this)
  {
    v5 = *((_QWORD *)a2 + 15);
    if (*((_BYTE *)a2 + 128))
      v6 = v5 == 2;
    else
      v6 = 0;
    if (!v6)
    {
      if (*((_BYTE *)a2 + 128))
        v7 = v5 == 4;
      else
        v7 = 0;
      if (v7)
        webrtc::PacketSequencer::PopulatePaddingFields(this, a2);
      v8 = *((unsigned __int16 *)v3 + 12);
      *((_WORD *)v3 + 12) = v8 + 1;
      v9 = *((_QWORD *)a2 + 11);
      *((_WORD *)a2 + 2) = v8;
      this = rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v9 + 8) - *((_QWORD *)a2 + 12)));
      *(_WORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12) + 2) = bswap32(v8) >> 16;
      if (!*((_BYTE *)a2 + 128) || *((_QWORD *)a2 + 15) != 4)
      {
        *((_BYTE *)v3 + 56) = *(_BYTE *)a2;
        if (*((_BYTE *)a2 + 187))
        {
          v15 = *((_QWORD *)a2 + 2);
          v16 = *((_QWORD *)a2 + 11);
          if (v16)
          {
            v17 = (unsigned int *)(v16 + 24);
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          *((_BYTE *)v3 + 28) = *(_BYTE *)(*(_QWORD *)(v16 + 16) + *((_QWORD *)a2 + 12) + v15);
          v19 = (unsigned int *)(v16 + 24);
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = *(_QWORD *)(v16 + 16);
            *(_QWORD *)(v16 + 16) = 0;
            if (v22)
              MEMORY[0x20BD0ADD4](v22, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v16, 0x1010C40EE34DA14);
          }
        }
        else
        {
          *((_BYTE *)v3 + 28) = *((_BYTE *)a2 + 1);
        }
        *((_DWORD *)v3 + 8) = *((_DWORD *)a2 + 2);
        this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3[2] + 16))(v3[2]);
        v3[6] = (uint64_t)this;
        v3[5] = *((_QWORD *)a2 + 14);
      }
    }
  }
  else
  {
    if (*((_BYTE *)this + 8))
      v10 = v4 == *((_DWORD *)this + 1);
    else
      v10 = 0;
    if (v10)
    {
      if (*((_BYTE *)a2 + 128))
        v11 = *((_QWORD *)a2 + 15) == 4;
      else
        v11 = 0;
      if (v11)
        webrtc::PacketSequencer::PopulatePaddingFields(this, a2);
      v12 = *((unsigned __int16 *)v3 + 13);
      *((_WORD *)v3 + 13) = v12 + 1;
      v14 = *((_QWORD *)a2 + 11);
      v13 = (uint64_t *)((char *)a2 + 88);
      *((_WORD *)v13 - 42) = v12;
      this = rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v13, (uint64_t *)(*(_QWORD *)(v14 + 8) - v13[1]));
      *(_WORD *)(*(_QWORD *)(*v13 + 16) + v13[1] + 2) = bswap32(v12) >> 16;
    }
  }
  return this;
}

uint64_t *webrtc::PacketSequencer::PopulatePaddingFields(uint64_t *this, webrtc::RtpPacketToSend *a2)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;

  v3 = this;
  if (*((_DWORD *)a2 + 3) == *(_DWORD *)this)
  {
    v4 = *((_DWORD *)this + 8);
    v6 = *((_QWORD *)a2 + 11);
    v5 = (uint64_t *)((char *)a2 + 88);
    *((_DWORD *)a2 + 2) = v4;
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v6 + 8) - *((_QWORD *)a2 + 12)));
    *(_DWORD *)(*(_QWORD *)(*v5 + 16) + v5[1] + 4) = bswap32(v4);
    v5[3] = v3[5];
    v7 = *((_BYTE *)v3 + 28);
    *((_BYTE *)v5 - 87) = v7;
    v8 = v5[1];
    LOBYTE(v4) = *(_BYTE *)(*(_QWORD *)(*v5 + 16) + v8 + 1) & 0x80 | v7;
    this = rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v5, (uint64_t *)(*(_QWORD *)(*v5 + 8) - v8));
    *(_BYTE *)(*(_QWORD *)(*v5 + 16) + v5[1] + 1) = v4;
    return this;
  }
  if (!*((_QWORD *)a2 + 3))
  {
    v9 = *((_DWORD *)this + 8);
    v10 = *((_QWORD *)a2 + 11);
    *((_DWORD *)a2 + 2) = v9;
    this = rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v10 + 8) - *((_QWORD *)a2 + 12)));
    *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12) + 4) = bswap32(v9);
    *((_QWORD *)a2 + 14) = v3[5];
    if (v3[6] >= 1)
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3[2] + 16))(v3[2]);
      v12 = v3[6];
      if (v11 != 0x7FFFFFFFFFFFFFFFLL && v12 != 0x8000000000000000)
      {
        if (v11 == 0x8000000000000000 || v12 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v14 = *((_DWORD *)a2 + 2);
          v15 = 0x8000000000000000;
        }
        else
        {
          v14 = *((_DWORD *)a2 + 2);
          v15 = v11 - v12;
          if (v11 - v12 >= 0)
          {
LABEL_19:
            v17 = v15 / 0x3E8;
            if (v15 % 0x3E8 > 0x1F3)
              LODWORD(v17) = v17 + 1;
            goto LABEL_26;
          }
        }
        if (-(uint64_t)v15 % 0x3E8uLL <= 0x1F4)
          v18 = 0;
        else
          v18 = -1;
        v17 = v18 - -(uint64_t)v15 / 0x3E8uLL;
LABEL_26:
        v19 = v14 + 90 * v17;
        *((_DWORD *)a2 + 2) = v19;
        this = rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 8) - *((_QWORD *)a2 + 12)));
        *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12) + 4) = bswap32(v19);
        v20 = *((_QWORD *)a2 + 14);
        if (v20 >= 1)
        {
          v21 = v20 + v15;
          if (v15 == 0x8000000000000000)
            v21 = 0x8000000000000000;
          if (v20 == 0x7FFFFFFFFFFFFFFFLL || v15 == 0x7FFFFFFFFFFFFFFFLL)
            v23 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          *((_QWORD *)a2 + 14) = v23;
        }
        return this;
      }
      v14 = *((_DWORD *)a2 + 2);
      v15 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_19;
    }
  }
  return this;
}

uint64_t rtc::PacketTransportInternal::PacketTransportInternal(uint64_t this)
{
  *(_QWORD *)(this + 16) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *(_QWORD *)(this + 24) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 32) = this + 40;
  *(_QWORD *)this = off_24C0B8810;
  *(_QWORD *)(this + 8) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(this + 64) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(this + 72) = this + 72;
  *(_QWORD *)(this + 80) = this + 72;
  *(_QWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = this + 72;
  *(_BYTE *)(this + 104) = 0;
  *(_QWORD *)(this + 112) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(this + 120) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(this + 128) = this + 128;
  *(_QWORD *)(this + 136) = this + 128;
  *(_QWORD *)(this + 144) = 0;
  *(_QWORD *)(this + 152) = this + 128;
  *(_BYTE *)(this + 160) = 0;
  *(_QWORD *)(this + 168) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(this + 176) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(this + 184) = this + 184;
  *(_QWORD *)(this + 192) = this + 184;
  *(_QWORD *)(this + 200) = 0;
  *(_QWORD *)(this + 208) = this + 184;
  *(_BYTE *)(this + 216) = 0;
  *(_QWORD *)(this + 224) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(this + 232) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(this + 240) = this + 240;
  *(_QWORD *)(this + 248) = this + 240;
  *(_QWORD *)(this + 256) = 0;
  *(_QWORD *)(this + 264) = this + 240;
  *(_BYTE *)(this + 272) = 0;
  *(_QWORD *)(this + 280) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(this + 288) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(this + 296) = this + 296;
  *(_QWORD *)(this + 304) = this + 296;
  *(_QWORD *)(this + 312) = 0;
  *(_QWORD *)(this + 320) = this + 296;
  *(_BYTE *)(this + 328) = 0;
  *(_QWORD *)(this + 344) = 0;
  *(_QWORD *)(this + 352) = 0;
  *(_BYTE *)(this + 368) = 0;
  *(_QWORD *)(this + 360) = 0;
  *(_QWORD *)(this + 392) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(this + 400) = 0;
  return this;
}

void rtc::PacketTransportInternal::~PacketTransportInternal(void (**this)(uint64_t, char *, char *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, char *, char *);
  void (*v7)(uint64_t, char *, char *);
  void (*v8)(uint64_t, char *, char *);
  void (*v9)(char *);
  void (*i)(uint64_t, char *, char *);
  void (*v11)(uint64_t, char *, char *);
  uint64_t v12;
  uint64_t v13;
  void (*j)(uint64_t, char *, char *);
  void (*v15)(uint64_t, char *, char *);
  uint64_t v16;
  uint64_t v17;
  void (*k)(uint64_t, char *, char *);
  void (*v19)(uint64_t, char *, char *);
  uint64_t v20;
  uint64_t v21;
  void (*m)(uint64_t, char *, char *);
  void (*v23)(uint64_t, char *, char *);
  uint64_t v24;
  uint64_t v25;
  void (*n)(uint64_t, char *, char *);
  void (*v27)(uint64_t, char *, char *);
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;

  *this = (void (*)(uint64_t, char *, char *))off_24C0B8810;
  this[49](1, (char *)this + 376, (char *)this + 376);
  if (*((_BYTE *)this + 368))
  {
    v30 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 21, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v2, v3, v4, v5, v31);
    rtc::PacketTransportInternal::~PacketTransportInternal((rtc::PacketTransportInternal *)v30);
  }
  v6 = this[43];
  if (v6)
  {
    v7 = this[44];
    v8 = this[43];
    if (v7 != v6)
    {
      do
      {
        v9 = (void (*)(char *))*((_QWORD *)v7 - 1);
        if (v9)
          v9((char *)v7 - 48);
        v7 = (void (*)(uint64_t, char *, char *))((char *)v7 - 56);
      }
      while (v7 != v6);
      v8 = this[43];
    }
    this[44] = v6;
    operator delete(v8);
  }
  for (i = this[39]; i; i = this[39])
  {
    v11 = this[38];
    v12 = *((_QWORD *)v11 + 3);
    v13 = *(_QWORD *)v11;
    *(_QWORD *)(v13 + 8) = *((_QWORD *)v11 + 1);
    **((_QWORD **)v11 + 1) = v13;
    this[39] = (void (*)(uint64_t, char *, char *))((char *)i - 1);
    operator delete(v11);
    (*(void (**)(uint64_t, char *))(v12 + 16))(v12, (char *)this + 280);
  }
  this[40] = (void (*)(uint64_t, char *, char *))(this + 37);
  for (j = this[32]; j; j = this[32])
  {
    v15 = this[31];
    v16 = *((_QWORD *)v15 + 3);
    v17 = *(_QWORD *)v15;
    *(_QWORD *)(v17 + 8) = *((_QWORD *)v15 + 1);
    **((_QWORD **)v15 + 1) = v17;
    this[32] = (void (*)(uint64_t, char *, char *))((char *)j - 1);
    operator delete(v15);
    (*(void (**)(uint64_t, char *))(v16 + 16))(v16, (char *)this + 224);
  }
  this[33] = (void (*)(uint64_t, char *, char *))(this + 30);
  for (k = this[25]; k; k = this[25])
  {
    v19 = this[24];
    v20 = *((_QWORD *)v19 + 3);
    v21 = *(_QWORD *)v19;
    *(_QWORD *)(v21 + 8) = *((_QWORD *)v19 + 1);
    **((_QWORD **)v19 + 1) = v21;
    this[25] = (void (*)(uint64_t, char *, char *))((char *)k - 1);
    operator delete(v19);
    (*(void (**)(uint64_t, char *))(v20 + 16))(v20, (char *)this + 168);
  }
  this[26] = (void (*)(uint64_t, char *, char *))(this + 23);
  for (m = this[18]; m; m = this[18])
  {
    v23 = this[17];
    v24 = *((_QWORD *)v23 + 3);
    v25 = *(_QWORD *)v23;
    *(_QWORD *)(v25 + 8) = *((_QWORD *)v23 + 1);
    **((_QWORD **)v23 + 1) = v25;
    this[18] = (void (*)(uint64_t, char *, char *))((char *)m - 1);
    operator delete(v23);
    (*(void (**)(uint64_t, char *))(v24 + 16))(v24, (char *)this + 112);
  }
  this[19] = (void (*)(uint64_t, char *, char *))(this + 16);
  for (n = this[11]; n; n = this[11])
  {
    v27 = this[10];
    v28 = *((_QWORD *)v27 + 3);
    v29 = *(_QWORD *)v27;
    *(_QWORD *)(v29 + 8) = *((_QWORD *)v27 + 1);
    **((_QWORD **)v27 + 1) = v29;
    this[11] = (void (*)(uint64_t, char *, char *))((char *)n - 1);
    operator delete(v27);
    (*(void (**)(uint64_t, char *))(v28 + 16))(v28, (char *)this + 56);
  }
  this[12] = (void (*)(uint64_t, char *, char *))(this + 9);
  *this = (void (*)(uint64_t, char *, char *))&unk_24C0ACE30;
  ((void (*)(void (**)(uint64_t, char *, char *)))this[3])(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(this + 4), this[5]);
}

uint64_t rtc::PacketTransportInternal::GetOption()
{
  return 0;
}

void rtc::PacketTransportInternal::network_route(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[36] = 0;
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)>::CallVoidPtr<absl::AnyInvocable<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)>>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 24))();
}

void webrtc::UntypedFunction::PrepareArgs<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&),absl::AnyInvocable<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)>,absl::AnyInvocable<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)>,(void *)0>(absl::AnyInvocable<void ()(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke(_QWORD *a1)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*a1 + 16))(1, *a1, *a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::FunctionView<void ()(webrtc::UntypedFunction &)>::CallVoidPtr<void webrtc::CallbackList<rtc::PacketTransportInternal *,rtc::ReceivedPacket const&>::Send<rtc::PacketTransportInternal *,rtc::ReceivedPacket const&>(rtc::PacketTransportInternal *,rtc::ReceivedPacket const&)::{lambda(webrtc::UntypedFunction &)#1}>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a2 + 32))(a2, **(_QWORD **)a1, *(_QWORD *)(a1 + 8));
}

char *std::vector<dcsctp::ParameterDescriptor>::emplace_back<unsigned short &,rtc::ArrayView<unsigned char const,-4711l>>(void **a1, _WORD *a2, uint64_t *a3)
{
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v7 = (char *)a1[1];
  v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v6)
  {
    if (v7)
    {
      v8 = *a3;
      v9 = a3[1];
      *(_WORD *)v7 = *a2;
      if (v9)
        v10 = v8;
      else
        v10 = 0;
      *((_QWORD *)v7 + 1) = v10;
      *((_QWORD *)v7 + 2) = v9;
      v11 = v7 + 24;
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  v12 = (char *)*a1;
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
  v14 = v13 + 1;
  if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_25;
  v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v12) >> 3);
  if (2 * v15 > v14)
    v14 = 2 * v15;
  if (v15 >= 0x555555555555555)
    v16 = 0xAAAAAAAAAAAAAAALL;
  else
    v16 = v14;
  if (!v16)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    abort();
  }
  if (v16 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v17 = 24 * v16;
  v18 = (char *)operator new(24 * v16);
  v19 = &v18[24 * v13];
  v20 = *a3;
  v21 = a3[1];
  *(_WORD *)v19 = *a2;
  if (v21)
    v22 = v20;
  else
    v22 = 0;
  *((_QWORD *)v19 + 1) = v22;
  *((_QWORD *)v19 + 2) = v21;
  v11 = v19 + 24;
  if (v7 != v12)
  {
    do
    {
      v23 = *(_OWORD *)(v7 - 24);
      *((_QWORD *)v19 - 1) = *((_QWORD *)v7 - 1);
      *(_OWORD *)(v19 - 24) = v23;
      v19 -= 24;
      v7 -= 24;
    }
    while (v7 != v12);
    v7 = v12;
  }
  *a1 = v19;
  a1[1] = v11;
  a1[2] = &v18[v17];
  if (v7)
    operator delete(v7);
LABEL_23:
  a1[1] = v11;
  return v11 - 24;
}

_QWORD *cricket::PayloadTypeMapper::PayloadTypeMapper(cricket::PayloadTypeMapper *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  char *v11;
  uint64_t v12;
  char **v13;
  void **v14;
  char *v15;
  char **v16;
  _BOOL4 v17;
  char **v18;
  char **v19;
  _DWORD *v20;
  char *v21;
  std::string *v22;
  void **v23;
  _QWORD **v24;
  void **v25;
  void **v26;
  uint64_t v27;
  const void **v28;
  void **v29;
  const void **v30;
  char *v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  uint64_t *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t **v55;
  char **v56;
  uint64_t *v58;
  int v59;
  uint64_t **v60;
  uint64_t **v61;
  int v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  char **v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70[2];
  uint64_t v71;
  __int128 v72;
  uint64_t *v73;
  uint64_t v74[2];
  void *v75[2];
  uint64_t v76;
  __int128 v77;
  uint64_t *v78;
  uint64_t v79[2];
  void *v80[2];
  uint64_t v81;
  __int128 v82;
  uint64_t *v83;
  uint64_t v84[2];
  void *v85[2];
  uint64_t v86;
  __int128 v87;
  uint64_t *v88;
  uint64_t v89[2];
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  std::string __s;
  __int128 v94;
  uint64_t *v95;
  uint64_t v96[2];
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  std::string __sz;
  __int128 v101;
  uint64_t *v102;
  uint64_t v103[2];
  void *v104[2];
  uint64_t v105;
  __int128 v106;
  uint64_t *v107;
  uint64_t v108[2];
  void *v109[2];
  uint64_t v110;
  __int128 v111;
  uint64_t *v112;
  uint64_t v113[2];
  void *v114[2];
  uint64_t v115;
  __int128 v116;
  uint64_t *v117;
  uint64_t v118[2];
  void *v119[2];
  uint64_t v120;
  __int128 v121;
  uint64_t *v122;
  uint64_t v123[2];
  void *v124[2];
  uint64_t v125;
  __int128 v126;
  uint64_t *v127;
  uint64_t v128[2];
  void *v129[2];
  uint64_t v130;
  __int128 v131;
  uint64_t *v132;
  uint64_t v133[2];
  void *v134[2];
  uint64_t v135;
  __int128 v136;
  uint64_t *v137;
  uint64_t v138[2];
  void *v139[2];
  uint64_t v140;
  __int128 v141;
  uint64_t *v142;
  uint64_t v143[2];
  void *v144[2];
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149[2];
  void *v150[2];
  uint64_t v151;
  __int128 v152;
  uint64_t *v153;
  uint64_t v154[2];
  void *v155[2];
  uint64_t v156;
  __int128 v157;
  uint64_t *v158;
  uint64_t v159[2];
  void *v160[2];
  uint64_t v161;
  __int128 v162;
  uint64_t *v163;
  uint64_t v164[2];
  void *v165[2];
  uint64_t v166;
  __int128 v167;
  uint64_t *v168;
  uint64_t v169[2];
  void *v170[2];
  uint64_t v171;
  __int128 v172;
  uint64_t *v173;
  uint64_t v174[2];
  void *v175[2];
  uint64_t v176;
  __int128 v177;
  uint64_t *v178;
  uint64_t v179[2];
  void *v180[2];
  uint64_t v181;
  __int128 v182;
  uint64_t *v183;
  uint64_t v184[2];
  void *v185[2];
  uint64_t v186;
  __int128 v187;
  uint64_t *v188;
  uint64_t v189[2];
  void *v190[2];
  uint64_t v191;
  __int128 v192;
  uint64_t *v193;
  uint64_t v194[2];
  void *v195[2];
  uint64_t v196;
  __int128 v197;
  uint64_t *v198;
  uint64_t v199[2];
  void *v200[2];
  uint64_t v201;
  __int128 v202;
  uint64_t *v203;
  uint64_t v204[2];
  void *v205[2];
  uint64_t v206;
  __int128 v207;
  uint64_t *v208;
  uint64_t v209[2];
  uint64_t *v210;
  uint64_t *v211;
  void *v212[2];
  char v213;
  void *v214[2];
  char v215;
  void *v216[2];
  char v217;
  void *v218[2];
  char v219;
  void *v220[2];
  char v221;
  void *v222[2];
  char v223;
  void *v224[2];
  uint64_t v225;
  __int128 v226;
  uint64_t *v227;
  uint64_t v228[2];
  _DWORD v229[2];
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  uint64_t *v233;
  uint64_t v234[2];
  int v235;
  __int128 v236;
  uint64_t v237;
  __int128 v238;
  uint64_t *v239;
  uint64_t v240[2];
  int v241;
  __int128 v242;
  uint64_t v243;
  __int128 v244;
  uint64_t *v245;
  uint64_t v246[2];
  int v247;
  __int128 v248;
  uint64_t v249;
  __int128 v250;
  uint64_t *v251;
  uint64_t v252[2];
  int v253;
  __int128 v254;
  uint64_t v255;
  __int128 v256;
  uint64_t *v257;
  uint64_t v258[2];
  int v259;
  __int128 v260;
  uint64_t v261;
  __int128 v262;
  uint64_t *v263;
  uint64_t v264[2];
  int v265;
  __int128 v266;
  uint64_t v267;
  __int128 v268;
  uint64_t *v269;
  uint64_t v270[2];
  int v271;
  __int128 v272;
  uint64_t v273;
  __int128 v274;
  uint64_t *v275;
  uint64_t v276[2];
  int v277;
  __int128 v278;
  uint64_t v279;
  __int128 v280;
  uint64_t *v281;
  uint64_t v282[2];
  int v283;
  __int128 v284;
  uint64_t v285;
  __int128 v286;
  uint64_t *v287;
  uint64_t v288[2];
  int v289;
  __int128 v290;
  uint64_t v291;
  __int128 v292;
  uint64_t *v293;
  uint64_t v294[2];
  int v295;
  __int128 v296;
  uint64_t v297;
  __int128 v298;
  uint64_t *v299;
  uint64_t v300[2];
  int v301;
  __int128 v302;
  uint64_t v303;
  __int128 v304;
  uint64_t *v305;
  uint64_t v306[2];
  int v307;
  __int128 v308;
  uint64_t v309;
  __int128 v310;
  uint64_t *v311;
  uint64_t v312[2];
  int v313;
  __int128 v314;
  uint64_t v315;
  __int128 v316;
  uint64_t *v317;
  uint64_t v318[2];
  int v319;
  __int128 v320;
  uint64_t v321;
  __int128 v322;
  uint64_t *v323;
  uint64_t v324[2];
  int v325;
  __int128 v326;
  uint64_t v327;
  __int128 v328;
  uint64_t *v329;
  uint64_t v330[2];
  int v331;
  __int128 v332;
  uint64_t v333;
  __int128 v334;
  uint64_t *v335;
  uint64_t v336[2];
  int v337;
  __int128 v338;
  uint64_t v339;
  __int128 v340;
  uint64_t *v341;
  uint64_t v342[2];
  int v343;
  __int128 v344;
  uint64_t v345;
  __int128 v346;
  uint64_t *v347;
  uint64_t v348[2];
  int v349;
  std::string v350;
  __int128 v351;
  uint64_t *v352;
  uint64_t v353[2];
  int v354;
  std::string v355;
  __int128 v356;
  uint64_t *v357;
  uint64_t v358[2];
  int v359;
  __int128 v360;
  uint64_t v361;
  __int128 v362;
  uint64_t *v363;
  uint64_t v364[2];
  int v365;
  __int128 v366;
  uint64_t v367;
  __int128 v368;
  uint64_t *v369;
  uint64_t v370[2];
  int v371;
  __int128 v372;
  uint64_t v373;
  __int128 v374;
  uint64_t *v375;
  uint64_t v376[2];
  int v377;
  __int128 __p;
  uint64_t v379;
  __int128 v380;
  uint64_t *v381;
  uint64_t v382[2];
  int v383;
  uint64_t v384;

  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](this, a2);
  v384 = *MEMORY[0x24BDAC8D0];
  *v2 = 0x7F00000060;
  HIBYTE(v206) = 4;
  if (v205 <= (void **)"PCMU" && (char *)v205 + 4 > "PCMU")
    goto LABEL_307;
  v4 = v2;
  strcpy((char *)v205, "PCMU");
  LODWORD(v207) = 8000;
  v209[1] = 0;
  v209[0] = 0;
  *((_QWORD *)&v207 + 1) = 1;
  v208 = v209;
  *(_OWORD *)v224 = *(_OWORD *)v205;
  v226 = v207;
  v228[1] = 0;
  v228[0] = 0;
  v225 = v206;
  v227 = v228;
  v229[0] = 0;
  HIBYTE(v201) = 3;
  if (v200 <= (void **)"GSM" && (char *)v200 + 3 > "GSM")
    goto LABEL_307;
  LODWORD(v200[0]) = 5067591;
  LODWORD(v202) = 8000;
  v204[1] = 0;
  v204[0] = 0;
  *((_QWORD *)&v202 + 1) = 1;
  v203 = v204;
  v231 = v201;
  v230 = *(_OWORD *)v200;
  v232 = v202;
  v234[1] = 0;
  v234[0] = 0;
  v233 = v234;
  v235 = 3;
  HIBYTE(v196) = 4;
  if (v195 <= (void **)"G723" && (char *)v195 + 4 > "G723")
    goto LABEL_307;
  strcpy((char *)v195, "G723");
  LODWORD(v197) = 8000;
  v199[1] = 0;
  v199[0] = 0;
  *((_QWORD *)&v197 + 1) = 1;
  v198 = v199;
  v237 = v196;
  v236 = *(_OWORD *)v195;
  v238 = v197;
  v240[0] = 0;
  v239 = v240;
  v241 = 4;
  HIBYTE(v191) = 4;
  v240[1] = 0;
  if (v190 <= (void **)"DVI4" && (char *)v190 + 4 > "DVI4")
    goto LABEL_307;
  strcpy((char *)v190, "DVI4");
  LODWORD(v192) = 8000;
  v194[1] = 0;
  v194[0] = 0;
  *((_QWORD *)&v192 + 1) = 1;
  v193 = v194;
  v243 = v191;
  v242 = *(_OWORD *)v190;
  v244 = v192;
  v246[1] = 0;
  v246[0] = 0;
  v245 = v246;
  v247 = 5;
  HIBYTE(v186) = 4;
  if (v185 <= (void **)"DVI4" && (char *)v185 + 4 > "DVI4")
    goto LABEL_307;
  strcpy((char *)v185, "DVI4");
  LODWORD(v187) = 16000;
  v189[1] = 0;
  v189[0] = 0;
  *((_QWORD *)&v187 + 1) = 1;
  v188 = v189;
  v249 = v186;
  v248 = *(_OWORD *)v185;
  v250 = v187;
  v252[0] = 0;
  v251 = v252;
  v253 = 6;
  HIBYTE(v181) = 3;
  v252[1] = 0;
  if (v180 <= (void **)"LPC" && (char *)v180 + 3 > "LPC")
    goto LABEL_307;
  LODWORD(v180[0]) = 4411468;
  LODWORD(v182) = 8000;
  v184[1] = 0;
  v184[0] = 0;
  *((_QWORD *)&v182 + 1) = 1;
  v183 = v184;
  v255 = v181;
  v254 = *(_OWORD *)v180;
  v256 = v182;
  v258[1] = 0;
  v258[0] = 0;
  v257 = v258;
  v259 = 7;
  HIBYTE(v176) = 4;
  if (v175 <= (void **)"PCMA" && (char *)v175 + 4 > "PCMA")
    goto LABEL_307;
  strcpy((char *)v175, "PCMA");
  LODWORD(v177) = 8000;
  v179[1] = 0;
  v179[0] = 0;
  *((_QWORD *)&v177 + 1) = 1;
  v178 = v179;
  v261 = v176;
  v260 = *(_OWORD *)v175;
  v262 = v177;
  v264[1] = 0;
  v264[0] = 0;
  v263 = v264;
  v265 = 8;
  HIBYTE(v171) = 4;
  if (v170 <= (void **)"G722" && (char *)v170 + 4 > "G722")
    goto LABEL_307;
  strcpy((char *)v170, "G722");
  LODWORD(v172) = 8000;
  v174[1] = 0;
  v174[0] = 0;
  *((_QWORD *)&v172 + 1) = 1;
  v173 = v174;
  v267 = v171;
  v266 = *(_OWORD *)v170;
  v268 = v172;
  v270[1] = 0;
  v270[0] = 0;
  v269 = v270;
  v271 = 9;
  HIBYTE(v166) = 3;
  if (v165 <= (void **)"L16" && (char *)v165 + 3 > "L16")
    goto LABEL_307;
  LOWORD(v165[0]) = *(_WORD *)"L16";
  WORD1(v165[0]) = cricket::kL16CodecName[2];
  LODWORD(v167) = 44100;
  v169[1] = 0;
  v169[0] = 0;
  *((_QWORD *)&v167 + 1) = 2;
  v168 = v169;
  v273 = v166;
  v272 = *(_OWORD *)v165;
  v274 = v167;
  v276[1] = 0;
  v276[0] = 0;
  v275 = v276;
  v277 = 10;
  HIBYTE(v161) = 3;
  if (v160 <= (void **)"L16" && (char *)v160 + 3 > "L16")
    goto LABEL_307;
  LOWORD(v160[0]) = *(_WORD *)"L16";
  WORD1(v160[0]) = cricket::kL16CodecName[2];
  LODWORD(v162) = 44100;
  v164[1] = 0;
  v164[0] = 0;
  *((_QWORD *)&v162 + 1) = 1;
  v163 = v164;
  v279 = v161;
  v278 = *(_OWORD *)v160;
  v280 = v162;
  v282[1] = 0;
  v282[0] = 0;
  v281 = v282;
  v283 = 11;
  HIBYTE(v156) = 5;
  if (v155 <= (void **)"QCELP" && (char *)v155 + 5 > "QCELP")
    goto LABEL_307;
  strcpy((char *)v155, "QCELP");
  LODWORD(v157) = 8000;
  v159[1] = 0;
  v159[0] = 0;
  *((_QWORD *)&v157 + 1) = 1;
  v158 = v159;
  v285 = v156;
  v284 = *(_OWORD *)v155;
  v286 = v157;
  v288[0] = 0;
  v288[1] = 0;
  v287 = v288;
  v289 = 12;
  HIBYTE(v151) = 2;
  if (v150 <= (void **)"CN" && (char *)v150 + 2 > "CN")
    goto LABEL_307;
  strcpy((char *)v150, "CN");
  LODWORD(v152) = 8000;
  v154[1] = 0;
  v154[0] = 0;
  *((_QWORD *)&v152 + 1) = 1;
  v153 = v154;
  v291 = v151;
  v290 = *(_OWORD *)v150;
  v292 = v152;
  v294[1] = 0;
  v294[0] = 0;
  v293 = v294;
  v295 = 13;
  HIBYTE(v145) = 3;
  if (v144 <= (void **)"MPA" && (char *)v144 + 3 > "MPA")
    goto LABEL_307;
  LODWORD(v144[0]) = 4280397;
  LODWORD(v146) = 90000;
  v149[1] = 0;
  v149[0] = 0;
  v147 = 0;
  v148 = v149;
  v297 = v145;
  v296 = *(_OWORD *)v144;
  v298 = v146;
  v300[0] = 0;
  v300[1] = 0;
  v299 = v300;
  v301 = 14;
  HIBYTE(v140) = 3;
  if (v139 <= (void **)"MPA" && (char *)v139 + 3 > "MPA")
    goto LABEL_307;
  LODWORD(v139[0]) = 4280397;
  LODWORD(v141) = 90000;
  v143[1] = 0;
  v143[0] = 0;
  *((_QWORD *)&v141 + 1) = 1;
  v142 = v143;
  v303 = v140;
  v302 = *(_OWORD *)v139;
  v304 = v141;
  v306[0] = 0;
  v306[1] = 0;
  v305 = v306;
  v307 = 14;
  HIBYTE(v135) = 4;
  if (v134 <= (void **)"G728" && (char *)v134 + 4 > "G728")
    goto LABEL_307;
  strcpy((char *)v134, "G728");
  LODWORD(v136) = 8000;
  v138[1] = 0;
  v138[0] = 0;
  *((_QWORD *)&v136 + 1) = 1;
  v137 = v138;
  v309 = v135;
  v308 = *(_OWORD *)v134;
  v310 = v136;
  v312[1] = 0;
  v312[0] = 0;
  v311 = v312;
  v313 = 15;
  HIBYTE(v130) = 4;
  if (v129 <= (void **)"DVI4" && (char *)v129 + 4 > "DVI4")
    goto LABEL_307;
  strcpy((char *)v129, "DVI4");
  LODWORD(v131) = 11025;
  v133[1] = 0;
  v133[0] = 0;
  *((_QWORD *)&v131 + 1) = 1;
  v132 = v133;
  v315 = v130;
  v314 = *(_OWORD *)v129;
  v316 = v131;
  v318[1] = 0;
  v318[0] = 0;
  v317 = v318;
  v319 = 16;
  HIBYTE(v125) = 4;
  if (v124 <= (void **)"DVI4" && (char *)v124 + 4 > "DVI4")
    goto LABEL_307;
  strcpy((char *)v124, "DVI4");
  LODWORD(v126) = 22050;
  v128[1] = 0;
  v128[0] = 0;
  *((_QWORD *)&v126 + 1) = 1;
  v127 = v128;
  v321 = v125;
  v320 = *(_OWORD *)v124;
  v322 = v126;
  v324[1] = 0;
  v324[0] = 0;
  v323 = v324;
  v325 = 17;
  HIBYTE(v120) = 4;
  if (v119 <= (void **)"G729" && (char *)v119 + 4 > "G729")
    goto LABEL_307;
  strcpy((char *)v119, "G729");
  LODWORD(v121) = 8000;
  v123[1] = 0;
  v123[0] = 0;
  *((_QWORD *)&v121 + 1) = 1;
  v122 = v123;
  v327 = v120;
  v326 = *(_OWORD *)v119;
  v328 = v121;
  v330[1] = 0;
  v330[0] = 0;
  v329 = v330;
  v331 = 18;
  HIBYTE(v115) = 4;
  if (v114 <= (void **)"ILBC" && (char *)v114 + 4 > "ILBC")
    goto LABEL_307;
  strcpy((char *)v114, "ILBC");
  LODWORD(v116) = 8000;
  v118[1] = 0;
  v118[0] = 0;
  *((_QWORD *)&v116 + 1) = 1;
  v117 = v118;
  v333 = v115;
  v332 = *(_OWORD *)v114;
  v334 = v116;
  v336[1] = 0;
  v336[0] = 0;
  v335 = v336;
  v337 = 102;
  HIBYTE(v110) = 2;
  if (v109 <= (void **)"CN" && (char *)v109 + 2 > "CN")
    goto LABEL_307;
  strcpy((char *)v109, "CN");
  LODWORD(v111) = 16000;
  v113[1] = 0;
  v113[0] = 0;
  *((_QWORD *)&v111 + 1) = 1;
  v112 = v113;
  v339 = v110;
  v338 = *(_OWORD *)v109;
  v340 = v111;
  v342[1] = 0;
  v342[0] = 0;
  v341 = v342;
  v343 = 105;
  HIBYTE(v105) = 2;
  if (v104 <= (void **)"CN" && (char *)v104 + 2 > "CN")
    goto LABEL_307;
  strcpy((char *)v104, "CN");
  LODWORD(v106) = 32000;
  v108[1] = 0;
  v108[0] = 0;
  *((_QWORD *)&v106 + 1) = 1;
  v107 = v108;
  v345 = v105;
  v344 = *(_OWORD *)v104;
  v346 = v106;
  v348[1] = 0;
  v348[0] = 0;
  v347 = v348;
  v349 = 106;
  v217 = 8;
  if (v216 <= (void **)"minptime" && &v216[1] > (void **)"minptime")
    goto LABEL_307;
  strcpy((char *)v216, "minptime");
  v219 = 2;
  if (v218 <= (void **)"10" && (char *)v218 + 2 > "10")
    goto LABEL_307;
  strcpy((char *)v218, "10");
  v221 = 12;
  if (v220 <= (void **)"useinbandfec" && (char *)&v220[1] + 4 > "useinbandfec")
    goto LABEL_307;
  strcpy((char *)v220, "useinbandfec");
  v223 = 1;
  if (v222 <= (void **)"1" && (char *)v222 + 1 > "1")
    goto LABEL_307;
  LOWORD(v222[0]) = 49;
  v99 = 0;
  v98 = 0;
  v97 = &v98;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v97, &v98, (uint64_t)v216, (uint64_t)v216);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v97, &v98, (uint64_t)v220, (uint64_t)v220);
  *((_BYTE *)&__sz.__r_.__value_.__s + 23) = 4;
  if (&__sz <= (std::string *)"opus" && (char *)__sz.__r_.__value_.__r.__words + 4 > "opus")
    goto LABEL_307;
  strcpy((char *)&__sz, "opus");
  LODWORD(v101) = 48000;
  *((_QWORD *)&v101 + 1) = 2;
  v102 = v97;
  v103[0] = v98;
  v103[1] = v99;
  if (v99)
  {
    *(_QWORD *)(v98 + 16) = v103;
    v97 = &v98;
    v98 = 0;
    v99 = 0;
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v350, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
      goto LABEL_60;
    }
  }
  else
  {
    v102 = v103;
  }
  v350 = __sz;
LABEL_60:
  v351 = v101;
  v353[1] = 0;
  v353[0] = 0;
  v352 = v353;
  v5 = v102;
  if (v102 != v103)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v352, v353, (uint64_t)(v5 + 4), (uint64_t)(v5 + 4));
      v6 = (uint64_t *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v103);
  }
  v354 = 111;
  v213 = 0;
  LOBYTE(v212[0]) = 0;
  v215 = 7;
  if (v214 <= (void **)"111/111" && (char *)v214 + 7 > "111/111"
    || (strcpy((char *)v214, "111/111"),
        v92 = 0,
        v91 = 0,
        v90 = &v91,
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v90, &v91, (uint64_t)v212, (uint64_t)v212), *((_BYTE *)&__s.__r_.__value_.__s + 23) = 3, &__s <= (std::string *)&cricket::kRedCodecName)&& (char *)__s.__r_.__value_.__r.__words + 3 > (char *)&cricket::kRedCodecName)
  {
LABEL_307:
    __break(1u);
  }
  v68 = v4;
  strcpy((char *)&__s, "red");
  LODWORD(v94) = 48000;
  *((_QWORD *)&v94 + 1) = 2;
  v95 = v90;
  v96[0] = v91;
  v96[1] = v92;
  if (v92)
  {
    *(_QWORD *)(v91 + 16) = v96;
    v90 = &v91;
    v91 = 0;
    v92 = 0;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v355, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      goto LABEL_77;
    }
  }
  else
  {
    v95 = v96;
  }
  v355 = __s;
LABEL_77:
  v356 = v94;
  v358[1] = 0;
  v358[0] = 0;
  v357 = v358;
  v9 = v95;
  if (v95 != v96)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v357, v358, (uint64_t)(v9 + 4), (uint64_t)(v9 + 4));
      v53 = (uint64_t *)v9[1];
      if (v53)
      {
        do
        {
          v54 = v53;
          v53 = (uint64_t *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          v54 = (uint64_t *)v9[2];
          v8 = *v54 == (_QWORD)v9;
          v9 = v54;
        }
        while (!v8);
      }
      v9 = v54;
    }
    while (v54 != v96);
  }
  v359 = 63;
  HIBYTE(v86) = 15;
  if (v85 <= (void **)"telephone-event" && (char *)&v85[1] + 7 > "telephone-event")
    goto LABEL_307;
  strcpy((char *)v85, "telephone-event");
  LODWORD(v87) = 48000;
  v89[1] = 0;
  v89[0] = 0;
  *((_QWORD *)&v87 + 1) = 1;
  v88 = v89;
  v361 = v86;
  v360 = *(_OWORD *)v85;
  v362 = v87;
  v364[1] = 0;
  v364[0] = 0;
  v363 = v364;
  v365 = 110;
  HIBYTE(v81) = 15;
  if (v80 <= (void **)"telephone-event" && (char *)&v80[1] + 7 > "telephone-event")
    goto LABEL_307;
  strcpy((char *)v80, "telephone-event");
  LODWORD(v82) = 32000;
  v84[1] = 0;
  v84[0] = 0;
  *((_QWORD *)&v82 + 1) = 1;
  v83 = v84;
  v367 = v81;
  v366 = *(_OWORD *)v80;
  v368 = v82;
  v370[1] = 0;
  v370[0] = 0;
  v369 = v370;
  v371 = 112;
  HIBYTE(v76) = 15;
  if (v75 <= (void **)"telephone-event" && (char *)&v75[1] + 7 > "telephone-event")
    goto LABEL_307;
  strcpy((char *)v75, "telephone-event");
  LODWORD(v77) = 16000;
  v79[1] = 0;
  v79[0] = 0;
  *((_QWORD *)&v77 + 1) = 1;
  v78 = v79;
  v373 = v76;
  v372 = *(_OWORD *)v75;
  v374 = v77;
  v376[1] = 0;
  v376[0] = 0;
  v375 = v376;
  v377 = 113;
  HIBYTE(v71) = 15;
  if (v70 <= (void **)"telephone-event" && (char *)&v70[1] + 7 > "telephone-event")
    goto LABEL_307;
  v11 = 0;
  v12 = 0;
  strcpy((char *)v70, "telephone-event");
  LODWORD(v72) = 8000;
  *((_QWORD *)&v72 + 1) = 1;
  v73 = v74;
  v379 = v71;
  __p = *(_OWORD *)v70;
  v380 = v72;
  v381 = v382;
  v383 = 126;
  v74[1] = 0;
  v74[0] = 0;
  v382[1] = 0;
  v382[0] = 0;
  v4[2] = 0;
  v4[3] = 0;
  v13 = (char **)(v4 + 2);
  v4[1] = v4 + 2;
  v14 = v224;
  if ((_QWORD *)v4[1] != v4 + 2)
    goto LABEL_89;
LABEL_101:
  v16 = v13;
LABEL_102:
  v18 = v13;
  v19 = v13;
  if (v11)
  {
    v18 = v16 + 1;
    v19 = v16;
    goto LABEL_104;
  }
LABEL_105:
  v21 = (char *)operator new(0x68uLL);
  v22 = (std::string *)(v21 + 32);
  v69 = v12;
  if (*((char *)v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, (const std::string::value_type *)*v14, (std::string::size_type)v14[1]);
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)v14;
    *((_QWORD *)v21 + 6) = v14[2];
  }
  *((_QWORD *)v21 + 10) = 0;
  v23 = (void **)(v21 + 80);
  *((_QWORD *)v21 + 9) = v21 + 80;
  v24 = (_QWORD **)(v21 + 72);
  *(_OWORD *)(v21 + 56) = *(_OWORD *)(v14 + 3);
  *((_QWORD *)v21 + 11) = 0;
  v25 = (void **)v14[5];
  v26 = v14 + 6;
  if (v25 != v14 + 6)
  {
LABEL_116:
    v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)v21 + 9, (uint64_t *)v21 + 10, &v211, &v210, (uint64_t)(v25 + 4));
    if (*v28)
    {
      v29 = (void **)v25[1];
      if (!v29)
        goto LABEL_150;
      goto LABEL_144;
    }
    v30 = v28;
    v31 = (char *)operator new(0x50uLL);
    v32 = (std::string *)(v31 + 32);
    if (*((char *)v25 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(v32, (const std::string::value_type *)v25[4], (std::string::size_type)v25[5]);
      v34 = (std::string *)(v31 + 56);
      if ((*((char *)v25 + 79) & 0x80000000) == 0)
        goto LABEL_121;
    }
    else
    {
      v33 = *((_OWORD *)v25 + 2);
      *((_QWORD *)v31 + 6) = v25[6];
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
      v34 = (std::string *)(v31 + 56);
      if ((*((char *)v25 + 79) & 0x80000000) == 0)
      {
LABEL_121:
        v35 = *(_OWORD *)(v25 + 7);
        v34->__r_.__value_.__r.__words[2] = (std::string::size_type)v25[9];
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
        goto LABEL_124;
      }
    }
    std::string::__init_copy_ctor_external(v34, (const std::string::value_type *)v25[7], (std::string::size_type)v25[8]);
LABEL_124:
    v36 = v211;
    *(_QWORD *)v31 = 0;
    *((_QWORD *)v31 + 1) = 0;
    *((_QWORD *)v31 + 2) = v36;
    *v30 = v31;
    v37 = (_QWORD *)**v24;
    if (v37)
    {
      *v24 = v37;
      v31 = (char *)*v30;
    }
    v38 = (char *)*v23;
    v8 = v31 == *v23;
    v31[24] = v8;
    if (v8)
    {
LABEL_143:
      ++*((_QWORD *)v21 + 11);
      v29 = (void **)v25[1];
      if (!v29)
        goto LABEL_150;
      goto LABEL_144;
    }
    while (1)
    {
      v39 = *((_QWORD *)v31 + 2);
      if (*(_BYTE *)(v39 + 24))
        goto LABEL_143;
      v40 = *(char **)(v39 + 16);
      v41 = *(_QWORD *)v40;
      if (*(_QWORD *)v40 == v39)
      {
        v44 = *((_QWORD *)v40 + 1);
        if (!v44 || (v45 = *(unsigned __int8 *)(v44 + 24), v42 = (_BYTE *)(v44 + 24), v45))
        {
          if (*(char **)v39 == v31)
          {
            *(_BYTE *)(v39 + 24) = 1;
            v40[24] = 0;
            v48 = *(_QWORD *)(v39 + 8);
            *(_QWORD *)v40 = v48;
            if (v48)
              goto LABEL_141;
          }
          else
          {
            v46 = *(uint64_t **)(v39 + 8);
            v47 = *v46;
            *(_QWORD *)(v39 + 8) = *v46;
            if (v47)
            {
              *(_QWORD *)(v47 + 16) = v39;
              v40 = *(char **)(v39 + 16);
            }
            v46[2] = (uint64_t)v40;
            *(_QWORD *)(*(_QWORD *)(v39 + 16) + 8 * (**(_QWORD **)(v39 + 16) != v39)) = v46;
            *v46 = v39;
            *(_QWORD *)(v39 + 16) = v46;
            v40 = (char *)v46[2];
            v39 = *(_QWORD *)v40;
            *((_BYTE *)v46 + 24) = 1;
            v40[24] = 0;
            v48 = *(_QWORD *)(v39 + 8);
            *(_QWORD *)v40 = v48;
            if (v48)
LABEL_141:
              *(_QWORD *)(v48 + 16) = v40;
          }
          *(_QWORD *)(v39 + 16) = *((_QWORD *)v40 + 2);
          *(_QWORD *)(*((_QWORD *)v40 + 2) + 8 * (**((_QWORD **)v40 + 2) != (_QWORD)v40)) = v39;
          *(_QWORD *)(v39 + 8) = v40;
          *((_QWORD *)v40 + 2) = v39;
          goto LABEL_143;
        }
      }
      else if (!v41 || (v43 = *(unsigned __int8 *)(v41 + 24), v42 = (_BYTE *)(v41 + 24), v43))
      {
        if (*(char **)v39 == v31)
        {
          v52 = *((_QWORD *)v31 + 1);
          *(_QWORD *)v39 = v52;
          if (v52)
          {
            *(_QWORD *)(v52 + 16) = v39;
            v40 = *(char **)(v39 + 16);
          }
          *((_QWORD *)v31 + 2) = v40;
          *(_QWORD *)(*(_QWORD *)(v39 + 16) + 8 * (**(_QWORD **)(v39 + 16) != v39)) = v31;
          *((_QWORD *)v31 + 1) = v39;
          *(_QWORD *)(v39 + 16) = v31;
          v40 = (char *)*((_QWORD *)v31 + 2);
          v31[24] = 1;
          v40[24] = 0;
          v50 = (uint64_t *)*((_QWORD *)v40 + 1);
          v51 = *v50;
          *((_QWORD *)v40 + 1) = *v50;
          if (v51)
LABEL_148:
            *(_QWORD *)(v51 + 16) = v40;
        }
        else
        {
          *(_BYTE *)(v39 + 24) = 1;
          v40[24] = 0;
          v50 = (uint64_t *)*((_QWORD *)v40 + 1);
          v51 = *v50;
          *((_QWORD *)v40 + 1) = *v50;
          if (v51)
            goto LABEL_148;
        }
        v50[2] = *((_QWORD *)v40 + 2);
        *(_QWORD *)(*((_QWORD *)v40 + 2) + 8 * (**((_QWORD **)v40 + 2) != (_QWORD)v40)) = v50;
        *v50 = (uint64_t)v40;
        *((_QWORD *)v40 + 2) = v50;
        ++*((_QWORD *)v21 + 11);
        v29 = (void **)v25[1];
        if (!v29)
        {
          do
          {
LABEL_150:
            v49 = (void **)v25[2];
            v8 = *v49 == v25;
            v25 = v49;
          }
          while (!v8);
          goto LABEL_115;
        }
        do
        {
LABEL_144:
          v49 = v29;
          v29 = (void **)*v29;
        }
        while (v29);
LABEL_115:
        v25 = v49;
        if (v49 == v26)
          break;
        goto LABEL_116;
      }
      *(_BYTE *)(v39 + 24) = 1;
      v31 = v40;
      v40[24] = v40 == v38;
      *v42 = 1;
      if (v40 == v38)
        goto LABEL_143;
    }
  }
  v4 = v68;
  v12 = v69;
  *((_DWORD *)v21 + 24) = v229[18 * v69];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = v19;
  *v18 = v21;
  v27 = *(_QWORD *)v68[1];
  if (v27)
  {
    v68[1] = v27;
    v21 = *v18;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v68[2], (uint64_t *)v21);
  ++v68[3];
  v13 = (char **)(v68 + 2);
  while (++v12 != 27)
  {
    v11 = *v13;
    v14 = &v224[9 * v12];
    if ((char **)v4[1] == v13)
      goto LABEL_101;
LABEL_89:
    v15 = (char *)v13;
    if (v11)
    {
      do
      {
        v16 = (char **)v11;
        v11 = (char *)*((_QWORD *)v11 + 1);
      }
      while (v11);
    }
    else
    {
      do
      {
        v16 = (char **)*((_QWORD *)v15 + 2);
        v8 = *v16 == v15;
        v15 = (char *)v16;
      }
      while (v8);
    }
    v17 = cricket::PayloadTypeMapper::SdpAudioFormatOrdering::operator()((_DWORD *)v16 + 8, v14);
    v11 = *v13;
    if (v17)
      goto LABEL_102;
    v18 = v13;
    v19 = v13;
    if (v11)
    {
      v18 = v13;
      while (1)
      {
        while (1)
        {
          v19 = (char **)v11;
          v20 = v11 + 32;
          if (!cricket::PayloadTypeMapper::SdpAudioFormatOrdering::operator()(v14, (_DWORD *)v11 + 8))
            break;
          v11 = *v19;
          v18 = v19;
          if (!*v19)
            goto LABEL_105;
        }
        if (!cricket::PayloadTypeMapper::SdpAudioFormatOrdering::operator()(v20, v14))
          break;
        v18 = v19 + 1;
        v11 = v19[1];
        if (!v11)
          goto LABEL_105;
      }
LABEL_104:
      if (*v18)
        continue;
    }
    goto LABEL_105;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v381, v382[0]);
  if (SHIBYTE(v379) < 0)
  {
    operator delete((void *)__p);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v375, v376[0]);
    if ((SHIBYTE(v373) & 0x80000000) == 0)
    {
LABEL_168:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v369, v370[0]);
      if ((SHIBYTE(v367) & 0x80000000) == 0)
        goto LABEL_169;
      goto LABEL_230;
    }
  }
  else
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v375, v376[0]);
    if ((SHIBYTE(v373) & 0x80000000) == 0)
      goto LABEL_168;
  }
  operator delete((void *)v372);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v369, v370[0]);
  if ((SHIBYTE(v367) & 0x80000000) == 0)
  {
LABEL_169:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v363, v364[0]);
    if ((SHIBYTE(v361) & 0x80000000) == 0)
      goto LABEL_170;
    goto LABEL_231;
  }
LABEL_230:
  operator delete((void *)v366);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v363, v364[0]);
  if ((SHIBYTE(v361) & 0x80000000) == 0)
  {
LABEL_170:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v357, v358[0]);
    if ((SHIBYTE(v355.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_171;
    goto LABEL_232;
  }
LABEL_231:
  operator delete((void *)v360);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v357, v358[0]);
  if ((SHIBYTE(v355.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_171:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v352, v353[0]);
    if ((SHIBYTE(v350.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_172;
    goto LABEL_233;
  }
LABEL_232:
  operator delete(v355.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v352, v353[0]);
  if ((SHIBYTE(v350.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_172:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v347, v348[0]);
    if ((SHIBYTE(v345) & 0x80000000) == 0)
      goto LABEL_173;
    goto LABEL_234;
  }
LABEL_233:
  operator delete(v350.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v347, v348[0]);
  if ((SHIBYTE(v345) & 0x80000000) == 0)
  {
LABEL_173:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v341, v342[0]);
    if ((SHIBYTE(v339) & 0x80000000) == 0)
      goto LABEL_174;
    goto LABEL_235;
  }
LABEL_234:
  operator delete((void *)v344);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v341, v342[0]);
  if ((SHIBYTE(v339) & 0x80000000) == 0)
  {
LABEL_174:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v335, v336[0]);
    if ((SHIBYTE(v333) & 0x80000000) == 0)
      goto LABEL_175;
    goto LABEL_236;
  }
LABEL_235:
  operator delete((void *)v338);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v335, v336[0]);
  if ((SHIBYTE(v333) & 0x80000000) == 0)
  {
LABEL_175:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v329, v330[0]);
    if ((SHIBYTE(v327) & 0x80000000) == 0)
      goto LABEL_176;
    goto LABEL_237;
  }
LABEL_236:
  operator delete((void *)v332);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v329, v330[0]);
  if ((SHIBYTE(v327) & 0x80000000) == 0)
  {
LABEL_176:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v323, v324[0]);
    if ((SHIBYTE(v321) & 0x80000000) == 0)
      goto LABEL_177;
    goto LABEL_238;
  }
LABEL_237:
  operator delete((void *)v326);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v323, v324[0]);
  if ((SHIBYTE(v321) & 0x80000000) == 0)
  {
LABEL_177:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v317, v318[0]);
    if ((SHIBYTE(v315) & 0x80000000) == 0)
      goto LABEL_178;
    goto LABEL_239;
  }
LABEL_238:
  operator delete((void *)v320);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v317, v318[0]);
  if ((SHIBYTE(v315) & 0x80000000) == 0)
  {
LABEL_178:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v311, v312[0]);
    if ((SHIBYTE(v309) & 0x80000000) == 0)
      goto LABEL_179;
    goto LABEL_240;
  }
LABEL_239:
  operator delete((void *)v314);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v311, v312[0]);
  if ((SHIBYTE(v309) & 0x80000000) == 0)
  {
LABEL_179:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v305, v306[0]);
    if ((SHIBYTE(v303) & 0x80000000) == 0)
      goto LABEL_180;
    goto LABEL_241;
  }
LABEL_240:
  operator delete((void *)v308);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v305, v306[0]);
  if ((SHIBYTE(v303) & 0x80000000) == 0)
  {
LABEL_180:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v299, v300[0]);
    if ((SHIBYTE(v297) & 0x80000000) == 0)
      goto LABEL_181;
    goto LABEL_242;
  }
LABEL_241:
  operator delete((void *)v302);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v299, v300[0]);
  if ((SHIBYTE(v297) & 0x80000000) == 0)
  {
LABEL_181:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v293, v294[0]);
    if ((SHIBYTE(v291) & 0x80000000) == 0)
      goto LABEL_182;
    goto LABEL_243;
  }
LABEL_242:
  operator delete((void *)v296);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v293, v294[0]);
  if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
LABEL_182:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v287, v288[0]);
    if ((SHIBYTE(v285) & 0x80000000) == 0)
      goto LABEL_183;
    goto LABEL_244;
  }
LABEL_243:
  operator delete((void *)v290);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v287, v288[0]);
  if ((SHIBYTE(v285) & 0x80000000) == 0)
  {
LABEL_183:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v281, v282[0]);
    if ((SHIBYTE(v279) & 0x80000000) == 0)
      goto LABEL_184;
    goto LABEL_245;
  }
LABEL_244:
  operator delete((void *)v284);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v281, v282[0]);
  if ((SHIBYTE(v279) & 0x80000000) == 0)
  {
LABEL_184:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v275, v276[0]);
    if ((SHIBYTE(v273) & 0x80000000) == 0)
      goto LABEL_185;
    goto LABEL_246;
  }
LABEL_245:
  operator delete((void *)v278);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v275, v276[0]);
  if ((SHIBYTE(v273) & 0x80000000) == 0)
  {
LABEL_185:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v269, v270[0]);
    if ((SHIBYTE(v267) & 0x80000000) == 0)
      goto LABEL_186;
    goto LABEL_247;
  }
LABEL_246:
  operator delete((void *)v272);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v269, v270[0]);
  if ((SHIBYTE(v267) & 0x80000000) == 0)
  {
LABEL_186:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v263, v264[0]);
    if ((SHIBYTE(v261) & 0x80000000) == 0)
      goto LABEL_187;
    goto LABEL_248;
  }
LABEL_247:
  operator delete((void *)v266);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v263, v264[0]);
  if ((SHIBYTE(v261) & 0x80000000) == 0)
  {
LABEL_187:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v257, v258[0]);
    if ((SHIBYTE(v255) & 0x80000000) == 0)
      goto LABEL_188;
    goto LABEL_249;
  }
LABEL_248:
  operator delete((void *)v260);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v257, v258[0]);
  if ((SHIBYTE(v255) & 0x80000000) == 0)
  {
LABEL_188:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v251, v252[0]);
    if ((SHIBYTE(v249) & 0x80000000) == 0)
      goto LABEL_189;
    goto LABEL_250;
  }
LABEL_249:
  operator delete((void *)v254);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v251, v252[0]);
  if ((SHIBYTE(v249) & 0x80000000) == 0)
  {
LABEL_189:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v245, v246[0]);
    if ((SHIBYTE(v243) & 0x80000000) == 0)
      goto LABEL_190;
    goto LABEL_251;
  }
LABEL_250:
  operator delete((void *)v248);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v245, v246[0]);
  if ((SHIBYTE(v243) & 0x80000000) == 0)
  {
LABEL_190:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v239, v240[0]);
    if ((SHIBYTE(v237) & 0x80000000) == 0)
      goto LABEL_191;
    goto LABEL_252;
  }
LABEL_251:
  operator delete((void *)v242);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v239, v240[0]);
  if ((SHIBYTE(v237) & 0x80000000) == 0)
  {
LABEL_191:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v233, v234[0]);
    if ((SHIBYTE(v231) & 0x80000000) == 0)
      goto LABEL_192;
    goto LABEL_253;
  }
LABEL_252:
  operator delete((void *)v236);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v233, v234[0]);
  if ((SHIBYTE(v231) & 0x80000000) == 0)
  {
LABEL_192:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v227, v228[0]);
    if ((SHIBYTE(v225) & 0x80000000) == 0)
      goto LABEL_193;
    goto LABEL_254;
  }
LABEL_253:
  operator delete((void *)v230);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v227, v228[0]);
  if ((SHIBYTE(v225) & 0x80000000) == 0)
  {
LABEL_193:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v73, v74[0]);
    if ((SHIBYTE(v71) & 0x80000000) == 0)
      goto LABEL_194;
    goto LABEL_255;
  }
LABEL_254:
  operator delete(v224[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v73, v74[0]);
  if ((SHIBYTE(v71) & 0x80000000) == 0)
  {
LABEL_194:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v78, v79[0]);
    if ((SHIBYTE(v76) & 0x80000000) == 0)
      goto LABEL_195;
    goto LABEL_256;
  }
LABEL_255:
  operator delete(v70[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v78, v79[0]);
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
LABEL_195:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v83, v84[0]);
    if ((SHIBYTE(v81) & 0x80000000) == 0)
      goto LABEL_196;
    goto LABEL_257;
  }
LABEL_256:
  operator delete(v75[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v83, v84[0]);
  if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
LABEL_196:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v88, v89[0]);
    if ((SHIBYTE(v86) & 0x80000000) == 0)
      goto LABEL_197;
    goto LABEL_258;
  }
LABEL_257:
  operator delete(v80[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v88, v89[0]);
  if ((SHIBYTE(v86) & 0x80000000) == 0)
  {
LABEL_197:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v95, v96[0]);
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_198;
    goto LABEL_259;
  }
LABEL_258:
  operator delete(v85[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v95, v96[0]);
  if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_198:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v90, v91);
    if ((v215 & 0x80000000) == 0)
      goto LABEL_199;
    goto LABEL_260;
  }
LABEL_259:
  operator delete(__s.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v90, v91);
  if ((v215 & 0x80000000) == 0)
  {
LABEL_199:
    if ((v213 & 0x80000000) == 0)
      goto LABEL_200;
    goto LABEL_261;
  }
LABEL_260:
  operator delete(v214[0]);
  if ((v213 & 0x80000000) == 0)
  {
LABEL_200:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v102, v103[0]);
    if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_201;
    goto LABEL_262;
  }
LABEL_261:
  operator delete(v212[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v102, v103[0]);
  if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_201:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v97, v98);
    if ((v223 & 0x80000000) == 0)
      goto LABEL_202;
    goto LABEL_263;
  }
LABEL_262:
  operator delete(__sz.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v97, v98);
  if ((v223 & 0x80000000) == 0)
  {
LABEL_202:
    if ((v221 & 0x80000000) == 0)
      goto LABEL_203;
    goto LABEL_264;
  }
LABEL_263:
  operator delete(v222[0]);
  if ((v221 & 0x80000000) == 0)
  {
LABEL_203:
    if ((v219 & 0x80000000) == 0)
      goto LABEL_204;
    goto LABEL_265;
  }
LABEL_264:
  operator delete(v220[0]);
  if ((v219 & 0x80000000) == 0)
  {
LABEL_204:
    if ((v217 & 0x80000000) == 0)
      goto LABEL_205;
    goto LABEL_266;
  }
LABEL_265:
  operator delete(v218[0]);
  if ((v217 & 0x80000000) == 0)
  {
LABEL_205:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v107, v108[0]);
    if ((SHIBYTE(v105) & 0x80000000) == 0)
      goto LABEL_206;
    goto LABEL_267;
  }
LABEL_266:
  operator delete(v216[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v107, v108[0]);
  if ((SHIBYTE(v105) & 0x80000000) == 0)
  {
LABEL_206:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v112, v113[0]);
    if ((SHIBYTE(v110) & 0x80000000) == 0)
      goto LABEL_207;
    goto LABEL_268;
  }
LABEL_267:
  operator delete(v104[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v112, v113[0]);
  if ((SHIBYTE(v110) & 0x80000000) == 0)
  {
LABEL_207:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v117, v118[0]);
    if ((SHIBYTE(v115) & 0x80000000) == 0)
      goto LABEL_208;
    goto LABEL_269;
  }
LABEL_268:
  operator delete(v109[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v117, v118[0]);
  if ((SHIBYTE(v115) & 0x80000000) == 0)
  {
LABEL_208:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v122, v123[0]);
    if ((SHIBYTE(v120) & 0x80000000) == 0)
      goto LABEL_209;
    goto LABEL_270;
  }
LABEL_269:
  operator delete(v114[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v122, v123[0]);
  if ((SHIBYTE(v120) & 0x80000000) == 0)
  {
LABEL_209:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v127, v128[0]);
    if ((SHIBYTE(v125) & 0x80000000) == 0)
      goto LABEL_210;
    goto LABEL_271;
  }
LABEL_270:
  operator delete(v119[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v127, v128[0]);
  if ((SHIBYTE(v125) & 0x80000000) == 0)
  {
LABEL_210:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v132, v133[0]);
    if ((SHIBYTE(v130) & 0x80000000) == 0)
      goto LABEL_211;
    goto LABEL_272;
  }
LABEL_271:
  operator delete(v124[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v132, v133[0]);
  if ((SHIBYTE(v130) & 0x80000000) == 0)
  {
LABEL_211:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v137, v138[0]);
    if ((SHIBYTE(v135) & 0x80000000) == 0)
      goto LABEL_212;
    goto LABEL_273;
  }
LABEL_272:
  operator delete(v129[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v137, v138[0]);
  if ((SHIBYTE(v135) & 0x80000000) == 0)
  {
LABEL_212:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v142, v143[0]);
    if ((SHIBYTE(v140) & 0x80000000) == 0)
      goto LABEL_213;
    goto LABEL_274;
  }
LABEL_273:
  operator delete(v134[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v142, v143[0]);
  if ((SHIBYTE(v140) & 0x80000000) == 0)
  {
LABEL_213:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v148, v149[0]);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
      goto LABEL_214;
    goto LABEL_275;
  }
LABEL_274:
  operator delete(v139[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v148, v149[0]);
  if ((SHIBYTE(v145) & 0x80000000) == 0)
  {
LABEL_214:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v153, v154[0]);
    if ((SHIBYTE(v151) & 0x80000000) == 0)
      goto LABEL_215;
    goto LABEL_276;
  }
LABEL_275:
  operator delete(v144[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v153, v154[0]);
  if ((SHIBYTE(v151) & 0x80000000) == 0)
  {
LABEL_215:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v158, v159[0]);
    if ((SHIBYTE(v156) & 0x80000000) == 0)
      goto LABEL_216;
    goto LABEL_277;
  }
LABEL_276:
  operator delete(v150[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v158, v159[0]);
  if ((SHIBYTE(v156) & 0x80000000) == 0)
  {
LABEL_216:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v163, v164[0]);
    if ((SHIBYTE(v161) & 0x80000000) == 0)
      goto LABEL_217;
    goto LABEL_278;
  }
LABEL_277:
  operator delete(v155[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v163, v164[0]);
  if ((SHIBYTE(v161) & 0x80000000) == 0)
  {
LABEL_217:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v168, v169[0]);
    if ((SHIBYTE(v166) & 0x80000000) == 0)
      goto LABEL_218;
    goto LABEL_279;
  }
LABEL_278:
  operator delete(v160[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v168, v169[0]);
  if ((SHIBYTE(v166) & 0x80000000) == 0)
  {
LABEL_218:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v173, v174[0]);
    if ((SHIBYTE(v171) & 0x80000000) == 0)
      goto LABEL_219;
    goto LABEL_280;
  }
LABEL_279:
  operator delete(v165[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v173, v174[0]);
  if ((SHIBYTE(v171) & 0x80000000) == 0)
  {
LABEL_219:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v178, v179[0]);
    if ((SHIBYTE(v176) & 0x80000000) == 0)
      goto LABEL_220;
    goto LABEL_281;
  }
LABEL_280:
  operator delete(v170[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v178, v179[0]);
  if ((SHIBYTE(v176) & 0x80000000) == 0)
  {
LABEL_220:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v183, v184[0]);
    if ((SHIBYTE(v181) & 0x80000000) == 0)
      goto LABEL_221;
    goto LABEL_282;
  }
LABEL_281:
  operator delete(v175[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v183, v184[0]);
  if ((SHIBYTE(v181) & 0x80000000) == 0)
  {
LABEL_221:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v188, v189[0]);
    if ((SHIBYTE(v186) & 0x80000000) == 0)
      goto LABEL_222;
    goto LABEL_283;
  }
LABEL_282:
  operator delete(v180[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v188, v189[0]);
  if ((SHIBYTE(v186) & 0x80000000) == 0)
  {
LABEL_222:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v193, v194[0]);
    if ((SHIBYTE(v191) & 0x80000000) == 0)
      goto LABEL_223;
    goto LABEL_284;
  }
LABEL_283:
  operator delete(v185[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v193, v194[0]);
  if ((SHIBYTE(v191) & 0x80000000) == 0)
  {
LABEL_223:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v198, v199[0]);
    if ((SHIBYTE(v196) & 0x80000000) == 0)
      goto LABEL_224;
    goto LABEL_285;
  }
LABEL_284:
  operator delete(v190[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v198, v199[0]);
  if ((SHIBYTE(v196) & 0x80000000) == 0)
  {
LABEL_224:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v203, v204[0]);
    if ((SHIBYTE(v201) & 0x80000000) == 0)
      goto LABEL_225;
    goto LABEL_286;
  }
LABEL_285:
  operator delete(v195[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v203, v204[0]);
  if ((SHIBYTE(v201) & 0x80000000) == 0)
  {
LABEL_225:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v208, v209[0]);
    if ((SHIBYTE(v206) & 0x80000000) == 0)
      goto LABEL_226;
LABEL_287:
    operator delete(v205[0]);
    v4[5] = 0;
    v4[6] = 0;
    v55 = (uint64_t **)(v4 + 5);
    v4[4] = v4 + 5;
    v56 = (char **)v4[1];
    if (v56 == v13)
      return v4;
    goto LABEL_290;
  }
LABEL_286:
  operator delete(v200[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v208, v209[0]);
  if (SHIBYTE(v206) < 0)
    goto LABEL_287;
LABEL_226:
  v4[5] = 0;
  v4[6] = 0;
  v55 = (uint64_t **)(v4 + 5);
  v4[4] = v4 + 5;
  v56 = (char **)v4[1];
  if (v56 == v13)
    return v4;
  do
  {
LABEL_290:
    v58 = *v55;
    v59 = *((_DWORD *)v56 + 24);
    v60 = v55;
    v61 = v55;
    if (*v55)
    {
      while (1)
      {
        while (1)
        {
          v61 = (uint64_t **)v58;
          v62 = *((_DWORD *)v58 + 7);
          if (v59 >= v62)
            break;
          v58 = *v61;
          v60 = v61;
          if (!*v61)
            goto LABEL_297;
        }
        if (v62 >= v59)
          break;
        v58 = v61[1];
        if (!v58)
        {
          v60 = v61 + 1;
          goto LABEL_297;
        }
      }
    }
    else
    {
LABEL_297:
      v63 = operator new(0x20uLL);
      v63[7] = v59;
      *(_QWORD *)v63 = 0;
      *((_QWORD *)v63 + 1) = 0;
      *((_QWORD *)v63 + 2) = v61;
      *v60 = (uint64_t *)v63;
      v64 = *(_QWORD *)v4[4];
      if (v64)
      {
        v4[4] = v64;
        v65 = *v60;
      }
      else
      {
        v65 = (uint64_t *)v63;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[5], v65);
      ++v4[6];
    }
    v66 = v56[1];
    if (v66)
    {
      do
      {
        v67 = (char **)v66;
        v66 = (_QWORD *)*v66;
      }
      while (v66);
    }
    else
    {
      do
      {
        v67 = (char **)v56[2];
        v8 = *v67 == (char *)v56;
        v56 = v67;
      }
      while (!v8);
    }
    v56 = v67;
  }
  while (v67 != v13);
  return v4;
}

uint64_t cricket::PayloadTypeMapper::GetMappingFor(cricket::PayloadTypeMapper *this, const webrtc::SdpAudioFormat *__src)
{
  char *v4;
  char *v5;
  char *v6;
  _BOOL4 v7;
  char **v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t **v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  std::string *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  char *v36;
  char *v37;

  v5 = (char *)this + 16;
  v4 = (char *)*((_QWORD *)this + 2);
  if (v4)
  {
    v6 = (char *)this + 16;
    do
    {
      v7 = cricket::PayloadTypeMapper::SdpAudioFormatOrdering::operator()((_DWORD *)v4 + 8, __src);
      v8 = (char **)(v4 + 8);
      if (!v7)
      {
        v8 = (char **)v4;
        v6 = v4;
      }
      v4 = *v8;
    }
    while (*v8);
    if (v6 != v5 && !cricket::PayloadTypeMapper::SdpAudioFormatOrdering::operator()(__src, (_DWORD *)v6 + 8))
    {
      v10 = *((_DWORD *)v6 + 24);
LABEL_51:
      v12 = v10 & 0xFFFFFF00;
      v11 = 0x100000000;
      return v11 | v12 | v10;
    }
  }
  v10 = *(_DWORD *)this;
  v9 = *((_DWORD *)this + 1);
  if (*(_DWORD *)this <= v9)
  {
    v14 = (uint64_t **)((char *)this + 40);
    v13 = (uint64_t *)*((_QWORD *)this + 5);
    if (v13)
    {
      while (1)
      {
        v15 = (uint64_t **)((char *)this + 40);
        v16 = (char *)v13;
        do
        {
          v17 = *((_DWORD *)v16 + 7);
          v18 = v17 < v10;
          if (v17 >= v10)
            v19 = (char **)v16;
          else
            v19 = (char **)(v16 + 8);
          if (!v18)
            v15 = (uint64_t **)v16;
          v16 = *v19;
        }
        while (*v19);
        if (v15 == v14 || v10 < *((_DWORD *)v15 + 7))
          break;
        *(_DWORD *)this = v10 + 1;
        v20 = v10++ == v9;
        if (v20)
          goto LABEL_9;
      }
      do
      {
        while (1)
        {
          v21 = (uint64_t **)v13;
          v22 = *((_DWORD *)v13 + 7);
          if (v10 < v22)
            break;
          if (v22 >= v10)
            goto LABEL_35;
          v13 = v21[1];
          if (!v13)
          {
            v14 = v21 + 1;
            goto LABEL_31;
          }
        }
        v13 = *v21;
      }
      while (*v21);
      v14 = v21;
    }
    else
    {
      v21 = (uint64_t **)((char *)this + 40);
    }
LABEL_31:
    v23 = operator new(0x20uLL);
    v23[7] = v10;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v21;
    *v14 = (uint64_t *)v23;
    v24 = **((_QWORD **)this + 4);
    if (v24)
    {
      *((_QWORD *)this + 4) = v24;
      v25 = *v14;
    }
    else
    {
      v25 = (uint64_t *)v23;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 5), v25);
    ++*((_QWORD *)this + 6);
LABEL_35:
    v26 = *(char **)v5;
    if (*(_QWORD *)v5)
    {
      while (1)
      {
        while (1)
        {
          v27 = v26;
          v28 = v26 + 32;
          if (!cricket::PayloadTypeMapper::SdpAudioFormatOrdering::operator()(__src, (_DWORD *)v26 + 8))
            break;
          v26 = *(char **)v27;
          v5 = v27;
          if (!*(_QWORD *)v27)
            goto LABEL_43;
        }
        if (!cricket::PayloadTypeMapper::SdpAudioFormatOrdering::operator()(v28, __src))
          break;
        v5 = v27 + 8;
        v26 = (char *)*((_QWORD *)v27 + 1);
        if (!v26)
          goto LABEL_43;
      }
      v29 = *(char **)v5;
      if (*(_QWORD *)v5)
        goto LABEL_50;
    }
    else
    {
      v27 = v5;
    }
LABEL_43:
    v29 = (char *)operator new(0x68uLL);
    v30 = (std::string *)(v29 + 32);
    if (*((char *)__src + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)__src, *((_QWORD *)__src + 1));
    }
    else
    {
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)__src;
      *((_QWORD *)v29 + 6) = *((_QWORD *)__src + 2);
    }
    *((_QWORD *)v29 + 10) = 0;
    *((_QWORD *)v29 + 9) = v29 + 80;
    *(_OWORD *)(v29 + 56) = *(_OWORD *)((char *)__src + 24);
    *((_QWORD *)v29 + 11) = 0;
    v31 = (char *)*((_QWORD *)__src + 5);
    v32 = (char *)__src + 48;
    if (v31 != v32)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)v29 + 9, (uint64_t *)v29 + 10, (uint64_t)(v31 + 32), (uint64_t)(v31 + 32));
        v36 = (char *)*((_QWORD *)v31 + 1);
        if (v36)
        {
          do
          {
            v37 = v36;
            v36 = *(char **)v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (char *)*((_QWORD *)v31 + 2);
            v20 = *(_QWORD *)v37 == (_QWORD)v31;
            v31 = v37;
          }
          while (!v20);
        }
        v31 = v37;
      }
      while (v37 != v32);
    }
    *((_DWORD *)v29 + 24) = 0;
    *(_QWORD *)v29 = 0;
    *((_QWORD *)v29 + 1) = 0;
    *((_QWORD *)v29 + 2) = v27;
    *(_QWORD *)v5 = v29;
    v33 = **((_QWORD **)this + 1);
    v34 = (uint64_t *)v29;
    if (v33)
    {
      *((_QWORD *)this + 1) = v33;
      v34 = *(uint64_t **)v5;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 2), v34);
    ++*((_QWORD *)this + 3);
LABEL_50:
    *((_DWORD *)v29 + 24) = v10;
    ++*(_DWORD *)this;
    goto LABEL_51;
  }
LABEL_9:
  v11 = 0;
  LOBYTE(v10) = 0;
  v12 = 0;
  return v11 | v12 | v10;
}

void cricket::PayloadTypeMapper::ToAudioCodec(cricket::PayloadTypeMapper *this@<X0>, const webrtc::SdpAudioFormat *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t MappingFor;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(cricket::Codec *__hidden);
  uint64_t v18;
  std::string v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  MappingFor = cricket::PayloadTypeMapper::GetMappingFor(this, a2);
  if (HIDWORD(MappingFor))
  {
    v6 = *((_DWORD *)a2 + 6);
    v7 = *((_QWORD *)a2 + 4);
    v17 = &off_24C0B1418;
    LODWORD(v18) = 0;
    HIDWORD(v18) = MappingFor;
    if (*((char *)a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    else
      v19 = *(std::string *)a2;
    *(_QWORD *)&v20 = v6;
    *((_QWORD *)&v20 + 1) = v7;
    LOBYTE(v21) = 0;
    v23 = 0;
    v24 = 0;
    LOBYTE(v28) = 0;
    v30 = 0;
    v33 = 0;
    v34 = 0;
    v31 = &v32;
    v32 = 0;
    v35 = 0;
    v36 = 0;
    if (&v31 == (uint64_t **)((char *)a2 + 40))
    {
      v8 = 1;
    }
    else
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v31, *((char **)a2 + 5), (char *)a2 + 48);
      v8 = v23 == 0;
    }
    v9 = v18;
    *(_QWORD *)a3 = &off_24C0B1418;
    *(_QWORD *)(a3 + 8) = v9;
    *(std::string *)(a3 + 16) = v19;
    memset(&v19, 0, sizeof(v19));
    *(_OWORD *)(a3 + 40) = v20;
    *(_BYTE *)(a3 + 56) = 0;
    *(_BYTE *)(a3 + 80) = 0;
    if (!v8)
    {
      *(_OWORD *)(a3 + 56) = v21;
      *(_QWORD *)(a3 + 72) = v22;
      v22 = 0;
      v21 = 0uLL;
      *(_BYTE *)(a3 + 80) = 1;
    }
    v10 = v24;
    *(_BYTE *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 88) = v10;
    v11 = v26;
    *(_OWORD *)(a3 + 96) = v25;
    *(_OWORD *)(a3 + 112) = v11;
    *(_QWORD *)(a3 + 128) = v27;
    v24 = 0;
    *(_BYTE *)(a3 + 160) = 0;
    if (v30)
    {
      *(_OWORD *)(a3 + 136) = v28;
      *(_QWORD *)(a3 + 152) = v29;
      v29 = 0;
      v28 = 0uLL;
      *(_BYTE *)(a3 + 160) = 1;
    }
    v13 = v31;
    v12 = v32;
    *(_QWORD *)(a3 + 176) = v32;
    v14 = a3 + 176;
    *(_QWORD *)(a3 + 168) = v13;
    v15 = v33;
    *(_QWORD *)(a3 + 184) = v33;
    if (v15)
    {
      *(_QWORD *)(v12 + 16) = v14;
      v31 = &v32;
      v32 = 0;
      v33 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 168) = v14;
    }
    *(_QWORD *)(a3 + 192) = 0;
    *(_QWORD *)(a3 + 200) = 0;
    v16 = a3 + 192;
    *(_QWORD *)(v16 + 16) = 0;
    std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>((_QWORD *)v16, v34, v35, 0xAAAAAAAAAAAAAAABLL * ((v35 - v34) >> 4));
    *(_BYTE *)(v16 + 24) = 1;
    cricket::Codec::~Codec((cricket::Codec *)&v17);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 216) = 0;
  }
}

BOOL cricket::PayloadTypeMapper::SdpAudioFormatOrdering::operator()(_DWORD *__src, _DWORD *a2)
{
  int v2;
  int v3;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  char *v9;
  char *p_p;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int8x16_t *v16;
  unint64_t v17;
  int v18;
  size_t v19;
  char *v20;
  char *p_s2;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int8x16_t *v26;
  unint64_t v27;
  size_t v28;
  const void *v29;
  size_t v30;
  char v31;
  size_t v32;
  const void *v33;
  size_t v34;
  int v35;
  int v36;
  unsigned int v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  _BOOL4 v42;
  _BOOL4 v43;
  _QWORD *v44;
  size_t v45;
  BOOL v46;
  _QWORD *v47;
  size_t v48;
  size_t v49;
  int v50;
  BOOL v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  size_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  void *__s2;
  size_t v62;
  int64_t v63;
  void *__p;
  size_t v65;
  int64_t v66;

  v2 = __src[6];
  v3 = a2[6];
  if (v2 != v3)
    return v2 < v3;
  v6 = *((_QWORD *)__src + 4);
  v7 = *((_QWORD *)a2 + 4);
  if (v6 != v7)
    return v6 < v7;
  if (*((char *)__src + 23) < 0)
  {
    v8 = *((_QWORD *)__src + 1);
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_136;
    v9 = *(char **)__src;
    if (v8)
    {
      if (!v9)
        goto LABEL_136;
    }
    if (v8 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_137;
  }
  else
  {
    v8 = *((unsigned __int8 *)__src + 23);
    v9 = (char *)__src;
  }
  if (v8 > 0x16)
  {
    v12 = (v8 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    p_p = (char *)operator new(v12 + 1);
    v65 = v8;
    v66 = v13 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v66) = v8;
    p_p = (char *)&__p;
  }
  v14 = &p_p[v8];
  if (p_p <= v9 && v14 > v9)
    goto LABEL_136;
  if (v8)
    memmove(p_p, v9, v8);
  *v14 = 0;
  if (v66 >= 0)
    v16 = (int8x16_t *)&__p;
  else
    v16 = (int8x16_t *)__p;
  if (v66 >= 0)
    v17 = HIBYTE(v66);
  else
    v17 = v65;
  if (v17 > 0xF)
  {
    absl::ascii_internal::AsciiStrCaseFoldLong<false>(v16, v17);
    v18 = *((char *)a2 + 23);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_32:
      v19 = v18;
      v20 = (char *)a2;
      goto LABEL_38;
    }
  }
  else
  {
    for (; v17; --v17)
    {
      v16->i8[0] ^= 32 * ((char)(v16->i8[0] + 63) < -102);
      v16 = (int8x16_t *)((char *)v16 + 1);
    }
    v18 = *((char *)a2 + 23);
    if ((v18 & 0x80000000) == 0)
      goto LABEL_32;
  }
  v19 = *((_QWORD *)a2 + 1);
  if ((v19 & 0x8000000000000000) != 0 || (v20 = *(char **)a2, v19) && !v20)
  {
LABEL_136:
    __break(1u);
LABEL_137:
    abort();
  }
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_137;
LABEL_38:
  if (v19 > 0x16)
  {
    v22 = (v19 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    p_s2 = (char *)operator new(v22 + 1);
    v62 = v19;
    v63 = v23 | 0x8000000000000000;
    __s2 = p_s2;
  }
  else
  {
    HIBYTE(v63) = v19;
    p_s2 = (char *)&__s2;
  }
  v24 = &p_s2[v19];
  if (p_s2 <= v20 && v24 > v20)
    goto LABEL_136;
  if (v19)
    memmove(p_s2, v20, v19);
  *v24 = 0;
  if (v63 >= 0)
    v26 = (int8x16_t *)&__s2;
  else
    v26 = (int8x16_t *)__s2;
  if (v63 >= 0)
    v27 = HIBYTE(v63);
  else
    v27 = v62;
  if (v27 <= 0xF)
  {
    for (; v27; --v27)
    {
      v26->i8[0] ^= 32 * ((char)(v26->i8[0] + 63) < -102);
      v26 = (int8x16_t *)((char *)v26 + 1);
    }
    v28 = HIBYTE(v63);
    if ((SHIBYTE(v63) & 0x80000000) == 0)
      goto LABEL_59;
    goto LABEL_61;
  }
  absl::ascii_internal::AsciiStrCaseFoldLong<false>(v26, v27);
  v28 = HIBYTE(v63);
  if (SHIBYTE(v63) < 0)
  {
LABEL_61:
    v30 = v62;
    if ((v62 & 0x8000000000000000) == 0)
    {
      v29 = __s2;
      if (!v62 || __s2)
        goto LABEL_64;
    }
    goto LABEL_136;
  }
LABEL_59:
  v29 = &__s2;
  v30 = v28;
LABEL_64:
  v31 = HIBYTE(v66);
  if (v66 >= 0)
    v32 = HIBYTE(v66);
  else
    v32 = v65;
  if (v66 >= 0)
    v33 = &__p;
  else
    v33 = __p;
  if (v30 >= v32)
    v34 = v32;
  else
    v34 = v30;
  v35 = memcmp(v33, v29, v34);
  if (v32 < v30)
    v36 = -1;
  else
    v36 = v30 < v32;
  if (v35)
    v37 = v35;
  else
    v37 = v36;
  if ((v28 & 0x80) != 0)
  {
    operator delete(__s2);
    if ((v66 & 0x8000000000000000) == 0)
    {
LABEL_81:
      if (v37)
        return v37 >> 31;
      goto LABEL_85;
    }
  }
  else if ((v31 & 0x80) == 0)
  {
    goto LABEL_81;
  }
  operator delete(__p);
  if (v37)
    return v37 >> 31;
LABEL_85:
  v38 = (char *)*((_QWORD *)__src + 5);
  v39 = (char *)(__src + 12);
  v40 = (char *)*((_QWORD *)a2 + 5);
  v41 = (char *)(a2 + 12);
  v42 = v40 == v41;
  v43 = v38 == v39;
  if (v38 == v39 || v40 == v41)
    return v43 && !v42;
  while (1)
  {
    v44 = v38 + 32;
    if (v38[55] < 0)
    {
      v45 = *((_QWORD *)v38 + 5);
      if ((v45 & 0x8000000000000000) != 0)
        goto LABEL_136;
      v44 = (_QWORD *)*v44;
      v46 = v45 && v44 == 0;
      if (v46)
        goto LABEL_136;
    }
    else
    {
      v45 = v38[55];
    }
    v47 = v40 + 32;
    if (v40[55] < 0)
    {
      v48 = *((_QWORD *)v40 + 5);
      if ((v48 & 0x8000000000000000) != 0)
        goto LABEL_136;
      v47 = (_QWORD *)*v47;
      if (v48)
      {
        if (!v47)
          goto LABEL_136;
      }
    }
    else
    {
      v48 = v40[55];
    }
    if (v48 >= v45)
      v49 = v45;
    else
      v49 = v48;
    v50 = memcmp(v44, v47, v49);
    if (v50)
      return v50 < 0;
    v51 = v45 >= v48;
    if (v45 != v48)
      break;
    v52 = v38 + 56;
    if (v38[79] < 0)
    {
      v53 = *((_QWORD *)v38 + 8);
      if ((v53 & 0x8000000000000000) != 0)
        goto LABEL_136;
      v52 = (_QWORD *)*v52;
      if (v53)
      {
        if (!v52)
          goto LABEL_136;
      }
    }
    else
    {
      v53 = v38[79];
    }
    v54 = v40 + 56;
    if (v40[79] < 0)
    {
      v55 = *((_QWORD *)v40 + 8);
      if ((v55 & 0x8000000000000000) != 0)
        goto LABEL_136;
      v54 = (_QWORD *)*v54;
      if (v55)
      {
        if (!v54)
          goto LABEL_136;
      }
    }
    else
    {
      v55 = v40[79];
    }
    v56 = v55 >= v53 ? v53 : v55;
    v50 = memcmp(v52, v54, v56);
    if (v50)
      return v50 < 0;
    v51 = v53 >= v55;
    if (v53 != v55)
      break;
    v57 = (char *)*((_QWORD *)v38 + 1);
    if (v57)
    {
      do
      {
        v58 = v57;
        v57 = *(char **)v57;
      }
      while (v57);
    }
    else
    {
      do
      {
        v58 = (char *)*((_QWORD *)v38 + 2);
        v46 = *(_QWORD *)v58 == (_QWORD)v38;
        v38 = v58;
      }
      while (!v46);
    }
    v59 = (char *)*((_QWORD *)v40 + 1);
    if (v59)
    {
      do
      {
        v60 = v59;
        v59 = *(char **)v59;
      }
      while (v59);
    }
    else
    {
      do
      {
        v60 = (char *)*((_QWORD *)v40 + 2);
        v46 = *(_QWORD *)v60 == (_QWORD)v40;
        v40 = v60;
      }
      while (!v46);
    }
    v42 = v60 == v41;
    v43 = v58 == v39;
    if (v58 != v39)
    {
      v38 = v58;
      v40 = v60;
      if (v60 != v41)
        continue;
    }
    return v43 && !v42;
  }
  return !v51;
}

void std::__tree<std::__value_type<webrtc::SdpAudioFormat,int>,std::__map_value_compare<webrtc::SdpAudioFormat,std::__value_type<webrtc::SdpAudioFormat,int>,cricket::PayloadTypeMapper::SdpAudioFormatOrdering,true>,std::allocator<std::__value_type<webrtc::SdpAudioFormat,int>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<webrtc::SdpAudioFormat,int>,std::__map_value_compare<webrtc::SdpAudioFormat,std::__value_type<webrtc::SdpAudioFormat,int>,cricket::PayloadTypeMapper::SdpAudioFormatOrdering,true>,std::allocator<std::__value_type<webrtc::SdpAudioFormat,int>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<webrtc::SdpAudioFormat,int>,std::__map_value_compare<webrtc::SdpAudioFormat,std::__value_type<webrtc::SdpAudioFormat,int>,cricket::PayloadTypeMapper::SdpAudioFormatOrdering,true>,std::allocator<std::__value_type<webrtc::SdpAudioFormat,int>>>::destroy(a1, *((_QWORD *)a2 + 1));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(a2 + 72), *((_QWORD *)a2 + 10));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

BOOL cricket::MediaConfig::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && *((_DWORD *)a1 + 3) == *((_DWORD *)a2 + 3)
      && a1[16] == a2[16]
      && *((_DWORD *)a1 + 5) == *((_DWORD *)a2 + 5);
}

uint64_t std::operator==[abi:sn180100]<rtc::NetworkMask,std::allocator<rtc::NetworkMask>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *i;
  int v5;

  if (a2 - a1 == a4 - a3)
  {
    if (a1 == a2)
      return 1;
    for (i = (_DWORD *)(a3 + 32); ; i += 10)
    {
      v5 = *(_DWORD *)(a1 + 8);
      if (v5 != *(i - 6))
        break;
      if (v5)
      {
        if (v5 == 30)
        {
          if (*(_QWORD *)(a1 + 12) != *(_QWORD *)(i - 5) || *(_QWORD *)(a1 + 20) != *(_QWORD *)(i - 3))
            return 0;
        }
        else if (v5 != 2 || *(_DWORD *)(a1 + 12) != *(i - 5))
        {
          return 0;
        }
      }
      if (*(_DWORD *)(a1 + 32) != *i)
        return 0;
      a1 += 40;
      if (a1 == a2)
        return 1;
    }
  }
  return 0;
}

void webrtc::PeerConnection::Create(uint64_t *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, __int128 *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BOOL4 v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  char v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  BOOL v57;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  __int128 v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t *v81;
  rtc *RandomId;
  int v83;
  unsigned int v84;
  int v85;
  size_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  int v105;
  void *v106;
  char v107;
  char v108;
  void **v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *sig;
  unint64_t v114;
  BOOL v115;
  int v116;
  int v117;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  uint64_t v123;
  webrtc::ConnectionContext *v124;
  uint64_t v125;
  webrtc::SdpOfferAnswerHandler *v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  uint64_t *v144;
  unsigned int v145;
  uint64_t (**v146)();
  _QWORD *v147;
  uint64_t (***v148)();
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int *v154;
  unsigned int v155;
  uint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  uint64_t *v159;
  unsigned int v160;
  uint64_t (**v161)();
  _QWORD *v162;
  uint64_t (***v163)();
  int v164;
  pthread_mutexattr_t *v165;
  uint64_t v166;
  void **v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  int v190;
  __int16 v191;
  int v192;
  void *__p[2];
  uint64_t v194;
  _DWORD v195[3];
  char v196;
  void *v197[2];
  uint64_t v198;
  __int128 *v199;
  __int128 v200;
  void (***v201[2])(_QWORD);
  uint64_t (***v202)();
  _QWORD v203[2];
  char __str[4];
  char v205;
  void *v206;
  _BYTE v207[15];
  char v208;
  int v209;
  __int16 v210;
  char v211;
  char v212;
  char v213;
  char v214;
  int v215;
  int v216;
  char v217;
  int v218;
  char v219;
  int v220;
  char v221;
  int v222;
  char v223;
  int v224;
  char v225;
  int v226;
  char v227;
  int v228;
  char v229;
  int v230;
  char v231;
  int v232;
  pthread_mutexattr_t v233;
  void **v234;
  pthread_mutexattr_t *v235;
  __int128 *v236;
  uint64_t v237;

  v237 = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(a5 + 232) && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  v21 = *(_DWORD *)(a5 + 112);
  v22 = *(_DWORD *)(a5 + 116) == 1;
  LOBYTE(v210) = 0;
  v212 = 0;
  v213 = 0;
  v214 = 0;
  v25 = *(_DWORD *)(a5 + 108);
  v23 = v25 == -1;
  v24 = v25 & 0xFFFFFF00;
  v25 = v25;
  if (v23)
    v25 = 0;
  v232 = 0;
  *(_DWORD *)__str = v25 | v24;
  v26 = !v23;
  v205 = v26;
  v207[4] = *(_BYTE *)(a5 + 120);
  v27 = v21 == -1;
  v28 = v21 & 0xFFFFFF00;
  v21 = v21;
  if (v27)
    v21 = 0;
  v29 = v21 | v28;
  v30 = !v27;
  LODWORD(v206) = v29;
  BYTE4(v206) = v30;
  *(_DWORD *)v207 = v22;
  LOBYTE(v209) = *(_BYTE *)(a5 + 156);
  BYTE1(v209) = *(_BYTE *)(a5 + 159);
  v31 = *(_DWORD *)(a5 + 160);
  v217 = *(_BYTE *)(a5 + 164);
  v215 = 2;
  v216 = v31;
  v218 = *(_DWORD *)(a5 + 168);
  v219 = *(_BYTE *)(a5 + 172);
  v220 = *(_DWORD *)(a5 + 176);
  v221 = *(_BYTE *)(a5 + 180);
  v222 = *(_DWORD *)(a5 + 184);
  v223 = *(_BYTE *)(a5 + 188);
  v225 = *(_BYTE *)(a5 + 196);
  v224 = *(_DWORD *)(a5 + 192);
  v227 = *(_BYTE *)(a5 + 204);
  v226 = *(_DWORD *)(a5 + 200);
  v229 = *(_BYTE *)(a5 + 212);
  v228 = *(_DWORD *)(a5 + 208);
  v231 = *(_BYTE *)(a5 + 228);
  v230 = *(_DWORD *)(a5 + 224);
  v207[12] = *(_BYTE *)(a5 + 288);
  *(_DWORD *)&v207[8] = *(_DWORD *)(a5 + 284);
  cricket::P2PTransportChannel::ValidateIceConfig(__str, (uint64_t)&v192);
  if (v192)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t", v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    *(_DWORD *)a7 = v192;
    *(_OWORD *)(a7 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(a7 + 24) = v194;
    __p[0] = 0;
    __p[1] = 0;
    v194 = 0;
    *(_DWORD *)(a7 + 32) = v195[0];
    *(_DWORD *)(a7 + 35) = *(_DWORD *)((char *)v195 + 3);
    goto LABEL_34;
  }
  if (!*((_QWORD *)a6 + 1))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    v47 = (char *)operator new(0x48uLL);
    if (v47 <= "Attempt to create a PeerConnection without a PortAllocatorFactory"
      && v47 + 65 > "Attempt to create a PeerConnection without a PortAllocatorFactory")
    {
      goto LABEL_169;
    }
    strcpy(v47, "Attempt to create a PeerConnection without a PortAllocatorFactory");
    *(_DWORD *)a7 = 3;
    *(_QWORD *)(a7 + 8) = v47;
    v48 = xmmword_208F0ABF0;
    goto LABEL_33;
  }
  if (!*(_QWORD *)a6)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v49, v50, v51, v52, v53, v54, v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    v56 = (char *)operator new(0x38uLL);
    if (v56 <= "Attempt to create a PeerConnection without an observer"
      && v56 + 54 > "Attempt to create a PeerConnection without an observer")
    {
      goto LABEL_169;
    }
    strcpy(v56, "Attempt to create a PeerConnection without an observer");
    *(_DWORD *)a7 = 3;
    *(_QWORD *)(a7 + 8) = v56;
    v48 = xmmword_208F0AC70;
LABEL_33:
    *(_OWORD *)(a7 + 16) = v48;
    *(_DWORD *)(a7 + 32) = 0;
    *(_BYTE *)(a7 + 36) = 0;
    *(_BYTE *)(a7 + 38) = 0;
LABEL_34:
    *(_BYTE *)(a7 + 40) = 0;
    *(_BYTE *)(a7 + 48) = 0;
    goto LABEL_35;
  }
  v39 = *(_DWORD *)(a5 + 232) == 1;
  if (*(_BYTE *)a3)
  {
    v185 = 0;
    if (*((_QWORD *)a6 + 2))
      goto LABEL_47;
  }
  else
  {
    if (*((_QWORD *)a6 + 4))
      v57 = 0;
    else
      v57 = *(_QWORD *)(a5 + 40) == *(_QWORD *)(a5 + 48);
    v58 = !v57;
    v185 = v58;
    if (*((_QWORD *)a6 + 2))
      goto LABEL_47;
  }
  v59 = (_QWORD *)operator new();
  *v59 = &unk_24C0AFCD0;
  v60 = *((_QWORD *)a6 + 2);
  *((_QWORD *)a6 + 2) = v59;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
LABEL_47:
  v61 = operator new();
  v62 = v61;
  v63 = *a2;
  if (*a2)
  {
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v65 = *a4;
  *(_QWORD *)(v61 + 8) = &unk_24C0B8C10;
  v184 = v61 + 8;
  *a4 = 0;
  *(_QWORD *)v61 = &unk_24C0B8870;
  v66 = *a1;
  *(_QWORD *)(v61 + 16) = &unk_24C0B8D38;
  *(_QWORD *)(v61 + 24) = v66;
  if (v66)
  {
    v67 = (unsigned int *)(v66 + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  v69 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(v61 + 32) = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(v61 + 48) = v69;
  *(_QWORD *)(v61 + 64) = v63;
  if (v63)
  {
    do
      v70 = __ldxr(v63);
    while (__stxr(v70 + 1, v63));
  }
  *(_QWORD *)(v61 + 72) = *(_QWORD *)a3;
  v71 = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(v61 + 80) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(v61 + 84) = v71;
  *(_BYTE *)(v61 + 88) = *(_BYTE *)(a3 + 16);
  *(_QWORD *)(v61 + 96) = *(_QWORD *)a6;
  *(_BYTE *)(v61 + 104) = v39;
  *(_QWORD *)(v61 + 116) = 0;
  *(_QWORD *)(v61 + 108) = 0;
  webrtc::PeerConnectionInterface::RTCConfiguration::RTCConfiguration((webrtc::PeerConnectionInterface::RTCConfiguration *)(v61 + 128));
  v73 = *((_QWORD *)a6 + 1);
  v72 = *((_QWORD *)a6 + 2);
  *((_QWORD *)a6 + 1) = 0;
  *((_QWORD *)a6 + 2) = 0;
  *(_QWORD *)(v62 + 480) = v72;
  *(_QWORD *)(v62 + 488) = v73;
  v74 = *((_QWORD *)a6 + 3);
  *((_QWORD *)a6 + 3) = 0;
  v75 = *((_QWORD *)a6 + 5);
  *((_QWORD *)a6 + 5) = 0;
  *(_QWORD *)(v62 + 496) = v74;
  *(_QWORD *)(v62 + 504) = v75;
  *(_QWORD *)(v62 + 512) = v65;
  v76 = operator new();
  *(_DWORD *)v76 = 0;
  *(_BYTE *)(v76 + 4) = 1;
  *(_QWORD *)(v62 + 520) = v76;
  do
    v77 = __ldxr((unsigned int *)v76);
  while (__stxr(v77 + 1, (unsigned int *)v76));
  *(_QWORD *)(v62 + 528) = 0;
  v78 = *(_QWORD *)(v62 + 512) != 0;
  v79 = operator new();
  *(_DWORD *)v79 = 0;
  *(_BYTE *)(v79 + 4) = v78;
  *(_QWORD *)(v62 + 536) = v79;
  do
    v80 = __ldxr((unsigned int *)v79);
  while (__stxr(v80 + 1, (unsigned int *)v79));
  *(_QWORD *)(v62 + 544) = *(_QWORD *)(v62 + 512);
  v81 = (uint64_t *)(v62 + 552);
  *(_OWORD *)(v62 + 552) = 0u;
  RandomId = (rtc *)rtc::CreateRandomId((rtc *)v79);
  v83 = (int)RandomId;
  v84 = rtc::CreateRandomId(RandomId);
  v85 = snprintf(__str, 0x20uLL, "%llu", v84 | ((unint64_t)(v83 & 0x7FFFFFFF) << 32));
  if (v85 < 0)
LABEL_170:
    abort();
  v86 = v85;
  if (v85 > 0x16)
  {
    v88 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v88 = v85 | 7;
    v89 = v88 + 1;
    v87 = (char *)operator new(v88 + 1);
    *(_QWORD *)(v62 + 568) = v87;
    *(_QWORD *)(v62 + 584) = v89 | 0x8000000000000000;
    *(_QWORD *)(v62 + 576) = v86;
  }
  else
  {
    v87 = (char *)(v62 + 568);
    *(_BYTE *)(v62 + 591) = v86;
  }
  v90 = &v87[v86];
  if (v87 <= __str && &v87[v86] > __str)
  {
LABEL_169:
    __break(1u);
    goto LABEL_170;
  }
  if ((_DWORD)v86)
    memcpy(v87, __str, v86);
  *v90 = 0;
  *(_BYTE *)(v62 + 632) = 0;
  *(_BYTE *)(v62 + 640) = 0;
  *(_BYTE *)(v62 + 664) = 0;
  *(_OWORD *)(v62 + 592) = 0u;
  *(_BYTE *)(v62 + 608) = 0;
  *(_OWORD *)(v62 + 672) = 0u;
  *(_OWORD *)(v62 + 688) = 0u;
  *(_BYTE *)(v62 + 704) = v185;
  *(_DWORD *)(v62 + 708) = 0;
  *(_BYTE *)(v62 + 712) = 0;
  *(_QWORD *)(v62 + 720) = off_24C0B2578;
  *(_QWORD *)(v62 + 728) = &unk_24C0B2600;
  *(_OWORD *)(v62 + 736) = 0u;
  *(_OWORD *)(v62 + 752) = 0u;
  *(_OWORD *)(v62 + 768) = 0u;
  *(_OWORD *)(v62 + 777) = 0u;
  *(_QWORD *)(v62 + 800) = v62;
  *(_QWORD *)(v62 + 808) = 0;
  *(_QWORD *)(v62 + 816) = v62 + 720;
  v92 = operator new();
  *(_DWORD *)v92 = 0;
  *(_BYTE *)(v92 + 4) = 1;
  *(_QWORD *)(v62 + 824) = v92;
  do
    v93 = __ldxr((unsigned int *)v92);
  while (__stxr(v93 + 1, (unsigned int *)v92));
  v94 = *(_QWORD *)(*(_QWORD *)(v62 + 64) + 48);
  v95 = operator new();
  *(_DWORD *)v95 = 0;
  *(_BYTE *)(v95 + 4) = 1;
  *(_QWORD *)(v62 + 832) = v95;
  do
    v96 = __ldxr((unsigned int *)v95);
  while (__stxr(v96 + 1, (unsigned int *)v95));
  *(_QWORD *)(v62 + 840) = v94;
  *(_QWORD *)(v62 + 848) = 0;
  *(_BYTE *)(v62 + 856) = 0;
  *(_QWORD *)(v62 + 864) = 0;
  *(_QWORD *)(v62 + 872) = v62;
  if (v63)
  {
    do
    {
      v97 = __ldaxr(v63);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v63));
    if (!v98)
    {
      webrtc::ConnectionContext::~ConnectionContext((webrtc::ConnectionContext *)v63);
      MEMORY[0x20BD0ADEC]();
    }
  }
  *(_QWORD *)v62 = off_24C0B8DA8;
  *(_QWORD *)(v62 + 8) = &unk_24C0B9150;
  *(_QWORD *)(v62 + 16) = &unk_24C0B9278;
  v99 = (unsigned int *)(v62 + 880);
  *(_DWORD *)(v62 + 880) = 0;
  do
    v100 = __ldxr(v99);
  while (__stxr(v100 + 1, v99));
  v101 = *a6;
  v102 = a6[1];
  *(__int128 *)((char *)a6 + 8) = 0u;
  v186 = v101;
  v187 = v102;
  v103 = a6[2];
  v104 = a6[3];
  *(__int128 *)((char *)a6 + 24) = 0u;
  *(__int128 *)((char *)a6 + 40) = 0u;
  *((_QWORD *)a6 + 7) = 0;
  v188 = v103;
  v189 = v104;
  v200 = 0u;
  v198 = 0;
  v199 = &v200;
  *(_OWORD *)v197 = 0u;
  v105 = *(_DWORD *)__str;
  if (!*(_DWORD *)__str)
  {
    v110 = *(_QWORD *)(*(_QWORD *)(v62 + 64) + 24);
    v233.__sig = v62;
    *(_QWORD *)v233.__opaque = &v199;
    v234 = v197;
    v235 = (pthread_mutexattr_t *)a5;
    v236 = &v186;
    v201[0] = (void (***)(_QWORD))&v202;
    v201[1] = (void (***)(_QWORD))&v233;
    v202 = 0;
    (*(void (**)(uint64_t, void (****)(_QWORD), uint64_t (*)(_QWORD **), char *))(*(_QWORD *)v110 + 96))(v110, v201, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::JsepTransportController * rtc::Thread::BlockingCall<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_2,webrtc::JsepTransportController *,void>(webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_2 &&,webrtc::Location const&)::{lambda(void)#1}>, &v196);
    *(_QWORD *)(v62 + 600) = v202;
    webrtc::PeerConnectionInterface::RTCConfiguration::operator=(v62 + 128, a5);
    v111 = operator new();
    *(_QWORD *)v111 = &off_24C0B59C0;
    *(_QWORD *)(v111 + 8) = v111 + 8;
    *(_QWORD *)(v111 + 16) = v111 + 8;
    *(_QWORD *)(v111 + 24) = 0;
    *(_QWORD *)(v111 + 48) = 0;
    *(_QWORD *)(v111 + 40) = v111 + 48;
    *(_QWORD *)(v111 + 56) = 0;
    *(_QWORD *)(v111 + 64) = v62;
    *(_QWORD *)(v111 + 72) = 0;
    *(_QWORD *)(v111 + 80) = 0;
    v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v62 + 8) + 264))(v184);
    (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v112 + 16))(&v233, v112, "WebRTC-UseStandardBytesStats", 28);
    if (SHIBYTE(v234) < 0)
    {
      v114 = *(_QWORD *)v233.__opaque;
      if ((*(_QWORD *)v233.__opaque & 0x8000000000000000) != 0)
        goto LABEL_169;
      sig = (int *)v233.__sig;
      if (*(_QWORD *)v233.__opaque)
      {
        if (!v233.__sig)
          goto LABEL_169;
      }
    }
    else
    {
      sig = (int *)&v233;
      v114 = HIBYTE(v234);
    }
    if (v114 >= 7)
    {
      v116 = *sig;
      v117 = *(int *)((char *)sig + 3);
      v115 = v116 == *(_DWORD *)"Enabled" && v117 == *(_DWORD *)"bled";
    }
    else
    {
      v115 = 0;
    }
    if ((HIBYTE(v234) & 0x80) != 0)
      operator delete((void *)v233.__sig);
    *(_BYTE *)(v111 + 88) = v115;
    *(_QWORD *)(v111 + 104) = 0;
    *(_QWORD *)(v111 + 112) = 0;
    *(_QWORD *)(v111 + 96) = 0;
    v119 = *v81;
    *v81 = v111;
    if (v119)
      (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
    v120 = operator new();
    *(_QWORD *)v120 = &unk_24C0BC178;
    *(_QWORD *)(v120 + 8) = v62;
    *(_QWORD *)(v120 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 512))(v62);
    *(_QWORD *)(v120 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 528))(v62);
    *(_QWORD *)(v120 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 520))(v62);
    *(_DWORD *)(v120 + 40) = 0;
    *(_OWORD *)(v120 + 48) = 0u;
    *(_OWORD *)(v120 + 64) = 0u;
    *(_OWORD *)(v120 + 80) = 0u;
    rtc::Event::Event((rtc::Event *)(v120 + 96), 1, 1);
    *(_QWORD *)(v120 + 216) = 0;
    *(_QWORD *)(v120 + 224) = 0;
    *(_QWORD *)(v120 + 232) = 0;
    pthread_mutexattr_init(&v233);
    pthread_mutexattr_setpolicy_np(&v233, 3);
    pthread_mutex_init((pthread_mutex_t *)(v120 + 240), &v233);
    pthread_mutexattr_destroy(&v233);
    *(_QWORD *)(v120 + 312) = 0;
    *(_QWORD *)(v120 + 320) = 0;
    *(_QWORD *)(v120 + 304) = v120 + 312;
    *(_QWORD *)(v120 + 328) = 0;
    *(_DWORD *)(v120 + 336) = 0;
    *(_QWORD *)(v120 + 344) = 0;
    *(_QWORD *)(v120 + 352) = -1;
    *(_BYTE *)(v120 + 360) = 0;
    *(_BYTE *)(v120 + 400) = 0;
    *(_QWORD *)(v120 + 408) = 0;
    *(_QWORD *)(v120 + 416) = 50000;
    *(_OWORD *)(v120 + 424) = 0u;
    *(_OWORD *)(v120 + 440) = 0u;
    *(_QWORD *)(v120 + 456) = 0;
    *(_QWORD *)v120 = &unk_24C0BC1B8;
    v121 = (unsigned int *)(v120 + 464);
    *(_DWORD *)(v120 + 464) = 0;
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
    v123 = *(_QWORD *)(v62 + 560);
    *(_QWORD *)(v62 + 560) = v120;
    if (v123)
      (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
    v124 = *(webrtc::ConnectionContext **)(v62 + 64);
    v125 = operator new();
    v126 = (webrtc::SdpOfferAnswerHandler *)webrtc::SdpOfferAnswerHandler::SdpOfferAnswerHandler(v125, v184, (uint64_t)v124);
    webrtc::SdpOfferAnswerHandler::Initialize(v126, (const webrtc::PeerConnectionInterface::RTCConfiguration *)a5, (webrtc::PeerConnectionDependencies *)&v186, v124);
    v127 = *(_QWORD *)(v62 + 696);
    *(_QWORD *)(v62 + 696) = v125;
    if (v127)
      (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
    v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 832))(v62);
    v129 = *(_QWORD *)(v62 + 64);
    v130 = *(_QWORD *)(v62 + 552);
    v131 = operator new();
    v132 = *(_QWORD *)(v62 + 96);
    *(_QWORD *)v131 = &off_24C0BE120;
    *(_QWORD *)(v131 + 8) = 0;
    *(_QWORD *)(v131 + 16) = 0;
    *(_QWORD *)(v131 + 24) = 0;
    *(_QWORD *)(v131 + 40) = 0;
    *(_QWORD *)(v131 + 32) = v131 + 40;
    *(_QWORD *)(v131 + 72) = 0;
    *(_QWORD *)(v131 + 64) = 0;
    *(_QWORD *)(v131 + 48) = 0;
    *(_QWORD *)(v131 + 56) = v131 + 64;
    *(_OWORD *)(v131 + 80) = 0u;
    *(_OWORD *)(v131 + 96) = 0u;
    *(_OWORD *)(v131 + 112) = 0u;
    *(_OWORD *)(v131 + 128) = 0u;
    *(_OWORD *)(v131 + 144) = 0u;
    *(_OWORD *)(v131 + 160) = 0u;
    *(_BYTE *)(v131 + 176) = 0;
    *(_BYTE *)(v131 + 177) = v128;
    *(_QWORD *)(v131 + 184) = v129;
    *(_QWORD *)(v131 + 192) = v62 + 708;
    *(_QWORD *)(v131 + 200) = v132;
    *(_QWORD *)(v131 + 208) = v130;
    *(_QWORD *)(v131 + 216) = &off_24C0B8D60;
    *(_QWORD *)(v131 + 224) = v62;
    *(_QWORD *)(v131 + 240) = v131 + 216;
    *(_QWORD *)(v131 + 248) = 0;
    *(_QWORD *)(v131 + 256) = v131;
    v133 = *(_QWORD *)(v62 + 848);
    *(_QWORD *)(v62 + 848) = v131;
    if (v133)
      (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 832))(v62) & 1) != 0)
      goto LABEL_134;
    v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 744))(v62);
    v135 = *(_QWORD *)(v62 + 64);
    v136 = *(_QWORD *)(v135 + 48);
    v137 = operator new();
    v138 = webrtc::RtpTransceiver::RtpTransceiver(v137, 0, v135);
    *(_QWORD *)v138 = &unk_24C0B9788;
    v139 = (unsigned int *)(v138 + 280);
    *(_DWORD *)(v138 + 280) = 0;
    do
      v140 = __ldxr(v139);
    while (__stxr(v140 + 1, v139));
    v141 = operator new();
    *(_QWORD *)(v141 + 16) = v137;
    *(_QWORD *)v141 = off_24C0B95F0;
    *(_QWORD *)(v141 + 8) = v136;
    *(_DWORD *)(v141 + 24) = 0;
    v142 = (unsigned int *)(v141 + 24);
    v201[0] = (void (***)(_QWORD))v141;
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
    v144 = *(uint64_t **)(v134 + 16);
    if ((unint64_t)v144 >= *(_QWORD *)(v134 + 24))
    {
      v147 = std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>(v134 + 8, v201);
      v148 = (uint64_t (***)())v201[0];
      *(_QWORD *)(v134 + 16) = v147;
      if (!v148)
        goto LABEL_122;
      v146 = *v148;
    }
    else
    {
      if (!v144)
        goto LABEL_169;
      *v144 = v141;
      do
        v145 = __ldxr(v142);
      while (__stxr(v145 + 1, v142));
      *(_QWORD *)(v134 + 16) = v144 + 1;
      v146 = off_24C0B95F0;
    }
    v146[1]();
LABEL_122:
    v149 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 744))(v62);
    v150 = *(_QWORD *)(v62 + 64);
    v151 = *(_QWORD *)(v150 + 48);
    v152 = operator new();
    v153 = webrtc::RtpTransceiver::RtpTransceiver(v152, 1, v150);
    *(_QWORD *)v153 = &unk_24C0B9788;
    v154 = (unsigned int *)(v153 + 280);
    *(_DWORD *)(v153 + 280) = 0;
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
    v156 = operator new();
    *(_QWORD *)(v156 + 8) = v151;
    *(_QWORD *)(v156 + 16) = v152;
    *(_QWORD *)v156 = off_24C0B95F0;
    *(_DWORD *)(v156 + 24) = 0;
    v157 = (unsigned int *)(v156 + 24);
    v202 = (uint64_t (***)())v156;
    do
      v158 = __ldxr(v157);
    while (__stxr(v158 + 1, v157));
    v159 = *(uint64_t **)(v149 + 16);
    if ((unint64_t)v159 >= *(_QWORD *)(v149 + 24))
    {
      v162 = std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>(v149 + 8, (void (****)(_QWORD))&v202);
      v163 = v202;
      *(_QWORD *)(v149 + 16) = v162;
      if (!v163)
        goto LABEL_134;
      v161 = *v163;
    }
    else
    {
      if (!v159)
        goto LABEL_169;
      *v159 = v156;
      do
        v160 = __ldxr(v157);
      while (__stxr(v160 + 1, v157));
      *(_QWORD *)(v149 + 16) = v159 + 1;
      v161 = off_24C0B95F0;
    }
    v161[1]();
LABEL_134:
    if (*(_BYTE *)(a5 + 280))
      v164 = *(_DWORD *)(a5 + 276);
    else
      v164 = 60000;
    v233.__sig = (uint64_t)&off_24C0B92A0;
    *(_QWORD *)v233.__opaque = v62;
    v235 = &v233;
    webrtc::PeerConnectionMessageHandler::RequestUsagePatternReport(v62 + 832, &v233, v164);
    v165 = v235;
    if (v235 == &v233)
    {
      v166 = 4;
      v165 = &v233;
    }
    else
    {
      if (!v235)
        goto LABEL_142;
      v166 = 5;
    }
    (*(void (**)(void))(v165->__sig + 8 * v166))();
LABEL_142:
    *(_QWORD *)((char *)v203 + 7) = 0;
    v203[0] = 0;
    v190 = 0;
    LOBYTE(v191) = 0;
    if (v208 < 0)
      operator delete(v206);
    v107 = 0;
    v106 = 0;
    v108 = 0;
    v109 = (void **)v197[0];
    if (!v197[0])
      goto LABEL_149;
    goto LABEL_145;
  }
  v106 = v206;
  v203[0] = *(_QWORD *)v207;
  *(_QWORD *)((char *)v203 + 7) = *(_QWORD *)&v207[7];
  v107 = v208;
  v190 = v209;
  v191 = v210;
  v108 = v211;
  v109 = (void **)v197[0];
  if (v197[0])
  {
LABEL_145:
    v167 = (void **)v197[1];
    v168 = v109;
    if (v197[1] != v109)
    {
      do
        cricket::RelayServerConfig::~RelayServerConfig(v167 - 20);
      while (v167 != v109);
      v168 = (void **)v197[0];
    }
    v197[1] = v109;
    operator delete(v168);
  }
LABEL_149:
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)&v199, (char *)v200);
  v169 = *((_QWORD *)&v189 + 1);
  *((_QWORD *)&v189 + 1) = 0;
  if (v169)
    (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
  v170 = v189;
  *(_QWORD *)&v189 = 0;
  if (v170)
    (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
  v171 = *((_QWORD *)&v188 + 1);
  *((_QWORD *)&v188 + 1) = 0;
  if (v171)
    (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
  v172 = v188;
  *(_QWORD *)&v188 = 0;
  if (v172)
    (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
  v173 = *((_QWORD *)&v187 + 1);
  *((_QWORD *)&v187 + 1) = 0;
  if (v173)
    (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
  v174 = v187;
  *(_QWORD *)&v187 = 0;
  if (v174)
    (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
  v175 = *((_QWORD *)&v186 + 1);
  *((_QWORD *)&v186 + 1) = 0;
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  if (v105)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v176, v177, v178, v179, v180, v181, v182, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    *(_DWORD *)a7 = v105;
    v183 = v203[0];
    *(_QWORD *)(a7 + 8) = v106;
    *(_QWORD *)(a7 + 16) = v183;
    *(_QWORD *)(a7 + 23) = *(_QWORD *)((char *)v203 + 7);
    *(_BYTE *)(a7 + 31) = v107;
    *(_DWORD *)(a7 + 32) = v190;
    *(_WORD *)(a7 + 36) = v191;
    *(_BYTE *)(a7 + 38) = v108;
    *(_BYTE *)(a7 + 40) = 0;
    *(_BYTE *)(a7 + 48) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  }
  else
  {
    *(_DWORD *)a7 = 0;
    *(_BYTE *)(a7 + 38) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    *(_QWORD *)(a7 + 24) = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 29) = 0;
    *(_QWORD *)(a7 + 40) = v62;
    *(_BYTE *)(a7 + 48) = 1;
    if (v107 < 0)
      operator delete(v106);
  }
LABEL_35:
  if (SHIBYTE(v194) < 0)
    operator delete(__p[0]);
}

uint64_t webrtc::PeerConnection::worker_thread(webrtc::PeerConnection *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 40);
}

uint64_t webrtc::PeerConnection::signaling_thread(webrtc::PeerConnection *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 48);
}

void webrtc::PeerConnection::~PeerConnection(webrtc::PeerConnection *this)
{
  uint64_t v2;
  _BYTE *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t *v16;
  uint64_t v17;
  void (***v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  webrtc::RTCStatsCollector *v25;
  uint64_t v26;
  webrtc::SdpOfferAnswerHandler *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  webrtc::WebRtcSessionDescriptionFactory *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  _BYTE *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  char v78;
  void *__p[2];
  char v80;

  *(_QWORD *)this = &unk_24C0B8870;
  *((_QWORD *)this + 1) = &unk_24C0B8C10;
  *((_QWORD *)this + 2) = &unk_24C0B8D38;
  v2 = *((_QWORD *)this + 87);
  if (v2)
  {
    v3 = *(_BYTE **)(v2 + 384);
    if (v3)
    {
      *v3 = 0;
      v4 = (unsigned int *)(v3 + 4);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        MEMORY[0x20BD0ADEC]();
      *(_QWORD *)(v2 + 384) = 0;
    }
  }
  v7 = operator new();
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 0;
  do
    v8 = __ldxr((unsigned int *)v7);
  while (__stxr(v8 + 1, (unsigned int *)v7));
  v9 = *((_QWORD *)this + 103);
  *(_BYTE *)(v9 + 4) = 0;
  *((_QWORD *)this + 103) = v7;
  do
  {
    v10 = __ldaxr((unsigned int *)v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, (unsigned int *)v9));
  if (!v11)
    MEMORY[0x20BD0ADEC](v9, 0x1000C4090D0E795);
  if (*((_BYTE *)this + 792))
    *((_BYTE *)this + 792) = 1;
  if ((*(uint64_t (**)(webrtc::PeerConnection *))(*(_QWORD *)this + 744))(this))
  {
    v12 = (*(uint64_t (**)(webrtc::PeerConnection *))(*(_QWORD *)this + 744))(this);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(_QWORD *)(v12 + 16);
    v15 = v14 - v13;
    if (v14 != v13)
    {
      if ((v15 & 0x8000000000000000) != 0)
        abort();
      v16 = (uint64_t *)operator new(v15);
      v17 = 0;
      do
      {
        v18 = *(void (****)(_QWORD))(v13 + v17);
        v16[(unint64_t)v17 / 8] = (uint64_t)v18;
        if (v18)
          (**v18)(v18);
        v17 += 8;
      }
      while (v13 + v17 != v14);
      if (v17)
      {
        v19 = v17 >> 3;
        v20 = v19 * 8;
        v21 = v16;
        do
        {
          v22 = *v21++;
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 128))(v22);
          v20 -= 8;
        }
        while (v20);
        do
        {
          v23 = v16[v19 - 1];
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          --v19;
        }
        while (v19 * 8);
      }
      operator delete(v16);
    }
  }
  v24 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = (webrtc::RTCStatsCollector *)*((_QWORD *)this + 70);
  if (v25)
  {
    webrtc::RTCStatsCollector::MergeNetworkReport_s(v25);
    v26 = *((_QWORD *)this + 70);
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    *((_QWORD *)this + 70) = 0;
  }
  v27 = (webrtc::SdpOfferAnswerHandler *)*((_QWORD *)this + 87);
  if (v27)
  {
    webrtc::SdpOfferAnswerHandler::DestroyMediaChannels(v27);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      (*(void (**)(void **__return_ptr, webrtc::PeerConnection *))(*(_QWORD *)this + 656))(__p, this);
      rtc::webrtc_logging_impl::Log("\r\t\n\t", v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      if (v80 < 0)
        operator delete(__p[0]);
    }
    v35 = *((_QWORD *)this + 87);
    v36 = *(webrtc::WebRtcSessionDescriptionFactory **)(v35 + 24);
    *(_QWORD *)(v35 + 24) = 0;
    if (v36)
    {
      webrtc::WebRtcSessionDescriptionFactory::~WebRtcSessionDescriptionFactory(v36);
      MEMORY[0x20BD0ADEC]();
    }
  }
  *((_QWORD *)this + 75) = 0;
  v37 = *(_QWORD *)(*((_QWORD *)this + 8) + 24);
  __p[0] = this;
  (*(void (**)(uint64_t, void **, uint64_t (*)(_QWORD **), char *))(*(_QWORD *)v37 + 96))(v37, __p, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::~PeerConnection()::$_1>, &v78);
  if (*((_BYTE *)this + 632))
  {
    if (*((char *)this + 631) < 0)
      operator delete(*((void **)this + 76));
    *((_BYTE *)this + 632) = 0;
  }
  if (*((char *)this + 695) < 0)
    operator delete(*((void **)this + 84));
  *((_BYTE *)this + 672) = 0;
  *((_BYTE *)this + 695) = 0;
  (*(void (**)(webrtc::PeerConnection *))(*(_QWORD *)this + 184))(this);
  v38 = *(_QWORD *)(*((_QWORD *)this + 8) + 40);
  __p[0] = this;
  (*(void (**)(uint64_t, void **, uint64_t (*)(uint64_t *), char *))(*(_QWORD *)v38 + 96))(v38, __p, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::~PeerConnection()::$_2>, &v78);
  v39 = operator new();
  v40 = v39;
  *(_DWORD *)v39 = 0;
  *(_BYTE *)(v39 + 4) = 0;
  do
    v41 = __ldxr((unsigned int *)v39);
  while (__stxr(v41 + 1, (unsigned int *)v39));
  v42 = *((_QWORD *)this + 103);
  *(_BYTE *)(v42 + 4) = 0;
  *((_QWORD *)this + 103) = v40;
  do
  {
    v43 = __ldaxr((unsigned int *)v42);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, (unsigned int *)v42));
  if (!v44)
    MEMORY[0x20BD0ADEC]();
  if (*((_BYTE *)this + 792))
    *((_BYTE *)this + 792) = 1;
  *((_QWORD *)this + 109) = 0;
  v45 = (_BYTE *)*((_QWORD *)this + 108);
  if (v45)
  {
    *v45 = 0;
    v46 = (unsigned int *)(v45 + 4);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 108) = 0;
  }
  v49 = *((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *((_QWORD *)this + 104);
  *(_BYTE *)(v50 + 4) = 0;
  do
  {
    v51 = __ldaxr((unsigned int *)v50);
    v52 = v51 - 1;
  }
  while (__stlxr(v52, (unsigned int *)v50));
  if (!v52)
    MEMORY[0x20BD0ADEC]();
  webrtc::DataChannelController::~DataChannelController((webrtc::PeerConnection *)((char *)this + 720));
  v53 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  if (*((char *)this + 695) < 0)
    operator delete(*((void **)this + 84));
  if (*((_BYTE *)this + 664) && *((char *)this + 663) < 0)
    operator delete(*((void **)this + 80));
  if (*((_BYTE *)this + 632) && *((char *)this + 631) < 0)
    operator delete(*((void **)this + 76));
  v54 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  if (*((char *)this + 591) < 0)
    operator delete(*((void **)this + 71));
  v55 = *((_QWORD *)this + 70);
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = (unsigned int *)*((_QWORD *)this + 67);
  if (v57)
  {
    do
    {
      v58 = __ldaxr(v57);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v57));
    if (!v59)
      MEMORY[0x20BD0ADEC]();
  }
  v60 = (unsigned int *)*((_QWORD *)this + 66);
  if (v60)
  {
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
      MEMORY[0x20BD0ADEC]();
  }
  v63 = *((_QWORD *)this + 65);
  *(_BYTE *)(v63 + 4) = 0;
  do
  {
    v64 = __ldaxr((unsigned int *)v63);
    v65 = v64 - 1;
  }
  while (__stlxr(v65, (unsigned int *)v63));
  if (!v65)
    MEMORY[0x20BD0ADEC]();
  v66 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 216))(v66);
  v67 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  webrtc::PeerConnectionInterface::RTCConfiguration::~RTCConfiguration((webrtc::PeerConnection *)((char *)this + 128));
  v71 = (unsigned int *)*((_QWORD *)this + 8);
  if (v71)
  {
    do
    {
      v72 = __ldaxr(v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v71));
    if (!v73)
    {
      webrtc::ConnectionContext::~ConnectionContext((webrtc::ConnectionContext *)v71);
      MEMORY[0x20BD0ADEC]();
    }
  }
  v74 = (unsigned int *)*((_QWORD *)this + 3);
  if (v74)
  {
    v75 = v74 + 2;
    do
    {
      v76 = __ldaxr(v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, v75));
    if (!v77)
      (*(void (**)(unsigned int *))(*(_QWORD *)v74 + 8))(v74);
  }
}

uint64_t webrtc::PeerConnection::network_thread(webrtc::PeerConnection *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 24);
}

void webrtc::`anonymous namespace'::ParseAndValidateIceServersFromConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  const std::string::value_type *v37;
  size_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  int v42;
  void *__p[2];
  uint64_t v44;
  _DWORD v45[2];

  webrtc::ParseIceServersOrError((uint64_t *)a2, (uint64_t **)a3, (uint64_t)a4, (uint64_t)&v42);
  if (v42)
  {
    *(_DWORD *)a1 = v42;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 24) = v44;
    *(_DWORD *)(a1 + 32) = v45[0];
    *(_DWORD *)(a1 + 35) = *(_DWORD *)((char *)v45 + 3);
    return;
  }
  v10 = a4[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v10 - *a4) >> 5) < 0x21)
    goto LABEL_35;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  v19 = *a4;
  v18 = a4[1];
  v20 = v18 - *a4;
  v21 = 0xCCCCCCCCCCCCCCCDLL * (v20 >> 5);
  if (v21 > 0x1F)
  {
    if (v20 == 5120)
    {
      v10 = a4[1];
    }
    else
    {
      v10 = v19 + 5120;
      while (v18 != v10)
      {
        v18 -= 160;
        cricket::RelayServerConfig::~RelayServerConfig((void **)v18);
      }
      a4[1] = v10;
    }
    goto LABEL_35;
  }
  v22 = a4[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v22 - v18) >> 5) >= 32 - v21)
  {
    v34 = v18 + 160 * (32 - v21);
    while (v18)
    {
      *(_OWORD *)(v18 + 60) = 0uLL;
      *(_OWORD *)(v18 + 32) = 0uLL;
      *(_OWORD *)(v18 + 48) = 0uLL;
      *(_OWORD *)v18 = 0uLL;
      *(_OWORD *)(v18 + 16) = 0uLL;
      *(_OWORD *)(v18 + 80) = 0uLL;
      *(_OWORD *)(v18 + 96) = 0uLL;
      *(_OWORD *)(v18 + 112) = 0uLL;
      *(_OWORD *)(v18 + 128) = 0uLL;
      *(_OWORD *)(v18 + 144) = 0uLL;
      v18 += 160;
      if (v18 == v34)
      {
        a4[1] = v34;
        v10 = v34;
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_58:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v23 = 0x999999999999999ALL * ((v22 - v19) >> 5);
  if (v23 <= 0x20)
    v23 = 32;
  if (0xCCCCCCCCCCCCCCCDLL * ((v22 - v19) >> 5) >= 0xCCCCCCCCCCCCCCLL)
    v24 = 0x199999999999999;
  else
    v24 = v23;
  if (v24 > 0x199999999999999)
    goto LABEL_58;
  v25 = 160 * v24;
  v26 = (char *)operator new(160 * v24);
  v27 = &v26[v25];
  v28 = &v26[160 * v21];
  v29 = v21 - 32;
  do
  {
    *(_OWORD *)(v28 + 60) = 0uLL;
    *((_OWORD *)v28 + 2) = 0uLL;
    *((_OWORD *)v28 + 3) = 0uLL;
    *(_OWORD *)v28 = 0uLL;
    *((_OWORD *)v28 + 1) = 0uLL;
    *((_OWORD *)v28 + 5) = 0uLL;
    *((_OWORD *)v28 + 6) = 0uLL;
    *((_OWORD *)v28 + 7) = 0uLL;
    *((_OWORD *)v28 + 8) = 0uLL;
    *((_OWORD *)v28 + 9) = 0uLL;
    v28 += 160;
  }
  while (!__CFADD__(v29++, 1));
  v31 = (uint64_t)&v26[160 * v21];
  v32 = v26 + 5120;
  if (v18 == v19)
  {
    *a4 = v31;
    a4[1] = (uint64_t)v32;
    a4[2] = (uint64_t)v27;
  }
  else
  {
    do
    {
      v31 -= 160;
      v18 -= 160;
      cricket::RelayServerConfig::RelayServerConfig(v31, (char **)v18);
    }
    while (v18 != v19);
    v18 = *a4;
    v33 = a4[1];
    *a4 = v31;
    a4[1] = (uint64_t)v32;
    a4[2] = (uint64_t)v27;
    while (v33 != v18)
      cricket::RelayServerConfig::~RelayServerConfig((void **)(v33 - 160));
  }
  if (v18)
    operator delete((void *)v18);
  v10 = a4[1];
LABEL_35:
  if (*a4 != v10)
  {
    v35 = (__int128 *)(a2 + 248);
    v36 = *a4 + 136;
    do
    {
      if ((__int128 *)v36 != v35)
      {
        v40 = *(_BYTE *)(a2 + 271);
        if (*(char *)(v36 + 23) < 0)
        {
          if (v40 >= 0)
            v37 = (const std::string::value_type *)(a2 + 248);
          else
            v37 = *(const std::string::value_type **)(a2 + 248);
          if (v40 >= 0)
            v38 = *(unsigned __int8 *)(a2 + 271);
          else
            v38 = *(_QWORD *)(a2 + 256);
          std::string::__assign_no_alias<false>((std::string *)v36, v37, v38);
        }
        else if ((*(_BYTE *)(a2 + 271) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>((_QWORD *)v36, *(char **)(a2 + 248), *(_QWORD *)(a2 + 256));
        }
        else
        {
          v41 = *v35;
          *(_QWORD *)(v36 + 16) = *(_QWORD *)(a2 + 264);
          *(_OWORD *)v36 = v41;
        }
      }
      v39 = v36 + 24;
      v36 += 160;
    }
    while (v39 != v10);
  }
  if (*(_QWORD *)(a3 + 16))
    *a5 |= 2u;
  if (*a4 != a4[1])
    *a5 |= 1u;
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 38) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 29) = 0;
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
}

uint64_t webrtc::PeerConnectionInterface::RTCConfiguration::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  std::string *v14;
  char v15;
  __int128 v16;
  const std::string::value_type *v17;
  size_t v18;
  __int128 v19;
  __int128 v20;

  if (a1 != a2)
  {
    std::vector<webrtc::PeerConnectionInterface::IceServer>::__assign_with_size[abi:sn180100]<webrtc::PeerConnectionInterface::IceServer*,webrtc::PeerConnectionInterface::IceServer*>(a1, *(std::string **)a2, *(std::string **)(a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
    v4 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    std::vector<webrtc::scoped_refptr<rtc::RTCCertificate>>::__assign_with_size[abi:sn180100]<webrtc::scoped_refptr<rtc::RTCCertificate>*,webrtc::scoped_refptr<rtc::RTCCertificate>*>((unsigned int ***)(a1 + 40), *(unsigned int ***)(a2 + 40), *(unsigned int ***)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
  }
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  v12 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 221) = *(_OWORD *)(a2 + 221);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 176) = v10;
  if (*(unsigned __int8 *)(a1 + 242) == *(unsigned __int8 *)(a2 + 242))
  {
    if (*(_BYTE *)(a1 + 242))
    {
      v13 = *(_DWORD *)(a2 + 237);
      *(_BYTE *)(a1 + 241) = *(_BYTE *)(a2 + 241);
      *(_DWORD *)(a1 + 237) = v13;
      *(_BYTE *)(a1 + 243) = *(_BYTE *)(a2 + 243);
      if (a1 == a2)
        goto LABEL_24;
      goto LABEL_10;
    }
LABEL_9:
    *(_BYTE *)(a1 + 243) = *(_BYTE *)(a2 + 243);
    if (a1 == a2)
      goto LABEL_24;
    goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 242))
  {
    *(_BYTE *)(a1 + 242) = 0;
    goto LABEL_9;
  }
  *(_DWORD *)(a1 + 237) = 65537;
  *(_BYTE *)(a1 + 241) = 0;
  *(_DWORD *)(a1 + 237) = *(_DWORD *)(a2 + 237);
  *(_BYTE *)(a1 + 241) = *(_BYTE *)(a2 + 241);
  *(_BYTE *)(a1 + 242) = 1;
  *(_BYTE *)(a1 + 243) = *(_BYTE *)(a2 + 243);
  if (a1 == a2)
    goto LABEL_24;
LABEL_10:
  v14 = (std::string *)(a1 + 248);
  v15 = *(_BYTE *)(a2 + 271);
  if (*(char *)(a1 + 271) < 0)
  {
    if (v15 >= 0)
      v17 = (const std::string::value_type *)(a2 + 248);
    else
      v17 = *(const std::string::value_type **)(a2 + 248);
    if (v15 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 271);
    else
      v18 = *(_QWORD *)(a2 + 256);
    std::string::__assign_no_alias<false>(v14, v17, v18);
  }
  else if ((*(_BYTE *)(a2 + 271) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v14, *(char **)(a2 + 248), *(_QWORD *)(a2 + 256));
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v16;
  }
  v19 = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = v19;
  std::vector<rtc::NetworkMask>::__assign_with_size[abi:sn180100]<rtc::NetworkMask*,rtc::NetworkMask*>(a1 + 296, *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 3));
LABEL_24:
  v20 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 329) = *(_OWORD *)(a2 + 329);
  *(_OWORD *)(a1 + 320) = v20;
  return a1;
}

uint64_t (***webrtc::PeerConnection::local_streams@<X0>(webrtc::PeerConnection *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (***result)(_QWORD);
  std::string *v14;

  if ((*(unsigned int (**)(webrtc::PeerConnection *))(*(_QWORD *)this + 832))(this))
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc", 867, "!IsUnifiedPlan()", "\t", v4, v5, v6, v7, (uint64_t)"local_streams is not available with Unified Plan SdpSemantics. Please use GetSenders instead.");
    goto LABEL_7;
  }
  v8 = *((_QWORD *)this + 87);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v8 + 8) + 192))(*(_QWORD *)(v8 + 8)))
  {
LABEL_7:
    v14 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc", 2940, "!IsUnifiedPlan()", "\t", v9, v10, v11, v12, (uint64_t)"local_streams is not available with Unified Plan SdpSemantics. Please use GetSenders instead.");
    return (uint64_t (***)(_QWORD))webrtc::PeerConnection::remote_streams((webrtc::PeerConnection *)v14);
  }
  result = *(uint64_t (****)(_QWORD))(v8 + 72);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t (***webrtc::PeerConnection::remote_streams@<X0>(webrtc::PeerConnection *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (***result)(_QWORD);
  std::string *v14;

  if ((*(unsigned int (**)(webrtc::PeerConnection *))(*(_QWORD *)this + 832))(this))
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc", 875, "!IsUnifiedPlan()", "\t", v4, v5, v6, v7, (uint64_t)"remote_streams is not available with Unified Plan SdpSemantics. Please use GetReceivers instead.");
    goto LABEL_7;
  }
  v8 = *((_QWORD *)this + 87);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v8 + 8) + 192))(*(_QWORD *)(v8 + 8)))
  {
LABEL_7:
    v14 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/sdp_offer_answer.cc", 2949, "!IsUnifiedPlan()", "\t", v9, v10, v11, v12, (uint64_t)"remote_streams is not available with Unified Plan SdpSemantics. Please use GetReceivers instead.");
    return (uint64_t (***)(_QWORD))webrtc::PeerConnection::AddStream(v14);
  }
  result = *(uint64_t (****)(_QWORD))(v8 + 80);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t webrtc::PeerConnection::AddStream(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 832))(a1))
  {
    v16 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc", 883, "!IsUnifiedPlan()", "\t", v4, v5, v6, v7, (uint64_t)"AddStream is not available with Unified Plan SdpSemantics. Please use AddTrack instead.");
    return webrtc::PeerConnection::RemoveStream(v16);
  }
  else if (*(_QWORD *)(a1[8] + 96))
  {
    return webrtc::SdpOfferAnswerHandler::AddStream(a1[87], a2);
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    return 0;
  }
}

void webrtc::PeerConnection::RemoveStream(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 832))(a1))
  {
    v8 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc", 896, "!IsUnifiedPlan()", "\t", v4, v5, v6, v7, (uint64_t)"RemoveStream is not available with Unified Plan SdpSemantics. Please use RemoveTrack instead.");
    webrtc::PeerConnection::AddTrack(v8);
  }
  else
  {
    webrtc::SdpOfferAnswerHandler::RemoveStream(a1[87], a2);
  }
}

void webrtc::PeerConnection::AddTrack(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *a2 = 0;
  v5 = v4;
  webrtc::PeerConnection::AddTrack(a4, a1, &v5, a3, 0);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void webrtc::PeerConnection::AddTrack(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::string::size_type size;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  std::string *p_p;
  std::string::size_type v32;
  int data;
  int v34;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  std::string *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string *v56;
  std::string::size_type v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::string *v65;
  std::string::size_type v66;
  size_t v67;
  std::string *v68;
  std::string *v69;
  std::string *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::string *v76;
  _BYTE *v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type v80;
  std::string::size_type v81;
  std::string::size_type v82;
  std::string *v83;
  _BYTE *v84;
  std::string::size_type v85;
  size_t v86;
  std::string *v87;
  std::string *v88;
  std::string *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::string v93;
  std::string v94;
  std::string __p;
  std::string v96;
  unint64_t v97;
  _BYTE v98[7];

  if (!*(_QWORD *)(*(_QWORD *)(a2 + 64) + 96))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)"UNSUPPORTED_OPERATION";
      v96.__r_.__value_.__l.__size_ = 21;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    v19 = (char *)operator new(0x20uLL);
    if (v19 > "Not configured for media" || v19 + 24 <= "Not configured for media")
    {
      strcpy(v19, "Not configured for media");
      *(_DWORD *)a1 = 1;
      *(_QWORD *)(a1 + 8) = v19;
      v20 = xmmword_208F08630;
LABEL_47:
      *(_OWORD *)(a1 + 16) = v20;
      *(_DWORD *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 36) = 0;
      *(_BYTE *)(a1 + 38) = 0;
      goto LABEL_48;
    }
    goto LABEL_142;
  }
  if (!*a3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
      v96.__r_.__value_.__l.__size_ = 17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    LODWORD(v96.__r_.__value_.__l.__data_) = 3;
    HIBYTE(v97) = 14;
    if (&v96.__r_.__value_.__r.__words[1] > (std::string::size_type *)"Track is null."
      || (char *)&v96.__r_.__value_.__r.__words[2] + 6 <= "Track is null.")
    {
      strcpy(&v96.__r_.__value_.__s.__data_[8], "Track is null.");
      *(_DWORD *)v98 = 0;
      v98[4] = 0;
      v98[6] = 0;
      *(_DWORD *)a1 = 3;
      *(_QWORD *)(a1 + 24) = v97;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)&v96.__r_.__value_.__r.__words[1];
      *(_DWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 35) = *(_DWORD *)&v98[3];
LABEL_48:
      *(_BYTE *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 48) = 0;
      return;
    }
    goto LABEL_142;
  }
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 32))(&v96);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v96.__r_.__value_.__l.__size_;
    if ((v96.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_142;
    v11 = (std::string *)v96.__r_.__value_.__r.__words[0];
    if (v96.__r_.__value_.__l.__size_)
    {
      if (!v96.__r_.__value_.__r.__words[0])
        goto LABEL_142;
    }
  }
  else
  {
    size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
    v11 = &v96;
  }
  if (size != 5
    || ((v28 = (int)v11->__r_.__value_.__l.__data_,
         v29 = v11->__r_.__value_.__s.__data_[4],
         v28 == *(_DWORD *)"audio")
      ? (v30 = v29 == cricket::kMediaTypeAudio[4])
      : (v30 = 0),
        !v30))
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 32))(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v32 = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_142;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_)
      {
        if (!__p.__r_.__value_.__r.__words[0])
          goto LABEL_142;
      }
    }
    else
    {
      p_p = &__p;
      v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v32 == 5)
    {
      data = (int)p_p->__r_.__value_.__l.__data_;
      v34 = p_p->__r_.__value_.__s.__data_[4];
      v36 = data == *(_DWORD *)"video" && v34 == cricket::kMediaTypeVideo[4];
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_39:
        if ((*((_BYTE *)&v96.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_40;
        goto LABEL_60;
      }
    }
    else
    {
      v36 = 0;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_39;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_39;
  }
  v36 = 1;
  if ((*((_BYTE *)&v96.__r_.__value_.__s + 23) & 0x80) == 0)
  {
LABEL_40:
    if (v36)
      goto LABEL_41;
LABEL_61:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 32))(&__p);
      v56 = std::string::insert(&__p, 0, "Track has invalid kind: ");
      v57 = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v96.__r_.__value_.__r.__words[2] = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      v94.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
      v94.__r_.__value_.__l.__size_ = 17;
      rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 32))(&v94);
    v65 = std::string::insert(&v94, 0, "Track has invalid kind: ");
    v66 = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v67 = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_142;
      v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_)
      {
        if (!__p.__r_.__value_.__r.__words[0])
          goto LABEL_142;
      }
      LODWORD(v96.__r_.__value_.__l.__data_) = 3;
      if (__p.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_143;
      if (__p.__r_.__value_.__l.__size_ <= 0x16)
      {
LABEL_68:
        HIBYTE(v97) = v67;
        v69 = (std::string *)&v96.__r_.__value_.__r.__words[1];
        v70 = (std::string *)((char *)&v96.__r_.__value_.__r.__words[1] + v67);
        if (&v96.__r_.__value_.__r.__words[1] > (std::string::size_type *)v68)
          goto LABEL_79;
LABEL_78:
        if (v70 > v68)
          goto LABEL_142;
LABEL_79:
        if (v67)
          memmove(v69, v68, v67);
        v70->__r_.__value_.__s.__data_[0] = 0;
        *(_DWORD *)v98 = 0;
        v98[4] = 0;
        v98[6] = 0;
        *(_DWORD *)a1 = v96.__r_.__value_.__l.__data_;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v96.__r_.__value_.__r.__words[1];
        *(_QWORD *)(a1 + 24) = v97;
        *(_OWORD *)&v96.__r_.__value_.__r.__words[1] = 0uLL;
        v97 = 0;
        *(_DWORD *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 35) = *(_DWORD *)&v98[3];
        *(_BYTE *)(a1 + 40) = 0;
        *(_BYTE *)(a1 + 48) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return;
        }
        else if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          return;
        }
        operator delete(v94.__r_.__value_.__l.__data_);
        return;
      }
    }
    else
    {
      v67 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      LODWORD(v96.__r_.__value_.__l.__data_) = 3;
      v68 = &__p;
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) <= 0x16uLL)
        goto LABEL_68;
    }
    v71 = (v67 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v71 = v67 | 7;
    v72 = v71 + 1;
    v69 = (std::string *)operator new(v71 + 1);
    v96.__r_.__value_.__r.__words[2] = v67;
    v97 = v72 | 0x8000000000000000;
    v96.__r_.__value_.__l.__size_ = (std::string::size_type)v69;
    v70 = (std::string *)((char *)v69 + v67);
    if (v69 > v68)
      goto LABEL_79;
    goto LABEL_78;
  }
LABEL_60:
  operator delete(v96.__r_.__value_.__l.__data_);
  if (!v36)
    goto LABEL_61;
LABEL_41:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 688))(a2))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_STATE";
      v96.__r_.__value_.__l.__size_ = 13;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v37, v38, v39, v40, v41, v42, v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    v44 = (char *)operator new(0x20uLL);
    if (v44 > "PeerConnection is closed." || v44 + 25 <= "PeerConnection is closed.")
    {
      strcpy(v44, "PeerConnection is closed.");
      *(_DWORD *)a1 = 6;
      *(_QWORD *)(a1 + 8) = v44;
      v20 = xmmword_208F05150;
      goto LABEL_47;
    }
    goto LABEL_142;
  }
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 744))(a2);
  webrtc::RtpTransmissionManager::FindSenderForTrack(v45, *a3, &v96);
  if (!v96.__r_.__value_.__r.__words[0])
  {
    v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 744))(a2);
    v74 = v73;
    v75 = *a3;
    v92 = v75;
    if (v75)
    {
      (**(void (***)(uint64_t))v75)(v75);
      webrtc::RtpTransmissionManager::AddTrack(v74, &v92, a4, a5, a1);
      (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
    }
    else
    {
      webrtc::RtpTransmissionManager::AddTrack(v73, &v92, a4, a5, a1);
    }
    if (!*(_DWORD *)a1)
    {
      webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded(*(webrtc::SdpOfferAnswerHandler **)(a2 + 696));
      webrtc::LegacyStatsCollector::AddTrack(*(_QWORD *)(a2 + 552), *a3);
    }
    return;
  }
  (*(void (**)(std::string::size_type))(*(_QWORD *)v96.__r_.__value_.__l.__data_ + 8))(v96.__r_.__value_.__r.__words[0]);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 40))(&v94);
    v46 = std::string::insert(&v94, 0, "Sender already exists for track ");
    v53 = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v53;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = 22;
    else
      v55 = (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v54 = __p.__r_.__value_.__l.__size_;
    if (v55 == v54)
    {
      std::string::__grow_by_and_replace(&__p, v55, 1uLL, v55, v55, 0, 1uLL, ".");
    }
    else
    {
      v76 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v77 = (char *)v76 + v54;
      if ((char *)v76 + v54 <= "." && v77 + 1 > ".")
        goto LABEL_142;
      *v77 = 46;
      v78 = v54 + 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        __p.__r_.__value_.__l.__size_ = v78;
      else
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v78 & 0x7F;
      v76->__r_.__value_.__s.__data_[v78] = 0;
    }
    v96 = __p;
    memset(&__p, 0, sizeof(__p));
    v93.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
    v93.__r_.__value_.__l.__size_ = 17;
    rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v55, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v96.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_101:
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_102;
LABEL_117:
        operator delete(v94.__r_.__value_.__l.__data_);
        goto LABEL_102;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_101;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_102;
    goto LABEL_117;
  }
LABEL_102:
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 40))(&v93);
  v79 = std::string::insert(&v93, 0, "Sender already exists for track ");
  v80 = v79->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
  v94.__r_.__value_.__r.__words[2] = v80;
  v79->__r_.__value_.__l.__size_ = 0;
  v79->__r_.__value_.__r.__words[2] = 0;
  v79->__r_.__value_.__r.__words[0] = 0;
  v81 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = 22;
  else
    v82 = (v94.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v81 = v94.__r_.__value_.__l.__size_;
  if (v82 == v81)
  {
    std::string::__grow_by_and_replace(&v94, v82, 1uLL, v82, v82, 0, 1uLL, ".");
  }
  else
  {
    v83 = &v94;
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v83 = (std::string *)v94.__r_.__value_.__r.__words[0];
    v84 = (char *)v83 + v81;
    if ((char *)v83 + v81 <= "." && v84 + 1 > ".")
      goto LABEL_142;
    *v84 = 46;
    v85 = v81 + 1;
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      v94.__r_.__value_.__l.__size_ = v85;
    else
      *((_BYTE *)&v94.__r_.__value_.__s + 23) = v85 & 0x7F;
    v83->__r_.__value_.__s.__data_[v85] = 0;
  }
  __p = v94;
  memset(&v94, 0, sizeof(v94));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v86 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_142;
    v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_)
    {
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_142;
    }
    LODWORD(v96.__r_.__value_.__l.__data_) = 3;
    if (__p.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_143;
    if (__p.__r_.__value_.__l.__size_ <= 0x16)
      goto LABEL_122;
  }
  else
  {
    v86 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    LODWORD(v96.__r_.__value_.__l.__data_) = 3;
    v87 = &__p;
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) <= 0x16uLL)
    {
LABEL_122:
      HIBYTE(v97) = v86;
      v88 = (std::string *)&v96.__r_.__value_.__r.__words[1];
      v89 = (std::string *)((char *)&v96.__r_.__value_.__r.__words[1] + v86);
      if (&v96.__r_.__value_.__r.__words[1] > (std::string::size_type *)v87)
        goto LABEL_133;
      goto LABEL_132;
    }
  }
  v90 = (v86 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v86 | 7) != 0x17)
    v90 = v86 | 7;
  v91 = v90 + 1;
  v88 = (std::string *)operator new(v90 + 1);
  v96.__r_.__value_.__r.__words[2] = v86;
  v97 = v91 | 0x8000000000000000;
  v96.__r_.__value_.__l.__size_ = (std::string::size_type)v88;
  v89 = (std::string *)((char *)v88 + v86);
  if (v88 <= v87)
  {
LABEL_132:
    if (v89 <= v87)
      goto LABEL_133;
LABEL_142:
    __break(1u);
LABEL_143:
    abort();
  }
LABEL_133:
  if (v86)
    memmove(v88, v87, v86);
  v89->__r_.__value_.__s.__data_[0] = 0;
  *(_DWORD *)v98 = 0;
  v98[4] = 0;
  v98[6] = 0;
  *(_DWORD *)a1 = v96.__r_.__value_.__l.__data_;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v96.__r_.__value_.__r.__words[1];
  *(_QWORD *)(a1 + 24) = v97;
  *(_OWORD *)&v96.__r_.__value_.__r.__words[1] = 0uLL;
  v97 = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 35) = *(_DWORD *)&v98[3];
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_137:
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_141;
      return;
    }
  }
  else if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_137;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
LABEL_141:
    operator delete(v93.__r_.__value_.__l.__data_);
}

void webrtc::PeerConnection::AddTrack(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a2;
  *a2 = 0;
  v6 = v5;
  webrtc::PeerConnection::AddTrack(a5, a1, &v6, a3, a4);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void webrtc::PeerConnection::RemoveTrackOrError(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  std::string::size_type v35;
  int v36;
  webrtc::RtpTransmissionManager *v37;
  std::string::size_type v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  webrtc::RtpTransmissionManager *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::string *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string::size_type size;
  std::string *v64;
  char *v65;
  std::string::size_type v66;
  std::string *v67;
  std::string::size_type v68;
  std::string::size_type v69;
  std::string::size_type v70;
  std::string *v71;
  char *v72;
  std::string::size_type v73;
  size_t v74;
  std::string *p_src;
  size_t v76;
  std::string *v77;
  uint64_t v78;
  uint64_t v79;
  std::string *v80;
  std::string v81;
  std::string v82;
  std::string __src;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 64) + 96))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"UNSUPPORTED_OPERATION";
      __src.__r_.__value_.__l.__size_ = 21;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    *(_DWORD *)a3 = 1;
    v21 = (char *)operator new(0x20uLL);
    *(_QWORD *)(a3 + 8) = v21;
    *(_OWORD *)(a3 + 16) = xmmword_208F08630;
    if (v21 > "Not configured for media" || v21 + 24 <= "Not configured for media")
    {
      strcpy(v21, "Not configured for media");
      goto LABEL_19;
    }
    goto LABEL_141;
  }
  if (!*a2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_PARAMETER";
      __src.__r_.__value_.__l.__size_ = 17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    *(_DWORD *)a3 = 3;
    *(_BYTE *)(a3 + 31) = 15;
    if (a3 + 8 > (unint64_t)"Sender is null." || a3 + 23 <= (unint64_t)"Sender is null.")
    {
      strcpy((char *)(a3 + 8), "Sender is null.");
      goto LABEL_19;
    }
    goto LABEL_141;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 688))(a1))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"INVALID_STATE";
      __src.__r_.__value_.__l.__size_ = 13;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    *(_DWORD *)a3 = 6;
    v13 = (char *)operator new(0x20uLL);
    *(_QWORD *)(a3 + 8) = v13;
    *(_OWORD *)(a3 + 16) = xmmword_208F05150;
    if (v13 > "PeerConnection is closed." || v13 + 25 <= "PeerConnection is closed.")
    {
      strcpy(v13, "PeerConnection is closed.");
LABEL_19:
      *(_DWORD *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      *(_BYTE *)(a3 + 38) = 0;
      return;
    }
    goto LABEL_141;
  }
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 832))(a1);
  v30 = *a2;
  if (v29)
  {
    if (v30)
    {
      (**(void (***)(_QWORD))v30)(*a2);
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 744))(a1);
      (**(void (***)(uint64_t))v30)(v30);
      v32 = *(_QWORD **)(v31 + 8);
      v33 = *(_QWORD **)(v31 + 16);
      if (v32 != v33)
        goto LABEL_24;
    }
    else
    {
      v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 744))(a1);
      v32 = *(_QWORD **)(v46 + 8);
      v33 = *(_QWORD **)(v46 + 16);
      if (v32 != v33)
      {
        while (1)
        {
LABEL_24:
          v34 = (_QWORD *)*v32;
          if (*v32)
            (*(void (**)(_QWORD))*v34)(*v32);
          (*(void (**)(std::string *__return_ptr, _QWORD *))(*v34 + 48))(&__src, v34);
          v35 = __src.__r_.__value_.__r.__words[0];
          if (__src.__r_.__value_.__r.__words[0])
            (*(void (**)(std::string::size_type))(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 8))(__src.__r_.__value_.__r.__words[0]);
          if (v35 == v30)
            break;
          (*(void (**)(_QWORD *))(*v34 + 8))(v34);
          if (++v32 == v33)
            goto LABEL_30;
        }
LABEL_31:
        if (v30)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        }
        if (!v34)
          goto LABEL_81;
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a2 + 40))(&__src);
        if (!__src.__r_.__value_.__r.__words[0])
        {
          *(_DWORD *)a3 = 0;
          *(_BYTE *)(a3 + 38) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          *(_QWORD *)(a3 + 24) = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 29) = 0;
          (*(void (**)(_QWORD *))(*v34 + 8))(v34);
          return;
        }
        (*(void (**)(std::string::size_type))(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 8))(__src.__r_.__value_.__r.__words[0]);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, 0);
        if ((*(unsigned int (**)(_QWORD *))(*v34 + 80))(v34))
        {
          if ((*(unsigned int (**)(_QWORD *))(*v34 + 80))(v34) != 1)
          {
LABEL_71:
            (*(void (**)(_QWORD *))(*v34 + 8))(v34);
LABEL_80:
            webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded(*(webrtc::SdpOfferAnswerHandler **)(a1 + 696));
LABEL_81:
            *(_DWORD *)a3 = 0;
            *(_BYTE *)(a3 + 38) = 0;
            *(_QWORD *)(a3 + 16) = 0;
            *(_QWORD *)(a3 + 24) = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_QWORD *)(a3 + 29) = 0;
            return;
          }
          v36 = 3;
        }
        else
        {
          v36 = 2;
        }
        *(_DWORD *)(v34[2] + 84) = v36;
        goto LABEL_71;
      }
    }
LABEL_30:
    v34 = 0;
    goto LABEL_31;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v30 + 64))(*a2))
  {
    v37 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 744))(a1);
    webrtc::RtpTransmissionManager::GetVideoTransceiver(v37, &__src);
    v38 = __src.__r_.__value_.__r.__words[0];
    v39 = *(_QWORD *)(__src.__r_.__value_.__r.__words[0] + 16);
    v40 = *(_QWORD **)(v39 + 32);
    v41 = *(_QWORD **)(v39 + 40);
    if (v40 != v41)
    {
      while (*v40 != *a2)
      {
        if (++v40 == v41)
        {
          v40 = *(_QWORD **)(v39 + 40);
          break;
        }
      }
    }
    if (v40 != v41)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*v40 + 24) + 224))(*(_QWORD *)(*v40 + 24));
      v42 = *(_QWORD **)(v39 + 40);
      if (v42 == v40)
        goto LABEL_141;
      v43 = v40 + 1;
      if (v40 + 1 == v42)
      {
        v44 = v40;
      }
      else
      {
        do
        {
          v45 = *(v43 - 1);
          *(v43 - 1) = *v43;
          *v43 = 0;
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          ++v43;
        }
        while (v43 != v42);
        v42 = *(_QWORD **)(v39 + 40);
        v44 = v43 - 1;
      }
      while (v42 != v44)
      {
        v52 = *--v42;
        v51 = v52;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      }
      goto LABEL_76;
    }
  }
  else
  {
    v47 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 744))(a1);
    webrtc::RtpTransmissionManager::GetAudioTransceiver(v47, &__src);
    v38 = __src.__r_.__value_.__r.__words[0];
    v39 = *(_QWORD *)(__src.__r_.__value_.__r.__words[0] + 16);
    v40 = *(_QWORD **)(v39 + 32);
    v41 = *(_QWORD **)(v39 + 40);
    if (v40 != v41)
    {
      while (*v40 != *a2)
      {
        if (++v40 == v41)
        {
          v40 = *(_QWORD **)(v39 + 40);
          break;
        }
      }
    }
    if (v40 != v41)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*v40 + 24) + 224))(*(_QWORD *)(*v40 + 24));
      v48 = *(_QWORD **)(v39 + 40);
      if (v48 == v40)
        goto LABEL_141;
      v49 = v40 + 1;
      if (v40 + 1 == v48)
      {
        v44 = v40;
      }
      else
      {
        do
        {
          v50 = *(v49 - 1);
          *(v49 - 1) = *v49;
          *v49 = 0;
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
          ++v49;
        }
        while (v49 != v48);
        v48 = *(_QWORD **)(v39 + 40);
        v44 = v49 - 1;
      }
      while (v48 != v44)
      {
        v54 = *--v48;
        v53 = v54;
        if (v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
      }
LABEL_76:
      *(_QWORD *)(v39 + 40) = v44;
    }
  }
  if (v38)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v38 + 8))(v38);
  if (v40 != v41)
    goto LABEL_80;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a2 + 72))(&v81);
    v55 = std::string::insert(&v81, 0, "Couldn't find sender ");
    v61 = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v61;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v62 = 22;
    else
      v62 = (v82.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
    else
      size = v82.__r_.__value_.__l.__size_;
    if (v62 - size >= 0xB)
    {
      v64 = &v82;
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v64 = (std::string *)v82.__r_.__value_.__r.__words[0];
      v65 = (char *)v64 + size;
      if ((char *)v64 + size <= " to remove." && v65 + 11 > " to remove.")
        goto LABEL_141;
      *(_DWORD *)(v65 + 7) = 778401391;
      *(_QWORD *)v65 = *(_QWORD *)" to remove.";
      v66 = size + 11;
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        v82.__r_.__value_.__l.__size_ = size + 11;
      else
        *((_BYTE *)&v82.__r_.__value_.__s + 23) = v66 & 0x7F;
      v64->__r_.__value_.__s.__data_[v66] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v82, v62, size - v62 + 11, size, size, 0, 0xBuLL, " to remove.");
    }
    __src = v82;
    memset(&v82, 0, sizeof(v82));
    rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v62, v56, size, v57, v58, v59, v60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__src.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_101:
        if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_102;
LABEL_118:
        operator delete(v81.__r_.__value_.__l.__data_);
        goto LABEL_102;
      }
    }
    else if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_101;
    }
    operator delete(v82.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_102;
    goto LABEL_118;
  }
LABEL_102:
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a2 + 72))(&v81);
  v67 = std::string::insert(&v81, 0, "Couldn't find sender ");
  v68 = v67->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v82.__r_.__value_.__r.__words[2] = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v69 = 22;
  else
    v69 = (v82.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  else
    v70 = v82.__r_.__value_.__l.__size_;
  if (v69 - v70 >= 0xB)
  {
    v71 = &v82;
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v71 = (std::string *)v82.__r_.__value_.__r.__words[0];
    v72 = (char *)v71 + v70;
    if ((char *)v71 + v70 <= " to remove." && v72 + 11 > " to remove.")
      goto LABEL_141;
    *(_DWORD *)(v72 + 7) = 778401391;
    *(_QWORD *)v72 = *(_QWORD *)" to remove.";
    v73 = v70 + 11;
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      v82.__r_.__value_.__l.__size_ = v70 + 11;
    else
      *((_BYTE *)&v82.__r_.__value_.__s + 23) = v73 & 0x7F;
    v71->__r_.__value_.__s.__data_[v73] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v82, v69, v70 - v69 + 11, v70, v70, 0, 0xBuLL, " to remove.");
  }
  __src = v82;
  memset(&v82, 0, sizeof(v82));
  v74 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *(_DWORD *)a3 = 3;
    p_src = &__src;
    v76 = v74;
    goto LABEL_127;
  }
  v76 = __src.__r_.__value_.__l.__size_;
  if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || (p_src = (std::string *)__src.__r_.__value_.__r.__words[0], __src.__r_.__value_.__l.__size_)
    && !__src.__r_.__value_.__r.__words[0])
  {
LABEL_141:
    __break(1u);
LABEL_142:
    abort();
  }
  *(_DWORD *)a3 = 3;
  if (v76 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_142;
LABEL_127:
  if (v76 > 0x16)
  {
    v78 = (v76 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v76 | 7) != 0x17)
      v78 = v76 | 7;
    v79 = v78 + 1;
    v77 = (std::string *)operator new(v78 + 1);
    *(_QWORD *)(a3 + 16) = v76;
    *(_QWORD *)(a3 + 24) = v79 | 0x8000000000000000;
    *(_QWORD *)(a3 + 8) = v77;
  }
  else
  {
    v77 = (std::string *)(a3 + 8);
    *(_BYTE *)(a3 + 31) = v76;
  }
  v80 = (std::string *)((char *)v77 + v76);
  if (v77 <= p_src && v80 > p_src)
    goto LABEL_141;
  if (v76)
    memmove(v77, p_src, v76);
  v80->__r_.__value_.__s.__data_[0] = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 38) = 0;
  if ((v74 & 0x80) != 0)
  {
    operator delete(__src.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
}

char *webrtc::PeerConnection::AddTransceiver@<X0>(_QWORD *a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  char *v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *result;
  const char *v19;
  void *v20[2];
  void *__p[2];
  __int128 v22;
  char *v23;

  if (*(_QWORD *)(a1[8] + 96))
  {
    v23 = *a2;
    if (v23)
      (**(void (***)(char *))v23)(v23);
    LODWORD(v19) = 0;
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)__p = 0u;
    v22 = 0u;
    (*(void (**)(_QWORD *, char **, const char **))(*a1 + 96))(a1, &v23, &v19);
    v5 = (char *)__p[1];
    if (__p[1])
    {
      v6 = (char *)v22;
      v7 = __p[1];
      if ((void *)v22 != __p[1])
      {
        do
          webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v6 - 272));
        while (v6 != v5);
        v7 = __p[1];
      }
      *(_QWORD *)&v22 = v5;
      operator delete(v7);
    }
    v8 = (void **)v20[0];
    if (v20[0])
    {
      v9 = (void **)v20[1];
      v10 = v20[0];
      if (v20[1] != v20[0])
      {
        do
        {
          if (*((char *)v9 - 1) < 0)
            operator delete(*(v9 - 3));
          v9 -= 3;
        }
        while (v9 != v8);
        v10 = v20[0];
      }
      v20[1] = v8;
      operator delete(v10);
    }
    result = v23;
    if (v23)
      return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v23 + 8))(v23);
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v19 = "UNSUPPORTED_OPERATION";
      v20[0] = (void *)21;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    result = (char *)operator new(0x20uLL);
    if (result <= "Not configured for media" && result + 24 > "Not configured for media")
    {
      __break(1u);
    }
    else
    {
      strcpy(result, "Not configured for media");
      *(_DWORD *)a3 = 1;
      *(_QWORD *)(a3 + 8) = result;
      *(_OWORD *)(a3 + 16) = xmmword_208F08630;
      *(_DWORD *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      *(_BYTE *)(a3 + 38) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 48) = 0;
    }
  }
  return result;
}

void webrtc::PeerConnection::AddTransceiver(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *p_p;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v29;
  uint64_t v30;
  void (***v31)(_QWORD);
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  int v35;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  std::string *v46;
  void (***v47)(_QWORD);
  void *__p;
  __int128 v49;
  uint64_t v50;
  _BYTE v51[7];

  if (!*(_QWORD *)(a1[8] + 96))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __p = "UNSUPPORTED_OPERATION";
      *(_QWORD *)&v49 = 21;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    v21 = (char *)operator new(0x20uLL);
    if (v21 > "Not configured for media" || v21 + 24 <= "Not configured for media")
    {
      strcpy(v21, "Not configured for media");
      *(_DWORD *)a4 = 1;
      *(_QWORD *)(a4 + 8) = v21;
      v22 = xmmword_208F08630;
LABEL_60:
      *(_OWORD *)(a4 + 16) = v22;
      *(_DWORD *)(a4 + 32) = 0;
      *(_BYTE *)(a4 + 36) = 0;
      *(_BYTE *)(a4 + 38) = 0;
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 832))(a1) & 1) == 0)
  {
LABEL_63:
    v46 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc", 1025, "IsUnifiedPlan()", "\t", v8, v9, v10, v11, (uint64_t)"AddTransceiver is only available with Unified Plan SdpSemantics");
    webrtc::PeerConnection::AddTransceiver(v46);
    return;
  }
  if (!*(_QWORD *)a2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __p = "INVALID_PARAMETER";
      *(_QWORD *)&v49 = 17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v23, v24, v25, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    LODWORD(__p) = 3;
    HIBYTE(v50) = 13;
    if (&v49 > (__int128 *)"track is null" || (char *)&v49 + 13 <= "track is null")
    {
      strcpy((char *)&v49, "track is null");
      *(_DWORD *)v51 = 0;
      v51[4] = 0;
      v51[6] = 0;
      *(_DWORD *)a4 = 3;
      *(_QWORD *)(a4 + 24) = v50;
      *(_OWORD *)(a4 + 8) = v49;
      *(_DWORD *)(a4 + 32) = 0;
      *(_DWORD *)(a4 + 35) = *(_DWORD *)&v51[3];
LABEL_61:
      *(_BYTE *)(a4 + 40) = 0;
      *(_BYTE *)(a4 + 48) = 0;
      return;
    }
    goto LABEL_62;
  }
  (*(void (**)(void **__return_ptr))(**(_QWORD **)a2 + 32))(&__p);
  if (SHIBYTE(v49) < 0)
  {
    v13 = v49;
    if ((v49 & 0x8000000000000000) != 0)
      goto LABEL_62;
    p_p = (unsigned __int8 *)__p;
    if ((_QWORD)v49)
    {
      if (!__p)
        goto LABEL_62;
    }
  }
  else
  {
    p_p = (unsigned __int8 *)&__p;
    v13 = HIBYTE(v49);
  }
  if (v13 != 5)
  {
    v29 = 0;
    if ((HIBYTE(v49) & 0x80) != 0)
      goto LABEL_35;
LABEL_29:
    if (!v29)
      goto LABEL_36;
LABEL_30:
    v30 = 0;
    v31 = *(void (****)(_QWORD))a2;
    v47 = v31;
    if (!v31)
      goto LABEL_32;
    goto LABEL_31;
  }
  v26 = *(_DWORD *)p_p;
  v27 = p_p[4];
  v29 = v26 == *(_DWORD *)"audio" && v27 == cricket::kMediaTypeAudio[4];
  if ((HIBYTE(v49) & 0x80) == 0)
    goto LABEL_29;
LABEL_35:
  operator delete(__p);
  if (v29)
    goto LABEL_30;
LABEL_36:
  (*(void (**)(void **__return_ptr))(**(_QWORD **)a2 + 32))(&__p);
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    v32 = (unsigned __int8 *)&__p;
    v33 = HIBYTE(v49);
    goto LABEL_41;
  }
  v33 = v49;
  if ((v49 & 0x8000000000000000) != 0 || (v32 = (unsigned __int8 *)__p, (_QWORD)v49) && !__p)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
LABEL_41:
  if (v33 != 5)
  {
    v37 = 0;
    if ((HIBYTE(v49) & 0x80) != 0)
      goto LABEL_54;
LABEL_51:
    if (!v37)
      goto LABEL_55;
    goto LABEL_52;
  }
  v34 = *(_DWORD *)v32;
  v35 = v32[4];
  v37 = v34 == *(_DWORD *)"video" && v35 == cricket::kMediaTypeVideo[4];
  if ((HIBYTE(v49) & 0x80) == 0)
    goto LABEL_51;
LABEL_54:
  operator delete(__p);
  if (!v37)
  {
LABEL_55:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __p = "INVALID_PARAMETER";
      *(_QWORD *)&v49 = 17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    v45 = (char *)operator new(0x28uLL);
    if (v45 > "Track kind is not audio or video" || v45 + 32 <= "Track kind is not audio or video")
    {
      strcpy(v45, "Track kind is not audio or video");
      *(_DWORD *)a4 = 3;
      *(_QWORD *)(a4 + 8) = v45;
      v22 = xmmword_208F04EE0;
      goto LABEL_60;
    }
    goto LABEL_62;
  }
LABEL_52:
  v30 = 1;
  v31 = *(void (****)(_QWORD))a2;
  v47 = v31;
  if (v31)
LABEL_31:
    (**v31)(v31);
LABEL_32:
  (*(void (**)(_QWORD *, uint64_t, void (****)(_QWORD), uint64_t, uint64_t))(*a1 + 880))(a1, v30, &v47, a3, 1);
  if (v47)
    (*v47)[1](v47);
}

void webrtc::PeerConnection::AddTransceiver(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  void *v4;
  void **v5;
  void **v6;
  void *v7;
  int v8;
  void *v9[2];
  void *__p[2];
  __int128 v11;

  v8 = 0;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)__p = 0u;
  v11 = 0u;
  (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 112))(a1, a2, &v8);
  v2 = (char *)__p[1];
  if (__p[1])
  {
    v3 = (char *)v11;
    v4 = __p[1];
    if ((void *)v11 != __p[1])
    {
      do
        webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v3 - 272));
      while (v3 != v2);
      v4 = __p[1];
    }
    *(_QWORD *)&v11 = v2;
    operator delete(v4);
  }
  v5 = (void **)v9[0];
  if (v9[0])
  {
    v6 = (void **)v9[1];
    v7 = v9[0];
    if (v9[1] != v9[0])
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = v9[0];
    }
    v9[1] = v5;
    operator delete(v7);
  }
}

char *webrtc::PeerConnection::AddTransceiver@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  char *v29;
  const char *v30;
  uint64_t v31;

  if (!*(_QWORD *)(a1[8] + 96))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v30 = "UNSUPPORTED_OPERATION";
      v31 = 21;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    result = (char *)operator new(0x20uLL);
    if (result > "Not configured for media" || result + 24 <= "Not configured for media")
    {
      strcpy(result, "Not configured for media");
      *(_DWORD *)a4 = 1;
      *(_QWORD *)(a4 + 8) = result;
      v20 = xmmword_208F08630;
LABEL_17:
      *(_OWORD *)(a4 + 16) = v20;
      *(_DWORD *)(a4 + 32) = 0;
      *(_BYTE *)(a4 + 36) = 0;
      *(_BYTE *)(a4 + 38) = 0;
      *(_BYTE *)(a4 + 40) = 0;
      *(_BYTE *)(a4 + 48) = 0;
      return result;
    }
    goto LABEL_18;
  }
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 832))(a1) & 1) == 0)
  {
LABEL_19:
    v28 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc", 1055, "IsUnifiedPlan()", "\t", v8, v9, v10, v11, (uint64_t)"AddTransceiver is only available with Unified Plan SdpSemantics");
    return (char *)webrtc::PeerConnection::AddTransceiver(v28);
  }
  if (a2 >= 2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v30 = "INVALID_PARAMETER";
      v31 = 17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    result = (char *)operator new(0x28uLL);
    if (result > "media type is not audio or video" || result + 32 <= "media type is not audio or video")
    {
      strcpy(result, "media type is not audio or video");
      *(_DWORD *)a4 = 3;
      *(_QWORD *)(a4 + 8) = result;
      v20 = xmmword_208F04EE0;
      goto LABEL_17;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v29 = 0;
  (*(void (**)(_QWORD *, uint64_t, char **, uint64_t, uint64_t))(*a1 + 880))(a1, a2, &v29, a3, 1);
  result = v29;
  if (v29)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v29 + 8))(v29);
  return result;
}

void webrtc::PeerConnection::AddTransceiver(_QWORD *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v10;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t i;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char v77;
  unsigned int data;
  unsigned int v79;
  std::string::size_type v80;
  std::string::size_type *v81;
  unsigned int v82;
  uint64_t **v83;
  _DWORD *v84;
  uint64_t *v85;
  int v86;
  size_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void **v93;
  _QWORD *v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  char *v101;
  uint64_t v102;
  std::string *v103;
  __int128 v104;
  __int16 v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void *v111;
  int v112;
  char *v113;
  void (***v114)(char *);
  void (**v115)(char *);
  uint64_t v116;
  const cricket::Codec **v117;
  const cricket::Codec *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  const char *v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  size_t v146;
  size_t v147;
  char *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  void *v153;
  char *v154;
  void (***v155)(char *);
  void (**v156)(char *);
  double *v157;
  uint64_t v158;
  double v159;
  int v160;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  void (***v171)(_QWORD);
  std::string::size_type v172;
  uint64_t *v173;
  uint64_t *v174;
  void (***v177)(_QWORD);
  uint64_t v178;
  int8x16_t *v179;
  uint64_t v180;
  std::string v181;
  uint64_t v182;
  std::string v183;
  unint64_t v184;
  _BYTE v185[7];
  void *__p[2];
  unint64_t v187;
  _OWORD v188[2];
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  _BYTE v193[25];
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int16 v198;
  char v199;
  char v200;
  _BYTE v201[26];
  char v202;
  char __str[16];
  __int128 v204;
  __int128 v205;
  _BYTE v206[25];
  __int128 __s;
  uint64_t v208;
  char v209;
  _BYTE v210[13];
  __int128 v211;
  uint64_t v212;
  __int16 v213;
  char v214[104];
  char v215;
  uint64_t v216;

  v216 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1[8] + 96))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      *(_QWORD *)__str = "UNSUPPORTED_OPERATION";
      *(_QWORD *)&__str[8] = 21;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    v25 = (char *)operator new(0x20uLL);
    if (v25 > "Not configured for media" || v25 + 24 <= "Not configured for media")
    {
      strcpy(v25, "Not configured for media");
      *(_DWORD *)a9 = 1;
      *(_QWORD *)(a9 + 8) = v25;
      v26 = xmmword_208F08630;
LABEL_90:
      *(_OWORD *)(a9 + 16) = v26;
      *(_DWORD *)(a9 + 32) = 0;
      *(_BYTE *)(a9 + 36) = 0;
      *(_BYTE *)(a9 + 38) = 0;
      *(_BYTE *)(a9 + 40) = 0;
      *(_BYTE *)(a9 + 48) = 0;
      return;
    }
LABEL_268:
    __break(1u);
LABEL_269:
    abort();
  }
  v10 = a5;
  v14 = *(_QWORD *)(a4 + 32);
  v13 = *(_QWORD *)(a4 + 40);
  v12 = (_BYTE *)(a4 + 32);
  if (v14 == v13)
  {
    v27 = 1;
    v13 = *(_QWORD *)(a4 + 32);
    goto LABEL_11;
  }
  v15 = v13 - v14 - 272;
  if (v15 < 0x110)
  {
    v16 = 0;
    v17 = *(_QWORD *)(a4 + 32);
    do
    {
LABEL_24:
      v37 = *(_QWORD *)(v17 + 136);
      if (*(char *)(v17 + 151) >= 0)
        v37 = *(unsigned __int8 *)(v17 + 151);
      if (v37)
        ++v16;
      v17 += 272;
    }
    while (v17 != v13);
    goto LABEL_29;
  }
  v30 = 0;
  v31 = 0;
  v32 = v15 / 0x110 + 1;
  v17 = v14 + 272 * (v32 & 0x1FFFFFFFFFFFFFELL);
  v33 = v32 & 0x1FFFFFFFFFFFFFELL;
  v34 = *(_QWORD *)(a4 + 32);
  do
  {
    v35 = *(_QWORD *)(v34 + 136);
    v36 = *(_QWORD *)(v34 + 408);
    a5 = *(unsigned __int8 *)(v34 + 423);
    if (*(char *)(v34 + 151) >= 0)
      v35 = *(unsigned __int8 *)(v34 + 151);
    if ((a5 & 0x80u) == 0)
      v36 = *(unsigned __int8 *)(v34 + 423);
    if (v35)
      ++v30;
    if (v36)
      ++v31;
    v34 += 544;
    v33 -= 2;
  }
  while (v33);
  v16 = v31 + v30;
  if (v32 != (v32 & 0x1FFFFFFFFFFFFFELL))
    goto LABEL_24;
LABEL_29:
  v27 = v16 == 0;
  if (v16)
  {
    if (v16 == 0xF0F0F0F0F0F0F0F1 * ((v13 - v14) >> 4))
    {
      v174 = a3;
      v38 = MEMORY[0x24BDAC740];
      while (1)
      {
        v39 = (char *)(v14 + 128);
        if (*(char *)(v14 + 151) < 0)
        {
          v40 = *(_QWORD *)(v14 + 136);
          if (v40 < 0)
            goto LABEL_268;
          v39 = *(char **)v39;
          v41 = v40 && v39 == 0;
          if (v41)
            goto LABEL_268;
        }
        else
        {
          v40 = *(unsigned __int8 *)(v14 + 151);
        }
        if ((unint64_t)(v40 - 17) < 0xFFFFFFFFFFFFFFF0)
          break;
        do
        {
          v42 = *v39;
          if ((v42 & 0x80000000) != 0)
          {
            if (!__maskrune(v42, 0x500uLL))
              goto LABEL_72;
          }
          else if ((*(_DWORD *)(v38 + 4 * v42 + 60) & 0x500) == 0)
          {
            goto LABEL_72;
          }
          ++v39;
          --v40;
        }
        while (v40);
        v14 += 272;
        if (v14 == v13)
        {
          a3 = v174;
          v43 = *(_QWORD *)(a4 + 32);
          v13 = *(_QWORD *)(a4 + 40);
          goto LABEL_49;
        }
      }
LABEL_72:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        *(_QWORD *)__str = "INVALID_PARAMETER";
        *(_QWORD *)&__str[8] = 17;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      }
      v65 = (char *)operator new(0x20uLL);
      if (v65 > "Invalid RID value provided." || v65 + 27 <= "Invalid RID value provided.")
      {
        strcpy(v65, "Invalid RID value provided.");
        *(_DWORD *)a9 = 3;
        *(_QWORD *)(a9 + 8) = v65;
        v26 = xmmword_208F051A0;
        goto LABEL_90;
      }
      goto LABEL_268;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      *(_QWORD *)__str = "INVALID_PARAMETER";
      *(_QWORD *)&__str[8] = 17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v50, v51, v52, v53, v54, v55, v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    v57 = (char *)operator new(0x48uLL);
    if (v57 > "RIDs must be provided for either all or none of the send encodings."
      || v57 + 67 <= "RIDs must be provided for either all or none of the send encodings.")
    {
      strcpy(v57, "RIDs must be provided for either all or none of the send encodings.");
      *(_DWORD *)a9 = 3;
      *(_QWORD *)(a9 + 8) = v57;
      v26 = xmmword_208F0BC60;
      goto LABEL_90;
    }
    goto LABEL_268;
  }
  v43 = *(_QWORD *)(a4 + 32);
LABEL_49:
  if (v43 != v13)
  {
    v44 = v43;
    while (!*(_BYTE *)(v44 + 4))
    {
      v44 += 272;
      if (v44 == v13)
      {
        v14 = v13;
        v13 = v43;
        goto LABEL_11;
      }
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      *(_QWORD *)__str = "UNSUPPORTED_PARAMETER";
      *(_QWORD *)&__str[8] = 21;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v69, v70, v71, v72, v73, v74, v75, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    v76 = (char *)operator new(0x40uLL);
    if (v76 > "Attempted to set an unimplemented parameter of RtpParameters."
      || v76 + 61 <= "Attempted to set an unimplemented parameter of RtpParameters.")
    {
      strcpy(v76, "Attempted to set an unimplemented parameter of RtpParameters.");
      *(_DWORD *)a9 = 2;
      *(_QWORD *)(a9 + 8) = v76;
      v26 = xmmword_208F0ABD0;
      goto LABEL_90;
    }
    goto LABEL_268;
  }
  v14 = v13;
LABEL_11:
  v194 = 0;
  v196 = 0;
  v197 = 0;
  v195 = 0;
  v198 = 256;
  memset(v188, 0, sizeof(v188));
  v189 = 0u;
  v190 = 0u;
  v191 = 0u;
  v192 = 0u;
  memset(v193, 0, sizeof(v193));
  v199 = 0;
  v200 = 0;
  v173 = a3;
  if (v193 == v12)
  {
    v28 = 0;
    v29 = 0;
  }
  else
  {
    std::vector<webrtc::RtpEncodingParameters>::__assign_with_size[abi:sn180100]<webrtc::RtpEncodingParameters*,webrtc::RtpEncodingParameters*>((uint64_t *)v193, v13, v14, 0xF0F0F0F0F0F0F0F1 * ((v14 - v13) >> 4));
    v29 = *(_QWORD *)&v193[8];
    v28 = *(_QWORD *)v193;
  }
  v45 = a2;
  v46 = 3;
  if (a2 != 1)
    v46 = 1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v29 - v28) >> 4) > v46)
  {
    v47 = v28 + 272 * v46;
    if (v29 < v47)
      goto LABEL_268;
    if (v47 != v29)
    {
      std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,0>(v29, v29, v47);
      v29 = v48;
      for (i = *(_QWORD *)&v193[8];
            i != v29;
      *(_QWORD *)&v193[8] = v29;
      v28 = *(_QWORD *)v193;
    }
  }
  if (v29 - v28 == 272)
  {
    if (*(char *)(v28 + 151) < 0)
    {
      if (!*(_QWORD *)(v28 + 136))
        goto LABEL_92;
    }
    else if (!*(_BYTE *)(v28 + 151))
    {
      goto LABEL_92;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      if (*(_QWORD *)&v193[8] == *(_QWORD *)v193)
        goto LABEL_268;
      rtc::webrtc_logging_impl::Log("\r\t\n\t", v66, v67, v68, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    v29 = *(_QWORD *)&v193[8];
    v28 = *(_QWORD *)v193;
    if (*(_QWORD *)&v193[8] == *(_QWORD *)v193)
      goto LABEL_268;
    if (*(char *)(*(_QWORD *)v193 + 151) < 0)
    {
      **(_BYTE **)(*(_QWORD *)v193 + 128) = 0;
      *(_QWORD *)(v28 + 136) = 0;
      v29 = *(_QWORD *)&v193[8];
      v28 = *(_QWORD *)v193;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)v193 + 128) = 0;
      *(_BYTE *)(v28 + 151) = 0;
    }
  }
LABEL_92:
  v77 = !v27;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v29 - v28) >> 4) < 2)
    v77 = 1;
  if ((v77 & 1) == 0)
  {
    LODWORD(v183.__r_.__value_.__l.__data_) = 0;
    v183.__r_.__value_.__r.__words[2] = 0;
    v184 = 0;
    v183.__r_.__value_.__l.__size_ = (std::string::size_type)&v183.__r_.__value_.__r.__words[2];
    if (v28 == v29)
    {
      v94 = 0;
    }
    else
    {
      do
      {
        data = v183.__r_.__value_.__l.__data_;
        if (LODWORD(v183.__r_.__value_.__l.__data_) == -1)
        {
LABEL_270:
          v137 = (uint64_t)rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/unique_id_generator.h", 135, "counter_ < std::numeric_limits<TIntegral>::max()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, a5, a6, a7, a8, 0xFFFFFFFFLL);
LABEL_271:
          rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v137);
        }
        if (v183.__r_.__value_.__r.__words[2])
        {
          v79 = v183.__r_.__value_.__l.__data_;
LABEL_101:
          data = v79++;
          v80 = v183.__r_.__value_.__r.__words[2];
          do
          {
            while (1)
            {
              v81 = (std::string::size_type *)v80;
              v82 = *(_DWORD *)(v80 + 28);
              if (data < v82)
                break;
              if (v82 >= data)
              {
                if (v79 == -1)
                {
                  LODWORD(v183.__r_.__value_.__l.__data_) = -1;
                  goto LABEL_270;
                }
                goto LABEL_101;
              }
              v80 = v81[1];
              if (!v80)
              {
                v83 = (uint64_t **)(v81 + 1);
                LODWORD(v183.__r_.__value_.__l.__data_) = v79;
                goto LABEL_111;
              }
            }
            v80 = *v81;
          }
          while (*v81);
          LODWORD(v183.__r_.__value_.__l.__data_) = v79;
          v83 = (uint64_t **)v81;
        }
        else
        {
          ++LODWORD(v183.__r_.__value_.__l.__data_);
          v83 = (uint64_t **)&v183.__r_.__value_.__r.__words[2];
          v81 = &v183.__r_.__value_.__r.__words[2];
        }
LABEL_111:
        v84 = operator new(0x20uLL);
        v84[7] = data;
        *(_QWORD *)v84 = 0;
        *((_QWORD *)v84 + 1) = 0;
        *((_QWORD *)v84 + 2) = v81;
        *v83 = (uint64_t *)v84;
        v85 = (uint64_t *)v84;
        if (*(_QWORD *)v183.__r_.__value_.__l.__size_)
        {
          v183.__r_.__value_.__l.__size_ = *(_QWORD *)v183.__r_.__value_.__l.__size_;
          v85 = *v83;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v183.__r_.__value_.__r.__words[2], v85);
        ++v184;
        v86 = snprintf(__str, 0x20uLL, "%u", v84[7]);
        if (v86 < 0)
          goto LABEL_269;
        v87 = v86;
        if (v86 > 0x16)
        {
          v89 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v86 | 7) != 0x17)
            v89 = v86 | 7;
          v90 = v89 + 1;
          v88 = (char *)operator new(v89 + 1);
          __p[1] = (void *)v87;
          v187 = v90 | 0x8000000000000000;
          __p[0] = v88;
        }
        else
        {
          HIBYTE(v187) = v86;
          v88 = (char *)__p;
        }
        v91 = &v88[v87];
        if (v88 <= __str && &v88[v87] > __str)
          goto LABEL_268;
        if ((_DWORD)v87)
          memcpy(v88, __str, v87);
        *v91 = 0;
        v93 = (void **)(v28 + 128);
        if (*(char *)(v28 + 151) < 0)
          operator delete(*v93);
        *(_OWORD *)v93 = *(_OWORD *)__p;
        *(_QWORD *)(v28 + 144) = v187;
        v28 += 272;
      }
      while (v28 != v29);
      v94 = (_QWORD *)v183.__r_.__value_.__r.__words[2];
      v45 = a2;
    }
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v183.__r_.__value_.__l.__size_, v94);
    v29 = *(_QWORD *)&v193[8];
    v28 = *(_QWORD *)v193;
  }
  if (v28 == v29)
  {
    __str[0] = 0;
    __str[4] = 0;
    *(_QWORD *)&__str[8] = 0x3FF0000000000000;
    LODWORD(v204) = 1;
    BYTE4(v204) = 0;
    BYTE8(v204) = 0;
    BYTE12(v204) = 0;
    LOBYTE(v205) = 0;
    BYTE8(v205) = 0;
    v206[0] = 0;
    v206[8] = 0;
    v206[12] = 0;
    v206[16] = 0;
    v206[24] = 0;
    LOBYTE(__s) = 0;
    v209 = 0;
    v210[0] = 0;
    v210[8] = 0;
    v210[12] = 1;
    v214[0] = 0;
    v215 = 0;
    v211 = 0uLL;
    v213 = 0;
    v212 = 0;
    if (v29 >= *(_QWORD *)&v193[16])
    {
      v101 = std::vector<webrtc::RtpEncodingParameters>::__push_back_slow_path<webrtc::RtpEncodingParameters const&>((void **)v193, (uint64_t)__str);
    }
    else
    {
      if (!v29)
        goto LABEL_268;
      *(_OWORD *)v29 = *(_OWORD *)__str;
      v96 = v204;
      v97 = v205;
      v98 = *(_OWORD *)v206;
      *(_OWORD *)(v29 + 57) = *(_OWORD *)&v206[9];
      *(_OWORD *)(v29 + 32) = v97;
      *(_OWORD *)(v29 + 48) = v98;
      *(_OWORD *)(v29 + 16) = v96;
      *(_BYTE *)(v29 + 80) = 0;
      v99 = (std::string *)(v29 + 80);
      *(_BYTE *)(v29 + 104) = 0;
      if (v209)
      {
        if (SHIBYTE(v208) < 0)
        {
          std::string::__init_copy_ctor_external(v99, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        }
        else
        {
          v100 = __s;
          *(_QWORD *)(v29 + 96) = v208;
          *(_OWORD *)&v99->__r_.__value_.__l.__data_ = v100;
        }
        *(_BYTE *)(v29 + 104) = 1;
      }
      v102 = *(_QWORD *)v210;
      *(_QWORD *)(v29 + 117) = *(_QWORD *)&v210[5];
      *(_QWORD *)(v29 + 112) = v102;
      v103 = (std::string *)(v29 + 128);
      if (SHIBYTE(v212) < 0)
      {
        std::string::__init_copy_ctor_external(v103, (const std::string::value_type *)v211, *((std::string::size_type *)&v211 + 1));
      }
      else
      {
        v104 = v211;
        *(_QWORD *)(v29 + 144) = v212;
        *(_OWORD *)&v103->__r_.__value_.__l.__data_ = v104;
      }
      v105 = v213;
      *(_BYTE *)(v29 + 160) = 0;
      *(_WORD *)(v29 + 152) = v105;
      *(_BYTE *)(v29 + 264) = 0;
      if (v215)
      {
        webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v29 + 160), (const webrtc::RtpCodec *)v214);
        *(_BYTE *)(v29 + 264) = 1;
      }
      v101 = (char *)(v29 + 272);
    }
    *(_QWORD *)&v193[8] = v101;
    webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)__str);
    v106 = HIBYTE(v189);
    if (v189 < 0)
      v106 = v189;
    if (v106)
      goto LABEL_185;
LABEL_153:
    if (*(_QWORD *)&v193[8] != *(_QWORD *)v193)
    {
      v107 = (*(_QWORD *)&v193[8] - *(_QWORD *)v193) / 272;
      v108 = v107 <= 1 ? 1 : (*(_QWORD *)&v193[8] - *(_QWORD *)v193) / 272;
      if (v107 >= 2)
      {
        if (*(double *)(*(_QWORD *)v193 + 280) != 1.0 || *(_DWORD *)(*(_QWORD *)v193 + 288) != 1)
          goto LABEL_185;
        v157 = (double *)(*(_QWORD *)v193 + 560);
        v158 = 2;
        do
        {
          if (v108 == v158)
            goto LABEL_158;
          v159 = *(v157 - 1);
          v160 = *(_DWORD *)v157;
          ++v158;
          v157 += 34;
        }
        while (v159 == 1.0 && v160 == 1);
        if (v158 - 1 < v107)
          goto LABEL_185;
      }
    }
LABEL_158:
    __p[0] = 0;
    __p[1] = 0;
    v187 = 0;
    if (v45 == 1)
    {
      v109 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[8] + 96) + 32))(*(_QWORD *)(a1[8] + 96));
      (*(void (**)(char *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v109 + 56))(__str, v109, 0);
      v110 = (char *)__p[0];
      if (__p[0])
      {
        v111 = __p[0];
        if (__p[1] != __p[0])
        {
          v112 = v10;
          v113 = (char *)__p[1] - 216;
          v114 = (void (***)(char *))((char *)__p[1] - 216);
          do
          {
            v115 = *v114;
            v114 -= 27;
            (*v115)(v113);
            v41 = v113 == v110;
            v113 = (char *)v114;
          }
          while (!v41);
          v111 = __p[0];
          v10 = v112;
        }
        __p[1] = v110;
        operator delete(v111);
      }
      *(_OWORD *)__p = *(_OWORD *)__str;
      v187 = v204;
    }
    else
    {
      v116 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[8] + 96) + 24))(*(_QWORD *)(a1[8] + 96));
      v117 = (const cricket::Codec **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v116 + 56))(v116);
      if (__p != (void **)v117)
        std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)__p, *v117, v117[1], 0x84BDA12F684BDA13 * ((v117[1] - *v117) >> 3));
    }
    if (__p[1] == __p[0])
      v118 = 0;
    else
      v118 = (const cricket::Codec *)__p[0];
    v201[0] = 0;
    v202 = 0;
    cricket::CheckRtpParametersValues((cricket::Codec *)v201, (unint64_t)v188, v118, 0x84BDA12F684BDA13 * (((char *)__p[1] - (char *)__p[0]) >> 3), (uint64_t)__str);
    if (v202)
      cricket::Codec::~Codec((cricket::Codec *)v201);
    if (!*(_DWORD *)__str)
    {
      v137 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
      if ((v137 & 1) == 0)
      {
        switch(v45)
        {
          case 0:
            *((_BYTE *)&v183.__r_.__value_.__s + 23) = 5;
            v145 = "audio";
            goto LABEL_226;
          case 1:
            *((_BYTE *)&v183.__r_.__value_.__s + 23) = 5;
            v145 = "video";
LABEL_226:
            if (&v183 <= (std::string *)v145 && (char *)v183.__r_.__value_.__r.__words + 5 > v145)
              goto LABEL_268;
            LODWORD(v183.__r_.__value_.__l.__data_) = *(_DWORD *)v145;
            WORD2(v183.__r_.__value_.__r.__words[0]) = *((unsigned __int8 *)v145 + 4);
            break;
          case 2:
            *((_BYTE *)&v183.__r_.__value_.__s + 23) = 4;
            if (&v183 <= (std::string *)"data" && (char *)v183.__r_.__value_.__r.__words + 4 > "data")
              goto LABEL_268;
            strcpy((char *)&v183, "data");
            break;
          case 3:
            *((_BYTE *)&v183.__r_.__value_.__s + 23) = 0;
            v183.__r_.__value_.__s.__data_[0] = 0;
            break;
          default:
            goto LABEL_271;
        }
        rtc::webrtc_logging_impl::Log("\r\t\n\t", v138, v139, v140, v141, v142, v143, v144, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
        if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v183.__r_.__value_.__l.__data_);
      }
      if (*v173)
      {
        v162 = (*(uint64_t (**)(_QWORD *))(*a1 + 744))(a1);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v173 + 40))(&v181);
        webrtc::RtpTransmissionManager::FindSenderById(v162, (uint64_t)&v181, &v182);
        v163 = v173;
        if (v182)
          rtc::CreateRandomUuid(&v183);
        else
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v173 + 40))(&v183);
        if (v182)
          (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
        if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v181.__r_.__value_.__l.__data_);
      }
      else
      {
        v163 = v173;
        rtc::CreateRandomUuid(&v183);
      }
      v164 = (*(uint64_t (**)(_QWORD *))(*a1 + 744))(a1);
      v165 = v164;
      v166 = *v163;
      v180 = v166;
      if (v166)
      {
        (**(void (***)(uint64_t))v166)(v166);
        webrtc::RtpTransmissionManager::CreateSender(v165, v45, (__int128 *)&v183, &v180, a4 + 8, (uint64_t)v193, &v182);
        (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
      }
      else
      {
        webrtc::RtpTransmissionManager::CreateSender(v164, v45, (__int128 *)&v183, &v180, a4 + 8, (uint64_t)v193, &v182);
      }
      v167 = (*(uint64_t (**)(_QWORD *))(*a1 + 744))(a1);
      rtc::CreateRandomUuid(&v181);
      webrtc::RtpTransmissionManager::CreateReceiver(v167, v45, (uint64_t)&v181, &v179);
      if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v181.__r_.__value_.__l.__data_);
      v168 = a1;
      v169 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 744))(a1);
      v170 = v182;
      v178 = v182;
      if (v182)
        (**(void (***)(uint64_t))v182)(v182);
      v177 = (void (***)(_QWORD))v179;
      if (v179)
        (*(void (**)(int8x16_t *))v179->i64[0])(v179);
      webrtc::RtpTransmissionManager::CreateAndAddTransceiver(v169, &v178, &v177, (uint64_t *)&v181);
      if (v177)
        (*v177)[1](v177);
      if (v178)
        (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
      v171 = (void (***)(_QWORD))v181.__r_.__value_.__r.__words[0];
      *(_DWORD *)(*(_QWORD *)(v181.__r_.__value_.__r.__words[0] + 16) + 84) = *(_DWORD *)a4;
      if (v10
        && (webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded((webrtc::SdpOfferAnswerHandler *)v168[87]),
            (v171 = (void (***)(_QWORD))v181.__r_.__value_.__r.__words[0]) == 0))
      {
        v172 = 0;
      }
      else
      {
        (**v171)(v171);
        v172 = v181.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)a9 = 0;
      *(_BYTE *)(a9 + 38) = 0;
      *(_QWORD *)(a9 + 16) = 0;
      *(_QWORD *)(a9 + 24) = 0;
      *(_QWORD *)(a9 + 8) = 0;
      *(_QWORD *)(a9 + 29) = 0;
      *(_QWORD *)(a9 + 40) = v171;
      *(_BYTE *)(a9 + 48) = 1;
      if (v172)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v172 + 8))(v172);
      if (v179)
        (*(void (**)(int8x16_t *))(v179->i64[0] + 8))(v179);
      if (v170)
        (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
      if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v183.__r_.__value_.__l.__data_);
      if ((HIBYTE(v204) & 0x80) == 0)
        goto LABEL_206;
LABEL_205:
      operator delete(*(void **)&__str[8]);
LABEL_206:
      v152 = (char *)__p[0];
      if (__p[0])
      {
        v153 = __p[0];
        if (__p[1] != __p[0])
        {
          v154 = (char *)__p[1] - 216;
          v155 = (void (***)(char *))((char *)__p[1] - 216);
          do
          {
            v156 = *v155;
            v155 -= 27;
            (*v156)(v154);
            v41 = v154 == v152;
            v154 = (char *)v155;
          }
          while (!v41);
          v153 = __p[0];
        }
        __p[1] = v152;
        operator delete(v153);
      }
      goto LABEL_213;
    }
    if (*(_DWORD *)__str == 7)
      *(_DWORD *)__str = 1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v119, v120, v121, v122, v123, v124, v125, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    v126 = HIBYTE(v204);
    if (SHIBYTE(v204) < 0)
    {
      v127 = *(const char **)&__str[8];
      if (!*(_QWORD *)&__str[8])
        goto LABEL_268;
    }
    else
    {
      v127 = &__str[8];
    }
    v146 = strlen(v127);
    LODWORD(v183.__r_.__value_.__l.__data_) = *(_DWORD *)__str;
    if (v146 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_269;
    v147 = v146;
    if (v146 > 0x16)
    {
      v150 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v146 | 7) != 0x17)
        v150 = v146 | 7;
      v151 = v150 + 1;
      v148 = (char *)operator new(v150 + 1);
      v183.__r_.__value_.__r.__words[2] = v147;
      v184 = v151 | 0x8000000000000000;
      v183.__r_.__value_.__l.__size_ = (std::string::size_type)v148;
      v149 = &v148[v147];
      if (v148 > v127)
        goto LABEL_202;
    }
    else
    {
      HIBYTE(v184) = v146;
      v148 = &v183.__r_.__value_.__s.__data_[8];
      v149 = (char *)&v183.__r_.__value_.__r.__words[1] + v147;
      if (&v183.__r_.__value_.__r.__words[1] > (std::string::size_type *)v127)
        goto LABEL_202;
    }
    if (v149 > v127)
      goto LABEL_268;
LABEL_202:
    if (v147)
      memmove(v148, v127, v147);
    *v149 = 0;
    *(_DWORD *)v185 = 0;
    v185[4] = 0;
    v185[6] = 0;
    *(_DWORD *)a9 = v183.__r_.__value_.__l.__data_;
    *(_OWORD *)(a9 + 8) = *(_OWORD *)&v183.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a9 + 24) = v184;
    *(_OWORD *)&v183.__r_.__value_.__r.__words[1] = 0uLL;
    v184 = 0;
    *(_DWORD *)(a9 + 32) = 0;
    *(_DWORD *)(a9 + 35) = *(_DWORD *)&v185[3];
    *(_BYTE *)(a9 + 40) = 0;
    *(_BYTE *)(a9 + 48) = 0;
    if ((v126 & 0x80) == 0)
      goto LABEL_206;
    goto LABEL_205;
  }
  v95 = HIBYTE(v189);
  if (v189 < 0)
    v95 = v189;
  if (!v95)
    goto LABEL_153;
LABEL_185:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    *(_QWORD *)__str = "UNSUPPORTED_PARAMETER";
    *(_QWORD *)&__str[8] = 21;
    rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v129, v130, v131, v132, v133, v134, v135, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  }
  v136 = (char *)operator new(0x40uLL);
  if (v136 <= "Attempted to set an unimplemented parameter of RtpParameters."
    && v136 + 61 > "Attempted to set an unimplemented parameter of RtpParameters.")
  {
    goto LABEL_268;
  }
  strcpy(v136, "Attempted to set an unimplemented parameter of RtpParameters.");
  *(_DWORD *)a9 = 2;
  *(_QWORD *)(a9 + 8) = v136;
  *(_OWORD *)(a9 + 16) = xmmword_208F0ABD0;
  *(_DWORD *)(a9 + 32) = 0;
  *(_BYTE *)(a9 + 36) = 0;
  *(_BYTE *)(a9 + 38) = 0;
  *(_BYTE *)(a9 + 40) = 0;
  *(_BYTE *)(a9 + 48) = 0;
LABEL_213:
  webrtc::RtpParameters::~RtpParameters((void **)v188);
}

void `non-virtual thunk to'webrtc::PeerConnection::AddTransceiver(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  webrtc::PeerConnection::AddTransceiver((_QWORD *)(a1 - 8), a2, a3, a4, a5, a6, a7, a8, a9);
}

void webrtc::PeerConnection::CreateSender(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int *v42;
  int v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::string *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  webrtc::RtpTransmissionManager *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  webrtc::RtpTransmissionManager *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  webrtc::RtpTransmissionManager *v74;
  std::string::size_type v75;
  _QWORD *v76;
  void (***v77)(_QWORD);
  std::string *v78;
  void *v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  webrtc::RtpTransmissionManager *v83;
  _QWORD *v84;
  void (***v85)(_QWORD);
  uint64_t v86;
  void (***v87)(_QWORD);
  std::string __p;
  void *v89;
  std::string *v90;
  unint64_t v91;

  if (!*(_QWORD *)(a1[8] + 96))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
LABEL_11:
    *a4 = 0;
    return;
  }
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 832))(a1))
  {
LABEL_91:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc", 1203, "!IsUnifiedPlan()", "\t", v8, v9, v10, v11, (uint64_t)"CreateSender is not available with Unified Plan SdpSemantics. Please use AddTransceiver instead.");
LABEL_92:
    abort();
  }
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 688))(a1))
    goto LABEL_11;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v12 = *(unsigned __int8 *)(a3 + 23);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a3 + 8);
  if (v12)
  {
    v90 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v89, a3);
    v13 = *((unsigned __int8 *)a2 + 23);
    v14 = (int *)a2;
    v15 = v13;
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_36;
  }
  rtc::CreateRandomUuid(&__p);
  v23 = v90;
  if ((unint64_t)v90 >= v91)
  {
    v26 = (std::string *)v89;
    v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v90 - (_BYTE *)v89) >> 3);
    v28 = v27 + 1;
    if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_92;
    if (0x5555555555555556 * ((uint64_t)(v91 - (_QWORD)v89) >> 3) > v28)
      v28 = 0x5555555555555556 * ((uint64_t)(v91 - (_QWORD)v89) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v91 - (_QWORD)v89) >> 3) >= 0x555555555555555)
      v29 = 0xAAAAAAAAAAAAAAALL;
    else
      v29 = v28;
    if (!v29)
      goto LABEL_90;
    if (v29 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v30 = 24 * v29;
    v31 = (char *)operator new(24 * v29);
    v32 = &v31[v30];
    v33 = (std::string *)&v31[24 * v27];
    *v33 = __p;
    memset(&__p, 0, sizeof(__p));
    v25 = v33 + 1;
    if (v23 == v26)
    {
      v89 = &v31[24 * v27];
      v90 = v33 + 1;
      v91 = (unint64_t)v32;
    }
    else
    {
      do
      {
        v34 = *(_OWORD *)&v23[-1].__r_.__value_.__l.__data_;
        v33[-1].__r_.__value_.__r.__words[2] = v23[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33[-1].__r_.__value_.__l.__data_ = v34;
        --v33;
        v23[-1].__r_.__value_.__l.__size_ = 0;
        v23[-1].__r_.__value_.__r.__words[2] = 0;
        v23[-1].__r_.__value_.__r.__words[0] = 0;
        --v23;
      }
      while (v23 != v26);
      v23 = (std::string *)v89;
      v35 = v90;
      v89 = v33;
      v90 = v25;
      v91 = (unint64_t)v32;
      while (v35 != v23)
      {
        if (SHIBYTE(v35[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35[-1].__r_.__value_.__l.__data_);
        --v35;
      }
    }
    if (v23)
      operator delete(v23);
  }
  else
  {
    if (!v90)
      goto LABEL_90;
    v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v90->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
    memset(&__p, 0, sizeof(__p));
    v25 = v23 + 1;
  }
  v90 = v25;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    {
LABEL_35:
      v13 = *((unsigned __int8 *)a2 + 23);
      v14 = (int *)a2;
      v15 = v13;
      if ((*((char *)a2 + 23) & 0x80000000) == 0)
        goto LABEL_43;
      goto LABEL_36;
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
  {
    goto LABEL_35;
  }
  if (v90 == v89)
    goto LABEL_90;
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v36, v37, v38, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  v13 = *((unsigned __int8 *)a2 + 23);
  v14 = (int *)a2;
  v15 = v13;
  if (*((char *)a2 + 23) < 0)
  {
LABEL_36:
    v15 = a2[1];
    if (v15 < 0)
      goto LABEL_90;
    v14 = (int *)*a2;
    if (v15)
    {
      if (!v14)
        goto LABEL_90;
    }
  }
LABEL_43:
  if (v15 == 5)
  {
    v39 = *v14;
    v40 = *((unsigned __int8 *)v14 + 4);
    if (v39 == *(_DWORD *)"audio" && v40 == cricket::kMediaTypeAudio[4])
    {
      v54 = *(_QWORD *)(a1[8] + 40);
      rtc::CreateRandomUuid(&__p);
      v55 = a1[69];
      v56 = (*(uint64_t (**)(_QWORD *))(*a1 + 744))(a1);
      v57 = operator new();
      v58 = webrtc::AudioRtpSender::AudioRtpSender(v57, v54, (__int128 *)&__p, v55, v56);
      *(_QWORD *)v58 = &unk_24C0BD698;
      *(_QWORD *)(v58 + 8) = &unk_24C0BD738;
      v59 = v58 + 8;
      *(_QWORD *)(v58 + 16) = &unk_24C0BD8B0;
      *(_QWORD *)(v58 + 24) = &unk_24C0BD8D8;
      v60 = (unsigned int *)(v58 + 456);
      *(_DWORD *)(v58 + 456) = 0;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v62 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD *))(*a1 + 744))(a1);
      webrtc::RtpTransmissionManager::GetAudioTransceiver(v62, &__p);
      v63 = *(_QWORD *)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16) + 160);
      (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))(__p.__r_.__value_.__r.__words[0]);
      if (v63)
        v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 56))(v63);
      else
        v64 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 184))(v59, v64);
      v70 = *(_QWORD *)(a1[8] + 48);
      (**(void (***)(uint64_t))v59)(v59);
      v71 = operator new();
      *(_QWORD *)(v71 + 16) = v70;
      *(_QWORD *)(v71 + 24) = v59;
      *(_QWORD *)v71 = &unk_24C0B9408;
      *(_QWORD *)(v71 + 8) = &unk_24C0B94D8;
      *(_DWORD *)(v71 + 32) = 0;
      v72 = (unsigned int *)(v71 + 32);
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
      v74 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD *))(*a1 + 744))(a1);
      webrtc::RtpTransmissionManager::GetAudioTransceiver(v74, &__p);
      v75 = __p.__r_.__value_.__r.__words[0];
      v76 = *(_QWORD **)(__p.__r_.__value_.__r.__words[0] + 16);
      v87 = (void (***)(_QWORD))v71;
      (**(void (***)(uint64_t))v71)(v71);
      webrtc::RtpTransceiver::AddSender(v76, &v87);
      v77 = v87;
      if (!v87)
      {
LABEL_76:
        (*(void (**)(std::string::size_type))(*(_QWORD *)v75 + 8))(v75);
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v71 + 24) + 200))(*(_QWORD *)(v71 + 24), &v89);
        *a4 = v71;
        v53 = (std::string *)v89;
        if (!v89)
          return;
        goto LABEL_77;
      }
LABEL_75:
      (*v77)[1](v77);
      goto LABEL_76;
    }
  }
  v42 = (int *)a2;
  if ((v13 & 0x80) != 0)
  {
    v13 = a2[1];
    if (v13 < 0 || (v42 = (int *)*a2, v13) && !v42)
    {
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
  }
  if (v13 == 5)
  {
    v43 = *v42;
    v44 = *((unsigned __int8 *)v42 + 4);
    if (v43 == *(_DWORD *)"video" && v44 == cricket::kMediaTypeVideo[4])
    {
      v65 = *(_QWORD *)(a1[8] + 40);
      rtc::CreateRandomUuid(&__p);
      v66 = (*(uint64_t (**)(_QWORD *))(*a1 + 744))(a1);
      webrtc::VideoRtpSender::Create(v65, (uint64_t)&__p, v66, &v86);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v59 = v86;
      v67 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD *))(*a1 + 744))(a1);
      webrtc::RtpTransmissionManager::GetVideoTransceiver(v67, &__p);
      v68 = *(_QWORD *)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16) + 160);
      (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))(__p.__r_.__value_.__r.__words[0]);
      if (v68)
        v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 48))(v68);
      else
        v69 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 184))(v59, v69);
      v80 = *(_QWORD *)(a1[8] + 48);
      (**(void (***)(uint64_t))v59)(v59);
      v71 = operator new();
      *(_QWORD *)(v71 + 16) = v80;
      *(_QWORD *)(v71 + 24) = v59;
      *(_QWORD *)v71 = &unk_24C0B9408;
      *(_QWORD *)(v71 + 8) = &unk_24C0B94D8;
      *(_DWORD *)(v71 + 32) = 0;
      v81 = (unsigned int *)(v71 + 32);
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
      v83 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(_QWORD *))(*a1 + 744))(a1);
      webrtc::RtpTransmissionManager::GetVideoTransceiver(v83, &__p);
      v75 = __p.__r_.__value_.__r.__words[0];
      v84 = *(_QWORD **)(__p.__r_.__value_.__r.__words[0] + 16);
      v85 = (void (***)(_QWORD))v71;
      (**(void (***)(uint64_t))v71)(v71);
      webrtc::RtpTransceiver::AddSender(v84, &v85);
      v77 = v85;
      if (!v85)
        goto LABEL_76;
      goto LABEL_75;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v46, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  *a4 = 0;
  v53 = (std::string *)v89;
  if (v89)
  {
LABEL_77:
    v78 = v90;
    v79 = v53;
    if (v90 != v53)
    {
      do
      {
        if (SHIBYTE(v78[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v78[-1].__r_.__value_.__l.__data_);
        --v78;
      }
      while (v78 != v53);
      v79 = v89;
    }
    v90 = v53;
    operator delete(v79);
  }
}

void webrtc::PeerConnection::GetSenders(webrtc::PeerConnection *this@<X0>, char **a2@<X8>)
{
  webrtc::RtpTransmissionManager *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  void (***v8)(_QWORD);
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *__p;
  _QWORD *v41;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(_QWORD *)(*((_QWORD *)this + 8) + 96))
  {
    v3 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(webrtc::PeerConnection *))(*(_QWORD *)this + 752))(this);
    webrtc::RtpTransmissionManager::GetSendersInternal(v3, (char **)&__p);
    v4 = __p;
    v5 = v41;
    if (__p != v41)
    {
      v6 = 0;
      v7 = 0;
      while (1)
      {
        while (1)
        {
          v8 = (void (***)(_QWORD))*v4;
          if (*v4)
            (**v8)(*v4);
          v9 = (unint64_t)a2[2];
          if ((unint64_t)v6 >= v9)
            break;
          if (!v6)
            goto LABEL_49;
          *(_QWORD *)v6 = v8;
          v6 += 8;
          a2[1] = v6;
          if (++v4 == v5)
          {
LABEL_39:
            v4 = __p;
            goto LABEL_40;
          }
        }
        v10 = v6 - v7;
        v11 = (v6 - v7) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_50;
        v13 = v9 - (_QWORD)v7;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
        v15 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v14)
          v15 = v12;
        if (!v15)
        {
LABEL_49:
          __break(1u);
LABEL_50:
          abort();
        }
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v16 = 8 * v15;
        v17 = (char *)operator new(8 * v15);
        v18 = &v17[v16];
        v19 = &v17[8 * v11];
        *(_QWORD *)v19 = v8;
        v20 = v19 + 8;
        v21 = v6 - v7;
        if (v6 != v7)
          break;
        *a2 = v19;
        a2[1] = v20;
        a2[2] = v18;
LABEL_27:
        if (v7)
          operator delete(v7);
        v7 = v19;
        a2[1] = v20;
        ++v4;
        v6 = v20;
        if (v4 == v5)
          goto LABEL_39;
      }
      v22 = v21 - 8;
      if ((unint64_t)(v21 - 8) >= 0x138)
      {
        v27 = v6 - 8 - v7;
        if (&v6[-(v27 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
        {
          v23 = v6;
        }
        else if (&v17[v10 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v17[v10 - 8])
        {
          v23 = v6;
        }
        else
        {
          v28 = v27 & 0xFFFFFFFFFFFFFFF8;
          if (&v6[-v28 - 8] >= v19 || (v23 = v6, &v17[v10 - v28 - 8] >= v6))
          {
            v29 = (v22 >> 3) + 1;
            v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
            v23 = &v6[-v30];
            v19 -= v30;
            v31 = &v17[8 * v11 - 16];
            v32 = v6 - 16;
            v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v35 = *((_OWORD *)v32 - 1);
              v34 = *(_OWORD *)v32;
              *((_OWORD *)v32 - 1) = 0uLL;
              *(_OWORD *)v32 = 0uLL;
              *((_OWORD *)v31 - 1) = v35;
              *(_OWORD *)v31 = v34;
              v31 -= 32;
              v32 -= 32;
              v33 -= 4;
            }
            while (v33);
            if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_22:
              *a2 = v19;
              a2[1] = v20;
              a2[2] = v18;
              do
              {
                v26 = *((_QWORD *)v6 - 1);
                v6 -= 8;
                v25 = v26;
                if (v26)
                  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
              }
              while (v6 != v7);
              goto LABEL_27;
            }
          }
        }
      }
      else
      {
        v23 = v6;
      }
      do
      {
        v24 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v19 - 1) = v24;
        v19 -= 8;
      }
      while (v23 != v7);
      goto LABEL_22;
    }
LABEL_40:
    if (v4)
    {
      v36 = v41;
      v37 = v4;
      if (v41 != v4)
      {
        do
        {
          v39 = *--v36;
          v38 = v39;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
        }
        while (v36 != v4);
        v37 = __p;
      }
      v41 = v4;
      operator delete(v37);
    }
  }
}

void webrtc::PeerConnection::GetReceivers(webrtc::PeerConnection *this@<X0>, char **a2@<X8>)
{
  webrtc::RtpTransmissionManager *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  void (***v8)(_QWORD);
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *__p;
  _QWORD *v41;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(_QWORD *)(*((_QWORD *)this + 8) + 96))
  {
    v3 = (webrtc::RtpTransmissionManager *)(*(uint64_t (**)(webrtc::PeerConnection *))(*(_QWORD *)this + 752))(this);
    webrtc::RtpTransmissionManager::GetReceiversInternal(v3, (char **)&__p);
    v4 = __p;
    v5 = v41;
    if (__p != v41)
    {
      v6 = 0;
      v7 = 0;
      while (1)
      {
        while (1)
        {
          v8 = (void (***)(_QWORD))*v4;
          if (*v4)
            (**v8)(*v4);
          v9 = (unint64_t)a2[2];
          if ((unint64_t)v6 >= v9)
            break;
          if (!v6)
            goto LABEL_49;
          *(_QWORD *)v6 = v8;
          v6 += 8;
          a2[1] = v6;
          if (++v4 == v5)
          {
LABEL_39:
            v4 = __p;
            goto LABEL_40;
          }
        }
        v10 = v6 - v7;
        v11 = (v6 - v7) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_50;
        v13 = v9 - (_QWORD)v7;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
        v15 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v14)
          v15 = v12;
        if (!v15)
        {
LABEL_49:
          __break(1u);
LABEL_50:
          abort();
        }
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v16 = 8 * v15;
        v17 = (char *)operator new(8 * v15);
        v18 = &v17[v16];
        v19 = &v17[8 * v11];
        *(_QWORD *)v19 = v8;
        v20 = v19 + 8;
        v21 = v6 - v7;
        if (v6 != v7)
          break;
        *a2 = v19;
        a2[1] = v20;
        a2[2] = v18;
LABEL_27:
        if (v7)
          operator delete(v7);
        v7 = v19;
        a2[1] = v20;
        ++v4;
        v6 = v20;
        if (v4 == v5)
          goto LABEL_39;
      }
      v22 = v21 - 8;
      if ((unint64_t)(v21 - 8) >= 0x138)
      {
        v27 = v6 - 8 - v7;
        if (&v6[-(v27 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
        {
          v23 = v6;
        }
        else if (&v17[v10 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v17[v10 - 8])
        {
          v23 = v6;
        }
        else
        {
          v28 = v27 & 0xFFFFFFFFFFFFFFF8;
          if (&v6[-v28 - 8] >= v19 || (v23 = v6, &v17[v10 - v28 - 8] >= v6))
          {
            v29 = (v22 >> 3) + 1;
            v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
            v23 = &v6[-v30];
            v19 -= v30;
            v31 = &v17[8 * v11 - 16];
            v32 = v6 - 16;
            v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v35 = *((_OWORD *)v32 - 1);
              v34 = *(_OWORD *)v32;
              *((_OWORD *)v32 - 1) = 0uLL;
              *(_OWORD *)v32 = 0uLL;
              *((_OWORD *)v31 - 1) = v35;
              *(_OWORD *)v31 = v34;
              v31 -= 32;
              v32 -= 32;
              v33 -= 4;
            }
            while (v33);
            if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_22:
              *a2 = v19;
              a2[1] = v20;
              a2[2] = v18;
              do
              {
                v26 = *((_QWORD *)v6 - 1);
                v6 -= 8;
                v25 = v26;
                if (v26)
                  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
              }
              while (v6 != v7);
              goto LABEL_27;
            }
          }
        }
      }
      else
      {
        v23 = v6;
      }
      do
      {
        v24 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v19 - 1) = v24;
        v19 -= 8;
      }
      while (v23 != v7);
      goto LABEL_22;
    }
LABEL_40:
    if (v4)
    {
      v36 = v41;
      v37 = v4;
      if (v41 != v4)
      {
        do
        {
          v39 = *--v36;
          v38 = v39;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
        }
        while (v36 != v4);
        v37 = __p;
      }
      v41 = v4;
      operator delete(v37);
    }
  }
}

void webrtc::PeerConnection::GetTransceivers(webrtc::PeerConnection *this@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (***v14)(_QWORD);
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  void (***v19)(_QWORD);
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::string *v49;
  _QWORD *v50;
  uint64_t v51;

  if (((*(uint64_t (**)(webrtc::PeerConnection *))(*(_QWORD *)this + 832))(this) & 1) != 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (*(_QWORD *)(*((_QWORD *)this + 8) + 96))
    {
      v8 = (*(uint64_t (**)(webrtc::PeerConnection *))(*(_QWORD *)this + 752))(this);
      v9 = *(_QWORD *)(v8 + 8);
      v10 = *(_QWORD *)(v8 + 16);
      v11 = v10 - v9;
      if (v10 != v9)
      {
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_53;
        v12 = operator new(v11);
        v13 = 0;
        do
        {
          v14 = *(void (****)(_QWORD))(v9 + v13);
          v12[(unint64_t)v13 / 8] = v14;
          if (v14)
            (**v14)(v14);
          v13 += 8;
        }
        while (v9 + v13 != v10);
        if (v13)
        {
          v15 = 0;
          v16 = 0;
          v50 = v12;
          v51 = v13 >> 3;
          v17 = (_QWORD *)((char *)v12 + (v13 & 0xFFFFFFFFFFFFFFF8));
          v18 = v12;
          while (1)
          {
            while (1)
            {
              v19 = (void (***)(_QWORD))*v18;
              if (*v18)
                (**v19)(*v18);
              v20 = (unint64_t)a2[2];
              if ((unint64_t)v15 >= v20)
                break;
              if (!v15)
                goto LABEL_52;
              *(_QWORD *)v15 = v19;
              v15 += 8;
              a2[1] = v15;
              if (++v18 == v17)
              {
LABEL_47:
                v12 = v50;
                v47 = v51;
                do
                {
                  v48 = v50[v47 - 1];
                  if (v48)
                    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
                  --v47;
                }
                while (v47 * 8);
                goto LABEL_51;
              }
            }
            v21 = v15 - v16;
            v22 = (v15 - v16) >> 3;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 61)
              goto LABEL_53;
            v24 = v20 - (_QWORD)v16;
            if (v24 >> 2 > v23)
              v23 = v24 >> 2;
            v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8;
            v26 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v25)
              v26 = v23;
            if (!v26)
            {
LABEL_52:
              __break(1u);
LABEL_53:
              abort();
            }
            if (v26 >> 61)
              std::__throw_bad_array_new_length[abi:sn180100]();
            v27 = 8 * v26;
            v28 = (char *)operator new(8 * v26);
            v29 = &v28[v27];
            v30 = &v28[8 * v22];
            *(_QWORD *)v30 = v19;
            v31 = v30 + 8;
            v32 = v15 - v16;
            if (v15 != v16)
              break;
            *a2 = v30;
            a2[1] = v31;
            a2[2] = v29;
LABEL_30:
            if (v16)
              operator delete(v16);
            v16 = v30;
            a2[1] = v31;
            ++v18;
            v15 = v31;
            if (v18 == v17)
              goto LABEL_47;
          }
          v33 = v32 - 8;
          if ((unint64_t)(v32 - 8) >= 0x138)
          {
            v35 = v15 - 8 - v16;
            if (&v15[-(v35 & 0xFFFFFFFFFFFFFFF8) - 8] > v15 - 8)
            {
              v34 = v15;
            }
            else if (&v28[v21 - 8 - (v35 & 0xFFFFFFFFFFFFFFF8)] > &v28[v21 - 8])
            {
              v34 = v15;
            }
            else
            {
              v36 = v35 & 0xFFFFFFFFFFFFFFF8;
              if (&v15[-v36 - 8] >= v30 || (v34 = v15, &v28[v21 - v36 - 8] >= v15))
              {
                v37 = (v33 >> 3) + 1;
                v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
                v34 = &v15[-v38];
                v30 -= v38;
                v39 = &v28[8 * v22 - 16];
                v40 = v15 - 16;
                v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v43 = *((_OWORD *)v40 - 1);
                  v42 = *(_OWORD *)v40;
                  *((_OWORD *)v40 - 1) = 0uLL;
                  *(_OWORD *)v40 = 0uLL;
                  *((_OWORD *)v39 - 1) = v43;
                  *(_OWORD *)v39 = v42;
                  v39 -= 32;
                  v40 -= 32;
                  v41 -= 4;
                }
                while (v41);
                if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_43:
                  *a2 = v30;
                  a2[1] = v31;
                  a2[2] = v29;
                  do
                  {
                    v46 = *((_QWORD *)v15 - 1);
                    v15 -= 8;
                    v45 = v46;
                    if (v46)
                      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
                  }
                  while (v15 != v16);
                  goto LABEL_30;
                }
              }
            }
          }
          else
          {
            v34 = v15;
          }
          do
          {
            v44 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *(_QWORD *)v34 = 0;
            *((_QWORD *)v30 - 1) = v44;
            v30 -= 8;
          }
          while (v34 != v16);
          goto LABEL_43;
        }
LABEL_51:
        operator delete(v12);
      }
    }
  }
  else
  {
    v49 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc", 1276, "IsUnifiedPlan()", "\t", v4, v5, v6, v7, (uint64_t)"GetTransceivers is only supported with Unified Plan SdpSemantics.");
    webrtc::PeerConnection::GetStats(v49);
  }
}

uint64_t webrtc::PeerConnection::GetStats(uint64_t a1, void (***a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  char v37;
  void *__p[2];
  uint64_t (*v39)(uint64_t, uint64_t *, void **);
  uint64_t (*v40)(uint64_t);

  if (a2)
  {
    webrtc::LegacyStatsCollector::UpdateStats(*(double **)(a1 + 552));
    if (!a3)
    {
LABEL_19:
      v22 = *(_QWORD *)(a1 + 552);
      v23 = *(_QWORD *)(a1 + 840);
      v24 = *(unsigned int **)(a1 + 832);
      if (v24)
      {
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      (**a2)(a2);
      if (a3)
        (**(void (***)(uint64_t))a3)(a3);
      v26 = (_QWORD *)operator new();
      *v26 = a2;
      v26[1] = v22;
      v26[2] = a3;
      v27 = (_QWORD *)operator new();
      *v27 = v24;
      v27[1] = v26;
      v27[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostGetStats(webrtc::StatsObserver *,webrtc::LegacyStatsCollectorInterface *,webrtc::MediaStreamTrackInterface *)::$_0>;
      v27[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostGetStats(webrtc::StatsObserver *,webrtc::LegacyStatsCollectorInterface *,webrtc::MediaStreamTrackInterface *)::$_0 &&>;
      __p[0] = v27;
      v39 = (uint64_t (*)(uint64_t, uint64_t *, void **))_ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
      v40 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
      (*(void (**)(uint64_t, void **, char *, char *))(*(_QWORD *)v23 + 8))(v23, __p, &v37, &v36);
      v16 = 1;
      v39(1, (uint64_t *)__p, __p);
      return v16;
    }
    v6 = *(_QWORD *)(a1 + 552);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a3 + 40))(__p, a3);
    v7 = operator new();
    *(_DWORD *)(v7 + 8) = 7;
    *(_QWORD *)v7 = &unk_24C0B5B70;
    v8 = (std::string *)(v7 + 16);
    if (SHIBYTE(v39) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 32) = v39;
    }
    v17 = v6 + 8;
    *(_QWORD *)v7 = off_24C0B5B28;
    *(_DWORD *)(v7 + 40) = 0;
    v18 = (unsigned int *)(v7 + 40);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v20 = *(_QWORD *)(v6 + 16);
    if (v20 == v17)
      goto LABEL_17;
    while (((*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v20 + 16) + 40))(**(_QWORD **)(v20 + 16), v7) & 1) == 0)
    {
      v20 = *(_QWORD *)(v20 + 8);
      if (v20 == v17)
        goto LABEL_17;
    }
    if (v20 == v17)
    {
LABEL_17:
      v21 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      if (SHIBYTE(v39) < 0)
        goto LABEL_24;
    }
    else
    {
      v21 = *(_QWORD *)(v20 + 16) != 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      if (SHIBYTE(v39) < 0)
      {
LABEL_24:
        operator delete(__p[0]);
        if (!v21)
          goto LABEL_25;
        goto LABEL_19;
      }
    }
    if (!v21)
    {
LABEL_25:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a3 + 40))(__p, a3);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
        if (SHIBYTE(v39) < 0)
          operator delete(__p[0]);
      }
      return 0;
    }
    goto LABEL_19;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    return 0;
  rtc::webrtc_logging_impl::Log("\r\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  return 0;
}

uint64_t webrtc::PeerConnection::GetStats(uint64_t a1, void (***a2)(_QWORD))
{
  uint64_t v3;
  uint64_t result;
  int v5;
  void (***v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 560);
  if (a2)
    (**a2)(a2);
  v5 = 0;
  v7 = 0;
  v8 = 0;
  v6 = a2;
  webrtc::RTCStatsCollector::GetStatsReportInternal(v3, (uint64_t)&v5);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  result = (uint64_t)v6;
  if (v6)
    return ((uint64_t (*)(_QWORD))(*v6)[1])(v6);
  return result;
}

uint64_t webrtc::PeerConnection::GetStats(_QWORD *a1, uint64_t *a2, void (****a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  void (***v12)(_QWORD);
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  void (***v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (***v31)(_QWORD);
  uint64_t result;
  uint64_t v33;
  int v34;
  void (***v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;

  if (!*a2
    || (v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 744))(a1),
        v7 = *(_QWORD *)(v6 + 8),
        v8 = *(_QWORD *)(v6 + 16),
        v9 = v8 - v7,
        v8 == v7))
  {
LABEL_38:
    v25 = 0;
    v29 = a1[70];
    v30 = 1;
    v31 = *a3;
    if (!v31)
      goto LABEL_40;
    goto LABEL_39;
  }
  if ((v9 & 0x8000000000000000) != 0)
LABEL_51:
    abort();
  v10 = (char *)operator new(v9);
  v11 = 0;
  do
  {
    v12 = *(void (****)(_QWORD))(v7 + v11);
    *(_QWORD *)&v10[v11] = v12;
    if (v12)
      (**v12)(v12);
    v11 += 8;
  }
  while (v7 + v11 != v8);
  if (!v11)
  {
    operator delete(v10);
    goto LABEL_38;
  }
  v33 = v11 >> 3;
  v13 = &v10[v11 & 0xFFFFFFFFFFFFFFF8];
  v14 = v10;
  do
  {
    v15 = *(_QWORD *)(*(_QWORD *)v14 + 16);
    v16 = *(_QWORD *)(v15 + 32);
    v17 = *(_QWORD *)(v15 + 40);
    v18 = v17 - v16;
    if (v17 != v16)
    {
      if ((v18 & 0x8000000000000000) != 0)
        goto LABEL_51;
      v19 = (char *)operator new(v18);
      v20 = 0;
      do
      {
        v21 = *(void (****)(_QWORD))(v16 + v20);
        *(_QWORD *)&v19[v20] = v21;
        if (v21)
          (**v21)(v21);
        v20 += 8;
      }
      while (v16 + v20 != v17);
      if (v20)
      {
        v22 = 0;
        v23 = *a2;
        v24 = 8 * (v20 >> 3);
        while (*(_QWORD *)&v19[v22] != v23)
        {
          v22 += 8;
          if (v24 == v22)
          {
            v25 = 0;
            goto LABEL_27;
          }
        }
        v25 = *(_QWORD *)(v23 + 24);
        if (v25)
          (**(void (***)(_QWORD))v25)(*(_QWORD *)(v23 + 24));
        do
        {
LABEL_27:
          v26 = *(_QWORD *)&v19[v24 - 8];
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          v24 -= 8;
        }
        while (v24);
        operator delete(v19);
        if (v25)
          goto LABEL_30;
      }
      else
      {
        operator delete(v19);
      }
    }
    v14 += 8;
  }
  while (v14 != v13);
  v25 = 0;
LABEL_30:
  v27 = 8 * v33;
  do
  {
    v28 = *(_QWORD *)&v10[v27 - 8];
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v27 -= 8;
  }
  while (v27);
  operator delete(v10);
  v29 = a1[70];
  if (v25)
  {
    (**(void (***)(uint64_t))v25)(v25);
    v30 = 0;
    v31 = *a3;
    if (!v31)
      goto LABEL_40;
LABEL_39:
    (**v31)(v31);
    goto LABEL_40;
  }
  v30 = 1;
  v31 = *a3;
  if (v31)
    goto LABEL_39;
LABEL_40:
  v34 = 1;
  v35 = v31;
  v36 = v25;
  v37 = 0;
  webrtc::RTCStatsCollector::GetStatsReportInternal(v29, (uint64_t)&v34);
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  result = (uint64_t)v35;
  if (v35)
    result = ((uint64_t (*)(_QWORD))(*v35)[1])(v35);
  if ((v30 & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  void (***v12)(_QWORD);
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  void (***v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (***v31)(_QWORD);
  uint64_t result;
  uint64_t v33;
  int v34;
  void (***v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;

  if (!*a2
    || (v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 744))(a1),
        v7 = *(_QWORD *)(v6 + 8),
        v8 = *(_QWORD *)(v6 + 16),
        v9 = v8 - v7,
        v8 == v7))
  {
LABEL_38:
    v25 = 0;
    v29 = a1[70];
    v30 = 1;
    v31 = *a3;
    if (!v31)
      goto LABEL_40;
    goto LABEL_39;
  }
  if ((v9 & 0x8000000000000000) != 0)
LABEL_51:
    abort();
  v10 = (char *)operator new(v9);
  v11 = 0;
  do
  {
    v12 = *(void (****)(_QWORD))(v7 + v11);
    *(_QWORD *)&v10[v11] = v12;
    if (v12)
      (**v12)(v12);
    v11 += 8;
  }
  while (v7 + v11 != v8);
  if (!v11)
  {
    operator delete(v10);
    goto LABEL_38;
  }
  v33 = v11 >> 3;
  v13 = &v10[v11 & 0xFFFFFFFFFFFFFFF8];
  v14 = v10;
  do
  {
    v15 = *(_QWORD *)(*(_QWORD *)v14 + 16);
    v16 = *(_QWORD *)(v15 + 56);
    v17 = *(_QWORD *)(v15 + 64);
    v18 = v17 - v16;
    if (v17 != v16)
    {
      if ((v18 & 0x8000000000000000) != 0)
        goto LABEL_51;
      v19 = (char *)operator new(v18);
      v20 = 0;
      do
      {
        v21 = *(void (****)(_QWORD))(v16 + v20);
        *(_QWORD *)&v19[v20] = v21;
        if (v21)
          (**v21)(v21);
        v20 += 8;
      }
      while (v16 + v20 != v17);
      if (v20)
      {
        v22 = 0;
        v23 = *a2;
        v24 = 8 * (v20 >> 3);
        while (*(_QWORD *)&v19[v22] != v23)
        {
          v22 += 8;
          if (v24 == v22)
          {
            v25 = 0;
            goto LABEL_27;
          }
        }
        v25 = *(_QWORD *)(v23 + 32);
        if (v25)
          (**(void (***)(_QWORD))v25)(*(_QWORD *)(v23 + 32));
        do
        {
LABEL_27:
          v26 = *(_QWORD *)&v19[v24 - 8];
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          v24 -= 8;
        }
        while (v24);
        operator delete(v19);
        if (v25)
          goto LABEL_30;
      }
      else
      {
        operator delete(v19);
      }
    }
    v14 += 8;
  }
  while (v14 != v13);
  v25 = 0;
LABEL_30:
  v27 = 8 * v33;
  do
  {
    v28 = *(_QWORD *)&v10[v27 - 8];
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v27 -= 8;
  }
  while (v27);
  operator delete(v10);
  v29 = a1[70];
  if (v25)
  {
    (**(void (***)(uint64_t))v25)(v25);
    v30 = 0;
    v31 = *a3;
    if (!v31)
      goto LABEL_40;
LABEL_39:
    (**v31)(v31);
    goto LABEL_40;
  }
  v30 = 1;
  v31 = *a3;
  if (v31)
    goto LABEL_39;
LABEL_40:
  v34 = 2;
  v35 = v31;
  v36 = 0;
  v37 = v25;
  webrtc::RTCStatsCollector::GetStatsReportInternal(v29, (uint64_t)&v34);
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  result = (uint64_t)v35;
  if (v35)
    result = ((uint64_t (*)(_QWORD))(*v35)[1])(v35);
  if ((v30 & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  return result;
}

uint64_t webrtc::PeerConnection::signaling_state(webrtc::PeerConnection *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 87) + 16))(*((_QWORD *)this + 87));
}

uint64_t webrtc::PeerConnection::ice_connection_state(webrtc::PeerConnection *this)
{
  return *((unsigned int *)this + 27);
}

uint64_t webrtc::PeerConnection::standardized_ice_connection_state(webrtc::PeerConnection *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t webrtc::PeerConnection::peer_connection_state(webrtc::PeerConnection *this)
{
  return *((unsigned int *)this + 29);
}

uint64_t webrtc::PeerConnection::ice_gathering_state(webrtc::PeerConnection *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t webrtc::PeerConnection::can_trickle_ice_candidates(webrtc::PeerConnection *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v11;
  int v12;

  v2 = (*(uint64_t (**)(webrtc::PeerConnection *))(*(_QWORD *)this + 232))(this);
  if (!v2)
  {
    v2 = (*(uint64_t (**)(webrtc::PeerConnection *))(*(_QWORD *)this + 248))(this);
    if (!v2)
      return 0;
  }
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  if (*(_QWORD *)(v3 + 32) == *(_QWORD *)(v3 + 24))
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v5 = *(_QWORD *)(result + 24);
  if (*(_QWORD *)(result + 32) == v5)
  {
LABEL_25:
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 24);
    v7 = *(_QWORD *)(v5 + 32);
    if (v6 != v7)
    {
      do
      {
        if (*(char *)(v6 + 23) < 0)
        {
          v8 = *(_QWORD *)(v6 + 8);
          if (v8 < 0)
            goto LABEL_25;
          v9 = *(int **)v6;
          if (v8 && v9 == 0)
            goto LABEL_25;
        }
        else
        {
          v8 = *(unsigned __int8 *)(v6 + 23);
          v9 = (int *)v6;
        }
        if (v8 == 7)
        {
          v11 = *v9;
          v12 = *(int *)((char *)v9 + 3);
          if (v11 == 1667854964 && v12 == 1701604195)
            return (v6 != v7) | 0x100u;
        }
        v6 += 24;
      }
      while (v6 != v7);
      v6 = v7;
    }
    return (v6 != v7) | 0x100u;
  }
  return result;
}

void webrtc::PeerConnection::CreateDataChannelOrError(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *__p[2];
  _BYTE v24[24];
  uint64_t v25;
  _QWORD v26[4];
  __int128 v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[13];
  uint64_t v32;
  char v33;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 688))(a1))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      *(_QWORD *)&v27 = "INVALID_STATE";
      *((_QWORD *)&v27 + 1) = 13;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    v15 = (char *)operator new(0x38uLL);
    if (v15 > "CreateDataChannelOrError: PeerConnection is closed."
      || v15 + 51 <= "CreateDataChannelOrError: PeerConnection is closed.")
    {
      strcpy(v15, "CreateDataChannelOrError: PeerConnection is closed.");
      *(_DWORD *)a4 = 6;
      *(_QWORD *)(a4 + 8) = v15;
      *(_OWORD *)(a4 + 16) = xmmword_208F0B3E0;
      *(_DWORD *)(a4 + 32) = 0;
      *(_BYTE *)(a4 + 36) = 0;
      *(_BYTE *)(a4 + 38) = 0;
      *(_BYTE *)(a4 + 40) = 0;
      *(_BYTE *)(a4 + 48) = 0;
      return;
    }
    goto LABEL_30;
  }
  v16 = *(unsigned __int8 *)(a1 + 792);
  LOWORD(v27) = 256;
  BYTE4(v27) = 0;
  BYTE8(v27) = 0;
  BYTE12(v27) = 0;
  v28 = 0;
  v30 = 0;
  v29 = 0uLL;
  v31[0] = 0;
  *(_DWORD *)&v31[4] = -1;
  v31[8] = 0;
  v31[12] = 0;
  LODWORD(v32) = 0;
  if (a3)
  {
    webrtc::InternalDataChannelInit::InternalDataChannelInit((uint64_t)__p, a3);
    v27 = *(_OWORD *)__p;
    v28 = v24[0];
    v29 = *(_OWORD *)&v24[8];
    v30 = v25;
    *(_QWORD *)v31 = v26[0];
    *(_QWORD *)&v31[5] = *(_QWORD *)((char *)v26 + 5);
    v32 = v26[2];
  }
  v17 = *(_QWORD *)(a1 + 696);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v17 + 8) + 32))(__p);
  if (v24[8])
  {
    if ((v24[7] & 0x80000000) != 0)
      operator delete(__p[0]);
    v18 = (*(unsigned __int16 *)(v17 + 68) > 0xFFu) | 0x100000000;
  }
  else
  {
    v18 = 0;
  }
  HIDWORD(v32) = v18;
  v33 = BYTE4(v18);
  webrtc::DataChannelController::InternalCreateDataChannelWithProxy(a1 + 720, a2, &v27, (uint64_t)__p);
  v19 = (int)__p[0];
  if (LODWORD(__p[0]))
  {
    v20 = *(_QWORD *)v24;
    *(void **)(a4 + 8) = __p[1];
    *(_QWORD *)(a4 + 16) = v20;
    *(_QWORD *)(a4 + 23) = *(_QWORD *)&v24[7];
    *(_DWORD *)(a4 + 32) = *(_DWORD *)&v24[16];
    *(_DWORD *)(a4 + 35) = *(_DWORD *)&v24[19];
    LOBYTE(v20) = v24[15];
    *(_QWORD *)v24 = 0;
    *(_QWORD *)&v24[8] = 0;
    __p[1] = 0;
    *(_DWORD *)a4 = v19;
    *(_BYTE *)(a4 + 31) = v20;
    *(_BYTE *)(a4 + 40) = 0;
    *(_BYTE *)(a4 + 48) = 0;
    if (!LOBYTE(v26[0]))
      goto LABEL_25;
    goto LABEL_23;
  }
  if (!LOBYTE(v26[0]))
  {
LABEL_30:
    __break(1u);
    return;
  }
  v21 = v25;
  v25 = 0;
  v22 = *(_DWORD *)(a1 + 360);
  if (v22 == 1 || !v22 && !v16)
    webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded(*(webrtc::SdpOfferAnswerHandler **)(a1 + 696));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 808))(a1, 4);
  *(_DWORD *)a4 = 0;
  *(_BYTE *)(a4 + 38) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 29) = 0;
  *(_QWORD *)(a4 + 40) = v21;
  *(_BYTE *)(a4 + 48) = 1;
  if (LOBYTE(v26[0]))
  {
LABEL_23:
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
LABEL_25:
  if ((v24[15] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete((void *)v29);
    return;
  }
  operator delete(__p[1]);
  if (SHIBYTE(v30) < 0)
    goto LABEL_29;
}

uint64_t webrtc::PeerConnection::RestartIce(webrtc::PeerConnection *this)
{
  webrtc::SdpOfferAnswerHandler *v1;
  uint64_t v2;
  const webrtc::SessionDescriptionInterface *v3;
  const webrtc::SessionDescriptionInterface *v4;

  v1 = (webrtc::SdpOfferAnswerHandler *)*((_QWORD *)this + 87);
  v2 = *((_QWORD *)v1 + 25);
  v3 = (const webrtc::SessionDescriptionInterface *)(*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)v1 + 40))(v1);
  v4 = (const webrtc::SessionDescriptionInterface *)(*(uint64_t (**)(webrtc::SdpOfferAnswerHandler *))(*(_QWORD *)v1 + 56))(v1);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = v2 + 8;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if (v3)
    webrtc::SdpOfferAnswerHandler::LocalIceCredentialsToReplace::AppendIceCredentialsFromSessionDescription((uint64_t **)v2, v3);
  if (v4)
    webrtc::SdpOfferAnswerHandler::LocalIceCredentialsToReplace::AppendIceCredentialsFromSessionDescription((uint64_t **)v2, v4);
  return webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded(v1);
}

void webrtc::PeerConnection::CreateOffer(uint64_t a1, void (***a2)(_QWORD), __int128 *a3)
{
  webrtc::SdpOfferAnswerHandler::CreateOffer(*(_QWORD **)(a1 + 696), a2, a3);
}

void webrtc::PeerConnection::CreateAnswer(uint64_t a1, void (***a2)(_QWORD), __int128 *a3)
{
  webrtc::SdpOfferAnswerHandler::CreateAnswer(*(_QWORD **)(a1 + 696), a2, a3);
}

void webrtc::PeerConnection::SetLocalDescription(uint64_t a1, void (***a2)(_QWORD), uint64_t a3)
{
  webrtc::SdpOfferAnswerHandler::SetLocalDescription(*(_QWORD **)(a1 + 696), a2, a3);
}

uint64_t webrtc::PeerConnection::SetLocalDescription(uint64_t a1, uint64_t *a2, void (****a3)(_QWORD))
{
  _QWORD *v3;
  uint64_t v4;
  void (***v5)(_QWORD);
  uint64_t result;
  void (***v7)(_QWORD);
  uint64_t v8;

  v3 = *(_QWORD **)(a1 + 696);
  v4 = *a2;
  *a2 = 0;
  v5 = *a3;
  v7 = v5;
  v8 = v4;
  if (v5)
    (**v5)(v5);
  webrtc::SdpOfferAnswerHandler::SetLocalDescription(v3, &v8, &v7);
  if (v7)
    (*v7)[1](v7);
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t webrtc::PeerConnection::SetLocalDescription(uint64_t a1, void (***a2)(_QWORD))
{
  return webrtc::SdpOfferAnswerHandler::SetLocalDescription(*(_QWORD **)(a1 + 696), a2);
}

void (***webrtc::PeerConnection::SetLocalDescription(uint64_t a1, void (****a2)(_QWORD)))(_QWORD)
{
  _QWORD *v2;
  void (***v3)(_QWORD);
  void (***result)(_QWORD);
  void (***v5)(_QWORD);

  v2 = *(_QWORD **)(a1 + 696);
  v3 = *a2;
  v5 = v3;
  if (v3)
    (**v3)(v3);
  webrtc::SdpOfferAnswerHandler::SetLocalDescription(v2, &v5);
  result = v5;
  if (v5)
    return (void (***)(_QWORD))((uint64_t (*)(_QWORD))(*v5)[1])(v5);
  return result;
}

void webrtc::PeerConnection::SetRemoteDescription(uint64_t a1, void (***a2)(_QWORD), uint64_t a3)
{
  webrtc::SdpOfferAnswerHandler::SetRemoteDescription(*(_QWORD **)(a1 + 696), a2, a3);
}

uint64_t webrtc::PeerConnection::SetRemoteDescription(uint64_t a1, uint64_t *a2, void (****a3)(_QWORD))
{
  _QWORD *v3;
  uint64_t v4;
  void (***v5)(_QWORD);
  uint64_t result;
  void (***v7)(_QWORD);
  uint64_t v8;

  v3 = *(_QWORD **)(a1 + 696);
  v4 = *a2;
  *a2 = 0;
  v5 = *a3;
  v7 = v5;
  v8 = v4;
  if (v5)
    (**v5)(v5);
  webrtc::SdpOfferAnswerHandler::SetRemoteDescription(v3, &v8, &v7);
  if (v7)
    (*v7)[1](v7);
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

webrtc::PeerConnectionInterface::RTCConfiguration *webrtc::PeerConnection::GetConfiguration@<X0>(webrtc::PeerConnection *this@<X0>, webrtc::PeerConnectionInterface::RTCConfiguration *a2@<X8>)
{
  return webrtc::PeerConnectionInterface::RTCConfiguration::RTCConfiguration(a2, (webrtc::PeerConnection *)((char *)this + 128));
}

void webrtc::PeerConnection::SetConfiguration(webrtc::PeerConnection *this@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  _WORD *v3;
  const char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  const std::string::value_type *v49;
  size_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  char *v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  std::string *v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  char v71;
  char v72;
  char v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  unsigned int v79;
  BOOL v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  _BOOL4 v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  char v93;
  BOOL v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  void **v106;
  void **v107;
  void *v108;
  int v109;
  _BOOL4 v110;
  BOOL v111;
  unsigned int v112;
  int v113;
  char v114;
  BOOL v115;
  unsigned int v116;
  int v117;
  int v118;
  char v119;
  int v120;
  uint64_t v121;
  BOOL v122;
  char v123;
  const char *v124;
  void *v125[2];
  char ***v126;
  void **v127;
  _BYTE *v128;
  BOOL v129;
  void *v130;
  void **v131;
  uint64_t v132;
  char **v133;
  char *v134[2];
  _WORD v135[19];
  char v136;
  _BYTE v137[352];
  unsigned __int8 v138;
  unsigned __int8 *v139;
  uint64_t v140;
  char v141;
  int v142;
  int v143;
  int v144;
  char v145;
  char v146;
  char v147;
  _QWORD *v148;
  uint64_t v149;
  char v150;
  int v151;
  unsigned __int8 v152;
  int v153;
  unsigned __int8 v154;
  int v155;
  char v156;
  int v157;
  int v158;
  int v159;
  unsigned __int8 v160;
  int v161;
  int v162;
  int v163;
  int v164;
  unsigned __int8 v165;
  unsigned __int8 v166[24];
  unsigned __int8 v167;
  int v168;
  unsigned __int8 v169;
  unsigned __int8 v170;
  unsigned __int8 v171;
  unsigned __int8 v172;
  int v173;
  char v174;
  int v175;
  char v176;
  int v177;
  char v178;
  int v179;
  char v180;
  int v181;
  char v182;
  int v183;
  char v184;
  int v185;
  char v186;
  unsigned __int8 *v187;
  int v188;
  char v189;
  int v190;
  unsigned __int8 v191;
  unsigned __int8 v192;
  unsigned __int8 v193;
  unsigned __int8 v194;
  unsigned __int8 v195;
  unsigned __int8 v196;
  char v197;
  unsigned __int8 v198;
  std::string v199;
  unsigned __int8 v200;
  int v201;
  char v202;
  int v203;
  char v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  int v210;
  unsigned __int8 *v211;
  unsigned __int8 v212;
  char v213[23];
  char v214;

  v5 = (const char *)this;
  if (!(*(unsigned int (**)(webrtc::PeerConnection *))(*(_QWORD *)this + 688))(this))
  {
    v17 = (*(uint64_t (**)(const char *))(*(_QWORD *)v5 + 208))(v5);
    v18 = v17 != 0;
    v19 = *((_DWORD *)a2 + 16);
    if (v17)
    {
      v20 = *((_DWORD *)v5 + 48);
      v21 = v20 & 0xFFFFFF00;
      if (HIWORD(v19))
      {
LABEL_9:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 4;
LABEL_31:
        *(_DWORD *)a3 = v26;
        *(_QWORD *)(a3 + 8) = v25;
        *(_QWORD *)(a3 + 16) = v24;
        *(_QWORD *)(a3 + 24) = v23 | v22;
        goto LABEL_32;
      }
    }
    else
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      if (HIWORD(v19))
        goto LABEL_9;
    }
    v27 = v21 | v20;
    if (v17)
      v28 = v27 == v19;
    else
      v28 = 1;
    if (!v28)
    {
      v33 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>();
      v5 = "Can't change candidate pool size after calling SetLocalDescription.";
      if ((v33 & 1) == 0)
      {
        *(_QWORD *)v135 = "INVALID_MODIFICATION";
        *(_QWORD *)&v135[4] = 20;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v34, v35, v36, v37, v38, v39, v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      }
      v25 = (char *)operator new(0x48uLL);
      if (v25 <= "Can't change candidate pool size after calling SetLocalDescription.")
      {
        v16 = (_DWORD)v25 + 67;
        if (v25 + 67 > "Can't change candidate pool size after calling SetLocalDescription.")
          goto LABEL_221;
      }
      strcpy(v25, "Can't change candidate pool size after calling SetLocalDescription.");
      v26 = 7;
      v22 = 0x8000000000000000;
      v24 = 67;
      v23 = 72;
      goto LABEL_31;
    }
    if (v17)
    {
      if (*((_BYTE *)a2 + 242) && v5[370])
      {
        if (!webrtc::CryptoOptions::operator!=((unsigned __int8 *)a2 + 237, (unsigned __int8 *)v5 + 365))
          goto LABEL_20;
      }
      else if ((*((_BYTE *)a2 + 242) != 0) == (v5[370] != 0))
      {
        goto LABEL_20;
      }
      v5 = "Can't change crypto_options after calling SetLocalDescription.";
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        *(_QWORD *)v135 = "INVALID_MODIFICATION";
        *(_QWORD *)&v135[4] = 20;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v41, v42, v43, v44, v45, v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      }
      *(_DWORD *)a3 = 7;
      v48 = (char *)operator new(0x40uLL);
      *(_QWORD *)(a3 + 8) = v48;
      *(_OWORD *)(a3 + 16) = xmmword_208F0BCA0;
      if (v48 <= "Can't change crypto_options after calling SetLocalDescription.")
      {
        v16 = (_DWORD)v48 + 62;
        if (v48 + 62 > "Can't change crypto_options after calling SetLocalDescription.")
          goto LABEL_221;
      }
      strcpy(v48, "Can't change crypto_options after calling SetLocalDescription.");
      goto LABEL_32;
    }
LABEL_20:
    v122 = v18;
    v3 = v135;
    v121 = (uint64_t)(v5 + 128);
    webrtc::PeerConnectionInterface::RTCConfiguration::RTCConfiguration((webrtc::PeerConnectionInterface::RTCConfiguration *)&v139, (const webrtc::PeerConnectionInterface::RTCConfiguration *)(v5 + 128));
    if (&v139 != a2)
      std::vector<webrtc::PeerConnectionInterface::IceServer>::__assign_with_size[abi:sn180100]<webrtc::PeerConnectionInterface::IceServer*,webrtc::PeerConnectionInterface::IceServer*>((uint64_t)&v139, (std::string *)*a2, (std::string *)a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 4));
    v142 = *((_DWORD *)a2 + 6);
    v151 = *((_DWORD *)a2 + 16);
    v167 = *((_BYTE *)a2 + 148);
    v168 = *((_DWORD *)a2 + 38);
    v172 = *((_BYTE *)a2 + 159);
    v177 = *((_DWORD *)a2 + 44);
    v178 = *((_BYTE *)a2 + 180);
    v173 = *((_DWORD *)a2 + 40);
    v174 = *((_BYTE *)a2 + 164);
    v175 = *((_DWORD *)a2 + 42);
    v176 = *((_BYTE *)a2 + 172);
    v179 = *((_DWORD *)a2 + 46);
    v180 = *((_BYTE *)a2 + 188);
    v181 = *((_DWORD *)a2 + 48);
    v182 = *((_BYTE *)a2 + 196);
    v29 = *((_DWORD *)a2 + 50);
    v184 = *((_BYTE *)a2 + 204);
    v183 = v29;
    v30 = *((_DWORD *)a2 + 52);
    v186 = *((_BYTE *)a2 + 212);
    v185 = v30;
    v187 = a2[27];
    v31 = *((_DWORD *)a2 + 56);
    v189 = *((_BYTE *)a2 + 228);
    v188 = v31;
    v191 = *((_BYTE *)a2 + 236);
    if (&v139 != a2)
    {
      v32 = *((_BYTE *)a2 + 271);
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v32 >= 0)
          v49 = (const std::string::value_type *)(a2 + 31);
        else
          v49 = (const std::string::value_type *)a2[31];
        if (v32 >= 0)
          v50 = *((unsigned __int8 *)a2 + 271);
        else
          v50 = (size_t)a2[32];
        std::string::__assign_no_alias<false>(&v199, v49, v50);
      }
      else if ((*((_BYTE *)a2 + 271) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(&v199, (char *)a2[31], (size_t)a2[32]);
      }
      else
      {
        v199 = *(std::string *)(a2 + 31);
      }
    }
    v203 = *((_DWORD *)a2 + 71);
    v204 = *((_BYTE *)a2 + 288);
    if (*((_DWORD *)a2 + 6) != v142)
      goto LABEL_157;
    v52 = *a2;
    v51 = a2[1];
    v53 = v139;
    if (v51 - *a2 != v140 - (_QWORD)v139)
      goto LABEL_157;
    for (; v52 != v51; v53 += 176)
    {
      if (!webrtc::PeerConnectionInterface::IceServer::operator==(v52, v53))
        goto LABEL_157;
      v52 += 176;
    }
    if (*((_DWORD *)a2 + 7) != v143)
      goto LABEL_157;
    if (*((_DWORD *)a2 + 8) != v144)
      goto LABEL_157;
    if (*((_DWORD *)a2 + 22) != v157)
      goto LABEL_157;
    if (*((_DWORD *)a2 + 23) != v158)
      goto LABEL_157;
    if (*((_DWORD *)a2 + 24) != v159)
      goto LABEL_157;
    if (*((unsigned __int8 *)a2 + 100) != v160)
      goto LABEL_157;
    if (*((_DWORD *)a2 + 26) != v161)
      goto LABEL_157;
    if (*((_DWORD *)a2 + 27) != v162)
      goto LABEL_157;
    if (*((_DWORD *)a2 + 28) != v163)
      goto LABEL_157;
    if (*((_DWORD *)a2 + 29) != v164)
      goto LABEL_157;
    v55 = (char *)a2[5];
    v54 = (char *)a2[6];
    v56 = v148;
    if (v54 - v55 != v149 - (_QWORD)v148)
      goto LABEL_157;
    for (; v55 != v54; ++v56)
    {
      if (*(_QWORD *)v55 != *v56)
        goto LABEL_157;
      v55 += 8;
    }
    if (*((unsigned __int8 *)a2 + 120) != v165
      || !cricket::MediaConfig::operator==((unsigned __int8 *)a2 + 124, v166)
      || *((unsigned __int8 *)a2 + 68) != v152
      || *((_DWORD *)a2 + 18) != v153
      || *((unsigned __int8 *)a2 + 76) != v154)
    {
      goto LABEL_157;
    }
    if (*((_BYTE *)a2 + 84) && v156)
    {
      if (*((_DWORD *)a2 + 20) != v155)
        goto LABEL_157;
    }
    else if ((*((_BYTE *)a2 + 84) != 0) != (v156 != 0))
    {
      goto LABEL_157;
    }
    if (*((_DWORD *)a2 + 16) != v151
      || *((unsigned __int8 *)a2 + 148) != v167
      || *((_DWORD *)a2 + 38) != v168
      || *((unsigned __int8 *)a2 + 156) != v169
      || *((unsigned __int8 *)a2 + 157) != v170
      || *((unsigned __int8 *)a2 + 158) != v171
      || *((unsigned __int8 *)a2 + 159) != v172)
    {
      goto LABEL_157;
    }
    if (*((_BYTE *)a2 + 164) && v174)
    {
      if (*((_DWORD *)a2 + 40) != v173)
        goto LABEL_157;
    }
    else if ((*((_BYTE *)a2 + 164) != 0) != (v174 != 0))
    {
      goto LABEL_157;
    }
    if (*((_BYTE *)a2 + 172) && v176)
    {
      if (*((_DWORD *)a2 + 42) != v175)
        goto LABEL_157;
    }
    else if ((*((_BYTE *)a2 + 172) != 0) != (v176 != 0))
    {
      goto LABEL_157;
    }
    if (*((_BYTE *)a2 + 180) && v178)
    {
      if (*((_DWORD *)a2 + 44) != v177)
        goto LABEL_157;
    }
    else if ((*((_BYTE *)a2 + 180) != 0) != (v178 != 0))
    {
      goto LABEL_157;
    }
    if (*((_BYTE *)a2 + 188) && v180)
    {
      if (*((_DWORD *)a2 + 46) != v179)
        goto LABEL_157;
    }
    else if ((*((_BYTE *)a2 + 188) != 0) != (v180 != 0))
    {
      goto LABEL_157;
    }
    if (*((_BYTE *)a2 + 196) && v182)
    {
      if (*((_DWORD *)a2 + 48) != v181)
        goto LABEL_157;
    }
    else if ((*((_BYTE *)a2 + 196) != 0) != (v182 != 0))
    {
      goto LABEL_157;
    }
    if (*((_BYTE *)a2 + 204) && v184)
    {
      if (*((_DWORD *)a2 + 50) != v183)
        goto LABEL_157;
    }
    else if ((*((_BYTE *)a2 + 204) != 0) != (v184 != 0))
    {
      goto LABEL_157;
    }
    if (*((_BYTE *)a2 + 212) && v186)
    {
      if (*((_DWORD *)a2 + 52) != v185)
        goto LABEL_157;
    }
    else if ((*((_BYTE *)a2 + 212) != 0) != (v186 != 0))
    {
      goto LABEL_157;
    }
    if (a2[27] != v187 || *((_DWORD *)a2 + 58) != v190)
      goto LABEL_157;
    if (*((_BYTE *)a2 + 228) && v189)
    {
      if (*((_DWORD *)a2 + 56) != v188)
        goto LABEL_157;
    }
    else if ((*((_BYTE *)a2 + 228) != 0) != (v189 != 0))
    {
      goto LABEL_157;
    }
    if (*((unsigned __int8 *)a2 + 236) != v191)
      goto LABEL_157;
    if (*((_BYTE *)a2 + 242) && v197)
    {
      if (*((unsigned __int8 *)a2 + 237) != v192
        || *((unsigned __int8 *)a2 + 238) != v193
        || *((unsigned __int8 *)a2 + 239) != v194
        || *((unsigned __int8 *)a2 + 240) != v195
        || *((unsigned __int8 *)a2 + 241) != v196)
      {
        goto LABEL_157;
      }
    }
    else if ((*((_BYTE *)a2 + 242) != 0) != (v197 != 0))
    {
      goto LABEL_157;
    }
    if (*((unsigned __int8 *)a2 + 243) != v198
      || !std::operator==[abi:sn180100]<std::allocator<char>>((unsigned __int8 *)a2 + 248, (unsigned __int8 *)&v199)
      || *((unsigned __int8 *)a2 + 272) != v200)
    {
      goto LABEL_157;
    }
    if (*((_BYTE *)a2 + 280) && v202)
    {
      if (*((_DWORD *)a2 + 69) != v201)
        goto LABEL_157;
    }
    else if ((*((_BYTE *)a2 + 280) != 0) != (v202 != 0))
    {
      goto LABEL_157;
    }
    if (*((_BYTE *)a2 + 288) && v204)
    {
      if (*((_DWORD *)a2 + 71) != v203)
        goto LABEL_157;
    }
    else if ((*((_BYTE *)a2 + 288) != 0) != (v204 != 0))
    {
      goto LABEL_157;
    }
    if (*((_DWORD *)a2 + 73) != v205
      || !std::operator==[abi:sn180100]<rtc::NetworkMask,std::allocator<rtc::NetworkMask>>((uint64_t)a2[37], (uint64_t)a2[38], v206, v207)|| *((_DWORD *)a2 + 80) != v208|| *((_DWORD *)a2 + 81) != v209|| *((_DWORD *)a2 + 82) != v210)
    {
      goto LABEL_157;
    }
    v16 = *((unsigned __int8 *)a2 + 344);
    v15 = v212;
    if (*((_BYTE *)a2 + 344) && v212)
    {
      if (a2[42] != v211)
        goto LABEL_157;
      goto LABEL_223;
    }
    goto LABEL_222;
  }
  v5 = "SetConfiguration: PeerConnection is closed.";
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    *(_QWORD *)v135 = "INVALID_STATE";
    *(_QWORD *)&v135[4] = 13;
    rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  }
  *(_DWORD *)a3 = 6;
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a3 + 8) = v14;
  *(_OWORD *)(a3 + 16) = xmmword_208F16E30;
  if (v14 > "SetConfiguration: PeerConnection is closed."
    || (v16 = (_DWORD)v14 + 43, v14 + 43 <= "SetConfiguration: PeerConnection is closed."))
  {
    strcpy(v14, "SetConfiguration: PeerConnection is closed.");
LABEL_32:
    *(_DWORD *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 36) = 0;
    *(_BYTE *)(a3 + 38) = 0;
    return;
  }
  while (1)
  {
LABEL_221:
    while (1)
    {
      __break(1u);
LABEL_222:
      if ((v16 != 0) == (v15 != 0))
        break;
LABEL_157:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        *(_QWORD *)v135 = "INVALID_MODIFICATION";
        *(_QWORD *)&v135[4] = 20;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v57, v58, v59, v60, v61, v62, v63, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      }
      v64 = (char *)operator new(0x38uLL);
      if (v64 <= "Modifying the configuration in an unsupported way.")
      {
        v16 = (_DWORD)v64 + 50;
        if (v64 + 50 > "Modifying the configuration in an unsupported way.")
          continue;
      }
      strcpy(v64, "Modifying the configuration in an unsupported way.");
      *(_DWORD *)v135 = 7;
      *(_QWORD *)&v135[4] = v64;
      *(_OWORD *)&v135[8] = xmmword_208F08670;
      *((_DWORD *)v3 + 8) = 0;
      LOBYTE(v135[18]) = 0;
      v136 = 0;
      goto LABEL_162;
    }
LABEL_223:
    v109 = *((_DWORD *)v3 + 129);
    LOBYTE(v135[18]) = 0;
    v137[0] = 0;
    v137[4] = 0;
    v137[8] = 0;
    v110 = v109 == 1;
    *((_DWORD *)v3 + 30) = 0;
    v113 = *((_DWORD *)v3 + 127);
    v111 = v113 == -1;
    v112 = v113 & 0xFFFFFF00;
    v113 = v113;
    if (v111)
      v113 = 0;
    *(_DWORD *)v135 = v113 | v112;
    v114 = !v111;
    LOBYTE(v135[2]) = v114;
    LOBYTE(v135[10]) = v165;
    v117 = *((_DWORD *)v3 + 128);
    v115 = v117 == -1;
    v116 = v117 & 0xFFFFFF00;
    v117 = v117;
    if (v115)
      v117 = 0;
    v118 = v117 | v116;
    v119 = !v115;
    *(_DWORD *)&v135[4] = v118;
    LOBYTE(v135[6]) = v119;
    *(_DWORD *)&v135[8] = v110;
    LOBYTE(v135[16]) = v169;
    HIBYTE(v135[16]) = v172;
    v120 = v173;
    v137[20] = v174;
    *((_DWORD *)v3 + 13) = 2;
    *((_DWORD *)v3 + 14) = v120;
    *((_DWORD *)v3 + 16) = v175;
    v137[28] = v176;
    *((_DWORD *)v3 + 18) = v177;
    v137[36] = v178;
    *((_DWORD *)v3 + 20) = v179;
    v137[44] = v180;
    v137[52] = v182;
    *((_DWORD *)v3 + 22) = v181;
    v137[60] = v184;
    *((_DWORD *)v3 + 24) = v183;
    v137[68] = v186;
    *((_DWORD *)v3 + 26) = v185;
    v137[76] = v189;
    *((_DWORD *)v3 + 28) = v188;
    LOBYTE(v135[14]) = v204;
    *((_DWORD *)v3 + 6) = v203;
    cricket::P2PTransportChannel::ValidateIceConfig((char *)v135, (uint64_t)&v124);
    if (!(_DWORD)v124)
    {
      *(_DWORD *)v135 = 0;
      v136 = 0;
      memset(&v135[4], 0, 29);
      webrtc::PeerConnectionInterface::RTCConfiguration::RTCConfiguration((webrtc::PeerConnectionInterface::RTCConfiguration *)v137, (const webrtc::PeerConnectionInterface::RTCConfiguration *)&v139);
      v138 = 1;
      if (SHIBYTE(v126) < 0)
        operator delete(v125[0]);
      goto LABEL_163;
    }
    *(_DWORD *)v135 = (_DWORD)v124;
    *(_OWORD *)&v135[4] = *(_OWORD *)v125;
    *(_QWORD *)&v135[12] = v126;
    v125[0] = 0;
    v125[1] = 0;
    v126 = 0;
    *((_DWORD *)v3 + 8) = (_DWORD)v127;
    *(_DWORD *)((char *)v3 + 35) = *(_DWORD *)((char *)&v127 + 3);
LABEL_162:
    v137[0] = 0;
    v138 = 0;
LABEL_163:
    webrtc::PeerConnectionInterface::RTCConfiguration::~RTCConfiguration((webrtc::PeerConnectionInterface::RTCConfiguration *)&v139);
    if (*(_DWORD *)v135)
    {
      *(_DWORD *)a3 = *(_DWORD *)v135;
      v65 = (std::string *)(a3 + 8);
      if (SHIBYTE(v135[15]) < 0)
      {
        std::string::__init_copy_ctor_external(v65, *(const std::string::value_type **)&v135[4], *(std::string::size_type *)&v135[8]);
      }
      else
      {
        *(_OWORD *)&v65->__r_.__value_.__l.__data_ = *(_OWORD *)&v135[4];
        *(_QWORD *)(a3 + 24) = *(_QWORD *)&v135[12];
      }
      LOBYTE(v68) = 0;
      a2 = 0;
      *(_DWORD *)(a3 + 32) = *((_DWORD *)v3 + 8);
      *(_DWORD *)(a3 + 35) = *(_DWORD *)((char *)v3 + 35);
      if (!v138)
        goto LABEL_171;
LABEL_170:
      webrtc::PeerConnectionInterface::RTCConfiguration::~RTCConfiguration((webrtc::PeerConnectionInterface::RTCConfiguration *)v137);
      goto LABEL_171;
    }
    v134[0] = 0;
    v134[1] = 0;
    v132 = 0;
    v133 = v134;
    v130 = 0;
    v131 = 0;
    v66 = *((_DWORD *)v3 + 100);
    a2 = (unsigned __int8 **)*((_QWORD *)v3 + 51);
    v67 = *((_QWORD *)v3 + 53);
    if (v66)
    {
      LOBYTE(v68) = 0;
      v69 = *((_QWORD *)v3 + 52);
      v70 = *((_DWORD *)v3 + 108);
      v71 = v145;
      v72 = v146;
      *(_DWORD *)a3 = v66;
      v73 = v147;
      *(_QWORD *)(a3 + 8) = a2;
      *(_QWORD *)(a3 + 16) = v69;
      *(_QWORD *)(a3 + 24) = v67;
      *(_DWORD *)(a3 + 32) = v70;
      *(_BYTE *)(a3 + 36) = v71;
      *(_BYTE *)(a3 + 37) = v72;
      *(_BYTE *)(a3 + 38) = v73;
      a2 = 0;
      goto LABEL_214;
    }
    v16 = v138;
    if (v138)
    {
      v74 = (unsigned __int8 *)*((_QWORD *)v3 + 5);
      v75 = (unsigned __int8 *)*((_QWORD *)v3 + 6);
      v76 = (unsigned __int8 *)*((_QWORD *)v5 + 16);
      if (v75 - v74 != *((_QWORD *)v5 + 17) - (_QWORD)v76)
        goto LABEL_184;
      if (v74 != v75)
      {
        while (webrtc::PeerConnectionInterface::IceServer::operator==(v74, v76))
        {
          v74 += 176;
          v76 += 176;
          if (v74 == v75)
            goto LABEL_180;
        }
LABEL_184:
        v82 = 1;
        v80 = v122;
        goto LABEL_199;
      }
LABEL_180:
      v77 = *((_DWORD *)v5 + 38);
      v78 = *((_DWORD *)v3 + 16);
      if (!v5[287] || v77 == v78)
      {
        v80 = v122;
        if (v77 != v78)
          goto LABEL_186;
      }
      else
      {
        v79 = v77 - 1;
        v80 = v122;
        if (v79 > 2)
          v81 = 0;
        else
          v81 = dword_208F16EC8[v79];
        v83 = v78 - 1;
        if (v83 > 2)
          v84 = 0;
        else
          v84 = dword_208F16EC8[v83];
        if ((v81 & ~v84) != 0)
        {
LABEL_186:
          v82 = 1;
          goto LABEL_199;
        }
      }
      v85 = v137[148] ? 1 : *((_DWORD *)v3 + 48);
      v86 = v5[276] ? 1 : *((_DWORD *)v5 + 70);
      v82 = v85 != v86;
LABEL_199:
      v87 = *((_DWORD *)v3 + 38);
      v88 = *((_DWORD *)v3 + 39) == 1;
      v145 = 0;
      LOBYTE(v148) = 0;
      BYTE4(v148) = 0;
      LOBYTE(v149) = 0;
      *((_DWORD *)v3 + 113) = 2;
      *((_DWORD *)v3 + 130) = 0;
      v91 = *((_DWORD *)v3 + 37);
      v89 = v91 == -1;
      v90 = v91 & 0xFFFFFF00;
      v91 = v91;
      if (v89)
        v91 = 0;
      v92 = v91 | v90;
      v93 = !v89;
      *((_DWORD *)v3 + 100) = v92;
      BYTE4(v139) = v93;
      v141 = v137[120];
      v28 = v87 == -1;
      v94 = v87 != -1;
      v95 = v87 & 0xFFFFFF00;
      v87 = v87;
      if (v28)
        v87 = 0;
      *((_DWORD *)v3 + 102) = v87 | v95;
      BYTE4(v140) = v94;
      *((_DWORD *)v3 + 104) = v88;
      LOBYTE(v144) = v137[156];
      BYTE1(v144) = v137[159];
      *((_DWORD *)v3 + 114) = *((_DWORD *)v3 + 50);
      v150 = v137[164];
      *((_DWORD *)v3 + 116) = *((_DWORD *)v3 + 52);
      v152 = v137[172];
      *((_DWORD *)v3 + 118) = *((_DWORD *)v3 + 54);
      v154 = v137[180];
      v156 = v137[188];
      *((_DWORD *)v3 + 120) = *((_DWORD *)v3 + 56);
      v96 = *((_DWORD *)v3 + 58);
      LOBYTE(v158) = v137[196];
      *((_DWORD *)v3 + 122) = v96;
      v160 = v137[204];
      *((_DWORD *)v3 + 124) = *((_DWORD *)v3 + 60);
      LOBYTE(v162) = v137[212];
      *((_DWORD *)v3 + 126) = *((_DWORD *)v3 + 62);
      LOBYTE(v164) = v137[228];
      *((_DWORD *)v3 + 128) = *((_DWORD *)v3 + 66);
      LOBYTE(v143) = v137[288];
      *((_DWORD *)v3 + 106) = *((_DWORD *)v3 + 81);
      v97 = *(_QWORD *)(*((_QWORD *)v5 + 8) + 24);
      v124 = v5;
      LOBYTE(v125[0]) = v82;
      v125[1] = &v139;
      v126 = &v133;
      v127 = &v130;
      v128 = v137;
      v129 = v80;
      v214 = 0;
      *((_QWORD *)v3 + 94) = &v214;
      *((_QWORD *)v3 + 95) = &v124;
      (*(void (**)(uint64_t, char *, void (*)(uint64_t), char *))(*(_QWORD *)v97 + 96))(v97, v213, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::PeerConnection::SetConfiguration(webrtc::PeerConnectionInterface::RTCConfiguration const&)::$_1,BOOL,void>(webrtc::PeerConnection::SetConfiguration(webrtc::PeerConnectionInterface::RTCConfiguration const&)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>, &v123);
      if (v214)
      {
        webrtc::PeerConnectionInterface::RTCConfiguration::operator=(v121, (uint64_t)v137);
        *(_DWORD *)a3 = 0;
        *(_BYTE *)(a3 + 38) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 29) = 0;
        goto LABEL_213;
      }
      v5 = "Failed to apply configuration to PortAllocator.";
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v124 = "INTERNAL_ERROR";
        v125[0] = (void *)14;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v98, v99, v100, v101, v102, v103, v104, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      }
      *(_DWORD *)a3 = 10;
      v105 = (char *)operator new(0x30uLL);
      *(_QWORD *)(a3 + 8) = v105;
      *(_OWORD *)(a3 + 16) = xmmword_208F0B3B0;
      if (v105 > "Failed to apply configuration to PortAllocator.")
        break;
      v16 = (_DWORD)v105 + 47;
      if (v105 + 47 <= "Failed to apply configuration to PortAllocator.")
        break;
    }
  }
  strcpy(v105, "Failed to apply configuration to PortAllocator.");
  *(_DWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 38) = 0;
LABEL_213:
  v68 = HIBYTE(v67);
LABEL_214:
  v106 = (void **)v130;
  if (v130)
  {
    v107 = v131;
    v108 = v130;
    if (v131 != v130)
    {
      do
        cricket::RelayServerConfig::~RelayServerConfig(v107 - 20);
      while (v107 != v106);
      v108 = v130;
    }
    v131 = v106;
    operator delete(v108);
  }
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)&v133, v134[0]);
  if (v138)
    goto LABEL_170;
LABEL_171:
  if (SHIBYTE(v135[15]) < 0)
    operator delete(*(void **)&v135[4]);
  if ((v68 & 0x80) != 0)
    operator delete(a2);
}

BOOL webrtc::PeerConnection::AddIceCandidate(webrtc::SdpOfferAnswerHandler **this, const webrtc::IceCandidateInterface *a2)
{
  int v4;

  (*((void (**)(webrtc::SdpOfferAnswerHandler **))*this + 23))(this);
  v4 = webrtc::SdpOfferAnswerHandler::AddIceCandidateInternal(this[87], a2);
  return !v4 || v4 == 5;
}

uint64_t webrtc::PeerConnection::AddIceCandidate(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v3 = a1;
  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)(a1 + 696);
  v5 = *a2;
  *a2 = 0;
  v15 = v5;
  v16 = a1;
  v6 = v17;
  v7 = (_QWORD *)a3[3];
  if (v7)
  {
    if (v7 == a3)
    {
      v18 = v17;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v17);
      v3 = v16;
      v8 = v18;
    }
    else
    {
      v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
      v18 = v8;
    }
  }
  else
  {
    v8 = 0;
    v18 = 0;
  }
  v9 = operator new(0x30uLL);
  v10 = v9;
  *v9 = &off_24C0B9330;
  v9[1] = v3;
  if (v8)
  {
    if (v8 == v17)
    {
      v9[5] = v9 + 2;
      (*(void (**)(_QWORD *))(v17[0] + 24))(v17);
    }
    else
    {
      v9[5] = v8;
      v18 = 0;
    }
  }
  else
  {
    v9[5] = 0;
  }
  v20 = v10;
  webrtc::SdpOfferAnswerHandler::AddIceCandidate(v4, &v15, v19);
  v11 = v20;
  if (v20 == v19)
  {
    v12 = 4;
    v11 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_16;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_16:
  if (v18 == v17)
  {
    v13 = 4;
  }
  else
  {
    if (!v18)
      goto LABEL_21;
    v13 = 5;
    v6 = v18;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v13))(v6);
LABEL_21:
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t webrtc::PeerConnection::RemoveIceCandidates(uint64_t a1, uint64_t *a2)
{
  return webrtc::SdpOfferAnswerHandler::RemoveIceCandidates(*(_QWORD *)(a1 + 696), a2);
}

void webrtc::PeerConnection::SetBitrate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD v49[2];
  const char *v50;
  uint64_t v51;

  if (!rtc::Thread::IsCurrent(*(rtc::Thread **)(*(_QWORD *)(a1 + 64) + 40)))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40);
    v49[0] = a1;
    v49[1] = a2;
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 38) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 29) = 0;
    v50 = (const char *)a3;
    v51 = (uint64_t)v49;
    (*(void (**)(uint64_t, const char **, __n128 (*)(uint64_t *), char *))(*(_QWORD *)v15 + 96))(v15, &v50, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::PeerConnection::SetBitrate(webrtc::BitrateSettings const&)::$_0,webrtc::RTCError,void>(webrtc::PeerConnection::SetBitrate(webrtc::BitrateSettings const&)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v48);
    return;
  }
  if (*(_BYTE *)(a2 + 4))
  {
    if ((*(_DWORD *)a2 & 0x80000000) != 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v50 = "INVALID_PARAMETER";
        v51 = 17;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      }
      *(_DWORD *)a3 = 3;
      *(_BYTE *)(a3 + 31) = 20;
      if (a3 + 8 > (unint64_t)"min_bitrate_bps <= 0" || a3 + 28 <= (unint64_t)"min_bitrate_bps <= 0")
      {
        strcpy((char *)(a3 + 8), "min_bitrate_bps <= 0");
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (*(_BYTE *)(a2 + 12))
    {
      v6 = *(_DWORD *)(a2 + 8);
      if (v6 < *(_DWORD *)a2)
      {
        v14 = "start_bitrate_bps < min_bitrate_bps";
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          v50 = "INVALID_PARAMETER";
          v51 = 17;
LABEL_16:
          rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
          goto LABEL_17;
        }
        goto LABEL_17;
      }
      goto LABEL_11;
    }
LABEL_20:
    if (!*(_BYTE *)(a2 + 20))
      goto LABEL_40;
    v16 = *(_DWORD *)(a2 + 16);
    goto LABEL_22;
  }
  if (!*(_BYTE *)(a2 + 12))
    goto LABEL_20;
  v6 = *(_DWORD *)(a2 + 8);
LABEL_11:
  if (v6 < 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v50 = "INVALID_PARAMETER";
      v51 = 17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v34, v35, v36, v37, v38, v39, v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    *(_DWORD *)a3 = 3;
    *(_BYTE *)(a3 + 31) = 22;
    if (a3 + 8 > (unint64_t)"curent_bitrate_bps < 0" || a3 + 30 <= (unint64_t)"curent_bitrate_bps < 0")
    {
      strcpy((char *)(a3 + 8), "curent_bitrate_bps < 0");
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  if (!*(_BYTE *)(a2 + 20))
  {
LABEL_40:
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 512) + 176))(*(_QWORD *)(a1 + 512), a2);
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 38) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 29) = 0;
    return;
  }
  v16 = *(_DWORD *)(a2 + 16);
  if (v16 < v6)
  {
    v14 = "max_bitrate_bps < start_bitrate_bps";
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v50 = "INVALID_PARAMETER";
      v51 = 17;
      goto LABEL_16;
    }
LABEL_17:
    *(_DWORD *)a3 = 3;
    v17 = (char *)operator new(0x28uLL);
    *(_QWORD *)(a3 + 8) = v17;
    *(_OWORD *)(a3 + 16) = xmmword_208F051B0;
    if (v17 > v14 || v17 + 35 <= v14)
    {
      strcpy(v17 + 31, "_bps");
      v18 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v14;
      *((_OWORD *)v17 + 1) = v18;
LABEL_46:
      *(_DWORD *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      *(_BYTE *)(a3 + 38) = 0;
      return;
    }
    goto LABEL_47;
  }
LABEL_22:
  if (!*(_BYTE *)(a2 + 4) || v16 >= *(_DWORD *)a2)
  {
    if (v16 < 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v50 = "INVALID_PARAMETER";
        v51 = 17;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v41, v42, v43, v44, v45, v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      }
      *(_DWORD *)a3 = 3;
      *(_BYTE *)(a3 + 31) = 19;
      if (a3 + 8 > (unint64_t)"max_bitrate_bps < 0" || a3 + 27 <= (unint64_t)"max_bitrate_bps < 0")
      {
        strcpy((char *)(a3 + 8), "max_bitrate_bps < 0");
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    goto LABEL_40;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    v50 = "INVALID_PARAMETER";
    v51 = 17;
    rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  }
  *(_DWORD *)a3 = 3;
  v26 = (char *)operator new(0x28uLL);
  *(_QWORD *)(a3 + 8) = v26;
  *(_OWORD *)(a3 + 16) = xmmword_208F0AC50;
  if (v26 > "max_bitrate_bps < min_bitrate_bps" || v26 + 33 <= "max_bitrate_bps < min_bitrate_bps")
  {
    strcpy(v26, "max_bitrate_bps < min_bitrate_bps");
    goto LABEL_46;
  }
LABEL_47:
  __break(1u);
}

uint64_t webrtc::PeerConnection::ReconfigureBandwidthEstimation(uint64_t a1, char *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  char v9;
  char v10;
  _QWORD v11[2];
  uint64_t (*v12)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v13)(uint64_t);

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40);
  v4 = *(unsigned int **)(a1 + 536);
  if (v4)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *a2;
  v7 = operator new();
  *(_QWORD *)v7 = v4;
  *(_QWORD *)(v7 + 8) = a1;
  *(_BYTE *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v7 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::PeerConnection::ReconfigureBandwidthEstimation(webrtc::BandwidthEstimationSettings const&)::$_0 &&>;
  v11[0] = v7;
  v12 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v13 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v11, &v10, &v9);
  return v12(1, v11, v11);
}

webrtc::PeerConnection *webrtc::PeerConnection::SetAudioPlayout(webrtc::PeerConnection *this, uint64_t a2)
{
  uint64_t v4;
  webrtc::PeerConnection *result;
  uint64_t v6;
  char v7;
  webrtc::PeerConnection *v8;
  char v9;

  if (rtc::Thread::IsCurrent(*(rtc::Thread **)(*((_QWORD *)this + 8) + 40)))
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 8) + 96) + 24))(*(_QWORD *)(*((_QWORD *)this + 8) + 96));
    (*(void (**)(webrtc::PeerConnection **__return_ptr))(*(_QWORD *)v4 + 32))(&v8);
    (*(void (**)(webrtc::PeerConnection *, uint64_t))(*(_QWORD *)v8 + 48))(v8, a2);
    result = v8;
    if (v8)
      return (webrtc::PeerConnection *)(*(uint64_t (**)(webrtc::PeerConnection *))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 8) + 40);
    v8 = this;
    v9 = a2;
    return (webrtc::PeerConnection *)(*(uint64_t (**)(uint64_t, webrtc::PeerConnection **, uint64_t (*)(unsigned __int8 *), char *))(*(_QWORD *)v6 + 96))(v6, &v8, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::SetAudioPlayout(BOOL)::$_0>, &v7);
  }
  return result;
}

webrtc::PeerConnection *webrtc::PeerConnection::SetAudioRecording(webrtc::PeerConnection *this, uint64_t a2)
{
  uint64_t v4;
  webrtc::PeerConnection *result;
  uint64_t v6;
  char v7;
  webrtc::PeerConnection *v8;
  char v9;

  if (rtc::Thread::IsCurrent(*(rtc::Thread **)(*((_QWORD *)this + 8) + 40)))
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 8) + 96) + 24))(*(_QWORD *)(*((_QWORD *)this + 8) + 96));
    (*(void (**)(webrtc::PeerConnection **__return_ptr))(*(_QWORD *)v4 + 32))(&v8);
    (*(void (**)(webrtc::PeerConnection *, uint64_t))(*(_QWORD *)v8 + 56))(v8, a2);
    result = v8;
    if (v8)
      return (webrtc::PeerConnection *)(*(uint64_t (**)(webrtc::PeerConnection *))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 8) + 40);
    v8 = this;
    v9 = a2;
    return (webrtc::PeerConnection *)(*(uint64_t (**)(uint64_t, webrtc::PeerConnection **, uint64_t (*)(unsigned __int8 *), char *))(*(_QWORD *)v6 + 96))(v6, &v8, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::SetAudioRecording(BOOL)::$_0>, &v7);
  }
  return result;
}

uint64_t webrtc::PeerConnection::AddAdaptationResource(uint64_t a1, void (****a2)(_QWORD))
{
  uint64_t result;
  uint64_t v5;
  void (***v6)(_QWORD);
  uint64_t v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  char v10;
  uint64_t v11;
  void (***v12)(_QWORD);

  result = rtc::Thread::IsCurrent(*(rtc::Thread **)(*(_QWORD *)(a1 + 64) + 40));
  if ((result & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 512);
    if (!v5)
      return result;
    v6 = *a2;
    v9 = v6;
    if (v6)
      (**v6)(v6);
    (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v5 + 88))(v5, &v9);
    result = (uint64_t)v9;
    if (!v9)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40);
  v8 = *a2;
  v11 = a1;
  v12 = v8;
  if (v8)
    (**v8)(v8);
  (*(void (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t *), char *))(*(_QWORD *)v7 + 96))(v7, &v11, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::AddAdaptationResource(webrtc::scoped_refptr<webrtc::Resource>)::$_0>, &v10);
  result = (uint64_t)v12;
  if (v12)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL webrtc::PeerConnection::StartRtcEventLog(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  unsigned __int8 v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40);
  v4 = *a2;
  *a2 = 0;
  v9 = a1;
  v10 = v4;
  v13 = 0;
  v11 = a3;
  v12[0] = &v13;
  v12[1] = &v9;
  (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v3 + 96))(v3, v12, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::PeerConnection::StartRtcEventLog(std::unique_ptr<webrtc::RtcEventLogOutput>,long long)::$_0,BOOL,void>(webrtc::PeerConnection::StartRtcEventLog(std::unique_ptr<webrtc::RtcEventLogOutput>,long long)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v8);
  v5 = v13;
  v6 = v10;
  v10 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v5 != 0;
}

_QWORD *webrtc::PeerConnection::StartRtcEventLog(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *p_p;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  unint64_t v14;
  unsigned __int8 v15;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v4 + 16))(&__p, v4, "WebRTC-RtcEventLogNewFormat", 27);
  if ((char)v15 < 0)
  {
    v7 = v14;
    if ((v14 & 0x8000000000000000) != 0 || (p_p = __p, v14) && !__p)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    p_p = &__p;
    v7 = v15;
  }
  if (v7 >= 8)
  {
    if (*p_p == 0x64656C6261736944)
      v8 = 0;
    else
      v8 = 5000;
    if ((v15 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  v8 = 5000;
  if ((v15 & 0x80) != 0)
LABEL_13:
    operator delete(__p);
LABEL_14:
  v9 = *a2;
  *a2 = 0;
  v12 = v9;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 480))(a1, &v12, v8);
  v11 = v12;
  v12 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return (_QWORD *)v10;
}

uint64_t webrtc::PeerConnection::StopRtcEventLog(webrtc::PeerConnection *this)
{
  uint64_t v1;
  char v3;
  webrtc::PeerConnection *v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 8) + 40);
  v4 = this;
  return (*(uint64_t (**)(uint64_t, webrtc::PeerConnection **, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v1 + 96))(v1, &v4, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::StopRtcEventLog(void)::$_0>, &v3);
}

uint64_t *webrtc::PeerConnection::LookupDtlsTransportByMid@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  return webrtc::JsepTransportController::LookupDtlsTransportByMid(*(_QWORD *)(a1 + 592), a2, a3);
}

uint64_t *webrtc::PeerConnection::GetSctpTransport@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  if (*((_BYTE *)this + 664))
  {
    this = webrtc::JsepTransportController::GetSctpTransport(this[74], (const void **)this + 80, &v3);
    *a2 = v3;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t webrtc::PeerConnection::local_description(webrtc::PeerConnection *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 87) + 24))(*((_QWORD *)this + 87));
}

uint64_t webrtc::PeerConnection::remote_description(webrtc::PeerConnection *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 87) + 32))(*((_QWORD *)this + 87));
}

uint64_t webrtc::PeerConnection::current_local_description(webrtc::PeerConnection *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 87) + 40))(*((_QWORD *)this + 87));
}

uint64_t webrtc::PeerConnection::current_remote_description(webrtc::PeerConnection *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 87) + 48))(*((_QWORD *)this + 87));
}

uint64_t webrtc::PeerConnection::pending_local_description(webrtc::PeerConnection *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 87) + 56))(*((_QWORD *)this + 87));
}

uint64_t webrtc::PeerConnection::pending_remote_description(webrtc::PeerConnection *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 87) + 64))(*((_QWORD *)this + 87));
}

uint64_t webrtc::PeerConnection::Close(double **this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  void (***v11)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  webrtc::RTCStatsCollector *v17;
  double *v18;
  webrtc::WebRtcSessionDescriptionFactory *v19;
  double *v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  _BYTE *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  double *v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  double **v42;

  result = (*((uint64_t (**)(double **))*this + 86))(this);
  if ((result & 1) == 0)
  {
    webrtc::LegacyStatsCollector::UpdateStats(this[69]);
    *((_DWORD *)this + 27) = 6;
    v3 = (*((uint64_t (**)(double **))*this + 85))(this);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 64))(v3, *((unsigned int *)this + 27));
    this[14] = (double *)0x500000006;
    v4 = (*((uint64_t (**)(double **))*this + 85))(this);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 80))(v4, *((unsigned int *)this + 29));
    webrtc::SdpOfferAnswerHandler::ChangeSignalingState((uint64_t)this[87], 5);
    (*((void (**)(double **, uint64_t))*this + 101))(this, 1024);
    if (*((_QWORD *)this[8] + 12))
    {
      v5 = (*((uint64_t (**)(double **))*this + 93))(this);
      v6 = *(_QWORD *)(v5 + 8);
      v7 = *(_QWORD *)(v5 + 16);
      v8 = v7 - v6;
      if (v7 != v6)
      {
        if ((v8 & 0x8000000000000000) != 0)
          abort();
        v9 = operator new(v8);
        v10 = 0;
        do
        {
          v11 = *(void (****)(_QWORD))(v6 + v10);
          v9[(unint64_t)v10 / 8] = v11;
          if (v11)
            (**v11)(v11);
          v10 += 8;
        }
        while (v6 + v10 != v7);
        if (v10)
        {
          v12 = v10 >> 3;
          v13 = v12 * 8;
          v14 = v9;
          do
          {
            v15 = *v14;
            *(_BYTE *)(*(_QWORD *)(*v14 + 16) + 82) = 1;
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15) & 1) == 0)
              (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 128))(*v14);
            ++v14;
            v13 -= 8;
          }
          while (v13);
          do
          {
            v16 = v9[v12 - 1];
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
            --v12;
          }
          while (v12 * 8);
        }
        operator delete(v9);
      }
    }
    v17 = (webrtc::RTCStatsCollector *)this[70];
    if (v17)
      webrtc::RTCStatsCollector::MergeNetworkReport_s(v17);
    webrtc::SdpOfferAnswerHandler::DestroyMediaChannels((webrtc::SdpOfferAnswerHandler *)this[87]);
    v18 = this[87];
    v19 = (webrtc::WebRtcSessionDescriptionFactory *)*((_QWORD *)v18 + 3);
    v18[3] = 0.0;
    if (v19)
    {
      webrtc::WebRtcSessionDescriptionFactory::~WebRtcSessionDescriptionFactory(v19);
      MEMORY[0x20BD0ADEC]();
    }
    v20 = this[8];
    if (*((_QWORD *)v20 + 12))
    {
      v21 = this[106];
      *((_BYTE *)v21 + 176) = 1;
      v21[25] = 0.0;
    }
    v22 = *((_QWORD *)v20 + 3);
    v42 = this;
    (*(void (**)(uint64_t, double ***, uint64_t (*)(_QWORD **), char *))(*(_QWORD *)v22 + 96))(v22, &v42, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::Close(void)::$_1>, &v41);
    if (*((_BYTE *)this + 632))
    {
      if (*((char *)this + 631) < 0)
        operator delete(this[76]);
      *((_BYTE *)this + 632) = 0;
    }
    if (*((char *)this + 695) < 0)
      operator delete(this[84]);
    *((_BYTE *)this + 672) = 0;
    *((_BYTE *)this + 695) = 0;
    (*((void (**)(double **))*this + 23))(this);
    v23 = *((_QWORD *)this[8] + 5);
    v42 = this;
    (*(void (**)(uint64_t, double ***, uint64_t (*)(uint64_t *), char *))(*(_QWORD *)v23 + 96))(v23, &v42, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::Close(void)::$_2>, &v41);
    if ((*((_DWORD *)this + 177) & 0x202E0) == 0xA0)
    {
      v24 = this[12];
      if (v24)
      {
        (*(void (**)(double *))(*(_QWORD *)v24 + 160))(v24);
      }
      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v25, v26, v27, v28, v29, v30, v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/usage_pattern.cc");
      }
    }
    v32 = this[87];
    v33 = (_BYTE *)*((_QWORD *)v32 + 48);
    if (v33)
    {
      *v33 = 0;
      v34 = (unsigned int *)(v33 + 4);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
        MEMORY[0x20BD0ADEC]();
      v32[48] = 0.0;
    }
    result = operator new();
    *(_DWORD *)result = 0;
    *(_BYTE *)(result + 4) = 0;
    do
      v37 = __ldxr((unsigned int *)result);
    while (__stxr(v37 + 1, (unsigned int *)result));
    v38 = this[103];
    *((_BYTE *)v38 + 4) = 0;
    this[103] = (double *)result;
    do
    {
      v39 = __ldaxr((unsigned int *)v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, (unsigned int *)v38));
    if (!v40)
      result = MEMORY[0x20BD0ADEC](v38, 0x1000C4090D0E795);
    if (*((_BYTE *)this + 792))
      *((_BYTE *)this + 792) = 1;
    this[12] = 0;
  }
  return result;
}

uint64_t webrtc::PeerConnection::SetIceConnectionState(uint64_t result, int a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(result + 108) != a2)
  {
    v3 = (_DWORD *)result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 688))(result);
    if ((result & 1) == 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      v3[27] = a2;
      v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 680))(v3);
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 64))(v11, v3[27]);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::SetIceConnectionState(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_DWORD *)(result + 100) != a2)
  {
    v3 = result;
    v4 = result - 8;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 8) + 688))(result - 8);
    if ((result & 1) == 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      *(_DWORD *)(v3 + 100) = a2;
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 680))(v4);
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 64))(v12, *(unsigned int *)(v3 + 100));
    }
  }
  return result;
}

uint64_t webrtc::PeerConnection::CreateDataChannelTransport(uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void **v20;
  int v21;
  void **v22;
  std::string __p;
  __int128 v25;
  unint64_t v26;
  char v27;
  _QWORD v28[2];
  std::string v29;
  unsigned __int8 v30;
  __int128 *v31;
  unint64_t v32;

  v31 = a2;
  v32 = a3;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 24);
  v28[0] = a1;
  v28[1] = &v31;
  v29.__r_.__value_.__s.__data_[0] = 0;
  v30 = 0;
  *(_QWORD *)&v25 = &v29;
  *((_QWORD *)&v25 + 1) = v28;
  (*(void (**)(uint64_t, __int128 *, __n128 (*)(uint64_t *), char *))(*(_QWORD *)v11 + 96))(v11, &v25, rtc::FunctionView<void ()(void)>::CallVoidPtr<std::optional<std::string> rtc::Thread::BlockingCall<webrtc::PeerConnection::CreateDataChannelTransport(std::string_view)::$_1,std::optional<std::string>,void>(webrtc::PeerConnection::CreateDataChannelTransport(std::string_view)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>, &v27);
  v12 = v30;
  if (!v30)
    return v12 != 0;
  v13 = v32;
  if (v32 >= 0x7FFFFFFFFFFFFFF8)
LABEL_33:
    abort();
  v14 = v31;
  if (v32 > 0x16)
  {
    v16 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v16 = v32 | 7;
    v17 = v16 + 1;
    v15 = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&v25 + 1) = v13;
    v26 = v17 | 0x8000000000000000;
    *(_QWORD *)&v25 = v15;
  }
  else
  {
    HIBYTE(v26) = v32;
    v15 = &v25;
  }
  v18 = (__int128 *)((char *)v15 + v13);
  if (v15 <= v14 && v18 > v14)
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v13)
    memmove(v15, v14, v13);
  *(_BYTE *)v18 = 0;
  v20 = (void **)(a1 + 608);
  if (!*(_BYTE *)(a1 + 632))
  {
    *(_OWORD *)v20 = v25;
    *(_QWORD *)(a1 + 624) = v26;
    *(_BYTE *)(a1 + 632) = 1;
    goto LABEL_21;
  }
  if ((*(char *)(a1 + 631) & 0x80000000) == 0)
  {
    *(_OWORD *)v20 = v25;
    *(_QWORD *)(a1 + 624) = v26;
    goto LABEL_21;
  }
  operator delete(*v20);
  v21 = v30;
  *(_OWORD *)v20 = v25;
  *(_QWORD *)(a1 + 624) = v26;
  if (v21)
  {
LABEL_21:
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      v22 = (void **)(a1 + 672);
      if ((*(char *)(a1 + 695) & 0x80000000) == 0)
        goto LABEL_24;
    }
    else
    {
      __p = v29;
      v22 = (void **)(a1 + 672);
      if ((*(char *)(a1 + 695) & 0x80000000) == 0)
      {
LABEL_24:
        *(std::string *)v22 = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v30)
        {
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
        }
        return v12 != 0;
      }
    }
    operator delete(*v22);
    goto LABEL_24;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::CreateDataChannelTransport(uint64_t a1, __int128 *a2, unint64_t a3)
{
  return webrtc::PeerConnection::CreateDataChannelTransport(a1 - 8, a2, a3);
}

uint64_t webrtc::PeerConnection::DestroyDataChannelTransport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;
  _QWORD v6[2];

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 24);
  v6[0] = a1;
  v6[1] = a2;
  (*(void (**)(uint64_t, _QWORD *, void (*)(uint64_t *), char *))(*(_QWORD *)v3 + 96))(v3, v6, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::DestroyDataChannelTransport(webrtc::RTCError)::$_1>, &v5);
  if (*(_BYTE *)(a1 + 632))
  {
    if (*(char *)(a1 + 631) < 0)
      operator delete(*(void **)(a1 + 608));
    *(_BYTE *)(a1 + 632) = 0;
  }
  if (*(char *)(a1 + 695) < 0)
    operator delete(*(void **)(a1 + 672));
  *(_BYTE *)(a1 + 672) = 0;
  *(_BYTE *)(a1 + 695) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::DestroyDataChannelTransport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  _QWORD v7[2];

  v3 = a1 - 8;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 24);
  v7[0] = v3;
  v7[1] = a2;
  (*(void (**)(uint64_t, _QWORD *, void (*)(uint64_t *), char *))(*(_QWORD *)v4 + 96))(v4, v7, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::DestroyDataChannelTransport(webrtc::RTCError)::$_1>, &v6);
  if (*(_BYTE *)(a1 + 624))
  {
    if (*(char *)(a1 + 623) < 0)
      operator delete(*(void **)(a1 + 600));
    *(_BYTE *)(a1 + 624) = 0;
  }
  if (*(char *)(a1 + 687) < 0)
    operator delete(*(void **)(a1 + 664));
  *(_BYTE *)(a1 + 664) = 0;
  *(_BYTE *)(a1 + 687) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 8) + 184))(v3);
}

void webrtc::PeerConnection::OnSctpDataChannelStateChanged(uint64_t a1, int a2, int a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 560);
  if (v3)
    webrtc::RTCStatsCollector::OnSctpDataChannelStateChanged(v3, a2, a3);
}

uint64_t *webrtc::PeerConnection::GetSctpSslRole_n(webrtc::PeerConnection *this)
{
  if (*((_BYTE *)this + 664))
    return webrtc::JsepTransportController::GetDtlsRole(*((_QWORD *)this + 74), (const void **)this + 80);
  else
    return 0;
}

uint64_t *`non-virtual thunk to'webrtc::PeerConnection::GetSctpSslRole_n(webrtc::PeerConnection *this)
{
  if (*((_BYTE *)this + 656))
    return webrtc::JsepTransportController::GetDtlsRole(*((_QWORD *)this + 73), (const void **)this + 79);
  else
    return 0;
}

uint64_t webrtc::PeerConnection::GetSslRole(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  std::string __p;
  _QWORD v19[2];
  uint64_t v20;

  if ((*(uint64_t (**)(_QWORD *))(*a1 + 208))(a1)
    && (*(uint64_t (**)(_QWORD *))(*a1 + 216))(a1))
  {
    v6 = *(_QWORD *)(a1[8] + 24);
    v17 = a1;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    LOBYTE(v20) = 0;
    BYTE4(v20) = 0;
    v19[0] = &v20;
    v19[1] = &v17;
    (*(void (**)(uint64_t, _QWORD *, uint64_t *(*)(uint64_t *), char *))(*(_QWORD *)v6 + 96))(v6, v19, rtc::FunctionView<void ()(void)>::CallVoidPtr<std::optional<rtc::SSLRole> rtc::Thread::BlockingCall<webrtc::PeerConnection::GetSslRole(std::string const&,rtc::SSLRole *)::$_1,std::optional<rtc::SSLRole>,void>(webrtc::PeerConnection::GetSslRole(std::string const&,rtc::SSLRole *)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>, &v16);
    v15 = v20;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v15 & 0xFF00000000) != 0)
        goto LABEL_11;
    }
    else if ((v20 & 0xFF00000000) != 0)
    {
LABEL_11:
      *a3 = v15;
      return 1;
    }
    return 0;
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    return 0;
  }
}

void webrtc::PeerConnection::GetDataChannelStats(webrtc::PeerConnection *this@<X0>, uint64_t a2@<X8>)
{
  webrtc::DataChannelController::GetDataChannelStats((webrtc::PeerConnection *)((char *)this + 720), a2);
}

void webrtc::PeerConnection::sctp_transport_name(webrtc::PeerConnection *this@<X0>, std::string *a2@<X8>)
{
  if (*((_BYTE *)this + 632) && *((_QWORD *)this + 75))
  {
    if (*((char *)this + 695) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 84), *((_QWORD *)this + 85));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 42);
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 86);
    }
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void webrtc::PeerConnection::sctp_mid(webrtc::PeerConnection *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__s.__data_[0] = 0;
  a2[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)this + 632))
  {
    if (*((char *)this + 631) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 76), *((_QWORD *)this + 77));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 38);
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 78);
    }
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void `non-virtual thunk to'webrtc::PeerConnection::sctp_mid(webrtc::PeerConnection *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__s.__data_[0] = 0;
  a2[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)this + 624))
  {
    if (*((char *)this + 623) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 75), *((_QWORD *)this + 76));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 600);
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 77);
    }
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

uint64_t webrtc::PeerConnection::GetPooledCandidateStats@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(this + 528) + 4);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v2)
    return (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(this + 488) + 56))(*(_QWORD *)(this + 488), a2);
  return this;
}

void webrtc::PeerConnection::GetTransportStatsByNames(rtc::Thread *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE *v5;
  _QWORD *v6;
  const void **v7;
  const void **v8;
  uint64_t *v9;
  uint64_t *v10;
  size_t v11;
  uint64_t **v12;
  size_t v13;
  const void *v14;
  BOOL v15;
  char v16;
  const void *v17;
  size_t v18;
  const void **v19;
  size_t v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  const void *v25;
  size_t v26;
  size_t v27;
  int v28;
  char *v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  void **v40;
  void *v41;
  void **v42;
  void **v43;
  void **v44;
  void **v45;
  void **v46;
  void **v47;
  uint64_t *v48;
  uint64_t *v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void **v54;
  void **v55;
  void **v56;
  void **v57;
  void **v58;
  void **v59;
  const void **v60;
  const void ***v61;
  char v62;
  _BYTE *v63;
  uint64_t **v64;
  unint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  char v69;
  void *v70[2];
  void *__p[4];

  if (*(_BYTE *)(*((_QWORD *)a1 + 66) + 4))
  {
    v5 = rtc::Thread::Current(a1);
    v62 = v5[217];
    v63 = v5;
    v5[217] = 0;
    a3[1] = 0;
    a3[2] = 0;
    v66 = a3 + 1;
    *a3 = a3 + 1;
    v8 = (const void **)*a2;
    v6 = a2 + 1;
    v7 = v8;
    if (v8 != v6)
    {
      v67 = v6;
      v64 = (uint64_t **)a3;
      do
      {
        memset(__p, 0, sizeof(__p));
        *(_OWORD *)v70 = 0u;
        if (!webrtc::JsepTransportController::GetStats(*((_QWORD *)a1 + 74), v7 + 4, (std::string *)v70))
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
            v65 = v65 & 0xFFFFFFFF00000000 | 0x484B;
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
          }
          v39 = (void **)__p[1];
          if (!__p[1])
            goto LABEL_94;
          v40 = (void **)__p[2];
          v41 = __p[1];
          if (__p[2] == __p[1])
          {
LABEL_67:
            __p[2] = v39;
            operator delete(v41);
            goto LABEL_93;
          }
          while (2)
          {
            if (*((char *)v40 - 17) < 0)
            {
              operator delete(*(v40 - 5));
              v42 = (void **)*(v40 - 14);
              if (!v42)
                goto LABEL_62;
LABEL_56:
              v43 = (void **)*(v40 - 13);
              v44 = v42;
              if (v43 != v42)
              {
                do
                {
                  cricket::Candidate::~Candidate(v43 - 64);
                  cricket::Candidate::~Candidate(v43 - 118);
                  v43 -= 133;
                }
                while (v43 != v42);
                v44 = (void **)*(v40 - 14);
              }
              *(v40 - 13) = v42;
              operator delete(v44);
              v45 = (void **)*(v40 - 17);
              if (v45)
              {
LABEL_63:
                v46 = (void **)*(v40 - 16);
                v47 = v45;
                if (v46 != v45)
                {
                  do
                    cricket::Candidate::~Candidate(v46 - 58);
                  while (v46 != v45);
                  v47 = (void **)*(v40 - 17);
                }
                *(v40 - 16) = v45;
                operator delete(v47);
              }
            }
            else
            {
              v42 = (void **)*(v40 - 14);
              if (v42)
                goto LABEL_56;
LABEL_62:
              v45 = (void **)*(v40 - 17);
              if (v45)
                goto LABEL_63;
            }
            v40 -= 21;
            if (v40 == v39)
            {
              v41 = __p[1];
              goto LABEL_67;
            }
            continue;
          }
        }
        v9 = v66;
        v10 = (uint64_t *)*v66;
        v11 = *((unsigned __int8 *)v7 + 55);
        v12 = (uint64_t **)v66;
        if (!*v66)
          goto LABEL_45;
        v14 = v7[4];
        v13 = (size_t)v7[5];
        if (v13)
          v15 = v14 == 0;
        else
          v15 = 0;
        v16 = !v15;
        v69 = v16;
        do
        {
          while (1)
          {
            v9 = v10;
            v17 = v7 + 4;
            v18 = v11;
            if ((v11 & 0x80) != 0)
            {
              if ((v13 & 0x8000000000000000) != 0)
                goto LABEL_107;
              v17 = v14;
              v18 = v13;
              if ((v69 & 1) == 0)
                goto LABEL_107;
            }
            v19 = (const void **)(v10 + 4);
            v20 = *((unsigned __int8 *)v10 + 55);
            v21 = v10 + 4;
            v22 = v20;
            if (*((char *)v10 + 55) < 0)
            {
              v22 = v10[5];
              if ((v22 & 0x8000000000000000) != 0 || (v21 = *v19, v22) && !v21)
              {
LABEL_107:
                __break(1u);
                return;
              }
            }
            v23 = v22 >= v18 ? v18 : v22;
            v24 = memcmp(v17, v21, v23);
            if (v24)
              break;
            if (v18 >= v22)
              goto LABEL_29;
LABEL_14:
            v10 = (uint64_t *)*v9;
            v12 = (uint64_t **)v9;
            if (!*v9)
              goto LABEL_45;
          }
          if (v24 < 0)
            goto LABEL_14;
LABEL_29:
          if ((v20 & 0x80) != 0)
          {
            v20 = v9[5];
            if ((v20 & 0x8000000000000000) != 0)
              goto LABEL_107;
            v19 = (const void **)*v19;
            if (v20)
            {
              if (!v19)
                goto LABEL_107;
            }
          }
          v25 = v7 + 4;
          v26 = v11;
          if ((v11 & 0x80) != 0)
          {
            if ((v13 & 0x8000000000000000) != 0)
              goto LABEL_107;
            v25 = v14;
            v26 = v13;
            if ((v69 & 1) == 0)
              goto LABEL_107;
          }
          if (v26 >= v20)
            v27 = v20;
          else
            v27 = v26;
          v28 = memcmp(v19, v25, v27);
          if (v28)
          {
            if ((v28 & 0x80000000) == 0)
              goto LABEL_103;
          }
          else if (v20 >= v26)
          {
LABEL_103:
            v29 = (char *)v9;
            v50 = (void **)(v9 + 7);
            if (*((char *)v9 + 79) < 0)
              goto LABEL_72;
            goto LABEL_73;
          }
          v10 = (uint64_t *)v9[1];
        }
        while (v10);
        v12 = (uint64_t **)(v9 + 1);
LABEL_45:
        v29 = (char *)operator new(0x68uLL);
        v30 = (std::string *)(v29 + 32);
        if ((v11 & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(v30, (const std::string::value_type *)v7[4], (std::string::size_type)v7[5]);
        }
        else
        {
          v31 = *((_OWORD *)v7 + 2);
          *((_QWORD *)v29 + 6) = v7[6];
          *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
        }
        *(_OWORD *)(v29 + 88) = 0u;
        *(_OWORD *)(v29 + 72) = 0u;
        *(_OWORD *)(v29 + 56) = 0u;
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 2) = v9;
        *v12 = (uint64_t *)v29;
        v48 = (uint64_t *)**v64;
        v49 = (uint64_t *)v29;
        if (v48)
        {
          *v64 = v48;
          v49 = *v12;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v64[1], v49);
        v64[2] = (uint64_t *)((char *)v64[2] + 1);
        v50 = (void **)(v29 + 56);
        if (v29[79] < 0)
LABEL_72:
          operator delete(*v50);
LABEL_73:
        *(_OWORD *)v50 = *(_OWORD *)v70;
        v50[2] = __p[0];
        HIBYTE(__p[0]) = 0;
        LOBYTE(v70[0]) = 0;
        v51 = *((_QWORD *)v29 + 10);
        if (v51)
        {
          v52 = *((_QWORD *)v29 + 11);
          v53 = (void *)*((_QWORD *)v29 + 10);
          if (v52 == v51)
          {
LABEL_91:
            *((_QWORD *)v29 + 11) = v51;
            operator delete(v53);
            goto LABEL_92;
          }
          while (2)
          {
            if (*(char *)(v52 - 17) < 0)
            {
              operator delete(*(void **)(v52 - 40));
              v54 = *(void ***)(v52 - 112);
              if (!v54)
                goto LABEL_86;
LABEL_80:
              v55 = *(void ***)(v52 - 104);
              v56 = v54;
              if (v55 != v54)
              {
                do
                {
                  cricket::Candidate::~Candidate(v55 - 64);
                  cricket::Candidate::~Candidate(v55 - 118);
                  v55 -= 133;
                }
                while (v55 != v54);
                v56 = *(void ***)(v52 - 112);
              }
              *(_QWORD *)(v52 - 104) = v54;
              operator delete(v56);
              v57 = *(void ***)(v52 - 136);
              if (v57)
              {
LABEL_87:
                v58 = *(void ***)(v52 - 128);
                v59 = v57;
                if (v58 != v57)
                {
                  do
                    cricket::Candidate::~Candidate(v58 - 58);
                  while (v58 != v57);
                  v59 = *(void ***)(v52 - 136);
                }
                *(_QWORD *)(v52 - 128) = v57;
                operator delete(v59);
              }
            }
            else
            {
              v54 = *(void ***)(v52 - 112);
              if (v54)
                goto LABEL_80;
LABEL_86:
              v57 = *(void ***)(v52 - 136);
              if (v57)
                goto LABEL_87;
            }
            v52 -= 168;
            if (v52 == v51)
            {
              v53 = (void *)*((_QWORD *)v29 + 10);
              goto LABEL_91;
            }
            continue;
          }
        }
LABEL_92:
        *((_OWORD *)v29 + 5) = *(_OWORD *)&__p[1];
        *((void **)v29 + 12) = __p[3];
        memset(&__p[1], 0, 24);
LABEL_93:
        v6 = v67;
LABEL_94:
        if (SHIBYTE(__p[0]) < 0)
        {
          operator delete(v70[0]);
          v60 = (const void **)v7[1];
          if (v60)
            goto LABEL_98;
          do
          {
LABEL_100:
            v61 = (const void ***)v7[2];
            v15 = *v61 == v7;
            v7 = (const void **)v61;
          }
          while (!v15);
        }
        else
        {
          v60 = (const void **)v7[1];
          if (!v60)
            goto LABEL_100;
          do
          {
LABEL_98:
            v61 = (const void ***)v60;
            v60 = (const void **)*v60;
          }
          while (v60);
        }
        v7 = (const void **)v61;
      }
      while (v61 != v6);
    }
    v63[217] = v62;
  }
  else
  {
    a3[2] = 0;
    a3[1] = 0;
    *a3 = a3 + 1;
  }
}

BOOL webrtc::PeerConnection::GetLocalCertificate(uint64_t a1, const void **a2, unsigned int **a3)
{
  _BOOL8 result;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;

  result = 0;
  if (a3 && *(_BYTE *)(*(_QWORD *)(a1 + 528) + 4))
  {
    webrtc::JsepTransportController::GetLocalCertificate(*(_QWORD *)(a1 + 592), a2, &v15);
    v6 = v15;
    v15 = 0;
    v7 = *a3;
    *a3 = v6;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = *((_QWORD *)v7 + 1);
        *((_QWORD *)v7 + 1) = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        MEMORY[0x20BD0ADEC](v7, 0x1020C40D5A9D86FLL);
      }
      v11 = v15;
      if (v15)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          v14 = *((_QWORD *)v11 + 1);
          *((_QWORD *)v11 + 1) = 0;
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          MEMORY[0x20BD0ADEC](v11, 0x1020C40D5A9D86FLL);
        }
      }
    }
    return *a3 != 0;
  }
  return result;
}

uint64_t *webrtc::PeerConnection::GetRemoteSSLCertChain@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  return webrtc::JsepTransportController::GetRemoteSSLCertChain(*(_QWORD *)(a1 + 592), a2, a3);
}

uint64_t webrtc::PeerConnection::IceRestartPending(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 696) + 80))(*(_QWORD *)(a1 + 696));
}

uint64_t webrtc::PeerConnection::NeedsIceRestart(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  _QWORD v5[2];
  _QWORD v6[2];
  unsigned __int8 v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 24);
  v5[0] = a1;
  v5[1] = a2;
  v7 = 0;
  v6[0] = &v7;
  v6[1] = v5;
  (*(void (**)(uint64_t, _QWORD *, uint64_t *(*)(uint64_t), char *))(*(_QWORD *)v2 + 96))(v2, v6, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::PeerConnection::NeedsIceRestart(std::string const&)::$_0,BOOL,void>(webrtc::PeerConnection::NeedsIceRestart(std::string const&)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v4);
  return v7;
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::NeedsIceRestart(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  _QWORD v6[2];
  _QWORD v7[2];
  unsigned __int8 v8;

  v2 = a1 - 8;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 24);
  v6[0] = v2;
  v6[1] = a2;
  v8 = 0;
  v7[0] = &v8;
  v7[1] = v6;
  (*(void (**)(uint64_t, _QWORD *, uint64_t *(*)(uint64_t), char *))(*(_QWORD *)v3 + 96))(v3, v7, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::PeerConnection::NeedsIceRestart(std::string const&)::$_0,BOOL,void>(webrtc::PeerConnection::NeedsIceRestart(std::string const&)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v5);
  return v8;
}

uint64_t webrtc::PeerConnection::GetCallStats@<X0>(webrtc::PeerConnection *this@<X0>, _QWORD *a2@<X8>)
{
  _BOOL8 IsCurrent;
  _BYTE *v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  webrtc::PeerConnection *v10;
  _QWORD v11[2];

  IsCurrent = rtc::Thread::IsCurrent(*(rtc::Thread **)(*((_QWORD *)this + 8) + 40));
  if (IsCurrent)
  {
    v5 = rtc::Thread::Current((rtc::Thread *)IsCurrent);
    v6 = v5[217];
    v5[217] = 0;
    result = *((_QWORD *)this + 64);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      a2[3] = -1;
    }
    v5[217] = v6;
  }
  else
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 8) + 40);
    v10 = this;
    v11[0] = a2;
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    *((_OWORD *)a2 + 1) = xmmword_208F08CC0;
    v11[1] = &v10;
    return (*(uint64_t (**)(uint64_t, _QWORD *, double (*)(uint64_t), char *))(*(_QWORD *)v8 + 96))(v8, v11, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::Call::Stats rtc::Thread::BlockingCall<webrtc::PeerConnection::GetCallStats(void)::$_0,webrtc::Call::Stats,void>(webrtc::PeerConnection::GetCallStats(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v9);
  }
  return result;
}

uint64_t webrtc::PeerConnection::GetAudioDeviceStats@<X0>(webrtc::PeerConnection *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(*((_QWORD *)this + 8) + 96);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
  }
  else
  {
    *a2 = 0;
    a2[40] = 0;
  }
  return result;
}

void webrtc::PeerConnection::TeardownDataChannelTransport_n(uint64_t a1, int *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  std::string v19;
  _DWORD v20[2];
  int v21;
  std::string __p;
  _DWORD v23[2];

  if (*(_BYTE *)(a1 + 664))
  {
    v4 = (void **)(a1 + 640);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 664))
      {
        __break(1u);
        return;
      }
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    }
    if (*(_BYTE *)(a1 + 664))
    {
      if (*(char *)(a1 + 663) < 0)
        operator delete(*v4);
      *(_BYTE *)(a1 + 664) = 0;
    }
  }
  v12 = *a2;
  v18 = *a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    v12 = v18;
  }
  else
  {
    v19 = *(std::string *)(a2 + 2);
  }
  v20[0] = a2[8];
  *(_DWORD *)((char *)v20 + 3) = *(int *)((char *)a2 + 35);
  v21 = v12;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  else
    __p = v19;
  v23[0] = v20[0];
  *(_DWORD *)((char *)v23 + 3) = *(_DWORD *)((char *)v20 + 3);
  (*(void (**)(uint64_t, int *))(*(_QWORD *)(a1 + 720) + 104))(a1 + 720, &v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = *(_QWORD *)(a1 + 736);
  if (v13)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 40))(v13, 0);
  *(_QWORD *)(a1 + 736) = 0;
  v14 = *(_BYTE **)(a1 + 808);
  if (v14)
  {
    *v14 = 0;
    v15 = (unsigned int *)(v14 + 4);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      MEMORY[0x20BD0ADEC]();
    *(_QWORD *)(a1 + 808) = 0;
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

uint64_t webrtc::PeerConnection::ValidateBundleSettings(int a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  size_t v13;
  int v14;

  if (!*(_QWORD *)(a3 + 16))
    return 1;
  v4 = *a2;
  if (*a2 == a2[1])
    return 1;
  v6 = (uint64_t *)(a3 + 8);
  while (1)
  {
    result = (uint64_t)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(a3, (const void **)v4, *(uint64_t **)(a3 + 8), v6);
    if (v6 == (uint64_t *)result)
      goto LABEL_23;
    v8 = result;
    if (*(char *)(v4 + 23) < 0)
    {
      v9 = *(_QWORD *)(v4 + 8);
      if ((v9 & 0x8000000000000000) != 0)
        break;
      result = *(_QWORD *)v4;
      if (v9)
      {
        if (!result)
          break;
      }
    }
    else
    {
      v9 = *(unsigned __int8 *)(v4 + 23);
      result = v4;
    }
    v10 = (_QWORD *)(v8 + 32);
    if ((*(char *)(v8 + 55) & 0x80000000) == 0)
    {
      v11 = *(unsigned __int8 *)(v8 + 55);
      goto LABEL_18;
    }
    v11 = *(_QWORD *)(v8 + 40);
    if ((v11 & 0x8000000000000000) != 0)
      break;
    v10 = (_QWORD *)*v10;
    if (v11 && v10 == 0)
      break;
LABEL_18:
    if (v11 >= v9)
      v13 = v9;
    else
      v13 = v11;
    v14 = memcmp((const void *)result, v10, v13);
    if (!v14)
    {
      if (v9 >= v11)
        goto LABEL_24;
LABEL_23:
      v8 = (uint64_t)v6;
      goto LABEL_24;
    }
    if (v14 < 0)
      goto LABEL_23;
LABEL_24:
    if (v6 != (uint64_t *)v8
      && !*(_BYTE *)(v4 + 28)
      && !*(_BYTE *)(v4 + 29)
      && !*(_DWORD *)(v4 + 24)
      && !*(_BYTE *)(*(_QWORD *)(v4 + 32) + 32))
    {
      return 0;
    }
    v4 += 40;
    if (v4 == a2[1])
      return 1;
  }
  __break(1u);
  return result;
}

uint64_t *webrtc::PeerConnection::ReportSdpBundleUsage(webrtc::PeerConnection *this, const webrtc::SessionDescriptionInterface *a2)
{
  uint64_t *result;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD __s2[5];
  char v17;

  result = (uint64_t *)(*(uint64_t (**)(const webrtc::SessionDescriptionInterface *))(*(_QWORD *)a2 + 32))(a2);
  v17 = 6;
  if (__s2 <= (_DWORD *)"BUNDLE" && (char *)&__s2[1] + 2 > "BUNDLE")
  {
    __break(1u);
  }
  else
  {
    strcpy((char *)__s2, "BUNDLE");
    v5 = (unsigned __int8 *)result[6];
    v6 = (unsigned __int8 *)result[7];
    while (2)
    {
      if (v5 != v6)
      {
        while (1)
        {
          v7 = v5[23];
          v8 = *((_QWORD *)v5 + 1);
          if ((v7 & 0x80u) == 0)
            v9 = v5[23];
          else
            v9 = *((_QWORD *)v5 + 1);
          if (v9 != 6)
            goto LABEL_6;
          if ((v7 & 0x80) == 0)
            break;
          v10 = *(const void **)v5;
          v5 += 48;
          if (!memcmp(v10, __s2, v8) || v5 == v6)
            goto LABEL_23;
        }
        if (v5[23])
        {
          v12 = (unsigned __int8 *)__s2;
          v13 = v5;
          while (*v13 == *v12)
          {
            ++v13;
            ++v12;
            if (!--v7)
              goto LABEL_23;
          }
LABEL_6:
          v5 += 48;
          continue;
        }
      }
      break;
    }
LABEL_23:
    result = (uint64_t *)(*(uint64_t (**)(const webrtc::SessionDescriptionInterface *))(*(_QWORD *)a2 + 32))(a2);
    v14 = *result;
    v15 = result[1];
    if (*result != v15)
    {
      do
      {
        result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 32) + 16))(*(_QWORD *)(v14 + 32));
        v14 += 40;
      }
      while (v14 != v15);
    }
  }
  return result;
}

uint64_t webrtc::PeerConnection::NoteUsageEvent(uint64_t result, int a2)
{
  *(_DWORD *)(result + 708) |= a2;
  return result;
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::NoteUsageEvent(uint64_t result, int a2)
{
  *(_DWORD *)(result + 700) |= a2;
  return result;
}

void webrtc::PeerConnection::AddRemoteCandidate(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  std::string __p;
  std::string v13[18];
  std::string v14;
  _BYTE *v15;
  uint64_t v16;
  char v17;
  int v18;
  int v19;
  char v20;
  _QWORD v21[2];
  uint64_t (*v22)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v23)(uint64_t);

  cricket::Candidate::Candidate(&v14, a3);
  v18 = 0;
  if (v17 < 0)
  {
    v16 = 0;
    *v15 = 0;
    v19 = 0;
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 24);
    v6 = *(unsigned int **)(a1 + 528);
    if (v6)
    {
      do
LABEL_3:
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    v17 = 0;
    LOBYTE(v15) = 0;
    v19 = 0;
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 24);
    v6 = *(unsigned int **)(a1 + 528);
    if (v6)
      goto LABEL_3;
  }
  v11 = a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  cricket::Candidate::Candidate(v13, &v14);
  v8 = operator new();
  *(_QWORD *)v8 = v11;
  *(std::string *)(v8 + 8) = __p;
  memset(&__p, 0, sizeof(__p));
  cricket::Candidate::Candidate((std::string *)(v8 + 32), v13);
  v9 = (_QWORD *)operator new();
  *v9 = v6;
  v9[1] = v8;
  v9[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::AddRemoteCandidate(std::string const&,cricket::Candidate const&)::$_1>;
  v9[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::AddRemoteCandidate(std::string const&,cricket::Candidate const&)::$_1 &&>;
  v21[0] = v9;
  v22 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v23 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v5 + 8))(v5, v21, &v20, &v10);
  v22(1, v21, v21);
  cricket::Candidate::~Candidate((void **)&v13[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  cricket::Candidate::~Candidate((void **)&v14.__r_.__value_.__l.__data_);
}

void `non-virtual thunk to'webrtc::PeerConnection::AddRemoteCandidate(uint64_t a1, uint64_t a2, std::string *a3)
{
  webrtc::PeerConnection::AddRemoteCandidate(a1 - 8, a2, a3);
}

uint64_t webrtc::PeerConnection::SrtpRequired(webrtc::PeerConnection *this)
{
  return *((unsigned __int8 *)this + 704);
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::SrtpRequired(webrtc::PeerConnection *this)
{
  return *((unsigned __int8 *)this + 696);
}

void webrtc::PeerConnection::ReportTransportStats(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t **v18;
  int v19;
  int v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  int v24;
  _DWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *DtlsTransport;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  int v35;
  _DWORD *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD **v43;
  _QWORD *v44;
  _QWORD **v45;
  int v46;
  _QWORD **v47;
  _QWORD ***v48;
  _QWORD *v49;
  int v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _BYTE *v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *Stats;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  int v82;
  int v83;
  BOOL v84;
  unsigned __int16 *v85;
  uint64_t v86;
  int v87;
  int v88;
  BOOL v89;
  int v90;
  int v91;
  BOOL v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  void *v98;
  void **v99;
  void **v100;
  void **v101;
  void **v102;
  void **v103;
  void **v104;
  char *v105;
  char **v106;
  _QWORD **v107;
  _QWORD **v108;
  _QWORD *v109;
  _QWORD **v110;
  _QWORD *v112;
  _QWORD **v113;
  std::string *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  void *__p[2];
  __int128 v122;
  __int128 v123;
  _QWORD **v124;
  _QWORD *v125;
  uint64_t v126;
  char **v127;
  char *v128[2];

  v4 = rtc::Thread::Current((rtc::Thread *)a1);
  v5 = v4[217];
  v4[217] = 0;
  v128[0] = 0;
  v128[1] = 0;
  v127 = v128;
  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v7)
  {
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*v6 + 16) + 160);
      if (v8)
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
        if (v10 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_219;
        v11 = (char *)v9;
        v12 = (char *)v10;
        if (v10 > 0x16)
        {
          v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v14 = v10 | 7;
          v15 = v14 + 1;
          v13 = (char *)operator new(v14 + 1);
          __p[1] = v12;
          *(_QWORD *)&v122 = v15 | 0x8000000000000000;
          __p[0] = v13;
        }
        else
        {
          BYTE7(v122) = v10;
          v13 = (char *)__p;
        }
        v16 = &v12[(_QWORD)v13];
        if (v13 <= v11 && v16 > v11)
          goto LABEL_218;
        if (v12)
          memmove(v13, v11, (size_t)v12);
        *v16 = 0;
        v18 = std::__tree<std::__value_type<std::string,std::set<cricket::MediaType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<cricket::MediaType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<cricket::MediaType>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v127, (uint64_t **)__p, (uint64_t)__p);
        v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
        v20 = v19;
        v22 = v18 + 8;
        v21 = v18[8];
        if (v21)
        {
          while (1)
          {
            while (1)
            {
              v23 = (uint64_t **)v21;
              v24 = *((_DWORD *)v21 + 7);
              if (v19 >= v24)
                break;
              v21 = *v23;
              v22 = v23;
              if (!*v23)
                goto LABEL_24;
            }
            if (v24 >= v19)
              break;
            v21 = v23[1];
            if (!v21)
            {
              v22 = v23 + 1;
              goto LABEL_24;
            }
          }
        }
        else
        {
          v23 = v18 + 8;
LABEL_24:
          v25 = operator new(0x20uLL);
          v25[7] = v20;
          *(_QWORD *)v25 = 0;
          *((_QWORD *)v25 + 1) = 0;
          *((_QWORD *)v25 + 2) = v23;
          *v22 = (uint64_t *)v25;
          v26 = (uint64_t *)*v18[7];
          if (v26)
          {
            v18[7] = v26;
            v27 = *v22;
          }
          else
          {
            v27 = (uint64_t *)v25;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v18[8], v27);
          v18[9] = (uint64_t *)((char *)v18[9] + 1);
        }
        if (SBYTE7(v122) < 0)
          operator delete(__p[0]);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  v120 = v4;
  if (*(_BYTE *)(a1 + 664))
  {
    DtlsTransport = webrtc::JsepTransportController::GetDtlsTransport(*(_QWORD *)(a1 + 592), (const void **)(a1 + 640));
    if (DtlsTransport)
    {
      v29 = (uint64_t **)(*(uint64_t (**)(uint64_t *))(*DtlsTransport + 16))(DtlsTransport);
      v30 = std::__tree<std::__value_type<std::string,std::set<cricket::MediaType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<cricket::MediaType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<cricket::MediaType>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v127, v29, (uint64_t)v29);
      v31 = v30;
      v33 = v30 + 8;
      v32 = v30[8];
      if (v32)
      {
        while (1)
        {
          while (1)
          {
            v34 = (uint64_t **)v32;
            v35 = *((_DWORD *)v32 + 7);
            if (v35 < 3)
              break;
            v32 = *v34;
            v33 = v34;
            if (!*v34)
              goto LABEL_39;
          }
          if (v35 == 2)
            break;
          v32 = v34[1];
          if (!v32)
          {
            v33 = v34 + 1;
            goto LABEL_39;
          }
        }
      }
      else
      {
        v34 = v30 + 8;
LABEL_39:
        v36 = operator new(0x20uLL);
        v36[7] = 2;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 1) = 0;
        *((_QWORD *)v36 + 2) = v34;
        *v33 = (uint64_t *)v36;
        v37 = (uint64_t *)*v31[7];
        if (v37)
        {
          v31[7] = v37;
          v38 = *v33;
        }
        else
        {
          v38 = (uint64_t *)v36;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v31[8], v38);
        v31[9] = (uint64_t *)((char *)v31[9] + 1);
      }
    }
  }
  v39 = (uint64_t *)v127;
  if (v127 == v128)
  {
LABEL_217:
    std::__tree<std::__value_type<std::string,std::set<cricket::MediaType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<cricket::MediaType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<cricket::MediaType>>>>::destroy(v128[0]);
    v120[217] = v5;
    return;
  }
  while (1)
  {
    v125 = 0;
    v126 = 0;
    v124 = &v125;
    v40 = (uint64_t *)v39[7];
    if (v40 != v39 + 8)
    {
      v41 = 0;
      while (1)
      {
        v42 = v125;
        v43 = &v125;
        if (v124 != &v125)
        {
          v44 = v125;
          v45 = &v125;
          if (v125)
          {
            do
            {
              v43 = (_QWORD **)v44;
              v44 = (_QWORD *)v44[1];
            }
            while (v44);
          }
          else
          {
            do
            {
              v43 = (_QWORD **)v45[2];
              v84 = *v43 == v45;
              v45 = v43;
            }
            while (v84);
          }
          v46 = *((_DWORD *)v40 + 7);
          if (*((_DWORD *)v43 + 7) >= v46)
            break;
        }
        if (v125)
          v47 = v43;
        else
          v47 = &v125;
        if (v125)
          v48 = (_QWORD ***)v43;
        else
          v48 = &v124;
        if (v125)
          v49 = v43 + 1;
        else
          v49 = &v125;
        if (!v48[1])
          goto LABEL_73;
LABEL_98:
        v64 = (uint64_t *)v40[1];
        if (v64)
        {
          do
          {
            v65 = v64;
            v64 = (uint64_t *)*v64;
          }
          while (v64);
        }
        else
        {
          do
          {
            v65 = (uint64_t *)v40[2];
            v84 = *v65 == (_QWORD)v40;
            v40 = v65;
          }
          while (!v84);
        }
        v40 = v65;
        if (v65 == v39 + 8)
          goto LABEL_110;
      }
      v49 = &v125;
      v47 = &v125;
      if (v125)
      {
        while (1)
        {
          while (1)
          {
            v47 = (_QWORD **)v42;
            v50 = *((_DWORD *)v42 + 7);
            if (v50 <= v46)
              break;
            v42 = *v47;
            v49 = v47;
            if (!*v47)
              goto LABEL_73;
          }
          if (v50 >= v46)
            goto LABEL_98;
          v42 = v47[1];
          if (!v42)
          {
            v49 = v47 + 1;
            break;
          }
        }
      }
LABEL_73:
      v51 = operator new(0x20uLL);
      *((_DWORD *)v51 + 7) = *((_DWORD *)v40 + 7);
      *v51 = 0;
      v51[1] = 0;
      v51[2] = v47;
      *v49 = v51;
      if (*v124)
      {
        v124 = (_QWORD **)*v124;
        v51 = (_QWORD *)*v49;
      }
      v52 = v125;
      v84 = v51 == v125;
      *((_BYTE *)v51 + 24) = v51 == v125;
      if (!v84)
      {
        do
        {
          v53 = v51[2];
          if (*(_BYTE *)(v53 + 24))
            break;
          v54 = *(_QWORD **)(v53 + 16);
          v55 = *v54;
          if (*v54 == v53)
          {
            v58 = v54[1];
            if (!v58 || (v59 = *(unsigned __int8 *)(v58 + 24), v56 = (_BYTE *)(v58 + 24), v59))
            {
              if (*(_QWORD **)v53 == v51)
              {
                *(_BYTE *)(v53 + 24) = 1;
                *((_BYTE *)v54 + 24) = 0;
                v62 = *(_QWORD *)(v53 + 8);
                *v54 = v62;
                if (v62)
                  goto LABEL_90;
              }
              else
              {
                v60 = *(uint64_t **)(v53 + 8);
                v61 = *v60;
                *(_QWORD *)(v53 + 8) = *v60;
                if (v61)
                {
                  *(_QWORD *)(v61 + 16) = v53;
                  v54 = *(_QWORD **)(v53 + 16);
                }
                v60[2] = (uint64_t)v54;
                *(_QWORD *)(*(_QWORD *)(v53 + 16) + 8 * (**(_QWORD **)(v53 + 16) != v53)) = v60;
                *v60 = v53;
                *(_QWORD *)(v53 + 16) = v60;
                v54 = (_QWORD *)v60[2];
                v53 = *v54;
                *((_BYTE *)v60 + 24) = 1;
                *((_BYTE *)v54 + 24) = 0;
                v62 = *(_QWORD *)(v53 + 8);
                *v54 = v62;
                if (v62)
LABEL_90:
                  *(_QWORD *)(v62 + 16) = v54;
              }
              *(_QWORD *)(v53 + 16) = v54[2];
              *(_QWORD *)(v54[2] + 8 * (*(_QWORD *)v54[2] != (_QWORD)v54)) = v53;
              *(_QWORD *)(v53 + 8) = v54;
LABEL_96:
              v54[2] = v53;
              break;
            }
          }
          else if (!v55 || (v57 = *(unsigned __int8 *)(v55 + 24), v56 = (_BYTE *)(v55 + 24), v57))
          {
            if (*(_QWORD **)v53 == v51)
            {
              v66 = v51[1];
              *(_QWORD *)v53 = v66;
              if (v66)
              {
                *(_QWORD *)(v66 + 16) = v53;
                v54 = *(_QWORD **)(v53 + 16);
              }
              v51[2] = v54;
              *(_QWORD *)(*(_QWORD *)(v53 + 16) + 8 * (**(_QWORD **)(v53 + 16) != v53)) = v51;
              v51[1] = v53;
              *(_QWORD *)(v53 + 16) = v51;
              v54 = (_QWORD *)v51[2];
              *((_BYTE *)v51 + 24) = 1;
              *((_BYTE *)v54 + 24) = 0;
              v53 = v54[1];
              v63 = *(_QWORD **)v53;
              v54[1] = *(_QWORD *)v53;
              if (v63)
LABEL_94:
                v63[2] = v54;
            }
            else
            {
              *(_BYTE *)(v53 + 24) = 1;
              *((_BYTE *)v54 + 24) = 0;
              v53 = v54[1];
              v63 = *(_QWORD **)v53;
              v54[1] = *(_QWORD *)v53;
              if (v63)
                goto LABEL_94;
            }
            *(_QWORD *)(v53 + 16) = v54[2];
            *(_QWORD *)(v54[2] + 8 * (*(_QWORD *)v54[2] != (_QWORD)v54)) = v53;
            *(_QWORD *)v53 = v54;
            goto LABEL_96;
          }
          *(_BYTE *)(v53 + 24) = 1;
          v51 = v54;
          *((_BYTE *)v54 + 24) = v54 == v52;
          *v56 = 1;
        }
        while (v54 != v52);
      }
      v126 = ++v41;
      goto LABEL_98;
    }
LABEL_110:
    v122 = 0u;
    v123 = 0u;
    *(_OWORD *)__p = 0u;
    Stats = webrtc::JsepTransportController::GetStats(*(_QWORD *)(a1 + 592), (const void **)v39 + 4, (std::string *)__p);
    v72 = *((_QWORD *)&v122 + 1);
    if (!(_DWORD)Stats || *((_QWORD *)&v122 + 1) == (_QWORD)v123)
      goto LABEL_165;
    v73 = *((_QWORD *)&v122 + 1);
    while (1)
    {
      v74 = *(unsigned __int8 **)(v73 + 56);
      v75 = *(unsigned __int8 **)(v73 + 64);
      if (v74 != v75)
        break;
LABEL_113:
      v73 += 168;
      if (v73 == (_QWORD)v123)
        goto LABEL_160;
    }
    v76 = v74 + 175;
    while (!*(v76 - 175))
    {
      v77 = v76 + 889;
      v76 += 1064;
      if (v77 == v75)
        goto LABEL_113;
    }
    v78 = v76 - 23;
    v79 = *v76;
    v80 = v76 - 23;
    v81 = v79;
    if ((char)*v76 < 0)
    {
      v81 = *(_QWORD *)(v76 - 15);
      if (v81 < 0 || (v80 = *(unsigned __int8 **)v78, v81) && !v80)
      {
LABEL_218:
        __break(1u);
LABEL_219:
        abort();
      }
    }
    if (v81 != 3
      || ((v82 = *(unsigned __int16 *)v80, v83 = v80[2], v82 == (unsigned __int16)cricket::TCP_PROTOCOL_NAME)
        ? (v84 = v83 == 112)
        : (v84 = 0),
          !v84))
    {
      if (*(_DWORD *)(v76 + 153) != 3)
        goto LABEL_142;
      v85 = (unsigned __int16 *)(v76 + 1);
      if ((char)v76[24] < 0)
      {
        v86 = *(_QWORD *)(v76 + 9);
        if (v86 < 0)
          goto LABEL_218;
        v85 = *(unsigned __int16 **)v85;
        if (v86)
        {
          if (!v85)
            goto LABEL_218;
        }
      }
      else
      {
        v86 = v76[24];
      }
      if (v86 != 3
        || ((v87 = *v85, v88 = *((unsigned __int8 *)v85 + 2), v87 == (unsigned __int16)cricket::TCP_PROTOCOL_NAME)
          ? (v89 = v88 == 112)
          : (v89 = 0),
            !v89))
      {
LABEL_142:
        if ((v79 & 0x80) != 0)
        {
          v79 = *(_QWORD *)(v76 - 15);
          if (v79 < 0)
            goto LABEL_218;
          v78 = *(unsigned __int8 **)v78;
          if (v79)
          {
            if (!v78)
              goto LABEL_218;
          }
        }
        if (v79 != 3
          || ((v90 = *(unsigned __int16 *)v78, v91 = v78[2], v90 == (unsigned __int16)cricket::UDP_PROTOCOL_NAME)
            ? (v92 = v91 == 112)
            : (v92 = 0),
              !v92))
        {
          rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)Stats);
        }
      }
    }
    v93 = *(_DWORD *)(v76 + 57);
    if (v93 != 2 && v93 != 30)
    {
      v94 = v76[48];
      if ((char)v76[48] < 0)
      {
        v95 = *(_QWORD *)(v76 + 33);
        if (v93)
          break;
      }
      else
      {
        v95 = v76[48];
        if (v93)
          break;
      }
      if (!v95 || v76[89])
        break;
      if ((v94 & 0x80) != 0)
        v94 = *(_QWORD *)(v76 + 33);
      if (!v94)
        break;
    }
LABEL_160:
    if (*(_BYTE *)(a1 + 704))
      v96 = *((_QWORD *)&v122 + 1) == (_QWORD)v123;
    else
      v96 = 1;
    if (!v96)
    {
      if (!*(_QWORD *)(*((_QWORD *)&v122 + 1) + 8))
        goto LABEL_166;
      v107 = v124;
      if (*(_DWORD *)(*((_QWORD *)&v122 + 1) + 12) && v124 != &v125)
      {
        v108 = v124;
        do
        {
          v109 = v108[1];
          if (v109)
          {
            do
            {
              v110 = (_QWORD **)v109;
              v109 = (_QWORD *)*v109;
            }
            while (v109);
          }
          else
          {
            do
            {
              v110 = (_QWORD **)v108[2];
              v84 = *v110 == v108;
              v108 = v110;
            }
            while (!v84);
          }
          v108 = v110;
        }
        while (v110 != &v125);
      }
      if (!*(_WORD *)(*((_QWORD *)&v122 + 1) + 160) || v124 == &v125)
        goto LABEL_166;
      do
      {
        v112 = v107[1];
        if (v112)
        {
          do
          {
            v113 = (_QWORD **)v112;
            v112 = (_QWORD *)*v112;
          }
          while (v112);
        }
        else
        {
          do
          {
            v113 = (_QWORD **)v107[2];
            v84 = *v113 == v107;
            v107 = v113;
          }
          while (!v84);
        }
        v107 = v113;
      }
      while (v113 != &v125);
    }
LABEL_165:
    if (!*((_QWORD *)&v122 + 1))
      goto LABEL_184;
LABEL_166:
    v97 = v123;
    v98 = (void *)*((_QWORD *)&v122 + 1);
    if ((_QWORD)v123 != *((_QWORD *)&v122 + 1))
    {
      while (1)
      {
        if (*(char *)(v97 - 17) < 0)
        {
          operator delete(*(void **)(v97 - 40));
          v99 = *(void ***)(v97 - 112);
          if (v99)
          {
LABEL_172:
            v100 = *(void ***)(v97 - 104);
            v101 = v99;
            if (v100 != v99)
            {
              do
              {
                cricket::Candidate::~Candidate(v100 - 64);
                cricket::Candidate::~Candidate(v100 - 118);
                v100 -= 133;
              }
              while (v100 != v99);
              v101 = *(void ***)(v97 - 112);
            }
            *(_QWORD *)(v97 - 104) = v99;
            operator delete(v101);
            v102 = *(void ***)(v97 - 136);
            if (!v102)
              goto LABEL_169;
LABEL_179:
            v103 = *(void ***)(v97 - 128);
            v104 = v102;
            if (v103 != v102)
            {
              do
                cricket::Candidate::~Candidate(v103 - 58);
              while (v103 != v102);
              v104 = *(void ***)(v97 - 136);
            }
            *(_QWORD *)(v97 - 128) = v102;
            operator delete(v104);
            goto LABEL_169;
          }
        }
        else
        {
          v99 = *(void ***)(v97 - 112);
          if (v99)
            goto LABEL_172;
        }
        v102 = *(void ***)(v97 - 136);
        if (v102)
          goto LABEL_179;
LABEL_169:
        v97 -= 168;
        if (v97 == v72)
        {
          v98 = (void *)*((_QWORD *)&v122 + 1);
          break;
        }
      }
    }
    *(_QWORD *)&v123 = v72;
    operator delete(v98);
LABEL_184:
    if (SBYTE7(v122) < 0)
    {
      operator delete(__p[0]);
      std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v125);
      v105 = (char *)v39[1];
      if (!v105)
        goto LABEL_190;
      do
      {
LABEL_188:
        v106 = (char **)v105;
        v105 = *(char **)v105;
      }
      while (v105);
      goto LABEL_45;
    }
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v125);
    v105 = (char *)v39[1];
    if (v105)
      goto LABEL_188;
    do
    {
LABEL_190:
      v106 = (char **)v39[2];
      v84 = *v106 == (char *)v39;
      v39 = (uint64_t *)v106;
    }
    while (!v84);
LABEL_45:
    v39 = (uint64_t *)v106;
    if (v106 == v128)
      goto LABEL_217;
  }
  v114 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc", 2805, "!local.address().hostname().empty() && local.address().IsUnresolvedIP()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v68, v69, v70, v71, v119);
  webrtc::PeerConnection::OnTransportChanged((uint64_t)v114, v115, v116, v117, v118);
}

uint64_t webrtc::PeerConnection::OnTransportChanged(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  void (***v16)(_QWORD);
  uint64_t v17;
  char *v18;
  char v19;
  char *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v50;
  char v51;
  uint64_t v52;
  std::string __p;
  char v54;
  _QWORD v55[2];
  uint64_t (*v56)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v57)(uint64_t);

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 64) + 96))
  {
    v28 = 1;
    if (*(_BYTE *)(a1 + 664))
      goto LABEL_39;
    return v28;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 744))(a1);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(_QWORD *)(v10 + 16);
  v13 = v12 - v11;
  if (v12 == v11)
  {
    v28 = 1;
    if (*(_BYTE *)(a1 + 664))
      goto LABEL_39;
    return v28;
  }
  if ((v13 & 0x8000000000000000) != 0)
    abort();
  v14 = (char *)operator new(v13);
  v15 = 0;
  do
  {
    v16 = *(void (****)(_QWORD))(v11 + v15);
    *(_QWORD *)&v14[v15] = v16;
    if (v16)
      (**v16)(v16);
    v15 += 8;
  }
  while (v11 + v15 != v12);
  if (!v15)
  {
    v19 = 1;
    goto LABEL_38;
  }
  v50 = a4;
  v17 = v15 >> 3;
  v18 = &v14[v15 & 0xFFFFFFFFFFFFFFF8];
  v19 = 1;
  v20 = v14;
  do
  {
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v20 + 16) + 160);
    if (v21)
    {
      v22 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 96))(v21);
      v23 = v22[23];
      if ((v23 & 0x80u) == 0)
        v24 = v22[23];
      else
        v24 = *((_QWORD *)v22 + 1);
      v25 = a2[23];
      v26 = (char)v25;
      if ((v25 & 0x80u) != 0)
        v25 = *((_QWORD *)a2 + 1);
      if (v24 == v25)
      {
        if (v26 >= 0)
          v27 = a2;
        else
          v27 = *(unsigned __int8 **)a2;
        if ((v23 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v22, v27, *((_QWORD *)v22 + 1)))
LABEL_10:
            v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 160))(v21, a3);
        }
        else
        {
          if (!v22[23])
            goto LABEL_10;
          while (*v22 == *v27)
          {
            ++v22;
            ++v27;
            if (!--v23)
              goto LABEL_10;
          }
        }
      }
    }
    v20 += 8;
  }
  while (v20 != v18);
  v29 = 8 * v17;
  a4 = v50;
  do
  {
    v30 = *(_QWORD *)&v14[v29 - 8];
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v29 -= 8;
  }
  while (v29);
LABEL_38:
  operator delete(v14);
  v28 = v19 & 1;
  if (*(_BYTE *)(a1 + 664))
  {
LABEL_39:
    v31 = a2[23];
    if ((v31 & 0x80u) == 0)
      v32 = a2[23];
    else
      v32 = *((_QWORD *)a2 + 1);
    v33 = *(unsigned __int8 *)(a1 + 663);
    v34 = (char)v33;
    if ((v33 & 0x80u) != 0)
      v33 = *(_QWORD *)(a1 + 648);
    if (v32 != v33)
      return v28;
    if (v34 >= 0)
      v35 = (unsigned __int8 *)(a1 + 640);
    else
      v35 = *(unsigned __int8 **)(a1 + 640);
    if ((v31 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, v35, *((_QWORD *)a2 + 1)))
        return v28;
    }
    else if (a2[23])
    {
      while (*a2 == *v35)
      {
        ++a2;
        ++v35;
        if (!--v31)
          goto LABEL_54;
      }
      return v28;
    }
LABEL_54:
    v36 = *(_QWORD *)(a1 + 736);
    if (v36)
      v37 = v36 == a5;
    else
      v37 = 1;
    if (!v37)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 40))(v36, 0);
      *(_QWORD *)(a1 + 736) = a5;
      if (a5)
      {
        v38 = *(uint64_t **)(a1 + 768);
        v39 = *(uint64_t **)(a1 + 776);
        if (v38 != v39)
        {
          do
          {
            v40 = *v38;
            if ((*(_DWORD *)(*v38 + 24) & 0xFF0000) != 0)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 720) + 8))(a1 + 720, (unsigned __int16)*(_DWORD *)(*v38 + 24));
              v40 = *v38;
            }
            *(_BYTE *)(*(_QWORD *)(v40 + 296) + 4) = 1;
            ++v38;
          }
          while (v38 != v39);
          a5 = *(_QWORD *)(a1 + 736);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 40))(a5, a1 + 728);
      }
    }
    v41 = *a4;
    if (*a4)
    {
      v42 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 48);
      v43 = *(unsigned int **)(a1 + 520);
      if (v43)
      {
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        v41 = *a4;
      }
      v52 = a1;
      v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v41 + 136) + 16))(*(_QWORD *)(v41 + 136));
      if (*(char *)(v45 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v45, *(_QWORD *)(v45 + 8));
      }
      else
      {
        v46 = *(_OWORD *)v45;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v45 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
      }
      v47 = operator new();
      *(_QWORD *)v47 = v52;
      *(std::string *)(v47 + 8) = __p;
      memset(&__p, 0, sizeof(__p));
      v48 = (_QWORD *)operator new();
      *v48 = v43;
      v48[1] = v47;
      v48[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::OnTransportChanged(std::string const&,webrtc::RtpTransportInternal *,webrtc::scoped_refptr<webrtc::DtlsTransport>,webrtc::DataChannelTransportInterface *)::$_1>;
      v48[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::OnTransportChanged(std::string const&,webrtc::RtpTransportInternal *,webrtc::scoped_refptr<webrtc::DtlsTransport>,webrtc::DataChannelTransportInterface *)::$_1 &&>;
      v55[0] = v48;
      v56 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
      v57 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
      (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v42 + 8))(v42, v55, &v54, &v51);
      v56(1, v55, v55);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return v28;
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::OnTransportChanged(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  return webrtc::PeerConnection::OnTransportChanged(a1 - 16, a2, a3, a4, a5);
}

uint64_t webrtc::PeerConnection::Observer(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::Observer(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 11);
}

void webrtc::PeerConnection::StartSctpTransport(webrtc::PeerConnection *this, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  std::string::size_type v13;
  _QWORD *v14;
  char v15;
  webrtc::PeerConnection *v16;
  std::string __p;
  unint64_t v18;
  int v19;
  char v20;
  _QWORD v21[2];
  uint64_t (*v22)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v23)(uint64_t);

  if (*((_BYTE *)this + 632))
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 8) + 24);
    v8 = (unsigned int *)*((_QWORD *)this + 66);
    if (v8)
    {
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      v10 = *((unsigned __int8 *)this + 632);
      v16 = this;
      if (!v10)
      {
        __break(1u);
        return;
      }
      if ((*((char *)this + 631) & 0x80000000) == 0)
        goto LABEL_6;
    }
    else
    {
      v16 = this;
      if ((*((char *)this + 631) & 0x80000000) == 0)
      {
LABEL_6:
        __p = *(std::string *)((char *)this + 608);
        goto LABEL_9;
      }
    }
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 76), *((_QWORD *)this + 77));
LABEL_9:
    v18 = __PAIR64__(a3, a2);
    v19 = a4;
    v11 = operator new();
    v12 = v18;
    *(_QWORD *)v11 = v16;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v13 = __p.__r_.__value_.__r.__words[2];
    memset(&__p, 0, sizeof(__p));
    *(_QWORD *)(v11 + 24) = v13;
    *(_QWORD *)(v11 + 32) = v12;
    *(_DWORD *)(v11 + 40) = v19;
    v14 = (_QWORD *)operator new();
    *v14 = v8;
    v14[1] = v11;
    v14[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::StartSctpTransport(int,int,int)::$_1>;
    v14[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::StartSctpTransport(int,int,int)::$_1 &&>;
    v21[0] = v14;
    v22 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v23 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v7 + 8))(v7, v21, &v20, &v15);
    v22(1, v21, v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void `non-virtual thunk to'webrtc::PeerConnection::StartSctpTransport(webrtc::PeerConnection *this, unsigned int a2, unsigned int a3, int a4)
{
  webrtc::PeerConnection::StartSctpTransport((webrtc::PeerConnection *)((char *)this - 8), a2, a3, a4);
}

uint64_t webrtc::PeerConnection::GetCryptoOptions@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = this + 365;
  if (!*(_BYTE *)(this + 370))
    v2 = this + 84;
  *(_DWORD *)a2 = *(_DWORD *)v2;
  *(_BYTE *)(a2 + 4) = *(_BYTE *)(v2 + 4);
  return this;
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::GetCryptoOptions@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 357;
  if (!*(_BYTE *)(this + 362))
    v2 = 76;
  v3 = this + v2;
  *(_DWORD *)a2 = *(_DWORD *)v3;
  *(_BYTE *)(a2 + 4) = *(_BYTE *)(v3 + 4);
  return this;
}

uint64_t webrtc::PeerConnection::ClearStatsCache(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *(_QWORD *)(this + 552);
  if (v1)
    *(_QWORD *)(v1 + 72) = 0;
  v2 = *(_QWORD *)(this + 560);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 424);
    if (v3)
    {
      do
      {
        v4 = __ldaxr((unsigned int *)v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, (unsigned int *)v3));
      if (!v5)
      {
        std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v3 + 16, *(char **)(v3 + 24));
        MEMORY[0x20BD0ADEC](v3, 0x1020C4043D65406);
      }
    }
    *(_QWORD *)(v2 + 424) = 0;
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 240));
    std::__tree<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>>>::destroy(v2 + 304, *(char **)(v2 + 312));
    *(_QWORD *)(v2 + 312) = 0;
    *(_QWORD *)(v2 + 320) = 0;
    *(_QWORD *)(v2 + 304) = v2 + 312;
    return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 240));
  }
  return this;
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::ClearStatsCache(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *(_QWORD *)(this + 544);
  if (v1)
    *(_QWORD *)(v1 + 72) = 0;
  v2 = *(_QWORD *)(this + 552);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 424);
    if (v3)
    {
      do
      {
        v4 = __ldaxr((unsigned int *)v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, (unsigned int *)v3));
      if (!v5)
      {
        std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v3 + 16, *(char **)(v3 + 24));
        MEMORY[0x20BD0ADEC](v3, 0x1020C4043D65406);
      }
    }
    *(_QWORD *)(v2 + 424) = 0;
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 240));
    std::__tree<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>>>::destroy(v2 + 304, *(char **)(v2 + 312));
    *(_QWORD *)(v2 + 312) = 0;
    *(_QWORD *)(v2 + 320) = 0;
    *(_QWORD *)(v2 + 304) = v2 + 312;
    return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 240));
  }
  return this;
}

BOOL webrtc::PeerConnection::ShouldFireNegotiationNeededEvent(webrtc::PeerConnection *this, int a2)
{
  uint64_t v3;
  _BOOL8 result;

  v3 = *((_QWORD *)this + 87);
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 192))(*(_QWORD *)(v3 + 8)))
    return 1;
  if (*(_DWORD *)(v3 + 212) != a2)
    return 0;
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 112) + 48))
    return *(_DWORD *)(v3 + 64) == 0;
  result = 0;
  *(_BYTE *)(v3 + 209) = 0;
  *(_BYTE *)(v3 + 216) = 1;
  return result;
}

void webrtc::PeerConnectionInterface::CreateDataChannel(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t v4;
  void *v5[3];
  char v6;
  uint64_t v7;
  unsigned __int8 v8;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 192))(v5);
  v3 = v8;
  if (LODWORD(v5[0]))
  {
    *a2 = 0;
    if (v3)
    {
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(v5[1]);
    return;
  }
  if (!v8)
  {
    __break(1u);
    return;
  }
  v4 = v7;
  v7 = 0;
  *a2 = v4;
  if (v6 < 0)
    goto LABEL_9;
}

BOOL webrtc::PeerConnection::initial_offerer(webrtc::PeerConnection *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 87);
  return *(_BYTE *)(v1 + 377) && *(_BYTE *)(v1 + 376) != 0;
}

uint64_t webrtc::PeerConnection::GetTransceiversInternal@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  if (*(_QWORD *)(*(_QWORD *)(this + 64) + 96))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 752))(this);
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 16);
    this = v5 - v4;
    if (v5 != v4)
    {
      if (this < 0)
        abort();
      v6 = this >> 3;
      v7 = (char *)operator new(this);
      v8 = 0;
      *a2 = v7;
      a2[2] = &v7[8 * v6];
      do
      {
        this = *(_QWORD *)(v4 + v8);
        *(_QWORD *)&v7[v8] = this;
        if (this)
          this = (**(uint64_t (***)(uint64_t))this)(this);
        v8 += 8;
      }
      while (v4 + v8 != v5);
      a2[1] = &v7[v8];
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

uint64_t webrtc::PeerConnection::NoteDataAddedEvent(webrtc::PeerConnection *this)
{
  return (*(uint64_t (**)(webrtc::PeerConnection *, uint64_t))(*(_QWORD *)this + 808))(this, 4);
}

uint64_t webrtc::PeerConnection::ice_connection_state_internal(webrtc::PeerConnection *this)
{
  return (*(uint64_t (**)(webrtc::PeerConnection *))(*(_QWORD *)this + 432))(this);
}

void webrtc::PeerConnection::session_id(webrtc::PeerConnection *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 591) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 71), *((_QWORD *)this + 72));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 568);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 73);
  }
}

BOOL webrtc::PeerConnection::IsClosed(webrtc::PeerConnection *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 87);
  return !v1 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1) == 5;
}

uint64_t webrtc::PeerConnection::legacy_stats(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 69);
}

uint64_t webrtc::PeerConnection::data_channel_controller(webrtc::PeerConnection *this)
{
  return (uint64_t)this + 720;
}

uint64_t webrtc::PeerConnection::dtls_enabled(webrtc::PeerConnection *this)
{
  return *((unsigned __int8 *)this + 704);
}

uint64_t webrtc::PeerConnection::configuration(webrtc::PeerConnection *this)
{
  return (uint64_t)this + 128;
}

uint64_t webrtc::PeerConnection::message_handler(webrtc::PeerConnection *this)
{
  return (uint64_t)this + 832;
}

uint64_t webrtc::PeerConnection::rtp_manager(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 106);
}

{
  return *((_QWORD *)this + 106);
}

uint64_t webrtc::PeerConnection::transport_controller_s(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 75);
}

uint64_t webrtc::PeerConnection::transport_controller_n(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 74);
}

uint64_t webrtc::PeerConnection::port_allocator(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 61);
}

uint64_t webrtc::PeerConnection::call_ptr(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 68);
}

uint64_t webrtc::PeerConnection::options(webrtc::PeerConnection *this)
{
  return (uint64_t)this + 72;
}

uint64_t webrtc::PeerConnection::IsUnifiedPlan(webrtc::PeerConnection *this)
{
  return *((unsigned __int8 *)this + 104);
}

uint64_t webrtc::PeerConnection::trials(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 4);
}

void `non-virtual thunk to'webrtc::PeerConnection::session_id(webrtc::PeerConnection *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 583) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 70), *((_QWORD *)this + 71));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 35);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 72);
  }
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::configuration(webrtc::PeerConnection *this)
{
  return (uint64_t)this + 120;
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::message_handler(webrtc::PeerConnection *this)
{
  return (uint64_t)this + 824;
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::rtp_manager(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 105);
}

{
  return *((_QWORD *)this + 105);
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::dtls_enabled(webrtc::PeerConnection *this)
{
  return *((unsigned __int8 *)this + 696);
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::options(webrtc::PeerConnection *this)
{
  return (uint64_t)this + 64;
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::transport_controller_s(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 74);
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::transport_controller_n(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 73);
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::data_channel_controller(webrtc::PeerConnection *this)
{
  return (uint64_t)this + 712;
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::port_allocator(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 60);
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::legacy_stats(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 68);
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::ice_connection_state_internal(webrtc::PeerConnection *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 1) + 432))((char *)this - 8);
}

BOOL `non-virtual thunk to'webrtc::PeerConnection::IsClosed(webrtc::PeerConnection *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 86);
  return !v1 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1) == 5;
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::IsUnifiedPlan(webrtc::PeerConnection *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::call_ptr(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 67);
}

uint64_t `non-virtual thunk to'webrtc::PeerConnection::trials(webrtc::PeerConnection *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t webrtc::PeerConnectionInterface::IceServer::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const void **v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const void **v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void **v34;
  unsigned __int8 *v35;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v10 = *((_QWORD *)a1 + 3);
  v9 = *((_QWORD *)a1 + 4);
  v11 = (unsigned __int8 **)*((_QWORD *)v6 + 3);
  if (v9 - v10 == *((_QWORD *)v6 + 4) - (_QWORD)v11)
  {
    for (; v10 != v9; v11 += 3)
    {
      v12 = *(unsigned __int8 *)(v10 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 23);
      else
        v13 = *(unsigned __int8 **)(v10 + 8);
      v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
      v15 = (char)v14;
      if ((char)v14 < 0)
        v14 = v11[1];
      if (v13 != v14)
        return 0;
      if (v15 >= 0)
        v16 = (unsigned __int8 *)v11;
      else
        v16 = *v11;
      if ((v12 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v10, v16, *(_QWORD *)(v10 + 8)))
          return 0;
      }
      else if (*(_BYTE *)(v10 + 23))
      {
        v17 = 0;
        while (*(unsigned __int8 *)(v10 + v17) == v16[v17])
        {
          if (v12 == ++v17)
            goto LABEL_34;
        }
        return 0;
      }
LABEL_34:
      v10 += 24;
    }
    v18 = a1[71];
    if ((v18 & 0x80u) == 0)
      v19 = a1[71];
    else
      v19 = *((_QWORD *)a1 + 7);
    v20 = v6[71];
    v21 = (char)v20;
    if ((v20 & 0x80u) != 0)
      v20 = *((_QWORD *)v6 + 7);
    if (v19 == v20)
    {
      v22 = (const void **)(a1 + 48);
      if (v21 >= 0)
        v23 = v6 + 48;
      else
        v23 = (unsigned __int8 *)*((_QWORD *)v6 + 6);
      if ((v18 & 0x80) != 0)
      {
        if (memcmp(*v22, v23, *((_QWORD *)a1 + 7)))
          return 0;
      }
      else if (a1[71])
      {
        while (*(unsigned __int8 *)v22 == *v23)
        {
          v22 = (const void **)((char *)v22 + 1);
          ++v23;
          if (!--v18)
            goto LABEL_50;
        }
        return 0;
      }
LABEL_50:
      v24 = a1[95];
      if ((v24 & 0x80u) == 0)
        v25 = a1[95];
      else
        v25 = *((_QWORD *)a1 + 10);
      v26 = v6[95];
      v27 = (char)v26;
      if ((v26 & 0x80u) != 0)
        v26 = *((_QWORD *)v6 + 10);
      if (v25 != v26)
        return 0;
      v28 = (const void **)(a1 + 72);
      if (v27 >= 0)
        v29 = v6 + 72;
      else
        v29 = (unsigned __int8 *)*((_QWORD *)v6 + 9);
      if ((v24 & 0x80) != 0)
      {
        if (memcmp(*v28, v29, *((_QWORD *)a1 + 10)))
          return 0;
      }
      else if (a1[95])
      {
        while (*(unsigned __int8 *)v28 == *v29)
        {
          v28 = (const void **)((char *)v28 + 1);
          ++v29;
          if (!--v24)
            goto LABEL_65;
        }
        return 0;
      }
LABEL_65:
      if (*((_DWORD *)a1 + 24) != *((_DWORD *)v6 + 24))
        return 0;
      v30 = a1[127];
      if ((v30 & 0x80u) == 0)
        v31 = a1[127];
      else
        v31 = *((_QWORD *)a1 + 14);
      v32 = v6[127];
      v33 = (char)v32;
      if ((v32 & 0x80u) != 0)
        v32 = *((_QWORD *)v6 + 14);
      if (v31 != v32)
        return 0;
      v34 = (const void **)(a1 + 104);
      if (v33 >= 0)
        v35 = v6 + 104;
      else
        v35 = (unsigned __int8 *)*((_QWORD *)v6 + 13);
      if ((v30 & 0x80) != 0)
      {
        if (memcmp(*v34, v35, *((_QWORD *)a1 + 14)))
          return 0;
      }
      else if (a1[127])
      {
        while (*(unsigned __int8 *)v34 == *v35)
        {
          v34 = (const void **)((char *)v34 + 1);
          ++v35;
          if (!--v30)
            goto LABEL_81;
        }
        return 0;
      }
LABEL_81:
      if (std::operator==[abi:sn180100]<std::string,std::allocator<std::string>>(*((_QWORD *)a1 + 16), *((_QWORD *)a1 + 17), *((unsigned __int8 ***)v6 + 16), *((_QWORD *)v6 + 17)))return std::operator==[abi:sn180100]<std::string,std::allocator<std::string>>(*((_QWORD *)a1 + 19), *((_QWORD *)a1 + 20), *((unsigned __int8 ***)v6 + 19), *((_QWORD *)v6 + 20));
    }
  }
  return 0;
}

uint64_t std::operator==[abi:sn180100]<std::string,std::allocator<std::string>>(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t v5;
  unsigned __int8 **i;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  v5 = a1;
  if (a1 == a2)
    return 1;
  for (i = a3; ; i += 3)
  {
    v8 = *(unsigned __int8 *)(v5 + 23);
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)*(unsigned __int8 *)(v5 + 23);
    else
      v9 = *(unsigned __int8 **)(v5 + 8);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)i + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = i[1];
    if (v9 != v10)
      break;
    if (v11 >= 0)
      v12 = (unsigned __int8 *)i;
    else
      v12 = *i;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v5, v12, *(_QWORD *)(v5 + 8)))
        return 0;
    }
    else if (*(_BYTE *)(v5 + 23))
    {
      v13 = 0;
      while (*(unsigned __int8 *)(v5 + v13) == v12[v13])
      {
        if (v8 == ++v13)
          goto LABEL_6;
      }
      return 0;
    }
LABEL_6:
    v5 += 24;
    if (v5 == a2)
      return 1;
  }
  return 0;
}

void std::vector<webrtc::PeerConnectionInterface::IceServer>::__assign_with_size[abi:sn180100]<webrtc::PeerConnectionInterface::IceServer*,webrtc::PeerConnectionInterface::IceServer*>(uint64_t a1, std::string *a2, std::string *a3, unint64_t a4)
{
  std::string *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  const webrtc::PeerConnectionInterface::IceServer *v19;
  uint64_t v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((v8 - *(_QWORD *)a1) >> 4) >= a4)
  {
    v18 = *(std::string **)(a1 + 8);
    if (0x2E8BA2E8BA2E8BA3 * (((char *)v18 - (char *)v9) >> 4) >= a4)
    {
      if (a2 == a3)
      {
        v24 = v9;
      }
      else
      {
        v24 = v9;
        do
        {
          webrtc::PeerConnectionInterface::IceServer::operator=(v9, v6);
          v6 = (std::string *)((char *)v6 + 176);
          v9 = (std::string *)((char *)v9 + 176);
          v24 = (std::string *)((char *)v24 + 176);
        }
        while (v6 != a3);
        v18 = *(std::string **)(a1 + 8);
      }
      while (v18 != v24)
        webrtc::PeerConnectionInterface::IceServer::~IceServer((webrtc::PeerConnectionInterface::IceServer *)&v18[-8].__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a1 + 8) = v24;
      return;
    }
    v19 = (const webrtc::PeerConnectionInterface::IceServer *)((char *)a2 + 16 * (((char *)v18 - (char *)v9) >> 4));
    if (v18 != v9)
    {
      v20 = 16 * (((char *)v18 - (char *)v9) >> 4);
      do
      {
        webrtc::PeerConnectionInterface::IceServer::operator=(v9, v6);
        v6 = (std::string *)((char *)v6 + 176);
        v9 = (std::string *)((char *)v9 + 176);
        v20 -= 176;
      }
      while (v20);
      v9 = *(std::string **)(a1 + 8);
    }
    v21 = v9;
    if (v19 == (const webrtc::PeerConnectionInterface::IceServer *)a3)
    {
LABEL_26:
      *(_QWORD *)(a1 + 8) = v21;
      return;
    }
    v21 = v9;
    v22 = v9;
    while (v22)
    {
      v23 = webrtc::PeerConnectionInterface::IceServer::IceServer(v22, v19);
      v19 = (const webrtc::PeerConnectionInterface::IceServer *)((char *)v19 + 176);
      v22 = (std::string *)((char *)v23 + 176);
      v21 = (std::string *)((char *)v21 + 176);
      if (v19 == (const webrtc::PeerConnectionInterface::IceServer *)a3)
        goto LABEL_26;
    }
    __break(1u);
LABEL_36:
    abort();
  }
  if (v9)
  {
    v10 = *(std::string **)(a1 + 8);
    v11 = v9;
    if (v10 != v9)
    {
      do
        webrtc::PeerConnectionInterface::IceServer::~IceServer((webrtc::PeerConnectionInterface::IceServer *)&v10[-8].__r_.__value_.__r.__words[2]);
      while (v10 != v9);
      v11 = *(std::string **)a1;
    }
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v11);
    v8 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if (a4 > 0x1745D1745D1745DLL)
    goto LABEL_36;
  v12 = 0x2E8BA2E8BA2E8BA3 * (v8 >> 4);
  v13 = 2 * v12;
  if (2 * v12 <= a4)
    v13 = a4;
  v14 = v12 >= 0xBA2E8BA2E8BA2ELL ? 0x1745D1745D1745DLL : v13;
  if (v14 > 0x1745D1745D1745DLL)
    goto LABEL_36;
  v15 = 176 * v14;
  v16 = (std::string *)operator new(176 * v14);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v16;
  for (*(_QWORD *)(a1 + 16) = (char *)v16 + v15; v6 != a3; v16 = (std::string *)((char *)v17 + 176))
  {
    v17 = webrtc::PeerConnectionInterface::IceServer::IceServer(v16, (const webrtc::PeerConnectionInterface::IceServer *)v6);
    v6 = (std::string *)((char *)v6 + 176);
  }
  *(_QWORD *)(a1 + 8) = v16;
}

std::string *webrtc::PeerConnectionInterface::IceServer::operator=(std::string *this, std::string *a2)
{
  std::string *v3;
  __int128 v4;
  size_t size;
  std::string *v6;
  char v7;
  __int128 v8;
  std::string *v9;
  std::string *v10;
  size_t v11;
  const std::string::value_type *data;
  size_t v13;
  __int128 v14;
  const std::string::value_type *v15;
  size_t v16;
  std::string *v17;
  std::string::value_type v18;
  __int128 v19;
  const std::string::value_type *v20;
  size_t v21;

  if (this == a2)
    return this;
  v3 = a2;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    else
    {
      a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      size = v3->__r_.__value_.__l.__size_;
    }
    std::string::__assign_no_alias<false>(this, (const std::string::value_type *)a2, size);
  }
  else if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)&this[1], (__int128 *)v3[1].__r_.__value_.__l.__data_, (__int128 *)v3[1].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1].__r_.__value_.__l.__size_ - v3[1].__r_.__value_.__r.__words[0]) >> 3));
  v6 = this + 2;
  v7 = HIBYTE(v3[2].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (v7 >= 0)
      data = (const std::string::value_type *)&v3[2];
    else
      data = v3[2].__r_.__value_.__l.__data_;
    if (v7 >= 0)
      v13 = HIBYTE(v3[2].__r_.__value_.__r.__words[2]);
    else
      v13 = v3[2].__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>(v6, data, v13);
    v9 = this + 3;
    v10 = v3 + 3;
    v11 = HIBYTE(v3[3].__r_.__value_.__r.__words[2]);
    if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_24;
    goto LABEL_21;
  }
  if ((*((_BYTE *)&v3[2].__r_.__value_.__s + 23) & 0x80) == 0)
  {
    v8 = *(_OWORD *)&v3[2].__r_.__value_.__l.__data_;
    this[2].__r_.__value_.__r.__words[2] = v3[2].__r_.__value_.__r.__words[2];
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
    v9 = this + 3;
    v10 = v3 + 3;
    v11 = HIBYTE(v3[3].__r_.__value_.__r.__words[2]);
    if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_24;
LABEL_21:
    if ((v11 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v9, v3[3].__r_.__value_.__l.__data_, v3[3].__r_.__value_.__l.__size_);
    }
    else
    {
      v14 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v9->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v14;
    }
    goto LABEL_32;
  }
  std::string::__assign_no_alias<true>(v6, v3[2].__r_.__value_.__l.__data_, v3[2].__r_.__value_.__l.__size_);
  v9 = this + 3;
  v10 = v3 + 3;
  v11 = HIBYTE(v3[3].__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this[3].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_21;
LABEL_24:
  if ((v11 & 0x80u) == 0)
    v15 = (const std::string::value_type *)v10;
  else
    v15 = v3[3].__r_.__value_.__l.__data_;
  if ((v11 & 0x80u) == 0)
    v16 = v11;
  else
    v16 = v3[3].__r_.__value_.__l.__size_;
  std::string::__assign_no_alias<false>(v9, v15, v16);
LABEL_32:
  LODWORD(this[4].__r_.__value_.__l.__data_) = v3[4].__r_.__value_.__l.__data_;
  v17 = (std::string *)((char *)this + 104);
  v18 = v3[5].__r_.__value_.__s.__data_[7];
  if (this[5].__r_.__value_.__s.__data_[7] < 0)
  {
    if (v18 >= 0)
      v20 = &v3[4].__r_.__value_.__s.__data_[8];
    else
      v20 = (const std::string::value_type *)v3[4].__r_.__value_.__l.__size_;
    if (v18 >= 0)
      v21 = v3[5].__r_.__value_.__s.__data_[7];
    else
      v21 = v3[4].__r_.__value_.__r.__words[2];
    std::string::__assign_no_alias<false>(v17, v20, v21);
  }
  else if (v3[5].__r_.__value_.__s.__data_[7] < 0)
  {
    std::string::__assign_no_alias<true>(v17, (char *)v3[4].__r_.__value_.__l.__size_, v3[4].__r_.__value_.__r.__words[2]);
  }
  else
  {
    v19 = *(_OWORD *)&v3[4].__r_.__value_.__r.__words[1];
    this[5].__r_.__value_.__r.__words[0] = v3[5].__r_.__value_.__r.__words[0];
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)&this[5].__r_.__value_.__l.__size_, (__int128 *)v3[5].__r_.__value_.__l.__size_, (__int128 *)v3[5].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[5].__r_.__value_.__r.__words[2] - v3[5].__r_.__value_.__l.__size_) >> 3));
  std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)&this[6].__r_.__value_.__l.__size_, (__int128 *)v3[6].__r_.__value_.__l.__size_, (__int128 *)v3[6].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[6].__r_.__value_.__r.__words[2] - v3[6].__r_.__value_.__l.__size_) >> 3));
  return this;
}

unsigned int ***std::vector<webrtc::scoped_refptr<rtc::RTCCertificate>>::__assign_with_size[abi:sn180100]<webrtc::scoped_refptr<rtc::RTCCertificate>*,webrtc::scoped_refptr<rtc::RTCCertificate>*>(unsigned int ***result, unsigned int **a2, unsigned int **a3, size_t __sz)
{
  unsigned int **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int **v17;
  unint64_t v18;
  unsigned int **v19;
  unsigned int **v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;

  v6 = a2;
  v7 = (uint64_t)result;
  v8 = (uint64_t)result[2];
  v9 = *result;
  if (__sz > (v8 - (uint64_t)*result) >> 3)
  {
    if (v9)
    {
      v10 = result[1];
      v11 = *result;
      if (v10 != v9)
      {
        do
        {
          v13 = (uint64_t)*--v10;
          v12 = v13;
          if (v13)
          {
            do
            {
              v14 = __ldaxr((unsigned int *)v12);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, (unsigned int *)v12));
            if (!v15)
            {
              v16 = *(_QWORD *)(v12 + 8);
              *(_QWORD *)(v12 + 8) = 0;
              if (v16)
                (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
              MEMORY[0x20BD0ADEC](v12, 0x1020C40D5A9D86FLL);
            }
          }
        }
        while (v10 != v9);
        v11 = *(unsigned int ***)v7;
      }
      *(_QWORD *)(v7 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    if (!(__sz >> 61))
    {
      v33 = v8 >> 2;
      if (v8 >> 2 <= __sz)
        v33 = __sz;
      v34 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
      v35 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v34)
        v35 = v33;
      if (!(v35 >> 61))
      {
        v36 = v35;
        result = (unsigned int ***)operator new(8 * v35);
        *(_QWORD *)v7 = result;
        *(_QWORD *)(v7 + 8) = result;
        *(_QWORD *)(v7 + 16) = &result[v36];
        while (v6 != a3)
        {
          v37 = *v6;
          *result = (unsigned int **)*v6;
          if (v37)
          {
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          ++v6;
          ++result;
        }
        *(_QWORD *)(v7 + 8) = result;
        return result;
      }
    }
LABEL_69:
    abort();
  }
  v17 = result[1];
  v18 = v17 - v9;
  if (v18 < __sz)
  {
    v19 = &a2[v18];
    if (v17 == v9)
    {
      v20 = *result;
      if (v19 == a3)
      {
LABEL_58:
        *(_QWORD *)(v7 + 8) = v20;
        return result;
      }
    }
    else
    {
      do
      {
        v21 = *v6;
        if (*v6)
        {
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = *v9;
        if (*v9)
        {
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v26 = *((_QWORD *)v23 + 1);
            *((_QWORD *)v23 + 1) = 0;
            if (v26)
              (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            result = (unsigned int ***)MEMORY[0x20BD0ADEC](v23, 0x1020C40D5A9D86FLL);
          }
        }
        *v9++ = v21;
        ++v6;
      }
      while (v6 != v19);
      v9 = *(unsigned int ***)(v7 + 8);
      v20 = v9;
      if (v19 == a3)
        goto LABEL_58;
    }
    v20 = v9;
    while (v20)
    {
      v39 = *v19;
      *v20 = *v19;
      if (v39)
      {
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      ++v19;
      ++v20;
      if (v19 == a3)
        goto LABEL_58;
    }
    __break(1u);
    goto LABEL_69;
  }
  if (a2 != a3)
  {
    do
    {
      v27 = *v6;
      if (*v6)
      {
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = *v9;
      if (*v9)
      {
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = *((_QWORD *)v29 + 1);
          *((_QWORD *)v29 + 1) = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          result = (unsigned int ***)MEMORY[0x20BD0ADEC](v29, 0x1020C40D5A9D86FLL);
        }
      }
      *v9++ = v27;
      ++v6;
    }
    while (v6 != a3);
    v17 = *(unsigned int ***)(v7 + 8);
  }
  while (v17 != v9)
  {
    v42 = (uint64_t)*--v17;
    v41 = v42;
    if (v42)
    {
      do
      {
        v43 = __ldaxr((unsigned int *)v41);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, (unsigned int *)v41));
      if (!v44)
      {
        v45 = *(_QWORD *)(v41 + 8);
        *(_QWORD *)(v41 + 8) = 0;
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        result = (unsigned int ***)MEMORY[0x20BD0ADEC](v41, 0x1020C40D5A9D86FLL);
      }
    }
  }
  *(_QWORD *)(v7 + 8) = v9;
  return result;
}

void std::__function::__func<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_0,std::allocator<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_0,std::allocator<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B8D60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_0,std::allocator<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B8D60;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_0,std::allocator<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return webrtc::SdpOfferAnswerHandler::UpdateNegotiationNeeded(*(webrtc::SdpOfferAnswerHandler **)(*(_QWORD *)(a1 + 8)
                                                                                                  + 696));
}

_QWORD *std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>(uint64_t a1, void (****a2)(_QWORD))
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  char *v12;
  void (***v13)(_QWORD);
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = v3 - *(_QWORD *)a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    abort();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v8 >> 2 > v6)
    v6 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v6)
  {
    __break(1u);
LABEL_32:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v6 >> 61)
    goto LABEL_32;
  v10 = 8 * v6;
  v11 = (char *)operator new(8 * v6);
  v12 = &v11[8 * v5];
  v13 = *a2;
  *(_QWORD *)v12 = *a2;
  if (v13)
  {
    (**v13)(v13);
    v2 = *(_QWORD **)a1;
    v3 = *(_QWORD *)(a1 + 8);
  }
  v14 = &v11[v10];
  v15 = v12 + 8;
  if ((_QWORD *)v3 == v2)
  {
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v14;
    goto LABEL_14;
  }
  v16 = v3 - (_QWORD)v2 - 8;
  if (v16 >= 0x78)
  {
    if (v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8 >= (unint64_t)v12
      || (unint64_t)&v11[v4 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v3)
    {
      v20 = (v16 >> 3) + 1;
      v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v17 = (_QWORD *)(v3 - v21);
      v12 -= v21;
      v22 = &v11[8 * v5 - 16];
      v23 = (__int128 *)(v3 - 16);
      v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *(v23 - 1);
        v25 = *v23;
        *(v23 - 1) = 0uLL;
        *v23 = 0uLL;
        *((_OWORD *)v22 - 1) = v26;
        *(_OWORD *)v22 = v25;
        v22 -= 32;
        v23 -= 2;
        v24 -= 4;
      }
      while (v24);
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_26;
    }
    else
    {
      v17 = (_QWORD *)v3;
    }
  }
  else
  {
    v17 = (_QWORD *)v3;
  }
  do
  {
    v27 = *--v17;
    *v17 = 0;
    *((_QWORD *)v12 - 1) = v27;
    v12 -= 8;
  }
  while (v17 != v2);
LABEL_26:
  v2 = *(_QWORD **)a1;
  v28 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v15;
  *(_QWORD *)(a1 + 16) = v14;
  while (v28 != v2)
  {
    v30 = *--v28;
    v29 = v30;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
LABEL_14:
  if (v2)
    operator delete(v2);
  return v15;
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t a1, uint64_t a2)
{
  void **v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  std::string *v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  void **v15;

  v2 = *(void ***)a1;
  v3 = *(char **)(a1 + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-*(_QWORD *)a1] >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  if (!v5)
  {
    __break(1u);
LABEL_24:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_24;
  v8 = 24 * v5;
  v9 = (char *)operator new(24 * v5);
  v10 = v9;
  v11 = (std::string *)&v9[24 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v2 = *(void ***)a1;
    v3 = *(char **)(a1 + 8);
    v12 = &v10[v8];
    v13 = v11 + 1;
    if (v3 == *(char **)a1)
    {
LABEL_18:
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = v12;
      goto LABEL_19;
    }
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v12 = &v9[v8];
    v13 = v11 + 1;
    if (v3 == (char *)v2)
      goto LABEL_18;
  }
  do
  {
    v14 = *(_OWORD *)(v3 - 24);
    v11[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v3 - 1);
    *(_OWORD *)&v11[-1].__r_.__value_.__l.__data_ = v14;
    --v11;
    *((_QWORD *)v3 - 2) = 0;
    *((_QWORD *)v3 - 1) = 0;
    *((_QWORD *)v3 - 3) = 0;
    v3 -= 24;
  }
  while (v3 != (char *)v2);
  v2 = *(void ***)a1;
  v15 = *(void ***)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v12;
  while (v15 != v2)
  {
    if (*((char *)v15 - 1) < 0)
      operator delete(*(v15 - 3));
    v15 -= 3;
  }
LABEL_19:
  if (v2)
    operator delete(v2);
  return v13;
}

uint64_t rtc::RefCountedObject<webrtc::PeerConnection>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 880);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::PeerConnection>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 220;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::PeerConnection>::~RefCountedObject(webrtc::PeerConnection *a1)
{
  webrtc::PeerConnection::~PeerConnection(a1);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::PeerConnection>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 880));
  return v1 == 1;
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::PeerConnection>::~RefCountedObject(uint64_t a1)
{
  webrtc::PeerConnection::~PeerConnection((webrtc::PeerConnection *)(a1 - 8));
}

{
  webrtc::PeerConnection::~PeerConnection((webrtc::PeerConnection *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::PeerConnection::~PeerConnection((webrtc::PeerConnection *)(a1 - 16));
}

{
  webrtc::PeerConnection::~PeerConnection((webrtc::PeerConnection *)(a1 - 16));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::~PeerConnection()::$_1>(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[16];

  v1 = *a1;
  v5 = 0;
  v8[14] = 0;
  v7 = 0;
  memset(v8, 0, 13);
  v6 = 0;
  webrtc::PeerConnection::TeardownDataChannelTransport_n((uint64_t)v1, &v5);
  v2 = v1[74];
  v1[74] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = v1[61];
  v1[61] = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v4 = v1[66];
  if (v4)
    *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::~PeerConnection()::$_2>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  *(_BYTE *)(*(_QWORD *)(*a1 + 536) + 4) = 0;
  result = *(_QWORD *)(v1 + 512);
  *(_QWORD *)(v1 + 512) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 216))(result);
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::JsepTransportController * rtc::Thread::BlockingCall<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_2,webrtc::JsepTransportController *,void>(webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_2 &&,webrtc::Location const&)::{lambda(void)#1}>(_QWORD **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void ****v15;
  unint64_t v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  unint64_t v54;
  void ***v55;
  int64_t v56;
  void ***v57;
  void **v58;
  unint64_t v59;
  unint64_t v60;
  void ***v61;
  uint64_t v62;
  int v63;
  void ***v64;
  void ***v65;
  void ***v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t (***v76)();
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (***v80)();
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  _QWORD *v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  uint64_t (**v93)();
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t (***v97)();
  uint64_t (***v98)();
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (***v102)();
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int16 v148;
  __int16 v149;
  char v150;
  __int16 v151;
  char v152;
  __int16 v153;
  char v154;
  __int16 v155;
  char v156;
  __int16 v157;
  char v158;
  char v159;
  char v160;
  __int16 v161;
  char v162;
  char v163;
  char v164;
  __int16 v165;
  char v166;
  char v167;
  char v168;
  char v169;
  char v170;
  uint64_t v171;
  int v172;
  BOOL v173;
  int v174;
  BOOL v175;
  int v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t (***v182)();
  uint64_t v183;
  uint64_t v184;
  uint64_t result;
  char v186;
  char v187;
  char v188;
  char v189;
  char v190;
  char v191;
  char v192;
  char v193;
  char v194;
  char v195;
  char v196;
  char v197;
  char v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  int v202;
  char v203;
  _QWORD **v204;
  uint64_t v205;
  __int16 v206;
  char *v207;
  char *v208;
  uint64_t (**v209)();
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  _BYTE v214[16];
  __int128 v215;
  _BYTE v216[16];
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  _BYTE v220[24];
  uint64_t (***v221)();
  void ***v222;
  void ***v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  _QWORD v227[2];
  __int128 v228;
  _QWORD v229[2];
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  _QWORD v233[3];
  uint64_t (***v234)();
  uint64_t v235;

  v235 = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  v3 = *v2;
  v4 = operator new();
  v5 = v4;
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  do
    v6 = __ldxr((unsigned int *)v4);
  while (__stxr(v6 + 1, (unsigned int *)v4));
  v7 = *(unsigned int **)(v3 + 528);
  *(_QWORD *)(v3 + 528) = v5;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      MEMORY[0x20BD0ADEC]();
  }
  v11 = v2[1];
  v10 = (uint64_t *)v2[2];
  v12 = v2[3];
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 488) + 16))(*(_QWORD *)(v3 + 488));
  v13 = *(_DWORD *)(*(_QWORD *)(v3 + 488) + 116);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 896))(v3);
  (*(void (**)(void ****__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v14 + 16))(&v222, v14, "WebRTC-IPv6Default", 18);
  if (SBYTE7(v224) < 0)
  {
    v16 = (unint64_t)v223;
    if (((unint64_t)v223 & 0x8000000000000000) != 0 || (v15 = (void ****)v222, v223) && !v222)
      __break(1u);
  }
  else
  {
    v15 = &v222;
    v16 = BYTE7(v224);
  }
  if (v16 >= 8)
  {
    v17 = *v15 == (void ***)0x64656C6261736944;
    v18 = v13 | 0x4140;
    if ((BYTE7(v224) & 0x80) == 0)
      goto LABEL_17;
  }
  else
  {
    v17 = 0;
    v18 = v13 | 0x4140;
    if ((BYTE7(v224) & 0x80) == 0)
      goto LABEL_17;
  }
  operator delete(v222);
LABEL_17:
  if (v17)
    v18 &= ~0x40u;
  if (*(_BYTE *)(v12 + 68))
  {
    v18 &= ~0x4000u;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  }
  if (*(_DWORD *)(v12 + 88) == 1)
  {
    v18 |= 8u;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  }
  if (*(_DWORD *)(v12 + 92) == 1)
  {
    v18 |= 0x2000u;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v33, v34, v35, v36, v37, v38, v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  }
  v204 = a1;
  v205 = v11;
  if (*(_BYTE *)(v12 + 76))
  {
    v18 |= 0x10000u;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  }
  v47 = *(_QWORD *)(v3 + 488);
  *(_DWORD *)(v47 + 116) = v18;
  *(_DWORD *)(v47 + 132) = 50;
  v48 = *(_DWORD *)(v12 + 24) - 1;
  if (v48 > 2)
  {
    v49 = 0;
    v50 = *(unsigned int *)(v47 + 140);
    if (!(_DWORD)v50)
      goto LABEL_35;
  }
  else
  {
    v49 = dword_208F16EC8[v48];
    v50 = *(unsigned int *)(v47 + 140);
    if ((_DWORD)v50 == (_DWORD)v49)
      goto LABEL_35;
  }
  *(_DWORD *)(v47 + 140) = v49;
  v73 = *(_QWORD *)(v47 + 80);
  for (*(_QWORD *)(v47 + 96) = v73; v73 != v47 + 72; v73 = *(_QWORD *)(v47 + 96))
  {
    v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
    v74 = v73 + 16;
    *(_QWORD *)(v47 + 96) = *(_QWORD *)(v74 - 8);
    v75(v74, v50, v49);
  }
LABEL_35:
  *(_DWORD *)(*(_QWORD *)(v3 + 488) + 128) = *(_DWORD *)(v12 + 72);
  v222 = 0;
  v223 = 0;
  *(_QWORD *)&v224 = 0;
  v52 = *v10;
  v51 = v10[1];
  v53 = v51 - v52;
  if (v51 != v52)
  {
    v54 = 0xCCCCCCCCCCCCCCCDLL * (v53 >> 5);
    if (v54 >= 0x19999999999999ALL)
      abort();
    v55 = (void ***)operator new(v53);
    v56 = 0;
    v57 = v55;
    v222 = v55;
    *(_QWORD *)&v224 = &v55[20 * v54];
    do
    {
      cricket::RelayServerConfig::RelayServerConfig((uint64_t)&v55[(unint64_t)v56 / 8], (char **)(v52 + v56));
      v56 += 160;
    }
    while (v52 + v56 != v51);
    v223 = &v55[20 * (v56 / 160)];
    if (v56)
    {
      v58 = *(void ***)(v3 + 504);
      v59 = 160 * (v56 / 160) - 160;
      if (v59 < 0xA0)
        goto LABEL_137;
      v60 = v59 / 0xA0 + 1;
      v57 = &v55[20 * (v60 & 0x3FFFFFFFFFFFFFELL)];
      v61 = v55 + 36;
      v62 = v60 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        *(v61 - 20) = v58;
        *v61 = v58;
        v61 += 40;
        v62 -= 2;
      }
      while (v62);
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_137:
        do
        {
          v57[16] = v58;
          v57 += 20;
        }
        while (v57 != &v55[20 * (v56 / 160)]);
      }
    }
  }
  if (*(_BYTE *)(v12 + 148))
    v63 = 1;
  else
    v63 = *(_DWORD *)(v12 + 152);
  cricket::PortAllocator::SetConfiguration(*(_QWORD *)(v3 + 488), v205, &v222, *(_DWORD *)(v12 + 64), v63, *(_QWORD *)(v12 + 216), (int *)(v12 + 208));
  v64 = v222;
  if (v222)
  {
    v65 = v223;
    v66 = v222;
    if (v223 != v222)
    {
      do
        cricket::RelayServerConfig::~RelayServerConfig((void **)v65 - 20);
      while (v65 != v64);
      v66 = v222;
    }
    v223 = v64;
    operator delete(v66);
  }
  v67 = v2[3];
  BYTE9(v224) = 0;
  v225 = 0uLL;
  *(_QWORD *)&v228 = absl::internal_any_invocable::EmptyManager;
  *((_QWORD *)&v228 + 1) = 0;
  *(_QWORD *)&v230 = absl::internal_any_invocable::EmptyManager;
  *((_QWORD *)&v230 + 1) = 0;
  LOBYTE(v231) = 0;
  v234 = 0;
  *((_QWORD *)&v231 + 1) = 0;
  v232 = 0;
  LOBYTE(v222) = *(_BYTE *)(v67 + 158);
  v68 = *(_DWORD *)(v3 + 80);
  BYTE8(v224) = *(_BYTE *)(v3 + 72);
  *(_QWORD *)&v224 = *(_QWORD *)(v67 + 28);
  v69 = v67 + 237;
  if (!*(_BYTE *)(v67 + 242))
    v69 = v3 + 84;
  v70 = *(_DWORD *)v69;
  BYTE4(v223) = *(_BYTE *)(v69 + 4);
  HIDWORD(v222) = v68;
  LODWORD(v223) = v70;
  v226 = v3 + 16;
  v209 = &off_24C0B9378;
  v210 = v3;
  *((_QWORD *)&v211 + 1) = &v209;
  v71 = operator new();
  v72 = v71;
  if (*((_QWORD *)&v211 + 1))
  {
    if (*((uint64_t (****)())&v211 + 1) == &v209)
    {
      *(_QWORD *)(v71 + 24) = v71;
      ((void (*)(uint64_t (***)(), uint64_t))v209[3])(&v209, v71);
    }
    else
    {
      *(_QWORD *)(v71 + 24) = *((_QWORD *)&v211 + 1);
      *((_QWORD *)&v211 + 1) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v71 + 24) = 0;
  }
  ((void (*)(uint64_t, _QWORD *, _QWORD *))v228)(1, v227, v227);
  v227[0] = v72;
  *(_QWORD *)&v228 = absl::internal_any_invocable::RemoteManagerNontrivial<std::function<void ()(rtc::CopyOnWriteBuffer const&,long long)>>;
  *((_QWORD *)&v228 + 1) = absl::internal_any_invocable::RemoteInvoker<false,void,std::function<void ()(rtc::CopyOnWriteBuffer const&,long long)> const&,rtc::CopyOnWriteBuffer const&,long long>;
  v76 = (uint64_t (***)())*((_QWORD *)&v211 + 1);
  if (*((uint64_t (****)())&v211 + 1) == &v209)
  {
    v77 = 4;
    v76 = &v209;
  }
  else
  {
    if (!*((_QWORD *)&v211 + 1))
      goto LABEL_68;
    v77 = 5;
  }
  (*v76)[v77]();
LABEL_68:
  v209 = &off_24C0B93C0;
  v210 = v3;
  *((_QWORD *)&v211 + 1) = &v209;
  v78 = operator new();
  v79 = v78;
  if (*((_QWORD *)&v211 + 1))
  {
    if (*((uint64_t (****)())&v211 + 1) == &v209)
    {
      *(_QWORD *)(v78 + 24) = v78;
      ((void (*)(uint64_t (***)(), uint64_t))v209[3])(&v209, v78);
    }
    else
    {
      *(_QWORD *)(v78 + 24) = *((_QWORD *)&v211 + 1);
      *((_QWORD *)&v211 + 1) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v78 + 24) = 0;
  }
  ((void (*)(uint64_t, _QWORD *, _QWORD *))v230)(1, v229, v229);
  v229[0] = v79;
  *(_QWORD *)&v230 = absl::internal_any_invocable::RemoteManagerNontrivial<std::function<void ()(webrtc::RtpPacketReceived const&)>>;
  *((_QWORD *)&v230 + 1) = absl::internal_any_invocable::RemoteInvoker<false,void,std::function<void ()(webrtc::RtpPacketReceived const&)> const&,webrtc::RtpPacketReceived const&>;
  v80 = (uint64_t (***)())*((_QWORD *)&v211 + 1);
  if (*((uint64_t (****)())&v211 + 1) == &v209)
  {
    v81 = 4;
    v80 = &v209;
  }
  else
  {
    if (!*((_QWORD *)&v211 + 1))
      goto LABEL_78;
    v81 = 5;
  }
  (*v80)[v81]();
LABEL_78:
  *((_QWORD *)&v231 + 1) = *(_QWORD *)(v3 + 56);
  LOBYTE(v231) = *(_BYTE *)(v67 + 236);
  if (*(_BYTE *)(v3 + 704))
    v232 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 224);
  *(_QWORD *)&v225 = *(_QWORD *)(v3 + 496);
  v82 = *(_QWORD *)(v3 + 864);
  if (v82 && (v83 = atomic_load((unsigned int *)(v82 + 4)), v83 != 1))
  {
    v84 = *(_QWORD **)(v3 + 864);
    if (!v84)
    {
      v93 = *(uint64_t (***)())(v3 + 872);
      goto LABEL_99;
    }
  }
  else
  {
    v84 = (_QWORD *)operator new();
    *v84 = 1;
    v85 = (unsigned int *)v84 + 1;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    v87 = *(_QWORD *)(v3 + 864);
    if (v87)
    {
      v88 = (unsigned int *)(v87 + 4);
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
        MEMORY[0x20BD0ADEC]();
    }
    *(_QWORD *)(v3 + 864) = v84;
  }
  v91 = (unsigned int *)v84 + 1;
  do
    v92 = __ldxr(v91);
  while (__stxr(v92 + 1, v91));
  v93 = *(uint64_t (***)())(v3 + 872);
  do
    v94 = __ldxr(v91);
  while (__stxr(v94 + 1, v91));
  do
  {
    v95 = __ldaxr(v91);
    v96 = v95 - 1;
  }
  while (__stlxr(v96, v91));
  if (!v96)
    MEMORY[0x20BD0ADEC](v84, 0x1000C404A09149ALL);
LABEL_99:
  v97 = (uint64_t (***)())operator new(0x18uLL);
  *v97 = &off_24C0B92E8;
  v97[1] = (uint64_t (**)())v84;
  v97[2] = v93;
  *((_QWORD *)&v211 + 1) = v97;
  v98 = v234;
  if (v234 == v233)
  {
    v98 = &v209;
    (*(void (**)(_QWORD *, uint64_t (***)()))(v233[0] + 24))(v233, &v209);
    ((void (*)(uint64_t (***)()))(*v234)[4])(v234);
    v234 = (uint64_t (***)())*((_QWORD *)&v211 + 1);
    *((_QWORD *)&v211 + 1) = &v209;
    v99 = 4;
  }
  else
  {
    *((_QWORD *)&v211 + 1) = v234;
    v234 = v97;
    if (v98 == &v209)
    {
      v99 = 4;
      v98 = &v209;
    }
    else
    {
      if (!v98)
        goto LABEL_106;
      v99 = 5;
    }
  }
  ((void (*)(uint64_t (***)()))(*v98)[v99])(v98);
LABEL_106:
  v100 = operator new();
  v101 = *(_QWORD *)(v3 + 480);
  v199 = *(_QWORD *)(v3 + 488);
  v201 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 24);
  v209 = (uint64_t (**)())v222;
  LODWORD(v210) = (_DWORD)v223;
  BYTE4(v210) = BYTE4(v223);
  v213 = v226;
  v211 = v224;
  v212 = v225;
  ((void (*)(_QWORD, _QWORD *, _BYTE *))v228)(0, v227, v214);
  v215 = v228;
  *(_QWORD *)&v228 = absl::internal_any_invocable::EmptyManager;
  *((_QWORD *)&v228 + 1) = 0;
  ((void (*)(_QWORD, _QWORD *, _BYTE *))v230)(0, v229, v216);
  v217 = v230;
  *(_QWORD *)&v230 = absl::internal_any_invocable::EmptyManager;
  *((_QWORD *)&v230 + 1) = 0;
  v218 = v231;
  v219 = v232;
  v102 = (uint64_t (***)())v220;
  if (v234)
  {
    v103 = (uint64_t *)(v3 + 24);
    if (v234 == v233)
    {
      v221 = (uint64_t (***)())v220;
      (*(void (**)(void))(v233[0] + 24))();
    }
    else
    {
      v221 = v234;
      v234 = 0;
    }
  }
  else
  {
    v221 = 0;
    v103 = (uint64_t *)(v3 + 24);
  }
  webrtc::JsepTransportController::JsepTransportController(v100, v103, v201, v199, v101, (uint64_t)&v209);
  v104 = *(_QWORD *)(v3 + 592);
  *(_QWORD *)(v3 + 592) = v100;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v221 == (uint64_t (***)())v220)
  {
    v105 = 4;
  }
  else
  {
    if (!v221)
      goto LABEL_118;
    v105 = 5;
    v102 = v221;
  }
  ((void (*)(uint64_t (***)()))(*v102)[v105])(v102);
LABEL_118:
  ((void (*)(uint64_t, _BYTE *, _BYTE *))v217)(1, v216, v216);
  ((void (*)(uint64_t, _BYTE *, _BYTE *))v215)(1, v214, v214);
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::TrivialUntypedFunctionArgs<1ul>>((char *)(*(_QWORD *)(v3 + 592) + 56), v3, (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::IceConnectionState)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_1>, v106, v107, v108, v109, v110);
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::TrivialUntypedFunctionArgs<1ul>>((char *)(*(_QWORD *)(v3 + 592) + 88), v3, (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(webrtc::PeerConnectionInterface::PeerConnectionState)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_2>, v111, v112, v113, v114, v115);
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::TrivialUntypedFunctionArgs<1ul>>((char *)(*(_QWORD *)(v3 + 592) + 120), v3, (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(webrtc::PeerConnectionInterface::IceConnectionState)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_3>, v116, v117, v118, v119, v120);
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::TrivialUntypedFunctionArgs<1ul>>((char *)(*(_QWORD *)(v3 + 592) + 152), v3, (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::IceGatheringState)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_4>, v121, v122, v123, v124, v125);
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::TrivialUntypedFunctionArgs<1ul>>((char *)(*(_QWORD *)(v3 + 592) + 184), v3, (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(std::string const&,std::vector<cricket::Candidate> const&)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_5>, v126, v127, v128, v129, v130);
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::TrivialUntypedFunctionArgs<1ul>>((char *)(*(_QWORD *)(v3 + 592) + 216), v3, (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::IceCandidateErrorEvent const&)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_6>, v131, v132, v133, v134, v135);
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::TrivialUntypedFunctionArgs<1ul>>((char *)(*(_QWORD *)(v3 + 592) + 248), v3, (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(std::vector<cricket::Candidate> const&)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_7>, v136, v137, v138, v139, v140);
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::TrivialUntypedFunctionArgs<1ul>>((char *)(*(_QWORD *)(v3 + 592) + 280), v3, (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::CandidatePairChangeEvent const&)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_8>, v141, v142, v143, v144, v145);
  v146 = *(unsigned int *)(v67 + 112);
  v202 = *(_DWORD *)(v67 + 116);
  v203 = *(_BYTE *)(v67 + 120);
  v147 = *(unsigned int *)(v67 + 108);
  v197 = *(_BYTE *)(v67 + 159);
  v198 = *(_BYTE *)(v67 + 160);
  v200 = *(_BYTE *)(v67 + 156);
  v148 = *(_WORD *)(v67 + 161);
  v187 = *(_BYTE *)(v67 + 163);
  v195 = *(_BYTE *)(v67 + 168);
  v196 = *(_BYTE *)(v67 + 164);
  v149 = *(_WORD *)(v67 + 169);
  v150 = *(_BYTE *)(v67 + 171);
  v193 = *(_BYTE *)(v67 + 176);
  v194 = *(_BYTE *)(v67 + 172);
  v151 = *(_WORD *)(v67 + 177);
  v152 = *(_BYTE *)(v67 + 179);
  v191 = *(_BYTE *)(v67 + 184);
  v192 = *(_BYTE *)(v67 + 180);
  v153 = *(_WORD *)(v67 + 185);
  v154 = *(_BYTE *)(v67 + 187);
  v189 = *(_BYTE *)(v67 + 192);
  v190 = *(_BYTE *)(v67 + 188);
  v155 = *(_WORD *)(v67 + 193);
  v156 = *(_BYTE *)(v67 + 195);
  v188 = *(_BYTE *)(v67 + 196);
  v186 = *(_BYTE *)(v67 + 200);
  v157 = *(_WORD *)(v67 + 201);
  v158 = *(_BYTE *)(v67 + 203);
  v206 = *(_WORD *)(v67 + 285);
  v159 = *(_BYTE *)(v67 + 204);
  v160 = *(_BYTE *)(v67 + 208);
  v161 = *(_WORD *)(v67 + 209);
  v162 = *(_BYTE *)(v67 + 211);
  v163 = *(_BYTE *)(v67 + 212);
  v164 = *(_BYTE *)(v67 + 224);
  v165 = *(_WORD *)(v67 + 225);
  v166 = *(_BYTE *)(v67 + 227);
  v167 = *(_BYTE *)(v67 + 228);
  v168 = *(_BYTE *)(v67 + 284);
  v169 = *(_BYTE *)(v67 + 287);
  v170 = *(_BYTE *)(v67 + 288);
  v171 = *(_QWORD *)(v3 + 592);
  *(_WORD *)(v171 + 733) = v206;
  *(_WORD *)(v171 + 765) = v148;
  *(_WORD *)(v171 + 773) = v149;
  *(_WORD *)(v171 + 781) = v151;
  *(_WORD *)(v171 + 789) = v153;
  *(_WORD *)(v171 + 797) = v155;
  *(_WORD *)(v171 + 805) = v157;
  *(_WORD *)(v171 + 813) = v161;
  *(_WORD *)(v171 + 821) = v165;
  v172 = v147;
  v173 = v146 != 0xFFFFFFFFLL;
  if ((_DWORD)v147 == -1)
    v172 = 0;
  *(_BYTE *)(v171 + 712) = v147 != 0xFFFFFFFFLL;
  *(_DWORD *)(v171 + 708) = v147 & 0xFFFFFF00 | v172;
  v174 = v146;
  v175 = (_DWORD)v146 == -1;
  v176 = v146 & 0xFFFFFF00;
  if (v175)
    v174 = 0;
  *(_BYTE *)(v171 + 720) = v173;
  *(_DWORD *)(v171 + 716) = v176 | v174;
  *(_DWORD *)(v171 + 724) = v202 == 1;
  *(_BYTE *)(v171 + 728) = v203;
  *(_BYTE *)(v171 + 732) = v168;
  *(_BYTE *)(v171 + 735) = v169;
  *(_BYTE *)(v171 + 736) = v170;
  *(_BYTE *)(v171 + 740) = v200;
  *(_BYTE *)(v171 + 741) = v197;
  *(_DWORD *)(v171 + 760) = 2;
  *(_BYTE *)(v171 + 764) = v198;
  *(_BYTE *)(v171 + 767) = v187;
  *(_BYTE *)(v171 + 768) = v196;
  *(_BYTE *)(v171 + 772) = v195;
  *(_BYTE *)(v171 + 775) = v150;
  *(_BYTE *)(v171 + 776) = v194;
  *(_BYTE *)(v171 + 780) = v193;
  *(_BYTE *)(v171 + 783) = v152;
  *(_BYTE *)(v171 + 784) = v192;
  *(_BYTE *)(v171 + 788) = v191;
  *(_BYTE *)(v171 + 791) = v154;
  *(_BYTE *)(v171 + 792) = v190;
  *(_BYTE *)(v171 + 796) = v189;
  *(_BYTE *)(v171 + 799) = v156;
  *(_BYTE *)(v171 + 800) = v188;
  *(_BYTE *)(v171 + 804) = v186;
  *(_BYTE *)(v171 + 807) = v158;
  *(_BYTE *)(v171 + 808) = v159;
  *(_BYTE *)(v171 + 812) = v160;
  *(_BYTE *)(v171 + 815) = v162;
  *(_BYTE *)(v171 + 816) = v163;
  *(_BYTE *)(v171 + 820) = v164;
  *(_BYTE *)(v171 + 823) = v166;
  *(_BYTE *)(v171 + 824) = v167;
  *(_BYTE *)(v171 + 744) = 0;
  *(_BYTE *)(v171 + 748) = 0;
  *(_BYTE *)(v171 + 752) = 0;
  *(_BYTE *)(v171 + 756) = 0;
  *(_DWORD *)(v171 + 828) = 0;
  webrtc::JsepTransportController::GetDtlsTransports((webrtc::JsepTransportCollection **)v171, &v207);
  v177 = v207;
  v178 = v208;
  if (v207 != v208)
  {
    v179 = v207;
    do
    {
      v180 = *(_QWORD *)v179;
      v179 += 8;
      v181 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v180 + 200))(v180);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v181 + 168))(v181, v171 + 708);
    }
    while (v179 != v178);
  }
  v182 = (uint64_t (***)())v233;
  if (v177)
    operator delete(v177);
  v183 = *(_QWORD *)(v3 + 592);
  if (v234 == v233)
  {
    v184 = 4;
    goto LABEL_131;
  }
  if (v234)
  {
    v184 = 5;
    v182 = v234;
LABEL_131:
    ((void (*)(uint64_t (***)()))(*v182)[v184])(v182);
  }
  ((void (*)(uint64_t, _QWORD *, _QWORD *))v230)(1, v229, v229);
  result = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *))v228)(1, v227, v227);
  **v204 = v183;
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 24);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 6;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>::~RefCountedObject(_QWORD *a1)
{
  webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::~RtpTransceiverProxyWithInternal(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::media_type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

void webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::mid(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  rtc::Thread *v4;
  void (*v5)(void **__return_ptr, _QWORD *);
  _QWORD *v6;
  int v7;
  TimeDelta v8;
  TimeDelta v9;
  char v10;
  char v11;
  void *v12[2];
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  __int128 __p;
  __n128 (*v18)(uint64_t, __n128 *, __n128 *);
  unsigned __int8 v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a1 + 16);
  v16 = xmmword_208F16E40;
  LOBYTE(__p) = 0;
  v19 = 0;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(void **__return_ptr, _QWORD *))v16;
    v6 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v5 = *(void (**)(void **__return_ptr, _QWORD *))(*v6 + v16);
    v5(v12, v6);
    v7 = v14;
    if (v19 == v14)
    {
      if (v19)
      {
        if (SHIBYTE(v18) < 0)
          operator delete((void *)__p);
        __p = *(_OWORD *)v12;
        v18 = v13;
      }
    }
    else if (v19)
    {
      if (SHIBYTE(v18) < 0)
      {
        operator delete((void *)__p);
        v7 = v14;
      }
      v19 = 0;
      if (v7 && SHIBYTE(v13) < 0)
        operator delete(v12[0]);
    }
    else
    {
      __p = *(_OWORD *)v12;
      v18 = v13;
      v19 = 1;
    }
  }
  else
  {
    v12[0] = &v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::optional<std::string>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, void **, char *, char *))(*(_QWORD *)v4 + 8))(v4, v12, &v11, &v10);
    v13(1, (__n128 *)v12, (__n128 *)v12);
    v8.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v9.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v8, v9);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v19)
  {
    *(_OWORD *)a2 = __p;
    *(_QWORD *)(a2 + 16) = v18;
    v18 = 0;
    __p = 0uLL;
    *(_BYTE *)(a2 + 24) = 1;
  }
  pthread_mutex_destroy(&v20);
  pthread_cond_destroy(&v21);
  if (v19)
  {
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
}

uint64_t webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::sender@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = xmmword_208F05250;
  v7 = 0;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,webrtc::scoped_refptr<webrtc::RtpSenderInterface>>::Marshal(*(rtc::Thread **)(a1 + 8), &v5, a2);
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::receiver@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = xmmword_208F05260;
  v7 = 0;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,webrtc::scoped_refptr<webrtc::RtpReceiverInterface>>::Marshal(*(rtc::Thread **)(a1 + 8), &v5, a2);
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::stopped(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  char v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 16);
  v15 = xmmword_208F05270;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16 != 0;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::stopping(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  char v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 16);
  v15 = xmmword_208F16E50;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16 != 0;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::direction(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 16);
  v15 = xmmword_208F05280;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,webrtc::RtpTransceiverDirection>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

void webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::SetDirectionWithError(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  void *__p;
  uint64_t v10;
  _BYTE v11[16];
  int *v12;
  pthread_mutex_t v13;
  pthread_cond_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = xmmword_208F052A0;
  v8 = 0;
  v11[14] = 0;
  v10 = 0;
  memset(v11, 0, 13);
  __p = 0;
  v12 = &v5;
  rtc::Event::Event((rtc::Event *)&v13, 0, 0);
  webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError,webrtc::RtpTransceiverDirection>::Marshal(*(rtc::Thread **)(a1 + 8), (uint64_t)&v6, a3);
  pthread_mutex_destroy(&v13);
  pthread_cond_destroy(&v14);
  if ((v11[7] & 0x80000000) != 0)
    operator delete(__p);
}

uint64_t webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::current_direction(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v8;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a1 + 16);
  v16 = xmmword_208F052B0;
  LOBYTE(v17) = 0;
  BYTE4(v17) = 0;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v16;
    v4 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v16);
    v5 = v3(v4);
    LODWORD(v17) = v5;
    BYTE4(v17) = BYTE4(v5);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::optional<webrtc::RtpTransceiverDirection>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  v8 = v17;
  pthread_mutex_destroy(&v18);
  pthread_cond_destroy(&v19);
  return v8;
}

uint64_t webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::fired_direction(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v8;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a1 + 16);
  v16 = xmmword_208F16E60;
  LOBYTE(v17) = 0;
  BYTE4(v17) = 0;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v16;
    v4 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v16);
    v5 = v3(v4);
    LODWORD(v17) = v5;
    BYTE4(v17) = BYTE4(v5);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::optional<webrtc::RtpTransceiverDirection>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  v8 = v17;
  pthread_mutex_destroy(&v18);
  pthread_cond_destroy(&v19);
  return v8;
}

void webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::StopStandard(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  void *__p;
  uint64_t v8;
  _BYTE v9[24];
  pthread_mutex_t v10;
  pthread_cond_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = xmmword_208F16E70;
  v6 = 0;
  v9[14] = 0;
  v8 = 0;
  memset(v9, 0, 13);
  __p = 0;
  rtc::Event::Event((rtc::Event *)&v10, 0, 0);
  webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError>::Marshal(*(rtc::Thread **)(a1 + 8), (uint64_t)&v4, a2);
  pthread_mutex_destroy(&v10);
  pthread_cond_destroy(&v11);
  if ((v9[7] & 0x80000000) != 0)
    operator delete(__p);
}

uint64_t webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::StopInternal(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 16);
  v14 = xmmword_208F16E80;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v14;
    v4 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v14);
    v3(v4);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v13;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpTransceiverInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v10, &v9, &v8);
    v11(1, &v10, &v10);
    v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v6.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v5, v6);
  }
  pthread_mutex_destroy(&v15);
  return pthread_cond_destroy(&v16);
}

void webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::SetCodecPreferences(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v6[2];
  uint64_t v7;
  __int128 v8;
  int v9;
  void *__p;
  uint64_t v11;
  _BYTE v12[16];
  _QWORD *v13;
  pthread_mutex_t v14;
  pthread_cond_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6[0] = a2;
  v6[1] = a3;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = xmmword_208F16E90;
  v9 = 0;
  v12[14] = 0;
  v11 = 0;
  memset(v12, 0, 13);
  __p = 0;
  v13 = v6;
  rtc::Event::Event((rtc::Event *)&v14, 0, 0);
  webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError,rtc::ArrayView<webrtc::RtpCodecCapability,-4711l>>::Marshal(*(rtc::Thread **)(a1 + 8), (uint64_t)&v7, a4);
  pthread_mutex_destroy(&v14);
  pthread_cond_destroy(&v15);
  if ((v12[7] & 0x80000000) != 0)
    operator delete(__p);
}

void webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::codec_preferences(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  void *v5;
  char *v6;
  void (***v7)(char *);
  void (**v8)(char *);
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  void *__p;
  char *v13;
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1 + 16);
  v11 = xmmword_208F04E70;
  v13 = 0;
  v14 = 0;
  __p = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::vector<webrtc::RtpCodecCapability>>::Marshal(*(rtc::Thread **)(a1 + 8), &v10, a2);
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v4 = (char *)__p;
  if (__p)
  {
    v5 = __p;
    if (v13 != __p)
    {
      v6 = v13 - 160;
      v7 = (void (***)(char *))(v13 - 160);
      do
      {
        v8 = *v7;
        v7 -= 20;
        (*v8)(v6);
        v9 = v6 == v4;
        v6 = (char *)v7;
      }
      while (!v9);
      v5 = __p;
    }
    v13 = v4;
    operator delete(v5);
  }
}

void webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::GetHeaderExtensionsToNegotiate(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **v4;
  void **v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  void *__p;
  void **v10;
  uint64_t v11;
  pthread_mutex_t v12;
  pthread_cond_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = xmmword_208F04E80;
  v10 = 0;
  v11 = 0;
  __p = 0;
  rtc::Event::Event((rtc::Event *)&v12, 0, 0);
  webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::vector<webrtc::RtpHeaderExtensionCapability>>::Marshal(*(rtc::Thread **)(a1 + 8), &v7, a2);
  pthread_mutex_destroy(&v12);
  pthread_cond_destroy(&v13);
  v4 = (void **)__p;
  if (__p)
  {
    v5 = v10;
    v6 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v5 - 17) < 0)
          operator delete(*(v5 - 5));
        v5 -= 5;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v10 = v4;
    operator delete(v6);
  }
}

void webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::GetNegotiatedHeaderExtensions(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **v4;
  void **v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  void *__p;
  void **v10;
  uint64_t v11;
  pthread_mutex_t v12;
  pthread_cond_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = xmmword_208F04E90;
  v10 = 0;
  v11 = 0;
  __p = 0;
  rtc::Event::Event((rtc::Event *)&v12, 0, 0);
  webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::vector<webrtc::RtpHeaderExtensionCapability>>::Marshal(*(rtc::Thread **)(a1 + 8), &v7, a2);
  pthread_mutex_destroy(&v12);
  pthread_cond_destroy(&v13);
  v4 = (void **)__p;
  if (__p)
  {
    v5 = v10;
    v6 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v5 - 17) < 0)
          operator delete(*(v5 - 5));
        v5 -= 5;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v10 = v4;
    operator delete(v6);
  }
}

void webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::SetHeaderExtensionsToNegotiate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v6[2];
  uint64_t v7;
  __int128 v8;
  int v9;
  void *__p;
  uint64_t v11;
  _BYTE v12[16];
  _QWORD *v13;
  pthread_mutex_t v14;
  pthread_cond_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6[0] = a2;
  v6[1] = a3;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = xmmword_208F04EA0;
  v9 = 0;
  v12[14] = 0;
  v11 = 0;
  memset(v12, 0, 13);
  __p = 0;
  v13 = v6;
  rtc::Event::Event((rtc::Event *)&v14, 0, 0);
  webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError,rtc::ArrayView<webrtc::RtpHeaderExtensionCapability const,-4711l>>::Marshal(*(rtc::Thread **)(a1 + 8), (uint64_t)&v7, a4);
  pthread_mutex_destroy(&v14);
  pthread_cond_destroy(&v15);
  if ((v12[7] & 0x80000000) != 0)
    operator delete(__p);
}

BOOL rtc::RefCountedObject<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 24));
  return v1 == 1;
}

_QWORD *webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::~RtpTransceiverProxyWithInternal(_QWORD *a1)
{
  rtc::Thread *v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  char v7;
  char v8;
  __n128 v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C0B96C0;
  v12 = a1;
  v13 = webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::DestroyInternal;
  v14 = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = (rtc::Thread *)a1[1];
  if (rtc::Thread::IsCurrent(v2))
  {
    v13((uint64_t)v12 + (v14 >> 1));
  }
  else
  {
    v9.n128_u64[0] = (unint64_t)&v12;
    v10 = absl::internal_any_invocable::LocalManagerTrivial;
    v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v9, &v8, &v7);
    v10(1, &v9, &v9);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v3, v4);
  }
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v5 = a1[2];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::optional<std::string>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(void **__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  void **v5;
  int v6;
  void *__p[2];
  uint64_t v9;
  unsigned __int8 v10;

  v1 = *a1;
  v2 = *(void (**)(void **__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(void **__return_ptr, _QWORD *))(*v4 + v2);
  v5 = (void **)(v1 + 24);
  v2(__p, v4);
  v6 = v10;
  if (*(unsigned __int8 *)(v1 + 48) == v10)
  {
    if (*(_BYTE *)(v1 + 48))
    {
      if (*(char *)(v1 + 47) < 0)
        operator delete(*v5);
      *(_OWORD *)v5 = *(_OWORD *)__p;
      *(_QWORD *)(v1 + 40) = v9;
    }
  }
  else if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0)
    {
      operator delete(*v5);
      v6 = v10;
    }
    *(_BYTE *)(v1 + 48) = 0;
    if (v6 && SHIBYTE(v9) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)__p;
    *(_QWORD *)(v1 + 40) = v9;
    *(_BYTE *)(v1 + 48) = 1;
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 64));
  *(_BYTE *)(v1 + 177) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 128));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 64));
}

uint64_t webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,webrtc::scoped_refptr<webrtc::RtpSenderInterface>>::Marshal@<X0>(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, _QWORD *a3@<X8>)
{
  void (*v6)(__n128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t result;
  TimeDelta v11;
  TimeDelta v12;
  uint64_t v13;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v16, v8);
    v9 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    result = a2[3];
    a2[3] = v9;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      result = v16.n128_u64[0];
      if (v16.n128_u64[0])
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)a2;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,webrtc::scoped_refptr<webrtc::RtpSenderInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    result = rtc::Event::Wait((rtc::Event *)(a2 + 5), v11, v12);
  }
  v13 = a2[3];
  a2[3] = 0;
  *a3 = v13;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,webrtc::scoped_refptr<webrtc::RtpSenderInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v8, v4);
  v5 = v8;
  v8 = 0;
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,webrtc::scoped_refptr<webrtc::RtpReceiverInterface>>::Marshal@<X0>(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, _QWORD *a3@<X8>)
{
  void (*v6)(__n128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t result;
  TimeDelta v11;
  TimeDelta v12;
  uint64_t v13;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v16, v8);
    v9 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    result = a2[3];
    a2[3] = v9;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      result = v16.n128_u64[0];
      if (v16.n128_u64[0])
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)a2;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,webrtc::scoped_refptr<webrtc::RtpReceiverInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    result = rtc::Event::Wait((rtc::Event *)(a2 + 5), v11, v12);
  }
  v13 = a2[3];
  a2[3] = 0;
  *a3 = v13;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,webrtc::scoped_refptr<webrtc::RtpReceiverInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v8, v4);
  v5 = v8;
  v8 = 0;
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_BYTE *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,webrtc::RtpTransceiverDirection>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_DWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

__n128 webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError,webrtc::RtpTransceiverDirection>::Marshal@<Q0>(rtc::Thread *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  void (*v6)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  TimeDelta v10;
  TimeDelta v11;
  __n128 result;
  char v13;
  uint64_t v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t *);
  _DWORD v17[3];
  char v18;

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    v8 = (_QWORD *)(*(_QWORD *)a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(*v8 + v6);
    v6(&v14, v8, **(unsigned int **)(a2 + 64));
    *(_DWORD *)(a2 + 24) = v14;
    v9 = (void **)(a2 + 32);
    if (*(char *)(a2 + 55) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = v15;
    *(_QWORD *)(a2 + 48) = v16;
    *(_DWORD *)(a2 + 56) = v17[0];
    *(_DWORD *)(a2 + 59) = *(_DWORD *)((char *)v17 + 3);
  }
  else
  {
    v14 = a2;
    *((_QWORD *)&v15 + 1) = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError,webrtc::RtpTransceiverDirection>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, uint64_t *, char *, char *))(*(_QWORD *)this + 8))(this, &v14, &v18, &v13);
    (*((void (**)(uint64_t, uint64_t *, uint64_t *))&v15 + 1))(1, &v14, &v14);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a2 + 72), v10, v11);
  }
  *(_DWORD *)a3 = *(_DWORD *)(a2 + 24);
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a3 + 35) = *(_DWORD *)(a2 + 59);
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError,webrtc::RtpTransceiverDirection>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, _QWORD);
  uint64_t v3;
  unsigned int *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _DWORD v11[2];

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(unsigned int **)(*a1 + 64);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*v5 + v2);
  v2(&v8, v5, *v4);
  *(_DWORD *)(v1 + 24) = v8;
  v6 = (void **)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v9;
  *(_QWORD *)(v1 + 48) = v10;
  *(_DWORD *)(v1 + 56) = v11[0];
  *(_DWORD *)(v1 + 59) = *(_DWORD *)((char *)v11 + 3);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 72));
  *(_BYTE *)(v1 + 185) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 136));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 72));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::optional<webrtc::RtpTransceiverDirection>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  v5 = v2(v4);
  *(_DWORD *)(v1 + 24) = v5;
  *(_BYTE *)(v1 + 28) = BYTE4(v5);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

__n128 webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError>::Marshal@<Q0>(rtc::Thread *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  void (*v6)(_QWORD *__return_ptr, _QWORD);
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  TimeDelta v10;
  TimeDelta v11;
  __n128 result;
  char v13;
  uint64_t v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t *);
  _DWORD v17[3];
  char v18;

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = *(void (**)(_QWORD *__return_ptr, _QWORD))(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    v8 = (_QWORD *)(*(_QWORD *)a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(_QWORD *__return_ptr, _QWORD))(*v8 + v6);
    v6(&v14, v8);
    *(_DWORD *)(a2 + 24) = v14;
    v9 = (void **)(a2 + 32);
    if (*(char *)(a2 + 55) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = v15;
    *(_QWORD *)(a2 + 48) = v16;
    *(_DWORD *)(a2 + 56) = v17[0];
    *(_DWORD *)(a2 + 59) = *(_DWORD *)((char *)v17 + 3);
  }
  else
  {
    v14 = a2;
    *((_QWORD *)&v15 + 1) = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, uint64_t *, char *, char *))(*(_QWORD *)this + 8))(this, &v14, &v18, &v13);
    (*((void (**)(uint64_t, uint64_t *, uint64_t *))&v15 + 1))(1, &v14, &v14);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a2 + 72), v10, v11);
  }
  *(_DWORD *)a3 = *(_DWORD *)(a2 + 24);
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a3 + 35) = *(_DWORD *)(a2 + 59);
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  void **v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _DWORD v10[2];

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v7, v4);
  *(_DWORD *)(v1 + 24) = v7;
  v5 = (void **)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(v1 + 48) = v9;
  *(_DWORD *)(v1 + 56) = v10[0];
  *(_DWORD *)(v1 + 59) = *(_DWORD *)((char *)v10 + 3);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 72));
  *(_BYTE *)(v1 + 185) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 136));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 72));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpTransceiverInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

__n128 webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError,rtc::ArrayView<webrtc::RtpCodecCapability,-4711l>>::Marshal@<Q0>(rtc::Thread *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  void (*v6)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD);
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  TimeDelta v10;
  TimeDelta v11;
  __n128 result;
  char v13;
  uint64_t v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t *);
  _DWORD v17[3];
  char v18;

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    v8 = (_QWORD *)(*(_QWORD *)a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(*v8 + v6);
    v6(&v14, v8, **(_QWORD **)(a2 + 64), *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8));
    *(_DWORD *)(a2 + 24) = v14;
    v9 = (void **)(a2 + 32);
    if (*(char *)(a2 + 55) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = v15;
    *(_QWORD *)(a2 + 48) = v16;
    *(_DWORD *)(a2 + 56) = v17[0];
    *(_DWORD *)(a2 + 59) = *(_DWORD *)((char *)v17 + 3);
  }
  else
  {
    v14 = a2;
    *((_QWORD *)&v15 + 1) = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError,rtc::ArrayView<webrtc::RtpCodecCapability,-4711l>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, uint64_t *, char *, char *))(*(_QWORD *)this + 8))(this, &v14, &v18, &v13);
    (*((void (**)(uint64_t, uint64_t *, uint64_t *))&v15 + 1))(1, &v14, &v14);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a2 + 72), v10, v11);
  }
  *(_DWORD *)a3 = *(_DWORD *)(a2 + 24);
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a3 + 35) = *(_DWORD *)(a2 + 59);
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError,rtc::ArrayView<webrtc::RtpCodecCapability,-4711l>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _DWORD v11[2];

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 64);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))(*v5 + v2);
  v2(&v8, v5, *v4, v4[1]);
  *(_DWORD *)(v1 + 24) = v8;
  v6 = (void **)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v9;
  *(_QWORD *)(v1 + 48) = v10;
  *(_DWORD *)(v1 + 56) = v11[0];
  *(_DWORD *)(v1 + 59) = *(_DWORD *)((char *)v11 + 3);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 72));
  *(_BYTE *)(v1 + 185) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 136));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 72));
}

void webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::vector<webrtc::RtpCodecCapability>>::Marshal(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  void (*v6)(__int128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;
  __int128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  TimeDelta v18;
  TimeDelta v19;
  char v20;
  char v21;
  __int128 v22;
  __n128 (*v23)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v24)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__int128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v22, v8);
    v9 = (void (***)(_QWORD))a2[3];
    if (v9)
    {
      v10 = (void (***)(_QWORD))a2[4];
      v11 = (void *)a2[3];
      if (v10 != v9)
      {
        v12 = v10 - 20;
        v13 = v10 - 20;
        do
        {
          v14 = *v13;
          v13 -= 20;
          (*v14)(v12);
          v15 = v12 == v9;
          v12 = v13;
        }
        while (!v15);
        v11 = (void *)a2[3];
      }
      a2[4] = v9;
      operator delete(v11);
    }
    v16 = v22;
    v17 = v23;
  }
  else
  {
    *(_QWORD *)&v22 = a2;
    v23 = absl::internal_any_invocable::LocalManagerTrivial;
    v24 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::vector<webrtc::RtpCodecCapability>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __int128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v22, &v21, &v20);
    v23(1, (__n128 *)&v22, (__n128 *)&v22);
    v18.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v19.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a2 + 7), v18, v19);
    v16 = *(_OWORD *)(a2 + 3);
    v17 = (__n128 (*)(uint64_t, __n128 *, __n128 *))a2[5];
  }
  *(_OWORD *)a3 = v16;
  *(_QWORD *)(a3 + 16) = v17;
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = 0;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::vector<webrtc::RtpCodecCapability>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(__int128 *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;
  __int128 v13;
  uint64_t v14;

  v1 = *a1;
  v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v13, v4);
  v5 = *(void (****)(_QWORD))(v1 + 24);
  if (v5)
  {
    v6 = *(void (****)(_QWORD))(v1 + 32);
    v7 = *(void **)(v1 + 24);
    if (v6 != v5)
    {
      v8 = v6 - 20;
      v9 = v6 - 20;
      do
      {
        v10 = *v9;
        v9 -= 20;
        (*v10)(v8);
        v11 = v8 == v5;
        v8 = v9;
      }
      while (!v11);
      v7 = *(void **)(v1 + 24);
    }
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v7);
  }
  *(_OWORD *)(v1 + 24) = v13;
  *(_QWORD *)(v1 + 40) = v14;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

void webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::vector<webrtc::RtpHeaderExtensionCapability>>::Marshal(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  void (*v6)(__int128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  TimeDelta v12;
  TimeDelta v13;
  __int128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  char v16;
  char v17;
  __int128 v18;
  __n128 (*v19)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v20)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__int128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v18, v8);
    v9 = a2[3];
    if (v9)
    {
      v10 = a2[4];
      v11 = (void *)a2[3];
      if (v10 != v9)
      {
        do
        {
          if (*(char *)(v10 - 17) < 0)
            operator delete(*(void **)(v10 - 40));
          v10 -= 40;
        }
        while (v10 != v9);
        v11 = (void *)a2[3];
      }
      a2[4] = v9;
      operator delete(v11);
    }
    v14 = v18;
    v15 = v19;
  }
  else
  {
    *(_QWORD *)&v18 = a2;
    v19 = absl::internal_any_invocable::LocalManagerTrivial;
    v20 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::vector<webrtc::RtpHeaderExtensionCapability>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __int128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v18, &v17, &v16);
    v19(1, (__n128 *)&v18, (__n128 *)&v18);
    v12.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v13.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a2 + 7), v12, v13);
    v14 = *(_OWORD *)(a2 + 3);
    v15 = (__n128 (*)(uint64_t, __n128 *, __n128 *))a2[5];
  }
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = 0;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpTransceiverInterface,std::vector<webrtc::RtpHeaderExtensionCapability>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(__int128 *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  uint64_t v10;

  v1 = *a1;
  v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v9, v4);
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(void **)(v1 + 24);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 17) < 0)
          operator delete(*(void **)(v6 - 40));
        v6 -= 40;
      }
      while (v6 != v5);
      v7 = *(void **)(v1 + 24);
    }
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v7);
  }
  *(_OWORD *)(v1 + 24) = v9;
  *(_QWORD *)(v1 + 40) = v10;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

__n128 webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError,rtc::ArrayView<webrtc::RtpHeaderExtensionCapability const,-4711l>>::Marshal@<Q0>(rtc::Thread *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  void (*v6)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD);
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  TimeDelta v10;
  TimeDelta v11;
  __n128 result;
  char v13;
  uint64_t v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t *);
  _DWORD v17[3];
  char v18;

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    v8 = (_QWORD *)(*(_QWORD *)a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(*v8 + v6);
    v6(&v14, v8, **(_QWORD **)(a2 + 64), *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8));
    *(_DWORD *)(a2 + 24) = v14;
    v9 = (void **)(a2 + 32);
    if (*(char *)(a2 + 55) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = v15;
    *(_QWORD *)(a2 + 48) = v16;
    *(_DWORD *)(a2 + 56) = v17[0];
    *(_DWORD *)(a2 + 59) = *(_DWORD *)((char *)v17 + 3);
  }
  else
  {
    v14 = a2;
    *((_QWORD *)&v15 + 1) = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError,rtc::ArrayView<webrtc::RtpHeaderExtensionCapability const,-4711l>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, uint64_t *, char *, char *))(*(_QWORD *)this + 8))(this, &v14, &v18, &v13);
    (*((void (**)(uint64_t, uint64_t *, uint64_t *))&v15 + 1))(1, &v14, &v14);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a2 + 72), v10, v11);
  }
  *(_DWORD *)a3 = *(_DWORD *)(a2 + 24);
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a3 + 35) = *(_DWORD *)(a2 + 59);
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpTransceiverInterface,webrtc::RTCError,rtc::ArrayView<webrtc::RtpHeaderExtensionCapability const,-4711l>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _DWORD v11[2];

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 64);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))(*v5 + v2);
  v2(&v8, v5, *v4, v4[1]);
  *(_DWORD *)(v1 + 24) = v8;
  v6 = (void **)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v9;
  *(_QWORD *)(v1 + 48) = v10;
  *(_DWORD *)(v1 + 56) = v11[0];
  *(_DWORD *)(v1 + 59) = *(_DWORD *)((char *)v11 + 3);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 72));
  *(_BYTE *)(v1 + 185) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 136));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 72));
}

uint64_t rtc::RefCountedObject<webrtc::RtpTransceiver>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 280);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::RtpTransceiver>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 70;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::RtpTransceiver>::~RefCountedObject(webrtc::RtpTransceiver *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  webrtc::RtpTransceiver::~RtpTransceiver(a1, a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webrtc::RtpTransceiver::codec_preferences@<X0>(webrtc::RtpTransceiver *this@<X0>, _QWORD *a2@<X8>)
{
  return std::vector<webrtc::RtpCodecCapability>::vector(a2, (uint64_t *)this + 22);
}

BOOL rtc::RefCountedObject<webrtc::RtpTransceiver>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 280));
  return v1 == 1;
}

_QWORD *std::vector<webrtc::RtpCodecCapability>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  webrtc::RtpCodec *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 5);
    if (v6 >= 0x19999999999999ALL)
      abort();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[160 * v6];
    do
    {
      v9 = webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v7[v8], (const webrtc::RtpCodec *)(v3 + v8));
      *(_QWORD *)v9 = off_24C0BCC10;
      v10 = *(_QWORD *)(v3 + v8 + 104);
      *((_QWORD *)v9 + 14) = 0;
      v11 = (unint64_t *)((char *)v9 + 112);
      *(v11 - 1) = v10;
      v12 = *(_QWORD *)(v3 + v8 + 112);
      if (v12 >= 2)
      {
        if ((v12 & 1) != 0)
        {
          absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(v11, (unint64_t *)(v3 + v8 + 112));
        }
        else
        {
          *v11 = v12;
          v13 = &v7[v8];
          v14 = *(_OWORD *)(v3 + v8 + 120);
          v15 = *(_OWORD *)(v3 + v8 + 136);
          *((_QWORD *)v13 + 19) = *(_QWORD *)(v3 + v8 + 152);
          *(_OWORD *)(v13 + 136) = v15;
          *(_OWORD *)(v13 + 120) = v14;
        }
      }
      v8 += 160;
    }
    while (v3 + v8 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void std::__function::__func<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_3,std::allocator<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_3>,void ()(void)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_3,std::allocator<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_3>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B92A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_3,std::allocator<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_3>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B92A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_3,std::allocator<webrtc::PeerConnection::Initialize(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_3>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(v1 + 708) & 0x202E0) == 0xA0)
  {
    v2 = *(_QWORD *)(v1 + 96);
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2);
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/usage_pattern.cc");
    }
  }
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,std::function<void ()(rtc::CopyOnWriteBuffer const&,long long)> const&,rtc::CopyOnWriteBuffer const&,long long>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = *a1;
  v9 = a3;
  v4 = *(_QWORD *)(v3 + 24);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, a2, &v9);
  v6 = std::__throw_bad_function_call[abi:sn180100]();
  return absl::internal_any_invocable::RemoteManagerNontrivial<std::function<void ()(rtc::CopyOnWriteBuffer const&,long long)>>(v6, v7, v8);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<std::function<void ()(rtc::CopyOnWriteBuffer const&,long long)>>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = (_QWORD *)*a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = (_QWORD *)v3[3];
      if (v4 == v3)
      {
        v5 = 4;
        v4 = (_QWORD *)*a2;
      }
      else
      {
        if (!v4)
          goto LABEL_10;
        v5 = 5;
      }
      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,std::function<void ()(webrtc::RtpPacketReceived const&)> const&,webrtc::RtpPacketReceived const&>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  v3 = std::__throw_bad_function_call[abi:sn180100]();
  return absl::internal_any_invocable::RemoteManagerNontrivial<std::function<void ()(webrtc::RtpPacketReceived const&)>>(v3, v4, v5);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<std::function<void ()(webrtc::RtpPacketReceived const&)>>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = (_QWORD *)*a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = (_QWORD *)v3[3];
      if (v4 == v3)
      {
        v5 = 4;
        v4 = (_QWORD *)*a2;
      }
      else
      {
        if (!v4)
          goto LABEL_10;
        v5 = 5;
      }
      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

_QWORD *std::__function::__func<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_0,std::allocator<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_0>,void ()(rtc::SSLHandshakeError)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24C0B92E8;
  v2 = a1[1];
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void std::__function::__func<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_0,std::allocator<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_0>,void ()(rtc::SSLHandshakeError)>::~__func(_QWORD *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24C0B92E8;
  v1 = a1[1];
  if (v1)
  {
    v2 = (unsigned int *)(v1 + 4);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_0,std::allocator<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_0>,void ()(rtc::SSLHandshakeError)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B92E8;
  result[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result[2] = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_0,std::allocator<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_0>,void ()(rtc::SSLHandshakeError)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B92E8;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  a2[2] = *(_QWORD *)(result + 16);
  return result;
}

uint64_t std::__function::__func<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_0,std::allocator<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_0>,void ()(rtc::SSLHandshakeError)>::destroy(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v2 = (unsigned int *)(result + 4);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

void std::__function::__func<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_0,std::allocator<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_0>,void ()(rtc::SSLHandshakeError)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = __p[1];
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
  }
  operator delete(__p);
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::IceConnectionState)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_1>(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  char v9;
  char v10;
  _QWORD v11[2];
  uint64_t (*v12)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v13)(uint64_t);

  v3 = *a1;
  v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 48);
  v5 = *(unsigned int **)(*a1 + 520);
  if (v5)
  {
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new();
  *(_QWORD *)v7 = v5;
  *(_QWORD *)(v7 + 8) = v3;
  *(_DWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v7 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_1::operator() const(cricket::IceConnectionState)::{lambda(void)#2} &&>;
  v11[0] = v7;
  v12 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v13 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v11, &v10, &v9);
  return v12(1, v11, v11);
}

_QWORD *absl::internal_any_invocable::LocalInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_1::operator() const(cricket::IceConnectionState)::{lambda(void)#2} &&>(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (***v16)(_QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  char v31;
  char v32;
  _QWORD v33[2];
  uint64_t (*v34)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v35)(uint64_t);

  v1 = *result;
  switch(*((_DWORD *)result + 2))
  {
    case 0:
      if ((*(_DWORD *)(v1 + 108) & 0xFFFFFFFE) == 2)
        return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v1 + 800))(*result, 5);
      return result;
    case 1:
      return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v1 + 800))(*result, 4);
    case 2:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      if (!*(_QWORD *)(*(_QWORD *)(v1 + 64) + 96)
        || (v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 744))(v1),
            v10 = *(_QWORD *)(v9 + 8),
            v11 = *(_QWORD *)(v9 + 16),
            v12 = v11 - v10,
            v11 == v10))
      {
        v24 = 0;
        v25 = 0;
        v14 = 0;
        v26 = *(_QWORD *)(*(_QWORD *)(v1 + 64) + 24);
        v27 = *(unsigned int **)(v1 + 528);
        if (!v27)
          goto LABEL_22;
        goto LABEL_21;
      }
      if (v12 < 0)
        abort();
      v13 = v12 >> 3;
      v14 = (char *)operator new(v12);
      v15 = 0;
      do
      {
        v16 = *(void (****)(_QWORD))(v10 + v15);
        *(_QWORD *)&v14[v15] = v16;
        if (v16)
          (**v16)(v16);
        v15 += 8;
      }
      while (v10 + v15 != v11);
      v24 = &v14[8 * v13];
      v25 = &v14[v15];
      v26 = *(_QWORD *)(*(_QWORD *)(v1 + 64) + 24);
      v27 = *(unsigned int **)(v1 + 528);
      if (v27)
      {
        do
LABEL_21:
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
LABEL_22:
      v29 = (_QWORD *)operator new();
      *v29 = v1;
      v29[1] = v14;
      v29[2] = v25;
      v29[3] = v24;
      v30 = (_QWORD *)operator new();
      *v30 = v27;
      v30[1] = v29;
      v30[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::OnTransportControllerConnectionState(cricket::IceConnectionState)::$_0>;
      v30[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::OnTransportControllerConnectionState(cricket::IceConnectionState)::$_0 &&>;
      v33[0] = v30;
      v34 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
      v35 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
      (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v26 + 8))(v26, v33, &v32, &v31);
      v34(1, v33, v33);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 800))(v1, 2);
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 808))(v1, 512);
    case 3:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      if (*(_DWORD *)(v1 + 108) != 2)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 800))(v1, 2);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 800))(v1, 3);
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 808))(v1, 512);
    default:
      return result;
  }
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(webrtc::PeerConnectionInterface::PeerConnectionState)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_2>(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  char v9;
  char v10;
  _QWORD v11[2];
  uint64_t (*v12)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v13)(uint64_t);

  v3 = *a1;
  v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 48);
  v5 = *(unsigned int **)(*a1 + 520);
  if (v5)
  {
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new();
  *(_QWORD *)v7 = v5;
  *(_QWORD *)(v7 + 8) = v3;
  *(_DWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v7 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_2::operator() const(webrtc::PeerConnectionInterface::PeerConnectionState)::{lambda(void)#2} &&>;
  v11[0] = v7;
  v12 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v13 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v11, &v10, &v9);
  return v12(1, v11, v11);
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_2::operator() const(webrtc::PeerConnectionInterface::PeerConnectionState)::{lambda(void)#2} &&>(unsigned int *a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _BYTE *v11;
  uint64_t v12;
  __int128 *v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  char v18;
  void *__p;
  char v20;

  v1 = *(_BYTE **)a1;
  v2 = a1[2];
  if (*(_DWORD *)(*(_QWORD *)a1 + 116) != (_DWORD)v2
    && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 688))(*(_QWORD *)a1) & 1) == 0)
  {
    *((_DWORD *)v1 + 29) = v2;
    v3 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 680))(v1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 80))(v3, v2);
    if ((_DWORD)v2 == 2 && !v1[856])
    {
      v1[856] = 1;
      v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 208))(v1);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4) != 1)
      {
        v5 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 216))(v1);
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
      }
      v6 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 216))(v1);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v8 = *(_QWORD *)(v7 + 24);
      v9 = *(_QWORD *)(v7 + 32);
      v10 = v9 - v8;
      if (v9 != v8)
      {
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v10 >> 4)) >= 0x24924924924924ALL)
          abort();
        v11 = operator new(v10);
        v12 = 0;
        do
        {
          v13 = (__int128 *)(v8 + v12);
          v14 = (std::string *)&v11[v12];
          if (*(char *)(v8 + v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
          }
          else
          {
            v15 = *v13;
            v14->__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
            *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
          }
          cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&v11[v12 + 24], (const cricket::TransportDescription *)(v8 + v12 + 24));
          v12 += 112;
        }
        while (v8 + v12 != v9);
        if (v12)
        {
          cricket::TransportDescription::GetIceParameters(v11 + 24, &v17);
          if (v20 < 0)
            operator delete(__p);
          if (v18 < 0)
            operator delete(v17);
          v16 = 112 * (v12 / 112);
          do
          {
            cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)&v11[v16 - 88]);
            if ((char)v11[v16 - 89] < 0)
              operator delete(*(void **)&v11[v16 - 112]);
            v16 -= 112;
          }
          while (v16);
        }
        operator delete(v11);
      }
    }
  }
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(webrtc::PeerConnectionInterface::IceConnectionState)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_3>(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  char v9;
  char v10;
  _QWORD v11[2];
  uint64_t (*v12)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v13)(uint64_t);

  v3 = *a1;
  v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 48);
  v5 = *(unsigned int **)(*a1 + 520);
  if (v5)
  {
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new();
  *(_QWORD *)v7 = v5;
  *(_QWORD *)(v7 + 8) = v3;
  *(_DWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v7 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_3::operator() const(webrtc::PeerConnectionInterface::IceConnectionState)::{lambda(void)#2} &&>;
  v11[0] = v7;
  v12 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v13 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v11, &v10, &v9);
  return v12(1, v11, v11);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_3::operator() const(webrtc::PeerConnectionInterface::IceConnectionState)::{lambda(void)#2} &&>(uint64_t result)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_DWORD **)result;
  v2 = *(unsigned int *)(result + 8);
  if (*(_DWORD *)(*(_QWORD *)result + 112) != (_DWORD)v2)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 688))(*(_QWORD *)result);
    if ((result & 1) == 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
      v1[28] = v2;
      v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 680))(v1);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 72))(v10, v2);
    }
  }
  return result;
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::IceGatheringState)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_4>(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  char v9;
  char v10;
  _QWORD v11[2];
  uint64_t (*v12)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v13)(uint64_t);

  v3 = *a1;
  v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 48);
  v5 = *(unsigned int **)(*a1 + 520);
  if (v5)
  {
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new();
  *(_QWORD *)v7 = v5;
  *(_QWORD *)(v7 + 8) = v3;
  *(_DWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v7 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_4::operator() const(cricket::IceGatheringState)::{lambda(void)#2} &&>;
  v11[0] = v7;
  v12 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v13 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v11, &v10, &v9);
  return v12(1, v11, v11);
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_4::operator() const(cricket::IceGatheringState)::{lambda(void)#2} &&>(unsigned int **a1)
{
  unsigned int *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *a1;
  v2 = *((_DWORD *)a1 + 2);
  switch(v2)
  {
    case 0:
      if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 688))(*a1) & 1) != 0)
        return;
      v1[30] = 0;
      goto LABEL_11;
    case 2:
      if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 688))(*a1) & 1) != 0)
        return;
      v3 = 2;
      goto LABEL_10;
    case 1:
      if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 688))(*a1) & 1) != 0)
        return;
      v3 = 1;
LABEL_10:
      v1[30] = v3;
LABEL_11:
      v4 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 680))(v1);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 88))(v4, v1[30]);
      return;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
}

void webrtc::webrtc_function_impl::CallHelpers<void ()(std::string const&,std::vector<cricket::Candidate> const&)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_5>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void **v16;
  void **v17;
  void *v18;
  char v19;
  uint64_t v20;
  std::string v21;
  void *__p[2];
  char *v23;
  char v24;
  _QWORD v25[2];
  uint64_t (*v26)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v27)(uint64_t);

  v4 = *a1;
  v5 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 48);
  v6 = *(unsigned int **)(*a1 + 520);
  if (v6)
  {
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v20 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    __p[0] = 0;
    __p[1] = 0;
    v23 = 0;
    v8 = *a3;
    v9 = a3[1];
    v10 = v9 - *a3;
    if (v9 == *a3)
      goto LABEL_11;
  }
  else
  {
    v21 = *(std::string *)a2;
    __p[0] = 0;
    __p[1] = 0;
    v23 = 0;
    v8 = *a3;
    v9 = a3[1];
    v10 = v9 - *a3;
    if (v9 == *a3)
      goto LABEL_11;
  }
  v11 = 0x84BDA12F684BDA13 * (v10 >> 4);
  if (v11 >= 0x97B425ED097B43)
    abort();
  v12 = (char *)operator new(v10);
  v13 = 0;
  __p[0] = v12;
  __p[1] = v12;
  v23 = &v12[432 * v11];
  do
  {
    cricket::Candidate::Candidate((std::string *)&v12[v13], (std::string *)(v8 + v13));
    v13 += 432;
  }
  while (v8 + v13 != v9);
  __p[1] = &v12[v13];
LABEL_11:
  v14 = operator new();
  *(_QWORD *)v14 = v20;
  *(std::string *)(v14 + 8) = v21;
  memset(&v21, 0, sizeof(v21));
  *(_OWORD *)(v14 + 32) = *(_OWORD *)__p;
  *(_QWORD *)(v14 + 48) = v23;
  __p[1] = 0;
  v23 = 0;
  __p[0] = 0;
  v15 = (_QWORD *)operator new();
  *v15 = v6;
  v15[1] = v14;
  v15[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_5::operator() const(std::string const&,std::vector<cricket::Candidate> const&)::{lambda(void)#2}>;
  v15[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_5::operator() const(std::string const&,std::vector<cricket::Candidate> const&)::{lambda(void)#2} &&>;
  v25[0] = v15;
  v26 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v27 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v5 + 8))(v5, v25, &v24, &v19);
  v26(1, v25, v25);
  v16 = (void **)__p[0];
  if (__p[0])
  {
    v17 = (void **)__p[1];
    v18 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        cricket::Candidate::~Candidate(v17 - 54);
      while (v17 != v16);
      v18 = __p[0];
    }
    __p[1] = v16;
    operator delete(v18);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_5::operator() const(std::string const&,std::vector<cricket::Candidate> const&)::{lambda(void)#2} &&>(_QWORD **a1)
{
  _QWORD **v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  std::string *i;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  _BOOL4 v28;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = (_QWORD **)*a1;
  v3 = (uint64_t)(*a1 + 1);
  v2 = (_QWORD *)**a1;
  if ((*(uint64_t (**)(_QWORD *))(*v2 + 208))(v2)
    && (v4 = (*(uint64_t (**)(_QWORD *))(*v2 + 208))(v2),
        v5 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4),
        v6 = *v5,
        (v7 = v5[1] - *v5) != 0))
  {
    v8 = 0;
    v9 = v7 / 40;
    v10 = *((_BYTE *)v1 + 31);
    if (v10 >= 0)
      v11 = (_QWORD *)*((unsigned __int8 *)v1 + 31);
    else
      v11 = v1[2];
    if (v10 >= 0)
      v12 = (unsigned __int8 *)v3;
    else
      v12 = (unsigned __int8 *)v1[1];
    if (v9 <= 1)
      v13 = 1;
    else
      v13 = v9;
    while (1)
    {
      v14 = (unsigned __int8 *)(v6 + 40 * v8);
      v15 = v14[23];
      v16 = (v15 & 0x80u) == 0 ? (_QWORD *)v14[23] : (_QWORD *)*((_QWORD *)v14 + 1);
      if (v16 == v11)
        break;
LABEL_13:
      if (++v8 == v13)
        goto LABEL_74;
    }
    if ((v15 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v14, v12, *((_QWORD *)v14 + 1)))
        goto LABEL_23;
      goto LABEL_13;
    }
    if (v14[23])
    {
      v17 = v12;
      while (*v14 == *v17)
      {
        ++v14;
        ++v17;
        if (!--v15)
          goto LABEL_23;
      }
      goto LABEL_13;
    }
LABEL_23:
    for (i = (std::string *)v1[4]; i != (std::string *)v1[5]; i += 18)
    {
      v20 = operator new();
      *(_QWORD *)v20 = off_24C0B5550;
      v21 = (std::string *)(v20 + 8);
      if (*((char *)v1 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)v1[1], (std::string::size_type)v1[2]);
      }
      else
      {
        v22 = *(_OWORD *)v3;
        *(_QWORD *)(v20 + 24) = *(_QWORD *)(v3 + 16);
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      *(_DWORD *)(v20 + 32) = v8;
      cricket::Candidate::Candidate((std::string *)(v20 + 40), i);
      v23 = (_QWORD *)v2[87];
      if ((*(uint64_t (**)(_QWORD *))(*v23 + 24))(v23))
      {
        v24 = v23[5];
        if (!v24)
          v24 = v23[4];
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 72))(v24, v20);
      }
      if (((*(uint64_t (**)(_QWORD *))(*v2 + 688))(v2) & 1) != 0)
        goto LABEL_27;
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
      (*(void (**)(_QWORD *, uint64_t))(*v2 + 808))(v2, 128);
      v26 = *(_DWORD *)(v25 + 112);
      if (v26 == 2)
      {
        v30 = *(_DWORD *)(v25 + 116);
        if ((unsigned __int16)v30 == 65193 || *(_DWORD *)(v25 + 116) == 127)
          goto LABEL_61;
        v31 = bswap32(v30);
        v32 = HIWORD(v31) == 49320 || (v31 & 0xFF000000) == 167772160;
        v33 = v32 || (v31 & 0xFFF00000) == -1408237568;
        if (v33 || (*(_DWORD *)(v25 + 116) & 0xC0FF) == 0x4064)
          goto LABEL_61;
      }
      else if (v26 == 30)
      {
        if ((*(_QWORD *)(v25 + 116) & 0xC0FFLL) != 0x80FE)
        {
          v27 = *(_QWORD *)(v25 + 116) == *MEMORY[0x24BDAE880]
             && *(_QWORD *)(v25 + 124) == *(_QWORD *)(MEMORY[0x24BDAE880] + 8);
          v28 = !v27;
          if (*(_QWORD *)(v25 + 116) != 253 && v28)
            goto LABEL_25;
        }
LABEL_61:
        (*(void (**)(_QWORD *, uint64_t))(*v2 + 808))(v2, 2048);
        v26 = *(_DWORD *)(v25 + 112);
      }
      if (v26)
        v34 = 0;
      else
        v34 = *(_BYTE *)(v25 + 144) == 0;
      if (v34)
      {
        v35 = *(unsigned __int8 *)(v25 + 103);
        if ((v35 & 0x80u) != 0)
          v35 = *(_QWORD *)(v25 + 88);
        if (!v35)
          goto LABEL_26;
        (*(void (**)(_QWORD *, uint64_t))(*v2 + 808))(v2, 0x2000);
        v26 = *(_DWORD *)(v25 + 112);
      }
      if (v26 == 30)
LABEL_25:
        (*(void (**)(_QWORD *, uint64_t))(*v2 + 808))(v2, 0x8000);
LABEL_26:
      (*(void (**)(_QWORD *))(*v2 + 184))(v2);
      v19 = (*(uint64_t (**)(_QWORD *))(*v2 + 680))(v2);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 96))(v19, v20);
LABEL_27:
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  else
  {
LABEL_74:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\n\t", v36, v37, v38, v39, v40, v41, v42, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_5::operator() const(std::string const&,std::vector<cricket::Candidate> const&)::{lambda(void)#2}>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 32);
      if (v4)
      {
        v5 = *(_QWORD *)(v3 + 40);
        v6 = *(void **)(v3 + 32);
        if (v5 != v4)
        {
          do
            cricket::Candidate::~Candidate((void **)(v5 - 432));
          while (v5 != v4);
          v6 = *(void **)(v3 + 32);
        }
        *(_QWORD *)(v3 + 40) = v4;
        operator delete(v6);
      }
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::IceCandidateErrorEvent const&)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_6>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  std::string v13;
  int v14;
  std::string v15;
  int v16;
  std::string __p;
  char v18;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v21)(uint64_t);

  v3 = *a1;
  v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 48);
  v5 = *(unsigned int **)(*a1 + 520);
  if (v5)
  {
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v12 = v3;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v13 = *(std::string *)a2;
    v14 = *(_DWORD *)(a2 + 24);
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_8:
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
    v16 = *(_DWORD *)(a2 + 56);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_9;
  }
  std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  v14 = *(_DWORD *)(a2 + 24);
  if (*(char *)(a2 + 55) < 0)
    goto LABEL_8;
LABEL_5:
  v15 = *(std::string *)(a2 + 32);
  v16 = *(_DWORD *)(a2 + 56);
  if ((*(char *)(a2 + 87) & 0x80000000) == 0)
  {
LABEL_6:
    __p = *(std::string *)(a2 + 64);
    goto LABEL_10;
  }
LABEL_9:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
LABEL_10:
  v7 = operator new();
  *(_QWORD *)v7 = v12;
  *(std::string *)(v7 + 8) = v13;
  memset(&v13, 0, sizeof(v13));
  v8 = v16;
  *(_DWORD *)(v7 + 32) = v14;
  *(std::string *)(v7 + 40) = v15;
  memset(&v15, 0, sizeof(v15));
  *(_DWORD *)(v7 + 64) = v8;
  v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 88) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  *(_OWORD *)(v7 + 72) = v9;
  memset(&__p, 0, sizeof(__p));
  v10 = (_QWORD *)operator new();
  *v10 = v5;
  v10[1] = v7;
  v10[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_6::operator() const(cricket::IceCandidateErrorEvent const&)::{lambda(void)#2}>;
  v10[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_6::operator() const(cricket::IceCandidateErrorEvent const&)::{lambda(void)#2} &&>;
  v19[0] = v10;
  v20 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v21 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v19, &v18, &v11);
  v20(1, v19, v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_16:
      operator delete(v13.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_16;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_6::operator() const(cricket::IceCandidateErrorEvent const&)::{lambda(void)#2} &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *a1;
  v2 = **a1;
  v3 = *((unsigned int *)*a1 + 8);
  v4 = *((unsigned int *)*a1 + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 688))(v2);
  if ((result & 1) == 0)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 680))(v2);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *))(*(_QWORD *)v6 + 104))(v6, v1 + 1, v3, v1 + 5, v4, v1 + 9);
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_6::operator() const(cricket::IceCandidateErrorEvent const&)::{lambda(void)#2}>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*(char *)(v3 + 95) < 0)
      {
        operator delete(*(void **)(v3 + 72));
        if ((*(char *)(v3 + 63) & 0x80000000) == 0)
        {
LABEL_5:
          if ((*(char *)(v3 + 31) & 0x80000000) == 0)
            goto LABEL_12;
          goto LABEL_11;
        }
      }
      else if ((*(char *)(v3 + 63) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v3 + 40));
      if ((*(char *)(v3 + 31) & 0x80000000) == 0)
LABEL_12:
        JUMPOUT(0x20BD0ADECLL);
LABEL_11:
      operator delete(*(void **)(v3 + 8));
      goto LABEL_12;
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(std::vector<cricket::Candidate> const&)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_7>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v17;
  char v18;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v21)(uint64_t);

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 48);
  v4 = *(unsigned int **)(*a1 + 520);
  if (v4)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *a2;
  v7 = a2[1];
  v8 = v7 - *a2;
  if (v7 == *a2)
  {
    v10 = 0;
    v13 = 0;
    v12 = 0;
  }
  else
  {
    v9 = 0x84BDA12F684BDA13 * (v8 >> 4);
    if (v9 >= 0x97B425ED097B43)
      abort();
    v10 = (char *)operator new(v8);
    v11 = 0;
    do
    {
      cricket::Candidate::Candidate((std::string *)&v10[v11], (std::string *)(v6 + v11));
      v11 += 432;
    }
    while (v6 + v11 != v7);
    v12 = &v10[432 * v9];
    v13 = &v10[v11];
  }
  v14 = (_QWORD *)operator new();
  *v14 = v2;
  v14[1] = v10;
  v14[2] = v13;
  v14[3] = v12;
  v15 = (_QWORD *)operator new();
  *v15 = v4;
  v15[1] = v14;
  v15[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_7::operator() const(std::vector<cricket::Candidate> const&)::{lambda(void)#2}>;
  v15[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_7::operator() const(std::vector<cricket::Candidate> const&)::{lambda(void)#2} &&>;
  v19[0] = v15;
  v20 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v21 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v19, &v18, &v17);
  return v20(1, v19, v19);
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_7::operator() const(std::vector<cricket::Candidate> const&)::{lambda(void)#2} &&>(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string __p;

  v1 = (_QWORD *)**a1;
  v2 = (*a1)[2];
  v3 = *a1 + 1;
  for (i = *v3; i != v2; i += 432)
  {
    if (*(char *)(i + 399) < 0)
    {
      if (!*(_QWORD *)(i + 384))
      {
LABEL_13:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          cricket::Candidate::ToStringInternal((cricket::Candidate *)i, 0, &__p);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    else if (!*(_BYTE *)(i + 399))
    {
      goto LABEL_13;
    }
  }
  v5 = (_QWORD *)v1[87];
  if ((*(uint64_t (**)(_QWORD *))(*v5 + 24))(v5))
  {
    v6 = v5[5];
    if (!v6)
      v6 = v5[4];
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 80))(v6, v3);
  }
  if (((*(uint64_t (**)(_QWORD *))(*v1 + 688))(v1) & 1) == 0)
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*v1 + 680))(v1);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 112))(v7, v3);
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_7::operator() const(std::vector<cricket::Candidate> const&)::{lambda(void)#2}>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v3 + 16);
        v6 = *(void **)(v3 + 8);
        if (v5 != v4)
        {
          do
            cricket::Candidate::~Candidate((void **)(v5 - 432));
          while (v5 != v4);
          v6 = *(void **)(v3 + 8);
        }
        *(_QWORD *)(v3 + 16) = v4;
        operator delete(v6);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::CandidatePairChangeEvent const&)>::CallInlineStorage<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_8>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  void *v11;
  std::string v12[18];
  std::string v13[18];
  uint64_t v14;
  std::string v15;
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  uint64_t (*v19)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v20)(uint64_t);

  v3 = *a1;
  v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 48);
  v5 = *(unsigned int **)(*a1 + 520);
  if (v5)
  {
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v10 = v3;
  v11 = &unk_24C0B8500;
  cricket::Candidate::Candidate(v12, (std::string *)(a2 + 8));
  cricket::Candidate::Candidate(v13, (std::string *)(a2 + 440));
  v14 = *(_QWORD *)(a2 + 872);
  if (*(char *)(a2 + 903) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(a2 + 880), *(_QWORD *)(a2 + 888));
  else
    v15 = *(std::string *)(a2 + 880);
  v16 = *(_QWORD *)(a2 + 904);
  v7 = operator new();
  *(_QWORD *)v7 = v10;
  *(_QWORD *)(v7 + 8) = &unk_24C0B8500;
  cricket::Candidate::Candidate((std::string *)(v7 + 16), v12);
  cricket::Candidate::Candidate((std::string *)(v7 + 448), v13);
  *(_QWORD *)(v7 + 880) = v14;
  *(std::string *)(v7 + 888) = v15;
  memset(&v15, 0, sizeof(v15));
  *(_QWORD *)(v7 + 912) = v16;
  v8 = (_QWORD *)operator new();
  *v8 = v5;
  v8[1] = v7;
  v8[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_8::operator() const(cricket::CandidatePairChangeEvent const&)::{lambda(void)#2}>;
  v8[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_8::operator() const(cricket::CandidatePairChangeEvent const&)::{lambda(void)#2} &&>;
  v18[0] = v8;
  v19 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v20 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v18, &v17, &v9);
  v19(1, v18, v18);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  cricket::Candidate::~Candidate((void **)&v13[0].__r_.__value_.__l.__data_);
  cricket::Candidate::~Candidate((void **)&v12[0].__r_.__value_.__l.__data_);
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_8::operator() const(cricket::CandidatePairChangeEvent const&)::{lambda(void)#2} &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *a1;
  v2 = (uint64_t)(*a1 + 1);
  v3 = **a1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 688))(v3);
  if ((result & 1) == 0)
  {
    if (!*((_DWORD *)v1 + 56) && !*((_DWORD *)v1 + 164))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 808))(v3, 0x40000);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 680))(v3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v2);
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::InitializeTransportController_n(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies const&)::$_8::operator() const(cricket::CandidatePairChangeEvent const&)::{lambda(void)#2}>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*(char *)(v3 + 911) < 0)
        operator delete(*(void **)(v3 + 888));
      cricket::Candidate::~Candidate((void **)(v3 + 448));
      cricket::Candidate::~Candidate((void **)(v3 + 16));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 8;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>::~RefCountedObject(_QWORD *a1)
{
  webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::~RtpSenderProxyWithInternal(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::SetTrack(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  uint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t *v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F16EA0;
  v19 = &v10;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, uint64_t))v17;
    v5 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v17);
    v6 = v4(v5, *v19);
    v18 = v6;
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,BOOL,webrtc::MediaStreamTrackInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
    v6 = v18 != 0;
  }
  pthread_mutex_destroy(&v20);
  pthread_cond_destroy(&v21);
  return v6;
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::track@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F16E40;
  v7 = 0;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>>::Marshal(*(rtc::Thread **)(a1 + 16), &v5, a2);
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::dtls_transport@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F05250;
  v7 = 0;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::DtlsTransportInterface>>::Marshal(*(rtc::Thread **)(a1 + 16), &v5, a2);
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::ssrc(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F05260;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,unsigned int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::media_type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::id(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24));
}

void webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::stream_ids(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **v4;
  void **v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  void *__p;
  void **v10;
  uint64_t v11;
  pthread_mutex_t v12;
  pthread_cond_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 24);
  v8 = xmmword_208F05280;
  v10 = 0;
  v11 = 0;
  __p = 0;
  rtc::Event::Event((rtc::Event *)&v12, 0, 0);
  webrtc::ConstMethodCall<webrtc::RtpSenderInterface,std::vector<std::string>>::Marshal(*(rtc::Thread **)(a1 + 16), &v7, a2);
  pthread_mutex_destroy(&v12);
  pthread_cond_destroy(&v13);
  v4 = (void **)__p;
  if (__p)
  {
    v5 = v10;
    v6 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v10 = v4;
    operator delete(v6);
  }
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::SetStreams(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F05290;
  v16 = a2;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v15;
    v5 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v15);
    v4(v5, v16);
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,void,std::vector<std::string> const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
  }
  pthread_mutex_destroy(&v17);
  return pthread_cond_destroy(&v18);
}

void webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::init_send_encodings(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  void *__p;
  char *v10;
  uint64_t v11;
  pthread_mutex_t v12;
  pthread_cond_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 24);
  v8 = xmmword_208F052A0;
  v10 = 0;
  v11 = 0;
  __p = 0;
  rtc::Event::Event((rtc::Event *)&v12, 0, 0);
  webrtc::ConstMethodCall<webrtc::RtpSenderInterface,std::vector<webrtc::RtpEncodingParameters>>::Marshal(*(rtc::Thread **)(a1 + 16), &v7, a2);
  pthread_mutex_destroy(&v12);
  pthread_cond_destroy(&v13);
  v4 = (char *)__p;
  if (__p)
  {
    v5 = v10;
    v6 = __p;
    if (v10 != __p)
    {
      do
        webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v5 - 272));
      while (v5 != v4);
      v6 = __p;
    }
    v10 = v4;
    operator delete(v6);
  }
}

void webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::GetParameters(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string v4;
  _BYTE v5[121];
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  pthread_mutex_t v13;
  pthread_cond_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 24);
  v6 = 0;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v10 = 256;
  *(_OWORD *)&v4.__r_.__value_.__r.__words[1] = xmmword_208F052B0;
  memset(v5, 0, sizeof(v5));
  v11 = 0;
  v12 = 0;
  rtc::Event::Event((rtc::Event *)&v13, 0, 0);
  webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::RtpParameters>::Marshal(*(rtc::Thread **)(a1 + 16), &v4, a2);
  pthread_mutex_destroy(&v13);
  pthread_cond_destroy(&v14);
  webrtc::RtpParameters::~RtpParameters((void **)v5);
}

void webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::SetParameters(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  int v7;
  void *__p;
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;
  pthread_mutex_t v12;
  pthread_cond_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F16E60;
  v7 = 0;
  v10[14] = 0;
  v9 = 0;
  memset(v10, 0, 13);
  __p = 0;
  v11 = a2;
  rtc::Event::Event((rtc::Event *)&v12, 0, 0);
  webrtc::MethodCall<webrtc::RtpSenderInterface,webrtc::RTCError,webrtc::RtpParameters const&>::Marshal(*(rtc::Thread **)(a1 + 16), (uint64_t)&v5, a3);
  pthread_mutex_destroy(&v12);
  pthread_cond_destroy(&v13);
  if ((v10[7] & 0x80000000) != 0)
    operator delete(__p);
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::SetParametersAsync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  pthread_mutex_t v9;
  pthread_cond_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F16E70;
  v7 = a2;
  v8 = a3;
  rtc::Event::Event((rtc::Event *)&v9, 0, 0);
  _ZN6webrtc10MethodCallINS_18RtpSenderInterfaceEvJRKNS_13RtpParametersEN4absl12AnyInvocableIFvNS_8RTCErrorEOEEEEE7MarshalEPN3rtc6ThreadE(&v5, *(rtc::Thread **)(a1 + 16));
  pthread_mutex_destroy(&v9);
  return pthread_cond_destroy(&v10);
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::GetDtmfSender@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F16E80;
  v7 = 0;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::DtmfSenderInterface>>::Marshal(*(rtc::Thread **)(a1 + 16), &v5, a2);
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::SetFrameEncryptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  pthread_mutex_t v7;
  pthread_cond_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  v5 = xmmword_208F16EB0;
  v6 = a2;
  rtc::Event::Event((rtc::Event *)&v7, 0, 0);
  webrtc::MethodCall<webrtc::RtpSenderInterface,void,webrtc::scoped_refptr<webrtc::FrameEncryptorInterface>>::Marshal(&v4, *(rtc::Thread **)(a1 + 16));
  pthread_mutex_destroy(&v7);
  return pthread_cond_destroy(&v8);
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::GetFrameEncryptor@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F16E90;
  v7 = 0;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::FrameEncryptorInterface>>::Marshal(*(rtc::Thread **)(a1 + 16), &v5, a2);
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t webrtc::RtpSenderInterface::SetEncoderToPacketizerFrameTransformer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *a2;
  *a2 = 0;
  v4 = v2;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 176))(a1, &v4);
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::SetEncoderSelector(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  pthread_mutex_t v7;
  pthread_cond_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  v5 = xmmword_208F04E80;
  v6 = a2;
  rtc::Event::Event((rtc::Event *)&v7, 0, 0);
  webrtc::MethodCall<webrtc::RtpSenderInterface,void,std::unique_ptr<webrtc::VideoEncoderFactory::EncoderSelectorInterface>>::Marshal(&v4, *(rtc::Thread **)(a1 + 16));
  pthread_mutex_destroy(&v7);
  return pthread_cond_destroy(&v8);
}

void webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::GenerateKeyFrame(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  int v7;
  void *__p;
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;
  pthread_mutex_t v12;
  pthread_cond_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F04E90;
  v7 = 0;
  v10[14] = 0;
  v9 = 0;
  memset(v10, 0, 13);
  __p = 0;
  v11 = a2;
  rtc::Event::Event((rtc::Event *)&v12, 0, 0);
  webrtc::MethodCall<webrtc::RtpSenderInterface,webrtc::RTCError,std::vector<std::string> const&>::Marshal(*(rtc::Thread **)(a1 + 16), (uint64_t)&v5, a3);
  pthread_mutex_destroy(&v12);
  pthread_cond_destroy(&v13);
  if ((v10[7] & 0x80000000) != 0)
    operator delete(__p);
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::SetFrameTransformer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  pthread_mutex_t v7;
  pthread_cond_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  v5 = xmmword_208F04EA0;
  v6 = a2;
  rtc::Event::Event((rtc::Event *)&v7, 0, 0);
  webrtc::MethodCall<webrtc::RtpSenderInterface,void,webrtc::scoped_refptr<webrtc::FrameTransformerInterface>>::Marshal(&v4, *(rtc::Thread **)(a1 + 16));
  pthread_mutex_destroy(&v7);
  return pthread_cond_destroy(&v8);
}

BOOL rtc::RefCountedObject<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 32));
  return v1 == 1;
}

_QWORD *`non-virtual thunk to'rtc::RefCountedObject<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>::~RefCountedObject(uint64_t a1)
{
  return webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::~RtpSenderProxyWithInternal((_QWORD *)(a1 - 8));
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>>::~RefCountedObject(uint64_t a1)
{
  webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::~RtpSenderProxyWithInternal((_QWORD *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t `non-virtual thunk to'webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::SetFrameTransformer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  pthread_mutex_t v7;
  pthread_cond_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = xmmword_208F04EA0;
  v6 = a2;
  rtc::Event::Event((rtc::Event *)&v7, 0, 0);
  webrtc::MethodCall<webrtc::RtpSenderInterface,void,webrtc::scoped_refptr<webrtc::FrameTransformerInterface>>::Marshal(&v4, *(rtc::Thread **)(a1 + 8));
  pthread_mutex_destroy(&v7);
  return pthread_cond_destroy(&v8);
}

_QWORD *webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::~RtpSenderProxyWithInternal(_QWORD *a1)
{
  rtc::Thread *v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  char v7;
  char v8;
  __n128 v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C0B9500;
  a1[1] = &unk_24C0B95C8;
  v12 = a1;
  v13 = webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::DestroyInternal;
  v14 = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = (rtc::Thread *)a1[2];
  if (rtc::Thread::IsCurrent(v2))
  {
    v13((uint64_t)v12 + (v14 >> 1));
  }
  else
  {
    v9.n128_u64[0] = (unint64_t)&v12;
    v10 = absl::internal_any_invocable::LocalManagerTrivial;
    v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v9, &v8, &v7);
    v10(1, &v9, &v9);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v3, v4);
  }
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderProxyWithInternal<webrtc::RtpSenderInternal>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,BOOL,webrtc::MediaStreamTrackInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v2);
  *(_BYTE *)(v1 + 24) = v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>>::Marshal@<X0>(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, _QWORD *a3@<X8>)
{
  void (*v6)(__n128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t result;
  TimeDelta v11;
  TimeDelta v12;
  uint64_t v13;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v16, v8);
    v9 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    result = a2[3];
    a2[3] = v9;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      result = v16.n128_u64[0];
      if (v16.n128_u64[0])
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)a2;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    result = rtc::Event::Wait((rtc::Event *)(a2 + 5), v11, v12);
  }
  v13 = a2[3];
  a2[3] = 0;
  *a3 = v13;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v8, v4);
  v5 = v8;
  v8 = 0;
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::DtlsTransportInterface>>::Marshal@<X0>(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, _QWORD *a3@<X8>)
{
  void (*v6)(__n128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t result;
  TimeDelta v11;
  TimeDelta v12;
  uint64_t v13;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v16, v8);
    v9 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    result = a2[3];
    a2[3] = v9;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      result = v16.n128_u64[0];
      if (v16.n128_u64[0])
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)a2;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::DtlsTransportInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    result = rtc::Event::Wait((rtc::Event *)(a2 + 5), v11, v12);
  }
  v13 = a2[3];
  a2[3] = 0;
  *a3 = v13;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::DtlsTransportInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v8, v4);
  v5 = v8;
  v8 = 0;
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,unsigned int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_DWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

void webrtc::ConstMethodCall<webrtc::RtpSenderInterface,std::vector<std::string>>::Marshal(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  void (*v6)(__int128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  TimeDelta v12;
  TimeDelta v13;
  __int128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  char v16;
  char v17;
  __int128 v18;
  __n128 (*v19)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v20)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__int128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v18, v8);
    v9 = a2[3];
    if (v9)
    {
      v10 = a2[4];
      v11 = (void *)a2[3];
      if (v10 != v9)
      {
        do
        {
          if (*(char *)(v10 - 1) < 0)
            operator delete(*(void **)(v10 - 24));
          v10 -= 24;
        }
        while (v10 != v9);
        v11 = (void *)a2[3];
      }
      a2[4] = v9;
      operator delete(v11);
    }
    v14 = v18;
    v15 = v19;
  }
  else
  {
    *(_QWORD *)&v18 = a2;
    v19 = absl::internal_any_invocable::LocalManagerTrivial;
    v20 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,std::vector<std::string>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __int128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v18, &v17, &v16);
    v19(1, (__n128 *)&v18, (__n128 *)&v18);
    v12.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v13.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a2 + 7), v12, v13);
    v14 = *(_OWORD *)(a2 + 3);
    v15 = (__n128 (*)(uint64_t, __n128 *, __n128 *))a2[5];
  }
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = 0;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,std::vector<std::string>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(__int128 *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  uint64_t v10;

  v1 = *a1;
  v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v9, v4);
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(void **)(v1 + 24);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = *(void **)(v1 + 24);
    }
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v7);
  }
  *(_OWORD *)(v1 + 24) = v9;
  *(_QWORD *)(v1 + 40) = v10;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,void,std::vector<std::string> const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t))(*v5 + v2);
  v2(v5, v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

void webrtc::ConstMethodCall<webrtc::RtpSenderInterface,std::vector<webrtc::RtpEncodingParameters>>::Marshal(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  void (*v6)(__int128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  TimeDelta v14;
  TimeDelta v15;
  char v16;
  char v17;
  __int128 v18;
  __n128 (*v19)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v20)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__int128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v18, v8);
    v9 = a2[3];
    if (v9)
    {
      v10 = a2[4];
      v11 = (void *)a2[3];
      if (v10 != v9)
      {
        do
          webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v10 - 272));
        while (v10 != v9);
        v11 = (void *)a2[3];
      }
      a2[4] = v9;
      operator delete(v11);
    }
    v12 = v18;
    v13 = v19;
  }
  else
  {
    *(_QWORD *)&v18 = a2;
    v19 = absl::internal_any_invocable::LocalManagerTrivial;
    v20 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,std::vector<webrtc::RtpEncodingParameters>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __int128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v18, &v17, &v16);
    v19(1, (__n128 *)&v18, (__n128 *)&v18);
    v14.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v15.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a2 + 7), v14, v15);
    v12 = *(_OWORD *)(a2 + 3);
    v13 = (__n128 (*)(uint64_t, __n128 *, __n128 *))a2[5];
  }
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = 0;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,std::vector<webrtc::RtpEncodingParameters>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(__int128 *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  uint64_t v10;

  v1 = *a1;
  v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v9, v4);
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(void **)(v1 + 24);
    if (v6 != v5)
    {
      do
        webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v6 - 272));
      while (v6 != v5);
      v7 = *(void **)(v1 + 24);
    }
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v7);
  }
  *(_OWORD *)(v1 + 24) = v9;
  *(_QWORD *)(v1 + 40) = v10;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

std::string *webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::RtpParameters>::Marshal@<X0>(rtc::Thread *this@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  void (*size)(std::string *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  TimeDelta v9;
  TimeDelta v10;
  char v12;
  std::string v13;
  uint64_t (*v14)(uint64_t *);
  char v15;

  if (rtc::Thread::IsCurrent(this))
  {
    size = (void (*)(std::string *__return_ptr, _QWORD *))a2->__r_.__value_.__l.__size_;
    v7 = a2->__r_.__value_.__r.__words[2];
    v8 = (_QWORD *)(a2->__r_.__value_.__r.__words[0] + (v7 >> 1));
    if ((v7 & 1) != 0)
      size = *(void (**)(std::string *__return_ptr, _QWORD *))(*v8 + size);
    size(&v13, v8);
    webrtc::RtpParameters::operator=(a2 + 1, &v13);
    webrtc::RtpParameters::~RtpParameters((void **)&v13.__r_.__value_.__l.__data_);
  }
  else
  {
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v13.__r_.__value_.__r.__words[2] = (std::string::size_type)absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::RtpParameters>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, std::string *, char *, char *))(*(_QWORD *)this + 8))(this, &v13, &v15, &v12);
    ((void (*)(uint64_t, std::string *, std::string *))v13.__r_.__value_.__r.__words[2])(1, &v13, &v13);
    v9.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v10.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&a2[8].__r_.__value_.__r.__words[1], v9, v10);
  }
  return webrtc::RtpParameters::RtpParameters(a3, (const webrtc::RtpParameters *)&a2[1]);
}

std::string *webrtc::RtpParameters::operator=(std::string *this, std::string *a2)
{
  std::string *v2;
  __int128 v4;
  std::string *v5;
  const std::string::value_type *v6;
  size_t v7;
  size_t size;
  __int128 v9;
  const std::string::value_type *data;
  size_t v11;
  int v12;
  std::string *v13;
  std::string::value_type v14;
  __int128 v15;
  const std::string::value_type *v16;
  size_t v17;
  int v18;

  v2 = a2;
  if (this == a2)
    goto LABEL_32;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    else
    {
      a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      size = v2->__r_.__value_.__l.__size_;
    }
    std::string::__assign_no_alias<false>(this, (const std::string::value_type *)a2, size);
    v5 = this + 1;
    v6 = (const std::string::value_type *)&v2[1];
    v7 = HIBYTE(v2[1].__r_.__value_.__r.__words[2]);
    if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_13;
  }
  else if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    v5 = this + 1;
    v6 = (const std::string::value_type *)&v2[1];
    v7 = HIBYTE(v2[1].__r_.__value_.__r.__words[2]);
    if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_13:
      if ((v7 & 0x80u) == 0)
        data = v6;
      else
        data = v2[1].__r_.__value_.__l.__data_;
      if ((v7 & 0x80u) == 0)
        v11 = v7;
      else
        v11 = v2[1].__r_.__value_.__l.__size_;
      std::string::__assign_no_alias<false>(v5, data, v11);
      goto LABEL_21;
    }
  }
  else
  {
    v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    v5 = this + 1;
    v6 = (const std::string::value_type *)&a2[1];
    v7 = HIBYTE(a2[1].__r_.__value_.__r.__words[2]);
    if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_13;
  }
  if ((v7 & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v5, v2[1].__r_.__value_.__l.__data_, v2[1].__r_.__value_.__l.__size_);
  }
  else
  {
    v9 = *(_OWORD *)v6;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v9;
  }
LABEL_21:
  std::vector<webrtc::RtpCodecParameters>::__assign_with_size[abi:sn180100]<webrtc::RtpCodecParameters*,webrtc::RtpCodecParameters*>((uint64_t *)&this[2], (uint64_t)v2[2].__r_.__value_.__l.__data_, v2[2].__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v2[2].__r_.__value_.__l.__size_ - v2[2].__r_.__value_.__r.__words[0]) >> 4));
  std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)&this[3], (uint64_t)v2[3].__r_.__value_.__l.__data_, v2[3].__r_.__value_.__l.__size_, (uint64_t)(v2[3].__r_.__value_.__l.__size_ - v2[3].__r_.__value_.__r.__words[0]) >> 5);
  std::vector<webrtc::RtpEncodingParameters>::__assign_with_size[abi:sn180100]<webrtc::RtpEncodingParameters*,webrtc::RtpEncodingParameters*>((uint64_t *)&this[4], (uint64_t)v2[4].__r_.__value_.__l.__data_, v2[4].__r_.__value_.__l.__size_, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v2[4].__r_.__value_.__l.__size_ - v2[4].__r_.__value_.__r.__words[0]) >> 4));
  v12 = (int)v2[5].__r_.__value_.__l.__data_;
  this[5].__r_.__value_.__s.__data_[4] = v2[5].__r_.__value_.__s.__data_[4];
  LODWORD(this[5].__r_.__value_.__l.__data_) = v12;
  v13 = (std::string *)((char *)this + 128);
  v14 = v2[6].__r_.__value_.__s.__data_[7];
  if (this[6].__r_.__value_.__s.__data_[7] < 0)
  {
    if (v14 >= 0)
      v16 = &v2[5].__r_.__value_.__s.__data_[8];
    else
      v16 = (const std::string::value_type *)v2[5].__r_.__value_.__l.__size_;
    if (v14 >= 0)
      v17 = v2[6].__r_.__value_.__s.__data_[7];
    else
      v17 = v2[5].__r_.__value_.__r.__words[2];
    std::string::__assign_no_alias<false>(v13, v16, v17);
  }
  else if (v2[6].__r_.__value_.__s.__data_[7] < 0)
  {
    std::string::__assign_no_alias<true>(v13, (char *)v2[5].__r_.__value_.__l.__size_, v2[5].__r_.__value_.__r.__words[2]);
  }
  else
  {
    v15 = *(_OWORD *)&v2[5].__r_.__value_.__r.__words[1];
    this[6].__r_.__value_.__r.__words[0] = v2[6].__r_.__value_.__r.__words[0];
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
  }
LABEL_32:
  LOWORD(this[6].__r_.__value_.__r.__words[1]) = v2[6].__r_.__value_.__r.__words[1];
  v18 = v2[6].__r_.__value_.__r.__words[2];
  this[6].__r_.__value_.__s.__data_[20] = v2[6].__r_.__value_.__s.__data_[20];
  LODWORD(this[6].__r_.__value_.__r.__words[2]) = v18;
  return this;
}

webrtc::RtpCodec *std::vector<webrtc::RtpCodecParameters>::__assign_with_size[abi:sn180100]<webrtc::RtpCodecParameters*,webrtc::RtpCodecParameters*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  const webrtc::RtpCodec *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  webrtc::RtpCodec *result;
  webrtc::RtpCodec *v21;
  const webrtc::RtpCodec *v22;
  uint64_t v23;
  webrtc::RtpCodec *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (***v28)(_QWORD);
  uint64_t (***v29)(_QWORD);
  uint64_t (**v30)(_QWORD);
  char v31;
  char v32;

  v6 = (const webrtc::RtpCodec *)a2;
  v8 = a1[2];
  v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 4) < a4)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)*a1;
      if (v10 != v9)
      {
        v12 = (void (***)(_QWORD))(v10 - 112);
        v13 = (void (***)(_QWORD))(v10 - 112);
        do
        {
          v14 = *v13;
          v13 -= 14;
          (*v14)(v12);
          v15 = v12 == (void (***)(_QWORD))v9;
          v12 = v13;
        }
        while (!v15);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 <= 0x249249249249249)
    {
      v16 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= a4)
        v17 = a4;
      v18 = v16 >= 0x124924924924924 ? 0x249249249249249 : v17;
      if (v18 <= 0x249249249249249)
      {
        v19 = 112 * v18;
        result = (webrtc::RtpCodec *)operator new(112 * v18);
        *a1 = (uint64_t)result;
        a1[1] = (uint64_t)result;
        for (a1[2] = (uint64_t)result + v19;
              v6 != (const webrtc::RtpCodec *)a3;
              result = (webrtc::RtpCodec *)((char *)v21 + 112))
        {
          v21 = webrtc::RtpCodec::RtpCodec(result, v6);
          *(_QWORD *)v21 = off_24C0BCC30;
          *((_DWORD *)v21 + 26) = *((_DWORD *)v6 + 26);
          v6 = (const webrtc::RtpCodec *)((char *)v6 + 112);
        }
        a1[1] = (uint64_t)result;
        return result;
      }
    }
LABEL_32:
    abort();
  }
  if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - v9) >> 4) < a4)
  {
    v22 = (const webrtc::RtpCodec *)(a2 + 16 * ((a1[1] - v9) >> 4));
    result = (webrtc::RtpCodec *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<webrtc::RtpCodecParameters *,webrtc::RtpCodecParameters *,webrtc::RtpCodecParameters *>((uint64_t)&v31, a2, (uint64_t)v22, v9);
    v23 = a1[1];
    if (v22 == (const webrtc::RtpCodec *)a3)
    {
LABEL_24:
      a1[1] = v23;
      return result;
    }
    result = (webrtc::RtpCodec *)a1[1];
    while (result)
    {
      v24 = webrtc::RtpCodec::RtpCodec(result, v22);
      *(_QWORD *)v24 = off_24C0BCC30;
      *((_DWORD *)v24 + 26) = *((_DWORD *)v22 + 26);
      v22 = (const webrtc::RtpCodec *)((char *)v22 + 112);
      v23 += 112;
      result = (webrtc::RtpCodec *)((char *)v24 + 112);
      if (v22 == (const webrtc::RtpCodec *)a3)
        goto LABEL_24;
    }
    __break(1u);
    goto LABEL_32;
  }
  result = (webrtc::RtpCodec *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<webrtc::RtpCodecParameters *,webrtc::RtpCodecParameters *,webrtc::RtpCodecParameters *>((uint64_t)&v32, a2, a3, v9);
  v26 = v25;
  v27 = a1[1];
  if (v27 != v25)
  {
    v28 = (uint64_t (***)(_QWORD))(v27 - 112);
    v29 = (uint64_t (***)(_QWORD))(v27 - 112);
    do
    {
      v30 = *v29;
      v29 -= 14;
      result = (webrtc::RtpCodec *)(*v30)(v28);
      v15 = v28 == (uint64_t (***)(_QWORD))v26;
      v28 = v29;
    }
    while (!v15);
  }
  a1[1] = v26;
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<webrtc::RtpCodecParameters *,webrtc::RtpCodecParameters *,webrtc::RtpCodecParameters *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  const std::string::value_type *v8;
  size_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  char **v15;
  char v16;
  __int128 v17;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v12 = a4 + v7;
    v13 = a2 + v7;
    if (a2 != a4)
    {
      v14 = (std::string *)(v12 + 8);
      v15 = (char **)(v13 + 8);
      v16 = *(_BYTE *)(v13 + 31);
      if (*(char *)(v12 + 31) < 0)
      {
        if (v16 >= 0)
          v8 = (const std::string::value_type *)(v13 + 8);
        else
          v8 = *v15;
        if (v16 >= 0)
          v9 = *(unsigned __int8 *)(v13 + 31);
        else
          v9 = *(_QWORD *)(a2 + v7 + 16);
        std::string::__assign_no_alias<false>(v14, v8, v9);
      }
      else if ((*(_BYTE *)(v13 + 31) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v14, *v15, *(_QWORD *)(a2 + v7 + 16));
      }
      else
      {
        v17 = *(_OWORD *)v15;
        *(_QWORD *)(v12 + 24) = *(_QWORD *)(v13 + 24);
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v17;
      }
      v10 = a4 + v7;
      v11 = *(_OWORD *)(a2 + v7 + 32);
      *(_BYTE *)(v10 + 48) = *(_BYTE *)(a2 + v7 + 48);
      *(_OWORD *)(v10 + 32) = v11;
      std::vector<webrtc::RtcpFeedback>::__assign_with_size[abi:sn180100]<webrtc::RtcpFeedback*,webrtc::RtcpFeedback*>(a4 + v7 + 56, *(uint64_t **)(a2 + v7 + 56), *(uint64_t **)(a2 + v7 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + v7 + 64) - *(_QWORD *)(a2 + v7 + 56)) >> 2));
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(a4 + v7 + 80, *(char **)(a2 + v7 + 80), (char *)(a2 + 88 + v7));
    }
    *(_DWORD *)(v12 + 104) = *(_DWORD *)(v13 + 104);
    v7 += 112;
  }
  while (v13 + 112 != v6);
  return v6;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::RtpParameters>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(std::string *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  std::string v6[7];

  v1 = *a1;
  v2 = *(void (**)(std::string *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(std::string *__return_ptr, _QWORD *))(*v4 + v2);
  v2(v6, v4);
  webrtc::RtpParameters::operator=((std::string *)(v1 + 24), v6);
  webrtc::RtpParameters::~RtpParameters((void **)&v6[0].__r_.__value_.__l.__data_);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 200));
  *(_BYTE *)(v1 + 313) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 264));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 200));
}

__n128 webrtc::MethodCall<webrtc::RtpSenderInterface,webrtc::RTCError,webrtc::RtpParameters const&>::Marshal@<Q0>(rtc::Thread *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  void (*v6)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  TimeDelta v10;
  TimeDelta v11;
  __n128 result;
  char v13;
  uint64_t v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t *);
  _DWORD v17[3];
  char v18;

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    v8 = (_QWORD *)(*(_QWORD *)a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(*v8 + v6);
    v6(&v14, v8, *(_QWORD *)(a2 + 64));
    *(_DWORD *)(a2 + 24) = v14;
    v9 = (void **)(a2 + 32);
    if (*(char *)(a2 + 55) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = v15;
    *(_QWORD *)(a2 + 48) = v16;
    *(_DWORD *)(a2 + 56) = v17[0];
    *(_DWORD *)(a2 + 59) = *(_DWORD *)((char *)v17 + 3);
  }
  else
  {
    v14 = a2;
    *((_QWORD *)&v15 + 1) = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,webrtc::RTCError,webrtc::RtpParameters const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, uint64_t *, char *, char *))(*(_QWORD *)this + 8))(this, &v14, &v18, &v13);
    (*((void (**)(uint64_t, uint64_t *, uint64_t *))&v15 + 1))(1, &v14, &v14);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a2 + 72), v10, v11);
  }
  *(_DWORD *)a3 = *(_DWORD *)(a2 + 24);
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a3 + 35) = *(_DWORD *)(a2 + 59);
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,webrtc::RTCError,webrtc::RtpParameters const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void **v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _DWORD v11[2];

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 64);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v5 + v2);
  v2(&v8, v5, v4);
  *(_DWORD *)(v1 + 24) = v8;
  v6 = (void **)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v9;
  *(_QWORD *)(v1 + 48) = v10;
  *(_DWORD *)(v1 + 56) = v11[0];
  *(_DWORD *)(v1 + 59) = *(_DWORD *)((char *)v11 + 3);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 72));
  *(_BYTE *)(v1 + 185) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 136));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 72));
}

uint64_t _ZN6webrtc10MethodCallINS_18RtpSenderInterfaceEvJRKNS_13RtpParametersEN4absl12AnyInvocableIFvNS_8RTCErrorEOEEEEE7MarshalEPN3rtc6ThreadE(_QWORD *a1, rtc::Thread *this)
{
  void (*v4)(_QWORD *, uint64_t, _QWORD *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  TimeDelta v10;
  TimeDelta v11;
  char v12;
  char v13;
  _QWORD v14[2];
  __int128 v15;

  if (rtc::Thread::IsCurrent(this))
  {
    v4 = (void (*)(_QWORD *, uint64_t, _QWORD *))a1[1];
    v5 = a1[2];
    v6 = a1[4];
    v7 = a1[5];
    v8 = (_QWORD *)(*a1 + (v5 >> 1));
    if ((v5 & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t, _QWORD *))(*v8 + v4);
    (*(void (**)(_QWORD, uint64_t, _QWORD *))(v7 + 16))(0, v7, v14);
    v15 = *(_OWORD *)(v7 + 16);
    *(_QWORD *)(v7 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(v7 + 24) = 0;
    v4(v8, v6, v14);
    return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *))v15)(1, v14, v14);
  }
  else
  {
    v14[0] = a1;
    *(_QWORD *)&v15 = absl::internal_any_invocable::LocalManagerTrivial;
    *((_QWORD *)&v15 + 1) = _ZN4absl22internal_any_invocable12LocalInvokerILb0EvOZN6webrtc10MethodCallINS2_18RtpSenderInterfaceEvJRKNS2_13RtpParametersENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEEE7MarshalEPN3rtc6ThreadEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(rtc::Thread *, _QWORD *, char *, char *))(*(_QWORD *)this + 8))(this, v14, &v13, &v12);
    ((void (*)(uint64_t, _QWORD *, _QWORD *))v15)(1, v14, v14);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    return rtc::Event::Wait((rtc::Event *)(a1 + 6), v10, v11);
  }
}

uint64_t _ZN4absl22internal_any_invocable12LocalInvokerILb0EvOZN6webrtc10MethodCallINS2_18RtpSenderInterfaceEvJRKNS2_13RtpParametersENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEEE7MarshalEPN3rtc6ThreadEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t, _BYTE *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE v8[16];
  __int128 v9;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t, _BYTE *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = *(_QWORD *)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t, _BYTE *))(*v6 + v2);
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(v5 + 16))(0, v5, v8);
  v9 = *(_OWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(v5 + 24) = 0;
  v2(v6, v4, v8);
  ((void (*)(uint64_t, _BYTE *, _BYTE *))v9)(1, v8, v8);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::DtmfSenderInterface>>::Marshal@<X0>(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, _QWORD *a3@<X8>)
{
  void (*v6)(__n128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t result;
  TimeDelta v11;
  TimeDelta v12;
  uint64_t v13;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v16, v8);
    v9 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    result = a2[3];
    a2[3] = v9;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      result = v16.n128_u64[0];
      if (v16.n128_u64[0])
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)a2;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::DtmfSenderInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    result = rtc::Event::Wait((rtc::Event *)(a2 + 5), v11, v12);
  }
  v13 = a2[3];
  a2[3] = 0;
  *a3 = v13;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::DtmfSenderInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v8, v4);
  v5 = v8;
  v8 = 0;
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t webrtc::MethodCall<webrtc::RtpSenderInterface,void,webrtc::scoped_refptr<webrtc::FrameEncryptorInterface>>::Marshal(_QWORD *a1, rtc::Thread *this)
{
  void (*v4)(_QWORD *, __n128 *);
  uint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t result;
  TimeDelta v10;
  TimeDelta v11;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v4 = (void (*)(_QWORD *, __n128 *))a1[1];
    v5 = a1[2];
    v6 = (unint64_t *)a1[4];
    v7 = (_QWORD *)(*a1 + (v5 >> 1));
    if ((v5 & 1) != 0)
      v4 = *(void (**)(_QWORD *, __n128 *))(*v7 + v4);
    v8 = *v6;
    *v6 = 0;
    v14.n128_u64[0] = v8;
    v4(v7, &v14);
    result = v14.n128_u64[0];
    if (v14.n128_u64[0])
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v14.n128_u64[0] + 8))(v14.n128_u64[0]);
  }
  else
  {
    v14.n128_u64[0] = (unint64_t)a1;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,void,webrtc::scoped_refptr<webrtc::FrameEncryptorInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    return rtc::Event::Wait((rtc::Event *)(a1 + 5), v10, v11);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,void,webrtc::scoped_refptr<webrtc::FrameEncryptorInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(uint64_t **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t *))(*v5 + v2);
  v6 = *v4;
  *v4 = 0;
  v8 = v6;
  v2(v5, &v8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::FrameEncryptorInterface>>::Marshal@<X0>(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, _QWORD *a3@<X8>)
{
  void (*v6)(__n128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t result;
  TimeDelta v11;
  TimeDelta v12;
  uint64_t v13;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v16, v8);
    v9 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    result = a2[3];
    a2[3] = v9;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      result = v16.n128_u64[0];
      if (v16.n128_u64[0])
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)a2;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::FrameEncryptorInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    result = rtc::Event::Wait((rtc::Event *)(a2 + 5), v11, v12);
  }
  v13 = a2[3];
  a2[3] = 0;
  *a3 = v13;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::RtpSenderInterface,webrtc::scoped_refptr<webrtc::FrameEncryptorInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v8, v4);
  v5 = v8;
  v8 = 0;
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t webrtc::MethodCall<webrtc::RtpSenderInterface,void,std::unique_ptr<webrtc::VideoEncoderFactory::EncoderSelectorInterface>>::Marshal(_QWORD *a1, rtc::Thread *this)
{
  void (*v4)(_QWORD *, __n128 *);
  uint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t result;
  TimeDelta v10;
  TimeDelta v11;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v4 = (void (*)(_QWORD *, __n128 *))a1[1];
    v5 = a1[2];
    v6 = (unint64_t *)a1[4];
    v7 = (_QWORD *)(*a1 + (v5 >> 1));
    if ((v5 & 1) != 0)
      v4 = *(void (**)(_QWORD *, __n128 *))(*v7 + v4);
    v8 = *v6;
    *v6 = 0;
    v14.n128_u64[0] = v8;
    v4(v7, &v14);
    result = v14.n128_u64[0];
    v14.n128_u64[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v14.n128_u64[0] = (unint64_t)a1;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,void,std::unique_ptr<webrtc::VideoEncoderFactory::EncoderSelectorInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    return rtc::Event::Wait((rtc::Event *)(a1 + 5), v10, v11);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,void,std::unique_ptr<webrtc::VideoEncoderFactory::EncoderSelectorInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(uint64_t **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t *))(*v5 + v2);
  v6 = *v4;
  *v4 = 0;
  v9 = v6;
  v2(v5, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

__n128 webrtc::MethodCall<webrtc::RtpSenderInterface,webrtc::RTCError,std::vector<std::string> const&>::Marshal@<Q0>(rtc::Thread *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  void (*v6)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  TimeDelta v10;
  TimeDelta v11;
  __n128 result;
  char v13;
  uint64_t v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t *);
  _DWORD v17[3];
  char v18;

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    v8 = (_QWORD *)(*(_QWORD *)a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(*v8 + v6);
    v6(&v14, v8, *(_QWORD *)(a2 + 64));
    *(_DWORD *)(a2 + 24) = v14;
    v9 = (void **)(a2 + 32);
    if (*(char *)(a2 + 55) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = v15;
    *(_QWORD *)(a2 + 48) = v16;
    *(_DWORD *)(a2 + 56) = v17[0];
    *(_DWORD *)(a2 + 59) = *(_DWORD *)((char *)v17 + 3);
  }
  else
  {
    v14 = a2;
    *((_QWORD *)&v15 + 1) = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,webrtc::RTCError,std::vector<std::string> const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, uint64_t *, char *, char *))(*(_QWORD *)this + 8))(this, &v14, &v18, &v13);
    (*((void (**)(uint64_t, uint64_t *, uint64_t *))&v15 + 1))(1, &v14, &v14);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a2 + 72), v10, v11);
  }
  *(_DWORD *)a3 = *(_DWORD *)(a2 + 24);
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a3 + 35) = *(_DWORD *)(a2 + 59);
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,webrtc::RTCError,std::vector<std::string> const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void **v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _DWORD v11[2];

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 64);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v5 + v2);
  v2(&v8, v5, v4);
  *(_DWORD *)(v1 + 24) = v8;
  v6 = (void **)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v9;
  *(_QWORD *)(v1 + 48) = v10;
  *(_DWORD *)(v1 + 56) = v11[0];
  *(_DWORD *)(v1 + 59) = *(_DWORD *)((char *)v11 + 3);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 72));
  *(_BYTE *)(v1 + 185) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 136));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 72));
}

uint64_t webrtc::MethodCall<webrtc::RtpSenderInterface,void,webrtc::scoped_refptr<webrtc::FrameTransformerInterface>>::Marshal(_QWORD *a1, rtc::Thread *this)
{
  void (*v4)(_QWORD *, __n128 *);
  uint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t result;
  TimeDelta v10;
  TimeDelta v11;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v4 = (void (*)(_QWORD *, __n128 *))a1[1];
    v5 = a1[2];
    v6 = (unint64_t *)a1[4];
    v7 = (_QWORD *)(*a1 + (v5 >> 1));
    if ((v5 & 1) != 0)
      v4 = *(void (**)(_QWORD *, __n128 *))(*v7 + v4);
    v8 = *v6;
    *v6 = 0;
    v14.n128_u64[0] = v8;
    v4(v7, &v14);
    result = v14.n128_u64[0];
    if (v14.n128_u64[0])
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v14.n128_u64[0] + 8))(v14.n128_u64[0]);
  }
  else
  {
    v14.n128_u64[0] = (unint64_t)a1;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,void,webrtc::scoped_refptr<webrtc::FrameTransformerInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    return rtc::Event::Wait((rtc::Event *)(a1 + 5), v10, v11);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::RtpSenderInterface,void,webrtc::scoped_refptr<webrtc::FrameTransformerInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(uint64_t **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t *))(*v5 + v2);
  v6 = *v4;
  *v4 = 0;
  v8 = v6;
  v2(v5, &v8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

void rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::PeerConnection::SetConfiguration(webrtc::PeerConnectionInterface::RTCConfiguration const&)::$_1,BOOL,void>(webrtc::PeerConnection::SetConfiguration(webrtc::PeerConnectionInterface::RTCConfiguration const&)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t *v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  _QWORD *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  char *v54;
  void **v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  void *__p;
  char *v63;
  char *v64;
  uint64_t v65;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = *v1;
  if (*((_BYTE *)v1 + 8))
  {
    webrtc::JsepTransportCollection::Transports((webrtc::JsepTransportCollection **)(*(_QWORD *)(v2 + 592) + 376), (char **)&__p);
    v3 = (char *)__p;
    v4 = v63;
    if (__p != v63)
    {
      do
      {
        if (!*(_BYTE *)(*(_QWORD *)v3 + 32))
        {
          *(_BYTE *)(*(_QWORD *)v3 + 32) = 1;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/jsep_transport.cc");
        }
        v3 += 8;
      }
      while (v3 != v4);
      v3 = (char *)__p;
    }
    if (v3)
    {
      v63 = v3;
      operator delete(v3);
    }
  }
  v12 = *(_QWORD *)(v2 + 592);
  v13 = (__int128 *)v1[2];
  v14 = v12 + 708;
  v16 = v13[5];
  v15 = v13[6];
  v17 = v13[4];
  *(_OWORD *)(v12 + 816) = *(__int128 *)((char *)v13 + 108);
  *(_OWORD *)(v12 + 788) = v16;
  *(_OWORD *)(v12 + 804) = v15;
  *(_OWORD *)(v12 + 772) = v17;
  v18 = *v13;
  v19 = v13[1];
  v20 = v13[3];
  *(_OWORD *)(v12 + 740) = v13[2];
  *(_OWORD *)(v12 + 756) = v20;
  *(_OWORD *)(v12 + 708) = v18;
  *(_OWORD *)(v12 + 724) = v19;
  webrtc::JsepTransportController::GetDtlsTransports((webrtc::JsepTransportCollection **)v12, (char **)&__p);
  v22 = __p;
  v21 = (uint64_t *)v63;
  if (__p != v63)
  {
    v23 = (uint64_t *)__p;
    do
    {
      v24 = *v23++;
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 200))(v24);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 168))(v25, v14);
    }
    while (v23 != v21);
  }
  if (v22)
    operator delete(v22);
  webrtc::JsepTransportController::SetActiveResetSrtpParams(*(webrtc::JsepTransportController **)(v2 + 592), *(_BYTE *)(v1[5] + 236));
  v26 = v1[5];
  v27 = *(_DWORD *)(v26 + 24);
  if (*(_BYTE *)(v26 + 148))
    v28 = 1;
  else
    v28 = *(_DWORD *)(v26 + 152);
  v29 = v1[3];
  v30 = (uint64_t *)v1[4];
  v31 = *(_DWORD *)(v26 + 64);
  v32 = *(_QWORD *)(v26 + 216);
  v65 = *(_QWORD *)(v26 + 208);
  v33 = *(_QWORD *)(v2 + 488);
  v34 = v27 - 1;
  if (v34 > 2)
  {
    v35 = 0;
    v36 = *(unsigned int *)(v33 + 140);
    if (!(_DWORD)v36)
      goto LABEL_23;
  }
  else
  {
    v35 = dword_208F16EC8[v34];
    v36 = *(unsigned int *)(v33 + 140);
    if ((_DWORD)v36 == (_DWORD)v35)
      goto LABEL_23;
  }
  *(_DWORD *)(v33 + 140) = v35;
  v57 = *(_QWORD *)(v33 + 80);
  for (*(_QWORD *)(v33 + 96) = v57; v57 != v33 + 72; v57 = *(_QWORD *)(v33 + 96))
  {
    v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16);
    v58 = v57 + 16;
    *(_QWORD *)(v33 + 96) = *(_QWORD *)(v58 - 8);
    v59(v58, v36, v35);
  }
LABEL_23:
  __p = 0;
  v63 = 0;
  v64 = 0;
  v38 = *v30;
  v37 = v30[1];
  v39 = v37 - v38;
  if (v37 != v38)
  {
    v60 = v2;
    v40 = v32;
    v41 = v31;
    v42 = v29;
    v43 = v28;
    v44 = 0xCCCCCCCCCCCCCCCDLL * (v39 >> 5);
    if (v44 >= 0x19999999999999ALL)
      abort();
    v45 = operator new(v39);
    v46 = 0;
    v47 = v45;
    __p = v45;
    v64 = (char *)&v45[20 * v44];
    do
    {
      cricket::RelayServerConfig::RelayServerConfig((uint64_t)&v45[(unint64_t)v46 / 8], (char **)(v38 + v46));
      v46 += 160;
    }
    while (v38 + v46 != v37);
    v63 = (char *)&v45[20 * (v46 / 160)];
    v28 = v43;
    v29 = v42;
    v31 = v41;
    v32 = v40;
    v2 = v60;
    if (v46)
    {
      v48 = *(_QWORD *)(v60 + 504);
      v49 = 160 * (v46 / 160) - 160;
      if (v49 < 0xA0)
        goto LABEL_45;
      v50 = v49 / 0xA0 + 1;
      v47 = &v45[20 * (v50 & 0x3FFFFFFFFFFFFFELL)];
      v51 = v45 + 36;
      v52 = v50 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        *(v51 - 20) = v48;
        *v51 = v48;
        v51 += 40;
        v52 -= 2;
      }
      while (v52);
      if (v50 != (v50 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_45:
        do
        {
          v47[16] = v48;
          v47 += 20;
        }
        while (v47 != &v45[20 * (v46 / 160)]);
      }
    }
  }
  v53 = cricket::PortAllocator::SetConfiguration(*(_QWORD *)(v2 + 488), v29, (void ****)&__p, v31, v28, v32, (int *)&v65);
  v54 = (char *)__p;
  if (__p)
  {
    v55 = (void **)v63;
    v56 = __p;
    if (v63 != __p)
    {
      do
        cricket::RelayServerConfig::~RelayServerConfig(v55 - 20);
      while (v55 != (void **)v54);
      v56 = __p;
    }
    v63 = v54;
    operator delete(v56);
  }
  **(_BYTE **)a1 = v53;
}

_QWORD *std::__function::__func<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1,std::allocator<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1>,void ()(webrtc::RTCError)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24C0B9330;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1,std::allocator<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1>,void ()(webrtc::RTCError)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24C0B9330;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1,std::allocator<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1>,void ()(webrtc::RTCError)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24C0B9330;
  v2[1] = v3;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if (v4 == a1 + 16)
    {
      v2[5] = v2 + 2;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      v2[5] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
    return v2;
  }
  else
  {
    v2[5] = 0;
    return v2;
  }
}

uint64_t std::__function::__func<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1,std::allocator<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1>,void ()(webrtc::RTCError)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B9330;
  a2[1] = v3;
  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    if (v4 == result + 16)
    {
      a2[5] = a2 + 2;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 40) + 24))(*(_QWORD *)(result + 40));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 40));
      a2[5] = result;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return result;
}

uint64_t std::__function::__func<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1,std::allocator<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1>,void ()(webrtc::RTCError)>::destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 16;
  result = *(_QWORD *)(a1 + 40);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1,std::allocator<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1>,void ()(webrtc::RTCError)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1,std::allocator<webrtc::PeerConnection::AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>)::$_1>,void ()(webrtc::RTCError)>::operator()(uint64_t a1, int *a2)
{
  int v3;
  std::string::value_type *v4;
  std::string::size_type v5;
  int v6;
  uint64_t v7;
  _BYTE v8[7];
  _BYTE v9[7];
  int v10;
  std::string __p;
  _DWORD v12[2];

  v3 = *a2;
  v4 = (std::string::value_type *)*((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  *(_DWORD *)v9 = a2[6];
  *(_DWORD *)&v9[3] = *(int *)((char *)a2 + 27);
  v6 = *((char *)a2 + 31);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_DWORD *)v8 = a2[8];
  *(_DWORD *)&v8[3] = *(int *)((char *)a2 + 35);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v10 = v3;
  if ((v6 & 0x80000000) == 0)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
    __p.__r_.__value_.__l.__size_ = v5;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = *(_DWORD *)v9;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v9[3];
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v6;
    v12[0] = *(_DWORD *)v8;
    *(_DWORD *)((char *)v12 + 3) = *(_DWORD *)&v8[3];
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
      goto LABEL_3;
LABEL_7:
    std::__throw_bad_function_call[abi:sn180100]();
    goto LABEL_8;
  }
  std::string::__init_copy_ctor_external(&__p, v4, v5);
  v12[0] = *(_DWORD *)v8;
  *(_DWORD *)((char *)v12 + 3) = *(_DWORD *)&v8[3];
  v7 = *(_QWORD *)(a1 + 40);
  if (!v7)
    goto LABEL_7;
LABEL_3:
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v7 + 48))(v7, &v10);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(v4);
    return;
  }
LABEL_8:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v6 < 0)
    goto LABEL_9;
}

__n128 rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::PeerConnection::SetBitrate(webrtc::BitrateSettings const&)::$_0,webrtc::RTCError,void>(webrtc::PeerConnection::SetBitrate(webrtc::BitrateSettings const&)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  void **v3;
  __n128 result;
  int v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _DWORD v9[2];

  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a1[1] + 376))(&v6, *(_QWORD *)a1[1], *(_QWORD *)(a1[1] + 8));
  v2 = *a1;
  *(_DWORD *)v2 = v6;
  v3 = (void **)(v2 + 8);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v3);
  result = v7;
  *(_QWORD *)(v2 + 24) = v8;
  *(__n128 *)v3 = result;
  v5 = v9[0];
  *(_DWORD *)(v2 + 35) = *(_DWORD *)((char *)v9 + 3);
  *(_DWORD *)(v2 + 32) = v5;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::PeerConnection::ReconfigureBandwidthEstimation(webrtc::BandwidthEstimationSettings const&)::$_0 &&>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 8;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 512) + 104))(*(_QWORD *)(*(_QWORD *)a1 + 512));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 80))(v2, v1);
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::SetAudioPlayout(BOOL)::$_0>(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 392))(*(_QWORD *)a1, a1[8]);
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::SetAudioRecording(BOOL)::$_0>(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 400))(*(_QWORD *)a1, a1[8]);
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::AddAdaptationResource(webrtc::scoped_refptr<webrtc::Resource>)::$_0>(uint64_t *a1)
{
  void (***v1)(_QWORD);
  uint64_t v2;
  uint64_t result;
  void (***v4)(_QWORD);

  v2 = *a1;
  v1 = (void (***)(_QWORD))a1[1];
  v4 = v1;
  if (v1)
    (**v1)(v1);
  (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v2 + 472))(v2, &v4);
  result = (uint64_t)v4;
  if (v4)
    return ((uint64_t (*)(_QWORD))(*v4)[1])(v4);
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::PeerConnection::StartRtcEventLog(std::unique_ptr<webrtc::RtcEventLogOutput>,long long)::$_0,BOOL,void>(webrtc::PeerConnection::StartRtcEventLog(std::unique_ptr<webrtc::RtcEventLogOutput>,long long)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v2 = *(uint64_t **)(a1 + 8);
  v4 = *v2;
  result = v2[1];
  v2[1] = 0;
  if (*(_BYTE *)(*(_QWORD *)(v4 + 536) + 4))
  {
    v5 = v2[2];
    v6 = *(_QWORD *)(v4 + 56);
    v8 = result;
    v7 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v6 + 16))(v6, &v8, v5);
    result = v8;
    v8 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    **(_BYTE **)a1 = v7;
  }
  else
  {
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    **(_BYTE **)a1 = 0;
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::StopRtcEventLog(void)::$_0>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 56) + 24))(*(_QWORD *)(*(_QWORD *)a1 + 56));
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::Close(void)::$_1>(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];

  v1 = *a1;
  v8 = 0;
  v11[14] = 0;
  v10 = 0;
  memset(v11, 0, 13);
  v9 = 0;
  webrtc::PeerConnection::TeardownDataChannelTransport_n((uint64_t)v1, &v8);
  result = v1[74];
  v1[74] = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v3 = v1[61];
  v4 = *(_QWORD **)(v3 + 232);
  v5 = *(_QWORD **)(v3 + 240);
  while (v5 != v4)
  {
    v6 = *--v5;
    result = v6;
    *v5 = 0;
    if (v6)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  *(_QWORD *)(v3 + 240) = v4;
  v7 = v1[66];
  if (v7)
    *(_BYTE *)(v7 + 4) = 0;
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::Close(void)::$_2>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  *(_BYTE *)(*(_QWORD *)(*a1 + 536) + 4) = 0;
  v2 = *(_QWORD *)(v1 + 512);
  *(_QWORD *)(v1 + 512) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 216))(v2);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 56) + 24))(*(_QWORD *)(v1 + 56));
}

__n128 rtc::FunctionView<void ()(void)>::CallVoidPtr<std::optional<std::string> rtc::Thread::BlockingCall<webrtc::PeerConnection::CreateDataChannelTransport(std::string_view)::$_1,std::optional<std::string>,void>(webrtc::PeerConnection::CreateDataChannelTransport(std::string_view)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  std::string::size_type v5;
  std::string *p_p;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  void **v12;
  int v13;
  uint64_t *DataChannelTransport;
  uint64_t *v15;
  uint64_t *DtlsTransport;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 result;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  std::string __p;
  unsigned __int8 v34;
  std::string *v35;
  std::string::size_type v36;

  v1 = (uint64_t *)a1[1];
  v3 = *v1;
  v2 = v1[1];
  v4 = *(std::string **)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v35 = *(std::string **)v2;
  v36 = v5;
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_55:
    abort();
  if (v5 > 0x16)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_p = (std::string *)operator new(v8 + 1);
    __p.__r_.__value_.__l.__size_ = v5;
    __p.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v5;
    p_p = &__p;
  }
  v10 = (std::string *)((char *)p_p + v5);
  if (p_p <= v4 && v10 > v4)
    goto LABEL_54;
  if (v5)
    memmove(p_p, v4, v5);
  v10->__r_.__value_.__s.__data_[0] = 0;
  v12 = (void **)(v3 + 640);
  if (!*(_BYTE *)(v3 + 664))
  {
    *(_OWORD *)v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v3 + 656) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_BYTE *)(v3 + 664) = 1;
    goto LABEL_18;
  }
  if ((*(char *)(v3 + 663) & 0x80000000) == 0)
  {
    *(_OWORD *)v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v3 + 656) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    goto LABEL_18;
  }
  operator delete(*(void **)(v3 + 640));
  v13 = *(unsigned __int8 *)(v3 + 664);
  *(_OWORD *)v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(v3 + 656) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  if (!v13)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
LABEL_18:
  DataChannelTransport = webrtc::JsepTransportController::GetDataChannelTransport(*(_QWORD *)(v3 + 592), (const void **)(v3 + 640));
  if (!DataChannelTransport)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    if (*(_BYTE *)(v3 + 664))
    {
      if (*(char *)(v3 + 663) < 0)
        operator delete(*v12);
      *(_BYTE *)(v3 + 664) = 0;
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    v34 = 0;
    v28 = *a1;
    v29 = *(unsigned __int8 *)(v28 + 24);
    if (!*(_BYTE *)(v28 + 24))
      goto LABEL_47;
    goto LABEL_31;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  v34 = 0;
  if (!*(_BYTE *)(v3 + 664))
    goto LABEL_54;
  v15 = DataChannelTransport;
  DtlsTransport = webrtc::JsepTransportController::GetDtlsTransport(*(_QWORD *)(v3 + 592), (const void **)(v3 + 640));
  if (!DtlsTransport)
  {
    __p.__r_.__value_.__r.__words[0] = 0;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    v34 = 1;
    v19 = *(_QWORD *)(v3 + 736);
    if (!v19)
      goto LABEL_40;
    goto LABEL_39;
  }
  v17 = (*(uint64_t (**)(uint64_t *))(*DtlsTransport + 16))(DtlsTransport);
  if ((*(char *)(v17 + 23) & 0x80000000) == 0)
  {
    v18 = *(_OWORD *)v17;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
    v34 = 1;
    v19 = *(_QWORD *)(v3 + 736);
    if (!v19)
      goto LABEL_40;
LABEL_39:
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 40))(v19, 0);
    goto LABEL_40;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
  v34 = 1;
  v19 = *(_QWORD *)(v3 + 736);
  if (v19)
    goto LABEL_39;
LABEL_40:
  *(_QWORD *)(v3 + 736) = v15;
  v30 = *(uint64_t **)(v3 + 768);
  v31 = *(uint64_t **)(v3 + 776);
  if (v30 != v31)
  {
    do
    {
      v32 = *v30;
      if ((*(_DWORD *)(*v30 + 24) & 0xFF0000) != 0)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 720) + 8))(v3 + 720, (unsigned __int16)*(_DWORD *)(*v30 + 24));
        v32 = *v30;
      }
      *(_BYTE *)(*(_QWORD *)(v32 + 296) + 4) = 1;
      ++v30;
    }
    while (v30 != v31);
    v15 = *(uint64_t **)(v3 + 736);
  }
  (*(void (**)(uint64_t *, uint64_t))(*v15 + 40))(v15, v3 + 728);
  v28 = *a1;
  v29 = *(unsigned __int8 *)(v28 + 24);
  if (v29 == v34)
  {
LABEL_47:
    if (v29)
    {
      if (*(char *)(v28 + 23) < 0)
        operator delete(*(void **)v28);
      result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v28 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(__n128 *)v28 = result;
    }
    return result;
  }
LABEL_31:
  if (v29)
  {
    if (*(char *)(v28 + 23) < 0)
      operator delete(*(void **)v28);
    *(_BYTE *)(v28 + 24) = 0;
    if (v34 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v28 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(__n128 *)v28 = result;
    *(_BYTE *)(v28 + 24) = 1;
  }
  return result;
}

void rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnection::DestroyDataChannelTransport(webrtc::RTCError)::$_1>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  int v4;
  int v5;
  std::string __p;
  _BYTE v7[7];

  v1 = *a1;
  v2 = a1[1];
  v5 = *(_DWORD *)v2;
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 8);
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v3;
  }
  v4 = *(_DWORD *)(v2 + 32);
  *(_DWORD *)&v7[3] = *(_DWORD *)(v2 + 35);
  *(_DWORD *)v7 = v4;
  webrtc::PeerConnection::TeardownDataChannelTransport_n(v1, &v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t *rtc::FunctionView<void ()(void)>::CallVoidPtr<std::optional<rtc::SSLRole> rtc::Thread::BlockingCall<webrtc::PeerConnection::GetSslRole(std::string const&,rtc::SSLRole *)::$_1,std::optional<rtc::SSLRole>,void>(webrtc::PeerConnection::GetSslRole(std::string const&,rtc::SSLRole *)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;

  result = webrtc::JsepTransportController::GetDtlsRole(*(_QWORD *)(*(_QWORD *)a1[1] + 592), (const void **)(a1[1] + 8));
  v3 = *a1;
  *(_DWORD *)v3 = (_DWORD)result;
  *(_BYTE *)(v3 + 4) = BYTE4(result);
  return result;
}

uint64_t *rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::PeerConnection::NeedsIceRestart(std::string const&)::$_0,BOOL,void>(webrtc::PeerConnection::NeedsIceRestart(std::string const&)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  uint64_t *result;

  result = webrtc::JsepTransportController::NeedsIceRestart(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 592), *(const void ***)(*(_QWORD *)(a1 + 8) + 8));
  **(_BYTE **)a1 = (_BYTE)result;
  return result;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::OnTransportControllerConnectionState(cricket::IceConnectionState)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (***v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;

  v1 = *a1;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v4 - v3;
  if (v4 == v3)
  {
    webrtc::PeerConnection::ReportTransportStats(*v1, (uint64_t)&v12);
  }
  else
  {
    if (v5 < 0)
      abort();
    v6 = v5 >> 3;
    v7 = (char *)operator new(v5);
    v8 = 0;
    v12 = v7;
    v14 = &v7[8 * v6];
    do
    {
      v9 = *(void (****)(_QWORD))(v3 + v8);
      *(_QWORD *)&v7[v8] = v9;
      if (v9)
        (**v9)(v9);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    v13 = &v7[v8 & 0xFFFFFFFFFFFFFFF8];
    webrtc::PeerConnection::ReportTransportStats(v2, (uint64_t)&v12);
    if (v8)
    {
      v10 = 8 * (v8 >> 3);
      do
      {
        v11 = *(_QWORD *)&v7[v10 - 8];
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        v10 -= 8;
      }
      while (v10);
    }
    operator delete(v7);
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::OnTransportControllerConnectionState(cricket::IceConnectionState)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v3 + 16);
        v6 = *(void **)(v3 + 8);
        if (v5 != v4)
        {
          do
          {
            v8 = *(_QWORD *)(v5 - 8);
            v5 -= 8;
            v7 = v8;
            if (v8)
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          }
          while (v5 != v4);
          v6 = *(void **)(v3 + 8);
        }
        *(_QWORD *)(v3 + 16) = v4;
        operator delete(v6);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

double rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::Call::Stats rtc::Thread::BlockingCall<webrtc::PeerConnection::GetCallStats(void)::$_0,webrtc::Call::Stats,void>(webrtc::PeerConnection::GetCallStats(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  _OWORD *v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  (*(void (**)(_OWORD *__return_ptr))(***(_QWORD ***)(a1 + 8) + 584))(v5);
  v2 = *(_OWORD **)a1;
  result = *(double *)v5;
  v4 = v5[1];
  *v2 = v5[0];
  v2[1] = v4;
  return result;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::AddRemoteCandidate(std::string const&,cricket::Candidate const&)::$_1 &&>(_QWORD **a1)
{
  std::string *v1;
  const void **v2;
  _QWORD *v3;
  std::string *v4;
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  std::string *v19;
  void *v20;
  char v21;
  int v22;
  void *__p;
  char v24;
  void *v25;
  std::string *v26;
  std::string *v27;
  char v28;
  _QWORD v29[2];
  uint64_t (*v30)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v31)(uint64_t);
  std::string v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v1 = (std::string *)(*a1 + 4);
  v2 = (const void **)(*a1 + 1);
  v3 = (_QWORD *)**a1;
  cricket::Candidate::Candidate(&v32, v1);
  v4 = (std::string *)operator new(0x1B0uLL);
  v5 = v4 + 18;
  v25 = v4;
  v27 = v4 + 18;
  cricket::Candidate::Candidate(v4, &v32);
  v26 = v5;
  cricket::Candidate::~Candidate((void **)&v32.__r_.__value_.__l.__data_);
  webrtc::JsepTransportController::AddRemoteCandidates(v3[74], v2, (cricket::Candidate **)&v25, (uint64_t)&v22);
  if (!v22)
  {
    v14 = *(_QWORD *)(v3[8] + 48);
    v15 = (unsigned int *)v3[65];
    if (v15)
    {
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v3;
    cricket::Candidate::Candidate((std::string *)&v32.__r_.__value_.__r.__words[1], v1);
    v17 = operator new();
    *(_QWORD *)v17 = v32.__r_.__value_.__r.__words[0];
    cricket::Candidate::Candidate((std::string *)(v17 + 8), (std::string *)&v32.__r_.__value_.__r.__words[1]);
    v18 = (_QWORD *)operator new();
    *v18 = v15;
    v18[1] = v17;
    v18[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::AddRemoteCandidate(std::string const&,cricket::Candidate const&)::$_1::operator() const(void)::{lambda(void)#2}>;
    v18[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::AddRemoteCandidate(std::string const&,cricket::Candidate const&)::$_1::operator() const(void)::{lambda(void)#2} &&>;
    v29[0] = v18;
    v30 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v31 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v14 + 8))(v14, v29, &v28, &v21);
    v30(1, v29, v29);
    cricket::Candidate::~Candidate((void **)&v32.__r_.__value_.__l.__size_);
    if (v24 < 0)
      goto LABEL_11;
LABEL_4:
    v13 = (std::string *)v25;
    if (!v25)
      return;
    goto LABEL_12;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/peer_connection.cc");
    if (v24 < 0)
      goto LABEL_11;
    goto LABEL_4;
  }
  if ((v24 & 0x80000000) == 0)
    goto LABEL_4;
LABEL_11:
  operator delete(__p);
  v13 = (std::string *)v25;
  if (!v25)
    return;
LABEL_12:
  v19 = v26;
  v20 = v13;
  if (v26 != v13)
  {
    do
      cricket::Candidate::~Candidate((void **)&v19[-18].__r_.__value_.__l.__data_);
    while (v19 != v13);
    v20 = v25;
  }
  v26 = v13;
  operator delete(v20);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::AddRemoteCandidate(std::string const&,cricket::Candidate const&)::$_1>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      cricket::Candidate::~Candidate((void **)(v3 + 32));
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::AddRemoteCandidate(std::string const&,cricket::Candidate const&)::$_1::operator() const(void)::{lambda(void)#2} &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  _BOOL4 v5;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  int v11;
  uint64_t result;

  v1 = *a1;
  v2 = **a1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 808))(v2, 0x20000);
  v3 = *((_DWORD *)v1 + 30);
  if (v3 == 2)
  {
    v7 = *((_DWORD *)v1 + 31);
    if ((unsigned __int16)v7 == 65193 || *((_DWORD *)v1 + 31) == 127)
      goto LABEL_32;
    v8 = bswap32(v7);
    v9 = HIWORD(v8) == 49320 || (v8 & 0xFF000000) == 167772160;
    if (v9 || (v8 & 0xFFF00000) == -1408237568)
      goto LABEL_32;
  }
  else
  {
    if (v3 == 30)
    {
      if ((*(uint64_t *)((char *)v1 + 124) & 0xC0FF) != 0x80FE)
      {
        v4 = *(uint64_t *)((char *)v1 + 124) == *MEMORY[0x24BDAE880]
          && *(uint64_t *)((char *)v1 + 132) == *(_QWORD *)(MEMORY[0x24BDAE880] + 8);
        v5 = !v4;
        if (*(uint64_t *)((char *)v1 + 124) != 253 && v5)
          goto LABEL_35;
      }
      goto LABEL_32;
    }
    v7 = *((_DWORD *)v1 + 31);
  }
  v11 = v7 & 0xC0FF;
  if (v3 == 2 && v11 == 16484)
  {
LABEL_32:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 808))(v2, 4096);
    v3 = *((_DWORD *)v1 + 30);
  }
  if (!v3)
  {
    if (*((_BYTE *)v1 + 152))
      goto LABEL_37;
    if (*((char *)v1 + 111) < 0)
    {
      if (!v1[12])
        goto LABEL_37;
    }
    else if (!*((_BYTE *)v1 + 111))
    {
      goto LABEL_37;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 808))(v2, 0x4000);
    if (*((_DWORD *)v1 + 30) != 30)
      goto LABEL_37;
    goto LABEL_35;
  }
  if (v3 == 30)
LABEL_35:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 808))(v2, 0x10000);
LABEL_37:
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 432))(v2))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 800))(v2, 1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 432))(v2);
  if ((_DWORD)result == 5)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 800))(v2, 1);
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::AddRemoteCandidate(std::string const&,cricket::Candidate const&)::$_1::operator() const(void)::{lambda(void)#2}>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      cricket::Candidate::~Candidate((void **)(v3 + 8));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::set<cricket::MediaType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<cricket::MediaType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<cricket::MediaType>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<cricket::MediaType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<cricket::MediaType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<cricket::MediaType>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::set<cricket::MediaType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<cricket::MediaType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<cricket::MediaType>>>>::destroy(*((_QWORD *)a1 + 1));
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)a1 + 8));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,std::set<cricket::MediaType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<cricket::MediaType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<cricket::MediaType>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t **v4;
  size_t v6;
  size_t v7;
  uint64_t *v8;
  BOOL v9;
  char v10;
  uint64_t **v11;
  uint64_t **result;
  size_t v13;
  const void **v14;
  size_t v15;
  const void *v16;
  size_t v17;
  size_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  int v22;
  _QWORD *v23;
  std::string *v24;
  uint64_t *v25;
  uint64_t *v26;

  v4 = a1 + 1;
  v3 = a1[1];
  if (v3)
  {
    v6 = *((unsigned __int8 *)a2 + 23);
    v8 = *a2;
    v7 = (size_t)a2[1];
    if (v7)
      v9 = v8 == 0;
    else
      v9 = 0;
    v10 = !v9;
    while (1)
    {
      v11 = (uint64_t **)v3;
      result = a2;
      v13 = v6;
      if ((v6 & 0x80) != 0)
      {
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_48;
        result = (uint64_t **)v8;
        v13 = v7;
        if ((v10 & 1) == 0)
          goto LABEL_48;
      }
      v14 = (const void **)(v3 + 4);
      v15 = *((unsigned __int8 *)v3 + 55);
      v16 = v3 + 4;
      v17 = v15;
      if (*((char *)v3 + 55) < 0)
      {
        v17 = v3[5];
        if ((v17 & 0x8000000000000000) != 0 || (v16 = *v14, v17) && !v16)
        {
LABEL_48:
          __break(1u);
          return result;
        }
      }
      if (v17 >= v13)
        v18 = v13;
      else
        v18 = v17;
      result = (uint64_t **)memcmp(result, v16, v18);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) != 0)
          goto LABEL_8;
LABEL_23:
        if ((v15 & 0x80) != 0)
        {
          v15 = (size_t)v11[5];
          if ((v15 & 0x8000000000000000) != 0)
            goto LABEL_48;
          v14 = (const void **)*v14;
          if (v15)
          {
            if (!v14)
              goto LABEL_48;
          }
        }
        v19 = a2;
        v20 = v6;
        if ((v6 & 0x80) != 0)
        {
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_48;
          v19 = v8;
          v20 = v7;
          if ((v10 & 1) == 0)
            goto LABEL_48;
        }
        if (v20 >= v15)
          v21 = v15;
        else
          v21 = v20;
        v22 = memcmp(v14, v19, v21);
        if (v22)
        {
          if ((v22 & 0x80000000) == 0)
            return v11;
        }
        else if (v15 >= v20)
        {
          return v11;
        }
        v3 = v11[1];
        if (!v3)
        {
          v4 = v11 + 1;
          goto LABEL_40;
        }
      }
      else
      {
        if (v13 >= v17)
          goto LABEL_23;
LABEL_8:
        v3 = *v11;
        v4 = v11;
        if (!*v11)
          goto LABEL_40;
      }
    }
  }
  v11 = a1 + 1;
LABEL_40:
  v23 = operator new(0x50uLL);
  v24 = (std::string *)(v23 + 4);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v23[6] = *(_QWORD *)(a3 + 16);
  }
  v23[9] = 0;
  v23[8] = 0;
  v23[7] = v23 + 8;
  *v23 = 0;
  v23[1] = 0;
  v23[2] = v11;
  *v4 = v23;
  v25 = (uint64_t *)**a1;
  v26 = v23;
  if (v25)
  {
    *a1 = v25;
    v26 = *v4;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v23;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::OnTransportChanged(std::string const&,webrtc::RtpTransportInternal *,webrtc::scoped_refptr<webrtc::DtlsTransport>,webrtc::DataChannelTransportInterface *)::$_1 &&>(char ***a1)
{
  char **v1;
  char *v2;
  __int128 v3;
  void **v4;
  std::string __p;

  v1 = *a1;
  v2 = **a1;
  if ((*((char *)*a1 + 31) & 0x80000000) == 0)
  {
    v3 = *(_OWORD *)(v1 + 1);
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v1[3];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v3;
    v4 = (void **)(v2 + 672);
    if ((v2[695] & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&__p, v1[1], (std::string::size_type)v1[2]);
  v4 = (void **)(v2 + 672);
  if (v2[695] < 0)
LABEL_3:
    operator delete(*v4);
LABEL_4:
  *(std::string *)v4 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  (*(void (**)(char *))(*(_QWORD *)v2 + 184))(v2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::OnTransportChanged(std::string const&,webrtc::RtpTransportInternal *,webrtc::scoped_refptr<webrtc::DtlsTransport>,webrtc::DataChannelTransportInterface *)::$_1>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t *absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::StartSctpTransport(int,int,int)::$_1 &&>(unsigned int **a1)
{
  unsigned int *v1;
  const void **v2;
  uint64_t v3;
  uint64_t *result;
  webrtc::SctpTransport *v5;
  webrtc::SctpTransport *v6;

  v1 = *a1;
  v2 = (const void **)(*a1 + 2);
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a1 + 768))(*(_QWORD *)*a1);
  result = webrtc::JsepTransportController::GetSctpTransport(v3, v2, &v6);
  v5 = v6;
  if (v6)
  {
    webrtc::SctpTransport::Start(v6, v1[8], v1[9], v1[10]);
    return (uint64_t *)(*(uint64_t (**)(webrtc::SctpTransport *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::StartSctpTransport(int,int,int)::$_1>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void std::__function::__func<webrtc::PeerConnection::InitializeRtcpCallback(void)::$_1,std::allocator<webrtc::PeerConnection::InitializeRtcpCallback(void)::$_1>,void ()(rtc::CopyOnWriteBuffer const&,long long)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::PeerConnection::InitializeRtcpCallback(void)::$_1,std::allocator<webrtc::PeerConnection::InitializeRtcpCallback(void)::$_1>,void ()(rtc::CopyOnWriteBuffer const&,long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B9378;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::PeerConnection::InitializeRtcpCallback(void)::$_1,std::allocator<webrtc::PeerConnection::InitializeRtcpCallback(void)::$_1>,void ()(rtc::CopyOnWriteBuffer const&,long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B9378;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::PeerConnection::InitializeRtcpCallback(void)::$_1,std::allocator<webrtc::PeerConnection::InitializeRtcpCallback(void)::$_1>,void ()(rtc::CopyOnWriteBuffer const&,long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t result;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  char v22;
  _QWORD v23[2];
  uint64_t (*v24)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v25)(uint64_t);

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 40);
  v4 = *(unsigned int **)(v2 + 536);
  if (v4)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *a2;
  if (*a2)
  {
    v7 = (unsigned int *)(v6 + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a2[1];
  v10 = a2[2];
  v11 = (_QWORD *)operator new();
  v12 = v11;
  *v11 = v2;
  v11[1] = v6;
  if (v6)
  {
    v13 = (unsigned int *)(v6 + 24);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v11[2] = v9;
  v11[3] = v10;
  v15 = (_QWORD *)operator new();
  *v15 = v4;
  v15[1] = v12;
  v15[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::InitializeRtcpCallback(void)::$_1::operator() const(rtc::CopyOnWriteBuffer const&,long long)::{lambda(void)#1}>;
  v15[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::InitializeRtcpCallback(void)::$_1::operator() const(rtc::CopyOnWriteBuffer const&,long long)::{lambda(void)#1} &&>;
  v23[0] = v15;
  v24 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v25 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v23, &v22, &v21);
  result = v24(1, v23, v23);
  if (v6)
  {
    v17 = (unsigned int *)(v6 + 24);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      v20 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v6 + 16) = 0;
      if (v20)
        MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
      return MEMORY[0x20BD0ADEC](v6, 0x1010C40EE34DA14);
    }
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::InitializeRtcpCallback(void)::$_1::operator() const(rtc::CopyOnWriteBuffer const&,long long)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (***v2)(_QWORD, uint64_t *);
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v1 = *a1;
  v2 = (uint64_t (***)(_QWORD, uint64_t *))(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)*a1 + 544)
                                                                                      + 96))(*(_QWORD *)(*(_QWORD *)*a1 + 544));
  v3 = *(_QWORD *)(v1 + 8);
  v12 = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 24);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v13 = *(_OWORD *)(v1 + 16);
  result = (**v2)(v2, &v12);
  v7 = v12;
  if (v12)
  {
    v8 = (unsigned int *)(v12 + 24);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      v11 = *(_QWORD *)(v7 + 16);
      *(_QWORD *)(v7 + 16) = 0;
      if (v11)
        MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
      return MEMORY[0x20BD0ADEC](v7, 0x1010C40EE34DA14);
    }
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::InitializeRtcpCallback(void)::$_1::operator() const(rtc::CopyOnWriteBuffer const&,long long)::{lambda(void)#1}>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = (unsigned int *)(v4 + 24);
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          v8 = *(_QWORD *)(v4 + 16);
          *(_QWORD *)(v4 + 16) = 0;
          if (v8)
            MEMORY[0x20BD0ADD4](v8, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v4, 0x1010C40EE34DA14);
        }
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void std::__function::__func<webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1,std::allocator<webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1>,void ()(webrtc::RtpPacketReceived const&)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1,std::allocator<webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1>,void ()(webrtc::RtpPacketReceived const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B93C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1,std::allocator<webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1>,void ()(webrtc::RtpPacketReceived const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B93C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1,std::allocator<webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1>,void ()(webrtc::RtpPacketReceived const&)>::operator()(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  int64_t v22;
  char *v23;
  char *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  char v39;
  _QWORD v40[2];
  uint64_t (*v41)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v42)(uint64_t);
  __int128 v43;
  char v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[22];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
  v5 = *(unsigned int **)(v3 + 536);
  if (v5)
  {
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[1];
  v45 = *a2;
  v46 = v7;
  *(_OWORD *)v47 = a2[2];
  *(_QWORD *)&v47[14] = *(_QWORD *)((char *)a2 + 46);
  v9 = (_BYTE *)*((_QWORD *)a2 + 7);
  v8 = (_BYTE *)*((_QWORD *)a2 + 8);
  v10 = v8 - v9;
  if (v8 == v9)
  {
    v12 = 0;
    v11 = 0;
    v14 = *((_QWORD *)a2 + 10);
    v13 = *((_QWORD *)a2 + 11);
    if (!v13)
      goto LABEL_10;
  }
  else
  {
    if (v10 < 0)
      goto LABEL_37;
    v11 = (char *)operator new(v8 - v9);
    v12 = &v11[4 * (v10 >> 2)];
    memcpy(v11, v9, v10);
    v14 = *((_QWORD *)a2 + 10);
    v13 = *((_QWORD *)a2 + 11);
    if (!v13)
      goto LABEL_10;
  }
  v15 = (unsigned int *)(v13 + 24);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
LABEL_10:
  v37 = a2[6];
  v43 = a2[7];
  v44 = *((_BYTE *)a2 + 128);
  v17 = (unsigned int *)*((_QWORD *)a2 + 17);
  if (v17)
  {
    v18 = v17 + 2;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = operator new();
  *(_QWORD *)v20 = v3;
  v21 = v46;
  *(_OWORD *)(v20 + 8) = v45;
  *(_OWORD *)(v20 + 24) = v21;
  *(_OWORD *)(v20 + 40) = *(_OWORD *)v47;
  *(_QWORD *)(v20 + 54) = *(_QWORD *)&v47[14];
  *(_QWORD *)(v20 + 72) = 0;
  *(_QWORD *)(v20 + 80) = 0;
  *(_QWORD *)(v20 + 64) = 0;
  v22 = v12 - v11;
  if (v12 != v11)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v23 = (char *)operator new(v12 - v11);
      *(_QWORD *)(v20 + 64) = v23;
      v24 = &v23[4 * (v22 >> 2)];
      *(_QWORD *)(v20 + 80) = v24;
      memcpy(v23, v11, v22);
      *(_QWORD *)(v20 + 72) = v24;
      goto LABEL_16;
    }
LABEL_37:
    abort();
  }
LABEL_16:
  *(_QWORD *)(v20 + 88) = v14;
  *(_QWORD *)(v20 + 96) = v13;
  if (v13)
  {
    v25 = (unsigned int *)(v13 + 24);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_OWORD *)(v20 + 104) = v37;
  *(_OWORD *)(v20 + 120) = v43;
  *(_BYTE *)(v20 + 136) = v44;
  *(_QWORD *)(v20 + 144) = v17;
  if (v17)
  {
    v27 = v17 + 2;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = (_QWORD *)operator new();
  *v29 = v5;
  v29[1] = v20;
  v29[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1::operator() const(webrtc::RtpPacketReceived const&)::{lambda(void)#1}>;
  v29[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1::operator() const(webrtc::RtpPacketReceived const&)::{lambda(void)#1} &&>;
  v40[0] = v29;
  v41 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v42 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v40, &v39, &v38);
  v41(1, v40, v40);
  if (v17)
  {
    v30 = v17 + 2;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
  }
  if (v13)
  {
    v33 = (unsigned int *)(v13 + 24);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      v36 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v36)
        MEMORY[0x20BD0ADD4](v36, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v13, 0x1010C40EE34DA14);
    }
  }
  if (v11)
    operator delete(v11);
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1::operator() const(webrtc::RtpPacketReceived const&)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE v28[16];
  __n128 (*v29)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v30)();
  _OWORD v31[2];
  _BYTE v32[22];
  void *__p;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)*a1 + 544) + 96))(*(_QWORD *)(*(_QWORD *)*a1 + 544));
  v3 = *(_OWORD *)(v1 + 8);
  v4 = *(_OWORD *)(v1 + 24);
  v5 = *(_OWORD *)(v1 + 40);
  *(_QWORD *)&v32[14] = *(_QWORD *)(v1 + 54);
  v31[1] = v4;
  *(_OWORD *)v32 = v5;
  v31[0] = v3;
  v34 = 0;
  v35 = 0;
  __p = 0;
  v7 = *(_BYTE **)(v1 + 64);
  v6 = *(_BYTE **)(v1 + 72);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      abort();
    v9 = (char *)operator new(v6 - v7);
    v10 = &v9[4 * (v8 >> 2)];
    __p = v9;
    v35 = v10;
    memcpy(v9, v7, v8);
    v34 = v10;
  }
  v11 = *(_QWORD *)(v1 + 96);
  v36 = *(_QWORD *)(v1 + 88);
  v37 = v11;
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 24);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_BYTE *)(v1 + 136);
  v15 = *(_OWORD *)(v1 + 120);
  v38 = *(_OWORD *)(v1 + 104);
  v39 = v15;
  v40 = v14;
  v16 = *(_QWORD *)(v1 + 144);
  v41 = v16;
  if (v16)
  {
    v17 = (unsigned int *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v29 = absl::internal_any_invocable::LocalManagerTrivial;
  v30 = absl::internal_any_invocable::LocalInvoker<false,BOOL,webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1::operator() const(webrtc::RtpPacketReceived const&)::{lambda(void)#1}::operator() const(void)::{lambda(webrtc::RtpPacketReceived const&)#1} &,webrtc::RtpPacketReceived const&>;
  (*(void (**)(uint64_t, _QWORD, _OWORD *, _BYTE *))(*(_QWORD *)v2 + 8))(v2, 0, v31, v28);
  v29(1, (__n128 *)v28, (__n128 *)v28);
  v19 = v41;
  if (v41)
  {
    v20 = (unsigned int *)(v41 + 8);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v23 = v37;
  if (v37)
  {
    v24 = (unsigned int *)(v37 + 24);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      v27 = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(v23 + 16) = 0;
      if (v27)
        MEMORY[0x20BD0ADD4](v27, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v23, 0x1010C40EE34DA14);
    }
  }
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1::operator() const(webrtc::RtpPacketReceived const&)::{lambda(void)#1}>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;

  v3 = (_QWORD *)*a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = (unsigned int *)v3[18];
      if (v4)
      {
        v5 = v4 + 2;
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
      v8 = v3[12];
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 24);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = 0;
          if (v12)
            MEMORY[0x20BD0ADD4](v12, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v8, 0x1010C40EE34DA14);
        }
      }
      v13 = (void *)v3[8];
      if (v13)
      {
        v3[9] = v13;
        operator delete(v13);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,BOOL,webrtc::PeerConnection::InitializeUnDemuxablePacketHandler(void)::$_1::operator() const(webrtc::RtpPacketReceived const&)::{lambda(void)#1}::operator() const(void)::{lambda(webrtc::RtpPacketReceived const&)#1} &,webrtc::RtpPacketReceived const&>()
{
  return 0;
}

void webrtc::CreateModularPeerConnectionFactory(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  rtc::Thread *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  int8x16_t v10;
  _QWORD v11[27];
  char v12;
  uint64_t v13;
  _QWORD v14[2];

  v4 = *(rtc::Thread **)(a1 + 16);
  if (v4 && !rtc::Thread::IsCurrent(v4))
  {
    v9 = *(_QWORD *)(a1 + 16);
    v13 = a1;
    v14[0] = a2;
    *a2 = 0;
    v14[1] = &v13;
    (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t **), char *))(*(_QWORD *)v9 + 96))(v9, v14, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface> rtc::Thread::BlockingCall<webrtc::CreateModularPeerConnectionFactory(webrtc::PeerConnectionFactoryDependencies)::$_0,webrtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface>,void>(webrtc::CreateModularPeerConnectionFactory(webrtc::PeerConnectionFactoryDependencies)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v12);
  }
  else
  {
    webrtc::PeerConnectionFactoryDependencies::PeerConnectionFactoryDependencies((uint64_t)v11, a1);
    webrtc::PeerConnectionFactory::Create(v11, v14);
    webrtc::PeerConnectionFactoryDependencies::~PeerConnectionFactoryDependencies((webrtc::PeerConnectionFactoryDependencies *)v11);
    v5 = v14[0];
    if (v14[0])
    {
      v10 = *(int8x16_t *)(*(_QWORD *)(v14[0] + 8) + 40);
      (**(void (***)(_QWORD))v14[0])(v14[0]);
      v6 = operator new();
      *(int8x16_t *)(v6 + 8) = vextq_s8(v10, v10, 8uLL);
      *(_QWORD *)(v6 + 24) = v5;
      *(_QWORD *)v6 = off_24C0B9918;
      *(_DWORD *)(v6 + 32) = 0;
      v7 = (unsigned int *)(v6 + 32);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      *a2 = v6;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    else
    {
      *a2 = 0;
    }
  }
}

unsigned int *webrtc::PeerConnectionFactory::Create@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void (***v12)(_QWORD);
  unsigned int v13;
  unsigned int v14;
  uint64_t v15[5];
  unsigned int *v16;

  webrtc::CreateEnvironment<std::unique_ptr<webrtc::FieldTrialsView>,std::unique_ptr<webrtc::TaskQueueFactory>>(a1 + 14, a1 + 5, (uint64_t)v15);
  v4 = operator new();
  v5 = (unsigned int *)webrtc::ConnectionContext::ConnectionContext(v4, v15, a1);
  v16 = v5;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  result = (unsigned int *)v15[0];
  if (!v15[0])
    goto LABEL_9;
  v8 = (unsigned int *)(v15[0] + 8);
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  if (!v16)
  {
    *a2 = 0;
  }
  else
  {
LABEL_9:
    v15[0] = (uint64_t)a1;
    v11 = operator new();
    v12 = (void (***)(_QWORD))rtc::RefCountedObject<webrtc::PeerConnectionFactory>::RefCountedObject<webrtc::scoped_refptr<webrtc::ConnectionContext> &,webrtc::PeerConnectionFactoryDependencies *>(v11, &v16, v15);
    *a2 = v12;
    (**v12)(v12);
    result = v16;
    if (v16)
    {
      do
      {
        v13 = __ldaxr(result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, result));
      if (!v14)
      {
        webrtc::ConnectionContext::~ConnectionContext((webrtc::ConnectionContext *)result);
        return (unsigned int *)MEMORY[0x20BD0ADEC]();
      }
    }
  }
  return result;
}

uint64_t webrtc::CreateEnvironment<std::unique_ptr<webrtc::FieldTrialsView>,std::unique_ptr<webrtc::TaskQueueFactory>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  char v15;
  __n128 v16;
  uint64_t result;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24[5];

  v5 = *a1;
  *a1 = 0;
  if (v5)
  {
    v6 = operator new();
    *(_DWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)(v6 + 8);
    *(_QWORD *)v6 = &off_24C0B3D10;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = v5;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = *a2;
    *a2 = 0;
    if (!v9)
      goto LABEL_9;
  }
  else
  {
    v9 = *a2;
    *a2 = 0;
    v6 = 0;
    if (!v9)
    {
      v24[0] = 0;
      v15 = 1;
      goto LABEL_12;
    }
  }
  v10 = v6;
  v6 = operator new();
  *(_DWORD *)(v6 + 8) = 0;
  v11 = (unsigned int *)(v6 + 8);
  *(_QWORD *)v6 = &off_24C0B3D30;
  *(_QWORD *)(v6 + 16) = v10;
  *(_QWORD *)(v6 + 24) = v9;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_9:
  v24[0] = v6;
  v13 = (unsigned int *)(v6 + 8);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v15 = 0;
LABEL_12:
  v24[1] = v5;
  v24[2] = 0;
  v24[3] = v9;
  v24[4] = 0;
  v16 = webrtc::EnvironmentFactory::CreateWithDefaults(v24, a3);
  result = v24[0];
  if (v24[0])
  {
    v18 = (unsigned int *)(v24[0] + 8);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, v16);
  }
  if ((v15 & 1) == 0)
  {
    v21 = (unsigned int *)(v6 + 8);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v6 + 8))(v6, v16);
  }
  return result;
}

void webrtc::PeerConnectionFactory::~PeerConnectionFactory(webrtc::PeerConnectionFactory *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  webrtc::PeerConnectionFactory *v15;

  *(_QWORD *)this = &unk_24C0B9858;
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  v15 = this;
  (*(void (**)(uint64_t, webrtc::PeerConnectionFactory **, uint64_t (*)(uint64_t *), char *))(*(_QWORD *)v2 + 96))(v2, &v15, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnectionFactory::~PeerConnectionFactory()::$_1>, &v14);
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = (unsigned int *)*((_QWORD *)this + 1);
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      webrtc::ConnectionContext::~ConnectionContext((webrtc::ConnectionContext *)v11);
      MEMORY[0x20BD0ADEC]();
    }
  }
}

__n128 webrtc::PeerConnectionFactory::SetOptions(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[2].n128_u8[0] = a2[1].n128_u8[0];
  a1[1] = result;
  return result;
}

void webrtc::PeerConnectionFactory::GetRtpSenderCapabilities(rtc::webrtc_checks_impl *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const cricket::Codec **v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void (***v20)(char *);
  void (**v21)(char *);
  BOOL v22;
  char *v23;
  void (***v24)(char *);
  void (**v25)(char *);
  void *__p[2];
  uint64_t v27;
  void *v28[2];
  uint64_t v29;

  switch(a2)
  {
    case 0:
      v28[0] = 0;
      v28[1] = 0;
      v29 = 0;
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 96) + 24))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 96));
      v6 = (const cricket::Codec **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
      if (v28 != (void **)v6)
        std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)v28, *v6, v6[1], 0x84BDA12F684BDA13 * ((v6[1] - *v6) >> 3));
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 96) + 24))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 96));
      cricket::GetDefaultEnabledRtpHeaderExtensions(v7, (uint64_t)__p);
      webrtc::ToRtpCapabilities((uint64_t *)v28, (char **)__p, a3);
      v8 = (void **)__p[0];
      if (__p[0])
      {
        v9 = (void **)__p[1];
        v10 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v9 - 9) < 0)
              operator delete(*(v9 - 4));
            v9 -= 4;
          }
          while (v9 != v8);
          v10 = __p[0];
        }
        __p[1] = v8;
        operator delete(v10);
      }
      v17 = (char *)v28[0];
      if (!v28[0])
        return;
      v18 = v28[0];
      if (v28[1] == v28[0])
        goto LABEL_34;
      v19 = (char *)v28[1] - 216;
      v20 = (void (***)(char *))((char *)v28[1] - 216);
      do
      {
        v21 = *v20;
        v20 -= 27;
        (*v21)(v19);
        v22 = v19 == v17;
        v19 = (char *)v20;
      }
      while (!v22);
      break;
    case 1:
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 96) + 32))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 96));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v11 + 56))(__p, v11, *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + 232));
      v12 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 96);
      *(_OWORD *)v28 = *(_OWORD *)__p;
      v29 = v27;
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      cricket::GetDefaultEnabledRtpHeaderExtensions(v13, (uint64_t)__p);
      webrtc::ToRtpCapabilities((uint64_t *)v28, (char **)__p, a3);
      v14 = (void **)__p[0];
      if (__p[0])
      {
        v15 = (void **)__p[1];
        v16 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v15 - 9) < 0)
              operator delete(*(v15 - 4));
            v15 -= 4;
          }
          while (v15 != v14);
          v16 = __p[0];
        }
        __p[1] = v14;
        operator delete(v16);
      }
      v17 = (char *)v28[0];
      if (!v28[0])
        return;
      v18 = v28[0];
      if (v28[1] == v28[0])
        goto LABEL_34;
      v23 = (char *)v28[1] - 216;
      v24 = (void (***)(char *))((char *)v28[1] - 216);
      do
      {
        v25 = *v24;
        v24 -= 27;
        (*v25)(v23);
        v22 = v23 == v17;
        v23 = (char *)v24;
      }
      while (!v22);
      break;
    case 2:
    case 3:
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return;
    default:
      rtc::webrtc_checks_impl::UnreachableCodeReached(a1);
  }
  v18 = v28[0];
LABEL_34:
  v28[1] = v17;
  operator delete(v18);
}

void webrtc::PeerConnectionFactory::GetRtpReceiverCapabilities(rtc::webrtc_checks_impl *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const cricket::Codec **v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void (***v19)(char *);
  void (**v20)(char *);
  BOOL v21;
  char *v22;
  void (***v23)(char *);
  void (**v24)(char *);
  void *__p;
  void **v26;
  void *v27;
  char *v28;
  uint64_t v29;

  switch(a2)
  {
    case 0:
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 96) + 24))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 96));
      v6 = (const cricket::Codec **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
      if (&v27 != (void **)v6)
        std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)&v27, *v6, v6[1], 0x84BDA12F684BDA13 * ((v6[1] - *v6) >> 3));
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 96) + 24))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 96));
      cricket::GetDefaultEnabledRtpHeaderExtensions(v7, (uint64_t)&__p);
      webrtc::ToRtpCapabilities((uint64_t *)&v27, (char **)&__p, a3);
      v8 = (void **)__p;
      if (__p)
      {
        v9 = v26;
        v10 = __p;
        if (v26 != __p)
        {
          do
          {
            if (*((char *)v9 - 9) < 0)
              operator delete(*(v9 - 4));
            v9 -= 4;
          }
          while (v9 != v8);
          v10 = __p;
        }
        v26 = v8;
        operator delete(v10);
      }
      v16 = (char *)v27;
      if (!v27)
        return;
      v17 = v27;
      if (v28 == v27)
        goto LABEL_34;
      v18 = v28 - 216;
      v19 = (void (***)(char *))(v28 - 216);
      do
      {
        v20 = *v19;
        v19 -= 27;
        (*v20)(v18);
        v21 = v18 == v16;
        v18 = (char *)v19;
      }
      while (!v21);
      break;
    case 1:
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 96) + 32))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 96));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v11 + 64))(&v27, v11, *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + 232));
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 96) + 32))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 96));
      cricket::GetDefaultEnabledRtpHeaderExtensions(v12, (uint64_t)&__p);
      webrtc::ToRtpCapabilities((uint64_t *)&v27, (char **)&__p, a3);
      v13 = (void **)__p;
      if (__p)
      {
        v14 = v26;
        v15 = __p;
        if (v26 != __p)
        {
          do
          {
            if (*((char *)v14 - 9) < 0)
              operator delete(*(v14 - 4));
            v14 -= 4;
          }
          while (v14 != v13);
          v15 = __p;
        }
        v26 = v13;
        operator delete(v15);
      }
      v16 = (char *)v27;
      if (!v27)
        return;
      v17 = v27;
      if (v28 == v27)
        goto LABEL_34;
      v22 = v28 - 216;
      v23 = (void (***)(char *))(v28 - 216);
      do
      {
        v24 = *v23;
        v23 -= 27;
        (*v24)(v22);
        v21 = v22 == v16;
        v22 = (char *)v23;
      }
      while (!v21);
      break;
    case 2:
    case 3:
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return;
    default:
      rtc::webrtc_checks_impl::UnreachableCodeReached(a1);
  }
  v17 = v27;
LABEL_34:
  v28 = v16;
  operator delete(v17);
}

void webrtc::PeerConnectionFactory::CreateAudioSource(const cricket::AudioOptions *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;

  v5 = operator new();
  *(_QWORD *)(v5 + 16) = v5 + 16;
  *(_QWORD *)(v5 + 24) = v5 + 16;
  *(_BYTE *)(v5 + 80) = 0;
  *(_BYTE *)(v5 + 104) = 0;
  *(_WORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)v5 = &unk_24C0B66E8;
  *(_QWORD *)(v5 + 8) = &unk_24C0B6770;
  *(_DWORD *)(v5 + 120) = 0;
  v6 = (unsigned int *)(v5 + 120);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v8 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)a1;
  *(_OWORD *)(v5 + 56) = v8;
  *(_WORD *)(v5 + 72) = *((_WORD *)a1 + 16);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v5 + 80), (std::string *)((char *)a1 + 40));
  *(_WORD *)(v5 + 112) = *((_WORD *)a1 + 36);
  *a2 = v5;
}

uint64_t webrtc::PeerConnectionFactory::StartAecDump(webrtc::PeerConnectionFactory *this, __sFILE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  FILE *v8;

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 96) + 24))(*(_QWORD *)(*((_QWORD *)this + 1) + 96));
  v8 = a2;
  v6 = (*(uint64_t (**)(uint64_t, FILE **, uint64_t))(*(_QWORD *)v5 + 72))(v5, &v8, a3);
  if (v8)
    fclose(v8);
  return v6;
}

uint64_t webrtc::PeerConnectionFactory::StopAecDump(webrtc::PeerConnectionFactory *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 96) + 24))(*(_QWORD *)(*((_QWORD *)this + 1) + 96));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 80))(v1);
}

unsigned int *webrtc::PeerConnectionFactory::CreatePeerConnectionOrError@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  __n128 v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  webrtc::ConnectionContext *v42;
  unsigned int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *result;
  unsigned int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  webrtc::ConnectionContext *v82;
  uint64_t v83[5];
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88[5];
  unsigned int *v89;
  __int128 v90;
  __int128 v91;
  _QWORD v92[2];

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(v8 + 56);
  v89 = (unsigned int *)v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_OWORD *)(v8 + 80);
  v90 = *(_OWORD *)(v8 + 64);
  v91 = v12;
  v13 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 56) = 0;
  if (v13)
  {
    *(_QWORD *)&v90 = v13;
    v14 = operator new();
    *(_DWORD *)(v14 + 8) = 0;
    v15 = (unsigned int *)(v14 + 8);
    *(_QWORD *)v14 = &off_24C0B3D10;
    *(_QWORD *)(v14 + 16) = v9;
    *(_QWORD *)(v14 + 24) = v13;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v89 = (unsigned int *)v14;
    if (*(_QWORD *)(a1 + 40))
      goto LABEL_8;
  }
  else
  {
    v14 = v9;
    if (*(_QWORD *)(a1 + 40))
    {
LABEL_8:
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
      v83[0] = (uint64_t)&v89;
      v83[1] = a1;
      (*(void (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t), uint64_t *))(*(_QWORD *)v17 + 96))(v17, v83, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnectionFactory::CreatePeerConnectionOrError(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_1>, v88);
      v14 = (uint64_t)v89;
    }
  }
  v83[0] = v14;
  if (v14)
  {
    v18 = (unsigned int *)(v14 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_OWORD *)&v83[1] = v90;
  *(_OWORD *)&v83[3] = v91;
  v20 = webrtc::EnvironmentFactory::CreateWithDefaults(v83, (uint64_t)v88);
  v21 = v83[0];
  if (v83[0])
  {
    v22 = (unsigned int *)(v83[0] + 8);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v21 + 8))(v21, v20);
  }
  if (!*(_QWORD *)(a3 + 32))
  {
    v25 = *(_QWORD *)(a1 + 8);
    v26 = *(_QWORD *)(v25 + 48);
    v27 = *(_QWORD *)(v25 + 24);
    v28 = (_QWORD *)operator new();
    *v28 = &off_24C0BBAE8;
    v28[1] = v26;
    v28[2] = v27;
    v29 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 32) = v28;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  if (*(_QWORD *)(a3 + 8))
  {
    if (*(_QWORD *)(a3 + 24))
      goto LABEL_32;
    goto LABEL_30;
  }
  v30 = *(_QWORD *)(a1 + 8);
  v31 = *(_QWORD *)(v30 + 200);
  v32 = *(_QWORD *)(v30 + 216);
  v33 = v88[1];
  v34 = operator new();
  v35 = (_DWORD *)cricket::BasicPortAllocator::BasicPortAllocator(v34, v31, v32, *(_QWORD *)(a2 + 216), 0, v33);
  v36 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v35;
  if (v36)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v35 = *(_DWORD **)(a3 + 8);
  }
  v37 = *(_DWORD *)(a2 + 320);
  v38 = *(_DWORD *)(a2 + 324);
  if (v37 <= v38)
  {
    v35[30] = v37;
    v35[31] = v38;
  }
  v35[29] = *(_DWORD *)(a2 + 328);
  if (!*(_QWORD *)(a3 + 24))
  {
LABEL_30:
    v39 = (_QWORD *)operator new();
    *v39 = &unk_24C0B2EC0;
    v40 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = v39;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
LABEL_32:
  (*(void (**)(_QWORD, _QWORD, __n128))(**(_QWORD **)(a3 + 8) + 32))(*(_QWORD *)(a3 + 8), *(unsigned int *)(a1 + 20), v20);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 8) + 48))(*(_QWORD *)(a3 + 8), a2 + 296);
  v41 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  v83[0] = a1;
  v83[1] = (uint64_t)v88;
  v83[2] = a2;
  v87 = 0;
  v92[0] = &v87;
  v92[1] = v83;
  (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v41 + 96))(v41, v92, rtc::FunctionView<void ()(void)>::CallVoidPtr<std::unique_ptr<webrtc::Call> rtc::Thread::BlockingCall<webrtc::PeerConnectionFactory::CreatePeerConnectionOrError(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_2,std::unique_ptr<webrtc::Call>,void>(webrtc::PeerConnectionFactory::CreatePeerConnectionOrError(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_2 &&,webrtc::Location const&)::{lambda(void)#1}>, &v86);
  v42 = *(webrtc::ConnectionContext **)(a1 + 8);
  v82 = v42;
  if (v42)
  {
    do
      v43 = __ldxr((unsigned int *)v42);
    while (__stxr(v43 + 1, (unsigned int *)v42));
  }
  v44 = *(_OWORD *)a3;
  v45 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a3 + 8) = 0u;
  v77 = v44;
  v78 = v45;
  v46 = *(_OWORD *)(a3 + 32);
  v47 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  v48 = v87;
  v87 = 0;
  v81 = v48;
  *(_QWORD *)(a3 + 56) = 0;
  v79 = v46;
  v80 = v47;
  webrtc::PeerConnection::Create(v88, (unsigned int **)&v82, a1 + 16, &v81, a2, &v77, (uint64_t)v83);
  v49 = *((_QWORD *)&v80 + 1);
  *((_QWORD *)&v80 + 1) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = v80;
  *(_QWORD *)&v80 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *((_QWORD *)&v79 + 1);
  *((_QWORD *)&v79 + 1) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = v79;
  *(_QWORD *)&v79 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *((_QWORD *)&v78 + 1);
  *((_QWORD *)&v78 + 1) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = v78;
  *(_QWORD *)&v78 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = *((_QWORD *)&v77 + 1);
  *((_QWORD *)&v77 + 1) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = v81;
  v81 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 216))(v56);
  result = (unsigned int *)v82;
  if (v82)
  {
    do
    {
      v58 = __ldaxr(result);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, result));
    if (!v59)
    {
      webrtc::ConnectionContext::~ConnectionContext((webrtc::ConnectionContext *)result);
      result = (unsigned int *)MEMORY[0x20BD0ADEC]();
    }
  }
  v60 = v83[0];
  if (LODWORD(v83[0]))
  {
    v61 = v83[2];
    *(_QWORD *)(a4 + 8) = v83[1];
    *(_QWORD *)(a4 + 16) = v61;
    *(_QWORD *)(a4 + 23) = *(uint64_t *)((char *)&v83[2] + 7);
    *(_DWORD *)(a4 + 32) = v83[4];
    *(_DWORD *)(a4 + 35) = *(_DWORD *)((char *)&v83[4] + 3);
    LOBYTE(v61) = HIBYTE(v83[3]);
    memset(&v83[1], 0, 24);
    *(_DWORD *)a4 = v60;
    *(_BYTE *)(a4 + 31) = v61;
    *(_BYTE *)(a4 + 40) = 0;
    *(_BYTE *)(a4 + 48) = 0;
    if (!v85)
      goto LABEL_63;
LABEL_61:
    if (v84)
      (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
    goto LABEL_63;
  }
  if (!v85)
  {
    __break(1u);
    return result;
  }
  v62 = *(_QWORD *)(a1 + 8);
  v63 = *(_QWORD *)(v62 + 24);
  v64 = *(_QWORD *)(v62 + 48);
  v65 = v84;
  v84 = 0;
  v66 = operator new();
  *(_QWORD *)(v66 + 16) = v63;
  *(_QWORD *)(v66 + 24) = v65;
  *(_QWORD *)v66 = off_24C0B9AF0;
  *(_QWORD *)(v66 + 8) = v64;
  *(_DWORD *)(v66 + 32) = 0;
  v67 = (unsigned int *)(v66 + 32);
  do
    v68 = __ldxr(v67);
  while (__stxr(v68 + 1, v67));
  *(_DWORD *)a4 = 0;
  *(_BYTE *)(a4 + 38) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 29) = 0;
  *(_QWORD *)(a4 + 40) = v66;
  *(_BYTE *)(a4 + 48) = 1;
  if (v85)
    goto LABEL_61;
LABEL_63:
  if (SHIBYTE(v83[3]) < 0)
    operator delete((void *)v83[1]);
  v69 = v87;
  v87 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 216))(v69);
  v70 = v88[0];
  if (v88[0])
  {
    v71 = (unsigned int *)(v88[0] + 8);
    do
    {
      v72 = __ldaxr(v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v71));
    if (!v73)
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  }
  result = v89;
  if (v89)
  {
    v74 = v89 + 2;
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t webrtc::PeerConnectionFactory::CreateLocalMediaStream@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t result;
  unsigned int *v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  v6 = operator new();
  *(_QWORD *)(v6 + 16) = v6 + 16;
  *(_QWORD *)(v6 + 24) = v6 + 16;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)v6 = &unk_24C0B7020;
  *(_QWORD *)(v6 + 8) = &unk_24C0B70C8;
  v7 = (std::string *)(v6 + 40);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *(_QWORD *)(v6 + 56) = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)v6 = &unk_24C0B71D0;
  *(_QWORD *)(v6 + 8) = &unk_24C0B7280;
  *(_DWORD *)(v6 + 112) = 0;
  v8 = (unsigned int *)(v6 + 112);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  result = operator new();
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)result = off_24C0B9F28;
  *(_QWORD *)(result + 8) = &unk_24C0B9FD8;
  *(_DWORD *)(result + 32) = 0;
  v11 = (unsigned int *)(result + 32);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  *a3 = result;
  return result;
}

uint64_t webrtc::PeerConnectionFactory::CreateVideoTrack@<X0>(rtc::Thread *a1@<X0>, _QWORD *a2@<X1>, char *a3@<X2>, size_t a4@<X3>, uint64_t *a5@<X8>)
{
  rtc::Thread *v7;
  uint64_t (***v9)(_QWORD);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  int8x16_t v22;
  uint64_t v23;

  v7 = a1;
  v9 = (uint64_t (***)(_QWORD))*a2;
  if (*a2)
    a1 = (rtc::Thread *)(**v9)(*a2);
  v10 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 40);
  v11 = rtc::Thread::Current(a1);
  v12 = operator new();
  *(_QWORD *)(v12 + 32) = v10;
  *(_QWORD *)(v12 + 40) = v9;
  *(_QWORD *)v12 = &unk_24C0C51A0;
  *(_QWORD *)(v12 + 8) = &unk_24C0C5250;
  *(_QWORD *)(v12 + 16) = &unk_24C0C5280;
  *(_QWORD *)(v12 + 24) = v11;
  *(_DWORD *)(v12 + 48) = 0;
  v13 = (unsigned int *)(v12 + 48);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v15 = operator new();
  v23 = v12;
  webrtc::VideoTrack::VideoTrack(v15, a3, a4, &v23, v10);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  *(_QWORD *)v15 = &unk_24C0C53C8;
  *(_QWORD *)(v15 + 8) = &unk_24C0C5470;
  *(_QWORD *)(v15 + 16) = &unk_24C0C54A0;
  *(_QWORD *)(v15 + 88) = &unk_24C0C54D8;
  *(_QWORD *)(v15 + 120) = &unk_24C0C5510;
  *(_DWORD *)(v15 + 152) = 0;
  v16 = (unsigned int *)(v15 + 152);
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  v22 = *(int8x16_t *)(*((_QWORD *)v7 + 1) + 40);
  rtc::RefCountedObject<webrtc::VideoTrack>::AddRef(v15);
  v18 = operator new();
  *(int8x16_t *)(v18 + 24) = vextq_s8(v22, v22, 8uLL);
  *(_QWORD *)(v18 + 40) = v15;
  *(_QWORD *)v18 = off_24C0BA0E0;
  *(_QWORD *)(v18 + 8) = &unk_24C0BA180;
  *(_QWORD *)(v18 + 16) = &unk_24C0BA1B0;
  *(_DWORD *)(v18 + 48) = 0;
  v19 = (unsigned int *)(v18 + 48);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  *a5 = v18;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
}

uint64_t webrtc::PeerConnectionFactory::CreateAudioTrack@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void (***a3)(_QWORD)@<X2>, uint64_t *a4@<X8>)
{
  char *v5;
  uint64_t v6;
  size_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t (**v14)();
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  void (***v19)(_QWORD);

  v5 = (char *)a2;
  v6 = result;
  if (*(char *)(a2 + 23) < 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    if ((v8 & 0x8000000000000000) != 0 || ((v5 = *(char **)a2, v8) ? (v9 = v5 == 0) : (v9 = 0), v9))
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  v19 = a3;
  if (a3)
    (**a3)(a3);
  v10 = operator new();
  v11 = webrtc::AudioTrack::AudioTrack(v10, v5, v8, &v19);
  *(_QWORD *)v11 = off_24C0AEE00;
  *(_QWORD *)(v11 + 8) = &unk_24C0AEEA0;
  *(_QWORD *)(v11 + 80) = &unk_24C0AEED0;
  *(_DWORD *)(v11 + 100) = 0;
  v12 = (unsigned int *)(v11 + 100);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  if (a3)
  {
    (*a3)[1](a3);
    v14 = *(uint64_t (***)())v10;
  }
  else
  {
    v14 = off_24C0AEE00;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 48);
  ((void (*)(uint64_t))*v14)(v10);
  v16 = operator new();
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)v16 = off_24C0BA2E8;
  *(_QWORD *)(v16 + 8) = &unk_24C0BA380;
  *(_DWORD *)(v16 + 32) = 0;
  v17 = (unsigned int *)(v16 + 32);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  *a4 = v16;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

uint64_t webrtc::PeerConnectionFactoryInterface::CreateVideoTrack(uint64_t result, uint64_t *a2, uint64_t (***a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (***v6)(_QWORD);

  v4 = result;
  v6 = a3;
  if (a3)
    result = (**a3)(a3);
  if (*((char *)a2 + 23) < 0)
  {
    v5 = a2[1];
    if (v5 < 0 || (a2 = (uint64_t *)*a2, v5) && !a2)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  (*(void (**)(uint64_t, uint64_t (****)(_QWORD), uint64_t *, uint64_t))(*(_QWORD *)v4 + 96))(v4, &v6, a2, v5);
  result = (uint64_t)v6;
  if (v6)
    return (*v6)[1](v6);
  return result;
}

void webrtc::RtpTransportControllerSendFactory::~RtpTransportControllerSendFactory(webrtc::RtpTransportControllerSendFactory *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtpTransportControllerSendFactory::Create@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = webrtc::RtpTransportControllerSend::RtpTransportControllerSend(v4, a1);
  *a2 = result;
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface> rtc::Thread::BlockingCall<webrtc::CreateModularPeerConnectionFactory(webrtc::PeerConnectionFactoryDependencies)::$_0,webrtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface>,void>(webrtc::CreateModularPeerConnectionFactory(webrtc::PeerConnectionFactoryDependencies)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t **a1)
{
  __n128 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[216];

  v2 = webrtc::PeerConnectionFactoryDependencies::PeerConnectionFactoryDependencies((uint64_t)v8, *a1[1]);
  webrtc::CreateModularPeerConnectionFactory(&v7, v8, v2);
  webrtc::PeerConnectionFactoryDependencies::~PeerConnectionFactoryDependencies((webrtc::PeerConnectionFactoryDependencies *)v8);
  v3 = *a1;
  v4 = v7;
  v7 = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 8;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>>::~RefCountedObject(_QWORD *a1)
{
  webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::~PeerConnectionFactoryProxyWithInternal(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::SetOptions(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F16EA0;
  v16 = a2;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v15;
    v5 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v15);
    v4(v5, v16);
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,void,webrtc::PeerConnectionFactoryInterface::Options const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
  }
  pthread_mutex_destroy(&v17);
  return pthread_cond_destroy(&v18);
}

void webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::CreatePeerConnectionOrError(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  rtc::Thread *v6;
  TimeDelta v7;
  TimeDelta v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  int v18;
  __int128 __p;
  _BYTE v20[15];
  uint64_t v21;
  char v22;
  uint64_t v23;
  __int128 *v24;
  pthread_mutex_t v25;
  pthread_cond_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F16E40;
  v18 = 10;
  v20[14] = 0;
  *(_QWORD *)v20 = 0;
  __p = 0uLL;
  *(_QWORD *)&v20[5] = 0;
  LOBYTE(v21) = 0;
  v22 = 0;
  v23 = a2;
  v24 = a3;
  rtc::Event::Event((rtc::Event *)&v25, 0, 0);
  v6 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v6))
  {
    webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>>>::Invoke<webrtc::PeerConnectionFactoryInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>> (webrtc::PeerConnectionFactoryInterface::*)(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies),webrtc::PeerConnectionInterface::RTCConfiguration const,webrtc::PeerConnectionDependencies>((uint64_t)&v18, v16, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t, __int128 *))v17, *((uint64_t *)&v17 + 1), v23, v24);
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>>,webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v6 + 8))(v6, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v25, v7, v8);
  }
  v9 = *(_DWORD *)&v20[8];
  *(_DWORD *)a4 = v18;
  *(_QWORD *)(a4 + 24) = *(_QWORD *)v20;
  *(_OWORD *)(a4 + 8) = __p;
  __p = 0uLL;
  *(_QWORD *)v20 = 0;
  *(_DWORD *)(a4 + 32) = v9;
  *(_DWORD *)(a4 + 35) = *(_DWORD *)&v20[11];
  *(_BYTE *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = 0;
  if (v22)
  {
    v10 = v21;
    v21 = 0;
    *(_QWORD *)(a4 + 40) = v10;
    *(_BYTE *)(a4 + 48) = 1;
  }
  pthread_mutex_destroy(&v25);
  pthread_cond_destroy(&v26);
  if (v22 && v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if ((v20[7] & 0x80000000) != 0)
    operator delete((void *)__p);
}

void webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::GetRtpSenderCapabilities(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  void **v5;
  void **v6;
  void *v7;
  char *v8;
  void *v9;
  char *v10;
  void (***v11)(char *);
  void (**v12)(char *);
  BOOL v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  void *v17[2];
  void *v18[2];
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  int *v22;
  pthread_mutex_t v23;
  pthread_cond_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F05270;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  *(_OWORD *)__p = 0u;
  v21 = 0;
  v22 = &v14;
  rtc::Event::Event((rtc::Event *)&v23, 0, 0);
  webrtc::ConstMethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RtpCapabilities,cricket::MediaType>::Marshal(a3, (unint64_t)&v15, *(rtc::Thread **)(a1 + 8));
  pthread_mutex_destroy(&v23);
  pthread_cond_destroy(&v24);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v5 = (void **)v18[1];
  if (v18[1])
  {
    v6 = (void **)v19;
    v7 = v18[1];
    if ((void *)v19 != v18[1])
    {
      do
      {
        if (*((char *)v6 - 17) < 0)
          operator delete(*(v6 - 5));
        v6 -= 5;
      }
      while (v6 != v5);
      v7 = v18[1];
    }
    *(_QWORD *)&v19 = v5;
    operator delete(v7);
  }
  v8 = (char *)v17[0];
  if (v17[0])
  {
    v9 = v17[0];
    if (v17[1] != v17[0])
    {
      v10 = (char *)v17[1] - 160;
      v11 = (void (***)(char *))((char *)v17[1] - 160);
      do
      {
        v12 = *v11;
        v11 -= 20;
        (*v12)(v10);
        v13 = v10 == v8;
        v10 = (char *)v11;
      }
      while (!v13);
      v9 = v17[0];
    }
    v17[1] = v8;
    operator delete(v9);
  }
}

void webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::GetRtpReceiverCapabilities(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  void **v5;
  void **v6;
  void *v7;
  char *v8;
  void *v9;
  char *v10;
  void (***v11)(char *);
  void (**v12)(char *);
  BOOL v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  void *v17[2];
  void *v18[2];
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  int *v22;
  pthread_mutex_t v23;
  pthread_cond_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F16E50;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  *(_OWORD *)__p = 0u;
  v21 = 0;
  v22 = &v14;
  rtc::Event::Event((rtc::Event *)&v23, 0, 0);
  webrtc::ConstMethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RtpCapabilities,cricket::MediaType>::Marshal(a3, (unint64_t)&v15, *(rtc::Thread **)(a1 + 8));
  pthread_mutex_destroy(&v23);
  pthread_cond_destroy(&v24);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v5 = (void **)v18[1];
  if (v18[1])
  {
    v6 = (void **)v19;
    v7 = v18[1];
    if ((void *)v19 != v18[1])
    {
      do
      {
        if (*((char *)v6 - 17) < 0)
          operator delete(*(v6 - 5));
        v6 -= 5;
      }
      while (v6 != v5);
      v7 = v18[1];
    }
    *(_QWORD *)&v19 = v5;
    operator delete(v7);
  }
  v8 = (char *)v17[0];
  if (v17[0])
  {
    v9 = v17[0];
    if (v17[1] != v17[0])
    {
      v10 = (char *)v17[1] - 160;
      v11 = (void (***)(char *))((char *)v17[1] - 160);
      do
      {
        v12 = *v11;
        v11 -= 20;
        (*v12)(v10);
        v13 = v10 == v8;
        v10 = (char *)v11;
      }
      while (!v13);
      v9 = v17[0];
    }
    v17[1] = v8;
    operator delete(v9);
  }
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::CreateLocalMediaStream@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  rtc::Thread *v5;
  void (*v6)(__n128 *__return_ptr, _QWORD *, uint64_t);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  TimeDelta v10;
  TimeDelta v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  pthread_mutex_t v23;
  pthread_cond_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v19 = *(_QWORD *)(a1 + 24);
  v20 = xmmword_208F05280;
  v21 = 0;
  v22 = a2;
  rtc::Event::Event((rtc::Event *)&v23, 0, 0);
  v5 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v5))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *, uint64_t))v20;
    v7 = (_QWORD *)(v19 + (*((uint64_t *)&v20 + 1) >> 1));
    if ((BYTE8(v20) & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *, uint64_t))(*v7 + v20);
    v6(&v16, v7, v22);
    v8 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    v9 = v21;
    v21 = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v16.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)&v19;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::MediaStreamInterface>,std::string const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v5 + 8))(v5, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v23, v10, v11);
  }
  v12 = v21;
  v21 = 0;
  *a3 = v12;
  pthread_mutex_destroy(&v23);
  pthread_cond_destroy(&v24);
  result = v21;
  if (v21)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  return result;
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::CreateAudioSource@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  rtc::Thread *v5;
  void (*v6)(__n128 *__return_ptr, _QWORD *, uint64_t);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  TimeDelta v10;
  TimeDelta v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  pthread_mutex_t v23;
  pthread_cond_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v19 = *(_QWORD *)(a1 + 24);
  v20 = xmmword_208F05290;
  v21 = 0;
  v22 = a2;
  rtc::Event::Event((rtc::Event *)&v23, 0, 0);
  v5 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v5))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *, uint64_t))v20;
    v7 = (_QWORD *)(v19 + (*((uint64_t *)&v20 + 1) >> 1));
    if ((BYTE8(v20) & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *, uint64_t))(*v7 + v20);
    v6(&v16, v7, v22);
    v8 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    v9 = v21;
    v21 = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v16.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)&v19;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::AudioSourceInterface>,cricket::AudioOptions const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v5 + 8))(v5, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v23, v10, v11);
  }
  v12 = v21;
  v21 = 0;
  *a3 = v12;
  pthread_mutex_destroy(&v23);
  pthread_cond_destroy(&v24);
  result = v21;
  if (v21)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  return result;
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::CreateVideoTrack@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  rtc::Thread *v7;
  void (*v8)(__n128 *__return_ptr, _QWORD *, uint64_t *, _QWORD, _QWORD);
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  TimeDelta v14;
  TimeDelta v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[2];
  char v19;
  uint64_t v20;
  __n128 v21;
  __n128 (*v22)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v23)(uint64_t *);
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  pthread_mutex_t v29;
  pthread_cond_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v18[0] = a3;
  v18[1] = a4;
  v24 = *(_QWORD *)(a1 + 24);
  v25 = xmmword_208F052A0;
  v26 = 0;
  v27 = a2;
  v28 = v18;
  rtc::Event::Event((rtc::Event *)&v29, 0, 0);
  v7 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v7))
  {
    v8 = (void (*)(__n128 *__return_ptr, _QWORD *, uint64_t *, _QWORD, _QWORD))v25;
    v9 = v28;
    v10 = (_QWORD *)(v24 + (*((uint64_t *)&v25 + 1) >> 1));
    if ((BYTE8(v25) & 1) != 0)
      v8 = *(void (**)(__n128 *__return_ptr, _QWORD *, uint64_t *, _QWORD, _QWORD))(*v10 + v25);
    v11 = *v27;
    *v27 = 0;
    v20 = v11;
    v8(&v21, v10, &v20, *v9, v9[1]);
    v12 = v21.n128_u64[0];
    v21.n128_u64[0] = 0;
    v13 = v26;
    v26 = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if (v21.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v21.n128_u64[0] + 8))(v21.n128_u64[0]);
    }
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  else
  {
    v21.n128_u64[0] = (unint64_t)&v24;
    v22 = absl::internal_any_invocable::LocalManagerTrivial;
    v23 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::VideoTrackInterface>,webrtc::scoped_refptr<webrtc::VideoTrackSourceInterface>,std::string_view>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, uint64_t *, char *))(*(_QWORD *)v7 + 8))(v7, &v21, &v20, &v19);
    v22(1, &v21, &v21);
    v14.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v15.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v29, v14, v15);
  }
  v16 = v26;
  v26 = 0;
  *a5 = v16;
  pthread_mutex_destroy(&v29);
  pthread_cond_destroy(&v30);
  result = v26;
  if (v26)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  return result;
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::CreateAudioTrack@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  rtc::Thread *v6;
  void (*v7)(__n128 *__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  TimeDelta v11;
  TimeDelta v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  char v17;
  __n128 v18;
  __n128 (*v19)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v20)(uint64_t *);
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  pthread_mutex_t v26;
  pthread_cond_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v15 = a3;
  v21 = *(_QWORD *)(a1 + 24);
  v22 = xmmword_208F16E60;
  v23 = 0;
  v24 = a2;
  v25 = &v15;
  rtc::Event::Event((rtc::Event *)&v26, 0, 0);
  v6 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v6))
  {
    v7 = (void (*)(__n128 *__return_ptr, _QWORD *, uint64_t, uint64_t))v22;
    v8 = (_QWORD *)(v21 + (*((uint64_t *)&v22 + 1) >> 1));
    if ((BYTE8(v22) & 1) != 0)
      v7 = *(void (**)(__n128 *__return_ptr, _QWORD *, uint64_t, uint64_t))(*v8 + v22);
    v7(&v18, v8, v24, *v25);
    v9 = v18.n128_u64[0];
    v18.n128_u64[0] = 0;
    v10 = v23;
    v23 = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      if (v18.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v18.n128_u64[0] + 8))(v18.n128_u64[0]);
    }
  }
  else
  {
    v18.n128_u64[0] = (unint64_t)&v21;
    v19 = absl::internal_any_invocable::LocalManagerTrivial;
    v20 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::AudioTrackInterface>,std::string const&,webrtc::AudioSourceInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v6 + 8))(v6, &v18, &v17, &v16);
    v19(1, &v18, &v18);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v26, v11, v12);
  }
  v13 = v23;
  v23 = 0;
  *a4 = v13;
  pthread_mutex_destroy(&v26);
  pthread_cond_destroy(&v27);
  result = v23;
  if (v23)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  return result;
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::StartAecDump(uint64_t a1, uint64_t a2, uint64_t a3)
{
  rtc::Thread *v4;
  uint64_t (*v5)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  TimeDelta v8;
  TimeDelta v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  __n128 v15;
  __n128 (*v16)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v17)(uint64_t *);
  uint64_t v18;
  __int128 v19;
  char v20;
  uint64_t *v21;
  uint64_t *v22;
  pthread_mutex_t v23;
  pthread_cond_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v11 = a3;
  v12 = a2;
  v18 = *(_QWORD *)(a1 + 24);
  v19 = xmmword_208F16E70;
  v21 = &v12;
  v22 = &v11;
  rtc::Event::Event((rtc::Event *)&v23, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v19;
    v6 = (_QWORD *)(v18 + (*((uint64_t *)&v19 + 1) >> 1));
    if ((BYTE8(v19) & 1) != 0)
      v5 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v6 + v19);
    v7 = v5(v6, *v21, *v22);
    v20 = v7;
  }
  else
  {
    v15.n128_u64[0] = (unint64_t)&v18;
    v16 = absl::internal_any_invocable::LocalManagerTrivial;
    v17 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,BOOL,__sFILE *,long long>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v15, &v14, &v13);
    v16(1, &v15, &v15);
    v8.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v9.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v23, v8, v9);
    v7 = v20 != 0;
  }
  pthread_mutex_destroy(&v23);
  pthread_cond_destroy(&v24);
  return v7;
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::StopAecDump(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 24);
  v14 = xmmword_208F16E80;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v14;
    v4 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v14);
    v3(v4);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v13;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v10, &v9, &v8);
    v11(1, &v10, &v10);
    v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v6.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v5, v6);
  }
  pthread_mutex_destroy(&v15);
  return pthread_cond_destroy(&v16);
}

BOOL rtc::RefCountedObject<webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 32));
  return v1 == 1;
}

_QWORD *webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::~PeerConnectionFactoryProxyWithInternal(_QWORD *a1)
{
  rtc::Thread *v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  char v7;
  char v8;
  __n128 v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C0B99B8;
  v12 = a1;
  v13 = webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::DestroyInternal;
  v14 = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = (rtc::Thread *)a1[1];
  if (rtc::Thread::IsCurrent(v2))
  {
    v13((uint64_t)v12 + (v14 >> 1));
  }
  else
  {
    v9.n128_u64[0] = (unint64_t)&v12;
    v10 = absl::internal_any_invocable::LocalManagerTrivial;
    v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v9, &v8, &v7);
    v10(1, &v9, &v9);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v3, v4);
  }
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryProxyWithInternal<webrtc::PeerConnectionFactoryInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,void,webrtc::PeerConnectionFactoryInterface::Options const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t))(*v5 + v2);
  v2(v5, v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>>>::Invoke<webrtc::PeerConnectionFactoryInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>> (webrtc::PeerConnectionFactoryInterface::*)(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies),webrtc::PeerConnectionInterface::RTCConfiguration const,webrtc::PeerConnectionDependencies>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, _QWORD *, uint64_t, __int128 *), uint64_t a4, uint64_t a5, __int128 *a6)
{
  void (*v6)(uint64_t *__return_ptr, _QWORD *, uint64_t, __int128 *);
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  _DWORD v32[2];
  uint64_t v33;
  unsigned __int8 v34;

  v6 = a3;
  v8 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, __int128 *))(*v8 + a3);
  v9 = *a6;
  v10 = a6[1];
  *(__int128 *)((char *)a6 + 8) = 0u;
  v25 = v9;
  v26 = v10;
  v11 = a6[2];
  v12 = a6[3];
  *(__int128 *)((char *)a6 + 24) = 0u;
  *(__int128 *)((char *)a6 + 40) = 0u;
  *((_QWORD *)a6 + 7) = 0;
  v27 = v11;
  v28 = v12;
  v6(&v29, v8, a5, &v25);
  *(_DWORD *)a1 = v29;
  v13 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 24) = v31;
  HIBYTE(v31) = 0;
  LOBYTE(__p[0]) = 0;
  *(_DWORD *)(a1 + 32) = v32[0];
  *(_DWORD *)(a1 + 35) = *(_DWORD *)((char *)v32 + 3);
  if (*(unsigned __int8 *)(a1 + 48) == v34)
  {
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_18;
    v14 = v33;
    v33 = 0;
    v15 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      if (!v34)
        goto LABEL_18;
      goto LABEL_15;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      v17 = v33;
      v33 = 0;
      *(_QWORD *)(a1 + 40) = v17;
      *(_BYTE *)(a1 + 48) = 1;
      if (!v34)
        goto LABEL_18;
      goto LABEL_15;
    }
    v16 = *(_QWORD *)(a1 + 40);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    *(_BYTE *)(a1 + 48) = 0;
  }
  if (!v34)
    goto LABEL_18;
LABEL_15:
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
LABEL_18:
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    v18 = *((_QWORD *)&v28 + 1);
    *((_QWORD *)&v28 + 1) = 0;
    if (!v18)
      goto LABEL_21;
    goto LABEL_20;
  }
  operator delete(__p[0]);
  v18 = *((_QWORD *)&v28 + 1);
  *((_QWORD *)&v28 + 1) = 0;
  if (v18)
LABEL_20:
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
LABEL_21:
  v19 = v28;
  *(_QWORD *)&v28 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)&v27 + 1);
  *((_QWORD *)&v27 + 1) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v27;
  *(_QWORD *)&v27 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)&v26 + 1);
  *((_QWORD *)&v26 + 1) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v26;
  *(_QWORD *)&v26 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  result = *((_QWORD *)&v25 + 1);
  *((_QWORD *)&v25 + 1) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>>,webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>>>::Invoke<webrtc::PeerConnectionFactoryInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::PeerConnectionInterface>> (webrtc::PeerConnectionFactoryInterface::*)(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies),webrtc::PeerConnectionInterface::RTCConfiguration const,webrtc::PeerConnectionDependencies>(*a1 + 24, *(_QWORD *)v1, *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, __int128 *))(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 80), *(__int128 **)(v1 + 88));
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 96));
  *(_BYTE *)(v1 + 209) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 160));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 96));
}

void webrtc::ConstMethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RtpCapabilities,cricket::MediaType>::Marshal(_QWORD *a1, unint64_t a2, rtc::Thread *this)
{
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  std::string *v14;
  __int128 *v15;
  __int128 v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char v22;
  char v23;
  __n128 v24;
  __n128 (*v25)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v26)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    webrtc::ReturnType<webrtc::RtpCapabilities>::Invoke<webrtc::PeerConnectionFactoryInterface const,webrtc::RtpCapabilities (webrtc::PeerConnectionFactoryInterface::*)(cricket::MediaType)const,cricket::MediaType>((uint64_t *)(a2 + 24), *(_QWORD *)a2, *(void (**)(void **__return_ptr, _QWORD *, uint64_t))(a2 + 8), *(_QWORD *)(a2 + 16), **(unsigned int **)(a2 + 96));
  }
  else
  {
    v24.n128_u64[0] = a2;
    v25 = absl::internal_any_invocable::LocalManagerTrivial;
    v26 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RtpCapabilities,cricket::MediaType>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v24, &v23, &v22);
    v25(1, &v24, &v24);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a2 + 104), v6, v7);
  }
  std::vector<webrtc::RtpCodecCapability>::vector(a1, (uint64_t *)(a2 + 24));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = v9 - v8;
  if (v9 != v8)
  {
    v11 = 0xCCCCCCCCCCCCCCCDLL * (v10 >> 3);
    if (v11 >= 0x666666666666667)
      goto LABEL_16;
    v12 = (char *)operator new(v10);
    v13 = 0;
    a1[3] = v12;
    a1[4] = v12;
    a1[5] = &v12[40 * v11];
    do
    {
      v14 = (std::string *)&v12[v13];
      v15 = (__int128 *)(v8 + v13);
      if (*(char *)(v8 + v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
      }
      else
      {
        v16 = *v15;
        v14->__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v16;
      }
      *(_OWORD *)&v12[v13 + 24] = *(_OWORD *)(v8 + v13 + 24);
      v13 += 40;
    }
    while (v8 + v13 != v9);
    a1[4] = &v12[v13];
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v18 = *(_BYTE **)(a2 + 72);
  v17 = *(_BYTE **)(a2 + 80);
  v19 = v17 - v18;
  if (v17 == v18)
    return;
  if (v19 < 0)
LABEL_16:
    abort();
  v20 = (char *)operator new(v17 - v18);
  a1[6] = v20;
  a1[7] = v20;
  v21 = &v20[4 * (v19 >> 2)];
  a1[8] = v21;
  memcpy(v20, v18, v19);
  a1[7] = v21;
}

void webrtc::ReturnType<webrtc::RtpCapabilities>::Invoke<webrtc::PeerConnectionFactoryInterface const,webrtc::RtpCapabilities (webrtc::PeerConnectionFactoryInterface::*)(cricket::MediaType)const,cricket::MediaType>(uint64_t *a1, uint64_t a2, void (*a3)(void **__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  char *v7;
  void **v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  size_t v21;
  char *v22;
  char *v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  const std::string::value_type *v27;
  size_t v28;
  char *v29;
  char *v30;
  char v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  std::string *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  char *v46;
  size_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char **v55;
  char *v56;
  uint64_t v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  void *v61;
  void *v62;
  void **v63;
  void **v64;
  void *v65;
  char *v66;
  void *v67;
  char *v68;
  void (***v69)(char *);
  void (**v70)(char *);
  BOOL v71;
  void *v72;
  char *v73;
  void *v74;
  char *v75;
  void *__p;
  char *v77;

  v6 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(void **__return_ptr, _QWORD *, uint64_t))(*v6 + a3);
  a3(&v72, v6, a5);
  if (&v72 != (void **)a1)
  {
    std::vector<webrtc::RtpCodecCapability>::__assign_with_size[abi:sn180100]<webrtc::RtpCodecCapability*,webrtc::RtpCodecCapability*>(a1, (uint64_t)v72, (uint64_t)v73, 0xCCCCCCCCCCCCCCCDLL * ((v73 - (_BYTE *)v72) >> 5));
    v8 = (void **)(a1 + 3);
    v7 = (char *)a1[3];
    v10 = (char *)v74;
    v9 = v75;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v75 - (_BYTE *)v74) >> 3);
    v12 = a1[5];
    if (0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v7) >> 3) >= v11)
    {
      v15 = a1[4];
      v16 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - (uint64_t)v7) >> 3);
      if (v16 >= v11)
      {
        if (v74 != v75)
        {
          v26 = 0;
          do
          {
            v29 = &v7[v26];
            v30 = &v10[v26];
            if (v10 != v7)
            {
              v31 = v30[23];
              if (v29[23] < 0)
              {
                if (v31 >= 0)
                  v27 = &v10[v26];
                else
                  v27 = *(const std::string::value_type **)&v10[v26];
                if (v31 >= 0)
                  v28 = v30[23];
                else
                  v28 = *(_QWORD *)&v10[v26 + 8];
                std::string::__assign_no_alias<false>((std::string *)&v7[v26], v27, v28);
              }
              else if (v30[23] < 0)
              {
                std::string::__assign_no_alias<true>(&v7[v26], *(char **)&v10[v26], *(_QWORD *)&v10[v26 + 8]);
              }
              else
              {
                v32 = *(_OWORD *)v30;
                *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
                *(_OWORD *)v29 = v32;
              }
            }
            *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
            v26 += 40;
          }
          while (&v10[v26] != v9);
          v15 = a1[4];
          v7 += v26;
        }
        while ((char *)v15 != v7)
        {
          if (*(char *)(v15 - 17) < 0)
            operator delete(*(void **)(v15 - 40));
          v15 -= 40;
        }
        a1[4] = (uint64_t)v7;
      }
      else
      {
        v17 = (char *)v74 + 8 * ((v15 - (uint64_t)v7) >> 3);
        if ((char *)v15 != v7)
        {
          v18 = 0;
          v19 = 40 * v16;
          do
          {
            v22 = &v7[v18];
            v23 = &v10[v18];
            if (v10 != v7)
            {
              v24 = v23[23];
              if (v22[23] < 0)
              {
                if (v24 >= 0)
                  v20 = &v10[v18];
                else
                  v20 = *(const std::string::value_type **)&v10[v18];
                if (v24 >= 0)
                  v21 = v23[23];
                else
                  v21 = *(_QWORD *)&v10[v18 + 8];
                std::string::__assign_no_alias<false>((std::string *)&v7[v18], v20, v21);
              }
              else if (v23[23] < 0)
              {
                std::string::__assign_no_alias<true>(&v7[v18], *(char **)&v10[v18], *(_QWORD *)&v10[v18 + 8]);
              }
              else
              {
                v25 = *(_OWORD *)v23;
                *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
                *(_OWORD *)v22 = v25;
              }
            }
            *(_OWORD *)(v22 + 24) = *(_OWORD *)(v23 + 24);
            v18 += 40;
          }
          while (v19 != v18);
          v7 = (char *)a1[4];
        }
        v39 = (uint64_t)v7;
        if (v17 != v9)
        {
          v40 = 0;
          while (1)
          {
            v41 = (std::string *)&v7[v40];
            if (!&v7[v40])
              break;
            v42 = &v17[v40];
            if (v17[v40 + 23] < 0)
            {
              std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)&v17[v40], *(_QWORD *)&v17[v40 + 8]);
            }
            else
            {
              v43 = *(_OWORD *)v42;
              v41->__r_.__value_.__r.__words[2] = *((_QWORD *)v42 + 2);
              *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v43;
            }
            *(_OWORD *)&v7[v40 + 24] = *(_OWORD *)&v17[v40 + 24];
            v40 += 40;
            if (&v17[v40] == v9)
            {
              v39 = (uint64_t)&v7[v40];
              goto LABEL_73;
            }
          }
          __break(1u);
          goto LABEL_113;
        }
LABEL_73:
        a1[4] = v39;
      }
    }
    else
    {
      if (v7)
      {
        v13 = a1[4];
        v14 = (void *)a1[3];
        if ((char *)v13 != v7)
        {
          do
          {
            if (*(char *)(v13 - 17) < 0)
              operator delete(*(void **)(v13 - 40));
            v13 -= 40;
          }
          while ((char *)v13 != v7);
          v14 = *v8;
        }
        a1[4] = (uint64_t)v7;
        operator delete(v14);
        v12 = 0;
        *v8 = 0;
        a1[4] = 0;
        a1[5] = 0;
      }
      if (v11 > 0x666666666666666)
        goto LABEL_113;
      v33 = 0xCCCCCCCCCCCCCCCDLL * (v12 >> 3);
      v34 = 2 * v33;
      if (2 * v33 <= v11)
        v34 = v11;
      v35 = v33 >= 0x333333333333333 ? 0x666666666666666 : v34;
      if (v35 > 0x666666666666666)
        goto LABEL_113;
      v36 = 40 * v35;
      v37 = (char *)operator new(40 * v35);
      a1[3] = (uint64_t)v37;
      a1[4] = (uint64_t)v37;
      a1[5] = (uint64_t)&v37[v36];
      while (v10 != v9)
      {
        if (v10[23] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v37, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
        }
        else
        {
          v38 = *(_OWORD *)v10;
          *((_QWORD *)v37 + 2) = *((_QWORD *)v10 + 2);
          *(_OWORD *)v37 = v38;
        }
        *(_OWORD *)(v37 + 24) = *(_OWORD *)(v10 + 24);
        v10 += 40;
        v37 += 40;
      }
      a1[4] = (uint64_t)v37;
    }
    v44 = (char *)a1[6];
    v45 = (char *)__p;
    v46 = v77;
    v47 = v77 - (_BYTE *)__p;
    v48 = (v77 - (_BYTE *)__p) >> 2;
    v49 = a1[8];
    if (v48 > (v49 - (uint64_t)v44) >> 2)
    {
      if (v44)
      {
        a1[7] = (uint64_t)v44;
        operator delete(v44);
        v49 = 0;
        a1[6] = 0;
        a1[7] = 0;
        a1[8] = 0;
      }
      if ((v47 & 0x8000000000000000) == 0)
      {
        v50 = v49 >> 1;
        if (v49 >> 1 <= v48)
          v50 = v48;
        v51 = (unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL;
        v52 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v51)
          v52 = v50;
        if (!(v52 >> 62))
        {
          v53 = 4 * v52;
          v54 = (char *)operator new(4 * v52);
          v44 = v54;
          a1[7] = (uint64_t)v54;
          v55 = (char **)(a1 + 7);
          *(v55 - 1) = v54;
          v55[1] = &v54[v53];
          if (v46 != v45)
            memcpy(v54, v45, v47);
          goto LABEL_93;
        }
      }
LABEL_113:
      abort();
    }
    v57 = a1[7];
    v55 = (char **)(a1 + 7);
    v56 = (char *)v57;
    v58 = v57 - (_QWORD)v44;
    v59 = (v57 - (uint64_t)v44) >> 2;
    if (v59 >= v48)
    {
      if (v77 == __p)
      {
LABEL_93:
        *v55 = &v44[v47];
        goto LABEL_94;
      }
      v61 = v44;
      v62 = __p;
    }
    else
    {
      v60 = (char *)__p + 4 * v59;
      if (v56 != v44)
      {
        memmove(v44, __p, v58);
        v44 = *v55;
      }
      v47 = v46 - v60;
      if (v46 == v60)
        goto LABEL_93;
      v61 = v44;
      v62 = v60;
    }
    memmove(v61, v62, v47);
    goto LABEL_93;
  }
LABEL_94:
  if (__p)
  {
    v77 = (char *)__p;
    operator delete(__p);
  }
  v63 = (void **)v74;
  if (v74)
  {
    v64 = (void **)v75;
    v65 = v74;
    if (v75 != v74)
    {
      do
      {
        if (*((char *)v64 - 17) < 0)
          operator delete(*(v64 - 5));
        v64 -= 5;
      }
      while (v64 != v63);
      v65 = v74;
    }
    v75 = (char *)v63;
    operator delete(v65);
  }
  v66 = (char *)v72;
  if (v72)
  {
    v67 = v72;
    if (v73 != v72)
    {
      v68 = v73 - 160;
      v69 = (void (***)(char *))(v73 - 160);
      do
      {
        v70 = *v69;
        v69 -= 20;
        (*v70)(v68);
        v71 = v68 == v66;
        v68 = (char *)v69;
      }
      while (!v71);
      v67 = v72;
    }
    v73 = v66;
    operator delete(v67);
  }
}

unint64_t *std::vector<webrtc::RtpCodecCapability>::__assign_with_size[abi:sn180100]<webrtc::RtpCodecCapability*,webrtc::RtpCodecCapability*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *result;
  unint64_t *v21;
  unint64_t v22;
  webrtc::RtpCodec *v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (***v38)(_QWORD);
  uint64_t (***v39)(_QWORD);
  uint64_t (**v40)(_QWORD);
  char v41;
  char v42;

  v8 = a1[2];
  v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 5) < a4)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)*a1;
      if (v10 != v9)
      {
        v12 = (void (***)(_QWORD))(v10 - 160);
        v13 = (void (***)(_QWORD))(v10 - 160);
        do
        {
          v14 = *v13;
          v13 -= 20;
          (*v14)(v12);
          v15 = v12 == (void (***)(_QWORD))v9;
          v12 = v13;
        }
        while (!v15);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 <= 0x199999999999999)
    {
      v16 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
      v17 = 2 * v16;
      if (2 * v16 <= a4)
        v17 = a4;
      v18 = v16 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v17;
      if (v18 <= 0x199999999999999)
      {
        v19 = 20 * v18;
        result = (unint64_t *)operator new(160 * v18);
        v21 = result;
        *a1 = (uint64_t)result;
        a1[1] = (uint64_t)result;
        a1[2] = (uint64_t)&result[v19];
        if (a2 != a3)
        {
          v22 = 0;
          do
          {
            v23 = webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v21[v22 / 8], (const webrtc::RtpCodec *)(a2 + v22));
            v24 = *(_QWORD *)(a2 + v22 + 112);
            *(_QWORD *)v23 = off_24C0BCC10;
            *((_QWORD *)v23 + 13) = *(_QWORD *)(a2 + v22 + 104);
            *((_QWORD *)v23 + 14) = 0;
            result = (unint64_t *)((char *)v23 + 112);
            if (v24 >= 2)
            {
              if ((v24 & 1) != 0)
              {
                result = absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(result, (unint64_t *)(a2 + v22 + 112));
              }
              else
              {
                *result = v24;
                v25 = &v21[v22 / 8];
                *(_OWORD *)(v25 + 15) = *(_OWORD *)(a2 + v22 + 120);
                *(_OWORD *)(v25 + 17) = *(_OWORD *)(a2 + v22 + 136);
                v25[19] = *(_QWORD *)(a2 + v22 + 152);
              }
            }
            v22 += 160;
          }
          while (a2 + v22 != a3);
          v21 = (unint64_t *)((char *)v21 + v22);
        }
        a1[1] = (uint64_t)v21;
        return result;
      }
    }
LABEL_43:
    abort();
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 5) >= a4)
  {
    result = (unint64_t *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<webrtc::RtpCodecCapability *,webrtc::RtpCodecCapability *,webrtc::RtpCodecCapability *>((uint64_t)&v42, a2, a3, v9);
    v36 = v35;
    v37 = a1[1];
    if (v37 != v35)
    {
      v38 = (uint64_t (***)(_QWORD))(v37 - 160);
      v39 = (uint64_t (***)(_QWORD))(v37 - 160);
      do
      {
        v40 = *v39;
        v39 -= 20;
        result = (unint64_t *)(*v40)(v38);
        v15 = v38 == (uint64_t (***)(_QWORD))v36;
        v38 = v39;
      }
      while (!v15);
    }
    a1[1] = v36;
    return result;
  }
  v26 = a2 + 32 * ((a1[1] - v9) >> 5);
  result = (unint64_t *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<webrtc::RtpCodecCapability *,webrtc::RtpCodecCapability *,webrtc::RtpCodecCapability *>((uint64_t)&v41, a2, v26, v9);
  v27 = a1[1];
  if (v26 == a3)
    goto LABEL_40;
  v28 = 0;
  do
  {
    if (!(v27 + v28))
    {
      __break(1u);
      goto LABEL_43;
    }
    webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v27 + v28), (const webrtc::RtpCodec *)(v26 + v28));
    v29 = (_QWORD *)(v27 + v28);
    *v29 = off_24C0BCC10;
    v30 = *(_QWORD *)(v26 + v28 + 104);
    v29[14] = 0;
    result = (unint64_t *)(v27 + v28 + 112);
    *(_QWORD *)(v27 + v28 + 104) = v30;
    v31 = *(_QWORD *)(v26 + v28 + 112);
    if (v31 >= 2)
    {
      if ((v31 & 1) != 0)
      {
        result = absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(result, (unint64_t *)(v26 + v28 + 112));
      }
      else
      {
        *result = v31;
        v32 = v27 + v28;
        v33 = *(_OWORD *)(v26 + v28 + 120);
        v34 = *(_OWORD *)(v26 + v28 + 136);
        *(_QWORD *)(v32 + 152) = *(_QWORD *)(v26 + v28 + 152);
        *(_OWORD *)(v32 + 136) = v34;
        *(_OWORD *)(v32 + 120) = v33;
      }
    }
    v28 += 160;
  }
  while (v26 + v28 != a3);
  v27 += v28;
LABEL_40:
  a1[1] = v27;
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<webrtc::RtpCodecCapability *,webrtc::RtpCodecCapability *,webrtc::RtpCodecCapability *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  const std::string::value_type *v8;
  size_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  char **v16;
  char v17;
  __int128 v18;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v13 = a4 + v7;
    v14 = a2 + v7;
    if (a2 != a4)
    {
      v15 = (std::string *)(v13 + 8);
      v16 = (char **)(v14 + 8);
      v17 = *(_BYTE *)(v14 + 31);
      if (*(char *)(v13 + 31) < 0)
      {
        if (v17 >= 0)
          v8 = (const std::string::value_type *)(v14 + 8);
        else
          v8 = *v16;
        if (v17 >= 0)
          v9 = *(unsigned __int8 *)(v14 + 31);
        else
          v9 = *(_QWORD *)(a2 + v7 + 16);
        std::string::__assign_no_alias<false>(v15, v8, v9);
      }
      else if ((*(_BYTE *)(v14 + 31) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v15, *v16, *(_QWORD *)(a2 + v7 + 16));
      }
      else
      {
        v18 = *(_OWORD *)v16;
        *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v18;
      }
      v10 = a4 + v7;
      v11 = *(_OWORD *)(a2 + v7 + 32);
      *(_BYTE *)(v10 + 48) = *(_BYTE *)(a2 + v7 + 48);
      *(_OWORD *)(v10 + 32) = v11;
      std::vector<webrtc::RtcpFeedback>::__assign_with_size[abi:sn180100]<webrtc::RtcpFeedback*,webrtc::RtcpFeedback*>(a4 + v7 + 56, *(uint64_t **)(a2 + v7 + 56), *(uint64_t **)(a2 + v7 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + v7 + 64) - *(_QWORD *)(a2 + v7 + 56)) >> 2));
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(a4 + v7 + 80, *(char **)(a2 + v7 + 80), (char *)(a2 + 88 + v7));
    }
    v12 = *(_DWORD *)(v14 + 104);
    *(_BYTE *)(v13 + 108) = *(_BYTE *)(v14 + 108);
    *(_DWORD *)(v13 + 104) = v12;
    absl::InlinedVector<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::operator=((unint64_t *)(v13 + 112), (unint64_t *)(v14 + 112));
    v7 += 160;
  }
  while (v14 + 160 != v6);
  return v6;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::RtpCapabilities,cricket::MediaType>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  webrtc::ReturnType<webrtc::RtpCapabilities>::Invoke<webrtc::PeerConnectionFactoryInterface const,webrtc::RtpCapabilities (webrtc::PeerConnectionFactoryInterface::*)(cricket::MediaType)const,cricket::MediaType>((uint64_t *)(*a1 + 24), *(_QWORD *)v1, *(void (**)(void **__return_ptr, _QWORD *, uint64_t))(v1 + 8), *(_QWORD *)(v1 + 16), **(unsigned int **)(v1 + 96));
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 104));
  *(_BYTE *)(v1 + 217) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 168));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 104));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::MediaStreamInterface>,std::string const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v5 + v2);
  v2(&v9, v5, v4);
  v6 = v9;
  v9 = 0;
  v7 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::AudioSourceInterface>,cricket::AudioOptions const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v5 + v2);
  v2(&v9, v5, v4);
  v6 = v9;
  v9 = 0;
  v7 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::VideoTrackInterface>,webrtc::scoped_refptr<webrtc::VideoTrackSourceInterface>,std::string_view>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t *, _QWORD, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, _QWORD, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v5 = *(uint64_t **)(*a1 + 32);
  v4 = *(_QWORD **)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, _QWORD, _QWORD))(*v6 + v2);
  v7 = *v5;
  *v5 = 0;
  v11 = v7;
  v2(&v12, v6, &v11, *v4, v4[1]);
  v8 = v12;
  v12 = 0;
  v9 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,webrtc::scoped_refptr<webrtc::AudioTrackInterface>,std::string const&,webrtc::AudioSourceInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t, _QWORD);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = *(_QWORD **)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, _QWORD))(*v6 + v2);
  v2(&v10, v6, v4, *v5);
  v7 = v10;
  v10 = 0;
  v8 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,BOOL,__sFILE *,long long>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, _QWORD, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = *(_QWORD **)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + v2);
  *(_BYTE *)(v1 + 24) = v2(v6, *v4, *v5);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionFactoryInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t rtc::RefCountedObject<webrtc::PeerConnectionFactory>::RefCountedObject<webrtc::scoped_refptr<webrtc::ConnectionContext> &,webrtc::PeerConnectionFactoryDependencies *>(uint64_t a1, unsigned int **a2, _QWORD *a3)
{
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v4 = *a2;
  if (*a2)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = (_QWORD *)*a3;
    *(_QWORD *)a1 = &unk_24C0B9858;
    *(_QWORD *)(a1 + 8) = v4;
    do
      v7 = __ldxr(v4);
    while (__stxr(v7 + 1, v4));
  }
  else
  {
    v6 = (_QWORD *)*a3;
    *(_QWORD *)a1 = &unk_24C0B9858;
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 20) = 0x200000010;
  *(_DWORD *)(a1 + 28) = 65537;
  *(_BYTE *)(a1 + 32) = 0;
  v8 = v6[6];
  v6[6] = 0;
  *(_QWORD *)(a1 + 40) = v8;
  v9 = v6[7];
  v6[7] = 0;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = v6[8];
  v6[8] = 0;
  *(_QWORD *)(a1 + 56) = v10;
  v11 = v6[9];
  v6[9] = 0;
  *(_QWORD *)(a1 + 64) = v11;
  v12 = v6[12];
  v6[12] = 0;
  *(_QWORD *)(a1 + 72) = v12;
  v13 = (_QWORD *)v6[15];
  if (v13)
  {
    v6[15] = 0;
  }
  else
  {
    v13 = (_QWORD *)operator new();
    *v13 = &off_24C0B98F0;
  }
  *(_QWORD *)(a1 + 80) = v13;
  v14 = v6[16];
  v6[16] = 0;
  *(_QWORD *)(a1 + 88) = v14;
  v15 = v6[17];
  v6[17] = 0;
  *(_QWORD *)(a1 + 96) = v15;
  if (v4)
  {
    do
    {
      v16 = __ldaxr(v4);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v4));
    if (!v17)
    {
      webrtc::ConnectionContext::~ConnectionContext((webrtc::ConnectionContext *)v4);
      MEMORY[0x20BD0ADEC]();
    }
  }
  *(_QWORD *)a1 = off_24C0B9A50;
  *(_DWORD *)(a1 + 104) = 0;
  return a1;
}

uint64_t rtc::RefCountedObject<webrtc::PeerConnectionFactory>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 104);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::PeerConnectionFactory>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 26;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::PeerConnectionFactory>::~RefCountedObject(webrtc::PeerConnectionFactory *a1)
{
  webrtc::PeerConnectionFactory::~PeerConnectionFactory(a1);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::PeerConnectionFactory>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 104));
  return v1 == 1;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnectionFactory::~PeerConnectionFactory()::$_1>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 88);
  *(_QWORD *)(v1 + 88) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::PeerConnectionFactory::CreatePeerConnectionOrError(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_1>(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  __n128 v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t result;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD v23[5];
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v2 = *(uint64_t **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = **(_QWORD **)a1;
  v24 = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v25 = *(_OWORD *)(v2 + 1);
  v26 = *(_OWORD *)(v2 + 3);
  v7 = webrtc::EnvironmentFactory::CreateWithDefaults(&v24, (uint64_t)v23);
  v8 = v24;
  if (v24)
  {
    v9 = (unsigned int *)(v24 + 8);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v8 + 8))(v8, v7);
  }
  v12 = *(uint64_t **)a1;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *, __n128))(**(_QWORD **)(v3 + 40) + 16))(&v24, *(_QWORD *)(v3 + 40), v23, v7);
  v13 = v24;
  if (!v24)
  {
    v24 = 0;
    result = v23[0];
    if (!v23[0])
      return result;
    goto LABEL_17;
  }
  v12[4] = v24;
  v24 = 0;
  v14 = operator new();
  v15 = *v12;
  *(_DWORD *)(v14 + 8) = 0;
  v16 = (unsigned int *)(v14 + 8);
  *(_QWORD *)v14 = &off_24C0B3D50;
  *(_QWORD *)(v14 + 16) = v15;
  *(_QWORD *)(v14 + 24) = v13;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  *v12 = v14;
  v18 = v24;
  v24 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  result = v23[0];
  if (v23[0])
  {
LABEL_17:
    v20 = (unsigned int *)(result + 8);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<std::unique_ptr<webrtc::Call> rtc::Thread::BlockingCall<webrtc::PeerConnectionFactory::CreatePeerConnectionOrError(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_2,std::unique_ptr<webrtc::Call>,void>(webrtc::PeerConnectionFactory::CreatePeerConnectionOrError(webrtc::PeerConnectionInterface::RTCConfiguration const&,webrtc::PeerConnectionDependencies)::$_2 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *p_p;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  void *__p;
  uint64_t v22;
  unsigned __int8 v23;
  _QWORD v24[4];
  char v25[32];
  uint64_t v26;
  _QWORD v27[4];
  char v28[32];
  uint64_t v29;
  _QWORD v30[4];
  char v31[32];
  uint64_t v32;
  unsigned int *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  _QWORD v48[4];

  v48[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 8);
  v3 = *v2;
  v4 = v2[1];
  v5 = *(_QWORD **)(*v2 + 8);
  v6 = v5[3];
  v33 = *(unsigned int **)v4;
  if (v33)
  {
    v7 = v33 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v5 = *(_QWORD **)(v3 + 8);
  }
  v9 = *(_OWORD *)(v4 + 8);
  v35 = *(_OWORD *)(v4 + 24);
  v34 = v9;
  v36 = 0x493E000000000;
  v37 = -1;
  v40 = 0u;
  v38 = 0u;
  v39 = 0u;
  v46 = 0;
  v47 = 0;
  v41 = v6;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  LOBYTE(v45) = 0;
  v10 = v5[12];
  if (v10 && v5[26])
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    v30[0] = off_24C0B4170;
    memset(&v30[1], 0, 24);
    v31[23] = 3;
    if (v31 > "min" || &v31[3] <= "min")
    {
      strcpy(v31, "min");
      v31[24] = 0;
      v30[0] = &unk_24C0B0208;
      v32 = 30000;
      v27[0] = off_24C0B4170;
      memset(&v27[1], 0, 24);
      v28[23] = 5;
      if (v28 > "start" || &v28[5] <= "start")
      {
        strcpy(v28, "start");
        v28[24] = 0;
        v27[0] = &unk_24C0B0208;
        v29 = 300000;
        v24[0] = off_24C0B4170;
        memset(&v24[1], 0, 24);
        v25[23] = 3;
        if (v25 > "max" || &v25[3] <= "max")
        {
          strcpy(v25, "max");
          v25[24] = 0;
          v24[0] = &unk_24C0B0208;
          v26 = 2000000;
          v48[0] = v30;
          v48[1] = v27;
          v48[2] = v24;
          (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(v4 + 8) + 16))(&__p, *(_QWORD *)(v4 + 8), "WebRTC-PcFactoryDefaultBitrates", 31);
          if (((char)v23 & 0x80000000) == 0)
          {
            v12 = v23;
            p_p = (char *)&__p;
LABEL_19:
            webrtc::ParseFieldTrial(v48, 3, p_p, v12);
            if ((char)v23 < 0)
              operator delete(__p);
            __asm { BR              X12 }
          }
          v12 = v22;
          if ((v22 & 0x8000000000000000) == 0)
          {
            p_p = (char *)__p;
            if (!v22 || __p)
              goto LABEL_19;
          }
        }
      }
    }
    __break(1u);
  }
  v48[0] = 0;
  if (v33)
  {
    v14 = v33 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
  }
  v17 = *(uint64_t **)a1;
  v18 = v48[0];
  v48[0] = 0;
  v19 = *v17;
  *v17 = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 216))(v19);
  result = v48[0];
  v48[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 216))(result);
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 8;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>>::~RefCountedObject(_QWORD *a1)
{
  webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::~PeerConnectionProxyWithInternal(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::local_streams@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F16EA0;
  v7 = 0;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::scoped_refptr<webrtc::StreamCollectionInterface>>::Marshal(a2, &v5, *(rtc::Thread **)(a1 + 8));
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::remote_streams@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F16E40;
  v7 = 0;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::scoped_refptr<webrtc::StreamCollectionInterface>>::Marshal(a2, &v5, *(rtc::Thread **)(a1 + 8));
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::AddStream(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  uint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t *v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F05250;
  v19 = &v10;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, uint64_t))v17;
    v5 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v17);
    v6 = v4(v5, *v19);
    v18 = v6;
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,webrtc::MediaStreamInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
    v6 = v18 != 0;
  }
  pthread_mutex_destroy(&v20);
  pthread_cond_destroy(&v21);
  return v6;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::RemoveStream(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F05260;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::MediaStreamInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::AddTrack(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  rtc::Thread *v6;
  TimeDelta v7;
  TimeDelta v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  int v18;
  __int128 __p;
  _BYTE v20[15];
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  pthread_mutex_t v25;
  pthread_cond_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F05270;
  v18 = 10;
  v20[14] = 0;
  *(_QWORD *)v20 = 0;
  __p = 0uLL;
  *(_QWORD *)&v20[5] = 0;
  LOBYTE(v21) = 0;
  v22 = 0;
  v23 = a2;
  v24 = a3;
  rtc::Event::Event((rtc::Event *)&v25, 0, 0);
  v6 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v6))
  {
    webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>> (webrtc::PeerConnectionInterface::*)(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const&),webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const>((uint64_t)&v18, v16, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t))v17, *((uint64_t *)&v17 + 1), v23, v24);
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>,webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v6 + 8))(v6, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v25, v7, v8);
  }
  v9 = *(_DWORD *)&v20[8];
  *(_DWORD *)a4 = v18;
  *(_QWORD *)(a4 + 24) = *(_QWORD *)v20;
  *(_OWORD *)(a4 + 8) = __p;
  __p = 0uLL;
  *(_QWORD *)v20 = 0;
  *(_DWORD *)(a4 + 32) = v9;
  *(_DWORD *)(a4 + 35) = *(_DWORD *)&v20[11];
  *(_BYTE *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = 0;
  if (v22)
  {
    v10 = v21;
    v21 = 0;
    *(_QWORD *)(a4 + 40) = v10;
    *(_BYTE *)(a4 + 48) = 1;
  }
  pthread_mutex_destroy(&v25);
  pthread_cond_destroy(&v26);
  if (v22 && v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if ((v20[7] & 0x80000000) != 0)
    operator delete((void *)__p);
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::AddTrack(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  rtc::Thread *v7;
  TimeDelta v8;
  TimeDelta v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 __p;
  _BYTE v21[15];
  uint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  pthread_mutex_t v27;
  pthread_cond_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v17 = *(_QWORD *)(a1 + 24);
  v18 = xmmword_208F16E50;
  v19 = 10;
  v21[14] = 0;
  *(_QWORD *)v21 = 0;
  __p = 0uLL;
  *(_QWORD *)&v21[5] = 0;
  LOBYTE(v22) = 0;
  v23 = 0;
  v24 = a2;
  v25 = a3;
  v26 = a4;
  rtc::Event::Event((rtc::Event *)&v27, 0, 0);
  v7 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v7))
  {
    webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>> (webrtc::PeerConnectionInterface::*)(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const&,std::vector<webrtc::RtpEncodingParameters> const&),webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const,std::vector<webrtc::RtpEncodingParameters> const>((uint64_t)&v19, v17, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t, uint64_t))v18, *((uint64_t *)&v18 + 1), v24, v25, v26);
  }
  else
  {
    v14.n128_u64[0] = (unint64_t)&v17;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>,webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const&,std::vector<webrtc::RtpEncodingParameters> const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v7 + 8))(v7, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    v8.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v9.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v27, v8, v9);
  }
  v10 = *(_DWORD *)&v21[8];
  *(_DWORD *)a5 = v19;
  *(_QWORD *)(a5 + 24) = *(_QWORD *)v21;
  *(_OWORD *)(a5 + 8) = __p;
  __p = 0uLL;
  *(_QWORD *)v21 = 0;
  *(_DWORD *)(a5 + 32) = v10;
  *(_DWORD *)(a5 + 35) = *(_DWORD *)&v21[11];
  *(_BYTE *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 48) = 0;
  if (v23)
  {
    v11 = v22;
    v22 = 0;
    *(_QWORD *)(a5 + 40) = v11;
    *(_BYTE *)(a5 + 48) = 1;
  }
  pthread_mutex_destroy(&v27);
  pthread_cond_destroy(&v28);
  if (v23 && v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if ((v21[7] & 0x80000000) != 0)
    operator delete((void *)__p);
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::RemoveTrackOrError(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  rtc::Thread *v5;
  void (*v6)(uint64_t **__return_ptr, _QWORD *, uint64_t *);
  _QWORD *v7;
  uint64_t v8;
  TimeDelta v9;
  TimeDelta v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t *);
  _DWORD v17[2];
  uint64_t v18;
  __int128 v19;
  int v20;
  __int128 __p;
  _BYTE v22[15];
  uint64_t *v23;
  pthread_mutex_t v24;
  pthread_cond_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v18 = *(_QWORD *)(a1 + 24);
  v19 = xmmword_208F05280;
  v20 = 0;
  v22[14] = 0;
  *(_QWORD *)v22 = 0;
  __p = 0uLL;
  *(_QWORD *)&v22[5] = 0;
  v23 = a2;
  rtc::Event::Event((rtc::Event *)&v24, 0, 0);
  v5 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v5))
  {
    v6 = (void (*)(uint64_t **__return_ptr, _QWORD *, uint64_t *))v19;
    v7 = (_QWORD *)(v18 + (*((uint64_t *)&v19 + 1) >> 1));
    if ((BYTE8(v19) & 1) != 0)
      v6 = *(void (**)(uint64_t **__return_ptr, _QWORD *, uint64_t *))(*v7 + v19);
    v8 = *v23;
    *v23 = 0;
    v13 = v8;
    v6(&v14, v7, &v13);
    v20 = (int)v14;
    if ((v22[7] & 0x80000000) != 0)
      operator delete((void *)__p);
    __p = v15;
    *(_QWORD *)v22 = v16;
    HIBYTE(v16) = 0;
    LOBYTE(v15) = 0;
    *(_DWORD *)&v22[8] = v17[0];
    *(_DWORD *)&v22[11] = *(_DWORD *)((char *)v17 + 3);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  else
  {
    v14 = &v18;
    *((_QWORD *)&v15 + 1) = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCError,webrtc::scoped_refptr<webrtc::RtpSenderInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, uint64_t **, uint64_t *, char *))(*(_QWORD *)v5 + 8))(v5, &v14, &v13, &v12);
    (*((void (**)(uint64_t, uint64_t **, uint64_t **))&v15 + 1))(1, &v14, &v14);
    v9.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v10.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v24, v9, v10);
  }
  v11 = *(_DWORD *)&v22[8];
  *(_DWORD *)a3 = v20;
  *(_OWORD *)(a3 + 8) = __p;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)v22;
  __p = 0uLL;
  *(_QWORD *)v22 = 0;
  *(_DWORD *)(a3 + 32) = v11;
  *(_DWORD *)(a3 + 35) = *(_DWORD *)&v22[11];
  pthread_mutex_destroy(&v24);
  pthread_cond_destroy(&v25);
  if ((v22[7] & 0x80000000) != 0)
    operator delete((void *)__p);
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::AddTransceiver(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  rtc::Thread *v5;
  TimeDelta v6;
  TimeDelta v7;
  int v8;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  int v17;
  __int128 __p;
  _BYTE v19[15];
  uint64_t v20;
  char v21;
  uint64_t *v22;
  pthread_mutex_t v23;
  pthread_cond_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F05290;
  v17 = 10;
  v19[14] = 0;
  *(_QWORD *)v19 = 0;
  __p = 0uLL;
  *(_QWORD *)&v19[5] = 0;
  LOBYTE(v20) = 0;
  v21 = 0;
  v22 = a2;
  rtc::Event::Event((rtc::Event *)&v23, 0, 0);
  v5 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v5))
  {
    webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>> (webrtc::PeerConnectionInterface::*)(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>),webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>>((uint64_t)&v17, v15, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t *))v16, *((uint64_t *)&v16 + 1), v22);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>,webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v5 + 8))(v5, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v23, v6, v7);
  }
  v8 = *(_DWORD *)&v19[8];
  *(_DWORD *)a3 = v17;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)v19;
  *(_OWORD *)(a3 + 8) = __p;
  __p = 0uLL;
  *(_QWORD *)v19 = 0;
  *(_DWORD *)(a3 + 32) = v8;
  *(_DWORD *)(a3 + 35) = *(_DWORD *)&v19[11];
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  if (v21)
  {
    v9 = v20;
    v20 = 0;
    *(_QWORD *)(a3 + 40) = v9;
    *(_BYTE *)(a3 + 48) = 1;
  }
  pthread_mutex_destroy(&v23);
  pthread_cond_destroy(&v24);
  if (v21 && v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if ((v19[7] & 0x80000000) != 0)
    operator delete((void *)__p);
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::AddTransceiver(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  rtc::Thread *v6;
  TimeDelta v7;
  TimeDelta v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  int v18;
  __int128 __p;
  _BYTE v20[15];
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  pthread_mutex_t v25;
  pthread_cond_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F052A0;
  v18 = 10;
  v20[14] = 0;
  *(_QWORD *)v20 = 0;
  __p = 0uLL;
  *(_QWORD *)&v20[5] = 0;
  LOBYTE(v21) = 0;
  v22 = 0;
  v23 = a2;
  v24 = a3;
  rtc::Event::Event((rtc::Event *)&v25, 0, 0);
  v6 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v6))
  {
    webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>> (webrtc::PeerConnectionInterface::*)(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const&),webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const>((uint64_t)&v18, v16, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t))v17, *((uint64_t *)&v17 + 1), v23, v24);
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>,webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,webrtc::RtpTransceiverInit const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v6 + 8))(v6, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v25, v7, v8);
  }
  v9 = *(_DWORD *)&v20[8];
  *(_DWORD *)a4 = v18;
  *(_QWORD *)(a4 + 24) = *(_QWORD *)v20;
  *(_OWORD *)(a4 + 8) = __p;
  __p = 0uLL;
  *(_QWORD *)v20 = 0;
  *(_DWORD *)(a4 + 32) = v9;
  *(_DWORD *)(a4 + 35) = *(_DWORD *)&v20[11];
  *(_BYTE *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = 0;
  if (v22)
  {
    v10 = v21;
    v21 = 0;
    *(_QWORD *)(a4 + 40) = v10;
    *(_BYTE *)(a4 + 48) = 1;
  }
  pthread_mutex_destroy(&v25);
  pthread_cond_destroy(&v26);
  if (v22 && v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if ((v20[7] & 0x80000000) != 0)
    operator delete((void *)__p);
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::AddTransceiver(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  rtc::Thread *v5;
  TimeDelta v6;
  TimeDelta v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  int v18;
  __int128 __p;
  _BYTE v20[15];
  uint64_t v21;
  char v22;
  unsigned int *v23;
  pthread_mutex_t v24;
  pthread_cond_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F052B0;
  v18 = 10;
  v20[14] = 0;
  *(_QWORD *)v20 = 0;
  __p = 0uLL;
  *(_QWORD *)&v20[5] = 0;
  LOBYTE(v21) = 0;
  v22 = 0;
  v23 = (unsigned int *)&v10;
  rtc::Event::Event((rtc::Event *)&v24, 0, 0);
  v5 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v5))
  {
    webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>> (webrtc::PeerConnectionInterface::*)(cricket::MediaType),cricket::MediaType>((uint64_t)&v18, v16, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t))v17, *((uint64_t *)&v17 + 1), *v23);
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>,cricket::MediaType>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v5 + 8))(v5, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v24, v6, v7);
  }
  v8 = *(_DWORD *)&v20[8];
  *(_DWORD *)a3 = v18;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)v20;
  *(_OWORD *)(a3 + 8) = __p;
  __p = 0uLL;
  *(_QWORD *)v20 = 0;
  *(_DWORD *)(a3 + 32) = v8;
  *(_DWORD *)(a3 + 35) = *(_DWORD *)&v20[11];
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  if (v22)
  {
    v9 = v21;
    v21 = 0;
    *(_QWORD *)(a3 + 40) = v9;
    *(_BYTE *)(a3 + 48) = 1;
  }
  pthread_mutex_destroy(&v24);
  pthread_cond_destroy(&v25);
  if (v22 && v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if ((v20[7] & 0x80000000) != 0)
    operator delete((void *)__p);
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::AddTransceiver(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  rtc::Thread *v6;
  TimeDelta v7;
  TimeDelta v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 __p;
  _BYTE v21[15];
  uint64_t v22;
  char v23;
  unsigned int *v24;
  uint64_t v25;
  pthread_mutex_t v26;
  pthread_cond_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  v17 = *(_QWORD *)(a1 + 24);
  v18 = xmmword_208F16E60;
  v19 = 10;
  v21[14] = 0;
  *(_QWORD *)v21 = 0;
  __p = 0uLL;
  *(_QWORD *)&v21[5] = 0;
  LOBYTE(v22) = 0;
  v23 = 0;
  v24 = (unsigned int *)&v11;
  v25 = a3;
  rtc::Event::Event((rtc::Event *)&v26, 0, 0);
  v6 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v6))
  {
    webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>> (webrtc::PeerConnectionInterface::*)(cricket::MediaType,webrtc::RtpTransceiverInit const&),cricket::MediaType,webrtc::RtpTransceiverInit const>((uint64_t)&v19, v17, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))v18, *((uint64_t *)&v18 + 1), *v24, v25);
  }
  else
  {
    v14.n128_u64[0] = (unint64_t)&v17;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>,cricket::MediaType,webrtc::RtpTransceiverInit const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v6 + 8))(v6, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v26, v7, v8);
  }
  v9 = *(_DWORD *)&v21[8];
  *(_DWORD *)a4 = v19;
  *(_QWORD *)(a4 + 24) = *(_QWORD *)v21;
  *(_OWORD *)(a4 + 8) = __p;
  __p = 0uLL;
  *(_QWORD *)v21 = 0;
  *(_DWORD *)(a4 + 32) = v9;
  *(_DWORD *)(a4 + 35) = *(_DWORD *)&v21[11];
  *(_BYTE *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = 0;
  if (v23)
  {
    v10 = v22;
    v22 = 0;
    *(_QWORD *)(a4 + 40) = v10;
    *(_BYTE *)(a4 + 48) = 1;
  }
  pthread_mutex_destroy(&v26);
  pthread_cond_destroy(&v27);
  if (v23 && v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if ((v21[7] & 0x80000000) != 0)
    operator delete((void *)__p);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::CreateSender@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  rtc::Thread *v6;
  void (*v7)(__n128 *__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  TimeDelta v11;
  TimeDelta v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  char v16;
  __n128 v17;
  __n128 (*v18)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v19)(uint64_t *);
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  pthread_mutex_t v25;
  pthread_cond_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v20 = *(_QWORD *)(a1 + 24);
  v21 = xmmword_208F16E70;
  v22 = 0;
  v23 = a2;
  v24 = a3;
  rtc::Event::Event((rtc::Event *)&v25, 0, 0);
  v6 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v6))
  {
    v7 = (void (*)(__n128 *__return_ptr, _QWORD *, uint64_t, uint64_t))v21;
    v8 = (_QWORD *)(v20 + (*((uint64_t *)&v21 + 1) >> 1));
    if ((BYTE8(v21) & 1) != 0)
      v7 = *(void (**)(__n128 *__return_ptr, _QWORD *, uint64_t, uint64_t))(*v8 + v21);
    v7(&v17, v8, v23, v24);
    v9 = v17.n128_u64[0];
    v17.n128_u64[0] = 0;
    v10 = v22;
    v22 = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      if (v17.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v17.n128_u64[0] + 8))(v17.n128_u64[0]);
    }
  }
  else
  {
    v17.n128_u64[0] = (unint64_t)&v20;
    v18 = absl::internal_any_invocable::LocalManagerTrivial;
    v19 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::scoped_refptr<webrtc::RtpSenderInterface>,std::string const&,std::string const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v6 + 8))(v6, &v17, &v16, &v15);
    v18(1, &v17, &v17);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v25, v11, v12);
  }
  v13 = v22;
  v22 = 0;
  *a4 = v13;
  pthread_mutex_destroy(&v25);
  pthread_cond_destroy(&v26);
  result = v22;
  if (v22)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  return result;
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::GetSenders(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  rtc::Thread *v4;
  void (*v5)(__int128 *__return_ptr, _QWORD *);
  _QWORD *v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  TimeDelta v12;
  TimeDelta v13;
  __int128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  char *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __n128 (*v24)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v25)(uint64_t *);
  uint64_t v26;
  __int128 v27;
  void *__p[2];
  __n128 (*v29)(uint64_t, __n128 *, __n128 *);
  pthread_mutex_t v30;
  pthread_cond_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v26 = *(_QWORD *)(a1 + 24);
  v27 = xmmword_208F16E80;
  __p[1] = 0;
  v29 = 0;
  __p[0] = 0;
  rtc::Event::Event((rtc::Event *)&v30, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(__int128 *__return_ptr, _QWORD *))v27;
    v6 = (_QWORD *)(v26 + (*((uint64_t *)&v27 + 1) >> 1));
    if ((BYTE8(v27) & 1) != 0)
      v5 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v6 + v27);
    v5(&v23, v6);
    v7 = (char *)__p[0];
    if (__p[0])
    {
      v8 = (char *)__p[1];
      v9 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v11 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          v10 = v11;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        while (v8 != v7);
        v9 = __p[0];
      }
      __p[1] = v7;
      operator delete(v9);
    }
    v14 = v23;
    v15 = v24;
  }
  else
  {
    *(_QWORD *)&v23 = &v26;
    v24 = absl::internal_any_invocable::LocalManagerTrivial;
    v25 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,std::vector<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __int128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v23, &v22, &v21);
    v24(1, (__n128 *)&v23, (__n128 *)&v23);
    v12.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v13.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v30, v12, v13);
    v14 = *(_OWORD *)__p;
    v15 = v29;
  }
  *(_OWORD *)a2 = v14;
  *(_QWORD *)(a2 + 16) = v15;
  __p[1] = 0;
  v29 = 0;
  __p[0] = 0;
  pthread_mutex_destroy(&v30);
  pthread_cond_destroy(&v31);
  v16 = (char *)__p[0];
  if (__p[0])
  {
    v17 = (char *)__p[1];
    v18 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v20 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        v19 = v20;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      while (v17 != v16);
      v18 = __p[0];
    }
    __p[1] = v16;
    operator delete(v18);
  }
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::GetReceivers(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  rtc::Thread *v4;
  void (*v5)(__int128 *__return_ptr, _QWORD *);
  _QWORD *v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  TimeDelta v12;
  TimeDelta v13;
  __int128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  char *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __n128 (*v24)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v25)(uint64_t *);
  uint64_t v26;
  __int128 v27;
  void *__p[2];
  __n128 (*v29)(uint64_t, __n128 *, __n128 *);
  pthread_mutex_t v30;
  pthread_cond_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v26 = *(_QWORD *)(a1 + 24);
  v27 = xmmword_208F16EB0;
  __p[1] = 0;
  v29 = 0;
  __p[0] = 0;
  rtc::Event::Event((rtc::Event *)&v30, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(__int128 *__return_ptr, _QWORD *))v27;
    v6 = (_QWORD *)(v26 + (*((uint64_t *)&v27 + 1) >> 1));
    if ((BYTE8(v27) & 1) != 0)
      v5 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v6 + v27);
    v5(&v23, v6);
    v7 = (char *)__p[0];
    if (__p[0])
    {
      v8 = (char *)__p[1];
      v9 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v11 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          v10 = v11;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        while (v8 != v7);
        v9 = __p[0];
      }
      __p[1] = v7;
      operator delete(v9);
    }
    v14 = v23;
    v15 = v24;
  }
  else
  {
    *(_QWORD *)&v23 = &v26;
    v24 = absl::internal_any_invocable::LocalManagerTrivial;
    v25 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,std::vector<webrtc::scoped_refptr<webrtc::RtpReceiverInterface>>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __int128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v23, &v22, &v21);
    v24(1, (__n128 *)&v23, (__n128 *)&v23);
    v12.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v13.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v30, v12, v13);
    v14 = *(_OWORD *)__p;
    v15 = v29;
  }
  *(_OWORD *)a2 = v14;
  *(_QWORD *)(a2 + 16) = v15;
  __p[1] = 0;
  v29 = 0;
  __p[0] = 0;
  pthread_mutex_destroy(&v30);
  pthread_cond_destroy(&v31);
  v16 = (char *)__p[0];
  if (__p[0])
  {
    v17 = (char *)__p[1];
    v18 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v20 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        v19 = v20;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      while (v17 != v16);
      v18 = __p[0];
    }
    __p[1] = v16;
    operator delete(v18);
  }
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::GetTransceivers(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  rtc::Thread *v4;
  void (*v5)(__int128 *__return_ptr, _QWORD *);
  _QWORD *v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  TimeDelta v12;
  TimeDelta v13;
  __int128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  char *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __n128 (*v24)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v25)(uint64_t *);
  uint64_t v26;
  __int128 v27;
  void *__p[2];
  __n128 (*v29)(uint64_t, __n128 *, __n128 *);
  pthread_mutex_t v30;
  pthread_cond_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v26 = *(_QWORD *)(a1 + 24);
  v27 = xmmword_208F16E90;
  __p[1] = 0;
  v29 = 0;
  __p[0] = 0;
  rtc::Event::Event((rtc::Event *)&v30, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(__int128 *__return_ptr, _QWORD *))v27;
    v6 = (_QWORD *)(v26 + (*((uint64_t *)&v27 + 1) >> 1));
    if ((BYTE8(v27) & 1) != 0)
      v5 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v6 + v27);
    v5(&v23, v6);
    v7 = (char *)__p[0];
    if (__p[0])
    {
      v8 = (char *)__p[1];
      v9 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v11 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          v10 = v11;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        while (v8 != v7);
        v9 = __p[0];
      }
      __p[1] = v7;
      operator delete(v9);
    }
    v14 = v23;
    v15 = v24;
  }
  else
  {
    *(_QWORD *)&v23 = &v26;
    v24 = absl::internal_any_invocable::LocalManagerTrivial;
    v25 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __int128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v23, &v22, &v21);
    v24(1, (__n128 *)&v23, (__n128 *)&v23);
    v12.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v13.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v30, v12, v13);
    v14 = *(_OWORD *)__p;
    v15 = v29;
  }
  *(_OWORD *)a2 = v14;
  *(_QWORD *)(a2 + 16) = v15;
  __p[1] = 0;
  v29 = 0;
  __p[0] = 0;
  pthread_mutex_destroy(&v30);
  pthread_cond_destroy(&v31);
  v16 = (char *)__p[0];
  if (__p[0])
  {
    v17 = (char *)__p[1];
    v18 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v20 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        v19 = v20;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      while (v17 != v16);
      v18 = __p[0];
    }
    __p[1] = v16;
    operator delete(v18);
  }
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::GetStats(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  rtc::Thread *v5;
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t, _QWORD);
  _QWORD *v7;
  uint64_t v8;
  TimeDelta v9;
  TimeDelta v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  __n128 v17;
  __n128 (*v18)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v19)(uint64_t *);
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned int *v25;
  pthread_mutex_t v26;
  pthread_cond_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v13 = a3;
  v14 = a2;
  v12 = a4;
  v20 = *(_QWORD *)(a1 + 24);
  v21 = xmmword_208F04E70;
  v23 = &v14;
  v24 = &v13;
  v25 = (unsigned int *)&v12;
  rtc::Event::Event((rtc::Event *)&v26, 0, 0);
  v5 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v5))
  {
    v6 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, _QWORD))v21;
    v7 = (_QWORD *)(v20 + (*((uint64_t *)&v21 + 1) >> 1));
    if ((BYTE8(v21) & 1) != 0)
      v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*v7 + v21);
    v8 = v6(v7, *v23, *v24, *v25);
    v22 = v8;
  }
  else
  {
    v17.n128_u64[0] = (unint64_t)&v20;
    v18 = absl::internal_any_invocable::LocalManagerTrivial;
    v19 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,webrtc::StatsObserver *,webrtc::MediaStreamTrackInterface *,webrtc::PeerConnectionInterface::StatsOutputLevel>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v5 + 8))(v5, &v17, &v16, &v15);
    v18(1, &v17, &v17);
    v9.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v10.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v26, v9, v10);
    v8 = v22 != 0;
  }
  pthread_mutex_destroy(&v26);
  pthread_cond_destroy(&v27);
  return v8;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::GetStats(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F04E80;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::RTCStatsCollectorCallback *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::GetStats(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  rtc::Thread *v4;
  void (*v5)(_QWORD *, __n128 *, uint64_t *);
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  TimeDelta v10;
  TimeDelta v11;
  char v13;
  uint64_t v14;
  __n128 v15;
  __n128 (*v16)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v17)(uint64_t *);
  uint64_t v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t *v21;
  pthread_mutex_t v22;
  pthread_cond_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v18 = *(_QWORD *)(a1 + 24);
  v19 = xmmword_208F04E90;
  v20 = a2;
  v21 = a3;
  rtc::Event::Event((rtc::Event *)&v22, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(_QWORD, _QWORD, _QWORD))v19;
    v6 = v21;
    v7 = (_QWORD *)(v18 + (*((uint64_t *)&v19 + 1) >> 1));
    if ((BYTE8(v19) & 1) != 0)
      v5 = *(void (**)(_QWORD, _QWORD, _QWORD))(*v7 + v19);
    v8 = *v20;
    *v20 = 0;
    v15.n128_u64[0] = v8;
    v9 = *v6;
    *v6 = 0;
    v14 = v9;
    v5(v7, &v15, &v14);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v15.n128_u64[0])
      (*(void (**)(unint64_t))(*(_QWORD *)v15.n128_u64[0] + 8))(v15.n128_u64[0]);
  }
  else
  {
    v15.n128_u64[0] = (unint64_t)&v18;
    v16 = absl::internal_any_invocable::LocalManagerTrivial;
    v17 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::scoped_refptr<webrtc::RtpSenderInterface>,webrtc::scoped_refptr<webrtc::RTCStatsCollectorCallback>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, uint64_t *, char *))(*(_QWORD *)v4 + 8))(v4, &v15, &v14, &v13);
    v16(1, &v15, &v15);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v22, v10, v11);
  }
  pthread_mutex_destroy(&v22);
  return pthread_cond_destroy(&v23);
}

{
  rtc::Thread *v4;
  void (*v5)(_QWORD *, __n128 *, uint64_t *);
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  TimeDelta v10;
  TimeDelta v11;
  char v13;
  uint64_t v14;
  __n128 v15;
  __n128 (*v16)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v17)(uint64_t *);
  uint64_t v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t *v21;
  pthread_mutex_t v22;
  pthread_cond_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v18 = *(_QWORD *)(a1 + 24);
  v19 = xmmword_208F04EA0;
  v20 = a2;
  v21 = a3;
  rtc::Event::Event((rtc::Event *)&v22, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(_QWORD, _QWORD, _QWORD))v19;
    v6 = v21;
    v7 = (_QWORD *)(v18 + (*((uint64_t *)&v19 + 1) >> 1));
    if ((BYTE8(v19) & 1) != 0)
      v5 = *(void (**)(_QWORD, _QWORD, _QWORD))(*v7 + v19);
    v8 = *v20;
    *v20 = 0;
    v15.n128_u64[0] = v8;
    v9 = *v6;
    *v6 = 0;
    v14 = v9;
    v5(v7, &v15, &v14);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v15.n128_u64[0])
      (*(void (**)(unint64_t))(*(_QWORD *)v15.n128_u64[0] + 8))(v15.n128_u64[0]);
  }
  else
  {
    v15.n128_u64[0] = (unint64_t)&v18;
    v16 = absl::internal_any_invocable::LocalManagerTrivial;
    v17 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::scoped_refptr<webrtc::RtpReceiverInterface>,webrtc::scoped_refptr<webrtc::RTCStatsCollectorCallback>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, uint64_t *, char *))(*(_QWORD *)v4 + 8))(v4, &v15, &v14, &v13);
    v16(1, &v15, &v15);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v22, v10, v11);
  }
  pthread_mutex_destroy(&v22);
  return pthread_cond_destroy(&v23);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::ClearStatsCache(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 24);
  v14 = xmmword_208F16F00;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v14;
    v4 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v14);
    v3(v4);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v13;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v10, &v9, &v8);
    v11(1, &v10, &v10);
    v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v6.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v5, v6);
  }
  pthread_mutex_destroy(&v15);
  return pthread_cond_destroy(&v16);
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::CreateDataChannelOrError(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  rtc::Thread *v6;
  TimeDelta v7;
  TimeDelta v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 __p;
  _BYTE v21[15];
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  pthread_mutex_t v26;
  pthread_cond_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v11 = a3;
  v17 = *(_QWORD *)(a1 + 24);
  v18 = xmmword_208F16F10;
  v19 = 10;
  v21[14] = 0;
  *(_QWORD *)v21 = 0;
  __p = 0uLL;
  *(_QWORD *)&v21[5] = 0;
  LOBYTE(v22) = 0;
  v23 = 0;
  v24 = a2;
  v25 = &v11;
  rtc::Event::Event((rtc::Event *)&v26, 0, 0);
  v6 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v6))
  {
    webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>> (webrtc::PeerConnectionInterface::*)(cricket::MediaType,webrtc::RtpTransceiverInit const&),cricket::MediaType,webrtc::RtpTransceiverInit const>((uint64_t)&v19, v17, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))v18, *((uint64_t *)&v18 + 1), v24, *v25);
  }
  else
  {
    v14.n128_u64[0] = (unint64_t)&v17;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::DataChannelInterface>>,std::string const&,webrtc::DataChannelInit const*>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v6 + 8))(v6, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v26, v7, v8);
  }
  v9 = *(_DWORD *)&v21[8];
  *(_DWORD *)a4 = v19;
  *(_QWORD *)(a4 + 24) = *(_QWORD *)v21;
  *(_OWORD *)(a4 + 8) = __p;
  __p = 0uLL;
  *(_QWORD *)v21 = 0;
  *(_DWORD *)(a4 + 32) = v9;
  *(_DWORD *)(a4 + 35) = *(_DWORD *)&v21[11];
  *(_BYTE *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = 0;
  if (v23)
  {
    v10 = v22;
    v22 = 0;
    *(_QWORD *)(a4 + 40) = v10;
    *(_BYTE *)(a4 + 48) = 1;
  }
  pthread_mutex_destroy(&v26);
  pthread_cond_destroy(&v27);
  if (v23 && v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if ((v21[7] & 0x80000000) != 0)
    operator delete((void *)__p);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::local_description(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F16F20;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,webrtc::SessionDescriptionInterface const*>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::remote_description(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F16F30;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,webrtc::SessionDescriptionInterface const*>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::current_local_description(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F16F40;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,webrtc::SessionDescriptionInterface const*>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::current_remote_description(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F16F50;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,webrtc::SessionDescriptionInterface const*>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::pending_local_description(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F16F60;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,webrtc::SessionDescriptionInterface const*>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::pending_remote_description(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F16F70;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,webrtc::SessionDescriptionInterface const*>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::RestartIce(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 24);
  v14 = xmmword_208F16F80;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v14;
    v4 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v14);
    v3(v4);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v13;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v10, &v9, &v8);
    v11(1, &v10, &v10);
    v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v6.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v5, v6);
  }
  pthread_mutex_destroy(&v15);
  return pthread_cond_destroy(&v16);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::CreateOffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  rtc::Thread *v4;
  void (*v5)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v6;
  TimeDelta v7;
  TimeDelta v8;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F16F90;
  v18 = &v10;
  v19 = a3;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(_QWORD *, uint64_t, uint64_t))v17;
    v6 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v5 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*v6 + v17);
    v5(v6, *v18, v19);
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::CreateSessionDescriptionObserver *,webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
  }
  pthread_mutex_destroy(&v20);
  return pthread_cond_destroy(&v21);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::CreateAnswer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  rtc::Thread *v4;
  void (*v5)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v6;
  TimeDelta v7;
  TimeDelta v8;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F16FA0;
  v18 = &v10;
  v19 = a3;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(_QWORD *, uint64_t, uint64_t))v17;
    v6 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v5 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*v6 + v17);
    v5(v6, *v18, v19);
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::CreateSessionDescriptionObserver *,webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
  }
  pthread_mutex_destroy(&v20);
  return pthread_cond_destroy(&v21);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::SetLocalDescription(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  rtc::Thread *v4;
  void (*v5)(_QWORD *, __n128 *, uint64_t *);
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  TimeDelta v11;
  TimeDelta v12;
  char v14;
  uint64_t v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);
  uint64_t v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t *v22;
  pthread_mutex_t v23;
  pthread_cond_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v19 = *(_QWORD *)(a1 + 24);
  v20 = xmmword_208F16FB0;
  v21 = a2;
  v22 = a3;
  rtc::Event::Event((rtc::Event *)&v23, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(_QWORD, _QWORD, _QWORD))v20;
    v6 = v22;
    v7 = (_QWORD *)(v19 + (*((uint64_t *)&v20 + 1) >> 1));
    if ((BYTE8(v20) & 1) != 0)
      v5 = *(void (**)(_QWORD, _QWORD, _QWORD))(*v7 + v20);
    v8 = *v21;
    *v21 = 0;
    v16.n128_u64[0] = v8;
    v9 = *v6;
    *v6 = 0;
    v15 = v9;
    v5(v7, &v16, &v15);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v10 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    if (v10)
      (*(void (**)(unint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)&v19;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,std::unique_ptr<webrtc::SessionDescriptionInterface>,webrtc::scoped_refptr<webrtc::SetLocalDescriptionObserverInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, uint64_t *, char *))(*(_QWORD *)v4 + 8))(v4, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v23, v11, v12);
  }
  pthread_mutex_destroy(&v23);
  return pthread_cond_destroy(&v24);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::SetLocalDescription(uint64_t a1, unint64_t *a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, __n128 *);
  _QWORD *v5;
  unint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F16FC0;
  v17 = a2;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, __n128 *))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, __n128 *))(*v5 + v16);
    v6 = *v17;
    *v17 = 0;
    v12.n128_u64[0] = v6;
    v4(v5, &v12);
    if (v12.n128_u64[0])
      (*(void (**)(unint64_t))(*(_QWORD *)v12.n128_u64[0] + 8))(v12.n128_u64[0]);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::scoped_refptr<webrtc::SetLocalDescriptionObserverInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v7, v8);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::SetLocalDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  rtc::Thread *v4;
  void (*v5)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v6;
  TimeDelta v7;
  TimeDelta v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);
  uint64_t v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t *v20;
  pthread_mutex_t v21;
  pthread_cond_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a2;
  v17 = *(_QWORD *)(a1 + 24);
  v18 = xmmword_208F16FD0;
  v19 = &v11;
  v20 = &v10;
  rtc::Event::Event((rtc::Event *)&v21, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(_QWORD *, uint64_t, uint64_t))v18;
    v6 = (_QWORD *)(v17 + (*((uint64_t *)&v18 + 1) >> 1));
    if ((BYTE8(v18) & 1) != 0)
      v5 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*v6 + v18);
    v5(v6, *v19, *v20);
  }
  else
  {
    v14.n128_u64[0] = (unint64_t)&v17;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::SetSessionDescriptionObserver *,webrtc::SessionDescriptionInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v21, v7, v8);
  }
  pthread_mutex_destroy(&v21);
  return pthread_cond_destroy(&v22);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::SetLocalDescription(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F16FE0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::SetSessionDescriptionObserver *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::SetRemoteDescription(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  rtc::Thread *v4;
  void (*v5)(_QWORD *, __n128 *, uint64_t *);
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  TimeDelta v11;
  TimeDelta v12;
  char v14;
  uint64_t v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);
  uint64_t v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t *v22;
  pthread_mutex_t v23;
  pthread_cond_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v19 = *(_QWORD *)(a1 + 24);
  v20 = xmmword_208F16FF0;
  v21 = a2;
  v22 = a3;
  rtc::Event::Event((rtc::Event *)&v23, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(_QWORD, _QWORD, _QWORD))v20;
    v6 = v22;
    v7 = (_QWORD *)(v19 + (*((uint64_t *)&v20 + 1) >> 1));
    if ((BYTE8(v20) & 1) != 0)
      v5 = *(void (**)(_QWORD, _QWORD, _QWORD))(*v7 + v20);
    v8 = *v21;
    *v21 = 0;
    v16.n128_u64[0] = v8;
    v9 = *v6;
    *v6 = 0;
    v15 = v9;
    v5(v7, &v16, &v15);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v10 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    if (v10)
      (*(void (**)(unint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)&v19;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,std::unique_ptr<webrtc::SessionDescriptionInterface>,webrtc::scoped_refptr<webrtc::SetRemoteDescriptionObserverInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, uint64_t *, char *))(*(_QWORD *)v4 + 8))(v4, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v23, v11, v12);
  }
  pthread_mutex_destroy(&v23);
  return pthread_cond_destroy(&v24);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::SetRemoteDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  rtc::Thread *v4;
  void (*v5)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v6;
  TimeDelta v7;
  TimeDelta v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);
  uint64_t v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t *v20;
  pthread_mutex_t v21;
  pthread_cond_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = a3;
  v11 = a2;
  v17 = *(_QWORD *)(a1 + 24);
  v18 = xmmword_208F17000;
  v19 = &v11;
  v20 = &v10;
  rtc::Event::Event((rtc::Event *)&v21, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(_QWORD *, uint64_t, uint64_t))v18;
    v6 = (_QWORD *)(v17 + (*((uint64_t *)&v18 + 1) >> 1));
    if ((BYTE8(v18) & 1) != 0)
      v5 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*v6 + v18);
    v5(v6, *v19, *v20);
  }
  else
  {
    v14.n128_u64[0] = (unint64_t)&v17;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::SetSessionDescriptionObserver *,webrtc::SessionDescriptionInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v21, v7, v8);
  }
  pthread_mutex_destroy(&v21);
  return pthread_cond_destroy(&v22);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::ShouldFireNegotiationNeededEvent(uint64_t a1, int a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, _QWORD);
  _QWORD *v5;
  uint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  int v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  char v18;
  unsigned int *v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F17010;
  v19 = (unsigned int *)&v10;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, _QWORD))v17;
    v5 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v17);
    v6 = v4(v5, *v19);
    v18 = v6;
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,unsigned int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
    v6 = v18 != 0;
  }
  pthread_mutex_destroy(&v20);
  pthread_cond_destroy(&v21);
  return v6;
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::GetConfiguration(uint64_t a1@<X0>, webrtc::PeerConnectionInterface::RTCConfiguration *a2@<X8>)
{
  rtc::Thread *v4;
  void (*v5)(__n128 *__return_ptr, _QWORD *);
  _QWORD *v6;
  TimeDelta v7;
  TimeDelta v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  char v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[360];
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F17020;
  webrtc::PeerConnectionInterface::RTCConfiguration::RTCConfiguration((webrtc::PeerConnectionInterface::RTCConfiguration *)v16);
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(__n128 *__return_ptr, _QWORD *))v15;
    v6 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v5 = *(void (**)(__n128 *__return_ptr, _QWORD *))(*v6 + v15);
    v5(&v10, v6);
    webrtc::PeerConnectionInterface::RTCConfiguration::operator=((uint64_t)v16, (uint64_t)&v10);
    webrtc::PeerConnectionInterface::RTCConfiguration::~RTCConfiguration((webrtc::PeerConnectionInterface::RTCConfiguration *)&v10);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v14;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::PeerConnectionInterface::RTCConfiguration>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v10, &v13, &v9);
    v11(1, &v10, &v10);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v7, v8);
  }
  webrtc::PeerConnectionInterface::RTCConfiguration::RTCConfiguration(a2, (const webrtc::PeerConnectionInterface::RTCConfiguration *)v16);
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  webrtc::PeerConnectionInterface::RTCConfiguration::~RTCConfiguration((webrtc::PeerConnectionInterface::RTCConfiguration *)v16);
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::SetConfiguration(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  rtc::Thread *v5;
  void (*v6)(_QWORD *__return_ptr, _QWORD, _QWORD);
  _QWORD *v7;
  TimeDelta v8;
  TimeDelta v9;
  int v10;
  char v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t (*v14)(uint64_t *);
  _DWORD v15[3];
  char v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 __p;
  _BYTE v21[15];
  uint64_t v22;
  pthread_mutex_t v23;
  pthread_cond_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v17 = *(_QWORD *)(a1 + 24);
  v18 = xmmword_208F17030;
  v19 = 0;
  v21[14] = 0;
  *(_QWORD *)v21 = 0;
  __p = 0uLL;
  *(_QWORD *)&v21[5] = 0;
  v22 = a2;
  rtc::Event::Event((rtc::Event *)&v23, 0, 0);
  v5 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v5))
  {
    v6 = (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))v18;
    v7 = (_QWORD *)(v17 + (*((uint64_t *)&v18 + 1) >> 1));
    if ((BYTE8(v18) & 1) != 0)
      v6 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(*v7 + v18);
    v6(&v12, v7, v22);
    v19 = (int)v12;
    if ((v21[7] & 0x80000000) != 0)
      operator delete((void *)__p);
    __p = v13;
    *(_QWORD *)v21 = v14;
    *(_DWORD *)&v21[8] = v15[0];
    *(_DWORD *)&v21[11] = *(_DWORD *)((char *)v15 + 3);
  }
  else
  {
    v12 = &v17;
    *((_QWORD *)&v13 + 1) = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCError,webrtc::PeerConnectionInterface::RTCConfiguration const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, uint64_t **, char *, char *))(*(_QWORD *)v5 + 8))(v5, &v12, &v16, &v11);
    (*((void (**)(uint64_t, uint64_t **, uint64_t **))&v13 + 1))(1, &v12, &v12);
    v8.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v9.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v23, v8, v9);
  }
  v10 = *(_DWORD *)&v21[8];
  *(_DWORD *)a3 = v19;
  *(_OWORD *)(a3 + 8) = __p;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)v21;
  __p = 0uLL;
  *(_QWORD *)v21 = 0;
  *(_DWORD *)(a3 + 32) = v10;
  *(_DWORD *)(a3 + 35) = *(_DWORD *)&v21[11];
  pthread_mutex_destroy(&v23);
  pthread_cond_destroy(&v24);
  if ((v21[7] & 0x80000000) != 0)
    operator delete((void *)__p);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::AddIceCandidate(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  uint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t *v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F17040;
  v19 = &v10;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, uint64_t))v17;
    v5 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v17);
    v6 = v4(v5, *v19);
    v18 = v6;
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,webrtc::IceCandidateInterface const*>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
    v6 = v18 != 0;
  }
  pthread_mutex_destroy(&v20);
  pthread_cond_destroy(&v21);
  return v6;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::AddIceCandidate(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  rtc::Thread *v4;
  void (*v5)(_QWORD *, uint64_t *, __n128 *);
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  TimeDelta v10;
  TimeDelta v11;
  uint64_t (*v12)(uint64_t **);
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t *v20;
  _QWORD *v21;
  pthread_mutex_t v22;
  pthread_cond_t v23;
  __n128 v24;
  __n128 (*v25)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v26)(uint64_t **);
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v18 = *(_QWORD *)(a1 + 24);
  v19 = xmmword_208F17050;
  v20 = a2;
  v21 = a3;
  rtc::Event::Event((rtc::Event *)&v22, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (!rtc::Thread::IsCurrent(v4))
  {
    v24.n128_u64[0] = (unint64_t)&v18;
    v25 = absl::internal_any_invocable::LocalManagerTrivial;
    v26 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, uint64_t *, char *))(*(_QWORD *)v4 + 8))(v4, &v24, &v17, &v16);
    v25(1, &v24, &v24);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v22, v10, v11);
    goto LABEL_17;
  }
  v5 = (void (*)(_QWORD *, uint64_t *, __n128 *))v19;
  v6 = v21;
  v7 = (_QWORD *)(v18 + (*((uint64_t *)&v19 + 1) >> 1));
  if ((BYTE8(v19) & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *, __n128 *))(*v7 + v19);
  v8 = *v20;
  *v20 = 0;
  v17 = v8;
  v9 = (_QWORD *)v6[3];
  if (v9)
  {
    if (v9 == v6)
    {
      v26 = (uint64_t (*)(uint64_t **))&v24;
      (*(void (**)(_QWORD *, __n128 *))(*v6 + 24))(v6, &v24);
    }
    else
    {
      v26 = (uint64_t (*)(uint64_t **))v6[3];
      v6[3] = 0;
    }
  }
  else
  {
    v26 = 0;
  }
  v5(v7, &v17, &v24);
  v12 = v26;
  if ((char *)v26 == (char *)&v24)
  {
    v13 = 4;
    v12 = (uint64_t (*)(uint64_t **))&v24;
  }
  else
  {
    if (!v26)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_15:
  v14 = v17;
  v17 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_17:
  pthread_mutex_destroy(&v22);
  return pthread_cond_destroy(&v23);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::RemoveIceCandidates(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  uint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  pthread_mutex_t v19;
  pthread_cond_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F17060;
  v18 = a2;
  rtc::Event::Event((rtc::Event *)&v19, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v16);
    v6 = v4(v5, v18);
    v17 = v6;
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,std::vector<cricket::Candidate> const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v19, v7, v8);
    v6 = v17 != 0;
  }
  pthread_mutex_destroy(&v19);
  pthread_cond_destroy(&v20);
  return v6;
}

void webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::SetBitrate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  rtc::Thread *v5;
  void (*v6)(_QWORD *__return_ptr, _QWORD, _QWORD);
  _QWORD *v7;
  TimeDelta v8;
  TimeDelta v9;
  int v10;
  char v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t (*v14)(uint64_t *);
  _DWORD v15[3];
  char v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 __p;
  _BYTE v21[15];
  uint64_t v22;
  pthread_mutex_t v23;
  pthread_cond_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v17 = *(_QWORD *)(a1 + 24);
  v18 = xmmword_208F17070;
  v19 = 0;
  v21[14] = 0;
  *(_QWORD *)v21 = 0;
  __p = 0uLL;
  *(_QWORD *)&v21[5] = 0;
  v22 = a2;
  rtc::Event::Event((rtc::Event *)&v23, 0, 0);
  v5 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v5))
  {
    v6 = (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))v18;
    v7 = (_QWORD *)(v17 + (*((uint64_t *)&v18 + 1) >> 1));
    if ((BYTE8(v18) & 1) != 0)
      v6 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(*v7 + v18);
    v6(&v12, v7, v22);
    v19 = (int)v12;
    if ((v21[7] & 0x80000000) != 0)
      operator delete((void *)__p);
    __p = v13;
    *(_QWORD *)v21 = v14;
    *(_DWORD *)&v21[8] = v15[0];
    *(_DWORD *)&v21[11] = *(_DWORD *)((char *)v15 + 3);
  }
  else
  {
    v12 = &v17;
    *((_QWORD *)&v13 + 1) = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCError,webrtc::BitrateSettings const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, uint64_t **, char *, char *))(*(_QWORD *)v5 + 8))(v5, &v12, &v16, &v11);
    (*((void (**)(uint64_t, uint64_t **, uint64_t **))&v13 + 1))(1, &v12, &v12);
    v8.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v9.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v23, v8, v9);
  }
  v10 = *(_DWORD *)&v21[8];
  *(_DWORD *)a3 = v19;
  *(_OWORD *)(a3 + 8) = __p;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)v21;
  __p = 0uLL;
  *(_QWORD *)v21 = 0;
  *(_DWORD *)(a3 + 32) = v10;
  *(_DWORD *)(a3 + 35) = *(_DWORD *)&v21[11];
  pthread_mutex_destroy(&v23);
  pthread_cond_destroy(&v24);
  if ((v21[7] & 0x80000000) != 0)
    operator delete((void *)__p);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::ReconfigureBandwidthEstimation(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F17080;
  v16 = a2;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v15;
    v5 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v15);
    v4(v5, v16);
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::BandwidthEstimationSettings const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
  }
  pthread_mutex_destroy(&v17);
  return pthread_cond_destroy(&v18);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::SetAudioPlayout(uint64_t a1, char a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, _QWORD);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  char *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F17090;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, _QWORD))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, _QWORD))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::SetAudioRecording(uint64_t a1, char a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, _QWORD);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  char *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F170A0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, _QWORD))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, _QWORD))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::LookupDtlsTransportByMid@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  rtc::Thread *v5;
  void (*v6)(__n128 *__return_ptr, _QWORD *, uint64_t);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  TimeDelta v10;
  TimeDelta v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  pthread_mutex_t v23;
  pthread_cond_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v19 = *(_QWORD *)(a1 + 24);
  v20 = xmmword_208F170B0;
  v21 = 0;
  v22 = a2;
  rtc::Event::Event((rtc::Event *)&v23, 0, 0);
  v5 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v5))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *, uint64_t))v20;
    v7 = (_QWORD *)(v19 + (*((uint64_t *)&v20 + 1) >> 1));
    if ((BYTE8(v20) & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *, uint64_t))(*v7 + v20);
    v6(&v16, v7, v22);
    v8 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    v9 = v21;
    v21 = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v16.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)&v19;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::scoped_refptr<webrtc::DtlsTransportInterface>,std::string const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v5 + 8))(v5, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v23, v10, v11);
  }
  v12 = v21;
  v21 = 0;
  *a3 = v12;
  pthread_mutex_destroy(&v23);
  pthread_cond_destroy(&v24);
  result = v21;
  if (v21)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  return result;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::GetSctpTransport@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  rtc::Thread *v4;
  void (*v5)(__n128 *__return_ptr, _QWORD *);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  TimeDelta v9;
  TimeDelta v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  char v14;
  __n128 v15;
  __n128 (*v16)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v17)(uint64_t *);
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  pthread_mutex_t v21;
  pthread_cond_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v18 = *(_QWORD *)(a1 + 24);
  v19 = xmmword_208F170C0;
  v20 = 0;
  rtc::Event::Event((rtc::Event *)&v21, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(__n128 *__return_ptr, _QWORD *))v19;
    v6 = (_QWORD *)(v18 + (*((uint64_t *)&v19 + 1) >> 1));
    if ((BYTE8(v19) & 1) != 0)
      v5 = *(void (**)(__n128 *__return_ptr, _QWORD *))(*v6 + v19);
    v5(&v15, v6);
    v7 = v15.n128_u64[0];
    v15.n128_u64[0] = 0;
    v8 = v20;
    v20 = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      if (v15.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v15.n128_u64[0] + 8))(v15.n128_u64[0]);
    }
  }
  else
  {
    v15.n128_u64[0] = (unint64_t)&v18;
    v16 = absl::internal_any_invocable::LocalManagerTrivial;
    v17 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,webrtc::scoped_refptr<webrtc::SctpTransportInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v15, &v14, &v13);
    v16(1, &v15, &v15);
    v9.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v10.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v21, v9, v10);
  }
  v11 = v20;
  v20 = 0;
  *a2 = v11;
  pthread_mutex_destroy(&v21);
  pthread_cond_destroy(&v22);
  result = v20;
  if (v20)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  return result;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::signaling_state(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F170D0;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::PeerConnectionInterface::SignalingState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::ice_connection_state(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F170E0;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::PeerConnectionInterface::IceConnectionState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::standardized_ice_connection_state(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F170F0;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::PeerConnectionInterface::IceConnectionState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::peer_connection_state(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F17100;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::PeerConnectionInterface::PeerConnectionState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::ice_gathering_state(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F17110;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::PeerConnectionInterface::IceGatheringState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::can_trickle_ice_candidates(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned __int16 v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F17120;
  v16 = 0;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,std::optional<BOOL>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::AddAdaptationResource(uint64_t a1, unint64_t *a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, __n128 *);
  _QWORD *v5;
  unint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F17130;
  v17 = a2;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, __n128 *))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, __n128 *))(*v5 + v16);
    v6 = *v17;
    *v17 = 0;
    v12.n128_u64[0] = v6;
    v4(v5, &v12);
    if (v12.n128_u64[0])
      (*(void (**)(unint64_t))(*(_QWORD *)v12.n128_u64[0] + 8))(v12.n128_u64[0]);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::scoped_refptr<webrtc::Resource>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v7, v8);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::StartRtcEventLog(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  rtc::Thread *v4;
  uint64_t (*v5)(_QWORD *, __n128 *, uint64_t);
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  TimeDelta v10;
  TimeDelta v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  char v16;
  __n128 v17;
  __n128 (*v18)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v19)(uint64_t *);
  uint64_t v20;
  __int128 v21;
  unsigned __int8 v22;
  unint64_t *v23;
  uint64_t *v24;
  pthread_mutex_t v25;
  pthread_cond_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v14 = a3;
  v20 = *(_QWORD *)(a1 + 24);
  v21 = xmmword_208F17140;
  v23 = a2;
  v24 = &v14;
  rtc::Event::Event((rtc::Event *)&v25, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (uint64_t (*)(_QWORD *, __n128 *, uint64_t))v21;
    v6 = v24;
    v7 = (_QWORD *)(v20 + (*((uint64_t *)&v21 + 1) >> 1));
    if ((BYTE8(v21) & 1) != 0)
      v5 = *(uint64_t (**)(_QWORD *, __n128 *, uint64_t))(*v7 + v21);
    v8 = *v23;
    *v23 = 0;
    v17.n128_u64[0] = v8;
    v22 = v5(v7, &v17, *v6);
    v9 = v17.n128_u64[0];
    v17.n128_u64[0] = 0;
    if (v9)
      (*(void (**)(unint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    v17.n128_u64[0] = (unint64_t)&v20;
    v18 = absl::internal_any_invocable::LocalManagerTrivial;
    v19 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,std::unique_ptr<webrtc::RtcEventLogOutput>,long long>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v17, &v16, &v15);
    v18(1, &v17, &v17);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v25, v10, v11);
  }
  v12 = v22;
  pthread_mutex_destroy(&v25);
  pthread_cond_destroy(&v26);
  return v12;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::StartRtcEventLog(uint64_t a1, unint64_t *a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, __n128 *);
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  TimeDelta v8;
  TimeDelta v9;
  uint64_t v10;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);
  uint64_t v17;
  __int128 v18;
  unsigned __int8 v19;
  unint64_t *v20;
  pthread_mutex_t v21;
  pthread_cond_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v17 = *(_QWORD *)(a1 + 24);
  v18 = xmmword_208F17150;
  v20 = a2;
  rtc::Event::Event((rtc::Event *)&v21, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, __n128 *))v18;
    v5 = (_QWORD *)(v17 + (*((uint64_t *)&v18 + 1) >> 1));
    if ((BYTE8(v18) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, __n128 *))(*v5 + v18);
    v6 = *v20;
    *v20 = 0;
    v14.n128_u64[0] = v6;
    v19 = v4(v5, &v14);
    v7 = v14.n128_u64[0];
    v14.n128_u64[0] = 0;
    if (v7)
      (*(void (**)(unint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    v14.n128_u64[0] = (unint64_t)&v17;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,std::unique_ptr<webrtc::RtcEventLogOutput>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    v8.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v9.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v21, v8, v9);
  }
  v10 = v19;
  pthread_mutex_destroy(&v21);
  pthread_cond_destroy(&v22);
  return v10;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::StopRtcEventLog(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 24);
  v14 = xmmword_208F17160;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v14;
    v4 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v14);
    v3(v4);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v13;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v10, &v9, &v8);
    v11(1, &v10, &v10);
    v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v6.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v5, v6);
  }
  pthread_mutex_destroy(&v15);
  return pthread_cond_destroy(&v16);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::Close(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 24);
  v14 = xmmword_208F17170;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v14;
    v4 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v14);
    v3(v4);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v13;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v10, &v9, &v8);
    v11(1, &v10, &v10);
    v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v6.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v5, v6);
  }
  pthread_mutex_destroy(&v15);
  return pthread_cond_destroy(&v16);
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::signaling_thread(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 512))(*(_QWORD *)(a1 + 24));
}

BOOL rtc::RefCountedObject<webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 32));
  return v1 == 1;
}

_QWORD *webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::~PeerConnectionProxyWithInternal(_QWORD *a1)
{
  rtc::Thread *v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  char v7;
  char v8;
  __n128 v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C0B9D10;
  v12 = a1;
  v13 = webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::DestroyInternal;
  v14 = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = (rtc::Thread *)a1[1];
  if (rtc::Thread::IsCurrent(v2))
  {
    v13((uint64_t)v12 + (v14 >> 1));
  }
  else
  {
    v9.n128_u64[0] = (unint64_t)&v12;
    v10 = absl::internal_any_invocable::LocalManagerTrivial;
    v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v9, &v8, &v7);
    v10(1, &v9, &v9);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v3, v4);
  }
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionProxyWithInternal<webrtc::PeerConnectionInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::scoped_refptr<webrtc::StreamCollectionInterface>>::Marshal(_QWORD *a1, _QWORD *a2, rtc::Thread *this)
{
  void (*v6)(__n128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t result;
  TimeDelta v11;
  TimeDelta v12;
  uint64_t v13;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v16, v8);
    v9 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    result = a2[3];
    a2[3] = v9;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      result = v16.n128_u64[0];
      if (v16.n128_u64[0])
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)a2;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::scoped_refptr<webrtc::StreamCollectionInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    result = rtc::Event::Wait((rtc::Event *)(a2 + 5), v11, v12);
  }
  v13 = a2[3];
  a2[3] = 0;
  *a1 = v13;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::scoped_refptr<webrtc::StreamCollectionInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v8, v4);
  v5 = v8;
  v8 = 0;
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,webrtc::MediaStreamInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v2);
  *(_BYTE *)(v1 + 24) = v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::MediaStreamInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>> (webrtc::PeerConnectionInterface::*)(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const&),webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t), uint64_t a4, uint64_t *a5, uint64_t a6)
{
  void (*v6)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  _DWORD v20[2];
  uint64_t v21;
  unsigned __int8 v22;

  v6 = a3;
  v8 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t))(*v8 + a3);
  v9 = *a5;
  *a5 = 0;
  v16 = v9;
  v6(&v17, v8, &v16, a6);
  *(_DWORD *)a1 = v17;
  v10 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 24) = v19;
  HIBYTE(v19) = 0;
  LOBYTE(__p[0]) = 0;
  *(_DWORD *)(a1 + 32) = v20[0];
  *(_DWORD *)(a1 + 35) = *(_DWORD *)((char *)v20 + 3);
  if (*(unsigned __int8 *)(a1 + 48) == v22)
  {
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_18;
    v11 = v21;
    v21 = 0;
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v11;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      if (!v22)
        goto LABEL_18;
      goto LABEL_15;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      v14 = v21;
      v21 = 0;
      *(_QWORD *)(a1 + 40) = v14;
      *(_BYTE *)(a1 + 48) = 1;
      if (!v22)
        goto LABEL_18;
      goto LABEL_15;
    }
    v13 = *(_QWORD *)(a1 + 40);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    *(_BYTE *)(a1 + 48) = 0;
  }
  if (!v22)
    goto LABEL_18;
LABEL_15:
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_18:
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    result = v16;
    if (!v16)
      return result;
  }
  else
  {
    result = v16;
    if (!v16)
      return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>,webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>> (webrtc::PeerConnectionInterface::*)(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const&),webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const>(*a1 + 24, *(_QWORD *)v1, *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t))(v1 + 8), *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 80), *(_QWORD *)(v1 + 88));
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 96));
  *(_BYTE *)(v1 + 209) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 160));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 96));
}

uint64_t webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>> (webrtc::PeerConnectionInterface::*)(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const&,std::vector<webrtc::RtpEncodingParameters> const&),webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const,std::vector<webrtc::RtpEncodingParameters> const>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t, uint64_t), uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  void (*v7)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  _DWORD v21[2];
  uint64_t v22;
  unsigned __int8 v23;

  v7 = a3;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v7 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t, uint64_t))(*v9 + a3);
  v10 = *a5;
  *a5 = 0;
  v17 = v10;
  v7(&v18, v9, &v17, a6, a7);
  *(_DWORD *)a1 = v18;
  v11 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 24) = v20;
  HIBYTE(v20) = 0;
  LOBYTE(__p[0]) = 0;
  *(_DWORD *)(a1 + 32) = v21[0];
  *(_DWORD *)(a1 + 35) = *(_DWORD *)((char *)v21 + 3);
  if (*(unsigned __int8 *)(a1 + 48) == v23)
  {
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_18;
    v12 = v22;
    v22 = 0;
    v13 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if (!v23)
        goto LABEL_18;
      goto LABEL_15;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      v15 = v22;
      v22 = 0;
      *(_QWORD *)(a1 + 40) = v15;
      *(_BYTE *)(a1 + 48) = 1;
      if (!v23)
        goto LABEL_18;
      goto LABEL_15;
    }
    v14 = *(_QWORD *)(a1 + 40);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    *(_BYTE *)(a1 + 48) = 0;
  }
  if (!v23)
    goto LABEL_18;
LABEL_15:
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
LABEL_18:
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p[0]);
    result = v17;
    if (!v17)
      return result;
  }
  else
  {
    result = v17;
    if (!v17)
      return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>,webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const&,std::vector<webrtc::RtpEncodingParameters> const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>> (webrtc::PeerConnectionInterface::*)(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const&,std::vector<webrtc::RtpEncodingParameters> const&),webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const,std::vector<webrtc::RtpEncodingParameters> const>(*a1 + 24, *(_QWORD *)v1, *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t, uint64_t))(v1 + 8), *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 104));
  *(_BYTE *)(v1 + 217) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 168));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 104));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCError,webrtc::scoped_refptr<webrtc::RtpSenderInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _DWORD v13[2];

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(uint64_t **)(*a1 + 64);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *))(*v5 + v2);
  v6 = *v4;
  *v4 = 0;
  v9 = v6;
  v2(&v10, v5, &v9);
  *(_DWORD *)(v1 + 24) = v10;
  v7 = (void **)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v11;
  *(_QWORD *)(v1 + 48) = v12;
  HIBYTE(v12) = 0;
  LOBYTE(v11) = 0;
  *(_DWORD *)(v1 + 56) = v13[0];
  *(_DWORD *)(v1 + 59) = *(_DWORD *)((char *)v13 + 3);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 72));
  *(_BYTE *)(v1 + 185) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 136));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 72));
}

uint64_t webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>> (webrtc::PeerConnectionInterface::*)(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>),webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, _QWORD *, uint64_t *), uint64_t a4, uint64_t *a5)
{
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  _DWORD v18[2];
  uint64_t v19;
  unsigned __int8 v20;

  v6 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *))(*v6 + a3);
  v7 = *a5;
  *a5 = 0;
  v14 = v7;
  a3(&v15, v6, &v14);
  *(_DWORD *)a1 = v15;
  v8 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 24) = v17;
  HIBYTE(v17) = 0;
  LOBYTE(__p[0]) = 0;
  *(_DWORD *)(a1 + 32) = v18[0];
  *(_DWORD *)(a1 + 35) = *(_DWORD *)((char *)v18 + 3);
  if (*(unsigned __int8 *)(a1 + 48) == v20)
  {
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_18;
    v9 = v19;
    v19 = 0;
    v10 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      if (!v20)
        goto LABEL_18;
      goto LABEL_15;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      v12 = v19;
      v19 = 0;
      *(_QWORD *)(a1 + 40) = v12;
      *(_BYTE *)(a1 + 48) = 1;
      if (!v20)
        goto LABEL_18;
      goto LABEL_15;
    }
    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    *(_BYTE *)(a1 + 48) = 0;
  }
  if (!v20)
    goto LABEL_18;
LABEL_15:
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
LABEL_18:
  if (SHIBYTE(v17) < 0)
  {
    operator delete(__p[0]);
    result = v14;
    if (!v14)
      return result;
  }
  else
  {
    result = v14;
    if (!v14)
      return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>,webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>> (webrtc::PeerConnectionInterface::*)(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>),webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>>(*a1 + 24, *(_QWORD *)v1, *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *))(v1 + 8), *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 80));
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 88));
  *(_BYTE *)(v1 + 201) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 152));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 88));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>,webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,webrtc::RtpTransceiverInit const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpSenderInterface>> (webrtc::PeerConnectionInterface::*)(webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const&),webrtc::scoped_refptr<webrtc::MediaStreamTrackInterface>,std::vector<std::string> const>(*a1 + 24, *(_QWORD *)v1, *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t))(v1 + 8), *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 80), *(_QWORD *)(v1 + 88));
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 96));
  *(_BYTE *)(v1 + 209) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 160));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 96));
}

void webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>> (webrtc::PeerConnectionInterface::*)(cricket::MediaType),cricket::MediaType>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  _DWORD v15[2];
  uint64_t v16;
  unsigned __int8 v17;

  v6 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v6 + a3);
  a3(&v12, v6, a5);
  *(_DWORD *)a1 = v12;
  v7 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 24) = v14;
  HIBYTE(v14) = 0;
  LOBYTE(__p[0]) = 0;
  *(_DWORD *)(a1 + 32) = v15[0];
  *(_DWORD *)(a1 + 35) = *(_DWORD *)((char *)v15 + 3);
  if (*(unsigned __int8 *)(a1 + 48) == v17)
  {
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_18;
    v8 = v16;
    v16 = 0;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (!v17)
        goto LABEL_18;
      goto LABEL_15;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      v11 = v16;
      v16 = 0;
      *(_QWORD *)(a1 + 40) = v11;
      *(_BYTE *)(a1 + 48) = 1;
      if (!v17)
        goto LABEL_18;
      goto LABEL_15;
    }
    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    *(_BYTE *)(a1 + 48) = 0;
  }
  if (!v17)
    goto LABEL_18;
LABEL_15:
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
LABEL_18:
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>,cricket::MediaType>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>> (webrtc::PeerConnectionInterface::*)(cricket::MediaType),cricket::MediaType>(*a1 + 24, *(_QWORD *)v1, *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(v1 + 8), *(_QWORD *)(v1 + 16), **(unsigned int **)(v1 + 80));
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 88));
  *(_BYTE *)(v1 + 201) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 152));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 88));
}

void webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>> (webrtc::PeerConnectionInterface::*)(cricket::MediaType,webrtc::RtpTransceiverInit const&),cricket::MediaType,webrtc::RtpTransceiverInit const>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v6)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  _DWORD v17[2];
  uint64_t v18;
  unsigned __int8 v19;

  v6 = a3;
  v8 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v6 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))(*v8 + a3);
  v6(&v14, v8, a5, a6);
  *(_DWORD *)a1 = v14;
  v9 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 24) = v16;
  HIBYTE(v16) = 0;
  LOBYTE(__p[0]) = 0;
  *(_DWORD *)(a1 + 32) = v17[0];
  *(_DWORD *)(a1 + 35) = *(_DWORD *)((char *)v17 + 3);
  if (*(unsigned __int8 *)(a1 + 48) == v19)
  {
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_18;
    v10 = v18;
    v18 = 0;
    v11 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      if (!v19)
        goto LABEL_18;
      goto LABEL_15;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      v13 = v18;
      v18 = 0;
      *(_QWORD *)(a1 + 40) = v13;
      *(_BYTE *)(a1 + 48) = 1;
      if (!v19)
        goto LABEL_18;
      goto LABEL_15;
    }
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    *(_BYTE *)(a1 + 48) = 0;
  }
  if (!v19)
    goto LABEL_18;
LABEL_15:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
LABEL_18:
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>,cricket::MediaType,webrtc::RtpTransceiverInit const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>> (webrtc::PeerConnectionInterface::*)(cricket::MediaType,webrtc::RtpTransceiverInit const&),cricket::MediaType,webrtc::RtpTransceiverInit const>(*a1 + 24, *(_QWORD *)v1, *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))(v1 + 8), *(_QWORD *)(v1 + 16), **(unsigned int **)(v1 + 80), *(_QWORD *)(v1 + 88));
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 96));
  *(_BYTE *)(v1 + 209) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 160));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 96));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::scoped_refptr<webrtc::RtpSenderInterface>,std::string const&,std::string const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = *(_QWORD *)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))(*v6 + v2);
  v2(&v10, v6, v4, v5);
  v7 = v10;
  v10 = 0;
  v8 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,std::vector<webrtc::scoped_refptr<webrtc::RtpSenderInterface>>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(__int128 *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  v1 = *a1;
  v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v11, v4);
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(void **)(v1 + 24);
    if (v6 != v5)
    {
      do
      {
        v9 = *(_QWORD *)(v6 - 8);
        v6 -= 8;
        v8 = v9;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = *(void **)(v1 + 24);
    }
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v7);
  }
  *(_OWORD *)(v1 + 24) = v11;
  *(_QWORD *)(v1 + 40) = v12;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,std::vector<webrtc::scoped_refptr<webrtc::RtpReceiverInterface>>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(__int128 *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  v1 = *a1;
  v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v11, v4);
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(void **)(v1 + 24);
    if (v6 != v5)
    {
      do
      {
        v9 = *(_QWORD *)(v6 - 8);
        v6 -= 8;
        v8 = v9;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = *(void **)(v1 + 24);
    }
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v7);
  }
  *(_OWORD *)(v1 + 24) = v11;
  *(_QWORD *)(v1 + 40) = v12;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(__int128 *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  v1 = *a1;
  v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v11, v4);
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(void **)(v1 + 24);
    if (v6 != v5)
    {
      do
      {
        v9 = *(_QWORD *)(v6 - 8);
        v6 -= 8;
        v8 = v9;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = *(void **)(v1 + 24);
    }
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v7);
  }
  *(_OWORD *)(v1 + 24) = v11;
  *(_QWORD *)(v1 + 40) = v12;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,webrtc::StatsObserver *,webrtc::MediaStreamTrackInterface *,webrtc::PeerConnectionInterface::StatsOutputLevel>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  _QWORD *v7;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = *(_QWORD **)(*a1 + 40);
  v6 = *(unsigned int **)(*a1 + 48);
  v7 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(*v7 + v2);
  *(_BYTE *)(v1 + 24) = v2(v7, *v4, *v5, *v6);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::RTCStatsCollectorCallback *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::scoped_refptr<webrtc::RtpSenderInterface>,webrtc::scoped_refptr<webrtc::RTCStatsCollectorCallback>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v5 = *(uint64_t **)(*a1 + 32);
  v4 = *(uint64_t **)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v6 + v2);
  v7 = *v5;
  *v5 = 0;
  v11 = v7;
  v8 = *v4;
  *v4 = 0;
  v10 = v8;
  v2(v6, &v11, &v10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::scoped_refptr<webrtc::RtpReceiverInterface>,webrtc::scoped_refptr<webrtc::RTCStatsCollectorCallback>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v5 = *(uint64_t **)(*a1 + 32);
  v4 = *(uint64_t **)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v6 + v2);
  v7 = *v5;
  *v5 = 0;
  v11 = v7;
  v8 = *v4;
  *v4 = 0;
  v10 = v8;
  v2(v6, &v11, &v10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::DataChannelInterface>>,std::string const&,webrtc::DataChannelInit const*>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  webrtc::ReturnType<webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>>>::Invoke<webrtc::PeerConnectionInterface,webrtc::RTCErrorOr<webrtc::scoped_refptr<webrtc::RtpTransceiverInterface>> (webrtc::PeerConnectionInterface::*)(cricket::MediaType,webrtc::RtpTransceiverInit const&),cricket::MediaType,webrtc::RtpTransceiverInit const>(*a1 + 24, *(_QWORD *)v1, *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 80), **(_QWORD **)(v1 + 88));
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 96));
  *(_BYTE *)(v1 + 209) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 160));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 96));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,webrtc::SessionDescriptionInterface const*>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_QWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::CreateSessionDescriptionObserver *,webrtc::PeerConnectionInterface::RTCOfferAnswerOptions const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v5 = *(_QWORD **)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*v6 + v2);
  v2(v6, *v5, v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,std::unique_ptr<webrtc::SessionDescriptionInterface>,webrtc::scoped_refptr<webrtc::SetLocalDescriptionObserverInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v5 = *(uint64_t **)(*a1 + 32);
  v4 = *(uint64_t **)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v6 + v2);
  v7 = *v5;
  *v5 = 0;
  v12 = v7;
  v8 = *v4;
  *v4 = 0;
  v11 = v8;
  v2(v6, &v12, &v11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v9 = v12;
  v12 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::scoped_refptr<webrtc::SetLocalDescriptionObserverInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(uint64_t **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t *))(*v5 + v2);
  v6 = *v4;
  *v4 = 0;
  v8 = v6;
  v2(v5, &v8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::SetSessionDescriptionObserver *,webrtc::SessionDescriptionInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = *(_QWORD **)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD, _QWORD))(*v6 + v2);
  v2(v6, *v4, *v5);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::SetSessionDescriptionObserver *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,std::unique_ptr<webrtc::SessionDescriptionInterface>,webrtc::scoped_refptr<webrtc::SetRemoteDescriptionObserverInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v5 = *(uint64_t **)(*a1 + 32);
  v4 = *(uint64_t **)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v6 + v2);
  v7 = *v5;
  *v5 = 0;
  v12 = v7;
  v8 = *v4;
  *v4 = 0;
  v11 = v8;
  v2(v6, &v12, &v11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v9 = v12;
  v12 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,unsigned int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  unsigned int *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(unsigned int **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v2);
  *(_BYTE *)(v1 + 24) = v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::PeerConnectionInterface::RTCConfiguration>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  _QWORD v6[44];

  v1 = *a1;
  v2 = *(void (**)(_QWORD *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *__return_ptr, _QWORD *))(*v4 + v2);
  v2(v6, v4);
  webrtc::PeerConnectionInterface::RTCConfiguration::operator=(v1 + 24, (uint64_t)v6);
  webrtc::PeerConnectionInterface::RTCConfiguration::~RTCConfiguration((webrtc::PeerConnectionInterface::RTCConfiguration *)v6);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 384));
  *(_BYTE *)(v1 + 497) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 448));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 384));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCError,webrtc::PeerConnectionInterface::RTCConfiguration const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void **v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _DWORD v11[2];

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 64);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v5 + v2);
  v2(&v8, v5, v4);
  *(_DWORD *)(v1 + 24) = v8;
  v6 = (void **)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v9;
  *(_QWORD *)(v1 + 48) = v10;
  *(_DWORD *)(v1 + 56) = v11[0];
  *(_DWORD *)(v1 + 59) = *(_DWORD *)((char *)v11 + 3);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 72));
  *(_BYTE *)(v1 + 185) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 136));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 72));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,webrtc::IceCandidateInterface const*>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v2);
  *(_BYTE *)(v1 + 24) = v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,std::unique_ptr<webrtc::IceCandidateInterface>,std::function<void ()(webrtc::RTCError)>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(_QWORD *, uint64_t *, _BYTE *);
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = **a1;
  v3 = (void (*)(_QWORD *, uint64_t *, _BYTE *))(*a1)[1];
  v4 = (*a1)[2];
  v6 = (uint64_t *)(*a1)[4];
  v5 = (_QWORD *)(*a1)[5];
  v7 = (_QWORD *)(v2 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(void (**)(_QWORD *, uint64_t *, _BYTE *))(*v7 + v3);
  v8 = *v6;
  *v6 = 0;
  v14 = v8;
  v9 = (_QWORD *)v5[3];
  if (v9)
  {
    if (v9 == v5)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(*v5 + 24))(v5, v15);
    }
    else
    {
      v16 = (_BYTE *)v5[3];
      v5[3] = 0;
    }
  }
  else
  {
    v16 = 0;
  }
  v3(v7, &v14, v15);
  v10 = v16;
  if (v16 == v15)
  {
    v11 = 4;
    v10 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_13;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_13:
  v12 = v14;
  v14 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 6));
  *((_BYTE *)v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 14));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 6));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,std::vector<cricket::Candidate> const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v2);
  *(_BYTE *)(v1 + 24) = v2(v5, v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::RTCError,webrtc::BitrateSettings const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void **v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _DWORD v11[2];

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 64);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v5 + v2);
  v2(&v8, v5, v4);
  *(_DWORD *)(v1 + 24) = v8;
  v6 = (void **)(v1 + 32);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v9;
  *(_QWORD *)(v1 + 48) = v10;
  *(_DWORD *)(v1 + 56) = v11[0];
  *(_DWORD *)(v1 + 59) = *(_DWORD *)((char *)v11 + 3);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 72));
  *(_BYTE *)(v1 + 185) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 136));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 72));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::BandwidthEstimationSettings const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t))(*v5 + v2);
  v2(v5, v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(unsigned __int8 **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::scoped_refptr<webrtc::DtlsTransportInterface>,std::string const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v5 + v2);
  v2(&v9, v5, v4);
  v6 = v9;
  v9 = 0;
  v7 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::PeerConnectionInterface,webrtc::scoped_refptr<webrtc::SctpTransportInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v8, v4);
  v5 = v8;
  v8 = 0;
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::PeerConnectionInterface::SignalingState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_DWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::PeerConnectionInterface::IceConnectionState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_DWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::PeerConnectionInterface::PeerConnectionState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_DWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,webrtc::PeerConnectionInterface::IceGatheringState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_DWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,std::optional<BOOL>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_WORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,void,webrtc::scoped_refptr<webrtc::Resource>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(uint64_t **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, uint64_t *))(*v5 + v2);
  v6 = *v4;
  *v4 = 0;
  v8 = v6;
  v2(v5, &v8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,std::unique_ptr<webrtc::RtcEventLogOutput>,long long>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, uint64_t *, _QWORD);
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, uint64_t *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(uint64_t **)(*a1 + 32);
  v5 = *(_QWORD **)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, uint64_t *, _QWORD))(*v6 + v2);
  v7 = *v4;
  *v4 = 0;
  v10 = v7;
  *(_BYTE *)(v1 + 24) = v2(v6, &v10, *v5);
  v8 = v10;
  v10 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::PeerConnectionInterface,BOOL,std::unique_ptr<webrtc::RtcEventLogOutput>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(uint64_t **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, uint64_t *))(*v5 + v2);
  v6 = *v4;
  *v4 = 0;
  v9 = v6;
  *(_BYTE *)(v1 + 24) = v2(v5, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t rtc::RefCountedObject<webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 8;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>>::~RefCountedObject(_QWORD *a1)
{
  webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::~MediaStreamProxyWithInternal(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::id(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

void webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::GetAudioTracks(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void *__p;
  char *v12;
  uint64_t v13;
  pthread_mutex_t v14;
  pthread_cond_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 24);
  v10 = xmmword_208F16E40;
  v12 = 0;
  v13 = 0;
  __p = 0;
  rtc::Event::Event((rtc::Event *)&v14, 0, 0);
  webrtc::MethodCall<webrtc::MediaStreamInterface,std::vector<webrtc::scoped_refptr<webrtc::AudioTrackInterface>>>::Marshal(*(rtc::Thread **)(a1 + 16), &v9, a2);
  pthread_mutex_destroy(&v14);
  pthread_cond_destroy(&v15);
  v4 = (char *)__p;
  if (__p)
  {
    v5 = v12;
    v6 = __p;
    if (v12 != __p)
    {
      do
      {
        v8 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        v7 = v8;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      while (v5 != v4);
      v6 = __p;
    }
    v12 = v4;
    operator delete(v6);
  }
}

void webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::GetVideoTracks(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void *__p;
  char *v12;
  uint64_t v13;
  pthread_mutex_t v14;
  pthread_cond_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 24);
  v10 = xmmword_208F05250;
  v12 = 0;
  v13 = 0;
  __p = 0;
  rtc::Event::Event((rtc::Event *)&v14, 0, 0);
  webrtc::MethodCall<webrtc::MediaStreamInterface,std::vector<webrtc::scoped_refptr<webrtc::VideoTrackInterface>>>::Marshal(*(rtc::Thread **)(a1 + 16), &v9, a2);
  pthread_mutex_destroy(&v14);
  pthread_cond_destroy(&v15);
  v4 = (char *)__p;
  if (__p)
  {
    v5 = v12;
    v6 = __p;
    if (v12 != __p)
    {
      do
      {
        v8 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        v7 = v8;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      while (v5 != v4);
      v6 = __p;
    }
    v12 = v4;
    operator delete(v6);
  }
}

uint64_t webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::FindAudioTrack@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  pthread_mutex_t v10;
  pthread_cond_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 24);
  v7 = xmmword_208F05260;
  v8 = 0;
  v9 = a2;
  rtc::Event::Event((rtc::Event *)&v10, 0, 0);
  webrtc::MethodCall<webrtc::MediaStreamInterface,webrtc::scoped_refptr<webrtc::AudioTrackInterface>,std::string const&>::Marshal(*(rtc::Thread **)(a1 + 16), &v6, a3);
  pthread_mutex_destroy(&v10);
  pthread_cond_destroy(&v11);
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

uint64_t webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::FindVideoTrack@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  pthread_mutex_t v10;
  pthread_cond_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 24);
  v7 = xmmword_208F05270;
  v8 = 0;
  v9 = a2;
  rtc::Event::Event((rtc::Event *)&v10, 0, 0);
  webrtc::MethodCall<webrtc::MediaStreamInterface,webrtc::scoped_refptr<webrtc::VideoTrackInterface>,std::string const&>::Marshal(*(rtc::Thread **)(a1 + 16), &v6, a3);
  pthread_mutex_destroy(&v10);
  pthread_cond_destroy(&v11);
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

uint64_t webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::AddTrack(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F16E50;
  v7 = a2;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  v3 = webrtc::MethodCall<webrtc::MediaStreamInterface,BOOL,webrtc::scoped_refptr<webrtc::AudioTrackInterface>>::Marshal((unint64_t)&v5, *(rtc::Thread **)(a1 + 16));
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  return v3;
}

{
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F05280;
  v7 = a2;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  v3 = webrtc::MethodCall<webrtc::MediaStreamInterface,BOOL,webrtc::scoped_refptr<webrtc::VideoTrackInterface>>::Marshal((unint64_t)&v5, *(rtc::Thread **)(a1 + 16));
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  return v3;
}

uint64_t webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::RemoveTrack(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F05290;
  v7 = a2;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  v3 = webrtc::MethodCall<webrtc::MediaStreamInterface,BOOL,webrtc::scoped_refptr<webrtc::AudioTrackInterface>>::Marshal((unint64_t)&v5, *(rtc::Thread **)(a1 + 16));
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  return v3;
}

{
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F052A0;
  v7 = a2;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  v3 = webrtc::MethodCall<webrtc::MediaStreamInterface,BOOL,webrtc::scoped_refptr<webrtc::VideoTrackInterface>>::Marshal((unint64_t)&v5, *(rtc::Thread **)(a1 + 16));
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  return v3;
}

uint64_t webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::RegisterObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F052C0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::UnregisterObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F052D0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

BOOL rtc::RefCountedObject<webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 32));
  return v1 == 1;
}

uint64_t `non-virtual thunk to'webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::RegisterObserver(uint64_t a1, uint64_t a2)
{
  return webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::RegisterObserver(a1 - 8, a2);
}

uint64_t `non-virtual thunk to'webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::UnregisterObserver(uint64_t a1, uint64_t a2)
{
  return webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::UnregisterObserver(a1 - 8, a2);
}

_QWORD *`non-virtual thunk to'rtc::RefCountedObject<webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>>::~RefCountedObject(uint64_t a1)
{
  return webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::~MediaStreamProxyWithInternal((_QWORD *)(a1 - 8));
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>>::~RefCountedObject(uint64_t a1)
{
  webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::~MediaStreamProxyWithInternal((_QWORD *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::~MediaStreamProxyWithInternal(_QWORD *a1)
{
  rtc::Thread *v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  char v7;
  char v8;
  __n128 v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C0BA008;
  a1[1] = &unk_24C0BA0B0;
  v12 = a1;
  v13 = webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::DestroyInternal;
  v14 = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = (rtc::Thread *)a1[2];
  if (rtc::Thread::IsCurrent(v2))
  {
    v13((uint64_t)v12 + (v14 >> 1));
  }
  else
  {
    v9.n128_u64[0] = (unint64_t)&v12;
    v10 = absl::internal_any_invocable::LocalManagerTrivial;
    v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v9, &v8, &v7);
    v10(1, &v9, &v9);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v3, v4);
  }
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamProxyWithInternal<webrtc::MediaStreamInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

void webrtc::MethodCall<webrtc::MediaStreamInterface,std::vector<webrtc::scoped_refptr<webrtc::AudioTrackInterface>>>::Marshal(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  void (*v6)(__int128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  TimeDelta v14;
  TimeDelta v15;
  __int128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  char v18;
  char v19;
  __int128 v20;
  __n128 (*v21)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v22)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__int128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v20, v8);
    v9 = a2[3];
    if (v9)
    {
      v10 = a2[4];
      v11 = (void *)a2[3];
      if (v10 != v9)
      {
        do
        {
          v13 = *(_QWORD *)(v10 - 8);
          v10 -= 8;
          v12 = v13;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        while (v10 != v9);
        v11 = (void *)a2[3];
      }
      a2[4] = v9;
      operator delete(v11);
    }
    v16 = v20;
    v17 = v21;
  }
  else
  {
    *(_QWORD *)&v20 = a2;
    v21 = absl::internal_any_invocable::LocalManagerTrivial;
    v22 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,std::vector<webrtc::scoped_refptr<webrtc::AudioTrackInterface>>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __int128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v20, &v19, &v18);
    v21(1, (__n128 *)&v20, (__n128 *)&v20);
    v14.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v15.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a2 + 7), v14, v15);
    v16 = *(_OWORD *)(a2 + 3);
    v17 = (__n128 (*)(uint64_t, __n128 *, __n128 *))a2[5];
  }
  *(_OWORD *)a3 = v16;
  *(_QWORD *)(a3 + 16) = v17;
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = 0;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,std::vector<webrtc::scoped_refptr<webrtc::AudioTrackInterface>>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(__int128 *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  v1 = *a1;
  v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v11, v4);
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(void **)(v1 + 24);
    if (v6 != v5)
    {
      do
      {
        v9 = *(_QWORD *)(v6 - 8);
        v6 -= 8;
        v8 = v9;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = *(void **)(v1 + 24);
    }
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v7);
  }
  *(_OWORD *)(v1 + 24) = v11;
  *(_QWORD *)(v1 + 40) = v12;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

void webrtc::MethodCall<webrtc::MediaStreamInterface,std::vector<webrtc::scoped_refptr<webrtc::VideoTrackInterface>>>::Marshal(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  void (*v6)(__int128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  TimeDelta v14;
  TimeDelta v15;
  __int128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  char v18;
  char v19;
  __int128 v20;
  __n128 (*v21)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v22)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__int128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v20, v8);
    v9 = a2[3];
    if (v9)
    {
      v10 = a2[4];
      v11 = (void *)a2[3];
      if (v10 != v9)
      {
        do
        {
          v13 = *(_QWORD *)(v10 - 8);
          v10 -= 8;
          v12 = v13;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        while (v10 != v9);
        v11 = (void *)a2[3];
      }
      a2[4] = v9;
      operator delete(v11);
    }
    v16 = v20;
    v17 = v21;
  }
  else
  {
    *(_QWORD *)&v20 = a2;
    v21 = absl::internal_any_invocable::LocalManagerTrivial;
    v22 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,std::vector<webrtc::scoped_refptr<webrtc::VideoTrackInterface>>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __int128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v20, &v19, &v18);
    v21(1, (__n128 *)&v20, (__n128 *)&v20);
    v14.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v15.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a2 + 7), v14, v15);
    v16 = *(_OWORD *)(a2 + 3);
    v17 = (__n128 (*)(uint64_t, __n128 *, __n128 *))a2[5];
  }
  *(_OWORD *)a3 = v16;
  *(_QWORD *)(a3 + 16) = v17;
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = 0;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,std::vector<webrtc::scoped_refptr<webrtc::VideoTrackInterface>>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(__int128 *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  v1 = *a1;
  v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v11, v4);
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(void **)(v1 + 24);
    if (v6 != v5)
    {
      do
      {
        v9 = *(_QWORD *)(v6 - 8);
        v6 -= 8;
        v8 = v9;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = *(void **)(v1 + 24);
    }
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v7);
  }
  *(_OWORD *)(v1 + 24) = v11;
  *(_QWORD *)(v1 + 40) = v12;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

uint64_t webrtc::MethodCall<webrtc::MediaStreamInterface,webrtc::scoped_refptr<webrtc::AudioTrackInterface>,std::string const&>::Marshal@<X0>(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, _QWORD *a3@<X8>)
{
  void (*v6)(__n128 *__return_ptr, _QWORD *, _QWORD);
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t result;
  TimeDelta v11;
  TimeDelta v12;
  uint64_t v13;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *, _QWORD))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *, _QWORD))(*v8 + v6);
    v6(&v16, v8, a2[4]);
    v9 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    result = a2[3];
    a2[3] = v9;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      result = v16.n128_u64[0];
      if (v16.n128_u64[0])
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)a2;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,webrtc::scoped_refptr<webrtc::AudioTrackInterface>,std::string const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    result = rtc::Event::Wait((rtc::Event *)(a2 + 5), v11, v12);
  }
  v13 = a2[3];
  a2[3] = 0;
  *a3 = v13;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,webrtc::scoped_refptr<webrtc::AudioTrackInterface>,std::string const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v5 + v2);
  v2(&v9, v5, v4);
  v6 = v9;
  v9 = 0;
  v7 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t webrtc::MethodCall<webrtc::MediaStreamInterface,webrtc::scoped_refptr<webrtc::VideoTrackInterface>,std::string const&>::Marshal@<X0>(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, _QWORD *a3@<X8>)
{
  void (*v6)(__n128 *__return_ptr, _QWORD *, _QWORD);
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t result;
  TimeDelta v11;
  TimeDelta v12;
  uint64_t v13;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *, _QWORD))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *, _QWORD))(*v8 + v6);
    v6(&v16, v8, a2[4]);
    v9 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    result = a2[3];
    a2[3] = v9;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      result = v16.n128_u64[0];
      if (v16.n128_u64[0])
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)a2;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,webrtc::scoped_refptr<webrtc::VideoTrackInterface>,std::string const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    result = rtc::Event::Wait((rtc::Event *)(a2 + 5), v11, v12);
  }
  v13 = a2[3];
  a2[3] = 0;
  *a3 = v13;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,webrtc::scoped_refptr<webrtc::VideoTrackInterface>,std::string const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*v5 + v2);
  v2(&v9, v5, v4);
  v6 = v9;
  v9 = 0;
  v7 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t webrtc::MethodCall<webrtc::MediaStreamInterface,BOOL,webrtc::scoped_refptr<webrtc::AudioTrackInterface>>::Marshal(unint64_t a1, rtc::Thread *this)
{
  uint64_t (*v4)(_QWORD *, __n128 *);
  uint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  TimeDelta v10;
  TimeDelta v11;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v4 = *(uint64_t (**)(_QWORD *, __n128 *))(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(unint64_t **)(a1 + 32);
    v7 = (_QWORD *)(*(_QWORD *)a1 + (v5 >> 1));
    if ((v5 & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, __n128 *))(*v7 + v4);
    v8 = *v6;
    *v6 = 0;
    v14.n128_u64[0] = v8;
    *(_BYTE *)(a1 + 24) = v4(v7, &v14);
    if (v14.n128_u64[0])
      (*(void (**)(unint64_t))(*(_QWORD *)v14.n128_u64[0] + 8))(v14.n128_u64[0]);
    return *(unsigned __int8 *)(a1 + 24);
  }
  else
  {
    v14.n128_u64[0] = a1;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,BOOL,webrtc::scoped_refptr<webrtc::AudioTrackInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a1 + 40), v10, v11);
    return *(unsigned __int8 *)(a1 + 24);
  }
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,BOOL,webrtc::scoped_refptr<webrtc::AudioTrackInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(uint64_t **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, uint64_t *))(*v5 + v2);
  v6 = *v4;
  *v4 = 0;
  v8 = v6;
  *(_BYTE *)(v1 + 24) = v2(v5, &v8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t webrtc::MethodCall<webrtc::MediaStreamInterface,BOOL,webrtc::scoped_refptr<webrtc::VideoTrackInterface>>::Marshal(unint64_t a1, rtc::Thread *this)
{
  uint64_t (*v4)(_QWORD *, __n128 *);
  uint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  TimeDelta v10;
  TimeDelta v11;
  char v12;
  char v13;
  __n128 v14;
  __n128 (*v15)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v16)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v4 = *(uint64_t (**)(_QWORD *, __n128 *))(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(unint64_t **)(a1 + 32);
    v7 = (_QWORD *)(*(_QWORD *)a1 + (v5 >> 1));
    if ((v5 & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, __n128 *))(*v7 + v4);
    v8 = *v6;
    *v6 = 0;
    v14.n128_u64[0] = v8;
    *(_BYTE *)(a1 + 24) = v4(v7, &v14);
    if (v14.n128_u64[0])
      (*(void (**)(unint64_t))(*(_QWORD *)v14.n128_u64[0] + 8))(v14.n128_u64[0]);
    return *(unsigned __int8 *)(a1 + 24);
  }
  else
  {
    v14.n128_u64[0] = a1;
    v15 = absl::internal_any_invocable::LocalManagerTrivial;
    v16 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,BOOL,webrtc::scoped_refptr<webrtc::VideoTrackInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v14, &v13, &v12);
    v15(1, &v14, &v14);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)(a1 + 40), v10, v11);
    return *(unsigned __int8 *)(a1 + 24);
  }
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,BOOL,webrtc::scoped_refptr<webrtc::VideoTrackInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, uint64_t *);
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, uint64_t *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(uint64_t **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, uint64_t *))(*v5 + v2);
  v6 = *v4;
  *v4 = 0;
  v8 = v6;
  *(_BYTE *)(v1 + 24) = v2(v5, &v8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::MediaStreamInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t rtc::RefCountedObject<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 48);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 12;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>>::~RefCountedObject(_QWORD *a1)
{
  webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::~VideoTrackProxyWithInternal(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::kind(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::id(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::enabled(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  char v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 40);
  v15 = xmmword_208F05250;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackInterface,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16 != 0;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::set_enabled(uint64_t a1, char a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, _QWORD);
  _QWORD *v5;
  uint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  char v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  char v18;
  char *v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 40);
  v17 = xmmword_208F05260;
  v19 = &v10;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, _QWORD))v17;
    v5 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v17);
    v6 = v4(v5, *v19);
    v18 = v6;
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,BOOL,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
    v6 = v18 != 0;
  }
  pthread_mutex_destroy(&v20);
  pthread_cond_destroy(&v21);
  return v6;
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::state(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 40);
  v15 = xmmword_208F05270;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackInterface,webrtc::MediaStreamTrackInterface::TrackState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::AddOrUpdateSink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  rtc::Thread *v4;
  void (*v5)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v6;
  TimeDelta v7;
  TimeDelta v8;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 40);
  v17 = xmmword_208F16E50;
  v18 = &v10;
  v19 = a3;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(_QWORD *, uint64_t, uint64_t))v17;
    v6 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v5 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*v6 + v17);
    v5(v6, *v18, v19);
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,rtc::VideoSinkInterface<webrtc::VideoFrame> *,rtc::VideoSinkWants const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
  }
  pthread_mutex_destroy(&v20);
  return pthread_cond_destroy(&v21);
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::RemoveSink(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = xmmword_208F05280;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,rtc::VideoSinkInterface<webrtc::VideoFrame> *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::GetSource(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 88))(*(_QWORD *)(a1 + 40));
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::content_hint(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 40);
  v15 = xmmword_208F052A0;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackInterface,webrtc::VideoTrackInterface::ContentHint>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::set_content_hint(uint64_t a1, int a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, _QWORD);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  int v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  unsigned int *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = xmmword_208F052B0;
  v17 = (unsigned int *)&v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, _QWORD))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, _QWORD))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,webrtc::VideoTrackInterface::ContentHint>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::RequestRefreshFrame(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 40);
  v14 = xmmword_208F17180;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 32);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v14;
    v4 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v14);
    v3(v4);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v13;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v10, &v9, &v8);
    v11(1, &v10, &v10);
    v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v6.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v5, v6);
  }
  pthread_mutex_destroy(&v15);
  return pthread_cond_destroy(&v16);
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::RegisterObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = xmmword_208F052C0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::UnregisterObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = xmmword_208F052D0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 24);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

BOOL rtc::RefCountedObject<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 48));
  return v1 == 1;
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::RegisterObserver(uint64_t a1, uint64_t a2)
{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::RegisterObserver(a1 - 8, a2);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::UnregisterObserver(uint64_t a1, uint64_t a2)
{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::UnregisterObserver(a1 - 8, a2);
}

_QWORD *`non-virtual thunk to'rtc::RefCountedObject<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>>::~RefCountedObject(uint64_t a1)
{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::~VideoTrackProxyWithInternal((_QWORD *)(a1 - 8));
}

{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::~VideoTrackProxyWithInternal((_QWORD *)(a1 - 16));
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>>::~RefCountedObject(uint64_t a1)
{
  webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::~VideoTrackProxyWithInternal((_QWORD *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::~VideoTrackProxyWithInternal((_QWORD *)(a1 - 16));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::AddOrUpdateSink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::AddOrUpdateSink(a1 - 16, a2, a3);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::RemoveSink(uint64_t a1, uint64_t a2)
{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::RemoveSink(a1 - 16, a2);
}

uint64_t `non-virtual thunk to'webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::RequestRefreshFrame(uint64_t a1)
{
  return webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::RequestRefreshFrame(a1 - 16);
}

_QWORD *webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::~VideoTrackProxyWithInternal(_QWORD *a1)
{
  rtc::Thread *v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  char v7;
  char v8;
  __n128 v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C0BA1E8;
  a1[1] = &unk_24C0BA280;
  a1[2] = &unk_24C0BA2B0;
  v12 = a1;
  v13 = webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::DestroyInternal;
  v14 = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = (rtc::Thread *)a1[3];
  if (rtc::Thread::IsCurrent(v2))
  {
    v13((uint64_t)v12 + (v14 >> 1));
  }
  else
  {
    v9.n128_u64[0] = (unint64_t)&v12;
    v10 = absl::internal_any_invocable::LocalManagerTrivial;
    v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v9, &v8, &v7);
    v10(1, &v9, &v9);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v3, v4);
  }
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v5 = a1[5];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackProxyWithInternal<webrtc::VideoTrackInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackInterface,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_BYTE *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,BOOL,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(unsigned __int8 **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v2);
  *(_BYTE *)(v1 + 24) = v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackInterface,webrtc::MediaStreamTrackInterface::TrackState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_DWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,rtc::VideoSinkInterface<webrtc::VideoFrame> *,rtc::VideoSinkWants const&>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v5 = *(_QWORD **)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  v6 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*v6 + v2);
  v2(v6, *v5, v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
  *(_BYTE *)(v1 + 161) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 112));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,rtc::VideoSinkInterface<webrtc::VideoFrame> *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

