uint64_t silk_shell_decoder(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned __int16 v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  char *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  __int16 v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  __int16 v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  __int16 v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  __int16 v82;
  char *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  __int16 v113;
  char *v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  __int16 v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  int v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  unsigned int v142;
  __int16 v143;
  __int16 v144;
  uint64_t v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  __int16 v151;
  unint64_t v152;
  int v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  char *v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  unint64_t v166;
  int v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  char *v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  __int16 v178;
  unint64_t v179;
  int v180;
  unint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  char *v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  unint64_t v193;
  int v194;
  unint64_t v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  char *v200;
  unsigned int v201;
  unsigned int v202;
  int v203;
  unsigned int v204;
  __int16 v205;
  unint64_t v206;
  int v207;
  unint64_t v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  char *v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  unsigned int v219;
  unint64_t v220;
  int v221;
  unint64_t v222;
  int v223;
  uint64_t v224;
  int v225;

  if (a3 < 1)
  {
    v19 = 0;
    v20 = 0;
LABEL_32:
    v50 = 0;
    LOWORD(v36) = 0;
    *(_DWORD *)result = 0;
    goto LABEL_33;
  }
  v3 = 0;
  v4 = *((_DWORD *)a2 + 8);
  v5 = *((_DWORD *)a2 + 9);
  v6 = v4 >> 8;
  v7 = -65536;
  do
  {
    v8 = v4;
    v4 = v6 * silk_shell_code_table3[silk_shell_code_table_offsets[a3] + v3++];
    v7 += 0x10000;
    v9 = v5 - v4;
  }
  while (v5 < v4);
  v10 = v8 - v4;
  *((_DWORD *)a2 + 8) = v8 - v4;
  *((_DWORD *)a2 + 9) = v9;
  if (v8 - v4 >= 0x800001)
  {
    v18 = v8 - v4;
  }
  else
  {
    v11 = *((unsigned int *)a2 + 2);
    v12 = *((_DWORD *)a2 + 11);
    v13 = *((unsigned int *)a2 + 7);
    v14 = *((_DWORD *)a2 + 6) + 8;
    do
    {
      *((_DWORD *)a2 + 6) = v14;
      v18 = v10 << 8;
      *((_DWORD *)a2 + 8) = v10 << 8;
      if (v13 < v11)
      {
        v15 = *a2;
        *((_DWORD *)a2 + 7) = v13 + 1;
        v16 = *(unsigned __int8 *)(v15 + v13++);
      }
      else
      {
        v16 = 0;
      }
      v9 = (((v9 & 0x7FFFFF) << 8) | ((v16 | (v12 << 8)) >> 1)) ^ 0xFF;
      *((_DWORD *)a2 + 11) = v16;
      *((_DWORD *)a2 + 9) = v9;
      v14 += 8;
      v12 = v16;
      v17 = v10 > 0x8000;
      v10 <<= 8;
    }
    while (!v17);
  }
  v20 = a3 + 1 - v3;
  if (v7 <= 0)
  {
    v19 = 0;
    goto LABEL_32;
  }
  v21 = 0;
  v22 = 0;
  v23 = v3 - 1;
  v24 = v18 >> 8;
  do
  {
    v25 = v18;
    v18 = v24 * silk_shell_code_table2[silk_shell_code_table_offsets[v23] + v21];
    v22 += 0x10000;
    ++v21;
    v26 = v9 - v18;
  }
  while (v9 < v18);
  v27 = v25 - v18;
  *((_DWORD *)a2 + 8) = v25 - v18;
  *((_DWORD *)a2 + 9) = v26;
  if (v25 - v18 >= 0x800001)
  {
    v34 = v25 - v18;
  }
  else
  {
    v28 = *((unsigned int *)a2 + 2);
    v29 = *((_DWORD *)a2 + 11);
    v30 = *((unsigned int *)a2 + 7);
    v31 = *((_DWORD *)a2 + 6) + 8;
    do
    {
      *((_DWORD *)a2 + 6) = v31;
      v34 = v27 << 8;
      *((_DWORD *)a2 + 8) = v27 << 8;
      if (v30 < v28)
      {
        v32 = *a2;
        *((_DWORD *)a2 + 7) = v30 + 1;
        v33 = *(unsigned __int8 *)(v32 + v30++);
      }
      else
      {
        v33 = 0;
      }
      v26 = (((v26 & 0x7FFFFF) << 8) | ((v33 | (v29 << 8)) >> 1)) ^ 0xFF;
      *((_DWORD *)a2 + 11) = v33;
      *((_DWORD *)a2 + 9) = v26;
      v31 += 8;
      v29 = v33;
      v17 = v27 > 0x8000;
      v27 <<= 8;
    }
    while (!v17);
  }
  v19 = v23 - (_DWORD)v21 + 1;
  if (v22 - 0x10000 <= 0)
    goto LABEL_32;
  v35 = 0;
  v36 = v21 + 1;
  v37 = (char *)&silk_shell_code_table1[silk_shell_code_table_offsets[(unsigned __int16)(v21 - 1)]];
  v38 = v34 >> 8;
  v39 = -65536;
  do
  {
    v40 = v34;
    v34 = v38 * v37[v35++];
    --v36;
    v22 -= 0x10000;
    v39 += 0x10000;
    v41 = v26 - v34;
  }
  while (v26 < v34);
  v42 = v40 - v34;
  *((_DWORD *)a2 + 8) = v42;
  *((_DWORD *)a2 + 9) = v41;
  if (v42 >= 0x800001)
  {
    v49 = v42;
  }
  else
  {
    v43 = *((unsigned int *)a2 + 2);
    v44 = *((_DWORD *)a2 + 11);
    v45 = *((unsigned int *)a2 + 7);
    v46 = *((_DWORD *)a2 + 6) + 8;
    do
    {
      *((_DWORD *)a2 + 6) = v46;
      v49 = v42 << 8;
      *((_DWORD *)a2 + 8) = v42 << 8;
      if (v45 < v43)
      {
        v47 = *a2;
        *((_DWORD *)a2 + 7) = v45 + 1;
        v48 = *(unsigned __int8 *)(v47 + v45++);
      }
      else
      {
        v48 = 0;
      }
      v41 = (((v41 & 0x7FFFFF) << 8) | ((v48 | (v44 << 8)) >> 1)) ^ 0xFF;
      *((_DWORD *)a2 + 11) = v48;
      *((_DWORD *)a2 + 9) = v41;
      v46 += 8;
      v44 = v48;
      v17 = v42 > 0x8000;
      v42 <<= 8;
    }
    while (!v17);
  }
  if (v39 < 1)
  {
    v205 = 0;
    LOWORD(v35) = 0;
  }
  else
  {
    v199 = 0;
    v200 = (char *)&silk_shell_code_table0[silk_shell_code_table_offsets[(unsigned __int16)(v35 - 1)]];
    v201 = v49 >> 8;
    do
    {
      v202 = v49;
      v49 = v201 * v200[v199++];
      LODWORD(v35) = v35 - 1;
      v203 = v41 - v49;
    }
    while (v41 < v49);
    v204 = v202 - v49;
    *((_DWORD *)a2 + 8) = v202 - v49;
    *((_DWORD *)a2 + 9) = v203;
    v205 = v199 - 1;
    if (v204 < 0x800001)
    {
      v206 = *((unsigned int *)a2 + 2);
      v207 = *((_DWORD *)a2 + 11);
      v208 = *((unsigned int *)a2 + 7);
      v209 = *((_DWORD *)a2 + 6) + 8;
      do
      {
        *((_DWORD *)a2 + 6) = v209;
        *((_DWORD *)a2 + 8) = v204 << 8;
        if (v208 < v206)
        {
          v210 = *a2;
          *((_DWORD *)a2 + 7) = v208 + 1;
          v211 = *(unsigned __int8 *)(v210 + v208++);
        }
        else
        {
          v211 = 0;
        }
        v203 = (((v203 & 0x7FFFFF) << 8) | ((v211 | (v207 << 8)) >> 1)) ^ 0xFF;
        *((_DWORD *)a2 + 11) = v211;
        *((_DWORD *)a2 + 9) = v203;
        v209 += 8;
        v207 = v211;
        v17 = v204 > 0x8000;
        v204 <<= 8;
      }
      while (!v17);
    }
  }
  *(_WORD *)result = v205;
  *(_WORD *)(result + 2) = v35;
  if (v22 <= 0)
  {
    v50 = 0;
    LOWORD(v36) = 0;
  }
  else
  {
    v212 = 0;
    v213 = (char *)&silk_shell_code_table0[silk_shell_code_table_offsets[(unsigned __int16)(v36 - 1)]];
    v215 = *((_DWORD *)a2 + 8);
    v214 = *((_DWORD *)a2 + 9);
    v216 = v215 >> 8;
    do
    {
      v217 = v215;
      v215 = v216 * v213[v212++];
      --v36;
      v218 = v214 - v215;
    }
    while (v214 < v215);
    v219 = v217 - v215;
    *((_DWORD *)a2 + 8) = v217 - v215;
    *((_DWORD *)a2 + 9) = v218;
    v50 = v212 - 1;
    if (v217 - v215 < 0x800001)
    {
      v220 = *((unsigned int *)a2 + 2);
      v221 = *((_DWORD *)a2 + 11);
      v222 = *((unsigned int *)a2 + 7);
      v223 = *((_DWORD *)a2 + 6) + 8;
      do
      {
        *((_DWORD *)a2 + 6) = v223;
        *((_DWORD *)a2 + 8) = v219 << 8;
        if (v222 < v220)
        {
          v224 = *a2;
          *((_DWORD *)a2 + 7) = v222 + 1;
          v225 = *(unsigned __int8 *)(v224 + v222++);
        }
        else
        {
          v225 = 0;
        }
        v218 = (((v218 & 0x7FFFFF) << 8) | ((v225 | (v221 << 8)) >> 1)) ^ 0xFF;
        *((_DWORD *)a2 + 11) = v225;
        *((_DWORD *)a2 + 9) = v218;
        v223 += 8;
        v221 = v225;
        v17 = v219 > 0x8000;
        v219 <<= 8;
      }
      while (!v17);
    }
  }
LABEL_33:
  *(_WORD *)(result + 4) = v50;
  *(_WORD *)(result + 6) = v36;
  if (v19 << 16 <= 0)
  {
    v66 = 0;
    LOWORD(v67) = 0;
    *(_DWORD *)(result + 8) = 0;
  }
  else
  {
    v51 = 0;
    v53 = *((_DWORD *)a2 + 8);
    v52 = *((_DWORD *)a2 + 9);
    v54 = v53 >> 8;
    v55 = -65536;
    do
    {
      v56 = v53;
      v53 = v54 * silk_shell_code_table1[silk_shell_code_table_offsets[(unsigned __int16)v19] + v51++];
      v55 += 0x10000;
      v57 = v52 - v53;
    }
    while (v52 < v53);
    v58 = v56 - v53;
    *((_DWORD *)a2 + 8) = v56 - v53;
    *((_DWORD *)a2 + 9) = v57;
    if (v56 - v53 >= 0x800001)
    {
      v65 = v56 - v53;
    }
    else
    {
      v59 = *((unsigned int *)a2 + 2);
      v60 = *((_DWORD *)a2 + 11);
      v61 = *((unsigned int *)a2 + 7);
      v62 = *((_DWORD *)a2 + 6) + 8;
      do
      {
        *((_DWORD *)a2 + 6) = v62;
        v65 = v58 << 8;
        *((_DWORD *)a2 + 8) = v58 << 8;
        if (v61 < v59)
        {
          v63 = *a2;
          *((_DWORD *)a2 + 7) = v61 + 1;
          v64 = *(unsigned __int8 *)(v63 + v61++);
        }
        else
        {
          v64 = 0;
        }
        v57 = (((v57 & 0x7FFFFF) << 8) | ((v64 | (v60 << 8)) >> 1)) ^ 0xFF;
        *((_DWORD *)a2 + 11) = v64;
        *((_DWORD *)a2 + 9) = v57;
        v62 += 8;
        v60 = v64;
        v17 = v58 > 0x8000;
        v58 <<= 8;
      }
      while (!v17);
    }
    if (v55 < 1)
    {
      v74 = 0;
      LOWORD(v70) = 0;
    }
    else
    {
      v68 = 0;
      v69 = v65 >> 8;
      v70 = v51;
      do
      {
        v71 = v65;
        v65 = v69 * silk_shell_code_table0[silk_shell_code_table_offsets[(unsigned __int16)(v51 - 1)] + v68++];
        --v70;
        v72 = v57 - v65;
      }
      while (v57 < v65);
      v73 = v71 - v65;
      *((_DWORD *)a2 + 8) = v73;
      *((_DWORD *)a2 + 9) = v72;
      v74 = v68 - 1;
      if (v73 < 0x800001)
      {
        v75 = *((unsigned int *)a2 + 2);
        v76 = *((_DWORD *)a2 + 11);
        v77 = *((unsigned int *)a2 + 7);
        v78 = *((_DWORD *)a2 + 6) + 8;
        do
        {
          *((_DWORD *)a2 + 6) = v78;
          *((_DWORD *)a2 + 8) = v73 << 8;
          if (v77 < v75)
          {
            v79 = *a2;
            *((_DWORD *)a2 + 7) = v77 + 1;
            v80 = *(unsigned __int8 *)(v79 + v77++);
          }
          else
          {
            v80 = 0;
          }
          v72 = (((v72 & 0x7FFFFF) << 8) | ((v80 | (v76 << 8)) >> 1)) ^ 0xFF;
          *((_DWORD *)a2 + 11) = v80;
          *((_DWORD *)a2 + 9) = v72;
          v78 += 8;
          v76 = v80;
          v17 = v73 > 0x8000;
          v73 <<= 8;
        }
        while (!v17);
      }
    }
    *(_WORD *)(result + 8) = v74;
    *(_WORD *)(result + 10) = v70;
    if ((v19 << 16) - v55 < 1)
    {
      v66 = 0;
      LOWORD(v67) = 0;
    }
    else
    {
      v81 = 0;
      v82 = v19;
      v67 = v19 - v51 + 2;
      v83 = (char *)&silk_shell_code_table0[silk_shell_code_table_offsets[(unsigned __int16)(v82 - v51 + 1)]];
      v84 = *((_DWORD *)a2 + 8);
      v85 = *((_DWORD *)a2 + 9);
      v86 = v84 >> 8;
      do
      {
        v87 = v84;
        v84 = v86 * v83[v81++];
        --v67;
        v88 = v85 - v84;
      }
      while (v85 < v84);
      v89 = v87 - v84;
      *((_DWORD *)a2 + 8) = v87 - v84;
      *((_DWORD *)a2 + 9) = v88;
      v66 = v81 - 1;
      if (v87 - v84 < 0x800001)
      {
        v90 = *((unsigned int *)a2 + 2);
        v91 = *((_DWORD *)a2 + 11);
        v92 = *((unsigned int *)a2 + 7);
        v93 = *((_DWORD *)a2 + 6) + 8;
        do
        {
          *((_DWORD *)a2 + 6) = v93;
          *((_DWORD *)a2 + 8) = v89 << 8;
          if (v92 < v90)
          {
            v94 = *a2;
            *((_DWORD *)a2 + 7) = v92 + 1;
            v95 = *(unsigned __int8 *)(v94 + v92++);
          }
          else
          {
            v95 = 0;
          }
          v88 = (((v88 & 0x7FFFFF) << 8) | ((v95 | (v91 << 8)) >> 1)) ^ 0xFF;
          *((_DWORD *)a2 + 11) = v95;
          *((_DWORD *)a2 + 9) = v88;
          v93 += 8;
          v91 = v95;
          v17 = v89 > 0x8000;
          v89 <<= 8;
        }
        while (!v17);
      }
    }
  }
  *(_WORD *)(result + 12) = v66;
  *(_WORD *)(result + 14) = v67;
  if (v20 << 16 < 1)
  {
    v111 = 0;
LABEL_84:
    v127 = 0;
    v113 = 0;
    *(_DWORD *)(result + 16) = 0;
    goto LABEL_85;
  }
  v96 = 0;
  v97 = 0;
  v98 = *((_DWORD *)a2 + 8);
  v99 = *((_DWORD *)a2 + 9);
  v100 = v98 >> 8;
  do
  {
    v101 = v98;
    v98 = v100 * silk_shell_code_table2[silk_shell_code_table_offsets[(unsigned __int16)v20] + v96];
    v97 += 0x10000;
    ++v96;
    v102 = v99 - v98;
  }
  while (v99 < v98);
  v103 = v101 - v98;
  *((_DWORD *)a2 + 8) = v101 - v98;
  *((_DWORD *)a2 + 9) = v102;
  if (v101 - v98 >= 0x800001)
  {
    v110 = v101 - v98;
  }
  else
  {
    v104 = *((unsigned int *)a2 + 2);
    v105 = *((_DWORD *)a2 + 11);
    v106 = *((unsigned int *)a2 + 7);
    v107 = *((_DWORD *)a2 + 6) + 8;
    do
    {
      *((_DWORD *)a2 + 6) = v107;
      v110 = v103 << 8;
      *((_DWORD *)a2 + 8) = v103 << 8;
      if (v106 < v104)
      {
        v108 = *a2;
        *((_DWORD *)a2 + 7) = v106 + 1;
        v109 = *(unsigned __int8 *)(v108 + v106++);
      }
      else
      {
        v109 = 0;
      }
      v102 = (((v102 & 0x7FFFFF) << 8) | ((v109 | (v105 << 8)) >> 1)) ^ 0xFF;
      *((_DWORD *)a2 + 11) = v109;
      *((_DWORD *)a2 + 9) = v102;
      v107 += 8;
      v105 = v109;
      v17 = v103 > 0x8000;
      v103 <<= 8;
    }
    while (!v17);
  }
  v111 = (unsigned __int16)v20 - (_DWORD)v96 + 1;
  if (v97 - 0x10000 <= 0)
    goto LABEL_84;
  v112 = 0;
  v113 = v96 + 1;
  v114 = (char *)&silk_shell_code_table1[silk_shell_code_table_offsets[(unsigned __int16)(v96 - 1)]];
  v115 = v110 >> 8;
  v116 = -65536;
  do
  {
    v117 = v110;
    v110 = v115 * v114[v112++];
    --v113;
    v97 -= 0x10000;
    v116 += 0x10000;
    v118 = v102 - v110;
  }
  while (v102 < v110);
  v119 = v117 - v110;
  *((_DWORD *)a2 + 8) = v119;
  *((_DWORD *)a2 + 9) = v118;
  if (v119 >= 0x800001)
  {
    v126 = v119;
  }
  else
  {
    v120 = *((unsigned int *)a2 + 2);
    v121 = *((_DWORD *)a2 + 11);
    v122 = *((unsigned int *)a2 + 7);
    v123 = *((_DWORD *)a2 + 6) + 8;
    do
    {
      *((_DWORD *)a2 + 6) = v123;
      v126 = v119 << 8;
      *((_DWORD *)a2 + 8) = v119 << 8;
      if (v122 < v120)
      {
        v124 = *a2;
        *((_DWORD *)a2 + 7) = v122 + 1;
        v125 = *(unsigned __int8 *)(v124 + v122++);
      }
      else
      {
        v125 = 0;
      }
      v118 = (((v118 & 0x7FFFFF) << 8) | ((v125 | (v121 << 8)) >> 1)) ^ 0xFF;
      *((_DWORD *)a2 + 11) = v125;
      *((_DWORD *)a2 + 9) = v118;
      v123 += 8;
      v121 = v125;
      v17 = v119 > 0x8000;
      v119 <<= 8;
    }
    while (!v17);
  }
  if (v116 < 1)
  {
    v178 = 0;
    LOWORD(v112) = 0;
  }
  else
  {
    v172 = 0;
    v173 = (char *)&silk_shell_code_table0[silk_shell_code_table_offsets[(unsigned __int16)(v112 - 1)]];
    v174 = v126 >> 8;
    do
    {
      v175 = v126;
      v126 = v174 * v173[v172++];
      LODWORD(v112) = v112 - 1;
      v176 = v118 - v126;
    }
    while (v118 < v126);
    v177 = v175 - v126;
    *((_DWORD *)a2 + 8) = v175 - v126;
    *((_DWORD *)a2 + 9) = v176;
    v178 = v172 - 1;
    if (v177 < 0x800001)
    {
      v179 = *((unsigned int *)a2 + 2);
      v180 = *((_DWORD *)a2 + 11);
      v181 = *((unsigned int *)a2 + 7);
      v182 = *((_DWORD *)a2 + 6) + 8;
      do
      {
        *((_DWORD *)a2 + 6) = v182;
        *((_DWORD *)a2 + 8) = v177 << 8;
        if (v181 < v179)
        {
          v183 = *a2;
          *((_DWORD *)a2 + 7) = v181 + 1;
          v184 = *(unsigned __int8 *)(v183 + v181++);
        }
        else
        {
          v184 = 0;
        }
        v176 = (((v176 & 0x7FFFFF) << 8) | ((v184 | (v180 << 8)) >> 1)) ^ 0xFF;
        *((_DWORD *)a2 + 11) = v184;
        *((_DWORD *)a2 + 9) = v176;
        v182 += 8;
        v180 = v184;
        v17 = v177 > 0x8000;
        v177 <<= 8;
      }
      while (!v17);
    }
  }
  *(_WORD *)(result + 16) = v178;
  *(_WORD *)(result + 18) = v112;
  if (v97 <= 0)
  {
    v127 = 0;
    v113 = 0;
  }
  else
  {
    v185 = 0;
    v186 = (char *)&silk_shell_code_table0[silk_shell_code_table_offsets[(unsigned __int16)(v113 - 1)]];
    v187 = *((_DWORD *)a2 + 8);
    v188 = *((_DWORD *)a2 + 9);
    v189 = v187 >> 8;
    do
    {
      v190 = v187;
      v187 = v189 * v186[v185++];
      --v113;
      v191 = v188 - v187;
    }
    while (v188 < v187);
    v192 = v190 - v187;
    *((_DWORD *)a2 + 8) = v190 - v187;
    *((_DWORD *)a2 + 9) = v191;
    v127 = v185 - 1;
    if (v190 - v187 < 0x800001)
    {
      v193 = *((unsigned int *)a2 + 2);
      v194 = *((_DWORD *)a2 + 11);
      v195 = *((unsigned int *)a2 + 7);
      v196 = *((_DWORD *)a2 + 6) + 8;
      do
      {
        *((_DWORD *)a2 + 6) = v196;
        *((_DWORD *)a2 + 8) = v192 << 8;
        if (v195 < v193)
        {
          v197 = *a2;
          *((_DWORD *)a2 + 7) = v195 + 1;
          v198 = *(unsigned __int8 *)(v197 + v195++);
        }
        else
        {
          v198 = 0;
        }
        v191 = (((v191 & 0x7FFFFF) << 8) | ((v198 | (v194 << 8)) >> 1)) ^ 0xFF;
        *((_DWORD *)a2 + 11) = v198;
        *((_DWORD *)a2 + 9) = v191;
        v196 += 8;
        v194 = v198;
        v17 = v192 > 0x8000;
        v192 <<= 8;
      }
      while (!v17);
    }
  }
LABEL_85:
  *(_WORD *)(result + 20) = v127;
  *(_WORD *)(result + 22) = v113;
  if (v111 << 16 <= 0)
  {
    v143 = 0;
    v144 = 0;
    *(_DWORD *)(result + 24) = 0;
LABEL_95:
    *(_WORD *)(result + 28) = v143;
    *(_WORD *)(result + 30) = v144;
    return result;
  }
  v128 = 0;
  v129 = *((_DWORD *)a2 + 8);
  v130 = *((_DWORD *)a2 + 9);
  v131 = v129 >> 8;
  v132 = -65536;
  do
  {
    v133 = v129;
    v129 = v131 * silk_shell_code_table1[silk_shell_code_table_offsets[(unsigned __int16)v111] + v128++];
    v132 += 0x10000;
    v134 = v130 - v129;
  }
  while (v130 < v129);
  v135 = v133 - v129;
  *((_DWORD *)a2 + 8) = v133 - v129;
  *((_DWORD *)a2 + 9) = v134;
  if (v133 - v129 >= 0x800001)
  {
    v142 = v133 - v129;
  }
  else
  {
    v136 = *((unsigned int *)a2 + 2);
    v137 = *((_DWORD *)a2 + 11);
    v138 = *((unsigned int *)a2 + 7);
    v139 = *((_DWORD *)a2 + 6) + 8;
    do
    {
      *((_DWORD *)a2 + 6) = v139;
      v142 = v135 << 8;
      *((_DWORD *)a2 + 8) = v135 << 8;
      if (v138 < v136)
      {
        v140 = *a2;
        *((_DWORD *)a2 + 7) = v138 + 1;
        v141 = *(unsigned __int8 *)(v140 + v138++);
      }
      else
      {
        v141 = 0;
      }
      v134 = (((v134 & 0x7FFFFF) << 8) | ((v141 | (v137 << 8)) >> 1)) ^ 0xFF;
      *((_DWORD *)a2 + 11) = v141;
      *((_DWORD *)a2 + 9) = v134;
      v139 += 8;
      v137 = v141;
      v17 = v135 > 0x8000;
      v135 <<= 8;
    }
    while (!v17);
  }
  if (v132 < 1)
  {
    v151 = 0;
    LOWORD(v147) = 0;
  }
  else
  {
    v145 = 0;
    v146 = v142 >> 8;
    v147 = v128;
    do
    {
      v148 = v142;
      v142 = v146 * silk_shell_code_table0[silk_shell_code_table_offsets[(unsigned __int16)(v128 - 1)] + v145++];
      --v147;
      v149 = v134 - v142;
    }
    while (v134 < v142);
    v150 = v148 - v142;
    *((_DWORD *)a2 + 8) = v150;
    *((_DWORD *)a2 + 9) = v149;
    v151 = v145 - 1;
    if (v150 < 0x800001)
    {
      v152 = *((unsigned int *)a2 + 2);
      v153 = *((_DWORD *)a2 + 11);
      v154 = *((unsigned int *)a2 + 7);
      v155 = *((_DWORD *)a2 + 6) + 8;
      do
      {
        *((_DWORD *)a2 + 6) = v155;
        *((_DWORD *)a2 + 8) = v150 << 8;
        if (v154 < v152)
        {
          v156 = *a2;
          *((_DWORD *)a2 + 7) = v154 + 1;
          v157 = *(unsigned __int8 *)(v156 + v154++);
        }
        else
        {
          v157 = 0;
        }
        v149 = (((v149 & 0x7FFFFF) << 8) | ((v157 | (v153 << 8)) >> 1)) ^ 0xFF;
        *((_DWORD *)a2 + 11) = v157;
        *((_DWORD *)a2 + 9) = v149;
        v155 += 8;
        v153 = v157;
        v17 = v150 > 0x8000;
        v150 <<= 8;
      }
      while (!v17);
    }
  }
  *(_WORD *)(result + 24) = v151;
  *(_WORD *)(result + 26) = v147;
  if ((v111 << 16) - v132 >= 1)
  {
    v158 = 0;
    v144 = v111 - v128 + 2;
    v159 = (char *)&silk_shell_code_table0[silk_shell_code_table_offsets[(unsigned __int16)(v111 - v128 + 1)]];
    v161 = *((_DWORD *)a2 + 8);
    v160 = *((_DWORD *)a2 + 9);
    v162 = v161 >> 8;
    do
    {
      v163 = v161;
      v161 = v162 * v159[v158++];
      --v144;
      v164 = v160 - v161;
    }
    while (v160 < v161);
    v165 = v163 - v161;
    *((_DWORD *)a2 + 8) = v163 - v161;
    *((_DWORD *)a2 + 9) = v164;
    v143 = v158 - 1;
    if (v163 - v161 < 0x800001)
    {
      v166 = *((unsigned int *)a2 + 2);
      v167 = *((_DWORD *)a2 + 11);
      v168 = *((unsigned int *)a2 + 7);
      v169 = *((_DWORD *)a2 + 6) + 8;
      do
      {
        *((_DWORD *)a2 + 6) = v169;
        *((_DWORD *)a2 + 8) = v165 << 8;
        if (v168 < v166)
        {
          v170 = *a2;
          *((_DWORD *)a2 + 7) = v168 + 1;
          v171 = *(unsigned __int8 *)(v170 + v168++);
        }
        else
        {
          v171 = 0;
        }
        v164 = (((v164 & 0x7FFFFF) << 8) | ((v171 | (v167 << 8)) >> 1)) ^ 0xFF;
        *((_DWORD *)a2 + 11) = v171;
        *((_DWORD *)a2 + 9) = v164;
        v169 += 8;
        v167 = v171;
        v17 = v165 > 0x8000;
        v165 <<= 8;
      }
      while (!v17);
    }
    goto LABEL_95;
  }
  *(_WORD *)(result + 28) = 0;
  *(_WORD *)(result + 30) = 0;
  return result;
}

uint64_t silk_insertion_sort_increasing(uint64_t result, int32x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  int32x4_t v7;
  int32x4_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  __int32 *v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  _DWORD *v28;
  __int32 *v29;
  uint64_t v30;
  int v31;

  v4 = (a4 - 1);
  if (a4 < 1)
  {
    if (a4 >= a3)
      return result;
    v4 = (int)v4;
LABEL_18:
    v19 = a3 - (uint64_t)a4;
    v20 = (int *)(result + 4 * a4);
    do
    {
      v22 = *v20++;
      v21 = v22;
      if (v22 < *(_DWORD *)(result + 4 * v4))
      {
        *(_DWORD *)(result + 4 * v4) = v21;
        a2->i32[v4] = a4;
      }
      ++a4;
      --v19;
    }
    while (v19);
    return result;
  }
  v5 = a4;
  if (a4 < 8)
  {
    for (i = 0; i != a4; ++i)
LABEL_9:
      a2->i32[i] = i;
    goto LABEL_10;
  }
  i = a4 & 0x7FFFFFF8;
  v7 = (int32x4_t)xmmword_208F071C0;
  v8 = a2 + 1;
  v9.i64[0] = 0x400000004;
  v9.i64[1] = 0x400000004;
  v10.i64[0] = 0x800000008;
  v10.i64[1] = 0x800000008;
  v11 = a4 & 0xFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = vaddq_s32(v7, v9);
    v7 = vaddq_s32(v7, v10);
    v8 += 2;
    v11 -= 8;
  }
  while (v11);
  if (i != a4)
    goto LABEL_9;
LABEL_10:
  if (a4 < 2)
  {
    if (a4 >= a3)
      return result;
    goto LABEL_18;
  }
  for (j = 1; j != a4; a2->i32[v13] = j++)
  {
    v14 = *(_DWORD *)(result + 4 * j);
    v15 = j;
    while (1)
    {
      v16 = v15 - 1;
      v17 = *(_DWORD *)(result + 4 * (v15 - 1));
      if (v14 >= v17)
        break;
      v18 = v15;
      *(_DWORD *)(result + v18 * 4) = v17;
      a2->i32[v18] = a2->i32[v16];
      v15 = v16;
      if (v16 + 1 <= 1)
      {
        LODWORD(v15) = 0;
        break;
      }
    }
    v13 = (int)v15;
    *(_DWORD *)(result + v13 * 4) = v14;
  }
  if (a4 < a3)
  {
    v23 = (a4 - 1);
    v24 = &a2->i32[v23];
    v25 = (_DWORD *)(result + v23 * 4);
    do
    {
      v27 = *(_DWORD *)(result + 4 * v5);
      if (v27 < *(_DWORD *)(result + 4 * v4))
      {
        v28 = v25;
        v29 = v24;
        LODWORD(v30) = a4 - 1;
        while (1)
        {
          v30 = (v30 - 1);
          v31 = *(_DWORD *)(result + 4 * v30);
          if (v27 >= v31)
            break;
          *v28-- = v31;
          *v29-- = a2->i32[v30];
          if ((int)v30 <= 0)
          {
            LODWORD(v30) = -1;
            break;
          }
        }
        v26 = (int)v30 + 1;
        *(_DWORD *)(result + v26 * 4) = v27;
        a2->i32[v26] = v5;
      }
      ++v5;
    }
    while (v5 != a3);
  }
  return result;
}

uint64_t silk_insertion_sort_decreasing_FLP(uint64_t result, int32x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  int32x4_t v7;
  int32x4_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  float v23;
  uint64_t v24;
  _DWORD *v25;
  float *v26;
  uint64_t v27;
  float v28;
  float *v29;
  _DWORD *v30;
  uint64_t v31;
  float v32;

  v4 = (a4 - 1);
  if (a4 < 1)
  {
    if (a4 >= a3)
      return result;
    v4 = (int)v4;
LABEL_18:
    v19 = *(float *)(result + 4 * v4);
    v20 = a3 - (uint64_t)a4;
    v21 = v4;
    v22 = (float *)(result + 4 * a4);
    do
    {
      v23 = *v22;
      if (*v22 > v19)
      {
        *(float *)(result + v21 * 4) = v23;
        a2->i32[v21] = a4;
        v19 = v23;
      }
      ++a4;
      ++v22;
      --v20;
    }
    while (v20);
    return result;
  }
  v5 = a4;
  if (a4 < 8)
  {
    for (i = 0; i != a4; ++i)
LABEL_9:
      a2->i32[i] = i;
    goto LABEL_10;
  }
  i = a4 & 0x7FFFFFF8;
  v7 = (int32x4_t)xmmword_208F071C0;
  v8 = a2 + 1;
  v9.i64[0] = 0x400000004;
  v9.i64[1] = 0x400000004;
  v10.i64[0] = 0x800000008;
  v10.i64[1] = 0x800000008;
  v11 = a4 & 0xFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = vaddq_s32(v7, v9);
    v7 = vaddq_s32(v7, v10);
    v8 += 2;
    v11 -= 8;
  }
  while (v11);
  if (i != a4)
    goto LABEL_9;
LABEL_10:
  if (a4 < 2)
  {
    if (a4 >= a3)
      return result;
    goto LABEL_18;
  }
  for (j = 1; j != a4; a2->i32[v13] = j++)
  {
    v14 = *(float *)(result + 4 * j);
    v15 = j;
    while (1)
    {
      v16 = v15 - 1;
      v17 = *(float *)(result + 4 * (v15 - 1));
      if (v14 <= v17)
        break;
      v18 = v15;
      *(float *)(result + v18 * 4) = v17;
      a2->i32[v18] = a2->i32[v16];
      v15 = v16;
      if (v16 + 1 <= 1)
      {
        LODWORD(v15) = 0;
        break;
      }
    }
    v13 = (int)v15;
    *(float *)(result + v13 * 4) = v14;
  }
  if (a4 < a3)
  {
    v24 = 4 * (a4 - 2) + 4;
    v25 = (__int32 *)((char *)a2->i32 + v24);
    v26 = (float *)(result + v24);
    do
    {
      v28 = *(float *)(result + 4 * v5);
      if (v28 > *(float *)(result + 4 * v4))
      {
        v29 = v26;
        v30 = v25;
        v31 = (a4 - 2);
        while (1)
        {
          v32 = *(v29 - 1);
          if (v28 <= v32)
            break;
          *v29-- = v32;
          *v30 = *(v30 - 1);
          --v30;
          if (v31-- <= 0)
          {
            v31 = -1;
            break;
          }
        }
        v27 = ((v31 << 32) + 0x100000000) >> 30;
        *(float *)(result + v27) = v28;
        *(__int32 *)((char *)a2->i32 + v27) = v5;
      }
      ++v5;
    }
    while (v5 != a3);
  }
  return result;
}

uint64_t *silk_stereo_decode_pred(uint64_t *result, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  char *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  __int16 v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  __int16 v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;

  v3 = *((_DWORD *)result + 8);
  v2 = *((_DWORD *)result + 9);
  v4 = v3 >> 8;
  v5 = -4;
  v6 = -1;
  v7 = &silk_stereo_pred_joint_iCDF;
  do
  {
    v8 = v3;
    v9 = *v7++;
    v3 = v4 * v9;
    v5 += 3;
    ++v6;
    v10 = v2 - v4 * v9;
  }
  while (v2 < v4 * v9);
  *((_DWORD *)result + 9) = v10;
  v11 = v8 - v3;
  if (v8 - v3 > 0x800000)
  {
    v19 = v8 - v3;
  }
  else
  {
    v12 = *((unsigned int *)result + 2);
    v13 = *((_DWORD *)result + 11);
    v14 = *((unsigned int *)result + 7);
    v15 = *((_DWORD *)result + 6) + 8;
    do
    {
      *((_DWORD *)result + 6) = v15;
      v19 = v11 << 8;
      *((_DWORD *)result + 8) = v11 << 8;
      if (v14 < v12)
      {
        v16 = *result;
        *((_DWORD *)result + 7) = v14 + 1;
        v17 = *(unsigned __int8 *)(v16 + v14++);
      }
      else
      {
        v17 = 0;
      }
      v10 = (((v10 & 0x7FFFFF) << 8) | ((v17 | (v13 << 8)) >> 1)) ^ 0xFF;
      *((_DWORD *)result + 11) = v17;
      *((_DWORD *)result + 9) = v10;
      v15 += 8;
      v13 = v17;
      v18 = v11 > 0x8000;
      v11 <<= 8;
    }
    while (!v18);
  }
  v20 = 0;
  v21 = v19 >> 8;
  v22 = &silk_uniform3_iCDF;
  do
  {
    v23 = v19;
    v24 = *v22++;
    v19 = v21 * v24;
    ++v20;
    v25 = v10 - v21 * v24;
  }
  while (v10 < v21 * v24);
  *((_DWORD *)result + 9) = v25;
  v26 = v23 - v19;
  if (v23 - v19 >= 0x800001)
  {
    v33 = v23 - v19;
  }
  else
  {
    v27 = *((unsigned int *)result + 2);
    v28 = *((_DWORD *)result + 11);
    v29 = *((unsigned int *)result + 7);
    v30 = *((_DWORD *)result + 6) + 8;
    do
    {
      *((_DWORD *)result + 6) = v30;
      v33 = v26 << 8;
      *((_DWORD *)result + 8) = v26 << 8;
      if (v29 < v27)
      {
        v31 = *result;
        *((_DWORD *)result + 7) = v29 + 1;
        v32 = *(unsigned __int8 *)(v31 + v29++);
      }
      else
      {
        v32 = 0;
      }
      v25 = (((v25 & 0x7FFFFF) << 8) | ((v32 | (v28 << 8)) >> 1)) ^ 0xFF;
      *((_DWORD *)result + 11) = v32;
      *((_DWORD *)result + 9) = v25;
      v30 += 8;
      v28 = v32;
      v18 = v26 > 0x8000;
      v26 <<= 8;
    }
    while (!v18);
  }
  v34 = 0;
  v35 = v33 >> 8;
  do
  {
    v36 = v33;
    v33 = v35 * silk_uniform5_iCDF[v34++];
    v37 = v25 - v33;
  }
  while (v25 < v33);
  *((_DWORD *)result + 9) = v37;
  v38 = v36 - v33;
  v39 = v34 - 1;
  if (v36 - v33 >= 0x800001)
  {
    v46 = v36 - v33;
  }
  else
  {
    v40 = *((unsigned int *)result + 2);
    v41 = *((_DWORD *)result + 11);
    v42 = *((unsigned int *)result + 7);
    v43 = *((_DWORD *)result + 6) + 8;
    do
    {
      *((_DWORD *)result + 6) = v43;
      v46 = v38 << 8;
      *((_DWORD *)result + 8) = v38 << 8;
      if (v42 < v40)
      {
        v44 = *result;
        *((_DWORD *)result + 7) = v42 + 1;
        v45 = *(unsigned __int8 *)(v44 + v42++);
      }
      else
      {
        v45 = 0;
      }
      v37 = (((v37 & 0x7FFFFF) << 8) | ((v45 | (v41 << 8)) >> 1)) ^ 0xFF;
      *((_DWORD *)result + 11) = v45;
      *((_DWORD *)result + 9) = v37;
      v43 += 8;
      v41 = v45;
      v18 = v38 > 0x8000;
      v38 <<= 8;
    }
    while (!v18);
  }
  v47 = v46 >> 8;
  v48 = &silk_uniform3_iCDF;
  do
  {
    v49 = v46;
    v50 = *v48++;
    v46 = v47 * v50;
    ++v5;
    v51 = v37 - v47 * v50;
  }
  while (v37 < v47 * v50);
  *((_DWORD *)result + 9) = v51;
  v52 = v49 - v46;
  if (v49 - v46 >= 0x800001)
  {
    v59 = v49 - v46;
  }
  else
  {
    v53 = *((unsigned int *)result + 2);
    v54 = *((_DWORD *)result + 11);
    v55 = *((unsigned int *)result + 7);
    v56 = *((_DWORD *)result + 6) + 8;
    do
    {
      *((_DWORD *)result + 6) = v56;
      v59 = v52 << 8;
      *((_DWORD *)result + 8) = v52 << 8;
      if (v55 < v53)
      {
        v57 = *result;
        *((_DWORD *)result + 7) = v55 + 1;
        v58 = *(unsigned __int8 *)(v57 + v55++);
      }
      else
      {
        v58 = 0;
      }
      v51 = (((v51 & 0x7FFFFF) << 8) | ((v58 | (v54 << 8)) >> 1)) ^ 0xFF;
      *((_DWORD *)result + 11) = v58;
      *((_DWORD *)result + 9) = v51;
      v56 += 8;
      v54 = v58;
      v18 = v52 > 0x8000;
      v52 <<= 8;
    }
    while (!v18);
  }
  v60 = 0;
  v61 = v59 >> 8;
  do
  {
    v62 = v59;
    v59 = v61 * silk_uniform5_iCDF[v60++];
    v63 = v51 - v59;
  }
  while (v51 < v59);
  v64 = v62 - v59;
  *((_DWORD *)result + 8) = v62 - v59;
  *((_DWORD *)result + 9) = v63;
  v65 = v60 - 1;
  if (v62 - v59 < 0x800001)
  {
    v66 = *((unsigned int *)result + 2);
    v67 = *((_DWORD *)result + 11);
    v68 = *((unsigned int *)result + 7);
    v69 = *((_DWORD *)result + 6) + 8;
    do
    {
      *((_DWORD *)result + 6) = v69;
      *((_DWORD *)result + 8) = v64 << 8;
      if (v68 < v66)
      {
        v70 = *result;
        *((_DWORD *)result + 7) = v68 + 1;
        v71 = *(unsigned __int8 *)(v70 + v68++);
      }
      else
      {
        v71 = 0;
      }
      v63 = (((v63 & 0x7FFFFF) << 8) | ((v71 | (v67 << 8)) >> 1)) ^ 0xFF;
      *((_DWORD *)result + 11) = v71;
      *((_DWORD *)result + 9) = v63;
      v69 += 8;
      v67 = v71;
      v18 = v64 > 0x8000;
      v64 <<= 8;
    }
    while (!v18);
  }
  v72 = v6 / 5;
  v73 = 3 * v72 + v20;
  v74 = silk_stereo_pred_quant_Q13[v73 - 1];
  v75 = -15 * v72 + v5;
  v76 = silk_stereo_pred_quant_Q13[v75];
  v77 = v76 + ((6554 * (silk_stereo_pred_quant_Q13[v75 + 1] - v76)) >> 16) * (__int16)((2 * v65) | 1);
  *a2 = v74 + ((6554 * (silk_stereo_pred_quant_Q13[v73] - v74)) >> 16) * (__int16)((2 * v39) | 1) - v77;
  a2[1] = v77;
  return result;
}

uint64_t silk_stereo_find_predictor(int *a1, int16x8_t *a2, int16x8_t *a3, int *a4, signed int a5, int a6)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  const __int16 *i16;
  uint32x4_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  const __int16 *v21;
  int v22;
  unsigned int v23;
  signed int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  const __int16 *v30;
  int32x4_t v31;
  uint32x4_t v32;
  uint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  const __int16 *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  int32x4_t v44;
  int32x4_t v45;
  const __int16 *v46;
  uint32x4_t v47;
  uint64_t v48;
  int32x4_t v49;
  int32x4_t v50;
  const __int16 *v51;
  int v52;
  unsigned int v53;
  signed int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  unint64_t v59;
  const __int16 *v60;
  int32x4_t v61;
  uint32x4_t v62;
  uint64_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  const __int16 *v67;
  int v68;
  signed int v69;
  unsigned int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int16x8_t *v75;
  int16x8_t *v76;
  int32x4_t v77;
  int32x4_t v78;
  uint64_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int16x8_t v83;
  int16x8_t v84;
  uint64_t v85;
  uint64_t v86;
  __int16 *v87;
  __int16 *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  __int16 v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  BOOL v116;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  unsigned int v133;
  int v134;
  int v135;
  int16x8x2_t v137;
  int16x8x2_t v138;
  int16x8x2_t v139;
  int16x8x2_t v140;
  int16x8x2_t v141;
  int16x8x2_t v142;
  int16x8x2_t v143;
  int16x8x2_t v144;

  v6 = __clz(a5);
  v7 = 31 - v6;
  v8 = (a5 - 1);
  if (a5 >= 2)
  {
    v9 = 2;
    if (v8 > 2)
      v9 = (a5 - 1);
    if (v9 >= 0x1F)
    {
      v13 = ((v9 - 1) >> 1) + 1;
      v10 = 2 * (v13 & 0x7FFFFFFFFFFFFFF0);
      v14 = (int32x4_t)a5;
      v15 = 0uLL;
      i16 = a2[2].i16;
      v17 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v7));
      v18 = v13 & 0x7FFFFFFFFFFFFFF0;
      v19 = 0uLL;
      v20 = 0uLL;
      do
      {
        v21 = i16 - 16;
        v137 = vld2q_s16(v21);
        v141 = vld2q_s16(i16);
        v15 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_high_s16(vmull_high_s16(v137.val[1], v137.val[1]), v137.val[0], v137.val[0]), v17), v15);
        v14 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_s16(vmull_s16(*(int16x4_t *)v137.val[1].i8, *(int16x4_t *)v137.val[1].i8), *(int16x4_t *)v137.val[0].i8, *(int16x4_t *)v137.val[0].i8), v17), v14);
        v20 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_high_s16(vmull_high_s16(v141.val[1], v141.val[1]), v141.val[0], v141.val[0]), v17), v20);
        v19 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_s16(vmull_s16(*(int16x4_t *)v141.val[1].i8, *(int16x4_t *)v141.val[1].i8), *(int16x4_t *)v141.val[0].i8, *(int16x4_t *)v141.val[0].i8), v17), v19);
        i16 += 32;
        v18 -= 16;
      }
      while (v18);
      v11 = vaddvq_s32(vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v20, v15)));
      if (v13 == (v13 & 0x7FFFFFFFFFFFFFF0))
      {
LABEL_12:
        v12 = a5 & 0xFFFFFFFE;
        if ((int)(a5 & 0xFFFFFFFE) >= a5)
          goto LABEL_14;
        goto LABEL_13;
      }
    }
    else
    {
      v10 = 0;
      v11 = a5;
    }
    do
    {
      v11 += (a2->i16[v10] * a2->i16[v10] + a2->i16[v10 + 1] * a2->i16[v10 + 1]) >> v7;
      v10 += 2;
    }
    while (v10 < v8);
    goto LABEL_12;
  }
  v12 = 0;
  v11 = a5;
  if (a5 > 0)
  {
LABEL_13:
    v22 = a2->i16[v12];
    v11 += (v22 * v22) >> v7;
  }
LABEL_14:
  v23 = __clz(v11);
  v24 = (34 - (v6 + v23)) & ~((int)(34 - (v6 + v23)) >> 31);
  if (a5 >= 2)
  {
    v25 = 2;
    if (v8 > 2)
      v25 = (a5 - 1);
    if (v25 >= 0x1F)
    {
      v29 = ((v25 - 1) >> 1) + 1;
      v26 = 2 * (v29 & 0x7FFFFFFFFFFFFFF0);
      v30 = a2[2].i16;
      v31 = 0uLL;
      v32 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v24));
      v33 = v29 & 0x7FFFFFFFFFFFFFF0;
      v34 = 0uLL;
      v35 = 0uLL;
      v36 = 0uLL;
      do
      {
        v37 = v30 - 16;
        v138 = vld2q_s16(v37);
        v142 = vld2q_s16(v30);
        v34 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_high_s16(vmull_high_s16(v138.val[1], v138.val[1]), v138.val[0], v138.val[0]), v32), v34);
        v31 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_s16(vmull_s16(*(int16x4_t *)v138.val[1].i8, *(int16x4_t *)v138.val[1].i8), *(int16x4_t *)v138.val[0].i8, *(int16x4_t *)v138.val[0].i8), v32), v31);
        v36 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_high_s16(vmull_high_s16(v142.val[1], v142.val[1]), v142.val[0], v142.val[0]), v32), v36);
        v35 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_s16(vmull_s16(*(int16x4_t *)v142.val[1].i8, *(int16x4_t *)v142.val[1].i8), *(int16x4_t *)v142.val[0].i8, *(int16x4_t *)v142.val[0].i8), v32), v35);
        v30 += 32;
        v33 -= 16;
      }
      while (v33);
      v27 = vaddvq_s32(vaddq_s32(vaddq_s32(v35, v31), vaddq_s32(v36, v34)));
      if (v29 == (v29 & 0x7FFFFFFFFFFFFFF0))
      {
LABEL_25:
        v28 = a5 & 0xFFFFFFFE;
        if ((int)(a5 & 0xFFFFFFFE) >= a5)
          goto LABEL_27;
        goto LABEL_26;
      }
    }
    else
    {
      v26 = 0;
      v27 = 0;
    }
    do
    {
      v27 += (a2->i16[v26] * a2->i16[v26] + a2->i16[v26 + 1] * a2->i16[v26 + 1]) >> v24;
      v26 += 2;
    }
    while (v26 < v8);
    goto LABEL_25;
  }
  v28 = 0;
  v27 = 0;
  if (a5 > 0)
  {
LABEL_26:
    v38 = a2->i16[v28];
    v27 += (v38 * v38) >> v24;
  }
LABEL_27:
  if (a5 >= 2)
  {
    v39 = 2;
    if (v8 > 2)
      v39 = (a5 - 1);
    if (v39 >= 0x1F)
    {
      v43 = ((v39 - 1) >> 1) + 1;
      v40 = 2 * (v43 & 0x7FFFFFFFFFFFFFF0);
      v44 = (int32x4_t)a5;
      v45 = 0uLL;
      v46 = a3[2].i16;
      v47 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v7));
      v48 = v43 & 0x7FFFFFFFFFFFFFF0;
      v49 = 0uLL;
      v50 = 0uLL;
      do
      {
        v51 = v46 - 16;
        v139 = vld2q_s16(v51);
        v143 = vld2q_s16(v46);
        v45 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_high_s16(vmull_high_s16(v139.val[1], v139.val[1]), v139.val[0], v139.val[0]), v47), v45);
        v44 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_s16(vmull_s16(*(int16x4_t *)v139.val[1].i8, *(int16x4_t *)v139.val[1].i8), *(int16x4_t *)v139.val[0].i8, *(int16x4_t *)v139.val[0].i8), v47), v44);
        v50 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_high_s16(vmull_high_s16(v143.val[1], v143.val[1]), v143.val[0], v143.val[0]), v47), v50);
        v49 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_s16(vmull_s16(*(int16x4_t *)v143.val[1].i8, *(int16x4_t *)v143.val[1].i8), *(int16x4_t *)v143.val[0].i8, *(int16x4_t *)v143.val[0].i8), v47), v49);
        v46 += 32;
        v48 -= 16;
      }
      while (v48);
      v41 = vaddvq_s32(vaddq_s32(vaddq_s32(v49, v44), vaddq_s32(v50, v45)));
      if (v43 == (v43 & 0x7FFFFFFFFFFFFFF0))
      {
LABEL_38:
        v42 = a5 & 0xFFFFFFFE;
        if ((int)(a5 & 0xFFFFFFFE) >= a5)
          goto LABEL_40;
        goto LABEL_39;
      }
    }
    else
    {
      v40 = 0;
      v41 = a5;
    }
    do
    {
      v41 += (a3->i16[v40] * a3->i16[v40] + a3->i16[v40 + 1] * a3->i16[v40 + 1]) >> v7;
      v40 += 2;
    }
    while (v40 < v8);
    goto LABEL_38;
  }
  v42 = 0;
  v41 = a5;
  if (a5 > 0)
  {
LABEL_39:
    v52 = a3->i16[v42];
    v41 += (v52 * v52) >> v7;
  }
LABEL_40:
  v53 = __clz(v41);
  v54 = (34 - v6 - v53) & ~((int)(34 - v6 - v53) >> 31);
  if (a5 >= 2)
  {
    v55 = 2;
    if (v8 > 2)
      v55 = (a5 - 1);
    if (v55 >= 0x1F)
    {
      v59 = ((v55 - 1) >> 1) + 1;
      v56 = 2 * (v59 & 0x7FFFFFFFFFFFFFF0);
      v60 = a3[2].i16;
      v61 = 0uLL;
      v62 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v54));
      v63 = v59 & 0x7FFFFFFFFFFFFFF0;
      v64 = 0uLL;
      v65 = 0uLL;
      v66 = 0uLL;
      do
      {
        v67 = v60 - 16;
        v140 = vld2q_s16(v67);
        v144 = vld2q_s16(v60);
        v64 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_high_s16(vmull_high_s16(v140.val[1], v140.val[1]), v140.val[0], v140.val[0]), v62), v64);
        v61 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_s16(vmull_s16(*(int16x4_t *)v140.val[1].i8, *(int16x4_t *)v140.val[1].i8), *(int16x4_t *)v140.val[0].i8, *(int16x4_t *)v140.val[0].i8), v62), v61);
        v66 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_high_s16(vmull_high_s16(v144.val[1], v144.val[1]), v144.val[0], v144.val[0]), v62), v66);
        v65 = vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmlal_s16(vmull_s16(*(int16x4_t *)v144.val[1].i8, *(int16x4_t *)v144.val[1].i8), *(int16x4_t *)v144.val[0].i8, *(int16x4_t *)v144.val[0].i8), v62), v65);
        v60 += 32;
        v63 -= 16;
      }
      while (v63);
      v57 = vaddvq_s32(vaddq_s32(vaddq_s32(v65, v61), vaddq_s32(v66, v64)));
      if (v59 == (v59 & 0x7FFFFFFFFFFFFFF0))
      {
LABEL_51:
        v58 = a5 & 0xFFFFFFFE;
        if ((int)(a5 & 0xFFFFFFFE) >= a5)
          goto LABEL_53;
        goto LABEL_52;
      }
    }
    else
    {
      v56 = 0;
      v57 = 0;
    }
    do
    {
      v57 += (a3->i16[v56] * a3->i16[v56] + a3->i16[v56 + 1] * a3->i16[v56 + 1]) >> v54;
      v56 += 2;
    }
    while (v56 < v8);
    goto LABEL_51;
  }
  v58 = 0;
  v57 = 0;
  if (a5 > 0)
  {
LABEL_52:
    v68 = a3->i16[v58];
    v57 += (v68 * v68) >> v54;
  }
LABEL_53:
  if (v24 <= v54)
    v69 = v54;
  else
    v69 = v24;
  v70 = (v69 & 1) + v69;
  v71 = v70 - v54;
  LODWORD(v72) = v27 >> (v70 - v24);
  if ((int)v72 <= 1)
    v72 = 1;
  else
    v72 = v72;
  if (a5 < 1)
  {
    v74 = 0;
  }
  else
  {
    if (a5 >= 0x10)
    {
      v73 = a5 & 0xFFFFFFF0;
      v75 = a2 + 1;
      v76 = a3 + 1;
      v77 = 0uLL;
      v78 = vnegq_s32(vdupq_n_s32(v70));
      v79 = v73;
      v80 = 0uLL;
      v81 = 0uLL;
      v82 = 0uLL;
      do
      {
        v83 = v75[-1];
        v84 = v76[-1];
        v80 = vaddq_s32(vshlq_s32(vmull_high_s16(v84, v83), v78), v80);
        v77 = vaddq_s32(vshlq_s32(vmull_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v83.i8), v78), v77);
        v82 = vaddq_s32(vshlq_s32(vmull_high_s16(*v76, *v75), v78), v82);
        v81 = vaddq_s32(vshlq_s32(vmull_s16(*(int16x4_t *)v76->i8, *(int16x4_t *)v75->i8), v78), v81);
        v75 += 2;
        v76 += 2;
        v79 -= 16;
      }
      while (v79);
      v74 = vaddvq_s32(vaddq_s32(vaddq_s32(v81, v77), vaddq_s32(v82, v80)));
      if (v73 == a5)
        goto LABEL_68;
    }
    else
    {
      v73 = 0;
      v74 = 0;
    }
    v85 = a5 - v73;
    v86 = v73;
    v87 = &a3->i16[v73];
    v88 = &a2->i16[v86];
    do
    {
      v90 = *v88++;
      v89 = v90;
      v91 = *v87++;
      v74 += (v91 * v89) >> v70;
      --v85;
    }
    while (v85);
  }
LABEL_68:
  v92 = v57 >> v71;
  if (v74 >= 0)
    v93 = v74;
  else
    v93 = -v74;
  v94 = __clz(v93);
  v95 = v74 << (v94 - 1);
  v96 = __clz(v72);
  v97 = (_DWORD)v72 << (v96 - 1);
  v98 = (0x1FFFFFFF / (v97 >> 16) * (uint64_t)v95) >> 16;
  v99 = ((unint64_t)(0x1FFFFFFF
                          / (v97 >> 16)
                          * (uint64_t)(int)(v95 - (((unint64_t)((int)v98 * (uint64_t)v97) >> 29) & 0xFFFFFFF8))) >> 16)
      + v98;
  v100 = v94 - v96;
  if ((v100 + 16) >= 0x20)
    v101 = 0;
  else
    v101 = v99 >> (v100 + 16);
  v102 = (int)0x80000000 >> (-16 - v100);
  if (v102 <= v99)
    v102 = v99;
  if ((int)(0x7FFFFFFFu >> (-16 - v100)) >= v99)
    v103 = v102;
  else
    v103 = 0x7FFFFFFFu >> (-16 - v100);
  v104 = v103 << (-16 - v100);
  if (v100 <= -17)
    LODWORD(v105) = v104;
  else
    LODWORD(v105) = v101;
  if ((int)v105 <= -16384)
    LODWORD(v105) = -16384;
  if ((int)v105 >= 0x4000)
    v105 = 0x4000;
  else
    v105 = v105;
  v106 = ((int)v105 * (uint64_t)(int)v105) >> 16;
  if ((int)v106 >= 0)
    v107 = ((int)v105 * (uint64_t)(int)v105) >> 16;
  else
    v107 = -(int)v106;
  if (a6 <= v107)
    v108 = v107;
  else
    v108 = a6;
  v109 = v70 >> 1;
  LOBYTE(v110) = v72;
  if (v96 != 24)
  {
    v110 = ((_DWORD)v72 << (v96 + 8)) | (v72 >> (24 - v96));
    if (v72 <= 0x7F)
      LOBYTE(v110) = (_DWORD)v72 << (v96 - 24);
  }
  v111 = v110 & 0x7F;
  if ((v96 & 1) != 0)
    v112 = 0x8000;
  else
    v112 = 46214;
  v113 = *a4
       + ((unint64_t)(v108
                           * (uint64_t)(int)((((v112 >> (v96 >> 1)) + ((213 * (v112 >> (v96 >> 1)) * v111) >> 16)) << v109)
                                          - *a4)) >> 16);
  *a4 = v113;
  v114 = (((unint64_t)(v106 * v72) >> 10) & 0xFFFFFFC0)
       + v92
       - (((unint64_t)((int)v105 * (uint64_t)v74) >> 12) & 0xFFFFFFF0);
  if ((int)v114 < 1)
  {
    v120 = 0;
  }
  else
  {
    v115 = __clz(v114);
    if (v115 != 24)
    {
      v116 = v114 > 0x7F;
      v117 = (v114 << (v115 + 8)) | (v114 >> (24 - v115));
      v114 <<= v115 - 24;
      if (v116)
        LOBYTE(v114) = v117;
    }
    v118 = v114 & 0x7F;
    if ((v115 & 1) != 0)
      v119 = 0x8000;
    else
      v119 = 46214;
    v120 = (v119 >> (v115 >> 1)) + ((213 * (v119 >> (v115 >> 1)) * v118) >> 16);
  }
  v121 = a4[1] + ((unint64_t)(v108 * (uint64_t)(int)((v120 << v109) - a4[1])) >> 16);
  a4[1] = v121;
  if (v113 <= 1)
    v122 = 1;
  else
    v122 = v113;
  if (v121 >= 0)
    v123 = v121;
  else
    v123 = -v121;
  v124 = __clz(v123);
  v125 = v121 << (v124 - 1);
  v126 = __clz(v122);
  v127 = v122 << (v126 - 1);
  v128 = (0x1FFFFFFF / (v127 >> 16) * (uint64_t)v125) >> 16;
  v129 = ((unint64_t)(0x1FFFFFFF
                           / (v127 >> 16)
                           * (uint64_t)(int)(v125 - (((unint64_t)((int)v128 * (uint64_t)v127) >> 29) & 0xFFFFFFF8))) >> 16)
       + v128;
  v130 = v124 - v126;
  if (v124 - v126 + 15 >= 0x20)
    v131 = 0;
  else
    v131 = v129 >> (v130 + 15);
  v132 = (int)0x80000000 >> (-15 - v130);
  if (v132 <= v129)
    v132 = v129;
  if ((int)(0x7FFFFFFFu >> (-15 - v130)) >= v129)
    v133 = v132;
  else
    v133 = 0x7FFFFFFFu >> (-15 - v130);
  v134 = v133 << (-15 - v130);
  if (v130 > -16)
    v134 = v131;
  v135 = v134 & ~(v134 >> 31);
  if (v135 >= 0x7FFF)
    v135 = 0x7FFF;
  *a1 = v135;
  return v105;
}

unint64_t silk_stereo_LR_to_MS(unsigned __int16 *a1, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5, int16x8_t *a6, int a7, uint64_t a8, int a9, int a10, signed int a11)
{
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int16x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int16x8_t *v21;
  BOOL v22;
  uint64_t v23;
  int8x16_t v24;
  int32x4_t v25;
  uint64_t v26;
  int16x8_t *v27;
  int16x4_t *v28;
  int16x8_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint16x8_t v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  uint64_t v36;
  __int16 *v37;
  __int16 *v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int16x8_t *v48;
  int8x16_t *v49;
  __int16 *v50;
  uint64_t v51;
  int16x4_t v52;
  int8x16_t v53;
  int16x8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int16x8_t *v58;
  int16x8_t *v59;
  __int16 v60;
  uint64_t v61;
  int16x8_t *v62;
  int8x16_t v63;
  uint64_t v64;
  int16x8_t *v65;
  int16x8_t *v66;
  int8x16_t *v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int16x8_t v71;
  uint64_t v72;
  __int16 *v73;
  __int16 *v74;
  uint64_t v75;
  __int16 *v76;
  unsigned __int32 v77;
  int32x2_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  __int16 *v82;
  uint64_t v83;
  int8x16_t v84;
  uint64_t v85;
  int16x4_t v86;
  uint64_t v87;
  unint64_t v88;
  int8x16_t v89;
  uint64_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int16x8_t v93;
  uint64_t v94;
  unsigned __int32 v95;
  int32x2_t v96;
  unsigned int v97;
  unsigned int v98;
  unint64_t v99;
  int v100;
  unsigned int predictor;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  signed int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  int16x8_t *v119;
  int v120;
  unint64_t v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  unsigned int v135;
  int v136;
  int v137;
  unint64_t result;
  uint64_t v139;
  int16x4_t *v140;
  int v141;
  uint64_t v142;
  int v143;
  signed int v144;
  signed __int16 v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unsigned int v159;
  unint64_t v160;
  uint64_t v161;
  int16x8_t *v162;
  _BYTE *v163;
  int v164;
  _WORD *v165;
  uint64_t v166;
  __int16 *v167;
  __int16 v168;
  __int16 v169;
  __int16 *v170;
  int v171;
  uint64_t v172;
  int v173;
  _BYTE *v174;
  int64x2_t v175;
  int64x2_t v176;
  int64x2_t v177;
  int64x2_t v178;
  int64x2_t v179;
  int64x2_t v180;
  int64x2_t v181;
  int64x2_t v182;
  int64x2_t v183;
  int64x2_t v184;
  int64x2_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int16x8_t *v198;
  int32x4_t v199;
  int32x4_t v200;
  int8x16_t v201;
  int16x4_t *v202;
  int32x4_t v203;
  int16x8_t v204;
  int64x2_t v205;
  int16x8_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int16x8_t v209;
  int32x4_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int64x2_t v214;
  uint64_t v215;
  uint64_t v216;
  int32x4_t v217;
  uint64_t v218;
  uint64_t v219;
  int64x2_t v220;
  int32x4_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int64x2_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64x2_t v229;
  uint64_t v230;
  uint64_t v231;
  int64x2_t v232;
  int64x2_t v233;
  uint64_t v234;
  uint64_t v235;
  int32x4_t v236;
  uint64_t v237;
  int64x2_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int64x2_t v244;
  int64x2_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int32x4_t v250;
  uint64_t v251;
  uint64x2_t v252;
  uint64x2_t v253;
  int64x2_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64x2_t v257;
  int64x2_t v258;
  uint64_t v259;
  int64x2_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64x2_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64x2_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int16x8_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64x2_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64x2_t v286;
  uint64x2_t v287;
  int32x4_t v288;
  _BYTE *v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  uint64_t v295;
  int v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  int16x8_t *v302;
  int64x2_t v303;
  int64x2_t v304;
  uint64_t v305;
  int16x8_t *v306;
  int16x8_t *v307;
  int32x4_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int8x16_t v311;
  int16x8_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int16x8_t v315;
  int32x4_t v316;
  int16x8_t v317;
  uint64x2_t v318;
  uint64x2_t v319;
  uint64x2_t v320;
  int32x4_t v321;
  uint64x2_t v322;
  uint64x2_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64x2_t v326;
  uint64x2_t v327;
  uint64x2_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64x2_t v332;
  uint64_t v333;
  uint64x2_t v334;
  uint64x2_t v335;
  uint64x2_t v336;
  uint64x2_t v337;
  uint64_t v338;
  uint64_t v339;
  int32x4_t v340;
  int32x4_t v341;
  int32x4_t v342;
  _WORD *v343;
  uint64_t v344;
  __int16 *v345;
  __int16 *v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  unint64_t v352;
  _BYTE *v353;
  uint64_t v354;
  unint64_t v355;
  unsigned int v356;
  unsigned int v357;
  uint64_t v358;
  uint64_t v359;
  unsigned __int16 *v360;
  int *v361;
  int v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int16x4_t *v367;
  uint64_t v368;
  uint64_t v369;
  int64x2_t v370;
  uint64_t v371;
  _BYTE *v372;
  int16x8_t *v373;
  uint64_t v374;
  _QWORD v375[3];

  LODWORD(v371) = a7;
  v372 = a4;
  v373 = a6;
  v12 = a1;
  v375[1] = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8](a1, a2);
  v19 = (int *)((char *)&v350 - v18);
  if (a11 >= -1)
  {
    if ((int)v17 <= 1)
      v17 = 1;
    else
      v17 = v17;
    if (v17 >= 8
      && ((v20 = 2 * v17 - 4, v21 = (int16x8_t *)(v14 - 4), (unint64_t)v16 < v14 + v20)
        ? (v22 = (unint64_t)v21 >= v15 + v20)
        : (v22 = 1),
          v22))
    {
      v23 = v17 & 0x7FFFFFF8;
      v24.i64[0] = 0x100000001;
      v24.i64[1] = 0x100000001;
      v25.i64[0] = 0x7F0000007FLL;
      v25.i64[1] = 0x7F0000007FLL;
      v26 = v23;
      v27 = (int16x8_t *)((char *)&v350 - v18);
      v28 = v16;
      do
      {
        v29 = *v21++;
        v30 = (int8x16_t)vsubl_s16(*v28, *(int16x4_t *)v29.i8);
        v31 = (int8x16_t)vsubl_high_s16(*(int16x8_t *)v28->i8, v29);
        v32 = (uint16x8_t)vhaddq_s16(v29, *(int16x8_t *)v28->i8);
        *(int16x8_t *)v28->i8 = vuzp1q_s16((int16x8_t)vaddw_u16((uint32x4_t)vandq_s8((int8x16_t)vaddl_s16(*(int16x4_t *)v29.i8, *v28), v24), *(uint16x4_t *)v32.i8), (int16x8_t)vaddw_high_u16((uint32x4_t)vandq_s8((int8x16_t)vaddl_high_s16(v29, *(int16x8_t *)v28->i8), v24), v32));
        v28 += 2;
        *v27++ = vuzp1q_s16((int16x8_t)vminq_s32(vsraq_n_s32((int32x4_t)vandq_s8(v30, v24), (int32x4_t)v30, 1uLL), v25), (int16x8_t)vminq_s32(vsraq_n_s32((int32x4_t)vandq_s8(v31, v24), (int32x4_t)v31, 1uLL), v25));
        v26 -= 8;
      }
      while (v26);
      if (v23 == v17)
        goto LABEL_20;
    }
    else
    {
      v23 = 0;
    }
    v33 = v17 - v23;
    v34 = 2 * v23;
    v35 = (_WORD *)v19 + v23;
    v36 = v34 - 4;
    v37 = (__int16 *)(v15 + v34 - 4);
    v38 = (__int16 *)(v14 + v36);
    do
    {
      v39 = *v37;
      v40 = *v38++;
      *v37++ = ((v40 + v39) & 1) + ((v40 + v39) >> 1);
      v41 = ((v39 - v40) & 1) + ((v39 - v40) >> 1);
      if (v41 >= 0x7FFF)
        LOWORD(v41) = 0x7FFF;
      *v35++ = v41;
      --v33;
    }
    while (v33);
  }
LABEL_20:
  v366 = v14;
  v16->i32[0] = *((_DWORD *)v12 + 1);
  v42 = 2 * a11;
  v43 = *(__int32 *)((char *)v16->i32 + v42);
  *v19 = *((_DWORD *)v12 + 2);
  v44 = *(_DWORD *)((char *)v19 + v42);
  *((_DWORD *)v12 + 1) = v43;
  *((_DWORD *)v12 + 2) = v44;
  v45 = MEMORY[0x24BDAC7A8](v19, v13);
  v47 = MEMORY[0x24BDAC7A8](v45, (char *)&v350 - ((v46 + 15) & 0x3FFFFFFF0));
  v54 = (int16x8_t *)((char *)&v350 - v51);
  v367 = (int16x4_t *)v49;
  v365 = v47;
  v370.i64[1] = (uint64_t)v50;
  if (a11 <= 0)
  {
    v56 = MEMORY[0x24BDAC7A8](v47, v48);
    MEMORY[0x24BDAC7A8](v56, v57);
    v62 = (int16x8_t *)((char *)&v350 - v61);
    goto LABEL_37;
  }
  v52.i16[0] = *v50;
  v52.i16[2] = v50[1];
  if (a11 < 8)
  {
    v55 = 0;
    goto LABEL_28;
  }
  v55 = a11 & 0x7FFFFFF8;
  v53.i32[3] = *(_DWORD *)v50;
  v63 = (int8x16_t)vdupq_lane_s16(v52, 0);
  v64 = a11 & 0xFFFFFFF8;
  v65 = (int16x8_t *)((char *)&v350 - v51);
  v66 = v48;
  v67 = v49;
  do
  {
    v68 = v53;
    v69 = *v67++;
    v53 = v69;
    v70 = vextq_s8(v68, v69, 0xEuLL);
    v71 = vrhaddq_s16((int16x8_t)v70, vhaddq_s16((int16x8_t)v69, (int16x8_t)vextq_s8(v63, v70, 0xEuLL)));
    *v66++ = v71;
    *v65++ = vsubq_s16((int16x8_t)v70, v71);
    v63 = v70;
    v64 -= 8;
  }
  while (v64);
  if (v55 != a11)
  {
    v52.i32[0] = v53.u16[6];
    v52.i32[1] = v53.u16[7];
LABEL_28:
    v72 = v55;
    v73 = &v54->i16[v55];
    v74 = &v48->i16[v55];
    v75 = a11 - v55;
    v76 = &v49->i16[v72];
    do
    {
      v77 = *v76++;
      v78 = vsra_n_s32((int32x2_t)(v77 | 0x100000000), vshl_n_s32((int32x2_t)v52, 0x10uLL), 0x10uLL);
      v79 = (v78.i32[1] + ((unsigned __int32)v78.i32[0] >> 1)) >> 1;
      *v74++ = v79;
      *v73++ = v52.i16[2] - v79;
      v52.i32[0] = vdup_lane_s32((int32x2_t)v52, 1).u32[0];
      v52.i32[1] = v77;
      --v75;
    }
    while (v75);
  }
  v80 = MEMORY[0x24BDAC7A8](v47, v48);
  v82 = (__int16 *)MEMORY[0x24BDAC7A8](v80, v81);
  v62 = (int16x8_t *)((char *)&v350 - v85);
  v86.i16[0] = *v82;
  v86.i16[2] = v82[1];
  if (a11 < 8)
  {
    v87 = 0;
    goto LABEL_36;
  }
  v88 = 0;
  v87 = a11 & 0xFFFFFFF8;
  v84.i32[3] = *(_DWORD *)v82;
  v89 = (int8x16_t)vdupq_lane_s16(v86, 0);
  v90 = v83 & 0x1FFFFFFF0;
  do
  {
    v91 = v84;
    v84 = *(int8x16_t *)&v82[v88 / 2 + 2];
    v92 = vextq_s8(v91, v84, 0xEuLL);
    v93 = vrhaddq_s16((int16x8_t)v92, vhaddq_s16((int16x8_t)v84, (int16x8_t)vextq_s8(v89, v92, 0xEuLL)));
    v59[v88 / 0x10] = v93;
    v62[v88 / 0x10] = vsubq_s16((int16x8_t)v92, v93);
    v88 += 16;
    v89 = v92;
  }
  while (v90 != v88);
  if (v87 != a11)
  {
    v86.i32[0] = v84.u16[6];
    v86.i32[1] = v84.u16[7];
    do
    {
LABEL_36:
      v94 = v87;
      v95 = v82[v87 + 2];
      v96 = vsra_n_s32((int32x2_t)(v95 | 0x100000000), vshl_n_s32((int32x2_t)v86, 0x10uLL), 0x10uLL);
      v97 = (v96.i32[1] + ((unsigned __int32)v96.i32[0] >> 1)) >> 1;
      v59->i16[v94] = v97;
      v62->i16[v94] = v86.i16[2] - v97;
      ++v87;
      v86.i32[0] = vdup_lane_s32((int32x2_t)v86, 1).u32[0];
      v86.i32[1] = v95;
    }
    while (a11 != v87);
  }
LABEL_37:
  v374 = 0;
  v98 = 655;
  if (10 * a10 == a11)
    v98 = 328;
  v99 = (v98 * (unint64_t)(v60 * v60)) >> 16;
  if (10 * a10 == a11)
    v100 = -1200;
  else
    v100 = -600;
  LODWORD(v375[0]) = silk_stereo_find_predictor((int *)&v374 + 1, v58, v59, (int *)v12 + 3, a11, v99);
  v364 = a11;
  predictor = silk_stereo_find_predictor((int *)&v374, v54, v62, (int *)v12 + 5, a11, v99);
  HIDWORD(v375[0]) = predictor;
  v102 = 3 * SWORD2(v374) + v374;
  if (v102 >= 0x10000)
    v102 = 0x10000;
  v103 = v100 + v371;
  if (v100 + (int)v371 <= 1)
    v104 = 1;
  else
    v104 = v100 + v371;
  v105 = 600 * (__int16)a10 + 2000;
  v106 = __clz(v104);
  v107 = v104 << (v106 - 1);
  v108 = -851968 - 3 * v102;
  if (3 * v102 + 851968 >= 0)
    v108 = 3 * v102 + 851968;
  v109 = __clz(v108);
  v110 = (3 * v102 + 851968) << (v109 - 1);
  v111 = (0x1FFFFFFF / (v110 >> 16) * (uint64_t)v107) >> 16;
  v112 = ((unint64_t)(0x1FFFFFFF
                           / (v110 >> 16)
                           * (uint64_t)(int)(v107 - (((unint64_t)((int)v111 * (uint64_t)v110) >> 29) & 0xFFFFFFF8))) >> 16)
       + v111;
  v113 = v106 - v109;
  if ((v113 + 10) >= 0x20)
    v114 = 0;
  else
    v114 = v112 >> (v113 + 10);
  v115 = (int)0x80000000 >> (-10 - v113);
  if (v115 <= v112)
    v115 = v112;
  if ((int)(0x7FFFFFFFu >> (-10 - v113)) >= v112)
    v116 = v115;
  else
    v116 = 0x7FFFFFFFu >> (-10 - v113);
  v117 = v116 << (-10 - v113);
  if (v113 <= -11)
    v118 = v117;
  else
    v118 = v114;
  v119 = v373;
  v373->i32[0] = v118;
  if (v118 >= v105)
  {
    v119->i32[1] = v104 - v118;
    v137 = 0x4000;
  }
  else
  {
    v119->i32[0] = v105;
    v119->i32[1] = v104 - v105;
    v120 = 2 * (v104 - v105) - v105;
    v121 = (unint64_t)((__int16)v105 * (uint64_t)(3 * v102 + 0x10000)) >> 16;
    if (v120 >= 0)
      v122 = 2 * (v104 - v105) - v105;
    else
      v122 = v105 - 2 * (v104 - v105);
    v123 = __clz(v122);
    v124 = v120 << (v123 - 1);
    if ((v121 & 0x80000000) == 0)
      v125 = (unint64_t)((__int16)v105 * (uint64_t)(3 * v102 + 0x10000)) >> 16;
    else
      v125 = -(int)v121;
    v126 = __clz(v125);
    v127 = (_DWORD)v121 << (v126 - 1);
    v128 = (0x1FFFFFFF / (v127 >> 16) * (uint64_t)v124) >> 16;
    v129 = ((unint64_t)(0x1FFFFFFF
                             / (v127 >> 16)
                             * (uint64_t)(int)(v124 - (((unint64_t)((int)v128 * (uint64_t)v127) >> 29) & 0xFFFFFFF8))) >> 16)
         + v128;
    v130 = v123 - v126;
    v131 = v123 - v126 + 13;
    v132 = v129 >> (v123 - v126 + 13);
    if (v131 >= 0x20)
      v133 = 0;
    else
      v133 = v132;
    v134 = (int)0x80000000 >> (-13 - v130);
    if (v134 <= v129)
      v134 = v129;
    if ((int)(0x7FFFFFFFu >> (-13 - v130)) >= v129)
      v135 = v134;
    else
      v135 = 0x7FFFFFFFu >> (-13 - v130);
    v136 = v135 << (-13 - v130);
    if (v130 > -14)
      v136 = v133;
    v137 = v136 & ~(v136 >> 31);
    if (v137 >= 0x4000)
      v137 = 0x4000;
  }
  v12[14] += ((__int16)v99 * (v137 - (__int16)v12[14])) >> 16;
  *a5 = 0;
  if (a9)
  {
    v375[0] = 0;
    result = (unint64_t)silk_stereo_quant_pred(v375, v372);
    v139 = 0;
    v140 = v367;
    v141 = v364;
    v142 = v365;
    if (*a5 == 1)
      goto LABEL_91;
LABEL_100:
    v12[16] = 0;
    if (*a5)
      goto LABEL_106;
LABEL_101:
    if (v119->i32[1] > 0)
      goto LABEL_106;
    goto LABEL_102;
  }
  v143 = 8 * v104;
  v144 = (__int16)v12[14];
  v142 = v365;
  if (!v12[15])
  {
    v140 = v367;
    if (v143 < 13 * v105 || (int)((unint64_t)((__int16)v12[14] * (uint64_t)v102) >> 16) <= 818)
    {
      v375[0] = vshr_n_s32(vmul_s32(vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(predictor, v375[0]), 0x10uLL), 0x10uLL), vdup_n_s32(v144)), 0xEuLL);
      result = (unint64_t)silk_stereo_quant_pred(v375, v372);
      v139 = 0;
      v375[0] = 0;
      v119->i32[0] = v104;
      v119->i32[1] = 0;
      *a5 = 1;
      v141 = v364;
      goto LABEL_91;
    }
LABEL_96:
    if (v144 < 15566)
    {
      v375[0] = vshr_n_s32(vmul_s32(vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(predictor, v375[0]), 0x10uLL), 0x10uLL), vdup_n_s32(v144)), 0xEuLL);
      result = (unint64_t)silk_stereo_quant_pred(v375, v372);
      v139 = (__int16)v12[14];
      v141 = v364;
      if (*a5 == 1)
        goto LABEL_91;
    }
    else
    {
      result = (unint64_t)silk_stereo_quant_pred(v375, v372);
      v139 = 0x4000;
      v141 = v364;
      if (*a5 == 1)
        goto LABEL_91;
    }
    goto LABEL_100;
  }
  v140 = v367;
  if (v143 >= 11 * v105 && (int)((unint64_t)((__int16)v12[14] * (uint64_t)v102) >> 16) > 327)
    goto LABEL_96;
  v375[0] = vshr_n_s32(vmul_s32(vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(predictor, v375[0]), 0x10uLL), 0x10uLL), vdup_n_s32(v144)), 0xEuLL);
  result = (unint64_t)silk_stereo_quant_pred(v375, v372);
  v139 = 0;
  v375[0] = 0;
  v141 = v364;
  if (*a5 != 1)
    goto LABEL_100;
LABEL_91:
  v145 = v12[16] + v141 - 8 * a10;
  v12[16] = v145;
  if (5 * a10 <= v145)
  {
    v12[16] = 10000;
    if (*a5)
      goto LABEL_106;
    goto LABEL_101;
  }
  *a5 = 0;
  if (v119->i32[1] > 0)
    goto LABEL_106;
LABEL_102:
  if (v103 <= 2)
    v146 = 2;
  else
    v146 = v103;
  v119->i32[0] = v146 - 1;
  v119->i32[1] = 1;
LABEL_106:
  v147 = 8 * a10;
  v148 = v375[0];
  v149 = HIDWORD(v375[0]);
  v150 = v366;
  if (a10 >= 1)
  {
    v151 = *v12;
    v152 = v12[1];
    v153 = (__int16)(0x10000 / v147);
    v154 = (((v153 * (__int16)(LOWORD(v375[0]) - v151)) >> 15) + 1) >> 1;
    v155 = (((v153 * (__int16)(WORD2(v375[0]) - v152)) >> 15) + 1) >> 1;
    v156 = (__int16)v12[15];
    v157 = (__int16)(0x10000 / v147) * (uint64_t)((int)v139 - (int)v156);
    v158 = v156 << 10;
    v159 = -v152;
    v160 = (v157 >> 6) & 0xFFFFFFFFFFFFFC00;
    if (v147 <= 1)
      v161 = 1;
    else
      v161 = v147;
    if (v161 >= 8
      && ((v162 = (int16x8_t *)(v366 - 2), v366 - 2 >= (unint64_t)v140 + 2 * v161)
       || v370.i64[1] >= (unint64_t)v162 + 2 * v161))
    {
      v358 = (8 * a10);
      v359 = v139;
      v362 = HIDWORD(v375[0]);
      v363 = v375[0];
      v360 = v12;
      v361 = &v350;
      v354 = v161;
      v174 = (_BYTE *)(v161 & 0x7FFFFFF8);
      v352 = v158 + (v161 & 0x7FFFFFF8) * (int)v160;
      v175 = vdupq_n_s64(v158);
      v176.i64[0] = 6 * v160;
      v176.i64[1] = 7 * v160;
      v177.i64[0] = 2 * v160;
      v177.i64[1] = 3 * v160;
      v351 = (v161 & 0x7FFFFFF8) * -v155 - v152;
      v178.i64[0] = 4 * v160;
      v178.i64[1] = 5 * v160;
      v355 = (v157 >> 6) & 0xFFFFFFFFFFFFFC00;
      v179 = vdupq_n_s64(v160);
      v180.i64[1] = v179.i64[1];
      v180.i64[0] = 0;
      v350 = (v161 & 0x7FFFFFF8) * -v154 - v151;
      v181 = vaddq_s64(v175, v178);
      v182 = vaddq_s64(v175, v177);
      v183 = vaddq_s64(v175, v176);
      v184 = vdupq_n_s64(8 * v160);
      v185 = vaddq_s64(v175, v180);
      v186 = vdupq_n_s32(v159);
      v187 = vdupq_n_s32(-v155);
      v188 = vmlaq_s32(v186, v187, (int32x4_t)xmmword_208F08E20);
      v189 = vdupq_n_s32(-8 * v155);
      v190 = vdupq_n_s32(-v151);
      v191 = vdupq_n_s32(-v154);
      v192 = vmlaq_s32(v186, v187, (int32x4_t)xmmword_208F071C0);
      v193 = vmlaq_s32(v190, v191, (int32x4_t)xmmword_208F08E20);
      v194 = vdupq_n_s32(-8 * v154);
      v195 = vmlaq_s32(v190, v191, (int32x4_t)xmmword_208F071C0);
      v357 = v154;
      v196 = vdupq_n_s32(v154);
      v356 = v155;
      v197 = vdupq_n_s32(v155);
      v198 = (int16x8_t *)(v142 + 2);
      v199.i64[0] = 0x100000001;
      v199.i64[1] = 0x100000001;
      v200.i64[0] = 0x7F0000007FLL;
      v200.i64[1] = 0x7F0000007FLL;
      v201.i64[0] = 0x7F0000007FLL;
      v201.i64[1] = 0x7F0000007FLL;
      v353 = v174;
      v202 = v140;
      do
      {
        v203 = vsubq_s32(v193, v196);
        v204 = *(int16x8_t *)&v202[-1].u8[4];
        v205 = vaddq_s64(v183, v179);
        v206 = *(int16x8_t *)((char *)&v202[-1].u32[1] + 2);
        v207 = vaddq_s32(vshll_n_s16(*(int16x4_t *)v206.i8, 0xAuLL), vshlq_n_s32(vaddl_s16(*v202, *(int16x4_t *)v204.i8), 9uLL));
        v208 = vaddq_s32(vshll_high_n_s16(v206, 0xAuLL), vshlq_n_s32(vaddl_high_s16(*(int16x8_t *)v202->i8, v204), 9uLL));
        v209 = *v198;
        v372 = v174;
        v373 = v198 + 1;
        v210 = vmovl_high_s16(v209);
        v211 = v205.i64[1];
        v212 = v205.i64[0];
        v213 = v210.i32[3];
        v214 = vaddq_s64(v181, v179);
        v215 = v214.i64[1];
        v216 = v214.i64[0];
        v217 = vsubq_s32(v195, v196);
        v218 = v210.i32[1];
        v219 = v210.i32[0];
        v220 = vaddq_s64(v182, v179);
        v221 = vmovl_s16(*(int16x4_t *)v209.i8);
        v222 = v220.i64[1];
        v223 = v220.i64[0];
        v224 = v221.i32[3];
        v225 = v221.i32[2];
        v226 = vaddq_s64(v185, v179);
        v227 = v226.i64[1];
        v228 = v226.i64[0];
        v229 = (uint64x2_t)vsubq_s32(v188, v197);
        v230 = v221.i32[1];
        v231 = v221.i32[0];
        v232.i64[0] = v217.u32[0];
        v232.i64[1] = v217.u32[1];
        v233 = vshrq_n_s64(vshlq_n_s64(v232, 0x30uLL), 0x30uLL);
        v234 = v233.i64[1];
        v235 = v233.i64[0];
        v236 = vsubq_s32(v192, v197);
        v237 = v212 * v210.i32[2];
        v232.i64[0] = v217.u32[2];
        v232.i64[1] = v217.u32[3];
        v238 = vshrq_n_s64(vshlq_n_s64(v232, 0x30uLL), 0x30uLL);
        v239 = v238.i64[1];
        v240 = v216 * v219;
        v241 = v223 * v225;
        v371 = v238.i64[0];
        v242 = v207.i32[1];
        v243 = v207.i32[0];
        v232.i64[0] = v203.u32[0];
        v232.i64[1] = v203.u32[1];
        v244 = v232;
        v232.i64[0] = v203.u32[2];
        v232.i64[1] = v203.u32[3];
        v245 = vshrq_n_s64(vshlq_n_s64(v232, 0x30uLL), 0x30uLL);
        v246 = v207.i32[3];
        v247 = v207.i32[2];
        v370 = vshrq_n_s64(vshlq_n_s64(v244, 0x30uLL), 0x30uLL);
        v248 = v245.i64[1];
        v249 = v245.i64[0];
        v250 = vshll_n_s16(*(int16x4_t *)v206.i8, 0xBuLL);
        v251 = v211 * v213;
        v252 = (uint64x2_t)vshll_high_n_s16(v206, 0xBuLL);
        v232.i64[0] = v252.i32[0];
        v232.i64[1] = v252.i32[1];
        v253 = (uint64x2_t)v232;
        v232.i64[0] = v236.u32[0];
        v232.i64[1] = v236.u32[1];
        v254 = vshrq_n_s64(vshlq_n_s64(v232, 0x30uLL), 0x30uLL);
        v368 = v215 * v218;
        v369 = v248;
        v255 = v254.i64[1];
        v256 = v254.i64[0];
        v232.i64[0] = v250.i32[2];
        v232.i64[1] = v250.i32[3];
        v257 = (uint64x2_t)v232;
        v232.i64[0] = v250.i32[0];
        v232.i64[1] = v250.i32[1];
        v258 = v232;
        v259 = v222 * v224;
        v232.i64[0] = v236.u32[2];
        v232.i64[1] = v236.u32[3];
        v260 = v232;
        v261 = v258.i64[1];
        v262 = v258.i64[0];
        v232.i64[0] = v229.u32[0];
        v232.i64[1] = v229.u32[1];
        v263 = v227 * v230;
        v264 = (uint64x2_t)vshrq_n_s64(vshlq_n_s64(v260, 0x30uLL), 0x30uLL);
        v265 = v264.i64[1];
        v266 = v264.i64[0];
        v264.i64[0] = v237;
        v267 = (uint64x2_t)vshrq_n_s64(vshlq_n_s64(v232, 0x30uLL), 0x30uLL);
        v268 = v257.i64[0];
        v257.i64[0] = v240;
        v269 = v267.i64[1];
        v270 = v253.i64[1];
        v271 = v162;
        v272 = v267.i64[0];
        v267.i64[0] = v241;
        v273 = v228 * v231;
        v274 = v253.i64[0];
        v275 = v208.i32[1];
        v276 = v208.i32[0];
        v253.i64[0] = v273;
        v277 = v234 * v242;
        v278 = v208.i32[3];
        v279 = v208.i32[2];
        v280 = v235 * v243;
        v232.i64[0] = v229.u32[2];
        v232.i64[1] = v229.u32[3];
        v281 = (uint64x2_t)vshrq_n_s64(vshlq_n_s64(v232, 0x30uLL), 0x30uLL);
        v282 = v281.i64[1];
        v283 = v281.i64[0];
        v264.i64[1] = v251;
        v284 = v369 * v278;
        v267.i64[1] = v259;
        v285 = v252.i32[3];
        v253.i64[1] = v263;
        result = v252.i32[2];
        v281.i64[0] = v256 * v262;
        v281.i64[1] = v255 * v261;
        v286 = vsraq_n_u64(vshrq_n_u64(v281, 0x10uLL), v253, 0x10uLL);
        v252.i64[0] = v266 * v268;
        v252.i64[1] = v265 * v257.i64[1];
        v287 = vsraq_n_u64(vshrq_n_u64(v252, 0x10uLL), v267, 0x10uLL);
        v229.i64[0] = v272 * v274;
        v257.i64[1] = v368;
        v229.i64[1] = v269 * v270;
        v267.i64[0] = v283 * result;
        v267.i64[1] = v282 * v285;
        v253.i64[0] = v249 * v279;
        v253.i64[1] = v284;
        v288 = (int32x4_t)vsraq_n_u64(vsraq_n_u64(vshrq_n_u64(v267, 0x10uLL), v264, 0x10uLL), v253, 0x10uLL);
        v253.i64[0] = v370.i64[0] * v276;
        v289 = v372;
        v198 = v373;
        v253.i64[1] = v370.i64[1] * v275;
        v290 = (int32x4_t)vsraq_n_u64(vsraq_n_u64(vshrq_n_u64(v229, 0x10uLL), v257, 0x10uLL), v253, 0x10uLL);
        v253.i64[0] = v371 * v247;
        v253.i64[1] = v239 * v246;
        v291 = (int32x4_t)vsraq_n_u64(v287, v253, 0x10uLL);
        v253.i64[0] = v280;
        v253.i64[1] = v277;
        v292 = vuzp1q_s32((int32x4_t)vsraq_n_u64(v286, v253, 0x10uLL), v291);
        v293 = vdupq_n_s32(0x7FFF7Fu);
        v294 = vuzp1q_s32(v290, v288);
        *v271 = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v292, v293), v201, (int8x16_t)vmaxq_s32(vhaddq_s32(vshrq_n_s32(v292, 7uLL), v199), v200)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v294, v293), v201, (int8x16_t)vmaxq_s32(vhaddq_s32(vshrq_n_s32(v294, 7uLL), v199), v200)));
        v162 = v271 + 1;
        v185 = vaddq_s64(v185, v184);
        v182 = vaddq_s64(v182, v184);
        v181 = vaddq_s64(v181, v184);
        v183 = vaddq_s64(v183, v184);
        v192 = vaddq_s32(v192, v189);
        v188 = vaddq_s32(v188, v189);
        v195 = vaddq_s32(v195, v194);
        v193 = vaddq_s32(v193, v194);
        v202 += 2;
        v174 = v289 - 8;
      }
      while (v174);
      v161 = v354;
      v163 = v353;
      v12 = v360;
      v150 = v366;
      v140 = v367;
      v141 = v364;
      v142 = v365;
      v147 = v358;
      LODWORD(v139) = v359;
      v149 = v362;
      v148 = v363;
      LOWORD(v154) = v357;
      LOWORD(v155) = v356;
      v160 = v355;
      v158 = v352;
      LOWORD(v159) = v351;
      LOWORD(v164) = v350;
      if (v353 == (_BYTE *)v354)
        goto LABEL_123;
    }
    else
    {
      v163 = 0;
      v164 = -v151;
    }
    result = v158 + v160;
    v165 = (_WORD *)(2 * (_QWORD)v163 + v150 - 2);
    v166 = v161 - (_QWORD)v163;
    v167 = (__int16 *)(2 * (_QWORD)v163 + v142 + 2);
    v168 = v164 - v154;
    v169 = v159 - v155;
    v170 = (__int16 *)v140 + (_QWORD)v163;
    do
    {
      v172 = *v167++;
      v173 = ((unint64_t)(*(v170 - 1) * (uint64_t)v169) >> 5)
           + ((result * v172) >> 16)
           + ((unint64_t)(v168 * (uint64_t)((*(v170 - 1) << 10) + ((*v170 + *(v170 - 2)) << 9))) >> 16);
      if (v173 <= 8388479)
      {
        v171 = ((v173 >> 7) + 1) >> 1;
        if (v171 <= -32768)
          LOWORD(v171) = 0x8000;
      }
      else
      {
        LOWORD(v171) = 0x7FFF;
      }
      ++v170;
      *v165++ = v171;
      result += v160;
      v168 -= v154;
      v169 -= v155;
      --v166;
    }
    while (v166);
  }
LABEL_123:
  if (v147 < v141)
  {
    v295 = v141;
    v296 = (_DWORD)v139 << 10;
    v297 = (__int16)-(__int16)v148;
    v298 = (__int16)-(__int16)v149;
    v299 = v147;
    v300 = v295 - v147;
    if (v300 < 0x10)
      goto LABEL_130;
    v301 = 2 * v147;
    v302 = (int16x8_t *)(v301 + v150 - 2);
    if (v302 < (int16x8_t *)((char *)v140 + 2 * v295) && (unint64_t)v140 + v301 - 4 < 2 * v295 + v150 - 2)
      goto LABEL_130;
    v362 = v149;
    v363 = v148;
    v303 = vdupq_n_s64(v297);
    result = v300 - (v295 & 7) + v147;
    v304 = vdupq_n_s64(v298);
    v305 = v147 + (unint64_t)(v295 & 7) - v295;
    v306 = (int16x8_t *)(v301 + v142 + 2);
    v307 = (int16x8_t *)((char *)v140 + v301);
    v308 = vdupq_n_s32(0x7FFF7Fu);
    v309.i64[0] = 0x100000001;
    v309.i64[1] = 0x100000001;
    v310.i64[0] = 0x7F0000007FLL;
    v310.i64[1] = 0x7F0000007FLL;
    v311.i64[0] = 0x7F0000007FLL;
    v311.i64[1] = 0x7F0000007FLL;
    do
    {
      v312 = *(int16x8_t *)((char *)v307 - 4);
      v313 = vaddl_high_s16(*v307, v312);
      v314 = vaddl_s16(*(int16x4_t *)v307->i8, *(int16x4_t *)v312.i8);
      v315 = *(int16x8_t *)((char *)v307 - 2);
      v316 = vaddq_s32(vshll_high_n_s16(v315, 0xAuLL), vshlq_n_s32(v313, 9uLL));
      v317 = *v306++;
      v318 = (uint64x2_t)vmovl_high_s16(v317);
      v319.i64[0] = v318.i32[0];
      v319.i64[1] = v318.i32[1];
      v320 = v319;
      v321 = vaddq_s32(vshll_n_s16(*(int16x4_t *)v315.i8, 0xAuLL), vshlq_n_s32(v314, 9uLL));
      v319.i64[0] = v318.i32[2];
      v319.i64[1] = v318.i32[3];
      v322 = v319;
      v323 = (uint64x2_t)vmovl_s16(*(int16x4_t *)v317.i8);
      v319.i32[0] = v323.i32[0];
      v313.i32[2] = v323.i32[1];
      v323.i64[0] = v296 * (uint64_t)v323.i32[2];
      v313.i64[0] = v296 * (uint64_t)v319.i32[0];
      v322.i64[0] = v296 * (uint64_t)v322.i32[0];
      v324 = v296 * (uint64_t)v320.i32[2];
      v325 = v296 * (uint64_t)v320.i32[0];
      v319.i64[0] = v321.i32[2];
      v319.i64[1] = v321.i32[3];
      v326 = v319;
      v319.i64[0] = v321.i32[0];
      v319.i64[1] = v321.i32[1];
      v327 = v319;
      v318.i64[0] = v325;
      v319.i64[0] = v316.i32[2];
      v319.i64[1] = v316.i32[3];
      v328 = v319;
      v329 = v316.i32[1];
      v323.i64[1] = v296 * (uint64_t)v323.i32[3];
      v313.i64[1] = v296 * (uint64_t)v313.i32[2];
      v330 = v303.i64[0] * v316.i32[0];
      v322.i64[1] = v296 * (uint64_t)v322.i32[2];
      v318.i64[1] = v324;
      v331 = v303.i64[0] * v326.i64[0];
      v332 = (uint64x2_t)vshll_high_n_s16(v315, 0xBuLL);
      v326.i64[0] = v330;
      v319.i64[1] = v332.i32[3];
      v333 = v332.i32[1];
      v328.i64[0] *= v303.i64[0];
      v332.i64[0] = v304.i64[0] * v332.i32[0];
      v334.i64[0] = v303.i64[0] * v327.i64[0];
      v335 = (uint64x2_t)vshll_n_s16(*(int16x4_t *)v315.i8, 0xBuLL);
      v336.i64[0] = v331;
      v337.i64[0] = v304.i64[0] * v332.i32[2];
      v332.i64[1] = v304.i64[1] * v333;
      v327.i64[0] = v304.i64[0] * v335.i32[0];
      v337.i64[1] = v304.i64[1] * v319.i64[1];
      v338 = v303.i64[1] * v327.i64[1];
      v339 = v303.i64[1] * v326.i64[1];
      v326.i64[1] = v303.i64[1] * v329;
      v327.i64[1] = v304.i64[1] * v335.i32[1];
      v328.i64[1] *= v303.i64[1];
      v334.i64[1] = v338;
      v335.i64[0] = v304.i64[0] * v335.i32[2];
      v335.i64[1] = v304.i64[1] * v335.i32[3];
      v336.i64[1] = v339;
      v340 = (int32x4_t)vsraq_n_u64(vsraq_n_u64(vshrq_n_u64(v335, 0x10uLL), v323, 0x10uLL), v336, 0x10uLL);
      v341 = vuzp1q_s32((int32x4_t)vsraq_n_u64(vsraq_n_u64(vshrq_n_u64(v332, 0x10uLL), v318, 0x10uLL), v326, 0x10uLL), (int32x4_t)vsraq_n_u64(vsraq_n_u64(vshrq_n_u64(v337, 0x10uLL), v322, 0x10uLL), v328, 0x10uLL));
      v342 = vuzp1q_s32((int32x4_t)vsraq_n_u64(vsraq_n_u64(vshrq_n_u64(v327, 0x10uLL), (uint64x2_t)v313, 0x10uLL), v334, 0x10uLL), v340);
      *v302++ = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v342, v308), v311, (int8x16_t)vmaxq_s32(vhaddq_s32(vshrq_n_s32(v342, 7uLL), v309), v310)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v341, v308), v311, (int8x16_t)vmaxq_s32(vhaddq_s32(vshrq_n_s32(v341, 7uLL), v309), v310)));
      ++v307;
      v305 += 8;
    }
    while (v305);
    v299 = result;
    LOWORD(v149) = v362;
    LOWORD(v148) = v363;
    if ((v295 & 7) != 0)
    {
LABEL_130:
      v343 = (_WORD *)(2 * v299 + v150 - 2);
      v344 = v295 - v299;
      v345 = (__int16 *)(2 * v299 + v142 + 2);
      v346 = (__int16 *)v140 + v299;
      do
      {
        while (1)
        {
          v348 = *v345++;
          result = (unint64_t)(v348 * (uint64_t)v296) >> 16;
          v349 = ((unint64_t)(*(v346 - 1) * (uint64_t)(int)v298) >> 5)
               + result
               + ((unint64_t)((int)v297 * (uint64_t)((*(v346 - 1) << 10) + ((*v346 + *(v346 - 2)) << 9))) >> 16);
          if (v349 <= 8388479)
            break;
          ++v346;
          *v343++ = 0x7FFF;
          if (!--v344)
            goto LABEL_136;
        }
        v347 = ((v349 >> 7) + 1) >> 1;
        if (v347 <= -32768)
          LOWORD(v347) = 0x8000;
        ++v346;
        *v343++ = v347;
        --v344;
      }
      while (v344);
    }
  }
LABEL_136:
  *v12 = v148;
  v12[1] = v149;
  v12[15] = v139;
  return result;
}

unsigned __int16 *silk_stereo_MS_to_LR(unsigned __int16 *result, _DWORD *a2, _DWORD *a3, int *a4, int a5, int a6)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int16x4_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  int v23;
  int v24;
  __int16 *v25;
  __int16 *v26;
  int v27;
  int v28;
  int v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  char *v40;
  int8x16_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int8x16_t v45;
  uint64_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int8x16_t v60;
  int64x2_t v61;
  int8x16_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int32x4_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int8x16_t v76;
  int32x4_t v77;
  uint64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  uint64_t v85;
  uint64_t v86;
  int64x2_t v87;
  uint64x2_t v88;
  uint64x2_t v89;
  uint64x2_t v90;
  uint64x2_t v91;
  int64x2_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int64x2_t v101;
  int64x2_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int16x4_t *v106;
  int8x16_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int32x4_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int32x4_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int8x16_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int8x16_t v127;
  int32x4_t v128;
  uint64x2_t v129;
  uint64x2_t v130;
  uint64x2_t v131;
  uint64x2_t v132;
  uint64x2_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  uint64_t v137;
  __int16 *v138;
  __int16 *v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int16 *v146;
  __int16 *v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int16x8_t *v152;
  int16x8_t *v153;
  uint64_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;

  *a2 = *((_DWORD *)result + 1);
  *a3 = *((_DWORD *)result + 2);
  v6 = 2 * a6;
  *((_DWORD *)result + 1) = *(_DWORD *)((char *)a2 + v6);
  *((_DWORD *)result + 2) = *(_DWORD *)((char *)a3 + v6);
  v7 = 8 * a5;
  v8 = *a4;
  v9 = a4[1];
  if (a5 < 1)
    goto LABEL_19;
  v10 = *result;
  v11 = result[1];
  v12 = (__int16)(0x10000 / v7);
  v13 = (((v12 * (__int16)(v8 - v10)) >> 15) + 1) >> 1;
  v14 = (((v12 * (__int16)(v9 - v11)) >> 15) + 1) >> 1;
  if (v7 <= 1)
    v15 = 1;
  else
    v15 = v7;
  if (v15 >= 8
    && ((v16 = (int16x4_t *)((char *)a3 + 2), (char *)a3 + 2 >= (char *)a2 + ((2 * v15) | 4))
     || (char *)v16 + 2 * v15 <= (char *)a2))
  {
    v17 = v15 & 0x7FFFFFF8;
    v18 = v11 + v14 * (v15 & 0x7FFFFFF8);
    v19 = v10 + v13 * (v15 & 0x7FFFFFF8);
    v30 = vdupq_n_s32(v11);
    v31 = vdupq_n_s32(v14);
    v32 = vmlaq_s32(v30, v31, (int32x4_t)xmmword_208F08E20);
    v33 = vdupq_n_s32(8 * v14);
    v34 = vdupq_n_s32(v10);
    v35 = vmlaq_s32(v30, v31, (int32x4_t)xmmword_208F071C0);
    v36 = vdupq_n_s32(v13);
    v37 = vmlaq_s32(v34, v36, (int32x4_t)xmmword_208F08E20);
    v38 = vmlaq_s32(v34, v36, (int32x4_t)xmmword_208F071C0);
    v39 = vdupq_n_s32(8 * v13);
    v40 = (char *)a2 + 2;
    v41.i64[0] = 0xFFFFFFFF00000000;
    v41.i64[1] = 0xFFFFFFFF00000000;
    v42 = vdupq_n_s32(0x7FFF7Fu);
    v43.i64[0] = 0x100000001;
    v43.i64[1] = 0x100000001;
    v44.i64[0] = 0x7F0000007FLL;
    v44.i64[1] = 0x7F0000007FLL;
    v45.i64[0] = 0x7F0000007FLL;
    v45.i64[1] = 0x7F0000007FLL;
    v46 = v17;
    do
    {
      v47 = vaddq_s32(v38, v36);
      v48 = vaddq_s32(v37, v36);
      v49 = *(int16x8_t *)(v40 - 2);
      v50 = *(int16x8_t *)(v40 + 2);
      v51 = (int8x16_t)vaddq_s32(vshll_n_s16(*(int16x4_t *)v40, 0xAuLL), vshlq_n_s32(vaddl_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v49.i8), 9uLL));
      v52 = vaddq_s32(vshll_high_n_s16(*(int16x8_t *)v40, 0xAuLL), vshlq_n_s32(vaddl_high_s16(v50, v49), 9uLL));
      v53.i64[0] = v52.i32[0];
      v53.i64[1] = v52.i32[1];
      v54 = v53;
      v53.i64[0] = v48.u32[0];
      v53.i64[1] = v48.u32[1];
      v55 = v53;
      v53.i64[0] = v48.u32[2];
      v53.i64[1] = v48.u32[3];
      v56 = v53;
      v53.i64[0] = v52.i32[2];
      v53.i64[1] = v52.i32[3];
      v57 = v53;
      v53.i64[0] = v47.u32[0];
      v53.i64[1] = v47.u32[1];
      v58 = v53;
      v53.i64[0] = v47.u32[2];
      v53.i64[1] = v47.u32[3];
      v59 = vshrq_n_s64(vshlq_n_s64(v55, 0x30uLL), 0x20uLL);
      v60 = (int8x16_t)vshrq_n_s64(vshlq_n_s64(v56, 0x30uLL), 0x20uLL);
      v61 = vshrq_n_s64(vshlq_n_s64(v58, 0x30uLL), 0x20uLL);
      v62 = (int8x16_t)vshrq_n_s64(vshlq_n_s64(v53, 0x30uLL), 0x20uLL);
      v63 = v61.i64[1] * v51.i32[1];
      v64 = v60.i64[1] * v57.i64[1];
      v62.i64[0] *= v51.i32[2];
      v65 = v60.i64[0] * v57.i64[0];
      v60.i64[0] = v61.i64[0] * v51.i32[0];
      v66 = v59.i64[1] * v54.i64[1];
      v67 = v59.i64[0] * v54.i64[0];
      v68 = vaddq_s32(v35, v31);
      v51.i64[0] = v65;
      v69 = vaddq_s32(v32, v31);
      v70 = vmovl_s16(*v16);
      v53.i64[0] = v70.u32[2];
      v53.i64[1] = v70.u32[3];
      v71 = v53;
      v62.i64[1] *= v51.i32[3];
      v53.i64[0] = v70.u32[0];
      v53.i64[1] = v70.u32[1];
      v72 = v53;
      v73 = vmovl_high_s16(*(int16x8_t *)v16->i8);
      v53.i64[0] = v73.u32[2];
      v53.i64[1] = v73.u32[3];
      v74 = v53;
      v53.i64[0] = v73.u32[0];
      v53.i64[1] = v73.u32[1];
      v60.i64[1] = v63;
      v75 = vshlq_n_s64(v53, 0x28uLL);
      v51.i64[1] = v64;
      v76.i64[0] = v67;
      v76.i64[1] = v66;
      v77 = vshll_high_n_s16(*(int16x8_t *)v40, 0xBuLL);
      v78 = (uint64x2_t)vshll_n_s16(*(int16x4_t *)v40, 0xBuLL);
      v53.i64[0] = v78.i32[0];
      v53.i64[1] = v78.i32[1];
      v79 = v53;
      v53.i64[0] = v77.i32[2];
      v53.i64[1] = v77.i32[3];
      v80 = v53;
      v53.i64[0] = v77.i32[0];
      v53.i64[1] = v77.i32[1];
      v81 = v53;
      v53.i64[0] = v69.u32[0];
      v53.i64[1] = v69.u32[1];
      v82 = v53;
      v53.i64[0] = v69.u32[2];
      v53.i64[1] = v69.u32[3];
      v83 = v53;
      v84 = vshrq_n_s64(vshlq_n_s64(v82, 0x30uLL), 0x30uLL);
      v85 = v84.i64[1];
      v86 = v84.i64[0];
      v53.i64[0] = v68.u32[0];
      v53.i64[1] = v68.u32[1];
      v87 = v53;
      v53.i64[0] = v68.u32[2];
      v53.i64[1] = v68.u32[3];
      v88 = (uint64x2_t)vshrq_n_s64(vshlq_n_s64(v83, 0x30uLL), 0x30uLL);
      v89 = (uint64x2_t)vaddq_s64((int64x2_t)vandq_s8(v62, v41), vshlq_n_s64(v71, 0x28uLL));
      v71.i64[0] = v86 * v81.i64[0];
      v71.i64[1] = v85 * v81.i64[1];
      v90 = (uint64x2_t)vaddq_s64((int64x2_t)vandq_s8(v60, v41), vshlq_n_s64(v72, 0x28uLL));
      v88.i64[0] *= v80.i64[0];
      v88.i64[1] *= v80.i64[1];
      v91 = (uint64x2_t)vshrq_n_s64(vshlq_n_s64(v87, 0x30uLL), 0x30uLL);
      v92 = vshrq_n_s64(vshlq_n_s64(v53, 0x30uLL), 0x30uLL);
      v91.i64[0] *= v79.i64[0];
      v91.i64[1] *= v79.i64[1];
      v78.i64[0] = v92.i64[0] * v78.i32[2];
      v78.i64[1] = v92.i64[1] * v78.i32[3];
      v93 = (int32x4_t)vsraq_n_u64(vshrq_n_u64(v89, 0x20uLL), v78, 0x10uLL);
      v94 = vuzp1q_s32((int32x4_t)vsraq_n_u64(vshrq_n_u64((uint64x2_t)vaddq_s64((int64x2_t)vandq_s8(v76, v41), v75), 0x20uLL), (uint64x2_t)v71, 0x10uLL), (int32x4_t)vsraq_n_u64(vshrq_n_u64((uint64x2_t)vaddq_s64((int64x2_t)vandq_s8(v51, v41), vshlq_n_s64(v74, 0x28uLL)), 0x20uLL), v88, 0x10uLL));
      v95 = vuzp1q_s32((int32x4_t)vsraq_n_u64(vshrq_n_u64(v90, 0x20uLL), v91, 0x10uLL), v93);
      *(int16x8_t *)v16->i8 = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v95, v42), v45, (int8x16_t)vmaxq_s32(vhaddq_s32(vshrq_n_s32(v95, 7uLL), v43), v44)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v94, v42), v45, (int8x16_t)vmaxq_s32(vhaddq_s32(vshrq_n_s32(v94, 7uLL), v43), v44)));
      v16 += 2;
      v35 = vaddq_s32(v35, v33);
      v32 = vaddq_s32(v32, v33);
      v38 = vaddq_s32(v38, v39);
      v37 = vaddq_s32(v37, v39);
      v40 += 16;
      v46 -= 8;
    }
    while (v46);
    if (v17 == v15)
      goto LABEL_19;
  }
  else
  {
    v17 = 0;
    v18 = result[1];
    v19 = *result;
  }
  v20 = v15 - v17;
  v21 = 2 * v17 + 2;
  v22 = (__int16 *)((char *)a3 + v21);
  v23 = v19 + v13;
  v24 = v18 + v14;
  v25 = (__int16 *)((char *)a2 + v21);
  v26 = (__int16 *)((char *)a2 + v21);
  do
  {
    while (1)
    {
      v28 = v26[1];
      ++v26;
      v29 = (((((v23 << 16) * (uint64_t)((*v25 << 10) + ((v28 + *(v25 - 1)) << 9))) & 0xFFFFFFFF00000000)
            + ((uint64_t)*v22 << 40)) >> 32)
          + ((unint64_t)(*v25 * (uint64_t)(__int16)v24) >> 5);
      if (v29 <= 8388479)
        break;
      *v22++ = 0x7FFF;
      v23 += v13;
      v24 += v14;
      v25 = v26;
      if (!--v20)
        goto LABEL_19;
    }
    v27 = ((v29 >> 7) + 1) >> 1;
    if (v27 <= -32768)
      LOWORD(v27) = 0x8000;
    *v22++ = v27;
    v23 += v13;
    v24 += v14;
    v25 = v26;
    --v20;
  }
  while (v20);
LABEL_19:
  if (v7 < a6)
  {
    v96 = v8 << 16;
    v97 = v7;
    v98 = a6 - (uint64_t)v7;
    if (v98 < 8)
      goto LABEL_26;
    v99 = 2 * v7;
    if ((char *)a3 + (v99 | 2) < (char *)a2 + 2 * a6 + 4 && (char *)a2 + v99 < (char *)a3 + 2 * a6 + 2)
      goto LABEL_26;
    v100 = v98 - (a6 & 7) + v7;
    v101 = vdupq_n_s64(v96);
    v102 = vdupq_n_s64((__int16)v9);
    v103 = v7 + (a6 & 7) - a6;
    v104 = v99 + 2;
    v105 = (char *)a2 + v99 + 2;
    v106 = (int16x4_t *)((char *)a3 + v104);
    v107.i64[0] = 0xFFFFFFFF00000000;
    v107.i64[1] = 0xFFFFFFFF00000000;
    v108 = vdupq_n_s32(0x7FFF7Fu);
    v109.i64[0] = 0x100000001;
    v109.i64[1] = 0x100000001;
    v110.i64[0] = 0x7F0000007FLL;
    v110.i64[1] = 0x7F0000007FLL;
    v111.i64[0] = 0x7F0000007FLL;
    v111.i64[1] = 0x7F0000007FLL;
    do
    {
      v112 = *(int16x8_t *)(v105 - 2);
      v113 = *(int16x8_t *)(v105 + 2);
      v114 = (int8x16_t)vaddq_s32(vshll_n_s16(*(int16x4_t *)v105, 0xAuLL), vshlq_n_s32(vaddl_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8), 9uLL));
      v115 = (int8x16_t)vaddq_s32(vshll_high_n_s16(*(int16x8_t *)v105, 0xAuLL), vshlq_n_s32(vaddl_high_s16(v113, v112), 9uLL));
      v116 = vmovl_s16(*v106);
      v117.i64[0] = v116.u32[2];
      v117.i64[1] = v116.u32[3];
      v118 = v117;
      v117.i64[0] = v116.u32[0];
      v117.i64[1] = v116.u32[1];
      v119 = v117;
      v120 = vmovl_high_s16(*(int16x8_t *)v106->i8);
      v117.i64[0] = v120.u32[2];
      v117.i64[1] = v120.u32[3];
      v121 = v117;
      v117.i64[0] = v120.u32[0];
      v117.i64[1] = v120.u32[1];
      v122 = v117;
      v117.i64[0] = v115.i32[2];
      v117.i64[1] = v115.i32[3];
      v123 = (int8x16_t)v117;
      v117.i64[0] = v114.i32[0];
      v124 = v114.i32[1];
      v114.i64[0] = v101.i64[0] * v114.i32[2];
      v125 = v101.i64[0] * v123.i64[0];
      v123.i64[0] = v101.i64[0] * v117.i64[0];
      v117.i64[1] = v115.i32[1];
      v114.i64[1] = v101.i64[1] * v114.i32[3];
      v126 = v101.i64[1] * v123.i64[1];
      v123.i64[1] = v101.i64[1] * v124;
      v127.i64[0] = v125;
      v127.i64[1] = v126;
      v115.i64[0] = v101.i64[0] * v115.i32[0];
      v115.i64[1] = v101.i64[1] * v117.i64[1];
      v128 = vshll_high_n_s16(*(int16x8_t *)v105, 0xBuLL);
      v129 = (uint64x2_t)vshll_n_s16(*(int16x4_t *)v105, 0xBuLL);
      v130 = (uint64x2_t)vaddq_s64((int64x2_t)vandq_s8(v114, v107), vshlq_n_s64(v118, 0x28uLL));
      v117.i64[0] = v129.i32[2];
      v117.i64[1] = v129.i32[3];
      v131 = (uint64x2_t)v117;
      v117.i64[1] = v129.i32[1];
      v132 = (uint64x2_t)vaddq_s64((int64x2_t)vandq_s8(v127, v107), vshlq_n_s64(v121, 0x28uLL));
      v127.i64[0] = v102.i64[0] * v128.i32[0];
      v127.i64[1] = v102.i64[1] * v128.i32[1];
      v133 = (uint64x2_t)vaddq_s64((int64x2_t)vandq_s8(v115, v107), vshlq_n_s64(v122, 0x28uLL));
      v122.i64[0] = v102.i64[0] * v128.i32[2];
      v122.i64[1] = v102.i64[1] * v128.i32[3];
      v129.i64[0] = v102.i64[0] * v129.i32[0];
      v129.i64[1] = v102.i64[1] * v117.i64[1];
      v131.i64[0] *= v102.i64[0];
      v131.i64[1] *= v102.i64[1];
      v134 = (int32x4_t)vsraq_n_u64(vshrq_n_u64((uint64x2_t)vaddq_s64((int64x2_t)vandq_s8(v123, v107), vshlq_n_s64(v119, 0x28uLL)), 0x20uLL), v129, 0x10uLL);
      v135 = vuzp1q_s32((int32x4_t)vsraq_n_u64(vshrq_n_u64(v133, 0x20uLL), (uint64x2_t)v127, 0x10uLL), (int32x4_t)vsraq_n_u64(vshrq_n_u64(v132, 0x20uLL), (uint64x2_t)v122, 0x10uLL));
      v136 = vuzp1q_s32(v134, (int32x4_t)vsraq_n_u64(vshrq_n_u64(v130, 0x20uLL), v131, 0x10uLL));
      *(int16x8_t *)v106->i8 = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v136, v108), v111, (int8x16_t)vmaxq_s32(vhaddq_s32(vshrq_n_s32(v136, 7uLL), v109), v110)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v135, v108), v111, (int8x16_t)vmaxq_s32(vhaddq_s32(vshrq_n_s32(v135, 7uLL), v109), v110)));
      v106 += 2;
      v105 += 16;
      v103 += 8;
    }
    while (v103);
    v97 = v100;
    if ((a6 & 7) != 0)
    {
LABEL_26:
      v137 = a6 - v97;
      v138 = (__int16 *)a3 + v97 + 1;
      v139 = (__int16 *)a2 + v97 + 2;
      do
      {
        while (1)
        {
          v141 = (((((int)v96 * (uint64_t)((*(v139 - 1) << 10) + ((*v139 + *(v139 - 2)) << 9))) & 0xFFFFFFFF00000000)
                 + ((uint64_t)*v138 << 40)) >> 32)
               + ((unint64_t)(*(v139 - 1) * (uint64_t)(__int16)v9) >> 5);
          if (v141 <= 8388479)
            break;
          ++v139;
          *v138++ = 0x7FFF;
          if (!--v137)
            goto LABEL_32;
        }
        v140 = ((v141 >> 7) + 1) >> 1;
        if (v140 <= -32768)
          LOWORD(v140) = 0x8000;
        ++v139;
        *v138++ = v140;
        --v137;
      }
      while (v137);
    }
  }
LABEL_32:
  *result = v8;
  result[1] = v9;
  if (a6 >= 1)
  {
    if (a6 >= 0x10
      && ((v142 = 2 * a6 + 2, (char *)a2 + 2 >= (char *)a3 + v142) || (char *)a3 + 2 >= (char *)a2 + v142))
    {
      v143 = a6 & 0x7FFFFFF0;
      v152 = (int16x8_t *)((char *)a2 + 18);
      v153 = (int16x8_t *)((char *)a3 + 18);
      v154 = a6 & 0xFFFFFFF0;
      do
      {
        v155 = v152[-1];
        v156 = *v152;
        v157 = v153[-1];
        v158 = *v153;
        v159 = vqaddq_s16(*v152, *v153);
        v152[-1] = vqaddq_s16(v155, v157);
        *v152 = v159;
        v153[-1] = vqsubq_s16(v155, v157);
        *v153 = vqsubq_s16(v156, v158);
        v152 += 2;
        v153 += 2;
        v154 -= 16;
      }
      while (v154);
      if (v143 == a6)
        return result;
    }
    else
    {
      v143 = 0;
    }
    v144 = a6 - v143;
    v145 = 2 * v143 + 2;
    v146 = (__int16 *)((char *)a3 + v145);
    v147 = (__int16 *)((char *)a2 + v145);
    do
    {
      v148 = *v147;
      v149 = *v146;
      v150 = v148 + v149;
      if (v148 + v149 >= 0x7FFF)
        v150 = 0x7FFF;
      if (v150 <= -32768)
        LOWORD(v150) = 0x8000;
      *v147++ = v150;
      v151 = v148 - v149;
      if (v151 >= 0x7FFF)
        v151 = 0x7FFF;
      if (v151 <= -32768)
        LOWORD(v151) = 0x8000;
      *v146++ = v151;
      --v144;
    }
    while (v144);
  }
  return result;
}

_DWORD *silk_stereo_quant_pred(_DWORD *result, _BYTE *a2)
{
  unsigned int v2;
  int v3;
  char v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  v2 = -13364 - *result;
  if (*result + 13364 >= 0)
    v2 = *result + 13364;
  if (v2 == 0x7FFFFFFF)
  {
    v3 = 0;
    v4 = *a2;
  }
  else
  {
    *(_WORD *)a2 = 0;
    if (*result + 12628 < 0)
      v5 = -12628 - *result;
    else
      v5 = *result + 12628;
    if (v5 >= v2)
    {
      v4 = 0;
      v3 = -13364;
    }
    else
    {
      v4 = 0;
      v6 = 368;
      LOWORD(v7) = -10050;
      v8 = -13732;
      v3 = -12628;
      v9 = 2;
      while (1)
      {
        a2[1] = 1;
        v10 = 5 * v6 + v8;
        v11 = *result - v10;
        if (v11 < 0)
          v11 = v10 - *result;
        if (v11 >= v5)
          break;
        a2[1] = 2;
        v12 = v8 - v6 + 8 * v6;
        if (*result - v12 >= 0)
          v13 = *result - v12;
        else
          v13 = v12 - *result;
        if (v13 >= v11)
          goto LABEL_29;
        a2[1] = 3;
        v3 = 9 * v6 + v8;
        if (*result - v3 >= 0)
          v14 = *result - v3;
        else
          v14 = v3 - *result;
        if (v14 >= v13)
        {
          v3 = v8 - v6 + 8 * v6;
          break;
        }
        a2[1] = 4;
        if (v9 == 16)
        {
          v4 = 14;
          break;
        }
        v8 = (__int16)v7;
        v7 = silk_stereo_pred_quant_Q13[v9];
        v6 = (6554 * (v7 - v8)) >> 16;
        v10 = v6 + v8;
        if (*result - (v6 + v8) >= 0)
          v15 = *result - v10;
        else
          v15 = v10 - *result;
        if (v15 >= v14)
          break;
        v4 = v9 - 1;
        *a2 = v9 - 1;
        a2[1] = 0;
        v3 = 3 * v6 + v8;
        v5 = *result - v3;
        if ((v5 & 0x80000000) != 0)
          v5 = v3 - *result;
        ++v9;
        if (v5 >= v15)
        {
LABEL_29:
          v3 = v10;
          break;
        }
      }
    }
  }
  v16 = (((86 * v4) >> 15) & 1) + ((86 * v4) >> 8);
  a2[2] = v16;
  *a2 = -3 * v16 + v4;
  *result = v3;
  v17 = result[1];
  v19 = v17 + 13364;
  v18 = v17 + 13364 < 0;
  v20 = -13364 - v17;
  if (!v18)
    v20 = v19;
  if (v20 == 0x7FFFFFFF)
  {
    v21 = a2[3];
  }
  else
  {
    *(_WORD *)(a2 + 3) = 0;
    v22 = result[1];
    v23 = v22 + 12628;
    v18 = v22 + 12628 < 0;
    v24 = -12628 - v22;
    if (v18)
      v25 = v24;
    else
      v25 = v23;
    if (v25 >= v20)
    {
      v21 = 0;
      v3 = -13364;
    }
    else
    {
      v21 = 0;
      v26 = 368;
      LOWORD(v27) = -10050;
      v28 = -13732;
      v3 = -12628;
      v29 = 2;
      while (1)
      {
        a2[4] = 1;
        v30 = 5 * v26 + v28;
        v31 = result[1] - v30;
        if (v31 < 0)
          v31 = v30 - result[1];
        if (v31 >= v25)
          break;
        a2[4] = 2;
        v32 = v28 - v26 + 8 * v26;
        if (result[1] - v32 >= 0)
          v33 = result[1] - v32;
        else
          v33 = v32 - result[1];
        if (v33 >= v31)
          goto LABEL_59;
        a2[4] = 3;
        v3 = 9 * v26 + v28;
        if (result[1] - v3 >= 0)
          v34 = result[1] - v3;
        else
          v34 = v3 - result[1];
        if (v34 >= v33)
        {
          v3 = v28 - v26 + 8 * v26;
          break;
        }
        a2[4] = 4;
        if (v29 == 16)
        {
          v21 = 14;
          break;
        }
        v28 = (__int16)v27;
        v27 = silk_stereo_pred_quant_Q13[v29];
        v26 = (6554 * (v27 - v28)) >> 16;
        v30 = v26 + v28;
        if (result[1] - (v26 + v28) >= 0)
          v35 = result[1] - v30;
        else
          v35 = v30 - result[1];
        if (v35 >= v34)
          break;
        v21 = v29 - 1;
        a2[3] = v29 - 1;
        a2[4] = 0;
        v3 = 3 * v26 + v28;
        v25 = result[1] - v3;
        if ((v25 & 0x80000000) != 0)
          v25 = v3 - result[1];
        ++v29;
        if (v25 >= v35)
        {
LABEL_59:
          v3 = v30;
          break;
        }
      }
    }
  }
  v36 = (((86 * v21) >> 15) & 1) + ((86 * v21) >> 8);
  a2[5] = v36;
  a2[3] = -3 * v36 + v21;
  *result -= v3;
  result[1] = v3;
  return result;
}

uint64_t silk_VAD_GetSA_Q8_c()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  __int16 *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  __int16 *v16;
  __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  __int16 v25;
  int v26;
  unsigned int v27;
  __int16 v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  __int16 *v33;
  __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  __int16 v42;
  int v43;
  unsigned int v44;
  __int16 v45;
  unint64_t v46;
  int v47;
  int v48;
  __int16 *v49;
  __int16 *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  __int16 v58;
  int v59;
  unsigned int v60;
  __int16 v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  __int16 *v74;
  __int16 *v75;
  int v76;
  __int16 *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int32x4_t v84;
  uint64_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int16x8_t *v89;
  int16x8_t v90;
  int16x8_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  int32x4_t v98;
  signed int v99;
  uint64_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int16x8_t *v104;
  int16x8_t v105;
  int16x8_t v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  unsigned int v124;
  int64_t v125;
  int32x4_t v126;
  uint64_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int16x8_t *v131;
  int16x8_t v132;
  int16x8_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  int32x4_t v140;
  uint64_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int16x8_t *v145;
  int16x8_t v146;
  int16x8_t v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  int v153;
  int v154;
  int32x4_t v155;
  uint64_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int16x8_t *v160;
  int16x8_t v161;
  int16x8_t v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  int v169;
  int32x4_t v170;
  uint64_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int16x8_t *v175;
  int16x8_t v176;
  int16x8_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  uint64_t v182;
  int v183;
  int32x4_t v184;
  uint64_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int16x8_t *v189;
  int16x8_t v190;
  int16x8_t v191;
  uint64_t v192;
  int v193;
  int v194;
  int v195;
  int v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  int16x8_t *v201;
  int32x4_t v202;
  uint64_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int16x8_t v207;
  int16x8_t v208;
  unint64_t v209;
  int v210;
  int v211;
  int v212;
  uint64_t v213;
  int v214;
  int16x8_t *v215;
  int32x4_t v216;
  uint64_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int16x8_t v221;
  int16x8_t v222;
  unint64_t v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  int v228;
  int16x8_t *v229;
  int32x4_t v230;
  uint64_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int16x8_t v235;
  int16x8_t v236;
  unint64_t v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  int16x8_t *v242;
  int32x4_t v243;
  uint64_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int16x8_t v248;
  int16x8_t v249;
  unint64_t v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  unint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  unsigned int v260;
  int16x8_t *v261;
  int32x4_t v262;
  uint64_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int16x8_t v267;
  int16x8_t v268;
  unint64_t v269;
  int v270;
  int v271;
  int v272;
  int v273;
  uint64_t v274;
  int v275;
  int v276;
  int32x4_t v277;
  uint64_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int16x8_t *v282;
  int16x8_t v283;
  int16x8_t v284;
  unint64_t v285;
  int v286;
  int v287;
  int v288;
  uint64_t v289;
  int v290;
  int v291;
  int32x4_t v292;
  uint64_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int16x8_t *v297;
  int16x8_t v298;
  int16x8_t v299;
  unint64_t v300;
  int v301;
  int v302;
  int v303;
  uint64_t v304;
  int v305;
  int32x4_t v306;
  uint64_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int16x8_t *v311;
  int16x8_t v312;
  int16x8_t v313;
  unint64_t v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  uint64_t v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  uint64_t v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  uint64_t v338;
  int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  unsigned int v347;
  int v348;
  int v349;
  unsigned int v350;
  unint64_t v351;
  unsigned int v352;
  int v353;
  unsigned int v354;
  signed int v355;
  unsigned int v356;
  int v357;
  unsigned int v358;
  int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unint64_t v364;
  unint64_t v365;
  int v366;
  signed int v367;
  int v368;
  int v369;
  unsigned int v370;
  unsigned int v371;
  int v372;
  unsigned int v373;
  int v374;
  uint64_t v375;
  unsigned int v376;
  unsigned int v377;
  BOOL v378;
  int v379;
  signed int v380;
  unsigned int v381;
  unsigned int v382;
  int v383;
  unsigned int v384;
  unsigned int v385;
  signed int v386;
  unsigned int v387;
  unsigned int v388;
  int v389;
  unsigned int v390;
  unsigned int v391;
  signed int v392;
  unsigned int v393;
  unsigned int v394;
  int v395;
  unsigned int v396;
  unsigned int v397;
  signed int v398;
  unsigned int v399;
  unsigned int v400;
  int v401;
  uint64_t v403;
  uint64_t v404;
  __int16 *v405;
  int16x8_t *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int16x8_t v410;
  _BYTE v411[12];
  int v412;
  _BYTE *v413;
  _DWORD v414[4];
  _DWORD v415[4];
  uint64_t v416;

  v413 = v411;
  v416 = *MEMORY[0x24BDAC8D0];
  v0 = MEMORY[0x24BDAC7A8]();
  v10 = (__int16 *)&v411[-v9];
  v11 = *(unsigned int *)(v0 + 4584);
  if ((int)v11 >= 2)
  {
    v12 = v4;
    v13 = v11 >> 1;
    v15 = *(_DWORD *)(v0 + 36);
    v14 = *(_DWORD *)(v0 + 40);
    v16 = (__int16 *)(v1 + 2);
    v17 = v10;
    do
    {
      v18 = (uint64_t)*(v16 - 1) << 10;
      v19 = v18 - v15;
      v20 = v18 + ((unint64_t)(0xFFFFFFFFA11ELL * v19) >> 16);
      v15 = v20 + v19;
      v21 = (uint64_t)*v16 << 10;
      v22 = (unint64_t)(10788 * (v21 - v14)) >> 16;
      v23 = v14 + v22;
      v14 = v21 + v22;
      v24 = (((v23 + v20) >> 10) + 1) >> 1;
      if (v23 + v20 < -67109888)
        LOWORD(v24) = 0x8000;
      if (v23 + v20 <= 67107839)
        v25 = v24;
      else
        v25 = 0x7FFF;
      *v17 = v25;
      v26 = v23 - v20;
      v27 = ((v26 >> 10) + 1) >> 1;
      if (v26 < -67109888)
        LOWORD(v27) = 0x8000;
      if (v26 <= 67107839)
        v28 = v27;
      else
        v28 = 0x7FFF;
      v17[v12] = v28;
      ++v17;
      v16 += 2;
      --v13;
    }
    while (v13);
    *(_DWORD *)(v0 + 36) = v15;
    *(_DWORD *)(v0 + 40) = v14;
  }
  if (v7 < 4)
    goto LABEL_59;
  v29 = 0;
  v31 = *(_DWORD *)(v0 + 44);
  v30 = *(_DWORD *)(v0 + 48);
  v32 = v3 & 0xFFFFFFFE;
  v33 = &v10[v2];
  do
  {
    v34 = &v10[v29];
    v35 = (uint64_t)*v34 << 10;
    v36 = v35 - v31;
    v37 = v35 + ((unint64_t)(0xFFFFFFFFA11ELL * v36) >> 16);
    v31 = v37 + v36;
    v38 = (uint64_t)v34[1] << 10;
    v39 = (unint64_t)(10788 * (v38 - v30)) >> 16;
    v40 = v30 + v39;
    v30 = v38 + v39;
    v41 = (((v40 + v37) >> 10) + 1) >> 1;
    if (v40 + v37 < -67109888)
      LOWORD(v41) = 0x8000;
    if (v40 + v37 <= 67107839)
      v42 = v41;
    else
      v42 = 0x7FFF;
    v10[v29 / 2] = v42;
    v43 = v40 - v37;
    v44 = (((v40 - v37) >> 10) + 1) >> 1;
    if (v43 < -67109888)
      LOWORD(v44) = 0x8000;
    if (v43 <= 67107839)
      v45 = v44;
    else
      v45 = 0x7FFF;
    v33[v29 / 2] = v45;
    v29 += 2;
  }
  while (v32 != v29);
  *(_DWORD *)(v0 + 44) = v31;
  *(_DWORD *)(v0 + 48) = v30;
  if (v7 < 8)
  {
LABEL_59:
    v77 = &v10[v6];
    v63 = *(v77 - 1) >> 1;
    *(v77 - 1) >>= 1;
    goto LABEL_60;
  }
  v46 = 0;
  v48 = *(_DWORD *)(v0 + 52);
  v47 = *(_DWORD *)(v0 + 56);
  v49 = &v10[v8];
  do
  {
    v50 = &v10[v46];
    v51 = (uint64_t)*v50 << 10;
    v52 = v51 - v48;
    v53 = v51 + ((unint64_t)(0xFFFFFFFFA11ELL * v52) >> 16);
    v48 = v53 + v52;
    v54 = (uint64_t)v50[1] << 10;
    v55 = (unint64_t)(10788 * (v54 - v47)) >> 16;
    v56 = v47 + v55;
    v47 = v54 + v55;
    v57 = (((v56 + v53) >> 10) + 1) >> 1;
    if (v56 + v53 < -67109888)
      LOWORD(v57) = 0x8000;
    if (v56 + v53 <= 67107839)
      v58 = v57;
    else
      v58 = 0x7FFF;
    v10[v46 / 2] = v58;
    v59 = v56 - v53;
    v60 = (((v56 - v53) >> 10) + 1) >> 1;
    if (v59 < -67109888)
      LOWORD(v60) = 0x8000;
    if (v59 <= 67107839)
      v61 = v60;
    else
      v61 = 0x7FFF;
    v49[v46 / 2] = v61;
    v46 += 2;
  }
  while ((v5 & 0xFFFFFFFE) != v46);
  *(_DWORD *)(v0 + 52) = v48;
  *(_DWORD *)(v0 + 56) = v47;
  v62 = v6 - 1;
  v63 = v10[v62] >> 1;
  v10[v62] >>= 1;
  if (v7 >= 16)
  {
    v64 = v62;
    if ((int)v62 >= 1)
      v65 = 1;
    else
      v65 = v6 - 1;
    v66 = (v6 + ~v65);
    if (v66 < 0x1F)
      goto LABEL_55;
    v67 = (int)v62 >= 1 ? 1 : v6 - 1;
    v68 = 2 * (v6 + ~v67);
    if (&v10[(v6 - 2) + v68 / 0xFFFFFFFFFFFFFFFELL] > &v10[v6 - 2])
      goto LABEL_55;
    v69 = v62;
    if (&v10[v69 + v68 / 0xFFFFFFFFFFFFFFFELL] > &v10[v69])
      goto LABEL_55;
    v70 = (v6 - 2);
    if ((int)v62 >= 1)
      LODWORD(v62) = 1;
    v71 = 2 * (v6 + ~(_DWORD)v62);
    if ((__int16 *)((char *)v10 + v70 * 2 - v71) < &v10[v69 + 1]
      && (__int16 *)((char *)v10 + v69 * 2 - v71) < &v10[v70 + 1])
    {
LABEL_55:
      v72 = v64;
LABEL_56:
      v73 = v72 + 1;
      v74 = &v10[v72];
      v75 = &v10[(v72 - 1)];
      do
      {
        v76 = *v75 >> 1;
        *v75-- = v76;
        *v74-- -= v76;
        --v73;
      }
      while (v73 > 1);
      goto LABEL_60;
    }
    v403 = v66 + 1;
    v404 = (v66 + 1) & 0x1FFFFFFF8;
    v72 = v64 - v404;
    v405 = v10 - 7;
    v406 = (int16x8_t *)&v10[v69 - 7];
    v407 = v64 + 0xFFFFFFFFLL;
    v408 = v404;
    do
    {
      v409 = v407;
      v410 = vshrq_n_s16(*(int16x8_t *)&v405[v409], 1uLL);
      *(int16x8_t *)&v405[v409] = v410;
      *v406 = vsubq_s16(*v406, v410);
      --v406;
      v407 -= 8;
      v408 -= 8;
    }
    while (v408);
    if (v403 != v404)
      goto LABEL_56;
  }
LABEL_60:
  *v10 -= *(_WORD *)(v0 + 92);
  *(_WORD *)(v0 + 92) = v63;
  v78 = *(_DWORD *)(v0 + 60);
  if ((int)v11 > 31)
  {
    v79 = 0;
    v80 = 0;
    v81 = ((int)v11 >> 3) >> 2;
    v82 = v81 - 1;
    if (v11 < 0x200)
      goto LABEL_66;
    if (v82 >> 31)
      goto LABEL_66;
    v83 = 0;
    v80 = v81 & 0x3FFFFFF0;
    v84 = 0uLL;
    v85 = v80;
    v86 = 0uLL;
    v87 = 0uLL;
    v88 = 0uLL;
    do
    {
      v89 = (int16x8_t *)((char *)v10 + (v83 >> 31));
      v90 = vshrq_n_s16(*v89, 3uLL);
      v91 = vshrq_n_s16(v89[1], 3uLL);
      v86 = vmlal_high_s16(v86, v90, v90);
      v84 = vmlal_s16(v84, *(int16x4_t *)v90.i8, *(int16x4_t *)v90.i8);
      v88 = vmlal_high_s16(v88, v91, v91);
      v87 = vmlal_s16(v87, *(int16x4_t *)v91.i8, *(int16x4_t *)v91.i8);
      v83 += 0x1000000000;
      v85 -= 16;
    }
    while (v85);
    v79 = vaddvq_s32(vaddq_s32(vaddq_s32(v87, v84), vaddq_s32(v88, v86)));
    if (v80 != v81)
    {
LABEL_66:
      v92 = v80 << 32;
      v93 = v81 - v80;
      do
      {
        v94 = *(__int16 *)((char *)v10 + (v92 >> 31)) >> 3;
        v79 += v94 * v94;
        v92 += 0x100000000;
        --v93;
      }
      while (v93);
    }
    v95 = 0;
    v96 = 0;
    v97 = v79 + v78;
    if (v11 < 0x200)
      goto LABEL_386;
    if (v82 >> 31)
      goto LABEL_386;
    v96 = v81 & 0x3FFFFFF0;
    v98 = 0uLL;
    v99 = ((int)v11 >> 3) >> 2;
    v100 = v96;
    v101 = 0uLL;
    v102 = 0uLL;
    v103 = 0uLL;
    do
    {
      v104 = (int16x8_t *)&v10[v99];
      v105 = vshrq_n_s16(*v104, 3uLL);
      v106 = vshrq_n_s16(v104[1], 3uLL);
      v101 = vmlal_high_s16(v101, v105, v105);
      v98 = vmlal_s16(v98, *(int16x4_t *)v105.i8, *(int16x4_t *)v105.i8);
      v103 = vmlal_high_s16(v103, v106, v106);
      v102 = vmlal_s16(v102, *(int16x4_t *)v106.i8, *(int16x4_t *)v106.i8);
      v99 += 16;
      v100 -= 16;
    }
    while (v100);
    v95 = vaddvq_s32(vaddq_s32(vaddq_s32(v102, v98), vaddq_s32(v103, v101)));
    if (v96 != v81)
    {
LABEL_386:
      do
      {
        v107 = v10[(int)v81 + (int)v96] >> 3;
        v95 += v107 * v107;
        ++v96;
      }
      while (v81 != v96);
    }
    if (v97 < 0)
      v97 = 0x7FFFFFFF;
    v108 = v95 + v97;
    if (v11 >= 0x40)
    {
      v113 = 0;
      v114 = 0;
      v109 = v81 & 0x3FFFFFFE;
      v115 = v109;
      v116 = v81 << 33;
      do
      {
        v117 = *(__int16 *)((char *)v10 + (v116 >> 31)) >> 3;
        v118 = *(__int16 *)((char *)v10 + ((v116 + 0x100000000) >> 31)) >> 3;
        v113 += v117 * v117;
        v114 += v118 * v118;
        v116 += 0x200000000;
        v115 -= 2;
      }
      while (v115);
      v110 = v114 + v113;
      if (v109 == v81)
      {
LABEL_86:
        if (v108 < 0)
          v108 = 0x7FFFFFFF;
        v122 = v110 + v108;
        if (v11 >= 0x200)
        {
          v124 = 0;
          v123 = 0;
          if (3 * (int)v81 + (int)v82 >= 3 * (int)v81 && !HIDWORD(v82))
          {
            v123 = v81 & 0x3FFFFFF0;
            v125 = (unint64_t)(3 * v81) << 32;
            v126 = 0uLL;
            v127 = v123;
            v128 = 0uLL;
            v129 = 0uLL;
            v130 = 0uLL;
            do
            {
              v131 = (int16x8_t *)((char *)v10 + (v125 >> 31));
              v132 = vshrq_n_s16(*v131, 3uLL);
              v133 = vshrq_n_s16(v131[1], 3uLL);
              v128 = vmlal_high_s16(v128, v132, v132);
              v126 = vmlal_s16(v126, *(int16x4_t *)v132.i8, *(int16x4_t *)v132.i8);
              v130 = vmlal_high_s16(v130, v133, v133);
              v129 = vmlal_s16(v129, *(int16x4_t *)v133.i8, *(int16x4_t *)v133.i8);
              v125 += 0x1000000000;
              v127 -= 16;
            }
            while (v127);
            v124 = vaddvq_s32(vaddq_s32(vaddq_s32(v129, v126), vaddq_s32(v130, v128)));
            if (v123 == v81)
            {
LABEL_97:
              v137 = 0;
              v138 = 0;
              if (v122 < 0)
                v122 = 0x7FFFFFFF;
              v78 = v122 + (v124 >> 1);
              if (v78 < 0)
                v78 = 0x7FFFFFFF;
              v415[0] = v78;
              *(_DWORD *)(v0 + 60) = v124;
              if (v11 < 0x200)
                goto LABEL_106;
              if (v82 >> 31)
                goto LABEL_106;
              v138 = v81 & 0x3FFFFFF0;
              v139 = v6 + v5;
              v140 = 0uLL;
              v141 = v138;
              v142 = 0uLL;
              v143 = 0uLL;
              v144 = 0uLL;
              do
              {
                v145 = (int16x8_t *)&v10[v139];
                v146 = vshrq_n_s16(*v145, 3uLL);
                v147 = vshrq_n_s16(v145[1], 3uLL);
                v142 = vmlal_high_s16(v142, v146, v146);
                v140 = vmlal_s16(v140, *(int16x4_t *)v146.i8, *(int16x4_t *)v146.i8);
                v144 = vmlal_high_s16(v144, v147, v147);
                v143 = vmlal_s16(v143, *(int16x4_t *)v147.i8, *(int16x4_t *)v147.i8);
                v139 += 16;
                v141 -= 16;
              }
              while (v141);
              v137 = vaddvq_s32(vaddq_s32(vaddq_s32(v143, v140), vaddq_s32(v144, v142)));
              if (v138 != v81)
              {
LABEL_106:
                v148 = v81 - v138;
                v149 = v6 + v5 + v138;
                do
                {
                  v150 = v10[v149] >> 3;
                  v137 += v150 * v150;
                  ++v149;
                  --v148;
                }
                while (v148);
              }
              v151 = v137 + *(_DWORD *)(v0 + 64);
              if (v11 >= 0x200)
              {
                v153 = 0;
                v152 = 0;
                v154 = v6 + v5 + v81;
                if (v154 + (int)v82 >= v154 && !HIDWORD(v82))
                {
                  v152 = v81 & 0x3FFFFFF0;
                  v155 = 0uLL;
                  v156 = v152;
                  v157 = 0uLL;
                  v158 = 0uLL;
                  v159 = 0uLL;
                  do
                  {
                    v160 = (int16x8_t *)&v10[v154];
                    v161 = vshrq_n_s16(*v160, 3uLL);
                    v162 = vshrq_n_s16(v160[1], 3uLL);
                    v157 = vmlal_high_s16(v157, v161, v161);
                    v155 = vmlal_s16(v155, *(int16x4_t *)v161.i8, *(int16x4_t *)v161.i8);
                    v159 = vmlal_high_s16(v159, v162, v162);
                    v158 = vmlal_s16(v158, *(int16x4_t *)v162.i8, *(int16x4_t *)v162.i8);
                    v154 += 16;
                    v156 -= 16;
                  }
                  while (v156);
                  v153 = vaddvq_s32(vaddq_s32(vaddq_s32(v158, v155), vaddq_s32(v159, v157)));
                  if (v152 == v81)
                  {
LABEL_117:
                    if (v151 < 0)
                      v151 = 0x7FFFFFFF;
                    v166 = v153 + v151;
                    if (v11 >= 0x200)
                    {
                      v168 = 0;
                      v167 = 0;
                      if (v6 + v5 + 2 * (int)v81 + (int)v82 >= v6 + v5 + 2 * (int)v81 && !HIDWORD(v82))
                      {
                        v167 = v81 & 0x3FFFFFF0;
                        v169 = v6 + v5 + 2 * v81;
                        v170 = 0uLL;
                        v171 = v167;
                        v172 = 0uLL;
                        v173 = 0uLL;
                        v174 = 0uLL;
                        do
                        {
                          v175 = (int16x8_t *)&v10[v169];
                          v176 = vshrq_n_s16(*v175, 3uLL);
                          v177 = vshrq_n_s16(v175[1], 3uLL);
                          v172 = vmlal_high_s16(v172, v176, v176);
                          v170 = vmlal_s16(v170, *(int16x4_t *)v176.i8, *(int16x4_t *)v176.i8);
                          v174 = vmlal_high_s16(v174, v177, v177);
                          v173 = vmlal_s16(v173, *(int16x4_t *)v177.i8, *(int16x4_t *)v177.i8);
                          v169 += 16;
                          v171 -= 16;
                        }
                        while (v171);
                        v168 = vaddvq_s32(vaddq_s32(vaddq_s32(v173, v170), vaddq_s32(v174, v172)));
                        if (v167 == v81)
                        {
LABEL_128:
                          if (v166 < 0)
                            v166 = 0x7FFFFFFF;
                          v181 = v168 + v166;
                          if (v11 >= 0x200)
                          {
                            v111 = 0;
                            v182 = 0;
                            if (v6 + v5 + 3 * (int)v81 + (int)v82 >= v6 + v5 + 3 * (int)v81 && !HIDWORD(v82))
                            {
                              v182 = v81 & 0x3FFFFFF0;
                              v183 = v6 + v5 + 3 * v81;
                              v184 = 0uLL;
                              v185 = v182;
                              v186 = 0uLL;
                              v187 = 0uLL;
                              v188 = 0uLL;
                              do
                              {
                                v189 = (int16x8_t *)&v10[v183];
                                v190 = vshrq_n_s16(*v189, 3uLL);
                                v191 = vshrq_n_s16(v189[1], 3uLL);
                                v186 = vmlal_high_s16(v186, v190, v190);
                                v184 = vmlal_s16(v184, *(int16x4_t *)v190.i8, *(int16x4_t *)v190.i8);
                                v188 = vmlal_high_s16(v188, v191, v191);
                                v187 = vmlal_s16(v187, *(int16x4_t *)v191.i8, *(int16x4_t *)v191.i8);
                                v183 += 16;
                                v185 -= 16;
                              }
                              while (v185);
                              v111 = vaddvq_s32(vaddq_s32(vaddq_s32(v187, v184), vaddq_s32(v188, v186)));
                              if (v182 == v81)
                              {
LABEL_139:
                                if (v181 < 0)
                                  v195 = 0x7FFFFFFF;
                                else
                                  v195 = v181;
                                v112 = v195 + (v111 >> 1);
                                goto LABEL_143;
                              }
                            }
                          }
                          else
                          {
                            v182 = 0;
                            v111 = 0;
                          }
                          v192 = v81 - v182;
                          v193 = v6 + v5 + v182 + 3 * v81;
                          do
                          {
                            v194 = v10[v193] >> 3;
                            v111 += v194 * v194;
                            ++v193;
                            --v192;
                          }
                          while (v192);
                          goto LABEL_139;
                        }
                      }
                    }
                    else
                    {
                      v167 = 0;
                      v168 = 0;
                    }
                    v178 = v81 - v167;
                    v179 = v6 + v5 + 2 * v81 + v167;
                    do
                    {
                      v180 = v10[v179] >> 3;
                      v168 += v180 * v180;
                      ++v179;
                      --v178;
                    }
                    while (v178);
                    goto LABEL_128;
                  }
                }
              }
              else
              {
                v152 = 0;
                v153 = 0;
              }
              v163 = v81 - v152;
              v164 = v6 + v5 + v81 + v152;
              do
              {
                v165 = v10[v164] >> 3;
                v153 += v165 * v165;
                ++v164;
                --v163;
              }
              while (v163);
              goto LABEL_117;
            }
          }
        }
        else
        {
          v123 = 0;
          v124 = 0;
        }
        v134 = v81 - v123;
        v135 = 0x300000000 * v81 + (v123 << 32);
        do
        {
          v136 = *(__int16 *)((char *)v10 + (v135 >> 31)) >> 3;
          v124 += v136 * v136;
          v135 += 0x100000000;
          --v134;
        }
        while (v134);
        goto LABEL_97;
      }
    }
    else
    {
      v109 = 0;
      v110 = 0;
    }
    v119 = (v81 << 33) + (v109 << 32);
    v120 = v81 - v109;
    do
    {
      v121 = *(__int16 *)((char *)v10 + (v119 >> 31)) >> 3;
      v110 += v121 * v121;
      v119 += 0x100000000;
      --v120;
    }
    while (v120);
    goto LABEL_86;
  }
  v111 = 0;
  if (v78 < 0)
    v78 = 0x7FFFFFFF;
  v415[0] = v78;
  *(_DWORD *)(v0 + 60) = 0;
  v112 = *(_DWORD *)(v0 + 64);
LABEL_143:
  if (v112 < 0)
    v112 = 0x7FFFFFFF;
  v415[1] = v112;
  *(_DWORD *)(v0 + 64) = v111;
  v196 = *(_DWORD *)(v0 + 68);
  if ((int)v11 < 16)
  {
    v200 = 0;
    goto LABEL_183;
  }
  v197 = v11 >> 4;
  if (v11 < 0x100)
  {
    v198 = 0;
    v199 = 0;
LABEL_152:
    v209 = v197 - v198;
    v210 = v5 + 2 * v6 + v198;
    do
    {
      v211 = v10[v210] >> 3;
      v199 += v211 * v211;
      ++v210;
      --v209;
    }
    while (v209);
    goto LABEL_154;
  }
  v198 = (v11 >> 4) & 0xFFFFFF0;
  v201 = (int16x8_t *)&v10[2 * v6 + 8 + v5];
  v202 = 0uLL;
  v203 = v198;
  v204 = 0uLL;
  v205 = 0uLL;
  v206 = 0uLL;
  do
  {
    v207 = vshrq_n_s16(v201[-1], 3uLL);
    v208 = vshrq_n_s16(*v201, 3uLL);
    v204 = vmlal_high_s16(v204, v207, v207);
    v202 = vmlal_s16(v202, *(int16x4_t *)v207.i8, *(int16x4_t *)v207.i8);
    v206 = vmlal_high_s16(v206, v208, v208);
    v205 = vmlal_s16(v205, *(int16x4_t *)v208.i8, *(int16x4_t *)v208.i8);
    v201 += 2;
    v203 -= 16;
  }
  while (v203);
  v199 = vaddvq_s32(vaddq_s32(vaddq_s32(v205, v202), vaddq_s32(v206, v204)));
  if (v198 != v197)
    goto LABEL_152;
LABEL_154:
  v212 = v199 + v196;
  if (v11 < 0x100)
  {
    v213 = 0;
    v214 = 0;
LABEL_159:
    v223 = v197 - v213;
    v224 = v5 + v197 + 2 * v6 + v213;
    do
    {
      v225 = v10[v224] >> 3;
      v214 += v225 * v225;
      ++v224;
      --v223;
    }
    while (v223);
    goto LABEL_161;
  }
  v213 = (v11 >> 4) & 0xFFFFFF0;
  v215 = (int16x8_t *)&v10[2 * v6 + 8 + v5 + (int)v197];
  v216 = 0uLL;
  v217 = v213;
  v218 = 0uLL;
  v219 = 0uLL;
  v220 = 0uLL;
  do
  {
    v221 = vshrq_n_s16(v215[-1], 3uLL);
    v222 = vshrq_n_s16(*v215, 3uLL);
    v218 = vmlal_high_s16(v218, v221, v221);
    v216 = vmlal_s16(v216, *(int16x4_t *)v221.i8, *(int16x4_t *)v221.i8);
    v220 = vmlal_high_s16(v220, v222, v222);
    v219 = vmlal_s16(v219, *(int16x4_t *)v222.i8, *(int16x4_t *)v222.i8);
    v215 += 2;
    v217 -= 16;
  }
  while (v217);
  v214 = vaddvq_s32(vaddq_s32(vaddq_s32(v219, v216), vaddq_s32(v220, v218)));
  if (v213 != v197)
    goto LABEL_159;
LABEL_161:
  if (v212 < 0)
    v212 = 0x7FFFFFFF;
  v226 = v214 + v212;
  if (v11 < 0x100)
  {
    v227 = 0;
    v228 = 0;
LABEL_168:
    v237 = v197 - v227;
    v238 = v5 + 2 * v6 + 2 * v197 + v227;
    do
    {
      v239 = v10[v238] >> 3;
      v228 += v239 * v239;
      ++v238;
      --v237;
    }
    while (v237);
    goto LABEL_170;
  }
  v227 = (v11 >> 4) & 0xFFFFFF0;
  v229 = (int16x8_t *)&v10[2 * v6 + 8 + 2 * (int)v197 + v5];
  v230 = 0uLL;
  v231 = v227;
  v232 = 0uLL;
  v233 = 0uLL;
  v234 = 0uLL;
  do
  {
    v235 = vshrq_n_s16(v229[-1], 3uLL);
    v236 = vshrq_n_s16(*v229, 3uLL);
    v232 = vmlal_high_s16(v232, v235, v235);
    v230 = vmlal_s16(v230, *(int16x4_t *)v235.i8, *(int16x4_t *)v235.i8);
    v234 = vmlal_high_s16(v234, v236, v236);
    v233 = vmlal_s16(v233, *(int16x4_t *)v236.i8, *(int16x4_t *)v236.i8);
    v229 += 2;
    v231 -= 16;
  }
  while (v231);
  v228 = vaddvq_s32(vaddq_s32(vaddq_s32(v233, v230), vaddq_s32(v234, v232)));
  if (v227 != v197)
    goto LABEL_168;
LABEL_170:
  if (v226 < 0)
    v226 = 0x7FFFFFFF;
  v240 = v228 + v226;
  if (v11 < 0x100)
  {
    v241 = 0;
    v200 = 0;
LABEL_177:
    v250 = v197 - v241;
    v251 = v5 + 3 * v197 + 2 * v6 + v241;
    do
    {
      v252 = v10[v251] >> 3;
      v200 += v252 * v252;
      ++v251;
      --v250;
    }
    while (v250);
    goto LABEL_179;
  }
  v241 = (v11 >> 4) & 0xFFFFFF0;
  v242 = (int16x8_t *)&v10[3 * (int)v197 + 8 + 2 * v6 + v5];
  v243 = 0uLL;
  v244 = v241;
  v245 = 0uLL;
  v246 = 0uLL;
  v247 = 0uLL;
  do
  {
    v248 = vshrq_n_s16(v242[-1], 3uLL);
    v249 = vshrq_n_s16(*v242, 3uLL);
    v245 = vmlal_high_s16(v245, v248, v248);
    v243 = vmlal_s16(v243, *(int16x4_t *)v248.i8, *(int16x4_t *)v248.i8);
    v247 = vmlal_high_s16(v247, v249, v249);
    v246 = vmlal_s16(v246, *(int16x4_t *)v249.i8, *(int16x4_t *)v249.i8);
    v242 += 2;
    v244 -= 16;
  }
  while (v244);
  v200 = vaddvq_s32(vaddq_s32(vaddq_s32(v246, v243), vaddq_s32(v247, v245)));
  if (v241 != v197)
    goto LABEL_177;
LABEL_179:
  if (v240 < 0)
    v253 = 0x7FFFFFFF;
  else
    v253 = v240;
  v196 = v253 + (v200 >> 1);
LABEL_183:
  if (v196 < 0)
    v254 = 0x7FFFFFFF;
  else
    v254 = v196;
  v415[2] = v254;
  *(_DWORD *)(v0 + 68) = v200;
  v255 = *(_DWORD *)(v0 + 72);
  if ((int)v11 >= 8)
  {
    v256 = v11 >> 3;
    v257 = 2 * v6;
    if (v11 >= 0x80)
    {
      v258 = (v11 >> 3) & 0x1FFFFFF0;
      v261 = (int16x8_t *)&v10[2 * v5 + 8 + v257];
      v262 = 0uLL;
      v263 = v258;
      v264 = 0uLL;
      v265 = 0uLL;
      v266 = 0uLL;
      do
      {
        v267 = vshrq_n_s16(v261[-1], 3uLL);
        v268 = vshrq_n_s16(*v261, 3uLL);
        v264 = vmlal_high_s16(v264, v267, v267);
        v262 = vmlal_s16(v262, *(int16x4_t *)v267.i8, *(int16x4_t *)v267.i8);
        v266 = vmlal_high_s16(v266, v268, v268);
        v265 = vmlal_s16(v265, *(int16x4_t *)v268.i8, *(int16x4_t *)v268.i8);
        v261 += 2;
        v263 -= 16;
      }
      while (v263);
      v259 = vaddvq_s32(vaddq_s32(vaddq_s32(v265, v262), vaddq_s32(v266, v264)));
      if (v258 == v256)
      {
LABEL_195:
        v272 = v259 + v255;
        v273 = 2 * v5;
        if (v11 >= 0x80)
        {
          v275 = 0;
          v274 = 0;
          if ((int)v256 + v273 + v257 + (int)v256 - 1 >= (int)v256 + v273 + v257 && !((v256 - 1) >> 32))
          {
            v274 = (v11 >> 3) & 0x1FFFFFF0;
            v276 = v256 + v257 + v273;
            v277 = 0uLL;
            v278 = v274;
            v279 = 0uLL;
            v280 = 0uLL;
            v281 = 0uLL;
            do
            {
              v282 = (int16x8_t *)&v10[v276];
              v283 = vshrq_n_s16(*v282, 3uLL);
              v284 = vshrq_n_s16(v282[1], 3uLL);
              v279 = vmlal_high_s16(v279, v283, v283);
              v277 = vmlal_s16(v277, *(int16x4_t *)v283.i8, *(int16x4_t *)v283.i8);
              v281 = vmlal_high_s16(v281, v284, v284);
              v280 = vmlal_s16(v280, *(int16x4_t *)v284.i8, *(int16x4_t *)v284.i8);
              v276 += 16;
              v278 -= 16;
            }
            while (v278);
            v275 = vaddvq_s32(vaddq_s32(vaddq_s32(v280, v277), vaddq_s32(v281, v279)));
            if (v274 == v256)
            {
LABEL_204:
              if (v272 < 0)
                v272 = 0x7FFFFFFF;
              v288 = v275 + v272;
              if (v11 >= 0x80)
              {
                v290 = 0;
                v289 = 0;
                if (2 * (v5 + v6 + (int)v256) + (int)v256 - 1 >= 2 * (v5 + v6 + (int)v256) && !((v256 - 1) >> 32))
                {
                  v289 = (v11 >> 3) & 0x1FFFFFF0;
                  v291 = v257 + 2 * v5 + 2 * v256;
                  v292 = 0uLL;
                  v293 = v289;
                  v294 = 0uLL;
                  v295 = 0uLL;
                  v296 = 0uLL;
                  do
                  {
                    v297 = (int16x8_t *)&v10[v291];
                    v298 = vshrq_n_s16(*v297, 3uLL);
                    v299 = vshrq_n_s16(v297[1], 3uLL);
                    v294 = vmlal_high_s16(v294, v298, v298);
                    v292 = vmlal_s16(v292, *(int16x4_t *)v298.i8, *(int16x4_t *)v298.i8);
                    v296 = vmlal_high_s16(v296, v299, v299);
                    v295 = vmlal_s16(v295, *(int16x4_t *)v299.i8, *(int16x4_t *)v299.i8);
                    v291 += 16;
                    v293 -= 16;
                  }
                  while (v293);
                  v290 = vaddvq_s32(vaddq_s32(vaddq_s32(v295, v292), vaddq_s32(v296, v294)));
                  if (v289 == v256)
                  {
LABEL_215:
                    if (v288 < 0)
                      v288 = 0x7FFFFFFF;
                    v303 = v290 + v288;
                    if (v11 >= 0x80)
                    {
                      v260 = 0;
                      v304 = 0;
                      if (3 * (int)v256 + v273 + v257 + (int)v256 - 1 >= 3 * (int)v256 + v273 + v257
                        && !((v256 - 1) >> 32))
                      {
                        v304 = (v11 >> 3) & 0x1FFFFFF0;
                        v305 = 3 * v256 + v257 + v273;
                        v306 = 0uLL;
                        v307 = v304;
                        v308 = 0uLL;
                        v309 = 0uLL;
                        v310 = 0uLL;
                        do
                        {
                          v311 = (int16x8_t *)&v10[v305];
                          v312 = vshrq_n_s16(*v311, 3uLL);
                          v313 = vshrq_n_s16(v311[1], 3uLL);
                          v308 = vmlal_high_s16(v308, v312, v312);
                          v306 = vmlal_s16(v306, *(int16x4_t *)v312.i8, *(int16x4_t *)v312.i8);
                          v310 = vmlal_high_s16(v310, v313, v313);
                          v309 = vmlal_s16(v309, *(int16x4_t *)v313.i8, *(int16x4_t *)v313.i8);
                          v305 += 16;
                          v307 -= 16;
                        }
                        while (v307);
                        v260 = vaddvq_s32(vaddq_s32(vaddq_s32(v309, v306), vaddq_s32(v310, v308)));
                        if (v304 == v256)
                        {
LABEL_226:
                          if (v303 < 0)
                            v317 = 0x7FFFFFFF;
                          else
                            v317 = v303;
                          v255 = v317 + (v260 >> 1);
                          goto LABEL_230;
                        }
                      }
                    }
                    else
                    {
                      v304 = 0;
                      v260 = 0;
                    }
                    v314 = v256 - v304;
                    v315 = 3 * v256 + 2 * v6 + 2 * v5 + v304;
                    do
                    {
                      v316 = v10[v315] >> 3;
                      v260 += v316 * v316;
                      ++v315;
                      --v314;
                    }
                    while (v314);
                    goto LABEL_226;
                  }
                }
              }
              else
              {
                v289 = 0;
                v290 = 0;
              }
              v300 = v256 - v289;
              v301 = v257 + 2 * v5 + 2 * v256 + v289;
              do
              {
                v302 = v10[v301] >> 3;
                v290 += v302 * v302;
                ++v301;
                --v300;
              }
              while (v300);
              goto LABEL_215;
            }
          }
        }
        else
        {
          v274 = 0;
          v275 = 0;
        }
        v285 = v256 - v274;
        v286 = v256 + 2 * v6 + 2 * v5 + v274;
        do
        {
          v287 = v10[v286] >> 3;
          v275 += v287 * v287;
          ++v286;
          --v285;
        }
        while (v285);
        goto LABEL_204;
      }
    }
    else
    {
      v258 = 0;
      v259 = 0;
    }
    v269 = v256 - v258;
    v270 = v257 + 2 * v5 + v258;
    do
    {
      v271 = v10[v270] >> 3;
      v259 += v271 * v271;
      ++v270;
      --v269;
    }
    while (v269);
    goto LABEL_195;
  }
  v260 = 0;
LABEL_230:
  if (v255 < 0)
    v318 = 0x7FFFFFFF;
  else
    v318 = v255;
  v415[3] = v318;
  *(_DWORD *)(v0 + 72) = v260;
  v319 = *(_DWORD *)(v0 + 144);
  if (v319 > 999)
  {
    v320 = 0;
  }
  else
  {
    *(_DWORD *)(v0 + 144) = v319 + 1;
    v320 = 0x7FFF / ((v319 >> 4) + 1);
  }
  v321 = *(_DWORD *)(v0 + 96);
  v322 = *(_DWORD *)(v0 + 128) + v78;
  if (v322 < 0)
    v322 = 0x7FFFFFFF;
  v323 = 0x7FFFFFFF / v322;
  if (v322 <= 8 * v321)
  {
    if (v322 >= v321)
      v324 = (v321 * (uint64_t)v323) << 16 >> 37;
    else
      LODWORD(v324) = 1024;
  }
  else
  {
    LODWORD(v324) = 128;
  }
  if ((int)v324 <= v320)
    LOWORD(v324) = v320;
  v325 = *(_DWORD *)(v0 + 112) + ((unint64_t)((__int16)v324 * (uint64_t)(v323 - *(_DWORD *)(v0 + 112))) >> 16);
  *(_DWORD *)(v0 + 112) = v325;
  v326 = 0x7FFFFFFF / v325;
  if (v326 >= 0xFFFFFF)
    v326 = 0xFFFFFF;
  *(_DWORD *)(v0 + 96) = v326;
  v327 = *(_DWORD *)(v0 + 100);
  if (*(_DWORD *)(v0 + 132) + v112 < 0)
    v328 = 0x7FFFFFFF;
  else
    v328 = *(_DWORD *)(v0 + 132) + v112;
  v329 = 0x7FFFFFFF / v328;
  if (v328 <= 8 * v327)
  {
    if (v328 >= v327)
      v330 = (v327 * (uint64_t)v329) << 16 >> 37;
    else
      LODWORD(v330) = 1024;
  }
  else
  {
    LODWORD(v330) = 128;
  }
  if ((int)v330 <= v320)
    LOWORD(v330) = v320;
  v331 = *(_DWORD *)(v0 + 116) + ((unint64_t)((__int16)v330 * (uint64_t)(v329 - *(_DWORD *)(v0 + 116))) >> 16);
  *(_DWORD *)(v0 + 116) = v331;
  v332 = 0x7FFFFFFF / v331;
  if (v332 >= 0xFFFFFF)
    v333 = 0xFFFFFF;
  else
    v333 = v332;
  *(_DWORD *)(v0 + 100) = v333;
  v334 = *(_DWORD *)(v0 + 104);
  v335 = *(_DWORD *)(v0 + 136);
  v412 = v254;
  v336 = v335 + v254;
  if (v336 < 0)
    v336 = 0x7FFFFFFF;
  v337 = 0x7FFFFFFF / v336;
  if (v336 <= 8 * v334)
  {
    if (v336 >= v334)
      v338 = (v334 * (uint64_t)v337) << 16 >> 37;
    else
      LODWORD(v338) = 1024;
  }
  else
  {
    LODWORD(v338) = 128;
  }
  if ((int)v338 <= v320)
    LOWORD(v338) = v320;
  v339 = *(_DWORD *)(v0 + 120) + ((unint64_t)((__int16)v338 * (uint64_t)(v337 - *(_DWORD *)(v0 + 120))) >> 16);
  *(_DWORD *)(v0 + 120) = v339;
  v340 = 0x7FFFFFFF / v339;
  if (v340 >= 0xFFFFFF)
    v340 = 0xFFFFFF;
  *(_DWORD *)(v0 + 104) = v340;
  v341 = *(_DWORD *)(v0 + 108);
  if (*(_DWORD *)(v0 + 140) + v318 < 0)
    v342 = 0x7FFFFFFF;
  else
    v342 = *(_DWORD *)(v0 + 140) + v318;
  v343 = 0x7FFFFFFF / v342;
  LODWORD(v344) = 128;
  if (v342 <= 8 * v341)
  {
    if (v342 >= v341)
      v344 = (v341 * (uint64_t)v343) << 16 >> 37;
    else
      LODWORD(v344) = 1024;
  }
  v345 = 0;
  v346 = 0;
  v347 = 0;
  if ((int)v344 > v320)
    LOWORD(v320) = v344;
  v348 = *(_DWORD *)(v0 + 124) + ((unint64_t)((__int16)v320 * (uint64_t)(v343 - *(_DWORD *)(v0 + 124))) >> 16);
  v349 = 0x7FFFFFFF / v348;
  if (0x7FFFFFFF / v348 >= 0xFFFFFF)
    v349 = 0xFFFFFF;
  *(_DWORD *)(v0 + 124) = v348;
  *(_DWORD *)(v0 + 108) = v349;
  do
  {
    while (1)
    {
      v352 = v415[v345];
      v353 = *(_DWORD *)(v0 + 96 + v345 * 4);
      v354 = v352 - v353;
      if ((int)(v352 - v353) >= 1)
        break;
      v414[v345++] = 256;
      if (v345 == 4)
        goto LABEL_301;
    }
    v355 = v352 << 8;
    if (v352 >= 0x800000)
    {
      v353 >>= 8;
      v355 = v415[v345];
    }
    LODWORD(v351) = v355 / (v353 + 1);
    v414[v345] = v351;
    v356 = __clz(v351);
    if (v356 != 24)
    {
      if (v351 <= 0x7F)
        LOBYTE(v351) = (_DWORD)v351 << (v356 - 24);
      else
        LOBYTE(v351) = ((_BYTE)v351 << (v356 + 8)) | (v351 >> (24 - v356));
    }
    v357 = (v351 & 0x7F) - (v356 << 7) + ((179 * (v351 & 0x7F) * (128 - (v351 & 0x7F))) >> 16) + 2944;
    LOWORD(v351) = v357;
    if (!(v354 >> 20))
    {
      v358 = __clz(v354);
      if (v358 != 24)
      {
        if (v354 <= 0x7F)
          LOBYTE(v354) = v354 << (v358 - 24);
        else
          LOBYTE(v354) = ((_BYTE)v354 << (v358 + 8)) | (v354 >> (24 - v358));
      }
      if ((v358 & 1) != 0)
        v350 = 0x8000;
      else
        v350 = 46214;
      v351 = (unint64_t)((__int16)v357
                              * (uint64_t)(int)(((v350 >> (v358 >> 1))
                                              + ((213 * (v350 >> (v358 >> 1)) * (v354 & 0x7F)) >> 16)) << 6)) >> 16;
    }
    v346 += v357 * v357;
    v347 += (unint64_t)((__int16)v351 * (uint64_t)tiltWeights[v345++]) >> 16;
  }
  while (v345 != 4);
LABEL_301:
  if (v346 >= 0)
    v359 = v346;
  else
    v359 = v346 + 3;
  if (v346 >= 4)
  {
    v361 = v359 >> 2;
    v362 = __clz(v359 >> 2);
    if (v362 != 24)
    {
      if (v361 > 0x7F)
        v361 = (v361 << (v362 + 8)) | (v361 >> (24 - v362));
      else
        v361 <<= v362 - 24;
    }
    if ((v362 & 1) != 0)
      v363 = 0x8000;
    else
      v363 = 46214;
    v364 = (unint64_t)(45000
                            * (__int16)(3
                                      * ((v363 >> (v362 >> 1)) + ((213 * (v363 >> (v362 >> 1)) * (v361 & 0x7F)) >> 16)))) >> 16;
    v360 = v364 - 128;
    if ((int)v364 > 127)
    {
      if (v360 <= 0xBF)
        LODWORD(v365) = sigm_LUT_pos_Q15[v360 >> 5] + sigm_LUT_slope_Q10[2 * (v360 >> 5)] * (v364 & 0x1F);
      else
        LODWORD(v365) = 0x7FFF;
      goto LABEL_317;
    }
    if (v360 < 0xFFFFFF41)
    {
      LODWORD(v365) = 0;
      goto LABEL_317;
    }
  }
  else
  {
    v360 = -128;
  }
  LODWORD(v365) = sigm_LUT_neg_Q15[-v360 >> 5] - sigm_LUT_slope_Q10[2 * (-v360 >> 5)] * (-v360 & 0x1F);
LABEL_317:
  if ((v347 & 0x80000000) != 0)
  {
    if (v347 >= 0xFFFFFF41)
      v366 = sigm_LUT_neg_Q15[-v347 >> 5] - sigm_LUT_slope_Q10[2 * (-v347 >> 5)] * (-v347 & 0x1F);
    else
      v366 = 0;
  }
  else if (v347 <= 0xBF)
  {
    v366 = sigm_LUT_pos_Q15[v347 >> 5] + sigm_LUT_slope_Q10[2 * (v347 >> 5)] * (v347 & 0x1F);
  }
  else
  {
    v366 = 0x7FFF;
  }
  *(_DWORD *)(v0 + 4728) = 2 * v366 - 0x8000;
  v367 = (((v112 - v333) >> 3) & 0xFFFFFFFE) + ((v78 - v326) >> 4) + 3 * ((v412 - v340) >> 4) + 4 * ((v318 - v349) >> 4);
  v368 = *(_DWORD *)(v0 + 4576);
  v369 = v367 >> ((_DWORD)v11 == 20 * v368);
  if (v369 <= 0)
  {
    LODWORD(v365) = (int)v365 >> 1;
  }
  else if (!(v369 >> 14))
  {
    v370 = v369 << 16;
    v371 = __clz(v370);
    v372 = (v370 >> (24 - v371)) & 0x7F;
    if ((v371 & 1) != 0)
      v373 = 0x8000;
    else
      v373 = 46214;
    v365 = (unint64_t)((__int16)v365
                            * (uint64_t)(int)((v373 >> (v371 >> 1))
                                           + ((213 * v372 * (v373 >> (v371 >> 1))) >> 16)
                                           + 0x8000)) >> 16;
  }
  v374 = (int)v365 >> 7;
  if ((int)v365 >> 7 >= 255)
    v374 = 255;
  *(_DWORD *)(v0 + 4532) = v374;
  v375 = ((int)v365 * (__int16)v365) >> 20 >> ((_DWORD)v11 == 10 * v368);
  v376 = *(_DWORD *)(v0 + 76) + ((unint64_t)(v375 * (v414[0] - (uint64_t)*(int *)(v0 + 76))) >> 16);
  *(_DWORD *)(v0 + 76) = v376;
  v377 = __clz(v376);
  if (v377 != 24)
  {
    v378 = v376 > 0x7F;
    v379 = (v376 << (v377 + 8)) | (v376 >> (24 - v377));
    v376 <<= v377 - 24;
    if (v378)
      LOBYTE(v376) = v379;
  }
  v380 = (v376 & 0x7F) - (v377 << 7) + ((179 * (v376 & 0x7F) * (128 - (v376 & 0x7F))) >> 16) + 3968;
  v381 = 3 * v380 - 5120;
  v382 = (int)v381 >> 4;
  if (v380 > 1706)
  {
    if (v381 <= 0xBFF)
      v383 = sigm_LUT_pos_Q15[v382 >> 5] + sigm_LUT_slope_Q10[2 * (v382 >> 5)] * ((v381 >> 4) & 0x1F);
    else
      v383 = 0x7FFF;
  }
  else if (v381 >= 0xFFFFF410)
  {
    v383 = sigm_LUT_neg_Q15[-v382 >> 5] - sigm_LUT_slope_Q10[2 * (-v382 >> 5)] * (-v382 & 0x1F);
  }
  else
  {
    v383 = 0;
  }
  *(_DWORD *)(v0 + 4712) = v383;
  v384 = *(_DWORD *)(v0 + 80) + ((unint64_t)(v375 * (v414[1] - (uint64_t)*(int *)(v0 + 80))) >> 16);
  *(_DWORD *)(v0 + 80) = v384;
  v385 = __clz(v384);
  if (v385 != 24)
  {
    if (v384 > 0x7F)
      v384 = (v384 << (v385 + 8)) | (v384 >> (24 - v385));
    else
      v384 <<= v385 - 24;
  }
  v386 = (v384 & 0x7F) - (v385 << 7) + ((179 * (v384 & 0x7F) * (128 - (v384 & 0x7F))) >> 16) + 3968;
  v387 = 3 * v386 - 5120;
  v388 = (int)v387 >> 4;
  if (v386 > 1706)
  {
    if (v387 <= 0xBFF)
      v389 = sigm_LUT_pos_Q15[v388 >> 5] + sigm_LUT_slope_Q10[2 * (v388 >> 5)] * ((v387 >> 4) & 0x1F);
    else
      v389 = 0x7FFF;
  }
  else if (v387 >= 0xFFFFF410)
  {
    v389 = sigm_LUT_neg_Q15[-v388 >> 5] - sigm_LUT_slope_Q10[2 * (-v388 >> 5)] * (-v388 & 0x1F);
  }
  else
  {
    v389 = 0;
  }
  *(_DWORD *)(v0 + 4716) = v389;
  v390 = *(_DWORD *)(v0 + 84) + ((unint64_t)(v375 * (v414[2] - (uint64_t)*(int *)(v0 + 84))) >> 16);
  *(_DWORD *)(v0 + 84) = v390;
  v391 = __clz(v390);
  if (v391 != 24)
  {
    if (v390 > 0x7F)
      v390 = (v390 << (v391 + 8)) | (v390 >> (24 - v391));
    else
      v390 <<= v391 - 24;
  }
  v392 = (v390 & 0x7F) - (v391 << 7) + ((179 * (v390 & 0x7F) * (128 - (v390 & 0x7F))) >> 16) + 3968;
  v393 = 3 * v392 - 5120;
  v394 = (int)v393 >> 4;
  if (v392 > 1706)
  {
    if (v393 <= 0xBFF)
      v395 = sigm_LUT_pos_Q15[v394 >> 5] + sigm_LUT_slope_Q10[2 * (v394 >> 5)] * ((v393 >> 4) & 0x1F);
    else
      v395 = 0x7FFF;
  }
  else if (v393 >= 0xFFFFF410)
  {
    v395 = sigm_LUT_neg_Q15[-v394 >> 5] - sigm_LUT_slope_Q10[2 * (-v394 >> 5)] * (-v394 & 0x1F);
  }
  else
  {
    v395 = 0;
  }
  *(_DWORD *)(v0 + 4720) = v395;
  v396 = *(_DWORD *)(v0 + 88) + ((unint64_t)(v375 * (v414[3] - (uint64_t)*(int *)(v0 + 88))) >> 16);
  *(_DWORD *)(v0 + 88) = v396;
  v397 = __clz(v396);
  if (v397 != 24)
  {
    if (v396 > 0x7F)
      v396 = (v396 << (v397 + 8)) | (v396 >> (24 - v397));
    else
      v396 <<= v397 - 24;
  }
  v398 = (v396 & 0x7F) - (v397 << 7) + ((179 * (v396 & 0x7F) * (128 - (v396 & 0x7F))) >> 16) + 3968;
  v399 = 3 * v398 - 5120;
  v400 = (int)v399 >> 4;
  if (v398 > 1706)
  {
    if (v399 <= 0xBFF)
      v401 = sigm_LUT_pos_Q15[v400 >> 5] + sigm_LUT_slope_Q10[2 * (v400 >> 5)] * ((v399 >> 4) & 0x1F);
    else
      v401 = 0x7FFF;
  }
  else if (v399 >= 0xFFFFF410)
  {
    v401 = sigm_LUT_neg_Q15[-v400 >> 5] - sigm_LUT_slope_Q10[2 * (-v400 >> 5)] * (-v400 & 0x1F);
  }
  else
  {
    v401 = 0;
  }
  *(_DWORD *)(v0 + 4724) = v401;
  return 0;
}

void exp_rotation(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  float v10;
  float v11;
  double v12;
  long double v13;
  int v14;
  int v15;
  int v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  float v46;
  int v47;
  float *v48;
  float *v49;
  float v50;
  float *v51;
  float v52;
  int v53;
  int v54;
  float v55;
  BOOL v56;
  uint64_t v57;
  float *v58;
  uint64_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  int v63;
  int v64;
  float v65;
  float v66;
  float *v67;
  BOOL v68;
  int v69;
  int v70;
  float v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float *v86;
  int8x16_t v87;
  float32x4_t v88;
  float *v89;
  int8x16_t v90;
  float32x4_t v91;
  int8x16_t v92;
  int8x16_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float32x4_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  BOOL v111;
  uint64_t v112;
  float *v113;
  uint64_t v114;
  float32x4_t *v115;
  float32x4_t v116;
  float32x4_t v117;
  int v118;
  int v119;
  float v120;
  float v121;
  float *v122;
  BOOL v123;
  int v124;
  int v125;
  float v126;
  float v127;
  float *v128;
  float v129;
  int v130;
  float *v131;
  float *v132;
  float v133;
  float *v134;
  float v135;
  int v136;
  int v137;
  float v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  float *v147;
  int8x16_t v148;
  float32x4_t v149;
  float *v150;
  int8x16_t v151;
  float32x4_t v152;
  int8x16_t v153;
  int8x16_t v154;
  uint64_t v155;
  float *v156;
  float v157;
  int v158;
  float *v159;
  float *v160;
  float v161;
  float *v162;
  float v163;
  int v164;
  int v165;
  float v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  float *v170;
  float v171;
  int v172;
  int v173;
  float v174;
  uint64_t v175;
  float *v176;
  float v177;
  int v178;
  float *v179;
  float v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;

  if (a2 <= 2 * a5 || !a6)
    return;
  v10 = (float)a2 / (float)(a2 + exp_rotation_SPREAD_FACTOR[a6 - 1] * a5);
  v11 = (float)(v10 * v10) * 0.5;
  v12 = cos((float)(v11 * 1.5708));
  v13 = cos((float)((float)(1.0 - v11) * 1.5708));
  if (a2 >= 8 * a4)
  {
    v14 = 0;
    v15 = a4;
    do
    {
      v16 = (a4 >> 2) + v15 * (v14 + 2);
      ++v14;
      v15 += a4;
    }
    while (v16 < a2);
  }
  else
  {
    v14 = 0;
  }
  if (a4 < 1)
    return;
  v17 = v12;
  *(float *)&v13 = v13;
  v18 = a2 / a4;
  v19 = -*(float *)&v13;
  v20 = (v18 - 3);
  v21 = -v17;
  v22 = v18 - v14;
  v23 = v14;
  v24 = 2 * v14;
  v25 = (v18 + ~(2 * v14));
  if (a3 < 0)
  {
    v94 = 0;
    v95 = 4 * (v14 + v25);
    v96 = 4 * (int)v18;
    v97 = 4 * v25 + 4;
    v98 = a4;
    v99 = (v18 - v24);
    v100 = (v18 + ~v14);
    v101 = v100 + 1;
    v102 = 4 * v100 + 4;
    v103 = (v100 + 1) & 0x1FFFFFFFCLL;
    v184 = 4 * v103;
    v104 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v13, 0);
    v105 = a1 + 4 * v14;
    v106 = a1 + v102 + 4 * v14;
    v107 = a1 + v102;
    v108 = a1 + v97 + 4 * v14;
    v182 = a1 + v97;
    v181 = v108;
    while (1)
    {
      v109 = v94 * (int)v18;
      if (!v14)
        goto LABEL_76;
      v110 = a1 + 4 * v109;
      if (v22 >= 1)
      {
        if (v100 < 7
          || (v105 + v96 * v94 < (unint64_t)(v107 + v96 * v94) ? (v111 = v110 >= v106 + v96 * v94) : (v111 = 1),
              !v111))
        {
          v118 = 0;
          v113 = (float *)(a1 + 4 * v109);
LABEL_64:
          v119 = v22 - v118;
          do
          {
            v120 = *v113;
            v121 = v113[v14];
            v113[v14] = (float)(*v113 * v17) + (float)(*(float *)&v13 * v121);
            *v113++ = (float)(v121 * v21) + (float)(*(float *)&v13 * v120);
            --v119;
          }
          while (v119);
          goto LABEL_66;
        }
        v112 = 0;
        v113 = (float *)(v110 + v184);
        v114 = v103;
        do
        {
          v115 = (float32x4_t *)(v110 + 4 * v112);
          v116 = *v115;
          v117 = *(float32x4_t *)((char *)v115 + 4 * v14);
          *(float32x4_t *)((char *)v115 + 4 * v14) = vmlaq_f32(vmulq_n_f32(*v115, v17), v117, v104);
          *v115 = vmlaq_f32(vmulq_n_f32(v117, v21), v116, v104);
          v112 += 4;
          v114 -= 4;
        }
        while (v114);
        v118 = v103;
        if (v101 != v103)
          goto LABEL_64;
      }
LABEL_66:
      if ((v25 & 0x80000000) == 0)
      {
        v122 = (float *)(v110 + 4 * v25);
        if (v99 < 0x10
          || (a1 + v95 + v96 * v94 - 4 * (unint64_t)v25 <= a1 + v95 + v96 * v94
            ? (v123 = &v122[-v25] > v122)
            : (v123 = 1),
              v123))
        {
          v124 = v18 + ~(2 * v14);
        }
        else if (v105 + v96 * v94 >= (unint64_t)(v182 + v96 * v94)
               || (v124 = v18 + ~(2 * v14), v110 >= v108 + v96 * v94))
        {
          v139 = v103;
          v140 = v105;
          v141 = v107;
          v142 = v106;
          v143 = v95;
          v144 = v101;
          v145 = 0;
          v146 = v99 & 0xFFFFFFFC;
          do
          {
            v147 = &v122[-v145];
            v148 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v147 - 3));
            v149 = (float32x4_t)vextq_s8(v148, v148, 8uLL);
            v150 = &v147[v14];
            v151 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v150 - 3));
            v152 = (float32x4_t)vextq_s8(v151, v151, 8uLL);
            v153 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_f32(vmulq_n_f32(v149, v17), v152, v104));
            *(int8x16_t *)(v150 - 3) = vextq_s8(v153, v153, 8uLL);
            v154 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_f32(vmulq_n_f32(v152, v21), v149, v104));
            *(int8x16_t *)(v147 - 3) = vextq_s8(v154, v154, 8uLL);
            v145 += 4;
            v146 -= 4;
          }
          while (v146);
          v124 = v25 - (v99 & 0xFFFFFFFC);
          v122 -= v99 & 0xFFFFFFFC;
          v101 = v144;
          v95 = v143;
          v106 = v142;
          v107 = v141;
          v105 = v140;
          v103 = v139;
          v108 = v181;
          if ((v99 & 0xFFFFFFFC) == v99)
            goto LABEL_76;
        }
        v125 = v124 + 1;
        do
        {
          v126 = *v122;
          v127 = v122[v14];
          v122[v14] = (float)(*v122 * v17) + (float)(*(float *)&v13 * v127);
          *v122-- = (float)(v127 * v21) + (float)(*(float *)&v13 * v126);
          --v125;
        }
        while (v125);
      }
LABEL_76:
      v128 = (float *)(a1 + 4 * v109);
      if ((int)v18 >= 2)
      {
        v129 = *v128;
        v130 = v18 - 1;
        v131 = (float *)(a1 + 4 * v109);
        v132 = v131;
        do
        {
          v133 = v132[1];
          *++v132 = (float)(v129 * *(float *)&v13) + (float)(v17 * v133);
          *v131 = (float)(v133 * v19) + (float)(v17 * v129);
          v129 = (float)(v129 * *(float *)&v13) + (float)(v17 * v133);
          v131 = v132;
          --v130;
        }
        while (v130);
      }
      if ((v20 & 0x80000000) == 0)
      {
        v134 = &v128[v20];
        v135 = *(float *)(a1 + 4 * v20 + 4 + v96 * v94);
        v136 = v18 - 3;
        do
        {
          v137 = v136;
          v138 = (float)(*v134 * *(float *)&v13) + (float)(v17 * v135);
          v135 = (float)(v135 * v19) + (float)(v17 * *v134);
          *v134 = v135;
          v134[1] = v138;
          --v134;
          --v136;
        }
        while (v137);
      }
      if (++v94 == v98)
        return;
    }
  }
  if (v14)
  {
    v26 = 0;
    v27 = 4 * (v14 + v25);
    v28 = 4 * (int)v18;
    v29 = 4 * v25 + 4;
    v30 = a4;
    v31 = (v18 - v24);
    v32 = (v18 + ~v14);
    v33 = 4 * v20 + 4;
    v34 = v32 + 1;
    v35 = 4 * v32 + 4;
    v36 = (v32 + 1) & 0x1FFFFFFFCLL;
    v37 = 4 * v36;
    v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v13, 0);
    v39 = (v18 - 1);
    v40 = a1 + 4 * v23;
    v41 = a1 + v35 + 4 * v23;
    v42 = a1 + v35;
    v183 = a1 + v29 + 4 * v23;
    v43 = a1 + v29;
    v44 = 0x3FFFFFFFFFFFFFFFLL * v25;
    while (1)
    {
      v45 = (float *)(a1 + 4 * v26 * (int)v18);
      if ((int)v18 >= 2)
      {
        v46 = *v45;
        v47 = v39;
        v48 = (float *)(a1 + 4 * v26 * (int)v18);
        v49 = v48;
        do
        {
          v50 = v49[1];
          *++v49 = (float)(v46 * v19) + (float)(v17 * v50);
          *v48 = (float)(v50 * *(float *)&v13) + (float)(v17 * v46);
          v46 = (float)(v46 * v19) + (float)(v17 * v50);
          v48 = v49;
          --v47;
        }
        while (v47);
      }
      if ((v20 & 0x80000000) == 0)
      {
        v51 = &v45[v20];
        v52 = *(float *)(a1 + v33 + v28 * v26);
        v53 = v18 - 3;
        do
        {
          v54 = v53;
          v55 = (float)(*v51 * v19) + (float)(v17 * v52);
          v52 = (float)(v52 * *(float *)&v13) + (float)(v17 * *v51);
          *v51 = v52;
          v51[1] = v55;
          --v51;
          --v53;
        }
        while (v54);
      }
      if (v22 >= 1)
      {
        if (v32 < 7
          || (v40 + v28 * v26 < (unint64_t)(v42 + v28 * v26)
            ? (v56 = (unint64_t)v45 >= v41 + v28 * v26)
            : (v56 = 1),
              !v56))
        {
          v63 = 0;
          v58 = (float *)(a1 + 4 * v26 * (int)v18);
LABEL_30:
          v64 = v22 - v63;
          do
          {
            v65 = *v58;
            v66 = v58[v23];
            v58[v23] = (float)(*v58 * v21) + (float)(*(float *)&v13 * v66);
            *v58++ = (float)(v66 * v17) + (float)(*(float *)&v13 * v65);
            --v64;
          }
          while (v64);
          goto LABEL_32;
        }
        v57 = 0;
        v58 = (float *)((char *)v45 + v37);
        v59 = v36;
        do
        {
          v60 = (float32x4_t *)&v45[v57];
          v61 = *v60;
          v62 = *(float32x4_t *)((char *)v60 + 4 * v23);
          *(float32x4_t *)((char *)v60 + 4 * v23) = vmlaq_f32(vmulq_n_f32(*v60, v21), v62, v38);
          *v60 = vmlaq_f32(vmulq_n_f32(v62, v17), v61, v38);
          v57 += 4;
          v59 -= 4;
        }
        while (v59);
        v63 = v36;
        if (v34 != v36)
          goto LABEL_30;
      }
LABEL_32:
      if ((v25 & 0x80000000) == 0)
      {
        v67 = &v45[v25];
        if (v31 < 0x10
          || (a1 + v27 + v28 * v26 + v44 * 4 <= (unint64_t)(a1 + v27 + v28 * v26)
            ? (v68 = &v67[v44] > v67)
            : (v68 = 1),
              v68))
        {
          v69 = v25;
        }
        else if (v40 + v28 * v26 >= (unint64_t)(v43 + v28 * v26)
               || (v69 = v25, (unint64_t)v45 >= v183 + v28 * v26))
        {
          v73 = v32;
          v74 = v33;
          v75 = v39;
          v76 = v36;
          v77 = v40;
          v78 = v42;
          v79 = v41;
          v80 = v27;
          v81 = v43;
          v82 = v34;
          v83 = v37;
          v84 = 0;
          v85 = v31 & 0xFFFFFFFC;
          do
          {
            v86 = &v67[-v84];
            v87 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v86 - 3));
            v88 = (float32x4_t)vextq_s8(v87, v87, 8uLL);
            v89 = &v86[v23];
            v90 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v89 - 3));
            v91 = (float32x4_t)vextq_s8(v90, v90, 8uLL);
            v92 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_f32(vmulq_n_f32(v88, v21), v91, v38));
            *(int8x16_t *)(v89 - 3) = vextq_s8(v92, v92, 8uLL);
            v93 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_f32(vmulq_n_f32(v91, v17), v88, v38));
            *(int8x16_t *)(v86 - 3) = vextq_s8(v93, v93, 8uLL);
            v84 += 4;
            v85 -= 4;
          }
          while (v85);
          v69 = v25 - (v31 & 0xFFFFFFFC);
          v67 -= v31 & 0xFFFFFFFC;
          v37 = v83;
          v34 = v82;
          v43 = v81;
          v27 = v80;
          v41 = v79;
          v42 = v78;
          v40 = v77;
          v36 = v76;
          v39 = v75;
          v33 = v74;
          v32 = v73;
          v44 = 0x3FFFFFFFFFFFFFFFLL * v25;
          if ((v31 & 0xFFFFFFFC) == v31)
            goto LABEL_11;
        }
        v70 = v69 + 1;
        do
        {
          v71 = *v67;
          v72 = v67[v23];
          v67[v23] = (float)(*v67 * v21) + (float)(*(float *)&v13 * v72);
          *v67-- = (float)(v72 * v17) + (float)(*(float *)&v13 * v71);
          --v70;
        }
        while (v70);
      }
LABEL_11:
      if (++v26 == v30)
        return;
    }
  }
  if ((int)v18 < 2)
  {
    if ((v20 & 0x80000000) == 0)
    {
      v167 = 0;
      v168 = (int)v18;
      v169 = 4 * (int)v18;
      do
      {
        v170 = (float *)(a1 + 4 * v20 + 4 * v167 * v168);
        v171 = *(float *)(a1 + 4 * v20 + 4 + v169 * v167);
        v172 = v20;
        do
        {
          v173 = v172;
          v174 = (float)(*v170 * v19) + (float)(v17 * v171);
          v171 = (float)(v171 * *(float *)&v13) + (float)(v17 * *v170);
          *v170 = v171;
          v170[1] = v174;
          --v170;
          --v172;
        }
        while (v173);
        ++v167;
      }
      while (v167 != a4);
    }
  }
  else if ((v20 & 0x80000000) != 0)
  {
    v175 = 0;
    do
    {
      v176 = (float *)(a1 + 4 * v175 * v18);
      v177 = *v176;
      v178 = v18 - 1;
      v179 = v176;
      do
      {
        v180 = v179[1];
        *++v179 = (float)(v177 * v19) + (float)(v17 * v180);
        *v176 = (float)(v180 * *(float *)&v13) + (float)(v17 * v177);
        v177 = (float)(v177 * v19) + (float)(v17 * v180);
        v176 = v179;
        --v178;
      }
      while (v178);
      ++v175;
    }
    while (v175 != a4);
  }
  else
  {
    v155 = 0;
    do
    {
      v156 = (float *)(a1 + 4 * v155 * v18);
      v157 = *v156;
      v158 = v18 - 1;
      v159 = v156;
      v160 = v156;
      do
      {
        v161 = v160[1];
        *++v160 = (float)(v157 * v19) + (float)(v17 * v161);
        *v159 = (float)(v161 * *(float *)&v13) + (float)(v17 * v157);
        v157 = (float)(v157 * v19) + (float)(v17 * v161);
        v159 = v160;
        --v158;
      }
      while (v158);
      v162 = &v156[v20];
      v163 = *(float *)(a1 + 4 * v20 + 4 + 4 * v18 * v155);
      v164 = v18 - 3;
      do
      {
        v165 = v164;
        v166 = (float)(*v162 * v19) + (float)(v17 * v163);
        v163 = (float)(v163 * *(float *)&v13) + (float)(v17 * *v162);
        *v162 = v163;
        v162[1] = v166;
        --v162;
        --v164;
      }
      while (v165);
      ++v155;
    }
    while (v155 != a4);
  }
}

void op_pvq_search_c(float32x4_t *a1, _DWORD *a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int8x16_t *v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  int8x16_t *v18;
  _OWORD *v19;
  int8x16_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  char *v28;
  float *v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float v39;
  int v41;
  float v42;
  uint64_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t *v46;
  int32x4_t *v47;
  float32x4_t *v48;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  unsigned int *v63;
  float *v64;
  float v65;
  unsigned int v66;
  float v67;
  int v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  int v73;
  float v74;
  float v75;
  float v76;
  uint64_t i;
  uint64_t v78;
  int8x16_t *v79;
  int32x4_t *v80;
  uint64_t v81;
  int32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _DWORD *v86;
  int v87;
  _QWORD v88[2];

  v88[1] = *MEMORY[0x24BDAC8D0];
  v8 = MEMORY[0x24BDAC7A8](a1, a2);
  v10 = (float *)((char *)v88 - ((v9 + 15) & 0x7FFFFFFF0));
  MEMORY[0x24BDAC7A8](v8, v11);
  v14 = (int8x16_t *)((char *)v88 - v13);
  if (v12 <= 1)
    v15 = 1;
  else
    v15 = v12;
  bzero(v10, 4 * v15);
  if (v15 < 8)
  {
    v16 = 0;
LABEL_9:
    v25 = v15 - v16;
    v26 = v16;
    v27 = &a2[v16];
    v28 = &v14->i8[v26 * 4];
    v29 = &a1->f32[v26];
    do
    {
      v30 = *v29;
      *(_DWORD *)v28 = *v29 < 0.0;
      v28 += 4;
      *v29++ = fabsf(v30);
      *v27++ = 0;
      --v25;
    }
    while (v25);
    goto LABEL_11;
  }
  v16 = v15 & 0x7FFFFFF8;
  v17 = a1 + 1;
  v18 = v14 + 1;
  v19 = a2 + 4;
  v20.i64[0] = 0x100000001;
  v20.i64[1] = 0x100000001;
  v21 = v16;
  do
  {
    v22 = v17[-1];
    v23 = *v17;
    v24 = vandq_s8((int8x16_t)vcltzq_f32(*v17), v20);
    v18[-1] = vandq_s8((int8x16_t)vcltzq_f32(v22), v20);
    *v18 = v24;
    v17[-1] = vabsq_f32(v22);
    *v17 = vabsq_f32(v23);
    *(v19 - 1) = 0uLL;
    *v19 = 0uLL;
    v17 += 2;
    v18 += 2;
    v19 += 2;
    v21 -= 8;
  }
  while (v21);
  if (v16 != v15)
    goto LABEL_9;
LABEL_11:
  v31 = 0.0;
  if (a3 <= a4 >> 1)
  {
    v34 = 0.0;
    goto LABEL_35;
  }
  if (v15 >= 2)
  {
    v32 = v15 & 0x7FFFFFFE;
    v35 = &a1->f32[1];
    v33 = 0.0;
    v36 = v32;
    do
    {
      v33 = (float)(v33 + *(v35 - 1)) + *v35;
      v35 += 2;
      v36 -= 2;
    }
    while (v36);
    if (v32 == v15)
      goto LABEL_20;
  }
  else
  {
    v32 = 0;
    v33 = 0.0;
  }
  v37 = v15 - v32;
  v38 = &a1->f32[v32];
  do
  {
    v39 = *v38++;
    v33 = v33 + v39;
    --v37;
  }
  while (v37);
LABEL_20:
  if (v33 <= 1.0e-15 || v33 >= 64.0)
  {
    a1->i32[0] = 1065353216;
    if (a4 <= 2)
      v41 = 2;
    else
      v41 = a4;
    bzero(&a1->i32[1], 4 * (v41 - 1));
    v33 = 1.0;
  }
  v42 = (float)((float)a3 + 0.8) * (float)(1.0 / v33);
  if (v15 < 8)
  {
    v43 = 0;
    v31 = 0.0;
    v34 = 0.0;
LABEL_33:
    v60 = v15 - v43;
    v61 = v43;
    v62 = &v10[v43];
    v63 = &a2[v61];
    v64 = &a1->f32[v61];
    do
    {
      v65 = *v64++;
      v66 = vcvtms_s32_f32(v42 * v65);
      *v63++ = v66;
      v67 = (float)(int)floorf(v42 * v65);
      v34 = v34 + (float)(v67 * v67);
      v31 = v31 + (float)(v65 * v67);
      *v62++ = v67 + v67;
      a3 -= v66;
      --v60;
    }
    while (v60);
    goto LABEL_35;
  }
  v43 = v15 & 0x7FFFFFF8;
  v44 = 0uLL;
  v45 = (int32x4_t)a3;
  v46 = a1 + 1;
  v47 = (int32x4_t *)(a2 + 4);
  v48 = (float32x4_t *)(v10 + 4);
  v31 = 0.0;
  v49 = v43;
  v34 = 0.0;
  do
  {
    v50 = v46[-1];
    v51 = *v46;
    v52 = vcvtq_s32_f32(vrndmq_f32(vmulq_n_f32(v50, v42)));
    v53 = vcvtq_s32_f32(vrndmq_f32(vmulq_n_f32(*v46, v42)));
    v47[-1] = v52;
    *v47 = v53;
    v54 = vcvtq_f32_s32(v52);
    v55 = vcvtq_f32_s32(v53);
    v56 = vmulq_f32(v54, v54);
    v57 = vmulq_f32(v55, v55);
    v58 = vmulq_f32(v50, v54);
    v59 = vmulq_f32(v51, v55);
    v48[-1] = vaddq_f32(v54, v54);
    *v48 = vaddq_f32(v55, v55);
    v45 = vsubq_s32(v45, v52);
    v44 = vsubq_s32(v44, v53);
    v31 = (float)((float)((float)((float)((float)((float)((float)(v31 + v58.f32[0]) + v58.f32[1]) + v58.f32[2])
                                        + v58.f32[3])
                                + v59.f32[0])
                        + v59.f32[1])
                + v59.f32[2])
        + v59.f32[3];
    v34 = (float)((float)((float)((float)((float)((float)((float)(v34 + v56.f32[0]) + v56.f32[1]) + v56.f32[2])
                                        + v56.f32[3])
                                + v57.f32[0])
                        + v57.f32[1])
                + v57.f32[2])
        + v57.f32[3];
    v46 += 2;
    v47 += 2;
    v48 += 2;
    v49 -= 8;
  }
  while (v49);
  a3 = vaddvq_s32(vaddq_s32(v44, v45));
  if (v43 != v15)
    goto LABEL_33;
LABEL_35:
  if (a3 <= a4 + 3)
  {
    if (a3 >= 1)
    {
      v68 = 0;
      v69 = a1->f32[0];
      if (a4 <= 2)
        v70 = 2;
      else
        v70 = a4;
      do
      {
        v73 = 0;
        v74 = v34 + 1.0;
        v75 = v74 + *v10;
        v76 = (float)(v69 + v31) * (float)(v69 + v31);
        for (i = 1; i != v70; ++i)
        {
          while ((float)(v75 * (float)((float)(v31 + a1->f32[i]) * (float)(v31 + a1->f32[i]))) <= (float)(v76 * (float)(v74 + v10[i])))
          {
            if (v70 == ++i)
              goto LABEL_41;
          }
          v73 = i;
          v76 = (float)(v31 + a1->f32[i]) * (float)(v31 + a1->f32[i]);
          v75 = v74 + v10[i];
        }
LABEL_41:
        v71 = v73;
        v72 = v10[v71];
        v31 = v31 + a1->f32[v71];
        v10[v71] = v72 + 2.0;
        v34 = v74 + v72;
        ++a2[v71];
        ++v68;
      }
      while (v68 != a3);
    }
  }
  else
  {
    *a2 += a3;
  }
  if (v15 < 8)
  {
    v78 = 0;
LABEL_53:
    v83 = v15 - v78;
    v84 = v78;
    v85 = &v14->i8[4 * v78];
    v86 = &a2[v84];
    do
    {
      v87 = *(_DWORD *)v85;
      v85 += 4;
      *v86 = (*v86 ^ -v87) + v87;
      ++v86;
      --v83;
    }
    while (v83);
    return;
  }
  v78 = v15 & 0x7FFFFFF8;
  v79 = (int8x16_t *)(a2 + 4);
  v80 = (int32x4_t *)&v14[1];
  v81 = v78;
  do
  {
    v82 = vaddq_s32((int32x4_t)veorq_s8(*v79, (int8x16_t)vnegq_s32(*v80)), *v80);
    v79[-1] = (int8x16_t)vaddq_s32((int32x4_t)veorq_s8(v79[-1], (int8x16_t)vnegq_s32(v80[-1])), v80[-1]);
    *v79 = (int8x16_t)v82;
    v79 += 2;
    v80 += 2;
    v81 -= 8;
  }
  while (v81);
  if (v78 != v15)
    goto LABEL_53;
}

uint64_t alg_quant(float32x4_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, int a7, float a8)
{
  int v14;
  uint64_t v16;
  uint64_t v17;
  int32x4_t *v18;
  int v19;
  int v20;
  float v21;
  float v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  int32x4_t *v46;
  float32x4_t *v47;
  uint64_t v48;
  float32x4_t v49;
  uint64_t v50;
  uint64_t v51;
  float *v52;
  int *v53;
  int v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int32 v61;
  uint64_t v62;
  int8x16_t v63;
  uint64_t v64;
  int8x16_t v65;
  int8x16_t *v66;
  int8x16_t v67;
  uint64_t v68;
  _QWORD v69[2];

  v14 = a2;
  v69[1] = *MEMORY[0x24BDAC8D0];
  v16 = MEMORY[0x24BDAC7A8](a1, a2);
  v18 = (int32x4_t *)((char *)v69 - v17);
  exp_rotation(v16, v19, 1, v20, a3, a4);
  op_pvq_search_c(a1, v18, a3, v14);
  v22 = v21;
  v23 = v18->i32[v14 - 1];
  v24 = v23 >> 31;
  if (v23 >= 0)
    v25 = v18->i32[v14 - 1];
  else
    v25 = -v23;
  v26 = v14;
  v27 = 2;
  do
  {
    if ((int)v27 >= v25)
      v28 = v25;
    else
      v28 = v27;
    v29 = *((_QWORD *)&X509_CERT_AUX_it.sname + v28);
    if ((int)v27 <= v25)
      v30 = v25;
    else
      v30 = v27;
    v24 += *(_DWORD *)(v29 + 4 * v30);
    v31 = v18[-1].i32[v26 + 2];
    if (v31 >= 0)
      v32 = v18[-1].i32[v26 + 2];
    else
      v32 = -v31;
    v25 += v32;
    if (v31 < 0)
    {
      if (v27 > v25)
        v33 = v25 + 1;
      else
        v33 = v27;
      v34 = *((_QWORD *)&X509_CERT_AUX_it.sname + v33);
      if ((int)v27 <= v25 + 1)
        v35 = v25 + 1;
      else
        v35 = v27;
      v24 += *(_DWORD *)(v34 + 4 * v35);
    }
    --v26;
    ++v27;
  }
  while (v26 > 1);
  if (v14 >= a3)
    v36 = a3;
  else
    v36 = v14;
  v37 = *((_QWORD *)&X509_CERT_AUX_it.sname + v36);
  if (v14 <= a3)
    v38 = a3;
  else
    v38 = v14;
  v39 = *(_DWORD *)(v37 + 4 * v38);
  if (a3 + 1 < v14)
    v40 = a3 + 1;
  else
    v40 = v14;
  v41 = *((_QWORD *)&X509_CERT_AUX_it.sname + v40);
  if (a3 + 1 > v14)
    v42 = a3 + 1;
  else
    v42 = v14;
  ec_enc_uint(a6, v24, *(_DWORD *)(v41 + 4 * v42) + v39);
  if (a7)
  {
    v43 = (float)(1.0 / sqrtf(v22)) * a8;
    if (v14 <= 1)
      v44 = 1;
    else
      v44 = v14;
    if (v44 >= 8)
    {
      v45 = v44 & 0x7FFFFFF8;
      v46 = v18 + 1;
      v47 = a1 + 1;
      v48 = v45;
      do
      {
        v49 = vmulq_n_f32(vcvtq_f32_s32(*v46), v43);
        v47[-1] = vmulq_n_f32(vcvtq_f32_s32(v46[-1]), v43);
        *v47 = v49;
        v46 += 2;
        v47 += 2;
        v48 -= 8;
      }
      while (v48);
      if (v45 == v44)
        goto LABEL_46;
    }
    else
    {
      v45 = 0;
    }
    v50 = v44 - v45;
    v51 = v45;
    v52 = &a1->f32[v45];
    v53 = &v18->i32[v51];
    do
    {
      v54 = *v53++;
      *v52++ = v43 * (float)v54;
      --v50;
    }
    while (v50);
LABEL_46:
    exp_rotation((uint64_t)a1, v14, -1, a5, a3, a4);
  }
  if (a5 >= 2)
  {
    v56 = 0;
    LODWORD(result) = 0;
    v57 = v14 / a5;
    if ((int)v57 <= 1)
      v58 = 1;
    else
      v58 = v57;
    while (1)
    {
      v59 = v56 * v57;
      if (v58 >= 8)
      {
        v62 = 0;
        v63 = 0uLL;
        v64 = v58 & 0x7FFFFFF8;
        v65 = 0uLL;
        do
        {
          v66 = (int8x16_t *)((char *)&v18[v62] + 4 * v59);
          v63 = vorrq_s8(*v66, v63);
          v65 = vorrq_s8(v66[1], v65);
          v62 += 2;
          v64 -= 8;
        }
        while (v64);
        v67 = vorrq_s8(v65, v63);
        *(int8x8_t *)v67.i8 = vorr_s8(*(int8x8_t *)v67.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL));
        v61 = v67.i32[0] | v67.i32[1];
        v60 = v58 & 0x7FFFFFF8;
        if (v60 == v58)
          goto LABEL_53;
      }
      else
      {
        v60 = 0;
        v61 = 0;
      }
      v68 = v58 - v60;
      do
      {
        v61 |= v18->u32[v60 + v59];
        ++v60;
        --v68;
      }
      while (v68);
LABEL_53:
      result = ((v61 != 0) << v56++) | result;
      if (v56 == a5)
        return result;
    }
  }
  return 1;
}

uint64_t alg_unquant(uint64_t a1, uint64_t a2, int a3, int a4, int a5, float a6)
{
  int v10;
  uint64_t v12;
  int32x4_t *v13;
  int v14;
  int v15;
  uint64_t *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int32x4_t *v20;
  float32x4_t *v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  int *v27;
  int v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int32 v35;
  uint64_t v36;
  int8x16_t v37;
  uint64_t v38;
  int8x16_t v39;
  int8x16_t *v40;
  int8x16_t v41;
  uint64_t v42;
  _QWORD v43[2];

  v10 = a2;
  v43[1] = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8](a1, a2);
  v13 = (int32x4_t *)((char *)v43 - v12);
  v17 = (float)(1.0 / sqrtf(decode_pulses((_QWORD *)((char *)v43 - v12), v14, v15, v16))) * a6;
  if (v10 <= 1)
    v18 = 1;
  else
    v18 = v10;
  if (v18 < 8)
  {
    v19 = 0;
LABEL_9:
    v24 = v18 - v19;
    v25 = v19;
    v26 = (float *)(a1 + 4 * v19);
    v27 = &v13->i32[v25];
    do
    {
      v28 = *v27++;
      *v26++ = v17 * (float)v28;
      --v24;
    }
    while (v24);
    goto LABEL_11;
  }
  v19 = v18 & 0x7FFFFFF8;
  v20 = v13 + 1;
  v21 = (float32x4_t *)(a1 + 16);
  v22 = v19;
  do
  {
    v23 = vmulq_n_f32(vcvtq_f32_s32(*v20), v17);
    v21[-1] = vmulq_n_f32(vcvtq_f32_s32(v20[-1]), v17);
    *v21 = v23;
    v20 += 2;
    v21 += 2;
    v22 -= 8;
  }
  while (v22);
  if (v19 != v18)
    goto LABEL_9;
LABEL_11:
  exp_rotation(a1, v10, -1, a5, a3, a4);
  if (a5 >= 2)
  {
    v30 = 0;
    LODWORD(result) = 0;
    v31 = v10 / a5;
    if ((int)v31 <= 1)
      v32 = 1;
    else
      v32 = v31;
    while (1)
    {
      v33 = v30 * v31;
      if (v32 >= 8)
      {
        v36 = 0;
        v37 = 0uLL;
        v38 = v32 & 0x7FFFFFF8;
        v39 = 0uLL;
        do
        {
          v40 = (int8x16_t *)((char *)&v13[v36] + 4 * v33);
          v37 = vorrq_s8(*v40, v37);
          v39 = vorrq_s8(v40[1], v39);
          v36 += 2;
          v38 -= 8;
        }
        while (v38);
        v41 = vorrq_s8(v39, v37);
        *(int8x8_t *)v41.i8 = vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
        v35 = v41.i32[0] | v41.i32[1];
        v34 = v32 & 0x7FFFFFF8;
        if (v34 == v32)
          goto LABEL_17;
      }
      else
      {
        v34 = 0;
        v35 = 0;
      }
      v42 = v32 - v34;
      do
      {
        v35 |= v13->u32[v34 + v33];
        ++v34;
        --v42;
      }
      while (v42);
LABEL_17:
      result = ((v35 != 0) << v30++) | result;
      if (v30 == a5)
        return result;
    }
  }
  return 1;
}

_BYTE *silk_VQ_WMat_EC_c(_BYTE *result, unsigned int *a2, int *a3, _DWORD *a4, _DWORD *a5, int *a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, int a11, int a12)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  int v28;

  v12 = *a6;
  v13 = a6[1];
  v14 = a6[2];
  v15 = a6[3];
  v16 = a6[4];
  *a3 = 0x7FFFFFFF;
  *a2 = 0x7FFFFFFF;
  *result = 0;
  if (a12 >= 1)
  {
    v17 = 0;
    v18 = v12 << 7;
    v19 = (char *)(a7 + 2);
    do
    {
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      v23 = ((unint64_t)(*(v19 - 2)
                              * (uint64_t)(*a5 * *(v19 - 2)
                                        + 2 * (a5[1] * *(v19 - 1) - v18 + a5[2] * v20 + a5[3] * v21 + a5[4] * v22))) >> 16)
          + ((unint64_t)(*(v19 - 1)
                              * (uint64_t)(a5[6] * *(v19 - 1) + 2
                                                             * (a5[7] * v20 - (v13 << 7) + a5[8] * v21 + a5[9] * v22))) >> 16)
          + ((unint64_t)(*v19 * (uint64_t)(a5[12] * v20 + 2 * (-128 * v14 + a5[13] * v21 + a5[14] * v22))) >> 16)
          + ((unint64_t)(v19[1] * (uint64_t)(a5[18] * v21 - (v15 << 8) + 2 * v22 * a5[19])) >> 16)
          + ((unint64_t)(v19[2] * (uint64_t)(-256 * v16 + a5[24] * v22)) >> 16)
          + 32801;
      if (v23 >= 0)
      {
        v24 = *(unsigned __int8 *)(a8 + v17);
        v25 = v23 + (((v24 - a11) & ~((v24 - a11) >> 31)) << 11);
        v26 = __clz(v25);
        v27 = v25;
        if (v26 != 24)
        {
          if (v25 <= 0x7F)
            v27 = v25 << (v26 - 24);
          else
            v27 = ((_BYTE)v25 << (v26 + 8)) | (v25 >> (24 - v26));
        }
        v28 = ((int)(((179 * (v27 & 0x7F) * (128 - (v27 & 0x7F)) - (v26 << 23) + ((v27 & 0x7F) << 16) + 260046848) & 0xFFFF0000)
                   - 125829120) >> 16)
            * a10
            + 4 * *(unsigned __int8 *)(a9 + v17);
        if (v28 <= *a3)
        {
          *a3 = v28;
          *a2 = v25;
          *result = v17;
          *a4 = v24;
        }
      }
      v19 += 5;
      ++v17;
    }
    while (a12 != v17);
  }
  return result;
}

void *silk_NSQ_wrapper_FLP(_DWORD *a1, uint64_t a2, char *a3, _DWORD *a4, uint64_t a5, float *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  _BYTE *v10;
  float *v11;
  _WORD *v12;
  uint64_t v13;
  float v14;
  float *v15;
  _DWORD *v16;
  _DWORD *v17;
  int *v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  float *v23;
  _WORD *v24;
  float v25;
  uint64_t v26;
  float *v27;
  _WORD *v28;
  uint64_t v29;
  float v30;
  uint64_t *v31;
  float *v32;
  float v33;
  float v34;
  _DWORD *v35;
  float *v36;
  float v37;
  float v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  _WORD *v42;
  float v43;
  _BYTE v45[16];
  _BYTE v46[16];
  _BYTE v47[16];
  _BYTE v48[192];
  _BYTE v49[40];
  _BYTE v50[32];
  uint64_t v51;
  _BYTE v52[16];
  _BYTE v53[640];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v6 = a1[1145];
  if ((int)v6 < 1)
  {
    v22 = *(float *)(a2 + 692);
    v26 = a1[1160];
    if ((int)v26 < 1)
      goto LABEL_21;
    goto LABEL_17;
  }
  v7 = a1[1159];
  if ((int)v7 >= 1)
  {
    v8 = 0;
    v9 = (float *)(a2 + 244);
    v10 = v48;
    do
    {
      v11 = v9;
      v12 = v10;
      v13 = v7;
      do
      {
        v14 = *v11++;
        *v12++ = (uint64_t)rintf(v14 * 8192.0);
        --v13;
      }
      while (v13);
      ++v8;
      v10 += 48;
      v9 += 24;
    }
    while (v8 != v6);
  }
  v15 = (float *)(a2 + 676);
  v16 = v45;
  v17 = v46;
  v18 = (int *)v47;
  v19 = v6;
  do
  {
    *v18++ = (unsigned __int16)(uint64_t)rintf(*(v15 - 12) * 16384.0) | ((unsigned __int16)(uint64_t)rintf(*(v15 - 8) * 16384.0) << 16);
    *v17++ = (uint64_t)rintf(*(v15 - 4) * 16384.0);
    v20 = *v15++;
    *v16++ = (uint64_t)rintf(v20 * 16384.0);
    --v19;
  }
  while (v19);
  LODWORD(v21) = 5 * v6;
  v22 = *(float *)(a2 + 692);
  if (5 * (int)v6 <= 1)
    v21 = 1;
  else
    v21 = v21;
  v23 = (float *)(a2 + 144);
  v24 = v49;
  do
  {
    v25 = *v23++;
    *v24++ = (uint64_t)rintf(v25 * 16384.0);
    --v21;
  }
  while (v21);
  v26 = a1[1160];
  if ((int)v26 >= 1)
  {
LABEL_17:
    v27 = (float *)(a2 + 16);
    v28 = v50;
    v29 = v26;
    do
    {
      v30 = *v27++;
      *v28++ = (uint64_t)rintf(v30 * 4096.0);
      --v29;
    }
    while (v29);
    v31 = &v51;
    v32 = (float *)(a2 + 80);
    do
    {
      v33 = *v32++;
      *(_WORD *)v31 = (uint64_t)rintf(v33 * 4096.0);
      v31 = (uint64_t *)((char *)v31 + 2);
      --v26;
    }
    while (v26);
  }
LABEL_21:
  v34 = v22 * 1024.0;
  if ((int)v6 >= 1)
  {
    v35 = v52;
    v36 = (float *)a2;
    do
    {
      v37 = *v36++;
      *v35++ = (uint64_t)rintf(v37 * 65536.0);
      --v6;
    }
    while (v6);
  }
  v38 = rintf(v34);
  if (a3[29] == 2)
  {
    v39 = silk_LTPScales_table_Q14[a3[33]];
    v40 = (uint64_t)v38;
    v41 = a1[1146];
    if ((int)v41 < 1)
      goto LABEL_30;
  }
  else
  {
    v39 = 0;
    v40 = (uint64_t)v38;
    v41 = a1[1146];
    if ((int)v41 < 1)
      goto LABEL_30;
  }
  v42 = v53;
  do
  {
    v43 = *a6++;
    *v42++ = (uint64_t)rintf(v43);
    --v41;
  }
  while (v41);
LABEL_30:
  if ((int)a1[1157] <= 1 && (int)a1[1168] < 1)
    return silk_NSQ_c(a1, a4, a3, (uint64_t)v53, a5, (uint64_t)v50, (uint64_t)v49, (uint64_t)v48, (uint64_t)v45, (uint64_t)v46, (uint64_t)v47, (uint64_t)v52, a2 + 228, v40, v39);
  else
    return silk_NSQ_del_dec_c((uint64_t)a1, (uint64_t)a4, (uint64_t)a3, (uint64_t)v53, a5, (uint64_t)v50, (uint64_t)v49, (uint64_t)v48, (uint64_t)v45, (uint64_t)v46, (uint64_t)v47, (uint64_t)v52, (int32x4_t *)(a2 + 228), v40, v39);
}

uint64_t srtp_aes_gcm_openssl_alloc(uint64_t *a1, int a2, int a3)
{
  void *v6;
  uint64_t v7;
  int *v8;
  int *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  void *v14;

  if (srtp_mod_aes_gcm)
  {
    srtp_err_report(3, "%s: allocating cipher with key length %d\n", off_25453E900, a2);
    if (srtp_mod_aes_gcm)
      srtp_err_report(3, "%s: allocating cipher with tag length %d\n", off_25453E900, a3);
  }
  if (a2 != 44 && a2 != 28 || a3 != 16 && a3 != 8)
    return 2;
  v6 = malloc_type_calloc(1uLL, 0x18uLL, 0xAF789EA2uLL);
  if (!v6)
  {
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x18uLL);
    goto LABEL_31;
  }
  v7 = (uint64_t)v6;
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v6);
  *a1 = v7;
  v8 = (int *)malloc_type_calloc(1uLL, 0x18uLL, 0xAF789EA2uLL);
  if (!v8)
  {
    if (!srtp_mod_alloc)
    {
      v14 = (void *)*a1;
      goto LABEL_30;
    }
    srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x18uLL);
    v14 = (void *)*a1;
    if (!srtp_mod_alloc)
      goto LABEL_30;
LABEL_26:
    srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v14);
LABEL_30:
    free(v14);
LABEL_31:
    *a1 = 0;
    return 3;
  }
  v9 = v8;
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v8);
  v10 = (char *)malloc_type_malloc(0xA0uLL, 0x30772F57uLL);
  if (!v10)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    *((_QWORD *)v9 + 1) = 0;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v9);
    free(v9);
    v14 = (void *)*a1;
    if (!srtp_mod_alloc)
      goto LABEL_30;
    goto LABEL_26;
  }
  *(_QWORD *)v10 = 152;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *((_QWORD *)v10 + 19) = 0;
  *(_OWORD *)(v10 + 8) = 0u;
  *((_QWORD *)v9 + 1) = v10 + 8;
  *(_QWORD *)(*a1 + 8) = v9;
  if (a2 == 28)
  {
    *(_QWORD *)*a1 = &srtp_aes_gcm_128;
    v11 = *a1;
    *(_DWORD *)(*a1 + 20) = 6;
    v12 = 16;
  }
  else
  {
    *(_QWORD *)*a1 = &srtp_aes_gcm_256;
    v11 = *a1;
    *(_DWORD *)(*a1 + 20) = 7;
    v12 = 32;
  }
  *v9 = v12;
  v9[1] = a3;
  result = 0;
  *(_DWORD *)(v11 + 16) = a2;
  return result;
}

uint64_t srtp_aes_gcm_openssl_dealloc(_QWORD *a1)
{
  EVP_CIPHER_CTX **v2;

  v2 = (EVP_CIPHER_CTX **)a1[1];
  if (v2)
  {
    EVP_CIPHER_CTX_free(v2[1]);
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v2);
    free(v2);
  }
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, a1);
  free(a1);
  return 0;
}

uint64_t srtp_aes_gcm_openssl_context_init(uint64_t a1, const unsigned __int8 *a2)
{
  const char *v4;
  unint64_t v5;
  unint64_t v6;
  const unsigned __int8 *v7;
  char *v8;
  char v9;
  __int128 *v10;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(uint64_t *);
  uint64_t v14;
  void *v15;
  uint64_t v16;
  size_t v17;

  *(_DWORD *)(a1 + 16) = 2;
  if (srtp_mod_aes_gcm)
  {
    v4 = off_25453E900;
    if (*(int *)a1 <= 512)
      v5 = (2 * *(_DWORD *)a1);
    else
      v5 = 1022;
    if ((int)v5 < 1)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      v7 = a2;
      do
      {
        v8 = &bit_string[v6];
        *v8 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*v7 >> 4];
        v9 = *v7++;
        v8[1] = __const_srtp_nibble_to_hex_char_buf[v9 & 0xF];
        v6 += 2;
      }
      while (v6 < v5);
    }
    bit_string[v6] = 0;
    srtp_err_report(3, "%s: key:  %s\n", v4, bit_string);
  }
  if (*(_DWORD *)a1 != 16)
  {
    if (*(_DWORD *)a1 != 32)
      return 2;
    if (!pthread_once(&EVP_aes_256_gcm_once, (void (*)(void))EVP_aes_256_gcm_init))
    {
      v10 = &EVP_aes_256_gcm_storage;
      v11 = *(uint64_t **)(a1 + 8);
      v12 = *v11;
      if (!*v11)
        goto LABEL_20;
LABEL_18:
      v13 = *(void (**)(uint64_t *))(v12 + 40);
      if (v13)
        v13(v11);
      goto LABEL_20;
    }
LABEL_28:
    abort();
  }
  if (pthread_once(&EVP_aes_128_gcm_once, (void (*)(void))EVP_aes_128_gcm_init))
    goto LABEL_28;
  v10 = &EVP_aes_128_gcm_storage;
  v11 = *(uint64_t **)(a1 + 8);
  v12 = *v11;
  if (*v11)
    goto LABEL_18;
LABEL_20:
  v14 = v11[2];
  if (v14)
  {
    v16 = *(_QWORD *)(v14 - 8);
    v15 = (void *)(v14 - 8);
    v17 = v16 + 8;
    if (v16 != -8)
      bzero(v15, v17);
    free(v15);
  }
  v11[18] = 0;
  *((_OWORD *)v11 + 7) = 0u;
  *((_OWORD *)v11 + 8) = 0u;
  *((_OWORD *)v11 + 5) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *(_OWORD *)v11 = 0u;
  if (EVP_CipherInit_ex(*(EVP_CIPHER_CTX **)(a1 + 8), (const EVP_CIPHER *)v10, 0, a2, 0, 0))
    return 0;
  else
    return 5;
}

uint64_t srtp_aes_gcm_openssl_set_aad(uint64_t a1, unsigned __int8 *a2, int a3)
{
  const char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  int v14;
  int v16;
  int v17;

  if (srtp_mod_aes_gcm)
  {
    v6 = off_25453E900;
    if (a3 <= 512)
      v7 = (2 * a3);
    else
      v7 = 1022;
    if ((int)v7 < 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v9 = (char *)a2;
      do
      {
        v10 = &bit_string[v8];
        *v10 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*v9 >> 4];
        v11 = *v9++;
        v10[1] = __const_srtp_nibble_to_hex_char_buf[v11 & 0xF];
        v8 += 2;
      }
      while (v8 < v7);
    }
    bit_string[v8] = 0;
    srtp_err_report(3, "%s: setting AAD: %s\n", v6, bit_string);
  }
  if (*(_DWORD *)(a1 + 16) != 1)
    goto LABEL_16;
  v12 = **(_QWORD **)(a1 + 8);
  if (!v12)
  {
    v16 = 114;
    v17 = 620;
LABEL_23:
    ERR_put_error(30, 0, v16, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", v17);
    return 11;
  }
  v13 = *(uint64_t (**)(void))(v12 + 48);
  if (!v13)
  {
    v16 = 104;
    v17 = 625;
    goto LABEL_23;
  }
  v14 = v13();
  if (v14 == -1)
  {
    v16 = 105;
    v17 = 631;
    goto LABEL_23;
  }
  if (!v14)
    return 11;
LABEL_16:
  if ((*(unsigned int (**)(_QWORD, _QWORD, unsigned __int8 *, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 0, a2, a3) == a3)return 0;
  else
    return 11;
}

uint64_t srtp_aes_gcm_openssl_encrypt(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (*(_DWORD *)(a1 + 16) > 1u)
    return 2;
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, a2, *a3);
  return 0;
}

uint64_t srtp_aes_gcm_openssl_decrypt(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t (*v5)(void);
  int v8;
  uint64_t result;

  if (*(_DWORD *)(a1 + 16) > 1u)
    return 2;
  v4 = **(_QWORD **)(a1 + 8);
  if (v4)
  {
    v5 = *(uint64_t (**)(void))(v4 + 48);
    if (v5)
    {
      v8 = v5();
      if (!v8)
        return 7;
      if (v8 == -1)
      {
        ERR_put_error(30, 0, 105, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 631);
        return 7;
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, a2, (*a3 - *(_DWORD *)(a1 + 4)));
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 0, 0, 0);
      if (!(_DWORD)result)
        *a3 -= *(_DWORD *)(a1 + 4);
      else
        return 7;
    }
    else
    {
      ERR_put_error(30, 0, 104, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 625);
      return 7;
    }
  }
  else
  {
    ERR_put_error(30, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 620);
    return 7;
  }
  return result;
}

uint64_t srtp_aes_gcm_openssl_set_iv(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t (*v7)(void);
  int v8;

  if (a3 > 1)
    return 2;
  *(_DWORD *)(a1 + 16) = a3;
  if (srtp_mod_aes_gcm)
  {
    bit_string[0] = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*a2 >> 4];
    byte_254573369 = __const_srtp_nibble_to_hex_char_buf[*a2 & 0xF];
    byte_25457336A = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a2[1] >> 4];
    byte_25457336B = __const_srtp_nibble_to_hex_char_buf[a2[1] & 0xF];
    LOBYTE(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a2[2] >> 4];
    BYTE1(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a2[2] & 0xF];
    BYTE2(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a2[3] >> 4];
    BYTE3(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a2[3] & 0xF];
    BYTE4(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a2[4] >> 4];
    BYTE5(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a2[4] & 0xF];
    BYTE6(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a2[5] >> 4];
    BYTE7(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a2[5] & 0xF];
    BYTE8(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a2[6] >> 4];
    BYTE9(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a2[6] & 0xF];
    BYTE10(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a2[7] >> 4];
    BYTE11(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a2[7] & 0xF];
    BYTE12(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a2[8] >> 4];
    BYTE13(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a2[8] & 0xF];
    BYTE14(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a2[9] >> 4];
    HIBYTE(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a2[9] & 0xF];
    byte_25457337C = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a2[10] >> 4];
    byte_25457337D = __const_srtp_nibble_to_hex_char_buf[a2[10] & 0xF];
    byte_25457337E = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a2[11] >> 4];
    byte_25457337F = __const_srtp_nibble_to_hex_char_buf[a2[11] & 0xF];
    byte_254573380 = 0;
    srtp_err_report(3, "%s: setting iv: %s\n", off_25453E900, bit_string);
  }
  v6 = **(_QWORD **)(a1 + 8);
  if (!v6)
  {
    ERR_put_error(30, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 620);
    return 5;
  }
  v7 = *(uint64_t (**)(void))(v6 + 48);
  if (!v7)
  {
    ERR_put_error(30, 0, 104, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 625);
    return 5;
  }
  v8 = v7();
  if (!v8)
    return 5;
  if (v8 == -1)
  {
    ERR_put_error(30, 0, 105, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 631);
    return 5;
  }
  else if (EVP_CipherInit_ex(*(EVP_CIPHER_CTX **)(a1 + 8), 0, 0, 0, a2, *(_DWORD *)(a1 + 16) == 0))
  {
    return 0;
  }
  else
  {
    return 5;
  }
}

uint64_t srtp_aes_gcm_openssl_get_tag(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t (*v6)(void);
  int v7;
  uint64_t result;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 0, 0, 0);
  v5 = **(_QWORD **)(a1 + 8);
  if (!v5)
  {
    ERR_put_error(30, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 620);
    return 11;
  }
  v6 = *(uint64_t (**)(void))(v5 + 48);
  if (!v6)
  {
    ERR_put_error(30, 0, 104, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 625);
    return 11;
  }
  v7 = v6();
  if (!v7)
    return 11;
  if (v7 == -1)
  {
    ERR_put_error(30, 0, 105, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", 631);
    return 11;
  }
  else
  {
    result = 0;
    *a3 = *(_DWORD *)(a1 + 4);
  }
  return result;
}

uint64_t srtp_aes_icm_openssl_alloc(uint64_t *a1, unsigned int a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  if (srtp_mod_aes_icm)
    srtp_err_report(3, "%s: allocating cipher with key length %d\n", (const char *)qword_25453E928, a2);
  result = 2;
  if (a2 <= 0x2E && ((1 << a2) & 0x404040000000) != 0)
  {
    v5 = malloc_type_calloc(1uLL, 0x18uLL, 0xAF789EA2uLL);
    if (!v5)
    {
      if (srtp_mod_alloc)
        srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x18uLL);
      goto LABEL_27;
    }
    v6 = (uint64_t)v5;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v5);
    *a1 = v6;
    v7 = malloc_type_calloc(1uLL, 0x30uLL, 0xAF789EA2uLL);
    if (v7)
    {
      v8 = v7;
      if (srtp_mod_alloc)
        srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v7);
      v9 = (char *)malloc_type_malloc(0xA0uLL, 0x30772F57uLL);
      if (v9)
      {
        *(_QWORD *)v9 = 152;
        *(_OWORD *)(v9 + 24) = 0u;
        *(_OWORD *)(v9 + 40) = 0u;
        *(_OWORD *)(v9 + 56) = 0u;
        *(_OWORD *)(v9 + 72) = 0u;
        *(_OWORD *)(v9 + 88) = 0u;
        *(_OWORD *)(v9 + 104) = 0u;
        *(_OWORD *)(v9 + 120) = 0u;
        *(_OWORD *)(v9 + 136) = 0u;
        *((_QWORD *)v9 + 19) = 0;
        *(_OWORD *)(v9 + 8) = 0u;
        v8[5] = v9 + 8;
        *(_QWORD *)(*a1 + 8) = v8;
        switch(a2)
        {
          case 0x2Eu:
            v13 = *a1;
            *(_DWORD *)(v13 + 20) = 5;
            *(_QWORD *)v13 = &srtp_aes_icm_256;
            v11 = 32;
            break;
          case 0x26u:
            v14 = *a1;
            *(_DWORD *)(v14 + 20) = 4;
            *(_QWORD *)v14 = &srtp_aes_icm_192;
            v11 = 24;
            break;
          case 0x1Eu:
            v10 = *a1;
            *(_DWORD *)(v10 + 20) = 1;
            *(_QWORD *)v10 = &srtp_aes_icm_128;
            v11 = 16;
            break;
          default:
LABEL_32:
            result = 0;
            *(_DWORD *)(*a1 + 16) = a2;
            return result;
        }
        *((_DWORD *)v8 + 8) = v11;
        goto LABEL_32;
      }
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      v8[5] = 0;
      if (srtp_mod_alloc)
        srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v8);
      free(v8);
      v12 = (void *)*a1;
      if (!srtp_mod_alloc)
        goto LABEL_26;
    }
    else
    {
      if (!srtp_mod_alloc)
      {
        v12 = (void *)*a1;
        goto LABEL_26;
      }
      srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x30uLL);
      v12 = (void *)*a1;
      if (!srtp_mod_alloc)
        goto LABEL_26;
    }
    srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v12);
LABEL_26:
    free(v12);
LABEL_27:
    *a1 = 0;
    return 3;
  }
  return result;
}

uint64_t srtp_aes_icm_openssl_dealloc(_QWORD *a1)
{
  EVP_CIPHER_CTX **v2;

  if (!a1)
    return 2;
  v2 = (EVP_CIPHER_CTX **)a1[1];
  if (v2)
  {
    EVP_CIPHER_CTX_free(v2[5]);
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v2);
    free(v2);
  }
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, a1);
  free(a1);
  return 0;
}

uint64_t srtp_aes_icm_openssl_context_init(uint64_t a1, const unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  const unsigned __int8 *v11;
  char *v12;
  char v13;
  const char *v14;
  char *v15;
  int v16;
  ENGINE *v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  void (*v21)(uint64_t *);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  size_t v25;

  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (unsigned __int8 *)(a1 + 16);
  *(_OWORD *)a1 = 0u;
  v5 = *(int *)(a1 + 32);
  v6 = *(_QWORD *)&a2[v5 + 6];
  *(_QWORD *)a1 = *(_QWORD *)&a2[v5];
  *(_QWORD *)(a1 + 6) = v6;
  v7 = *(_QWORD *)&a2[v5 + 6];
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&a2[v5];
  *(_QWORD *)(a1 + 22) = v7;
  *(_WORD *)(a1 + 30) = 0;
  *(_WORD *)(a1 + 14) = 0;
  if (srtp_mod_aes_icm)
  {
    v8 = (const char *)qword_25453E928;
    v9 = (int)v5 <= 512 ? (2 * v5) : 1022;
    if ((int)v9 < 1)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = a2;
      do
      {
        v12 = &bit_string[v10];
        *v12 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*v11 >> 4];
        v13 = *v11++;
        v12[1] = __const_srtp_nibble_to_hex_char_buf[v13 & 0xF];
        v10 += 2;
      }
      while (v10 < v9);
    }
    bit_string[v10] = 0;
    srtp_err_report(3, "%s: key:  %s\n", v8, bit_string);
    if (srtp_mod_aes_icm)
    {
      v14 = (const char *)qword_25453E928;
      v15 = v128_hex_string(v4);
      srtp_err_report(3, "%s: offset: %s\n", v14, v15);
    }
  }
  v16 = *(_DWORD *)(a1 + 32);
  if (v16 == 16)
  {
    if (!pthread_once(&EVP_aes_128_ctr_once, (void (*)(void))EVP_aes_128_ctr_init))
    {
      v18 = &EVP_aes_128_ctr_storage;
      v19 = *(uint64_t **)(a1 + 40);
      v20 = *v19;
      if (!*v19)
        goto LABEL_25;
      goto LABEL_23;
    }
LABEL_31:
    abort();
  }
  if (v16 != 24)
  {
    if (v16 != 32)
      return 2;
    if (!pthread_once(&EVP_aes_256_ctr_once, (void (*)(void))EVP_aes_256_ctr_init))
    {
      v18 = &EVP_aes_256_ctr_storage;
      v19 = *(uint64_t **)(a1 + 40);
      v20 = *v19;
      if (!*v19)
        goto LABEL_25;
LABEL_23:
      v21 = *(void (**)(uint64_t *))(v20 + 40);
      if (v21)
        v21(v19);
      goto LABEL_25;
    }
    goto LABEL_31;
  }
  if (pthread_once(&EVP_aes_192_ctr_once, (void (*)(void))EVP_aes_192_ctr_init))
    goto LABEL_31;
  v18 = &EVP_aes_192_ctr_storage;
  v19 = *(uint64_t **)(a1 + 40);
  v20 = *v19;
  if (*v19)
    goto LABEL_23;
LABEL_25:
  v22 = v19[2];
  if (v22)
  {
    v24 = *(_QWORD *)(v22 - 8);
    v23 = (void *)(v22 - 8);
    v25 = v24 + 8;
    if (v24 != -8)
      bzero(v23, v25);
    free(v23);
  }
  v19[18] = 0;
  *((_OWORD *)v19 + 7) = 0u;
  *((_OWORD *)v19 + 8) = 0u;
  *((_OWORD *)v19 + 5) = 0u;
  *((_OWORD *)v19 + 6) = 0u;
  *((_OWORD *)v19 + 3) = 0u;
  *((_OWORD *)v19 + 4) = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  *((_OWORD *)v19 + 2) = 0u;
  *(_OWORD *)v19 = 0u;
  return EVP_CipherInit_ex(*(EVP_CIPHER_CTX **)(a1 + 40), (const EVP_CIPHER *)v18, v17, a2, 0, 1) ^ 1u;
}

uint64_t srtp_aes_icm_openssl_encrypt(uint64_t a1, unsigned __int8 *out, int *a3)
{
  const char *v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  int outl;

  outl = 0;
  if (srtp_mod_aes_icm)
  {
    v6 = (const char *)qword_25453E928;
    v7 = v128_hex_string((unsigned __int8 *)a1);
    srtp_err_report(3, "%s: rs0: %s\n", v6, v7);
  }
  if (!EVP_EncryptUpdate(*(EVP_CIPHER_CTX **)(a1 + 40), out, &outl, out, *a3))
    return 8;
  v8 = outl;
  *a3 = outl;
  if (!EVP_EncryptFinal_ex(*(EVP_CIPHER_CTX **)(a1 + 40), &out[v8], &outl))
    return 8;
  result = 0;
  *a3 += outl;
  return result;
}

uint64_t srtp_aes_icm_openssl_set_iv(unsigned __int8 *iv, int8x16_t *a2, ENGINE *a3)
{
  const char *v4;
  char *v5;
  const char *v6;
  char *v7;
  int8x16_t v9;

  v9 = *a2;
  if (srtp_mod_aes_icm)
  {
    v4 = (const char *)qword_25453E928;
    v5 = v128_hex_string((unsigned __int8 *)&v9);
    srtp_err_report(3, "%s: setting iv: %s\n", v4, v5);
  }
  *(int8x16_t *)iv = veorq_s8(v9, *((int8x16_t *)iv + 1));
  if (srtp_mod_aes_icm)
  {
    v6 = (const char *)qword_25453E928;
    v7 = v128_hex_string(iv);
    srtp_err_report(3, "%s: set_counter: %s\n", v6, v7);
  }
  return EVP_CipherInit_ex(*((EVP_CIPHER_CTX **)iv + 5), 0, a3, 0, iv, 1) ^ 1u;
}

void *srtp_crypto_alloc(size_t size)
{
  void *v2;
  void *v3;

  if (!size)
    return 0;
  v2 = malloc_type_calloc(1uLL, size, 0xAF789EA2uLL);
  if (!v2)
  {
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, size);
    return 0;
  }
  v3 = v2;
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v2);
  return v3;
}

uint64_t srtp_auth_type_test(uint64_t a1, unsigned int *a2)
{
  uint64_t (**v3)(uint64_t *, _QWORD);
  int v4;
  uint64_t (**v5)(uint64_t *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char v13;
  const char *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char v20;
  const char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  char *v28;
  const char *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char v35;
  const char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v41;
  _BYTE v42[32];
  uint64_t v43;

  v3 = (uint64_t (**)(uint64_t *, _QWORD))a1;
  v43 = *MEMORY[0x24BDAC8D0];
  if (srtp_mod_auth)
    srtp_err_report(3, "%s: running self-test for auth function %s\n", off_25453E948, *(const char **)(a1 + 48));
  if (!a2)
    return 14;
  v4 = 0;
  v41 = 0;
  while (1)
  {
    if ((int)a2[8] > 32)
      return 2;
    v5 = v3;
    v6 = (*v3)(&v41, *a2);
    if ((_DWORD)v6)
      return v6;
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v41 + 16))(*(_QWORD *)(v41 + 8), *((_QWORD *)a2 + 1), *(unsigned int *)(v41 + 20));
    if ((_DWORD)v7)
      goto LABEL_61;
    if (a2[8])
      __memset_chk();
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _BYTE *))(*(_QWORD *)v41 + 24))(*(_QWORD *)(v41 + 8), *((_QWORD *)a2 + 3), a2[4], *(unsigned int *)(v41 + 16), v42);
    if ((_DWORD)v7)
    {
LABEL_61:
      v39 = v7;
      goto LABEL_65;
    }
    if (srtp_mod_auth)
    {
      LODWORD(v9) = 2 * *a2;
      v9 = (int)*a2 <= 512 ? v9 : 1022;
      if ((int)v9 < 1)
      {
        v10 = 0;
      }
      else
      {
        v10 = 0;
        v11 = (char *)*((_QWORD *)a2 + 1);
        do
        {
          v12 = &bit_string[v10];
          *v12 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*v11 >> 4];
          v13 = *v11++;
          v12[1] = __const_srtp_nibble_to_hex_char_buf[v13 & 0xF];
          v10 += 2;
        }
        while (v10 < v9);
      }
      v14 = off_25453E948;
      bit_string[v10] = 0;
      v8.n128_f64[0] = srtp_err_report(3, "%s: key: %s\n", v14, bit_string);
      if (srtp_mod_auth)
      {
        v15 = a2[4];
        LODWORD(v16) = 2 * v15;
        v16 = v15 <= 512 ? v16 : 1022;
        if ((int)v16 < 1)
        {
          v17 = 0;
        }
        else
        {
          v17 = 0;
          v18 = (char *)*((_QWORD *)a2 + 3);
          do
          {
            v19 = &bit_string[v17];
            *v19 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*v18 >> 4];
            v20 = *v18++;
            v19[1] = __const_srtp_nibble_to_hex_char_buf[v20 & 0xF];
            v17 += 2;
          }
          while (v17 < v16);
        }
        v21 = off_25453E948;
        bit_string[v17] = 0;
        v8.n128_f64[0] = srtp_err_report(3, "%s: data: %s\n", v21, bit_string);
        if (srtp_mod_auth)
        {
          v22 = a2[8];
          LODWORD(v23) = 2 * v22;
          v23 = v22 <= 512 ? v23 : 1022;
          if ((int)v23 < 1)
          {
            v24 = 0;
          }
          else
          {
            v24 = 0;
            v25 = ((unint64_t)(v23 - 1) >> 1) + 1;
            v26 = v42;
            do
            {
              v27 = *v26++;
              v28 = &bit_string[v24];
              *v28 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v27 >> 4];
              v28[1] = __const_srtp_nibble_to_hex_char_buf[v27 & 0xF];
              v24 += 2;
              --v25;
            }
            while (v25);
          }
          v29 = off_25453E948;
          bit_string[v24] = 0;
          v8.n128_f64[0] = srtp_err_report(3, "%s: tag computed: %s\n", v29, bit_string);
          if (srtp_mod_auth)
          {
            v30 = a2[8];
            LODWORD(v31) = 2 * v30;
            if (v30 <= 512)
              v31 = v31;
            else
              v31 = 1022;
            if ((int)v31 < 1)
            {
              v32 = 0;
            }
            else
            {
              v32 = 0;
              v33 = (char *)*((_QWORD *)a2 + 5);
              do
              {
                v34 = &bit_string[v32];
                *v34 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*v33 >> 4];
                v35 = *v33++;
                v34[1] = __const_srtp_nibble_to_hex_char_buf[v35 & 0xF];
                v32 += 2;
              }
              while (v32 < v31);
            }
            v36 = off_25453E948;
            bit_string[v32] = 0;
            v8.n128_f64[0] = srtp_err_report(3, "%s: tag expected: %s\n", v36, bit_string);
          }
        }
      }
    }
    if ((int)a2[8] >= 1)
    {
      v37 = 0;
      v38 = 0;
      do
      {
        if (v42[v37] != *(_BYTE *)(*((_QWORD *)a2 + 5) + v37))
        {
          if (srtp_mod_auth)
          {
            v8.n128_f64[0] = srtp_err_report(3, "%s: test case %d failed\n", off_25453E948, v4);
            if (srtp_mod_auth)
              v8.n128_f64[0] = srtp_err_report(3, "%s:   (mismatch at octet %d)\n", off_25453E948, v37);
          }
          v38 = 11;
        }
        ++v37;
      }
      while (v37 < (int)a2[8]);
      if (v38)
        break;
    }
    v6 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v41 + 8))(v41, v8);
    if ((_DWORD)v6)
      return v6;
    a2 = (unsigned int *)*((_QWORD *)a2 + 6);
    ++v4;
    v3 = v5;
    if (!a2)
      return 0;
  }
  v39 = 11;
LABEL_65:
  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  return v39;
}

uint64_t srtp_cipher_output(_QWORD *a1, void *a2, unsigned int *a3)
{
  size_t v6;

  v6 = *a3;
  if ((_DWORD)v6)
    bzero(a2, v6);
  return (*(uint64_t (**)(_QWORD, void *, unsigned int *))(*a1 + 32))(a1[1], a2, a3);
}

uint64_t srtp_cipher_type_test(uint64_t a1, unsigned int *a2)
{
  unsigned int *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned __int8 *v20;
  uint64_t (*v21)(uint64_t, _QWORD, _QWORD);
  int v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char v27;
  const char *v28;
  uint64_t (*v29)(uint64_t, char *, int *);
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unsigned int v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unsigned int v46;
  char *v47;
  const char *v48;
  uint64_t (*v49)(uint64_t, _QWORD, _QWORD);
  int v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char v55;
  const char *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  unsigned int v62;
  char *v63;
  const char *v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  int v68;
  char v69;
  int v70;
  char *v71;
  unsigned int v72;
  const char *v73;
  char *v74;
  int v75;
  _BYTE *v76;
  uint64_t (*v77)(uint64_t, _QWORD, _QWORD);
  const char *v78;
  char *v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, char *, int *);
  const char *v82;
  char *v83;
  uint64_t (*v84)(uint64_t, _QWORD, _QWORD);
  const char *v85;
  char *v86;
  const char *v87;
  char *v88;
  uint64_t v89;
  int v90;
  const char *v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  unsigned int v99;
  char *v100;
  uint64_t v101;
  const char *v102;
  char *v103;
  int v105;
  int __n[3];
  uint64_t *v107;
  _BYTE v108[64];
  _BYTE __dst[128];
  char __src[128];
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  if (srtp_mod_cipher)
    srtp_err_report(3, "%s: running self-test for cipher %s\n", off_25453E958, *(const char **)(a1 + 64));
  if (!a2)
    return 14;
  if (!a1)
    return 2;
  v105 = 0;
  *(_QWORD *)&__n[1] = 0;
  v107 = 0;
  v4 = a2;
  while (1)
  {
    if (!*(_QWORD *)a1)
      return 2;
    v5 = (*(uint64_t (**)(uint64_t **, _QWORD, _QWORD))a1)(&v107, *v4, v4[18]);
    if ((_DWORD)v5)
      return v5;
    if (srtp_mod_cipher)
      v6.n128_f64[0] = srtp_err_report(3, "%s: testing encryption\n", off_25453E958);
    if (!v107)
      return 2;
    v7 = *v107;
    if (!*v107)
      return 2;
    if (!v107[1])
    {
LABEL_234:
      v18 = 2;
      goto LABEL_244;
    }
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, __n128))(v7 + 16))(v107[1], *((_QWORD *)v4 + 1), v6);
    if ((_DWORD)v8)
      goto LABEL_235;
    if (v4[10] > 0x80)
    {
      if (v107)
      {
        v101 = *v107;
        if (*v107)
          goto LABEL_253;
      }
      return 2;
    }
    LODWORD(v9) = v4[6];
    if ((_DWORD)v9)
    {
      v10 = 0;
      do
      {
        __src[v10] = *(_BYTE *)(*((_QWORD *)v4 + 4) + v10);
        ++v10;
        v9 = v4[6];
      }
      while (v10 < v9);
    }
    if (srtp_mod_cipher)
    {
      LODWORD(v11) = 2 * v9;
      if ((int)v9 <= 512)
        v11 = v11;
      else
        v11 = 1022;
      if ((int)v11 < 1)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        v13 = ((unint64_t)(v11 - 1) >> 1) + 1;
        v14 = __src;
        do
        {
          v15 = *v14++;
          v16 = &bit_string[v12];
          *v16 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v15 >> 4];
          v16[1] = __const_srtp_nibble_to_hex_char_buf[v15 & 0xF];
          v12 += 2;
          --v13;
        }
        while (v13);
      }
      v17 = off_25453E958;
      bit_string[v12] = 0;
      v6.n128_f64[0] = srtp_err_report(3, "%s: plaintext:    %s\n", v17, bit_string);
    }
    if (!v107)
      return 2;
    v7 = *v107;
    if (!*v107)
      return 2;
    if (!v107[1])
      goto LABEL_234;
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, __n128))(v7 + 48))(v107[1], *((_QWORD *)v4 + 2), 0, v6);
    v19 = v107;
    if ((_DWORD)v18)
      goto LABEL_237;
    if ((*((_DWORD *)v107 + 5) & 0xFFFFFFFE) == 6)
    {
      if (srtp_mod_cipher)
      {
        v20 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
        bit_string[0] = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*v20 >> 4];
        byte_254573369 = __const_srtp_nibble_to_hex_char_buf[*v20 & 0xF];
        byte_25457336A = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[1] >> 4];
        byte_25457336B = __const_srtp_nibble_to_hex_char_buf[v20[1] & 0xF];
        LOBYTE(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[2] >> 4];
        BYTE1(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[v20[2] & 0xF];
        BYTE2(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[3] >> 4];
        BYTE3(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[v20[3] & 0xF];
        BYTE4(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[4] >> 4];
        BYTE5(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[v20[4] & 0xF];
        BYTE6(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[5] >> 4];
        BYTE7(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[v20[5] & 0xF];
        BYTE8(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[6] >> 4];
        BYTE9(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[v20[6] & 0xF];
        BYTE10(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[7] >> 4];
        BYTE11(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[v20[7] & 0xF];
        BYTE12(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[8] >> 4];
        BYTE13(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[v20[8] & 0xF];
        BYTE14(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[9] >> 4];
        HIBYTE(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[v20[9] & 0xF];
        byte_25457337C = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[10] >> 4];
        byte_25457337D = __const_srtp_nibble_to_hex_char_buf[v20[10] & 0xF];
        byte_25457337E = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[11] >> 4];
        byte_25457337F = __const_srtp_nibble_to_hex_char_buf[v20[11] & 0xF];
        byte_254573380 = 0;
        v6.n128_f64[0] = srtp_err_report(3, "%s: IV:    %s\n", off_25453E958, bit_string);
        v19 = v107;
        if (!v107)
          return 2;
      }
      v7 = *v19;
      if (!*v19)
        return 2;
      if (!v19[1])
        goto LABEL_234;
      v21 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v7 + 24);
      if (!v21)
        goto LABEL_243;
      v8 = v21(v19[1], *((_QWORD *)v4 + 8), v4[14]);
      if ((_DWORD)v8)
      {
LABEL_235:
        v18 = v8;
        v19 = v107;
        if (!v107)
          return v18;
        goto LABEL_238;
      }
      if (srtp_mod_cipher)
      {
        v22 = v4[14];
        LODWORD(v23) = 2 * v22;
        if (v22 <= 512)
          v23 = v23;
        else
          v23 = 1022;
        if ((int)v23 < 1)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          v25 = (char *)*((_QWORD *)v4 + 8);
          do
          {
            v26 = &bit_string[v24];
            *v26 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*v25 >> 4];
            v27 = *v25++;
            v26[1] = __const_srtp_nibble_to_hex_char_buf[v27 & 0xF];
            v24 += 2;
          }
          while (v24 < v23);
        }
        v28 = off_25453E958;
        bit_string[v24] = 0;
        v6.n128_f64[0] = srtp_err_report(3, "%s: AAD:    %s\n", v28, bit_string);
      }
      v19 = v107;
      __n[1] = v4[6];
      if (!v107)
        return 2;
    }
    else
    {
      __n[1] = v4[6];
    }
    v7 = *v19;
    if (!*v19)
      return 2;
    if (!v19[1])
      goto LABEL_234;
    v18 = (*(uint64_t (**)(uint64_t, char *, int *))(v7 + 32))(v19[1], __src, &__n[1]);
    v19 = v107;
    if ((_DWORD)v18)
      goto LABEL_237;
    if ((*((_DWORD *)v107 + 5) & 0xFFFFFFFE) == 6)
    {
      v7 = *v107;
      if (!*v107)
        return 2;
      if (!v107[1])
        goto LABEL_234;
      v29 = *(uint64_t (**)(uint64_t, char *, int *))(v7 + 56);
      if (!v29)
        goto LABEL_243;
      v8 = v29(v107[1], &__src[__n[1]], &__n[2]);
      if ((_DWORD)v8)
        goto LABEL_235;
      __n[1] += __n[2];
    }
    if (srtp_mod_cipher)
    {
      v30 = v4[10];
      LODWORD(v31) = 2 * v30;
      if (v30 <= 512)
        v31 = v31;
      else
        v31 = 1022;
      if ((int)v31 < 1)
      {
        v32 = 0;
      }
      else
      {
        v32 = 0;
        v33 = ((unint64_t)(v31 - 1) >> 1) + 1;
        v34 = __src;
        do
        {
          v35 = *v34++;
          v36 = &bit_string[v32];
          *v36 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v35 >> 4];
          v36[1] = __const_srtp_nibble_to_hex_char_buf[v35 & 0xF];
          v32 += 2;
          --v33;
        }
        while (v33);
      }
      v37 = off_25453E958;
      bit_string[v32] = 0;
      v6.n128_f64[0] = srtp_err_report(3, "%s: ciphertext:   %s\n", v37, bit_string);
    }
    if (__n[1] != v4[10])
      goto LABEL_248;
    if (__n[1])
      break;
LABEL_75:
    if (srtp_mod_cipher)
      v6.n128_f64[0] = srtp_err_report(3, "%s: testing decryption\n", off_25453E958);
    if (!v107)
      return 2;
    v7 = *v107;
    if (!*v107)
      return 2;
    if (!v107[1])
      goto LABEL_234;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, __n128))(v7 + 16))(v107[1], *((_QWORD *)v4 + 1), v6);
    if ((_DWORD)v8)
      goto LABEL_235;
    v39 = v4[10];
    if (v39 > 0x80)
    {
      if (v107)
      {
        v101 = *v107;
        if (*v107)
        {
LABEL_253:
          (*(void (**)(void))(v101 + 8))();
          return 2;
        }
      }
      return 2;
    }
    if (v39)
    {
      v40 = 0;
      do
      {
        __src[v40] = *(_BYTE *)(*((_QWORD *)v4 + 6) + v40);
        ++v40;
      }
      while (v40 < v4[10]);
    }
    if (srtp_mod_cipher)
    {
      v41 = v4[6];
      LODWORD(v42) = 2 * v41;
      if (v41 <= 512)
        v42 = v42;
      else
        v42 = 1022;
      if ((int)v42 < 1)
      {
        v43 = 0;
      }
      else
      {
        v43 = 0;
        v44 = ((unint64_t)(v42 - 1) >> 1) + 1;
        v45 = __src;
        do
        {
          v46 = *v45++;
          v47 = &bit_string[v43];
          *v47 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v46 >> 4];
          v47[1] = __const_srtp_nibble_to_hex_char_buf[v46 & 0xF];
          v43 += 2;
          --v44;
        }
        while (v44);
      }
      v48 = off_25453E958;
      bit_string[v43] = 0;
      v6.n128_f64[0] = srtp_err_report(3, "%s: ciphertext:    %s\n", v48, bit_string);
    }
    if (!v107)
      return 2;
    v7 = *v107;
    if (!*v107)
      return 2;
    if (!v107[1])
      goto LABEL_234;
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, __n128))(v7 + 48))(v107[1], *((_QWORD *)v4 + 2), 1, v6);
    v19 = v107;
    if ((_DWORD)v18)
    {
LABEL_237:
      if (!v19)
        return v18;
LABEL_238:
      v7 = *v19;
      if (!*v19)
        return v18;
      goto LABEL_244;
    }
    if ((*((_DWORD *)v107 + 5) & 0xFFFFFFFE) == 6)
    {
      v7 = *v107;
      if (!*v107)
        return 2;
      if (!v107[1])
        goto LABEL_234;
      v49 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v7 + 24);
      if (v49)
      {
        v8 = v49(v107[1], *((_QWORD *)v4 + 8), v4[14]);
        if ((_DWORD)v8)
          goto LABEL_235;
        if (srtp_mod_cipher)
        {
          v50 = v4[14];
          LODWORD(v51) = 2 * v50;
          if (v50 <= 512)
            v51 = v51;
          else
            v51 = 1022;
          if ((int)v51 < 1)
          {
            v52 = 0;
          }
          else
          {
            v52 = 0;
            v53 = (char *)*((_QWORD *)v4 + 8);
            do
            {
              v54 = &bit_string[v52];
              *v54 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*v53 >> 4];
              v55 = *v53++;
              v54[1] = __const_srtp_nibble_to_hex_char_buf[v55 & 0xF];
              v52 += 2;
            }
            while (v52 < v51);
          }
          v56 = off_25453E958;
          bit_string[v52] = 0;
          v6.n128_f64[0] = srtp_err_report(3, "%s: AAD:    %s\n", v56, bit_string);
        }
        v19 = v107;
        __n[1] = v4[10];
        if (!v107)
          return 2;
        goto LABEL_116;
      }
LABEL_243:
      v18 = 12;
LABEL_244:
      (*(void (**)(__n128))(v7 + 8))(v6);
      return v18;
    }
    __n[1] = v4[10];
LABEL_116:
    v7 = *v19;
    if (!*v19)
      return 2;
    if (!v19[1])
      goto LABEL_234;
    v8 = (*(uint64_t (**)(uint64_t, char *, int *))(v7 + 40))(v19[1], __src, &__n[1]);
    if ((_DWORD)v8)
      goto LABEL_235;
    if (srtp_mod_cipher)
    {
      v57 = v4[6];
      LODWORD(v58) = 2 * v57;
      if (v57 <= 512)
        v58 = v58;
      else
        v58 = 1022;
      if ((int)v58 < 1)
      {
        v59 = 0;
      }
      else
      {
        v59 = 0;
        v60 = ((unint64_t)(v58 - 1) >> 1) + 1;
        v61 = __src;
        do
        {
          v62 = *v61++;
          v63 = &bit_string[v59];
          *v63 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v62 >> 4];
          v63[1] = __const_srtp_nibble_to_hex_char_buf[v62 & 0xF];
          v59 += 2;
          --v60;
        }
        while (v60);
      }
      v64 = off_25453E958;
      bit_string[v59] = 0;
      v6.n128_f64[0] = srtp_err_report(3, "%s: plaintext:   %s\n", v64, bit_string);
    }
    if (__n[1] != v4[6])
      goto LABEL_248;
    if (__n[1])
    {
      v65 = 0;
      v66 = 0;
      do
      {
        if (__src[v65] != *(_BYTE *)(*((_QWORD *)v4 + 4) + v65))
        {
          if (srtp_mod_cipher)
          {
            v6.n128_f64[0] = srtp_err_report(3, "%s: test case %d failed\n", off_25453E958, v105);
            if (srtp_mod_cipher)
              v6.n128_f64[0] = srtp_err_report(3, "%s: (failure at byte %u)\n", off_25453E958, v65);
          }
          v66 = 11;
        }
        ++v65;
        v67 = v4[6];
      }
      while (v65 < v67);
      if (v66)
      {
        if (srtp_mod_cipher)
        {
          v102 = off_25453E958;
          v103 = srtp_octet_string_hex_string(__src, 2 * (int)v67);
          v6.n128_f64[0] = srtp_err_report(3, "%s: p computed: %s\n", v102, v103);
          if (srtp_mod_cipher)
          {
            srtp_octet_string_hex_string(*((char **)v4 + 4), 2 * v4[6]);
            v6.n128_f64[0] = srtp_err_report(3, "%s: p expected: %s\n");
          }
        }
        goto LABEL_248;
      }
    }
    if (!v107 || !*v107)
      return 2;
    v5 = (*(uint64_t (**)(__n128))(*v107 + 8))(v6);
    if ((_DWORD)v5)
      return v5;
    v4 = (unsigned int *)*((_QWORD *)v4 + 10);
    ++v105;
    if (!v4)
    {
      if (!*(_QWORD *)a1)
        return 2;
      v18 = (*(uint64_t (**)(uint64_t **, _QWORD, _QWORD))a1)(&v107, *a2, a2[18]);
      if (!(_DWORD)v18)
      {
        v68 = 0;
        while (1)
        {
          __n[0] = 0;
          v69 = rand();
          rand();
          rand();
          rand();
          v70 = v69 & 0x3F;
          __n[0] = v70;
          if (srtp_mod_cipher)
          {
            v6.n128_f64[0] = srtp_err_report(3, "%s: random plaintext length %d\n\n", off_25453E958, v70);
            v70 = __n[0];
          }
          if (v70)
          {
            v71 = __src;
            do
            {
              *v71++ = rand();
              --v70;
            }
            while (v70);
            v72 = __n[0];
          }
          else
          {
            v72 = 0;
          }
          if (srtp_mod_cipher)
          {
            v73 = off_25453E958;
            v74 = srtp_octet_string_hex_string(__src, v72);
            v6.n128_f64[0] = srtp_err_report(3, "%s: plaintext:    %s\n", v73, v74);
            v72 = __n[0];
          }
          if (v72)
            memcpy(__dst, __src, v72);
          v75 = *a2;
          if ((int)*a2 >= 65)
          {
            if (!v107)
              return 14;
            v7 = *v107;
            v18 = 14;
            if (*v107)
              goto LABEL_244;
            return v18;
          }
          if (v75)
          {
            v76 = v108;
            do
            {
              *v76++ = rand();
              --v75;
            }
            while (v75);
          }
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          rand();
          if (!v107)
            return 2;
          v7 = *v107;
          if (!*v107)
            return 2;
          if (!v107[1])
            goto LABEL_234;
          v18 = (*(uint64_t (**)(uint64_t, _BYTE *))(v7 + 16))(v107[1], v108);
          v19 = v107;
          if ((_DWORD)v18)
            goto LABEL_237;
          if (!v107)
            return 2;
          v7 = *v107;
          if (!*v107)
            return 2;
          if (!v107[1])
            goto LABEL_234;
          v18 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v7 + 48))(v107[1], *((_QWORD *)a2 + 2), 0);
          v19 = v107;
          if ((_DWORD)v18)
            goto LABEL_237;
          if ((*((_DWORD *)v107 + 5) & 0xFFFFFFFE) == 6)
          {
            v7 = *v107;
            if (!*v107)
              return 2;
            if (!v107[1])
              goto LABEL_234;
            v77 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v7 + 24);
            if (!v77)
              goto LABEL_243;
            v8 = v77(v107[1], *((_QWORD *)a2 + 8), a2[14]);
            if ((_DWORD)v8)
              goto LABEL_235;
            if (srtp_mod_cipher)
            {
              v78 = off_25453E958;
              v79 = srtp_octet_string_hex_string(*((char **)a2 + 8), a2[14]);
              v6.n128_f64[0] = srtp_err_report(3, "%s: AAD:    %s\n", v78, v79);
            }
            v19 = v107;
            if (!v107)
              return 2;
          }
          v7 = *v19;
          if (!*v19)
            return 2;
          if (!v19[1])
            goto LABEL_234;
          v80 = __n[0];
          v18 = (*(uint64_t (**)(uint64_t, char *, int *, __n128))(v7 + 32))(v19[1], __src, __n, v6);
          v19 = v107;
          if ((_DWORD)v18)
            goto LABEL_237;
          if ((*((_DWORD *)v107 + 5) & 0xFFFFFFFE) == 6)
          {
            v7 = *v107;
            if (!*v107)
              return 2;
            if (!v107[1])
              goto LABEL_234;
            v81 = *(uint64_t (**)(uint64_t, char *, int *))(v7 + 56);
            if (!v81)
              goto LABEL_243;
            v8 = v81(v107[1], &__src[__n[0]], &__n[2]);
            if ((_DWORD)v8)
              goto LABEL_235;
            __n[0] += __n[2];
          }
          if (srtp_mod_cipher)
          {
            v82 = off_25453E958;
            v83 = srtp_octet_string_hex_string(__src, __n[0]);
            v6.n128_f64[0] = srtp_err_report(3, "%s: ciphertext:   %s\n", v82, v83);
          }
          if (!v107)
            return 2;
          v7 = *v107;
          if (!*v107)
            return 2;
          if (!v107[1])
            goto LABEL_234;
          v18 = (*(uint64_t (**)(uint64_t, _BYTE *, __n128))(v7 + 16))(v107[1], v108, v6);
          v19 = v107;
          if ((_DWORD)v18)
            goto LABEL_237;
          if (!v107)
            return 2;
          v7 = *v107;
          if (!*v107)
            return 2;
          if (!v107[1])
            goto LABEL_234;
          v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(v107[1], *((_QWORD *)a2 + 2), 1);
          v19 = v107;
          if ((_DWORD)v18)
            goto LABEL_237;
          if ((*((_DWORD *)v107 + 5) & 0xFFFFFFFE) == 6)
          {
            v7 = *v107;
            if (!*v107)
              return 2;
            if (!v107[1])
              goto LABEL_234;
            v84 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v7 + 24);
            if (!v84)
              goto LABEL_243;
            v8 = v84(v107[1], *((_QWORD *)a2 + 8), a2[14]);
            if ((_DWORD)v8)
              goto LABEL_235;
            if (srtp_mod_cipher)
            {
              v85 = off_25453E958;
              v86 = srtp_octet_string_hex_string(*((char **)a2 + 8), a2[14]);
              v6.n128_f64[0] = srtp_err_report(3, "%s: AAD:    %s\n", v85, v86);
            }
            v19 = v107;
            if (!v107)
              return 2;
          }
          v7 = *v19;
          if (!*v19)
            return 2;
          if (!v19[1])
            goto LABEL_234;
          v8 = (*(uint64_t (**)(uint64_t, char *, int *, __n128))(v7 + 40))(v19[1], __src, __n, v6);
          if ((_DWORD)v8)
            goto LABEL_235;
          if (srtp_mod_cipher)
          {
            v87 = off_25453E958;
            v88 = srtp_octet_string_hex_string(__src, __n[0]);
            v6.n128_f64[0] = srtp_err_report(3, "%s: plaintext[2]: %s\n", v87, v88);
          }
          if (__n[0] != (_DWORD)v80)
            break;
          if ((_DWORD)v80)
          {
            v89 = 0;
            v90 = 0;
            do
            {
              if (__src[v89] != __dst[v89])
              {
                if (srtp_mod_cipher)
                {
                  v6.n128_f64[0] = srtp_err_report(3, "%s: random test case %d failed\n", off_25453E958, v105);
                  if (srtp_mod_cipher)
                    v6.n128_f64[0] = srtp_err_report(3, "%s: (failure at byte %u)\n", off_25453E958, v89);
                }
                v90 = 11;
              }
              ++v89;
            }
            while (v80 != v89);
            if (v90)
              break;
          }
          if (++v68 == 128)
          {
            if (v107 && *v107)
              return (*(uint64_t (**)(__n128))(*v107 + 8))(v6);
            return 2;
          }
        }
        if (!v107)
          return 11;
        v7 = *v107;
        v18 = 11;
        if (*v107)
          goto LABEL_244;
      }
      return v18;
    }
  }
  v38 = 0;
  while (__src[v38] == *(_BYTE *)(*((_QWORD *)v4 + 6) + v38))
  {
    if (__n[1] == ++v38)
      goto LABEL_75;
  }
  if (srtp_mod_cipher)
  {
    v6.n128_f64[0] = srtp_err_report(3, "%s: test case %d failed\n", off_25453E958, v105);
    if (srtp_mod_cipher)
    {
      v6.n128_f64[0] = srtp_err_report(3, "%s: (failure at byte %u)\n", off_25453E958, v38);
      if (srtp_mod_cipher)
      {
        v91 = off_25453E958;
        v92 = v4[6];
        v93 = 2 * v92;
        v94 = 4 * v92;
        v95 = v93 <= 512 ? v94 : 1022;
        if ((int)v95 < 1)
        {
          v96 = 0;
        }
        else
        {
          v96 = 0;
          v97 = ((unint64_t)(v95 - 1) >> 1) + 1;
          v98 = __src;
          do
          {
            v99 = *v98++;
            v100 = &bit_string[v96];
            *v100 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v99 >> 4];
            v100[1] = __const_srtp_nibble_to_hex_char_buf[v99 & 0xF];
            v96 += 2;
            --v97;
          }
          while (v97);
        }
        bit_string[v96] = 0;
        v6.n128_f64[0] = srtp_err_report(3, "%s: c computed: %s\n", v91, bit_string);
        if (srtp_mod_cipher)
        {
          srtp_octet_string_hex_string(*((char **)v4 + 6), 2 * v4[6]);
          v6.n128_f64[0] = srtp_err_report(3, "%s: c expected: %s\n");
        }
      }
    }
  }
LABEL_248:
  if (!v107 || !*v107)
    return 11;
  (*(void (**)(__n128))(*v107 + 8))(v6);
  return 11;
}

uint64_t srtp_crypto_kernel_init()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  int v3;
  double v4;
  _QWORD *v5;
  double v6;
  uint64_t debug_module;
  const char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  const char *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  uint64_t v19;
  int v21;

  if (crypto_kernel != 1)
  {
    v8 = (const char *)qword_25453E968;
    if (qword_25453E968)
    {
      v9 = (_QWORD *)qword_254573360;
      if (qword_254573360)
      {
        while (strncmp(v8, *(const char **)(*v9 + 8), 0x40uLL))
        {
          v9 = (_QWORD *)v9[1];
          if (!v9)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        v10 = malloc_type_calloc(1uLL, 0x10uLL, 0xAF789EA2uLL);
        if (!v10)
        {
          if (!srtp_mod_alloc)
            return 3;
          debug_module = 3;
          srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x10uLL);
          return debug_module;
        }
        v11 = v10;
        if (srtp_mod_alloc)
          srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v10);
        v12 = qword_254573360;
        *v11 = &srtp_mod_crypto_kernel;
        v11[1] = v12;
        qword_254573360 = (uint64_t)v11;
        v13 = off_25453E948;
        if (off_25453E948)
        {
          while (strncmp(v13, *(const char **)(*v11 + 8), 0x40uLL))
          {
            v11 = (_QWORD *)v11[1];
            if (!v11)
            {
              v14 = srtp_crypto_alloc(0x10uLL);
              if (!v14)
                return 3;
              v15 = v14;
              v16 = qword_254573360;
              *v14 = &srtp_mod_auth;
              v14[1] = v16;
              qword_254573360 = (uint64_t)v14;
              v17 = off_25453E958;
              if (off_25453E958)
              {
                while (strncmp(v17, *(const char **)(*v15 + 8), 0x40uLL))
                {
                  v15 = (_QWORD *)v15[1];
                  if (!v15)
                  {
                    v18 = srtp_crypto_alloc(0x10uLL);
                    if (!v18)
                      return 3;
                    v19 = qword_254573360;
                    *v18 = &srtp_mod_cipher;
                    v18[1] = v19;
                    qword_254573360 = (uint64_t)v18;
                    debug_module = srtp_crypto_kernel_load_debug_module((uint64_t)&srtp_mod_stat);
                    if (!(_DWORD)debug_module)
                    {
                      debug_module = srtp_crypto_kernel_load_debug_module((uint64_t)&srtp_mod_alloc);
                      if (!(_DWORD)debug_module)
                      {
                        debug_module = srtp_crypto_kernel_load_cipher_type((uint64_t)&srtp_null_cipher, 0);
                        if (!(_DWORD)debug_module)
                        {
                          debug_module = srtp_crypto_kernel_load_cipher_type((uint64_t)&srtp_aes_icm_128, 1);
                          if (!(_DWORD)debug_module)
                          {
                            debug_module = srtp_crypto_kernel_load_cipher_type((uint64_t)&srtp_aes_icm_256, 5);
                            if (!(_DWORD)debug_module)
                            {
                              debug_module = srtp_crypto_kernel_load_debug_module((uint64_t)&srtp_mod_aes_icm);
                              if (!(_DWORD)debug_module)
                              {
                                debug_module = srtp_crypto_kernel_load_cipher_type((uint64_t)&srtp_aes_icm_192, 4);
                                if (!(_DWORD)debug_module)
                                {
                                  debug_module = srtp_crypto_kernel_load_cipher_type((uint64_t)&srtp_aes_gcm_128, 6);
                                  if (!(_DWORD)debug_module)
                                  {
                                    debug_module = srtp_crypto_kernel_load_cipher_type((uint64_t)&srtp_aes_gcm_256, 7);
                                    if (!(_DWORD)debug_module)
                                    {
                                      debug_module = srtp_crypto_kernel_load_debug_module((uint64_t)&srtp_mod_aes_gcm);
                                      if (!(_DWORD)debug_module)
                                      {
                                        debug_module = srtp_crypto_kernel_load_auth_type((uint64_t)&srtp_null_auth, 0);
                                        if (!(_DWORD)debug_module)
                                        {
                                          debug_module = srtp_crypto_kernel_load_auth_type((uint64_t)srtp_hmac, 3);
                                          if (!(_DWORD)debug_module)
                                          {
                                            debug_module = srtp_crypto_kernel_load_debug_module((uint64_t)&srtp_mod_hmac);
                                            if (!(_DWORD)debug_module)
                                              crypto_kernel = 1;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    return debug_module;
                  }
                }
              }
              return 2;
            }
          }
        }
      }
    }
    return 2;
  }
  v0 = *((_QWORD *)&xmmword_254573350 + 1);
  v1 = xmmword_254573350;
  if ((_QWORD)xmmword_254573350)
  {
    while (1)
    {
      v2 = srtp_err_report(2, "cipher: %s\n", *(const char **)(*(_QWORD *)(v1 + 8) + 64));
      srtp_err_report(2, "  self-test: ", v2);
      v3 = srtp_cipher_type_test(*(_QWORD *)(v1 + 8), *(unsigned int **)(*(_QWORD *)(v1 + 8) + 72));
      if (v3)
        break;
      srtp_err_report(2, "passed\n");
      v1 = *(_QWORD *)(v1 + 16);
      if (!v1)
        goto LABEL_5;
    }
LABEL_48:
    v21 = v3;
    srtp_err_report(0, "failed with error code %d\n", v3);
    exit(v21);
  }
LABEL_5:
  while (v0)
  {
    v4 = srtp_err_report(2, "auth func: %s\n", *(const char **)(*(_QWORD *)(v0 + 8) + 48));
    srtp_err_report(2, "  self-test: ", v4);
    v3 = srtp_auth_type_test(*(_QWORD *)(v0 + 8), *(unsigned int **)(*(_QWORD *)(v0 + 8) + 56));
    if (v3)
      goto LABEL_48;
    srtp_err_report(2, "passed\n");
    v0 = *(_QWORD *)(v0 + 16);
  }
  v5 = (_QWORD *)qword_254573360;
  srtp_err_report(2, "debug modules loaded:\n");
  for (; v5; v5 = (_QWORD *)v5[1])
  {
    v6 = srtp_err_report(2, "  %s ", *(const char **)(*v5 + 8));
    if (*(_DWORD *)*v5)
      srtp_err_report(2, "(on)\n", v6);
    else
      srtp_err_report(2, "(off)\n", v6);
  }
  return 0;
}

uint64_t srtp_crypto_kernel_load_debug_module(uint64_t a1)
{
  const char *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  if (!a1)
    return 2;
  v2 = *(const char **)(a1 + 8);
  if (!v2)
    return 2;
  v3 = (_QWORD *)qword_254573360;
  if (qword_254573360)
  {
    while (strncmp(v2, *(const char **)(*v3 + 8), 0x40uLL))
    {
      v3 = (_QWORD *)v3[1];
      if (!v3)
        goto LABEL_6;
    }
    return 2;
  }
LABEL_6:
  v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xAF789EA2uLL);
  if (v4)
  {
    v5 = v4;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v4);
    v6 = qword_254573360;
    *v5 = a1;
    v5[1] = v6;
    qword_254573360 = (uint64_t)v5;
    return 0;
  }
  else
  {
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x10uLL);
    return 3;
  }
}

uint64_t srtp_crypto_kernel_load_cipher_type(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if (!a1 || *(_DWORD *)(a1 + 80) != a2)
    return 2;
  v4 = srtp_cipher_type_test(a1, *(unsigned int **)(a1 + 72));
  if (!(_DWORD)v4)
  {
    v5 = *(_QWORD *)((char *)&xmmword_25457334C + 4);
    if (*(_QWORD *)((char *)&xmmword_25457334C + 4))
    {
      while (*(_DWORD *)v5 != a2 && *(_QWORD *)(v5 + 8) != a1)
      {
        v5 = *(_QWORD *)(v5 + 16);
        if (!v5)
          goto LABEL_8;
      }
      return 2;
    }
LABEL_8:
    v6 = malloc_type_calloc(1uLL, 0x18uLL, 0xAF789EA2uLL);
    if (v6)
    {
      v7 = v6;
      if (srtp_mod_alloc)
        srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v6);
      v4 = 0;
      v8 = *(_QWORD *)((char *)&xmmword_25457334C + 4);
      *(_QWORD *)((char *)&xmmword_25457334C + 4) = v7;
      v7[1] = a1;
      v7[2] = v8;
      *(_DWORD *)v7 = a2;
    }
    else
    {
      v4 = 3;
      if (srtp_mod_alloc)
        srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x18uLL);
    }
  }
  return v4;
}

uint64_t srtp_crypto_kernel_load_auth_type(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if (!a1 || *(_DWORD *)(a1 + 64) != a2)
    return 2;
  v4 = srtp_auth_type_test(a1, *(unsigned int **)(a1 + 56));
  if (!(_DWORD)v4)
  {
    v5 = *(_QWORD *)((char *)&xmmword_25457334C + 12);
    if (*(_QWORD *)((char *)&xmmword_25457334C + 12))
    {
      while (*(_DWORD *)v5 != a2 && *(_QWORD *)(v5 + 8) != a1)
      {
        v5 = *(_QWORD *)(v5 + 16);
        if (!v5)
          goto LABEL_8;
      }
      return 2;
    }
LABEL_8:
    v6 = malloc_type_calloc(1uLL, 0x18uLL, 0xAF789EA2uLL);
    if (v6)
    {
      v7 = v6;
      if (srtp_mod_alloc)
        srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v6);
      v4 = 0;
      v8 = *(_QWORD *)((char *)&xmmword_25457334C + 12);
      *(_QWORD *)((char *)&xmmword_25457334C + 12) = v7;
      v7[1] = a1;
      v7[2] = v8;
      *(_DWORD *)v7 = a2;
    }
    else
    {
      v4 = 3;
      if (srtp_mod_alloc)
        srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x18uLL);
    }
  }
  return v4;
}

uint64_t srtp_crypto_kernel_shutdown()
{
  _QWORD *i;
  _QWORD *j;
  _QWORD *k;

  for (i = *(_QWORD **)((char *)&xmmword_25457334C + 4);
        *(_QWORD *)((char *)&xmmword_25457334C + 4);
        i = *(_QWORD **)((char *)&xmmword_25457334C + 4))
  {
    *(_QWORD *)((char *)&xmmword_25457334C + 4) = i[2];
    if (srtp_mod_crypto_kernel)
      srtp_err_report(3, "%s: freeing memory for cipher %s\n", (const char *)qword_25453E968, *(const char **)(i[1] + 64));
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, i);
    free(i);
  }
  for (j = *(_QWORD **)((char *)&xmmword_25457334C + 12);
        *(_QWORD *)((char *)&xmmword_25457334C + 12);
        j = *(_QWORD **)((char *)&xmmword_25457334C + 12))
  {
    *(_QWORD *)((char *)&xmmword_25457334C + 12) = j[2];
    if (srtp_mod_crypto_kernel)
      srtp_err_report(3, "%s: freeing memory for authentication %s\n", (const char *)qword_25453E968, *(const char **)(j[1] + 48));
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, j);
    free(j);
  }
  for (k = (_QWORD *)qword_254573360; qword_254573360; k = (_QWORD *)qword_254573360)
  {
    qword_254573360 = k[1];
    if (srtp_mod_crypto_kernel)
      srtp_err_report(3, "%s: freeing memory for debug module %s\n", (const char *)qword_25453E968, *(const char **)(*k + 8));
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, k);
    free(k);
  }
  crypto_kernel = 0;
  return 0;
}

uint64_t srtp_replace_auth_type(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  if (!a1 || *(_DWORD *)(a1 + 64) != a2)
    return 2;
  v4 = srtp_auth_type_test(a1, *(unsigned int **)(a1 + 56));
  if ((_DWORD)v4)
    return v4;
  v6 = *(_QWORD **)((char *)&xmmword_25457334C + 12);
  if (*(_QWORD *)((char *)&xmmword_25457334C + 12))
  {
    while (1)
    {
      v7 = v6[1];
      if (*(_DWORD *)v6 == a2)
        break;
      if (v7 == a1)
        return 2;
      v6 = (_QWORD *)v6[2];
      if (!v6)
        goto LABEL_9;
    }
    v4 = srtp_auth_type_test(a1, *(unsigned int **)(v7 + 56));
    if ((_DWORD)v4)
      return v4;
    goto LABEL_13;
  }
LABEL_9:
  v8 = malloc_type_calloc(1uLL, 0x18uLL, 0xAF789EA2uLL);
  if (v8)
  {
    v6 = v8;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v8);
    v6[2] = *(_QWORD *)((char *)&xmmword_25457334C + 12);
    *(_QWORD *)((char *)&xmmword_25457334C + 12) = v6;
LABEL_13:
    v6[1] = a1;
    *(_DWORD *)v6 = a2;
    return 0;
  }
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x18uLL);
  return 3;
}

char *srtp_octet_string_hex_string(char *a1, int a2)
{
  unint64_t v3;
  char *result;
  unint64_t i;
  char *v6;
  char v7;

  if (a2 <= 512)
    v3 = (2 * a2);
  else
    v3 = 1022;
  result = bit_string;
  if ((int)v3 < 1)
  {
    bit_string[0] = 0;
  }
  else
  {
    for (i = 0; i < v3; i += 2)
    {
      v6 = &bit_string[i];
      *v6 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*a1 >> 4];
      v7 = *a1++;
      v6[1] = __const_srtp_nibble_to_hex_char_buf[v7 & 0xF];
    }
    bit_string[i] = 0;
  }
  return result;
}

char *v128_hex_string(unsigned __int8 *a1)
{
  char v2;
  char *result;

  v2 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*a1 >> 4];
  result = bit_string;
  bit_string[0] = v2;
  byte_254573369 = __const_srtp_nibble_to_hex_char_buf[*a1 & 0xF];
  byte_25457336A = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[1] >> 4];
  byte_25457336B = __const_srtp_nibble_to_hex_char_buf[a1[1] & 0xF];
  LOBYTE(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[2] >> 4];
  BYTE1(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a1[2] & 0xF];
  BYTE2(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[3] >> 4];
  BYTE3(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a1[3] & 0xF];
  BYTE4(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[4] >> 4];
  BYTE5(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a1[4] & 0xF];
  BYTE6(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[5] >> 4];
  BYTE7(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a1[5] & 0xF];
  BYTE8(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[6] >> 4];
  BYTE9(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a1[6] & 0xF];
  BYTE10(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[7] >> 4];
  BYTE11(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a1[7] & 0xF];
  BYTE12(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[8] >> 4];
  BYTE13(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a1[8] & 0xF];
  BYTE14(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[9] >> 4];
  HIBYTE(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[a1[9] & 0xF];
  byte_25457337C = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[10] >> 4];
  byte_25457337D = __const_srtp_nibble_to_hex_char_buf[a1[10] & 0xF];
  byte_25457337E = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[11] >> 4];
  byte_25457337F = __const_srtp_nibble_to_hex_char_buf[a1[11] & 0xF];
  byte_254573380 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[12] >> 4];
  byte_254573381 = __const_srtp_nibble_to_hex_char_buf[a1[12] & 0xF];
  byte_254573382 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[13] >> 4];
  byte_254573383 = __const_srtp_nibble_to_hex_char_buf[a1[13] & 0xF];
  byte_254573384 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[14] >> 4];
  byte_254573385 = __const_srtp_nibble_to_hex_char_buf[a1[14] & 0xF];
  byte_254573386 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)a1[15] >> 4];
  byte_254573387 = __const_srtp_nibble_to_hex_char_buf[a1[15] & 0xF];
  byte_254573388 = 0;
  return result;
}

uint64_t bitvector_alloc(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v3 = a2 + 31;
  v4 = (unint64_t)(a2 + 31) >> 3;
  v5 = v4 & 0x1FFFFFFFFFFFFFFCLL;
  if ((v4 & 0x1FFFFFFFFFFFFFFCLL) == 0)
  {
LABEL_8:
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)a1 = 0;
    return 0xFFFFFFFFLL;
  }
  v6 = malloc_type_calloc(1uLL, v4 & 0x1FFFFFFFFFFFFFFCLL, 0xAF789EA2uLL);
  if (!v6)
  {
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, v5);
    goto LABEL_8;
  }
  v7 = v6;
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v6);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)a1 = v3 & 0xFFFFFFE0;
  bzero(v7, (v3 & 0xFFFFFFE0) >> 3);
  return 0;
}

void bitvector_left_shift(unsigned int *a1, int a2)
{
  unint64_t v2;
  int v3;
  signed int v4;
  unsigned int v5;
  uint64_t v6;
  int8x16_t *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  _DWORD *v19;
  int *v20;
  int v21;
  int v22;
  uint32x4_t v23;
  int8x16_t *v24;
  uint32x4_t v25;
  uint64_t v26;
  int8x16_t v27;
  uint64_t v28;
  int *v29;
  __int32 *v30;

  v2 = *a1;
  if ((int)v2 <= a2)
  {
    v10 = (void *)*((_QWORD *)a1 + 1);
    v11 = v2 >> 3;
LABEL_7:
    bzero(v10, v11);
    return;
  }
  v3 = a2 >> 5;
  v4 = v2 >> 5;
  v5 = a2 & 0x1F;
  if ((a2 & 0x1F) != 0)
  {
    v6 = (v4 + ~v3);
    v7 = (int8x16_t *)*((_QWORD *)a1 + 1);
    if ((int)v6 < 1)
      goto LABEL_28;
    v8 = 32 - v5;
    if (v6 >= 8)
    {
      v9 = 0;
      if ((unint64_t)(4 * v3 + 31) >= 0x20 && (unint64_t)(-4 * v3 - 4) >= 0x20)
      {
        v9 = v6 & 0x7FFFFFF8;
        v23 = (uint32x4_t)vdupq_n_s32(v8);
        v24 = v7 + 1;
        v25 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        v26 = v6 & 0xFFFFFFF8;
        do
        {
          v27 = veorq_s8((int8x16_t)vshlq_u32(*(uint32x4_t *)((char *)v24 + 4 * v3 + 4), v23), (int8x16_t)vshlq_u32(*(uint32x4_t *)((char *)v24 + 4 * v3), v25));
          v24[-1] = veorq_s8((int8x16_t)vshlq_u32(*(uint32x4_t *)((char *)v24 + 4 * v3 - 12), v23), (int8x16_t)vshlq_u32(*(uint32x4_t *)((char *)&v24[-1] + 4 * v3), v25));
          *v24 = v27;
          v24 += 2;
          v26 -= 8;
        }
        while (v26);
        if (v9 == v6)
        {
LABEL_28:
          v7->i32[(int)v6] = (unsigned __int32)v7->i32[v4 - 1] >> v5;
          if (a2 < 32)
            return;
          goto LABEL_17;
        }
      }
    }
    else
    {
      v9 = 0;
    }
    v28 = v6 - v9;
    v29 = &v7->i32[v9];
    v30 = &v7->i32[v9 + 1 + v3];
    do
    {
      *v29++ = (*v30 << v8) ^ (*(v30 - 1) >> v5);
      ++v30;
      --v28;
    }
    while (v28);
    goto LABEL_28;
  }
  v12 = (v4 - v3);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = *((_QWORD *)a1 + 1);
    if (v12 < 8)
      goto LABEL_14;
    if ((unint64_t)(-4 * v3) < 0x20)
      goto LABEL_14;
    v13 = v12 & 0x7FFFFFF8;
    v15 = v12 & 0xFFFFFFF8;
    v16 = (_OWORD *)*((_QWORD *)a1 + 1);
    do
    {
      v17 = *(_OWORD *)((char *)v16 + 4 * v3 + 16);
      *v16 = *(_OWORD *)((char *)v16 + 4 * v3);
      v16[1] = v17;
      v16 += 2;
      v15 -= 8;
    }
    while (v15);
    if (v13 != v12)
    {
LABEL_14:
      v18 = v12 - v13;
      v19 = (_DWORD *)(v14 + 4 * v13);
      v20 = (int *)(v14 + 4 * (v13 + v3));
      do
      {
        v21 = *v20++;
        *v19++ = v21;
        --v18;
      }
      while (v18);
    }
  }
  if (a2 >= 32)
  {
LABEL_17:
    v10 = (void *)(*((_QWORD *)a1 + 1) + 4 * (v4 - v3));
    if (v4 <= v4 - v3 + 1)
      v22 = v4 - v3 + 1;
    else
      v22 = v4;
    v11 = 4 * (v3 + ~v4 + v22) + 4;
    goto LABEL_7;
  }
}

void srtp_ekt_write_data(unsigned __int16 **a1, char *a2, unsigned int a3, _DWORD *a4, unint64_t a5)
{
  uint64_t v9;
  char *v10;
  int v11;
  size_t v12;
  const char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  char *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;

  if (a1)
  {
    v9 = a3;
    if (a3)
      bzero(a2, a3);
    v10 = &a2[v9];
    v11 = *((unsigned __int8 *)*a1 + 2);
    if (v11 == 1)
      v12 = 24;
    else
      v12 = 0;
    memcpy(v10, (char *)a1 + 10, v12);
    if (mod_srtp)
    {
      v13 = off_25453E988;
      if (v11 == 1)
      {
        v14 = 0;
        v15 = v10;
        do
        {
          v16 = &bit_string[v14];
          *v16 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*v15 >> 4];
          v17 = *v15++;
          v16[1] = __const_srtp_nibble_to_hex_char_buf[v17 & 0xF];
          v18 = v14 + 2;
          v19 = v14 >= 0x2E;
          v14 += 2;
        }
        while (!v19);
      }
      else
      {
        v18 = 0;
      }
      bit_string[v18] = 0;
      srtp_err_report(3, "%s: writing EKT EMK: %s,\n", v13, bit_string);
    }
    v20 = &v10[v12];
    v21 = bswap32(a5 >> 16);
    *(_DWORD *)v20 = v21;
    if (mod_srtp)
    {
      bit_string[0] = __const_srtp_nibble_to_hex_char_buf[v21 >> 4];
      byte_254573369 = __const_srtp_nibble_to_hex_char_buf[*v20 & 0xF];
      byte_25457336A = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[1] >> 4];
      byte_25457336B = __const_srtp_nibble_to_hex_char_buf[v20[1] & 0xF];
      LOBYTE(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[2] >> 4];
      BYTE1(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[v20[2] & 0xF];
      BYTE2(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[3] >> 4];
      BYTE3(xmmword_25457336C) = __const_srtp_nibble_to_hex_char_buf[v20[3] & 0xF];
      *(_WORD *)((char *)&xmmword_25457336C + 3) = BYTE3(xmmword_25457336C);
      srtp_err_report(3, "%s: writing EKT ROC: %s,\n", off_25453E988, bit_string);
      v22 = mod_srtp;
      v23 = bswap32(a5) >> 16;
      *((_WORD *)v20 + 2) = v23;
      if (v22)
      {
        bit_string[0] = __const_srtp_nibble_to_hex_char_buf[v23 >> 4];
        byte_254573369 = __const_srtp_nibble_to_hex_char_buf[v20[4] & 0xF];
        byte_25457336A = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[5] >> 4];
        byte_25457336B = __const_srtp_nibble_to_hex_char_buf[v20[5] & 0xF];
        LOBYTE(xmmword_25457336C) = 0;
        srtp_err_report(3, "%s: writing EKT ISN: %s,\n", off_25453E988, bit_string);
        v24 = mod_srtp;
        v25 = bswap32(**a1) >> 16;
        *((_WORD *)v20 + 3) = v25;
        if (v24)
        {
          bit_string[0] = __const_srtp_nibble_to_hex_char_buf[v25 >> 4];
          byte_254573369 = __const_srtp_nibble_to_hex_char_buf[v20[6] & 0xF];
          byte_25457336A = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v20[7] >> 4];
          byte_25457336B = __const_srtp_nibble_to_hex_char_buf[v20[7] & 0xF];
          LOBYTE(xmmword_25457336C) = 0;
          srtp_err_report(3, "%s: writing EKT SPI: %s,\n", off_25453E988, bit_string);
        }
        goto LABEL_23;
      }
    }
    else
    {
      *((_WORD *)v20 + 2) = bswap32(a5) >> 16;
    }
    *((_WORD *)v20 + 3) = bswap32(**a1) >> 16;
LABEL_23:
    *a4 += v12 + 8;
    return;
  }
  if (mod_srtp)
    srtp_err_report(3, "%s: EKT not in use\n", off_25453E988);
}

double srtp_err_report(uint64_t a1, char *__format, ...)
{
  double result;
  size_t v4;
  va_list v5;
  char __str[16];
  uint64_t v7;
  va_list va;

  va_start(va, __format);
  v7 = *MEMORY[0x24BDAC8D0];
  if (srtp_err_report_handler)
  {
    va_copy(v5, va);
    if (vsnprintf(__str, 0x200uLL, __format, va) >= 1)
    {
      v4 = strlen(__str);
      if (v4)
      {
        if (__str[v4 - 1] == 10)
          __str[v4 - 1] = 0;
      }
      srtp_err_report_handler(a1, __str);
      return 0.0;
    }
  }
  return result;
}

uint64_t srtp_hmac_alloc(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  void *v7;
  void *v8;
  char *v9;
  _QWORD *v10;
  _DWORD *v11;

  if (srtp_mod_hmac)
  {
    srtp_err_report(3, "%s: allocating auth func with key length %d\n", off_25453E978, a2);
    if (srtp_mod_hmac)
      srtp_err_report(3, "%s:                           tag length %d\n", off_25453E978, a3);
  }
  if (a3 > 20)
    return 2;
  v7 = malloc_type_calloc(1uLL, 0x20uLL, 0xAF789EA2uLL);
  if (v7)
  {
    v8 = v7;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v7);
    *(_QWORD *)a1 = v8;
    v9 = (char *)malloc_type_malloc(0x70uLL, 0x30772F57uLL);
    if (v9)
    {
      *(_QWORD *)v9 = 104;
      *(_OWORD *)(v9 + 8) = 0u;
      *(_OWORD *)(v9 + 24) = 0u;
      *(_OWORD *)(v9 + 40) = 0u;
      *(_OWORD *)(v9 + 56) = 0u;
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *((_QWORD *)v9 + 13) = 0;
      *(_QWORD *)(*(_QWORD *)a1 + 8) = v9 + 8;
      v10 = *(_QWORD **)a1;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8))
      {
LABEL_11:
        result = 0;
        *v10 = srtp_hmac;
        v11 = *(_DWORD **)a1;
        v11[4] = a3;
        v11[5] = a2;
        v11[6] = 0;
        return result;
      }
    }
    else
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      *(_QWORD *)(*(_QWORD *)a1 + 8) = 0;
      v10 = *(_QWORD **)a1;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8))
        goto LABEL_11;
    }
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v10);
    free(v10);
  }
  else if (srtp_mod_alloc)
  {
    srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x20uLL);
  }
  *(_QWORD *)a1 = 0;
  return 3;
}

uint64_t srtp_hmac_dealloc(char **a1)
{
  HMAC_CTX_free(a1[1]);
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, a1);
  free(a1);
  return 0;
}

uint64_t srtp_hmac_init(HMAC_CTX *a1, const void *a2, int a3)
{
  int v6;

  if (pthread_once(&EVP_sha1_once, (void (*)(void))EVP_sha1_init))
    abort();
  HMAC_Init_ex(a1, a2, a3, (const EVP_MD *)&EVP_sha1_storage, 0);
  if (v6)
    return 0;
  else
    return 7;
}

uint64_t srtp_hmac_compute(HMAC_CTX *a1, uint64_t a2, int a3, signed int a4, void *a5)
{
  uint64_t result;
  int v9;
  int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  char *v17;
  unsigned int len;
  unsigned __int8 md[20];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a4 > 20)
    return 2;
  ((void (*)(EVP_MD_CTX *, uint64_t, _QWORD))a1->md_ctx.digest->init)(&a1->md_ctx, a2, a3);
  len = 0;
  HMAC_Final(a1, md, &len);
  v10 = v9;
  result = 7;
  if (v10 && len >= a4)
  {
    if (a4 < 1)
    {
      if (srtp_mod_hmac)
      {
        v11 = 0;
        v12 = off_25453E978;
LABEL_15:
        bit_string[v11] = 0;
        srtp_err_report(3, "%s: output: %s\n", v12, bit_string);
      }
    }
    else
    {
      memcpy(a5, md, a4);
      if (srtp_mod_hmac)
      {
        v11 = 0;
        v12 = off_25453E978;
        LODWORD(v13) = 2 * a4;
        if ((2 * a4) <= 2)
          v13 = 2;
        else
          v13 = v13;
        v14 = ((v13 - 1) & 0xFFFFFFFFFFFFFFFELL) + 2;
        v15 = md;
        do
        {
          v16 = *v15++;
          v17 = &bit_string[v11];
          *v17 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)v16 >> 4];
          v17[1] = __const_srtp_nibble_to_hex_char_buf[v16 & 0xF];
          v11 += 2;
        }
        while (v14 != v11);
        goto LABEL_15;
      }
    }
    return 0;
  }
  return result;
}

uint64_t srtp_hmac_update(uint64_t a1, unsigned __int8 *a2, int a3)
{
  const char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char v11;

  if (srtp_mod_hmac)
  {
    v6 = off_25453E978;
    if (a3 <= 512)
      v7 = (2 * a3);
    else
      v7 = 1022;
    if ((int)v7 < 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v9 = (char *)a2;
      do
      {
        v10 = &bit_string[v8];
        *v10 = __const_srtp_nibble_to_hex_char_buf[(unint64_t)*v9 >> 4];
        v11 = *v9++;
        v10[1] = __const_srtp_nibble_to_hex_char_buf[v11 & 0xF];
        v8 += 2;
      }
      while (v8 < v7);
    }
    bit_string[v8] = 0;
    srtp_err_report(3, "%s: input: %s\n", v6, bit_string);
  }
  (*(void (**)(uint64_t, unsigned __int8 *, _QWORD))(*(_QWORD *)(a1 + 8) + 24))(a1 + 8, a2, a3);
  return 0;
}

uint64_t srtp_hmac_start(HMAC_CTX *a1)
{
  int v1;

  HMAC_Init_ex(a1, 0, 0, 0, 0);
  if (v1)
    return 0;
  else
    return 7;
}

uint64_t srtp_null_auth_alloc(uint64_t a1, int a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;

  if (srtp_mod_auth)
  {
    srtp_err_report(3, "%s: allocating auth func with key length %d\n", off_25453E948, a2);
    if (srtp_mod_auth)
      srtp_err_report(3, "%s:                           tag length %d\n", off_25453E948, a3);
  }
  v6 = malloc_type_calloc(1uLL, 0x21uLL, 0xAF789EA2uLL);
  if (v6)
  {
    v7 = v6;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v6);
    v8 = 0;
    *(_QWORD *)a1 = v7;
    *v7 = &srtp_null_auth;
    *(_QWORD *)(*(_QWORD *)a1 + 8) = v7 + 4;
    v9 = *(_DWORD **)a1;
    v9[5] = a2;
    v9[6] = a3;
    v9[4] = a3;
  }
  else
  {
    v8 = 3;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x21uLL);
  }
  return v8;
}

uint64_t srtp_null_auth_dealloc(_BYTE *a1)
{
  a1[32] = 0;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, a1);
  free(a1);
  return 0;
}

uint64_t srtp_null_auth_init()
{
  return 0;
}

uint64_t srtp_null_auth_compute()
{
  return 0;
}

uint64_t srtp_null_auth_update()
{
  return 0;
}

uint64_t srtp_null_auth_start()
{
  return 0;
}

uint64_t srtp_null_cipher_alloc(uint64_t a1, int a2)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t result;

  if (srtp_mod_cipher)
    srtp_err_report(3, "%s: allocating cipher with key length %d\n", off_25453E958, a2);
  v4 = malloc_type_calloc(1uLL, 0x18uLL, 0xAF789EA2uLL);
  if (v4)
  {
    v5 = v4;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v4);
    result = 0;
    *(_QWORD *)a1 = v5;
    v5[5] = 0;
    *(_QWORD *)v5 = &srtp_null_cipher;
    *(_QWORD *)(*(_QWORD *)a1 + 8) = 1;
    *(_DWORD *)(*(_QWORD *)a1 + 16) = a2;
  }
  else
  {
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x18uLL);
    *(_QWORD *)a1 = 0;
    return 3;
  }
  return result;
}

uint64_t srtp_null_cipher_dealloc(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, a1);
  free(a1);
  return 0;
}

uint64_t srtp_null_cipher_init()
{
  if (srtp_mod_cipher)
    srtp_err_report(3, "%s: initializing null cipher\n", off_25453E958);
  return 0;
}

uint64_t srtp_null_cipher_encrypt()
{
  return 0;
}

uint64_t srtp_null_cipher_set_iv()
{
  return 0;
}

uint64_t srtp_rdb_add_index(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t result;
  int v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _DWORD *v21;
  int *v22;
  int v23;
  uint32x4_t v24;
  int8x16_t *v25;
  uint32x4_t v26;
  uint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  int *v30;
  _DWORD *v31;
  void *v32;
  int v33;

  v2 = a2 - *(_DWORD *)a1;
  if (a2 < *(_DWORD *)a1)
    return 9;
  v5 = v2 - 127;
  if (v2 <= 0x7F)
  {
    result = 0;
    *(_DWORD *)(a1 + 4 * (v2 >> 5) + 8) |= 1 << v2;
    return result;
  }
  v6 = (_QWORD *)(a1 + 8);
  if (v5 < 128)
  {
    v7 = v5 >> 5;
    v8 = v5 & 0x1F;
    if ((v5 & 0x1F) == 0)
    {
      v13 = 0;
      v14 = 4 - v7;
      if (4 - v7 <= 1)
        v15 = 1;
      else
        v15 = v14;
      if (v15 < 0xC)
        goto LABEL_22;
      if ((unint64_t)(-4 * v7) < 0x20)
        goto LABEL_22;
      v13 = v15 & 0x7FFFFFF8;
      v16 = 4 * v7;
      v17 = v13;
      v18 = a1;
      do
      {
        v19 = *(_OWORD *)(v18 + v16 + 24);
        *(_OWORD *)(v18 + 8) = *(_OWORD *)(v18 + v16 + 8);
        *(_OWORD *)(v18 + 24) = v19;
        v18 += 32;
        v17 -= 8;
      }
      while (v17);
      if (v13 != v15)
      {
LABEL_22:
        v20 = v15 - v13;
        v21 = (_DWORD *)(a1 + 4 * v13 + 8);
        v22 = (int *)(a1 + 4 * (v13 + v7) + 8);
        do
        {
          v23 = *v22++;
          *v21++ = v23;
          --v20;
        }
        while (v20);
      }
      goto LABEL_33;
    }
    v9 = 3 - v7;
    if (v5 <= 95)
    {
      v10 = 32 - v8;
      if ((int)v9 <= 1)
        v11 = 1;
      else
        v11 = v9;
      if (v11 >= 8)
      {
        v12 = 0;
        if ((unint64_t)(-4 * v7) >= 0x20 && (unint64_t)(-4 * v7 - 4) >= 0x20)
        {
          v12 = v11 & 0x7FFFFFF8;
          v24 = (uint32x4_t)vdupq_n_s32(v10);
          v25 = (int8x16_t *)(a1 + 24);
          v26 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v8));
          v27 = v12;
          do
          {
            v28 = veorq_s8((int8x16_t)vshlq_u32(*(uint32x4_t *)((char *)v25 + 4 * v7 + 4), v24), (int8x16_t)vshlq_u32(*(uint32x4_t *)((char *)v25 + 4 * v7), v26));
            v25[-1] = veorq_s8((int8x16_t)vshlq_u32(*(uint32x4_t *)((char *)v25 + 4 * v7 - 12), v24), (int8x16_t)vshlq_u32(*(uint32x4_t *)((char *)&v25[-1] + 4 * v7), v26));
            *v25 = v28;
            v25 += 2;
            v27 -= 8;
          }
          while (v27);
          if (v12 == v11)
            goto LABEL_32;
        }
      }
      else
      {
        v12 = 0;
      }
      v29 = v11 - v12;
      v30 = (int *)(a1 + 4 * v12 + 8);
      v31 = (_DWORD *)(a1 + 4 * (v12 + v7) + 12);
      do
      {
        *v30++ = (*v31 << v10) ^ (*(v31 - 1) >> v8);
        ++v31;
        --v29;
      }
      while (v29);
    }
LABEL_32:
    *((_DWORD *)v6 + v9) = *(_DWORD *)(a1 + 20) >> v8;
    v14 = 4 - v7;
LABEL_33:
    if (v5 >= 32)
    {
      v32 = (char *)v6 - 4 * v7 + 16;
      if (v14 <= 3)
        v33 = 3;
      else
        v33 = v14;
      bzero(v32, 4 * (v7 + v33 - 4) + 4);
    }
    goto LABEL_38;
  }
  *v6 = 0;
  *(_QWORD *)(a1 + 16) = 0;
LABEL_38:
  result = 0;
  *(_DWORD *)(a1 + 20) |= 0x80000000;
  *(_DWORD *)a1 += v5;
  return result;
}

uint64_t srtp_rdbx_add_index(uint64_t a1, int a2)
{
  int v3;

  if (a2 < 1)
  {
    v3 = a2 + *(_DWORD *)(a1 + 8);
  }
  else
  {
    *(_QWORD *)a1 += (unsigned __int16)a2;
    bitvector_left_shift((unsigned int *)(a1 + 8), a2);
    v3 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * ((v3 - 1) >> 5)) |= 1 << (v3 - 1);
  return 0;
}

uint64_t srtp_rdbx_estimate_index(unsigned __int16 *a1, unint64_t *a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= 0x8000uLL)
  {
    *a2 = a3;
    return a3 - *a1;
  }
  else
  {
    v4 = v3 >> 16;
    v5 = (unsigned __int16)*(_QWORD *)a1;
    v6 = (v3 >> 15) & 1;
    v7 = a3 - v5;
    if (v5 - 0x8000 <= a3)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v5 - 0x8000 > a3)
      v7 = (a3 | 0x10000) - v5;
    v9 = a3 - v5;
    if (v9 > 0x8000)
    {
      LODWORD(v4) = v4 - 1;
      v9 -= 0x10000;
    }
    v10 = v6 == 0;
    if (v6)
      v11 = v8;
    else
      v11 = v4;
    if (v10)
      result = v9;
    else
      result = v7;
    *a2 = (unsigned __int16)a3 | ((unint64_t)v11 << 16);
  }
  return result;
}

uint64_t srtp_rdbx_set_roc_seq(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if ((unint64_t)a2 < *(_QWORD *)a1 >> 16)
    return 10;
  *(_QWORD *)a1 = a3 | ((unint64_t)a2 << 16);
  bzero(*(void **)(a1 + 16), (unint64_t)*(unsigned int *)(a1 + 8) >> 3);
  return 0;
}

uint64_t srtp_stream_dealloc(_QWORD *a1, uint64_t a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  size_t v25;
  void *v26;
  void *v27;
  void *v28;

  v4 = (void *)a1[1];
  if (!v4)
    goto LABEL_58;
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  if (!(_DWORD)v5)
    goto LABEL_55;
  v6 = 0;
  v7 = 80;
  do
  {
    v8 = a1[1];
    v9 = v8 + v7;
    if (!a2 || (_DWORD)v5 != *(_DWORD *)(a2 + 16) || (v10 = *(_QWORD *)(a2 + 8)) == 0)
    {
      v11 = 0;
      v12 = *(_QWORD *)(v9 - 80);
      v13 = 1;
      if (!v12)
        goto LABEL_15;
LABEL_13:
      if (!*(_QWORD *)v12)
        return 2;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      if ((_DWORD)result)
        return result;
      goto LABEL_15;
    }
    v11 = (_QWORD *)(v10 + v7 - 80);
    v12 = *(_QWORD *)(v9 - 80);
    if (v12 == *v11)
      goto LABEL_18;
    v13 = 0;
    if (v12)
      goto LABEL_13;
LABEL_15:
    if (v13)
    {
      v15 = *(_QWORD *)(v8 + v7 - 64);
      v16 = 1;
      if (!v15)
        goto LABEL_21;
LABEL_20:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      if ((_DWORD)result)
        return result;
      goto LABEL_21;
    }
LABEL_18:
    v15 = *(_QWORD *)(v8 + v7 - 64);
    if (v15 == v11[2])
      goto LABEL_24;
    v16 = 0;
    if (v15)
      goto LABEL_20;
LABEL_21:
    if (v16)
    {
      v17 = *(_QWORD *)(v8 + v7 - 72);
      v18 = 1;
      if (!v17)
        goto LABEL_28;
LABEL_26:
      if (!*(_QWORD *)v17)
        return 2;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      if ((_DWORD)result)
        return result;
      goto LABEL_28;
    }
LABEL_24:
    v17 = *(_QWORD *)(v8 + v7 - 72);
    if (v17 == v11[1])
      goto LABEL_31;
    v18 = 0;
    if (v17)
      goto LABEL_26;
LABEL_28:
    if (v18)
    {
      v19 = *(_QWORD *)(v8 + v7 - 56);
      v20 = 1;
      if (!v19)
        goto LABEL_35;
      goto LABEL_33;
    }
LABEL_31:
    v19 = *(_QWORD *)(v8 + v7 - 56);
    if (v19 == v11[3])
      goto LABEL_37;
    v20 = 0;
    if (!v19)
      goto LABEL_35;
LABEL_33:
    if (!*(_QWORD *)v19)
      return 2;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if ((_DWORD)result)
      return result;
LABEL_35:
    if (!v20)
    {
LABEL_37:
      v22 = 0;
      v21 = *(_QWORD *)(v8 + v7 - 48);
      if (v21 == v11[4])
        goto LABEL_40;
      goto LABEL_38;
    }
    v21 = *(_QWORD *)(v8 + v7 - 48);
    v22 = 1;
LABEL_38:
    if (v21)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      if ((_DWORD)result)
        return result;
    }
LABEL_40:
    v23 = v8 + v7;
    *(_DWORD *)(v23 - 32) = 0;
    *(_QWORD *)(v23 - 40) = 0;
    *(_QWORD *)(v23 - 28) = 0;
    *(_DWORD *)(v23 - 20) = 0;
    v24 = *(void **)(v8 + v7 - 16);
    if (v24)
    {
      v25 = *(unsigned int *)(v23 - 8);
      if ((_DWORD)v25)
      {
        bzero(*(void **)(v8 + v7 - 16), v25);
        v24 = *(void **)(v23 - 16);
      }
      if (srtp_mod_alloc)
        srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v24);
      free(v24);
      *(_QWORD *)(v23 - 16) = 0;
    }
    v26 = *(void **)(v8 + v7);
    if ((v22 & 1) != 0)
    {
      if (!v26)
        goto LABEL_5;
    }
    else if (!v26 || v26 == (void *)v11[10])
    {
      goto LABEL_5;
    }
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v26);
    free(v26);
LABEL_5:
    ++v6;
    v5 = *((unsigned int *)a1 + 4);
    v7 += 88;
  }
  while (v6 < v5);
  v4 = (void *)a1[1];
LABEL_55:
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v4);
  free(v4);
LABEL_58:
  v27 = (void *)a1[5];
  if (v27)
  {
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v27);
    free(v27);
  }
  a1[5] = 0;
  *((_DWORD *)a1 + 8) = 0;
  v28 = (void *)a1[13];
  if (!a2)
  {
    if (!v28)
      goto LABEL_70;
LABEL_67:
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v28);
    free(v28);
    goto LABEL_70;
  }
  if (v28 && v28 != *(void **)(a2 + 104))
    goto LABEL_67;
LABEL_70:
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, a1);
  free(a1);
  return 0;
}

uint64_t srtp_stream_alloc(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __n128 v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)(uint64_t, _QWORD, _QWORD, __n128);
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)(uint64_t, _QWORD, _QWORD);
  uint64_t v20;
  uint64_t (**v21)(uint64_t, _QWORD, _QWORD);
  uint64_t v22;
  uint64_t (**v23)(uint64_t, _QWORD, _QWORD);
  void *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (**v42)(uint64_t, uint64_t, _QWORD);

  v4 = malloc_type_calloc(1uLL, 0x80uLL, 0xAF789EA2uLL);
  if (!v4)
  {
    if (srtp_mod_alloc)
    {
      v8 = 3;
      srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x80uLL);
      return v8;
    }
    return 3;
  }
  v5 = v4;
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v4);
  *a1 = v5;
  if (*(_QWORD *)(a2 + 56))
  {
    *((_DWORD *)v5 + 4) = 1;
    v6 = v5 + 2;
    v7 = 88;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 72);
    *((_DWORD *)v5 + 4) = v9;
    v6 = v5 + 2;
    if (!(_DWORD)v9)
    {
LABEL_51:
      v5[1] = 0;
LABEL_52:
      srtp_stream_dealloc(v5, 0);
      return 3;
    }
    v7 = 88 * v9;
  }
  v10 = malloc_type_calloc(1uLL, v7, 0xAF789EA2uLL);
  if (!v10)
  {
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, v7);
    goto LABEL_51;
  }
  v12 = v10;
  if (srtp_mod_alloc)
    v11.n128_f64[0] = srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v10);
  v5[1] = v12;
  if (!*((_DWORD *)v5 + 4))
  {
    LODWORD(v26) = 0;
LABEL_55:
    v5[12] = 0;
    if (*(_QWORD *)(a2 + 104))
    {
      v27 = *(unsigned int *)(a2 + 112);
      if ((int)v27 >= 1)
      {
        v28 = 4 * v27;
        v29 = malloc_type_calloc(1uLL, 4 * v27, 0xAF789EA2uLL);
        if (v29)
        {
          v30 = v29;
          if (srtp_mod_alloc)
            srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v29);
          v5[13] = v30;
          memcpy(v30, *(const void **)(a2 + 104), 4 * *(int *)(a2 + 112));
          *((_DWORD *)v5 + 28) = *(_DWORD *)(a2 + 112);
          v31 = *(_DWORD *)(a2 + 8);
          if (v31 == 6)
          {
            v32 = 30;
            v31 = 1;
          }
          else if (v31 == 7)
          {
            v32 = 46;
            v31 = 5;
          }
          else
          {
            v32 = *(unsigned int *)(a2 + 12);
          }
          if (!*v6)
            return 0;
          v40 = 0;
          while (crypto_kernel == 1)
          {
            v41 = *(_QWORD *)((char *)&xmmword_25457334C + 4);
            if (!*(_QWORD *)((char *)&xmmword_25457334C + 4))
              goto LABEL_88;
            while (*(_DWORD *)v41 != v31)
            {
              v41 = *(_QWORD *)(v41 + 16);
              if (!v41)
                goto LABEL_88;
            }
            v42 = *(uint64_t (***)(uint64_t, uint64_t, _QWORD))(v41 + 8);
            if (!v42)
              goto LABEL_88;
            v8 = (*v42)(v5[1] + 88 * v40 + 8, v32, 0);
            if ((_DWORD)v8)
              goto LABEL_89;
            if (++v40 >= (unint64_t)*v6)
              return v8;
          }
          goto LABEL_91;
        }
        if (srtp_mod_alloc)
          srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, v28);
        v5[13] = 0;
        goto LABEL_52;
      }
    }
    if ((_DWORD)v26)
    {
      v33 = v5[1];
      v34 = v26;
      if ((_DWORD)v26 == 1)
      {
        v35 = 0;
      }
      else
      {
        v35 = v26 & 0xFFFFFFFE;
        v36 = (_QWORD *)(v33 + 96);
        v37 = v34 & 0xFFFFFFFE;
        do
        {
          *(v36 - 11) = 0;
          *v36 = 0;
          v36 += 22;
          v37 -= 2;
        }
        while (v37);
        if (v35 == v34)
          goto LABEL_71;
      }
      v38 = v34 - v35;
      v39 = (_QWORD *)(v33 + 88 * v35 + 8);
      do
      {
        *v39 = 0;
        v39 += 11;
        --v38;
      }
      while (v38);
    }
LABEL_71:
    v8 = 0;
    v5[13] = 0;
    *((_DWORD *)v5 + 28) = 0;
    return v8;
  }
  v13 = 0;
  while (crypto_kernel == 1)
  {
    v14 = *(_QWORD *)((char *)&xmmword_25457334C + 4);
    if (!*(_QWORD *)((char *)&xmmword_25457334C + 4))
      goto LABEL_88;
    v15 = v5[1];
    while (*(_DWORD *)v14 != *(_DWORD *)(a2 + 8))
    {
      v14 = *(_QWORD *)(v14 + 16);
      if (!v14)
        goto LABEL_88;
    }
    v16 = *(uint64_t (***)(uint64_t, _QWORD, _QWORD, __n128))(v14 + 8);
    if (!v16)
      goto LABEL_88;
    v17 = (*v16)(v15 + 88 * v13, *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 24), v11);
    if ((_DWORD)v17)
      goto LABEL_93;
    if (crypto_kernel != 1)
      break;
    v18 = *(_QWORD *)((char *)&xmmword_25457334C + 12);
    if (!*(_QWORD *)((char *)&xmmword_25457334C + 12))
      goto LABEL_88;
    while (*(_DWORD *)v18 != *(_DWORD *)(a2 + 16))
    {
      v18 = *(_QWORD *)(v18 + 16);
      if (!v18)
        goto LABEL_88;
    }
    v19 = *(uint64_t (***)(uint64_t, _QWORD, _QWORD))(v18 + 8);
    if (!v19)
      goto LABEL_88;
    v17 = (*v19)(v15 + 88 * v13 + 16, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 24));
    if ((_DWORD)v17)
      goto LABEL_93;
    if (crypto_kernel != 1)
      break;
    v20 = *(_QWORD *)((char *)&xmmword_25457334C + 4);
    if (!*(_QWORD *)((char *)&xmmword_25457334C + 4))
      goto LABEL_88;
    while (*(_DWORD *)v20 != *(_DWORD *)(a2 + 32))
    {
      v20 = *(_QWORD *)(v20 + 16);
      if (!v20)
        goto LABEL_88;
    }
    v21 = *(uint64_t (***)(uint64_t, _QWORD, _QWORD))(v20 + 8);
    if (!v21)
      goto LABEL_88;
    v17 = (*v21)(v15 + 88 * v13 + 24, *(unsigned int *)(a2 + 36), *(unsigned int *)(a2 + 48));
    if ((_DWORD)v17)
      goto LABEL_93;
    if (crypto_kernel != 1)
      break;
    v22 = *(_QWORD *)((char *)&xmmword_25457334C + 12);
    if (!*(_QWORD *)((char *)&xmmword_25457334C + 12))
      goto LABEL_88;
    while (*(_DWORD *)v22 != *(_DWORD *)(a2 + 40))
    {
      v22 = *(_QWORD *)(v22 + 16);
      if (!v22)
        goto LABEL_88;
    }
    v23 = *(uint64_t (***)(uint64_t, _QWORD, _QWORD))(v22 + 8);
    if (!v23)
    {
LABEL_88:
      v8 = 1;
      goto LABEL_89;
    }
    v17 = (*v23)(v15 + 88 * v13 + 32, *(unsigned int *)(a2 + 44), *(unsigned int *)(a2 + 48));
    if ((_DWORD)v17)
    {
LABEL_93:
      v8 = v17;
      goto LABEL_89;
    }
    *(_QWORD *)(v15 + 88 * v13 + 64) = 0;
    v24 = malloc_type_calloc(1uLL, 0x10uLL, 0xAF789EA2uLL);
    if (!v24)
    {
      if (srtp_mod_alloc)
        srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x10uLL);
      *(_QWORD *)(v15 + 88 * v13 + 80) = 0;
      goto LABEL_52;
    }
    v25 = v24;
    if (srtp_mod_alloc)
      v11.n128_f64[0] = srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v24);
    *(_QWORD *)(v15 + 88 * v13++ + 80) = v25;
    v26 = *v6;
    if (v13 >= v26)
      goto LABEL_55;
  }
LABEL_91:
  v8 = 5;
LABEL_89:
  srtp_stream_dealloc(v5, 0);
  return v8;
}

uint64_t srtp_stream_clone(uint64_t a1, unsigned int a2, _QWORD **a3)
{
  char *v6;
  char *v7;
  unsigned int v8;
  size_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  _QWORD **v28;

  if (mod_srtp)
    srtp_err_report(3, "%s: cloning stream (SSRC: 0x%08x)\n", off_25453E988, bswap32(a2));
  v6 = (char *)malloc_type_calloc(1uLL, 0x80uLL, 0xAF789EA2uLL);
  if (!v6)
  {
    v25 = 3;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x80uLL);
    return v25;
  }
  v7 = v6;
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v6);
  *a3 = v7;
  v8 = *(_DWORD *)(a1 + 16);
  *((_DWORD *)v7 + 4) = v8;
  if (!v8)
  {
LABEL_27:
    *((_QWORD *)v7 + 1) = 0;
    srtp_stream_dealloc(*a3, a1);
    v25 = 3;
    goto LABEL_36;
  }
  v9 = 88 * v8;
  v10 = malloc_type_calloc(1uLL, v9, 0xAF789EA2uLL);
  if (!v10)
  {
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, v9);
    goto LABEL_27;
  }
  v11 = v10;
  v27 = a2;
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v10);
  v28 = a3;
  *((_QWORD *)v7 + 1) = v11;
  if (!*(_DWORD *)(a1 + 16))
  {
LABEL_20:
    v24 = *(unsigned int *)(a1 + 32);
    a3 = v28;
    if ((_DWORD)v24)
    {
      if (!bitvector_alloc((uint64_t)(v7 + 32), v24))
      {
        v25 = 0;
        *((_QWORD *)v7 + 8) = 0;
        *((_QWORD *)v7 + 9) = 0;
        *((_DWORD *)v7 + 22) = *(_DWORD *)(a1 + 88);
        *((_QWORD *)v7 + 3) = 0;
        *((_DWORD *)v7 + 14) = 0;
        *(_DWORD *)v7 = v27;
        *((_DWORD *)v7 + 29) = 0;
        *((_DWORD *)v7 + 12) = *(_DWORD *)(a1 + 48);
        *((_QWORD *)v7 + 10) = *(_QWORD *)(a1 + 80);
        *((_OWORD *)v7 + 6) = *(_OWORD *)(a1 + 96);
        *((_DWORD *)v7 + 28) = *(_DWORD *)(a1 + 112);
        a3 = (_QWORD **)(v7 + 120);
        goto LABEL_36;
      }
      v25 = 3;
    }
    else
    {
      v25 = 2;
    }
    srtp_stream_dealloc(*v28, a1);
    goto LABEL_36;
  }
  v12 = 0;
  v13 = 80;
  while (1)
  {
    v14 = *((_QWORD *)v7 + 1);
    v15 = v14 + v13;
    v16 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(v15 - 64) = *(_QWORD *)(v16 + v13 - 64);
    *(_OWORD *)(v15 - 80) = *(_OWORD *)(v16 + v13 - 80);
    *(_OWORD *)(v15 - 56) = *(_OWORD *)(v16 + v13 - 56);
    *(_DWORD *)(v15 - 8) = *(_DWORD *)(v16 + v13 - 8);
    v17 = *(unsigned int *)(v16 + v13 - 8);
    if (!(_DWORD)v17)
    {
      *(_QWORD *)(v15 - 16) = 0;
      goto LABEL_18;
    }
    v18 = malloc_type_calloc(1uLL, *(unsigned int *)(v16 + v13 - 8), 0xAF789EA2uLL);
    if (!v18)
      break;
    v19 = v18;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v18);
    *(_QWORD *)(v14 + v13 - 16) = v19;
    memcpy(v19, *(const void **)(v16 + v13 - 16), *(unsigned int *)(v15 - 8));
LABEL_18:
    v20 = v14 + v13;
    v21 = *(_QWORD *)(v16 + v13 - 40);
    *(_DWORD *)(v20 - 32) = *(_DWORD *)(v16 + v13 - 32);
    *(_QWORD *)(v20 - 40) = v21;
    v22 = *(_QWORD *)(v16 + v13 - 28);
    *(_DWORD *)(v20 - 20) = *(_DWORD *)(v16 + v13 - 20);
    *(_QWORD *)(v20 - 28) = v22;
    v23 = *(_QWORD *)(v16 + v13);
    if (!v23)
    {
      a3 = v28;
      srtp_stream_dealloc(*v28, a1);
      v25 = 2;
      goto LABEL_36;
    }
    *(_QWORD *)(v14 + v13) = v23;
    ++v12;
    v13 += 88;
    if (v12 >= *(unsigned int *)(a1 + 16))
      goto LABEL_20;
  }
  if (srtp_mod_alloc)
    srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, v17);
  *(_QWORD *)(v14 + v13 - 16) = 0;
  a3 = v28;
  srtp_stream_dealloc(*v28, a1);
  v25 = 5;
LABEL_36:
  *a3 = 0;
  return v25;
}

uint64_t srtp_stream_init_keys(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  signed int v16;
  signed int v17;
  int v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  uint64_t v22;
  signed int v23;
  unsigned int (**v24)(_QWORD **, uint64_t, _QWORD);
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  signed int v43;
  _QWORD **v44;
  int v45;
  __n128 v46;
  const char *v47;
  char *v48;
  char *v49;
  const char *v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  const char *v59;
  char *v60;
  int v61;
  __n128 v62;
  _DWORD *v63;
  int v64;
  uint64_t v65;
  const char *v66;
  char *v67;
  const char *v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  const char *v76;
  char *v77;
  const char *v78;
  _QWORD **v79;
  size_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _OWORD v83[16];
  _OWORD v84[16];
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v82 = 0;
  v5 = (uint64_t **)(a1 + 88 * a3);
  v6 = v5[10];
  *v6 = 0xFFFFFFFFFFFFLL;
  *((_DWORD *)v6 + 2) = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v9 = malloc_type_calloc(1uLL, *(unsigned int *)(a2 + 16), 0xAF789EA2uLL);
    if (!v9)
    {
      if (srtp_mod_alloc)
        srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, v7);
      *(_QWORD *)(a1 + 88 * a3 + 64) = 0;
      return 5;
    }
    v10 = v9;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v9);
    *(_QWORD *)(a1 + 88 * a3 + 64) = v10;
    memcpy(v10, *(const void **)(a2 + 8), *(unsigned int *)(a2 + 16));
    v11 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v11 = 0;
    *(_QWORD *)(a1 + 88 * a3 + 64) = 0;
  }
  v12 = a1 + 88 * a3;
  v14 = *(_QWORD *)(v12 + 24);
  v13 = (_DWORD *)(v12 + 24);
  v13[12] = v11;
  v15 = *((_DWORD *)*v5 + 4);
  v16 = v15;
  v17 = *(_DWORD *)(v14 + 16);
  switch(*(_DWORD *)(**v5 + 80))
  {
    case 1:
    case 4:
    case 5:
      v16 = v15 - 14;
      break;
    case 6:
    case 7:
      v16 = v15 - 12;
      break;
    default:
      break;
  }
  v80 = (v15 - v16);
  if (v15 <= 30)
    v18 = 30;
  else
    v18 = 46;
  if (v17 <= v18)
    v19 = v18;
  else
    v19 = 46;
  if (mod_srtp)
  {
    srtp_err_report(3, "%s: srtp key len: %d\n", off_25453E988, v15);
    if (mod_srtp)
    {
      srtp_err_report(3, "%s: srtcp key len: %d\n", off_25453E988, v17);
      if (mod_srtp)
      {
        srtp_err_report(3, "%s: base key len: %d\n", off_25453E988, v16);
        if (mod_srtp)
        {
          srtp_err_report(3, "%s: kdf key len: %d\n", off_25453E988, v19);
          if (mod_srtp)
            srtp_err_report(3, "%s: rtp salt len: %d\n", off_25453E988, v80);
        }
      }
    }
  }
  memset(v84, 0, sizeof(v84));
  __memcpy_chk();
  result = 5;
  if ((_DWORD)v19 == 46)
  {
    v21 = 5;
    if (crypto_kernel != 1)
      return result;
  }
  else
  {
    v21 = 1;
    if (crypto_kernel != 1)
      return result;
  }
  v22 = *(_QWORD *)((char *)&xmmword_25457334C + 4);
  if (*(_QWORD *)((char *)&xmmword_25457334C + 4))
  {
    v23 = v17;
    while (*(_DWORD *)v22 != v21)
    {
      v22 = *(_QWORD *)(v22 + 16);
      if (!v22)
        return 5;
    }
    v24 = *(unsigned int (***)(_QWORD **, uint64_t, _QWORD))(v22 + 8);
    if (!v24)
      return 5;
    if ((*v24)(&v82, v19, 0))
      return 5;
    v25 = v82;
    if (!v82 || !*v82)
      return 5;
    if (!v82[1])
      goto LABEL_43;
    v26 = (*(uint64_t (**)(_QWORD, _OWORD *))(*v82 + 16))(v82[1], v84);
    v25 = v82;
    if (v26)
    {
      if (v82)
      {
LABEL_43:
        if (*v25)
          (*(void (**)(_QWORD *))(*v25 + 8))(v25);
      }
      return 5;
    }
    LODWORD(v81) = v16;
    v83[0] = 0uLL;
    if (!v82)
      return 5;
    if (!*v82)
      return 5;
    v27 = v82[1];
    if (!v27 || (*(unsigned int (**)(uint64_t, _OWORD *, _QWORD))(*v82 + 48))(v27, v83, 0))
      return 5;
    if (v16)
      __memset_chk();
    if (!v82)
      return 5;
    if (!*v82)
      return 5;
    v28 = v82[1];
    if (!v28 || (*(unsigned int (**)(uint64_t, _OWORD *, _QWORD **))(*v82 + 32))(v28, v84, &v81))
      return 5;
    if (mod_srtp)
    {
      v30 = off_25453E988;
      v31 = srtp_octet_string_hex_string((char *)v84, v16);
      v29.n128_f64[0] = srtp_err_report(3, "%s: cipher key: %s\n", v30, v31);
    }
    if ((int)v80 >= 1)
    {
      if (mod_srtp)
        v29.n128_f64[0] = srtp_err_report(3, "%s: found rtp_salt_len > 0, generating salt\n", off_25453E988);
      LODWORD(v81) = v80;
      v83[0] = 0x200000000000000uLL;
      if (!v82)
        return 5;
      if (!*v82)
        return 5;
      v32 = v82[1];
      if (!v32)
        return 5;
      if ((*(unsigned int (**)(uint64_t, _OWORD *, _QWORD, __n128))(*v82 + 48))(v32, v83, 0, v29))
        return 5;
      v33 = (_DWORD *)((char *)v84 + v16);
      bzero(v33, v80);
      if (!v82)
        return 5;
      if (!*v82)
        return 5;
      v34 = v82[1];
      if (!v34
        || (*(unsigned int (**)(uint64_t, char *, _QWORD **))(*v82 + 32))(v34, (char *)v84 + v16, &v81))
      {
        return 5;
      }
      v35 = a1 + 88 * a3;
      *(_QWORD *)(v35 + 40) = *(_QWORD *)v33;
      *(_DWORD *)(v35 + 48) = v33[2];
      if (mod_srtp)
      {
        v78 = off_25453E988;
        v36 = srtp_octet_string_hex_string((char *)v84 + v16, v80);
        v29.n128_f64[0] = srtp_err_report(3, "%s: cipher salt: %s\n", v78, v36);
      }
    }
    v37 = *v5;
    if (!*v5)
      return 5;
    if (!*v37)
      return 5;
    v38 = v37[1];
    if (!v38 || (*(unsigned int (**)(uint64_t, _OWORD *, __n128))(*v37 + 16))(v38, v84, v29))
      return 5;
    v39 = a1 + 88 * a3;
    v40 = *(uint64_t **)(v39 + 8);
    v79 = (_QWORD **)(v39 + 8);
    if (v40)
    {
      v81 = 0;
      v41 = *v40;
      v42 = **v5;
      if (*v40 == v42)
      {
        v44 = &v82;
      }
      else
      {
        v43 = *((_DWORD *)v40 + 4);
        v16 = v43;
        switch(*(_DWORD *)(v41 + 80))
        {
          case 1:
          case 4:
          case 5:
            v16 = v43 - 14;
            break;
          case 6:
          case 7:
            v16 = v43 - 12;
            break;
          default:
            break;
        }
        v45 = v43 - v16;
        if (v43 - v16 > (int)v80)
        {
          v45 = v80;
          if ((*(_DWORD *)(v42 + 80) & 0xFFFFFFFE) != 6)
            return 2;
        }
        memset(v83, 0, sizeof(v83));
        __memcpy_chk();
        if (srtp_kdf_init(&v81, (uint64_t)v83, v19))
          return 5;
        v44 = &v81;
        LODWORD(v80) = v45;
      }
      if (srtp_kdf_generate(v44, 6, v84, v16))
        return 5;
      if (mod_srtp)
      {
        v47 = off_25453E988;
        v48 = srtp_octet_string_hex_string((char *)v84, v16);
        v46.n128_f64[0] = srtp_err_report(3, "%s: extensions cipher key: %s\n", v47, v48);
      }
      if ((int)v80 >= 1)
      {
        if (mod_srtp)
          srtp_err_report(3, "%s: found rtp_xtn_hdr_salt_len > 0, generating salt\n", off_25453E988);
        v49 = (char *)v84 + v16;
        if (srtp_kdf_generate(v44, 7, v49, v80))
          return 5;
        if (mod_srtp)
        {
          v50 = off_25453E988;
          v51 = srtp_octet_string_hex_string(v49, v80);
          v46.n128_f64[0] = srtp_err_report(3, "%s: extensions cipher salt: %s\n", v50, v51);
        }
      }
      v52 = *v79;
      if (!*v79)
        return 5;
      if (!*v52)
        return 5;
      v53 = v52[1];
      if (!v53 || (*(unsigned int (**)(uint64_t, _OWORD *, __n128))(*v52 + 16))(v53, v84, v46))
        return 5;
      if (v44 != &v82)
      {
        v54 = *v44;
        if (!*v44 || !*v54 || (*(unsigned int (**)(_QWORD *))(*v54 + 8))(v54))
          return 5;
        *v44 = 0;
      }
    }
    v55 = a1 + 88 * a3;
    v57 = *(_QWORD *)(v55 + 16);
    v56 = v55 + 16;
    if (srtp_kdf_generate(&v82, 1, v84, *(_DWORD *)(v57 + 20)))
      return 5;
    if (mod_srtp)
    {
      v59 = off_25453E988;
      v60 = srtp_octet_string_hex_string((char *)v84, *(_DWORD *)(*(_QWORD *)v56 + 20));
      v58.n128_f64[0] = srtp_err_report(3, "%s: auth key:   %s\n", v59, v60);
    }
    if ((*(unsigned int (**)(_QWORD, _OWORD *, _QWORD, __n128))(**(_QWORD **)v56 + 16))(*(_QWORD *)(*(_QWORD *)v56 + 8), v84, *(unsigned int *)(*(_QWORD *)v56 + 20), v58))
    {
      return 5;
    }
    switch(*(_DWORD *)(**(_QWORD **)v13 + 80))
    {
      case 1:
      case 4:
      case 5:
        v23 = v17 - 14;
        break;
      case 6:
      case 7:
        v23 = v17 - 12;
        break;
      default:
        break;
    }
    v61 = v17 - v23;
    if (mod_srtp)
      srtp_err_report(3, "%s: rtcp salt len: %d\n", off_25453E988, v17 - v23);
    if (srtp_kdf_generate(&v82, 3, v84, v23))
      return 5;
    if (v61 >= 1)
    {
      if (mod_srtp)
        srtp_err_report(3, "%s: found rtcp_salt_len > 0, generating rtcp salt\n", off_25453E988);
      v63 = (_DWORD *)((char *)v84 + v23);
      v64 = srtp_kdf_generate(&v82, 5, v63, v17 - v23);
      result = 5;
      if (v64)
        return result;
      v65 = a1 + 88 * a3;
      *(_QWORD *)(v65 + 52) = *(_QWORD *)v63;
      *(_DWORD *)(v65 + 60) = v63[2];
    }
    if (mod_srtp)
    {
      v66 = off_25453E988;
      v67 = srtp_octet_string_hex_string((char *)v84, v23);
      v62.n128_f64[0] = srtp_err_report(3, "%s: rtcp cipher key: %s\n", v66, v67);
      if (v61 >= 1)
      {
        if (mod_srtp)
        {
          v68 = off_25453E988;
          v69 = srtp_octet_string_hex_string((char *)v84 + v23, v17 - v23);
          v62.n128_f64[0] = srtp_err_report(3, "%s: rtcp cipher salt: %s\n", v68, v69);
        }
      }
    }
    v70 = *(_QWORD **)v13;
    if (!*(_QWORD *)v13)
      return 5;
    if (!*v70)
      return 5;
    v71 = v70[1];
    if (!v71)
      return 5;
    if ((*(unsigned int (**)(uint64_t, _OWORD *, __n128))(*v70 + 16))(v71, v84, v62))
      return 5;
    v72 = a1 + 88 * a3;
    v74 = *(_QWORD *)(v72 + 32);
    v73 = v72 + 32;
    if (srtp_kdf_generate(&v82, 4, v84, *(_DWORD *)(v74 + 20)))
      return 5;
    if (mod_srtp)
    {
      v76 = off_25453E988;
      v77 = srtp_octet_string_hex_string((char *)v84, *(_DWORD *)(*(_QWORD *)v73 + 20));
      v75.n128_f64[0] = srtp_err_report(3, "%s: rtcp auth key:   %s\n", v76, v77);
    }
    if ((*(unsigned int (**)(_QWORD, _OWORD *, _QWORD, __n128))(**(_QWORD **)v73 + 16))(*(_QWORD *)(*(_QWORD *)v73 + 8), v84, *(unsigned int *)(*(_QWORD *)v73 + 20), v75)|| !v82|| !*v82)
    {
      return 5;
    }
    if ((*(unsigned int (**)(void))(*v82 + 8))())
      return 5;
    else
      return 0;
  }
  return result;
}

uint64_t srtp_kdf_init(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v9)(_QWORD **, uint64_t, _QWORD);
  _QWORD *v10;

  switch((_DWORD)a3)
  {
    case 0x1E:
      v5 = 1;
      if (crypto_kernel != 1)
        return 5;
      break;
    case 0x2E:
      v5 = 5;
      if (crypto_kernel != 1)
        return 5;
      break;
    case 0x26:
      v5 = 4;
      if (crypto_kernel == 1)
        break;
      return 5;
    default:
      return 2;
  }
  v6 = *(_QWORD *)((char *)&xmmword_25457334C + 4);
  if (!*(_QWORD *)((char *)&xmmword_25457334C + 4))
    return 1;
  while (*(_DWORD *)v6 != v5)
  {
    v6 = *(_QWORD *)(v6 + 16);
    if (!v6)
      return 1;
  }
  v9 = *(uint64_t (***)(_QWORD **, uint64_t, _QWORD))(v6 + 8);
  if (!v9)
    return 1;
  v7 = (*v9)(a1, a3, 0);
  if ((_DWORD)v7)
    return v7;
  v10 = *a1;
  if (!*a1 || !*v10)
    return 2;
  if (v10[1])
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*v10 + 16))(v10[1], a2);
    if (!(_DWORD)v7)
      return v7;
    v10 = *a1;
    if (!*a1)
      return v7;
  }
  else
  {
    v7 = 2;
  }
  if (!*v10)
    return v7;
  (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  return v7;
}

uint64_t srtp_kdf_generate(_QWORD **a1, char a2, void *a3, unsigned int a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[2];
  unsigned int v13;

  v13 = a4;
  v12[0] = 0;
  v12[1] = 0;
  HIBYTE(v12[0]) = a2;
  v4 = *a1;
  if (!*a1)
    return 2;
  if (!*v4)
    return 2;
  v6 = v4[1];
  if (!v6)
    return 2;
  result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*v4 + 48))(v6, v12, 0);
  if ((_DWORD)result)
    return result;
  if (a4)
    bzero(a3, a4);
  v10 = *a1;
  if (*a1 && *v10 && (v11 = v10[1]) != 0)
    return (*(uint64_t (**)(uint64_t, void *, unsigned int *))(*v10 + 32))(v11, a3, &v13);
  else
    return 2;
}

uint64_t srtp_stream_init(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t inited;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if (mod_srtp)
    srtp_err_report(3, "%s: initializing stream (SSRC: 0x%08x)\n", off_25453E988, *(_DWORD *)(a2 + 4));
  v4 = *(_QWORD *)(a2 + 88);
  if (v4)
  {
    if ((unint64_t)(v4 - 0x8000) < 0xFFFFFFFFFFFF8040)
      return 2;
  }
  else
  {
    v4 = 128;
  }
  if (bitvector_alloc(a1 + 32, v4))
    return 3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)a1 = bswap32(*(_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 116) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v7 = *(_DWORD *)(a2 + 96);
  if (v7 > 1)
  {
    inited = 2;
    goto LABEL_15;
  }
  *(_DWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  if (v8)
  {
    *(_DWORD *)(a1 + 16) = 1;
    v14[1] = 0;
    v14[2] = 0;
    v14[0] = v8;
    inited = srtp_stream_init_keys(*(_QWORD *)(a1 + 8), (uint64_t)v14, 0);
    if (!(_DWORD)inited)
      return inited;
LABEL_15:
    v9 = *(void **)(a1 + 40);
    if (!v9)
    {
LABEL_19:
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return inited;
    }
LABEL_16:
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v9);
    free(v9);
    goto LABEL_19;
  }
  v11 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 16) = v10;
  if ((_DWORD)v10)
  {
    v12 = 0;
    while (1)
    {
      v13 = srtp_stream_init_keys(*(_QWORD *)(a1 + 8), *(_QWORD *)(v11 + 8 * v12), v12);
      if ((_DWORD)v13)
        break;
      if (v12 <= 0xE && ++v12 < *(unsigned int *)(a1 + 16))
        continue;
      return 0;
    }
    inited = v13;
    v9 = *(void **)(a1 + 40);
    if (!v9)
      goto LABEL_19;
    goto LABEL_16;
  }
  return 0;
}

double srtp_event_reporter(uint64_t a1)
{
  double v2;
  uint64_t v3;

  v2 = srtp_err_report(1, "srtp: in stream 0x%x: ", *(_DWORD *)(a1 + 8));
  v3 = *(int *)(a1 + 12);
  if (v3 > 3)
    return srtp_err_report(1, "\tunknown event reported to handler\n", v2);
  else
    return srtp_err_report(1, off_24C0D5AA8[v3], v2);
}

uint64_t srtp_protect_mki(uint64_t *a1, uint64_t a2, unsigned int *a3, __int32 a4, unsigned int a5, __n128 a6)
{
  unsigned int v11;
  __int16 v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t result;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int8x8_t *v21;
  int8x8_t v22;
  unint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unint64_t v28;
  int8x8_t v29;
  unint64_t v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  double v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  __int32 v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned int (*v49)(void);
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int (*v53)(void);
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned __int32 v58;
  uint64_t v59;
  __n128 v60;
  _QWORD *v61;
  unsigned int v62;
  BOOL v63;
  int v64;
  __int32 v66;
  unint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  void (*v74)(int8x8_t *, __n128);
  int8x8_t *v75;
  uint64_t v76;
  uint64_t *v77;
  int v78;
  const char *v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  __n128 v83;
  int v84;
  const char *v85;
  char *v86;
  int v87;
  void *v88;
  int v89;
  int v90;
  unint64_t v91;
  int v92;
  uint64_t *v93;
  unsigned int v94;
  int v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  int v99;

  v92 = 0;
  if (mod_srtp)
    a6.n128_f64[0] = srtp_err_report(3, "%s: function srtp_protect\n", off_25453E988);
  v11 = *a3;
  if ((int)*a3 < 12)
    return 2;
  v12 = *(_WORD *)a2;
  v13 = 4 * (*(_WORD *)a2 & 0xF);
  v14 = v13 + 12;
  v15 = v13 + 16;
  if ((*(_WORD *)a2 & 0x10) != 0)
    v14 = v15;
  if (v14 > v11
    || (v12 & 0x10) != 0 && v15 + 4 * (bswap32(*(unsigned __int16 *)(a2 + 4 * (v12 & 0xF) + 14)) >> 16) > v11)
  {
    return 2;
  }
  v91 = 0;
  v89 = 0;
  v17 = *(_DWORD *)(a2 + 8);
  v18 = *a1;
  if (!*a1)
  {
LABEL_14:
    v19 = a1[1];
    if (!v19)
      return 13;
    v96 = 0;
    result = srtp_stream_clone(v19, v17, &v96);
    if ((_DWORD)result)
      return result;
    v18 = (uint64_t)v96;
    v96[15] = *a1;
    *a1 = v18;
    goto LABEL_19;
  }
  while (*(_DWORD *)v18 != v17)
  {
    v18 = *(_QWORD *)(v18 + 120);
    if (!v18)
      goto LABEL_14;
  }
  v20 = *(_DWORD *)(v18 + 84);
  if (v20 != 1)
  {
    if (!v20)
    {
LABEL_19:
      *(_DWORD *)(v18 + 84) = 1;
      goto LABEL_20;
    }
    if (srtp_event_handler)
    {
      v96 = a1;
      v97 = 0;
      LODWORD(v97) = bswap32(*(_DWORD *)v18);
      srtp_event_handler(&v96);
    }
  }
LABEL_20:
  if (a4)
  {
    if (*(_DWORD *)(v18 + 16) <= a5)
      return 25;
    v21 = (int8x8_t *)(*(_QWORD *)(v18 + 8) + 88 * a5);
    if (!v21)
      return 25;
  }
  else
  {
    v21 = *(int8x8_t **)(v18 + 8);
    if (!v21)
      return 25;
  }
  v90 = 0;
  if ((*(_DWORD *)(*(_QWORD *)v21 + 20) & 0xFFFFFFFE) == 6)
  {
    v99 = 0;
    if (mod_srtp)
      a6.n128_f64[0] = srtp_err_report(3, "%s: function srtp_protect_aead\n", off_25453E988);
    v97 = 0;
    v98 = 0;
    v96 = 0;
    v22 = v21[10];
    v23 = **(_QWORD **)&v22 - 1;
    **(_QWORD **)&v22 = v23;
    if (v23 >> 16)
    {
LABEL_41:
      LODWORD(v93) = *(_DWORD *)(*(_QWORD *)&v21[2] + 16);
      v26 = a2 + 4 * (*(_WORD *)a2 & 0xFLL);
      v27 = (unsigned __int16 *)(v26 + 12);
      if ((*(_WORD *)a2 & 0x10) != 0)
      {
        v28 = (unint64_t)&v27[2 * (bswap32(*(unsigned __int16 *)(v26 + 14)) >> 16) + 2];
      }
      else
      {
        v28 = v26 + 12;
        v27 = 0;
      }
      v38 = *a3;
      if (v28 <= a2 + v38)
      {
        v99 = v38 - (v28 - a2);
        if (v99 >= 0)
        {
          v39 = srtp_rdbx_estimate_index((unsigned __int16 *)(v18 + 24), &v98, bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16);
          if (v39 > 0)
          {
LABEL_63:
            srtp_rdbx_add_index(v18 + 24, v39);
            goto LABEL_64;
          }
          v73 = v39 + *(_DWORD *)(v18 + 32) - 1;
          if (v73 >= 0)
          {
            if (((*(_DWORD *)(*(_QWORD *)(v18 + 40) + 4 * (v73 >> 5)) >> v73) & 1) == 0)
              goto LABEL_63;
            if (*(_DWORD *)(v18 + 88))
            {
LABEL_64:
              v40 = v98;
              if (mod_srtp)
                srtp_err_report(3, "%s: estimated packet index: %016llx\n", off_25453E988, v98);
              *(int8x8_t *)&v41 = srtp_calc_aead_iv(v21, (int8x8_t *)&v96, v40, a2);
              v42 = bswap64(v40) >> 16;
              v98 = v42;
              v43 = (_QWORD *)*v21;
              if (!*(_QWORD *)v21)
                return 8;
              if (!*v43)
                return 8;
              v44 = v43[1];
              if (!v44)
                return 8;
              if ((*(unsigned int (**)(uint64_t, uint64_t **, _QWORD, double))(*v43 + 48))(v44, &v96, 0, v41))
              {
                return 8;
              }
              v45 = (_QWORD *)v21[1];
              if (v45)
              {
                v46 = *(_DWORD *)(a2 + 8);
                LODWORD(v96) = 0;
                HIDWORD(v96) = v46;
                v97 = v42;
                if (!*v45)
                  return 8;
                v47 = v45[1];
                if (!v47 || (*(unsigned int (**)(uint64_t, uint64_t **, _QWORD))(*v45 + 48))(v47, &v96, 0))
                  return 8;
              }
              if (!v27
                || !*(_QWORD *)&v21[1]
                || (result = srtp_process_header_encryption(v18, v27, (uint64_t)v21), !(_DWORD)result))
              {
                v48 = (_QWORD *)*v21;
                if (*v21)
                {
                  if (*v48)
                  {
                    if (v48[1])
                    {
                      v49 = *(unsigned int (**)(void))(*v48 + 24);
                      if (v49)
                      {
                        if (!v49())
                        {
                          v50 = (_QWORD *)*v21;
                          if (*v21)
                          {
                            if (*v50)
                            {
                              v51 = v50[1];
                              if (v51)
                              {
                                if (!(*(unsigned int (**)(uint64_t, unint64_t, int *))(*v50 + 32))(v51, v28, &v99))
                                {
                                  v52 = (_QWORD *)*v21;
                                  if (*v21)
                                  {
                                    if (*v52)
                                    {
                                      if (v52[1])
                                      {
                                        v53 = *(unsigned int (**)(void))(*v52 + 56);
                                        if (v53)
                                        {
                                          if (!v53())
                                          {
                                            v54 = *a3;
                                            v55 = (int)v93;
                                            if (a4)
                                            {
                                              a4 = v21[9].i32[0];
                                              if (a4)
                                              {
                                                memcpy((void *)(a2 + v54 + v93), *(const void **)&v21[8], v21[9].u32[0]);
                                                LODWORD(v54) = *a3;
                                              }
                                            }
                                            result = 0;
                                            v56 = v54 + a4 + v55;
                                            goto LABEL_175;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                return 8;
              }
              return result;
            }
            return 9;
          }
          return 10;
        }
      }
      return 21;
    }
    if (v23)
      v24 = *(_DWORD *)(*(_QWORD *)&v22 + 8) == 0;
    else
      v24 = 1;
    if (!v24 || (v23 ? (v25 = 1) : (v25 = 2), *(_DWORD *)(*(_QWORD *)&v22 + 8) = v25, v23))
    {
      if (srtp_event_handler)
      {
        v93 = a1;
        v94 = bswap32(*(_DWORD *)v18);
        v95 = 1;
        srtp_event_handler(&v93);
      }
      goto LABEL_41;
    }
    v74 = (void (*)(int8x8_t *, __n128))srtp_event_handler;
    if (srtp_event_handler)
    {
      v93 = a1;
      v94 = bswap32(*(_DWORD *)v18);
      v95 = 2;
      v75 = (int8x8_t *)&v93;
LABEL_134:
      v74(v75, a6);
      return 15;
    }
    return 15;
  }
  v29 = v21[10];
  v30 = **(_QWORD **)&v29 - 1;
  **(_QWORD **)&v29 = v30;
  if (!(v30 >> 16))
  {
    if (v30)
      v31 = *(_DWORD *)(*(_QWORD *)&v29 + 8) == 0;
    else
      v31 = 1;
    if (v31)
    {
      v32 = v30 ? 1 : 2;
      *(_DWORD *)(*(_QWORD *)&v29 + 8) = v32;
      if (!v30)
      {
        v74 = (void (*)(int8x8_t *, __n128))srtp_event_handler;
        if (srtp_event_handler)
        {
          v96 = a1;
          v97 = 0;
          v97 = bswap32(*(_DWORD *)v18) | 0x200000000;
          v75 = (int8x8_t *)&v96;
          goto LABEL_134;
        }
        return 15;
      }
    }
    if (srtp_event_handler)
    {
      v96 = a1;
      v97 = 0;
      v97 = bswap32(*(_DWORD *)v18) | 0x100000000;
      srtp_event_handler(&v96);
    }
  }
  v33 = *(_DWORD *)(*(_QWORD *)&v21[2] + 16);
  v34 = *(_DWORD *)(v18 + 48);
  if ((v34 & 1) != 0)
  {
    v57 = a2 + 4 * (*(_WORD *)a2 & 0xFLL);
    v36 = (unsigned __int16 *)(v57 + 12);
    if ((*(_WORD *)a2 & 0x10) != 0)
    {
      v35 = (unint64_t)&v36[2 * (bswap32(*(unsigned __int16 *)(v57 + 14)) >> 16) + 2];
    }
    else
    {
      v35 = v57 + 12;
      v36 = 0;
    }
    v37 = (int)*a3;
    if (v35 > a2 + v37)
      return 21;
    v92 = v37 + a2 - v35;
    if (v92 < 0)
      return 21;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    v37 = (int)*a3;
  }
  v87 = v33;
  if (a4)
  {
    v58 = v21[9].u32[0];
    if (v58)
    {
      memcpy((void *)(a2 + v37), *(const void **)&v21[8], v21[9].u32[0]);
      v34 = *(_DWORD *)(v18 + 48);
    }
  }
  else
  {
    v58 = 0;
  }
  if ((v34 & 2) != 0)
  {
    v88 = (void *)(a2 + (int)*a3 + v58);
    v59 = a2;
  }
  else
  {
    v59 = 0;
    v88 = 0;
  }
  result = srtp_get_est_pkt_index(*(unsigned __int16 *)(a2 + 2), v18, &v91, &v90);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 27)
      return result;
    srtp_rdbx_set_roc_seq(v18 + 24, v91 >> 16, (unsigned __int16)v91);
    *(_DWORD *)(v18 + 116) = 0;
    *(_DWORD *)(*(_QWORD *)(v18 + 40) + 4 * ((*(_DWORD *)(v18 + 32) - 1) >> 5)) |= 1 << (*(_BYTE *)(v18 + 32) - 1);
  }
  else
  {
    if (v90 <= 0)
    {
      v78 = v90 + *(_DWORD *)(v18 + 32) - 1;
      if (v78 < 0)
        return 10;
      if (((*(_DWORD *)(*(_QWORD *)(v18 + 40) + 4 * (v78 >> 5)) >> v78) & 1) != 0
        && !*(_DWORD *)(v18 + 88))
      {
        return 9;
      }
    }
    srtp_rdbx_add_index(v18 + 24, v90);
  }
  if (mod_srtp)
    v60.n128_f64[0] = srtp_err_report(3, "%s: estimated packet index: %016llx\n", off_25453E988, v91);
  v61 = (_QWORD *)*v21;
  v62 = *(_DWORD *)(**(_QWORD **)v21 + 80);
  v63 = v62 > 5;
  v64 = (1 << v62) & 0x32;
  if (v63 || v64 == 0)
  {
    v67 = v91;
    v96 = 0;
    v97 = bswap64(v91);
    if (!*v61)
      return 8;
    v76 = v61[1];
    if (!v76
      || (*(unsigned int (**)(uint64_t, uint64_t **, _QWORD, __n128))(*v61 + 48))(v76, &v96, 0, v60))
    {
      return 8;
    }
    v77 = (uint64_t *)v21[1];
    if (!v77)
      goto LABEL_149;
    v71 = *v77;
    if (!*v77)
      return 8;
    v72 = v77[1];
    if (!v72)
      return 8;
  }
  else
  {
    v66 = *(_DWORD *)(a2 + 8);
    v67 = v91;
    LODWORD(v96) = 0;
    v97 = bswap64(v91) >> 16;
    HIDWORD(v96) = v66;
    if (!*v61)
      return 8;
    v68 = v61[1];
    if (!v68
      || (*(unsigned int (**)(uint64_t, uint64_t **, _QWORD, __n128))(*v61 + 48))(v68, &v96, 0, v60))
    {
      return 8;
    }
    v70 = (uint64_t *)v21[1];
    if (!v70)
      goto LABEL_149;
    v71 = *v70;
    if (!*v70)
      return 8;
    v72 = v70[1];
    if (!v72)
      return 8;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t **, _QWORD))(v71 + 48))(v72, &v96, 0))
    return 8;
LABEL_149:
  v91 = bswap64(v67) >> 16;
  if (v59)
  {
    v89 = *(_DWORD *)(*(_QWORD *)&v21[2] + 24);
    if (v89)
    {
      if (srtp_cipher_output(*v21, v88, (unsigned int *)&v89))
        return 8;
      if (mod_srtp)
      {
        v79 = off_25453E988;
        v80 = srtp_octet_string_hex_string((char *)v88, v89);
        v69.n128_f64[0] = srtp_err_report(3, "%s: keystream prefix: %s\n", v79, v80);
      }
    }
  }
  if (!v36 || !*(_QWORD *)&v21[1] || (result = srtp_process_header_encryption(v18, v36, (uint64_t)v21), !(_DWORD)result))
  {
    if (v35)
    {
      v81 = (_QWORD *)*v21;
      if (!*(_QWORD *)v21)
        return 8;
      if (!*v81)
        return 8;
      v82 = v81[1];
      if (!v82
        || (*(unsigned int (**)(uint64_t, unint64_t, int *, __n128))(*v81 + 32))(v82, v35, &v92, v69))
      {
        return 8;
      }
    }
    if (v59)
    {
      result = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)&v21[2] + 40))(*(_QWORD *)(*(_QWORD *)&v21[2] + 8), v69);
      if ((_DWORD)result)
        return result;
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)&v21[2] + 32))(*(_QWORD *)(*(_QWORD *)&v21[2] + 8), v59, *a3);
      if ((_DWORD)result)
        return result;
      if (mod_srtp)
        v83.n128_f64[0] = srtp_err_report(3, "%s: estimated packet index: %016llx\n", off_25453E988, v91);
      v84 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t, _QWORD, void *, __n128))(**(_QWORD **)&v21[2] + 24))(*(_QWORD *)(*(_QWORD *)&v21[2] + 8), &v91, 4, *(unsigned int *)(*(_QWORD *)&v21[2] + 16), v88, v83);
      if (mod_srtp)
      {
        v85 = off_25453E988;
        v86 = srtp_octet_string_hex_string((char *)v88, v87);
        srtp_err_report(3, "%s: srtp auth tag:    %s\n", v85, v86);
      }
      if (v84)
        return 7;
    }
    if (v88)
      *a3 += v87;
    result = 0;
    if (a4)
    {
      v56 = *a3 + v58;
LABEL_175:
      *a3 = v56;
    }
  }
  return result;
}

uint64_t srtp_get_est_pkt_index(unsigned int a1, uint64_t a2, unint64_t *a3, _DWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  BOOL v18;
  unint64_t v19;

  v4 = *(unsigned int *)(a2 + 116);
  v5 = bswap32(a1) >> 16;
  if (!(_DWORD)v4)
  {
    v9 = *(_QWORD *)(a2 + 24);
    if (v9 <= 0x8000)
    {
      v8 = 0;
      *a3 = v5;
      LODWORD(v7) = v5 - *(unsigned __int16 *)(a2 + 24);
    }
    else
    {
      v8 = 0;
      v10 = v9 >> 16;
      v11 = (unsigned __int16)*(_QWORD *)(a2 + 24);
      v12 = (v9 >> 15) & 1;
      v13 = v5 - v11;
      if (v11 - 0x8000 <= v5)
        v14 = v10;
      else
        v14 = v10 + 1;
      if (v11 - 0x8000 > v5)
        v13 = (v5 | 0x10000) - v11;
      v15 = v5 - v11;
      if (v15 > 0x8000)
      {
        LODWORD(v10) = v10 - 1;
        v15 -= 0x10000;
      }
      v16 = v12 == 0;
      if (v12)
        v17 = v14;
      else
        v17 = v10;
      if (v16)
        LODWORD(v7) = v15;
      else
        LODWORD(v7) = v13;
      v5 = v5 & 0xFFFF00000000FFFFLL | ((unint64_t)v17 << 16);
      *a3 = v5;
    }
    goto LABEL_25;
  }
  v5 |= v4 << 16;
  *a3 = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *a4 = v5 - v6;
  v7 = 0;
  if (v5 > v6)
  {
    if (v5 - v6 <= 0x8000)
      goto LABEL_26;
    v8 = 27;
    goto LABEL_25;
  }
  v18 = v6 != v5;
  v19 = v6 - v5;
  if (v18 && v19 > 0x8000)
  {
    v8 = 26;
LABEL_25:
    *a4 = v7;
    v7 = v8;
  }
LABEL_26:
  if (mod_srtp)
    srtp_err_report(3, "%s: estimated u_packet index: %016llx\n", off_25453E988, v5);
  return v7;
}

uint64_t srtp_process_header_encryption(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  int8x16_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  int8x16_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  _QWORD *v28;
  _DWORD *v29;
  int v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  int8x16_t *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  char v51;
  _BYTE v52[17];
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v5 = (int8x16_t *)(a2 + 2);
  v6 = 2 * __rev16(a2[1]);
  v7 = v6 * 2 + 4;
  v8 = (unint64_t)&a2[v6 + 2];
  v9 = *a2;
  if (v9 == 57022)
  {
    if (a2[1])
    {
      v47 = (int8x16_t *)((char *)a2 + v7);
      v48 = (uint64_t)&a2[v6 + 2];
      while (1)
      {
        v11 = (int8x16_t *)&v5->i8[1];
        v10 = v5->u8[0];
        v12 = (v10 & 0xF) + 1;
        v50 = (v10 & 0xF) + 2;
        v5 = (int8x16_t *)((char *)v5 + v12 + 1);
        if ((unint64_t)v5 > v8)
          return 21;
        if (v10 >> 4 == 15)
          return 0;
        v13 = *(_QWORD **)(a3 + 8);
        __memset_chk();
        if ((*(unsigned int (**)(_QWORD, char *, int *))(*v13 + 32))(v13[1], &v51, &v50))
          return 8;
        v14 = *(_DWORD **)(a1 + 104);
        if (v14)
        {
          v15 = *(_DWORD *)(a1 + 112);
          if (v15 >= 1)
          {
            v16 = v15 + 1;
            while (*v14 != v10 >> 4)
            {
              ++v14;
              if (--v16 <= 1)
                goto LABEL_20;
            }
            if ((v10 & 0xF) != 0xF || v11 < (int8x16_t *)&v52[(v10 & 0xF) + 1] && v52 < (_BYTE *)v5)
            {
              v17 = 1;
              goto LABEL_18;
            }
            v21 = v12 & 0x10;
            v5 = (int8x16_t *)((char *)v11 + v21);
            *v11 = veorq_s8(*v11, *(int8x16_t *)v52);
            if (v21 != v12)
            {
              v17 = v21 | 1;
              LODWORD(v12) = v12 - v21;
              v11 = (int8x16_t *)((char *)v11 + v21);
LABEL_18:
              v18 = &v52[v17 - 1];
              v5 = v11;
              do
              {
                v19 = *v18++;
                v5->i8[0] ^= v19;
                v5 = (int8x16_t *)((char *)v5 + 1);
                LODWORD(v12) = v12 - 1;
              }
              while ((_DWORD)v12);
            }
          }
        }
LABEL_20:
        if ((unint64_t)v5 < v8)
        {
          v20 = v48 - (_QWORD)v5;
          while (!v5->i8[0])
          {
            v5 = (int8x16_t *)((char *)v5 + 1);
            if (!--v20)
            {
              v5 = v47;
              break;
            }
          }
        }
        if ((unint64_t)v5 >= v8)
          return 0;
      }
    }
    return 0;
  }
  if ((v9 & 0xFFFFF0FF) == 0x10)
  {
    if (!a2[1])
      return 0;
    v22 = (unsigned __int8 *)a2 + 5;
    v49 = (unsigned __int8 *)a2 + v7;
    v23 = (uint64_t)&a2[v6 + 2];
    while (1)
    {
      v25 = &v5->u8[2];
      v24 = v5->u8[0];
      v26 = *v22;
      v50 = v26 + 2;
      v27 = &v5->u8[v26 + 2];
      if ((unint64_t)v27 > v8)
        return 21;
      v28 = *(_QWORD **)(a3 + 8);
      __memset_chk();
      if ((*(unsigned int (**)(_QWORD, char *, int *))(*v28 + 32))(v28[1], &v51, &v50))
        return 8;
      if ((_DWORD)v26)
      {
        v29 = *(_DWORD **)(a1 + 104);
        if (v29)
        {
          v30 = *(_DWORD *)(a1 + 112);
          if (v30 >= 1)
          {
            v31 = v30 + 1;
            while (*v29 != v24)
            {
              ++v29;
              if (--v31 <= 1)
                goto LABEL_58;
            }
            if (v26 < 0x20
              || ((v32 = (v26 - 1), v25 < &v52[v32 + 2]) ? (v33 = &v52[1] >= &v5->i8[v32 + 3]) : (v33 = 1),
                  !v33))
            {
              v42 = 2;
              goto LABEL_56;
            }
            v34 = v26 & 0xE0;
            v35 = veorq_s8(*(int8x16_t *)((char *)v5 + 18), v53);
            *(int8x16_t *)((char *)v5 + 2) = veorq_s8(*(int8x16_t *)((char *)v5 + 2), *(int8x16_t *)&v52[1]);
            *(int8x16_t *)((char *)v5 + 18) = v35;
            if (v34 != 32)
            {
              v36 = veorq_s8(*(int8x16_t *)((char *)v5 + 50), v55);
              *(int8x16_t *)((char *)v5 + 34) = veorq_s8(*(int8x16_t *)((char *)v5 + 34), v54);
              *(int8x16_t *)((char *)v5 + 50) = v36;
              if (v34 != 64)
              {
                v37 = veorq_s8(*(int8x16_t *)((char *)v5 + 82), v57);
                *(int8x16_t *)((char *)v5 + 66) = veorq_s8(*(int8x16_t *)((char *)v5 + 66), v56);
                *(int8x16_t *)((char *)v5 + 82) = v37;
                if (v34 != 96)
                {
                  v38 = veorq_s8(*(int8x16_t *)((char *)v5 + 114), v59);
                  *(int8x16_t *)((char *)v5 + 98) = veorq_s8(*(int8x16_t *)((char *)v5 + 98), v58);
                  *(int8x16_t *)((char *)v5 + 114) = v38;
                  if (v34 != 128)
                  {
                    v39 = veorq_s8(*(int8x16_t *)((char *)v5 + 146), v61);
                    *(int8x16_t *)((char *)v5 + 130) = veorq_s8(*(int8x16_t *)((char *)v5 + 130), v60);
                    *(int8x16_t *)((char *)v5 + 146) = v39;
                    if (v34 != 160)
                    {
                      v40 = veorq_s8(*(int8x16_t *)((char *)v5 + 178), v63);
                      *(int8x16_t *)((char *)v5 + 162) = veorq_s8(*(int8x16_t *)((char *)v5 + 162), v62);
                      *(int8x16_t *)((char *)v5 + 178) = v40;
                      if (v34 != 192)
                      {
                        v41 = veorq_s8(*(int8x16_t *)((char *)v5 + 210), v65);
                        *(int8x16_t *)((char *)v5 + 194) = veorq_s8(*(int8x16_t *)((char *)v5 + 194), v64);
                        *(int8x16_t *)((char *)v5 + 210) = v41;
                      }
                    }
                  }
                }
              }
            }
            v25 += v34;
            if (v34 != v26)
            {
              v42 = v34 | 2;
              LODWORD(v26) = v26 - v34;
LABEL_56:
              v43 = &v52[v42 - 1];
              v27 = v25;
              do
              {
                v44 = *v43++;
                *v27++ ^= v44;
                LODWORD(v26) = v26 - 1;
              }
              while ((_DWORD)v26);
              goto LABEL_58;
            }
            v27 = v25;
          }
        }
      }
LABEL_58:
      if ((unint64_t)v27 < v8)
      {
        v45 = v23 - (_QWORD)v27;
        while (!*v27)
        {
          ++v27;
          if (!--v45)
          {
            v27 = v49;
            break;
          }
        }
      }
      v22 = v27 + 1;
      v5 = (int8x16_t *)v27;
      if ((unint64_t)(v27 + 1) >= v8)
        return 0;
    }
  }
  return 21;
}

uint64_t srtp_unprotect_mki(_QWORD *a1, uint64_t a2, int *a3, int a4)
{
  unsigned int v8;
  __int16 v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned __int16 v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int8x8_t *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int32 v27;
  int8x8_t v28;
  unsigned int v29;
  double v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  __int32 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  int v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unsigned __int16 *v65;
  int8x8_t v66;
  unint64_t v67;
  int v68;
  _QWORD *v69;
  unsigned int (*v70)(void);
  _QWORD *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int8x8_t v76;
  unint64_t v77;
  BOOL v78;
  int v79;
  unsigned __int16 *v80;
  unsigned int v81;
  _QWORD *v82;
  uint64_t v83;
  int v84;
  int v85;
  int8x8_t v86;
  int v87;
  uint64_t v88;
  char *v89;
  char *v90;
  int v91;
  const char *v92;
  char *v93;
  const char *v94;
  char *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  void (*v99)(_QWORD **);
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int8x8_t *v104;
  char *v105;
  unint64_t v106;
  int8x16_t *v107;
  int8x16_t *v108;
  int8x16_t v109;
  unint64_t v110;
  int8x16_t v111;
  int8x16_t v112;
  unint64_t v113;
  int8x8_t v114;
  int8x8_t *v115;
  int8x8_t *v116;
  unint64_t v117;
  int8x8_t v118;
  int8x8_t v119;
  int8x8_t v120;
  uint64_t v121;
  __int8 v122;
  __int8 v123;
  char v124;
  const char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unsigned __int16 *v129;
  uint64_t v130;
  int v131;
  int v132;
  _QWORD *v133;
  uint64_t v134;
  unsigned __int16 v135;
  int v136;
  char v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  _QWORD *v143;
  uint64_t v144;
  unsigned int v145;
  int8x8_t v146;
  unint64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  v142 = 0;
  if (mod_srtp)
    srtp_err_report(3, "%s: function srtp_unprotect\n", off_25453E988);
  v8 = *a3;
  if (*a3 < 12)
    return 2;
  v9 = *(_WORD *)a2;
  v10 = 4 * (*(_WORD *)a2 & 0xF);
  v11 = v10 + 12;
  v12 = v10 + 16;
  if ((*(_WORD *)a2 & 0x10) != 0)
    v11 = v12;
  if (v11 > v8 || (v9 & 0x10) != 0 && v12 + 4 * (bswap32(*(unsigned __int16 *)(a2 + 4 * (v9 & 0xF) + 14)) >> 16) > v8)
    return 2;
  v140 = 0;
  v141 = 0;
  v139 = 0;
  v138 = 0;
  v15 = *(_DWORD *)(a2 + 8);
  v16 = (_QWORD *)*a1;
  if (!*a1)
  {
LABEL_14:
    v16 = (_QWORD *)a1[1];
    if (!v16)
      return 13;
    if (mod_srtp)
      srtp_err_report(3, "%s: using provisional stream (SSRC: 0x%08x)\n", off_25453E988, bswap32(v15));
    LODWORD(v17) = 0;
    v18 = 0;
    v19 = bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16;
    v141 = v19;
    v137 = 1;
    LODWORD(v20) = v19;
    goto LABEL_18;
  }
  while (*(_DWORD *)v16 != v15)
  {
    v16 = (_QWORD *)v16[15];
    if (!v16)
      goto LABEL_14;
  }
  v24 = *((unsigned int *)v16 + 29);
  v19 = bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16;
  if (!(_DWORD)v24)
  {
    v49 = v16[3];
    if (v49 <= 0x8000)
    {
      v26 = 0;
      v141 = v19;
      LODWORD(v13) = v19 - v49;
    }
    else
    {
      v26 = 0;
      v50 = v49 >> 16;
      v51 = (unsigned __int16)v16[3];
      v52 = (v49 >> 15) & 1;
      v53 = v19 - v51;
      if (v51 - 0x8000 <= v19)
        v54 = v50;
      else
        v54 = v50 + 1;
      if (v51 - 0x8000 > v19)
        v53 = (v19 | 0x10000) - v51;
      v55 = v19 - v51;
      if (v55 > 0x8000)
      {
        LODWORD(v50) = v50 - 1;
        v55 -= 0x10000;
      }
      v56 = v52 == 0;
      if (v52)
        v57 = v54;
      else
        v57 = v50;
      if (v56)
        LODWORD(v13) = v55;
      else
        LODWORD(v13) = v53;
      v19 = v19 & 0xFFFF00000000FFFFLL | ((unint64_t)v57 << 16);
      v141 = v19;
    }
    goto LABEL_76;
  }
  v19 |= v24 << 16;
  v141 = v19;
  v25 = v16[3];
  v13 = 0;
  v20 = v19 - v25;
  if (v19 <= v25)
  {
    v43 = v25 > v19;
    v58 = v25 - v19;
    if (!v43 || v58 <= 0x8000)
      goto LABEL_77;
    v26 = 26;
    goto LABEL_76;
  }
  if (v20 > 0x8000)
  {
    v26 = 27;
LABEL_76:
    LODWORD(v20) = v13;
    v13 = v26;
  }
LABEL_77:
  if (mod_srtp)
    srtp_err_report(3, "%s: estimated u_packet index: %016llx\n", off_25453E988, v19);
  if ((_DWORD)v13 != 27 && (_DWORD)v13)
    return v13;
  if ((_DWORD)v13 == 27)
  {
    v137 = 0;
    v17 = v19 >> 16;
    v18 = v19;
  }
  else
  {
    if ((int)v20 <= 0)
    {
      v59 = v20 + *((_DWORD *)v16 + 8) - 1;
      if (v59 < 0)
        return 10;
      if (((*(_DWORD *)(v16[5] + 4 * (v59 >> 5)) >> v59) & 1) != 0)
        return 9;
    }
    LODWORD(v17) = 0;
    v18 = 0;
    v137 = 1;
  }
LABEL_18:
  if (mod_srtp)
    srtp_err_report(3, "%s: estimated u_packet index: %016llx\n", off_25453E988, v19);
  if (a4)
  {
    v21 = *a3;
    v22 = (int8x8_t *)v16[1];
    if ((*(_DWORD *)(*(_QWORD *)v22 + 20) & 0xFFFFFFFE) == 6)
    {
      v23 = 0;
    }
    else
    {
      v23 = *(_DWORD *)(*(_QWORD *)&v22[2] + 16);
      if (v23 > v21)
        return 25;
    }
    v133 = a1;
    v39 = *((unsigned int *)v16 + 4);
    if ((_DWORD)v39)
    {
      v135 = v18;
      v131 = v17;
      v136 = v20;
      v40 = v21 - v23;
      v13 = 25;
      while (1)
      {
        v27 = v22[9].i32[0];
        if (v27 - 1 < v40 && !memcmp((const void *)(a2 + v40 - v27), *(const void **)&v22[8], v22[9].u32[0]))
          break;
        v22 += 11;
        if (!--v39)
          return v13;
      }
      LODWORD(v17) = v131;
      a1 = v133;
      v28 = *v22;
      if ((*(_DWORD *)(*(_QWORD *)v22 + 20) & 0xFFFFFFFE) != 6)
        goto LABEL_49;
      goto LABEL_29;
    }
    return 25;
  }
  v135 = v18;
  v136 = v20;
  v27 = 0;
  v22 = (int8x8_t *)v16[1];
  v28 = *v22;
  if ((*(_DWORD *)(*(_QWORD *)v22 + 20) & 0xFFFFFFFE) != 6)
  {
LABEL_49:
    v41 = *(unsigned int *)(*(_QWORD *)&v22[2] + 16);
    v42 = *(_DWORD *)(**(_QWORD **)&v28 + 80);
    v43 = v42 > 5;
    v44 = (1 << v42) & 0x32;
    v45 = v43 || v44 == 0;
    v46 = bswap64(v19);
    if (!v45)
    {
      v47 = *(_DWORD *)(a2 + 8);
      LODWORD(v139) = 0;
      HIDWORD(v139) = v47;
      v140 = v46 >> 16;
      v48 = (_QWORD *)*v22;
      if (!*(_QWORD *)v22)
        return 8;
      goto LABEL_89;
    }
    v139 = 0;
    v140 = v46;
    v48 = (_QWORD *)*v22;
    if (*v22)
    {
LABEL_89:
      if (!*v48)
        return 8;
      v60 = v48[1];
      if (!v60)
        return 8;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*v48 + 48))(v60, &v139, 1))
        return 8;
      v61 = (_QWORD *)v22[1];
      if (v61)
      {
        if (!*v61)
          return 8;
        v62 = v61[1];
        if (!v62 || (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*v61 + 48))(v62, &v139, 1))
          return 8;
      }
      v141 = bswap64(v141) >> 16;
      v63 = *((_DWORD *)v16 + 12);
      if ((v63 & 1) == 0)
      {
        v64 = 0;
        v65 = 0;
        goto LABEL_133;
      }
      v74 = a2 + 4 * (*(_WORD *)a2 & 0xFLL);
      v65 = (unsigned __int16 *)(v74 + 12);
      if ((*(_WORD *)a2 & 0x10) != 0)
      {
        v64 = (unint64_t)&v65[2 * (bswap32(*(unsigned __int16 *)(v74 + 14)) >> 16) + 2];
      }
      else
      {
        v64 = v74 + 12;
        v65 = 0;
      }
      v75 = (*a3 - v27 - v41);
      if (v64 <= a2 + v75)
      {
        v142 = v75 + a2 - v64;
LABEL_133:
        if ((v63 & 2) == 0)
          goto LABEL_134;
        v130 = *a3;
        v132 = v17;
        v86 = v22[2];
        v134 = (int)v41;
        v129 = v65;
        if (*(_DWORD *)(*(_QWORD *)&v86 + 24))
        {
          v138 = *(_DWORD *)(*(_QWORD *)&v86 + 24);
          v87 = srtp_cipher_output(*v22, &v146, (unsigned int *)&v138);
          if (mod_srtp)
          {
            v128 = v64;
            v88 = v41;
            v89 = off_25453E988;
            v90 = srtp_octet_string_hex_string((char *)&v146, v138);
            v125 = v89;
            v41 = v88;
            v64 = v128;
            srtp_err_report(3, "%s: keystream prefix: %s\n", v125, v90);
          }
          if (v87)
            return 8;
          v86 = v22[2];
        }
        v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v86 + 40))(*(_QWORD *)(*(_QWORD *)&v86 + 8));
        if ((_DWORD)v13)
          return v13;
        v13 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)&v22[2] + 32))(*(_QWORD *)(*(_QWORD *)&v22[2] + 8), a2, (*a3 - v27 - v134));
        if ((_DWORD)v13)
          return v13;
        v127 = v41;
        v126 = (char *)(a2 + v130 - v41);
        v91 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t, _QWORD, int8x8_t *))(**(_QWORD **)&v22[2]
                                                                                                 + 24))(*(_QWORD *)(*(_QWORD *)&v22[2] + 8), &v141, 4, *(unsigned int *)(*(_QWORD *)&v22[2] + 16), &v146);
        if (mod_srtp)
        {
          v92 = off_25453E988;
          v93 = srtp_octet_string_hex_string((char *)&v146, v134);
          srtp_err_report(3, "%s: computed auth tag:    %s\n", v92, v93);
          if (mod_srtp)
          {
            v94 = off_25453E988;
            v95 = srtp_octet_string_hex_string(v126, v127);
            srtp_err_report(3, "%s: packet auth tag:      %s\n", v94, v95);
          }
        }
        if (v91)
          return 7;
        LODWORD(v41) = v127;
        LODWORD(v17) = v132;
        v65 = v129;
        if ((int)v127 < 1)
        {
LABEL_134:
          v76 = v22[10];
          v77 = **(_QWORD **)&v76 - 1;
          **(_QWORD **)&v76 = v77;
          if (v77 >> 16)
            goto LABEL_146;
          if (v77)
            v78 = *(_DWORD *)(*(_QWORD *)&v76 + 8) == 0;
          else
            v78 = 1;
          if (!v78 || (v77 ? (v79 = 1) : (v79 = 2), *(_DWORD *)(*(_QWORD *)&v76 + 8) = v79, v77))
          {
            if (srtp_event_handler)
            {
              v143 = a1;
              v144 = 0;
              v144 = bswap32(*(_DWORD *)v16) | 0x100000000;
              v80 = v65;
              srtp_event_handler(&v143);
              v65 = v80;
            }
LABEL_146:
            v81 = v17;
            if (!v65
              || !*(_QWORD *)&v22[1]
              || (v13 = srtp_process_header_encryption((uint64_t)v16, v65, (uint64_t)v22), !(_DWORD)v13))
            {
              if (v64)
              {
                v82 = (_QWORD *)*v22;
                if (!*(_QWORD *)v22)
                  return 8;
                if (!*v82)
                  return 8;
                v83 = v82[1];
                if (!v83
                  || (*(unsigned int (**)(uint64_t, unint64_t, int *))(*v82 + 40))(v83, v64, &v142))
                {
                  return 8;
                }
              }
              v84 = v41;
              v85 = *((_DWORD *)v16 + 21);
              if (v85 != 2)
              {
                if (v85)
                {
                  if (srtp_event_handler)
                  {
                    v143 = a1;
                    v144 = 0;
                    LODWORD(v144) = bswap32(*(_DWORD *)v16);
                    srtp_event_handler(&v143);
                  }
                }
                else
                {
                  *((_DWORD *)v16 + 21) = 2;
                }
              }
              if (v16 != (_QWORD *)a1[1])
              {
                v96 = (uint64_t)(v16 + 3);
                if ((v137 & 1) != 0)
                {
LABEL_174:
                  srtp_rdbx_add_index(v96, v136);
                  v13 = 0;
                  v97 = *a3 - (v84 + v27);
LABEL_175:
                  *a3 = v97;
                  return v13;
                }
LABEL_173:
                srtp_rdbx_set_roc_seq(v96, v81, v135);
                v136 = 0;
                *((_DWORD *)v16 + 29) = 0;
                goto LABEL_174;
              }
              v143 = 0;
              v98 = srtp_stream_clone((uint64_t)v16, *(_DWORD *)(a2 + 8), &v143);
              if (!(_DWORD)v98)
              {
                v16 = v143;
                v143[15] = *a1;
                *a1 = v16;
                v96 = (uint64_t)(v16 + 3);
                if ((v137 & 1) != 0)
                  goto LABEL_174;
                goto LABEL_173;
              }
              return v98;
            }
            return v13;
          }
          v99 = (void (*)(_QWORD **))srtp_event_handler;
          if (srtp_event_handler)
          {
            v144 = 0;
LABEL_181:
            v143 = a1;
            v144 = bswap32(*(_DWORD *)v16) | 0x200000000;
            v99(&v143);
            return 15;
          }
          return 15;
        }
        v100 = a2 + v130 + v134 - v127;
        v101 = a2 + v130 - v127;
        if (v100 <= v101 + 1)
          v100 = v101 + 1;
        v102 = v100 + v127 - (a2 + v130);
        if (v102 < 8)
        {
          LOBYTE(v103) = 0;
          v104 = &v146;
          v105 = v126;
          goto LABEL_201;
        }
        if (v102 >= 0x20)
        {
          v106 = v102 & 0xFFFFFFFFFFFFFFE0;
          v107 = (int8x16_t *)(v130 - v127 + a2 + 16);
          v108 = (int8x16_t *)&v148;
          v109 = 0uLL;
          v110 = v102 & 0xFFFFFFFFFFFFFFE0;
          v111 = 0uLL;
          do
          {
            v109 = vorrq_s8(veorq_s8(v107[-1], v108[-1]), v109);
            v111 = vorrq_s8(veorq_s8(*v107, *v108), v111);
            v107 += 2;
            v108 += 2;
            v110 -= 32;
          }
          while (v110);
          v112 = vorrq_s8(v111, v109);
          *(int8x8_t *)v112.i8 = vorr_s8(*(int8x8_t *)v112.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL));
          v113 = v112.i64[0] | HIDWORD(v112.i64[0]) | ((unint64_t)(v112.i64[0] | HIDWORD(v112.i64[0])) >> 16);
          v103 = (v113 | BYTE1(v113));
          if (v102 == v106)
            goto LABEL_202;
          if ((v102 & 0x18) == 0)
          {
            v105 = &v126[v106];
            v104 = (int8x8_t *)((char *)&v146 + v106);
            do
            {
LABEL_201:
              v123 = v104->i8[0];
              v104 = (int8x8_t *)((char *)v104 + 1);
              v122 = v123;
              v124 = *v105++;
              LOBYTE(v103) = v124 ^ v122 | v103;
            }
            while (v105 < &v126[v134]);
            goto LABEL_202;
          }
        }
        else
        {
          LOBYTE(v103) = 0;
          v106 = 0;
        }
        v104 = (int8x8_t *)((char *)&v146 + (v102 & 0xFFFFFFFFFFFFFFF8));
        v114 = (int8x8_t)v103;
        v105 = &v126[v102 & 0xFFFFFFFFFFFFFFF8];
        v115 = (int8x8_t *)(a2 + v106 + v130 - v127);
        v116 = (int8x8_t *)((char *)&v146 + v106);
        v117 = v106 - (v102 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v118 = *v116++;
          v119 = v118;
          v120 = *v115++;
          v114 = vorr_s8(veor_s8(v120, v119), v114);
          v117 += 8;
        }
        while (v117);
        v121 = *(_QWORD *)&v114 | HIDWORD(*(_QWORD *)&v114) | ((*(_QWORD *)&v114 | HIDWORD(*(_QWORD *)&v114)) >> 16);
        LOBYTE(v103) = v121 | BYTE1(v121);
        if (v102 != (v102 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_201;
LABEL_202:
        LODWORD(v41) = v127;
        if ((_BYTE)v103)
          return 7;
        goto LABEL_134;
      }
      return 21;
    }
    return 8;
  }
LABEL_29:
  if (mod_srtp)
  {
    srtp_err_report(3, "%s: function srtp_unprotect_aead\n", off_25453E988);
    if (mod_srtp)
      srtp_err_report(3, "%s: estimated u_packet index: %016llx\n", off_25453E988, v19);
  }
  v146 = 0;
  v147 = 0;
  v29 = *(_DWORD *)(*(_QWORD *)&v22[2] + 16);
  *(int8x8_t *)&v30 = srtp_calc_aead_iv(v22, &v146, v19, a2);
  v31 = (_QWORD *)*v22;
  if (!*(_QWORD *)v22)
    return 8;
  if (!*v31)
    return 8;
  v32 = v31[1];
  if (!v32)
    return 8;
  if ((*(unsigned int (**)(uint64_t, int8x8_t *, uint64_t, double))(*v31 + 48))(v32, &v146, 1, v30))
    return 8;
  v33 = (_QWORD *)v22[1];
  if (v33)
  {
    v34 = *(_DWORD *)(a2 + 8);
    v146.i32[0] = 0;
    v146.i32[1] = v34;
    v147 = bswap64(v19) >> 16;
    if (!*v33)
      return 8;
    v35 = v33[1];
    if (!v35 || (*(unsigned int (**)(uint64_t, int8x8_t *, _QWORD))(*v33 + 48))(v35, &v146, 0))
      return 8;
  }
  v36 = a2 + 4 * (*(_WORD *)a2 & 0xFLL);
  v37 = (unsigned __int16 *)(v36 + 12);
  if ((*(_WORD *)a2 & 0x10) != 0)
  {
    v38 = (unint64_t)&v37[2 * (bswap32(*(unsigned __int16 *)(v36 + 14)) >> 16) + 2];
  }
  else
  {
    v38 = v36 + 12;
    v37 = 0;
  }
  if (v38 > a2 + (unint64_t)(*a3 - (v29 + v27)))
    return 21;
  v145 = *a3 - v27 - (v38 - a2);
  if (v145 < v29)
    return 8;
  v66 = v22[10];
  v67 = **(_QWORD **)&v66 - 1;
  **(_QWORD **)&v66 = v67;
  if (!(v67 >> 16))
  {
    if (!v67 || !*(_DWORD *)(*(_QWORD *)&v66 + 8))
    {
      v68 = v67 ? 1 : 2;
      *(_DWORD *)(*(_QWORD *)&v66 + 8) = v68;
      if (!v67)
      {
        v99 = (void (*)(_QWORD **))srtp_event_handler;
        if (srtp_event_handler)
          goto LABEL_181;
        return 15;
      }
    }
    if (srtp_event_handler)
    {
      v143 = a1;
      v144 = bswap32(*(_DWORD *)v16) | 0x100000000;
      srtp_event_handler(&v143);
    }
  }
  v69 = (_QWORD *)*v22;
  if (!*(_QWORD *)v22)
    return 8;
  if (!*v69)
    return 8;
  if (!v69[1])
    return 8;
  v70 = *(unsigned int (**)(void))(*v69 + 24);
  if (!v70 || v70())
    return 8;
  v71 = (_QWORD *)*v22;
  if (!*(_QWORD *)v22)
    return 2;
  if (!*v71)
    return 2;
  v72 = v71[1];
  if (!v72)
    return 2;
  v13 = (*(uint64_t (**)(uint64_t, unint64_t, unsigned int *))(*v71 + 40))(v72, v38, &v145);
  if (!(_DWORD)v13)
  {
    if (!v37
      || !*(_QWORD *)&v22[1]
      || (v13 = srtp_process_header_encryption((uint64_t)v16, v37, (uint64_t)v22), !(_DWORD)v13))
    {
      v73 = *((_DWORD *)v16 + 21);
      if (v73 != 2)
      {
        if (v73)
        {
          if (srtp_event_handler)
          {
            v143 = a1;
            v144 = bswap32(*(_DWORD *)v16);
            srtp_event_handler(&v143);
          }
        }
        else
        {
          *((_DWORD *)v16 + 21) = 2;
        }
      }
      if ((_QWORD *)a1[1] == v16)
      {
        v143 = 0;
        v98 = srtp_stream_clone((uint64_t)v16, *(_DWORD *)(a2 + 8), &v143);
        if ((_DWORD)v98)
          return v98;
        v16 = v143;
        v143[15] = *a1;
        *a1 = v16;
      }
      srtp_rdbx_add_index((uint64_t)(v16 + 3), v136);
      v13 = 0;
      v97 = *a3 - (v29 + v27);
      goto LABEL_175;
    }
  }
  return v13;
}

uint64_t srtp_add_stream(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;

  v2 = 2;
  if (!a1 || !a2)
    return v2;
  if (!*(_QWORD *)(a2 + 56))
  {
    v9 = *(_QWORD *)(a2 + 72);
    if ((unint64_t)(v9 - 17) >= 0xFFFFFFFFFFFFFFF0)
    {
      v10 = *(_QWORD *)(a2 + 64);
      while (**(_QWORD **)v10 && *(_DWORD *)(*(_QWORD *)v10 + 16) <= 0x80u)
      {
        v10 += 8;
        if (!--v9)
          goto LABEL_4;
      }
      return 2;
    }
    return v2;
  }
LABEL_4:
  v13 = 0;
  v2 = srtp_stream_alloc(&v13, a2);
  if ((_DWORD)v2)
    return v2;
  v5 = v13;
  v6 = srtp_stream_init(v13, a2);
  if ((_DWORD)v6)
  {
    v7 = v6;
    srtp_stream_dealloc((_QWORD *)v5, 0);
    return v7;
  }
  v11 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 1)
  {
    *(_QWORD *)(v5 + 120) = *a1;
    *a1 = v5;
    return 0;
  }
  if (v11 == 2)
  {
    if (!a1[1])
    {
      a1[1] = v5;
      v12 = 2;
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  if (v11 != 3 || a1[1])
  {
LABEL_21:
    srtp_stream_dealloc((_QWORD *)v5, 0);
    return 2;
  }
  a1[1] = v5;
  v12 = 1;
LABEL_24:
  *(_DWORD *)(v5 + 84) = v12;
  return 0;
}

uint64_t srtp_create(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;

  if (!a1)
    return 2;
  v4 = (uint64_t *)malloc_type_calloc(1uLL, 0x18uLL, 0xAF789EA2uLL);
  if (v4)
  {
    v5 = v4;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: (location: %p) allocated\n", off_25453E938, v4);
    *a1 = v5;
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    if (a2)
    {
      while (1)
      {
        v6 = srtp_add_stream(v5, a2);
        if ((_DWORD)v6)
          break;
        a2 = *(_QWORD *)(a2 + 120);
        if (!a2)
          return 0;
      }
      v7 = v6;
      v8 = *a1;
      v9 = (_QWORD *)**a1;
      while (v9)
      {
        v10 = (_QWORD *)v9[15];
        v11 = srtp_stream_dealloc(v9, v8[1]);
        v9 = v10;
        if (v11)
          goto LABEL_22;
      }
      v12 = (_QWORD *)v8[1];
      if (!v12 || !srtp_stream_dealloc(v12, 0))
      {
        if (srtp_mod_alloc)
          srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v8);
        free(v8);
      }
LABEL_22:
      *a1 = 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v7 = 3;
    if (srtp_mod_alloc)
      srtp_err_report(3, "%s: allocation failed (asked for %zu bytes)\n\n", off_25453E938, 0x18uLL);
  }
  return v7;
}

uint64_t srtp_update_stream(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;

  v2 = 2;
  if (!a1 || !a2)
    return v2;
  if (!*(_QWORD *)(a2 + 56))
  {
    v7 = *(_QWORD *)(a2 + 72);
    if ((unint64_t)(v7 - 17) < 0xFFFFFFFFFFFFFFF0)
      return v2;
    v8 = *(_QWORD *)(a2 + 64);
    while (**(_QWORD **)v8 && *(_DWORD *)(*(_QWORD *)v8 + 16) <= 0x80u)
    {
      v8 += 8;
      if (!--v7)
        goto LABEL_4;
    }
    return 2;
  }
LABEL_4:
  if ((*(_DWORD *)a2 - 2) < 2)
  {
    if (a1[1])
    {
      v32 = 0;
      v2 = srtp_stream_alloc(&v32, a2);
      if (!(_DWORD)v2)
      {
        v5 = v32;
        v6 = srtp_stream_init((uint64_t)v32, a2);
        if ((_DWORD)v6)
        {
          v2 = v6;
          if (srtp_mod_alloc)
            srtp_err_report(3, "%s: (location: %p) freed\n", off_25453E938, v5);
          free(v5);
        }
        else
        {
          v33 = 0uLL;
          v34 = 0;
          v17 = (_QWORD *)*a1;
          if (*a1)
          {
            v18 = 0;
            while (1)
            {
              v19 = a1[1];
              v20 = v17;
              while (*(_QWORD *)(v20[1] + 16) != *(_QWORD *)(*(_QWORD *)(v19 + 8) + 16))
              {
                v20 = (_QWORD *)v20[15];
                if (!v20)
                {
                  v26 = v18;
                  goto LABEL_58;
                }
              }
              v31 = v20;
              v21 = *(_DWORD *)v20;
              v22 = v20[3];
              v34 = v20[9];
              v33 = *(_OWORD *)(v20 + 7);
              if (*(_DWORD *)v17 != v21)
              {
                while (1)
                {
                  v23 = v17;
                  v17 = (_QWORD *)v17[15];
                  if (!v17)
                    break;
                  if (*(_DWORD *)v17 == v21)
                  {
                    if (v23 != v17)
                    {
                      v23[15] = v17[15];
                      goto LABEL_51;
                    }
                    v17 = v23;
                    goto LABEL_46;
                  }
                }
                v2 = 13;
                if (!v18)
                  goto LABEL_66;
                do
                {
LABEL_65:
                  v29 = (_QWORD *)v18[15];
                  srtp_stream_dealloc(v18, (uint64_t)v5);
                  v18 = v29;
                }
                while (v29);
                goto LABEL_66;
              }
              v23 = (_QWORD *)v17[15];
LABEL_46:
              *a1 = (uint64_t)v23;
LABEL_51:
              v24 = srtp_stream_dealloc(v17, v19);
              if ((_DWORD)v24)
              {
                v2 = v24;
                if (!v18)
                  goto LABEL_66;
                goto LABEL_65;
              }
              v25 = srtp_stream_clone((uint64_t)v5, v21, &v31);
              if ((_DWORD)v25)
                break;
              v26 = v31;
              v31[15] = v18;
              v26[3] = v22;
              *(_OWORD *)(v26 + 7) = v33;
              v26[9] = v34;
              v31 = 0;
              v33 = 0uLL;
              v34 = 0;
              v17 = (_QWORD *)*a1;
              v18 = v26;
              if (!*a1)
                goto LABEL_58;
            }
            v2 = v25;
            if (v18)
            {
              do
              {
                v30 = (_QWORD *)v18[15];
                srtp_stream_dealloc(v18, (uint64_t)v5);
                v18 = v30;
              }
              while (v30);
            }
LABEL_66:
            srtp_stream_dealloc(v5, 0);
          }
          else
          {
            v26 = 0;
LABEL_58:
            srtp_stream_dealloc((_QWORD *)a1[1], 0);
            a1[1] = (uint64_t)v5;
            if (v26)
            {
              v27 = v26;
              do
              {
                v28 = v27;
                v27 = (_QWORD *)v27[15];
              }
              while (v27);
              v2 = 0;
              v28[15] = *a1;
              *a1 = (uint64_t)v26;
            }
            else
            {
              return 0;
            }
          }
        }
      }
      return v2;
    }
    return 2;
  }
  if (*(_DWORD *)a2 != 1)
    return 2;
  v9 = (_QWORD *)*a1;
  if (!*a1)
    return 2;
  v10 = bswap32(*(_DWORD *)(a2 + 4));
  v11 = *a1;
  while (*(_DWORD *)v11 != v10)
  {
    v11 = *(_QWORD *)(v11 + 120);
    if (!v11)
      return 2;
  }
  v13 = *(_QWORD *)(v11 + 24);
  v33 = *(_OWORD *)(v11 + 56);
  v34 = *(_QWORD *)(v11 + 72);
  if (*(_DWORD *)v9 == v10)
  {
    v14 = (_QWORD *)v9[15];
  }
  else
  {
    do
    {
      v14 = v9;
      v9 = (_QWORD *)v9[15];
      if (!v9)
        return 13;
    }
    while (*(_DWORD *)v9 != v10);
    if (v14 != v9)
    {
      v14[15] = v9[15];
      goto LABEL_31;
    }
    v9 = v14;
  }
  *a1 = (uint64_t)v14;
LABEL_31:
  v2 = srtp_stream_dealloc(v9, a1[1]);
  if (!(_DWORD)v2)
  {
    v2 = srtp_add_stream(a1, a2);
    if (!(_DWORD)v2)
    {
      v15 = *a1;
      if (*a1)
      {
        v16 = bswap32(*(_DWORD *)(a2 + 4));
        v2 = 1;
        while (*(_DWORD *)v15 != v16)
        {
          v15 = *(_QWORD *)(v15 + 120);
          if (!v15)
            return v2;
        }
        v2 = 0;
        *(_QWORD *)(v15 + 24) = v13;
        *(_OWORD *)(v15 + 56) = v33;
        *(_QWORD *)(v15 + 72) = v34;
      }
      else
      {
        return 1;
      }
    }
  }
  return v2;
}

uint64_t srtp_protect_rtcp_mki(int8x8_t *a1, uint64_t a2, int *a3, unsigned int a4, unsigned int a5)
{
  uint64_t result;
  unsigned int v11;
  int8x8_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  __n128 v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  double v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t (*v45)(void);
  int v46;
  _QWORD *v47;
  int v48;
  const char *v49;
  char *v50;
  int v51;
  const char *v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  unsigned int (*v57)(void);
  _QWORD *v58;
  unsigned int (*v59)(void);
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  unsigned int (*v65)(void);
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  _DWORD v71[2];
  int8x8_t *v72;
  uint64_t v73;
  int v74;
  int v75;

  v70 = 0;
  if (*a3 < 8)
    return 2;
  v69 = 0;
  v11 = *(_DWORD *)(a2 + 4);
  v12 = *a1;
  if (*a1)
  {
    while (**(_DWORD **)&v12 != v11)
    {
      v12 = *(int8x8_t *)(*(_QWORD *)&v12 + 120);
      if (!*(_QWORD *)&v12)
        goto LABEL_6;
    }
LABEL_9:
    v14 = *(_DWORD *)(*(_QWORD *)&v12 + 84);
    if (v14 != 1)
    {
      if (v14)
      {
        if (srtp_event_handler)
        {
          v72 = a1;
          v73 = 0;
          LODWORD(v73) = bswap32(**(_DWORD **)&v12);
          srtp_event_handler(&v72);
        }
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)&v12 + 84) = 1;
      }
    }
    if (a4)
    {
      if (*(_DWORD *)(*(_QWORD *)&v12 + 16) <= a5)
        return 25;
      v15 = *(_QWORD *)(*(_QWORD *)&v12 + 8) + 88 * a5;
      if (!v15)
        return 25;
    }
    else
    {
      v15 = *(_QWORD *)(*(_QWORD *)&v12 + 8);
      if (!v15)
        return 25;
    }
    if ((*(_DWORD *)(*(_QWORD *)v15 + 20) & 0xFFFFFFFE) == 6)
    {
      v16 = *(unsigned int *)(*(_QWORD *)(v15 + 32) + 16);
      v17 = *a3;
      v74 = *(_DWORD *)(*(_QWORD *)(v15 + 32) + 16);
      v75 = v17 - 8;
      if ((*(_BYTE *)(*(_QWORD *)&v12 + 80) & 1) != 0)
      {
        v18 = 128;
        v67 = a2 + 8;
      }
      else
      {
        v18 = 0;
        v67 = 0;
        v75 = 0;
      }
      if (a4 && (v35 = *(_DWORD *)(v15 + 72)) != 0)
      {
        memcpy((void *)(a2 + v17 + v16 + 4), *(const void **)(v15 + 64), *(unsigned int *)(v15 + 72));
        v36 = v35 + 4;
        v37 = *(_DWORD *)(*(_QWORD *)&v12 + 56);
        if (v37 <= 0x7FFFFFFE)
        {
LABEL_40:
          v66 = v36;
          v38 = v37 + 1;
          *(_DWORD *)(*(_QWORD *)&v12 + 56) = v37 + 1;
          v39 = bswap32(v37 + 1) | v18;
          if (mod_srtp)
            srtp_err_report(3, "%s: srtcp index: %x\n", off_25453E988, v38);
          v72 = 0;
          v73 = 0;
          *(_DWORD *)(a2 + 8 + (v17 - 8) + v16) = v39;
          *(int8x8_t *)&v40 = srtp_calc_aead_iv_srtcp(v15, (int8x8_t *)&v72, v38, *(_DWORD *)(a2 + 4));
          if (v41)
            return 8;
          v42 = *(_QWORD **)(v15 + 24);
          if (!v42)
            return 8;
          if (!*v42)
            return 8;
          v43 = v42[1];
          if (!v43
            || (*(unsigned int (**)(uint64_t, int8x8_t **, _QWORD, double))(*v42 + 48))(v43, &v72, 0, v40))
          {
            return 8;
          }
          v44 = *(_QWORD **)(v15 + 24);
          if (v67)
          {
            if (!v44)
              return 8;
            if (!*v44)
              return 8;
            if (!v44[1])
              return 8;
            v45 = *(uint64_t (**)(void))(*v44 + 24);
            if (!v45)
              return 8;
            v46 = v45();
            result = 8;
            if (v46)
              return result;
          }
          else
          {
            if (!v44)
              return 8;
            if (!*v44)
              return 8;
            if (!v44[1])
              return 8;
            v57 = *(unsigned int (**)(void))(*v44 + 24);
            if (!v57 || v57())
              return 8;
          }
          v71[1] = v39;
          v58 = *(_QWORD **)(v15 + 24);
          if (v58)
          {
            if (*v58)
            {
              if (v58[1])
              {
                v59 = *(unsigned int (**)(void))(*v58 + 24);
                if (v59)
                {
                  if (!v59())
                  {
                    if (v67)
                    {
                      v60 = *(_QWORD **)(v15 + 24);
                      if (!v60)
                        return 8;
                      if (!*v60)
                        return 8;
                      v61 = v60[1];
                      if (!v61
                        || (*(unsigned int (**)(uint64_t, uint64_t, int *))(*v60 + 32))(v61, v67, &v75))
                      {
                        return 8;
                      }
                    }
                    else
                    {
                      v71[0] = 0;
                      v62 = *(_QWORD **)(v15 + 24);
                      if (!v62)
                        return 8;
                      if (!*v62)
                        return 8;
                      v63 = v62[1];
                      if (!v63
                        || (*(unsigned int (**)(uint64_t, _QWORD, _DWORD *))(*v62 + 32))(v63, 0, v71))
                      {
                        return 8;
                      }
                    }
                    v64 = *(_QWORD **)(v15 + 24);
                    if (v64)
                    {
                      if (*v64)
                      {
                        if (v64[1])
                        {
                          v65 = *(unsigned int (**)(void))(*v64 + 56);
                          if (v65)
                          {
                            if (!v65())
                            {
                              result = 0;
                              v56 = v74 + v66 + *a3;
                              goto LABEL_74;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          return 8;
        }
      }
      else
      {
        v36 = 4;
        v37 = *(_DWORD *)(*(_QWORD *)&v12 + 56);
        if (v37 <= 0x7FFFFFFE)
          goto LABEL_40;
      }
    }
    else
    {
      v19 = *(_DWORD *)(*(_QWORD *)(v15 + 32) + 16);
      v20 = *a3;
      v21 = (v20 - 8);
      v22 = *(_DWORD *)(*(_QWORD *)&v12 + 80);
      v70 = (v22 << 31 >> 31) & v21;
      if (a4)
      {
        a4 = *(_DWORD *)(v15 + 72);
        if (a4)
        {
          memcpy((void *)(a2 + v20 + 4), *(const void **)(v15 + 64), *(unsigned int *)(v15 + 72));
          v20 = *a3;
        }
      }
      v23 = (char *)(a2 + v20 + a4 + 4);
      srtp_ekt_write_data(*(unsigned __int16 ***)(*(_QWORD *)&v12 + 96), v23, v19, a3, *(_QWORD *)(*(_QWORD *)&v12 + 24));
      v25 = *(_DWORD *)(*(_QWORD *)&v12 + 56);
      if (v25 <= 0x7FFFFFFE)
      {
        v68 = v22 & 1;
        v26 = v25 + 1;
        *(_DWORD *)(*(_QWORD *)&v12 + 56) = v26;
        v27 = bswap32(v26);
        if (mod_srtp)
          v24.n128_f64[0] = srtp_err_report(3, "%s: srtcp index: %x\n", off_25453E988, v26);
        *(_DWORD *)(a2 + 8 + v21) = v27 | (v68 << 7);
        v28 = *(_QWORD **)(v15 + 24);
        v29 = *v28;
        v30 = *(_DWORD *)(*v28 + 80);
        v31 = v30 > 5;
        v32 = (1 << v30) & 0x32;
        if (v31 || v32 == 0)
        {
          v72 = 0;
          LODWORD(v73) = 0;
          HIDWORD(v73) = v27;
          v34 = v28[1];
          if (!v34)
            return 8;
        }
        else
        {
          v72 = 0;
          HIDWORD(v72) = *(_DWORD *)(a2 + 4);
          LODWORD(v73) = v27 << 16;
          HIDWORD(v73) = HIWORD(v27);
          v34 = v28[1];
          if (!v34)
            return 8;
        }
        if ((*(unsigned int (**)(uint64_t, int8x8_t **, _QWORD, __n128))(v29 + 48))(v34, &v72, 0, v24))
          return 8;
        if (a2)
        {
          v47 = *(_QWORD **)(v15 + 24);
          v69 = *(_DWORD *)(*(_QWORD *)(v15 + 32) + 24);
          v48 = srtp_cipher_output(v47, v23, (unsigned int *)&v69);
          if (mod_srtp)
          {
            v49 = off_25453E988;
            v50 = srtp_octet_string_hex_string(v23, v69);
            srtp_err_report(3, "%s: keystream prefix: %s\n", v49, v50);
          }
          if (v48)
            return 8;
        }
        if (v68)
        {
          v54 = *(_QWORD **)(v15 + 24);
          if (!v54)
            return 8;
          if (!*v54)
            return 8;
          v55 = v54[1];
          if (!v55 || (*(unsigned int (**)(uint64_t, uint64_t, int *))(*v54 + 32))(v55, a2 + 8, &v70))
            return 8;
        }
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v15 + 32)
                                                                                                + 8));
        if ((_DWORD)result)
          return result;
        v51 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, char *))(**(_QWORD **)(v15 + 32) + 24))(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a2, (*a3 + 4), *(unsigned int *)(*(_QWORD *)(v15 + 32) + 16), v23);
        if (mod_srtp)
        {
          v52 = off_25453E988;
          v53 = srtp_octet_string_hex_string(v23, v19);
          srtp_err_report(3, "%s: srtcp auth tag:    %s\n", v52, v53);
        }
        if (v51)
          return 7;
        result = 0;
        v56 = v19 + a4 + *a3 + 4;
LABEL_74:
        *a3 = v56;
        return result;
      }
    }
    return 15;
  }
LABEL_6:
  v13 = (uint64_t)a1[1];
  if (!v13)
    return 13;
  v72 = 0;
  result = srtp_stream_clone(v13, v11, (_QWORD **)&v72);
  if (!(_DWORD)result)
  {
    v12 = (int8x8_t)v72;
    v72[15] = *a1;
    *a1 = v12;
    goto LABEL_9;
  }
  return result;
}

uint64_t srtp_unprotect_rtcp_mki(_QWORD *a1, uint64_t a2, int *a3, int a4, __n128 a5)
{
  int v5;
  uint64_t v6;
  _QWORD *v11;
  unsigned __int16 **v12;
  unsigned __int16 *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  unsigned int v33;
  double v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int (*v39)(void);
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  __n128 v52;
  const char *v53;
  char *v54;
  const char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unsigned int (*v63)(void);
  _QWORD *v64;
  unsigned int (*v65)(void);
  _QWORD *v66;
  uint64_t (*v67)(void);
  unint64_t v68;
  int8x16_t *v69;
  int8x16_t *v70;
  int8x16_t v71;
  unint64_t v72;
  int8x16_t v73;
  unint64_t v74;
  int8x8_t *v75;
  int8x8_t *v76;
  unint64_t v77;
  int8x8_t v78;
  int8x8_t v79;
  int8x8_t v80;
  unint64_t v81;
  char v82;
  char v83;
  char v84;
  int v85;
  char *v86;
  const char *v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  int v103;
  _DWORD v104[2];
  int v105;
  _QWORD *v106;
  unsigned int v107;
  int v108;
  __int128 v109;
  _OWORD v110[7];
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  v104[0] = 0;
  v5 = *a3;
  if (*a3 < 12)
    return 2;
  v103 = 0;
  v11 = (_QWORD *)*a1;
  if (!*a1)
  {
LABEL_6:
    v11 = (_QWORD *)a1[1];
    if (v11)
    {
      v12 = (unsigned __int16 **)v11[12];
      if (!v12)
      {
LABEL_12:
        if (mod_srtp)
          a5.n128_f64[0] = srtp_err_report(3, "%s: srtcp using provisional stream (SSRC: 0x%08x)\n", off_25453E988, bswap32(*(_DWORD *)(a2 + 4)));
        goto LABEL_14;
      }
      v13 = *v12;
      if (*v13 == *(unsigned __int16 *)(a2 + (v5 - 2)))
      {
        if (*((_BYTE *)v13 + 2) != 1)
          return 2;
        v14 = *(unsigned int *)(a2 + (v5 - 4));
        bzero((void *)v11[5], (unint64_t)*((unsigned int *)v11 + 8) >> 3);
        v15 = v11[3];
        if (v14 < v15 >> 16)
          return 10;
        v109 = 0u;
        memset(v110, 0, sizeof(v110));
        v11[3] = (unsigned __int16)v15 | (v14 << 16);
        v6 = srtp_stream_init((uint64_t)v11, (uint64_t)&v109);
        if ((_DWORD)v6)
          return v6;
        goto LABEL_12;
      }
    }
    return 13;
  }
  while (*(_DWORD *)v11 != *(_DWORD *)(a2 + 4))
  {
    v11 = (_QWORD *)v11[15];
    if (!v11)
      goto LABEL_6;
  }
LABEL_14:
  if (!a4)
  {
    v19 = 0;
    v17 = v11[1];
    v16 = *a3;
    goto LABEL_25;
  }
  v16 = *a3;
  v17 = v11[1];
  if ((*(_DWORD *)(*(_QWORD *)v17 + 20) & 0xFFFFFFFE) == 6)
  {
    v18 = 0;
  }
  else
  {
    v18 = *(_DWORD *)(*(_QWORD *)(v17 + 16) + 16);
    if (v18 > v16)
      return 25;
  }
  v20 = *((unsigned int *)v11 + 4);
  if (!(_DWORD)v20)
    return 25;
  v21 = v16 - v18;
  while (1)
  {
    v19 = *(_DWORD *)(v17 + 72);
    if (v19 - 1 < v21
      && !memcmp((const void *)(a2 + v21 - v19), *(const void **)(v17 + 64), *(unsigned int *)(v17 + 72)))
    {
      break;
    }
    v17 += 88;
    if (!--v20)
      return 25;
  }
LABEL_25:
  v22 = *(_DWORD *)(*(_QWORD *)(v17 + 32) + 16);
  v23 = v22 + v19;
  if (v16 < (int)(v22 + v19 + 12))
    return 2;
  if ((*(_DWORD *)(*(_QWORD *)v17 + 20) & 0xFFFFFFFE) != 6)
  {
    v26 = *((_DWORD *)v11 + 20);
    v104[0] = v16 - (v22 + v19 + 12);
    v27 = *(_DWORD *)(a2 + v16 - v23 - 4);
    if (((v26 & 0xFFFFFFFD) == 1) != (v27 & 0x80) >> 7)
      return 14;
    if ((v26 | 2) == 3)
    {
      v97 = a2 + 8;
    }
    else
    {
      v97 = 0;
      v104[0] = 0;
    }
    v100 = v16 - v23;
    v40 = v11[12];
    if (v40)
    {
      v41 = *(_BYTE *)(*(_QWORD *)v40 + 2) == 1;
      v42 = -24;
      if (!v41)
        v42 = 0;
      v43 = (void *)(a2 + v100 + v19 + v42);
      __memcpy_chk();
      if (v22)
        bzero(v43, v22);
      v100 = (v100 + v22);
      v99 = (char *)&v106;
    }
    else
    {
      v99 = (char *)(a2 + v100 + v19);
    }
    v30 = bswap32(v27 & 0xFFFFFF7F);
    if (mod_srtp)
      a5.n128_f64[0] = srtp_err_report(3, "%s: srtcp index: %x\n", off_25453E988, v30);
    v44 = *((unsigned int *)v11 + 14);
    if (v44 + 128 > (unint64_t)v30)
    {
      v32 = v30 >= v44;
      v45 = v30 - v44;
      if (!v32)
        return 10;
      if (((*((_DWORD *)v11 + (v45 >> 5) + 16) >> v45) & 1) != 0)
        return 9;
    }
    v46 = *(_QWORD **)(v17 + 24);
    v47 = *(_DWORD *)(*v46 + 80);
    if (v47 <= 5 && ((1 << v47) & 0x32) != 0)
    {
      *(_QWORD *)&v109 = 0;
      DWORD1(v109) = *(_DWORD *)(a2 + 4);
      DWORD2(v109) = (v27 & 0xFFFFFF7F) << 16;
      HIDWORD(v109) = HIWORD(v27);
      v48 = *v46;
      if (!*v46 || (v49 = v46[1]) == 0)
      {
LABEL_80:
        v50 = 2;
LABEL_81:
        if (v50)
          return 8;
        v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 8));
        if ((_DWORD)v6)
          return v6;
        v51 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, __int128 *))(**(_QWORD **)(v17 + 32) + 24))(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 8), a2, v100, *(unsigned int *)(*(_QWORD *)(v17 + 32) + 16), &v109);
        if (mod_srtp)
        {
          v53 = off_25453E988;
          v54 = srtp_octet_string_hex_string((char *)&v109, v22);
          v52.n128_f64[0] = srtp_err_report(3, "%s: srtcp computed tag:       %s\n", v53, v54);
        }
        if (v51)
          return 7;
        if (mod_srtp)
        {
          v55 = off_25453E988;
          v56 = srtp_octet_string_hex_string(v99, v22);
          v52.n128_f64[0] = srtp_err_report(3, "%s: srtcp tag from packet:    %s\n", v55, v56);
        }
        v57 = v99;
        if (v22 < 1)
        {
LABEL_126:
          v103 = *(_DWORD *)(*(_QWORD *)(v17 + 32) + 24);
          if (!v103)
            goto LABEL_165;
          v85 = srtp_cipher_output(*(_QWORD **)(v17 + 24), v57, (unsigned int *)&v103);
          if (mod_srtp)
          {
            v86 = v57;
            v87 = off_25453E988;
            v88 = srtp_octet_string_hex_string(v86, v103);
            v52.n128_f64[0] = srtp_err_report(3, "%s: keystream prefix: %s\n", v87, v88);
          }
          if (!v85)
          {
LABEL_165:
            if (!v97
              || (v89 = *(_QWORD **)(v17 + 24)) != 0
              && *v89
              && (v90 = v89[1]) != 0
              && !(*(unsigned int (**)(uint64_t, uint64_t, _DWORD *, __n128))(*v89 + 40))(v90, v97, v104, v52))
            {
              v91 = v11[12];
              if (v91)
              {
                if (*(_BYTE *)(*(_QWORD *)v91 + 2) == 1)
                  LODWORD(v91) = -24;
                else
                  LODWORD(v91) = 0;
              }
              *a3 = v91 + *a3 - v23 - 4;
              v92 = *((_DWORD *)v11 + 21);
              if (v92 != 2)
              {
                if (v92)
                {
                  if (srtp_event_handler)
                  {
                    v101 = a1;
                    v102 = 0;
                    LODWORD(v102) = bswap32(*(_DWORD *)v11);
                    srtp_event_handler(&v101);
                  }
                }
                else
                {
                  *((_DWORD *)v11 + 21) = 2;
                }
              }
              if (v11 != (_QWORD *)a1[1])
                goto LABEL_145;
              v101 = 0;
              v93 = srtp_stream_clone((uint64_t)v11, *(_DWORD *)(a2 + 4), &v101);
              if (!(_DWORD)v93)
              {
                v94 = *a1;
                v11 = v101;
LABEL_149:
                v11[15] = v94;
                *a1 = v11;
LABEL_145:
                srtp_rdb_add_index((uint64_t)(v11 + 7), v30);
                return 0;
              }
              return v93;
            }
          }
          return 8;
        }
        if (&v99[v22] <= v99 + 1)
          v58 = v99 + 1;
        else
          v58 = &v99[v22];
        v59 = v58 - v99;
        if (v59 < 8)
        {
          LOBYTE(v60) = 0;
          v61 = (char *)&v109;
          v62 = v99;
          goto LABEL_124;
        }
        if (v59 >= 0x20)
        {
          v68 = v59 & 0xFFFFFFFFFFFFFFE0;
          v69 = (int8x16_t *)(v99 + 16);
          v70 = (int8x16_t *)v110;
          v71 = 0uLL;
          v72 = v59 & 0xFFFFFFFFFFFFFFE0;
          v73 = 0uLL;
          do
          {
            v71 = vorrq_s8(veorq_s8(v69[-1], v70[-1]), v71);
            v73 = vorrq_s8(veorq_s8(*v69, *v70), v73);
            v69 += 2;
            v70 += 2;
            v72 -= 32;
          }
          while (v72);
          v52 = (__n128)vorrq_s8(v73, v71);
          v52.n128_u64[0] = (unint64_t)vorr_s8((int8x8_t)v52.n128_u64[0], (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL));
          v74 = v52.n128_u64[0] | HIDWORD(v52.n128_u64[0]) | ((v52.n128_u64[0] | HIDWORD(v52.n128_u64[0])) >> 16);
          v60 = (v74 | BYTE1(v74));
          if (v59 == v68)
          {
            v57 = v99;
            goto LABEL_125;
          }
          if ((v59 & 0x18) == 0)
          {
            v57 = v99;
            v62 = &v99[v68];
            v61 = (char *)&v110[-1] + v68;
            goto LABEL_124;
          }
          v57 = v99;
        }
        else
        {
          LOBYTE(v60) = 0;
          v68 = 0;
        }
        v61 = (char *)&v110[-1] + (v59 & 0xFFFFFFFFFFFFFFF8);
        v62 = &v57[v59 & 0xFFFFFFFFFFFFFFF8];
        v52 = (__n128)v60;
        v75 = (int8x8_t *)&v57[v68];
        v76 = (int8x8_t *)((char *)&v110[-1] + v68);
        v77 = v68 - (v59 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v78 = *v76++;
          v79 = v78;
          v80 = *v75++;
          v52.n128_u64[0] = (unint64_t)vorr_s8(veor_s8(v80, v79), (int8x8_t)v52.n128_u64[0]);
          v77 += 8;
        }
        while (v77);
        v81 = v52.n128_u64[0] | HIDWORD(v52.n128_u64[0]) | ((v52.n128_u64[0] | HIDWORD(v52.n128_u64[0])) >> 16);
        LOBYTE(v60) = v81 | BYTE1(v81);
        if (v59 == (v59 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_125:
          if ((_BYTE)v60)
            return 7;
          goto LABEL_126;
        }
        do
        {
LABEL_124:
          v83 = *v61++;
          v82 = v83;
          v84 = *v62++;
          LOBYTE(v60) = v84 ^ v82 | v60;
        }
        while (v62 < &v99[v22]);
        goto LABEL_125;
      }
    }
    else
    {
      *(_QWORD *)&v109 = 0;
      DWORD2(v109) = 0;
      HIDWORD(v109) = v27 & 0xFFFFFF7F;
      v48 = *v46;
      if (!*v46)
        goto LABEL_80;
      v49 = v46[1];
      if (!v49)
        goto LABEL_80;
    }
    v50 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, __n128))(v48 + 48))(v49, &v109, 1, a5);
    goto LABEL_81;
  }
  if (v19)
    v24 = *(_DWORD *)(v17 + 72);
  else
    v24 = 0;
  v28 = *(_DWORD *)(a2 + v16 - v24 - 4);
  LODWORD(v101) = v16 - v24 - 12;
  if ((v28 & 0x80) != 0)
  {
    v29 = a2 + 8;
  }
  else
  {
    v29 = 0;
    LODWORD(v101) = 0;
  }
  v30 = bswap32(v28 & 0xFFFFFF7F);
  if (mod_srtp)
    srtp_err_report(3, "%s: srtcp index: %x\n", off_25453E988, v30);
  v31 = *((unsigned int *)v11 + 14);
  if (v31 + 128 > (unint64_t)v30)
  {
    v32 = v30 >= v31;
    v33 = v30 - v31;
    if (!v32)
      return 10;
    if (((*((_DWORD *)v11 + (v33 >> 5) + 16) >> v33) & 1) != 0)
      return 9;
  }
  v105 = 0;
  v109 = 0uLL;
  *(int8x8_t *)&v34 = srtp_calc_aead_iv_srtcp(v17, (int8x8_t *)&v109, v30, *(_DWORD *)(a2 + 4));
  if (v35)
    return 8;
  v36 = *(_QWORD **)(v17 + 24);
  if (!v36)
    return 8;
  if (!*v36)
    return 8;
  v37 = v36[1];
  if (!v37
    || (*(unsigned int (**)(uint64_t, __int128 *, uint64_t, double))(*v36 + 48))(v37, &v109, 1, v34))
  {
    return 8;
  }
  v38 = *(_QWORD **)(v17 + 24);
  if (v29)
  {
    if (!v38)
      return 8;
    if (!*v38)
      return 8;
    if (!v38[1])
      return 8;
    v98 = v29;
    v39 = *(unsigned int (**)(void))(*v38 + 24);
    if (!v39)
      return 8;
    v6 = 8;
    if (v39())
      return v6;
  }
  else
  {
    if (!v38)
      return 8;
    if (!*v38)
      return 8;
    v98 = 0;
    if (!v38[1])
      return 8;
    v63 = *(unsigned int (**)(void))(*v38 + 24);
    if (!v63 || v63())
      return 8;
  }
  v104[1] = v28;
  v64 = *(_QWORD **)(v17 + 24);
  if (!v64)
    return 8;
  if (!*v64)
    return 8;
  if (!v64[1])
    return 8;
  v65 = *(unsigned int (**)(void))(*v64 + 24);
  if (!v65 || v65())
    return 8;
  if (v98)
  {
    v66 = *(_QWORD **)(v17 + 24);
    if (v66 && *v66 && v66[1])
    {
      v67 = *(uint64_t (**)(void))(*v66 + 40);
      goto LABEL_154;
    }
  }
  else
  {
    v105 = v22;
    v95 = *(_QWORD **)(v17 + 24);
    if (v95 && *v95 && v95[1])
    {
      v67 = *(uint64_t (**)(void))(*v95 + 40);
LABEL_154:
      v6 = v67();
      if ((_DWORD)v6)
        return v6;
      *a3 = *a3 - v24 - v22 - 4;
      v96 = *((_DWORD *)v11 + 21);
      if (v96 != 2)
      {
        if (v96)
        {
          if (srtp_event_handler)
          {
            v106 = a1;
            v107 = bswap32(*(_DWORD *)v11);
            v108 = 0;
            srtp_event_handler(&v106);
          }
        }
        else
        {
          *((_DWORD *)v11 + 21) = 2;
        }
      }
      if ((_QWORD *)a1[1] != v11)
        goto LABEL_145;
      v106 = 0;
      v93 = srtp_stream_clone((uint64_t)v11, *(_DWORD *)(a2 + 4), &v106);
      if (!(_DWORD)v93)
      {
        v94 = *a1;
        v11 = v106;
        goto LABEL_149;
      }
      return v93;
    }
  }
  return 2;
}

int8x8_t srtp_calc_aead_iv(int8x8_t *a1, int8x8_t *a2, unint64_t a3, uint64_t a4)
{
  int v6;
  const char *v7;
  char *v8;
  const char *v9;
  char *v10;
  int8x8_t result;
  int v12;
  int8x8_t v13;
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)&v15 = 0;
  HIWORD(v15) = 0;
  v13 = 0;
  v14 = 0;
  *(_DWORD *)((char *)&v15 + 10) = bswap32(a3) >> 16;
  *(_DWORD *)((char *)&v15 + 6) = bswap32(a3 >> 16);
  *(_DWORD *)((char *)&v15 + 2) = *(_DWORD *)(a4 + 8);
  v6 = mod_srtp;
  if (mod_srtp)
  {
    v7 = off_25453E988;
    v8 = v128_hex_string((unsigned __int8 *)&v15);
    srtp_err_report(3, "%s: Pre-salted RTP IV = %s\n\n", v7, v8);
    v6 = mod_srtp;
    v13 = a1[5];
    LODWORD(v14) = a1[6].i32[0];
    if (mod_srtp)
    {
      v9 = off_25453E988;
      v10 = v128_hex_string((unsigned __int8 *)&v13);
      srtp_err_report(3, "%s: RTP SALT = %s\n\n", v9, v10);
      v6 = HIDWORD(v14);
    }
  }
  else
  {
    v13 = a1[5];
    LODWORD(v14) = a1[6].i32[0];
  }
  result = veor_s8(v13, *(int8x8_t *)&v15);
  *a2 = result;
  v12 = HIDWORD(v15) ^ v6;
  a2[1].i32[0] = v14 ^ DWORD2(v15);
  a2[1].i32[1] = v12;
  return result;
}

int8x8_t srtp_calc_aead_iv_srtcp(uint64_t a1, int8x8_t *a2, unsigned int a3, __int32 a4)
{
  int v6;
  const char *v7;
  char *v8;
  const char *v9;
  char *v10;
  int8x8_t result;
  int v12;
  int8x8_t v13;
  uint64_t v14;
  int8x8_t v15;
  uint64_t v16;

  v16 = 0;
  v13 = 0;
  v14 = 0;
  v15.i16[0] = 0;
  *(__int32 *)((char *)v15.i32 + 2) = a4;
  v15.i16[3] = 0;
  if ((a3 & 0x80000000) == 0)
  {
    LODWORD(v16) = bswap32(a3);
    v6 = mod_srtp;
    if (mod_srtp)
    {
      v7 = off_25453E988;
      v8 = v128_hex_string((unsigned __int8 *)&v15);
      srtp_err_report(3, "%s: Pre-salted RTCP IV = %s\n\n", v7, v8);
      v6 = mod_srtp;
      v13 = *(int8x8_t *)(a1 + 52);
      LODWORD(v14) = *(_DWORD *)(a1 + 60);
      if (mod_srtp)
      {
        v9 = off_25453E988;
        v10 = v128_hex_string((unsigned __int8 *)&v13);
        srtp_err_report(3, "%s: RTCP SALT = %s\n\n", v9, v10);
        v6 = HIDWORD(v14);
      }
    }
    else
    {
      v13 = *(int8x8_t *)(a1 + 52);
      LODWORD(v14) = *(_DWORD *)(a1 + 60);
    }
    result = veor_s8(v13, v15);
    *a2 = result;
    v12 = HIDWORD(v16) ^ v6;
    a2[1].i32[0] = v14 ^ v16;
    a2[1].i32[1] = v12;
  }
  return result;
}

uint64_t arm_cpu_caps()
{
  char *v0;
  int v1;
  char *v2;
  unsigned int v3;
  unsigned int v4;

  v0 = getenv("VPX_SIMD_CAPS");
  if (v0 && *v0)
  {
    v1 = strtol(v0, 0, 0);
  }
  else
  {
    v2 = getenv("VPX_SIMD_CAPS_MASK");
    if (v2 && *v2)
      v1 = strtol(v2, 0, 0) & 1;
    else
      v1 = 1;
  }
  v3 = v1 & 0xFFFFFFFB;
  if ((v1 & 2) != 0)
    v3 = v1;
  v4 = v3 & 0xFFFFFFF7;
  if ((v3 & 2) == 0)
    v3 &= ~8u;
  if ((v3 & 4) == 0)
    v3 = v4;
  if ((v3 & 8) != 0)
    return v3;
  else
    return v3 & 0xFFFFFFEF;
}

void vp8_de_alloc_frame_buffers(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (_OWORD *)(a1 + 1856);
  if (*(_QWORD *)(a1 + 1952))
  {
    v3 = *(_QWORD *)(a1 + 1944);
    if (v3)
      free(*(void **)(v3 - 8));
  }
  v4 = 0uLL;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  if (*(_QWORD *)(a1 + 2112))
  {
    v5 = *(_QWORD *)(a1 + 2104);
    if (v5)
    {
      free(*(void **)(v5 - 8));
      v4 = 0uLL;
    }
  }
  *(_OWORD *)(a1 + 2144) = v4;
  *(_OWORD *)(a1 + 2160) = v4;
  *(_OWORD *)(a1 + 2112) = v4;
  *(_OWORD *)(a1 + 2128) = v4;
  *(_OWORD *)(a1 + 2080) = v4;
  *(_OWORD *)(a1 + 2096) = v4;
  *(_OWORD *)(a1 + 2048) = v4;
  *(_OWORD *)(a1 + 2064) = v4;
  *(_OWORD *)(a1 + 2016) = v4;
  *(_OWORD *)(a1 + 2032) = v4;
  if (*(_QWORD *)(a1 + 2272))
  {
    v6 = *(_QWORD *)(a1 + 2264);
    if (v6)
      free(*(void **)(v6 - 8));
  }
  v7 = 0uLL;
  *(_OWORD *)(a1 + 2304) = 0u;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  if (*(_QWORD *)(a1 + 2432))
  {
    v8 = *(_QWORD *)(a1 + 2424);
    if (v8)
    {
      free(*(void **)(v8 - 8));
      v7 = 0uLL;
    }
  }
  *(_OWORD *)(a1 + 2464) = v7;
  *(_OWORD *)(a1 + 2480) = v7;
  *(_OWORD *)(a1 + 2432) = v7;
  *(_OWORD *)(a1 + 2448) = v7;
  *(_OWORD *)(a1 + 2400) = v7;
  *(_OWORD *)(a1 + 2416) = v7;
  *(_OWORD *)(a1 + 2368) = v7;
  *(_OWORD *)(a1 + 2384) = v7;
  *(_OWORD *)(a1 + 2336) = v7;
  *(_OWORD *)(a1 + 2352) = v7;
  if (*(_QWORD *)(a1 + 2624))
  {
    v9 = *(_QWORD *)(a1 + 2616);
    if (v9)
      free(*(void **)(v9 - 8));
  }
  v10 = 0uLL;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2592) = 0u;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  if (*(_QWORD *)(a1 + 2784))
  {
    v11 = *(_QWORD *)(a1 + 2776);
    if (v11)
    {
      free(*(void **)(v11 - 8));
      v10 = 0uLL;
    }
  }
  *(_OWORD *)(a1 + 2816) = v10;
  *(_OWORD *)(a1 + 2832) = v10;
  *(_OWORD *)(a1 + 2784) = v10;
  *(_OWORD *)(a1 + 2800) = v10;
  *(_OWORD *)(a1 + 2752) = v10;
  *(_OWORD *)(a1 + 2768) = v10;
  *(_OWORD *)(a1 + 2720) = v10;
  *(_OWORD *)(a1 + 2736) = v10;
  *(_OWORD *)(a1 + 2688) = v10;
  *(_OWORD *)(a1 + 2704) = v10;
  if (*(_DWORD *)(a1 + 3008))
  {
    if (*(_QWORD *)(a1 + 2944))
    {
      v12 = *(_QWORD *)(a1 + 2936);
      if (v12)
        free(*(void **)(v12 - 8));
    }
    *(_OWORD *)(a1 + 2976) = 0u;
    *(_OWORD *)(a1 + 2992) = 0u;
    *(_OWORD *)(a1 + 2944) = 0u;
    *(_OWORD *)(a1 + 2960) = 0u;
    *(_OWORD *)(a1 + 2912) = 0u;
    *(_OWORD *)(a1 + 2928) = 0u;
    *(_OWORD *)(a1 + 2880) = 0u;
    *(_OWORD *)(a1 + 2896) = 0u;
    *(_OWORD *)(a1 + 2848) = 0u;
    *(_OWORD *)(a1 + 2864) = 0u;
  }
  v13 = *(_QWORD *)(a1 + 3016);
  if (v13)
    free(*(void **)(v13 - 8));
  *(_QWORD *)(a1 + 3016) = 0;
  v14 = *(_QWORD *)(a1 + 5864);
  if (v14)
    free(*(void **)(v14 - 8));
  *(_QWORD *)(a1 + 5864) = 0;
  v15 = *(_QWORD *)(a1 + 3576);
  if (v15)
    free(*(void **)(v15 - 8));
  v16 = *(_QWORD *)(a1 + 3096);
  if (v16)
    free(*(void **)(v16 - 8));
  *(_QWORD *)(a1 + 3576) = 0;
  *(_QWORD *)(a1 + 3096) = 0;
}

uint64_t vp8_alloc_frame_buffers(uint64_t a1, int a2, int a3)
{
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  size_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  _QWORD *v23;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  unint64_t v30;

  vp8_de_alloc_frame_buffers(a1);
  v6 = a2 + 15;
  v7 = (a2 + 15) & 0xFFFFFFF0;
  v8 = a3 + 15;
  *(_DWORD *)(a1 + 2496) = 0;
  *(_DWORD *)(a1 + 2008) = 0;
  if (*(_QWORD *)(a1 + 1952))
  {
    v9 = *(_QWORD *)(a1 + 1944);
    if (v9)
      free(*(void **)(v9 - 8));
  }
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  if ((vp8_yv12_realloc_frame_buffer(a1 + 1856, v6 & 0xFFFFFFF0, v8 & 0xFFFFFFF0, 32) & 0x80000000) != 0)
    goto LABEL_29;
  *(_DWORD *)(a1 + 2500) = 0;
  *(_DWORD *)(a1 + 2168) = 0;
  if (*(_QWORD *)(a1 + 2112))
  {
    v10 = *(_QWORD *)(a1 + 2104);
    if (v10)
      free(*(void **)(v10 - 8));
  }
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  if ((vp8_yv12_realloc_frame_buffer(a1 + 2016, v6 & 0xFFFFFFF0, v8 & 0xFFFFFFF0, 32) & 0x80000000) != 0)
    goto LABEL_29;
  *(_DWORD *)(a1 + 2504) = 0;
  *(_DWORD *)(a1 + 2328) = 0;
  if (*(_QWORD *)(a1 + 2272))
  {
    v11 = *(_QWORD *)(a1 + 2264);
    if (v11)
      free(*(void **)(v11 - 8));
  }
  *(_OWORD *)(a1 + 2304) = 0u;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  if ((vp8_yv12_realloc_frame_buffer(a1 + 2176, v6 & 0xFFFFFFF0, v8 & 0xFFFFFFF0, 32) & 0x80000000) != 0)
    goto LABEL_29;
  *(_DWORD *)(a1 + 2508) = 0;
  *(_DWORD *)(a1 + 2488) = 0;
  if (*(_QWORD *)(a1 + 2432))
  {
    v12 = *(_QWORD *)(a1 + 2424);
    if (v12)
      free(*(void **)(v12 - 8));
  }
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  if ((vp8_yv12_realloc_frame_buffer(a1 + 2336, v6 & 0xFFFFFFF0, v8 & 0xFFFFFFF0, 32) & 0x80000000) != 0)
    goto LABEL_29;
  *(_OWORD *)(a1 + 2512) = xmmword_208F071C0;
  *(_QWORD *)&v13 = 0x100000001;
  *((_QWORD *)&v13 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 2496) = v13;
  if (*(_QWORD *)(a1 + 2624))
  {
    v14 = *(_QWORD *)(a1 + 2616);
    if (v14)
      free(*(void **)(v14 - 8));
  }
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2592) = 0u;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  if ((vp8_yv12_realloc_frame_buffer(a1 + 2528, v6 & 0xFFFFFFF0, 16, 32) & 0x80000000) != 0)
    goto LABEL_29;
  *(_DWORD *)(a1 + 3044) = v8 >> 4;
  *(_DWORD *)(a1 + 3048) = v6 >> 4;
  *(_DWORD *)(a1 + 3040) = (v8 >> 4) * (v6 >> 4);
  v15 = (v6 >> 4) + 1;
  *(_DWORD *)(a1 + 3052) = v15;
  v16 = v15 + v15 * (v8 >> 4);
  if ((v16 & 0x80000000) != 0
    || (v17 = 76 * v16, (v18 = malloc_type_malloc(v17 + 23, 0x74AD08B5uLL)) == 0)
    || (v19 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v19 - 8) = v18, !v19))
  {
    v23 = (_QWORD *)(a1 + 3096);
LABEL_28:
    *v23 = 0;
LABEL_29:
    vp8_de_alloc_frame_buffers(a1);
    return 1;
  }
  bzero((void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF0), v17);
  *(_QWORD *)(a1 + 3096) = v19;
  *(_QWORD *)(a1 + 3104) = v19 + 76 * *(int *)(a1 + 3052) + 76;
  v20 = *(int *)(a1 + 3048);
  v21 = 9 * v20;
  if ((_DWORD)v20)
  {
    if (v21 > 0xFFFFFFFFE9)
    {
LABEL_41:
      v23 = (_QWORD *)(a1 + 3576);
      goto LABEL_28;
    }
    v22 = v21 + 23;
  }
  else
  {
    v22 = 23;
  }
  v25 = malloc_type_malloc(v22, 0x74AD08B5uLL);
  if (!v25)
    goto LABEL_41;
  v26 = ((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v26 - 8) = v25;
  if (!v26)
    goto LABEL_41;
  bzero((void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0), v21);
  *(_QWORD *)(a1 + 3576) = v26;
  if (*(_QWORD *)(a1 + 2784))
  {
    v27 = *(_QWORD *)(a1 + 2776);
    if (v27)
      free(*(void **)(v27 - 8));
  }
  *(_OWORD *)(a1 + 2816) = 0u;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_OWORD *)(a1 + 2784) = 0u;
  *(_OWORD *)(a1 + 2800) = 0u;
  *(_OWORD *)(a1 + 2752) = 0u;
  *(_OWORD *)(a1 + 2768) = 0u;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_OWORD *)(a1 + 2704) = 0u;
  if ((vp8_yv12_realloc_frame_buffer(a1 + 2688, v7, v8 & 0xFFFFFFF0, 32) & 0x80000000) != 0)
    goto LABEL_29;
  *(_DWORD *)(a1 + 3008) = 0;
  *(_OWORD *)(a1 + 5840) = 0u;
  *(_OWORD *)(a1 + 5856) = 0u;
  memset(*(void **)(a1 + 2776), 128, *(_QWORD *)(a1 + 2800));
  v28 = 24 * ((*(int *)(a1 + 3048) + 1) & 0xFFFFFFFFFFFFFFFELL) + 23;
  if (v28 > 0x10000000000 || (v29 = malloc_type_malloc(v28, 0x74AD08B5uLL)) == 0)
  {
    v23 = (_QWORD *)(a1 + 3016);
    goto LABEL_28;
  }
  v30 = ((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v30 - 8) = v29;
  *(_QWORD *)(a1 + 3016) = v30;
  if (!v30)
    goto LABEL_29;
  return 0;
}

uint64_t *vp8_bilinear_predict4x4_neon(uint64_t *result, int a2, int a3, int a4, _DWORD *a5, int a6)
{
  const char *v6;
  uint8x8_t v7;
  uint8x8_t v8;
  uint64x2_t v9;
  int32x2_t *v10;
  int32x2_t v11;
  uint64_t *v12;
  uint64x2_t v13;
  int32x2_t *v14;
  uint8x8_t v15;
  uint8x8_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint8x16_t v21;
  int8x8_t v22;
  int8x8_t v23;
  const char *v24;
  uint8x8_t v25;
  uint8x8_t v26;
  uint64_t v27;
  int8x8_t *v28;
  int8x8_t v29;
  uint64_t *v30;
  int8x8_t v31;
  int8x8_t *v32;
  _DWORD *v33;

  if (!a3)
  {
    v28 = (int8x8_t *)((char *)result + a2);
    v29 = *v28;
    v30 = (uint64_t *)((char *)v28 + a2);
    v31 = (int8x8_t)vshld_n_s64(*v30, 0x20uLL);
    v32 = (int8x8_t *)((char *)v30 + a2);
    v23 = *(int8x8_t *)((char *)v32 + a2);
    *(int8x8_t *)v21.i8 = vext_s8((int8x8_t)vshld_n_s64(*result, 0x20uLL), v29, 4uLL);
    v22 = vext_s8(v31, *v32, 4uLL);
    if (a4)
      goto LABEL_3;
LABEL_5:
    v27 = a6;
    v21.u64[1] = (unint64_t)v22;
    goto LABEL_6;
  }
  v6 = (char *)&bifilter4_coeff + 2 * a3;
  v7 = (uint8x8_t)vld1_dup_s8(v6++);
  v8 = (uint8x8_t)vld1_dup_s8(v6);
  v9.i64[0] = *result;
  v10 = (int32x2_t *)((char *)result + a2);
  v11 = *v10;
  v12 = (uint64_t *)((char *)v10 + a2);
  v13.i64[0] = *v12;
  v14 = (int32x2_t *)((char *)v12 + a2);
  v15 = (uint8x8_t)vzip1_s32(*(int32x2_t *)result, v11);
  v9.u64[1] = (unint64_t)v11;
  v16 = (uint8x8_t)vzip1_s32(*(int32x2_t *)v13.i8, *v14);
  v13.u64[1] = (unint64_t)*v14;
  v17 = (int8x16_t)vshrq_n_u64(v9, 8uLL);
  v18 = (int8x16_t)vshrq_n_u64(v13, 8uLL);
  v19 = vmlal_u8(vmull_u8((uint8x8_t)vzip1_s32(*(int32x2_t *)v18.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), v8), v16, v7);
  v20 = vmlal_u8(vmull_u8((uint8x8_t)vshrd_n_u64(*(_QWORD *)((char *)v14 + a2), 8uLL), v8), *(uint8x8_t *)((char *)v14 + a2), v7);
  *(uint8x8_t *)v21.i8 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vzip1_s32(*(int32x2_t *)v17.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), v8), v15, v7), 7uLL);
  v22 = (int8x8_t)vqrshrn_n_u16(v19, 7uLL);
  v23 = (int8x8_t)vqrshrn_n_u16(v20, 7uLL);
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v24 = (char *)&bifilter4_coeff + 2 * a4;
  v25 = (uint8x8_t)vld1_dup_s8(v24++);
  v26 = (uint8x8_t)vld1_dup_s8(v24);
  v27 = a6;
  v21 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v21.i8, v22, 4uLL), v26), *(uint8x8_t *)v21.i8, v25), 7uLL), vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v22, v23, 4uLL), v26), (uint8x8_t)v22, v25), 7uLL);
LABEL_6:
  *a5 = v21.i32[0];
  *(_DWORD *)((char *)a5 + v27) = v21.i32[1];
  v33 = (_DWORD *)((char *)a5 + v27 + v27);
  *v33 = v21.i32[2];
  *(_DWORD *)((char *)v33 + v27) = v21.i32[3];
  return result;
}

int8x16_t *vp8_bilinear_predict8x4_neon(int8x16_t *result, int a2, int a3, int a4, uint8x8_t *a5, int a6)
{
  int8x16_t *v6;
  __int8 *v7;
  const char *v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  const char *v16;
  uint8x8_t v17;
  uint8x8_t v18;
  uint8x8_t *v19;
  uint8x8_t *v20;
  uint8x8_t *v21;
  uint8x8_t *v22;

  v6 = (int8x16_t *)((char *)result + a2 + a2);
  v7 = &v6->i8[a2];
  if (a3)
  {
    v8 = (char *)&bifilter4_coeff + 2 * a3;
    v9 = (uint8x8_t)vld1_dup_s8(v8++);
    v10 = (uint8x8_t)vld1_dup_s8(v8);
    v11 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*result, *result, 1uLL), v10), *(uint8x8_t *)result->i8, v9), 7uLL);
    v12 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)((char *)result + a2), *(int8x16_t *)((char *)result + a2), 1uLL), v10), *(uint8x8_t *)&result->i8[a2], v9), 7uLL);
    v13 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*v6, *v6, 1uLL), v10), *(uint8x8_t *)v6->i8, v9), 7uLL);
    v14 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)((char *)v6 + a2), *(int8x16_t *)((char *)v6 + a2), 1uLL), v10), *(uint8x8_t *)&v6->i8[a2], v9), 7uLL);
    v15 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v7[a2], *(int8x16_t *)&v7[a2], 1uLL), v10), *(uint8x8_t *)&v7[a2], v9), 7uLL);
    if (a4)
    {
LABEL_3:
      v16 = (char *)&bifilter4_coeff + 2 * a4;
      v17 = (uint8x8_t)vld1_dup_s8(v16++);
      v18 = (uint8x8_t)vld1_dup_s8(v16);
      *a5 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v12, v18), v11, v17), 7uLL);
      v19 = (uint8x8_t *)((char *)a5 + a6);
      *v19 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v13, v18), v12, v17), 7uLL);
      v20 = (uint8x8_t *)((char *)v19 + a6);
      *v20 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v14, v18), v13, v17), 7uLL);
      *(uint8x8_t *)((char *)v20 + a6) = vqrshrn_n_u16(vmlal_u8(vmull_u8(v15, v18), v14, v17), 7uLL);
      return result;
    }
  }
  else
  {
    v12 = *(uint8x8_t *)&result->i8[a2];
    v11 = *(uint8x8_t *)result->i8;
    v13 = *(uint8x8_t *)v6->i8;
    v14 = *(uint8x8_t *)&v6->i8[a2];
    v15 = *(uint8x8_t *)&v7[a2];
    if (a4)
      goto LABEL_3;
  }
  *a5 = v11;
  v21 = (uint8x8_t *)((char *)a5 + a6);
  *v21 = v12;
  v22 = (uint8x8_t *)((char *)v21 + a6);
  *v22 = v13;
  *(uint8x8_t *)((char *)v22 + a6) = v14;
  return result;
}

int8x16_t *vp8_bilinear_predict8x8_neon(int8x16_t *result, int a2, int a3, int a4, uint8x8_t *a5, int a6)
{
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  const char *v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  int8x16_t *v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  uint8x8_t v33;
  uint8x8_t v34;
  const char *v35;
  uint8x8_t v36;
  uint8x8_t v37;
  uint8x8_t *v38;
  uint8x8_t *v39;
  uint8x8_t *v40;
  uint8x8_t *v41;
  uint8x8_t *v42;
  uint8x8_t *v43;
  uint8x8_t *v44;
  uint8x8_t *v45;
  uint8x8_t *v46;
  uint8x8_t *v47;
  uint8x8_t *v48;
  uint8x8_t *v49;
  uint8x8_t *v50;
  uint8x8_t *v51;
  uint8x8_t *v52;

  v6 = (int8x16_t *)((char *)result + a2 + a2);
  v7 = (int8x16_t *)((char *)v6 + 2 * a2);
  if (a3)
  {
    v8 = *v6;
    v9 = *(int8x16_t *)((char *)v6 + a2);
    v10 = (char *)&bifilter4_coeff + 2 * a3;
    v11 = (uint8x8_t)vld1_dup_s8(v10++);
    v12 = (uint8x8_t)vld1_dup_s8(v10);
    v13 = vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 1uLL), v12), *(uint8x8_t *)v8.i8, v11);
    v14 = vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 1uLL), v12), *(uint8x8_t *)v9.i8, v11);
    v15 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*result, *result, 1uLL), v12), *(uint8x8_t *)result->i8, v11), 7uLL);
    v16 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)((char *)result + a2), *(int8x16_t *)((char *)result + a2), 1uLL), v12), *(uint8x8_t *)&result->i8[a2], v11), 7uLL);
    v17 = vqrshrn_n_u16(v13, 7uLL);
    v18 = vqrshrn_n_u16(v14, 7uLL);
    v19 = *v7;
    v20 = (int8x16_t *)((char *)v7 + a2);
    v21 = *v20;
    v22 = (int8x16_t *)((char *)v20 + a2);
    v23 = *v22;
    v24 = (int8x16_t *)((char *)v22 + a2);
    v25 = vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 1uLL), v12), *(uint8x8_t *)v19.i8, v11);
    v26 = vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 1uLL), v12), *(uint8x8_t *)v21.i8, v11);
    v27 = vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 1uLL), v12), *(uint8x8_t *)v23.i8, v11);
    v28 = vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*v24, *v24, 1uLL), v12), *(uint8x8_t *)v24->i8, v11);
    v29 = vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)((char *)v24 + a2), *(int8x16_t *)((char *)v24 + a2), 1uLL), v12), *(uint8x8_t *)&v24->i8[a2], v11);
    v30 = vqrshrn_n_u16(v25, 7uLL);
    v31 = vqrshrn_n_u16(v26, 7uLL);
    v32 = vqrshrn_n_u16(v27, 7uLL);
    v33 = vqrshrn_n_u16(v28, 7uLL);
    v34 = vqrshrn_n_u16(v29, 7uLL);
    if (a4)
    {
LABEL_3:
      v35 = (char *)&bifilter4_coeff + 2 * a4;
      v36 = (uint8x8_t)vld1_dup_s8(v35++);
      v37 = (uint8x8_t)vld1_dup_s8(v35);
      *a5 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v16, v37), v15, v36), 7uLL);
      v38 = (uint8x8_t *)((char *)a5 + a6);
      *v38 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v17, v37), v16, v36), 7uLL);
      v39 = (uint8x8_t *)((char *)v38 + a6);
      *v39 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v18, v37), v17, v36), 7uLL);
      v40 = (uint8x8_t *)((char *)v39 + a6);
      *v40 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v30, v37), v18, v36), 7uLL);
      v41 = (uint8x8_t *)((char *)v40 + a6);
      *v41 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v31, v37), v30, v36), 7uLL);
      v42 = (uint8x8_t *)((char *)v41 + a6);
      *v42 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v32, v37), v31, v36), 7uLL);
      v43 = (uint8x8_t *)((char *)v42 + a6);
      *v43 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v33, v37), v32, v36), 7uLL);
      *(uint8x8_t *)((char *)v43 + a6) = vqrshrn_n_u16(vmlal_u8(vmull_u8(v34, v37), v33, v36), 7uLL);
      return result;
    }
  }
  else
  {
    v15 = *(uint8x8_t *)result->i8;
    v16 = *(uint8x8_t *)&result->i8[a2];
    v17 = *(uint8x8_t *)v6->i8;
    v18 = *(uint8x8_t *)&v6->i8[a2];
    v30 = *(uint8x8_t *)v7->i8;
    v44 = (uint8x8_t *)&v7->i8[a2];
    v31 = *v44;
    v45 = (uint8x8_t *)((char *)v44 + a2);
    v32 = *v45;
    v46 = (uint8x8_t *)((char *)v45 + a2);
    v33 = *v46;
    v34 = *(uint8x8_t *)((char *)v46 + a2);
    if (a4)
      goto LABEL_3;
  }
  *a5 = v15;
  v47 = (uint8x8_t *)((char *)a5 + a6);
  *v47 = v16;
  v48 = (uint8x8_t *)((char *)v47 + a6);
  *v48 = v17;
  v49 = (uint8x8_t *)((char *)v48 + a6);
  *v49 = v18;
  v50 = (uint8x8_t *)((char *)v49 + a6);
  *v50 = v30;
  v51 = (uint8x8_t *)((char *)v50 + a6);
  *v51 = v31;
  v52 = (uint8x8_t *)((char *)v51 + a6);
  *v52 = v32;
  *(uint8x8_t *)((char *)v52 + a6) = v33;
  return result;
}

uint8x16_t vp8_bilinear_predict16x16_neon(int8x8_t *a1, int a2, int a3, int a4, uint8x16_t *a5, int a6, int8x8_t a7, int8x8_t a8, int8x8_t a9)
{
  __int8 *v9;
  int8x8_t v10;
  int8x8_t *v11;
  int8x8_t v12;
  int8x8_t v13;
  int8x8_t v14;
  int8x8_t *v15;
  int8x8_t v16;
  int8x8_t v17;
  int8x8_t v18;
  int8x8_t *v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x8_t *v23;
  uint8x8_t v24;
  uint8x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint8x8_t v33;
  int8x8_t v34;
  int8x8_t v35;
  int8x8_t v36;
  int8x8_t *v37;
  int8x8_t v38;
  int8x8_t v39;
  int8x8_t v40;
  int8x8_t *v41;
  int8x8_t v42;
  int8x8_t v43;
  int8x8_t v44;
  int8x8_t *v45;
  int8x8_t v46;
  int8x8_t v47;
  int8x8_t v48;
  uint8x16_t result;
  uint8x8_t *v50;
  int8x8_t *v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  int8x8_t v57;
  int8x8_t v58;
  int8x8_t v59;
  int8x8_t *v60;
  int8x8_t v61;
  int8x8_t v62;
  int8x8_t v63;
  int8x8_t *v64;
  int8x8_t v65;
  int8x8_t v66;
  int8x8_t v67;
  int8x8_t *v68;
  int8x8_t v69;
  int8x8_t v70;
  int8x8_t v71;
  int8x8_t *v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  int8x8_t v77;
  int8x8_t v78;
  int8x8_t v79;
  int8x8_t *v80;
  int8x8_t v81;
  int8x8_t v82;
  int8x8_t v83;
  int8x8_t *v84;
  int8x8_t v85;
  int8x8_t v86;
  int8x8_t v87;
  int8x8_t *v88;
  int8x8_t v89;
  int8x8_t v90;
  int8x8_t v91;
  int8x8_t *v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint8x16_t v103;
  __int8 *v104;
  unsigned int v105;
  uint8x16_t v106;
  uint8x16_t v107;
  uint8x16_t v108;
  uint8x16_t v109;
  uint16x8_t v110;
  uint16x8_t v111;
  uint8x16_t v112;
  uint16x8_t v113;
  uint16x8_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  uint16x8_t v117;
  uint16x8_t v118;
  uint8x16_t *v119;
  uint8x16_t *v120;
  __int8 *v121;
  uint8x16_t v122;
  unsigned int v123;
  uint8x16_t v124;
  uint8x16_t v125;
  uint8x16_t v126;
  uint8x16_t v127;
  uint16x8_t v128;
  uint16x8_t v129;
  uint8x16_t *v130;
  uint8x16_t *v131;
  int8x8_t *v132;
  int8x8_t v133;
  int8x8_t v134;
  int8x8_t v135;
  int8x8_t *v136;
  int8x8_t v137;
  int8x8_t v138;
  int8x8_t v139;
  int8x8_t *v140;
  int8x8_t *v141;
  uint8x8_t v142;
  uint8x8_t v143;
  uint16x8_t v144;
  uint16x8_t v145;
  uint8x16_t v146;
  uint8x16_t *v147;
  uint8x16_t *v148;
  uint8x16_t *v149;
  uint8x16_t *v150;
  int8x8_t v151;
  int8x8_t v152;
  int8x8_t *v153;
  int8x8_t v154;
  int8x8_t v155;
  int8x8_t *v156;
  int8x8_t v157;
  int8x8_t v158;
  int8x8_t *v159;
  int8x8_t v160;
  int8x8_t v161;
  int8x8_t v162;
  int8x8_t *v163;
  uint8x16_t *v164;
  uint8x16_t *v165;
  uint8x16_t *v166;
  uint8x16_t *v167;
  int8x8_t v168;
  int8x8_t v169;
  int8x8_t *v170;
  int8x8_t v171;
  int8x8_t v172;
  int8x8_t *v173;
  int8x8_t v174;
  int8x8_t v175;
  int8x8_t *v176;
  int8x8_t v177;
  int8x8_t v178;
  int8x8_t v179;
  int8x8_t *v180;
  uint8x16_t *v181;
  uint8x16_t *v182;
  uint8x16_t *v183;
  uint8x16_t *v184;
  int8x8_t v185;
  int8x8_t v186;
  int8x8_t *v187;
  int8x8_t v188;
  int8x8_t v189;
  int8x8_t *v190;
  int8x8_t *v191;
  int8x8_t v192;
  uint16x8_t v193;
  uint16x8_t v194;
  uint16x8_t v195;
  uint16x8_t v196;
  uint16x8_t v197;
  uint16x8_t v198;
  uint16x8_t v199;
  uint16x8_t v200;
  uint8x16_t *v201;
  uint8x16_t *v202;
  uint8x16_t v203;
  uint8x16_t v204;
  uint8x16_t v205;
  _OWORD v206[13];
  uint64_t v207;

  v207 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v9 = (char *)&bifilter4_coeff + 2 * a3;
    a7.i8[0] = *v9;
    a9.i8[0] = v9[1];
    if (a4)
    {
      v10 = a1[1];
      v11 = (int8x8_t *)((char *)a1 + a2);
      v12 = *v11;
      v13 = v11[1];
      v14 = v11[2];
      v15 = (int8x8_t *)((char *)v11 + a2);
      v16 = *v15;
      v17 = v15[1];
      v18 = v15[2];
      v19 = (int8x8_t *)((char *)v15 + a2);
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      v23 = (int8x8_t *)((char *)v19 + a2);
      v24 = (uint8x8_t)vdup_lane_s8(a7, 0);
      v25 = (uint8x8_t)vdup_lane_s8(a9, 0);
      v26 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*a1, v10, 1uLL), v25), (uint8x8_t)*a1, v24);
      v27 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v12, v13, 1uLL), v25), (uint8x8_t)v12, v24);
      v28 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v16, v17, 1uLL), v25), (uint8x8_t)v16, v24);
      v29 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v10, a1[2], 1uLL), v25), (uint8x8_t)v10, v24);
      v30 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v13, v14, 1uLL), v25), (uint8x8_t)v13, v24);
      v31 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v17, v18, 1uLL), v25), (uint8x8_t)v17, v24);
      v32 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v21, v22, 1uLL), v25), (uint8x8_t)v21, v24);
      v33 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v20, v21, 1uLL), v25), (uint8x8_t)v20, v24), 7uLL);
      v34 = *v23;
      v35 = v23[1];
      v36 = v23[2];
      v37 = (int8x8_t *)((char *)v23 + a2);
      v38 = *v37;
      v39 = v37[1];
      v40 = v37[2];
      v41 = (int8x8_t *)((char *)v37 + a2);
      v42 = *v41;
      v43 = v41[1];
      v44 = v41[2];
      v45 = (int8x8_t *)((char *)v41 + a2);
      v46 = *v45;
      v47 = v45[1];
      v48 = v45[2];
      result = vqrshrn_high_n_u16(vqrshrn_n_u16(v26, 7uLL), v29, 7uLL);
      v203 = vqrshrn_high_n_u16(vqrshrn_n_u16(v27, 7uLL), v30, 7uLL);
      v204 = vqrshrn_high_n_u16(vqrshrn_n_u16(v28, 7uLL), v31, 7uLL);
      v205 = vqrshrn_high_n_u16(v33, v32, 7uLL);
      v50 = (uint8x8_t *)v206;
      v51 = (int8x8_t *)((char *)v45 + a2);
      v52 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v34, v35, 1uLL), v25), (uint8x8_t)v34, v24);
      v53 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v35, v36, 1uLL), v25), (uint8x8_t)v35, v24);
      v54 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v39, v40, 1uLL), v25), (uint8x8_t)v39, v24);
      v55 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v43, v44, 1uLL), v25), (uint8x8_t)v43, v24);
      v56 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v47, v48, 1uLL), v25), (uint8x8_t)v47, v24);
      *(uint8x8_t *)v30.i8 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v38, v39, 1uLL), v25), (uint8x8_t)v38, v24), 7uLL);
      *(uint8x8_t *)v29.i8 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v42, v43, 1uLL), v25), (uint8x8_t)v42, v24), 7uLL);
      *(uint8x8_t *)v28.i8 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v46, v47, 1uLL), v25), (uint8x8_t)v46, v24), 7uLL);
      v57 = *v51;
      v58 = v51[1];
      v59 = v51[2];
      v60 = (int8x8_t *)((char *)v51 + a2);
      v61 = *v60;
      v62 = v60[1];
      v63 = v60[2];
      v64 = (int8x8_t *)((char *)v60 + a2);
      v65 = *v64;
      v66 = v64[1];
      v67 = v64[2];
      v68 = (int8x8_t *)((char *)v64 + a2);
      v69 = *v68;
      v70 = v68[1];
      v71 = v68[2];
      v206[0] = vqrshrn_high_n_u16(vqrshrn_n_u16(v52, 7uLL), v53, 7uLL);
      v206[1] = vqrshrn_high_n_u16(*(uint8x8_t *)v30.i8, v54, 7uLL);
      v206[2] = vqrshrn_high_n_u16(*(uint8x8_t *)v29.i8, v55, 7uLL);
      v206[3] = vqrshrn_high_n_u16(*(uint8x8_t *)v28.i8, v56, 7uLL);
      v72 = (int8x8_t *)((char *)v68 + a2);
      v73 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v58, v59, 1uLL), v25), (uint8x8_t)v58, v24);
      v74 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v62, v63, 1uLL), v25), (uint8x8_t)v62, v24);
      v75 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v66, v67, 1uLL), v25), (uint8x8_t)v66, v24);
      v76 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v70, v71, 1uLL), v25), (uint8x8_t)v70, v24);
      *(uint8x8_t *)v52.i8 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v57, v58, 1uLL), v25), (uint8x8_t)v57, v24), 7uLL);
      *(uint8x8_t *)v30.i8 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v61, v62, 1uLL), v25), (uint8x8_t)v61, v24), 7uLL);
      *(uint8x8_t *)v29.i8 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v65, v66, 1uLL), v25), (uint8x8_t)v65, v24), 7uLL);
      *(uint8x8_t *)v28.i8 = vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v69, v70, 1uLL), v25), (uint8x8_t)v69, v24), 7uLL);
      v77 = *v72;
      v78 = v72[1];
      v79 = v72[2];
      v80 = (int8x8_t *)((char *)v72 + a2);
      v81 = *v80;
      v82 = v80[1];
      v83 = v80[2];
      v84 = (int8x8_t *)((char *)v80 + a2);
      v85 = *v84;
      v86 = v84[1];
      v87 = v84[2];
      v88 = (int8x8_t *)((char *)v84 + a2);
      v89 = *v88;
      v90 = v88[1];
      v91 = v88[2];
      v206[4] = vqrshrn_high_n_u16(*(uint8x8_t *)v52.i8, v73, 7uLL);
      v206[5] = vqrshrn_high_n_u16(*(uint8x8_t *)v30.i8, v74, 7uLL);
      v206[6] = vqrshrn_high_n_u16(*(uint8x8_t *)v29.i8, v75, 7uLL);
      v206[7] = vqrshrn_high_n_u16(*(uint8x8_t *)v28.i8, v76, 7uLL);
      v92 = (int8x8_t *)((char *)v88 + a2);
      *(int8x8_t *)v30.i8 = v92[1];
      v93 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v77, v78, 1uLL), v25), (uint8x8_t)v77, v24);
      v94 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v81, v82, 1uLL), v25), (uint8x8_t)v81, v24);
      v95 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v85, v86, 1uLL), v25), (uint8x8_t)v85, v24);
      v96 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v78, v79, 1uLL), v25), (uint8x8_t)v78, v24);
      v97 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v82, v83, 1uLL), v25), (uint8x8_t)v82, v24);
      v98 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v86, v87, 1uLL), v25), (uint8x8_t)v86, v24);
      v99 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v89, v90, 1uLL), v25), (uint8x8_t)v89, v24);
      v100 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*v92, *(int8x8_t *)v30.i8, 1uLL), v25), (uint8x8_t)*v92, v24);
      v101 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v90, v91, 1uLL), v25), (uint8x8_t)v90, v24);
      v102 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v30.i8, v92[2], 1uLL), v25), *(uint8x8_t *)v30.i8, v24);
      v103 = vqrshrn_high_n_u16(vqrshrn_n_u16(v93, 7uLL), v96, 7uLL);
      v206[8] = v103;
      v206[9] = vqrshrn_high_n_u16(vqrshrn_n_u16(v94, 7uLL), v97, 7uLL);
      v206[10] = vqrshrn_high_n_u16(vqrshrn_n_u16(v95, 7uLL), v98, 7uLL);
      v206[11] = vqrshrn_high_n_u16(vqrshrn_n_u16(v99, 7uLL), v101, 7uLL);
      v206[12] = vqrshrn_high_n_u16(vqrshrn_n_u16(v100, 7uLL), v102, 7uLL);
      v104 = (char *)&bifilter4_coeff + 2 * a4;
      v103.i8[0] = *v104;
      v102.i8[0] = v104[1];
      v105 = 5;
      v106 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v103.i8, 0);
      v107 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v102.i8, 0);
      do
      {
        v108 = *(uint8x16_t *)v50[-6].i8;
        v109 = *(uint8x16_t *)v50[-4].i8;
        v110 = vmlal_u8(vmull_u8(*(uint8x8_t *)v108.i8, *(uint8x8_t *)v107.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v106.i8);
        v111 = vmlal_high_u8(vmull_high_u8(v108, v107), result, v106);
        v112 = *(uint8x16_t *)v50[-2].i8;
        result = *(uint8x16_t *)v50->i8;
        v113 = vmlal_u8(vmull_u8(*(uint8x8_t *)v109.i8, *(uint8x8_t *)v107.i8), *(uint8x8_t *)v108.i8, *(uint8x8_t *)v106.i8);
        v114 = vmlal_high_u8(vmull_high_u8(v109, v107), v108, v106);
        v115 = vmlal_u8(vmull_u8(*(uint8x8_t *)v112.i8, *(uint8x8_t *)v107.i8), *(uint8x8_t *)v109.i8, *(uint8x8_t *)v106.i8);
        v116 = vmlal_high_u8(vmull_high_u8(v112, v107), v109, v106);
        v117 = vmlal_u8(vmull_u8(*v50, *(uint8x8_t *)v107.i8), *(uint8x8_t *)v112.i8, *(uint8x8_t *)v106.i8);
        v118 = vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v50->i8, v107), v112, v106);
        *a5 = vqrshrn_high_n_u16(vqrshrn_n_u16(v110, 7uLL), v111, 7uLL);
        *(uint8x16_t *)((char *)a5 + a6) = vqrshrn_high_n_u16(vqrshrn_n_u16(v113, 7uLL), v114, 7uLL);
        v119 = (uint8x16_t *)((char *)a5 + a6 + a6);
        *v119 = vqrshrn_high_n_u16(vqrshrn_n_u16(v115, 7uLL), v116, 7uLL);
        v120 = (uint8x16_t *)((char *)v119 + a6);
        *v120 = vqrshrn_high_n_u16(vqrshrn_n_u16(v117, 7uLL), v118, 7uLL);
        a5 = (uint8x16_t *)((char *)v120 + a6);
        --v105;
        v50 += 8;
      }
      while (v105 > 1);
    }
    else
    {
      v132 = (int8x8_t *)((char *)a1 + a2);
      v133 = *v132;
      v134 = v132[1];
      v135 = v132[2];
      v136 = (int8x8_t *)((char *)v132 + a2);
      v137 = *v136;
      v138 = v136[1];
      v139 = v136[2];
      v140 = (int8x8_t *)((char *)v136 + a2);
      v141 = (int8x8_t *)((char *)v140 + a2);
      v142 = (uint8x8_t)vdup_lane_s8(a7, 0);
      v143 = (uint8x8_t)vdup_lane_s8(a9, 0);
      v144 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v133, v134, 1uLL), v143), (uint8x8_t)v133, v142);
      v145 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v137, v138, 1uLL), v143), (uint8x8_t)v137, v142);
      v146 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*v140, v140[1], 1uLL), v143), (uint8x8_t)*v140, v142), 7uLL), vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v140[1], v140[2], 1uLL), v143), (uint8x8_t)v140[1], v142), 7uLL);
      *a5 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*a1, a1[1], 1uLL), v143), (uint8x8_t)*a1, v142), 7uLL), vmlal_u8(vmull_u8((uint8x8_t)vext_s8(a1[1], a1[2], 1uLL), v143), (uint8x8_t)a1[1], v142), 7uLL);
      v147 = (uint8x16_t *)((char *)a5 + a6);
      *v147 = vqrshrn_high_n_u16(vqrshrn_n_u16(v144, 7uLL), vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v134, v135, 1uLL), v143), (uint8x8_t)v134, v142), 7uLL);
      v148 = (uint8x16_t *)((char *)v147 + a6);
      *v148 = vqrshrn_high_n_u16(vqrshrn_n_u16(v145, 7uLL), vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v138, v139, 1uLL), v143), (uint8x8_t)v138, v142), 7uLL);
      v149 = (uint8x16_t *)((char *)v148 + a6);
      *v149 = v146;
      v150 = (uint8x16_t *)((char *)v149 + a6);
      v151 = *v141;
      *(int8x8_t *)v144.i8 = v141[1];
      v152 = v141[2];
      v153 = (int8x8_t *)((char *)v141 + a2);
      v154 = *v153;
      *(int8x8_t *)v145.i8 = v153[1];
      v155 = v153[2];
      v156 = (int8x8_t *)((char *)v153 + a2);
      v157 = *v156;
      *(int8x8_t *)v146.i8 = v156[1];
      v158 = v156[2];
      v159 = (int8x8_t *)((char *)v156 + a2);
      v160 = *v159;
      v161 = v159[1];
      v162 = v159[2];
      v163 = (int8x8_t *)((char *)v159 + a2);
      *v150 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v151, *(int8x8_t *)v144.i8, 1uLL), v143), (uint8x8_t)v151, v142), 7uLL), vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v144.i8, v152, 1uLL), v143), *(uint8x8_t *)v144.i8, v142), 7uLL);
      v164 = (uint8x16_t *)((char *)v150 + a6);
      *v164 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v154, *(int8x8_t *)v145.i8, 1uLL), v143), (uint8x8_t)v154, v142), 7uLL), vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v145.i8, v155, 1uLL), v143), *(uint8x8_t *)v145.i8, v142), 7uLL);
      v165 = (uint8x16_t *)((char *)v164 + a6);
      *v165 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v157, *(int8x8_t *)v146.i8, 1uLL), v143), (uint8x8_t)v157, v142), 7uLL), vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v146.i8, v158, 1uLL), v143), *(uint8x8_t *)v146.i8, v142), 7uLL);
      v166 = (uint8x16_t *)((char *)v165 + a6);
      *v166 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v160, v161, 1uLL), v143), (uint8x8_t)v160, v142), 7uLL), vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v161, v162, 1uLL), v143), (uint8x8_t)v161, v142), 7uLL);
      v167 = (uint8x16_t *)((char *)v166 + a6);
      v168 = *v163;
      *(int8x8_t *)v144.i8 = v163[1];
      v169 = v163[2];
      v170 = (int8x8_t *)((char *)v163 + a2);
      v171 = *v170;
      *(int8x8_t *)v145.i8 = v170[1];
      v172 = v170[2];
      v173 = (int8x8_t *)((char *)v170 + a2);
      v174 = *v173;
      *(int8x8_t *)v146.i8 = v173[1];
      v175 = v173[2];
      v176 = (int8x8_t *)((char *)v173 + a2);
      v177 = *v176;
      v178 = v176[1];
      v179 = v176[2];
      v180 = (int8x8_t *)((char *)v176 + a2);
      *v167 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v168, *(int8x8_t *)v144.i8, 1uLL), v143), (uint8x8_t)v168, v142), 7uLL), vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v144.i8, v169, 1uLL), v143), *(uint8x8_t *)v144.i8, v142), 7uLL);
      v181 = (uint8x16_t *)((char *)v167 + a6);
      *v181 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v171, *(int8x8_t *)v145.i8, 1uLL), v143), (uint8x8_t)v171, v142), 7uLL), vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v145.i8, v172, 1uLL), v143), *(uint8x8_t *)v145.i8, v142), 7uLL);
      v182 = (uint8x16_t *)((char *)v181 + a6);
      *v182 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v174, *(int8x8_t *)v146.i8, 1uLL), v143), (uint8x8_t)v174, v142), 7uLL), vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v146.i8, v175, 1uLL), v143), *(uint8x8_t *)v146.i8, v142), 7uLL);
      v183 = (uint8x16_t *)((char *)v182 + a6);
      *v183 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v177, v178, 1uLL), v143), (uint8x8_t)v177, v142), 7uLL), vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v178, v179, 1uLL), v143), (uint8x8_t)v178, v142), 7uLL);
      v184 = (uint8x16_t *)((char *)v183 + a6);
      v185 = *v180;
      *(int8x8_t *)v144.i8 = v180[1];
      v186 = v180[2];
      v187 = (int8x8_t *)((char *)v180 + a2);
      v188 = *v187;
      *(int8x8_t *)v145.i8 = v187[1];
      v189 = v187[2];
      v190 = (int8x8_t *)((char *)v187 + a2);
      *(int8x8_t *)v146.i8 = v190[1];
      v191 = (int8x8_t *)((char *)v190 + a2);
      v192 = v191[1];
      v193 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v185, *(int8x8_t *)v144.i8, 1uLL), v143), (uint8x8_t)v185, v142);
      v194 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v188, *(int8x8_t *)v145.i8, 1uLL), v143), (uint8x8_t)v188, v142);
      v195 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*v190, *(int8x8_t *)v146.i8, 1uLL), v143), (uint8x8_t)*v190, v142);
      v196 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*v191, v192, 1uLL), v143), (uint8x8_t)*v191, v142);
      v197 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v144.i8, v186, 1uLL), v143), *(uint8x8_t *)v144.i8, v142);
      v198 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v145.i8, v189, 1uLL), v143), *(uint8x8_t *)v145.i8, v142);
      v199 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v146.i8, v190[2], 1uLL), v143), *(uint8x8_t *)v146.i8, v142);
      v200 = vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v192, v191[2], 1uLL), v143), (uint8x8_t)v192, v142);
      result = vqrshrn_high_n_u16(vqrshrn_n_u16(v193, 7uLL), v197, 7uLL);
      *v184 = result;
      v201 = (uint8x16_t *)((char *)v184 + a6);
      *v201 = vqrshrn_high_n_u16(vqrshrn_n_u16(v194, 7uLL), v198, 7uLL);
      v202 = (uint8x16_t *)((char *)v201 + a6);
      *v202 = vqrshrn_high_n_u16(vqrshrn_n_u16(v195, 7uLL), v199, 7uLL);
      *(uint8x16_t *)((char *)v202 + a6) = vqrshrn_high_n_u16(vqrshrn_n_u16(v196, 7uLL), v200, 7uLL);
    }
  }
  else
  {
    v121 = (char *)&bifilter4_coeff + 2 * a4;
    a7.i8[0] = *v121;
    a8.i8[0] = v121[1];
    v122 = *(uint8x16_t *)a1->i8;
    v123 = 5;
    result = (uint8x16_t)vdupq_lane_s8(a7, 0);
    v124 = (uint8x16_t)vdupq_lane_s8(a8, 0);
    do
    {
      v125 = *(uint8x16_t *)&a1->i8[a2];
      v126 = *(uint8x16_t *)&a1->i8[2 * a2];
      v127 = *(uint8x16_t *)&a1->i8[3 * a2];
      v128 = vmlal_u8(vmull_u8(*(uint8x8_t *)v125.i8, *(uint8x8_t *)v124.i8), *(uint8x8_t *)v122.i8, *(uint8x8_t *)result.i8);
      v129 = vmlal_high_u8(vmull_high_u8(v125, v124), v122, result);
      v122 = *(uint8x16_t *)&a1->i8[4 * a2];
      a1 = (int8x8_t *)((char *)a1 + 2 * a2 + a2 + a2);
      *a5 = vqrshrn_high_n_u16(vqrshrn_n_u16(v128, 7uLL), v129, 7uLL);
      *(uint8x16_t *)((char *)a5 + a6) = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8(*(uint8x8_t *)v126.i8, *(uint8x8_t *)v124.i8), *(uint8x8_t *)v125.i8, *(uint8x8_t *)result.i8), 7uLL), vmlal_high_u8(vmull_high_u8(v126, v124), v125, result), 7uLL);
      v130 = (uint8x16_t *)((char *)a5 + a6 + a6);
      *v130 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8(*(uint8x8_t *)v127.i8, *(uint8x8_t *)v124.i8), *(uint8x8_t *)v126.i8, *(uint8x8_t *)result.i8), 7uLL), vmlal_high_u8(vmull_high_u8(v127, v124), v126, result), 7uLL);
      v131 = (uint8x16_t *)((char *)v130 + a6);
      *v131 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8(*(uint8x8_t *)v122.i8, *(uint8x8_t *)v124.i8), *(uint8x8_t *)v127.i8, *(uint8x8_t *)result.i8), 7uLL), vmlal_high_u8(vmull_high_u8(v122, v124), v127, result), 7uLL);
      a5 = (uint8x16_t *)((char *)v131 + a6);
      --v123;
    }
    while (v123 > 1);
  }
  return result;
}

BOOL vpx_reader_init(uint64_t a1, unint64_t *a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  _BOOL8 result;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int8x16_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int32x4_t v21;
  int32x4_t v22;
  uint8x8_t *v23;
  uint64_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x8_t v28;
  uint16x8_t v29;
  uint32x4_t v30;
  uint64x2_t v31;
  uint64x2_t v32;
  uint64x2_t v33;
  uint32x4_t v34;
  uint64x2_t v35;
  uint64x2_t v36;
  uint64x2_t v37;
  uint64x2_t v38;
  uint64x2_t v39;
  int8x16_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  uint64_t v48;
  uint8x16_t *v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  uint8x16_t v56;
  uint16x8_t v57;
  uint32x4_t v58;
  uint64x2_t v59;
  uint64x2_t v60;
  uint32x4_t v61;
  uint64x2_t v62;
  uint16x8_t v63;
  uint32x4_t v64;
  uint64x2_t v65;
  uint64x2_t v66;
  uint64x2_t v67;
  uint64x2_t v68;
  uint32x4_t v69;
  uint64x2_t v70;
  uint64x2_t v71;
  uint64x2_t v72;
  uint64x2_t v73;
  uint64x2_t v74;
  uint64x2_t v75;
  uint64x2_t v76;
  uint64x2_t v77;
  uint64x2_t v78;
  int8x16_t v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  int v86;

  if (!a2 && a3)
    return 1;
  *(_QWORD *)(a1 + 16) = (char *)a2 + a3;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xFFFFFFF8000000FFLL;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  v7 = 8 * a3;
  if (a4)
  {
    a4(a5);
    a2 = (unint64_t *)(a1 + 48);
  }
  if (v7 < 0x41)
  {
    if (!(_DWORD)v7)
    {
      v9 = 0;
      v10 = 1073741816;
      v8 = a2;
      goto LABEL_28;
    }
    if (64 - (int)v7 >= 49)
      v11 = 49;
    else
      v11 = 64 - v7;
    v12 = 56;
    v13 = 56 - v11;
    if ((56 - v11) < 0x38)
    {
      v9 = 0;
      v14 = a2;
      goto LABEL_26;
    }
    v15 = (v13 >> 3) + 1;
    if (v13 >= 0x78)
    {
      v16 = v15 & 0x3FFFFFF0;
      v17 = 56 - 8 * (v15 & 0x3FFFFFF0);
      v41 = (int32x4_t)xmmword_208F3A660;
      v42 = (int32x4_t)xmmword_208F3A670;
      v43 = (int32x4_t)xmmword_208F3A680;
      v44 = 0uLL;
      v45.i64[0] = 0x7F0000007FLL;
      v45.i64[1] = 0x7F0000007FLL;
      v46 = 0uLL;
      v47 = (int32x4_t)xmmword_208F3A690;
      v48 = v16;
      v49 = (uint8x16_t *)a2;
      v50 = 0uLL;
      v51 = 0uLL;
      v52 = 0uLL;
      v53 = 0uLL;
      v54 = 0uLL;
      v55 = 0uLL;
      do
      {
        v56 = *v49++;
        v57 = vmovl_high_u8(v56);
        v58 = vmovl_high_u16(v57);
        v59.i64[0] = v58.u32[0];
        v59.i64[1] = v58.u32[1];
        v60 = v59;
        v61 = vmovl_u16(*(uint16x4_t *)v57.i8);
        v59.i64[0] = v61.u32[2];
        v59.i64[1] = v61.u32[3];
        v62 = v59;
        v63 = vmovl_u8(*(uint8x8_t *)v56.i8);
        v64 = vmovl_high_u16(v63);
        v59.i64[0] = v64.u32[2];
        v59.i64[1] = v64.u32[3];
        v65 = v59;
        v59.i64[0] = v58.u32[2];
        v59.i64[1] = v58.u32[3];
        v66 = v59;
        v59.i64[0] = v61.u32[0];
        v59.i64[1] = v61.u32[1];
        v67 = v59;
        v59.i64[0] = v64.u32[0];
        v59.i64[1] = v64.u32[1];
        v68 = v59;
        v69 = vmovl_u16(*(uint16x4_t *)v63.i8);
        v59.i64[0] = v69.u32[2];
        v59.i64[1] = v69.u32[3];
        v70 = v59;
        v59.i64[0] = v69.u32[0];
        v59.i64[1] = v69.u32[1];
        v71 = v59;
        v59.i64[0] = v41.u32[0];
        v59.i64[1] = v41.u32[1];
        v72 = v59;
        v59.i64[0] = v42.u32[2];
        v59.i64[1] = v42.u32[3];
        v73 = v59;
        v59.i64[0] = v43.u32[2];
        v59.i64[1] = v43.u32[3];
        v74 = v59;
        v59.i64[0] = v41.u32[2];
        v59.i64[1] = v41.u32[3];
        v75 = v59;
        v59.i64[0] = v42.u32[0];
        v59.i64[1] = v42.u32[1];
        v76 = v59;
        v59.i64[0] = v43.u32[0];
        v59.i64[1] = v43.u32[1];
        v77 = v59;
        v59.i64[0] = v47.u32[2];
        v59.i64[1] = v47.u32[3];
        v78 = v59;
        v59.i64[0] = v47.u32[0];
        v59.i64[1] = v47.u32[1];
        v54 = vorrq_s8((int8x16_t)vshlq_u64(v60, v72), v54);
        v53 = vorrq_s8((int8x16_t)vshlq_u64(v62, v73), v53);
        v51 = vorrq_s8((int8x16_t)vshlq_u64(v65, v74), v51);
        v55 = vorrq_s8((int8x16_t)vshlq_u64(v66, v75), v55);
        v52 = vorrq_s8((int8x16_t)vshlq_u64(v67, v76), v52);
        v50 = vorrq_s8((int8x16_t)vshlq_u64(v68, v77), v50);
        v46 = vorrq_s8((int8x16_t)vshlq_u64(v70, v78), v46);
        v44 = vorrq_s8((int8x16_t)vshlq_u64(v71, v59), v44);
        v47 = vaddq_s32(v47, v45);
        v43 = vaddq_s32(v43, v45);
        v42 = vaddq_s32(v42, v45);
        v41 = vaddq_s32(v41, v45);
        v48 -= 16;
      }
      while (v48);
      v79 = vorrq_s8(vorrq_s8(vorrq_s8(v44, v52), vorrq_s8(v50, v54)), vorrq_s8(vorrq_s8(v46, v53), vorrq_s8(v51, v55)));
      v9 = (unint64_t)vorr_s8(*(int8x8_t *)v79.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL));
      if (v16 == v15)
        goto LABEL_27;
      if ((v15 & 8) == 0)
      {
        v12 = (-8 * v16) | 0x38;
        v14 = (unint64_t *)((char *)a2 + v16);
        do
        {
LABEL_26:
          v80 = *(unsigned __int8 *)v14;
          v14 = (unint64_t *)((char *)v14 + 1);
          v9 |= (unint64_t)v80 << v12;
          v12 -= 8;
        }
        while (v12 >= 64 - (int)v7);
LABEL_27:
        v10 = v7 + 1073741816;
        v8 = (unint64_t *)((char *)a2 + ((v7 - 8) >> 3) + 1);
        goto LABEL_28;
      }
    }
    else
    {
      v9 = 0;
      v16 = 0;
      v17 = 56;
    }
    v14 = (unint64_t *)((char *)a2 + (v15 & 0x3FFFFFF8));
    v12 = 56 - 8 * (v15 & 0x3FFFFFF8);
    v18 = (int8x16_t)v9;
    v19 = vdupq_n_s32(v17);
    v20 = 0uLL;
    v21 = vaddq_s32(v19, (int32x4_t)xmmword_208F3A6A0);
    v22 = vaddq_s32(v19, (int32x4_t)xmmword_208F3A6B0);
    v23 = (uint8x8_t *)((char *)a2 + v16);
    v24 = v16 - (v15 & 0x3FFFFFF8);
    v25.i64[0] = 0x3F0000003FLL;
    v25.i64[1] = 0x3F0000003FLL;
    v26 = 0uLL;
    v27 = 0uLL;
    do
    {
      v28 = *v23++;
      v29 = vmovl_u8(v28);
      v30 = vmovl_high_u16(v29);
      v31.i64[0] = v30.u32[2];
      v31.i64[1] = v30.u32[3];
      v32 = v31;
      v31.i64[0] = v30.u32[0];
      v31.i64[1] = v30.u32[1];
      v33 = v31;
      v34 = vmovl_u16(*(uint16x4_t *)v29.i8);
      v31.i64[0] = v34.u32[2];
      v31.i64[1] = v34.u32[3];
      v35 = v31;
      v31.i64[0] = v34.u32[0];
      v31.i64[1] = v34.u32[1];
      v36 = v31;
      v31.i64[0] = v21.u32[2];
      v31.i64[1] = v21.u32[3];
      v37 = v31;
      v31.i64[0] = v21.u32[0];
      v31.i64[1] = v21.u32[1];
      v38 = v31;
      v31.i64[0] = v22.u32[2];
      v31.i64[1] = v22.u32[3];
      v39 = v31;
      v31.i64[0] = v22.u32[0];
      v31.i64[1] = v22.u32[1];
      v27 = vorrq_s8((int8x16_t)vshlq_u64(v32, v37), v27);
      v26 = vorrq_s8((int8x16_t)vshlq_u64(v33, v38), v26);
      v20 = vorrq_s8((int8x16_t)vshlq_u64(v35, v39), v20);
      v18 = vorrq_s8((int8x16_t)vshlq_u64(v36, v31), v18);
      v22 = vaddq_s32(v22, v25);
      v21 = vaddq_s32(v21, v25);
      v24 += 8;
    }
    while (v24);
    v40 = vorrq_s8(vorrq_s8(v18, v26), vorrq_s8(v20, v27));
    v9 = (unint64_t)vorr_s8(*(int8x8_t *)v40.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
    if ((v15 & 0x3FFFFFF8) == v15)
      goto LABEL_27;
    goto LABEL_26;
  }
  v8 = a2 + 1;
  v9 = bswap64(*a2) | *(_QWORD *)a1;
  v10 = 56;
LABEL_28:
  *(_QWORD *)(a1 + 24) += (char *)v8 - (char *)a2;
  v81 = *(_DWORD *)(a1 + 8);
  v82 = ((v81 << 7) + 128) >> 8;
  v83 = v82 << 56;
  v84 = v81 - v82;
  result = v9 >= v82 << 56;
  if (v9 < v82 << 56)
  {
    v83 = 0;
    v84 = v82;
  }
  v85 = v9 - v83;
  v86 = vpx_norm[v84];
  *(_QWORD *)a1 = v85 << v86;
  *(_DWORD *)(a1 + 8) = v84 << v86;
  *(_DWORD *)(a1 + 12) = v10 - v86;
  return result;
}

uint64_t vpx_reader_fill(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v8;
  signed int v9;
  signed int v10;
  unsigned int v11;
  unint64_t *v12;
  int v13;
  BOOL v14;
  int v15;
  int v17;
  unsigned int v18;
  int v19;
  int8x16_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  uint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64_t v34;
  uint8x16_t *v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint8x16_t v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint64x2_t v45;
  uint64x2_t v46;
  uint32x4_t v47;
  uint64x2_t v48;
  uint16x8_t v49;
  uint32x4_t v50;
  uint64x2_t v51;
  uint64x2_t v52;
  uint64x2_t v53;
  uint64x2_t v54;
  uint32x4_t v55;
  uint64x2_t v56;
  uint64x2_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  unsigned int v66;

  v1 = result;
  v2 = *(unint64_t **)(result + 24);
  v3 = *(_QWORD *)result;
  v4 = *(_DWORD *)(result + 12);
  v5 = *(_QWORD *)(result + 16) - (_QWORD)v2;
  v6 = 8 * v5;
  v7 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(result + 32);
  if (v7)
  {
    if (v5 >= 9)
      v8 = 9;
    else
      v8 = *(_QWORD *)(result + 16) - (_QWORD)v2;
    result = v7(*(_QWORD *)(result + 40), v2, result + 48, v8);
    v2 = (unint64_t *)(v1 + 48);
  }
  v9 = 48 - v4;
  if (v6 < 0x41)
  {
    v13 = 56 - v4 - v6;
    if (v13 < 0)
      v11 = v4;
    else
      v11 = v4 + 0x40000000;
    if (v6)
      v14 = 1;
    else
      v14 = v13 <= -1;
    v15 = v13 & ~(v13 >> 31);
    if (!v14 || v9 < v15)
    {
      v12 = v2;
    }
    else
    {
      v17 = v15 - 1;
      if (v15 - 1 >= (int)(40 - v4))
        v17 = 40 - v4;
      v18 = 47 - v4 - v17;
      v12 = v2;
      v19 = 48 - v4;
      if (v18 < 0x78)
        goto LABEL_30;
      v20 = (int8x16_t)v3;
      v21 = (int32x4_t)v11;
      v22 = vdupq_n_s32(v9);
      v23 = 0uLL;
      v24 = vaddq_s32(v22, (int32x4_t)xmmword_208F3A6C0);
      v25 = vaddq_s32(v22, (int32x4_t)xmmword_208F3A6D0);
      v26 = vaddq_s32(v22, (int32x4_t)xmmword_208F3A6A0);
      v27 = vaddq_s32(v22, (int32x4_t)xmmword_208F3A6B0);
      v28.i64[0] = 0x800000008;
      v28.i64[1] = 0x800000008;
      v29.i64[0] = 0x7F0000007FLL;
      v29.i64[1] = 0x7F0000007FLL;
      v30 = (v18 >> 3) + 1;
      v31 = 0uLL;
      v32 = 0uLL;
      v33 = 0uLL;
      v12 = (unint64_t *)((char *)v2 + (v30 & 0x3FFFFFF0));
      v19 = v9 - 8 * (v30 & 0x3FFFFFF0);
      v34 = v30 & 0x3FFFFFF0;
      v35 = (uint8x16_t *)v2;
      v36 = 0uLL;
      v37 = 0uLL;
      v38 = 0uLL;
      v39 = 0uLL;
      v40 = 0uLL;
      v41 = 0uLL;
      do
      {
        v42 = *v35++;
        v43 = vmovl_high_u8(v42);
        v44 = vmovl_high_u16(v43);
        v45.i64[0] = v44.u32[0];
        v45.i64[1] = v44.u32[1];
        v46 = v45;
        v47 = vmovl_u16(*(uint16x4_t *)v43.i8);
        v45.i64[0] = v47.u32[2];
        v45.i64[1] = v47.u32[3];
        v48 = v45;
        v49 = vmovl_u8(*(uint8x8_t *)v42.i8);
        v50 = vmovl_high_u16(v49);
        v45.i64[0] = v50.u32[2];
        v45.i64[1] = v50.u32[3];
        v51 = v45;
        v45.i64[0] = v44.u32[2];
        v45.i64[1] = v44.u32[3];
        v52 = v45;
        v45.i64[0] = v47.u32[0];
        v45.i64[1] = v47.u32[1];
        v53 = v45;
        v45.i64[0] = v50.u32[0];
        v45.i64[1] = v50.u32[1];
        v54 = v45;
        v55 = vmovl_u16(*(uint16x4_t *)v49.i8);
        v45.i64[0] = v55.u32[2];
        v45.i64[1] = v55.u32[3];
        v56 = v45;
        v45.i64[0] = v55.u32[0];
        v45.i64[1] = v55.u32[1];
        v57 = v45;
        v45.i64[0] = v27.u32[0];
        v45.i64[1] = v27.u32[1];
        v58 = (int8x16_t)vshlq_u64(v57, v45);
        v45.i64[0] = v27.u32[2];
        v45.i64[1] = v27.u32[3];
        v59 = (int8x16_t)vshlq_u64(v56, v45);
        v45.i64[0] = v26.u32[0];
        v45.i64[1] = v26.u32[1];
        v60 = (int8x16_t)vshlq_u64(v54, v45);
        v45.i64[0] = v25.u32[0];
        v45.i64[1] = v25.u32[1];
        v61 = (int8x16_t)vshlq_u64(v53, v45);
        v45.i64[0] = v24.u32[2];
        v45.i64[1] = v24.u32[3];
        v62 = (int8x16_t)vshlq_u64(v52, v45);
        v45.i64[0] = v26.u32[2];
        v45.i64[1] = v26.u32[3];
        v63 = (int8x16_t)vshlq_u64(v51, v45);
        v45.i64[0] = v25.u32[2];
        v45.i64[1] = v25.u32[3];
        v64 = (int8x16_t)vshlq_u64(v48, v45);
        v45.i64[0] = v24.u32[0];
        v45.i64[1] = v24.u32[1];
        v37 = vorrq_s8((int8x16_t)vshlq_u64(v46, v45), v37);
        v36 = vorrq_s8(v64, v36);
        v32 = vorrq_s8(v63, v32);
        v38 = vorrq_s8(v62, v38);
        v33 = vorrq_s8(v61, v33);
        v31 = vorrq_s8(v60, v31);
        v23 = vorrq_s8(v59, v23);
        v20 = vorrq_s8(v58, v20);
        v21 = vaddq_s32(v21, v28);
        v39 = vaddq_s32(v39, v28);
        v40 = vaddq_s32(v40, v28);
        v41 = vaddq_s32(v41, v28);
        v27 = vaddq_s32(v27, v29);
        v26 = vaddq_s32(v26, v29);
        v25 = vaddq_s32(v25, v29);
        v24 = vaddq_s32(v24, v29);
        v34 -= 16;
      }
      while (v34);
      v11 = vaddvq_s32(vaddq_s32(vaddq_s32(v21, v40), vaddq_s32(v39, v41)));
      v65 = vorrq_s8(vorrq_s8(vorrq_s8(v20, v33), vorrq_s8(v31, v37)), vorrq_s8(vorrq_s8(v23, v36), vorrq_s8(v32, v38)));
      v3 = (unint64_t)vorr_s8(*(int8x8_t *)v65.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL));
      if ((v30 & 0x3FFFFFF0) != v30)
      {
LABEL_30:
        do
        {
          v11 += 8;
          v66 = *(unsigned __int8 *)v12;
          v12 = (unint64_t *)((char *)v12 + 1);
          v3 |= (unint64_t)v66 << v19;
          v19 -= 8;
        }
        while (v19 >= v15);
      }
    }
  }
  else
  {
    v10 = (v9 & 0xFFFFFFF8) + 8;
    v11 = v10 + v4;
    v12 = (unint64_t *)((char *)v2 + (v10 >> 3));
    v3 = (bswap64(*v2) >> (56 - (v9 & 0xF8u)) << (v9 & 7)) | *(_QWORD *)v1;
  }
  *(_QWORD *)(v1 + 24) += (char *)v12 - (char *)v2;
  *(_QWORD *)v1 = v3;
  *(_DWORD *)(v1 + 12) = v11;
  return result;
}

uint64_t vpx_rb_read_literal(_QWORD *a1, int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  unint64_t v6;
  unsigned __int8 *v7;
  void (*v8)(_QWORD);

  if (a2 < 1)
    return 0;
  LODWORD(v3) = 0;
  v4 = a2 + 1;
  do
  {
    while (1)
    {
      v6 = a1[2];
      v7 = (unsigned __int8 *)(*a1 + (v6 >> 3));
      if ((unint64_t)v7 >= a1[1])
        break;
      v5 = (*v7 >> (~(_BYTE)v6 & 7)) & 1;
      a1[2] = v6 + 1;
      v3 = (v5 << (v4-- - 2)) | v3;
      if (v4 <= 1)
        return v3;
    }
    v8 = (void (*)(_QWORD))a1[4];
    if (v8)
      v8(a1[3]);
    v3 = v3;
    --v4;
  }
  while (v4 > 1);
  return v3;
}

uint64_t vp8_pack_tokens(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL4 v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;

  v3 = result;
  v4 = *(_DWORD *)(result + 4);
  v5 = *(_DWORD *)(result + 8);
  v6 = *(_DWORD *)result;
  if (a3 >= 1)
  {
    v7 = a2;
    v51 = (unint64_t)&a2[2 * a3];
    do
    {
      v53 = v7;
      v54 = *((unsigned __int8 *)v7 + 10);
      v9 = (unsigned int *)((char *)&vp8_coef_encodings + 8 * v54);
      v10 = *v7;
      v11 = *v9;
      v12 = *((_BYTE *)v7 + 11) != 0;
      v13 = 2 * v12;
      v14 = v9[1] - v12;
      do
      {
        while (1)
        {
          --v14;
          v15 = ((v4 - 1) * *(unsigned __int8 *)(v10 + (v13 >> 1))) >> 8;
          v13 = vp8_coef_tree[((v11 >> v14) & 1) + v13];
          v16 = ((v11 >> v14) & 1) != 0 ? v4 - (v15 + 1) : v15 + 1;
          v17 = (((int)(v11 >> v14 << 31) >> 31) & (v15 + 1)) + v6;
          v18 = vp8_norm[v16];
          v19 = v5 + v18;
          if (v5 + v18 >= 0)
            break;
          v5 += v18;
          v4 = v16 << v18;
          v6 = (_DWORD)v17 << v18;
          if (!v14)
            goto LABEL_23;
        }
        if ((((_DWORD)v17 << ~(_BYTE)v5) & 0x80000000) == 0)
        {
          v20 = *(unsigned int *)(v3 + 12);
          v21 = *(_QWORD *)(v3 + 16);
          if ((unint64_t)(v21 + v20 + 1) < *(_QWORD *)(v3 + 24))
            goto LABEL_14;
LABEL_13:
          result = vpx_internal_error(*(_QWORD *)(v3 + 32), 7, "Truncated packet or corrupt partition ", v51);
          v21 = *(_QWORD *)(v3 + 16);
          v20 = *(unsigned int *)(v3 + 12);
          goto LABEL_14;
        }
        LODWORD(v23) = *(_DWORD *)(v3 + 12);
        v24 = v23 - 1;
        if ((int)v23 - 1 >= 0)
        {
          while (1)
          {
            v23 = (v23 - 1);
            v25 = *(_QWORD *)(v3 + 16);
            if (*(unsigned __int8 *)(v25 + v23) != 255)
              break;
            *(_BYTE *)(v25 + v23) = 0;
            if ((int)v23 <= 0)
            {
              v24 = -1;
              goto LABEL_21;
            }
          }
          v24 = v23;
        }
LABEL_21:
        ++*(_BYTE *)(*(_QWORD *)(v3 + 16) + v24);
        v20 = *(unsigned int *)(v3 + 12);
        v21 = *(_QWORD *)(v3 + 16);
        if ((unint64_t)(v21 + v20 + 1) >= *(_QWORD *)(v3 + 24))
          goto LABEL_13;
LABEL_14:
        *(_DWORD *)(v3 + 12) = v20 + 1;
        *(_BYTE *)(v21 + v20) = v17 >> (v5 + 24);
        v22 = v17 << -(char)v5;
        v5 = v19 - 8;
        v4 = v16 << v18;
        v6 = (v22 & 0xFFFFFF) << v19;
      }
      while (v14);
LABEL_23:
      v26 = (char *)&vp8_extra_bits + 24 * v54;
      if (*((_DWORD *)v26 + 5))
      {
        v27 = *((_DWORD *)&vp8_extra_bits + 6 * v54 + 4);
        v52 = *((__int16 *)v53 + 4);
        if (v27)
        {
          LODWORD(result) = 0;
          v28 = *((_QWORD *)&vp8_extra_bits + 3 * v54 + 1);
          v29 = *((__int16 *)v53 + 4) >> 1;
          v30 = *(_QWORD *)v26;
          while (1)
          {
            while (1)
            {
              --v27;
              v31 = ((v4 - 1) * *(unsigned __int8 *)(v28 + ((int)result >> 1))) >> 8;
              result = *(char *)(v30 + (int)(((v29 >> v27) & 1) + result));
              v32 = ((v29 >> v27) & 1) != 0 ? v4 - (v31 + 1) : v31 + 1;
              v33 = (((int)(v29 >> v27 << 31) >> 31) & (v31 + 1)) + v6;
              v34 = vp8_norm[v32];
              v35 = v5 + v34;
              if (v5 + v34 >= 0)
                break;
              v5 += v34;
              v4 = v32 << v34;
              v6 = (_DWORD)v33 << v34;
              if (!v27)
                goto LABEL_43;
            }
            if ((((_DWORD)v33 << ~(_BYTE)v5) & 0x80000000) != 0)
              break;
            v36 = *(unsigned int *)(v3 + 12);
            v37 = *(_QWORD *)(v3 + 16);
            if ((unint64_t)(v37 + v36 + 1) >= *(_QWORD *)(v3 + 24))
              goto LABEL_33;
LABEL_34:
            *(_DWORD *)(v3 + 12) = v36 + 1;
            *(_BYTE *)(v37 + v36) = v33 >> (v5 + 24);
            v38 = v33 << -(char)v5;
            v5 = v35 - 8;
            v4 = v32 << v34;
            v6 = (v38 & 0xFFFFFF) << v35;
            if (!v27)
              goto LABEL_43;
          }
          LODWORD(v39) = *(_DWORD *)(v3 + 12);
          v40 = v39 - 1;
          if ((int)v39 - 1 >= 0)
          {
            while (1)
            {
              v39 = (v39 - 1);
              v41 = *(_QWORD *)(v3 + 16);
              if (*(unsigned __int8 *)(v41 + v39) != 255)
                break;
              *(_BYTE *)(v41 + v39) = 0;
              if ((int)v39 <= 0)
              {
                v40 = -1;
                goto LABEL_41;
              }
            }
            v40 = v39;
          }
LABEL_41:
          ++*(_BYTE *)(*(_QWORD *)(v3 + 16) + v40);
          v36 = *(unsigned int *)(v3 + 12);
          v37 = *(_QWORD *)(v3 + 16);
          if ((unint64_t)(v37 + v36 + 1) < *(_QWORD *)(v3 + 24))
            goto LABEL_34;
LABEL_33:
          v55 = result;
          vpx_internal_error(*(_QWORD *)(v3 + 32), 7, "Truncated packet or corrupt partition ", v51);
          result = v55;
          v37 = *(_QWORD *)(v3 + 16);
          v36 = *(unsigned int *)(v3 + 12);
          goto LABEL_34;
        }
LABEL_43:
        v42 = (v4 + 1) >> 1;
        v43 = v4 - v42;
        if ((v52 & 1) == 0)
          v43 = (v4 + 1) >> 1;
        v44 = ((v52 << 31 >> 31) & v42) + v6;
        v8 = v53;
        if (v44 < 0)
        {
          LODWORD(v46) = *(_DWORD *)(v3 + 12);
          v47 = v46 - 1;
          if ((int)v46 - 1 >= 0)
          {
            while (1)
            {
              v46 = (v46 - 1);
              v48 = *(_QWORD *)(v3 + 16);
              if (*(unsigned __int8 *)(v48 + v46) != 255)
                break;
              *(_BYTE *)(v48 + v46) = 0;
              if ((int)v46 <= 0)
              {
                v47 = -1;
                goto LABEL_54;
              }
            }
            v47 = v46;
          }
LABEL_54:
          ++*(_BYTE *)(*(_QWORD *)(v3 + 16) + v47);
          v4 = 2 * v43;
          v6 = 2 * v44;
          v45 = __CFADD__(v5++, 1);
          if (!v45)
            goto LABEL_4;
        }
        else
        {
          v4 = 2 * v43;
          v6 = 2 * v44;
          v45 = __CFADD__(v5++, 1);
          if (!v45)
            goto LABEL_4;
        }
        v49 = *(unsigned int *)(v3 + 12);
        v50 = *(_QWORD *)(v3 + 16);
        if ((unint64_t)(v50 + v49 + 1) >= *(_QWORD *)(v3 + 24))
        {
          result = vpx_internal_error(*(_QWORD *)(v3 + 32), 7, "Truncated packet or corrupt partition ");
          v50 = *(_QWORD *)(v3 + 16);
          v49 = *(unsigned int *)(v3 + 12);
        }
        *(_DWORD *)(v3 + 12) = v49 + 1;
        *(_BYTE *)(v50 + v49) = HIBYTE(v6);
        v6 &= 0xFFFFFEu;
        v5 = -8;
        goto LABEL_4;
      }
      v8 = v53;
LABEL_4:
      v7 = v8 + 2;
    }
    while ((unint64_t)v7 < v51);
  }
  *(_DWORD *)(v3 + 4) = v4;
  *(_DWORD *)(v3 + 8) = v5;
  *(_DWORD *)v3 = v6;
  return result;
}

uint64_t vp8_estimate_entropy_savings(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  char v87;
  char v88;
  int v89;
  char *v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  char v95;
  char v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  char v101;
  char v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  char v107;
  char v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  char v113;
  char v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  char v119;
  char v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  char v125;
  char v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  char v131;
  char v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  char v137;
  char v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  char v143;
  char v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  char v149;
  char v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  int v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173;
  int v174;
  int v175;
  int v176;
  unsigned int v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  int v182;
  int v183;
  int v184;
  unsigned int v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  int v194;
  int v195;
  int v196;
  unsigned int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  char v206;
  char v207;
  int v208;
  char *v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  char v214;
  char v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  char v220;
  char v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  char v226;
  char v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  char v232;
  char v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  char v238;
  char v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  char v244;
  char v245;
  int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  char v250;
  char v251;
  int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  char v256;
  char v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  char v262;
  char v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  char v268;
  char v269;
  uint64_t v270;
  unsigned int *v271;
  unsigned int v272;
  unsigned int v273;
  int v274;
  int v275;
  unsigned int v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  int v280;
  unsigned int v281;
  int v282;
  int v283;
  int v284;
  unsigned int v285;
  int v286;
  int v287;
  int v288;
  unsigned int v289;
  int v290;
  int v291;
  int v292;
  unsigned int v293;
  int v294;
  int v295;
  int v296;
  unsigned int v297;
  int v298;
  int v299;
  int v300;
  unsigned int v301;
  int v302;
  int v303;
  int v304;
  unsigned int v305;
  int v306;
  int v307;
  int v308;
  unsigned int v309;
  int v310;
  int v311;
  int v312;
  unsigned int v313;
  int v314;
  int v315;
  int v316;
  unsigned int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  char v326;
  char v327;
  int v328;
  char *v329;
  int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  char v334;
  char v335;
  int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  char v340;
  char v341;
  int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  char v346;
  char v347;
  int v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int v351;
  char v352;
  char v353;
  int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  char v358;
  char v359;
  int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  char v364;
  char v365;
  int v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int v369;
  char v370;
  char v371;
  int v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  char v376;
  char v377;
  int v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  char v382;
  char v383;
  int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  char v388;
  char v389;
  uint64_t v390;
  unsigned int *v391;
  unsigned int v392;
  unsigned int v393;
  int v394;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  uint64_t v400;
  uint64_t v401;
  unsigned int *v402;
  uint64_t v403;
  char *v404;
  int v405;
  uint64_t v406;
  uint64_t v407;
  _DWORD *v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  BOOL v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  char *v483;
  int v484;
  uint64_t v485;
  uint64_t v486;
  int v487;
  unsigned int v488;
  int v489;
  int v490;
  unsigned int v491;
  int v492;
  int v493;
  unsigned int v494;
  int v495;
  int v496;
  unsigned int v497;
  int v498;
  int v499;
  unsigned int v500;
  int v501;
  int v502;
  unsigned int v503;
  int v504;
  int v505;
  unsigned int v506;
  int v507;
  int v508;
  unsigned int v509;
  int v510;
  int v511;
  unsigned int v512;
  int v513;
  int v514;
  unsigned int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  unsigned int v520;
  unsigned int v521;
  unsigned int v522;
  char v523;
  int v524;
  unsigned int v525;
  unsigned int v526;
  unsigned int v527;
  char v528;
  int v529;
  unsigned int v530;
  unsigned int v531;
  unsigned int v532;
  char v533;
  int v534;
  unsigned int v535;
  unsigned int v536;
  unsigned int v537;
  char v538;
  int v539;
  unsigned int v540;
  unsigned int v541;
  unsigned int v542;
  char v543;
  int v544;
  unsigned int v545;
  unsigned int v546;
  unsigned int v547;
  char v548;
  int v549;
  unsigned int v550;
  unsigned int v551;
  unsigned int v552;
  char v553;
  int v554;
  unsigned int v555;
  unsigned int v556;
  unsigned int v557;
  char v558;
  int v559;
  unsigned int v560;
  unsigned int v561;
  unsigned int v562;
  char v563;
  int v564;
  unsigned int v565;
  unsigned int v566;
  unsigned int v567;
  char v568;
  uint64_t v569;
  int v570;
  unsigned int v571;
  unsigned int v572;
  unsigned int v573;
  char v574;
  uint64_t v575;
  unsigned int *v576;
  unsigned int v577;
  unsigned int *v578;
  uint64_t v579;
  uint64_t v580;
  int32x2_t v581;
  int v582;
  char *v583;
  unsigned __int8 *v584;
  uint64_t v585;
  _DWORD *v586;
  uint64_t v587;
  uint64_t v588;
  unsigned int *v589;
  uint64_t v590;
  char *v591;
  _DWORD *v592;
  uint64_t v593;
  uint64_t v594;
  unsigned int *v595;
  uint64_t v596;
  uint64_t v597;
  int v598;
  int v599;
  int v600;
  unsigned int *v601;
  uint64_t v602;
  uint64_t v603;
  int v604;
  uint64_t v605;
  int v606;
  unsigned int *v607;
  uint64_t v608;
  unsigned int *v609;
  uint64_t v610;
  unsigned int *v612;
  uint64_t v613;
  uint64_t v614;
  unsigned int *v615;
  _BYTE v616[48];
  uint64_t v617;

  v617 = *MEMORY[0x24BDAC8D0];
  v1 = *(_DWORD *)(a1 + 111060);
  if (v1)
  {
    v3 = *(_DWORD *)(a1 + 103608);
    v2 = *(_DWORD *)(a1 + 103612);
    v4 = *(_DWORD *)(a1 + 103616);
    v5 = *(_DWORD *)(a1 + 103620);
    v6 = v5 + v4;
    v7 = v5 + v4 + v2;
    v8 = 255 * v3 / (v7 + v3);
    if (v8 <= 1)
      v8 = 1;
    v9 = 255 * v2 / v7;
    v10 = 255 * v4 / v6;
    v11 = v6 == 0;
    v12 = vp8_prob_cost[v8];
    v13 = vp8_prob_cost[255 - v8];
    if (v11)
      v14 = 128;
    else
      v14 = v10;
    v15 = vp8_prob_cost[v9] + v13;
    v16 = vp8_prob_cost[255 - v9] + v13;
    v17 = v16 + vp8_prob_cost[v14];
    v18 = vp8_prob_cost[255 - v14] + v16;
    v19 = *(int *)(a1 + 142812);
    v20 = *(int *)(a1 + 142816);
    v21 = (unsigned int *)(a1 + 134300);
    v22 = vp8_prob_cost[v19];
    LODWORD(v19) = vp8_prob_cost[255 - v19];
    v23 = vp8_prob_cost[v20] + v19;
    LODWORD(v19) = vp8_prob_cost[255 - v20] + v19;
    v582 = (int)(v22 * v3
               - (v12 * v3
                + v15 * v2
                + v17 * v4
                + v18 * v5)
               + v23 * v2
               + (v19 + vp8_prob_cost[*(int *)(a1 + 142820)]) * v4
               + (vp8_prob_cost[255 - *(int *)(a1 + 142820)] + v19) * v5)
         / 256;
    if ((*(_BYTE *)(a1 + 114472) & 2) == 0)
      goto LABEL_8;
    goto LABEL_356;
  }
  v21 = (unsigned int *)(a1 + 134300);
  v582 = 0;
  if ((*(_BYTE *)(a1 + 114472) & 2) != 0)
  {
LABEL_356:
    v602 = a1 + 103608;
    v396 = 0;
    v598 = 0;
    v397 = a1 + 132184;
    v398 = a1 + 112757;
    v399 = (char *)&vp8_coef_update_probs;
    while (1)
    {
      v400 = 0;
      v585 = v398;
      v587 = v397;
      v401 = v398;
      v589 = v21;
      v402 = v21;
      v403 = v397;
      v583 = v399;
      v404 = v399;
      v608 = v396;
      do
      {
        v406 = 0;
        *(_OWORD *)&v616[32] = 0uLL;
        v407 = v396;
        v408 = (_DWORD *)((char *)&default_coef_counts + 1152 * v396 + 144 * v400);
        if (v1)
          v408 = (_DWORD *)(a1 + 1152 * v396 + 144 * v400 + 82572);
        v409 = v408[1];
        v410 = v408[12];
        v411 = v408[13];
        v412 = *v408 + v410;
        if (__CFADD__(*v408, v410))
          v412 = -1;
        v413 = v408[24];
        v414 = v408[25];
        v415 = __CFADD__(v412, v413);
        v416 = v412 + v413;
        if (v415)
          v417 = -1;
        else
          v417 = v416;
        v418 = v409 + v411;
        if (__CFADD__(v409, v411))
          v418 = -1;
        v415 = __CFADD__(v418, v414);
        v419 = v418 + v414;
        if (v415)
          v420 = -1;
        else
          v420 = v419;
        v421 = v408[2];
        v422 = v408[3];
        v423 = v408[14];
        v424 = v408[15];
        v415 = __CFADD__(v421, v423);
        v425 = v421 + v423;
        if (v415)
          v425 = -1;
        v427 = v408[26];
        v426 = v408[27];
        v415 = __CFADD__(v425, v427);
        v428 = v425 + v427;
        if (v415)
          v429 = -1;
        else
          v429 = v428;
        v430 = v422 + v424;
        if (__CFADD__(v422, v424))
          v430 = -1;
        v415 = __CFADD__(v430, v426);
        v431 = v430 + v426;
        if (v415)
          v432 = -1;
        else
          v432 = v431;
        v433 = v408[4];
        v434 = v408[5];
        v436 = v408[16];
        v435 = v408[17];
        v415 = __CFADD__(v433, v436);
        v437 = v433 + v436;
        if (v415)
          v437 = -1;
        v439 = v408[28];
        v438 = v408[29];
        v415 = __CFADD__(v437, v439);
        v440 = v437 + v439;
        if (v415)
          v441 = -1;
        else
          v441 = v440;
        v442 = v434 + v435;
        if (__CFADD__(v434, v435))
          v442 = -1;
        v415 = __CFADD__(v442, v438);
        v443 = v442 + v438;
        if (v415)
          v444 = -1;
        else
          v444 = v443;
        v445 = v408[6];
        v446 = v408[7];
        v448 = v408[18];
        v447 = v408[19];
        v415 = __CFADD__(v445, v448);
        v449 = v445 + v448;
        if (v415)
          v449 = -1;
        v451 = v408[30];
        v450 = v408[31];
        v415 = __CFADD__(v449, v451);
        v452 = v449 + v451;
        if (v415)
          v453 = -1;
        else
          v453 = v452;
        v454 = v446 + v447;
        if (__CFADD__(v446, v447))
          v454 = -1;
        v415 = __CFADD__(v454, v450);
        v455 = v454 + v450;
        if (v415)
          v456 = -1;
        else
          v456 = v455;
        v457 = v408[8];
        v458 = v408[9];
        v460 = v408[20];
        v459 = v408[21];
        v415 = __CFADD__(v457, v460);
        v461 = v457 + v460;
        if (v415)
          v461 = -1;
        v463 = v408[32];
        v462 = v408[33];
        v415 = __CFADD__(v461, v463);
        v464 = v461 + v463;
        if (v415)
          v465 = -1;
        else
          v465 = v464;
        v466 = v458 + v459;
        if (__CFADD__(v458, v459))
          v466 = -1;
        v415 = __CFADD__(v466, v462);
        v467 = v466 + v462;
        if (v415)
          v468 = -1;
        else
          v468 = v467;
        v469 = v408[10];
        v470 = v408[11];
        v471 = v408[22];
        v472 = v408[23];
        v415 = __CFADD__(v469, v471);
        v473 = v469 + v471;
        if (v415)
          v473 = -1;
        v474 = v408[34];
        v475 = v408[35];
        v415 = __CFADD__(v473, v474);
        v476 = v473 + v474;
        if (v415)
          v477 = -1;
        else
          v477 = v476;
        v478 = v470 + v472;
        if (__CFADD__(v470, v472))
          v478 = -1;
        v415 = __CFADD__(v478, v475);
        v479 = v478 + v475;
        if (v415)
          v479 = -1;
        v606 = v479;
        memset(v616, 0, 32);
        v595 = v402;
        v597 = v401;
        v480 = v401;
        v615 = v402;
        v591 = v404;
        v593 = v403;
        v481 = v403;
        v482 = v407;
        v483 = v404;
        v610 = v400;
        do
        {
          v484 = 0;
          LODWORD(v485) = 0;
          v613 = v406;
          v486 = a1 + 2112 * v482 + 264 * v400 + 88 * v406 + 134296;
          *(_QWORD *)(v486 + 80) = 0;
          *(_OWORD *)(v486 + 48) = 0uLL;
          *(_OWORD *)(v486 + 64) = 0uLL;
          *(_OWORD *)(v486 + 16) = 0uLL;
          *(_OWORD *)(v486 + 32) = 0uLL;
          *(_OWORD *)v486 = 0uLL;
          do
          {
            *(_DWORD *)(v486 + 8 * (v485 >> 1) + 4 * (v484 == 0)) += v417;
            v485 = v485;
            if (!v484)
              v485 = v485 + 1;
            v487 = vp8_coef_tree[v485];
            LODWORD(v485) = vp8_coef_tree[v485];
            ++v484;
          }
          while (v487 > 0);
          v488 = 0;
          v489 = 2;
          do
          {
            *(_DWORD *)(v486 + 8 * (v488 >> 1) + 4 * ((6u >> v489) & 1)) += v420;
            v490 = vp8_coef_tree[((6u >> v489) & 1) + (unint64_t)v488];
            v488 = vp8_coef_tree[((6u >> v489--) & 1) + (unint64_t)v488];
          }
          while (v490 > 0);
          v491 = 0;
          v492 = 4;
          do
          {
            *(_DWORD *)(v486 + 8 * (v491 >> 1) + 4 * ((0x1Cu >> v492) & 1)) += v429;
            v493 = vp8_coef_tree[((0x1Cu >> v492) & 1) + (unint64_t)v491];
            v491 = vp8_coef_tree[((0x1Cu >> v492--) & 1) + (unint64_t)v491];
          }
          while (v493 > 0);
          v494 = 0;
          v495 = 5;
          do
          {
            *(_DWORD *)(v486 + 8 * (v494 >> 1) + 4 * ((0x3Au >> v495) & 1)) += v432;
            v496 = vp8_coef_tree[((0x3Au >> v495) & 1) + (unint64_t)v494];
            v494 = vp8_coef_tree[((0x3Au >> v495--) & 1) + (unint64_t)v494];
          }
          while (v496 > 0);
          v497 = 0;
          v498 = 5;
          do
          {
            *(_DWORD *)(v486 + 8 * (v497 >> 1) + 4 * ((0x3Bu >> v498) & 1)) += v441;
            v499 = vp8_coef_tree[((0x3Bu >> v498) & 1) + (unint64_t)v497];
            v497 = vp8_coef_tree[((0x3Bu >> v498--) & 1) + (unint64_t)v497];
          }
          while (v499 > 0);
          v500 = 0;
          v501 = 5;
          do
          {
            *(_DWORD *)(v486 + 8 * (v500 >> 1) + 4 * ((0x3Cu >> v501) & 1)) += v444;
            v502 = vp8_coef_tree[((0x3Cu >> v501) & 1) + (unint64_t)v500];
            v500 = vp8_coef_tree[((0x3Cu >> v501--) & 1) + (unint64_t)v500];
          }
          while (v502 > 0);
          v503 = 0;
          v504 = 5;
          do
          {
            *(_DWORD *)(v486 + 8 * (v503 >> 1) + 4 * ((0x3Du >> v504) & 1)) += v453;
            v505 = vp8_coef_tree[((0x3Du >> v504) & 1) + (unint64_t)v503];
            v503 = vp8_coef_tree[((0x3Du >> v504--) & 1) + (unint64_t)v503];
          }
          while (v505 > 0);
          v506 = 0;
          v507 = 6;
          do
          {
            *(_DWORD *)(v486 + 8 * (v506 >> 1) + 4 * ((0x7Cu >> v507) & 1)) += v456;
            v508 = vp8_coef_tree[((0x7Cu >> v507) & 1) + (unint64_t)v506];
            v506 = vp8_coef_tree[((0x7Cu >> v507--) & 1) + (unint64_t)v506];
          }
          while (v508 > 0);
          v509 = 0;
          v510 = 6;
          do
          {
            *(_DWORD *)(v486 + 8 * (v509 >> 1) + 4 * ((0x7Du >> v510) & 1)) += v465;
            v511 = vp8_coef_tree[((0x7Du >> v510) & 1) + (unint64_t)v509];
            v509 = vp8_coef_tree[((0x7Du >> v510--) & 1) + (unint64_t)v509];
          }
          while (v511 > 0);
          v512 = 0;
          v513 = 6;
          do
          {
            *(_DWORD *)(v486 + 8 * (v512 >> 1) + 4 * ((0x7Eu >> v513) & 1)) += v468;
            v514 = vp8_coef_tree[((0x7Eu >> v513) & 1) + (unint64_t)v512];
            v512 = vp8_coef_tree[((0x7Eu >> v513--) & 1) + (unint64_t)v512];
          }
          while (v514 > 0);
          v515 = 0;
          v516 = 6;
          do
          {
            *(_DWORD *)(v486 + 8 * (v515 >> 1) + 4 * ((0x7Fu >> v516) & 1)) += v477;
            v517 = vp8_coef_tree[((0x7Fu >> v516) & 1) + (unint64_t)v515];
            v515 = vp8_coef_tree[((0x7Fu >> v516--) & 1) + (unint64_t)v515];
          }
          while (v517 > 0);
          v518 = *(_DWORD *)(a1 + 2112 * v482 + 264 * v400 + 88 * v406 + 134300);
          v519 = *(_DWORD *)v486 + v606;
          *(_DWORD *)v486 = v519;
          v520 = v518 + v519;
          if (v518 + v519)
          {
            v521 = (v520 >> 1) + (v519 << 8);
            v522 = v521 / v520;
            if (v520 > v521)
              v523 = 1;
            else
              v523 = v521 / v520;
            if (v522 > 0xFF)
              v523 = -1;
          }
          else
          {
            v523 = 0x80;
          }
          *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132184) = v523;
          v524 = *(_DWORD *)(v486 + 8);
          v525 = *(_DWORD *)(v486 + 12) + v524;
          if (v525)
          {
            v526 = (v525 >> 1) + (v524 << 8);
            v527 = v526 / v525;
            if (v525 > v526)
              v528 = 1;
            else
              v528 = v526 / v525;
            if (v527 > 0xFF)
              v528 = -1;
            *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132185) = v528;
            v529 = *(_DWORD *)(v486 + 16);
            v530 = *(_DWORD *)(v486 + 20) + v529;
            if (!v530)
            {
LABEL_533:
              *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132186) = 0x80;
              v534 = *(_DWORD *)(v486 + 24);
              v535 = *(_DWORD *)(v486 + 28) + v534;
              if (!v535)
                goto LABEL_534;
              goto LABEL_481;
            }
          }
          else
          {
            *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132185) = 0x80;
            v529 = *(_DWORD *)(v486 + 16);
            v530 = *(_DWORD *)(v486 + 20) + v529;
            if (!v530)
              goto LABEL_533;
          }
          v531 = (v530 >> 1) + (v529 << 8);
          v532 = v531 / v530;
          if (v530 > v531)
            v533 = 1;
          else
            v533 = v531 / v530;
          if (v532 > 0xFF)
            v533 = -1;
          *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132186) = v533;
          v534 = *(_DWORD *)(v486 + 24);
          v535 = *(_DWORD *)(v486 + 28) + v534;
          if (!v535)
          {
LABEL_534:
            *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132187) = 0x80;
            v539 = *(_DWORD *)(v486 + 32);
            v540 = *(_DWORD *)(v486 + 36) + v539;
            if (!v540)
              goto LABEL_535;
            goto LABEL_487;
          }
LABEL_481:
          v536 = (v535 >> 1) + (v534 << 8);
          v537 = v536 / v535;
          if (v535 > v536)
            v538 = 1;
          else
            v538 = v536 / v535;
          if (v537 > 0xFF)
            v538 = -1;
          *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132187) = v538;
          v539 = *(_DWORD *)(v486 + 32);
          v540 = *(_DWORD *)(v486 + 36) + v539;
          if (!v540)
          {
LABEL_535:
            *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132188) = 0x80;
            v544 = *(_DWORD *)(v486 + 40);
            v545 = *(_DWORD *)(v486 + 44) + v544;
            if (!v545)
              goto LABEL_536;
            goto LABEL_493;
          }
LABEL_487:
          v541 = (v540 >> 1) + (v539 << 8);
          v542 = v541 / v540;
          if (v540 > v541)
            v543 = 1;
          else
            v543 = v541 / v540;
          if (v542 > 0xFF)
            v543 = -1;
          *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132188) = v543;
          v544 = *(_DWORD *)(v486 + 40);
          v545 = *(_DWORD *)(v486 + 44) + v544;
          if (!v545)
          {
LABEL_536:
            *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132189) = 0x80;
            v549 = *(_DWORD *)(v486 + 48);
            v550 = *(_DWORD *)(v486 + 52) + v549;
            if (!v550)
              goto LABEL_537;
            goto LABEL_499;
          }
LABEL_493:
          v546 = (v545 >> 1) + (v544 << 8);
          v547 = v546 / v545;
          if (v545 > v546)
            v548 = 1;
          else
            v548 = v546 / v545;
          if (v547 > 0xFF)
            v548 = -1;
          *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132189) = v548;
          v549 = *(_DWORD *)(v486 + 48);
          v550 = *(_DWORD *)(v486 + 52) + v549;
          if (!v550)
          {
LABEL_537:
            *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132190) = 0x80;
            v554 = *(_DWORD *)(v486 + 56);
            v555 = *(_DWORD *)(v486 + 60) + v554;
            if (!v555)
              goto LABEL_538;
            goto LABEL_505;
          }
LABEL_499:
          v551 = (v550 >> 1) + (v549 << 8);
          v552 = v551 / v550;
          if (v550 > v551)
            v553 = 1;
          else
            v553 = v551 / v550;
          if (v552 > 0xFF)
            v553 = -1;
          *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132190) = v553;
          v554 = *(_DWORD *)(v486 + 56);
          v555 = *(_DWORD *)(v486 + 60) + v554;
          if (!v555)
          {
LABEL_538:
            *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132191) = 0x80;
            v559 = *(_DWORD *)(v486 + 64);
            v560 = *(_DWORD *)(v486 + 68) + v559;
            if (!v560)
              goto LABEL_539;
            goto LABEL_511;
          }
LABEL_505:
          v556 = (v555 >> 1) + (v554 << 8);
          v557 = v556 / v555;
          if (v555 > v556)
            v558 = 1;
          else
            v558 = v556 / v555;
          if (v557 > 0xFF)
            v558 = -1;
          *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132191) = v558;
          v559 = *(_DWORD *)(v486 + 64);
          v560 = *(_DWORD *)(v486 + 68) + v559;
          if (!v560)
          {
LABEL_539:
            *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132192) = 0x80;
            v564 = *(_DWORD *)(v486 + 72);
            v565 = *(_DWORD *)(v486 + 76) + v564;
            if (!v565)
              goto LABEL_540;
            goto LABEL_517;
          }
LABEL_511:
          v561 = (v560 >> 1) + (v559 << 8);
          v562 = v561 / v560;
          if (v560 > v561)
            v563 = 1;
          else
            v563 = v561 / v560;
          if (v562 > 0xFF)
            v563 = -1;
          *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132192) = v563;
          v564 = *(_DWORD *)(v486 + 72);
          v565 = *(_DWORD *)(v486 + 76) + v564;
          if (!v565)
          {
LABEL_540:
            v569 = v602;
            *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132193) = 0x80;
            v570 = *(_DWORD *)(v486 + 80);
            v571 = *(_DWORD *)(v486 + 84) + v570;
            if (!v571)
              goto LABEL_541;
            goto LABEL_523;
          }
LABEL_517:
          v566 = (v565 >> 1) + (v564 << 8);
          v567 = v566 / v565;
          if (v565 > v566)
            v568 = 1;
          else
            v568 = v566 / v565;
          if (v567 > 0xFF)
            v568 = -1;
          v569 = v602;
          *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132193) = v568;
          v570 = *(_DWORD *)(v486 + 80);
          v571 = *(_DWORD *)(v486 + 84) + v570;
          if (!v571)
          {
LABEL_541:
            *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132194) = 0x80;
            v604 = *(_DWORD *)(v569 + 7452);
            v575 = 0;
            if (v604)
              goto LABEL_529;
            goto LABEL_542;
          }
LABEL_523:
          v572 = (v571 >> 1) + (v570 << 8);
          v573 = v572 / v571;
          if (v571 > v572)
            v574 = 1;
          else
            v574 = v572 / v571;
          if (v573 > 0xFF)
            v574 = -1;
          *(_BYTE *)(a1 + 264 * v608 + 33 * v610 + 11 * v406 + 132194) = v574;
          v604 = *(_DWORD *)(v569 + 7452);
          v575 = 0;
          if (v604)
          {
LABEL_529:
            v576 = v615;
            do
            {
              v577 = *(v576 - 1);
              *(_DWORD *)&v616[4 * v575] = ((*v576
                                           * (unint64_t)vp8_prob_cost[~*(_BYTE *)(v480 + v575)]
                                           + v577 * (unint64_t)vp8_prob_cost[*(unsigned __int8 *)(v480 + v575)]) >> 8)
                                         + *(_DWORD *)&v616[4 * v575]
                                         - (((vp8_prob_cost[~*(_BYTE *)(v481 + v575)]
                                            * (unint64_t)*v576
                                            + vp8_prob_cost[*(unsigned __int8 *)(v481 + v575)] * (unint64_t)v577) >> 8)
                                          + ((vp8_prob_cost[~v483[v575]]
                                            - vp8_prob_cost[v483[v575]]) >> 8))
                                         - 8;
              ++v575;
              v576 += 2;
            }
            while (v575 != 11);
            goto LABEL_436;
          }
LABEL_542:
          v578 = v615;
          do
          {
            v579 = *(unsigned __int8 *)(v481 + v575);
            v580 = *(unsigned __int8 *)(v480 + v575);
            if ((_DWORD)v579 != (_DWORD)v580)
              *(_DWORD *)&v616[4 * v575] = ((*v578 * (unint64_t)vp8_prob_cost[v580 ^ 0xFF]
                                           + *(v578 - 1) * (unint64_t)vp8_prob_cost[v580]) >> 8)
                                         + *(_DWORD *)&v616[4 * v575]
                                         - (((vp8_prob_cost[v579 ^ 0xFF] * (unint64_t)*v578
                                            + vp8_prob_cost[v579] * (unint64_t)*(v578 - 1)) >> 8)
                                          + ((vp8_prob_cost[~v483[v575]]
                                            - vp8_prob_cost[v483[v575]]) >> 8))
                                         - 8;
            ++v575;
            v578 += 2;
          }
          while (v575 != 11);
LABEL_436:
          ++v406;
          v483 += 11;
          v481 += 11;
          v615 += 22;
          v480 += 11;
          v482 = v608;
          v400 = v610;
        }
        while (v613 != 2);
        v396 = v608;
        v1 = v604;
        if (v604)
        {
          v581 = vmax_s32(*(int32x2_t *)&v616[36], 0);
          v405 = vaddvq_s32(vaddq_s32(vmaxq_s32(*(int32x4_t *)v616, (int32x4_t)0), vmaxq_s32(*(int32x4_t *)&v616[16], (int32x4_t)0)))+ (*(_DWORD *)&v616[32] & ~(*(int *)&v616[32] >> 31))+ vadd_s32(v581, vdup_lane_s32(v581, 1)).u32[0]+ v598;
        }
        else
        {
          v405 = vaddvq_s32(vaddq_s32(*(int32x4_t *)&v616[4], *(int32x4_t *)&v616[20]))
               + *(_DWORD *)&v616[36]
               + *(_DWORD *)&v616[40]
               + *(_DWORD *)v616
               + v598;
        }
        v598 = v405;
        v400 = v610 + 1;
        v404 = v591 + 33;
        v403 = v593 + 33;
        v402 = v595 + 66;
        v401 = v597 + 33;
      }
      while (v610 != 7);
      v396 = v608 + 1;
      v399 = v583 + 264;
      v397 = v587 + 264;
      v21 = v589 + 528;
      v398 = v585 + 264;
      if (v608 == 3)
        return (v598 + v582);
    }
  }
LABEL_8:
  v614 = 0;
  v598 = 0;
  v24 = a1 + 112757;
  v25 = a1 + 132184;
  v26 = (unsigned int *)(a1 + 134300);
  v27 = a1 + 112768;
  v28 = a1 + 132195;
  v29 = (_DWORD *)(a1 + 134388);
  v30 = a1 + 112779;
  v31 = a1 + 132206;
  v32 = (_DWORD *)(a1 + 134476);
  v33 = (unsigned __int8 *)&vp8_coef_update_probs;
  do
  {
    v34 = 0;
    v586 = v32;
    v588 = v31;
    v612 = v32;
    v590 = v30;
    v592 = v29;
    v607 = v26;
    v609 = v29;
    v594 = v28;
    v596 = v27;
    v601 = v26;
    v603 = v25;
    v605 = v24;
    v584 = v33;
    do
    {
      v35 = 0;
      v36 = 0;
      v37 = a1 + 2112 * v614 + 264 * v34 + 134296;
      *(_QWORD *)(v37 + 80) = 0;
      *(_OWORD *)(v37 + 48) = 0uLL;
      *(_OWORD *)(v37 + 64) = 0uLL;
      *(_OWORD *)(v37 + 16) = 0uLL;
      *(_OWORD *)(v37 + 32) = 0uLL;
      *(_OWORD *)v37 = 0uLL;
      v38 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82572);
      do
      {
        *(_DWORD *)(v37 + 8 * (v36 >> 1) + 4 * (v35 == 0)) += v38;
        v39 = v36;
        if (!v35)
          v39 = v36 + 1;
        v40 = vp8_coef_tree[v39];
        v36 = v40;
        ++v35;
      }
      while (v40 > 0);
      v41 = 0;
      v42 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82576);
      v43 = 2;
      do
      {
        v44 = (6u >> v43) & 1;
        *(_DWORD *)(v37 + 8 * (v41 >> 1) + 4 * v44) += v42;
        v45 = vp8_coef_tree[v44 + v41];
        v41 = vp8_coef_tree[v44 + v41];
        --v43;
      }
      while (v45 > 0);
      v46 = 0;
      v47 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82580);
      v48 = 4;
      do
      {
        *(_DWORD *)(v37 + 8 * (v46 >> 1) + 4 * ((0x1Cu >> v48) & 1)) += v47;
        v49 = vp8_coef_tree[((0x1Cu >> v48) & 1) + (unint64_t)v46];
        v46 = vp8_coef_tree[((0x1Cu >> v48--) & 1) + (unint64_t)v46];
      }
      while (v49 > 0);
      v50 = 0;
      v51 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82584);
      v52 = 5;
      do
      {
        *(_DWORD *)(v37 + 8 * (v50 >> 1) + 4 * ((0x3Au >> v52) & 1)) += v51;
        v53 = vp8_coef_tree[((0x3Au >> v52) & 1) + (unint64_t)v50];
        v50 = vp8_coef_tree[((0x3Au >> v52--) & 1) + (unint64_t)v50];
      }
      while (v53 > 0);
      v54 = 0;
      v55 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82588);
      v56 = 5;
      do
      {
        *(_DWORD *)(v37 + 8 * (v54 >> 1) + 4 * ((0x3Bu >> v56) & 1)) += v55;
        v57 = vp8_coef_tree[((0x3Bu >> v56) & 1) + (unint64_t)v54];
        v54 = vp8_coef_tree[((0x3Bu >> v56--) & 1) + (unint64_t)v54];
      }
      while (v57 > 0);
      v58 = 0;
      v59 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82592);
      v60 = 5;
      do
      {
        *(_DWORD *)(v37 + 8 * (v58 >> 1) + 4 * ((0x3Cu >> v60) & 1)) += v59;
        v61 = vp8_coef_tree[((0x3Cu >> v60) & 1) + (unint64_t)v58];
        v58 = vp8_coef_tree[((0x3Cu >> v60--) & 1) + (unint64_t)v58];
      }
      while (v61 > 0);
      v62 = 0;
      v63 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82596);
      v64 = 5;
      do
      {
        *(_DWORD *)(v37 + 8 * (v62 >> 1) + 4 * ((0x3Du >> v64) & 1)) += v63;
        v65 = vp8_coef_tree[((0x3Du >> v64) & 1) + (unint64_t)v62];
        v62 = vp8_coef_tree[((0x3Du >> v64--) & 1) + (unint64_t)v62];
      }
      while (v65 > 0);
      v66 = 0;
      v67 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82600);
      v68 = 6;
      do
      {
        *(_DWORD *)(v37 + 8 * (v66 >> 1) + 4 * ((0x7Cu >> v68) & 1)) += v67;
        v69 = vp8_coef_tree[((0x7Cu >> v68) & 1) + (unint64_t)v66];
        v66 = vp8_coef_tree[((0x7Cu >> v68--) & 1) + (unint64_t)v66];
      }
      while (v69 > 0);
      v70 = 0;
      v71 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82604);
      v72 = 6;
      do
      {
        *(_DWORD *)(v37 + 8 * (v70 >> 1) + 4 * ((0x7Du >> v72) & 1)) += v71;
        v73 = vp8_coef_tree[((0x7Du >> v72) & 1) + (unint64_t)v70];
        v70 = vp8_coef_tree[((0x7Du >> v72--) & 1) + (unint64_t)v70];
      }
      while (v73 > 0);
      v74 = 0;
      v75 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82608);
      v76 = 6;
      do
      {
        *(_DWORD *)(v37 + 8 * (v74 >> 1) + 4 * ((0x7Eu >> v76) & 1)) += v75;
        v77 = vp8_coef_tree[((0x7Eu >> v76) & 1) + (unint64_t)v74];
        v74 = vp8_coef_tree[((0x7Eu >> v76--) & 1) + (unint64_t)v74];
      }
      while (v77 > 0);
      v78 = 0;
      v79 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82612);
      v80 = 6;
      do
      {
        *(_DWORD *)(v37 + 8 * (v78 >> 1) + 4 * ((0x7Fu >> v80) & 1)) += v79;
        v81 = vp8_coef_tree[((0x7Fu >> v80) & 1) + (unint64_t)v78];
        v78 = vp8_coef_tree[((0x7Fu >> v80--) & 1) + (unint64_t)v78];
      }
      while (v81 > 0);
      v82 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134300);
      v83 = *(_DWORD *)v37 + *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82616);
      *(_DWORD *)v37 = v83;
      v84 = v82 + v83;
      if (v82 + v83)
      {
        v85 = (v84 >> 1) + (v83 << 8);
        v86 = v85 / v84;
        if (v84 > v85)
          v87 = 1;
        else
          v87 = v85 / v84;
        if (v86 > 0xFF)
          v88 = -1;
        else
          v88 = v87;
      }
      else
      {
        v88 = 0x80;
      }
      v89 = v598;
      v90 = (char *)(a1 + 264 * v614 + 33 * v34 + 132184);
      *v90 = v88;
      v91 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134304);
      v92 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134308) + v91;
      if (v92)
      {
        v93 = (v92 >> 1) + (v91 << 8);
        v94 = v93 / v92;
        if (v92 > v93)
          v95 = 1;
        else
          v95 = v93 / v92;
        if (v94 > 0xFF)
          v96 = -1;
        else
          v96 = v95;
        v90[1] = v96;
        v97 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134312);
        v98 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134316) + v97;
        if (!v98)
        {
LABEL_113:
          v90[2] = 0x80;
          v103 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134320);
          v104 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134324) + v103;
          if (!v104)
            goto LABEL_114;
          goto LABEL_57;
        }
      }
      else
      {
        v90[1] = 0x80;
        v97 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134312);
        v98 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134316) + v97;
        if (!v98)
          goto LABEL_113;
      }
      v99 = (v98 >> 1) + (v97 << 8);
      v100 = v99 / v98;
      if (v98 > v99)
        v101 = 1;
      else
        v101 = v99 / v98;
      if (v100 > 0xFF)
        v102 = -1;
      else
        v102 = v101;
      v90[2] = v102;
      v103 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134320);
      v104 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134324) + v103;
      if (!v104)
      {
LABEL_114:
        v90[3] = 0x80;
        v109 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134328);
        v110 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134332) + v109;
        if (!v110)
          goto LABEL_115;
        goto LABEL_64;
      }
LABEL_57:
      v105 = (v104 >> 1) + (v103 << 8);
      v106 = v105 / v104;
      if (v104 > v105)
        v107 = 1;
      else
        v107 = v105 / v104;
      if (v106 > 0xFF)
        v108 = -1;
      else
        v108 = v107;
      v90[3] = v108;
      v109 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134328);
      v110 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134332) + v109;
      if (!v110)
      {
LABEL_115:
        v90[4] = 0x80;
        v115 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134336);
        v116 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134340) + v115;
        if (!v116)
          goto LABEL_116;
        goto LABEL_71;
      }
LABEL_64:
      v111 = (v110 >> 1) + (v109 << 8);
      v112 = v111 / v110;
      if (v110 > v111)
        v113 = 1;
      else
        v113 = v111 / v110;
      if (v112 > 0xFF)
        v114 = -1;
      else
        v114 = v113;
      v90[4] = v114;
      v115 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134336);
      v116 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134340) + v115;
      if (!v116)
      {
LABEL_116:
        v90[5] = 0x80;
        v121 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134344);
        v122 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134348) + v121;
        if (!v122)
          goto LABEL_117;
        goto LABEL_78;
      }
LABEL_71:
      v117 = (v116 >> 1) + (v115 << 8);
      v118 = v117 / v116;
      if (v116 > v117)
        v119 = 1;
      else
        v119 = v117 / v116;
      if (v118 > 0xFF)
        v120 = -1;
      else
        v120 = v119;
      v90[5] = v120;
      v121 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134344);
      v122 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134348) + v121;
      if (!v122)
      {
LABEL_117:
        v90[6] = 0x80;
        v127 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134352);
        v128 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134356) + v127;
        if (!v128)
          goto LABEL_118;
        goto LABEL_85;
      }
LABEL_78:
      v123 = (v122 >> 1) + (v121 << 8);
      v124 = v123 / v122;
      if (v122 > v123)
        v125 = 1;
      else
        v125 = v123 / v122;
      if (v124 > 0xFF)
        v126 = -1;
      else
        v126 = v125;
      v90[6] = v126;
      v127 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134352);
      v128 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134356) + v127;
      if (!v128)
      {
LABEL_118:
        v90[7] = 0x80;
        v133 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134360);
        v134 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134364) + v133;
        if (!v134)
          goto LABEL_119;
        goto LABEL_92;
      }
LABEL_85:
      v129 = (v128 >> 1) + (v127 << 8);
      v130 = v129 / v128;
      if (v128 > v129)
        v131 = 1;
      else
        v131 = v129 / v128;
      if (v130 > 0xFF)
        v132 = -1;
      else
        v132 = v131;
      v90[7] = v132;
      v133 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134360);
      v134 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134364) + v133;
      if (!v134)
      {
LABEL_119:
        v90[8] = 0x80;
        v139 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134368);
        v140 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134372) + v139;
        if (!v140)
          goto LABEL_120;
        goto LABEL_99;
      }
LABEL_92:
      v135 = (v134 >> 1) + (v133 << 8);
      v136 = v135 / v134;
      if (v134 > v135)
        v137 = 1;
      else
        v137 = v135 / v134;
      if (v136 > 0xFF)
        v138 = -1;
      else
        v138 = v137;
      v90[8] = v138;
      v139 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134368);
      v140 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134372) + v139;
      if (!v140)
      {
LABEL_120:
        v90[9] = 0x80;
        v145 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134376);
        v146 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134380) + v145;
        if (v146)
          goto LABEL_106;
        goto LABEL_121;
      }
LABEL_99:
      v141 = (v140 >> 1) + (v139 << 8);
      v142 = v141 / v140;
      if (v140 > v141)
        v143 = 1;
      else
        v143 = v141 / v140;
      if (v142 > 0xFF)
        v144 = -1;
      else
        v144 = v143;
      v90[9] = v144;
      v145 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134376);
      v146 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134380) + v145;
      if (v146)
      {
LABEL_106:
        v147 = (v146 >> 1) + (v145 << 8);
        v148 = v147 / v146;
        if (v146 > v147)
          v149 = 1;
        else
          v149 = v147 / v146;
        if (v148 > 0xFF)
          v150 = -1;
        else
          v150 = v149;
        goto LABEL_122;
      }
LABEL_121:
      v150 = 0x80;
LABEL_122:
      v151 = 0;
      v90[10] = v150;
      v152 = v607;
      do
      {
        v153 = *(v152 - 1);
        v154 = ((vp8_prob_cost[*(unsigned __int8 *)(v24 + v151)] * (unint64_t)v153
               + vp8_prob_cost[~*(_BYTE *)(v24 + v151)] * (unint64_t)*v152) >> 8)
             - (((vp8_prob_cost[*(unsigned __int8 *)(v25 + v151)] * (unint64_t)v153
                + vp8_prob_cost[~*(_BYTE *)(v25 + v151)] * (unint64_t)*v152) >> 8)
              + ((vp8_prob_cost[~v33[v151]] - vp8_prob_cost[v33[v151]]) >> 8))
             - 8;
        v89 += v154 & ~(v154 >> 31);
        ++v151;
        v152 += 2;
      }
      while (v151 != 11);
      v599 = v89;
      v155 = 0;
      v156 = 0;
      *(_OWORD *)(a1 + 2112 * v614 + 264 * v34 + 134384) = 0uLL;
      v157 = a1 + 2112 * v614 + 264 * v34 + 134384;
      *(_QWORD *)(v157 + 80) = 0;
      *(_OWORD *)(v157 + 48) = 0uLL;
      *(_OWORD *)(v157 + 64) = 0uLL;
      *(_OWORD *)(v157 + 16) = 0uLL;
      *(_OWORD *)(v157 + 32) = 0uLL;
      v158 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82620);
      do
      {
        *(_DWORD *)(v157 + 8 * (v156 >> 1) + 4 * (v155 == 0)) += v158;
        v159 = v156;
        if (!v155)
          v159 = v156 + 1;
        v160 = vp8_coef_tree[v159];
        v156 = v160;
        ++v155;
      }
      while (v160 > 0);
      v161 = 0;
      v162 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82624);
      v163 = 2;
      do
      {
        *(_DWORD *)(v157 + 8 * (v161 >> 1) + 4 * ((6u >> v163) & 1)) += v162;
        v164 = vp8_coef_tree[((6u >> v163) & 1) + (unint64_t)v161];
        v161 = vp8_coef_tree[((6u >> v163--) & 1) + (unint64_t)v161];
      }
      while (v164 > 0);
      v165 = 0;
      v166 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82628);
      v167 = 4;
      do
      {
        *(_DWORD *)(v157 + 8 * (v165 >> 1) + 4 * ((0x1Cu >> v167) & 1)) += v166;
        v168 = vp8_coef_tree[((0x1Cu >> v167) & 1) + (unint64_t)v165];
        v165 = vp8_coef_tree[((0x1Cu >> v167--) & 1) + (unint64_t)v165];
      }
      while (v168 > 0);
      v169 = 0;
      v170 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82632);
      v171 = 5;
      do
      {
        *(_DWORD *)(v157 + 8 * (v169 >> 1) + 4 * ((0x3Au >> v171) & 1)) += v170;
        v172 = vp8_coef_tree[((0x3Au >> v171) & 1) + (unint64_t)v169];
        v169 = vp8_coef_tree[((0x3Au >> v171--) & 1) + (unint64_t)v169];
      }
      while (v172 > 0);
      v173 = 0;
      v174 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82636);
      v175 = 5;
      do
      {
        *(_DWORD *)(v157 + 8 * (v173 >> 1) + 4 * ((0x3Bu >> v175) & 1)) += v174;
        v176 = vp8_coef_tree[((0x3Bu >> v175) & 1) + (unint64_t)v173];
        v173 = vp8_coef_tree[((0x3Bu >> v175--) & 1) + (unint64_t)v173];
      }
      while (v176 > 0);
      v177 = 0;
      v178 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82640);
      v179 = 5;
      do
      {
        *(_DWORD *)(v157 + 8 * (v177 >> 1) + 4 * ((0x3Cu >> v179) & 1)) += v178;
        v180 = vp8_coef_tree[((0x3Cu >> v179) & 1) + (unint64_t)v177];
        v177 = vp8_coef_tree[((0x3Cu >> v179--) & 1) + (unint64_t)v177];
      }
      while (v180 > 0);
      v181 = 0;
      v182 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82644);
      v183 = 5;
      do
      {
        *(_DWORD *)(v157 + 8 * (v181 >> 1) + 4 * ((0x3Du >> v183) & 1)) += v182;
        v184 = vp8_coef_tree[((0x3Du >> v183) & 1) + (unint64_t)v181];
        v181 = vp8_coef_tree[((0x3Du >> v183--) & 1) + (unint64_t)v181];
      }
      while (v184 > 0);
      v185 = 0;
      v186 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82648);
      v187 = 6;
      do
      {
        *(_DWORD *)(v157 + 8 * (v185 >> 1) + 4 * ((0x7Cu >> v187) & 1)) += v186;
        v188 = vp8_coef_tree[((0x7Cu >> v187) & 1) + (unint64_t)v185];
        v185 = vp8_coef_tree[((0x7Cu >> v187--) & 1) + (unint64_t)v185];
      }
      while (v188 > 0);
      v189 = 0;
      v190 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82652);
      v191 = 6;
      do
      {
        *(_DWORD *)(v157 + 8 * (v189 >> 1) + 4 * ((0x7Du >> v191) & 1)) += v190;
        v192 = vp8_coef_tree[((0x7Du >> v191) & 1) + (unint64_t)v189];
        v189 = vp8_coef_tree[((0x7Du >> v191--) & 1) + (unint64_t)v189];
      }
      while (v192 > 0);
      v193 = 0;
      v194 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82656);
      v195 = 6;
      do
      {
        *(_DWORD *)(v157 + 8 * (v193 >> 1) + 4 * ((0x7Eu >> v195) & 1)) += v194;
        v196 = vp8_coef_tree[((0x7Eu >> v195) & 1) + (unint64_t)v193];
        v193 = vp8_coef_tree[((0x7Eu >> v195--) & 1) + (unint64_t)v193];
      }
      while (v196 > 0);
      v197 = 0;
      v198 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82660);
      v199 = 6;
      do
      {
        *(_DWORD *)(v157 + 8 * (v197 >> 1) + 4 * ((0x7Fu >> v199) & 1)) += v198;
        v200 = vp8_coef_tree[((0x7Fu >> v199) & 1) + (unint64_t)v197];
        v197 = vp8_coef_tree[((0x7Fu >> v199--) & 1) + (unint64_t)v197];
      }
      while (v200 > 0);
      v201 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134388);
      v202 = *(_DWORD *)v157 + *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82664);
      *(_DWORD *)v157 = v202;
      v203 = v201 + v202;
      if (v201 + v202)
      {
        v204 = (v203 >> 1) + (v202 << 8);
        v205 = v204 / v203;
        if (v203 > v204)
          v206 = 1;
        else
          v206 = v204 / v203;
        if (v205 > 0xFF)
          v207 = -1;
        else
          v207 = v206;
      }
      else
      {
        v207 = 0x80;
      }
      v208 = v599;
      v209 = (char *)(a1 + 264 * v614 + 33 * v34 + 132195);
      *v209 = v207;
      v210 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134392);
      v211 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134396) + v210;
      if (v211)
      {
        v212 = (v211 >> 1) + (v210 << 8);
        v213 = v212 / v211;
        if (v211 > v212)
          v214 = 1;
        else
          v214 = v212 / v211;
        if (v213 > 0xFF)
          v215 = -1;
        else
          v215 = v214;
        v209[1] = v215;
        v216 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134400);
        v217 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134404) + v216;
        if (!v217)
        {
LABEL_227:
          v209[2] = 0x80;
          v222 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134408);
          v223 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134412) + v222;
          if (!v223)
            goto LABEL_228;
          goto LABEL_171;
        }
      }
      else
      {
        v209[1] = 0x80;
        v216 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134400);
        v217 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134404) + v216;
        if (!v217)
          goto LABEL_227;
      }
      v218 = (v217 >> 1) + (v216 << 8);
      v219 = v218 / v217;
      if (v217 > v218)
        v220 = 1;
      else
        v220 = v218 / v217;
      if (v219 > 0xFF)
        v221 = -1;
      else
        v221 = v220;
      v209[2] = v221;
      v222 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134408);
      v223 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134412) + v222;
      if (!v223)
      {
LABEL_228:
        v209[3] = 0x80;
        v228 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134416);
        v229 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134420) + v228;
        if (!v229)
          goto LABEL_229;
        goto LABEL_178;
      }
LABEL_171:
      v224 = (v223 >> 1) + (v222 << 8);
      v225 = v224 / v223;
      if (v223 > v224)
        v226 = 1;
      else
        v226 = v224 / v223;
      if (v225 > 0xFF)
        v227 = -1;
      else
        v227 = v226;
      v209[3] = v227;
      v228 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134416);
      v229 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134420) + v228;
      if (!v229)
      {
LABEL_229:
        v209[4] = 0x80;
        v234 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134424);
        v235 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134428) + v234;
        if (!v235)
          goto LABEL_230;
        goto LABEL_185;
      }
LABEL_178:
      v230 = (v229 >> 1) + (v228 << 8);
      v231 = v230 / v229;
      if (v229 > v230)
        v232 = 1;
      else
        v232 = v230 / v229;
      if (v231 > 0xFF)
        v233 = -1;
      else
        v233 = v232;
      v209[4] = v233;
      v234 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134424);
      v235 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134428) + v234;
      if (!v235)
      {
LABEL_230:
        v209[5] = 0x80;
        v240 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134432);
        v241 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134436) + v240;
        if (!v241)
          goto LABEL_231;
        goto LABEL_192;
      }
LABEL_185:
      v236 = (v235 >> 1) + (v234 << 8);
      v237 = v236 / v235;
      if (v235 > v236)
        v238 = 1;
      else
        v238 = v236 / v235;
      if (v237 > 0xFF)
        v239 = -1;
      else
        v239 = v238;
      v209[5] = v239;
      v240 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134432);
      v241 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134436) + v240;
      if (!v241)
      {
LABEL_231:
        v209[6] = 0x80;
        v246 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134440);
        v247 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134444) + v246;
        if (!v247)
          goto LABEL_232;
        goto LABEL_199;
      }
LABEL_192:
      v242 = (v241 >> 1) + (v240 << 8);
      v243 = v242 / v241;
      if (v241 > v242)
        v244 = 1;
      else
        v244 = v242 / v241;
      if (v243 > 0xFF)
        v245 = -1;
      else
        v245 = v244;
      v209[6] = v245;
      v246 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134440);
      v247 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134444) + v246;
      if (!v247)
      {
LABEL_232:
        v209[7] = 0x80;
        v252 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134448);
        v253 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134452) + v252;
        if (!v253)
          goto LABEL_233;
        goto LABEL_206;
      }
LABEL_199:
      v248 = (v247 >> 1) + (v246 << 8);
      v249 = v248 / v247;
      if (v247 > v248)
        v250 = 1;
      else
        v250 = v248 / v247;
      if (v249 > 0xFF)
        v251 = -1;
      else
        v251 = v250;
      v209[7] = v251;
      v252 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134448);
      v253 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134452) + v252;
      if (!v253)
      {
LABEL_233:
        v209[8] = 0x80;
        v258 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134456);
        v259 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134460) + v258;
        if (!v259)
          goto LABEL_234;
        goto LABEL_213;
      }
LABEL_206:
      v254 = (v253 >> 1) + (v252 << 8);
      v255 = v254 / v253;
      if (v253 > v254)
        v256 = 1;
      else
        v256 = v254 / v253;
      if (v255 > 0xFF)
        v257 = -1;
      else
        v257 = v256;
      v209[8] = v257;
      v258 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134456);
      v259 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134460) + v258;
      if (!v259)
      {
LABEL_234:
        v209[9] = 0x80;
        v264 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134464);
        v265 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134468) + v264;
        if (v265)
          goto LABEL_220;
        goto LABEL_235;
      }
LABEL_213:
      v260 = (v259 >> 1) + (v258 << 8);
      v261 = v260 / v259;
      if (v259 > v260)
        v262 = 1;
      else
        v262 = v260 / v259;
      if (v261 > 0xFF)
        v263 = -1;
      else
        v263 = v262;
      v209[9] = v263;
      v264 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134464);
      v265 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134468) + v264;
      if (v265)
      {
LABEL_220:
        v266 = (v265 >> 1) + (v264 << 8);
        v267 = v266 / v265;
        if (v265 > v266)
          v268 = 1;
        else
          v268 = v266 / v265;
        if (v267 > 0xFF)
          v269 = -1;
        else
          v269 = v268;
        goto LABEL_236;
      }
LABEL_235:
      v269 = 0x80;
LABEL_236:
      v270 = 0;
      v209[10] = v269;
      v271 = v609;
      do
      {
        v272 = *(v271 - 1);
        v273 = *v271;
        v274 = ((vp8_prob_cost[*(unsigned __int8 *)(v27 + v270)] * (unint64_t)v272
               + vp8_prob_cost[~*(_BYTE *)(v27 + v270)] * (unint64_t)v273) >> 8)
             - (((vp8_prob_cost[*(unsigned __int8 *)(v28 + v270)] * (unint64_t)v272
                + vp8_prob_cost[~*(_BYTE *)(v28 + v270)] * (unint64_t)v273) >> 8)
              + ((vp8_prob_cost[~v33[v270 + 11]] - vp8_prob_cost[v33[v270 + 11]]) >> 8))
             - 8;
        v208 += v274 & ~(v274 >> 31);
        ++v270;
        v271 += 2;
      }
      while (v270 != 11);
      v600 = v208;
      v275 = 0;
      v276 = 0;
      *(_OWORD *)(a1 + 2112 * v614 + 264 * v34 + 134472) = 0uLL;
      v277 = a1 + 2112 * v614 + 264 * v34 + 134472;
      *(_QWORD *)(v277 + 80) = 0;
      *(_OWORD *)(v277 + 48) = 0uLL;
      *(_OWORD *)(v277 + 64) = 0uLL;
      *(_OWORD *)(v277 + 16) = 0uLL;
      *(_OWORD *)(v277 + 32) = 0uLL;
      v278 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82668);
      do
      {
        *(_DWORD *)(v277 + 8 * (v276 >> 1) + 4 * (v275 == 0)) += v278;
        v279 = v276;
        if (!v275)
          v279 = v276 + 1;
        v280 = vp8_coef_tree[v279];
        v276 = v280;
        ++v275;
      }
      while (v280 > 0);
      v281 = 0;
      v282 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82672);
      v283 = 2;
      do
      {
        *(_DWORD *)(v277 + 8 * (v281 >> 1) + 4 * ((6u >> v283) & 1)) += v282;
        v284 = vp8_coef_tree[((6u >> v283) & 1) + (unint64_t)v281];
        v281 = vp8_coef_tree[((6u >> v283--) & 1) + (unint64_t)v281];
      }
      while (v284 > 0);
      v285 = 0;
      v286 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82676);
      v287 = 4;
      do
      {
        *(_DWORD *)(v277 + 8 * (v285 >> 1) + 4 * ((0x1Cu >> v287) & 1)) += v286;
        v288 = vp8_coef_tree[((0x1Cu >> v287) & 1) + (unint64_t)v285];
        v285 = vp8_coef_tree[((0x1Cu >> v287--) & 1) + (unint64_t)v285];
      }
      while (v288 > 0);
      v289 = 0;
      v290 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82680);
      v291 = 5;
      do
      {
        *(_DWORD *)(v277 + 8 * (v289 >> 1) + 4 * ((0x3Au >> v291) & 1)) += v290;
        v292 = vp8_coef_tree[((0x3Au >> v291) & 1) + (unint64_t)v289];
        v289 = vp8_coef_tree[((0x3Au >> v291--) & 1) + (unint64_t)v289];
      }
      while (v292 > 0);
      v293 = 0;
      v294 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82684);
      v295 = 5;
      do
      {
        *(_DWORD *)(v277 + 8 * (v293 >> 1) + 4 * ((0x3Bu >> v295) & 1)) += v294;
        v296 = vp8_coef_tree[((0x3Bu >> v295) & 1) + (unint64_t)v293];
        v293 = vp8_coef_tree[((0x3Bu >> v295--) & 1) + (unint64_t)v293];
      }
      while (v296 > 0);
      v297 = 0;
      v298 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82688);
      v299 = 5;
      do
      {
        *(_DWORD *)(v277 + 8 * (v297 >> 1) + 4 * ((0x3Cu >> v299) & 1)) += v298;
        v300 = vp8_coef_tree[((0x3Cu >> v299) & 1) + (unint64_t)v297];
        v297 = vp8_coef_tree[((0x3Cu >> v299--) & 1) + (unint64_t)v297];
      }
      while (v300 > 0);
      v301 = 0;
      v302 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82692);
      v303 = 5;
      do
      {
        *(_DWORD *)(v277 + 8 * (v301 >> 1) + 4 * ((0x3Du >> v303) & 1)) += v302;
        v304 = vp8_coef_tree[((0x3Du >> v303) & 1) + (unint64_t)v301];
        v301 = vp8_coef_tree[((0x3Du >> v303--) & 1) + (unint64_t)v301];
      }
      while (v304 > 0);
      v305 = 0;
      v306 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82696);
      v307 = 6;
      do
      {
        *(_DWORD *)(v277 + 8 * (v305 >> 1) + 4 * ((0x7Cu >> v307) & 1)) += v306;
        v308 = vp8_coef_tree[((0x7Cu >> v307) & 1) + (unint64_t)v305];
        v305 = vp8_coef_tree[((0x7Cu >> v307--) & 1) + (unint64_t)v305];
      }
      while (v308 > 0);
      v309 = 0;
      v310 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82700);
      v311 = 6;
      do
      {
        *(_DWORD *)(v277 + 8 * (v309 >> 1) + 4 * ((0x7Du >> v311) & 1)) += v310;
        v312 = vp8_coef_tree[((0x7Du >> v311) & 1) + (unint64_t)v309];
        v309 = vp8_coef_tree[((0x7Du >> v311--) & 1) + (unint64_t)v309];
      }
      while (v312 > 0);
      v313 = 0;
      v314 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82704);
      v315 = 6;
      do
      {
        *(_DWORD *)(v277 + 8 * (v313 >> 1) + 4 * ((0x7Eu >> v315) & 1)) += v314;
        v316 = vp8_coef_tree[((0x7Eu >> v315) & 1) + (unint64_t)v313];
        v313 = vp8_coef_tree[((0x7Eu >> v315--) & 1) + (unint64_t)v313];
      }
      while (v316 > 0);
      v317 = 0;
      v318 = *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82708);
      v319 = 6;
      do
      {
        *(_DWORD *)(v277 + 8 * (v317 >> 1) + 4 * ((0x7Fu >> v319) & 1)) += v318;
        v320 = vp8_coef_tree[((0x7Fu >> v319) & 1) + (unint64_t)v317];
        v317 = vp8_coef_tree[((0x7Fu >> v319--) & 1) + (unint64_t)v317];
      }
      while (v320 > 0);
      v321 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134476);
      v322 = *(_DWORD *)v277 + *(_DWORD *)(a1 + 1152 * v614 + 144 * v34 + 82712);
      *(_DWORD *)v277 = v322;
      v323 = v321 + v322;
      if (v321 + v322)
      {
        v324 = (v323 >> 1) + (v322 << 8);
        v325 = v324 / v323;
        if (v323 > v324)
          v326 = 1;
        else
          v326 = v324 / v323;
        if (v325 > 0xFF)
          v327 = -1;
        else
          v327 = v326;
      }
      else
      {
        v327 = 0x80;
      }
      v328 = v600;
      v329 = (char *)(a1 + 264 * v614 + 33 * v34 + 132206);
      *v329 = v327;
      v330 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134480);
      v331 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134484) + v330;
      if (v331)
      {
        v332 = (v331 >> 1) + (v330 << 8);
        v333 = v332 / v331;
        if (v331 > v332)
          v334 = 1;
        else
          v334 = v332 / v331;
        if (v333 > 0xFF)
          v335 = -1;
        else
          v335 = v334;
        v329[1] = v335;
        v336 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134488);
        v337 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134492) + v336;
        if (!v337)
        {
LABEL_341:
          v329[2] = 0x80;
          v342 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134496);
          v343 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134500) + v342;
          if (!v343)
            goto LABEL_342;
          goto LABEL_285;
        }
      }
      else
      {
        v329[1] = 0x80;
        v336 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134488);
        v337 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134492) + v336;
        if (!v337)
          goto LABEL_341;
      }
      v338 = (v337 >> 1) + (v336 << 8);
      v339 = v338 / v337;
      if (v337 > v338)
        v340 = 1;
      else
        v340 = v338 / v337;
      if (v339 > 0xFF)
        v341 = -1;
      else
        v341 = v340;
      v329[2] = v341;
      v342 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134496);
      v343 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134500) + v342;
      if (!v343)
      {
LABEL_342:
        v329[3] = 0x80;
        v348 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134504);
        v349 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134508) + v348;
        if (!v349)
          goto LABEL_343;
        goto LABEL_292;
      }
LABEL_285:
      v344 = (v343 >> 1) + (v342 << 8);
      v345 = v344 / v343;
      if (v343 > v344)
        v346 = 1;
      else
        v346 = v344 / v343;
      if (v345 > 0xFF)
        v347 = -1;
      else
        v347 = v346;
      v329[3] = v347;
      v348 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134504);
      v349 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134508) + v348;
      if (!v349)
      {
LABEL_343:
        v329[4] = 0x80;
        v354 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134512);
        v355 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134516) + v354;
        if (!v355)
          goto LABEL_344;
        goto LABEL_299;
      }
LABEL_292:
      v350 = (v349 >> 1) + (v348 << 8);
      v351 = v350 / v349;
      if (v349 > v350)
        v352 = 1;
      else
        v352 = v350 / v349;
      if (v351 > 0xFF)
        v353 = -1;
      else
        v353 = v352;
      v329[4] = v353;
      v354 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134512);
      v355 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134516) + v354;
      if (!v355)
      {
LABEL_344:
        v329[5] = 0x80;
        v360 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134520);
        v361 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134524) + v360;
        if (!v361)
          goto LABEL_345;
        goto LABEL_306;
      }
LABEL_299:
      v356 = (v355 >> 1) + (v354 << 8);
      v357 = v356 / v355;
      if (v355 > v356)
        v358 = 1;
      else
        v358 = v356 / v355;
      if (v357 > 0xFF)
        v359 = -1;
      else
        v359 = v358;
      v329[5] = v359;
      v360 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134520);
      v361 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134524) + v360;
      if (!v361)
      {
LABEL_345:
        v329[6] = 0x80;
        v366 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134528);
        v367 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134532) + v366;
        if (!v367)
          goto LABEL_346;
        goto LABEL_313;
      }
LABEL_306:
      v362 = (v361 >> 1) + (v360 << 8);
      v363 = v362 / v361;
      if (v361 > v362)
        v364 = 1;
      else
        v364 = v362 / v361;
      if (v363 > 0xFF)
        v365 = -1;
      else
        v365 = v364;
      v329[6] = v365;
      v366 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134528);
      v367 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134532) + v366;
      if (!v367)
      {
LABEL_346:
        v329[7] = 0x80;
        v372 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134536);
        v373 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134540) + v372;
        if (!v373)
          goto LABEL_347;
        goto LABEL_320;
      }
LABEL_313:
      v368 = (v367 >> 1) + (v366 << 8);
      v369 = v368 / v367;
      if (v367 > v368)
        v370 = 1;
      else
        v370 = v368 / v367;
      if (v369 > 0xFF)
        v371 = -1;
      else
        v371 = v370;
      v329[7] = v371;
      v372 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134536);
      v373 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134540) + v372;
      if (!v373)
      {
LABEL_347:
        v329[8] = 0x80;
        v378 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134544);
        v379 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134548) + v378;
        if (!v379)
          goto LABEL_348;
        goto LABEL_327;
      }
LABEL_320:
      v374 = (v373 >> 1) + (v372 << 8);
      v375 = v374 / v373;
      if (v373 > v374)
        v376 = 1;
      else
        v376 = v374 / v373;
      if (v375 > 0xFF)
        v377 = -1;
      else
        v377 = v376;
      v329[8] = v377;
      v378 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134544);
      v379 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134548) + v378;
      if (!v379)
      {
LABEL_348:
        v329[9] = 0x80;
        v384 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134552);
        v385 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134556) + v384;
        if (!v385)
          goto LABEL_349;
        goto LABEL_334;
      }
LABEL_327:
      v380 = (v379 >> 1) + (v378 << 8);
      v381 = v380 / v379;
      if (v379 > v380)
        v382 = 1;
      else
        v382 = v380 / v379;
      if (v381 > 0xFF)
        v383 = -1;
      else
        v383 = v382;
      v329[9] = v383;
      v384 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134552);
      v385 = *(_DWORD *)(a1 + 2112 * v614 + 264 * v34 + 134556) + v384;
      if (!v385)
      {
LABEL_349:
        v389 = 0x80;
        goto LABEL_350;
      }
LABEL_334:
      v386 = (v385 >> 1) + (v384 << 8);
      v387 = v386 / v385;
      if (v385 > v386)
        v388 = 1;
      else
        v388 = v386 / v385;
      if (v387 > 0xFF)
        v389 = -1;
      else
        v389 = v388;
LABEL_350:
      v390 = 0;
      v329[10] = v389;
      v391 = v612;
      do
      {
        v392 = *(v391 - 1);
        v393 = *v391;
        v394 = ((vp8_prob_cost[*(unsigned __int8 *)(v30 + v390)] * (unint64_t)v392
               + vp8_prob_cost[~*(_BYTE *)(v30 + v390)] * (unint64_t)v393) >> 8)
             - (((vp8_prob_cost[*(unsigned __int8 *)(v31 + v390)] * (unint64_t)v392
                + vp8_prob_cost[~*(_BYTE *)(v31 + v390)] * (unint64_t)v393) >> 8)
              + ((vp8_prob_cost[~v33[v390 + 22]] - vp8_prob_cost[v33[v390 + 22]]) >> 8))
             - 8;
        v328 += v394 & ~(v394 >> 31);
        ++v390;
        v391 += 2;
      }
      while (v390 != 11);
      v598 = v328;
      ++v34;
      v33 += 33;
      v24 += 33;
      v25 += 33;
      v607 += 66;
      v27 += 33;
      v28 += 33;
      v609 += 66;
      v30 += 33;
      v31 += 33;
      v612 += 66;
    }
    while (v34 != 8);
    v33 = v584 + 264;
    v24 = v605 + 264;
    v25 = v603 + 264;
    v26 = v601 + 528;
    v27 = v596 + 264;
    v28 = v594 + 264;
    v29 = v592 + 528;
    v30 = v590 + 264;
    v31 = v588 + 264;
    v32 = v586 + 528;
    ++v614;
  }
  while (v614 != 4);
  return (v598 + v582);
}

uint64_t vp8_encode_BOOL(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v3 = result;
  v4 = *(_DWORD *)(result + 4);
  v5 = *(_DWORD *)(result + 8);
  v6 = ((v4 - 1) * a3) >> 8;
  v7 = v4 - (v6 + 1);
  if (a2)
    v8 = v7;
  else
    v8 = v6 + 1;
  if (a2)
    v9 = v6 + 1;
  else
    v9 = 0;
  v10 = v9 + *(_DWORD *)result;
  v11 = vp8_norm[v8];
  v12 = v5 + v11;
  if (v5 + v11 < 0)
  {
    v15 = v5 + v11;
    LOBYTE(v12) = vp8_norm[v8];
    goto LABEL_13;
  }
  if ((((_DWORD)v10 << ~(_BYTE)v5) & 0x80000000) != 0)
  {
    LODWORD(v16) = *(_DWORD *)(result + 12);
    v17 = v16 - 1;
    if ((int)v16 - 1 >= 0)
    {
      while (1)
      {
        v16 = (v16 - 1);
        v18 = *(_QWORD *)(result + 16);
        if (*(unsigned __int8 *)(v18 + v16) != 255)
          break;
        *(_BYTE *)(v18 + v16) = 0;
        if ((int)v16 <= 0)
        {
          v17 = -1;
          goto LABEL_19;
        }
      }
      v17 = v16;
    }
LABEL_19:
    ++*(_BYTE *)(*(_QWORD *)(result + 16) + v17);
    v13 = *(unsigned int *)(result + 12);
    v14 = *(_QWORD *)(result + 16);
    if ((unint64_t)(v14 + v13 + 1) < *(_QWORD *)(result + 24))
      goto LABEL_11;
    goto LABEL_10;
  }
  v13 = *(unsigned int *)(result + 12);
  v14 = *(_QWORD *)(result + 16);
  if ((unint64_t)(v14 + v13 + 1) >= *(_QWORD *)(result + 24))
  {
LABEL_10:
    result = vpx_internal_error(*(_QWORD *)(result + 32), 7, "Truncated packet or corrupt partition ");
    v14 = *(_QWORD *)(v3 + 16);
    v13 = *(unsigned int *)(v3 + 12);
  }
LABEL_11:
  *(_DWORD *)(v3 + 12) = v13 + 1;
  *(_BYTE *)(v14 + v13) = v10 >> (v5 + 24);
  v10 = (v10 << -(char)v5) & 0xFFFFFF;
  v15 = v12 - 8;
LABEL_13:
  *(_DWORD *)(v3 + 4) = v8 << v11;
  *(_DWORD *)(v3 + 8) = v15;
  *(_DWORD *)v3 = (_DWORD)v10 << v12;
  return result;
}

uint64_t vp8_pack_bitstream(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  unsigned int *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned __int8 *v73;
  _BOOL4 v74;
  unsigned int v75;
  unsigned __int8 *v76;
  _BOOL4 v77;
  unsigned int v78;
  unsigned __int8 *v79;
  _BOOL4 v80;
  unsigned int v81;
  unsigned __int8 *v82;
  _BOOL4 v83;
  unsigned int v84;
  unsigned __int8 *v85;
  _BOOL4 v86;
  unsigned int v87;
  unsigned __int8 *v88;
  _BOOL4 v89;
  unsigned int v90;
  unsigned __int8 *v91;
  _BOOL4 v92;
  unsigned int v93;
  _BOOL4 v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  _DWORD *v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  _DWORD *v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned __int8 *v124;
  unsigned int *v125;
  uint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD *v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int *v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  _BOOL4 v152;
  int v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  unsigned __int8 *v167;
  uint64_t v168;
  int v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned __int8 *v175;
  _BYTE *v176;
  int v177;
  int v178;
  unsigned int v179;
  unsigned int *v180;
  int v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  uint64_t v190;
  int v191;
  unsigned int *v192;
  unsigned __int8 *v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  _BOOL4 v207;
  unsigned __int8 *v208;
  BOOL v209;
  _BOOL4 v210;
  unsigned __int8 *v211;
  _BOOL4 v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  BOOL v226;
  int v227;
  unsigned int v228;
  uint64_t v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  int v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  int v273;
  int v274;
  uint64_t v275;
  int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  char v287;
  unsigned int v288;
  int v289;
  unsigned int *v290;
  unsigned int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  int v296;
  unsigned int v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  unsigned __int8 *v306;
  char v307;
  uint64_t v308;
  unsigned int *v309;
  unsigned int v310;
  unsigned int v311;
  int v312;
  unsigned int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  char v324;
  unsigned int *v325;
  unsigned int v326;
  unsigned int v327;
  int v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  unsigned int v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  int v340;
  unsigned int v341;
  int v342;
  unsigned int v343;
  int v344;
  unsigned int v345;
  uint64_t v346;
  int v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  int v352;
  char v353;
  unsigned int *v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  int v360;
  unsigned int v361;
  unsigned int v362;
  int v363;
  unsigned int v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  __int16 v372;
  char v373;
  unsigned int *v374;
  unsigned int v375;
  unsigned int v376;
  int v377;
  unsigned int v378;
  unsigned int v379;
  int v380;
  unsigned int v381;
  uint64_t v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  unsigned __int8 *v390;
  int *v391;
  int *v392;
  int *v393;
  int v394;
  uint64_t v395;
  int v396;
  unsigned __int8 *v397;
  int v398;
  unsigned __int8 *v399;
  int v400;
  unsigned __int8 *v401;
  unsigned __int8 *v402;
  char v403;
  int v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  unsigned int *v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  int v414;
  int v415;
  unsigned int v416;
  unsigned int v417;
  int v418;
  unsigned int v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  uint64_t v426;
  int v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  int v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  int v446;
  int v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  _BOOL4 v452;
  unsigned __int8 *v453;
  int v454;
  unsigned __int8 *v455;
  _BOOL4 v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  uint64_t v463;
  int v464;
  int v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int v468;
  int v469;
  unsigned int v470;
  unsigned int v471;
  int v472;
  unsigned int v473;
  unsigned int v474;
  unsigned int v475;
  unsigned int v476;
  uint64_t v477;
  int v478;
  int v479;
  uint64_t v480;
  uint64_t v481;
  char v482;
  unsigned int *v483;
  unsigned int v484;
  unsigned int v485;
  int v486;
  unsigned int v487;
  unsigned int v488;
  int v489;
  unsigned int v490;
  uint64_t v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  int v496;
  uint64_t v497;
  unint64_t v498;
  unsigned __int8 *v499;
  unsigned int v500;
  unsigned __int8 *v501;
  unsigned __int8 *v502;
  uint64_t v503;
  char v504;
  char *v505;
  unsigned int *v506;
  unsigned int v507;
  unsigned int v508;
  int v509;
  unsigned int v510;
  unsigned int v511;
  int v512;
  unsigned int v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  int v519;
  uint64_t v520;
  char v521;
  unsigned int *v522;
  unsigned int v523;
  unsigned int v524;
  int v525;
  unsigned int v526;
  unsigned int v527;
  int v528;
  unsigned int v529;
  uint64_t v530;
  int v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  int v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  uint64_t v542;
  uint64_t result;
  unsigned int *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t *v548;
  int v549;
  int v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  int *__attribute__((__org_typedef(jmp_buf))) *v560;
  uint64_t v561;
  uint64_t v562;
  int *__attribute__((__org_typedef(jmp_buf))) *v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  unsigned int *v572;
  int *v573;
  unsigned int v574;
  unsigned int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  int v581;
  int v582;
  int *__attribute__((__org_typedef(jmp_buf))) v583;
  int v584;
  _QWORD *v587;
  uint64_t v589;
  int v590;
  uint64_t v591;
  uint64_t v592;
  char *v593;
  unsigned int *v594;
  unsigned int *v595;
  uint64_t v596;
  uint64_t v597;
  unsigned int v598;
  unsigned int *v599;
  int v600;
  uint64_t v601;
  int v602;
  uint64_t v603;
  int v604;
  unsigned __int8 *v605;
  uint64_t v606;
  uint64_t v607;
  int v608;
  unsigned int *v609;
  unsigned __int8 *v610;
  uint64_t v611;
  unsigned __int8 *v612;
  uint64_t v613;
  unsigned int v614;
  unsigned int *v615;
  unsigned __int8 *v616;
  unsigned int *v617;
  unsigned int v618;
  int v619;
  unsigned __int8 *v620;
  uint64_t v621;
  uint64_t v622;
  unsigned __int8 *v623;
  uint64_t v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  unsigned __int8 *v631;
  unsigned __int8 *v632;
  uint64_t v633;
  char v634;
  uint64_t v635;
  int v636;
  unint64_t v637;
  unsigned int *v638;
  uint64_t v639;
  _BYTE v640[4];
  int v641;
  _OWORD v642[3];
  uint64_t v643;

  v643 = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned int *)(a1 + 113904);
  v6 = (_DWORD *)(a1 + 103608);
  v605 = (unsigned __int8 *)(a1 + 81920);
  v7 = a1 + 108032;
  v584 = *(_DWORD *)(a1 + 111060) & 1;
  v581 = *(_DWORD *)(a1 + 113856);
  v582 = *(_DWORD *)(a1 + 111064);
  *(_QWORD *)(a1 + 113936) = a1 + 108032;
  v8 = a2 + 3;
  v638 = (unsigned int *)(a1 + 113904);
  v621 = a1 + 103608;
  if (a2 + 3 >= a3)
  {
    vpx_internal_error(a1 + 108032, 7, "Truncated packet or corrupt partition ");
    v6 = (_DWORD *)v621;
    v5 = v638;
  }
  v633 = a1;
  v583 = (int *)v7;
  if (v584)
  {
    *((_QWORD *)v5 + 2) = v8;
    *((_QWORD *)v5 + 3) = a3;
    *(_OWORD *)v5 = xmmword_208F3A6E0;
    v579 = 3;
    v580 = 3;
  }
  else
  {
    if (a2 + 10 >= a3)
    {
      vpx_internal_error(v7, 7, "Truncated packet or corrupt partition ");
      v6 = (_DWORD *)v621;
      v5 = v638;
    }
    *(_WORD *)(a2 + 3) = 413;
    *(_BYTE *)(a2 + 5) = 42;
    v9 = v6[1564];
    v10 = v6;
    v11 = v6[1562];
    *(_BYTE *)(a2 + 6) = v11;
    *(_BYTE *)(a2 + 7) = (unsigned __int16)(v11 | ((_WORD)v9 << 14)) >> 8;
    v12 = v10[1563];
    v13 = v12 | (v10[1565] << 14);
    *(_BYTE *)(a2 + 8) = v12;
    *(_BYTE *)(a2 + 9) = BYTE1(v13);
    *((_QWORD *)v5 + 2) = a2 + 10;
    *((_QWORD *)v5 + 3) = a3;
    *(_OWORD *)v5 = xmmword_208F3A6E0;
    vp8_encode_BOOL((uint64_t)v638, 0, 128);
    vp8_encode_BOOL((uint64_t)v638, v10[1566], 128);
    v580 = 10;
    v579 = 10;
  }
  v14 = v605;
  vp8_encode_BOOL((uint64_t)v638, *v605, 128);
  v15 = (uint64_t)v638;
  if (*v605)
  {
    vp8_encode_BOOL((uint64_t)v638, v605[1], 128);
    vp8_encode_BOOL((uint64_t)v638, v605[2], 128);
    v15 = (uint64_t)v638;
    if (v605[2])
    {
      vp8_encode_BOOL((uint64_t)v638, v605[3], 128);
      v15 = (uint64_t)v638;
      v16 = 0;
      v17 = v638[1];
      v18 = v638[2];
      v19 = 1;
      v20 = *v638;
      do
      {
        v21 = 0;
        v634 = v19;
        do
        {
          while (1)
          {
            v23 = *(unsigned __int8 *)(v633 + 4 * v16 + v21 + 81927);
            v24 = (((v17 << 7) - 128) >> 8) + 1;
            if (!*(_BYTE *)(v633 + 4 * v16 + v21 + 81927))
            {
              v32 = vp8_norm[v24];
              v22 = v18 + v32;
              if ((int)(v18 + v32) < 0)
              {
                v18 += v32;
                LOBYTE(v22) = vp8_norm[v24];
              }
              else
              {
                if ((((_DWORD)v20 << ~(_BYTE)v18) & 0x80000000) != 0)
                {
                  LODWORD(v57) = *(_DWORD *)(v15 + 12);
                  v58 = v57 - 1;
                  if ((int)v57 - 1 >= 0)
                  {
                    while (1)
                    {
                      v57 = (v57 - 1);
                      v59 = *(_QWORD *)(v15 + 16);
                      if (*(unsigned __int8 *)(v59 + v57) != 255)
                        break;
                      *(_BYTE *)(v59 + v57) = 0;
                      if ((int)v57 <= 0)
                      {
                        v58 = -1;
                        goto LABEL_75;
                      }
                    }
                    v58 = v57;
                  }
LABEL_75:
                  ++*(_BYTE *)(*(_QWORD *)(v15 + 16) + v58);
                  v33 = *(unsigned int *)(v15 + 12);
                  v34 = *(_QWORD *)(v15 + 16);
                  if ((unint64_t)(v34 + v33 + 1) >= *(_QWORD *)(v15 + 24))
                  {
LABEL_25:
                    vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                    v15 = (uint64_t)v638;
                    v34 = *((_QWORD *)v638 + 2);
                    v33 = v638[3];
                  }
                }
                else
                {
                  v33 = *(unsigned int *)(v15 + 12);
                  v34 = *(_QWORD *)(v15 + 16);
                  if ((unint64_t)(v34 + v33 + 1) >= *(_QWORD *)(v15 + 24))
                    goto LABEL_25;
                }
                *(_DWORD *)(v15 + 12) = v33 + 1;
                *(_BYTE *)(v34 + v33) = v20 >> (v18 + 24);
                v20 = (v20 << -(char)v18) & 0xFFFFFF;
                v18 = v22 - 8;
              }
              v17 = (_DWORD)v24 << v32;
              goto LABEL_15;
            }
            v25 = v17 - v24;
            v26 = (v24 + v20);
            v27 = vp8_norm[v25];
            v28 = v18 + v27;
            if ((int)(v18 + v27) >= 0)
            {
              if ((((_DWORD)v26 << ~(_BYTE)v18) & 0x80000000) != 0)
              {
                LODWORD(v51) = *(_DWORD *)(v15 + 12);
                v52 = v51 - 1;
                if ((int)v51 - 1 >= 0)
                {
                  while (1)
                  {
                    v51 = (v51 - 1);
                    v53 = *(_QWORD *)(v15 + 16);
                    if (*(unsigned __int8 *)(v53 + v51) != 255)
                      break;
                    *(_BYTE *)(v53 + v51) = 0;
                    if ((int)v51 <= 0)
                    {
                      v52 = -1;
                      goto LABEL_69;
                    }
                  }
                  v52 = v51;
                }
LABEL_69:
                ++*(_BYTE *)(*(_QWORD *)(v15 + 16) + v52);
                v29 = *(unsigned int *)(v15 + 12);
                v30 = *(_QWORD *)(v15 + 16);
                if ((unint64_t)(v30 + v29 + 1) >= *(_QWORD *)(v15 + 24))
                {
LABEL_20:
                  vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                  v15 = (uint64_t)v638;
                  v30 = *((_QWORD *)v638 + 2);
                  v29 = v638[3];
                }
              }
              else
              {
                v29 = *(unsigned int *)(v15 + 12);
                v30 = *(_QWORD *)(v15 + 16);
                if ((unint64_t)(v30 + v29 + 1) >= *(_QWORD *)(v15 + 24))
                  goto LABEL_20;
              }
              *(_DWORD *)(v15 + 12) = v29 + 1;
              *(_BYTE *)(v30 + v29) = v26 >> (v18 + 24);
              v26 = (v26 << -(char)v18) & 0xFFFFFF;
              v31 = v28 - 8;
              goto LABEL_28;
            }
            v31 = v18 + v27;
            LOBYTE(v28) = vp8_norm[v25];
LABEL_28:
            v35 = v25 << v27;
            *(_DWORD *)(v15 + 4) = v25 << v27;
            *(_DWORD *)(v15 + 8) = v31;
            v20 = ((_DWORD)v26 << v28);
            *(_DWORD *)v15 = v20;
            if ((v23 & 0x80) != 0)
              break;
            v36 = vp8_mb_feature_data_bits[v16];
            if (v36 >= 1)
            {
              v37 = v36 + 1;
              do
              {
                vp8_encode_BOOL_0((uint64_t)v638, (v23 >> (v37 - 2)) & 1);
                v15 = (uint64_t)v638;
                --v37;
              }
              while (v37 > 1);
              v35 = v638[1];
              v31 = v638[2];
              v20 = *v638;
            }
            v38 = (((v35 << 7) - 128) >> 8) + 1;
            v39 = vp8_norm[v38];
            v22 = v31 + v39;
            if ((int)(v31 + v39) >= 0)
            {
              if ((((_DWORD)v20 << ~(_BYTE)v31) & 0x80000000) != 0)
              {
                LODWORD(v54) = *(_DWORD *)(v15 + 12);
                v55 = v54 - 1;
                if ((int)v54 - 1 >= 0)
                {
                  while (1)
                  {
                    v54 = (v54 - 1);
                    v56 = *(_QWORD *)(v15 + 16);
                    if (*(unsigned __int8 *)(v56 + v54) != 255)
                      break;
                    *(_BYTE *)(v56 + v54) = 0;
                    if ((int)v54 <= 0)
                    {
                      v55 = -1;
                      goto LABEL_72;
                    }
                  }
                  v55 = v54;
                }
LABEL_72:
                ++*(_BYTE *)(*(_QWORD *)(v15 + 16) + v55);
                v40 = *(unsigned int *)(v15 + 12);
                v41 = *(_QWORD *)(v15 + 16);
                if ((unint64_t)(v41 + v40 + 1) >= *(_QWORD *)(v15 + 24))
                {
LABEL_36:
                  vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                  v15 = (uint64_t)v638;
                  v41 = *((_QWORD *)v638 + 2);
                  v40 = v638[3];
                }
              }
              else
              {
                v40 = *(unsigned int *)(v15 + 12);
                v41 = *(_QWORD *)(v15 + 16);
                if ((unint64_t)(v41 + v40 + 1) >= *(_QWORD *)(v15 + 24))
                  goto LABEL_36;
              }
              *(_DWORD *)(v15 + 12) = v40 + 1;
              *(_BYTE *)(v41 + v40) = v20 >> (v31 + 24);
              v20 = (v20 << -(char)v31) & 0xFFFFFF;
              v18 = v22 - 8;
              goto LABEL_14;
            }
            v18 = v31 + v39;
            LOBYTE(v22) = vp8_norm[v38];
LABEL_14:
            v17 = (_DWORD)v38 << v39;
LABEL_15:
            v20 = ((_DWORD)v20 << v22);
            *(_DWORD *)(v15 + 4) = v17;
            *(_DWORD *)(v15 + 8) = v18;
            *(_DWORD *)v15 = v20;
            ++v21;
            v14 = v605;
            if (v21 == 4)
              goto LABEL_11;
          }
          v42 = vp8_mb_feature_data_bits[v16];
          if (v42 >= 1)
          {
            v43 = v42 + 1;
            do
            {
              vp8_encode_BOOL_0((uint64_t)v638, ((char)-(char)v23 >> (v43 - 2)) & 1);
              v15 = (uint64_t)v638;
              --v43;
            }
            while (v43 > 1);
            v35 = v638[1];
            v31 = v638[2];
            LODWORD(v20) = *v638;
          }
          v44 = (((v35 << 7) - 128) >> 8) + 1;
          v45 = v35 - v44;
          v46 = v44 + v20;
          v47 = vp8_norm[v35 - v44];
          v48 = v31 + v47;
          if ((int)(v31 + v47) >= 0)
          {
            if ((((_DWORD)v46 << ~(_BYTE)v31) & 0x80000000) != 0)
            {
              LODWORD(v60) = *(_DWORD *)(v15 + 12);
              v61 = v60 - 1;
              if ((int)v60 - 1 >= 0)
              {
                while (1)
                {
                  v60 = (v60 - 1);
                  v62 = *(_QWORD *)(v15 + 16);
                  if (*(unsigned __int8 *)(v62 + v60) != 255)
                    break;
                  *(_BYTE *)(v62 + v60) = 0;
                  if ((int)v60 <= 0)
                  {
                    v61 = -1;
                    goto LABEL_78;
                  }
                }
                v61 = v60;
              }
LABEL_78:
              ++*(_BYTE *)(*(_QWORD *)(v15 + 16) + v61);
              v49 = *(unsigned int *)(v15 + 12);
              v50 = *(_QWORD *)(v15 + 16);
              if ((unint64_t)(v50 + v49 + 1) >= *(_QWORD *)(v15 + 24))
              {
LABEL_45:
                vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                v15 = (uint64_t)v638;
                v50 = *((_QWORD *)v638 + 2);
                v49 = v638[3];
              }
            }
            else
            {
              v49 = *(unsigned int *)(v15 + 12);
              v50 = *(_QWORD *)(v15 + 16);
              if ((unint64_t)(v50 + v49 + 1) >= *(_QWORD *)(v15 + 24))
                goto LABEL_45;
            }
            *(_DWORD *)(v15 + 12) = v49 + 1;
            *(_BYTE *)(v50 + v49) = v46 >> (v31 + 24);
            v46 = (v46 << -(char)v31) & 0xFFFFFF;
            v18 = v48 - 8;
            goto LABEL_62;
          }
          v18 = v31 + v47;
          LOBYTE(v48) = vp8_norm[v45];
LABEL_62:
          v17 = v45 << v47;
          v20 = ((_DWORD)v46 << v48);
          *(_DWORD *)(v15 + 4) = v45 << v47;
          *(_DWORD *)(v15 + 8) = v18;
          *(_DWORD *)v15 = v20;
          ++v21;
          v14 = v605;
        }
        while (v21 != 4);
LABEL_11:
        v19 = 0;
        v16 = 1;
      }
      while ((v634 & 1) != 0);
    }
    if (v14[1])
    {
      v63 = v14[4];
      if (v63 == 255)
      {
        vp8_encode_BOOL(v15, 0, 128);
        v66 = v14[5];
        if (v66 != 255)
        {
LABEL_83:
          vp8_encode_BOOL((uint64_t)v638, 1, 128);
          vp8_encode_BOOL_0((uint64_t)v638, v66 >> 7);
          vp8_encode_BOOL_0((uint64_t)v638, (v66 >> 6) & 1);
          vp8_encode_BOOL_0((uint64_t)v638, (v66 >> 5) & 1);
          vp8_encode_BOOL_0((uint64_t)v638, (v66 >> 4) & 1);
          vp8_encode_BOOL_0((uint64_t)v638, (v66 >> 3) & 1);
          vp8_encode_BOOL_0((uint64_t)v638, (v66 >> 2) & 1);
          vp8_encode_BOOL_0((uint64_t)v638, (v66 >> 1) & 1);
          vp8_encode_BOOL_0((uint64_t)v638, v66 & 1);
          v67 = v605[6];
          if (v67 != 255)
          {
LABEL_84:
            vp8_encode_BOOL((uint64_t)v638, 1, 128);
            vp8_encode_BOOL_0((uint64_t)v638, v67 >> 7);
            vp8_encode_BOOL_0((uint64_t)v638, (v67 >> 6) & 1);
            vp8_encode_BOOL_0((uint64_t)v638, (v67 >> 5) & 1);
            vp8_encode_BOOL_0((uint64_t)v638, (v67 >> 4) & 1);
            vp8_encode_BOOL_0((uint64_t)v638, (v67 >> 3) & 1);
            vp8_encode_BOOL_0((uint64_t)v638, (v67 >> 2) & 1);
            vp8_encode_BOOL_0((uint64_t)v638, (v67 >> 1) & 1);
            vp8_encode_BOOL_0((uint64_t)v638, v67 & 1);
            v15 = (uint64_t)v638;
            goto LABEL_88;
          }
          goto LABEL_87;
        }
      }
      else
      {
        v64 = v15;
        vp8_encode_BOOL(v15, 1, 128);
        vp8_encode_BOOL_0(v64, v63 >> 7);
        vp8_encode_BOOL_0(v64, (v63 >> 6) & 1);
        vp8_encode_BOOL_0(v64, (v63 >> 5) & 1);
        vp8_encode_BOOL_0(v64, (v63 >> 4) & 1);
        vp8_encode_BOOL_0(v64, (v63 >> 3) & 1);
        vp8_encode_BOOL_0(v64, (v63 >> 2) & 1);
        vp8_encode_BOOL_0(v64, (v63 >> 1) & 1);
        v65 = v64;
        v14 = v605;
        vp8_encode_BOOL_0(v65, v63 & 1);
        v66 = v605[5];
        if (v66 != 255)
          goto LABEL_83;
      }
      vp8_encode_BOOL((uint64_t)v638, 0, 128);
      v67 = v14[6];
      if (v67 != 255)
        goto LABEL_84;
LABEL_87:
      vp8_encode_BOOL((uint64_t)v638, 0, 128);
      v15 = (uint64_t)v638;
    }
  }
LABEL_88:
  v68 = v15;
  vp8_encode_BOOL(v15, *(_DWORD *)(v621 + 7544), 128);
  v69 = *(_DWORD *)(v621 + 7948);
  vp8_encode_BOOL_0(v68, (v69 >> 5) & 1);
  vp8_encode_BOOL_0(v68, (v69 >> 4) & 1);
  vp8_encode_BOOL_0(v68, (v69 >> 3) & 1);
  vp8_encode_BOOL_0(v68, (v69 >> 2) & 1);
  vp8_encode_BOOL_0(v68, (v69 >> 1) & 1);
  vp8_encode_BOOL_0(v68, v69 & 1);
  v70 = *(_DWORD *)(v621 + 7956);
  vp8_encode_BOOL_0(v68, (v70 >> 2) & 1);
  vp8_encode_BOOL_0(v68, (v70 >> 1) & 1);
  vp8_encode_BOOL_0(v68, v70 & 1);
  vp8_encode_BOOL(v68, v605[15], 128);
  if (!v605[15])
    goto LABEL_133;
  if (v605[16])
  {
    v68 = (uint64_t)v638;
    vp8_encode_BOOL((uint64_t)v638, 1, 128);
  }
  else
  {
    v68 = (uint64_t)v638;
    v71 = v638[142];
    vp8_encode_BOOL((uint64_t)v638, v71 != 0, 128);
    if (!v71)
      goto LABEL_133;
  }
  v72 = v605[21];
  if (v72 == v605[17] && !*(_DWORD *)(v68 + 568))
  {
    v74 = 0;
    v73 = v605;
  }
  else
  {
    v73 = v605;
    v605[17] = v72;
    vp8_encode_BOOL((uint64_t)v638, 1, 128);
    v74 = (char)v72 < 1;
    if ((char)v72 < 1)
      v72 = -v72;
    vp8_encode_BOOL_0((uint64_t)v638, (v72 >> 5) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v72 >> 4) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v72 >> 3) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v72 >> 2) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v72 >> 1) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, v72 & 1);
  }
  vp8_encode_BOOL((uint64_t)v638, v74, 128);
  v75 = v73[22];
  if (v75 == v73[18] && !v638[142])
  {
    v77 = 0;
    v76 = v605;
  }
  else
  {
    v76 = v605;
    v605[18] = v75;
    vp8_encode_BOOL((uint64_t)v638, 1, 128);
    v77 = (char)v75 < 1;
    if ((char)v75 < 1)
      v75 = -v75;
    vp8_encode_BOOL_0((uint64_t)v638, (v75 >> 5) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v75 >> 4) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v75 >> 3) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v75 >> 2) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v75 >> 1) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, v75 & 1);
  }
  vp8_encode_BOOL((uint64_t)v638, v77, 128);
  v78 = v76[23];
  if (v78 == v76[19] && !v638[142])
  {
    v80 = 0;
    v79 = v605;
  }
  else
  {
    v79 = v605;
    v605[19] = v78;
    vp8_encode_BOOL((uint64_t)v638, 1, 128);
    v80 = (char)v78 < 1;
    if ((char)v78 < 1)
      v78 = -v78;
    vp8_encode_BOOL_0((uint64_t)v638, (v78 >> 5) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v78 >> 4) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v78 >> 3) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v78 >> 2) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v78 >> 1) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, v78 & 1);
  }
  vp8_encode_BOOL((uint64_t)v638, v80, 128);
  v81 = v79[24];
  if (v81 == v79[20] && !v638[142])
  {
    v83 = 0;
    v82 = v605;
  }
  else
  {
    v82 = v605;
    v605[20] = v81;
    vp8_encode_BOOL((uint64_t)v638, 1, 128);
    v83 = (char)v81 < 1;
    if ((char)v81 < 1)
      v81 = -v81;
    vp8_encode_BOOL_0((uint64_t)v638, (v81 >> 5) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v81 >> 4) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v81 >> 3) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v81 >> 2) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v81 >> 1) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, v81 & 1);
  }
  vp8_encode_BOOL((uint64_t)v638, v83, 128);
  v84 = v82[29];
  if (v84 == v82[25] && !v638[142])
  {
    v86 = 0;
    v85 = v605;
  }
  else
  {
    v85 = v605;
    v605[25] = v84;
    vp8_encode_BOOL((uint64_t)v638, 1, 128);
    v86 = (char)v84 < 1;
    if ((char)v84 < 1)
      v84 = -v84;
    vp8_encode_BOOL_0((uint64_t)v638, (v84 >> 5) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v84 >> 4) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v84 >> 3) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v84 >> 2) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v84 >> 1) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, v84 & 1);
  }
  vp8_encode_BOOL((uint64_t)v638, v86, 128);
  v87 = v85[30];
  if (v87 == v85[26] && !v638[142])
  {
    v89 = 0;
    v88 = v605;
  }
  else
  {
    v88 = v605;
    v605[26] = v87;
    vp8_encode_BOOL((uint64_t)v638, 1, 128);
    v89 = (char)v87 < 1;
    if ((char)v87 < 1)
      v87 = -v87;
    vp8_encode_BOOL_0((uint64_t)v638, (v87 >> 5) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v87 >> 4) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v87 >> 3) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v87 >> 2) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v87 >> 1) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, v87 & 1);
  }
  vp8_encode_BOOL((uint64_t)v638, v89, 128);
  v90 = v88[31];
  if (v90 == v88[27] && !v638[142])
  {
    v92 = 0;
    v91 = v605;
  }
  else
  {
    v91 = v605;
    v605[27] = v90;
    vp8_encode_BOOL((uint64_t)v638, 1, 128);
    v92 = (char)v90 < 1;
    if ((char)v90 < 1)
      v90 = -v90;
    vp8_encode_BOOL_0((uint64_t)v638, (v90 >> 5) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v90 >> 4) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v90 >> 3) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v90 >> 2) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v90 >> 1) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, v90 & 1);
  }
  vp8_encode_BOOL((uint64_t)v638, v92, 128);
  v68 = (uint64_t)v638;
  v93 = v91[32];
  if (v93 == v91[28] && !v638[142])
  {
    v94 = 0;
  }
  else
  {
    v605[28] = v93;
    vp8_encode_BOOL((uint64_t)v638, 1, 128);
    v94 = (char)v93 < 1;
    if ((char)v93 < 1)
      v93 = -v93;
    vp8_encode_BOOL_0((uint64_t)v638, (v93 >> 5) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v93 >> 4) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v93 >> 3) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v93 >> 2) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v93 >> 1) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, v93 & 1);
    v68 = (uint64_t)v638;
  }
  vp8_encode_BOOL(v68, v94, 128);
LABEL_133:
  v95 = *(_DWORD *)(v621 + 10252);
  vp8_encode_BOOL_0(v68, (v95 >> 1) & 1);
  vp8_encode_BOOL_0(v68, v95 & 1);
  v96 = *(_DWORD *)(v621 + 7496);
  vp8_encode_BOOL_0(v68, (v96 >> 6) & 1);
  vp8_encode_BOOL_0(v68, (v96 >> 5) & 1);
  vp8_encode_BOOL_0(v68, (v96 >> 4) & 1);
  vp8_encode_BOOL_0(v68, (v96 >> 3) & 1);
  vp8_encode_BOOL_0(v68, (v96 >> 2) & 1);
  vp8_encode_BOOL_0(v68, (v96 >> 1) & 1);
  vp8_encode_BOOL_0(v68, v96 & 1);
  v97 = *(_DWORD *)(v621 + 7500);
  if (!v97)
  {
    vp8_encode_BOOL(v68, 0, 128);
    v99 = *(_DWORD *)(v621 + 7504);
    if (v99)
      goto LABEL_138;
LABEL_160:
    vp8_encode_BOOL(v68, 0, 128);
    v101 = *(_DWORD *)(v621 + 7508);
    if (v101)
      goto LABEL_142;
LABEL_161:
    vp8_encode_BOOL(v68, 0, 128);
    v103 = *(_DWORD *)(v621 + 7512);
    if (v103)
      goto LABEL_146;
LABEL_162:
    vp8_encode_BOOL(v68, 0, 128);
    v105 = *(_DWORD *)(v621 + 7516);
    if (v105)
      goto LABEL_150;
LABEL_163:
    vp8_encode_BOOL(v68, 0, 128);
    v107 = (_DWORD *)v621;
    if (*(_DWORD *)(v621 + 7452))
      goto LABEL_154;
    goto LABEL_164;
  }
  vp8_encode_BOOL(v68, 1, 128);
  if (v97 >= 0)
    v98 = v97;
  else
    v98 = -v97;
  vp8_encode_BOOL_0(v68, (v98 >> 3) & 1);
  vp8_encode_BOOL_0(v68, (v98 >> 2) & 1);
  vp8_encode_BOOL_0(v68, (v98 >> 1) & 1);
  vp8_encode_BOOL_0(v68, v98 & 1);
  vp8_encode_BOOL(v68, v97 >> 31, 128);
  v99 = *(_DWORD *)(v621 + 7504);
  if (!v99)
    goto LABEL_160;
LABEL_138:
  vp8_encode_BOOL(v68, 1, 128);
  if (v99 >= 0)
    v100 = v99;
  else
    v100 = -v99;
  vp8_encode_BOOL_0(v68, (v100 >> 3) & 1);
  vp8_encode_BOOL_0(v68, (v100 >> 2) & 1);
  vp8_encode_BOOL_0(v68, (v100 >> 1) & 1);
  vp8_encode_BOOL_0(v68, v100 & 1);
  vp8_encode_BOOL(v68, v99 >> 31, 128);
  v101 = *(_DWORD *)(v621 + 7508);
  if (!v101)
    goto LABEL_161;
LABEL_142:
  vp8_encode_BOOL(v68, 1, 128);
  if (v101 >= 0)
    v102 = v101;
  else
    v102 = -v101;
  vp8_encode_BOOL_0(v68, (v102 >> 3) & 1);
  vp8_encode_BOOL_0(v68, (v102 >> 2) & 1);
  vp8_encode_BOOL_0(v68, (v102 >> 1) & 1);
  vp8_encode_BOOL_0(v68, v102 & 1);
  vp8_encode_BOOL(v68, v101 >> 31, 128);
  v103 = *(_DWORD *)(v621 + 7512);
  if (!v103)
    goto LABEL_162;
LABEL_146:
  vp8_encode_BOOL(v68, 1, 128);
  if (v103 >= 0)
    v104 = v103;
  else
    v104 = -v103;
  vp8_encode_BOOL_0(v68, (v104 >> 3) & 1);
  vp8_encode_BOOL_0(v68, (v104 >> 2) & 1);
  vp8_encode_BOOL_0(v68, (v104 >> 1) & 1);
  vp8_encode_BOOL_0(v68, v104 & 1);
  vp8_encode_BOOL(v68, v103 >> 31, 128);
  v105 = *(_DWORD *)(v621 + 7516);
  if (!v105)
    goto LABEL_163;
LABEL_150:
  vp8_encode_BOOL(v68, 1, 128);
  if (v105 >= 0)
    v106 = v105;
  else
    v106 = -v105;
  vp8_encode_BOOL_0(v68, (v106 >> 3) & 1);
  vp8_encode_BOOL_0(v68, (v106 >> 2) & 1);
  vp8_encode_BOOL_0(v68, (v106 >> 1) & 1);
  vp8_encode_BOOL_0(v68, v106 & 1);
  vp8_encode_BOOL(v68, v105 >> 31, 128);
  v107 = (_DWORD *)v621;
  if (*(_DWORD *)(v621 + 7452))
  {
LABEL_154:
    vp8_encode_BOOL(v68, v107[1991], 128);
    vp8_encode_BOOL(v68, *(_DWORD *)(v621 + 7968), 128);
    v108 = v621;
    if (*(_DWORD *)(v621 + 7964))
    {
      if (*(_DWORD *)(v621 + 7968))
        goto LABEL_156;
    }
    else
    {
      v110 = *(_DWORD *)(v621 + 7972);
      vp8_encode_BOOL_0((uint64_t)v638, (v110 >> 1) & 1);
      vp8_encode_BOOL_0((uint64_t)v638, v110 & 1);
      v108 = v621;
      if (*(_DWORD *)(v621 + 7968))
        goto LABEL_156;
    }
    v111 = *(_DWORD *)(v108 + 7976);
    vp8_encode_BOOL_0((uint64_t)v638, (v111 >> 1) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, v111 & 1);
    v108 = v621;
LABEL_156:
    v68 = (uint64_t)v638;
    vp8_encode_BOOL((uint64_t)v638, *(_DWORD *)(v108 + 7992), 128);
    vp8_encode_BOOL((uint64_t)v638, *(_DWORD *)(v621 + 7996), 128);
    v107 = (_DWORD *)v621;
    if ((v638[142] & 2) != 0)
      goto LABEL_157;
LABEL_165:
    v109 = v107[1995];
    goto LABEL_169;
  }
LABEL_164:
  if ((*(_BYTE *)(v68 + 568) & 2) == 0)
    goto LABEL_165;
LABEL_157:
  if (v107[1863])
  {
    v109 = 0;
    v107[1995] = 0;
  }
  else
  {
    v109 = 1;
    v107[1995] = 1;
  }
LABEL_169:
  v112 = v107;
  vp8_encode_BOOL(v68, v109, 128);
  v113 = v112;
  if (v112[1863])
  {
    vp8_encode_BOOL(v68, v112[1990], 128);
    v113 = (_DWORD *)v621;
  }
  v114 = v633;
  v587 = (_QWORD *)(v633 + 143272);
  if (!v113[1995])
    memcpy((void *)(v633 + 111625), (const void *)(v633 + 112738), 0x459uLL);
  v115 = 0;
  v116 = v633 + 112757;
  v117 = v633 + 112768;
  v118 = v633 + 132195;
  v119 = (unsigned int *)(v633 + 134388);
  v120 = v633 + 112779;
  v121 = v633 + 132206;
  v122 = v633 + 132184;
  v123 = (unsigned int *)(v633 + 134476);
  v124 = vp8_coef_update_probs;
  v125 = (unsigned int *)(v633 + 134300);
  v126 = (uint64_t)v638;
  while (2)
  {
    v622 = 0;
    v127 = v123;
    v128 = v121;
    v129 = v120;
    v130 = v119;
    v131 = v118;
    v132 = v117;
    v617 = v125;
    v620 = v124;
    v589 = v122;
    v591 = v116;
    v133 = v122;
    v134 = v116;
    v624 = v115;
    v601 = v118;
    v603 = v117;
    v597 = v120;
    v599 = v119;
    v595 = v123;
    v596 = v121;
    v593 = (char *)v124;
    v594 = v125;
    while (2)
    {
      v629 = v134;
      memset(v642, 0, 44);
      if ((*(_BYTE *)(v126 + 568) & 2) != 0)
      {
        v136 = 0;
        v137 = v617;
        do
        {
          v138 = *(v137 - 1);
          *((_DWORD *)v642 + v136) = ((vp8_prob_cost[*(unsigned __int8 *)(v134 + v136)] * (unint64_t)v138
                                     + vp8_prob_cost[~*(_BYTE *)(v134 + v136)]
                                     * (unint64_t)*v137) >> 8)
                                   + *((_DWORD *)v642 + v136)
                                   - (((vp8_prob_cost[*(unsigned __int8 *)(v133 + v136)] * (unint64_t)v138
                                      + vp8_prob_cost[~*(_BYTE *)(v133 + v136)]
                                      * (unint64_t)*v137) >> 8)
                                    + ((vp8_prob_cost[~v620[v136]] - vp8_prob_cost[v620[v136]]) >> 8))
                                   - 8;
          ++v136;
          v137 += 2;
        }
        while (v136 != 11);
        v139 = 0;
        v140 = v130;
        do
        {
          v141 = *(v140 - 1);
          *((_DWORD *)v642 + v139) = ((vp8_prob_cost[*(unsigned __int8 *)(v132 + v139)] * (unint64_t)v141
                                     + vp8_prob_cost[~*(_BYTE *)(v132 + v139)]
                                     * (unint64_t)*v140) >> 8)
                                   + *((_DWORD *)v642 + v139)
                                   - (((vp8_prob_cost[*(unsigned __int8 *)(v131 + v139)] * (unint64_t)v141
                                      + vp8_prob_cost[~*(_BYTE *)(v131 + v139)]
                                      * (unint64_t)*v140) >> 8)
                                    + ((vp8_prob_cost[~v620[v139 + 11]] - vp8_prob_cost[v620[v139 + 11]]) >> 8))
                                   - 8;
          ++v139;
          v140 += 2;
        }
        while (v139 != 11);
        v142 = 0;
        v143 = v127;
        do
        {
          v144 = *(v143 - 1);
          *((_DWORD *)v642 + v142) = ((vp8_prob_cost[*(unsigned __int8 *)(v129 + v142)] * (unint64_t)v144
                                     + vp8_prob_cost[~*(_BYTE *)(v129 + v142)]
                                     * (unint64_t)*v143) >> 8)
                                   + *((_DWORD *)v642 + v142)
                                   - (((vp8_prob_cost[*(unsigned __int8 *)(v128 + v142)] * (unint64_t)v144
                                      + vp8_prob_cost[~*(_BYTE *)(v128 + v142)]
                                      * (unint64_t)*v143) >> 8)
                                    + ((vp8_prob_cost[~v620[v142 + 22]] - vp8_prob_cost[v620[v142 + 22]]) >> 8))
                                   - 8;
          ++v142;
          v143 += 2;
        }
        while (v142 != 11);
      }
      v606 = v132;
      v607 = v131;
      v609 = v130;
      v611 = v129;
      v613 = v128;
      v615 = v127;
      v145 = 0;
      v626 = v133;
      while (2)
      {
        v146 = 0;
        v147 = 33 * v622;
        v635 = v114 + 264 * v115 + 33 * v622 + 11 * v145 + 112757;
        do
        {
          v148 = *(unsigned __int8 *)(v114 + v147 + 264 * v115 + v146 + 11 * v145 + 132184);
          v149 = vp8_coef_update_probs[264 * v115 + 11 * v145 + v147 + v146];
          if ((*(_BYTE *)(v126 + 568) & 2) != 0)
          {
            v152 = *((_DWORD *)v642 + v146) > 0;
            if (!*(_DWORD *)(v621 + 7452) && (_DWORD)v148 != *(unsigned __int8 *)(v635 + v146))
              v152 = 1;
          }
          else
          {
            v151 = *(_DWORD *)(v114 + 2112 * v115 + 264 * v622 + 88 * v145 + 8 * v146 + 134296);
            v150 = *(_DWORD *)(v114 + 2112 * v115 + 264 * v622 + 88 * v145 + 8 * v146 + 134300);
            v152 = (int)(((vp8_prob_cost[*(unsigned __int8 *)(v635 + v146)] * (unint64_t)v151
                         + vp8_prob_cost[~*(_BYTE *)(v635 + v146)] * (unint64_t)v150) >> 8)
                       - (((vp8_prob_cost[v148] * (unint64_t)v151
                          + vp8_prob_cost[v148 ^ 0xFF] * (unint64_t)v150) >> 8)
                        + ((vp8_prob_cost[~(_BYTE)v149] - vp8_prob_cost[v149]) >> 8))
                       - 8) > 0;
          }
          v153 = *(_DWORD *)(v126 + 4);
          v154 = *(_DWORD *)(v126 + 8);
          v155 = ((v153 - 1) * v149) >> 8;
          v156 = v153 - (v155 + 1);
          if (v152)
            v157 = v156;
          else
            v157 = v155 + 1;
          if (v152)
            v158 = v155 + 1;
          else
            v158 = 0;
          v159 = v158 + *(_DWORD *)v126;
          v160 = vp8_norm[v157];
          v161 = v154 + v160;
          if (v154 + v160 < 0)
          {
            *(_DWORD *)(v126 + 4) = v157 << v160;
            *(_DWORD *)(v126 + 8) = v161;
            *(_DWORD *)v126 = v159 << v160;
            if (!v152)
              goto LABEL_189;
LABEL_188:
            *(_BYTE *)(v635 + v146) = v148;
            vp8_encode_BOOL_0((uint64_t)v638, v148 >> 7);
            vp8_encode_BOOL_0((uint64_t)v638, (v148 >> 6) & 1);
            vp8_encode_BOOL_0((uint64_t)v638, (v148 >> 5) & 1);
            vp8_encode_BOOL_0((uint64_t)v638, (v148 >> 4) & 1);
            vp8_encode_BOOL_0((uint64_t)v638, (v148 >> 3) & 1);
            vp8_encode_BOOL_0((uint64_t)v638, (v148 >> 2) & 1);
            vp8_encode_BOOL_0((uint64_t)v638, (v148 >> 1) & 1);
            vp8_encode_BOOL_0((uint64_t)v638, v148 & 1);
            v133 = v626;
            v134 = v629;
            v115 = v624;
            v126 = (uint64_t)v638;
            goto LABEL_189;
          }
          if (((v159 << ~(_BYTE)v154) & 0x80000000) == 0)
          {
            v162 = *(unsigned int *)(v126 + 12);
            v163 = *(_QWORD *)(v126 + 16);
            if ((unint64_t)(v163 + v162 + 1) < *(_QWORD *)(v126 + 24))
              goto LABEL_205;
LABEL_204:
            vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
            v133 = v626;
            v134 = v629;
            v115 = v624;
            v126 = (uint64_t)v638;
            v163 = *((_QWORD *)v638 + 2);
            v162 = v638[3];
            goto LABEL_205;
          }
          LODWORD(v164) = *(_DWORD *)(v126 + 12);
          v165 = v164 - 1;
          if ((int)v164 - 1 >= 0)
          {
            while (1)
            {
              v164 = (v164 - 1);
              v166 = *(_QWORD *)(v126 + 16);
              if (*(unsigned __int8 *)(v166 + v164) != 255)
                break;
              *(_BYTE *)(v166 + v164) = 0;
              if ((int)v164 <= 0)
              {
                v165 = -1;
                goto LABEL_212;
              }
            }
            v165 = v164;
          }
LABEL_212:
          ++*(_BYTE *)(*(_QWORD *)(v126 + 16) + v165);
          v162 = *(unsigned int *)(v126 + 12);
          v163 = *(_QWORD *)(v126 + 16);
          if ((unint64_t)(v163 + v162 + 1) >= *(_QWORD *)(v126 + 24))
            goto LABEL_204;
LABEL_205:
          *(_DWORD *)(v126 + 12) = v162 + 1;
          *(_BYTE *)(v163 + v162) = v159 >> (v154 + 24);
          *(_DWORD *)(v126 + 4) = v157 << v160;
          *(_DWORD *)(v126 + 8) = v161 - 8;
          *(_DWORD *)v126 = ((v159 << -(char)v154) & 0xFFFFFF) << v161;
          if (v152)
            goto LABEL_188;
LABEL_189:
          ++v146;
          v114 = v633;
        }
        while (v146 != 11);
        if (++v145 != 3)
          continue;
        break;
      }
      v134 += 33;
      v133 += 33;
      v617 += 66;
      v620 += 33;
      v132 = v606 + 33;
      v131 = v607 + 33;
      v130 = v609 + 66;
      v129 = v611 + 33;
      v128 = v613 + 33;
      v127 = v615 + 66;
      ++v622;
      v135 = (_DWORD *)(v633 + 134300);
      if (v622 != 8)
        continue;
      break;
    }
    ++v115;
    v124 = (unsigned __int8 *)(v593 + 264);
    v116 = v591 + 264;
    v122 = v589 + 264;
    v125 = v594 + 528;
    v117 = v603 + 264;
    v118 = v601 + 264;
    v119 = v599 + 528;
    v120 = v597 + 264;
    v121 = v596 + 264;
    v123 = v595 + 528;
    if (v115 != 4)
      continue;
    break;
  }
  vp8_encode_BOOL(v126, *(_DWORD *)(v621 + 7480), 128);
  if (*(_DWORD *)(v621 + 7452))
  {
    v167 = *(unsigned __int8 **)(v621 + 7528);
    v168 = *(int *)(v621 + 7476);
    *((_QWORD *)v605 + 48) = *((_QWORD *)v605 + 49);
    v169 = *(_DWORD *)(v621 + 4);
    v170 = *(_DWORD *)(v621 + 8);
    v171 = *(_DWORD *)(v621 + 12) + v170;
    v172 = v171 + v169;
    if ((255 * *(_DWORD *)v621 / (v171 + v169 + *(_DWORD *)v621)) <= 1)
      v173 = 1;
    else
      v173 = 255 * *(_DWORD *)v621 / (v171 + v169 + *(_DWORD *)v621);
    *(_DWORD *)(v633 + 142812) = v173;
    if (v172)
    {
      v174 = 255 * v169 / v172;
      if (v174 <= 1)
        v174 = 1;
    }
    else
    {
      v174 = 128;
    }
    v182 = (uint64_t)v638;
    v612 = (unsigned __int8 *)(v633 + 113813);
    *(_DWORD *)(v633 + 142816) = v174;
    if (v171)
    {
      v183 = 255 * v170 / v171;
      if (v183 <= 1)
        v183 = 1;
      *(_DWORD *)(v633 + 142820) = v183;
      v184 = v621;
      if (*(_DWORD *)(v621 + 7480))
      {
LABEL_234:
        v185 = *(_DWORD *)(v184 + 7472) * *(_DWORD *)(v184 + 7468);
        v186 = ((v185 - *((_DWORD *)v605 + 162)) << 8) / v185;
        if (v186 <= 1)
          v186 = 1;
        if (v186 >= 0xFF)
          v187 = 255;
        else
          v187 = v186;
        *(_DWORD *)(v633 + 142824) = v187;
        vp8_encode_BOOL_0((uint64_t)v638, v187 >> 7);
        vp8_encode_BOOL_0((uint64_t)v638, (v187 >> 6) & 1);
        vp8_encode_BOOL_0((uint64_t)v638, (v187 >> 5) & 1);
        vp8_encode_BOOL_0((uint64_t)v638, (v187 >> 4) & 1);
        vp8_encode_BOOL_0((uint64_t)v638, (v187 >> 3) & 1);
        vp8_encode_BOOL_0((uint64_t)v638, (v187 >> 2) & 1);
        vp8_encode_BOOL_0((uint64_t)v638, (v187 >> 1) & 1);
        v598 = v187;
        vp8_encode_BOOL_0((uint64_t)v638, v187 & 1);
        v182 = (uint64_t)v638;
        v173 = *(_DWORD *)(v633 + 142812);
LABEL_242:
        vp8_encode_BOOL_0(v182, (v173 >> 7) & 1);
        vp8_encode_BOOL_0(v182, (v173 >> 6) & 1);
        vp8_encode_BOOL_0(v182, (v173 >> 5) & 1);
        vp8_encode_BOOL_0(v182, (v173 >> 4) & 1);
        vp8_encode_BOOL_0(v182, (v173 >> 3) & 1);
        vp8_encode_BOOL_0(v182, (v173 >> 2) & 1);
        vp8_encode_BOOL_0(v182, (v173 >> 1) & 1);
        vp8_encode_BOOL_0(v182, v173 & 1);
        v188 = *(_DWORD *)(v633 + 142816);
        vp8_encode_BOOL_0(v182, (v188 >> 7) & 1);
        vp8_encode_BOOL_0(v182, (v188 >> 6) & 1);
        vp8_encode_BOOL_0(v182, (v188 >> 5) & 1);
        vp8_encode_BOOL_0(v182, (v188 >> 4) & 1);
        vp8_encode_BOOL_0(v182, (v188 >> 3) & 1);
        vp8_encode_BOOL_0(v182, (v188 >> 2) & 1);
        vp8_encode_BOOL_0(v182, (v188 >> 1) & 1);
        vp8_encode_BOOL_0(v182, v188 & 1);
        v189 = *(_DWORD *)(v633 + 142820);
        vp8_encode_BOOL_0(v182, (v189 >> 7) & 1);
        vp8_encode_BOOL_0(v182, (v189 >> 6) & 1);
        vp8_encode_BOOL_0(v182, (v189 >> 5) & 1);
        vp8_encode_BOOL_0(v182, (v189 >> 4) & 1);
        vp8_encode_BOOL_0(v182, (v189 >> 3) & 1);
        vp8_encode_BOOL_0(v182, (v189 >> 2) & 1);
        vp8_encode_BOOL_0(v182, (v189 >> 1) & 1);
        vp8_encode_BOOL_0(v182, v189 & 1);
        v190 = v633;
        update_mode(v182, 5, (uint64_t)&vp8_ymode_encodings, (uint64_t)vp8_ymode_tree, (unsigned __int8 *)&v641, (unsigned __int8 *)(v633 + 112747), (char *)v642, v633 + 103556);
        update_mode(v182, 4, (uint64_t)&vp8_uv_mode_encodings, (uint64_t)vp8_uv_mode_tree, (unsigned __int8 *)&v641, (unsigned __int8 *)(v190 + 112751), (char *)v642, v190 + 103576);
        *(_QWORD *)&v642[0] = 0;
        write_component_probs(v182, v612, (unsigned __int8 *)&vp8_default_mv_context, vp8_mv_update_probs, v633 + 87180, v642);
        v610 = (unsigned __int8 *)(v633 + 113832);
        write_component_probs(v182, (_BYTE *)(v190 + 113832), byte_208F3D58D, &vp8_mv_update_probs[19], v190 + 95368, (_DWORD *)v642 + 1);
        if (*(_QWORD *)&v642[0])
          vp8_build_component_cost_table((_QWORD *)(v633 + 82408), v612, v642);
        v191 = *(_DWORD *)(v621 + 7468);
        v192 = v638;
        v193 = v605;
        if (v191 < 1)
          goto LABEL_683;
        v194 = *(_DWORD *)(v621 + 7472);
        if (v194 < 1)
        {
          *((_QWORD *)v605 + 48) += 132 * (v191 - 1) + 132;
          goto LABEL_683;
        }
        v195 = 0;
        v196 = 0;
        v592 = -v168;
        v602 = -1;
        while (1)
        {
          v197 = v195;
          if (v194 > 0)
            break;
          v201 = *((_QWORD *)v193 + 48);
LABEL_248:
          v167 += 76;
          *((_QWORD *)v193 + 48) = v201 + 132;
          v196 = ~v197;
          v195 = v197 + 1;
          v602 = v197;
          if (v197 + 1 >= v191)
            goto LABEL_683;
        }
        v590 = v195;
        v198 = 0;
        v600 = v196 << 7;
        v199 = -1;
        v200 = v621;
        while (2)
        {
          v202 = v167[2];
          v203 = *v167;
          *((_DWORD *)v193 + 9) = ~v199 << 7;
          *((_DWORD *)v193 + 10) = ((v194 - v199) << 7) - 256;
          v204 = ((*(_DWORD *)(v200 + 7468) - v602) << 7) - 256;
          *((_DWORD *)v193 + 11) = v600;
          *((_DWORD *)v193 + 12) = v204;
          v604 = v198;
          if (v193[1] && *v193)
          {
            v630 = v202;
            v205 = v203;
            v206 = v167[11];
            v207 = v206 != 1;
            v208 = v605 + 5;
            if (v206 == 2)
            {
              v208 = v605 + 6;
              v207 = 1;
            }
            v209 = v206 == 3;
            v210 = v206 != 3 && v206 != 2;
            if (v209)
              v211 = v605 + 6;
            else
              v211 = v208;
            v212 = !v209 && v207;
            v213 = v192[1];
            v214 = v192[2];
            v215 = ((v213 - 1) * v193[4]) >> 8;
            v216 = v213 - (v215 + 1);
            if (v210)
              v217 = v215 + 1;
            else
              v217 = v216;
            if (v210)
              v218 = 0;
            else
              v218 = v215 + 1;
            v219 = v218 + *v192;
            v220 = vp8_norm[v217];
            v221 = v214 + v220;
            if ((int)(v214 + v220) < 0)
            {
              v224 = v214 + v220;
              LOBYTE(v221) = vp8_norm[v217];
            }
            else
            {
              if ((((_DWORD)v219 << ~(_BYTE)v214) & 0x80000000) != 0)
              {
                LODWORD(v428) = v192[3];
                v429 = v428 - 1;
                if ((int)v428 - 1 >= 0)
                {
                  while (1)
                  {
                    v428 = (v428 - 1);
                    v430 = *((_QWORD *)v192 + 2);
                    if (*(unsigned __int8 *)(v430 + v428) != 255)
                      break;
                    *(_BYTE *)(v430 + v428) = 0;
                    if ((int)v428 <= 0)
                    {
                      v429 = -1;
                      goto LABEL_526;
                    }
                  }
                  v429 = v428;
                }
LABEL_526:
                ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v429);
                v222 = v192[3];
                v223 = *((_QWORD *)v192 + 2);
                if ((unint64_t)(v223 + v222 + 1) >= *((_QWORD *)v192 + 3))
                {
LABEL_275:
                  vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                  v192 = v638;
                  v223 = *((_QWORD *)v638 + 2);
                  v222 = v638[3];
                }
              }
              else
              {
                v222 = v192[3];
                v223 = *((_QWORD *)v192 + 2);
                if ((unint64_t)(v223 + v222 + 1) >= *((_QWORD *)v192 + 3))
                  goto LABEL_275;
              }
              v192[3] = v222 + 1;
              *(_BYTE *)(v223 + v222) = v219 >> (v214 + 24);
              v219 = (v219 << -(char)v214) & 0xFFFFFF;
              v224 = v221 - 8;
            }
            v192[1] = v217 << v220;
            v192[2] = v224;
            *v192 = (_DWORD)v219 << v221;
            v225 = (((v217 << v220) - 1) * *v211) >> 8;
            v226 = !v212;
            if (v212)
              v227 = v225 + 1;
            else
              v227 = (v217 << v220) - (v225 + 1);
            if (v226)
              v228 = v225 + 1;
            else
              v228 = 0;
            v229 = v228 + ((_DWORD)v219 << v221);
            v230 = vp8_norm[v227];
            v231 = v224 + v230;
            if ((int)(v224 + v230) < 0)
            {
              v234 = v224 + v230;
              LOBYTE(v231) = vp8_norm[v227];
              v203 = v205;
              v202 = v630;
            }
            else
            {
              v203 = v205;
              v202 = v630;
              if ((((_DWORD)v229 << ~(_BYTE)v224) & 0x80000000) != 0)
              {
                LODWORD(v431) = v192[3];
                v432 = v431 - 1;
                if ((int)v431 - 1 >= 0)
                {
                  while (1)
                  {
                    v431 = (v431 - 1);
                    v433 = *((_QWORD *)v192 + 2);
                    if (*(unsigned __int8 *)(v433 + v431) != 255)
                      break;
                    *(_BYTE *)(v433 + v431) = 0;
                    if ((int)v431 <= 0)
                    {
                      v432 = -1;
                      goto LABEL_529;
                    }
                  }
                  v432 = v431;
                }
LABEL_529:
                ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v432);
                v232 = v192[3];
                v233 = *((_QWORD *)v192 + 2);
                if ((unint64_t)(v233 + v232 + 1) >= *((_QWORD *)v192 + 3))
                {
LABEL_287:
                  vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                  v192 = v638;
                  v233 = *((_QWORD *)v638 + 2);
                  v232 = v638[3];
                }
              }
              else
              {
                v232 = v192[3];
                v233 = *((_QWORD *)v192 + 2);
                if ((unint64_t)(v233 + v232 + 1) >= *((_QWORD *)v192 + 3))
                  goto LABEL_287;
              }
              v192[3] = v232 + 1;
              *(_BYTE *)(v233 + v232) = v229 >> (v224 + 24);
              v229 = (v229 << -(char)v224) & 0xFFFFFF;
              v234 = v231 - 8;
            }
            v192[1] = v227 << v230;
            v192[2] = v234;
            *v192 = (_DWORD)v229 << v231;
            v200 = v621;
          }
          if (*(_DWORD *)(v200 + 7480))
          {
            v235 = v192[1];
            v236 = v192[2];
            v237 = ((v235 - 1) * v598) >> 8;
            v238 = v235 - (v237 + 1);
            if (v167[9])
              v239 = v238;
            else
              v239 = v237 + 1;
            if (v167[9])
              v240 = v237 + 1;
            else
              v240 = 0;
            v241 = v240 + *v192;
            v242 = vp8_norm[v239];
            v243 = v236 + v242;
            if ((int)(v236 + v242) < 0)
            {
              v246 = v236 + v242;
              LOBYTE(v243) = vp8_norm[v239];
            }
            else
            {
              if ((((_DWORD)v241 << ~(_BYTE)v236) & 0x80000000) != 0)
              {
                LODWORD(v281) = v192[3];
                v282 = v281 - 1;
                if ((int)v281 - 1 >= 0)
                {
                  while (1)
                  {
                    v281 = (v281 - 1);
                    v283 = *((_QWORD *)v192 + 2);
                    if (*(unsigned __int8 *)(v283 + v281) != 255)
                      break;
                    *(_BYTE *)(v283 + v281) = 0;
                    if ((int)v281 <= 0)
                    {
                      v282 = -1;
                      goto LABEL_520;
                    }
                  }
                  v282 = v281;
                }
LABEL_520:
                ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v282);
                v244 = v192[3];
                v245 = *((_QWORD *)v192 + 2);
                if ((unint64_t)(v245 + v244 + 1) >= *((_QWORD *)v192 + 3))
                {
LABEL_301:
                  vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                  v192 = v638;
                  v245 = *((_QWORD *)v638 + 2);
                  v244 = v638[3];
                }
              }
              else
              {
                v244 = v192[3];
                v245 = *((_QWORD *)v192 + 2);
                if ((unint64_t)(v245 + v244 + 1) >= *((_QWORD *)v192 + 3))
                  goto LABEL_301;
              }
              v192[3] = v244 + 1;
              *(_BYTE *)(v245 + v244) = v241 >> (v236 + 24);
              v241 = (v241 << -(char)v236) & 0xFFFFFF;
              v246 = v243 - 8;
            }
            v192[1] = v239 << v242;
            v192[2] = v246;
            *v192 = (_DWORD)v241 << v243;
          }
          v627 = v203;
          v631 = v167;
          if (v202)
          {
            v641 = 0;
            v247 = v192[1];
            v248 = v192[2];
            v249 = (((v247 - 1) * v135[2128]) >> 8) + 1;
            v250 = v247 - v249;
            v251 = v249 + *v192;
            v252 = vp8_norm[v247 - v249];
            v253 = v248 + v252;
            if ((int)(v248 + v252) < 0)
            {
              v256 = v248 + v252;
              LOBYTE(v253) = vp8_norm[v250];
            }
            else
            {
              if ((((_DWORD)v251 << ~(_BYTE)v248) & 0x80000000) != 0)
              {
                LODWORD(v284) = v192[3];
                v285 = v284 - 1;
                if ((int)v284 - 1 >= 0)
                {
                  while (1)
                  {
                    v284 = (v284 - 1);
                    v286 = *((_QWORD *)v192 + 2);
                    if (*(unsigned __int8 *)(v286 + v284) != 255)
                      break;
                    *(_BYTE *)(v286 + v284) = 0;
                    if ((int)v284 <= 0)
                    {
                      v285 = -1;
                      goto LABEL_523;
                    }
                  }
                  v285 = v284;
                }
LABEL_523:
                ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v285);
                v254 = v192[3];
                v255 = *((_QWORD *)v192 + 2);
                if ((unint64_t)(v255 + v254 + 1) >= *((_QWORD *)v192 + 3))
                {
LABEL_309:
                  vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                  v192 = v638;
                  v255 = *((_QWORD *)v638 + 2);
                  v254 = v638[3];
                }
              }
              else
              {
                v254 = v192[3];
                v255 = *((_QWORD *)v192 + 2);
                if ((unint64_t)(v255 + v254 + 1) >= *((_QWORD *)v192 + 3))
                  goto LABEL_309;
              }
              v192[3] = v254 + 1;
              *(_BYTE *)(v255 + v254) = v251 >> (v248 + 24);
              v251 = (v251 << -(char)v248) & 0xFFFFFF;
              v256 = v253 - 8;
            }
            v265 = v250 << v252;
            v266 = ((_DWORD)v251 << v253);
            v192[1] = v265;
            v192[2] = v256;
            *v192 = v266;
            v267 = ((v135[2129] * (v265 - 1)) >> 8) + 1;
            if (v202 == 1)
            {
              v268 = vp8_norm[v267];
              v269 = v256 + v268;
              if ((int)(v256 + v268) < 0)
              {
                v272 = v256 + v268;
                LOBYTE(v269) = vp8_norm[v267];
              }
              else
              {
                if ((((_DWORD)v266 << ~(_BYTE)v256) & 0x80000000) != 0)
                {
                  LODWORD(v437) = v192[3];
                  v438 = v437 - 1;
                  if ((int)v437 - 1 >= 0)
                  {
                    while (1)
                    {
                      v437 = (v437 - 1);
                      v439 = *((_QWORD *)v192 + 2);
                      if (*(unsigned __int8 *)(v439 + v437) != 255)
                        break;
                      *(_BYTE *)(v439 + v437) = 0;
                      if ((int)v437 <= 0)
                      {
                        v438 = -1;
                        goto LABEL_535;
                      }
                    }
                    v438 = v437;
                  }
LABEL_535:
                  ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v438);
                  v270 = v192[3];
                  v271 = *((_QWORD *)v192 + 2);
                  if ((unint64_t)(v271 + v270 + 1) >= *((_QWORD *)v192 + 3))
                  {
LABEL_321:
                    vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                    v192 = v638;
                    v271 = *((_QWORD *)v638 + 2);
                    v270 = v638[3];
                  }
                }
                else
                {
                  v270 = v192[3];
                  v271 = *((_QWORD *)v192 + 2);
                  if ((unint64_t)(v271 + v270 + 1) >= *((_QWORD *)v192 + 3))
                    goto LABEL_321;
                }
                v192[3] = v270 + 1;
                *(_BYTE *)(v271 + v270) = v266 >> (v256 + 24);
                v266 = (v266 << -(char)v256) & 0xFFFFFF;
                v272 = v269 - 8;
              }
              v340 = (_DWORD)v267 << v268;
              v341 = (_DWORD)v266 << v269;
LABEL_411:
              v192[1] = v340;
              v192[2] = v272;
              *v192 = v341;
              v639 = 0;
              vp8_find_near_mvs((_DWORD *)(v633 + 77952), (uint64_t)v167, (_DWORD *)&v639 + 1, &v639, &v641, (uint64_t)v642, v202, v633 + 111592);
              v351 = *((_DWORD *)v605 + 9) - 128;
              if (v351 > SHIWORD(v641) || (v351 = *((_DWORD *)v605 + 10) + 128, v351 < SHIWORD(v641)))
                HIWORD(v641) = v351;
              v352 = *((_DWORD *)v605 + 11) - 128;
              if (v352 > (__int16)v641 || (v352 = *((_DWORD *)v605 + 12) + 128, v352 < (__int16)v641))
                LOWORD(v641) = v352;
              v353 = 0;
              v640[0] = vp8_mode_contexts[4 * SLODWORD(v642[0])];
              v640[1] = vp8_mode_contexts[4 * SDWORD1(v642[0]) + 1];
              v640[2] = vp8_mode_contexts[4 * SDWORD2(v642[0]) + 2];
              v640[3] = vp8_mode_contexts[4 * SHIDWORD(v642[0]) + 3];
              v354 = (unsigned int *)((char *)&vp8_mv_ref_encoding_array + 8 * (v203 - 5));
              v356 = *v354;
              v355 = v354[1];
              v192 = v638;
              v357 = v638[1];
              v358 = v638[2];
              v359 = *v638;
LABEL_420:
              --v355;
              v361 = ((v357 - 1) * v640[v353 >> 1]) >> 8;
              v362 = v357 - (v361 + 1);
              v363 = (v356 >> v355) & 1;
              if (v363)
                v364 = v362;
              else
                v364 = v361 + 1;
              v365 = (((int)(v356 >> v355 << 31) >> 31) & (v361 + 1)) + v359;
              v366 = vp8_norm[v364];
              v360 = v358 + v366;
              if ((int)(v358 + v366) < 0)
              {
                v358 += v366;
                LOBYTE(v360) = vp8_norm[v364];
              }
              else
              {
                if ((((_DWORD)v365 << ~(_BYTE)v358) & 0x80000000) != 0)
                {
                  LODWORD(v369) = v192[3];
                  v370 = v369 - 1;
                  if ((int)v369 - 1 >= 0)
                  {
                    while (1)
                    {
                      v369 = (v369 - 1);
                      v371 = *((_QWORD *)v192 + 2);
                      if (*(unsigned __int8 *)(v371 + v369) != 255)
                        break;
                      *(_BYTE *)(v371 + v369) = 0;
                      if ((int)v369 <= 0)
                      {
                        v370 = -1;
                        goto LABEL_433;
                      }
                    }
                    v370 = v369;
                  }
LABEL_433:
                  ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v370);
                  v367 = v192[3];
                  v368 = *((_QWORD *)v192 + 2);
                  if ((unint64_t)(v368 + v367 + 1) >= *((_QWORD *)v192 + 3))
                  {
LABEL_426:
                    vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                    v192 = v638;
                    v368 = *((_QWORD *)v638 + 2);
                    v367 = v638[3];
                  }
                }
                else
                {
                  v367 = v192[3];
                  v368 = *((_QWORD *)v192 + 2);
                  if ((unint64_t)(v368 + v367 + 1) >= *((_QWORD *)v192 + 3))
                    goto LABEL_426;
                }
                v192[3] = v367 + 1;
                *(_BYTE *)(v368 + v367) = v365 >> (v358 + 24);
                v365 = (v365 << -(char)v358) & 0xFFFFFF;
                v358 = v360 - 8;
              }
              v357 = v364 << v366;
              v359 = (_DWORD)v365 << v360;
              v192[1] = v364 << v366;
              v192[2] = v358;
              *v192 = (_DWORD)v365 << v360;
              v353 = vp8_mv_ref_tree[v363 + v353];
              if (!v355)
              {
                if ((_DWORD)v627 != 9)
                {
                  if ((_DWORD)v627 == 8)
                  {
                    v372 = *((_WORD *)v631 + 3) - HIWORD(v641);
                    encode_mvcomponent((uint64_t)v638, (__int16)(*((_WORD *)v631 + 2) - v641) >> 1, v612);
                    encode_mvcomponent((uint64_t)v638, v372 >> 1, v610);
                    v192 = v638;
                  }
LABEL_251:
                  v193 = v605;
LABEL_252:
                  v167 = v631 + 76;
                  v201 = *((_QWORD *)v193 + 48) + 132;
                  *((_QWORD *)v193 + 48) = v201;
                  v199 = v604;
                  v198 = v604 + 1;
                  v200 = v621;
                  v194 = *(_DWORD *)(v621 + 7472);
                  v135 = (_DWORD *)(v633 + 134300);
                  if (v604 + 1 >= v194)
                  {
                    v191 = *(_DWORD *)(v621 + 7468);
                    v197 = v590;
                    goto LABEL_248;
                  }
                  continue;
                }
                v373 = 0;
                v374 = (unsigned int *)((char *)&vp8_mbsplit_encodings + 8 * v631[8]);
                v375 = *v374;
                v376 = v374[1];
                while (2)
                {
                  --v376;
                  v378 = ((v357 - 1) * vp8_mbsplit_probs[v373 >> 1]) >> 8;
                  v379 = v357 - (v378 + 1);
                  v380 = (v375 >> v376) & 1;
                  if (v380)
                    v381 = v379;
                  else
                    v381 = v378 + 1;
                  v382 = (((int)(v375 >> v376 << 31) >> 31) & (v378 + 1)) + v359;
                  v383 = vp8_norm[v381];
                  v377 = v358 + v383;
                  if ((int)(v358 + v383) < 0)
                  {
                    v358 += v383;
                    LOBYTE(v377) = vp8_norm[v381];
                  }
                  else
                  {
                    if ((((_DWORD)v382 << ~(_BYTE)v358) & 0x80000000) != 0)
                    {
                      LODWORD(v386) = v192[3];
                      v387 = v386 - 1;
                      if ((int)v386 - 1 < 0)
                        goto LABEL_454;
                      while (1)
                      {
                        v386 = (v386 - 1);
                        v388 = *((_QWORD *)v192 + 2);
                        if (*(unsigned __int8 *)(v388 + v386) != 255)
                          break;
                        *(_BYTE *)(v388 + v386) = 0;
                        if ((int)v386 <= 0)
                        {
                          v387 = -1;
                          goto LABEL_454;
                        }
                      }
                      v387 = v386;
LABEL_454:
                      ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v387);
                      v384 = v192[3];
                      v385 = *((_QWORD *)v192 + 2);
                      if ((unint64_t)(v385 + v384 + 1) >= *((_QWORD *)v192 + 3))
                      {
LABEL_447:
                        vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                        v192 = v638;
                        v385 = *((_QWORD *)v638 + 2);
                        v384 = v638[3];
                      }
                    }
                    else
                    {
                      v384 = v192[3];
                      v385 = *((_QWORD *)v192 + 2);
                      if ((unint64_t)(v385 + v384 + 1) >= *((_QWORD *)v192 + 3))
                        goto LABEL_447;
                    }
                    v192[3] = v384 + 1;
                    *(_BYTE *)(v385 + v384) = v382 >> (v358 + 24);
                    v382 = (v382 << -(char)v358) & 0xFFFFFF;
                    v358 = v377 - 8;
                  }
                  v357 = v381 << v383;
                  v359 = (_DWORD)v382 << v377;
                  v192[1] = v381 << v383;
                  v192[2] = v358;
                  *v192 = (_DWORD)v382 << v377;
                  v373 = vp8_mbsplit_tree[v380 + v373];
                  if (v376)
                    continue;
                  break;
                }
                v389 = 0;
                v390 = v631;
                v616 = &v631[76 * v592];
                v391 = (int *)*((_QWORD *)v605 + 48);
                while (2)
                {
                  v392 = (int *)((char *)&vp8_mbsplits + 64 * (unint64_t)v390[8]);
                  v393 = &v391[2 * v389];
                  v394 = v393[1];
                  v618 = v393[2];
                  v395 = -1;
                  do
                  {
                    ++v395;
                    v396 = *v392++;
                  }
                  while (v389 != v396);
                  v397 = v390;
                  v398 = v395;
                  if ((v395 & 3) != 0)
                  {
LABEL_463:
                    v399 = &v397[4 * v398 + 8];
                  }
                  else
                  {
                    v399 = v631 - 72;
                    if (*(v631 - 76) == 9)
                    {
                      v398 = v395 + 4;
                      v397 = v631 - 76;
                      goto LABEL_463;
                    }
                  }
                  v400 = *(_DWORD *)v399;
                  v401 = v390;
                  if (v395 > 3)
                  {
LABEL_467:
                    v402 = &v401[(((v395 << 32) - 0x400000000) >> 30) + 12];
                  }
                  else
                  {
                    v402 = v616 + 4;
                    if (*v616 == 9)
                    {
                      v395 += 16;
                      v401 = &v631[76 * v592];
                      goto LABEL_467;
                    }
                  }
                  v628 = v389;
                  v403 = 0;
                  v404 = *(_DWORD *)v402;
                  v405 = v400 == 0;
                  v406 = 3;
                  if ((v405 & (v400 == v404)) != 0)
                    v406 = 4;
                  if (!v404)
                    v405 = 2;
                  if (v400 == v404)
                    v407 = v406;
                  else
                    v407 = v405;
                  v408 = (char *)&vp8_sub_mv_ref_prob2 + 3 * v407;
                  v625 = v394;
                  v409 = (unsigned int *)((char *)&vp8_sub_mv_ref_encoding_array + 8 * (v394 - 10));
                  v410 = *v409;
                  v411 = v409[1];
                  v412 = v192[1];
                  v413 = v192[2];
                  v414 = *v192;
LABEL_478:
                  --v411;
                  v416 = ((v412 - 1) * v408[v403 >> 1]) >> 8;
                  v417 = v412 - (v416 + 1);
                  v418 = (v410 >> v411) & 1;
                  if (v418)
                    v419 = v417;
                  else
                    v419 = v416 + 1;
                  v420 = (((int)(v410 >> v411 << 31) >> 31) & (v416 + 1)) + v414;
                  v421 = vp8_norm[v419];
                  v415 = v413 + v421;
                  if ((int)(v413 + v421) < 0)
                  {
                    v413 += v421;
                    LOBYTE(v415) = vp8_norm[v419];
                  }
                  else
                  {
                    if ((((_DWORD)v420 << ~(_BYTE)v413) & 0x80000000) != 0)
                    {
                      LODWORD(v424) = v192[3];
                      v425 = v424 - 1;
                      if ((int)v424 - 1 >= 0)
                      {
                        while (1)
                        {
                          v424 = (v424 - 1);
                          v426 = *((_QWORD *)v192 + 2);
                          if (*(unsigned __int8 *)(v426 + v424) != 255)
                            break;
                          *(_BYTE *)(v426 + v424) = 0;
                          if ((int)v424 <= 0)
                          {
                            v425 = -1;
                            goto LABEL_491;
                          }
                        }
                        v425 = v424;
                      }
LABEL_491:
                      ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v425);
                      v422 = v192[3];
                      v423 = *((_QWORD *)v192 + 2);
                      if ((unint64_t)(v423 + v422 + 1) >= *((_QWORD *)v192 + 3))
                      {
LABEL_484:
                        vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                        v192 = v638;
                        v423 = *((_QWORD *)v638 + 2);
                        v422 = v638[3];
                      }
                    }
                    else
                    {
                      v422 = v192[3];
                      v423 = *((_QWORD *)v192 + 2);
                      if ((unint64_t)(v423 + v422 + 1) >= *((_QWORD *)v192 + 3))
                        goto LABEL_484;
                    }
                    v192[3] = v422 + 1;
                    *(_BYTE *)(v423 + v422) = v420 >> (v413 + 24);
                    v420 = (v420 << -(char)v413) & 0xFFFFFF;
                    v413 = v415 - 8;
                  }
                  v412 = v419 << v421;
                  v414 = (_DWORD)v420 << v415;
                  v192[1] = v419 << v421;
                  v192[2] = v413;
                  *v192 = (_DWORD)v420 << v415;
                  v403 = vp8_sub_mv_ref_tree[v418 + v403];
                  if (!v411)
                  {
                    if (v625 == 13)
                    {
                      v427 = HIWORD(v618) - HIWORD(v641);
                      encode_mvcomponent((uint64_t)v638, (__int16)(v618 - v641) >> 1, v612);
                      encode_mvcomponent((uint64_t)v638, (__int16)v427 >> 1, v610);
                      v192 = v638;
                    }
                    v390 = v631;
                    v389 = v628 + 1;
                    v391 = (int *)*((_QWORD *)v605 + 48);
                    if (v628 + 1 >= *v391)
                      goto LABEL_251;
                    continue;
                  }
                  goto LABEL_478;
                }
              }
              goto LABEL_420;
            }
            v273 = v202;
            v274 = v265 - v267;
            v275 = (v267 + v266);
            v276 = vp8_norm[v265 - v267];
            v277 = v256 + v276;
            if ((int)(v256 + v276) < 0)
            {
              v280 = v256 + v276;
              LOBYTE(v277) = vp8_norm[v274];
            }
            else
            {
              if ((((_DWORD)v275 << ~(_BYTE)v256) & 0x80000000) != 0)
              {
                LODWORD(v440) = v192[3];
                v441 = v440 - 1;
                if ((int)v440 - 1 >= 0)
                {
                  while (1)
                  {
                    v440 = (v440 - 1);
                    v442 = *((_QWORD *)v192 + 2);
                    if (*(unsigned __int8 *)(v442 + v440) != 255)
                      break;
                    *(_BYTE *)(v442 + v440) = 0;
                    if ((int)v440 <= 0)
                    {
                      v441 = -1;
                      goto LABEL_538;
                    }
                  }
                  v441 = v440;
                }
LABEL_538:
                ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v441);
                v278 = v192[3];
                v279 = *((_QWORD *)v192 + 2);
                if ((unint64_t)(v279 + v278 + 1) >= *((_QWORD *)v192 + 3))
                {
LABEL_326:
                  vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                  v192 = v638;
                  v279 = *((_QWORD *)v638 + 2);
                  v278 = v638[3];
                }
              }
              else
              {
                v278 = v192[3];
                v279 = *((_QWORD *)v192 + 2);
                if ((unint64_t)(v279 + v278 + 1) >= *((_QWORD *)v192 + 3))
                  goto LABEL_326;
              }
              v192[3] = v278 + 1;
              *(_BYTE *)(v279 + v278) = v275 >> (v256 + 24);
              v275 = (v275 << -(char)v256) & 0xFFFFFF;
              v280 = v277 - 8;
            }
            v342 = (_DWORD)v275 << v277;
            v192[1] = v274 << v276;
            v192[2] = v280;
            *v192 = (_DWORD)v275 << v277;
            v343 = (v135[2130] * ((v274 << v276) - 1)) >> 8;
            v202 = v273;
            if (v273 == 2)
              v344 = v343 + 1;
            else
              v344 = (v274 << v276) - (v343 + 1);
            if (v273 == 2)
              v345 = 0;
            else
              v345 = v343 + 1;
            v346 = v345 + v342;
            v347 = vp8_norm[v344];
            v348 = v280 + v347;
            if ((int)(v280 + v347) < 0)
            {
              v272 = v280 + v347;
              LOBYTE(v348) = vp8_norm[v344];
            }
            else
            {
              if ((((_DWORD)v346 << ~(_BYTE)v280) & 0x80000000) != 0)
              {
                LODWORD(v443) = v192[3];
                v444 = v443 - 1;
                if ((int)v443 - 1 >= 0)
                {
                  while (1)
                  {
                    v443 = (v443 - 1);
                    v445 = *((_QWORD *)v192 + 2);
                    if (*(unsigned __int8 *)(v445 + v443) != 255)
                      break;
                    *(_BYTE *)(v445 + v443) = 0;
                    if ((int)v443 <= 0)
                    {
                      v444 = -1;
                      goto LABEL_541;
                    }
                  }
                  v444 = v443;
                }
LABEL_541:
                ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v444);
                v349 = v192[3];
                v350 = *((_QWORD *)v192 + 2);
                if ((unint64_t)(v350 + v349 + 1) >= *((_QWORD *)v192 + 3))
                {
LABEL_407:
                  vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                  v192 = v638;
                  v350 = *((_QWORD *)v638 + 2);
                  v349 = v638[3];
                }
              }
              else
              {
                v349 = v192[3];
                v350 = *((_QWORD *)v192 + 2);
                if ((unint64_t)(v350 + v349 + 1) >= *((_QWORD *)v192 + 3))
                  goto LABEL_407;
              }
              v192[3] = v349 + 1;
              *(_BYTE *)(v350 + v349) = v346 >> (v280 + 24);
              v346 = (v346 << -(char)v280) & 0xFFFFFF;
              v272 = v348 - 8;
            }
            v340 = v344 << v347;
            v341 = (_DWORD)v346 << v348;
            goto LABEL_411;
          }
          break;
        }
        v257 = v192[2];
        v258 = *v192;
        v259 = (((v192[1] - 1) * v135[2128]) >> 8) + 1;
        v260 = vp8_norm[v259];
        v261 = v257 + v260;
        if ((int)(v257 + v260) < 0)
        {
          v264 = v257 + v260;
          LOBYTE(v261) = vp8_norm[v259];
        }
        else
        {
          if ((((_DWORD)v258 << ~(_BYTE)v257) & 0x80000000) != 0)
          {
            LODWORD(v434) = v192[3];
            v435 = v434 - 1;
            if ((int)v434 - 1 < 0)
              goto LABEL_532;
            while (1)
            {
              v434 = (v434 - 1);
              v436 = *((_QWORD *)v192 + 2);
              if (*(unsigned __int8 *)(v436 + v434) != 255)
                break;
              *(_BYTE *)(v436 + v434) = 0;
              if ((int)v434 <= 0)
              {
                v435 = -1;
                goto LABEL_532;
              }
            }
            v435 = v434;
LABEL_532:
            ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v435);
            v262 = v192[3];
            v263 = *((_QWORD *)v192 + 2);
            if ((unint64_t)(v263 + v262 + 1) >= *((_QWORD *)v192 + 3))
            {
LABEL_314:
              vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
              v192 = v638;
              v263 = *((_QWORD *)v638 + 2);
              v262 = v638[3];
            }
          }
          else
          {
            v262 = v192[3];
            v263 = *((_QWORD *)v192 + 2);
            if ((unint64_t)(v263 + v262 + 1) >= *((_QWORD *)v192 + 3))
              goto LABEL_314;
          }
          v192[3] = v262 + 1;
          *(_BYTE *)(v263 + v262) = v258 >> (v257 + 24);
          v258 = (v258 << -(char)v257) & 0xFFFFFF;
          v264 = v261 - 8;
        }
        v287 = 0;
        v288 = (_DWORD)v259 << v260;
        v289 = (_DWORD)v258 << v261;
        v192[1] = (_DWORD)v259 << v260;
        v192[2] = v264;
        *v192 = (_DWORD)v258 << v261;
        v290 = (unsigned int *)((char *)&vp8_ymode_encodings + 8 * v627);
        v291 = *v290;
        v292 = v290[1];
        while (2)
        {
          --v292;
          v294 = ((v288 - 1) * *(unsigned __int8 *)(v633 + 112747 + (v287 >> 1))) >> 8;
          v295 = v288 - (v294 + 1);
          v296 = (v291 >> v292) & 1;
          if (v296)
            v297 = v295;
          else
            v297 = v294 + 1;
          v298 = (((int)(v291 >> v292 << 31) >> 31) & (v294 + 1)) + v289;
          v299 = vp8_norm[v297];
          v293 = v264 + v299;
          if ((int)(v264 + v299) < 0)
          {
            v264 += v299;
            LOBYTE(v293) = vp8_norm[v297];
          }
          else
          {
            if ((((_DWORD)v298 << ~(_BYTE)v264) & 0x80000000) != 0)
            {
              LODWORD(v302) = v192[3];
              v303 = v302 - 1;
              if ((int)v302 - 1 < 0)
                goto LABEL_353;
              while (1)
              {
                v302 = (v302 - 1);
                v304 = *((_QWORD *)v192 + 2);
                if (*(unsigned __int8 *)(v304 + v302) != 255)
                  break;
                *(_BYTE *)(v304 + v302) = 0;
                if ((int)v302 <= 0)
                {
                  v303 = -1;
                  goto LABEL_353;
                }
              }
              v303 = v302;
LABEL_353:
              ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v303);
              v300 = v192[3];
              v301 = *((_QWORD *)v192 + 2);
              if ((unint64_t)(v301 + v300 + 1) >= *((_QWORD *)v192 + 3))
              {
LABEL_346:
                vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                v192 = v638;
                v301 = *((_QWORD *)v638 + 2);
                v300 = v638[3];
              }
            }
            else
            {
              v300 = v192[3];
              v301 = *((_QWORD *)v192 + 2);
              if ((unint64_t)(v301 + v300 + 1) >= *((_QWORD *)v192 + 3))
                goto LABEL_346;
            }
            v192[3] = v300 + 1;
            *(_BYTE *)(v301 + v300) = v298 >> (v264 + 24);
            v298 = (v298 << -(char)v264) & 0xFFFFFF;
            v264 = v293 - 8;
          }
          v288 = v297 << v299;
          v289 = (_DWORD)v298 << v293;
          v192[1] = v297 << v299;
          v192[2] = v264;
          *v192 = (_DWORD)v298 << v293;
          v287 = vp8_ymode_tree[v296 + v287];
          if (v292)
            continue;
          break;
        }
        if ((_DWORD)v627 == 4)
        {
          v305 = 0;
          v306 = v631;
          while (1)
          {
            v307 = 0;
            v308 = v305;
            v309 = (unsigned int *)((char *)&vp8_bmode_encodings + 8 * *(int *)&v306[4 * v305 + 12]);
            v310 = *v309;
            v311 = v309[1];
            do
            {
              --v311;
              v313 = ((v288 - 1) * *(unsigned __int8 *)(v633 + 112738 + (v307 >> 1))) >> 8;
              v314 = v288 - (v313 + 1);
              v315 = (v310 >> v311) & 1;
              if (v315)
                v316 = v314;
              else
                v316 = v313 + 1;
              v317 = (((int)(v310 >> v311 << 31) >> 31) & (v313 + 1)) + v289;
              v318 = vp8_norm[v316];
              v312 = v264 + v318;
              if ((int)(v264 + v318) < 0)
              {
                v264 += v318;
                LOBYTE(v312) = vp8_norm[v316];
                goto LABEL_360;
              }
              if ((((_DWORD)v317 << ~(_BYTE)v264) & 0x80000000) != 0)
              {
                LODWORD(v321) = v192[3];
                v322 = v321 - 1;
                if ((int)v321 - 1 < 0)
                  goto LABEL_374;
                while (1)
                {
                  v321 = (v321 - 1);
                  v323 = *((_QWORD *)v192 + 2);
                  if (*(unsigned __int8 *)(v323 + v321) != 255)
                    break;
                  *(_BYTE *)(v323 + v321) = 0;
                  if ((int)v321 <= 0)
                  {
                    v322 = -1;
                    goto LABEL_374;
                  }
                }
                v322 = v321;
LABEL_374:
                ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v322);
                v319 = v192[3];
                v320 = *((_QWORD *)v192 + 2);
                if ((unint64_t)(v320 + v319 + 1) < *((_QWORD *)v192 + 3))
                  goto LABEL_368;
LABEL_367:
                vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                v192 = v638;
                v320 = *((_QWORD *)v638 + 2);
                v319 = v638[3];
                goto LABEL_368;
              }
              v319 = v192[3];
              v320 = *((_QWORD *)v192 + 2);
              if ((unint64_t)(v320 + v319 + 1) >= *((_QWORD *)v192 + 3))
                goto LABEL_367;
LABEL_368:
              v192[3] = v319 + 1;
              *(_BYTE *)(v320 + v319) = v317 >> (v264 + 24);
              v317 = (v317 << -(char)v264) & 0xFFFFFF;
              v264 = v312 - 8;
LABEL_360:
              v288 = v316 << v318;
              v289 = (_DWORD)v317 << v312;
              v192[1] = v316 << v318;
              v192[2] = v264;
              *v192 = (_DWORD)v317 << v312;
              v307 = vp8_bmode_tree[v315 + v307];
            }
            while (v311);
            v305 = v308 + 1;
            v306 = v631;
            if (v308 == 15)
              goto LABEL_377;
          }
        }
        v306 = v631;
LABEL_377:
        v324 = 0;
        v325 = (unsigned int *)((char *)&vp8_uv_mode_encodings + 8 * v306[1]);
        v326 = *v325;
        v327 = v325[1];
        v193 = v605;
        while (2)
        {
          --v327;
          v329 = ((v288 - 1) * *(unsigned __int8 *)(v633 + 112751 + (v324 >> 1))) >> 8;
          v330 = v288 - (v329 + 1);
          v331 = (v326 >> v327) & 1;
          if (v331)
            v332 = v330;
          else
            v332 = v329 + 1;
          v333 = (((int)(v326 >> v327 << 31) >> 31) & (v329 + 1)) + v289;
          v334 = vp8_norm[v332];
          v328 = v264 + v334;
          if ((int)(v264 + v334) < 0)
          {
            v264 += v334;
            LOBYTE(v328) = vp8_norm[v332];
          }
          else
          {
            if ((((_DWORD)v333 << ~(_BYTE)v264) & 0x80000000) != 0)
            {
              LODWORD(v337) = v192[3];
              v338 = v337 - 1;
              if ((int)v337 - 1 < 0)
                goto LABEL_393;
              while (1)
              {
                v337 = (v337 - 1);
                v339 = *((_QWORD *)v192 + 2);
                if (*(unsigned __int8 *)(v339 + v337) != 255)
                  break;
                *(_BYTE *)(v339 + v337) = 0;
                if ((int)v337 <= 0)
                {
                  v338 = -1;
                  goto LABEL_393;
                }
              }
              v338 = v337;
LABEL_393:
              ++*(_BYTE *)(*((_QWORD *)v192 + 2) + v338);
              v335 = v192[3];
              v336 = *((_QWORD *)v192 + 2);
              if ((unint64_t)(v336 + v335 + 1) >= *((_QWORD *)v192 + 3))
              {
LABEL_386:
                vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
                v192 = v638;
                v336 = *((_QWORD *)v638 + 2);
                v335 = v638[3];
              }
            }
            else
            {
              v335 = v192[3];
              v336 = *((_QWORD *)v192 + 2);
              if ((unint64_t)(v336 + v335 + 1) >= *((_QWORD *)v192 + 3))
                goto LABEL_386;
            }
            v192[3] = v335 + 1;
            *(_BYTE *)(v336 + v335) = v333 >> (v264 + 24);
            v333 = (v333 << -(char)v264) & 0xFFFFFF;
            v264 = v328 - 8;
          }
          v288 = v332 << v334;
          v289 = (_DWORD)v333 << v328;
          v192[1] = v332 << v334;
          v192[2] = v264;
          *v192 = (_DWORD)v333 << v328;
          v324 = vp8_uv_mode_tree[v331 + v324];
          if (!v327)
            goto LABEL_252;
          continue;
        }
      }
    }
    else
    {
      *(_DWORD *)(v633 + 142820) = 128;
      v184 = v621;
      if (*(_DWORD *)(v621 + 7480))
        goto LABEL_234;
    }
    v598 = 0;
    goto LABEL_242;
  }
  v175 = *(unsigned __int8 **)(v621 + 7528);
  v176 = v605;
  if (*(_DWORD *)(v621 + 7480))
  {
    v177 = *(_DWORD *)(v621 + 7472) * *(_DWORD *)(v621 + 7468);
    v178 = ((v177 - *((_DWORD *)v605 + 162)) << 8) / v177;
    if (v178 <= 1)
      v178 = 1;
    if (v178 >= 0xFF)
      v179 = 255;
    else
      v179 = v178;
    *(_DWORD *)(v633 + 142824) = v179;
    vp8_encode_BOOL_0((uint64_t)v638, v179 >> 7);
    vp8_encode_BOOL_0((uint64_t)v638, (v179 >> 6) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v179 >> 5) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v179 >> 4) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v179 >> 3) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v179 >> 2) & 1);
    vp8_encode_BOOL_0((uint64_t)v638, (v179 >> 1) & 1);
    v614 = v179;
    vp8_encode_BOOL_0((uint64_t)v638, v179 & 1);
    v180 = v638;
    v181 = *(_DWORD *)(v621 + 7468);
    if (v181 < 1)
      goto LABEL_683;
  }
  else
  {
    v614 = 0;
    v180 = v638;
    v181 = *(_DWORD *)(v621 + 7468);
    if (v181 < 1)
      goto LABEL_683;
  }
  v446 = *(_DWORD *)(v621 + 7472);
  if (v446 < 1)
    goto LABEL_683;
  v447 = 0;
  while (2)
  {
    if (v446 < 1)
      goto LABEL_549;
    v608 = v447;
    v448 = 0;
    v449 = v621;
    while (2)
    {
      v450 = *v175;
      if (v176[1] && *v176)
      {
        v451 = v175[11];
        v452 = v451 != 1;
        v453 = v605 + 5;
        if (v451 == 2)
        {
          v453 = v605 + 6;
          v452 = 1;
        }
        v454 = v451 == 3 || v451 == 2;
        if (v451 == 3)
          v455 = v605 + 6;
        else
          v455 = v453;
        v456 = v451 != 3 && v452;
        vp8_encode_BOOL((uint64_t)v638, v454, v176[4]);
        v180 = v638;
        v457 = v638[1];
        v458 = v638[2];
        v459 = ((v457 - 1) * *v455) >> 8;
        v460 = v457 - (v459 + 1);
        if (v456)
          v461 = v459 + 1;
        else
          v461 = v460;
        if (v456)
          v462 = 0;
        else
          v462 = v459 + 1;
        v463 = v462 + *v638;
        v464 = vp8_norm[v461];
        v465 = v458 + v464;
        if ((int)(v458 + v464) < 0)
        {
          v468 = v458 + v464;
          LOBYTE(v465) = vp8_norm[v461];
        }
        else
        {
          if ((((_DWORD)v463 << ~(_BYTE)v458) & 0x80000000) != 0)
          {
            LODWORD(v540) = v638[3];
            v541 = v540 - 1;
            if ((int)v540 - 1 >= 0)
            {
              while (1)
              {
                v540 = (v540 - 1);
                v542 = *((_QWORD *)v638 + 2);
                if (*(unsigned __int8 *)(v542 + v540) != 255)
                  break;
                *(_BYTE *)(v542 + v540) = 0;
                if ((int)v540 <= 0)
                {
                  v541 = -1;
                  goto LABEL_681;
                }
              }
              v541 = v540;
            }
LABEL_681:
            ++*(_BYTE *)(*((_QWORD *)v638 + 2) + v541);
            v466 = v638[3];
            v467 = *((_QWORD *)v638 + 2);
            if ((unint64_t)(v467 + v466 + 1) >= *((_QWORD *)v638 + 3))
            {
LABEL_575:
              vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
              v180 = v638;
              v467 = *((_QWORD *)v638 + 2);
              v466 = v638[3];
            }
          }
          else
          {
            v466 = v638[3];
            v467 = *((_QWORD *)v638 + 2);
            if ((unint64_t)(v467 + v466 + 1) >= *((_QWORD *)v638 + 3))
              goto LABEL_575;
          }
          v180[3] = v466 + 1;
          *(_BYTE *)(v467 + v466) = v463 >> (v458 + 24);
          v463 = (v463 << -(char)v458) & 0xFFFFFF;
          v468 = v465 - 8;
        }
        v180[1] = v461 << v464;
        v180[2] = v468;
        *v180 = (_DWORD)v463 << v465;
        v449 = v621;
      }
      v469 = *(_DWORD *)(v449 + 7480);
      v470 = v180[1];
      v471 = v180[2];
      v472 = *v180;
      v632 = v175;
      v619 = v448;
      if (v469)
      {
        v473 = ((v470 - 1) * v614) >> 8;
        v474 = v470 - (v473 + 1);
        if (v175[9])
          v475 = v474;
        else
          v475 = v473 + 1;
        if (v175[9])
          v476 = v473 + 1;
        else
          v476 = 0;
        v477 = v476 + v472;
        v478 = vp8_norm[v475];
        v479 = v471 + v478;
        if ((int)(v471 + v478) < 0)
        {
          v471 += v478;
          LOBYTE(v479) = vp8_norm[v475];
        }
        else
        {
          if ((((_DWORD)v477 << ~(_BYTE)v471) & 0x80000000) != 0)
          {
            LODWORD(v537) = v180[3];
            v538 = v537 - 1;
            if ((int)v537 - 1 >= 0)
            {
              while (1)
              {
                v537 = (v537 - 1);
                v539 = *((_QWORD *)v180 + 2);
                if (*(unsigned __int8 *)(v539 + v537) != 255)
                  break;
                *(_BYTE *)(v539 + v537) = 0;
                if ((int)v537 <= 0)
                {
                  v538 = -1;
                  goto LABEL_678;
                }
              }
              v538 = v537;
            }
LABEL_678:
            ++*(_BYTE *)(*((_QWORD *)v180 + 2) + v538);
            v480 = v180[3];
            v481 = *((_QWORD *)v180 + 2);
            if ((unint64_t)(v481 + v480 + 1) >= *((_QWORD *)v180 + 3))
            {
LABEL_589:
              vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
              v180 = v638;
              v481 = *((_QWORD *)v638 + 2);
              v480 = v638[3];
            }
          }
          else
          {
            v480 = v180[3];
            v481 = *((_QWORD *)v180 + 2);
            if ((unint64_t)(v481 + v480 + 1) >= *((_QWORD *)v180 + 3))
              goto LABEL_589;
          }
          v180[3] = v480 + 1;
          *(_BYTE *)(v481 + v480) = v477 >> (v471 + 24);
          v477 = (v477 << -(char)v471) & 0xFFFFFF;
          v471 = v479 - 8;
        }
        v470 = v475 << v478;
        v180[1] = v475 << v478;
        v180[2] = v471;
        v472 = (_DWORD)v477 << v479;
        *v180 = (_DWORD)v477 << v479;
      }
      v482 = 0;
      v636 = v450;
      v483 = (unsigned int *)((char *)&vp8_kf_ymode_encodings + 8 * v450);
      v485 = *v483;
      v484 = v483[1];
      while (2)
      {
        --v484;
        v487 = ((v470 - 1) * vp8_kf_ymode_prob[v482 >> 1]) >> 8;
        v488 = v470 - (v487 + 1);
        v489 = (v485 >> v484) & 1;
        if (v489)
          v490 = v488;
        else
          v490 = v487 + 1;
        v491 = (((int)(v485 >> v484 << 31) >> 31) & (v487 + 1)) + v472;
        v492 = vp8_norm[v490];
        v486 = v471 + v492;
        if ((int)(v471 + v492) < 0)
        {
          v471 += v492;
          LOBYTE(v486) = vp8_norm[v490];
        }
        else
        {
          if ((((_DWORD)v491 << ~(_BYTE)v471) & 0x80000000) != 0)
          {
            LODWORD(v495) = v180[3];
            v496 = v495 - 1;
            if ((int)v495 - 1 >= 0)
            {
              while (1)
              {
                v495 = (v495 - 1);
                v497 = *((_QWORD *)v180 + 2);
                if (*(unsigned __int8 *)(v497 + v495) != 255)
                  break;
                *(_BYTE *)(v497 + v495) = 0;
                if ((int)v495 <= 0)
                {
                  v496 = -1;
                  goto LABEL_609;
                }
              }
              v496 = v495;
            }
LABEL_609:
            ++*(_BYTE *)(*((_QWORD *)v180 + 2) + v496);
            v493 = v180[3];
            v494 = *((_QWORD *)v180 + 2);
            if ((unint64_t)(v494 + v493 + 1) >= *((_QWORD *)v180 + 3))
            {
LABEL_602:
              vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
              v180 = v638;
              v494 = *((_QWORD *)v638 + 2);
              v493 = v638[3];
            }
          }
          else
          {
            v493 = v180[3];
            v494 = *((_QWORD *)v180 + 2);
            if ((unint64_t)(v494 + v493 + 1) >= *((_QWORD *)v180 + 3))
              goto LABEL_602;
          }
          v180[3] = v493 + 1;
          *(_BYTE *)(v494 + v493) = v491 >> (v471 + 24);
          v491 = (v491 << -(char)v471) & 0xFFFFFF;
          v471 = v486 - 8;
        }
        v470 = v490 << v492;
        v472 = (_DWORD)v491 << v486;
        v180[1] = v490 << v492;
        v180[2] = v471;
        *v180 = (_DWORD)v491 << v486;
        v482 = vp8_kf_ymode_tree[v489 + v482];
        if (v484)
          continue;
        break;
      }
      if (v636 == 4)
      {
        v498 = 0;
        v499 = v632;
        v623 = &v632[-76 * *(int *)(v621 + 7476)];
        while (1)
        {
          if (v498 > 3)
          {
            v501 = v632 - 4;
LABEL_618:
            v500 = *(_DWORD *)&v501[4 * v498];
          }
          else
          {
            switch(*v623)
            {
              case 1u:
                v500 = 2;
                break;
              case 2u:
                v500 = 3;
                break;
              case 3u:
                v500 = 1;
                break;
              case 4u:
                v501 = v623 + 60;
                goto LABEL_618;
              default:
                v500 = 0;
                break;
            }
          }
          if ((v498 & 3) != 0)
          {
            v502 = v632 + 8;
LABEL_621:
            v503 = *(unsigned int *)&v502[4 * v498];
          }
          else
          {
            switch(*(v499 - 76))
            {
              case 1u:
                v503 = 2;
                break;
              case 2u:
                v503 = 3;
                break;
              case 3u:
                v503 = 1;
                break;
              case 4u:
                v502 = v632 - 52;
                goto LABEL_621;
              default:
                v503 = 0;
                break;
            }
          }
          v504 = 0;
          v637 = v498;
          v505 = (char *)&vp8_kf_bmode_prob + 90 * v500 + 9 * v503;
          v506 = (unsigned int *)((char *)&vp8_bmode_encodings + 8 * *(int *)&v499[4 * v498 + 12]);
          v507 = *v506;
          v508 = v506[1];
          do
          {
            --v508;
            v510 = ((v470 - 1) * v505[v504 >> 1]) >> 8;
            v511 = v470 - (v510 + 1);
            v512 = (v507 >> v508) & 1;
            if (v512)
              v513 = v511;
            else
              v513 = v510 + 1;
            v514 = (((int)(v507 >> v508 << 31) >> 31) & (v510 + 1)) + v472;
            v515 = vp8_norm[v513];
            v509 = v471 + v515;
            if ((int)(v471 + v515) < 0)
            {
              v471 += v515;
              LOBYTE(v509) = vp8_norm[v513];
              goto LABEL_624;
            }
            if ((((_DWORD)v514 << ~(_BYTE)v471) & 0x80000000) != 0)
            {
              LODWORD(v518) = v180[3];
              v519 = v518 - 1;
              if ((int)v518 - 1 >= 0)
              {
                while (1)
                {
                  v518 = (v518 - 1);
                  v520 = *((_QWORD *)v180 + 2);
                  if (*(unsigned __int8 *)(v520 + v518) != 255)
                    break;
                  *(_BYTE *)(v520 + v518) = 0;
                  if ((int)v518 <= 0)
                  {
                    v519 = -1;
                    goto LABEL_638;
                  }
                }
                v519 = v518;
              }
LABEL_638:
              ++*(_BYTE *)(*((_QWORD *)v180 + 2) + v519);
              v516 = v180[3];
              v517 = *((_QWORD *)v180 + 2);
              if ((unint64_t)(v517 + v516 + 1) < *((_QWORD *)v180 + 3))
                goto LABEL_632;
LABEL_631:
              vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
              v180 = v638;
              v517 = *((_QWORD *)v638 + 2);
              v516 = v638[3];
              goto LABEL_632;
            }
            v516 = v180[3];
            v517 = *((_QWORD *)v180 + 2);
            if ((unint64_t)(v517 + v516 + 1) >= *((_QWORD *)v180 + 3))
              goto LABEL_631;
LABEL_632:
            v180[3] = v516 + 1;
            *(_BYTE *)(v517 + v516) = v514 >> (v471 + 24);
            v514 = (v514 << -(char)v471) & 0xFFFFFF;
            v471 = v509 - 8;
LABEL_624:
            v470 = v513 << v515;
            v472 = (_DWORD)v514 << v509;
            v180[1] = v513 << v515;
            v180[2] = v471;
            *v180 = (_DWORD)v514 << v509;
            v504 = vp8_bmode_tree[v512 + v504];
          }
          while (v508);
          v498 = v637 + 1;
          v499 = v632;
          if (v637 == 15)
            goto LABEL_651;
        }
      }
      v499 = v632;
LABEL_651:
      v521 = 0;
      v522 = (unsigned int *)((char *)&vp8_uv_mode_encodings + 8 * v499[1]);
      v523 = *v522;
      v524 = v522[1];
      while (2)
      {
        --v524;
        v526 = ((v470 - 1) * vp8_kf_uv_mode_prob[v521 >> 1]) >> 8;
        v527 = v470 - (v526 + 1);
        v528 = (v523 >> v524) & 1;
        if (v528)
          v529 = v527;
        else
          v529 = v526 + 1;
        v530 = (((int)(v523 >> v524 << 31) >> 31) & (v526 + 1)) + v472;
        v531 = vp8_norm[v529];
        v525 = v471 + v531;
        if ((int)(v471 + v531) < 0)
        {
          v471 += v531;
          LOBYTE(v525) = vp8_norm[v529];
        }
        else
        {
          if ((((_DWORD)v530 << ~(_BYTE)v471) & 0x80000000) != 0)
          {
            LODWORD(v534) = v180[3];
            v535 = v534 - 1;
            if ((int)v534 - 1 >= 0)
            {
              while (1)
              {
                v534 = (v534 - 1);
                v536 = *((_QWORD *)v180 + 2);
                if (*(unsigned __int8 *)(v536 + v534) != 255)
                  break;
                *(_BYTE *)(v536 + v534) = 0;
                if ((int)v534 <= 0)
                {
                  v535 = -1;
                  goto LABEL_667;
                }
              }
              v535 = v534;
            }
LABEL_667:
            ++*(_BYTE *)(*((_QWORD *)v180 + 2) + v535);
            v532 = v180[3];
            v533 = *((_QWORD *)v180 + 2);
            if ((unint64_t)(v533 + v532 + 1) >= *((_QWORD *)v180 + 3))
            {
LABEL_660:
              vpx_internal_error(*((_QWORD *)v638 + 4), 7, "Truncated packet or corrupt partition ");
              v180 = v638;
              v533 = *((_QWORD *)v638 + 2);
              v532 = v638[3];
            }
          }
          else
          {
            v532 = v180[3];
            v533 = *((_QWORD *)v180 + 2);
            if ((unint64_t)(v533 + v532 + 1) >= *((_QWORD *)v180 + 3))
              goto LABEL_660;
          }
          v180[3] = v532 + 1;
          *(_BYTE *)(v533 + v532) = v530 >> (v471 + 24);
          v530 = (v530 << -(char)v471) & 0xFFFFFF;
          v471 = v525 - 8;
        }
        v470 = v529 << v531;
        v472 = (_DWORD)v530 << v525;
        v180[1] = v529 << v531;
        v180[2] = v471;
        *v180 = (_DWORD)v530 << v525;
        v521 = vp8_uv_mode_tree[v528 + v521];
        if (v524)
          continue;
        break;
      }
      v175 = v632 + 76;
      v448 = v619 + 1;
      v449 = v621;
      v446 = *(_DWORD *)(v621 + 7472);
      v135 = (_DWORD *)(v633 + 134300);
      v176 = v605;
      if (v619 + 1 < v446)
        continue;
      break;
    }
    v181 = *(_DWORD *)(v621 + 7468);
    v447 = v608;
LABEL_549:
    v175 += 76;
    if (++v447 < v181)
      continue;
    break;
  }
LABEL_683:
  result = vp8_stop_encode((uint64_t)v638);
  v544 = v638;
  v545 = v638[3];
  v546 = a2 + v579 + v545;
  *(_BYTE *)a2 = (2 * (v581 & 7)) & 0xEF | (16 * (v582 & 1)) | v584 | (32 * v545);
  *(_BYTE *)(a2 + 1) = v545 >> 3;
  *(_BYTE *)(a2 + 2) = v545 >> 11;
  v547 = v638[3] + v580;
  v548 = a4;
  *a4 = v547;
  *(_DWORD *)(v633 + 143280) = v547;
  v549 = *(_DWORD *)(v621 + 10252);
  if (v549)
  {
    v550 = (3 << v549) - 3;
    *(_DWORD *)(v633 + 143280) = v550 + v547;
    *a4 = v550 + v547;
    v551 = v546 + v550;
    if (v550 < 1 || v551 >= a3)
    {
      result = vpx_internal_error((uint64_t)v583, 7, "Truncated packet or corrupt partition ");
      v544 = v638;
      v548 = a4;
      if (v549 == 31)
        goto LABEL_714;
    }
    else if (v549 == 31)
    {
      goto LABEL_714;
    }
    v557 = 1 << v549;
    if ((int)(1 << v549) <= 1)
      v558 = 1;
    else
      v558 = v557;
    if (v558 < 2)
    {
      v559 = 1;
      goto LABEL_702;
    }
    v559 = v558 | 1;
    v560 = (int *__attribute__((__org_typedef(jmp_buf))) *)(v544 + 28);
    v561 = v558 & 0x7FFFFFFE;
    do
    {
      *(v560 - 5) = v583;
      *v560 = v583;
      v560 += 10;
      v561 -= 2;
    }
    while (v561);
    if ((v558 & 0x7FFFFFFE) == 0)
    {
LABEL_702:
      v562 = v558 - v559 + 1;
      v563 = (int *__attribute__((__org_typedef(jmp_buf))) *)(v633 + 40 * v559 + 113936);
      do
      {
        *v563 = v583;
        v563 += 5;
        --v562;
      }
      while (v562);
    }
    v564 = 0;
    v565 = 0;
    do
    {
      v566 = &v544[10 * v565];
      *(_OWORD *)(v566 + 10) = xmmword_208F3A6E0;
      v567 = (uint64_t)(v566 + 10);
      *((_QWORD *)v566 + 7) = v551;
      *((_QWORD *)v566 + 8) = a3;
      if (v565 < *(int *)(v621 + 7468))
      {
        v568 = v564;
        v569 = v565;
        do
        {
          vp8_pack_tokens(v567, *(uint64_t **)(*v587 + v568), (*(_QWORD *)(*v587 + v568 + 8) - *(_QWORD *)(*v587 + v568)) >> 4);
          v569 += v557;
          v568 += 16 * v557;
        }
        while (v569 < *(int *)(v621 + 7468));
      }
      result = vp8_stop_encode(v567);
      v544 = v638;
      v551 += v566[13];
      ++v565;
      v564 += 16;
    }
    while (v565 != v557);
    v548 = a4;
    v570 = v546;
    if ((int)v557 < 2)
    {
LABEL_714:
      v576 = *v548;
      v557 = 1;
    }
    else
    {
      v571 = v557 - 1;
      v572 = (unsigned int *)(v633 + 143284);
      v573 = (int *)(v638 + 13);
      do
      {
        v574 = *v573;
        v573 += 10;
        *v572 = v574;
        *(_WORD *)v570 = v574;
        *(_BYTE *)(v570 + 2) = BYTE2(v574);
        v575 = *v572++;
        v576 = *a4 + v575;
        *a4 = v576;
        v570 += 3;
        --v571;
      }
      while (v571);
    }
    v577 = *(unsigned int *)(v633 + 40 * v557 + 113916);
    *(_DWORD *)(v633 + 4 * v557 + 143280) = v577;
    *v548 = v576 + v577;
  }
  else
  {
    *(_OWORD *)(v638 + 10) = xmmword_208F3A6E0;
    v552 = (uint64_t)(v638 + 10);
    *((_QWORD *)v638 + 7) = v546;
    *((_QWORD *)v638 + 8) = a3;
    *((_QWORD *)v638 + 9) = v583;
    if (atomic_load(v135 + 2221))
    {
      v554 = v633 + 143272;
      if (*(int *)(v621 + 7468) >= 1)
      {
        v555 = 0;
        v556 = 0;
        do
        {
          vp8_pack_tokens(v552, *(uint64_t **)(*v587 + v555), (*(_QWORD *)(*v587 + v555 + 8) - *(_QWORD *)(*v587 + v555)) >> 4);
          ++v556;
          v555 += 16;
        }
        while (v556 < *(int *)(v621 + 7468));
      }
    }
    else
    {
      vp8_pack_tokens((uint64_t)(v638 + 10), *((uint64_t **)v638 + 156), v638[314]);
      v554 = v633 + 143272;
    }
    result = vp8_stop_encode(v552);
    v578 = v638[13];
    *a4 += v578;
    *(_DWORD *)(v554 + 12) = v578;
  }
  return result;
}

uint64_t update_mode(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6, char *a7, uint64_t a8)
{
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t result;

  if (a2 <= 2)
    v16 = 2;
  else
    v16 = a2;
  bzero(a7, 8 * (v16 - 1));
  v17 = 0;
  v18 = a2 - 1;
  if (a2 <= 1)
    v19 = 1;
  else
    v19 = a2;
  do
  {
    v20 = 0;
    v21 = *(_DWORD *)(a3 + 8 * v17);
    v22 = *(_DWORD *)(a8 + 4 * v17);
    v23 = *(_DWORD *)(a3 + 8 * v17 + 4) - 1;
    do
    {
      *(_DWORD *)&a7[8 * (v20 >> 1) + 4 * ((v21 >> v23) & 1)] += v22;
      v24 = *(char *)(a4 + ((v21 >> v23) & 1) + (unint64_t)v20);
      v20 = *(unsigned __int8 *)(a4 + ((v21 >> v23--) & 1) + (unint64_t)v20);
    }
    while (v24 > 0);
    ++v17;
  }
  while (v17 != v19);
  if (v18 <= 1)
    v25 = 1;
  else
    v25 = v18;
  v26 = a7 + 4;
  v27 = a5;
  v28 = v25;
  do
  {
    while (1)
    {
      v32 = *(v26 - 1);
      v33 = *v26 + v32;
      if (v33)
        break;
      v26 += 2;
      *v27++ = 0x80;
      if (!--v28)
        goto LABEL_22;
    }
    v29 = (v33 >> 1) + (v32 << 8);
    v30 = v29 / v33;
    if (v33 > v29)
      LOBYTE(v31) = 1;
    else
      v31 = v29 / v33;
    if (v30 > 0xFF)
      LOBYTE(v31) = -1;
    v26 += 2;
    *v27++ = v31;
    --v28;
  }
  while (v28);
LABEL_22:
  v34 = 0;
  v35 = 0;
  v36 = (unsigned int *)(a7 + 4);
  v37 = a5;
  v38 = a6;
  v39 = v25;
  do
  {
    v40 = *v37++;
    v41 = *(v36 - 1);
    v34 += (vp8_prob_cost[v40] * (unint64_t)v41
          + vp8_prob_cost[~(_BYTE)v40] * (unint64_t)*v36) >> 8;
    v42 = *v38++;
    v35 += (vp8_prob_cost[v42] * (unint64_t)v41
          + vp8_prob_cost[~(_BYTE)v42] * (unint64_t)*v36) >> 8;
    v36 += 2;
    --v39;
  }
  while (v39);
  if (v34 + (v18 << 8) >= v35)
    return vp8_encode_BOOL(a1, 0, 128);
  vp8_encode_BOOL(a1, 1, 128);
  do
  {
    v44 = *a5++;
    v43 = v44;
    if (v44 <= 1)
      v45 = 1;
    else
      v45 = v43;
    *a6++ = v45;
    vp8_encode_BOOL_0(a1, v45 >> 7);
    vp8_encode_BOOL_0(a1, (v45 >> 6) & 1);
    vp8_encode_BOOL_0(a1, (v45 >> 5) & 1);
    vp8_encode_BOOL_0(a1, (v45 >> 4) & 1);
    vp8_encode_BOOL_0(a1, (v45 >> 3) & 1);
    vp8_encode_BOOL_0(a1, (v45 >> 2) & 1);
    vp8_encode_BOOL_0(a1, (v45 >> 1) & 1);
    result = vp8_encode_BOOL_0(a1, v45 & 1);
    --v25;
  }
  while (v25);
  return result;
}

uint64_t vpx_stop_encode(uint64_t a1)
{
  int v1;
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = 0;
  v2 = *(_DWORD *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  do
  {
    v5 = (((v3 << 7) - 128) >> 8) + 1;
    v6 = vpx_norm[v5];
    v7 = v4 + v6;
    if (v4 + v6 >= 0)
    {
      if (!*(_DWORD *)(a1 + 12))
      {
        LODWORD(v8) = *(_DWORD *)(a1 + 16);
        if (((v2 << ~(_BYTE)v4) & 0x80000000) != 0)
        {
          v9 = v8 - 1;
          if ((int)v8 >= 1)
          {
            while (1)
            {
              v8 = (v8 - 1);
              v10 = *(_QWORD *)(a1 + 24);
              if (*(unsigned __int8 *)(v10 + v8) != 255)
                break;
              *(_BYTE *)(v10 + v8) = 0;
              if ((int)v8 <= 0)
              {
                v9 = -1;
                goto LABEL_16;
              }
            }
            v9 = v8;
          }
LABEL_16:
          ++*(_BYTE *)(*(_QWORD *)(a1 + 24) + v9);
          LODWORD(v8) = *(_DWORD *)(a1 + 16);
          if (v8 < *(_DWORD *)(a1 + 20))
            goto LABEL_17;
        }
        else if (v8 < *(_DWORD *)(a1 + 20))
        {
LABEL_17:
          v11 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 16) = v8 + 1;
          *(_BYTE *)(v11 + v8) = v2 >> (v4 + 24);
          goto LABEL_3;
        }
        *(_DWORD *)(a1 + 12) = 1;
      }
LABEL_3:
      v2 = (v2 << -(char)v4) & 0xFFFFFF;
      v4 = v7 - 8;
      goto LABEL_4;
    }
    v4 += v6;
    LOBYTE(v7) = vpx_norm[v5];
LABEL_4:
    v3 = (_DWORD)v5 << v6;
    v2 <<= v7;
    *(_DWORD *)(a1 + 4) = v3;
    *(_DWORD *)(a1 + 8) = v4;
    *(_DWORD *)a1 = v2;
    ++v1;
  }
  while (v1 != 32);
  if (*(_DWORD *)(a1 + 12))
    return 0xFFFFFFFFLL;
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(unsigned int *)(a1 + 16);
  if ((*(_BYTE *)(v13 + (v14 - 1)) & 0xE0) != 0xC0)
    return 0;
  if (v14 >= *(_DWORD *)(a1 + 20))
  {
    *(_DWORD *)(a1 + 12) = 1;
    return 0xFFFFFFFFLL;
  }
  else
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(v13 + v14) = 0;
    if (*(_DWORD *)(a1 + 12))
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
}

uint64_t vpx_wb_write_bit(uint64_t result, char a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  int v5;

  if (!*(_DWORD *)result)
  {
    v2 = *(_QWORD *)(result + 8);
    if ((int)v2 >= 0)
      v3 = *(_QWORD *)(result + 8);
    else
      v3 = v2 + 7;
    v4 = (uint64_t)v3 >> 3;
    if (*(_QWORD *)(result + 16) <= v4)
    {
      *(_DWORD *)result = 1;
    }
    else
    {
      v5 = v2 - (v3 & 0xFFFFFFF8);
      if (v5)
        *(_BYTE *)(*(_QWORD *)(result + 24) + v4) |= a2 << (7 - v5);
      else
        *(_BYTE *)(*(_QWORD *)(result + 24) + v4) = a2 << 7;
      *(_QWORD *)(result + 8) = (int)v2 + 1;
    }
  }
  return result;
}

uint64_t vp8_stop_encode(uint64_t a1)
{
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  vp8_encode_BOOL_0(a1, 0);
  return vp8_encode_BOOL_0(a1, 0);
}

uint64_t vp8_encode_BOOL_0(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v2 = result;
  v3 = *(_DWORD *)(result + 4);
  v4 = *(_DWORD *)(result + 8);
  v5 = ((v3 << 7) - 128) >> 8;
  v6 = v3 - (v5 + 1);
  if (a2)
    v7 = v6;
  else
    v7 = v5 + 1;
  if (a2)
    v8 = v5 + 1;
  else
    v8 = 0;
  v9 = v8 + *(_DWORD *)result;
  v10 = vp8_norm[v7];
  v11 = v4 + v10;
  if (v4 + v10 < 0)
  {
    v14 = v4 + v10;
    LOBYTE(v11) = vp8_norm[v7];
    goto LABEL_13;
  }
  if ((((_DWORD)v9 << ~(_BYTE)v4) & 0x80000000) != 0)
  {
    LODWORD(v15) = *(_DWORD *)(result + 12);
    v16 = v15 - 1;
    if ((int)v15 - 1 >= 0)
    {
      while (1)
      {
        v15 = (v15 - 1);
        v17 = *(_QWORD *)(result + 16);
        if (*(unsigned __int8 *)(v17 + v15) != 255)
          break;
        *(_BYTE *)(v17 + v15) = 0;
        if ((int)v15 <= 0)
        {
          v16 = -1;
          goto LABEL_19;
        }
      }
      v16 = v15;
    }
LABEL_19:
    ++*(_BYTE *)(*(_QWORD *)(result + 16) + v16);
    v12 = *(unsigned int *)(result + 12);
    v13 = *(_QWORD *)(result + 16);
    if ((unint64_t)(v13 + v12 + 1) < *(_QWORD *)(result + 24))
      goto LABEL_11;
    goto LABEL_10;
  }
  v12 = *(unsigned int *)(result + 12);
  v13 = *(_QWORD *)(result + 16);
  if ((unint64_t)(v13 + v12 + 1) >= *(_QWORD *)(result + 24))
  {
LABEL_10:
    result = vpx_internal_error(*(_QWORD *)(result + 32), 7, "Truncated packet or corrupt partition ");
    v13 = *(_QWORD *)(v2 + 16);
    v12 = *(unsigned int *)(v2 + 12);
  }
LABEL_11:
  *(_DWORD *)(v2 + 12) = v12 + 1;
  *(_BYTE *)(v13 + v12) = v9 >> (v4 + 24);
  v9 = (v9 << -(char)v4) & 0xFFFFFF;
  v14 = v11 - 8;
LABEL_13:
  *(_DWORD *)(v2 + 4) = v7 << v10;
  *(_DWORD *)(v2 + 8) = v14;
  *(_DWORD *)v2 = (_DWORD)v9 << v11;
  return result;
}

int8x8_t *vpx_post_proc_down_and_across_mb_row_neon(int8x8_t *result, int8x8_t *a2, int a3, int a4, int a5, uint64_t a6, int a7, int32x4_t a8, double a9, double a10, double a11, double a12, int8x16_t a13, int32x4_t a14, int8x16_t a15)
{
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int8x8_t *v28;
  int v29;
  uint8x16_t *v30;
  uint8x16_t v31;
  int8x16_t *v32;
  int8x16_t v33;
  int8x8_t *v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint8x16_t v48;
  uint8x16_t v49;
  int8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t *v55;
  int8x16_t *v56;
  int v57;
  uint64_t v58;
  uint8x8_t *v59;
  uint8x8_t *v60;
  int8x8_t *v61;
  int8x8_t v62;
  int8x8_t v63;
  uint8x8_t v64;
  uint8x8_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int8x8_t *v70;
  uint8x8_t v71;
  int8x8_t v72;
  uint8x8_t v73;
  int8x8_t v74;
  uint8x8_t v75;
  uint8x8_t v76;
  uint8x8_t v77;
  int8x8_t v78;
  uint8x8_t v79;
  uint8x8_t v80;
  uint8x8_t v81;
  uint8x8_t v82;
  uint8x8_t v83;
  int8x8_t v84;
  uint8x8_t v85;
  uint8x8_t v86;
  uint8x8_t v87;
  int8x8_t *v88;
  int8x8_t *v89;
  int v90;
  int32x2_t *v91;
  uint64_t v92;
  uint64_t v93;
  int32x2_t *v94;
  int32x2_t v95;
  int32x2_t *v96;
  int32x2_t v97;
  int32x2_t *v98;
  int32x2_t v99;
  int32x2_t *v100;
  int32x2_t v101;
  int32x2_t *v102;
  int8x8_t v103;
  int8x8_t v104;
  int8x8_t v105;
  int8x8_t v106;
  int8x8_t v107;
  int8x16_t v108;
  unint64_t *v109;
  unint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  unint64_t *v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  uint8x8_t v128;
  uint8x8_t v129;
  int8x8_t v130;
  uint8x8_t v131;
  uint8x8_t v132;
  uint8x8_t v133;
  uint8x8_t v134;
  uint8x8_t v135;
  uint8x8_t v136;
  uint8x8_t v137;
  uint8x8_t v138;
  uint8x8_t v139;
  int8x8_t v140;
  uint8x8_t v141;
  uint8x8_t v142;
  uint8x8_t v143;
  uint8x8_t v144;
  uint8x8_t v145;
  uint8x8_t v146;
  uint8x8_t v147;
  uint8x8_t v148;
  uint8x8_t v149;
  uint8x8_t v150;
  uint8x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int8x16_t v158;
  uint64_t v159;
  int32x4_t v160;
  int32x4_t v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;

  if (a5 < 9)
  {
    LODWORD(v20) = 0;
    if (!a5)
      goto LABEL_16;
  }
  else if (a7 <= 0)
  {
    v20 = (a5 - 9) & 0xFFFFFFF0;
    result = (int8x8_t *)((char *)result + v20 + 16);
    a2 = (int8x8_t *)((char *)a2 + v20 + 16);
    LODWORD(v20) = v20 + 16;
    if ((_DWORD)v20 == a5)
      goto LABEL_16;
  }
  else
  {
    v20 = 0;
    v21 = 2 * a3;
    v22 = -2 * a3;
    v23 = (char *)result + 7 * a3 - v21;
    v24 = 4 * a3;
    v25 = (char *)result + 6 * a3 - v21;
    v26 = (char *)result + 5 * a3 - v21;
    v27 = (char *)result + v24 - v21;
    v28 = a2;
    do
    {
      v29 = 0;
      a8 = *(int32x4_t *)&result->i8[v22];
      v30 = (uint8x16_t *)((char *)result + v22 + a3);
      v31 = *v30;
      v32 = (int8x16_t *)&v30->i8[a3];
      v33 = *(int8x16_t *)((char *)v32 + a3);
      v34 = a2;
      v35 = *v32;
      v36 = v27;
      v37 = v26;
      v38 = v25;
      v39 = v23;
      do
      {
        v40 = *(uint8x16_t *)(a6 + v20);
        v41 = vrhaddq_u8((uint8x16_t)a8, v31);
        v42 = vabdq_u8((uint8x16_t)a8, (uint8x16_t)v35);
        a8 = *(int32x4_t *)&v36[v20];
        v43 = vrhaddq_u8(v31, (uint8x16_t)v35);
        v16 = *(int8x16_t *)&v37[v20];
        v44 = vrhaddq_u8((uint8x16_t)a8, (uint8x16_t)v33);
        v45 = vabdq_u8((uint8x16_t)v35, (uint8x16_t)v33);
        v46 = vabdq_u8((uint8x16_t)v35, (uint8x16_t)a8);
        a13 = vbslq_s8((int8x16_t)vcgtq_u8(v40, vmaxq_u8(v46, vmaxq_u8(v45, vmaxq_u8(v42, vabdq_u8(v31, (uint8x16_t)v35))))), (int8x16_t)vrhaddq_u8(vrhaddq_u8(v41, v44), (uint8x16_t)v35), v35);
        v47 = vrhaddq_u8((uint8x16_t)v35, (uint8x16_t)v33);
        a14 = *(int32x4_t *)&v38[v20];
        v48 = vmaxq_u8(vabdq_u8(v31, (uint8x16_t)v33), v45);
        v49 = vabdq_u8((uint8x16_t)v33, (uint8x16_t)a8);
        v19 = (int8x16_t)vabdq_u8((uint8x16_t)v33, (uint8x16_t)v16);
        v50 = vbslq_s8((int8x16_t)vcgtq_u8(v40, vmaxq_u8((uint8x16_t)v19, vmaxq_u8(v49, v48))), (int8x16_t)vrhaddq_u8(vrhaddq_u8(v43, vrhaddq_u8((uint8x16_t)v16, (uint8x16_t)a8)), (uint8x16_t)v33), v33);
        v15 = *(int8x16_t *)&v39[v20];
        v51 = vmaxq_u8(v46, v49);
        v52 = vabdq_u8((uint8x16_t)a8, (uint8x16_t)v16);
        v53 = vbslq_s8((int8x16_t)vcgtq_u8(v40, vmaxq_u8(vabdq_u8((uint8x16_t)a14, (uint8x16_t)a8), vmaxq_u8(v52, v51))), (int8x16_t)vrhaddq_u8(vrhaddq_u8(v47, vrhaddq_u8((uint8x16_t)a14, (uint8x16_t)v16)), (uint8x16_t)a8), (int8x16_t)a8);
        v54 = (int8x16_t)vrhaddq_u8(vrhaddq_u8(v44, vrhaddq_u8((uint8x16_t)v15, (uint8x16_t)a14)), (uint8x16_t)v16);
        v17 = (int8x16_t)vabdq_u8((uint8x16_t)v15, (uint8x16_t)v16);
        v18 = (int8x16_t)vmaxq_u8((uint8x16_t)v19, v52);
        a15 = (int8x16_t)vmaxq_u8((uint8x16_t)v17, vmaxq_u8(vabdq_u8((uint8x16_t)a14, (uint8x16_t)v16), (uint8x16_t)v18));
        *(int8x16_t *)&v34->i8[v20] = a13;
        v55 = (int8x16_t *)((char *)v34 + v20 + a4);
        *v55 = v50;
        v56 = (int8x16_t *)((char *)v55 + a4);
        *v56 = v53;
        *(int8x16_t *)((char *)v56 + a4) = vbslq_s8((int8x16_t)vcgtq_u8(v40, (uint8x16_t)a15), v54, v16);
        v29 += 4;
        v39 += v24;
        v38 += v24;
        v37 += v24;
        v36 += v24;
        v34 = (int8x8_t *)((char *)v34 + 4 * a4);
        v31 = (uint8x16_t)v16;
        v35 = (int8x16_t)a14;
        v33 = v15;
      }
      while (v29 < a7);
      result += 2;
      v28 += 2;
      v20 += 16;
    }
    while (v20 < (a5 - 8));
    a2 = v28;
    if ((_DWORD)v20 == a5)
      goto LABEL_16;
  }
  if (a7 >= 1)
  {
    v57 = 0;
    v58 = a3;
    v59 = (uint8x8_t *)((char *)result - 2 * a3);
    v60 = (uint8x8_t *)((char *)v59 + a3);
    v61 = (int8x8_t *)((char *)v60 + a3);
    v62 = *(int8x8_t *)((char *)v61 + a3);
    v63 = *v61;
    v64 = *v60;
    v65 = *v59;
    v66 = 7 * a3;
    v67 = 6 * a3;
    v68 = 4 * a3;
    v69 = 5 * a3;
    v70 = a2;
    do
    {
      v71 = *(uint8x8_t *)(a6 + v20);
      v72 = *(int8x8_t *)((char *)v59 + v68);
      v73 = vrhadd_u8(v64, (uint8x8_t)v63);
      v74 = *(int8x8_t *)((char *)v59 + v69);
      v75 = vrhadd_u8((uint8x8_t)v72, (uint8x8_t)v62);
      v76 = vabd_u8((uint8x8_t)v63, (uint8x8_t)v62);
      v77 = vabd_u8((uint8x8_t)v63, (uint8x8_t)v72);
      v78 = vbsl_s8((int8x8_t)vcgt_u8(v71, vmax_u8(v77, vmax_u8(v76, vmax_u8(vabd_u8(v65, (uint8x8_t)v63), vabd_u8(v64, (uint8x8_t)v63))))), (int8x8_t)vrhadd_u8(vrhadd_u8(vrhadd_u8(v65, v64), v75), (uint8x8_t)v63), v63);
      v79 = vrhadd_u8((uint8x8_t)v63, (uint8x8_t)v62);
      v80 = *(uint8x8_t *)((char *)v59 + v67);
      v81 = vmax_u8(vabd_u8(v64, (uint8x8_t)v62), v76);
      v82 = vabd_u8((uint8x8_t)v62, (uint8x8_t)v72);
      v83 = vabd_u8((uint8x8_t)v62, (uint8x8_t)v74);
      v84 = vbsl_s8((int8x8_t)vcgt_u8(v71, vmax_u8(v83, vmax_u8(v82, v81))), (int8x8_t)vrhadd_u8(vrhadd_u8(v73, vrhadd_u8((uint8x8_t)v74, (uint8x8_t)v72)), (uint8x8_t)v62), v62);
      v85 = *(uint8x8_t *)((char *)v59 + v66);
      v59 = (uint8x8_t *)((char *)v59 + 2 * v58 + v58 + v58);
      v86 = vmax_u8(v77, v82);
      v87 = vabd_u8((uint8x8_t)v72, (uint8x8_t)v74);
      *v70 = v78;
      v88 = (int8x8_t *)((char *)v70 + a4);
      result = (int8x8_t *)((char *)v88 + a4);
      v89 = (int8x8_t *)((char *)result + a4);
      *v88 = v84;
      v70 = (int8x8_t *)((char *)v89 + a4);
      v57 += 4;
      v65 = (uint8x8_t)v72;
      *result = vbsl_s8((int8x8_t)vcgt_u8(v71, vmax_u8(vabd_u8(v80, (uint8x8_t)v72), vmax_u8(v87, v86))), (int8x8_t)vrhadd_u8(vrhadd_u8(v79, vrhadd_u8(v80, (uint8x8_t)v74)), (uint8x8_t)v72), v72);
      *v89 = vbsl_s8((int8x8_t)vcgt_u8(v71, vmax_u8(vabd_u8(v85, (uint8x8_t)v74), vmax_u8(vabd_u8(v80, (uint8x8_t)v74), vmax_u8(v83, v87)))), (int8x8_t)vrhadd_u8(vrhadd_u8(v75, vrhadd_u8(v85, v80)), (uint8x8_t)v74), v74);
      v64 = (uint8x8_t)v74;
      v63 = (int8x8_t)v80;
      v62 = (int8x8_t)v85;
    }
    while (v57 < a7);
  }
  ++a2;
LABEL_16:
  if (a7 >= 1 && a5 >= 1)
  {
    v90 = 0;
    v91 = (int32x2_t *)((char *)a2 - a5);
    v92 = 2 * ~(3 * a4);
    do
    {
      v93 = 0;
      v94 = (int32x2_t *)((char *)v91 + a4 + a4);
      v95 = *v94;
      v96 = (int32x2_t *)((char *)v94 + a4);
      v97 = *v96;
      v98 = (int32x2_t *)((char *)v96 + a4);
      v99 = *v98;
      v100 = (int32x2_t *)((char *)v98 + a4);
      v101 = *v100;
      v102 = (int32x2_t *)((char *)v100 + a4);
      v103 = (int8x8_t)vtrn1_s16((int16x4_t)vzip1_s32(*v91, v99), (int16x4_t)vzip1_s32(v95, *v102));
      v104 = (int8x8_t)vtrn1_s16((int16x4_t)vzip1_s32(*(int32x2_t *)((char *)v91 + a4), v101), (int16x4_t)vzip1_s32(v97, *(int32x2_t *)((char *)v102 + a4)));
      v105 = vtrn1_s8(v103, v104);
      v106 = vtrn2_s8(v103, v104);
      v107 = v105;
      *(int8x8_t *)v108.i8 = v105;
      do
      {
        a8.i64[0] = *(_QWORD *)(a6 + v93);
        *(int32x2_t *)a13.i8 = *(int32x2_t *)((char *)v91 + v93 + 2);
        v109 = (unint64_t *)((char *)v91 + v93 + a4 + 2);
        a14.i64[0] = *v109;
        v110 = (unint64_t *)((char *)v109 + a4);
        a15.i64[0] = *v110;
        v111 = (uint64_t *)((char *)v110 + a4);
        v15.i64[0] = *v111;
        v112 = (uint64_t *)((char *)v111 + a4);
        v16.i64[0] = *v112;
        v113 = (uint64_t *)((char *)v112 + a4);
        v17.i64[0] = *v113;
        v114 = (uint64_t *)((char *)v113 + a4);
        v18.i64[0] = *v114;
        v115 = (unint64_t *)((char *)v114 + a4);
        v116 = (int16x8_t)vzip1q_s8(a13, (int8x16_t)a14);
        a14.i64[0] = *v115;
        v117 = (int16x8_t)vzip1q_s8(a15, v15);
        v118 = (int16x8_t)vzip1q_s8(v16, v17);
        v119 = (int16x8_t)vzip1q_s8(v18, (int8x16_t)a14);
        v120 = (int32x4_t)vzip1q_s16(v116, v117);
        v121 = (int32x4_t)vzip2q_s16(v116, v117);
        v122 = (int32x4_t)vzip1q_s16(v118, v119);
        v123 = (int32x4_t)vzip2q_s16(v118, v119);
        v124 = (int8x16_t)vzip1q_s32(v120, v122);
        v125 = (int8x16_t)vzip2q_s32(v120, v122);
        *(uint8x8_t *)v120.i8 = vrhadd_u8(*(uint8x8_t *)v108.i8, (uint8x8_t)v107);
        *(uint8x8_t *)v17.i8 = vabd_u8(*(uint8x8_t *)v108.i8, (uint8x8_t)v105);
        v108 = (int8x16_t)vzip1q_s32(v121, v123);
        v126 = (int8x16_t)vzip2q_s32(v121, v123);
        v127 = vextq_s8(v124, v124, 8uLL);
        v18 = vextq_s8(v125, v125, 8uLL);
        *(uint8x8_t *)v19.i8 = vabd_u8((uint8x8_t)v107, (uint8x8_t)v105);
        v128 = vrhadd_u8((uint8x8_t)v107, (uint8x8_t)v105);
        v129 = vabd_u8((uint8x8_t)v107, (uint8x8_t)v106);
        v107 = (int8x8_t)vextq_s8(v108, v108, 8uLL).u64[0];
        v130 = (int8x8_t)vceqd_s64(a5 - 8, v93);
        v131 = vrhadd_u8(*(uint8x8_t *)v124.i8, (uint8x8_t)v106);
        *(uint8x8_t *)v17.i8 = vmax_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v19.i8);
        *(uint8x8_t *)v19.i8 = vabd_u8((uint8x8_t)v105, (uint8x8_t)v106);
        v132 = vabd_u8((uint8x8_t)v105, *(uint8x8_t *)v124.i8);
        *(int8x8_t *)v120.i8 = vbsl_s8((int8x8_t)vcgt_u8(*(uint8x8_t *)a8.i8, vmax_u8(v132, vmax_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)v17.i8))), (int8x8_t)vrhadd_u8(vrhadd_u8(*(uint8x8_t *)v120.i8, v131), (uint8x8_t)v105), v105);
        *(uint8x8_t *)v17.i8 = vrhadd_u8(*(uint8x8_t *)v127.i8, *(uint8x8_t *)v124.i8);
        *(uint8x8_t *)v19.i8 = vmax_u8(v129, *(uint8x8_t *)v19.i8);
        v133 = vabd_u8((uint8x8_t)v106, *(uint8x8_t *)v124.i8);
        v134 = vabd_u8((uint8x8_t)v106, *(uint8x8_t *)v127.i8);
        *(int8x8_t *)v19.i8 = vbsl_s8((int8x8_t)vcgt_u8(*(uint8x8_t *)a8.i8, vmax_u8(v134, vmax_u8(v133, *(uint8x8_t *)v19.i8))), (int8x8_t)vrhadd_u8(vrhadd_u8(v128, *(uint8x8_t *)v17.i8), (uint8x8_t)v106), v106);
        v135 = vrhadd_u8((uint8x8_t)v105, (uint8x8_t)v106);
        v106 = vbsl_s8(v130, v107, (int8x8_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL));
        v105 = vbsl_s8(v130, v107, *(int8x8_t *)v126.i8);
        *(uint8x8_t *)v126.i8 = vrhadd_u8(*(uint8x8_t *)v125.i8, *(uint8x8_t *)v127.i8);
        v136 = vabd_u8(*(uint8x8_t *)v124.i8, *(uint8x8_t *)v127.i8);
        v137 = vmax_u8(v136, vmax_u8(v132, v133));
        v138 = vabd_u8(*(uint8x8_t *)v124.i8, *(uint8x8_t *)v125.i8);
        *(int8x8_t *)v124.i8 = vbsl_s8((int8x8_t)vcgt_u8(*(uint8x8_t *)a8.i8, vmax_u8(v138, v137)), (int8x8_t)vrhadd_u8(vrhadd_u8(v135, *(uint8x8_t *)v126.i8), *(uint8x8_t *)v124.i8), *(int8x8_t *)v124.i8);
        v139 = vrhadd_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v125.i8);
        v140 = (int8x8_t)vrhadd_u8(vrhadd_u8(v131, v139), *(uint8x8_t *)v127.i8);
        v141 = vabd_u8(*(uint8x8_t *)v127.i8, *(uint8x8_t *)v125.i8);
        v142 = vmax_u8(v141, vmax_u8(v134, v136));
        v143 = vabd_u8(*(uint8x8_t *)v127.i8, *(uint8x8_t *)v18.i8);
        *(int8x8_t *)v127.i8 = vbsl_s8((int8x8_t)vcgt_u8(*(uint8x8_t *)a8.i8, vmax_u8(v143, v142)), v140, *(int8x8_t *)v127.i8);
        v144 = vrhadd_u8(*(uint8x8_t *)v108.i8, *(uint8x8_t *)v18.i8);
        v145 = vmax_u8(v138, v141);
        v146 = vabd_u8(*(uint8x8_t *)v125.i8, *(uint8x8_t *)v18.i8);
        v147 = vabd_u8(*(uint8x8_t *)v125.i8, *(uint8x8_t *)v108.i8);
        *(int8x8_t *)v125.i8 = vbsl_s8((int8x8_t)vcgt_u8(*(uint8x8_t *)a8.i8, vmax_u8(v147, vmax_u8(v146, v145))), (int8x8_t)vrhadd_u8(vrhadd_u8(*(uint8x8_t *)v17.i8, v144), *(uint8x8_t *)v125.i8), *(int8x8_t *)v125.i8);
        v148 = vabd_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v108.i8);
        *(uint8x8_t *)v17.i8 = vmax_u8(v148, vmax_u8(v143, v146));
        v149 = vabd_u8(*(uint8x8_t *)v18.i8, (uint8x8_t)v107);
        *(int8x8_t *)v126.i8 = vbsl_s8((int8x8_t)vcgt_u8(*(uint8x8_t *)a8.i8, vmax_u8(v149, *(uint8x8_t *)v17.i8)), (int8x8_t)vrhadd_u8(vrhadd_u8(*(uint8x8_t *)v126.i8, vrhadd_u8((uint8x8_t)v107, *(uint8x8_t *)v108.i8)), *(uint8x8_t *)v18.i8), *(int8x8_t *)v18.i8);
        *(uint8x8_t *)v17.i8 = vrhadd_u8(vrhadd_u8(v139, vrhadd_u8((uint8x8_t)v105, (uint8x8_t)v107)), *(uint8x8_t *)v108.i8);
        v150 = vmax_u8(v147, v148);
        v151 = vabd_u8(*(uint8x8_t *)v108.i8, (uint8x8_t)v107);
        *(int8x8_t *)v17.i8 = vbsl_s8((int8x8_t)vcgt_u8(*(uint8x8_t *)a8.i8, vmax_u8(vabd_u8((uint8x8_t)v105, *(uint8x8_t *)v108.i8), vmax_u8(v151, v150))), *(int8x8_t *)v17.i8, *(int8x8_t *)v108.i8);
        *(int8x8_t *)a8.i8 = vbsl_s8((int8x8_t)vcgt_u8(*(uint8x8_t *)a8.i8, vmax_u8(vabd_u8((uint8x8_t)v106, (uint8x8_t)v107), vmax_u8(vabd_u8((uint8x8_t)v105, (uint8x8_t)v107), vmax_u8(v149, v151)))), (int8x8_t)vrhadd_u8(vrhadd_u8(v144, vrhadd_u8((uint8x8_t)v106, (uint8x8_t)v105)), (uint8x8_t)v107), v107);
        v152 = (int16x8_t)vzip1q_s8((int8x16_t)v120, v19);
        v153 = (int16x8_t)vzip1q_s8(v124, v127);
        v154 = (int16x8_t)vzip1q_s8(v125, v126);
        v155 = (int16x8_t)vzip1q_s8(v17, (int8x16_t)a8);
        v156 = (int32x4_t)vzip1q_s16(v152, v153);
        v157 = (int32x4_t)vzip1q_s16(v154, v155);
        v158 = (int8x16_t)vzip1q_s32(v156, v157);
        *(int32x2_t *)((char *)v91 + v93) = *(int32x2_t *)v158.i8;
        v159 = v93 + 8;
        v160 = (int32x4_t)vzip2q_s16(v152, v153);
        v161 = (int32x4_t)vzip2q_s16(v154, v155);
        a13 = (int8x16_t)vzip2q_s32(v156, v157);
        a14 = vzip1q_s32(v160, v161);
        a8 = vzip2q_s32(v160, v161);
        a15 = vextq_s8(v158, v158, 8uLL);
        v15 = vextq_s8(a13, a13, 8uLL);
        v16 = vextq_s8((int8x16_t)a14, (int8x16_t)a14, 8uLL);
        v17 = vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL);
        *(unint64_t *)((char *)v115 + v92) = a15.i64[0];
        v162 = (unint64_t *)((char *)v115 + v92 + a4);
        *v162 = a13.i64[0];
        v163 = (_QWORD *)((char *)v162 + a4);
        *v163 = v15.i64[0];
        v164 = (_QWORD *)((char *)v163 + a4);
        *v164 = a14.i64[0];
        *(_QWORD *)((char *)v164 + a4) = v16.i64[0];
        v165 = (_QWORD *)((char *)v164 + a4 + a4);
        *v165 = a8.i64[0];
        *(_QWORD *)((char *)v165 + a4) = v17.i64[0];
        v93 = v159;
      }
      while (v159 < a5);
      v91 += a4;
      v90 += 8;
    }
    while (v90 < a7);
  }
  return result;
}

unsigned __int8 *vpx_mbpost_proc_across_ip_neon(unsigned __int8 *result, int a2, int a3, int a4, unsigned int a5)
{
  int v5;
  int32x4_t v6;
  int32x4_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int32x4_t v23;
  int16x4_t v24;
  uint8x8_t v25;
  const char *v26;
  uint8x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int8x8_t v30;
  int8x16_t v31;
  int16x4_t v32;
  int8x16_t v33;
  uint16x8_t v34;
  int32x4_t v35;
  unsigned __int8 *v36;

  if (a3 >= 1 && a4 >= 1)
  {
    v5 = 0;
    v6 = vdupq_n_s32(a5);
    v7.i64[0] = 0xF0000000FLL;
    v7.i64[1] = 0xF0000000FLL;
    do
    {
      v8 = 0;
      v9 = *result;
      v10 = result[1];
      v11 = result[2];
      v12 = v10 * v10 + 9 * v9 * v9 + v11 * v11;
      v13 = v10 + v11;
      v14 = result[3];
      v15 = v12 + v14 * v14;
      v16 = v13 + v14;
      v17 = result[4];
      v18 = 9 * v9 + v16;
      v19 = result[5];
      v20 = v15 + v17 * v17 + v19 * v19;
      v21 = v17 + v19;
      v22 = result[6];
      v23 = vdupq_n_s32(v20 + v22 * v22 + 16);
      v24 = vdup_n_s16(v18 + v21 + v22);
      v25 = (uint8x8_t)vdup_n_s8(v9);
      do
      {
        v36 = &result[v8];
        if (a4 - 8 == v8)
        {
          v26 = (const char *)(v36 + 7);
          v27 = (uint8x8_t)vld1_dup_s8(v26);
        }
        else
        {
          v27 = *(uint8x8_t *)(v36 + 7);
        }
        v28 = (int16x8_t)vsubl_u8(v27, v25);
        v29 = (int16x8_t)vaddl_u8(v27, v25);
        v30 = *(int8x8_t *)&result[v8];
        v31 = (int8x16_t)vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v29.i8);
        v32 = (int16x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
        v33 = (int8x16_t)vmull_high_s16(v28, v29);
        *(int16x4_t *)v34.i8 = vadd_s16(vadd_s16(vadd_s16(*(int16x4_t *)v28.i8, vdup_lane_s16(v24, 3)), (int16x4_t)vext_s8(0, *(int8x8_t *)v28.i8, 2uLL)), vadd_s16((int16x4_t)vext_s8(0, *(int8x8_t *)v28.i8, 4uLL), (int16x4_t)vext_s8(0, *(int8x8_t *)v28.i8, 6uLL)));
        v35 = vaddq_s32(vaddq_s32(vmlal_s16(vdupq_laneq_s32(v23, 3), *(int16x4_t *)v28.i8, *(int16x4_t *)v29.i8), (int32x4_t)vextq_s8((int8x16_t)0, v31, 4uLL)), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)0, v31, 8uLL), (int32x4_t)vextq_s8((int8x16_t)0, v31, 0xCuLL)));
        v24 = vadd_s16(vadd_s16(vadd_s16((int16x4_t)vext_s8(0, (int8x8_t)v32, 2uLL), v32), vadd_s16((int16x4_t)vext_s8(0, (int8x8_t)v32, 4uLL), (int16x4_t)vext_s8(0, (int8x8_t)v32, 6uLL))), vdup_lane_s16(*(int16x4_t *)v34.i8, 3));
        v23 = vaddq_s32(vaddq_s32(vmlal_high_s16((int32x4_t)vextq_s8((int8x16_t)0, v33, 4uLL), v28, v29), vaddq_s32((int32x4_t)vextq_s8((int8x16_t)0, v33, 8uLL), (int32x4_t)vextq_s8((int8x16_t)0, v33, 0xCuLL))), vdupq_laneq_s32(v35, 3));
        v34.u64[1] = (unint64_t)v24;
        *(int8x8_t *)&result[v8] = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_s32(v6, vmlsl_s16(vmulq_s32(v35, v7), *(int16x4_t *)v34.i8, *(int16x4_t *)v34.i8)), (int16x8_t)vcgtq_s32(v6, vmlsl_s16(vmulq_s32(v23, v7), v24, v24)))), vqrshrun_n_s16((int16x8_t)vaddw_u8(v34, (uint8x8_t)v30), 4uLL), v30);
        v8 += 8;
        v25 = (uint8x8_t)v30;
      }
      while (v8 < a4);
      result += a2;
      ++v5;
    }
    while (v5 != a3);
  }
  return result;
}

uint8x8_t *vpx_mbpost_proc_down_neon(uint8x8_t *result, int a2, int a3, int a4, unsigned int a5)
{
  int v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8x8_t v15;
  int32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8x8_t v20;
  int16x8_t v21;
  uint8x8_t v22;
  int16x8_t v23;
  uint8x8_t v24;
  int16x8_t v25;
  uint8x8_t v26;
  int16x8_t v27;
  uint8x8_t v28;
  int16x8_t v29;
  uint8x8_t v30;
  int16x8_t v31;
  int8x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int32x4_t v35;
  int32x4_t v36;
  uint16x8_t v37;
  uint8x8_t v38;
  uint8x8_t v39;
  uint8x8_t v40;
  int16x8_t v41;
  uint8x8_t v42;
  uint8x8_t v43;
  uint8x8_t v44;
  uint8x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  uint8x8_t v48;

  if (a4 >= 1 && a3 >= 1)
  {
    v5 = 0;
    v6 = vdupq_n_s32(a5);
    v7 = a2;
    v8 = a3;
    v9 = 2 * a2;
    v10 = 3 * a2;
    v11 = 6 * a2;
    v12 = 4 * a2;
    v13 = 5 * a2;
    v14 = a3;
    v15 = 0;
    v16.i64[0] = 0xF0000000FLL;
    v16.i64[1] = 0xF0000000FLL;
    v17 = (uint64_t)&result[a2] - a2;
    do
    {
      v18 = 0;
      v19 = 0;
      v20 = *(uint8x8_t *)((char *)result + v11);
      v21 = (int16x8_t)vmovl_u8(v20);
      v22 = *(uint8x8_t *)((char *)result + v13);
      v23 = (int16x8_t)vmovl_u8(v22);
      v24 = *(uint8x8_t *)((char *)result + v12);
      v25 = (int16x8_t)vmovl_u8(v24);
      v26 = *(uint8x8_t *)((char *)result + v10);
      v27 = (int16x8_t)vmovl_u8(v26);
      v28 = *(uint8x8_t *)((char *)result + v9);
      v29 = (int16x8_t)vmovl_u8(v28);
      v30 = *(uint8x8_t *)((char *)result + v7);
      v31 = (int16x8_t)vmovl_u8(v30);
      v32 = (int8x8_t)*result;
      v33 = (int16x8_t)vmovl_u8(*result);
      v34 = (int16x8_t)vmull_u8(*result, (uint8x8_t)0x909090909090909);
      v35 = vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmull_high_s16(v23, v23), v21, v21), v25, v25), v27, v27), v29, v29), v31, v31), v34, v33);
      v36 = vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v23.i8), *(int16x4_t *)v21.i8, *(int16x4_t *)v21.i8), *(int16x4_t *)v25.i8, *(int16x4_t *)v25.i8), *(int16x4_t *)v27.i8, *(int16x4_t *)v27.i8), *(int16x4_t *)v29.i8, *(int16x4_t *)v29.i8), *(int16x4_t *)v31.i8, *(int16x4_t *)v31.i8), *(int16x4_t *)v34.i8, *(int16x4_t *)v33.i8);
      v37 = vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddl_u8(v22, v20), v24), v26), v28), v30);
      v38 = *result;
      v39 = *result;
      v40 = *result;
      v41 = (int16x8_t)vmlal_u8(v37, *result, (uint8x8_t)0x909090909090909);
      v42 = *result;
      v43 = *result;
      v44 = *result;
      v45 = *result;
      do
      {
        v48 = v44;
        v44 = v43;
        v43 = v42;
        v42 = v40;
        v40 = v39;
        v39 = v38;
        v38 = (uint8x8_t)v32;
        if (v19 + 7 < v8)
          v15 = *(uint8x8_t *)(v17 + v18);
        v32 = *(int8x8_t *)((char *)result + v18);
        v46 = (int16x8_t)vsubl_u8(v15, v45);
        v47 = (int16x8_t)vaddl_u8(v15, v45);
        v41 = vaddq_s16(v46, v41);
        v36 = vmlal_s16(v36, *(int16x4_t *)v46.i8, *(int16x4_t *)v47.i8);
        v35 = vmlal_high_s16(v35, v46, v47);
        *(int8x8_t *)((char *)result + v18) = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_s32(v6, vmlsl_s16(vmulq_s32(v36, v16), *(int16x4_t *)v41.i8, *(int16x4_t *)v41.i8)), (int16x8_t)vcgtq_s32(v6, vmlsl_high_s16(vmulq_s32(v35, v16), v41, v41)))), vqshrun_n_s16(vaddq_s16((int16x8_t)vaddw_u8((uint16x8_t)v41, (uint8x8_t)v32), *(int16x8_t *)((char *)&vpx_rv + 2 * (v19++ & 0x7F))), 4uLL), v32);
        v18 += v7;
        v45 = v48;
      }
      while (v14 != v19);
      ++result;
      v5 += 8;
      v17 += 8;
    }
    while (v5 < a4);
  }
  return result;
}

uint64_t vp8_mb_init_dequantizer(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  _WORD *v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;

  if (*(_BYTE *)(a2 + 3968))
  {
    v2 = *(_QWORD *)(a2 + 3872);
    if (*(_BYTE *)(a2 + 3971) == 1)
      v3 = *(char *)(a2 + *(unsigned __int8 *)(v2 + 11) + 3975);
    else
      v3 = *(_DWORD *)(result + 7456) + *(char *)(a2 + *(unsigned __int8 *)(v2 + 11) + 3975);
    if (v3 >= 127)
      v3 = 127;
    v4 = v3 & ~(v3 >> 31);
  }
  else
  {
    v4 = *(_DWORD *)(result + 7456);
  }
  *(_WORD *)(a2 + 2048) = 1;
  v5 = (_WORD *)(result + 4 * v4);
  *(_WORD *)(a2 + 2016) = v5[2336];
  *(_WORD *)(a2 + 2080) = v5[2592];
  *(_WORD *)(a2 + 2112) = v5[2848];
  v6 = v5[2337];
  *(_WORD *)(a2 + 2018) = v6;
  *(_WORD *)(a2 + 2050) = v6;
  *(_WORD *)(a2 + 2082) = v5[2593];
  *(_WORD *)(a2 + 2114) = v5[2849];
  v7 = v5[2337];
  *(_WORD *)(a2 + 2020) = v7;
  *(_WORD *)(a2 + 2052) = v7;
  *(_WORD *)(a2 + 2084) = v5[2593];
  *(_WORD *)(a2 + 2116) = v5[2849];
  v8 = v5[2337];
  *(_WORD *)(a2 + 2022) = v8;
  *(_WORD *)(a2 + 2054) = v8;
  *(_WORD *)(a2 + 2086) = v5[2593];
  *(_WORD *)(a2 + 2118) = v5[2849];
  v9 = v5[2337];
  *(_WORD *)(a2 + 2024) = v9;
  *(_WORD *)(a2 + 2056) = v9;
  *(_WORD *)(a2 + 2088) = v5[2593];
  *(_WORD *)(a2 + 2120) = v5[2849];
  v10 = v5[2337];
  *(_WORD *)(a2 + 2026) = v10;
  *(_WORD *)(a2 + 2058) = v10;
  *(_WORD *)(a2 + 2090) = v5[2593];
  *(_WORD *)(a2 + 2122) = v5[2849];
  v11 = v5[2337];
  *(_WORD *)(a2 + 2028) = v11;
  *(_WORD *)(a2 + 2060) = v11;
  *(_WORD *)(a2 + 2092) = v5[2593];
  *(_WORD *)(a2 + 2124) = v5[2849];
  v12 = v5[2337];
  *(_WORD *)(a2 + 2030) = v12;
  *(_WORD *)(a2 + 2062) = v12;
  *(_WORD *)(a2 + 2094) = v5[2593];
  *(_WORD *)(a2 + 2126) = v5[2849];
  v13 = v5[2337];
  *(_WORD *)(a2 + 2032) = v13;
  *(_WORD *)(a2 + 2064) = v13;
  *(_WORD *)(a2 + 2096) = v5[2593];
  *(_WORD *)(a2 + 2128) = v5[2849];
  v14 = v5[2337];
  *(_WORD *)(a2 + 2034) = v14;
  *(_WORD *)(a2 + 2066) = v14;
  *(_WORD *)(a2 + 2098) = v5[2593];
  *(_WORD *)(a2 + 2130) = v5[2849];
  v15 = v5[2337];
  *(_WORD *)(a2 + 2036) = v15;
  *(_WORD *)(a2 + 2068) = v15;
  *(_WORD *)(a2 + 2100) = v5[2593];
  *(_WORD *)(a2 + 2132) = v5[2849];
  v16 = v5[2337];
  *(_WORD *)(a2 + 2038) = v16;
  *(_WORD *)(a2 + 2070) = v16;
  *(_WORD *)(a2 + 2102) = v5[2593];
  *(_WORD *)(a2 + 2134) = v5[2849];
  v17 = v5[2337];
  *(_WORD *)(a2 + 2040) = v17;
  *(_WORD *)(a2 + 2072) = v17;
  *(_WORD *)(a2 + 2104) = v5[2593];
  *(_WORD *)(a2 + 2136) = v5[2849];
  v18 = v5[2337];
  *(_WORD *)(a2 + 2042) = v18;
  *(_WORD *)(a2 + 2074) = v18;
  *(_WORD *)(a2 + 2106) = v5[2593];
  *(_WORD *)(a2 + 2138) = v5[2849];
  v19 = v5[2337];
  *(_WORD *)(a2 + 2044) = v19;
  *(_WORD *)(a2 + 2076) = v19;
  *(_WORD *)(a2 + 2108) = v5[2593];
  *(_WORD *)(a2 + 2140) = v5[2849];
  v20 = v5[2337];
  *(_WORD *)(a2 + 2046) = v20;
  *(_WORD *)(a2 + 2078) = v20;
  *(_WORD *)(a2 + 2110) = v5[2593];
  *(_WORD *)(a2 + 2142) = v5[2849];
  return result;
}

uint64_t vp8_decode_frame(uint64_t a1)
{
  uint64_t v1;
  uint8x8_t *v2;
  unint64_t v3;
  int v4;
  __int128 *v5;
  _DWORD *v6;
  int v7;
  void (*v8)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v9;
  uint8x8_t *v10;
  int v11;
  uint8x8_t *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t result;
  _BYTE *v34;
  int v35;
  void (*v36)(void);
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int8x8_t v41;
  unint64_t v42;
  int8x8_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint8x8_t *v49;
  int8x8_t v50;
  unsigned int v51;
  BOOL v52;
  int v53;
  uint8x8_t *v54;
  uint8x8_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint8x8_t *v59;
  uint8x8_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  int8x8_t v64;
  unsigned int v65;
  int8x8_t v66;
  uint8x8_t *v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  void (*v71)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v72;
  BOOL v73;
  signed int v74;
  int v75;
  uint8x8_t *v76;
  uint8x8_t v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v82;
  uint64_t v83;
  uint8x8_t *v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int32x4_t v91;
  int32x4_t v92;
  uint64_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  uint8x8_t v97;
  uint16x8_t v98;
  uint32x4_t v99;
  uint64x2_t v100;
  uint64x2_t v101;
  uint64x2_t v102;
  uint32x4_t v103;
  uint64x2_t v104;
  uint64x2_t v105;
  uint64x2_t v106;
  uint64x2_t v107;
  uint64x2_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  uint64_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  uint8x8_t v121;
  uint16x8_t v122;
  uint32x4_t v123;
  uint64x2_t v124;
  uint64x2_t v125;
  uint64x2_t v126;
  uint32x4_t v127;
  uint64x2_t v128;
  uint64x2_t v129;
  uint64x2_t v130;
  uint64x2_t v131;
  uint64x2_t v132;
  int8x16_t v133;
  uint8x8_t v134;
  unsigned int v135;
  int v136;
  int8x8_t v137;
  unsigned int v138;
  uint64_t v139;
  uint8x8_t *v140;
  signed int v141;
  unint64_t v142;
  uint64_t v143;
  int v144;
  void (*v145)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v146;
  BOOL v147;
  int v148;
  uint8x8_t *v150;
  uint8x8_t v151;
  int v152;
  int v153;
  unsigned int v154;
  uint64_t v156;
  uint64_t v157;
  uint8x8_t *v158;
  int32x4_t v159;
  signed int v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int8x16_t v165;
  int32x4_t v166;
  int32x4_t v167;
  uint64_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  uint8x8_t v172;
  uint16x8_t v173;
  uint32x4_t v174;
  uint64x2_t v175;
  uint64x2_t v176;
  uint64x2_t v177;
  uint32x4_t v178;
  uint64x2_t v179;
  uint64x2_t v180;
  uint64x2_t v181;
  uint64x2_t v182;
  uint64x2_t v183;
  int8x16_t v184;
  uint8x8_t v185;
  unsigned int v186;
  int8x8_t v187;
  int v188;
  int v189;
  int v190;
  uint8x8_t *v191;
  signed int v192;
  unint64_t v193;
  uint64_t v194;
  int v195;
  void (*v196)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v197;
  unsigned int v198;
  BOOL v199;
  int v200;
  uint8x8_t *v202;
  uint8x8_t v203;
  int v204;
  int v205;
  unsigned int v206;
  uint64_t v208;
  uint64_t v209;
  uint8x8_t *v210;
  int32x4_t v211;
  int v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int8x16_t v217;
  int32x4_t v218;
  int32x4_t v219;
  uint64_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  uint8x8_t v224;
  uint16x8_t v225;
  uint32x4_t v226;
  uint64x2_t v227;
  uint64x2_t v228;
  uint64x2_t v229;
  uint32x4_t v230;
  uint64x2_t v231;
  uint64x2_t v232;
  uint64x2_t v233;
  uint64x2_t v234;
  uint64x2_t v235;
  int8x16_t v236;
  uint8x8_t v237;
  unsigned int v238;
  int v239;
  int8x8_t v240;
  unsigned int v241;
  uint64_t v242;
  int8x8_t v243;
  char v244;
  uint8x8_t *v245;
  unint64_t v246;
  uint64_t v247;
  int v248;
  void (*v249)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v250;
  unsigned int v251;
  BOOL v252;
  signed int v253;
  int v254;
  uint8x8_t *v255;
  uint8x8_t v256;
  int v257;
  int v258;
  unsigned int v259;
  uint64_t v261;
  uint64_t v262;
  uint8x8_t *v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int8x16_t v269;
  int32x4_t v270;
  int32x4_t v271;
  uint64_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  uint8x8_t v276;
  uint16x8_t v277;
  uint32x4_t v278;
  uint64x2_t v279;
  uint64x2_t v280;
  uint64x2_t v281;
  uint32x4_t v282;
  uint64x2_t v283;
  uint64x2_t v284;
  uint64x2_t v285;
  uint64x2_t v286;
  uint64x2_t v287;
  int8x16_t v288;
  uint8x8_t v289;
  unsigned int v290;
  int v291;
  int v292;
  int8x8_t v293;
  unsigned int v294;
  uint64_t v295;
  uint8x8_t *v296;
  signed int v297;
  unint64_t v298;
  uint64_t v299;
  int v300;
  void (*v301)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v302;
  BOOL v303;
  int v304;
  uint8x8_t *v306;
  uint8x8_t v307;
  int v308;
  int v309;
  unsigned int v310;
  uint64_t v312;
  uint64_t v313;
  uint8x8_t *v314;
  int32x4_t v315;
  signed int v316;
  int32x4_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int32x4_t v320;
  int8x16_t v321;
  int32x4_t v322;
  int32x4_t v323;
  uint64_t v324;
  int8x16_t v325;
  int8x16_t v326;
  int8x16_t v327;
  uint8x8_t v328;
  uint16x8_t v329;
  uint32x4_t v330;
  uint64x2_t v331;
  uint64x2_t v332;
  uint64x2_t v333;
  uint32x4_t v334;
  uint64x2_t v335;
  uint64x2_t v336;
  uint64x2_t v337;
  uint64x2_t v338;
  uint64x2_t v339;
  int8x16_t v340;
  uint8x8_t v341;
  unsigned int v342;
  unint64_t v343;
  int8x8_t v344;
  char v345;
  int v346;
  int8x8_t v347;
  unsigned int v348;
  uint8x8_t *v349;
  int32x4_t v350;
  int32x4_t v351;
  uint64_t v352;
  char v353;
  int8x8_t v354;
  int v355;
  int v356;
  unsigned int v357;
  int8x8_t v358;
  uint8x8_t *v359;
  unint64_t v360;
  void (*v361)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v362;
  signed int v363;
  int v364;
  unsigned int v365;
  BOOL v366;
  int v367;
  uint8x8_t v369;
  int v370;
  int v371;
  unsigned int v372;
  uint64_t v374;
  uint64_t v375;
  uint8x8_t *v376;
  int v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int32x4_t v382;
  int8x16_t v383;
  uint64_t v384;
  int8x16_t v385;
  int8x16_t v386;
  int8x16_t v387;
  uint8x8_t v388;
  uint16x8_t v389;
  uint32x4_t v390;
  uint64x2_t v391;
  uint64x2_t v392;
  uint64x2_t v393;
  uint32x4_t v394;
  uint64x2_t v395;
  uint64x2_t v396;
  uint64x2_t v397;
  uint64x2_t v398;
  uint64x2_t v399;
  int8x16_t v400;
  uint8x8_t v401;
  unsigned int v402;
  uint64_t v403;
  unint64_t v404;
  int8x8_t v405;
  int8x8_t v406;
  int v407;
  int v408;
  int8x8_t v409;
  unsigned int v410;
  uint8x8_t *v411;
  unint64_t v412;
  void (*v413)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v414;
  signed int v415;
  int v416;
  BOOL v417;
  int v418;
  uint8x8_t v420;
  int v421;
  int v422;
  unsigned int v423;
  uint64_t v424;
  uint8x8_t *v425;
  signed int v426;
  uint64_t v428;
  int32x4_t v429;
  int32x4_t v430;
  int32x4_t v431;
  int32x4_t v432;
  int32x4_t v433;
  int8x16_t v434;
  uint64_t v435;
  int8x16_t v436;
  int8x16_t v437;
  int8x16_t v438;
  uint8x8_t v439;
  uint16x8_t v440;
  uint32x4_t v441;
  uint64x2_t v442;
  uint64x2_t v443;
  uint64x2_t v444;
  uint32x4_t v445;
  uint64x2_t v446;
  uint64x2_t v447;
  uint64x2_t v448;
  uint64x2_t v449;
  uint64x2_t v450;
  int8x16_t v451;
  uint8x8_t v452;
  unsigned int v453;
  uint64_t v454;
  int8x8_t v455;
  int v456;
  int v457;
  int8x8_t v458;
  unsigned int v459;
  uint8x8_t *v460;
  unint64_t v461;
  void (*v462)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v463;
  signed int v464;
  int v465;
  BOOL v466;
  int v467;
  uint8x8_t v469;
  int v470;
  int v471;
  unsigned int v472;
  uint64_t v474;
  uint64_t v475;
  uint8x8_t *v476;
  signed int v477;
  int32x4_t v478;
  int32x4_t v479;
  int32x4_t v480;
  int32x4_t v481;
  int32x4_t v482;
  int8x16_t v483;
  uint64_t v484;
  int8x16_t v485;
  int8x16_t v486;
  int8x16_t v487;
  uint8x8_t v488;
  uint16x8_t v489;
  uint32x4_t v490;
  uint64x2_t v491;
  uint64x2_t v492;
  uint64x2_t v493;
  uint32x4_t v494;
  uint64x2_t v495;
  uint64x2_t v496;
  uint64x2_t v497;
  uint64x2_t v498;
  uint64x2_t v499;
  int8x16_t v500;
  uint8x8_t v501;
  unsigned int v502;
  uint64_t v503;
  int8x8_t v504;
  int v505;
  int v506;
  int8x8_t v507;
  unsigned int v508;
  uint8x8_t *v509;
  unint64_t v510;
  void (*v511)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v512;
  signed int v513;
  int v514;
  BOOL v515;
  int v516;
  uint8x8_t v518;
  int v519;
  int v520;
  unsigned int v521;
  uint64_t v523;
  uint64_t v524;
  uint8x8_t *v525;
  signed int v526;
  int32x4_t v527;
  int32x4_t v528;
  int32x4_t v529;
  int32x4_t v530;
  int32x4_t v531;
  int8x16_t v532;
  uint64_t v533;
  int8x16_t v534;
  int8x16_t v535;
  int8x16_t v536;
  uint8x8_t v537;
  uint16x8_t v538;
  uint32x4_t v539;
  uint64x2_t v540;
  uint64x2_t v541;
  uint64x2_t v542;
  uint32x4_t v543;
  uint64x2_t v544;
  uint64x2_t v545;
  uint64x2_t v546;
  uint64x2_t v547;
  uint64x2_t v548;
  int8x16_t v549;
  uint8x8_t v550;
  unsigned int v551;
  uint64_t v552;
  int8x8_t v553;
  int v554;
  int v555;
  int8x8_t v556;
  unsigned int v557;
  uint8x8_t *v558;
  unint64_t v559;
  void (*v560)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v561;
  signed int v562;
  int v563;
  BOOL v564;
  int v565;
  uint8x8_t v567;
  int v568;
  int v569;
  unsigned int v570;
  uint64_t v571;
  uint8x8_t *v572;
  signed int v573;
  uint64_t v575;
  int32x4_t v576;
  int32x4_t v577;
  int32x4_t v578;
  int32x4_t v579;
  int32x4_t v580;
  int8x16_t v581;
  uint64_t v582;
  int8x16_t v583;
  int8x16_t v584;
  int8x16_t v585;
  uint8x8_t v586;
  uint16x8_t v587;
  uint32x4_t v588;
  uint64x2_t v589;
  uint64x2_t v590;
  uint64x2_t v591;
  uint32x4_t v592;
  uint64x2_t v593;
  uint64x2_t v594;
  uint64x2_t v595;
  uint64x2_t v596;
  uint64x2_t v597;
  int8x16_t v598;
  uint8x8_t v599;
  unsigned int v600;
  uint64_t v601;
  int8x8_t v602;
  int v603;
  int v604;
  int8x8_t v605;
  unsigned int v606;
  uint8x8_t *v607;
  unint64_t v608;
  void (*v609)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v610;
  signed int v611;
  int v612;
  BOOL v613;
  int v614;
  uint8x8_t v616;
  int v617;
  int v618;
  unsigned int v619;
  uint64_t v621;
  uint64_t v622;
  uint8x8_t *v623;
  signed int v624;
  int32x4_t v625;
  int32x4_t v626;
  int32x4_t v627;
  int32x4_t v628;
  int32x4_t v629;
  int8x16_t v630;
  uint64_t v631;
  int8x16_t v632;
  int8x16_t v633;
  int8x16_t v634;
  uint8x8_t v635;
  uint16x8_t v636;
  uint32x4_t v637;
  uint64x2_t v638;
  uint64x2_t v639;
  uint64x2_t v640;
  uint32x4_t v641;
  uint64x2_t v642;
  uint64x2_t v643;
  uint64x2_t v644;
  uint64x2_t v645;
  uint64x2_t v646;
  int8x16_t v647;
  uint8x8_t v648;
  unsigned int v649;
  uint64_t v650;
  int8x8_t v651;
  char v652;
  int v653;
  int v654;
  int8x8_t v655;
  unsigned int v656;
  char v657;
  uint8x8_t *v658;
  unint64_t v659;
  void (*v660)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v661;
  signed int v662;
  int v663;
  BOOL v664;
  int v665;
  uint8x8_t v667;
  int v668;
  int v669;
  unsigned int v670;
  uint64_t v672;
  uint64_t v673;
  uint8x8_t *v674;
  signed int v675;
  int32x4_t v676;
  int32x4_t v677;
  int32x4_t v678;
  int32x4_t v679;
  int32x4_t v680;
  int8x16_t v681;
  uint64_t v682;
  int8x16_t v683;
  int8x16_t v684;
  int8x16_t v685;
  uint8x8_t v686;
  uint16x8_t v687;
  uint32x4_t v688;
  uint64x2_t v689;
  uint64x2_t v690;
  uint64x2_t v691;
  uint32x4_t v692;
  uint64x2_t v693;
  uint64x2_t v694;
  uint64x2_t v695;
  uint64x2_t v696;
  uint64x2_t v697;
  int8x16_t v698;
  uint8x8_t v699;
  unsigned int v700;
  uint64_t v701;
  int8x8_t v702;
  char v703;
  int v704;
  int v705;
  int8x8_t v706;
  unsigned int v707;
  char v708;
  char v709;
  uint8x8_t *v710;
  unint64_t v711;
  void (*v712)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v713;
  signed int v714;
  int v715;
  BOOL v716;
  int v717;
  uint8x8_t v719;
  int v720;
  int v721;
  unsigned int v722;
  uint64_t v723;
  uint8x8_t *v724;
  signed int v725;
  uint64_t v727;
  int32x4_t v728;
  int32x4_t v729;
  int32x4_t v730;
  int32x4_t v731;
  int32x4_t v732;
  int8x16_t v733;
  uint64_t v734;
  int8x16_t v735;
  int8x16_t v736;
  int8x16_t v737;
  uint8x8_t v738;
  uint16x8_t v739;
  uint32x4_t v740;
  uint64x2_t v741;
  uint64x2_t v742;
  uint64x2_t v743;
  uint32x4_t v744;
  uint64x2_t v745;
  uint64x2_t v746;
  uint64x2_t v747;
  uint64x2_t v748;
  uint64x2_t v749;
  int8x16_t v750;
  uint8x8_t v751;
  unsigned int v752;
  uint64_t v753;
  int8x8_t v754;
  char v755;
  int v756;
  int v757;
  unsigned int v758;
  uint8x8_t *v759;
  unint64_t v760;
  void (*v761)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v762;
  char v763;
  char v764;
  signed int v765;
  int v766;
  BOOL v767;
  int v768;
  char v770;
  char v771;
  char v772;
  char v773;
  int8x8_t v774;
  uint8x8_t v775;
  int v776;
  int v777;
  unsigned int v778;
  uint64_t v779;
  uint8x8_t *v780;
  signed int v781;
  BOOL v782;
  uint64_t v783;
  int32x4_t v784;
  int32x4_t v785;
  int32x4_t v786;
  int32x4_t v787;
  int32x4_t v788;
  int8x16_t v789;
  uint64_t v790;
  int8x16_t v791;
  int8x16_t v792;
  int8x16_t v793;
  uint8x8_t v794;
  uint16x8_t v795;
  uint32x4_t v796;
  uint64x2_t v797;
  uint64x2_t v798;
  uint64x2_t v799;
  uint32x4_t v800;
  uint64x2_t v801;
  uint64x2_t v802;
  uint64x2_t v803;
  uint64x2_t v804;
  uint64x2_t v805;
  int8x16_t v806;
  uint8x8_t v807;
  unsigned int v808;
  uint64_t v809;
  unsigned int v810;
  int8x8_t v811;
  int8x8_t v812;
  int v813;
  uint8x8_t *v814;
  unint64_t v815;
  uint64_t v816;
  int v817;
  void (*v818)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v819;
  unsigned int v820;
  BOOL v821;
  signed int v822;
  int v823;
  uint8x8_t *v824;
  uint8x8_t v825;
  int v826;
  int v827;
  unsigned int v828;
  uint64_t v829;
  uint8x8_t *v830;
  uint8x8_t v831;
  unsigned int v832;
  int v833;
  int8x8_t v834;
  unsigned int v835;
  uint64_t v836;
  uint8x8_t *v837;
  signed int v838;
  unint64_t v839;
  uint64_t v840;
  int v841;
  void (*v842)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v843;
  BOOL v844;
  int v845;
  uint64_t v847;
  int8x8_t v848;
  char v849;
  int v850;
  uint8x8_t *v851;
  uint8x8_t v852;
  int v853;
  int v854;
  unsigned int v855;
  uint64_t v857;
  uint64_t v858;
  uint8x8_t *v859;
  int32x4_t v860;
  signed int v861;
  int32x4_t v862;
  int32x4_t v863;
  int32x4_t v864;
  int32x4_t v865;
  int8x16_t v866;
  int32x4_t v867;
  int32x4_t v868;
  uint64_t v869;
  int8x16_t v870;
  int8x16_t v871;
  int8x16_t v872;
  uint8x8_t v873;
  uint16x8_t v874;
  uint32x4_t v875;
  uint64x2_t v876;
  uint64x2_t v877;
  uint64x2_t v878;
  uint32x4_t v879;
  uint64x2_t v880;
  uint64x2_t v881;
  uint64x2_t v882;
  uint64x2_t v883;
  uint64x2_t v884;
  int8x16_t v885;
  uint8x8_t v886;
  unsigned int v887;
  int8x8_t v888;
  int v889;
  int v890;
  int v891;
  int8x8_t v892;
  unsigned int v893;
  uint64_t v894;
  uint8x8_t *v895;
  signed int v896;
  unint64_t v897;
  uint64_t v898;
  int v899;
  void (*v900)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v901;
  BOOL v902;
  int v903;
  uint8x8_t *v905;
  uint8x8_t v906;
  int v907;
  int v908;
  unsigned int v909;
  uint64_t v911;
  uint64_t v912;
  uint8x8_t *v913;
  int32x4_t v914;
  signed int v915;
  int32x4_t v916;
  int32x4_t v917;
  int32x4_t v918;
  int32x4_t v919;
  int8x16_t v920;
  int32x4_t v921;
  int32x4_t v922;
  uint64_t v923;
  int8x16_t v924;
  int8x16_t v925;
  int8x16_t v926;
  uint8x8_t v927;
  uint16x8_t v928;
  uint32x4_t v929;
  uint64x2_t v930;
  uint64x2_t v931;
  uint64x2_t v932;
  uint32x4_t v933;
  uint64x2_t v934;
  uint64x2_t v935;
  uint64x2_t v936;
  uint64x2_t v937;
  uint64x2_t v938;
  int8x16_t v939;
  uint8x8_t v940;
  unsigned int v941;
  int8x8_t v942;
  int v943;
  int v944;
  int v945;
  int8x8_t v946;
  unsigned int v947;
  uint64_t v948;
  uint8x8_t *v949;
  signed int v950;
  unint64_t v951;
  uint64_t v952;
  int v953;
  void (*v954)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v955;
  BOOL v956;
  int v957;
  uint8x8_t *v959;
  uint8x8_t v960;
  int v961;
  int v962;
  unsigned int v963;
  uint64_t v964;
  uint8x8_t *v965;
  signed int v966;
  uint8x8_t *v967;
  unint64_t v968;
  uint64_t v969;
  int v970;
  void (*v971)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v972;
  unsigned int v973;
  BOOL v974;
  signed int v975;
  int v976;
  uint8x8_t *v977;
  uint8x8_t v978;
  int v979;
  int v980;
  unsigned int v981;
  uint64_t v983;
  uint64_t v984;
  uint8x8_t *v985;
  int32x4_t v986;
  int32x4_t v987;
  int32x4_t v988;
  int32x4_t v989;
  int32x4_t v990;
  int8x16_t v991;
  int32x4_t v992;
  int32x4_t v993;
  uint64_t v994;
  int8x16_t v995;
  int8x16_t v996;
  int8x16_t v997;
  uint8x8_t v998;
  uint16x8_t v999;
  uint32x4_t v1000;
  uint64x2_t v1001;
  uint64x2_t v1002;
  uint64x2_t v1003;
  uint32x4_t v1004;
  uint64x2_t v1005;
  uint64x2_t v1006;
  uint64x2_t v1007;
  uint64x2_t v1008;
  uint64x2_t v1009;
  int8x16_t v1010;
  uint64_t v1012;
  int32x4_t v1013;
  int32x4_t v1014;
  int32x4_t v1015;
  int32x4_t v1016;
  int32x4_t v1017;
  int8x16_t v1018;
  int32x4_t v1019;
  int32x4_t v1020;
  uint64_t v1021;
  int8x16_t v1022;
  int8x16_t v1023;
  int8x16_t v1024;
  uint8x8_t v1025;
  uint16x8_t v1026;
  uint32x4_t v1027;
  uint64x2_t v1028;
  uint64x2_t v1029;
  uint64x2_t v1030;
  uint32x4_t v1031;
  uint64x2_t v1032;
  uint64x2_t v1033;
  uint64x2_t v1034;
  uint64x2_t v1035;
  uint64x2_t v1036;
  int8x16_t v1037;
  uint64_t v1038;
  int32x4_t v1039;
  int32x4_t v1040;
  int32x4_t v1041;
  int32x4_t v1042;
  int32x4_t v1043;
  int8x16_t v1044;
  int32x4_t v1045;
  int32x4_t v1046;
  uint64_t v1047;
  int8x16_t v1048;
  int8x16_t v1049;
  int8x16_t v1050;
  uint8x8_t v1051;
  uint16x8_t v1052;
  uint32x4_t v1053;
  uint64x2_t v1054;
  uint64x2_t v1055;
  uint64x2_t v1056;
  uint32x4_t v1057;
  uint64x2_t v1058;
  uint64x2_t v1059;
  uint64x2_t v1060;
  uint64x2_t v1061;
  uint64x2_t v1062;
  int8x16_t v1063;
  uint8x8_t v1064;
  unsigned int v1065;
  int8x8_t v1066;
  int v1067;
  int v1068;
  int8x8_t v1069;
  unsigned int v1070;
  uint64_t v1071;
  int v1072;
  int v1073;
  uint8x8_t *v1074;
  signed int v1075;
  unint64_t v1076;
  uint64_t v1077;
  int v1078;
  void (*v1079)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1080;
  BOOL v1081;
  int v1082;
  uint8x8_t *v1084;
  uint8x8_t v1085;
  int v1086;
  int v1087;
  unsigned int v1088;
  uint64_t v1089;
  uint8x8_t *v1090;
  signed int v1091;
  BOOL v1092;
  uint64_t v1093;
  int32x4_t v1094;
  int32x4_t v1095;
  int32x4_t v1096;
  int32x4_t v1097;
  int32x4_t v1098;
  int8x16_t v1099;
  int32x4_t v1100;
  int32x4_t v1101;
  uint64_t v1102;
  int8x16_t v1103;
  int8x16_t v1104;
  int8x16_t v1105;
  uint8x8_t v1106;
  uint16x8_t v1107;
  uint32x4_t v1108;
  uint64x2_t v1109;
  uint64x2_t v1110;
  uint64x2_t v1111;
  uint32x4_t v1112;
  uint64x2_t v1113;
  uint64x2_t v1114;
  uint64x2_t v1115;
  uint64x2_t v1116;
  uint64x2_t v1117;
  int8x16_t v1118;
  uint8x8_t v1119;
  unsigned int v1120;
  int8x8_t v1121;
  int v1122;
  int v1123;
  int v1124;
  int v1125;
  int8x8_t v1126;
  unsigned int v1127;
  uint64_t v1128;
  uint8x8_t *v1129;
  signed int v1130;
  unint64_t v1131;
  uint64_t v1132;
  int v1133;
  void (*v1134)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1135;
  int v1136;
  BOOL v1137;
  int v1138;
  uint8x8_t *v1140;
  uint8x8_t v1141;
  int v1142;
  int v1143;
  unsigned int v1144;
  uint64_t v1146;
  uint64_t v1147;
  uint8x8_t *v1148;
  int32x4_t v1149;
  signed int v1150;
  int32x4_t v1151;
  int32x4_t v1152;
  int32x4_t v1153;
  int32x4_t v1154;
  int8x16_t v1155;
  int32x4_t v1156;
  int32x4_t v1157;
  uint64_t v1158;
  int8x16_t v1159;
  int8x16_t v1160;
  int8x16_t v1161;
  uint8x8_t v1162;
  uint16x8_t v1163;
  uint32x4_t v1164;
  uint64x2_t v1165;
  uint64x2_t v1166;
  uint64x2_t v1167;
  uint32x4_t v1168;
  uint64x2_t v1169;
  uint64x2_t v1170;
  uint64x2_t v1171;
  uint64x2_t v1172;
  uint64x2_t v1173;
  int8x16_t v1174;
  uint8x8_t v1175;
  unsigned int v1176;
  int v1177;
  int8x8_t v1178;
  int v1179;
  int v1180;
  int v1181;
  int v1182;
  int8x8_t v1183;
  unsigned int v1184;
  uint64_t v1185;
  uint8x8_t *v1186;
  signed int v1187;
  unint64_t v1188;
  uint64_t v1189;
  int v1190;
  void (*v1191)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1192;
  BOOL v1193;
  int v1194;
  uint8x8_t *v1196;
  uint8x8_t v1197;
  int v1198;
  int v1199;
  unsigned int v1200;
  uint64_t v1201;
  uint8x8_t *v1202;
  signed int v1203;
  uint64_t v1205;
  int32x4_t v1206;
  int32x4_t v1207;
  int32x4_t v1208;
  int32x4_t v1209;
  int32x4_t v1210;
  int8x16_t v1211;
  int32x4_t v1212;
  int32x4_t v1213;
  uint64_t v1214;
  int8x16_t v1215;
  int8x16_t v1216;
  int8x16_t v1217;
  uint8x8_t v1218;
  uint16x8_t v1219;
  uint32x4_t v1220;
  uint64x2_t v1221;
  uint64x2_t v1222;
  uint64x2_t v1223;
  uint32x4_t v1224;
  uint64x2_t v1225;
  uint64x2_t v1226;
  uint64x2_t v1227;
  uint64x2_t v1228;
  uint64x2_t v1229;
  int8x16_t v1230;
  uint8x8_t v1231;
  unsigned int v1232;
  int v1233;
  int8x8_t v1234;
  int v1235;
  int v1236;
  int8x8_t v1237;
  unsigned int v1238;
  uint64_t v1239;
  uint8x8_t *v1240;
  signed int v1241;
  unint64_t v1242;
  uint64_t v1243;
  int v1244;
  void (*v1245)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1246;
  BOOL v1247;
  int v1248;
  uint8x8_t *v1250;
  uint8x8_t v1251;
  int v1252;
  int v1253;
  unsigned int v1254;
  uint64_t v1256;
  uint64_t v1257;
  uint8x8_t *v1258;
  int32x4_t v1259;
  signed int v1260;
  int32x4_t v1261;
  int32x4_t v1262;
  int32x4_t v1263;
  int32x4_t v1264;
  int8x16_t v1265;
  int32x4_t v1266;
  int32x4_t v1267;
  uint64_t v1268;
  int8x16_t v1269;
  int8x16_t v1270;
  int8x16_t v1271;
  uint8x8_t v1272;
  uint16x8_t v1273;
  uint32x4_t v1274;
  uint64x2_t v1275;
  uint64x2_t v1276;
  uint64x2_t v1277;
  uint32x4_t v1278;
  uint64x2_t v1279;
  uint64x2_t v1280;
  uint64x2_t v1281;
  uint64x2_t v1282;
  uint64x2_t v1283;
  int8x16_t v1284;
  uint8x8_t v1285;
  unsigned int v1286;
  int8x8_t v1287;
  int v1288;
  int v1289;
  int v1290;
  int8x8_t v1291;
  unsigned int v1292;
  uint64_t v1293;
  uint8x8_t *v1294;
  signed int v1295;
  unint64_t v1296;
  uint64_t v1297;
  int v1298;
  void (*v1299)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1300;
  BOOL v1301;
  int v1302;
  uint8x8_t *v1304;
  uint8x8_t v1305;
  int v1306;
  int v1307;
  unsigned int v1308;
  uint64_t v1310;
  uint64_t v1311;
  uint8x8_t *v1312;
  int32x4_t v1313;
  signed int v1314;
  int32x4_t v1315;
  int32x4_t v1316;
  int32x4_t v1317;
  int32x4_t v1318;
  int8x16_t v1319;
  int32x4_t v1320;
  int32x4_t v1321;
  uint64_t v1322;
  int8x16_t v1323;
  int8x16_t v1324;
  int8x16_t v1325;
  uint8x8_t v1326;
  uint16x8_t v1327;
  uint32x4_t v1328;
  uint64x2_t v1329;
  uint64x2_t v1330;
  uint64x2_t v1331;
  uint32x4_t v1332;
  uint64x2_t v1333;
  uint64x2_t v1334;
  uint64x2_t v1335;
  uint64x2_t v1336;
  uint64x2_t v1337;
  int8x16_t v1338;
  uint8x8_t v1339;
  unsigned int v1340;
  int8x8_t v1341;
  int v1342;
  int v1343;
  int8x8_t v1344;
  unsigned int v1345;
  uint64_t v1346;
  uint8x8_t *v1347;
  signed int v1348;
  unint64_t v1349;
  uint64_t v1350;
  int v1351;
  void (*v1352)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1353;
  BOOL v1354;
  int v1355;
  uint8x8_t *v1357;
  uint8x8_t v1358;
  int v1359;
  int v1360;
  unsigned int v1361;
  uint64_t v1362;
  uint8x8_t *v1363;
  signed int v1364;
  uint64_t v1366;
  int32x4_t v1367;
  int32x4_t v1368;
  int32x4_t v1369;
  int32x4_t v1370;
  int32x4_t v1371;
  int8x16_t v1372;
  int32x4_t v1373;
  int32x4_t v1374;
  uint64_t v1375;
  int8x16_t v1376;
  int8x16_t v1377;
  int8x16_t v1378;
  uint8x8_t v1379;
  uint16x8_t v1380;
  uint32x4_t v1381;
  uint64x2_t v1382;
  uint64x2_t v1383;
  uint64x2_t v1384;
  uint32x4_t v1385;
  uint64x2_t v1386;
  uint64x2_t v1387;
  uint64x2_t v1388;
  uint64x2_t v1389;
  uint64x2_t v1390;
  int8x16_t v1391;
  uint8x8_t v1392;
  unsigned int v1393;
  int v1394;
  int v1395;
  int v1396;
  int v1397;
  int v1398;
  int8x8_t v1399;
  unsigned int v1400;
  uint64_t v1401;
  uint8x8_t *v1402;
  signed int v1403;
  unint64_t v1404;
  uint64_t v1405;
  int v1406;
  void (*v1407)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1408;
  BOOL v1409;
  int v1410;
  uint8x8_t *v1412;
  uint8x8_t v1413;
  int v1414;
  int v1415;
  unsigned int v1416;
  uint64_t v1418;
  uint64_t v1419;
  uint8x8_t *v1420;
  int32x4_t v1421;
  signed int v1422;
  int32x4_t v1423;
  int32x4_t v1424;
  int32x4_t v1425;
  int32x4_t v1426;
  int8x16_t v1427;
  int32x4_t v1428;
  int32x4_t v1429;
  uint64_t v1430;
  int8x16_t v1431;
  int8x16_t v1432;
  int8x16_t v1433;
  uint8x8_t v1434;
  uint16x8_t v1435;
  uint32x4_t v1436;
  uint64x2_t v1437;
  uint64x2_t v1438;
  uint64x2_t v1439;
  uint32x4_t v1440;
  uint64x2_t v1441;
  uint64x2_t v1442;
  uint64x2_t v1443;
  uint64x2_t v1444;
  uint64x2_t v1445;
  int8x16_t v1446;
  uint8x8_t v1447;
  unsigned int v1448;
  unint64_t v1449;
  int8x8_t v1450;
  char v1451;
  int v1452;
  int8x8_t v1453;
  unsigned int v1454;
  int v1455;
  uint64_t v1456;
  unint64_t v1457;
  int8x8_t v1458;
  char v1459;
  uint8x8_t *v1460;
  unint64_t v1461;
  uint64_t v1462;
  int v1463;
  void (*v1464)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1465;
  unsigned int v1466;
  BOOL v1467;
  signed int v1468;
  int v1469;
  uint8x8_t *v1470;
  uint8x8_t v1471;
  int v1472;
  int v1473;
  unsigned int v1474;
  uint64_t v1476;
  uint64_t v1477;
  uint8x8_t *v1478;
  int32x4_t v1479;
  int32x4_t v1480;
  int32x4_t v1481;
  int32x4_t v1482;
  int32x4_t v1483;
  int8x16_t v1484;
  int32x4_t v1485;
  int32x4_t v1486;
  uint64_t v1487;
  int8x16_t v1488;
  int8x16_t v1489;
  int8x16_t v1490;
  uint8x8_t v1491;
  uint16x8_t v1492;
  uint32x4_t v1493;
  uint64x2_t v1494;
  uint64x2_t v1495;
  uint64x2_t v1496;
  uint32x4_t v1497;
  uint64x2_t v1498;
  uint64x2_t v1499;
  uint64x2_t v1500;
  uint64x2_t v1501;
  uint64x2_t v1502;
  int8x16_t v1503;
  uint8x8_t v1504;
  unsigned int v1505;
  int v1506;
  int8x8_t v1507;
  uint64_t v1508;
  uint8x8_t *v1509;
  int32x4_t v1510;
  int32x4_t v1511;
  uint8x8_t *v1512;
  unint64_t v1513;
  void (*v1514)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1515;
  signed int v1516;
  int v1517;
  unsigned int v1518;
  BOOL v1519;
  int v1520;
  uint8x8_t v1522;
  int v1523;
  int v1524;
  unsigned int v1525;
  uint64_t v1527;
  uint64_t v1528;
  uint8x8_t *v1529;
  int v1530;
  int32x4_t v1531;
  int32x4_t v1532;
  int32x4_t v1533;
  int32x4_t v1534;
  int32x4_t v1535;
  int8x16_t v1536;
  uint64_t v1537;
  int8x16_t v1538;
  int8x16_t v1539;
  int8x16_t v1540;
  uint8x8_t v1541;
  uint16x8_t v1542;
  uint32x4_t v1543;
  uint64x2_t v1544;
  uint64x2_t v1545;
  uint64x2_t v1546;
  uint32x4_t v1547;
  uint64x2_t v1548;
  uint64x2_t v1549;
  uint64x2_t v1550;
  uint64x2_t v1551;
  uint64x2_t v1552;
  int8x16_t v1553;
  uint8x8_t v1554;
  unsigned int v1555;
  uint64_t v1556;
  unint64_t v1557;
  int8x8_t v1558;
  int8x8_t v1559;
  int v1560;
  int v1561;
  int8x8_t v1562;
  unsigned int v1563;
  uint8x8_t *v1564;
  unint64_t v1565;
  void (*v1566)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1567;
  signed int v1568;
  int v1569;
  BOOL v1570;
  int v1571;
  uint8x8_t v1573;
  int v1574;
  int v1575;
  unsigned int v1576;
  uint64_t v1577;
  uint8x8_t *v1578;
  signed int v1579;
  uint64_t v1581;
  int32x4_t v1582;
  int32x4_t v1583;
  int32x4_t v1584;
  int32x4_t v1585;
  int32x4_t v1586;
  int8x16_t v1587;
  uint64_t v1588;
  int8x16_t v1589;
  int8x16_t v1590;
  int8x16_t v1591;
  uint8x8_t v1592;
  uint16x8_t v1593;
  uint32x4_t v1594;
  uint64x2_t v1595;
  uint64x2_t v1596;
  uint64x2_t v1597;
  uint32x4_t v1598;
  uint64x2_t v1599;
  uint64x2_t v1600;
  uint64x2_t v1601;
  uint64x2_t v1602;
  uint64x2_t v1603;
  int8x16_t v1604;
  uint8x8_t v1605;
  unsigned int v1606;
  uint64_t v1607;
  int8x8_t v1608;
  int v1609;
  int v1610;
  int8x8_t v1611;
  unsigned int v1612;
  uint8x8_t *v1613;
  unint64_t v1614;
  void (*v1615)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1616;
  signed int v1617;
  int v1618;
  BOOL v1619;
  int v1620;
  uint8x8_t v1622;
  int v1623;
  int v1624;
  unsigned int v1625;
  uint64_t v1626;
  uint8x8_t *v1627;
  signed int v1628;
  uint64_t v1630;
  int32x4_t v1631;
  int32x4_t v1632;
  int32x4_t v1633;
  int32x4_t v1634;
  int32x4_t v1635;
  int8x16_t v1636;
  uint64_t v1637;
  int8x16_t v1638;
  int8x16_t v1639;
  int8x16_t v1640;
  uint8x8_t v1641;
  uint16x8_t v1642;
  uint32x4_t v1643;
  uint64x2_t v1644;
  uint64x2_t v1645;
  uint64x2_t v1646;
  uint32x4_t v1647;
  uint64x2_t v1648;
  uint64x2_t v1649;
  uint64x2_t v1650;
  uint64x2_t v1651;
  uint64x2_t v1652;
  int8x16_t v1653;
  uint8x8_t v1654;
  unsigned int v1655;
  uint64_t v1656;
  int8x8_t v1657;
  int v1658;
  int v1659;
  int8x8_t v1660;
  unsigned int v1661;
  uint8x8_t *v1662;
  unint64_t v1663;
  void (*v1664)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1665;
  signed int v1666;
  int v1667;
  BOOL v1668;
  int v1669;
  uint8x8_t v1671;
  int v1672;
  int v1673;
  unsigned int v1674;
  uint64_t v1676;
  uint64_t v1677;
  uint8x8_t *v1678;
  signed int v1679;
  int32x4_t v1680;
  int32x4_t v1681;
  int32x4_t v1682;
  int32x4_t v1683;
  int32x4_t v1684;
  int8x16_t v1685;
  uint64_t v1686;
  int8x16_t v1687;
  int8x16_t v1688;
  int8x16_t v1689;
  uint8x8_t v1690;
  uint16x8_t v1691;
  uint32x4_t v1692;
  uint64x2_t v1693;
  uint64x2_t v1694;
  uint64x2_t v1695;
  uint32x4_t v1696;
  uint64x2_t v1697;
  uint64x2_t v1698;
  uint64x2_t v1699;
  uint64x2_t v1700;
  uint64x2_t v1701;
  int8x16_t v1702;
  uint8x8_t v1703;
  unsigned int v1704;
  uint64_t v1705;
  int8x8_t v1706;
  char v1707;
  int v1708;
  int v1709;
  int8x8_t v1710;
  unsigned int v1711;
  char v1712;
  uint8x8_t *v1713;
  unint64_t v1714;
  void (*v1715)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1716;
  signed int v1717;
  int v1718;
  BOOL v1719;
  int v1720;
  uint8x8_t v1722;
  int v1723;
  int v1724;
  unsigned int v1725;
  uint64_t v1727;
  uint64_t v1728;
  uint8x8_t *v1729;
  signed int v1730;
  int32x4_t v1731;
  int32x4_t v1732;
  int32x4_t v1733;
  int32x4_t v1734;
  int32x4_t v1735;
  int8x16_t v1736;
  uint64_t v1737;
  int8x16_t v1738;
  int8x16_t v1739;
  int8x16_t v1740;
  uint8x8_t v1741;
  uint16x8_t v1742;
  uint32x4_t v1743;
  uint64x2_t v1744;
  uint64x2_t v1745;
  uint64x2_t v1746;
  uint32x4_t v1747;
  uint64x2_t v1748;
  uint64x2_t v1749;
  uint64x2_t v1750;
  uint64x2_t v1751;
  uint64x2_t v1752;
  int8x16_t v1753;
  uint8x8_t v1754;
  unsigned int v1755;
  uint64_t v1756;
  int8x8_t v1757;
  char v1758;
  int v1759;
  int v1760;
  int8x8_t v1761;
  unsigned int v1762;
  char v1763;
  char v1764;
  uint8x8_t *v1765;
  unint64_t v1766;
  void (*v1767)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1768;
  signed int v1769;
  int v1770;
  BOOL v1771;
  int v1772;
  uint8x8_t v1774;
  int v1775;
  int v1776;
  unsigned int v1777;
  uint64_t v1779;
  uint64_t v1780;
  uint8x8_t *v1781;
  signed int v1782;
  int32x4_t v1783;
  int32x4_t v1784;
  int32x4_t v1785;
  int32x4_t v1786;
  int32x4_t v1787;
  int8x16_t v1788;
  uint64_t v1789;
  int8x16_t v1790;
  int8x16_t v1791;
  int8x16_t v1792;
  uint8x8_t v1793;
  uint16x8_t v1794;
  uint32x4_t v1795;
  uint64x2_t v1796;
  uint64x2_t v1797;
  uint64x2_t v1798;
  uint32x4_t v1799;
  uint64x2_t v1800;
  uint64x2_t v1801;
  uint64x2_t v1802;
  uint64x2_t v1803;
  uint64x2_t v1804;
  int8x16_t v1805;
  uint8x8_t v1806;
  unsigned int v1807;
  uint64_t v1808;
  int8x8_t v1809;
  char v1810;
  int v1811;
  int v1812;
  int8x8_t v1813;
  unsigned int v1814;
  char v1815;
  char v1816;
  uint8x8_t *v1817;
  unint64_t v1818;
  void (*v1819)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  char v1820;
  uint64_t v1821;
  char v1822;
  signed int v1823;
  int v1824;
  BOOL v1825;
  int v1826;
  uint8x8_t v1828;
  int v1829;
  int v1830;
  unsigned int v1831;
  uint64_t v1832;
  uint8x8_t *v1833;
  signed int v1834;
  uint64_t v1836;
  int32x4_t v1837;
  int32x4_t v1838;
  int32x4_t v1839;
  int32x4_t v1840;
  int32x4_t v1841;
  int8x16_t v1842;
  uint64_t v1843;
  int8x16_t v1844;
  int8x16_t v1845;
  int8x16_t v1846;
  uint8x8_t v1847;
  uint16x8_t v1848;
  uint32x4_t v1849;
  uint64x2_t v1850;
  uint64x2_t v1851;
  uint64x2_t v1852;
  uint32x4_t v1853;
  uint64x2_t v1854;
  uint64x2_t v1855;
  uint64x2_t v1856;
  uint64x2_t v1857;
  uint64x2_t v1858;
  int8x16_t v1859;
  uint8x8_t v1860;
  unsigned int v1861;
  uint64_t v1862;
  int8x8_t v1863;
  char v1864;
  int v1865;
  uint64_t v1866;
  int v1867;
  unsigned int v1868;
  int8x8_t v1869;
  uint8x8_t *v1870;
  unint64_t v1871;
  void (*v1872)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1873;
  int v1874;
  unsigned int v1875;
  BOOL v1876;
  unsigned int v1877;
  int v1878;
  uint8x8_t v1879;
  int v1880;
  int v1881;
  unsigned int v1882;
  uint64_t v1883;
  uint8x8_t *v1884;
  int v1885;
  uint8x8_t v1886;
  unsigned int v1887;
  uint64_t v1888;
  unint64_t v1889;
  int8x8_t v1890;
  int8x8_t v1891;
  int v1892;
  uint64_t v1893;
  int32x4_t v1894;
  int32x4_t v1895;
  int32x4_t v1896;
  int32x4_t v1897;
  int32x4_t v1898;
  int8x16_t v1899;
  uint64_t v1900;
  int8x16_t v1901;
  int8x16_t v1902;
  int8x16_t v1903;
  uint8x8_t v1904;
  uint16x8_t v1905;
  uint32x4_t v1906;
  uint64x2_t v1907;
  uint64x2_t v1908;
  uint64x2_t v1909;
  uint32x4_t v1910;
  uint64x2_t v1911;
  uint64x2_t v1912;
  uint64x2_t v1913;
  uint64x2_t v1914;
  uint64x2_t v1915;
  int8x16_t v1916;
  uint64_t v1917;
  int32x4_t v1918;
  int32x4_t v1919;
  int v1920;
  unsigned int v1921;
  int8x8_t v1922;
  uint8x8_t *v1923;
  unint64_t v1924;
  void (*v1925)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1926;
  signed int v1927;
  int v1928;
  unsigned int v1929;
  BOOL v1930;
  int v1931;
  uint8x8_t v1933;
  int v1934;
  int v1935;
  unsigned int v1936;
  uint64_t v1938;
  uint64_t v1939;
  uint8x8_t *v1940;
  int v1941;
  int32x4_t v1942;
  int32x4_t v1943;
  int32x4_t v1944;
  int32x4_t v1945;
  int32x4_t v1946;
  int8x16_t v1947;
  uint64_t v1948;
  int8x16_t v1949;
  int8x16_t v1950;
  int8x16_t v1951;
  uint8x8_t v1952;
  uint16x8_t v1953;
  uint32x4_t v1954;
  uint64x2_t v1955;
  uint64x2_t v1956;
  uint64x2_t v1957;
  uint32x4_t v1958;
  uint64x2_t v1959;
  uint64x2_t v1960;
  uint64x2_t v1961;
  uint64x2_t v1962;
  uint64x2_t v1963;
  int8x16_t v1964;
  uint8x8_t v1965;
  unsigned int v1966;
  uint64_t v1967;
  unint64_t v1968;
  int8x8_t v1969;
  int8x8_t v1970;
  int v1971;
  int v1972;
  int8x8_t v1973;
  unsigned int v1974;
  uint8x8_t *v1975;
  unint64_t v1976;
  void (*v1977)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v1978;
  signed int v1979;
  int v1980;
  BOOL v1981;
  int v1982;
  uint8x8_t v1984;
  int v1985;
  int v1986;
  unsigned int v1987;
  uint64_t v1988;
  uint8x8_t *v1989;
  signed int v1990;
  uint64_t v1992;
  int32x4_t v1993;
  int32x4_t v1994;
  int32x4_t v1995;
  int32x4_t v1996;
  int32x4_t v1997;
  int8x16_t v1998;
  uint64_t v1999;
  int8x16_t v2000;
  int8x16_t v2001;
  int8x16_t v2002;
  uint8x8_t v2003;
  uint16x8_t v2004;
  uint32x4_t v2005;
  uint64x2_t v2006;
  uint64x2_t v2007;
  uint64x2_t v2008;
  uint32x4_t v2009;
  uint64x2_t v2010;
  uint64x2_t v2011;
  uint64x2_t v2012;
  uint64x2_t v2013;
  uint64x2_t v2014;
  int8x16_t v2015;
  uint8x8_t v2016;
  unsigned int v2017;
  uint64_t v2018;
  int8x8_t v2019;
  int v2020;
  int v2021;
  int8x8_t v2022;
  unsigned int v2023;
  uint8x8_t *v2024;
  unint64_t v2025;
  void (*v2026)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2027;
  signed int v2028;
  int v2029;
  BOOL v2030;
  int v2031;
  uint8x8_t v2033;
  int v2034;
  int v2035;
  unsigned int v2036;
  uint64_t v2038;
  uint64_t v2039;
  uint8x8_t *v2040;
  signed int v2041;
  int32x4_t v2042;
  int32x4_t v2043;
  int32x4_t v2044;
  int32x4_t v2045;
  int32x4_t v2046;
  int8x16_t v2047;
  uint64_t v2048;
  int8x16_t v2049;
  int8x16_t v2050;
  int8x16_t v2051;
  uint8x8_t v2052;
  uint16x8_t v2053;
  uint32x4_t v2054;
  uint64x2_t v2055;
  uint64x2_t v2056;
  uint64x2_t v2057;
  uint32x4_t v2058;
  uint64x2_t v2059;
  uint64x2_t v2060;
  uint64x2_t v2061;
  uint64x2_t v2062;
  uint64x2_t v2063;
  int8x16_t v2064;
  uint8x8_t v2065;
  unsigned int v2066;
  uint64_t v2067;
  int8x8_t v2068;
  int v2069;
  int v2070;
  int8x8_t v2071;
  unsigned int v2072;
  uint8x8_t *v2073;
  unint64_t v2074;
  void (*v2075)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2076;
  signed int v2077;
  int v2078;
  BOOL v2079;
  int v2080;
  uint8x8_t v2082;
  int v2083;
  int v2084;
  unsigned int v2085;
  uint64_t v2087;
  uint64_t v2088;
  uint8x8_t *v2089;
  signed int v2090;
  int32x4_t v2091;
  int32x4_t v2092;
  int32x4_t v2093;
  int32x4_t v2094;
  int32x4_t v2095;
  int8x16_t v2096;
  uint64_t v2097;
  int8x16_t v2098;
  int8x16_t v2099;
  int8x16_t v2100;
  uint8x8_t v2101;
  uint16x8_t v2102;
  uint32x4_t v2103;
  uint64x2_t v2104;
  uint64x2_t v2105;
  uint64x2_t v2106;
  uint32x4_t v2107;
  uint64x2_t v2108;
  uint64x2_t v2109;
  uint64x2_t v2110;
  uint64x2_t v2111;
  uint64x2_t v2112;
  int8x16_t v2113;
  uint8x8_t v2114;
  unsigned int v2115;
  uint64_t v2116;
  int8x8_t v2117;
  char v2118;
  int v2119;
  int v2120;
  int8x8_t v2121;
  unsigned int v2122;
  char v2123;
  uint8x8_t *v2124;
  unint64_t v2125;
  void (*v2126)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2127;
  signed int v2128;
  int v2129;
  BOOL v2130;
  int v2131;
  uint8x8_t v2133;
  int v2134;
  int v2135;
  unsigned int v2136;
  uint64_t v2138;
  uint64_t v2139;
  uint8x8_t *v2140;
  signed int v2141;
  int32x4_t v2142;
  int32x4_t v2143;
  int32x4_t v2144;
  int32x4_t v2145;
  int32x4_t v2146;
  int8x16_t v2147;
  uint64_t v2148;
  int8x16_t v2149;
  int8x16_t v2150;
  int8x16_t v2151;
  uint8x8_t v2152;
  uint16x8_t v2153;
  uint32x4_t v2154;
  uint64x2_t v2155;
  uint64x2_t v2156;
  uint64x2_t v2157;
  uint32x4_t v2158;
  uint64x2_t v2159;
  uint64x2_t v2160;
  uint64x2_t v2161;
  uint64x2_t v2162;
  uint64x2_t v2163;
  int8x16_t v2164;
  uint8x8_t v2165;
  unsigned int v2166;
  uint64_t v2167;
  int8x8_t v2168;
  char v2169;
  int v2170;
  int v2171;
  int8x8_t v2172;
  unsigned int v2173;
  char v2174;
  char v2175;
  uint8x8_t *v2176;
  unint64_t v2177;
  void (*v2178)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2179;
  signed int v2180;
  int v2181;
  BOOL v2182;
  int v2183;
  uint8x8_t v2185;
  int v2186;
  int v2187;
  unsigned int v2188;
  uint64_t v2190;
  uint64_t v2191;
  uint8x8_t *v2192;
  signed int v2193;
  int32x4_t v2194;
  int32x4_t v2195;
  int32x4_t v2196;
  int32x4_t v2197;
  int32x4_t v2198;
  int8x16_t v2199;
  uint64_t v2200;
  int8x16_t v2201;
  int8x16_t v2202;
  int8x16_t v2203;
  uint8x8_t v2204;
  uint16x8_t v2205;
  uint32x4_t v2206;
  uint64x2_t v2207;
  uint64x2_t v2208;
  uint64x2_t v2209;
  uint32x4_t v2210;
  uint64x2_t v2211;
  uint64x2_t v2212;
  uint64x2_t v2213;
  uint64x2_t v2214;
  uint64x2_t v2215;
  int8x16_t v2216;
  uint8x8_t v2217;
  unsigned int v2218;
  uint64_t v2219;
  int8x8_t v2220;
  char v2221;
  int v2222;
  int v2223;
  int8x8_t v2224;
  unsigned int v2225;
  char v2226;
  char v2227;
  uint8x8_t *v2228;
  unint64_t v2229;
  void (*v2230)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  char v2231;
  uint64_t v2232;
  char v2233;
  signed int v2234;
  int v2235;
  BOOL v2236;
  int v2237;
  uint8x8_t v2239;
  int v2240;
  int v2241;
  unsigned int v2242;
  uint64_t v2243;
  uint8x8_t *v2244;
  signed int v2245;
  uint64_t v2247;
  int32x4_t v2248;
  int32x4_t v2249;
  int32x4_t v2250;
  int32x4_t v2251;
  int32x4_t v2252;
  int8x16_t v2253;
  uint64_t v2254;
  int8x16_t v2255;
  int8x16_t v2256;
  int8x16_t v2257;
  uint8x8_t v2258;
  uint16x8_t v2259;
  uint32x4_t v2260;
  uint64x2_t v2261;
  uint64x2_t v2262;
  uint64x2_t v2263;
  uint32x4_t v2264;
  uint64x2_t v2265;
  uint64x2_t v2266;
  uint64x2_t v2267;
  uint64x2_t v2268;
  uint64x2_t v2269;
  int8x16_t v2270;
  uint8x8_t v2271;
  unsigned int v2272;
  uint64_t v2273;
  int8x8_t v2274;
  char v2275;
  int v2276;
  uint64_t v2277;
  int v2278;
  unsigned int v2279;
  int8x8_t v2280;
  uint8x8_t *v2281;
  unint64_t v2282;
  void (*v2283)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2284;
  int v2285;
  unsigned int v2286;
  BOOL v2287;
  unsigned int v2288;
  int v2289;
  uint8x8_t v2290;
  int v2291;
  int v2292;
  unsigned int v2293;
  uint64_t v2294;
  uint8x8_t *v2295;
  int v2296;
  uint8x8_t v2297;
  unsigned int v2298;
  uint64_t v2299;
  unint64_t v2300;
  int8x8_t v2301;
  int8x8_t v2302;
  int v2303;
  uint64_t v2304;
  int32x4_t v2305;
  int32x4_t v2306;
  int32x4_t v2307;
  int32x4_t v2308;
  int32x4_t v2309;
  int8x16_t v2310;
  uint64_t v2311;
  int8x16_t v2312;
  int8x16_t v2313;
  int8x16_t v2314;
  uint8x8_t v2315;
  uint16x8_t v2316;
  uint32x4_t v2317;
  uint64x2_t v2318;
  uint64x2_t v2319;
  uint64x2_t v2320;
  uint32x4_t v2321;
  uint64x2_t v2322;
  uint64x2_t v2323;
  uint64x2_t v2324;
  uint64x2_t v2325;
  uint64x2_t v2326;
  int8x16_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  uint64_t v2330;
  int8x8_t v2331;
  int v2332;
  uint8x8_t *v2333;
  unint64_t v2334;
  uint64_t v2335;
  int v2336;
  void (*v2337)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2338;
  unsigned int v2339;
  BOOL v2340;
  signed int v2341;
  int v2342;
  uint8x8_t *v2343;
  uint8x8_t v2344;
  int v2345;
  int v2346;
  unsigned int v2347;
  uint64_t v2349;
  uint64_t v2350;
  uint8x8_t *v2351;
  int32x4_t v2352;
  int32x4_t v2353;
  int32x4_t v2354;
  int32x4_t v2355;
  int32x4_t v2356;
  int8x16_t v2357;
  int32x4_t v2358;
  int32x4_t v2359;
  uint64_t v2360;
  int8x16_t v2361;
  int8x16_t v2362;
  int8x16_t v2363;
  uint8x8_t v2364;
  uint16x8_t v2365;
  uint32x4_t v2366;
  uint64x2_t v2367;
  uint64x2_t v2368;
  uint64x2_t v2369;
  uint32x4_t v2370;
  uint64x2_t v2371;
  uint64x2_t v2372;
  uint64x2_t v2373;
  uint64x2_t v2374;
  uint64x2_t v2375;
  int8x16_t v2376;
  uint8x8_t v2377;
  unsigned int v2378;
  int v2379;
  int v2380;
  int8x8_t v2381;
  unsigned int v2382;
  uint64_t v2383;
  uint64_t v2384;
  uint64_t v2385;
  uint8x8_t *v2386;
  signed int v2387;
  unint64_t v2388;
  uint64_t v2389;
  int v2390;
  void (*v2391)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2392;
  BOOL v2393;
  int v2394;
  uint8x8_t *v2396;
  uint8x8_t v2397;
  int v2398;
  int v2399;
  unsigned int v2400;
  uint64_t v2401;
  uint8x8_t *v2402;
  signed int v2403;
  BOOL v2404;
  uint64_t v2405;
  int32x4_t v2406;
  int32x4_t v2407;
  int32x4_t v2408;
  int32x4_t v2409;
  int32x4_t v2410;
  int8x16_t v2411;
  int32x4_t v2412;
  int32x4_t v2413;
  uint64_t v2414;
  int8x16_t v2415;
  int8x16_t v2416;
  int8x16_t v2417;
  uint8x8_t v2418;
  uint16x8_t v2419;
  uint32x4_t v2420;
  uint64x2_t v2421;
  uint64x2_t v2422;
  uint64x2_t v2423;
  uint32x4_t v2424;
  uint64x2_t v2425;
  uint64x2_t v2426;
  uint64x2_t v2427;
  uint64x2_t v2428;
  uint64x2_t v2429;
  int8x16_t v2430;
  uint8x8_t v2431;
  unsigned int v2432;
  int8x8_t v2433;
  int v2434;
  int v2435;
  int v2436;
  uint64_t v2437;
  int v2438;
  int v2439;
  unsigned int v2440;
  uint64_t v2441;
  int v2442;
  uint64_t v2443;
  uint64_t v2444;
  uint64_t v2445;
  unint64_t v2446;
  unsigned int v2447;
  unint64_t v2448;
  int v2449;
  unint64_t v2450;
  unsigned int v2451;
  unsigned __int16 *v2452;
  void (*v2453)(_QWORD);
  unsigned int v2454;
  uint64_t v2455;
  _QWORD *v2456;
  uint64_t v2457;
  _QWORD *v2458;
  unint64_t v2459;
  uint64_t v2460;
  int32x4_t v2461;
  int32x4_t v2462;
  uint8x8_t *v2463;
  uint64_t v2464;
  BOOL v2465;
  void (*v2466)(void);
  uint64_t v2467;
  char *v2468;
  uint64_t v2469;
  int8x8_t v2470;
  int v2471;
  unsigned int v2472;
  BOOL v2473;
  int v2474;
  uint64_t v2475;
  int v2476;
  uint64_t v2477;
  unint64_t v2478;
  unint64_t v2479;
  uint64_t v2480;
  BOOL v2481;
  uint64_t v2482;
  uint64_t v2483;
  uint8x8_t *v2484;
  int32x4_t v2485;
  int32x4_t v2486;
  uint64_t v2487;
  int32x4_t v2488;
  int32x4_t v2489;
  int8x16_t v2490;
  int8x16_t v2491;
  int8x16_t v2492;
  int8x16_t v2493;
  uint8x8_t v2494;
  uint16x8_t v2495;
  uint32x4_t v2496;
  uint64x2_t v2497;
  uint64x2_t v2498;
  uint64x2_t v2499;
  uint32x4_t v2500;
  uint64x2_t v2501;
  uint64x2_t v2502;
  uint64x2_t v2503;
  uint64x2_t v2504;
  uint64x2_t v2505;
  int8x16_t v2506;
  uint64_t v2507;
  unsigned int v2508;
  unsigned int v2509;
  signed int v2510;
  unsigned int v2511;
  uint64_t v2512;
  int8x8_t v2513;
  int8x8_t v2514;
  uint8x8_t *v2515;
  unint64_t v2516;
  uint64_t v2517;
  int v2518;
  void (*v2519)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2520;
  unsigned int v2521;
  BOOL v2522;
  signed int v2523;
  int v2524;
  uint8x8_t *v2525;
  uint8x8_t v2526;
  int v2527;
  int v2528;
  unsigned int v2529;
  uint64_t v2530;
  uint8x8_t *v2531;
  uint8x8_t v2532;
  unsigned int v2533;
  int v2534;
  int8x8_t v2535;
  unsigned int v2536;
  uint64_t v2537;
  uint8x8_t *v2538;
  signed int v2539;
  unint64_t v2540;
  uint64_t v2541;
  int v2542;
  void (*v2543)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2544;
  BOOL v2545;
  int v2546;
  uint8x8_t *v2548;
  uint8x8_t v2549;
  int v2550;
  int v2551;
  unsigned int v2552;
  uint64_t v2554;
  uint64_t v2555;
  uint8x8_t *v2556;
  int32x4_t v2557;
  signed int v2558;
  int32x4_t v2559;
  int32x4_t v2560;
  int32x4_t v2561;
  int32x4_t v2562;
  int8x16_t v2563;
  int32x4_t v2564;
  int32x4_t v2565;
  uint64_t v2566;
  int8x16_t v2567;
  int8x16_t v2568;
  int8x16_t v2569;
  uint8x8_t v2570;
  uint16x8_t v2571;
  uint32x4_t v2572;
  uint64x2_t v2573;
  uint64x2_t v2574;
  uint64x2_t v2575;
  uint32x4_t v2576;
  uint64x2_t v2577;
  uint64x2_t v2578;
  uint64x2_t v2579;
  uint64x2_t v2580;
  uint64x2_t v2581;
  int8x16_t v2582;
  uint8x8_t v2583;
  unsigned int v2584;
  int8x8_t v2585;
  int v2586;
  int v2587;
  int8x8_t v2588;
  unsigned int v2589;
  uint64_t v2590;
  uint8x8_t *v2591;
  signed int v2592;
  unint64_t v2593;
  uint64_t v2594;
  int v2595;
  void (*v2596)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2597;
  BOOL v2598;
  int v2599;
  uint8x8_t *v2601;
  uint8x8_t v2602;
  int v2603;
  int v2604;
  unsigned int v2605;
  uint64_t v2606;
  uint8x8_t *v2607;
  signed int v2608;
  uint64_t v2610;
  int32x4_t v2611;
  int32x4_t v2612;
  int32x4_t v2613;
  int32x4_t v2614;
  int32x4_t v2615;
  int8x16_t v2616;
  int32x4_t v2617;
  int32x4_t v2618;
  uint64_t v2619;
  int8x16_t v2620;
  int8x16_t v2621;
  int8x16_t v2622;
  uint8x8_t v2623;
  uint16x8_t v2624;
  uint32x4_t v2625;
  uint64x2_t v2626;
  uint64x2_t v2627;
  uint64x2_t v2628;
  uint32x4_t v2629;
  uint64x2_t v2630;
  uint64x2_t v2631;
  uint64x2_t v2632;
  uint64x2_t v2633;
  uint64x2_t v2634;
  int8x16_t v2635;
  uint64_t v2636;
  int32x4_t v2637;
  int32x4_t v2638;
  int32x4_t v2639;
  int32x4_t v2640;
  int32x4_t v2641;
  int8x16_t v2642;
  int32x4_t v2643;
  int32x4_t v2644;
  uint64_t v2645;
  int8x16_t v2646;
  int8x16_t v2647;
  int8x16_t v2648;
  uint8x8_t v2649;
  uint16x8_t v2650;
  uint32x4_t v2651;
  uint64x2_t v2652;
  uint64x2_t v2653;
  uint64x2_t v2654;
  uint32x4_t v2655;
  uint64x2_t v2656;
  uint64x2_t v2657;
  uint64x2_t v2658;
  uint64x2_t v2659;
  uint64x2_t v2660;
  int8x16_t v2661;
  uint8x8_t v2662;
  unsigned int v2663;
  int8x8_t v2664;
  int v2665;
  int v2666;
  int v2667;
  int8x8_t v2668;
  unsigned int v2669;
  uint64_t v2670;
  int v2671;
  uint8x8_t *v2672;
  signed int v2673;
  unint64_t v2674;
  uint64_t v2675;
  int v2676;
  void (*v2677)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2678;
  BOOL v2679;
  int v2680;
  uint8x8_t *v2682;
  uint8x8_t v2683;
  int v2684;
  int v2685;
  unsigned int v2686;
  uint64_t v2687;
  uint8x8_t *v2688;
  signed int v2689;
  BOOL v2690;
  uint64_t v2691;
  int32x4_t v2692;
  int32x4_t v2693;
  int32x4_t v2694;
  int32x4_t v2695;
  int32x4_t v2696;
  int8x16_t v2697;
  int32x4_t v2698;
  int32x4_t v2699;
  uint64_t v2700;
  int8x16_t v2701;
  int8x16_t v2702;
  int8x16_t v2703;
  uint8x8_t v2704;
  uint16x8_t v2705;
  uint32x4_t v2706;
  uint64x2_t v2707;
  uint64x2_t v2708;
  uint64x2_t v2709;
  uint32x4_t v2710;
  uint64x2_t v2711;
  uint64x2_t v2712;
  uint64x2_t v2713;
  uint64x2_t v2714;
  uint64x2_t v2715;
  int8x16_t v2716;
  uint8x8_t v2717;
  unsigned int v2718;
  int8x8_t v2719;
  int v2720;
  int v2721;
  int v2722;
  int8x8_t v2723;
  unsigned int v2724;
  uint64_t v2725;
  int v2726;
  uint8x8_t *v2727;
  signed int v2728;
  unint64_t v2729;
  uint64_t v2730;
  int v2731;
  void (*v2732)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2733;
  BOOL v2734;
  int v2735;
  uint8x8_t *v2737;
  uint8x8_t v2738;
  int v2739;
  int v2740;
  unsigned int v2741;
  uint64_t v2742;
  uint8x8_t *v2743;
  signed int v2744;
  BOOL v2745;
  uint64_t v2746;
  int32x4_t v2747;
  int32x4_t v2748;
  int32x4_t v2749;
  int32x4_t v2750;
  int32x4_t v2751;
  int8x16_t v2752;
  int32x4_t v2753;
  int32x4_t v2754;
  uint64_t v2755;
  int8x16_t v2756;
  int8x16_t v2757;
  int8x16_t v2758;
  uint8x8_t v2759;
  uint16x8_t v2760;
  uint32x4_t v2761;
  uint64x2_t v2762;
  uint64x2_t v2763;
  uint64x2_t v2764;
  uint32x4_t v2765;
  uint64x2_t v2766;
  uint64x2_t v2767;
  uint64x2_t v2768;
  uint64x2_t v2769;
  uint64x2_t v2770;
  int8x16_t v2771;
  uint8x8_t v2772;
  unsigned int v2773;
  int8x8_t v2774;
  int v2775;
  int v2776;
  int v2777;
  int v2778;
  int8x8_t v2779;
  unsigned int v2780;
  uint64_t v2781;
  uint8x8_t *v2782;
  signed int v2783;
  unint64_t v2784;
  uint64_t v2785;
  int v2786;
  void (*v2787)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2788;
  int v2789;
  BOOL v2790;
  int v2791;
  uint8x8_t *v2793;
  uint8x8_t v2794;
  int v2795;
  int v2796;
  unsigned int v2797;
  uint64_t v2799;
  uint64_t v2800;
  uint8x8_t *v2801;
  int32x4_t v2802;
  signed int v2803;
  int32x4_t v2804;
  int32x4_t v2805;
  int32x4_t v2806;
  int32x4_t v2807;
  int8x16_t v2808;
  int32x4_t v2809;
  int32x4_t v2810;
  uint64_t v2811;
  int8x16_t v2812;
  int8x16_t v2813;
  int8x16_t v2814;
  uint8x8_t v2815;
  uint16x8_t v2816;
  uint32x4_t v2817;
  uint64x2_t v2818;
  uint64x2_t v2819;
  uint64x2_t v2820;
  uint32x4_t v2821;
  uint64x2_t v2822;
  uint64x2_t v2823;
  uint64x2_t v2824;
  uint64x2_t v2825;
  uint64x2_t v2826;
  int8x16_t v2827;
  uint8x8_t v2828;
  unsigned int v2829;
  int v2830;
  int8x8_t v2831;
  int v2832;
  int v2833;
  int v2834;
  int v2835;
  int8x8_t v2836;
  unsigned int v2837;
  uint64_t v2838;
  uint8x8_t *v2839;
  signed int v2840;
  unint64_t v2841;
  uint64_t v2842;
  int v2843;
  void (*v2844)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2845;
  BOOL v2846;
  int v2847;
  int8x8_t *v2849;
  int8x8_t v2850;
  int v2851;
  int v2852;
  int delta_q;
  uint64_t v2854;
  int v2855;
  int v2856;
  int v2857;
  _WORD *v2858;
  int v2859;
  int v2860;
  int v2861;
  int v2862;
  int v2863;
  int v2864;
  int v2865;
  int v2866;
  uint64_t v2867;
  uint64_t v2868;
  unsigned int v2869;
  int8x8_t v2870;
  int8x8_t v2871;
  int v2872;
  unsigned int v2873;
  int8x8_t v2874;
  uint64_t v2875;
  uint8x8_t *v2876;
  signed int v2877;
  unint64_t v2878;
  uint64_t v2879;
  int v2880;
  void (*v2881)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2882;
  unsigned int v2883;
  BOOL v2884;
  int v2885;
  uint8x8_t *v2887;
  unint64_t v2888;
  uint64_t v2889;
  int v2890;
  void (*v2891)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2892;
  unsigned int v2893;
  BOOL v2894;
  signed int v2895;
  int v2896;
  uint8x8_t *v2897;
  uint8x8_t v2898;
  int v2899;
  int v2900;
  unsigned int v2901;
  uint64_t v2902;
  uint8x8_t *v2903;
  uint8x8_t v2904;
  unsigned int v2905;
  int v2906;
  int8x8_t v2907;
  unsigned int v2908;
  uint64_t v2909;
  uint8x8_t *v2910;
  signed int v2911;
  unint64_t v2912;
  uint64_t v2913;
  int v2914;
  void (*v2915)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v2916;
  BOOL v2917;
  int v2918;
  uint8x8_t *v2920;
  uint8x8_t v2921;
  int v2922;
  int v2923;
  unsigned int v2924;
  uint64_t v2925;
  uint8x8_t *v2926;
  signed int v2927;
  uint8x8_t *v2928;
  uint8x8_t v2929;
  int v2930;
  int v2931;
  unsigned int v2932;
  uint64_t v2934;
  uint64_t v2935;
  uint8x8_t *v2936;
  int32x4_t v2937;
  int v2938;
  int32x4_t v2939;
  int32x4_t v2940;
  int32x4_t v2941;
  int32x4_t v2942;
  int8x16_t v2943;
  int32x4_t v2944;
  int32x4_t v2945;
  uint64_t v2946;
  int8x16_t v2947;
  int8x16_t v2948;
  int8x16_t v2949;
  uint8x8_t v2950;
  uint16x8_t v2951;
  uint32x4_t v2952;
  uint64x2_t v2953;
  uint64x2_t v2954;
  uint64x2_t v2955;
  uint32x4_t v2956;
  uint64x2_t v2957;
  uint64x2_t v2958;
  uint64x2_t v2959;
  uint64x2_t v2960;
  uint64x2_t v2961;
  int8x16_t v2962;
  uint8x8_t v2963;
  unsigned int v2964;
  unint64_t v2965;
  int8x8_t v2966;
  int v2967;
  uint8x8_t *v2968;
  uint8x8_t v2969;
  int v2970;
  int v2971;
  unsigned int v2972;
  uint64_t v2974;
  uint64_t v2975;
  uint8x8_t *v2976;
  int32x4_t v2977;
  signed int v2978;
  int32x4_t v2979;
  int32x4_t v2980;
  int32x4_t v2981;
  int32x4_t v2982;
  int8x16_t v2983;
  int32x4_t v2984;
  int32x4_t v2985;
  uint64_t v2986;
  int8x16_t v2987;
  int8x16_t v2988;
  int8x16_t v2989;
  uint8x8_t v2990;
  uint16x8_t v2991;
  uint32x4_t v2992;
  uint64x2_t v2993;
  uint64x2_t v2994;
  uint64x2_t v2995;
  uint32x4_t v2996;
  uint64x2_t v2997;
  uint64x2_t v2998;
  uint64x2_t v2999;
  uint64x2_t v3000;
  uint64x2_t v3001;
  int8x16_t v3002;
  BOOL v3003;
  uint64_t v3004;
  int32x4_t v3005;
  int32x4_t v3006;
  int32x4_t v3007;
  int32x4_t v3008;
  int32x4_t v3009;
  int8x16_t v3010;
  int32x4_t v3011;
  int32x4_t v3012;
  uint64_t v3013;
  int8x16_t v3014;
  int8x16_t v3015;
  int8x16_t v3016;
  uint8x8_t v3017;
  uint16x8_t v3018;
  uint32x4_t v3019;
  uint64x2_t v3020;
  uint64x2_t v3021;
  uint64x2_t v3022;
  uint32x4_t v3023;
  uint64x2_t v3024;
  uint64x2_t v3025;
  uint64x2_t v3026;
  uint64x2_t v3027;
  uint64x2_t v3028;
  int8x16_t v3029;
  uint8x8_t v3030;
  unsigned int v3031;
  int8x8_t v3032;
  int v3033;
  int v3034;
  int v3035;
  int8x8_t v3036;
  unsigned int v3037;
  uint64_t v3038;
  int8x8_t v3039;
  int v3040;
  uint64_t v3041;
  uint8x8_t *v3042;
  signed int v3043;
  unint64_t v3044;
  uint64_t v3045;
  int v3046;
  void (*v3047)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3048;
  BOOL v3049;
  int v3050;
  uint8x8_t v3052;
  unsigned int v3053;
  uint8x8_t *v3054;
  uint8x8_t v3055;
  int v3056;
  int v3057;
  unsigned int v3058;
  uint64_t v3060;
  uint64_t v3061;
  uint8x8_t *v3062;
  int32x4_t v3063;
  signed int v3064;
  int32x4_t v3065;
  int32x4_t v3066;
  int32x4_t v3067;
  int32x4_t v3068;
  int8x16_t v3069;
  int32x4_t v3070;
  int32x4_t v3071;
  uint64_t v3072;
  int8x16_t v3073;
  int8x16_t v3074;
  int8x16_t v3075;
  uint8x8_t v3076;
  uint16x8_t v3077;
  uint32x4_t v3078;
  uint64x2_t v3079;
  uint64x2_t v3080;
  uint64x2_t v3081;
  uint32x4_t v3082;
  uint64x2_t v3083;
  uint64x2_t v3084;
  uint64x2_t v3085;
  uint64x2_t v3086;
  uint64x2_t v3087;
  int8x16_t v3088;
  uint8x8_t v3089;
  unsigned int v3090;
  uint64_t v3091;
  int v3092;
  uint8x8_t *v3093;
  int32x4_t v3094;
  int32x4_t v3095;
  int v3096;
  unsigned int v3097;
  int8x8_t v3098;
  uint8x8_t *v3099;
  unint64_t v3100;
  void (*v3101)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3102;
  signed int v3103;
  int v3104;
  unsigned int v3105;
  BOOL v3106;
  int v3107;
  uint8x8_t v3109;
  int v3110;
  int v3111;
  unsigned int v3112;
  uint64_t v3114;
  uint64_t v3115;
  uint8x8_t *v3116;
  int v3117;
  int32x4_t v3118;
  int32x4_t v3119;
  int32x4_t v3120;
  int32x4_t v3121;
  int32x4_t v3122;
  int8x16_t v3123;
  uint64_t v3124;
  int8x16_t v3125;
  int8x16_t v3126;
  int8x16_t v3127;
  uint8x8_t v3128;
  uint16x8_t v3129;
  uint32x4_t v3130;
  uint64x2_t v3131;
  uint64x2_t v3132;
  uint64x2_t v3133;
  uint32x4_t v3134;
  uint64x2_t v3135;
  uint64x2_t v3136;
  uint64x2_t v3137;
  uint64x2_t v3138;
  uint64x2_t v3139;
  int8x16_t v3140;
  uint8x8_t v3141;
  unsigned int v3142;
  uint64_t v3143;
  unint64_t v3144;
  int8x8_t v3145;
  int8x8_t v3146;
  int v3147;
  int v3148;
  int8x8_t v3149;
  unsigned int v3150;
  int v3151;
  unsigned int v3152;
  uint64_t v3153;
  int v3154;
  int v3155;
  uint8x8_t *v3156;
  unint64_t v3157;
  void (*v3158)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3159;
  signed int v3160;
  int v3161;
  unsigned int v3162;
  BOOL v3163;
  int v3164;
  uint8x8_t v3166;
  int v3167;
  int v3168;
  unsigned int v3169;
  uint64_t v3171;
  uint64_t v3172;
  uint8x8_t *v3173;
  int v3174;
  int32x4_t v3175;
  int32x4_t v3176;
  int32x4_t v3177;
  int32x4_t v3178;
  int32x4_t v3179;
  int8x16_t v3180;
  uint64_t v3181;
  int8x16_t v3182;
  int8x16_t v3183;
  int8x16_t v3184;
  uint8x8_t v3185;
  uint16x8_t v3186;
  uint32x4_t v3187;
  uint64x2_t v3188;
  uint64x2_t v3189;
  uint64x2_t v3190;
  uint32x4_t v3191;
  uint64x2_t v3192;
  uint64x2_t v3193;
  uint64x2_t v3194;
  uint64x2_t v3195;
  uint64x2_t v3196;
  int8x16_t v3197;
  uint8x8_t v3198;
  unsigned int v3199;
  int8x8_t v3200;
  uint64_t v3201;
  int v3202;
  unsigned int v3203;
  int8x8_t v3204;
  uint8x8_t *v3205;
  unint64_t v3206;
  void (*v3207)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3208;
  int v3209;
  unsigned int v3210;
  BOOL v3211;
  unsigned int v3212;
  int v3213;
  uint8x8_t v3214;
  int v3215;
  int v3216;
  unsigned int v3217;
  uint64_t v3218;
  uint8x8_t *v3219;
  int v3220;
  uint8x8_t v3221;
  unsigned int v3222;
  uint64_t v3223;
  unint64_t v3224;
  int8x8_t v3225;
  int8x8_t v3226;
  int v3227;
  uint64_t v3228;
  int32x4_t v3229;
  int32x4_t v3230;
  int32x4_t v3231;
  int32x4_t v3232;
  int32x4_t v3233;
  int8x16_t v3234;
  uint64_t v3235;
  int8x16_t v3236;
  int8x16_t v3237;
  int8x16_t v3238;
  uint8x8_t v3239;
  uint16x8_t v3240;
  uint32x4_t v3241;
  uint64x2_t v3242;
  uint64x2_t v3243;
  uint64x2_t v3244;
  uint32x4_t v3245;
  uint64x2_t v3246;
  uint64x2_t v3247;
  uint64x2_t v3248;
  uint64x2_t v3249;
  uint64x2_t v3250;
  int8x16_t v3251;
  uint64_t v3252;
  int32x4_t v3253;
  int32x4_t v3254;
  int v3255;
  unsigned int v3256;
  int8x8_t v3257;
  uint8x8_t *v3258;
  unint64_t v3259;
  void (*v3260)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3261;
  signed int v3262;
  int v3263;
  unsigned int v3264;
  BOOL v3265;
  int v3266;
  uint8x8_t v3268;
  int v3269;
  int v3270;
  unsigned int v3271;
  uint64_t v3273;
  uint64_t v3274;
  uint8x8_t *v3275;
  int v3276;
  int32x4_t v3277;
  int32x4_t v3278;
  int32x4_t v3279;
  int32x4_t v3280;
  int32x4_t v3281;
  int8x16_t v3282;
  uint64_t v3283;
  int8x16_t v3284;
  int8x16_t v3285;
  int8x16_t v3286;
  uint8x8_t v3287;
  uint16x8_t v3288;
  uint32x4_t v3289;
  uint64x2_t v3290;
  uint64x2_t v3291;
  uint64x2_t v3292;
  uint32x4_t v3293;
  uint64x2_t v3294;
  uint64x2_t v3295;
  uint64x2_t v3296;
  uint64x2_t v3297;
  uint64x2_t v3298;
  int8x16_t v3299;
  uint8x8_t v3300;
  unsigned int v3301;
  uint64_t v3302;
  unint64_t v3303;
  int8x8_t v3304;
  int8x8_t v3305;
  int v3306;
  int v3307;
  int8x8_t v3308;
  unsigned int v3309;
  int v3310;
  unsigned int v3311;
  uint64_t v3312;
  int v3313;
  int v3314;
  uint8x8_t *v3315;
  unint64_t v3316;
  void (*v3317)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3318;
  signed int v3319;
  int v3320;
  unsigned int v3321;
  BOOL v3322;
  int v3323;
  uint8x8_t v3325;
  int v3326;
  int v3327;
  unsigned int v3328;
  uint64_t v3330;
  uint64_t v3331;
  uint8x8_t *v3332;
  int v3333;
  int32x4_t v3334;
  int32x4_t v3335;
  int32x4_t v3336;
  int32x4_t v3337;
  int32x4_t v3338;
  int8x16_t v3339;
  uint64_t v3340;
  int8x16_t v3341;
  int8x16_t v3342;
  int8x16_t v3343;
  uint8x8_t v3344;
  uint16x8_t v3345;
  uint32x4_t v3346;
  uint64x2_t v3347;
  uint64x2_t v3348;
  uint64x2_t v3349;
  uint32x4_t v3350;
  uint64x2_t v3351;
  uint64x2_t v3352;
  uint64x2_t v3353;
  uint64x2_t v3354;
  uint64x2_t v3355;
  int8x16_t v3356;
  uint8x8_t v3357;
  unsigned int v3358;
  int8x8_t v3359;
  uint64_t v3360;
  int v3361;
  unsigned int v3362;
  int8x8_t v3363;
  uint8x8_t *v3364;
  unint64_t v3365;
  void (*v3366)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3367;
  int v3368;
  unsigned int v3369;
  BOOL v3370;
  unsigned int v3371;
  int v3372;
  uint8x8_t v3373;
  int v3374;
  int v3375;
  unsigned int v3376;
  uint64_t v3377;
  uint8x8_t *v3378;
  int v3379;
  uint8x8_t v3380;
  unsigned int v3381;
  uint64_t v3382;
  unint64_t v3383;
  int8x8_t v3384;
  int8x8_t v3385;
  int v3386;
  uint64_t v3387;
  int32x4_t v3388;
  int32x4_t v3389;
  int32x4_t v3390;
  int32x4_t v3391;
  int32x4_t v3392;
  int8x16_t v3393;
  uint64_t v3394;
  int8x16_t v3395;
  int8x16_t v3396;
  int8x16_t v3397;
  uint8x8_t v3398;
  uint16x8_t v3399;
  uint32x4_t v3400;
  uint64x2_t v3401;
  uint64x2_t v3402;
  uint64x2_t v3403;
  uint32x4_t v3404;
  uint64x2_t v3405;
  uint64x2_t v3406;
  uint64x2_t v3407;
  uint64x2_t v3408;
  uint64x2_t v3409;
  int8x16_t v3410;
  uint8x8_t v3411;
  unsigned int v3412;
  int8x8_t v3413;
  int v3414;
  int v3415;
  int v3416;
  int8x8_t v3417;
  unsigned int v3418;
  uint64_t v3419;
  uint8x8_t *v3420;
  signed int v3421;
  unint64_t v3422;
  uint64_t v3423;
  int v3424;
  void (*v3425)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3426;
  BOOL v3427;
  int v3428;
  uint8x8_t *v3430;
  uint8x8_t v3431;
  int v3432;
  int v3433;
  unsigned int v3434;
  uint64_t v3436;
  uint64_t v3437;
  uint8x8_t *v3438;
  int32x4_t v3439;
  signed int v3440;
  int32x4_t v3441;
  int32x4_t v3442;
  int32x4_t v3443;
  int32x4_t v3444;
  int8x16_t v3445;
  int32x4_t v3446;
  int32x4_t v3447;
  uint64_t v3448;
  int8x16_t v3449;
  int8x16_t v3450;
  int8x16_t v3451;
  uint8x8_t v3452;
  uint16x8_t v3453;
  uint32x4_t v3454;
  uint64x2_t v3455;
  uint64x2_t v3456;
  uint64x2_t v3457;
  uint32x4_t v3458;
  uint64x2_t v3459;
  uint64x2_t v3460;
  uint64x2_t v3461;
  uint64x2_t v3462;
  uint64x2_t v3463;
  int8x16_t v3464;
  uint8x8_t v3465;
  unsigned int v3466;
  int8x8_t v3467;
  int v3468;
  int v3469;
  int v3470;
  uint64_t v3471;
  int8x8_t v3472;
  int v3473;
  uint8x8_t *v3474;
  unint64_t v3475;
  uint64_t v3476;
  int v3477;
  void (*v3478)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3479;
  unsigned int v3480;
  BOOL v3481;
  signed int v3482;
  int v3483;
  uint8x8_t *v3484;
  uint8x8_t v3485;
  int v3486;
  int v3487;
  unsigned int v3488;
  uint64_t v3490;
  uint64_t v3491;
  uint8x8_t *v3492;
  int32x4_t v3493;
  int32x4_t v3494;
  int32x4_t v3495;
  int32x4_t v3496;
  int32x4_t v3497;
  int8x16_t v3498;
  int32x4_t v3499;
  int32x4_t v3500;
  uint64_t v3501;
  int8x16_t v3502;
  int8x16_t v3503;
  int8x16_t v3504;
  uint8x8_t v3505;
  uint16x8_t v3506;
  uint32x4_t v3507;
  uint64x2_t v3508;
  uint64x2_t v3509;
  uint64x2_t v3510;
  uint32x4_t v3511;
  uint64x2_t v3512;
  uint64x2_t v3513;
  uint64x2_t v3514;
  uint64x2_t v3515;
  uint64x2_t v3516;
  int8x16_t v3517;
  uint8x8_t v3518;
  unsigned int v3519;
  int v3520;
  int v3521;
  int8x8_t v3522;
  unsigned int v3523;
  uint64_t v3524;
  uint8x8_t *v3525;
  signed int v3526;
  unint64_t v3527;
  uint64_t v3528;
  int v3529;
  void (*v3530)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3531;
  BOOL v3532;
  int v3533;
  uint8x8_t *v3535;
  uint8x8_t v3536;
  int v3537;
  int v3538;
  unsigned int v3539;
  uint64_t v3541;
  uint64_t v3542;
  uint8x8_t *v3543;
  int32x4_t v3544;
  signed int v3545;
  int32x4_t v3546;
  int32x4_t v3547;
  int32x4_t v3548;
  int32x4_t v3549;
  int8x16_t v3550;
  int32x4_t v3551;
  int32x4_t v3552;
  uint64_t v3553;
  int8x16_t v3554;
  int8x16_t v3555;
  int8x16_t v3556;
  uint8x8_t v3557;
  uint16x8_t v3558;
  uint32x4_t v3559;
  uint64x2_t v3560;
  uint64x2_t v3561;
  uint64x2_t v3562;
  uint32x4_t v3563;
  uint64x2_t v3564;
  uint64x2_t v3565;
  uint64x2_t v3566;
  uint64x2_t v3567;
  uint64x2_t v3568;
  int8x16_t v3569;
  uint8x8_t v3570;
  unsigned int v3571;
  int8x8_t v3572;
  int v3573;
  int v3574;
  int v3575;
  uint8x8_t *v3576;
  signed int v3577;
  unint64_t v3578;
  uint64_t v3579;
  int v3580;
  void (*v3581)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3582;
  unsigned int v3583;
  BOOL v3584;
  int v3585;
  uint8x8_t *v3587;
  uint8x8_t v3588;
  int v3589;
  int v3590;
  unsigned int v3591;
  uint64_t v3593;
  uint64_t v3594;
  uint8x8_t *v3595;
  int32x4_t v3596;
  int v3597;
  int32x4_t v3598;
  int32x4_t v3599;
  int32x4_t v3600;
  int32x4_t v3601;
  int8x16_t v3602;
  int32x4_t v3603;
  int32x4_t v3604;
  uint64_t v3605;
  int8x16_t v3606;
  int8x16_t v3607;
  int8x16_t v3608;
  uint8x8_t v3609;
  uint16x8_t v3610;
  uint32x4_t v3611;
  uint64x2_t v3612;
  uint64x2_t v3613;
  uint64x2_t v3614;
  uint32x4_t v3615;
  uint64x2_t v3616;
  uint64x2_t v3617;
  uint64x2_t v3618;
  uint64x2_t v3619;
  uint64x2_t v3620;
  int8x16_t v3621;
  uint8x8_t v3622;
  unsigned int v3623;
  int v3624;
  int v3625;
  int8x8_t v3626;
  unsigned int v3627;
  uint64_t v3628;
  uint8x8_t *v3629;
  signed int v3630;
  unint64_t v3631;
  uint64_t v3632;
  int v3633;
  void (*v3634)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3635;
  BOOL v3636;
  int v3637;
  uint8x8_t *v3639;
  uint8x8_t v3640;
  int v3641;
  int v3642;
  unsigned int v3643;
  uint64_t v3645;
  uint64_t v3646;
  uint8x8_t *v3647;
  int32x4_t v3648;
  signed int v3649;
  int32x4_t v3650;
  int32x4_t v3651;
  int32x4_t v3652;
  int32x4_t v3653;
  int8x16_t v3654;
  int32x4_t v3655;
  int32x4_t v3656;
  uint64_t v3657;
  int8x16_t v3658;
  int8x16_t v3659;
  int8x16_t v3660;
  uint8x8_t v3661;
  uint16x8_t v3662;
  uint32x4_t v3663;
  uint64x2_t v3664;
  uint64x2_t v3665;
  uint64x2_t v3666;
  uint32x4_t v3667;
  uint64x2_t v3668;
  uint64x2_t v3669;
  uint64x2_t v3670;
  uint64x2_t v3671;
  uint64x2_t v3672;
  int8x16_t v3673;
  uint8x8_t v3674;
  unsigned int v3675;
  int8x8_t v3676;
  int v3677;
  int v3678;
  int v3679;
  int v3680;
  int8x8_t v3681;
  unsigned int v3682;
  uint64_t v3683;
  int8x8_t v3684;
  _BOOL4 v3685;
  int v3686;
  uint64_t v3687;
  uint8x8_t *v3688;
  int32x4_t v3689;
  int32x4_t v3690;
  uint64_t v3691;
  uint64_t v3692;
  int v3693;
  int v3694;
  unsigned int v3695;
  int8x8_t v3696;
  uint8x8_t *v3697;
  unint64_t v3698;
  void (*v3699)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3700;
  int v3701;
  unsigned int v3702;
  BOOL v3703;
  unsigned int v3704;
  int v3705;
  uint8x8_t v3706;
  int v3707;
  int v3708;
  unsigned int v3709;
  uint64_t v3711;
  uint64_t v3712;
  uint8x8_t *v3713;
  int v3714;
  int32x4_t v3715;
  int32x4_t v3716;
  int32x4_t v3717;
  int32x4_t v3718;
  int32x4_t v3719;
  int8x16_t v3720;
  uint64_t v3721;
  int8x16_t v3722;
  int8x16_t v3723;
  int8x16_t v3724;
  uint8x8_t v3725;
  uint16x8_t v3726;
  uint32x4_t v3727;
  uint64x2_t v3728;
  uint64x2_t v3729;
  uint64x2_t v3730;
  uint32x4_t v3731;
  uint64x2_t v3732;
  uint64x2_t v3733;
  uint64x2_t v3734;
  uint64x2_t v3735;
  uint64x2_t v3736;
  int8x16_t v3737;
  uint8x8_t v3738;
  unsigned int v3739;
  uint64_t v3740;
  unint64_t v3741;
  int8x8_t v3742;
  int8x8_t v3743;
  int v3744;
  int v3745;
  int8x8_t v3746;
  unsigned int v3747;
  uint8x8_t *v3748;
  unint64_t v3749;
  void (*v3750)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3751;
  signed int v3752;
  int v3753;
  BOOL v3754;
  int v3755;
  uint8x8_t v3757;
  int v3758;
  int v3759;
  unsigned int v3760;
  uint64_t v3761;
  uint8x8_t *v3762;
  signed int v3763;
  uint64_t v3765;
  int32x4_t v3766;
  int32x4_t v3767;
  int32x4_t v3768;
  int32x4_t v3769;
  int32x4_t v3770;
  int8x16_t v3771;
  uint64_t v3772;
  int8x16_t v3773;
  int8x16_t v3774;
  int8x16_t v3775;
  uint8x8_t v3776;
  uint16x8_t v3777;
  uint32x4_t v3778;
  uint64x2_t v3779;
  uint64x2_t v3780;
  uint64x2_t v3781;
  uint32x4_t v3782;
  uint64x2_t v3783;
  uint64x2_t v3784;
  uint64x2_t v3785;
  uint64x2_t v3786;
  uint64x2_t v3787;
  int8x16_t v3788;
  uint8x8_t v3789;
  unsigned int v3790;
  uint64_t v3791;
  int8x8_t v3792;
  int v3793;
  int v3794;
  int8x8_t v3795;
  unsigned int v3796;
  uint8x8_t *v3797;
  unint64_t v3798;
  void (*v3799)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3800;
  signed int v3801;
  int v3802;
  BOOL v3803;
  int v3804;
  uint8x8_t v3806;
  int v3807;
  int v3808;
  unsigned int v3809;
  uint64_t v3811;
  uint64_t v3812;
  uint8x8_t *v3813;
  signed int v3814;
  int32x4_t v3815;
  int32x4_t v3816;
  int32x4_t v3817;
  int32x4_t v3818;
  int32x4_t v3819;
  int8x16_t v3820;
  uint64_t v3821;
  int8x16_t v3822;
  int8x16_t v3823;
  int8x16_t v3824;
  uint8x8_t v3825;
  uint16x8_t v3826;
  uint32x4_t v3827;
  uint64x2_t v3828;
  uint64x2_t v3829;
  uint64x2_t v3830;
  uint32x4_t v3831;
  uint64x2_t v3832;
  uint64x2_t v3833;
  uint64x2_t v3834;
  uint64x2_t v3835;
  uint64x2_t v3836;
  int8x16_t v3837;
  uint8x8_t v3838;
  unsigned int v3839;
  uint64_t v3840;
  int8x8_t v3841;
  int v3842;
  int v3843;
  int8x8_t v3844;
  unsigned int v3845;
  uint8x8_t *v3846;
  unint64_t v3847;
  void (*v3848)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3849;
  signed int v3850;
  int v3851;
  BOOL v3852;
  int v3853;
  uint8x8_t v3855;
  int v3856;
  int v3857;
  unsigned int v3858;
  uint64_t v3860;
  uint64_t v3861;
  uint8x8_t *v3862;
  signed int v3863;
  int32x4_t v3864;
  int32x4_t v3865;
  int32x4_t v3866;
  int32x4_t v3867;
  int32x4_t v3868;
  int8x16_t v3869;
  uint64_t v3870;
  int8x16_t v3871;
  int8x16_t v3872;
  int8x16_t v3873;
  uint8x8_t v3874;
  uint16x8_t v3875;
  uint32x4_t v3876;
  uint64x2_t v3877;
  uint64x2_t v3878;
  uint64x2_t v3879;
  uint32x4_t v3880;
  uint64x2_t v3881;
  uint64x2_t v3882;
  uint64x2_t v3883;
  uint64x2_t v3884;
  uint64x2_t v3885;
  int8x16_t v3886;
  uint8x8_t v3887;
  unsigned int v3888;
  uint64_t v3889;
  int8x8_t v3890;
  int v3891;
  int v3892;
  int8x8_t v3893;
  unsigned int v3894;
  uint8x8_t *v3895;
  unint64_t v3896;
  void (*v3897)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3898;
  signed int v3899;
  int v3900;
  BOOL v3901;
  int v3902;
  uint8x8_t v3904;
  int v3905;
  int v3906;
  unsigned int v3907;
  uint64_t v3909;
  uint64_t v3910;
  uint8x8_t *v3911;
  signed int v3912;
  int32x4_t v3913;
  int32x4_t v3914;
  int32x4_t v3915;
  int32x4_t v3916;
  int32x4_t v3917;
  int8x16_t v3918;
  uint64_t v3919;
  int8x16_t v3920;
  int8x16_t v3921;
  int8x16_t v3922;
  uint8x8_t v3923;
  uint16x8_t v3924;
  uint32x4_t v3925;
  uint64x2_t v3926;
  uint64x2_t v3927;
  uint64x2_t v3928;
  uint32x4_t v3929;
  uint64x2_t v3930;
  uint64x2_t v3931;
  uint64x2_t v3932;
  uint64x2_t v3933;
  uint64x2_t v3934;
  int8x16_t v3935;
  uint8x8_t v3936;
  unsigned int v3937;
  uint64_t v3938;
  int8x8_t v3939;
  int v3940;
  int v3941;
  int8x8_t v3942;
  unsigned int v3943;
  uint8x8_t *v3944;
  unint64_t v3945;
  void (*v3946)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3947;
  signed int v3948;
  int v3949;
  BOOL v3950;
  int v3951;
  uint8x8_t v3953;
  int v3954;
  int v3955;
  unsigned int v3956;
  uint64_t v3958;
  uint64_t v3959;
  uint8x8_t *v3960;
  signed int v3961;
  int32x4_t v3962;
  int32x4_t v3963;
  int32x4_t v3964;
  int32x4_t v3965;
  int32x4_t v3966;
  int8x16_t v3967;
  uint64_t v3968;
  int8x16_t v3969;
  int8x16_t v3970;
  int8x16_t v3971;
  uint8x8_t v3972;
  uint16x8_t v3973;
  uint32x4_t v3974;
  uint64x2_t v3975;
  uint64x2_t v3976;
  uint64x2_t v3977;
  uint32x4_t v3978;
  uint64x2_t v3979;
  uint64x2_t v3980;
  uint64x2_t v3981;
  uint64x2_t v3982;
  uint64x2_t v3983;
  int8x16_t v3984;
  uint8x8_t v3985;
  unsigned int v3986;
  uint64_t v3987;
  int8x8_t v3988;
  char v3989;
  int v3990;
  int v3991;
  int8x8_t v3992;
  unsigned int v3993;
  char v3994;
  uint8x8_t *v3995;
  unint64_t v3996;
  void (*v3997)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v3998;
  signed int v3999;
  int v4000;
  BOOL v4001;
  int v4002;
  uint8x8_t v4004;
  int v4005;
  int v4006;
  unsigned int v4007;
  uint64_t v4009;
  uint64_t v4010;
  uint8x8_t *v4011;
  signed int v4012;
  int32x4_t v4013;
  int32x4_t v4014;
  int32x4_t v4015;
  int32x4_t v4016;
  int32x4_t v4017;
  int8x16_t v4018;
  uint64_t v4019;
  int8x16_t v4020;
  int8x16_t v4021;
  int8x16_t v4022;
  uint8x8_t v4023;
  uint16x8_t v4024;
  uint32x4_t v4025;
  uint64x2_t v4026;
  uint64x2_t v4027;
  uint64x2_t v4028;
  uint32x4_t v4029;
  uint64x2_t v4030;
  uint64x2_t v4031;
  uint64x2_t v4032;
  uint64x2_t v4033;
  uint64x2_t v4034;
  int8x16_t v4035;
  uint8x8_t v4036;
  unsigned int v4037;
  uint64_t v4038;
  int8x8_t v4039;
  char v4040;
  int v4041;
  int v4042;
  int8x8_t v4043;
  unsigned int v4044;
  char v4045;
  char v4046;
  uint8x8_t *v4047;
  unint64_t v4048;
  void (*v4049)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v4050;
  signed int v4051;
  int v4052;
  BOOL v4053;
  int v4054;
  uint8x8_t v4056;
  int v4057;
  int v4058;
  unsigned int v4059;
  uint64_t v4060;
  uint8x8_t *v4061;
  signed int v4062;
  BOOL v4063;
  uint64_t v4064;
  int32x4_t v4065;
  int32x4_t v4066;
  int32x4_t v4067;
  int32x4_t v4068;
  int32x4_t v4069;
  int8x16_t v4070;
  uint64_t v4071;
  int8x16_t v4072;
  int8x16_t v4073;
  int8x16_t v4074;
  uint8x8_t v4075;
  uint16x8_t v4076;
  uint32x4_t v4077;
  uint64x2_t v4078;
  uint64x2_t v4079;
  uint64x2_t v4080;
  uint32x4_t v4081;
  uint64x2_t v4082;
  uint64x2_t v4083;
  uint64x2_t v4084;
  uint64x2_t v4085;
  uint64x2_t v4086;
  int8x16_t v4087;
  uint8x8_t v4088;
  unsigned int v4089;
  uint64_t v4090;
  int8x8_t v4091;
  char v4092;
  int v4093;
  int v4094;
  int8x8_t v4095;
  unsigned int v4096;
  char v4097;
  char v4098;
  char v4099;
  char v4100;
  char v4101;
  uint8x8_t *v4102;
  unint64_t v4103;
  void (*v4104)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v4105;
  char v4106;
  char v4107;
  signed int v4108;
  int v4109;
  BOOL v4110;
  int v4111;
  uint8x8_t v4113;
  int v4114;
  int v4115;
  unsigned int v4116;
  uint64_t v4117;
  uint8x8_t *v4118;
  signed int v4119;
  BOOL v4120;
  uint64_t v4121;
  int32x4_t v4122;
  int32x4_t v4123;
  int32x4_t v4124;
  int32x4_t v4125;
  int32x4_t v4126;
  int8x16_t v4127;
  uint64_t v4128;
  int8x16_t v4129;
  int8x16_t v4130;
  int8x16_t v4131;
  uint8x8_t v4132;
  uint16x8_t v4133;
  uint32x4_t v4134;
  uint64x2_t v4135;
  uint64x2_t v4136;
  uint64x2_t v4137;
  uint32x4_t v4138;
  uint64x2_t v4139;
  uint64x2_t v4140;
  uint64x2_t v4141;
  uint64x2_t v4142;
  uint64x2_t v4143;
  int8x16_t v4144;
  uint8x8_t v4145;
  unsigned int v4146;
  uint64_t v4147;
  int8x8_t v4148;
  char v4149;
  int v4150;
  _DWORD *v4151;
  unsigned int v4152;
  int v4153;
  int v4154;
  int v4155;
  int v4156;
  uint64_t v4157;
  uint64_t v4158;
  int v4159;
  int *v4160;
  int v4161;
  uint64_t v4162;
  uint64_t v4163;
  uint64_t v4164;
  uint64_t v4165;
  int8x16_t *v4166;
  int v4167;
  int v4168;
  uint64_t v4169;
  int64_t v4170;
  int v4171;
  int v4172;
  int v4173;
  uint64_t v4174;
  uint64_t v4175;
  int v4176;
  uint64_t v4177;
  int v4178;
  __int8 *v4179;
  unsigned __int8 *v4180;
  unsigned __int8 *v4181;
  char *v4182;
  unsigned __int8 *v4183;
  unsigned __int8 *v4184;
  uint64_t v4185;
  uint64_t v4186;
  uint64_t v4187;
  uint64_t v4188;
  uint64_t v4189;
  uint64_t v4190;
  uint64_t v4191;
  uint64_t v4192;
  int v4193;
  int v4194;
  unsigned __int8 *v4195;
  uint64_t v4196;
  uint64_t v4197;
  __int16 v4198;
  unsigned int v4199;
  int16x8_t *v4200;
  uint64_t v4201;
  int64x2_t v4202;
  int64x2_t v4203;
  uint64_t v4204;
  _QWORD *v4205;
  uint64_t v4206;
  uint64_t v4207;
  uint64_t v4208;
  uint64_t v4209;
  int v4210;
  int v4211;
  uint64_t v4212;
  uint64_t v4213;
  _BYTE *v4214;
  char *v4215;
  uint64_t v4216;
  uint64_t v4217;
  uint64_t v4218;
  uint64_t v4219;
  uint64_t v4220;
  uint64_t *v4221;
  void (*v4222)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v4223;
  uint64_t v4224;
  uint64_t v4225;
  uint64_t v4226;
  uint64_t v4227;
  uint16x8_t v4228;
  uint8x8_t v4229;
  __int32 *v4230;
  uint8x8_t v4231;
  __int32 *v4232;
  uint64_t v4233;
  char v4234;
  int16x8_t *v4235;
  const __int16 *v4236;
  const __int16 *v4237;
  __int16 *v4238;
  uint64_t v4239;
  int16x4_t v4240;
  _OWORD *v4241;
  _BYTE *v4242;
  uint64_t v4243;
  _BYTE *v4244;
  _BYTE *v4245;
  _BYTE *v4246;
  _BYTE *v4247;
  _BYTE *v4248;
  uint64_t v4249;
  _BYTE *v4250;
  _BYTE *v4251;
  unint64_t v4252;
  int v4253;
  uint8x8_t *v4254;
  unint64_t v4255;
  uint64_t v4256;
  int v4257;
  void (*v4258)(_QWORD, uint8x8_t *, _QWORD *, uint64_t);
  uint64_t v4259;
  unsigned int v4260;
  BOOL v4261;
  signed int v4262;
  int v4263;
  uint8x8_t *v4264;
  uint8x8_t v4265;
  int v4266;
  int v4267;
  unsigned int v4268;
  uint64_t v4270;
  uint64_t v4271;
  uint8x8_t *v4272;
  int32x4_t v4273;
  int32x4_t v4274;
  int32x4_t v4275;
  int32x4_t v4276;
  int32x4_t v4277;
  int8x16_t v4278;
  int32x4_t v4279;
  int32x4_t v4280;
  uint64_t v4281;
  int8x16_t v4282;
  int8x16_t v4283;
  int8x16_t v4284;
  uint8x8_t v4285;
  uint16x8_t v4286;
  uint32x4_t v4287;
  uint64x2_t v4288;
  uint64x2_t v4289;
  uint64x2_t v4290;
  uint32x4_t v4291;
  uint64x2_t v4292;
  uint64x2_t v4293;
  uint64x2_t v4294;
  uint64x2_t v4295;
  uint64x2_t v4296;
  int8x16_t v4297;
  unsigned __int8 *v4298;
  unsigned __int8 *v4299;
  unsigned __int8 *v4300;
  unint64_t v4301;
  char *v4302;
  size_t v4303;
  char *v4304;
  int v4305;
  size_t v4306;
  uint64_t v4307;
  char *v4308;
  uint64_t v4309;
  uint64_t v4310;
  char *v4311;
  int v4312;
  int v4313;
  char *v4314;
  char *v4315;
  unint64_t v4316;
  size_t v4317;
  char *v4318;
  char *v4319;
  int v4320;
  size_t v4321;
  uint64_t v4322;
  uint64_t v4323;
  char *v4324;
  char *v4325;
  int v4326;
  int v4327;
  char *v4328;
  char *v4329;
  int v4330;
  int v4331;
  uint64_t v4332;
  uint64_t v4333;
  uint64_t v4334;
  _DWORD *v4335;
  int v4336;
  uint8x8_t v4337;
  unsigned int v4338;
  uint64_t v4339;
  int32x4_t v4340;
  int32x4_t v4341;
  int32x4_t v4342;
  int32x4_t v4343;
  int32x4_t v4344;
  int8x16_t v4345;
  int32x4_t v4346;
  int32x4_t v4347;
  uint64_t v4348;
  int8x16_t v4349;
  int8x16_t v4350;
  int8x16_t v4351;
  uint8x8_t v4352;
  uint16x8_t v4353;
  uint32x4_t v4354;
  uint64x2_t v4355;
  uint64x2_t v4356;
  uint64x2_t v4357;
  uint32x4_t v4358;
  uint64x2_t v4359;
  uint64x2_t v4360;
  uint64x2_t v4361;
  uint64x2_t v4362;
  uint64x2_t v4363;
  int8x16_t v4364;
  _DWORD *v4365;
  int v4366;
  _DWORD *v4367;
  __int128 *v4368;
  int v4369;
  unsigned __int8 *v4370;
  unsigned __int8 *v4371;
  unsigned __int8 *v4372;
  uint64_t v4373;
  uint64_t v4374;
  uint64_t v4375;
  uint64_t v4376;
  int v4377;
  int v4378;
  uint64_t v4379;
  int8x16_t *v4380;
  unsigned __int8 *v4381;
  int *v4382;
  int v4383;
  unint64_t v4384;
  uint64_t v4385;
  uint64_t v4386;
  uint64_t v4387;
  int *__attribute__((__org_typedef(jmp_buf))) v4388;
  uint8x8_t *v4389;
  uint64_t v4390;
  unint64_t v4391;
  unint64_t v4392;
  uint64_t v4393;
  uint8x8_t *v4394;
  unsigned int v4395;
  uint64_t v4396;
  unsigned __int8 *v4397;
  char v4398;
  char v4399;
  char v4400;
  unsigned __int8 *v4401;
  unint64_t v4402;
  unint64_t v4403;
  unint64_t v4404;
  char v4405;
  int8x16_t *v4406;
  char v4407;
  int8x8_t *v4408;
  char v4409;
  char v4410;
  int v4411;
  char v4412;
  uint64_t v4413;
  char v4414;
  uint64_t v4415;
  uint64_t v4416;
  int v4417;
  uint64_t v4418;
  unint64_t v4419;
  unint64_t v4420;
  int16x8_t *v4421;
  char v4422;
  char v4423;
  char v4424;
  uint64_t v4425;
  int v4426;
  uint64_t v4427;
  uint64_t v4428;
  int v4429;
  int v4430;
  char v4431;
  char v4432;
  int v4433;
  unint64_t v4434;
  int v4435;
  int v4436;
  int v4437;
  uint64_t v4438;
  _QWORD *v4439;
  _DWORD v4441[4];
  _QWORD v4442[3];
  __int128 v4443;
  uint64_t v4444;
  __int128 v4445;
  uint64_t v4446;
  __int128 v4447;
  uint64_t v4448;
  char v4449;
  char v4450;
  char v4451;
  char v4452;
  char v4453;
  char v4454;
  char v4455;
  char v4456;
  _BYTE v4457[3];
  char v4458;
  _QWORD v4459[3];
  int16x8x2_t v4460;
  int16x8x2_t v4461;
  int16x8x2_t v4462;

  v1 = a1;
  v4459[1] = *MEMORY[0x24BDAC8D0];
  v4387 = a1 + 3896;
  v4388 = (int *)(a1 + 4384);
  v2 = *(uint8x8_t **)(a1 + 10720);
  v3 = *(unsigned int *)(a1 + 10792);
  v4 = (_DWORD)v2 + v3;
  v4366 = *(_DWORD *)(a1 + 10984);
  v5 = *(__int128 **)(a1 + 4352);
  *(_DWORD *)(a1 + 4064) = 0;
  v4368 = v5;
  *((_DWORD *)v5 + 37) = 0;
  if (v3 <= 2)
  {
    if (!*(_DWORD *)(a1 + 10976))
    {
      vpx_internal_error((uint64_t)v4388, 7, "Truncated packet");
      v1 = a1;
    }
    v4367 = (_DWORD *)(v1 + 7412);
    *(_QWORD *)(v1 + 7412) = 0x100000001;
    *(_DWORD *)(v1 + 10208) = 0;
    if (*(_DWORD *)(v1 + 10980))
    {
      v4392 = 0;
      v6 = (_DWORD *)(v1 + 10980);
      v7 = 1;
      goto LABEL_23;
    }
    return 0xFFFFFFFFLL;
  }
  v8 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(a1 + 10992);
  if (v8)
  {
    if (v3 >= 0xA)
      v9 = 10;
    else
      v9 = v3;
    v10 = (uint8x8_t *)v4442;
    v8(*(_QWORD *)(a1 + 11000), v2, v4442, v9);
    v1 = a1;
  }
  else
  {
    v10 = v2;
  }
  *(_DWORD *)(v1 + 7412) = v10->i8[0] & 1;
  v11 = (v10->u8[0] >> 1) & 7;
  *(_DWORD *)(v1 + 10208) = v11;
  *(_DWORD *)(v1 + 7416) = (v10->u8[0] >> 4) & 1;
  v4392 = (v10->u16[0] | ((unint64_t)v10->u8[2] << 16)) >> 5;
  if (!*(_DWORD *)(v1 + 10976) && (v10->u16[0] | ((unint64_t)v10->u8[2] << 16)) >> 5 > v3)
  {
    vpx_internal_error((uint64_t)v4388, 7, "Truncated packet or corrupt partition 0 length");
    v1 = a1;
    v11 = *(_DWORD *)(a1 + 10208);
  }
  v12 = (uint8x8_t *)((char *)v2 + 3);
  v13 = v11 - 1;
  if (v13 > 2)
  {
    v15 = 0;
    v16 = 0;
    v18 = 0;
    v17 = 0;
  }
  else
  {
    v14 = 4 * (int)v13;
    v15 = *(_DWORD *)((char *)&unk_208F3C2E0 + v14);
    v16 = *(_DWORD *)((char *)&unk_208F3C2EC + v14);
    v17 = *(_DWORD *)((char *)&unk_208F3C2F8 + v14);
    v18 = 1;
  }
  v4367 = (_DWORD *)(v1 + 7412);
  *(_DWORD *)(v1 + 7444) = v15;
  *(_DWORD *)(v1 + 7504) = v16;
  *(_DWORD *)(v1 + 7448) = v18;
  *(_DWORD *)(v1 + 7452) = v17;
  if (*(_DWORD *)(v1 + 7412))
  {
    v19 = *v4368;
    *(_OWORD *)(v1 + 3568) = v4368[1];
    *(_OWORD *)(v1 + 3552) = v19;
    v20 = v4368[2];
    v21 = v4368[3];
    v22 = v4368[4];
    *(_OWORD *)(v1 + 3632) = v4368[5];
    *(_OWORD *)(v1 + 3616) = v22;
    *(_OWORD *)(v1 + 3600) = v21;
    *(_OWORD *)(v1 + 3584) = v20;
    v23 = v4368[6];
    v24 = v4368[7];
    v25 = v4368[8];
    *(_OWORD *)(v1 + 3696) = v4368[9];
    *(_OWORD *)(v1 + 3680) = v25;
    *(_OWORD *)(v1 + 3664) = v24;
    *(_OWORD *)(v1 + 3648) = v23;
    v26 = *v4368;
    *(_OWORD *)(v1 + 3728) = v4368[1];
    *(_OWORD *)(v1 + 3712) = v26;
    v27 = v4368[2];
    v28 = v4368[3];
    v29 = v4368[4];
    *(_OWORD *)(v1 + 3792) = v4368[5];
    *(_OWORD *)(v1 + 3776) = v29;
    *(_OWORD *)(v1 + 3760) = v28;
    *(_OWORD *)(v1 + 3744) = v27;
    v30 = v4368[6];
    v31 = v4368[7];
    v32 = v4368[8];
    *(_OWORD *)(v1 + 3856) = v4368[9];
    *(_OWORD *)(v1 + 3840) = v32;
    *(_OWORD *)(v1 + 3824) = v31;
    *(_OWORD *)(v1 + 3808) = v30;
LABEL_20:
    v2 = v12;
    goto LABEL_21;
  }
  if (v3 < 7)
    goto LABEL_71;
  if (v10->u8[3] != 157 || v10->i8[4] != 1 || v10->i8[5] != 42)
  {
    vpx_internal_error((uint64_t)v4388, 5, "Invalid frame sync code");
    v1 = a1;
  }
  if (v3 < 0xA)
  {
LABEL_71:
    v2 = (uint8x8_t *)((char *)v2 + v3);
    if (!*(_DWORD *)(v1 + 10976))
    {
      vpx_internal_error((uint64_t)v4388, 7, "Truncated key frame header");
      v1 = a1;
      goto LABEL_20;
    }
  }
  else
  {
    *(_DWORD *)(v1 + 6208) = v10->u8[6] | ((v10->i8[7] & 0x3F) << 8);
    *(_DWORD *)(v1 + 6216) = v10->u8[7] >> 6;
    *(_DWORD *)(v1 + 6212) = v10[1].u8[0] | ((v10[1].i8[1] & 0x3F) << 8);
    *(_DWORD *)(v1 + 6220) = v10[1].u8[1] >> 6;
    v2 = (uint8x8_t *)((char *)v2 + 10);
  }
LABEL_21:
  v7 = *(_DWORD *)(v1 + 7412);
  v6 = (_DWORD *)(v1 + 10980);
  if (!*(_DWORD *)(v1 + 10980))
  {
    if (v7)
      return 0xFFFFFFFFLL;
LABEL_38:
    v4365 = (_DWORD *)(v1 + 10980);
    *(_OWORD *)(v1 + 10165) = vp8_default_mv_context;
    *(_OWORD *)(v1 + 10181) = unk_208F3D58A;
    *(_QWORD *)(v1 + 10195) = 0xFEFEECCBB4944A82;
    *(_DWORD *)(v1 + 9099) = 629954160;
    *(_WORD *)(v1 + 9103) = vp8_uv_mode_prob;
    *(_BYTE *)(v1 + 9105) = -52;
    *(_WORD *)(v1 + 9106) = sub_mv_ref_prob;
    *(_BYTE *)(v1 + 9108) = 25;
    memcpy((void *)(v1 + 9109), &default_coef_probs, 0x420uLL);
    v1 = a1;
    *(_QWORD *)(v4387 + 79) = 0;
    *(_BYTE *)(a1 + 3971) = 0;
    *(_DWORD *)(v4387 + 93) = 0;
    *(_DWORD *)(v4387 + 101) = 0;
    *(_OWORD *)(v4387 + 4028) = xmmword_208F08AB0;
    *(_QWORD *)(a1 + 7952) = 0;
    v7 = *(_DWORD *)(a1 + 7412);
    goto LABEL_39;
  }
  if (!v7)
    goto LABEL_38;
LABEL_23:
  v4365 = v6;
  if (*(_DWORD *)(v1 + 7448))
  {
    *(_QWORD *)(v1 + 4024) = vp8_bilinear_predict4x4_neon;
    *(_QWORD *)(v1 + 4032) = vp8_bilinear_predict8x4_neon;
    *(_QWORD *)(v1 + 4040) = vp8_bilinear_predict8x8_neon;
    *(_QWORD *)(v1 + 4048) = vp8_bilinear_predict16x16_neon;
    if (!*(_DWORD *)(v1 + 10972))
      goto LABEL_39;
  }
  else
  {
    *(_QWORD *)(v1 + 4024) = vp8_sixtap_predict4x4_neon;
    *(_QWORD *)(v1 + 4032) = vp8_sixtap_predict8x4_neon;
    *(_QWORD *)(v1 + 4040) = vp8_sixtap_predict8x8_neon;
    *(_QWORD *)(v1 + 4048) = vp8_sixtap_predict16x16_neon;
    if (!*(_DWORD *)(v1 + 10972))
      goto LABEL_39;
  }
  if (!*(_DWORD *)(v1 + 10976))
    *(_DWORD *)(v1 + 10976) = 1;
LABEL_39:
  *(_QWORD *)(v1 + 3960) = v1 + 7968;
  v34 = *(_BYTE **)(v1 + 7488);
  *(_QWORD *)(v1 + 3872) = v34;
  *(_DWORD *)(v1 + 3884) = v7;
  *v34 = 0;
  *(_DWORD *)(v1 + 3880) = *(_DWORD *)(v1 + 7436);
  *(_DWORD *)(v1 + 4064) = 0;
  if (*(_DWORD *)(v1 + 7452))
    v35 = -8;
  else
    v35 = -1;
  *(_DWORD *)(v1 + 3544) = v35;
  v36 = *(void (**)(void))(v1 + 10992);
  v37 = *(_QWORD *)(v1 + 11000);
  v4394 = v2;
  if (!v2 && v4)
  {
    vpx_internal_error((uint64_t)v4388, 2, "Failed to allocate BOOL decoder 0");
    v1 = a1;
    v38 = *(_DWORD *)(a1 + 10668);
    if (*(_DWORD *)(a1 + 7412))
      goto LABEL_45;
    goto LABEL_68;
  }
  v45 = (char *)v2 + (v4 - (_DWORD)v2);
  if (!v2)
    v45 = 0;
  *(_QWORD *)(v1 + 10640) = v45;
  *(_QWORD *)(v1 + 10648) = v2;
  *(_QWORD *)(v1 + 10656) = 0;
  *(_QWORD *)(v1 + 10664) = 0xFFFFFFFFF8;
  *(_QWORD *)(v1 + 10672) = v36;
  *(_QWORD *)(v1 + 10680) = v37;
  v46 = v45 - (char *)v2;
  v47 = 8 * v46;
  v48 = 64 - 8 * v46;
  v49 = v2;
  if (v36)
  {
    v49 = (uint8x8_t *)v4442;
    v36();
    v1 = a1;
  }
  v50 = 0;
  if (v48 < 0)
    v51 = -8;
  else
    v51 = 1073741816;
  if (v47)
    v52 = 1;
  else
    v52 = v48 <= -1;
  if (v52)
  {
    v53 = v48 & ~(v48 >> 31);
    if (v53 <= 56)
    {
      v54 = (uint8x8_t *)(v1 + 10648);
      v55 = *(uint8x8_t *)(v1 + 10648);
      v56 = 56;
      if ((56 - v53) < 0x38
        || (v57 = ((56 - v53) >> 3) + 1, v54 < (uint8x8_t *)&v49->i8[v57])
        && (unint64_t)v49 < v1 + 10656)
      {
        v50 = 0;
        v58 = *(_QWORD *)(v1 + 10648);
        v59 = v49;
LABEL_65:
        v60 = (uint8x8_t)(v58 + 1);
        do
        {
          v51 += 8;
          v61 = v59->u8[0];
          v59 = (uint8x8_t *)((char *)v59 + 1);
          *(_QWORD *)&v50 |= (unint64_t)v61 << v56;
          *v54 = v60;
          v56 -= 8;
          ++*(_QWORD *)&v60;
        }
        while (v56 >= v53);
        goto LABEL_67;
      }
      v58 = *(_QWORD *)&v55 + (v57 & 0x3FFFFFF8);
      v59 = (uint8x8_t *)((char *)v49 + (v57 & 0x3FFFFFF8));
      v56 = 56 - 8 * (v57 & 0x3FFFFFF8);
      v110 = 0uLL;
      v111 = (int32x4_t)v51;
      v112 = (int32x4_t)xmmword_208F3A680;
      v113 = (int32x4_t)xmmword_208F3A690;
      v114.i64[0] = 0x800000008;
      v114.i64[1] = 0x800000008;
      v115.i64[0] = 0x3F0000003FLL;
      v115.i64[1] = 0x3F0000003FLL;
      v116 = v57 & 0x3FFFFFF8;
      v117 = 0uLL;
      v118 = 0uLL;
      v119 = 0uLL;
      v120 = 0uLL;
      do
      {
        v111 = vaddq_s32(v111, v114);
        v121 = *v49++;
        v110 = vaddq_s32(v110, v114);
        v122 = vmovl_u8(v121);
        v123 = vmovl_high_u16(v122);
        v124.i64[0] = v123.u32[2];
        v124.i64[1] = v123.u32[3];
        v125 = v124;
        v124.i64[0] = v123.u32[0];
        v124.i64[1] = v123.u32[1];
        v126 = v124;
        v127 = vmovl_u16(*(uint16x4_t *)v122.i8);
        v124.i64[0] = v127.u32[2];
        v124.i64[1] = v127.u32[3];
        v128 = v124;
        v124.i64[0] = v127.u32[0];
        v124.i64[1] = v127.u32[1];
        v129 = v124;
        v124.i64[0] = v112.u32[2];
        v124.i64[1] = v112.u32[3];
        v130 = v124;
        v124.i64[0] = v112.u32[0];
        v124.i64[1] = v112.u32[1];
        v131 = v124;
        v124.i64[0] = v113.u32[2];
        v124.i64[1] = v113.u32[3];
        v132 = v124;
        v124.i64[0] = v113.u32[0];
        v124.i64[1] = v113.u32[1];
        v120 = vorrq_s8((int8x16_t)vshlq_u64(v125, v130), v120);
        v119 = vorrq_s8((int8x16_t)vshlq_u64(v126, v131), v119);
        v118 = vorrq_s8((int8x16_t)vshlq_u64(v128, v132), v118);
        v117 = vorrq_s8((int8x16_t)vshlq_u64(v129, v124), v117);
        *(_QWORD *)&v55 += 8;
        v113 = vaddq_s32(v113, v115);
        v112 = vaddq_s32(v112, v115);
        v116 -= 8;
      }
      while (v116);
      *v54 = v55;
      v133 = vorrq_s8(vorrq_s8(v117, v119), vorrq_s8(v118, v120));
      v50 = vorr_s8(*(int8x8_t *)v133.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v133, v133, 8uLL));
      v51 = vaddvq_s32(vaddq_s32(v111, v110));
      if ((v57 & 0x3FFFFFF8) != v57)
        goto LABEL_65;
    }
  }
LABEL_67:
  *(int8x8_t *)(v1 + 10656) = v50;
  *(_DWORD *)(v1 + 10664) = v51;
  v38 = *(_DWORD *)(v1 + 10668);
  if (*(_DWORD *)(v1 + 7412))
  {
LABEL_45:
    v39 = *(_DWORD *)(v1 + 10664);
    v40 = (((v38 << 7) - 128) >> 8) + 1;
    if ((v39 & 0x80000000) == 0)
      goto LABEL_46;
LABEL_150:
    v191 = *(uint8x8_t **)(v1 + 10648);
    v41 = *(int8x8_t *)(v1 + 10656);
    v192 = 48 - v39;
    v193 = *(_QWORD *)(v1 + 10640) - (_QWORD)v191;
    v194 = 8 * v193;
    v195 = 56 - v39 - 8 * v193;
    v196 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v196)
    {
      if (v193 >= 9)
        v197 = 9;
      else
        v197 = *(_QWORD *)(v1 + 10640) - (_QWORD)v191;
      v196(*(_QWORD *)(v1 + 10680), v191, v4442, v197);
      v191 = (uint8x8_t *)v4442;
    }
    if (v195 < 0)
      v198 = v39;
    else
      v198 = v39 + 0x40000000;
    if (v194)
      v199 = 1;
    else
      v199 = v195 <= -1;
    v200 = v195 & ~(v195 >> 31);
    if (!v199 || v192 < v200)
    {
      v1 = a1;
      goto LABEL_185;
    }
    v1 = a1;
    v202 = (uint8x8_t *)(a1 + 10648);
    v203 = *(uint8x8_t *)(a1 + 10648);
    v204 = v200 - 1;
    if (v200 - 1 >= (int)(40 - v39))
      v205 = 40 - v39;
    else
      v205 = v200 - 1;
    v206 = 47 - v39 - v205;
    if (v206 < 0x78)
      goto LABEL_182;
    if (v204 >= (int)(40 - v39))
      v204 = 40 - v39;
    if (v202 >= (uint8x8_t *)&v191->i8[((47 - v39 - v204) >> 3) + 1] || (unint64_t)v191 >= a1 + 10656)
    {
      v208 = (v206 >> 3) + 1;
      v209 = *(_QWORD *)&v203 + (v208 & 0x3FFFFFF8);
      v210 = (uint8x8_t *)((char *)v191 + (v208 & 0x3FFFFFF8));
      v211 = vdupq_n_s32(v192);
      v212 = v192 - 8 * (v208 & 0x3FFFFFF8);
      v213 = vaddq_s32(v211, (int32x4_t)xmmword_208F3A6A0);
      v214 = vaddq_s32(v211, (int32x4_t)xmmword_208F3A6B0);
      v215 = 0uLL;
      v216 = (int32x4_t)v198;
      v217 = (int8x16_t)(unint64_t)v41;
      v218.i64[0] = 0x800000008;
      v218.i64[1] = 0x800000008;
      v219.i64[0] = 0x3F0000003FLL;
      v219.i64[1] = 0x3F0000003FLL;
      v220 = v208 & 0x3FFFFFF8;
      v221 = 0uLL;
      v222 = 0uLL;
      v223 = 0uLL;
      do
      {
        v216 = vaddq_s32(v216, v218);
        v224 = *v191++;
        v215 = vaddq_s32(v215, v218);
        v225 = vmovl_u8(v224);
        v226 = vmovl_high_u16(v225);
        v227.i64[0] = v226.u32[2];
        v227.i64[1] = v226.u32[3];
        v228 = v227;
        v227.i64[0] = v226.u32[0];
        v227.i64[1] = v226.u32[1];
        v229 = v227;
        v230 = vmovl_u16(*(uint16x4_t *)v225.i8);
        v227.i64[0] = v230.u32[2];
        v227.i64[1] = v230.u32[3];
        v231 = v227;
        v227.i64[0] = v230.u32[0];
        v227.i64[1] = v230.u32[1];
        v232 = v227;
        v227.i64[0] = v213.u32[2];
        v227.i64[1] = v213.u32[3];
        v233 = v227;
        v227.i64[0] = v213.u32[0];
        v227.i64[1] = v213.u32[1];
        v234 = v227;
        v227.i64[0] = v214.u32[2];
        v227.i64[1] = v214.u32[3];
        v235 = v227;
        v227.i64[0] = v214.u32[0];
        v227.i64[1] = v214.u32[1];
        v223 = vorrq_s8((int8x16_t)vshlq_u64(v228, v233), v223);
        v222 = vorrq_s8((int8x16_t)vshlq_u64(v229, v234), v222);
        v221 = vorrq_s8((int8x16_t)vshlq_u64(v231, v235), v221);
        v217 = vorrq_s8((int8x16_t)vshlq_u64(v232, v227), v217);
        *(_QWORD *)&v203 += 8;
        v214 = vaddq_s32(v214, v219);
        v213 = vaddq_s32(v213, v219);
        v220 -= 8;
      }
      while (v220);
      *v202 = v203;
      v236 = vorrq_s8(vorrq_s8(v217, v222), vorrq_s8(v221, v223));
      v41 = vorr_s8(*(int8x8_t *)v236.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v236, v236, 8uLL));
      v198 = vaddvq_s32(vaddq_s32(v216, v215));
      if ((v208 & 0x3FFFFFF8) == v208)
      {
LABEL_185:
        v39 = v198;
        v42 = v40 << 56;
        v43 = (int8x8_t)(*(_QWORD *)&v41 - (v40 << 56));
        if (*(_QWORD *)&v41 < (unint64_t)(v40 << 56))
          goto LABEL_47;
        goto LABEL_186;
      }
    }
    else
    {
LABEL_182:
      v209 = *(_QWORD *)(a1 + 10648);
      v210 = v191;
      v212 = 48 - v39;
    }
    v237 = (uint8x8_t)(v209 + 1);
    do
    {
      v198 += 8;
      v238 = v210->u8[0];
      v210 = (uint8x8_t *)((char *)v210 + 1);
      *(_QWORD *)&v41 |= (unint64_t)v238 << v212;
      *v202 = v237;
      v212 -= 8;
      ++*(_QWORD *)&v237;
    }
    while (v212 >= v200);
    goto LABEL_185;
  }
LABEL_68:
  v62 = (((v38 << 7) - 128) >> 8) + 1;
  v63 = *(_DWORD *)(v1 + 10664);
  if ((v63 & 0x80000000) == 0)
  {
    v64 = *(int8x8_t *)(v1 + 10656);
    v65 = *(_DWORD *)(v1 + 10664);
    v66 = (int8x8_t)(*(_QWORD *)&v64 - (v62 << 56));
    if (*(_QWORD *)&v64 < (unint64_t)(v62 << 56))
      goto LABEL_111;
LABEL_110:
    LODWORD(v62) = *(_DWORD *)(v1 + 10668) - v62;
    v64 = v66;
    goto LABEL_111;
  }
  v67 = *(uint8x8_t **)(v1 + 10648);
  v64 = *(int8x8_t *)(v1 + 10656);
  v68 = *(_QWORD *)(v1 + 10640) - (_QWORD)v67;
  v69 = 8 * v68;
  v70 = 56 - v63 - 8 * v68;
  v71 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
  if (v71)
  {
    if (v68 >= 9)
      v72 = 9;
    else
      v72 = *(_QWORD *)(v1 + 10640) - (_QWORD)v67;
    v71(*(_QWORD *)(v1 + 10680), v67, v4442, v72);
    v67 = (uint8x8_t *)v4442;
  }
  if (v70 < 0)
    v65 = v63;
  else
    v65 = v63 + 0x40000000;
  if (v69)
    v73 = 1;
  else
    v73 = v70 <= -1;
  if (v73)
  {
    v74 = 48 - v63;
    v75 = v70 & ~(v70 >> 31);
    v1 = a1;
    if ((int)(48 - v63) < v75)
      goto LABEL_109;
    v76 = (uint8x8_t *)(a1 + 10648);
    v77 = *(uint8x8_t *)(a1 + 10648);
    v78 = v75 - 1;
    if (v75 - 1 >= (int)(40 - v63))
      v79 = 40 - v63;
    else
      v79 = v75 - 1;
    v80 = 47 - v63 - v79;
    if (v80 < 0x78)
      goto LABEL_106;
    if (v78 >= (int)(40 - v63))
      v78 = 40 - v63;
    if (v76 >= (uint8x8_t *)&v67->i8[((47 - v63 - v78) >> 3) + 1] || (unint64_t)v67 >= a1 + 10656)
    {
      v82 = (v80 >> 3) + 1;
      v83 = *(_QWORD *)&v77 + (v82 & 0x3FFFFFF8);
      v84 = (uint8x8_t *)((char *)v67 + (v82 & 0x3FFFFFF8));
      v85 = vdupq_n_s32(v74);
      v74 -= 8 * (v82 & 0x3FFFFFF8);
      v86 = vaddq_s32(v85, (int32x4_t)xmmword_208F3A6A0);
      v87 = vaddq_s32(v85, (int32x4_t)xmmword_208F3A6B0);
      v88 = 0uLL;
      v89 = (int32x4_t)v65;
      v90 = (int8x16_t)(unint64_t)v64;
      v91.i64[0] = 0x800000008;
      v91.i64[1] = 0x800000008;
      v92.i64[0] = 0x3F0000003FLL;
      v92.i64[1] = 0x3F0000003FLL;
      v93 = v82 & 0x3FFFFFF8;
      v94 = 0uLL;
      v95 = 0uLL;
      v96 = 0uLL;
      do
      {
        v89 = vaddq_s32(v89, v91);
        v97 = *v67++;
        v88 = vaddq_s32(v88, v91);
        v98 = vmovl_u8(v97);
        v99 = vmovl_high_u16(v98);
        v100.i64[0] = v99.u32[2];
        v100.i64[1] = v99.u32[3];
        v101 = v100;
        v100.i64[0] = v99.u32[0];
        v100.i64[1] = v99.u32[1];
        v102 = v100;
        v103 = vmovl_u16(*(uint16x4_t *)v98.i8);
        v100.i64[0] = v103.u32[2];
        v100.i64[1] = v103.u32[3];
        v104 = v100;
        v100.i64[0] = v103.u32[0];
        v100.i64[1] = v103.u32[1];
        v105 = v100;
        v100.i64[0] = v86.u32[2];
        v100.i64[1] = v86.u32[3];
        v106 = v100;
        v100.i64[0] = v86.u32[0];
        v100.i64[1] = v86.u32[1];
        v107 = v100;
        v100.i64[0] = v87.u32[2];
        v100.i64[1] = v87.u32[3];
        v108 = v100;
        v100.i64[0] = v87.u32[0];
        v100.i64[1] = v87.u32[1];
        v96 = vorrq_s8((int8x16_t)vshlq_u64(v101, v106), v96);
        v95 = vorrq_s8((int8x16_t)vshlq_u64(v102, v107), v95);
        v94 = vorrq_s8((int8x16_t)vshlq_u64(v104, v108), v94);
        v90 = vorrq_s8((int8x16_t)vshlq_u64(v105, v100), v90);
        *(_QWORD *)&v77 += 8;
        v87 = vaddq_s32(v87, v92);
        v86 = vaddq_s32(v86, v92);
        v93 -= 8;
      }
      while (v93);
      *v76 = v77;
      v109 = vorrq_s8(vorrq_s8(v90, v95), vorrq_s8(v94, v96));
      v64 = vorr_s8(*(int8x8_t *)v109.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL));
      v65 = vaddvq_s32(vaddq_s32(v89, v88));
      if ((v82 & 0x3FFFFFF8) == v82)
      {
LABEL_109:
        v66 = (int8x8_t)(*(_QWORD *)&v64 - (v62 << 56));
        if (*(_QWORD *)&v64 < (unint64_t)(v62 << 56))
          goto LABEL_111;
        goto LABEL_110;
      }
    }
    else
    {
LABEL_106:
      v83 = *(_QWORD *)(a1 + 10648);
      v84 = v67;
    }
    v134 = (uint8x8_t)(v83 + 1);
    do
    {
      v65 += 8;
      v135 = v84->u8[0];
      v84 = (uint8x8_t *)((char *)v84 + 1);
      *(_QWORD *)&v64 |= (unint64_t)v135 << v74;
      *v76 = v134;
      v74 -= 8;
      ++*(_QWORD *)&v134;
    }
    while (v74 >= v75);
    goto LABEL_109;
  }
  v1 = a1;
  v66 = (int8x8_t)(*(_QWORD *)&v64 - (v62 << 56));
  if (*(_QWORD *)&v64 >= (unint64_t)(v62 << 56))
    goto LABEL_110;
LABEL_111:
  v136 = vp8_norm[v62];
  v137 = (int8x8_t)(*(_QWORD *)&v64 << v136);
  v138 = v65 - v136;
  *(int8x8_t *)(v1 + 10656) = v137;
  *(_DWORD *)(v1 + 10664) = v65 - v136;
  *(_DWORD *)(v1 + 10668) = (_DWORD)v62 << v136;
  v139 = ((((_DWORD)v62 << v136 << 7) - 128) >> 8) + 1;
  if (((v65 - v136) & 0x80000000) != 0)
  {
    v140 = *(uint8x8_t **)(v1 + 10648);
    v141 = 48 - v138;
    v142 = *(_QWORD *)(v1 + 10640) - (_QWORD)v140;
    v143 = 8 * v142;
    v144 = 56 - 8 * v142 - v138;
    v145 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v145)
    {
      if (v142 >= 9)
        v146 = 9;
      else
        v146 = *(_QWORD *)(v1 + 10640) - (_QWORD)v140;
      v145(*(_QWORD *)(v1 + 10680), v140, v4442, v146);
      v140 = (uint8x8_t *)v4442;
    }
    if (v144 >= 0)
      v138 += 0x40000000;
    if (v143)
      v147 = 1;
    else
      v147 = v144 <= -1;
    v148 = v144 & ~(v144 >> 31);
    if (!v147 || v141 < v148)
    {
      v1 = a1;
    }
    else
    {
      v1 = a1;
      v150 = (uint8x8_t *)(a1 + 10648);
      v151 = *(uint8x8_t *)(a1 + 10648);
      v152 = v136 - v65 + 40;
      if (v152 >= v148 - 1)
        v153 = v148 - 1;
      else
        v153 = v136 - v65 + 40;
      v154 = v136 - v65 - v153 + 47;
      if (v154 < 0x78)
        goto LABEL_143;
      if (v152 >= v148 - 1)
        v152 = v148 - 1;
      if (v150 >= (uint8x8_t *)&v140->i8[((v136 - v65 - v152 + 47) >> 3) + 1] || (unint64_t)v140 >= a1 + 10656)
      {
        v156 = (v154 >> 3) + 1;
        v157 = *(_QWORD *)&v151 + (v156 & 0x3FFFFFF8);
        v158 = (uint8x8_t *)((char *)v140 + (v156 & 0x3FFFFFF8));
        v159 = vdupq_n_s32(v141);
        v160 = v141 - 8 * (v156 & 0x3FFFFFF8);
        v161 = vaddq_s32(v159, (int32x4_t)xmmword_208F3A6A0);
        v162 = vaddq_s32(v159, (int32x4_t)xmmword_208F3A6B0);
        v163 = 0uLL;
        v164 = (int32x4_t)v138;
        v165 = (int8x16_t)(unint64_t)v137;
        v166.i64[0] = 0x800000008;
        v166.i64[1] = 0x800000008;
        v167.i64[0] = 0x3F0000003FLL;
        v167.i64[1] = 0x3F0000003FLL;
        v168 = v156 & 0x3FFFFFF8;
        v169 = 0uLL;
        v170 = 0uLL;
        v171 = 0uLL;
        do
        {
          v164 = vaddq_s32(v164, v166);
          v172 = *v140++;
          v163 = vaddq_s32(v163, v166);
          v173 = vmovl_u8(v172);
          v174 = vmovl_high_u16(v173);
          v175.i64[0] = v174.u32[2];
          v175.i64[1] = v174.u32[3];
          v176 = v175;
          v175.i64[0] = v174.u32[0];
          v175.i64[1] = v174.u32[1];
          v177 = v175;
          v178 = vmovl_u16(*(uint16x4_t *)v173.i8);
          v175.i64[0] = v178.u32[2];
          v175.i64[1] = v178.u32[3];
          v179 = v175;
          v175.i64[0] = v178.u32[0];
          v175.i64[1] = v178.u32[1];
          v180 = v175;
          v175.i64[0] = v161.u32[2];
          v175.i64[1] = v161.u32[3];
          v181 = v175;
          v175.i64[0] = v161.u32[0];
          v175.i64[1] = v161.u32[1];
          v182 = v175;
          v175.i64[0] = v162.u32[2];
          v175.i64[1] = v162.u32[3];
          v183 = v175;
          v175.i64[0] = v162.u32[0];
          v175.i64[1] = v162.u32[1];
          v171 = vorrq_s8((int8x16_t)vshlq_u64(v176, v181), v171);
          v170 = vorrq_s8((int8x16_t)vshlq_u64(v177, v182), v170);
          v169 = vorrq_s8((int8x16_t)vshlq_u64(v179, v183), v169);
          v165 = vorrq_s8((int8x16_t)vshlq_u64(v180, v175), v165);
          *(_QWORD *)&v151 += 8;
          v162 = vaddq_s32(v162, v167);
          v161 = vaddq_s32(v161, v167);
          v168 -= 8;
        }
        while (v168);
        *v150 = v151;
        v184 = vorrq_s8(vorrq_s8(v165, v170), vorrq_s8(v169, v171));
        v137 = vorr_s8(*(int8x8_t *)v184.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v184, v184, 8uLL));
        v138 = vaddvq_s32(vaddq_s32(v164, v163));
        if ((v156 & 0x3FFFFFF8) == v156)
          goto LABEL_146;
      }
      else
      {
LABEL_143:
        v157 = *(_QWORD *)(a1 + 10648);
        v158 = v140;
        v160 = v141;
      }
      v185 = (uint8x8_t)(v157 + 1);
      do
      {
        v138 += 8;
        v186 = v158->u8[0];
        v158 = (uint8x8_t *)((char *)v158 + 1);
        *(_QWORD *)&v137 |= (unint64_t)v186 << v160;
        *v150 = v185;
        v160 -= 8;
        ++*(_QWORD *)&v185;
      }
      while (v160 >= v148);
    }
  }
LABEL_146:
  v187 = (int8x8_t)(*(_QWORD *)&v137 - (v139 << 56));
  if (*(_QWORD *)&v137 >= (unint64_t)(v139 << 56))
  {
    LODWORD(v139) = *(_DWORD *)(v1 + 10668) - v139;
    v188 = 1;
    v137 = v187;
  }
  else
  {
    v188 = 0;
  }
  v189 = vp8_norm[v139];
  v39 = v138 - v189;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v137 << v189;
  *(_DWORD *)(v1 + 10664) = v39;
  v190 = (_DWORD)v139 << v189;
  *(_DWORD *)(v1 + 10668) = v190;
  *(_DWORD *)(v1 + 6224) = v188;
  v40 = (((v190 << 7) - 128) >> 8) + 1;
  if ((v39 & 0x80000000) != 0)
    goto LABEL_150;
LABEL_46:
  v41 = *(int8x8_t *)(v1 + 10656);
  v42 = v40 << 56;
  v43 = (int8x8_t)(*(_QWORD *)&v41 - (v40 << 56));
  if (*(_QWORD *)&v41 < (unint64_t)(v40 << 56))
  {
LABEL_47:
    v44 = 0;
    v43 = v41;
    goto LABEL_187;
  }
LABEL_186:
  LODWORD(v40) = *(_DWORD *)(v1 + 10668) - v40;
  v44 = 1;
LABEL_187:
  v239 = vp8_norm[v40];
  v240 = (int8x8_t)(*(_QWORD *)&v43 << v239);
  v241 = v39 - v239;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v43 << v239;
  *(_DWORD *)(v1 + 10664) = v39 - v239;
  *(_DWORD *)(v1 + 10668) = (_DWORD)v40 << v239;
  *(_BYTE *)(v1 + 3968) = v44;
  if (*(_QWORD *)&v41 < v42)
  {
    *(_WORD *)(v1 + 3969) = 0;
    goto LABEL_611;
  }
  v242 = ((((_DWORD)v40 << v239 << 7) - 128) >> 8) + 1;
  if ((v241 & 0x80000000) != 0)
  {
    v245 = *(uint8x8_t **)(v1 + 10648);
    v246 = *(_QWORD *)(v1 + 10640) - (_QWORD)v245;
    v247 = 8 * v246;
    v248 = 56 - 8 * v246 - v241;
    v249 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v249)
    {
      if (v246 >= 9)
        v250 = 9;
      else
        v250 = *(_QWORD *)(v1 + 10640) - (_QWORD)v245;
      v249(*(_QWORD *)(v1 + 10680), v245, v4442, v250);
      v1 = a1;
      v245 = (uint8x8_t *)v4442;
    }
    if (v248 < 0)
      v251 = v39 - v239;
    else
      v251 = v241 + 0x40000000;
    if (v247)
      v252 = 1;
    else
      v252 = v248 <= -1;
    if (v252)
    {
      v253 = 48 - v241;
      v254 = v248 & ~(v248 >> 31);
      if ((int)(48 - v241) >= v254)
      {
        v255 = (uint8x8_t *)(v1 + 10648);
        v256 = *(uint8x8_t *)(v1 + 10648);
        v257 = v239 - v39 + 40;
        if (v257 >= v254 - 1)
          v258 = v254 - 1;
        else
          v258 = v239 - v39 + 40;
        v259 = v239 - v39 - v258 + 47;
        if (v259 < 0x78)
          goto LABEL_221;
        if (v257 >= v254 - 1)
          v257 = v254 - 1;
        if (v255 < (uint8x8_t *)&v245->i8[((v239 - v39 - v257 + 47) >> 3) + 1] && (unint64_t)v245 < v1 + 10656)
        {
LABEL_221:
          v262 = *(_QWORD *)(v1 + 10648);
          v263 = v245;
LABEL_222:
          v289 = (uint8x8_t)(v262 + 1);
          do
          {
            v251 += 8;
            v290 = v263->u8[0];
            v263 = (uint8x8_t *)((char *)v263 + 1);
            *(_QWORD *)&v240 |= (unint64_t)v290 << v253;
            *v255 = v289;
            v253 -= 8;
            ++*(_QWORD *)&v289;
          }
          while (v253 >= v254);
          goto LABEL_224;
        }
        v261 = (v259 >> 3) + 1;
        v262 = *(_QWORD *)&v256 + (v261 & 0x3FFFFFF8);
        v263 = (uint8x8_t *)((char *)v245 + (v261 & 0x3FFFFFF8));
        v264 = vdupq_n_s32(v253);
        v253 -= 8 * (v261 & 0x3FFFFFF8);
        v265 = vaddq_s32(v264, (int32x4_t)xmmword_208F3A6A0);
        v266 = vaddq_s32(v264, (int32x4_t)xmmword_208F3A6B0);
        v267 = 0uLL;
        v268 = (int32x4_t)v251;
        v269 = (int8x16_t)(unint64_t)v240;
        v270.i64[0] = 0x800000008;
        v270.i64[1] = 0x800000008;
        v271.i64[0] = 0x3F0000003FLL;
        v271.i64[1] = 0x3F0000003FLL;
        v272 = v261 & 0x3FFFFFF8;
        v273 = 0uLL;
        v274 = 0uLL;
        v275 = 0uLL;
        do
        {
          v268 = vaddq_s32(v268, v270);
          v276 = *v245++;
          v267 = vaddq_s32(v267, v270);
          v277 = vmovl_u8(v276);
          v278 = vmovl_high_u16(v277);
          v279.i64[0] = v278.u32[2];
          v279.i64[1] = v278.u32[3];
          v280 = v279;
          v279.i64[0] = v278.u32[0];
          v279.i64[1] = v278.u32[1];
          v281 = v279;
          v282 = vmovl_u16(*(uint16x4_t *)v277.i8);
          v279.i64[0] = v282.u32[2];
          v279.i64[1] = v282.u32[3];
          v283 = v279;
          v279.i64[0] = v282.u32[0];
          v279.i64[1] = v282.u32[1];
          v284 = v279;
          v279.i64[0] = v265.u32[2];
          v279.i64[1] = v265.u32[3];
          v285 = v279;
          v279.i64[0] = v265.u32[0];
          v279.i64[1] = v265.u32[1];
          v286 = v279;
          v279.i64[0] = v266.u32[2];
          v279.i64[1] = v266.u32[3];
          v287 = v279;
          v279.i64[0] = v266.u32[0];
          v279.i64[1] = v266.u32[1];
          v275 = vorrq_s8((int8x16_t)vshlq_u64(v280, v285), v275);
          v274 = vorrq_s8((int8x16_t)vshlq_u64(v281, v286), v274);
          v273 = vorrq_s8((int8x16_t)vshlq_u64(v283, v287), v273);
          v269 = vorrq_s8((int8x16_t)vshlq_u64(v284, v279), v269);
          *(_QWORD *)&v256 += 8;
          v266 = vaddq_s32(v266, v271);
          v265 = vaddq_s32(v265, v271);
          v272 -= 8;
        }
        while (v272);
        *v255 = v256;
        v288 = vorrq_s8(vorrq_s8(v269, v274), vorrq_s8(v273, v275));
        v240 = vorr_s8(*(int8x8_t *)v288.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v288, v288, 8uLL));
        v251 = vaddvq_s32(vaddq_s32(v268, v267));
        if ((v261 & 0x3FFFFFF8) != v261)
          goto LABEL_222;
      }
    }
LABEL_224:
    v241 = v251;
    v243 = (int8x8_t)(*(_QWORD *)&v240 - (v242 << 56));
    if (*(_QWORD *)&v240 < (unint64_t)(v242 << 56))
      goto LABEL_191;
    goto LABEL_225;
  }
  v243 = (int8x8_t)(*(_QWORD *)&v240 - (v242 << 56));
  if (*(_QWORD *)&v240 < (unint64_t)(v242 << 56))
  {
LABEL_191:
    v244 = 0;
    goto LABEL_226;
  }
LABEL_225:
  LODWORD(v242) = *(_DWORD *)(v1 + 10668) - v242;
  v244 = 1;
  v240 = v243;
LABEL_226:
  v291 = vp8_norm[v242];
  v292 = (_DWORD)v242 << v291;
  v293 = (int8x8_t)(*(_QWORD *)&v240 << v291);
  v294 = v241 - v291;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v240 << v291;
  *(_DWORD *)(v1 + 10664) = v241 - v291;
  *(_DWORD *)(v1 + 10668) = v292;
  *(_BYTE *)(v1 + 3969) = v244;
  v295 = (((v292 << 7) - 128) >> 8) + 1;
  if (((v241 - v291) & 0x80000000) != 0)
  {
    v296 = *(uint8x8_t **)(v1 + 10648);
    v297 = 48 - v294;
    v298 = *(_QWORD *)(v1 + 10640) - (_QWORD)v296;
    v299 = 8 * v298;
    v300 = 56 - 8 * v298 - v294;
    v301 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v301)
    {
      if (v298 >= 9)
        v302 = 9;
      else
        v302 = *(_QWORD *)(v1 + 10640) - (_QWORD)v296;
      v301(*(_QWORD *)(v1 + 10680), v296, v4442, v302);
      v296 = (uint8x8_t *)v4442;
    }
    if (v300 >= 0)
      v294 += 0x40000000;
    if (v299)
      v303 = 1;
    else
      v303 = v300 <= -1;
    v304 = v300 & ~(v300 >> 31);
    if (!v303 || v297 < v304)
    {
      v1 = a1;
    }
    else
    {
      v1 = a1;
      v306 = (uint8x8_t *)(a1 + 10648);
      v307 = *(uint8x8_t *)(a1 + 10648);
      v308 = v291 - v241 + 40;
      if (v308 >= v304 - 1)
        v309 = v304 - 1;
      else
        v309 = v291 - v241 + 40;
      v310 = v291 - v241 - v309 + 47;
      if (v310 < 0x78)
        goto LABEL_258;
      if (v308 >= v304 - 1)
        v308 = v304 - 1;
      if (v306 >= (uint8x8_t *)&v296->i8[((v291 - v241 - v308 + 47) >> 3) + 1] || (unint64_t)v296 >= a1 + 10656)
      {
        v312 = (v310 >> 3) + 1;
        v313 = *(_QWORD *)&v307 + (v312 & 0x3FFFFFF8);
        v314 = (uint8x8_t *)((char *)v296 + (v312 & 0x3FFFFFF8));
        v315 = vdupq_n_s32(v297);
        v316 = v297 - 8 * (v312 & 0x3FFFFFF8);
        v317 = vaddq_s32(v315, (int32x4_t)xmmword_208F3A6A0);
        v318 = vaddq_s32(v315, (int32x4_t)xmmword_208F3A6B0);
        v319 = 0uLL;
        v320 = (int32x4_t)v294;
        v321 = (int8x16_t)(unint64_t)v293;
        v322.i64[0] = 0x800000008;
        v322.i64[1] = 0x800000008;
        v323.i64[0] = 0x3F0000003FLL;
        v323.i64[1] = 0x3F0000003FLL;
        v324 = v312 & 0x3FFFFFF8;
        v325 = 0uLL;
        v326 = 0uLL;
        v327 = 0uLL;
        do
        {
          v320 = vaddq_s32(v320, v322);
          v328 = *v296++;
          v319 = vaddq_s32(v319, v322);
          v329 = vmovl_u8(v328);
          v330 = vmovl_high_u16(v329);
          v331.i64[0] = v330.u32[2];
          v331.i64[1] = v330.u32[3];
          v332 = v331;
          v331.i64[0] = v330.u32[0];
          v331.i64[1] = v330.u32[1];
          v333 = v331;
          v334 = vmovl_u16(*(uint16x4_t *)v329.i8);
          v331.i64[0] = v334.u32[2];
          v331.i64[1] = v334.u32[3];
          v335 = v331;
          v331.i64[0] = v334.u32[0];
          v331.i64[1] = v334.u32[1];
          v336 = v331;
          v331.i64[0] = v317.u32[2];
          v331.i64[1] = v317.u32[3];
          v337 = v331;
          v331.i64[0] = v317.u32[0];
          v331.i64[1] = v317.u32[1];
          v338 = v331;
          v331.i64[0] = v318.u32[2];
          v331.i64[1] = v318.u32[3];
          v339 = v331;
          v331.i64[0] = v318.u32[0];
          v331.i64[1] = v318.u32[1];
          v327 = vorrq_s8((int8x16_t)vshlq_u64(v332, v337), v327);
          v326 = vorrq_s8((int8x16_t)vshlq_u64(v333, v338), v326);
          v325 = vorrq_s8((int8x16_t)vshlq_u64(v335, v339), v325);
          v321 = vorrq_s8((int8x16_t)vshlq_u64(v336, v331), v321);
          *(_QWORD *)&v307 += 8;
          v318 = vaddq_s32(v318, v323);
          v317 = vaddq_s32(v317, v323);
          v324 -= 8;
        }
        while (v324);
        *v306 = v307;
        v340 = vorrq_s8(vorrq_s8(v321, v326), vorrq_s8(v325, v327));
        v293 = vorr_s8(*(int8x8_t *)v340.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v340, v340, 8uLL));
        v294 = vaddvq_s32(vaddq_s32(v320, v319));
        if ((v312 & 0x3FFFFFF8) == v312)
          goto LABEL_261;
      }
      else
      {
LABEL_258:
        v313 = *(_QWORD *)(a1 + 10648);
        v314 = v296;
        v316 = v297;
      }
      v341 = (uint8x8_t)(v313 + 1);
      do
      {
        v294 += 8;
        v342 = v314->u8[0];
        v314 = (uint8x8_t *)((char *)v314 + 1);
        *(_QWORD *)&v293 |= (unint64_t)v342 << v316;
        *v306 = v341;
        v316 -= 8;
        ++*(_QWORD *)&v341;
      }
      while (v316 >= v304);
    }
  }
LABEL_261:
  v343 = v295 << 56;
  v344 = (int8x8_t)(*(_QWORD *)&v293 - (v295 << 56));
  if (*(_QWORD *)&v293 >= (unint64_t)(v295 << 56))
  {
    LODWORD(v295) = *(_DWORD *)(v1 + 10668) - v295;
    v345 = 1;
  }
  else
  {
    v345 = 0;
    v344 = v293;
  }
  v346 = vp8_norm[v295];
  v347 = (int8x8_t)(*(_QWORD *)&v344 << v346);
  v348 = v294 - v346;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v344 << v346;
  *(_DWORD *)(v1 + 10664) = v294 - v346;
  *(_DWORD *)(v1 + 10668) = (_DWORD)v295 << v346;
  *(_BYTE *)(v1 + 3970) = v345;
  if (*(_QWORD *)&v293 >= v343)
  {
    v847 = ((((_DWORD)v295 << v346 << 7) - 128) >> 8) + 1;
    if ((v348 & 0x80000000) == 0)
    {
      v848 = (int8x8_t)(*(_QWORD *)&v347 - (v847 << 56));
      if (*(_QWORD *)&v347 < (unint64_t)(v847 << 56))
      {
LABEL_660:
        v849 = 0;
        v850 = v847;
LABEL_2288:
        v3091 = 0;
        v3092 = vp8_norm[v850];
        v4419 = v1 + 10656;
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v347 << v3092;
        *(_DWORD *)(v1 + 10664) = v348 - v3092;
        *(_DWORD *)(v1 + 10668) = v850 << v3092;
        *(_BYTE *)(v1 + 3971) = v849;
        *(_QWORD *)(v4387 + 79) = 0;
        v3093 = (uint8x8_t *)(v1 + 10648);
        v3094.i64[0] = 0x800000008;
        v3094.i64[1] = 0x800000008;
        v3095.i64[0] = 0x3F0000003FLL;
        v3095.i64[1] = 0x3F0000003FLL;
        while (1)
        {
          v3096 = *(_DWORD *)(v1 + 10668);
          v3097 = *(_DWORD *)(v1 + 10664);
          v3098 = *(int8x8_t *)(v1 + 10656);
          if ((v3097 & 0x80000000) != 0)
            break;
LABEL_2328:
          v3143 = (((v3096 << 7) - 128) >> 8) + 1;
          v3144 = v3143 << 56;
          v3145 = v3098;
          v3146 = (int8x8_t)(*(_QWORD *)&v3098 - (v3143 << 56));
          if (*(_QWORD *)&v3098 >= (unint64_t)(v3143 << 56))
          {
            LODWORD(v3143) = *(_DWORD *)(v1 + 10668) - v3143;
            v3145 = v3146;
          }
          v3147 = vp8_norm[v3143];
          v3148 = (_DWORD)v3143 << v3147;
          v3149 = (int8x8_t)(*(_QWORD *)&v3145 << v3147);
          *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3145 << v3147;
          v3150 = v3097 - v3147;
          *(_DWORD *)(v1 + 10664) = v3150;
          *(_DWORD *)(v1 + 10668) = (_DWORD)v3143 << v3147;
          if (*(_QWORD *)&v3098 < v3144)
          {
            *(_BYTE *)(v1 + v3091 + 3975) = 0;
            goto LABEL_2290;
          }
          v3151 = 0;
          v3152 = 7;
          do
          {
            if ((v3150 & 0x80000000) == 0)
              goto LABEL_2372;
            v3156 = *(uint8x8_t **)(v1 + 10648);
            v3157 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3156;
            v3158 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
            if (v3158)
            {
              if (v3157 >= 9)
                v3159 = 9;
              else
                v3159 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3156;
              v3158(*(_QWORD *)(v1 + 10680), v3156, v4442, v3159);
              v3095.i64[0] = 0x3F0000003FLL;
              v3095.i64[1] = 0x3F0000003FLL;
              v3094.i64[0] = 0x800000008;
              v3094.i64[1] = 0x800000008;
              v3156 = (uint8x8_t *)v4442;
            }
            v3160 = 48 - v3150;
            v3161 = 56 - v3150 - 8 * v3157;
            if (v3161 < 0)
              v3162 = v3150;
            else
              v3162 = v3150 + 0x40000000;
            if (8 * v3157)
              v3163 = 1;
            else
              v3163 = v3161 <= -1;
            v3164 = v3161 & ~(v3161 >> 31);
            if (!v3163 || v3160 < v3164)
            {
              v1 = a1;
            }
            else
            {
              v3166 = *v3093;
              v3167 = v3164 - 1;
              if (v3164 - 1 >= (int)(40 - v3150))
                v3168 = 40 - v3150;
              else
                v3168 = v3164 - 1;
              v3169 = 47 - v3150 - v3168;
              v1 = a1;
              if (v3169 < 0x78)
                goto LABEL_2368;
              if (v3167 >= (int)(40 - v3150))
                v3167 = 40 - v3150;
              if (v3093 >= (uint8x8_t *)&v3156->i8[((47 - v3150 - v3167) >> 3) + 1] || (unint64_t)v3156 >= v4419)
              {
                v3171 = (v3169 >> 3) + 1;
                v3172 = *(_QWORD *)&v3166 + (v3171 & 0x3FFFFFF8);
                v3173 = (uint8x8_t *)((char *)v3156 + (v3171 & 0x3FFFFFF8));
                v3174 = v3160 - 8 * (v3171 & 0x3FFFFFF8);
                v3175 = vdupq_n_s32(v3160);
                v3176 = vaddq_s32(v3175, (int32x4_t)xmmword_208F3A6A0);
                v3177 = vaddq_s32(v3175, (int32x4_t)xmmword_208F3A6B0);
                v3178 = 0uLL;
                v3179 = (int32x4_t)v3162;
                v3180 = (int8x16_t)(unint64_t)v3149;
                v3181 = v3171 & 0x3FFFFFF8;
                v3182 = 0uLL;
                v3183 = 0uLL;
                v3184 = 0uLL;
                do
                {
                  v3179 = vaddq_s32(v3179, v3094);
                  v3185 = *v3156++;
                  v3178 = vaddq_s32(v3178, v3094);
                  v3186 = vmovl_u8(v3185);
                  v3187 = vmovl_high_u16(v3186);
                  v3188.i64[0] = v3187.u32[2];
                  v3188.i64[1] = v3187.u32[3];
                  v3189 = v3188;
                  v3188.i64[0] = v3187.u32[0];
                  v3188.i64[1] = v3187.u32[1];
                  v3190 = v3188;
                  v3191 = vmovl_u16(*(uint16x4_t *)v3186.i8);
                  v3188.i64[0] = v3191.u32[2];
                  v3188.i64[1] = v3191.u32[3];
                  v3192 = v3188;
                  v3188.i64[0] = v3191.u32[0];
                  v3188.i64[1] = v3191.u32[1];
                  v3193 = v3188;
                  v3188.i64[0] = v3176.u32[2];
                  v3188.i64[1] = v3176.u32[3];
                  v3194 = v3188;
                  v3188.i64[0] = v3176.u32[0];
                  v3188.i64[1] = v3176.u32[1];
                  v3195 = v3188;
                  v3188.i64[0] = v3177.u32[2];
                  v3188.i64[1] = v3177.u32[3];
                  v3196 = v3188;
                  v3188.i64[0] = v3177.u32[0];
                  v3188.i64[1] = v3177.u32[1];
                  v3184 = vorrq_s8((int8x16_t)vshlq_u64(v3189, v3194), v3184);
                  v3183 = vorrq_s8((int8x16_t)vshlq_u64(v3190, v3195), v3183);
                  v3182 = vorrq_s8((int8x16_t)vshlq_u64(v3192, v3196), v3182);
                  v3180 = vorrq_s8((int8x16_t)vshlq_u64(v3193, v3188), v3180);
                  *(_QWORD *)&v3166 += 8;
                  v3177 = vaddq_s32(v3177, v3095);
                  v3176 = vaddq_s32(v3176, v3095);
                  v3181 -= 8;
                }
                while (v3181);
                *v3093 = v3166;
                v3197 = vorrq_s8(vorrq_s8(v3180, v3183), vorrq_s8(v3182, v3184));
                v3149 = vorr_s8(*(int8x8_t *)v3197.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3197, v3197, 8uLL));
                v3162 = vaddvq_s32(vaddq_s32(v3179, v3178));
                if ((v3171 & 0x3FFFFFF8) == v3171)
                  goto LABEL_2371;
              }
              else
              {
LABEL_2368:
                v3172 = (uint64_t)*v3093;
                v3173 = v3156;
                v3174 = 48 - v3150;
              }
              v3198 = (uint8x8_t)(v3172 + 1);
              do
              {
                v3162 += 8;
                v3199 = v3173->u8[0];
                v3173 = (uint8x8_t *)((char *)v3173 + 1);
                *(_QWORD *)&v3149 |= (unint64_t)v3199 << v3174;
                *v3093 = v3198;
                v3174 -= 8;
                ++*(_QWORD *)&v3198;
              }
              while (v3174 >= v3164);
            }
LABEL_2371:
            v3150 = v3162;
LABEL_2372:
            v3153 = (((v3148 << 7) - 128) >> 8) + 1;
            v3200 = (int8x8_t)(*(_QWORD *)&v3149 - (v3153 << 56));
            if (*(_QWORD *)&v3149 >= (unint64_t)(v3153 << 56))
            {
              LODWORD(v3153) = *(_DWORD *)(v1 + 10668) - v3153;
              v3154 = 1;
              v3149 = v3200;
            }
            else
            {
              v3154 = 0;
            }
            v3155 = vp8_norm[v3153];
            v3148 = (_DWORD)v3153 << v3155;
            *(_QWORD *)&v3149 <<= v3155;
            v3150 -= v3155;
            *(int8x8_t *)(v1 + 10656) = v3149;
            *(_DWORD *)(v1 + 10664) = v3150;
            *(_DWORD *)(v1 + 10668) = (_DWORD)v3153 << v3155;
            v3151 |= v3154 << (v3152 - 1);
            v52 = v3152-- > 1;
          }
          while (v52);
          v3201 = v1 + v3091;
          *(_BYTE *)(v1 + v3091 + 3975) = v3151;
          v3202 = *(_DWORD *)(v1 + 10668);
          v3203 = *(_DWORD *)(v1 + 10664);
          v3204 = *(int8x8_t *)(v1 + 10656);
          if ((v3203 & 0x80000000) != 0)
          {
            v3205 = *(uint8x8_t **)(v1 + 10648);
            v3206 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3205;
            v3207 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
            if (v3207)
            {
              if (v3206 >= 9)
                v3208 = 9;
              else
                v3208 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3205;
              v3207(*(_QWORD *)(v1 + 10680), v3205, v4442, v3208);
              v3095.i64[0] = 0x3F0000003FLL;
              v3095.i64[1] = 0x3F0000003FLL;
              v3094.i64[0] = 0x800000008;
              v3094.i64[1] = 0x800000008;
              v1 = a1;
              v3205 = (uint8x8_t *)v4442;
            }
            v3209 = 56 - v3203 - 8 * v3206;
            if (v3209 < 0)
              v3210 = v3203;
            else
              v3210 = v3203 + 0x40000000;
            if (8 * v3206)
              v3211 = 1;
            else
              v3211 = v3209 <= -1;
            if (v3211)
            {
              v3212 = 48 - v3203;
              v3213 = v3209 & ~(v3209 >> 31);
              if ((int)(48 - v3203) >= v3213)
              {
                v3214 = *v3093;
                v3215 = v3213 - 1;
                if (v3213 - 1 >= (int)(40 - v3203))
                  v3216 = 40 - v3203;
                else
                  v3216 = v3213 - 1;
                v3217 = 47 - v3203 - v3216;
                if (v3217 < 0x78)
                  goto LABEL_2397;
                if (v3215 >= (int)(40 - v3203))
                  v3215 = 40 - v3203;
                if (v3093 < (uint8x8_t *)&v3205->i8[((47 - v3203 - v3215) >> 3) + 1] && (unint64_t)v3205 < v4419)
                {
LABEL_2397:
                  v3218 = (uint64_t)*v3093;
                  v3219 = v3205;
                  v3220 = 48 - v3203;
                  goto LABEL_2398;
                }
                v3228 = (v3217 >> 3) + 1;
                v3218 = *(_QWORD *)&v3214 + (v3228 & 0x3FFFFFF8);
                v3219 = (uint8x8_t *)((char *)v3205 + (v3228 & 0x3FFFFFF8));
                v3220 = v3212 - 8 * (v3228 & 0x3FFFFFF8);
                v3229 = vdupq_n_s32(v3212);
                v3230 = vaddq_s32(v3229, (int32x4_t)xmmword_208F3A6A0);
                v3231 = vaddq_s32(v3229, (int32x4_t)xmmword_208F3A6B0);
                v3232 = 0uLL;
                v3233 = (int32x4_t)v3210;
                v3234 = (int8x16_t)(unint64_t)v3204;
                v3235 = v3228 & 0x3FFFFFF8;
                v3236 = 0uLL;
                v3237 = 0uLL;
                v3238 = 0uLL;
                do
                {
                  v3233 = vaddq_s32(v3233, v3094);
                  v3239 = *v3205++;
                  v3232 = vaddq_s32(v3232, v3094);
                  v3240 = vmovl_u8(v3239);
                  v3241 = vmovl_high_u16(v3240);
                  v3242.i64[0] = v3241.u32[2];
                  v3242.i64[1] = v3241.u32[3];
                  v3243 = v3242;
                  v3242.i64[0] = v3241.u32[0];
                  v3242.i64[1] = v3241.u32[1];
                  v3244 = v3242;
                  v3245 = vmovl_u16(*(uint16x4_t *)v3240.i8);
                  v3242.i64[0] = v3245.u32[2];
                  v3242.i64[1] = v3245.u32[3];
                  v3246 = v3242;
                  v3242.i64[0] = v3245.u32[0];
                  v3242.i64[1] = v3245.u32[1];
                  v3247 = v3242;
                  v3242.i64[0] = v3230.u32[2];
                  v3242.i64[1] = v3230.u32[3];
                  v3248 = v3242;
                  v3242.i64[0] = v3230.u32[0];
                  v3242.i64[1] = v3230.u32[1];
                  v3249 = v3242;
                  v3242.i64[0] = v3231.u32[2];
                  v3242.i64[1] = v3231.u32[3];
                  v3250 = v3242;
                  v3242.i64[0] = v3231.u32[0];
                  v3242.i64[1] = v3231.u32[1];
                  v3238 = vorrq_s8((int8x16_t)vshlq_u64(v3243, v3248), v3238);
                  v3237 = vorrq_s8((int8x16_t)vshlq_u64(v3244, v3249), v3237);
                  v3236 = vorrq_s8((int8x16_t)vshlq_u64(v3246, v3250), v3236);
                  v3234 = vorrq_s8((int8x16_t)vshlq_u64(v3247, v3242), v3234);
                  *(_QWORD *)&v3214 += 8;
                  v3231 = vaddq_s32(v3231, v3095);
                  v3230 = vaddq_s32(v3230, v3095);
                  v3235 -= 8;
                }
                while (v3235);
                *v3093 = v3214;
                v3251 = vorrq_s8(vorrq_s8(v3234, v3237), vorrq_s8(v3236, v3238));
                v3204 = vorr_s8(*(int8x8_t *)v3251.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3251, v3251, 8uLL));
                v3210 = vaddvq_s32(vaddq_s32(v3233, v3232));
                if ((v3228 & 0x3FFFFFF8) != v3228)
                {
LABEL_2398:
                  v3221 = (uint8x8_t)(v3218 + 1);
                  do
                  {
                    v3210 += 8;
                    v3222 = v3219->u8[0];
                    v3219 = (uint8x8_t *)((char *)v3219 + 1);
                    *(_QWORD *)&v3204 |= (unint64_t)v3222 << v3220;
                    *v3093 = v3221;
                    v3220 -= 8;
                    ++*(_QWORD *)&v3221;
                  }
                  while (v3220 >= v3213);
                }
              }
            }
            v3203 = v3210;
          }
          v3223 = (((v3202 << 7) - 128) >> 8) + 1;
          v3224 = v3223 << 56;
          v3225 = v3204;
          v3226 = (int8x8_t)(*(_QWORD *)&v3204 - (v3223 << 56));
          if (*(_QWORD *)&v3204 >= (unint64_t)(v3223 << 56))
          {
            LODWORD(v3223) = *(_DWORD *)(v1 + 10668) - v3223;
            v3225 = v3226;
          }
          v3227 = vp8_norm[v3223];
          *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3225 << v3227;
          *(_DWORD *)(v1 + 10664) = v3203 - v3227;
          *(_DWORD *)(v1 + 10668) = (_DWORD)v3223 << v3227;
          if (*(_QWORD *)&v3204 >= v3224)
            *(_BYTE *)(v3201 + 3975) = -*(_BYTE *)(v3201 + 3975);
LABEL_2290:
          if (++v3091 == 4)
          {
            v3252 = 0;
            v4420 = v1 + 10656;
            v3253.i64[0] = 0x800000008;
            v3253.i64[1] = 0x800000008;
            v3254.i64[0] = 0x3F0000003FLL;
            v3254.i64[1] = 0x3F0000003FLL;
            while (1)
            {
              v3255 = *(_DWORD *)(v1 + 10668);
              v3256 = *(_DWORD *)(v1 + 10664);
              v3257 = *(int8x8_t *)(v1 + 10656);
              if ((v3256 & 0x80000000) != 0)
                break;
LABEL_2449:
              v3302 = (((v3255 << 7) - 128) >> 8) + 1;
              v3303 = v3302 << 56;
              v3304 = v3257;
              v3305 = (int8x8_t)(*(_QWORD *)&v3257 - (v3302 << 56));
              if (*(_QWORD *)&v3257 >= (unint64_t)(v3302 << 56))
              {
                LODWORD(v3302) = *(_DWORD *)(v1 + 10668) - v3302;
                v3304 = v3305;
              }
              v3306 = vp8_norm[v3302];
              v3307 = (_DWORD)v3302 << v3306;
              v3308 = (int8x8_t)(*(_QWORD *)&v3304 << v3306);
              *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3304 << v3306;
              v3309 = v3256 - v3306;
              *(_DWORD *)(v1 + 10664) = v3309;
              *(_DWORD *)(v1 + 10668) = (_DWORD)v3302 << v3306;
              if (*(_QWORD *)&v3257 < v3303)
              {
                *(_BYTE *)(v1 + v3252 + 3979) = 0;
                goto LABEL_2411;
              }
              v3310 = 0;
              v3311 = 6;
              do
              {
                if ((v3309 & 0x80000000) == 0)
                  goto LABEL_2493;
                v3315 = *(uint8x8_t **)(v1 + 10648);
                v3316 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3315;
                v3317 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
                if (v3317)
                {
                  if (v3316 >= 9)
                    v3318 = 9;
                  else
                    v3318 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3315;
                  v3317(*(_QWORD *)(v1 + 10680), v3315, v4442, v3318);
                  v3254.i64[0] = 0x3F0000003FLL;
                  v3254.i64[1] = 0x3F0000003FLL;
                  v3253.i64[0] = 0x800000008;
                  v3253.i64[1] = 0x800000008;
                  v3315 = (uint8x8_t *)v4442;
                }
                v3319 = 48 - v3309;
                v3320 = 56 - v3309 - 8 * v3316;
                if (v3320 < 0)
                  v3321 = v3309;
                else
                  v3321 = v3309 + 0x40000000;
                if (8 * v3316)
                  v3322 = 1;
                else
                  v3322 = v3320 <= -1;
                v3323 = v3320 & ~(v3320 >> 31);
                if (!v3322 || v3319 < v3323)
                {
                  v1 = a1;
                }
                else
                {
                  v3325 = *v3093;
                  v3326 = v3323 - 1;
                  if (v3323 - 1 >= (int)(40 - v3309))
                    v3327 = 40 - v3309;
                  else
                    v3327 = v3323 - 1;
                  v3328 = 47 - v3309 - v3327;
                  v1 = a1;
                  if (v3328 < 0x78)
                    goto LABEL_2489;
                  if (v3326 >= (int)(40 - v3309))
                    v3326 = 40 - v3309;
                  if (v3093 >= (uint8x8_t *)&v3315->i8[((47 - v3309 - v3326) >> 3) + 1]
                    || (unint64_t)v3315 >= v4420)
                  {
                    v3330 = (v3328 >> 3) + 1;
                    v3331 = *(_QWORD *)&v3325 + (v3330 & 0x3FFFFFF8);
                    v3332 = (uint8x8_t *)((char *)v3315 + (v3330 & 0x3FFFFFF8));
                    v3333 = v3319 - 8 * (v3330 & 0x3FFFFFF8);
                    v3334 = vdupq_n_s32(v3319);
                    v3335 = vaddq_s32(v3334, (int32x4_t)xmmword_208F3A6A0);
                    v3336 = vaddq_s32(v3334, (int32x4_t)xmmword_208F3A6B0);
                    v3337 = 0uLL;
                    v3338 = (int32x4_t)v3321;
                    v3339 = (int8x16_t)(unint64_t)v3308;
                    v3340 = v3330 & 0x3FFFFFF8;
                    v3341 = 0uLL;
                    v3342 = 0uLL;
                    v3343 = 0uLL;
                    do
                    {
                      v3338 = vaddq_s32(v3338, v3253);
                      v3344 = *v3315++;
                      v3337 = vaddq_s32(v3337, v3253);
                      v3345 = vmovl_u8(v3344);
                      v3346 = vmovl_high_u16(v3345);
                      v3347.i64[0] = v3346.u32[2];
                      v3347.i64[1] = v3346.u32[3];
                      v3348 = v3347;
                      v3347.i64[0] = v3346.u32[0];
                      v3347.i64[1] = v3346.u32[1];
                      v3349 = v3347;
                      v3350 = vmovl_u16(*(uint16x4_t *)v3345.i8);
                      v3347.i64[0] = v3350.u32[2];
                      v3347.i64[1] = v3350.u32[3];
                      v3351 = v3347;
                      v3347.i64[0] = v3350.u32[0];
                      v3347.i64[1] = v3350.u32[1];
                      v3352 = v3347;
                      v3347.i64[0] = v3335.u32[2];
                      v3347.i64[1] = v3335.u32[3];
                      v3353 = v3347;
                      v3347.i64[0] = v3335.u32[0];
                      v3347.i64[1] = v3335.u32[1];
                      v3354 = v3347;
                      v3347.i64[0] = v3336.u32[2];
                      v3347.i64[1] = v3336.u32[3];
                      v3355 = v3347;
                      v3347.i64[0] = v3336.u32[0];
                      v3347.i64[1] = v3336.u32[1];
                      v3343 = vorrq_s8((int8x16_t)vshlq_u64(v3348, v3353), v3343);
                      v3342 = vorrq_s8((int8x16_t)vshlq_u64(v3349, v3354), v3342);
                      v3341 = vorrq_s8((int8x16_t)vshlq_u64(v3351, v3355), v3341);
                      v3339 = vorrq_s8((int8x16_t)vshlq_u64(v3352, v3347), v3339);
                      *(_QWORD *)&v3325 += 8;
                      v3336 = vaddq_s32(v3336, v3254);
                      v3335 = vaddq_s32(v3335, v3254);
                      v3340 -= 8;
                    }
                    while (v3340);
                    *v3093 = v3325;
                    v3356 = vorrq_s8(vorrq_s8(v3339, v3342), vorrq_s8(v3341, v3343));
                    v3308 = vorr_s8(*(int8x8_t *)v3356.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3356, v3356, 8uLL));
                    v3321 = vaddvq_s32(vaddq_s32(v3338, v3337));
                    if ((v3330 & 0x3FFFFFF8) == v3330)
                      goto LABEL_2492;
                  }
                  else
                  {
LABEL_2489:
                    v3331 = (uint64_t)*v3093;
                    v3332 = v3315;
                    v3333 = 48 - v3309;
                  }
                  v3357 = (uint8x8_t)(v3331 + 1);
                  do
                  {
                    v3321 += 8;
                    v3358 = v3332->u8[0];
                    v3332 = (uint8x8_t *)((char *)v3332 + 1);
                    *(_QWORD *)&v3308 |= (unint64_t)v3358 << v3333;
                    *v3093 = v3357;
                    v3333 -= 8;
                    ++*(_QWORD *)&v3357;
                  }
                  while (v3333 >= v3323);
                }
LABEL_2492:
                v3309 = v3321;
LABEL_2493:
                v3312 = (((v3307 << 7) - 128) >> 8) + 1;
                v3359 = (int8x8_t)(*(_QWORD *)&v3308 - (v3312 << 56));
                if (*(_QWORD *)&v3308 >= (unint64_t)(v3312 << 56))
                {
                  LODWORD(v3312) = *(_DWORD *)(v1 + 10668) - v3312;
                  v3313 = 1;
                  v3308 = v3359;
                }
                else
                {
                  v3313 = 0;
                }
                v3314 = vp8_norm[v3312];
                v3307 = (_DWORD)v3312 << v3314;
                *(_QWORD *)&v3308 <<= v3314;
                v3309 -= v3314;
                *(int8x8_t *)(v1 + 10656) = v3308;
                *(_DWORD *)(v1 + 10664) = v3309;
                *(_DWORD *)(v1 + 10668) = (_DWORD)v3312 << v3314;
                v3310 |= v3313 << (v3311 - 1);
                v52 = v3311-- > 1;
              }
              while (v52);
              v3360 = v1 + v3252;
              *(_BYTE *)(v1 + v3252 + 3979) = v3310;
              v3361 = *(_DWORD *)(v1 + 10668);
              v3362 = *(_DWORD *)(v1 + 10664);
              v3363 = *(int8x8_t *)(v1 + 10656);
              if ((v3362 & 0x80000000) != 0)
              {
                v3364 = *(uint8x8_t **)(v1 + 10648);
                v3365 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3364;
                v3366 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
                if (v3366)
                {
                  if (v3365 >= 9)
                    v3367 = 9;
                  else
                    v3367 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3364;
                  v3366(*(_QWORD *)(v1 + 10680), v3364, v4442, v3367);
                  v3254.i64[0] = 0x3F0000003FLL;
                  v3254.i64[1] = 0x3F0000003FLL;
                  v3253.i64[0] = 0x800000008;
                  v3253.i64[1] = 0x800000008;
                  v1 = a1;
                  v3364 = (uint8x8_t *)v4442;
                }
                v3368 = 56 - v3362 - 8 * v3365;
                if (v3368 < 0)
                  v3369 = v3362;
                else
                  v3369 = v3362 + 0x40000000;
                if (8 * v3365)
                  v3370 = 1;
                else
                  v3370 = v3368 <= -1;
                if (v3370)
                {
                  v3371 = 48 - v3362;
                  v3372 = v3368 & ~(v3368 >> 31);
                  if ((int)(48 - v3362) >= v3372)
                  {
                    v3373 = *v3093;
                    v3374 = v3372 - 1;
                    if (v3372 - 1 >= (int)(40 - v3362))
                      v3375 = 40 - v3362;
                    else
                      v3375 = v3372 - 1;
                    v3376 = 47 - v3362 - v3375;
                    if (v3376 < 0x78)
                      goto LABEL_2518;
                    if (v3374 >= (int)(40 - v3362))
                      v3374 = 40 - v3362;
                    if (v3093 < (uint8x8_t *)&v3364->i8[((47 - v3362 - v3374) >> 3) + 1]
                      && (unint64_t)v3364 < v4420)
                    {
LABEL_2518:
                      v3377 = (uint64_t)*v3093;
                      v3378 = v3364;
                      v3379 = 48 - v3362;
                      goto LABEL_2519;
                    }
                    v3387 = (v3376 >> 3) + 1;
                    v3377 = *(_QWORD *)&v3373 + (v3387 & 0x3FFFFFF8);
                    v3378 = (uint8x8_t *)((char *)v3364 + (v3387 & 0x3FFFFFF8));
                    v3379 = v3371 - 8 * (v3387 & 0x3FFFFFF8);
                    v3388 = vdupq_n_s32(v3371);
                    v3389 = vaddq_s32(v3388, (int32x4_t)xmmword_208F3A6A0);
                    v3390 = vaddq_s32(v3388, (int32x4_t)xmmword_208F3A6B0);
                    v3391 = 0uLL;
                    v3392 = (int32x4_t)v3369;
                    v3393 = (int8x16_t)(unint64_t)v3363;
                    v3394 = v3387 & 0x3FFFFFF8;
                    v3395 = 0uLL;
                    v3396 = 0uLL;
                    v3397 = 0uLL;
                    do
                    {
                      v3392 = vaddq_s32(v3392, v3253);
                      v3398 = *v3364++;
                      v3391 = vaddq_s32(v3391, v3253);
                      v3399 = vmovl_u8(v3398);
                      v3400 = vmovl_high_u16(v3399);
                      v3401.i64[0] = v3400.u32[2];
                      v3401.i64[1] = v3400.u32[3];
                      v3402 = v3401;
                      v3401.i64[0] = v3400.u32[0];
                      v3401.i64[1] = v3400.u32[1];
                      v3403 = v3401;
                      v3404 = vmovl_u16(*(uint16x4_t *)v3399.i8);
                      v3401.i64[0] = v3404.u32[2];
                      v3401.i64[1] = v3404.u32[3];
                      v3405 = v3401;
                      v3401.i64[0] = v3404.u32[0];
                      v3401.i64[1] = v3404.u32[1];
                      v3406 = v3401;
                      v3401.i64[0] = v3389.u32[2];
                      v3401.i64[1] = v3389.u32[3];
                      v3407 = v3401;
                      v3401.i64[0] = v3389.u32[0];
                      v3401.i64[1] = v3389.u32[1];
                      v3408 = v3401;
                      v3401.i64[0] = v3390.u32[2];
                      v3401.i64[1] = v3390.u32[3];
                      v3409 = v3401;
                      v3401.i64[0] = v3390.u32[0];
                      v3401.i64[1] = v3390.u32[1];
                      v3397 = vorrq_s8((int8x16_t)vshlq_u64(v3402, v3407), v3397);
                      v3396 = vorrq_s8((int8x16_t)vshlq_u64(v3403, v3408), v3396);
                      v3395 = vorrq_s8((int8x16_t)vshlq_u64(v3405, v3409), v3395);
                      v3393 = vorrq_s8((int8x16_t)vshlq_u64(v3406, v3401), v3393);
                      *(_QWORD *)&v3373 += 8;
                      v3390 = vaddq_s32(v3390, v3254);
                      v3389 = vaddq_s32(v3389, v3254);
                      v3394 -= 8;
                    }
                    while (v3394);
                    *v3093 = v3373;
                    v3410 = vorrq_s8(vorrq_s8(v3393, v3396), vorrq_s8(v3395, v3397));
                    v3363 = vorr_s8(*(int8x8_t *)v3410.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3410, v3410, 8uLL));
                    v3369 = vaddvq_s32(vaddq_s32(v3392, v3391));
                    if ((v3387 & 0x3FFFFFF8) != v3387)
                    {
LABEL_2519:
                      v3380 = (uint8x8_t)(v3377 + 1);
                      do
                      {
                        v3369 += 8;
                        v3381 = v3378->u8[0];
                        v3378 = (uint8x8_t *)((char *)v3378 + 1);
                        *(_QWORD *)&v3363 |= (unint64_t)v3381 << v3379;
                        *v3093 = v3380;
                        v3379 -= 8;
                        ++*(_QWORD *)&v3380;
                      }
                      while (v3379 >= v3372);
                    }
                  }
                }
                v3362 = v3369;
              }
              v3382 = (((v3361 << 7) - 128) >> 8) + 1;
              v3383 = v3382 << 56;
              v3384 = v3363;
              v3385 = (int8x8_t)(*(_QWORD *)&v3363 - (v3382 << 56));
              if (*(_QWORD *)&v3363 >= (unint64_t)(v3382 << 56))
              {
                LODWORD(v3382) = *(_DWORD *)(v1 + 10668) - v3382;
                v3384 = v3385;
              }
              v3386 = vp8_norm[v3382];
              *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3384 << v3386;
              *(_DWORD *)(v1 + 10664) = v3362 - v3386;
              *(_DWORD *)(v1 + 10668) = (_DWORD)v3382 << v3386;
              if (*(_QWORD *)&v3363 >= v3383)
                *(_BYTE *)(v3360 + 3979) = -*(_BYTE *)(v3360 + 3979);
LABEL_2411:
              if (++v3252 == 4)
                goto LABEL_265;
            }
            v3258 = *(uint8x8_t **)(v1 + 10648);
            v3259 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3258;
            v3260 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
            if (v3260)
            {
              if (v3259 >= 9)
                v3261 = 9;
              else
                v3261 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3258;
              v3260(*(_QWORD *)(v1 + 10680), v3258, v4442, v3261);
              v3254.i64[0] = 0x3F0000003FLL;
              v3254.i64[1] = 0x3F0000003FLL;
              v3253.i64[0] = 0x800000008;
              v3253.i64[1] = 0x800000008;
              v3258 = (uint8x8_t *)v4442;
            }
            v3262 = 48 - v3256;
            v3263 = 56 - v3256 - 8 * v3259;
            if (v3263 < 0)
              v3264 = v3256;
            else
              v3264 = v3256 + 0x40000000;
            if (8 * v3259)
              v3265 = 1;
            else
              v3265 = v3263 <= -1;
            v3266 = v3263 & ~(v3263 >> 31);
            if (!v3265 || v3262 < v3266)
            {
              v1 = a1;
            }
            else
            {
              v3268 = *v3093;
              v3269 = v3266 - 1;
              if (v3266 - 1 >= (int)(40 - v3256))
                v3270 = 40 - v3256;
              else
                v3270 = v3266 - 1;
              v3271 = 47 - v3256 - v3270;
              v1 = a1;
              if (v3271 < 0x78)
                goto LABEL_2445;
              if (v3269 >= (int)(40 - v3256))
                v3269 = 40 - v3256;
              if (v3093 < (uint8x8_t *)&v3258->i8[((47 - v3256 - v3269) >> 3) + 1] && (unint64_t)v3258 < v4420)
              {
LABEL_2445:
                v3274 = (uint64_t)*v3093;
                v3275 = v3258;
                v3276 = 48 - v3256;
                goto LABEL_2446;
              }
              v3273 = (v3271 >> 3) + 1;
              v3274 = *(_QWORD *)&v3268 + (v3273 & 0x3FFFFFF8);
              v3275 = (uint8x8_t *)((char *)v3258 + (v3273 & 0x3FFFFFF8));
              v3276 = v3262 - 8 * (v3273 & 0x3FFFFFF8);
              v3277 = vdupq_n_s32(v3262);
              v3278 = vaddq_s32(v3277, (int32x4_t)xmmword_208F3A6A0);
              v3279 = vaddq_s32(v3277, (int32x4_t)xmmword_208F3A6B0);
              v3280 = 0uLL;
              v3281 = (int32x4_t)v3264;
              v3282 = (int8x16_t)(unint64_t)v3257;
              v3283 = v3273 & 0x3FFFFFF8;
              v3284 = 0uLL;
              v3285 = 0uLL;
              v3286 = 0uLL;
              do
              {
                v3281 = vaddq_s32(v3281, v3253);
                v3287 = *v3258++;
                v3280 = vaddq_s32(v3280, v3253);
                v3288 = vmovl_u8(v3287);
                v3289 = vmovl_high_u16(v3288);
                v3290.i64[0] = v3289.u32[2];
                v3290.i64[1] = v3289.u32[3];
                v3291 = v3290;
                v3290.i64[0] = v3289.u32[0];
                v3290.i64[1] = v3289.u32[1];
                v3292 = v3290;
                v3293 = vmovl_u16(*(uint16x4_t *)v3288.i8);
                v3290.i64[0] = v3293.u32[2];
                v3290.i64[1] = v3293.u32[3];
                v3294 = v3290;
                v3290.i64[0] = v3293.u32[0];
                v3290.i64[1] = v3293.u32[1];
                v3295 = v3290;
                v3290.i64[0] = v3278.u32[2];
                v3290.i64[1] = v3278.u32[3];
                v3296 = v3290;
                v3290.i64[0] = v3278.u32[0];
                v3290.i64[1] = v3278.u32[1];
                v3297 = v3290;
                v3290.i64[0] = v3279.u32[2];
                v3290.i64[1] = v3279.u32[3];
                v3298 = v3290;
                v3290.i64[0] = v3279.u32[0];
                v3290.i64[1] = v3279.u32[1];
                v3286 = vorrq_s8((int8x16_t)vshlq_u64(v3291, v3296), v3286);
                v3285 = vorrq_s8((int8x16_t)vshlq_u64(v3292, v3297), v3285);
                v3284 = vorrq_s8((int8x16_t)vshlq_u64(v3294, v3298), v3284);
                v3282 = vorrq_s8((int8x16_t)vshlq_u64(v3295, v3290), v3282);
                *(_QWORD *)&v3268 += 8;
                v3279 = vaddq_s32(v3279, v3254);
                v3278 = vaddq_s32(v3278, v3254);
                v3283 -= 8;
              }
              while (v3283);
              *v3093 = v3268;
              v3299 = vorrq_s8(vorrq_s8(v3282, v3285), vorrq_s8(v3284, v3286));
              v3257 = vorr_s8(*(int8x8_t *)v3299.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3299, v3299, 8uLL));
              v3264 = vaddvq_s32(vaddq_s32(v3281, v3280));
              if ((v3273 & 0x3FFFFFF8) != v3273)
              {
LABEL_2446:
                v3300 = (uint8x8_t)(v3274 + 1);
                do
                {
                  v3264 += 8;
                  v3301 = v3275->u8[0];
                  v3275 = (uint8x8_t *)((char *)v3275 + 1);
                  *(_QWORD *)&v3257 |= (unint64_t)v3301 << v3276;
                  *v3093 = v3300;
                  v3276 -= 8;
                  ++*(_QWORD *)&v3300;
                }
                while (v3276 >= v3266);
              }
            }
            v3256 = v3264;
            goto LABEL_2449;
          }
        }
        v3099 = *(uint8x8_t **)(v1 + 10648);
        v3100 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3099;
        v3101 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v3101)
        {
          if (v3100 >= 9)
            v3102 = 9;
          else
            v3102 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3099;
          v3101(*(_QWORD *)(v1 + 10680), v3099, v4442, v3102);
          v3095.i64[0] = 0x3F0000003FLL;
          v3095.i64[1] = 0x3F0000003FLL;
          v3094.i64[0] = 0x800000008;
          v3094.i64[1] = 0x800000008;
          v3099 = (uint8x8_t *)v4442;
        }
        v3103 = 48 - v3097;
        v3104 = 56 - v3097 - 8 * v3100;
        if (v3104 < 0)
          v3105 = v3097;
        else
          v3105 = v3097 + 0x40000000;
        if (8 * v3100)
          v3106 = 1;
        else
          v3106 = v3104 <= -1;
        v3107 = v3104 & ~(v3104 >> 31);
        if (!v3106 || v3103 < v3107)
        {
          v1 = a1;
        }
        else
        {
          v3109 = *v3093;
          v3110 = v3107 - 1;
          if (v3107 - 1 >= (int)(40 - v3097))
            v3111 = 40 - v3097;
          else
            v3111 = v3107 - 1;
          v3112 = 47 - v3097 - v3111;
          v1 = a1;
          if (v3112 < 0x78)
            goto LABEL_2324;
          if (v3110 >= (int)(40 - v3097))
            v3110 = 40 - v3097;
          if (v3093 >= (uint8x8_t *)&v3099->i8[((47 - v3097 - v3110) >> 3) + 1] || (unint64_t)v3099 >= v4419)
          {
            v3114 = (v3112 >> 3) + 1;
            v3115 = *(_QWORD *)&v3109 + (v3114 & 0x3FFFFFF8);
            v3116 = (uint8x8_t *)((char *)v3099 + (v3114 & 0x3FFFFFF8));
            v3117 = v3103 - 8 * (v3114 & 0x3FFFFFF8);
            v3118 = vdupq_n_s32(v3103);
            v3119 = vaddq_s32(v3118, (int32x4_t)xmmword_208F3A6A0);
            v3120 = vaddq_s32(v3118, (int32x4_t)xmmword_208F3A6B0);
            v3121 = 0uLL;
            v3122 = (int32x4_t)v3105;
            v3123 = (int8x16_t)(unint64_t)v3098;
            v3124 = v3114 & 0x3FFFFFF8;
            v3125 = 0uLL;
            v3126 = 0uLL;
            v3127 = 0uLL;
            do
            {
              v3122 = vaddq_s32(v3122, v3094);
              v3128 = *v3099++;
              v3121 = vaddq_s32(v3121, v3094);
              v3129 = vmovl_u8(v3128);
              v3130 = vmovl_high_u16(v3129);
              v3131.i64[0] = v3130.u32[2];
              v3131.i64[1] = v3130.u32[3];
              v3132 = v3131;
              v3131.i64[0] = v3130.u32[0];
              v3131.i64[1] = v3130.u32[1];
              v3133 = v3131;
              v3134 = vmovl_u16(*(uint16x4_t *)v3129.i8);
              v3131.i64[0] = v3134.u32[2];
              v3131.i64[1] = v3134.u32[3];
              v3135 = v3131;
              v3131.i64[0] = v3134.u32[0];
              v3131.i64[1] = v3134.u32[1];
              v3136 = v3131;
              v3131.i64[0] = v3119.u32[2];
              v3131.i64[1] = v3119.u32[3];
              v3137 = v3131;
              v3131.i64[0] = v3119.u32[0];
              v3131.i64[1] = v3119.u32[1];
              v3138 = v3131;
              v3131.i64[0] = v3120.u32[2];
              v3131.i64[1] = v3120.u32[3];
              v3139 = v3131;
              v3131.i64[0] = v3120.u32[0];
              v3131.i64[1] = v3120.u32[1];
              v3127 = vorrq_s8((int8x16_t)vshlq_u64(v3132, v3137), v3127);
              v3126 = vorrq_s8((int8x16_t)vshlq_u64(v3133, v3138), v3126);
              v3125 = vorrq_s8((int8x16_t)vshlq_u64(v3135, v3139), v3125);
              v3123 = vorrq_s8((int8x16_t)vshlq_u64(v3136, v3131), v3123);
              *(_QWORD *)&v3109 += 8;
              v3120 = vaddq_s32(v3120, v3095);
              v3119 = vaddq_s32(v3119, v3095);
              v3124 -= 8;
            }
            while (v3124);
            *v3093 = v3109;
            v3140 = vorrq_s8(vorrq_s8(v3123, v3126), vorrq_s8(v3125, v3127));
            v3098 = vorr_s8(*(int8x8_t *)v3140.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3140, v3140, 8uLL));
            v3105 = vaddvq_s32(vaddq_s32(v3122, v3121));
            if ((v3114 & 0x3FFFFFF8) == v3114)
              goto LABEL_2327;
          }
          else
          {
LABEL_2324:
            v3115 = (uint64_t)*v3093;
            v3116 = v3099;
            v3117 = 48 - v3097;
          }
          v3141 = (uint8x8_t)(v3115 + 1);
          do
          {
            v3105 += 8;
            v3142 = v3116->u8[0];
            v3116 = (uint8x8_t *)((char *)v3116 + 1);
            *(_QWORD *)&v3098 |= (unint64_t)v3142 << v3117;
            *v3093 = v3141;
            v3117 -= 8;
            ++*(_QWORD *)&v3141;
          }
          while (v3117 >= v3107);
        }
LABEL_2327:
        v3097 = v3105;
        goto LABEL_2328;
      }
LABEL_2287:
      v850 = *(_DWORD *)(v1 + 10668) - v847;
      v849 = 1;
      v347 = v848;
      goto LABEL_2288;
    }
    v967 = *(uint8x8_t **)(v1 + 10648);
    v968 = *(_QWORD *)(v1 + 10640) - (_QWORD)v967;
    v969 = 8 * v968;
    v970 = 56 - 8 * v968 - v348;
    v971 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v971)
    {
      if (v968 >= 9)
        v972 = 9;
      else
        v972 = *(_QWORD *)(v1 + 10640) - (_QWORD)v967;
      v971(*(_QWORD *)(v1 + 10680), v967, v4442, v972);
      v1 = a1;
      v967 = (uint8x8_t *)v4442;
    }
    if (v970 < 0)
      v973 = v294 - v346;
    else
      v973 = v348 + 0x40000000;
    if (v969)
      v974 = 1;
    else
      v974 = v970 <= -1;
    if (v974)
    {
      v975 = 48 - v348;
      v976 = v970 & ~(v970 >> 31);
      if ((int)(48 - v348) >= v976)
      {
        v977 = (uint8x8_t *)(v1 + 10648);
        v978 = *(uint8x8_t *)(v1 + 10648);
        v979 = v346 - v294 + 40;
        if (v979 >= v976 - 1)
          v980 = v976 - 1;
        else
          v980 = v346 - v294 + 40;
        v981 = v346 - v294 - v980 + 47;
        if (v981 < 0x78)
          goto LABEL_2283;
        if (v979 >= v976 - 1)
          v979 = v976 - 1;
        if (v977 < (uint8x8_t *)&v967->i8[((v346 - v294 - v979 + 47) >> 3) + 1] && (unint64_t)v967 < v1 + 10656)
        {
LABEL_2283:
          v984 = *(_QWORD *)(v1 + 10648);
          v985 = v967;
LABEL_2284:
          v3089 = (uint8x8_t)(v984 + 1);
          do
          {
            v973 += 8;
            v3090 = v985->u8[0];
            v985 = (uint8x8_t *)((char *)v985 + 1);
            *(_QWORD *)&v347 |= (unint64_t)v3090 << v975;
            *v977 = v3089;
            v975 -= 8;
            ++*(_QWORD *)&v3089;
          }
          while (v975 >= v976);
          goto LABEL_2286;
        }
        v983 = (v981 >> 3) + 1;
        v984 = *(_QWORD *)&v978 + (v983 & 0x3FFFFFF8);
        v985 = (uint8x8_t *)((char *)v967 + (v983 & 0x3FFFFFF8));
        v986 = vdupq_n_s32(v975);
        v975 -= 8 * (v983 & 0x3FFFFFF8);
        v987 = vaddq_s32(v986, (int32x4_t)xmmword_208F3A6A0);
        v988 = vaddq_s32(v986, (int32x4_t)xmmword_208F3A6B0);
        v989 = 0uLL;
        v990 = (int32x4_t)v973;
        v991 = (int8x16_t)(unint64_t)v347;
        v992.i64[0] = 0x800000008;
        v992.i64[1] = 0x800000008;
        v993.i64[0] = 0x3F0000003FLL;
        v993.i64[1] = 0x3F0000003FLL;
        v994 = v983 & 0x3FFFFFF8;
        v995 = 0uLL;
        v996 = 0uLL;
        v997 = 0uLL;
        do
        {
          v990 = vaddq_s32(v990, v992);
          v998 = *v967++;
          v989 = vaddq_s32(v989, v992);
          v999 = vmovl_u8(v998);
          v1000 = vmovl_high_u16(v999);
          v1001.i64[0] = v1000.u32[2];
          v1001.i64[1] = v1000.u32[3];
          v1002 = v1001;
          v1001.i64[0] = v1000.u32[0];
          v1001.i64[1] = v1000.u32[1];
          v1003 = v1001;
          v1004 = vmovl_u16(*(uint16x4_t *)v999.i8);
          v1001.i64[0] = v1004.u32[2];
          v1001.i64[1] = v1004.u32[3];
          v1005 = v1001;
          v1001.i64[0] = v1004.u32[0];
          v1001.i64[1] = v1004.u32[1];
          v1006 = v1001;
          v1001.i64[0] = v987.u32[2];
          v1001.i64[1] = v987.u32[3];
          v1007 = v1001;
          v1001.i64[0] = v987.u32[0];
          v1001.i64[1] = v987.u32[1];
          v1008 = v1001;
          v1001.i64[0] = v988.u32[2];
          v1001.i64[1] = v988.u32[3];
          v1009 = v1001;
          v1001.i64[0] = v988.u32[0];
          v1001.i64[1] = v988.u32[1];
          v997 = vorrq_s8((int8x16_t)vshlq_u64(v1002, v1007), v997);
          v996 = vorrq_s8((int8x16_t)vshlq_u64(v1003, v1008), v996);
          v995 = vorrq_s8((int8x16_t)vshlq_u64(v1005, v1009), v995);
          v991 = vorrq_s8((int8x16_t)vshlq_u64(v1006, v1001), v991);
          *(_QWORD *)&v978 += 8;
          v988 = vaddq_s32(v988, v993);
          v987 = vaddq_s32(v987, v993);
          v994 -= 8;
        }
        while (v994);
        *v977 = v978;
        v1010 = vorrq_s8(vorrq_s8(v991, v996), vorrq_s8(v995, v997));
        v347 = vorr_s8(*(int8x8_t *)v1010.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1010, v1010, 8uLL));
        v973 = vaddvq_s32(vaddq_s32(v990, v989));
        if ((v983 & 0x3FFFFFF8) != v983)
          goto LABEL_2284;
      }
    }
LABEL_2286:
    v348 = v973;
    v848 = (int8x8_t)(*(_QWORD *)&v347 - (v847 << 56));
    if (*(_QWORD *)&v347 < (unint64_t)(v847 << 56))
      goto LABEL_660;
    goto LABEL_2287;
  }
LABEL_265:
  if (*(_BYTE *)(v1 + 3969))
  {
    v4428 = 0;
    *(_BYTE *)(v1 + 3974) = -1;
    *(_WORD *)(v1 + 3972) = -1;
    v349 = (uint8x8_t *)(v1 + 10648);
    v4402 = v1 + 10656;
    v350.i64[0] = 0x800000008;
    v350.i64[1] = 0x800000008;
    v351.i64[0] = 0x3F0000003FLL;
    v351.i64[1] = 0x3F0000003FLL;
    do
    {
      v356 = *(_DWORD *)(v1 + 10668);
      v357 = *(_DWORD *)(v1 + 10664);
      v358 = *(int8x8_t *)(v1 + 10656);
      if ((v357 & 0x80000000) == 0)
        goto LABEL_307;
      v359 = *(uint8x8_t **)(v1 + 10648);
      v360 = *(_QWORD *)(v1 + 10640) - (_QWORD)v359;
      v361 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
      if (v361)
      {
        if (v360 >= 9)
          v362 = 9;
        else
          v362 = *(_QWORD *)(v1 + 10640) - (_QWORD)v359;
        v361(*(_QWORD *)(v1 + 10680), v359, v4442, v362);
        v351.i64[0] = 0x3F0000003FLL;
        v351.i64[1] = 0x3F0000003FLL;
        v350.i64[0] = 0x800000008;
        v350.i64[1] = 0x800000008;
        v359 = (uint8x8_t *)v4442;
      }
      v363 = 48 - v357;
      v364 = 56 - v357 - 8 * v360;
      if (v364 < 0)
        v365 = v357;
      else
        v365 = v357 + 0x40000000;
      if (8 * v360)
        v366 = 1;
      else
        v366 = v364 <= -1;
      v367 = v364 & ~(v364 >> 31);
      if (!v366 || v363 < v367)
      {
        v1 = a1;
      }
      else
      {
        v369 = *v349;
        v370 = v367 - 1;
        if (v367 - 1 >= (int)(40 - v357))
          v371 = 40 - v357;
        else
          v371 = v367 - 1;
        v372 = 47 - v357 - v371;
        v1 = a1;
        if (v372 < 0x78)
          goto LABEL_303;
        if (v370 >= (int)(40 - v357))
          v370 = 40 - v357;
        if (v349 >= (uint8x8_t *)&v359->i8[((47 - v357 - v370) >> 3) + 1] || (unint64_t)v359 >= v4402)
        {
          v374 = (v372 >> 3) + 1;
          v375 = *(_QWORD *)&v369 + (v374 & 0x3FFFFFF8);
          v376 = (uint8x8_t *)((char *)v359 + (v374 & 0x3FFFFFF8));
          v377 = v363 - 8 * (v374 & 0x3FFFFFF8);
          v378 = vdupq_n_s32(v363);
          v379 = vaddq_s32(v378, (int32x4_t)xmmword_208F3A6A0);
          v380 = vaddq_s32(v378, (int32x4_t)xmmword_208F3A6B0);
          v381 = 0uLL;
          v382 = (int32x4_t)v365;
          v383 = (int8x16_t)(unint64_t)v358;
          v384 = v374 & 0x3FFFFFF8;
          v385 = 0uLL;
          v386 = 0uLL;
          v387 = 0uLL;
          do
          {
            v382 = vaddq_s32(v382, v350);
            v388 = *v359++;
            v381 = vaddq_s32(v381, v350);
            v389 = vmovl_u8(v388);
            v390 = vmovl_high_u16(v389);
            v391.i64[0] = v390.u32[2];
            v391.i64[1] = v390.u32[3];
            v392 = v391;
            v391.i64[0] = v390.u32[0];
            v391.i64[1] = v390.u32[1];
            v393 = v391;
            v394 = vmovl_u16(*(uint16x4_t *)v389.i8);
            v391.i64[0] = v394.u32[2];
            v391.i64[1] = v394.u32[3];
            v395 = v391;
            v391.i64[0] = v394.u32[0];
            v391.i64[1] = v394.u32[1];
            v396 = v391;
            v391.i64[0] = v379.u32[2];
            v391.i64[1] = v379.u32[3];
            v397 = v391;
            v391.i64[0] = v379.u32[0];
            v391.i64[1] = v379.u32[1];
            v398 = v391;
            v391.i64[0] = v380.u32[2];
            v391.i64[1] = v380.u32[3];
            v399 = v391;
            v391.i64[0] = v380.u32[0];
            v391.i64[1] = v380.u32[1];
            v387 = vorrq_s8((int8x16_t)vshlq_u64(v392, v397), v387);
            v386 = vorrq_s8((int8x16_t)vshlq_u64(v393, v398), v386);
            v385 = vorrq_s8((int8x16_t)vshlq_u64(v395, v399), v385);
            v383 = vorrq_s8((int8x16_t)vshlq_u64(v396, v391), v383);
            *(_QWORD *)&v369 += 8;
            v380 = vaddq_s32(v380, v351);
            v379 = vaddq_s32(v379, v351);
            v384 -= 8;
          }
          while (v384);
          *v349 = v369;
          v400 = vorrq_s8(vorrq_s8(v383, v386), vorrq_s8(v385, v387));
          v358 = vorr_s8(*(int8x8_t *)v400.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v400, v400, 8uLL));
          v365 = vaddvq_s32(vaddq_s32(v382, v381));
          if ((v374 & 0x3FFFFFF8) == v374)
            goto LABEL_306;
        }
        else
        {
LABEL_303:
          v375 = (uint64_t)*v349;
          v376 = v359;
          v377 = 48 - v357;
        }
        v401 = (uint8x8_t)(v375 + 1);
        do
        {
          v365 += 8;
          v402 = v376->u8[0];
          v376 = (uint8x8_t *)((char *)v376 + 1);
          *(_QWORD *)&v358 |= (unint64_t)v402 << v377;
          *v349 = v401;
          v377 -= 8;
          ++*(_QWORD *)&v401;
        }
        while (v377 >= v367);
      }
LABEL_306:
      v357 = v365;
LABEL_307:
      v403 = (((v356 << 7) - 128) >> 8) + 1;
      v404 = v403 << 56;
      v405 = v358;
      v406 = (int8x8_t)(*(_QWORD *)&v358 - (v403 << 56));
      if (*(_QWORD *)&v358 >= (unint64_t)(v403 << 56))
      {
        LODWORD(v403) = *(_DWORD *)(v1 + 10668) - v403;
        v405 = v406;
      }
      v407 = vp8_norm[v403];
      v408 = (_DWORD)v403 << v407;
      v409 = (int8x8_t)(*(_QWORD *)&v405 << v407);
      *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v405 << v407;
      v410 = v357 - v407;
      *(_DWORD *)(v1 + 10664) = v357 - v407;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v403 << v407;
      if (*(_QWORD *)&v358 < v404)
        goto LABEL_269;
      if ((v410 & 0x80000000) != 0)
      {
        v411 = *(uint8x8_t **)(v1 + 10648);
        v412 = *(_QWORD *)(v1 + 10640) - (_QWORD)v411;
        v413 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v413)
        {
          if (v412 >= 9)
            v414 = 9;
          else
            v414 = *(_QWORD *)(v1 + 10640) - (_QWORD)v411;
          v413(*(_QWORD *)(v1 + 10680), v411, v4442, v414);
          v351.i64[0] = 0x3F0000003FLL;
          v351.i64[1] = 0x3F0000003FLL;
          v350.i64[0] = 0x800000008;
          v350.i64[1] = 0x800000008;
          v411 = (uint8x8_t *)v4442;
        }
        v415 = 48 - v410;
        v416 = 56 - 8 * v412 - v410;
        if (v416 >= 0)
          v410 += 0x40000000;
        if (8 * v412)
          v417 = 1;
        else
          v417 = v416 <= -1;
        v418 = v416 & ~(v416 >> 31);
        if (!v417 || v415 < v418)
        {
          v1 = a1;
        }
        else
        {
          v420 = *v349;
          v421 = v407 - v357 + 40;
          if (v421 >= v418 - 1)
            v422 = v418 - 1;
          else
            v422 = v407 - v357 + 40;
          v423 = v407 - v357 - v422 + 47;
          v1 = a1;
          if (v423 >= 0x78)
          {
            if (v421 >= v418 - 1)
              v421 = v418 - 1;
            if (v349 >= (uint8x8_t *)&v411->i8[((v407 - v357 - v421 + 47) >> 3) + 1] || (unint64_t)v411 >= v4402)
            {
              v428 = (v423 >> 3) + 1;
              v424 = *(_QWORD *)&v420 + (v428 & 0x3FFFFFF8);
              v425 = (uint8x8_t *)((char *)v411 + (v428 & 0x3FFFFFF8));
              v426 = v415 - 8 * (v428 & 0x3FFFFFF8);
              v429 = vdupq_n_s32(v415);
              v430 = vaddq_s32(v429, (int32x4_t)xmmword_208F3A6A0);
              v431 = vaddq_s32(v429, (int32x4_t)xmmword_208F3A6B0);
              v432 = 0uLL;
              v433 = (int32x4_t)v410;
              v434 = (int8x16_t)(unint64_t)v409;
              v435 = v428 & 0x3FFFFFF8;
              v436 = 0uLL;
              v437 = 0uLL;
              v438 = 0uLL;
              do
              {
                v433 = vaddq_s32(v433, v350);
                v439 = *v411++;
                v432 = vaddq_s32(v432, v350);
                v440 = vmovl_u8(v439);
                v441 = vmovl_high_u16(v440);
                v442.i64[0] = v441.u32[2];
                v442.i64[1] = v441.u32[3];
                v443 = v442;
                v442.i64[0] = v441.u32[0];
                v442.i64[1] = v441.u32[1];
                v444 = v442;
                v445 = vmovl_u16(*(uint16x4_t *)v440.i8);
                v442.i64[0] = v445.u32[2];
                v442.i64[1] = v445.u32[3];
                v446 = v442;
                v442.i64[0] = v445.u32[0];
                v442.i64[1] = v445.u32[1];
                v447 = v442;
                v442.i64[0] = v430.u32[2];
                v442.i64[1] = v430.u32[3];
                v448 = v442;
                v442.i64[0] = v430.u32[0];
                v442.i64[1] = v430.u32[1];
                v449 = v442;
                v442.i64[0] = v431.u32[2];
                v442.i64[1] = v431.u32[3];
                v450 = v442;
                v442.i64[0] = v431.u32[0];
                v442.i64[1] = v431.u32[1];
                v438 = vorrq_s8((int8x16_t)vshlq_u64(v443, v448), v438);
                v437 = vorrq_s8((int8x16_t)vshlq_u64(v444, v449), v437);
                v436 = vorrq_s8((int8x16_t)vshlq_u64(v446, v450), v436);
                v434 = vorrq_s8((int8x16_t)vshlq_u64(v447, v442), v434);
                *(_QWORD *)&v420 += 8;
                v431 = vaddq_s32(v431, v351);
                v430 = vaddq_s32(v430, v351);
                v435 -= 8;
              }
              while (v435);
              *v349 = v420;
              v451 = vorrq_s8(vorrq_s8(v434, v437), vorrq_s8(v436, v438));
              v409 = vorr_s8(*(int8x8_t *)v451.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v451, v451, 8uLL));
              v410 = vaddvq_s32(vaddq_s32(v433, v432));
              if ((v428 & 0x3FFFFFF8) == v428)
                goto LABEL_344;
            }
            else
            {
              v424 = (uint64_t)*v349;
              v425 = v411;
              v426 = v415;
            }
          }
          else
          {
            v424 = (uint64_t)*v349;
            v425 = v411;
            v426 = v415;
          }
          v452 = (uint8x8_t)(v424 + 1);
          do
          {
            v410 += 8;
            v453 = v425->u8[0];
            v425 = (uint8x8_t *)((char *)v425 + 1);
            *(_QWORD *)&v409 |= (unint64_t)v453 << v426;
            *v349 = v452;
            v426 -= 8;
            ++*(_QWORD *)&v452;
          }
          while (v426 >= v418);
        }
      }
LABEL_344:
      v454 = (((v408 << 7) - 128) >> 8) + 1;
      v455 = (int8x8_t)(*(_QWORD *)&v409 - (v454 << 56));
      if (*(_QWORD *)&v409 >= (unint64_t)(v454 << 56))
      {
        LODWORD(v454) = *(_DWORD *)(v1 + 10668) - v454;
        v4422 = 0x80;
        v409 = v455;
      }
      else
      {
        v4422 = 0;
      }
      v456 = vp8_norm[v454];
      v457 = (_DWORD)v454 << v456;
      v458 = (int8x8_t)(*(_QWORD *)&v409 << v456);
      *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v409 << v456;
      v459 = v410 - v456;
      *(_DWORD *)(v1 + 10664) = v410 - v456;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v454 << v456;
      if (((v410 - v456) & 0x80000000) != 0)
      {
        v460 = *(uint8x8_t **)(v1 + 10648);
        v461 = *(_QWORD *)(v1 + 10640) - (_QWORD)v460;
        v462 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v462)
        {
          if (v461 >= 9)
            v463 = 9;
          else
            v463 = *(_QWORD *)(v1 + 10640) - (_QWORD)v460;
          v462(*(_QWORD *)(v1 + 10680), v460, v4442, v463);
          v351.i64[0] = 0x3F0000003FLL;
          v351.i64[1] = 0x3F0000003FLL;
          v350.i64[0] = 0x800000008;
          v350.i64[1] = 0x800000008;
          v460 = (uint8x8_t *)v4442;
        }
        v464 = 48 - v459;
        v465 = 56 - 8 * v461 - v459;
        if (v465 >= 0)
          v459 += 0x40000000;
        if (8 * v461)
          v466 = 1;
        else
          v466 = v465 <= -1;
        v467 = v465 & ~(v465 >> 31);
        if (!v466 || v464 < v467)
        {
          v1 = a1;
        }
        else
        {
          v469 = *v349;
          v470 = v456 - v410 + 40;
          if (v470 >= v467 - 1)
            v471 = v467 - 1;
          else
            v471 = v456 - v410 + 40;
          v472 = v456 - v410 - v471 + 47;
          v1 = a1;
          if (v472 < 0x78)
            goto LABEL_379;
          if (v470 >= v467 - 1)
            v470 = v467 - 1;
          if (v349 >= (uint8x8_t *)&v460->i8[((v456 - v410 - v470 + 47) >> 3) + 1] || (unint64_t)v460 >= v4402)
          {
            v474 = (v472 >> 3) + 1;
            v475 = *(_QWORD *)&v469 + (v474 & 0x3FFFFFF8);
            v476 = (uint8x8_t *)((char *)v460 + (v474 & 0x3FFFFFF8));
            v477 = v464 - 8 * (v474 & 0x3FFFFFF8);
            v478 = vdupq_n_s32(v464);
            v479 = vaddq_s32(v478, (int32x4_t)xmmword_208F3A6A0);
            v480 = vaddq_s32(v478, (int32x4_t)xmmword_208F3A6B0);
            v481 = 0uLL;
            v482 = (int32x4_t)v459;
            v483 = (int8x16_t)(unint64_t)v458;
            v484 = v474 & 0x3FFFFFF8;
            v485 = 0uLL;
            v486 = 0uLL;
            v487 = 0uLL;
            do
            {
              v482 = vaddq_s32(v482, v350);
              v488 = *v460++;
              v481 = vaddq_s32(v481, v350);
              v489 = vmovl_u8(v488);
              v490 = vmovl_high_u16(v489);
              v491.i64[0] = v490.u32[2];
              v491.i64[1] = v490.u32[3];
              v492 = v491;
              v491.i64[0] = v490.u32[0];
              v491.i64[1] = v490.u32[1];
              v493 = v491;
              v494 = vmovl_u16(*(uint16x4_t *)v489.i8);
              v491.i64[0] = v494.u32[2];
              v491.i64[1] = v494.u32[3];
              v495 = v491;
              v491.i64[0] = v494.u32[0];
              v491.i64[1] = v494.u32[1];
              v496 = v491;
              v491.i64[0] = v479.u32[2];
              v491.i64[1] = v479.u32[3];
              v497 = v491;
              v491.i64[0] = v479.u32[0];
              v491.i64[1] = v479.u32[1];
              v498 = v491;
              v491.i64[0] = v480.u32[2];
              v491.i64[1] = v480.u32[3];
              v499 = v491;
              v491.i64[0] = v480.u32[0];
              v491.i64[1] = v480.u32[1];
              v487 = vorrq_s8((int8x16_t)vshlq_u64(v492, v497), v487);
              v486 = vorrq_s8((int8x16_t)vshlq_u64(v493, v498), v486);
              v485 = vorrq_s8((int8x16_t)vshlq_u64(v495, v499), v485);
              v483 = vorrq_s8((int8x16_t)vshlq_u64(v496, v491), v483);
              *(_QWORD *)&v469 += 8;
              v480 = vaddq_s32(v480, v351);
              v479 = vaddq_s32(v479, v351);
              v484 -= 8;
            }
            while (v484);
            *v349 = v469;
            v500 = vorrq_s8(vorrq_s8(v483, v486), vorrq_s8(v485, v487));
            v458 = vorr_s8(*(int8x8_t *)v500.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v500, v500, 8uLL));
            v459 = vaddvq_s32(vaddq_s32(v482, v481));
            if ((v474 & 0x3FFFFFF8) == v474)
              goto LABEL_382;
          }
          else
          {
LABEL_379:
            v475 = (uint64_t)*v349;
            v476 = v460;
            v477 = v464;
          }
          v501 = (uint8x8_t)(v475 + 1);
          do
          {
            v459 += 8;
            v502 = v476->u8[0];
            v476 = (uint8x8_t *)((char *)v476 + 1);
            *(_QWORD *)&v458 |= (unint64_t)v502 << v477;
            *v349 = v501;
            v477 -= 8;
            ++*(_QWORD *)&v501;
          }
          while (v477 >= v467);
        }
      }
LABEL_382:
      v503 = (((v457 << 7) - 128) >> 8) + 1;
      v504 = (int8x8_t)(*(_QWORD *)&v458 - (v503 << 56));
      if (*(_QWORD *)&v458 >= (unint64_t)(v503 << 56))
      {
        LODWORD(v503) = *(_DWORD *)(v1 + 10668) - v503;
        v4414 = 64;
        v458 = v504;
      }
      else
      {
        v4414 = 0;
      }
      v505 = vp8_norm[v503];
      v506 = (_DWORD)v503 << v505;
      v507 = (int8x8_t)(*(_QWORD *)&v458 << v505);
      *(int8x8_t *)(v1 + 10656) = v507;
      v508 = v459 - v505;
      *(_DWORD *)(v1 + 10664) = v459 - v505;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v503 << v505;
      if (((v459 - v505) & 0x80000000) != 0)
      {
        v509 = *(uint8x8_t **)(v1 + 10648);
        v510 = *(_QWORD *)(v1 + 10640) - (_QWORD)v509;
        v511 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v511)
        {
          if (v510 >= 9)
            v512 = 9;
          else
            v512 = *(_QWORD *)(v1 + 10640) - (_QWORD)v509;
          v511(*(_QWORD *)(v1 + 10680), v509, v4442, v512);
          v351.i64[0] = 0x3F0000003FLL;
          v351.i64[1] = 0x3F0000003FLL;
          v350.i64[0] = 0x800000008;
          v350.i64[1] = 0x800000008;
          v509 = (uint8x8_t *)v4442;
        }
        v513 = 48 - v508;
        v514 = 56 - 8 * v510 - v508;
        if (v514 >= 0)
          v508 += 0x40000000;
        if (8 * v510)
          v515 = 1;
        else
          v515 = v514 <= -1;
        v516 = v514 & ~(v514 >> 31);
        if (!v515 || v513 < v516)
        {
          v1 = a1;
        }
        else
        {
          v518 = *v349;
          v519 = v505 - v459 + 40;
          if (v519 >= v516 - 1)
            v520 = v516 - 1;
          else
            v520 = v505 - v459 + 40;
          v521 = v505 - v459 - v520 + 47;
          v1 = a1;
          if (v521 < 0x78)
            goto LABEL_417;
          if (v519 >= v516 - 1)
            v519 = v516 - 1;
          if (v349 >= (uint8x8_t *)&v509->i8[((v505 - v459 - v519 + 47) >> 3) + 1] || (unint64_t)v509 >= v4402)
          {
            v523 = (v521 >> 3) + 1;
            v524 = *(_QWORD *)&v518 + (v523 & 0x3FFFFFF8);
            v525 = (uint8x8_t *)((char *)v509 + (v523 & 0x3FFFFFF8));
            v526 = v513 - 8 * (v523 & 0x3FFFFFF8);
            v527 = vdupq_n_s32(v513);
            v528 = vaddq_s32(v527, (int32x4_t)xmmword_208F3A6A0);
            v529 = vaddq_s32(v527, (int32x4_t)xmmword_208F3A6B0);
            v530 = 0uLL;
            v531 = (int32x4_t)v508;
            v532 = (int8x16_t)(unint64_t)v507;
            v533 = v523 & 0x3FFFFFF8;
            v534 = 0uLL;
            v535 = 0uLL;
            v536 = 0uLL;
            do
            {
              v531 = vaddq_s32(v531, v350);
              v537 = *v509++;
              v530 = vaddq_s32(v530, v350);
              v538 = vmovl_u8(v537);
              v539 = vmovl_high_u16(v538);
              v540.i64[0] = v539.u32[2];
              v540.i64[1] = v539.u32[3];
              v541 = v540;
              v540.i64[0] = v539.u32[0];
              v540.i64[1] = v539.u32[1];
              v542 = v540;
              v543 = vmovl_u16(*(uint16x4_t *)v538.i8);
              v540.i64[0] = v543.u32[2];
              v540.i64[1] = v543.u32[3];
              v544 = v540;
              v540.i64[0] = v543.u32[0];
              v540.i64[1] = v543.u32[1];
              v545 = v540;
              v540.i64[0] = v528.u32[2];
              v540.i64[1] = v528.u32[3];
              v546 = v540;
              v540.i64[0] = v528.u32[0];
              v540.i64[1] = v528.u32[1];
              v547 = v540;
              v540.i64[0] = v529.u32[2];
              v540.i64[1] = v529.u32[3];
              v548 = v540;
              v540.i64[0] = v529.u32[0];
              v540.i64[1] = v529.u32[1];
              v536 = vorrq_s8((int8x16_t)vshlq_u64(v541, v546), v536);
              v535 = vorrq_s8((int8x16_t)vshlq_u64(v542, v547), v535);
              v534 = vorrq_s8((int8x16_t)vshlq_u64(v544, v548), v534);
              v532 = vorrq_s8((int8x16_t)vshlq_u64(v545, v540), v532);
              *(_QWORD *)&v518 += 8;
              v529 = vaddq_s32(v529, v351);
              v528 = vaddq_s32(v528, v351);
              v533 -= 8;
            }
            while (v533);
            *v349 = v518;
            v549 = vorrq_s8(vorrq_s8(v532, v535), vorrq_s8(v534, v536));
            v507 = vorr_s8(*(int8x8_t *)v549.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v549, v549, 8uLL));
            v508 = vaddvq_s32(vaddq_s32(v531, v530));
            if ((v523 & 0x3FFFFFF8) == v523)
              goto LABEL_420;
          }
          else
          {
LABEL_417:
            v524 = (uint64_t)*v349;
            v525 = v509;
            v526 = v513;
          }
          v550 = (uint8x8_t)(v524 + 1);
          do
          {
            v508 += 8;
            v551 = v525->u8[0];
            v525 = (uint8x8_t *)((char *)v525 + 1);
            *(_QWORD *)&v507 |= (unint64_t)v551 << v526;
            *v349 = v550;
            v526 -= 8;
            ++*(_QWORD *)&v550;
          }
          while (v526 >= v516);
        }
      }
LABEL_420:
      v552 = (((v506 << 7) - 128) >> 8) + 1;
      v553 = (int8x8_t)(*(_QWORD *)&v507 - (v552 << 56));
      if (*(_QWORD *)&v507 >= (unint64_t)(v552 << 56))
      {
        LODWORD(v552) = *(_DWORD *)(v1 + 10668) - v552;
        v4410 = 32;
        v507 = v553;
      }
      else
      {
        v4410 = 0;
      }
      v554 = vp8_norm[v552];
      v555 = (_DWORD)v552 << v554;
      v556 = (int8x8_t)(*(_QWORD *)&v507 << v554);
      *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v507 << v554;
      v557 = v508 - v554;
      *(_DWORD *)(v1 + 10664) = v508 - v554;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v552 << v554;
      if (((v508 - v554) & 0x80000000) != 0)
      {
        v558 = *(uint8x8_t **)(v1 + 10648);
        v559 = *(_QWORD *)(v1 + 10640) - (_QWORD)v558;
        v560 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v560)
        {
          if (v559 >= 9)
            v561 = 9;
          else
            v561 = *(_QWORD *)(v1 + 10640) - (_QWORD)v558;
          v560(*(_QWORD *)(v1 + 10680), v558, v4442, v561);
          v351.i64[0] = 0x3F0000003FLL;
          v351.i64[1] = 0x3F0000003FLL;
          v350.i64[0] = 0x800000008;
          v350.i64[1] = 0x800000008;
          v558 = (uint8x8_t *)v4442;
        }
        v562 = 48 - v557;
        v563 = 56 - 8 * v559 - v557;
        if (v563 >= 0)
          v557 += 0x40000000;
        if (8 * v559)
          v564 = 1;
        else
          v564 = v563 <= -1;
        v565 = v563 & ~(v563 >> 31);
        if (!v564 || v562 < v565)
        {
          v1 = a1;
        }
        else
        {
          v567 = *v349;
          v568 = v554 - v508 + 40;
          if (v568 >= v565 - 1)
            v569 = v565 - 1;
          else
            v569 = v554 - v508 + 40;
          v570 = v554 - v508 - v569 + 47;
          v1 = a1;
          if (v570 >= 0x78)
          {
            if (v568 >= v565 - 1)
              v568 = v565 - 1;
            if (v349 >= (uint8x8_t *)&v558->i8[((v554 - v508 - v568 + 47) >> 3) + 1] || (unint64_t)v558 >= v4402)
            {
              v575 = (v570 >> 3) + 1;
              v571 = *(_QWORD *)&v567 + (v575 & 0x3FFFFFF8);
              v572 = (uint8x8_t *)((char *)v558 + (v575 & 0x3FFFFFF8));
              v573 = v562 - 8 * (v575 & 0x3FFFFFF8);
              v576 = vdupq_n_s32(v562);
              v577 = vaddq_s32(v576, (int32x4_t)xmmword_208F3A6A0);
              v578 = vaddq_s32(v576, (int32x4_t)xmmword_208F3A6B0);
              v579 = 0uLL;
              v580 = (int32x4_t)v557;
              v581 = (int8x16_t)(unint64_t)(*(_QWORD *)&v507 << v554);
              v582 = v575 & 0x3FFFFFF8;
              v583 = 0uLL;
              v584 = 0uLL;
              v585 = 0uLL;
              do
              {
                v580 = vaddq_s32(v580, v350);
                v586 = *v558++;
                v579 = vaddq_s32(v579, v350);
                v587 = vmovl_u8(v586);
                v588 = vmovl_high_u16(v587);
                v589.i64[0] = v588.u32[2];
                v589.i64[1] = v588.u32[3];
                v590 = v589;
                v589.i64[0] = v588.u32[0];
                v589.i64[1] = v588.u32[1];
                v591 = v589;
                v592 = vmovl_u16(*(uint16x4_t *)v587.i8);
                v589.i64[0] = v592.u32[2];
                v589.i64[1] = v592.u32[3];
                v593 = v589;
                v589.i64[0] = v592.u32[0];
                v589.i64[1] = v592.u32[1];
                v594 = v589;
                v589.i64[0] = v577.u32[2];
                v589.i64[1] = v577.u32[3];
                v595 = v589;
                v589.i64[0] = v577.u32[0];
                v589.i64[1] = v577.u32[1];
                v596 = v589;
                v589.i64[0] = v578.u32[2];
                v589.i64[1] = v578.u32[3];
                v597 = v589;
                v589.i64[0] = v578.u32[0];
                v589.i64[1] = v578.u32[1];
                v585 = vorrq_s8((int8x16_t)vshlq_u64(v590, v595), v585);
                v584 = vorrq_s8((int8x16_t)vshlq_u64(v591, v596), v584);
                v583 = vorrq_s8((int8x16_t)vshlq_u64(v593, v597), v583);
                v581 = vorrq_s8((int8x16_t)vshlq_u64(v594, v589), v581);
                *(_QWORD *)&v567 += 8;
                v578 = vaddq_s32(v578, v351);
                v577 = vaddq_s32(v577, v351);
                v582 -= 8;
              }
              while (v582);
              *v349 = v567;
              v598 = vorrq_s8(vorrq_s8(v581, v584), vorrq_s8(v583, v585));
              v556 = vorr_s8(*(int8x8_t *)v598.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v598, v598, 8uLL));
              v557 = vaddvq_s32(vaddq_s32(v580, v579));
              if ((v575 & 0x3FFFFFF8) == v575)
                goto LABEL_457;
            }
            else
            {
              v571 = (uint64_t)*v349;
              v572 = v558;
              v573 = v562;
            }
          }
          else
          {
            v571 = (uint64_t)*v349;
            v572 = v558;
            v573 = v562;
          }
          v599 = (uint8x8_t)(v571 + 1);
          do
          {
            v557 += 8;
            v600 = v572->u8[0];
            v572 = (uint8x8_t *)((char *)v572 + 1);
            *(_QWORD *)&v556 |= (unint64_t)v600 << v573;
            *v349 = v599;
            v573 -= 8;
            ++*(_QWORD *)&v599;
          }
          while (v573 >= v565);
        }
      }
LABEL_457:
      v601 = (((v555 << 7) - 128) >> 8) + 1;
      v602 = (int8x8_t)(*(_QWORD *)&v556 - (v601 << 56));
      if (*(_QWORD *)&v556 >= (unint64_t)(v601 << 56))
      {
        LODWORD(v601) = *(_DWORD *)(v1 + 10668) - v601;
        v4407 = 16;
        v556 = v602;
      }
      else
      {
        v4407 = 0;
      }
      v603 = vp8_norm[v601];
      v604 = (_DWORD)v601 << v603;
      v605 = (int8x8_t)(*(_QWORD *)&v556 << v603);
      *(int8x8_t *)(v1 + 10656) = v605;
      v606 = v557 - v603;
      *(_DWORD *)(v1 + 10664) = v557 - v603;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v601 << v603;
      if (((v557 - v603) & 0x80000000) != 0)
      {
        v607 = *(uint8x8_t **)(v1 + 10648);
        v608 = *(_QWORD *)(v1 + 10640) - (_QWORD)v607;
        v609 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v609)
        {
          if (v608 >= 9)
            v610 = 9;
          else
            v610 = *(_QWORD *)(v1 + 10640) - (_QWORD)v607;
          v609(*(_QWORD *)(v1 + 10680), v607, v4442, v610);
          v351.i64[0] = 0x3F0000003FLL;
          v351.i64[1] = 0x3F0000003FLL;
          v350.i64[0] = 0x800000008;
          v350.i64[1] = 0x800000008;
          v607 = (uint8x8_t *)v4442;
        }
        v611 = 48 - v606;
        v612 = 56 - 8 * v608 - v606;
        if (v612 >= 0)
          v606 += 0x40000000;
        if (8 * v608)
          v613 = 1;
        else
          v613 = v612 <= -1;
        v614 = v612 & ~(v612 >> 31);
        if (!v613 || v611 < v614)
        {
          v1 = a1;
        }
        else
        {
          v616 = *v349;
          v617 = v603 - v557 + 40;
          if (v617 >= v614 - 1)
            v618 = v614 - 1;
          else
            v618 = v603 - v557 + 40;
          v619 = v603 - v557 - v618 + 47;
          v1 = a1;
          if (v619 < 0x78)
            goto LABEL_492;
          if (v617 >= v614 - 1)
            v617 = v614 - 1;
          if (v349 >= (uint8x8_t *)&v607->i8[((v603 - v557 - v617 + 47) >> 3) + 1] || (unint64_t)v607 >= v4402)
          {
            v621 = (v619 >> 3) + 1;
            v622 = *(_QWORD *)&v616 + (v621 & 0x3FFFFFF8);
            v623 = (uint8x8_t *)((char *)v607 + (v621 & 0x3FFFFFF8));
            v624 = v611 - 8 * (v621 & 0x3FFFFFF8);
            v625 = vdupq_n_s32(v611);
            v626 = vaddq_s32(v625, (int32x4_t)xmmword_208F3A6A0);
            v627 = vaddq_s32(v625, (int32x4_t)xmmword_208F3A6B0);
            v628 = 0uLL;
            v629 = (int32x4_t)v606;
            v630 = (int8x16_t)(unint64_t)v605;
            v631 = v621 & 0x3FFFFFF8;
            v632 = 0uLL;
            v633 = 0uLL;
            v634 = 0uLL;
            do
            {
              v629 = vaddq_s32(v629, v350);
              v635 = *v607++;
              v628 = vaddq_s32(v628, v350);
              v636 = vmovl_u8(v635);
              v637 = vmovl_high_u16(v636);
              v638.i64[0] = v637.u32[2];
              v638.i64[1] = v637.u32[3];
              v639 = v638;
              v638.i64[0] = v637.u32[0];
              v638.i64[1] = v637.u32[1];
              v640 = v638;
              v641 = vmovl_u16(*(uint16x4_t *)v636.i8);
              v638.i64[0] = v641.u32[2];
              v638.i64[1] = v641.u32[3];
              v642 = v638;
              v638.i64[0] = v641.u32[0];
              v638.i64[1] = v641.u32[1];
              v643 = v638;
              v638.i64[0] = v626.u32[2];
              v638.i64[1] = v626.u32[3];
              v644 = v638;
              v638.i64[0] = v626.u32[0];
              v638.i64[1] = v626.u32[1];
              v645 = v638;
              v638.i64[0] = v627.u32[2];
              v638.i64[1] = v627.u32[3];
              v646 = v638;
              v638.i64[0] = v627.u32[0];
              v638.i64[1] = v627.u32[1];
              v634 = vorrq_s8((int8x16_t)vshlq_u64(v639, v644), v634);
              v633 = vorrq_s8((int8x16_t)vshlq_u64(v640, v645), v633);
              v632 = vorrq_s8((int8x16_t)vshlq_u64(v642, v646), v632);
              v630 = vorrq_s8((int8x16_t)vshlq_u64(v643, v638), v630);
              *(_QWORD *)&v616 += 8;
              v627 = vaddq_s32(v627, v351);
              v626 = vaddq_s32(v626, v351);
              v631 -= 8;
            }
            while (v631);
            *v349 = v616;
            v647 = vorrq_s8(vorrq_s8(v630, v633), vorrq_s8(v632, v634));
            v605 = vorr_s8(*(int8x8_t *)v647.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v647, v647, 8uLL));
            v606 = vaddvq_s32(vaddq_s32(v629, v628));
            if ((v621 & 0x3FFFFFF8) == v621)
              goto LABEL_495;
          }
          else
          {
LABEL_492:
            v622 = (uint64_t)*v349;
            v623 = v607;
            v624 = v611;
          }
          v648 = (uint8x8_t)(v622 + 1);
          do
          {
            v606 += 8;
            v649 = v623->u8[0];
            v623 = (uint8x8_t *)((char *)v623 + 1);
            *(_QWORD *)&v605 |= (unint64_t)v649 << v624;
            *v349 = v648;
            v624 -= 8;
            ++*(_QWORD *)&v648;
          }
          while (v624 >= v614);
        }
      }
LABEL_495:
      v650 = (((v604 << 7) - 128) >> 8) + 1;
      v651 = (int8x8_t)(*(_QWORD *)&v605 - (v650 << 56));
      if (*(_QWORD *)&v605 >= (unint64_t)(v650 << 56))
      {
        LODWORD(v650) = *(_DWORD *)(v1 + 10668) - v650;
        v652 = 8;
        v605 = v651;
      }
      else
      {
        v652 = 0;
      }
      v653 = vp8_norm[v650];
      v654 = (_DWORD)v650 << v653;
      v655 = (int8x8_t)(*(_QWORD *)&v605 << v653);
      *(int8x8_t *)(v1 + 10656) = v655;
      v656 = v606 - v653;
      *(_DWORD *)(v1 + 10664) = v606 - v653;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v650 << v653;
      if (((v606 - v653) & 0x80000000) != 0)
      {
        v657 = v652;
        v658 = *(uint8x8_t **)(v1 + 10648);
        v659 = *(_QWORD *)(v1 + 10640) - (_QWORD)v658;
        v660 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v660)
        {
          if (v659 >= 9)
            v661 = 9;
          else
            v661 = *(_QWORD *)(v1 + 10640) - (_QWORD)v658;
          v660(*(_QWORD *)(v1 + 10680), v658, v4442, v661);
          v351.i64[0] = 0x3F0000003FLL;
          v351.i64[1] = 0x3F0000003FLL;
          v350.i64[0] = 0x800000008;
          v350.i64[1] = 0x800000008;
          v658 = (uint8x8_t *)v4442;
        }
        v662 = 48 - v656;
        v663 = 56 - 8 * v659 - v656;
        if (v663 >= 0)
          v656 += 0x40000000;
        if (8 * v659)
          v664 = 1;
        else
          v664 = v663 <= -1;
        v665 = v663 & ~(v663 >> 31);
        if (!v664 || v662 < v665)
        {
          v1 = a1;
          v652 = v657;
        }
        else
        {
          v667 = *v349;
          v668 = v653 - v606 + 40;
          if (v668 >= v665 - 1)
            v669 = v665 - 1;
          else
            v669 = v653 - v606 + 40;
          v670 = v653 - v606 - v669 + 47;
          v1 = a1;
          v652 = v657;
          if (v670 < 0x78)
            goto LABEL_530;
          if (v668 >= v665 - 1)
            v668 = v665 - 1;
          if (v349 >= (uint8x8_t *)&v658->i8[((v653 - v606 - v668 + 47) >> 3) + 1] || (unint64_t)v658 >= v4402)
          {
            v672 = (v670 >> 3) + 1;
            v673 = *(_QWORD *)&v667 + (v672 & 0x3FFFFFF8);
            v674 = (uint8x8_t *)((char *)v658 + (v672 & 0x3FFFFFF8));
            v675 = v662 - 8 * (v672 & 0x3FFFFFF8);
            v676 = vdupq_n_s32(v662);
            v677 = vaddq_s32(v676, (int32x4_t)xmmword_208F3A6A0);
            v678 = vaddq_s32(v676, (int32x4_t)xmmword_208F3A6B0);
            v679 = 0uLL;
            v680 = (int32x4_t)v656;
            v681 = (int8x16_t)(unint64_t)v655;
            v682 = v672 & 0x3FFFFFF8;
            v683 = 0uLL;
            v684 = 0uLL;
            v685 = 0uLL;
            do
            {
              v680 = vaddq_s32(v680, v350);
              v686 = *v658++;
              v679 = vaddq_s32(v679, v350);
              v687 = vmovl_u8(v686);
              v688 = vmovl_high_u16(v687);
              v689.i64[0] = v688.u32[2];
              v689.i64[1] = v688.u32[3];
              v690 = v689;
              v689.i64[0] = v688.u32[0];
              v689.i64[1] = v688.u32[1];
              v691 = v689;
              v692 = vmovl_u16(*(uint16x4_t *)v687.i8);
              v689.i64[0] = v692.u32[2];
              v689.i64[1] = v692.u32[3];
              v693 = v689;
              v689.i64[0] = v692.u32[0];
              v689.i64[1] = v692.u32[1];
              v694 = v689;
              v689.i64[0] = v677.u32[2];
              v689.i64[1] = v677.u32[3];
              v695 = v689;
              v689.i64[0] = v677.u32[0];
              v689.i64[1] = v677.u32[1];
              v696 = v689;
              v689.i64[0] = v678.u32[2];
              v689.i64[1] = v678.u32[3];
              v697 = v689;
              v689.i64[0] = v678.u32[0];
              v689.i64[1] = v678.u32[1];
              v685 = vorrq_s8((int8x16_t)vshlq_u64(v690, v695), v685);
              v684 = vorrq_s8((int8x16_t)vshlq_u64(v691, v696), v684);
              v683 = vorrq_s8((int8x16_t)vshlq_u64(v693, v697), v683);
              v681 = vorrq_s8((int8x16_t)vshlq_u64(v694, v689), v681);
              *(_QWORD *)&v667 += 8;
              v678 = vaddq_s32(v678, v351);
              v677 = vaddq_s32(v677, v351);
              v682 -= 8;
            }
            while (v682);
            *v349 = v667;
            v698 = vorrq_s8(vorrq_s8(v681, v684), vorrq_s8(v683, v685));
            v655 = vorr_s8(*(int8x8_t *)v698.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v698, v698, 8uLL));
            v656 = vaddvq_s32(vaddq_s32(v680, v679));
            if ((v672 & 0x3FFFFFF8) == v672)
              goto LABEL_533;
          }
          else
          {
LABEL_530:
            v673 = (uint64_t)*v349;
            v674 = v658;
            v675 = v662;
          }
          v699 = (uint8x8_t)(v673 + 1);
          do
          {
            v656 += 8;
            v700 = v674->u8[0];
            v674 = (uint8x8_t *)((char *)v674 + 1);
            *(_QWORD *)&v655 |= (unint64_t)v700 << v675;
            *v349 = v699;
            v675 -= 8;
            ++*(_QWORD *)&v699;
          }
          while (v675 >= v665);
        }
      }
LABEL_533:
      v701 = (((v654 << 7) - 128) >> 8) + 1;
      v702 = (int8x8_t)(*(_QWORD *)&v655 - (v701 << 56));
      if (*(_QWORD *)&v655 >= (unint64_t)(v701 << 56))
      {
        LODWORD(v701) = *(_DWORD *)(v1 + 10668) - v701;
        v703 = 4;
        v655 = v702;
      }
      else
      {
        v703 = 0;
      }
      v704 = vp8_norm[v701];
      v705 = (_DWORD)v701 << v704;
      v706 = (int8x8_t)(*(_QWORD *)&v655 << v704);
      *(int8x8_t *)(v1 + 10656) = v706;
      v707 = v656 - v704;
      *(_DWORD *)(v1 + 10664) = v656 - v704;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v701 << v704;
      if (((v656 - v704) & 0x80000000) != 0)
      {
        v708 = v703;
        v709 = v652;
        v710 = *(uint8x8_t **)(v1 + 10648);
        v711 = *(_QWORD *)(v1 + 10640) - (_QWORD)v710;
        v712 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v712)
        {
          if (v711 >= 9)
            v713 = 9;
          else
            v713 = *(_QWORD *)(v1 + 10640) - (_QWORD)v710;
          v712(*(_QWORD *)(v1 + 10680), v710, v4442, v713);
          v351.i64[0] = 0x3F0000003FLL;
          v351.i64[1] = 0x3F0000003FLL;
          v350.i64[0] = 0x800000008;
          v350.i64[1] = 0x800000008;
          v710 = (uint8x8_t *)v4442;
        }
        v714 = 48 - v707;
        v715 = 56 - 8 * v711 - v707;
        if (v715 >= 0)
          v707 += 0x40000000;
        if (8 * v711)
          v716 = 1;
        else
          v716 = v715 <= -1;
        v717 = v715 & ~(v715 >> 31);
        if (!v716 || v714 < v717)
        {
          v1 = a1;
          v652 = v709;
          v703 = v708;
        }
        else
        {
          v719 = *v349;
          v720 = v704 - v656 + 40;
          if (v720 >= v717 - 1)
            v721 = v717 - 1;
          else
            v721 = v704 - v656 + 40;
          v722 = v704 - v656 - v721 + 47;
          v1 = a1;
          v652 = v709;
          v703 = v708;
          if (v722 >= 0x78)
          {
            if (v720 >= v717 - 1)
              v720 = v717 - 1;
            if (v349 >= (uint8x8_t *)&v710->i8[((v704 - v656 - v720 + 47) >> 3) + 1] || (unint64_t)v710 >= v4402)
            {
              v727 = (v722 >> 3) + 1;
              v723 = *(_QWORD *)&v719 + (v727 & 0x3FFFFFF8);
              v724 = (uint8x8_t *)((char *)v710 + (v727 & 0x3FFFFFF8));
              v725 = v714 - 8 * (v727 & 0x3FFFFFF8);
              v728 = vdupq_n_s32(v714);
              v729 = vaddq_s32(v728, (int32x4_t)xmmword_208F3A6A0);
              v730 = vaddq_s32(v728, (int32x4_t)xmmword_208F3A6B0);
              v731 = 0uLL;
              v732 = (int32x4_t)v707;
              v733 = (int8x16_t)(unint64_t)v706;
              v734 = v727 & 0x3FFFFFF8;
              v735 = 0uLL;
              v736 = 0uLL;
              v737 = 0uLL;
              do
              {
                v732 = vaddq_s32(v732, v350);
                v738 = *v710++;
                v731 = vaddq_s32(v731, v350);
                v739 = vmovl_u8(v738);
                v740 = vmovl_high_u16(v739);
                v741.i64[0] = v740.u32[2];
                v741.i64[1] = v740.u32[3];
                v742 = v741;
                v741.i64[0] = v740.u32[0];
                v741.i64[1] = v740.u32[1];
                v743 = v741;
                v744 = vmovl_u16(*(uint16x4_t *)v739.i8);
                v741.i64[0] = v744.u32[2];
                v741.i64[1] = v744.u32[3];
                v745 = v741;
                v741.i64[0] = v744.u32[0];
                v741.i64[1] = v744.u32[1];
                v746 = v741;
                v741.i64[0] = v729.u32[2];
                v741.i64[1] = v729.u32[3];
                v747 = v741;
                v741.i64[0] = v729.u32[0];
                v741.i64[1] = v729.u32[1];
                v748 = v741;
                v741.i64[0] = v730.u32[2];
                v741.i64[1] = v730.u32[3];
                v749 = v741;
                v741.i64[0] = v730.u32[0];
                v741.i64[1] = v730.u32[1];
                v737 = vorrq_s8((int8x16_t)vshlq_u64(v742, v747), v737);
                v736 = vorrq_s8((int8x16_t)vshlq_u64(v743, v748), v736);
                v735 = vorrq_s8((int8x16_t)vshlq_u64(v745, v749), v735);
                v733 = vorrq_s8((int8x16_t)vshlq_u64(v746, v741), v733);
                *(_QWORD *)&v719 += 8;
                v730 = vaddq_s32(v730, v351);
                v729 = vaddq_s32(v729, v351);
                v734 -= 8;
              }
              while (v734);
              *v349 = v719;
              v750 = vorrq_s8(vorrq_s8(v733, v736), vorrq_s8(v735, v737));
              v706 = vorr_s8(*(int8x8_t *)v750.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v750, v750, 8uLL));
              v707 = vaddvq_s32(vaddq_s32(v732, v731));
              if ((v727 & 0x3FFFFFF8) == v727)
                goto LABEL_570;
            }
            else
            {
              v723 = (uint64_t)*v349;
              v724 = v710;
              v725 = v714;
            }
          }
          else
          {
            v723 = (uint64_t)*v349;
            v724 = v710;
            v725 = v714;
          }
          v751 = (uint8x8_t)(v723 + 1);
          do
          {
            v707 += 8;
            v752 = v724->u8[0];
            v724 = (uint8x8_t *)((char *)v724 + 1);
            *(_QWORD *)&v706 |= (unint64_t)v752 << v725;
            *v349 = v751;
            v725 -= 8;
            ++*(_QWORD *)&v751;
          }
          while (v725 >= v717);
        }
      }
LABEL_570:
      v753 = (((v705 << 7) - 128) >> 8) + 1;
      v754 = (int8x8_t)(*(_QWORD *)&v706 - (v753 << 56));
      if (*(_QWORD *)&v706 >= (unint64_t)(v753 << 56))
      {
        LODWORD(v753) = *(_DWORD *)(v1 + 10668) - v753;
        v755 = 2;
        v706 = v754;
      }
      else
      {
        v755 = 0;
      }
      v756 = vp8_norm[v753];
      v757 = (_DWORD)v753 << v756;
      v354 = (int8x8_t)(*(_QWORD *)&v706 << v756);
      *(int8x8_t *)(v1 + 10656) = v354;
      v758 = v707 - v756;
      *(_DWORD *)(v1 + 10664) = v707 - v756;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v753 << v756;
      if (((v707 - v756) & 0x80000000) == 0)
        goto LABEL_590;
      v759 = *(uint8x8_t **)(v1 + 10648);
      v760 = *(_QWORD *)(v1 + 10640) - (_QWORD)v759;
      v761 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
      if (v761)
      {
        if (v760 >= 9)
          v762 = 9;
        else
          v762 = *(_QWORD *)(v1 + 10640) - (_QWORD)v759;
        v763 = v652;
        v764 = v703;
        v761(*(_QWORD *)(v1 + 10680), v759, v4442, v762);
        v703 = v764;
        v652 = v763;
        v351.i64[0] = 0x3F0000003FLL;
        v351.i64[1] = 0x3F0000003FLL;
        v350.i64[0] = 0x800000008;
        v350.i64[1] = 0x800000008;
        v759 = (uint8x8_t *)v4442;
      }
      v765 = 48 - v758;
      v766 = 56 - 8 * v760 - v758;
      if (v766 >= 0)
        v758 += 0x40000000;
      if (8 * v760)
        v767 = 1;
      else
        v767 = v766 <= -1;
      v768 = v766 & ~(v766 >> 31);
      if (!v767 || v765 < v768)
      {
        v1 = a1;
LABEL_590:
        v770 = v4422;
        v771 = v4414;
        v772 = v4410;
        v773 = v4407;
        goto LABEL_591;
      }
      v775 = *v349;
      v776 = v756 - v707 + 40;
      if (v776 >= v768 - 1)
        v777 = v768 - 1;
      else
        v777 = v756 - v707 + 40;
      v778 = v756 - v707 - v777 + 47;
      v1 = a1;
      if (v778 < 0x78)
      {
        v779 = (uint64_t)*v349;
        v780 = v759;
        v781 = v765;
        v770 = v4422;
        v771 = v4414;
        v772 = v4410;
        v773 = v4407;
        goto LABEL_608;
      }
      if (v776 >= v768 - 1)
        v776 = v768 - 1;
      v782 = v349 >= (uint8x8_t *)&v759->i8[((v756 - v707 - v776 + 47) >> 3) + 1] || (unint64_t)v759 >= v4402;
      v770 = v4422;
      v771 = v4414;
      v772 = v4410;
      v773 = v4407;
      if (!v782)
      {
        v779 = (uint64_t)*v349;
        v780 = v759;
        v781 = v765;
LABEL_608:
        v807 = (uint8x8_t)(v779 + 1);
        do
        {
          v758 += 8;
          v808 = v780->u8[0];
          v780 = (uint8x8_t *)((char *)v780 + 1);
          *(_QWORD *)&v354 |= (unint64_t)v808 << v781;
          *v349 = v807;
          v781 -= 8;
          ++*(_QWORD *)&v807;
        }
        while (v781 >= v768);
        goto LABEL_591;
      }
      v783 = (v778 >> 3) + 1;
      v779 = *(_QWORD *)&v775 + (v783 & 0x3FFFFFF8);
      v780 = (uint8x8_t *)((char *)v759 + (v783 & 0x3FFFFFF8));
      v781 = v765 - 8 * (v783 & 0x3FFFFFF8);
      v784 = vdupq_n_s32(v765);
      v785 = vaddq_s32(v784, (int32x4_t)xmmword_208F3A6A0);
      v786 = vaddq_s32(v784, (int32x4_t)xmmword_208F3A6B0);
      v787 = 0uLL;
      v788 = (int32x4_t)v758;
      v789 = (int8x16_t)(unint64_t)v354;
      v790 = v783 & 0x3FFFFFF8;
      v791 = 0uLL;
      v792 = 0uLL;
      v793 = 0uLL;
      do
      {
        v788 = vaddq_s32(v788, v350);
        v794 = *v759++;
        v787 = vaddq_s32(v787, v350);
        v795 = vmovl_u8(v794);
        v796 = vmovl_high_u16(v795);
        v797.i64[0] = v796.u32[2];
        v797.i64[1] = v796.u32[3];
        v798 = v797;
        v797.i64[0] = v796.u32[0];
        v797.i64[1] = v796.u32[1];
        v799 = v797;
        v800 = vmovl_u16(*(uint16x4_t *)v795.i8);
        v797.i64[0] = v800.u32[2];
        v797.i64[1] = v800.u32[3];
        v801 = v797;
        v797.i64[0] = v800.u32[0];
        v797.i64[1] = v800.u32[1];
        v802 = v797;
        v797.i64[0] = v785.u32[2];
        v797.i64[1] = v785.u32[3];
        v803 = v797;
        v797.i64[0] = v785.u32[0];
        v797.i64[1] = v785.u32[1];
        v804 = v797;
        v797.i64[0] = v786.u32[2];
        v797.i64[1] = v786.u32[3];
        v805 = v797;
        v797.i64[0] = v786.u32[0];
        v797.i64[1] = v786.u32[1];
        v793 = vorrq_s8((int8x16_t)vshlq_u64(v798, v803), v793);
        v792 = vorrq_s8((int8x16_t)vshlq_u64(v799, v804), v792);
        v791 = vorrq_s8((int8x16_t)vshlq_u64(v801, v805), v791);
        v789 = vorrq_s8((int8x16_t)vshlq_u64(v802, v797), v789);
        *(_QWORD *)&v775 += 8;
        v786 = vaddq_s32(v786, v351);
        v785 = vaddq_s32(v785, v351);
        v790 -= 8;
      }
      while (v790);
      *v349 = v775;
      v806 = vorrq_s8(vorrq_s8(v789, v792), vorrq_s8(v791, v793));
      v354 = vorr_s8(*(int8x8_t *)v806.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v806, v806, 8uLL));
      v758 = vaddvq_s32(vaddq_s32(v788, v787));
      if ((v783 & 0x3FFFFFF8) != v783)
        goto LABEL_608;
LABEL_591:
      v352 = (((v757 << 7) - 128) >> 8) + 1;
      v774 = (int8x8_t)(*(_QWORD *)&v354 - (v352 << 56));
      if (*(_QWORD *)&v354 >= (unint64_t)(v352 << 56))
      {
        LODWORD(v352) = *(_DWORD *)(v1 + 10668) - v352;
        v353 = 1;
        v354 = v774;
      }
      else
      {
        v353 = 0;
      }
      v355 = vp8_norm[v352];
      *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v354 << v355;
      *(_DWORD *)(v1 + 10664) = v758 - v355;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v352 << v355;
      *(_BYTE *)(v1 + v4428 + 3972) = v771 | v770 | v772 | v773 | v652 | v703 | v755 | v353;
LABEL_269:
      ++v4428;
    }
    while (v4428 != 3);
  }
LABEL_611:
  v809 = (((*(_DWORD *)(v1 + 10668) << 7) - 128) >> 8) + 1;
  v810 = *(_DWORD *)(v1 + 10664);
  v811 = *(int8x8_t *)(v1 + 10656);
  if ((v810 & 0x80000000) != 0)
  {
    v814 = *(uint8x8_t **)(v1 + 10648);
    v815 = *(_QWORD *)(v1 + 10640) - (_QWORD)v814;
    v816 = 8 * v815;
    v817 = 56 - v810 - 8 * v815;
    v818 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v818)
    {
      if (v815 >= 9)
        v819 = 9;
      else
        v819 = *(_QWORD *)(v1 + 10640) - (_QWORD)v814;
      v818(*(_QWORD *)(v1 + 10680), v814, v4442, v819);
      v1 = a1;
      v814 = (uint8x8_t *)v4442;
    }
    if (v817 < 0)
      v820 = v810;
    else
      v820 = v810 + 0x40000000;
    if (v816)
      v821 = 1;
    else
      v821 = v817 <= -1;
    if (v821)
    {
      v822 = 48 - v810;
      v823 = v817 & ~(v817 >> 31);
      if ((int)(48 - v810) >= v823)
      {
        v824 = (uint8x8_t *)(v1 + 10648);
        v825 = *(uint8x8_t *)(v1 + 10648);
        v826 = v823 - 1;
        if (v823 - 1 >= (int)(40 - v810))
          v827 = 40 - v810;
        else
          v827 = v823 - 1;
        v828 = 47 - v810 - v827;
        if (v828 < 0x78)
          goto LABEL_636;
        if (v826 >= (int)(40 - v810))
          v826 = 40 - v810;
        if (v824 < (uint8x8_t *)&v814->i8[((47 - v810 - v826) >> 3) + 1] && (unint64_t)v814 < v1 + 10656)
        {
LABEL_636:
          v829 = *(_QWORD *)(v1 + 10648);
          v830 = v814;
LABEL_637:
          v831 = (uint8x8_t)(v829 + 1);
          do
          {
            v820 += 8;
            v832 = v830->u8[0];
            v830 = (uint8x8_t *)((char *)v830 + 1);
            *(_QWORD *)&v811 |= (unint64_t)v832 << v822;
            *v824 = v831;
            v822 -= 8;
            ++*(_QWORD *)&v831;
          }
          while (v822 >= v823);
          goto LABEL_639;
        }
        v1038 = (v828 >> 3) + 1;
        v829 = *(_QWORD *)&v825 + (v1038 & 0x3FFFFFF8);
        v830 = (uint8x8_t *)((char *)v814 + (v1038 & 0x3FFFFFF8));
        v1039 = vdupq_n_s32(v822);
        v822 -= 8 * (v1038 & 0x3FFFFFF8);
        v1040 = vaddq_s32(v1039, (int32x4_t)xmmword_208F3A6A0);
        v1041 = vaddq_s32(v1039, (int32x4_t)xmmword_208F3A6B0);
        v1042 = 0uLL;
        v1043 = (int32x4_t)v820;
        v1044 = (int8x16_t)(unint64_t)v811;
        v1045.i64[0] = 0x800000008;
        v1045.i64[1] = 0x800000008;
        v1046.i64[0] = 0x3F0000003FLL;
        v1046.i64[1] = 0x3F0000003FLL;
        v1047 = v1038 & 0x3FFFFFF8;
        v1048 = 0uLL;
        v1049 = 0uLL;
        v1050 = 0uLL;
        do
        {
          v1043 = vaddq_s32(v1043, v1045);
          v1051 = *v814++;
          v1042 = vaddq_s32(v1042, v1045);
          v1052 = vmovl_u8(v1051);
          v1053 = vmovl_high_u16(v1052);
          v1054.i64[0] = v1053.u32[2];
          v1054.i64[1] = v1053.u32[3];
          v1055 = v1054;
          v1054.i64[0] = v1053.u32[0];
          v1054.i64[1] = v1053.u32[1];
          v1056 = v1054;
          v1057 = vmovl_u16(*(uint16x4_t *)v1052.i8);
          v1054.i64[0] = v1057.u32[2];
          v1054.i64[1] = v1057.u32[3];
          v1058 = v1054;
          v1054.i64[0] = v1057.u32[0];
          v1054.i64[1] = v1057.u32[1];
          v1059 = v1054;
          v1054.i64[0] = v1040.u32[2];
          v1054.i64[1] = v1040.u32[3];
          v1060 = v1054;
          v1054.i64[0] = v1040.u32[0];
          v1054.i64[1] = v1040.u32[1];
          v1061 = v1054;
          v1054.i64[0] = v1041.u32[2];
          v1054.i64[1] = v1041.u32[3];
          v1062 = v1054;
          v1054.i64[0] = v1041.u32[0];
          v1054.i64[1] = v1041.u32[1];
          v1050 = vorrq_s8((int8x16_t)vshlq_u64(v1055, v1060), v1050);
          v1049 = vorrq_s8((int8x16_t)vshlq_u64(v1056, v1061), v1049);
          v1048 = vorrq_s8((int8x16_t)vshlq_u64(v1058, v1062), v1048);
          v1044 = vorrq_s8((int8x16_t)vshlq_u64(v1059, v1054), v1044);
          *(_QWORD *)&v825 += 8;
          v1041 = vaddq_s32(v1041, v1046);
          v1040 = vaddq_s32(v1040, v1046);
          v1047 -= 8;
        }
        while (v1047);
        *v824 = v825;
        v1063 = vorrq_s8(vorrq_s8(v1044, v1049), vorrq_s8(v1048, v1050));
        v811 = vorr_s8(*(int8x8_t *)v1063.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1063, v1063, 8uLL));
        v820 = vaddvq_s32(vaddq_s32(v1043, v1042));
        if ((v1038 & 0x3FFFFFF8) != v1038)
          goto LABEL_637;
      }
    }
LABEL_639:
    v810 = v820;
    v812 = (int8x8_t)(*(_QWORD *)&v811 - (v809 << 56));
    if (*(_QWORD *)&v811 < (unint64_t)(v809 << 56))
      goto LABEL_613;
    goto LABEL_640;
  }
  v812 = (int8x8_t)(*(_QWORD *)&v811 - (v809 << 56));
  if (*(_QWORD *)&v811 < (unint64_t)(v809 << 56))
  {
LABEL_613:
    v813 = 0;
    goto LABEL_641;
  }
LABEL_640:
  LODWORD(v809) = *(_DWORD *)(v1 + 10668) - v809;
  v813 = 1;
  v811 = v812;
LABEL_641:
  v833 = vp8_norm[v809];
  v834 = (int8x8_t)(*(_QWORD *)&v811 << v833);
  v835 = v810 - v833;
  *(int8x8_t *)(v1 + 10656) = v834;
  *(_DWORD *)(v1 + 10664) = v810 - v833;
  *(_DWORD *)(v1 + 10668) = (_DWORD)v809 << v833;
  *(_DWORD *)(v1 + 7504) = v813;
  v836 = ((((_DWORD)v809 << v833 << 7) - 128) >> 8) + 1;
  if (((v810 - v833) & 0x80000000) != 0)
  {
    v837 = *(uint8x8_t **)(v1 + 10648);
    v838 = 48 - v835;
    v839 = *(_QWORD *)(v1 + 10640) - (_QWORD)v837;
    v840 = 8 * v839;
    v841 = 56 - 8 * v839 - v835;
    v842 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v842)
    {
      if (v839 >= 9)
        v843 = 9;
      else
        v843 = *(_QWORD *)(v1 + 10640) - (_QWORD)v837;
      v842(*(_QWORD *)(v1 + 10680), v837, v4442, v843);
      v837 = (uint8x8_t *)v4442;
    }
    if (v841 >= 0)
      v835 += 0x40000000;
    if (v840)
      v844 = 1;
    else
      v844 = v841 <= -1;
    v845 = v841 & ~(v841 >> 31);
    if (!v844 || v838 < v845)
    {
      v1 = a1;
    }
    else
    {
      v1 = a1;
      v851 = (uint8x8_t *)(a1 + 10648);
      v852 = *(uint8x8_t *)(a1 + 10648);
      v853 = v833 - v810 + 40;
      if (v853 >= v845 - 1)
        v854 = v845 - 1;
      else
        v854 = v833 - v810 + 40;
      v855 = v833 - v810 - v854 + 47;
      if (v855 < 0x78)
        goto LABEL_676;
      if (v853 >= v845 - 1)
        v853 = v845 - 1;
      if (v851 >= (uint8x8_t *)&v837->i8[((v833 - v810 - v853 + 47) >> 3) + 1] || (unint64_t)v837 >= a1 + 10656)
      {
        v857 = (v855 >> 3) + 1;
        v858 = *(_QWORD *)&v852 + (v857 & 0x3FFFFFF8);
        v859 = (uint8x8_t *)((char *)v837 + (v857 & 0x3FFFFFF8));
        v860 = vdupq_n_s32(v838);
        v861 = v838 - 8 * (v857 & 0x3FFFFFF8);
        v862 = vaddq_s32(v860, (int32x4_t)xmmword_208F3A6A0);
        v863 = vaddq_s32(v860, (int32x4_t)xmmword_208F3A6B0);
        v864 = 0uLL;
        v865 = (int32x4_t)v835;
        v866 = (int8x16_t)(unint64_t)v834;
        v867.i64[0] = 0x800000008;
        v867.i64[1] = 0x800000008;
        v868.i64[0] = 0x3F0000003FLL;
        v868.i64[1] = 0x3F0000003FLL;
        v869 = v857 & 0x3FFFFFF8;
        v870 = 0uLL;
        v871 = 0uLL;
        v872 = 0uLL;
        do
        {
          v865 = vaddq_s32(v865, v867);
          v873 = *v837++;
          v864 = vaddq_s32(v864, v867);
          v874 = vmovl_u8(v873);
          v875 = vmovl_high_u16(v874);
          v876.i64[0] = v875.u32[2];
          v876.i64[1] = v875.u32[3];
          v877 = v876;
          v876.i64[0] = v875.u32[0];
          v876.i64[1] = v875.u32[1];
          v878 = v876;
          v879 = vmovl_u16(*(uint16x4_t *)v874.i8);
          v876.i64[0] = v879.u32[2];
          v876.i64[1] = v879.u32[3];
          v880 = v876;
          v876.i64[0] = v879.u32[0];
          v876.i64[1] = v879.u32[1];
          v881 = v876;
          v876.i64[0] = v862.u32[2];
          v876.i64[1] = v862.u32[3];
          v882 = v876;
          v876.i64[0] = v862.u32[0];
          v876.i64[1] = v862.u32[1];
          v883 = v876;
          v876.i64[0] = v863.u32[2];
          v876.i64[1] = v863.u32[3];
          v884 = v876;
          v876.i64[0] = v863.u32[0];
          v876.i64[1] = v863.u32[1];
          v872 = vorrq_s8((int8x16_t)vshlq_u64(v877, v882), v872);
          v871 = vorrq_s8((int8x16_t)vshlq_u64(v878, v883), v871);
          v870 = vorrq_s8((int8x16_t)vshlq_u64(v880, v884), v870);
          v866 = vorrq_s8((int8x16_t)vshlq_u64(v881, v876), v866);
          *(_QWORD *)&v852 += 8;
          v863 = vaddq_s32(v863, v868);
          v862 = vaddq_s32(v862, v868);
          v869 -= 8;
        }
        while (v869);
        *v851 = v852;
        v885 = vorrq_s8(vorrq_s8(v866, v871), vorrq_s8(v870, v872));
        v834 = vorr_s8(*(int8x8_t *)v885.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v885, v885, 8uLL));
        v835 = vaddvq_s32(vaddq_s32(v865, v864));
        if ((v857 & 0x3FFFFFF8) == v857)
          goto LABEL_679;
      }
      else
      {
LABEL_676:
        v858 = *(_QWORD *)(a1 + 10648);
        v859 = v837;
        v861 = v838;
      }
      v886 = (uint8x8_t)(v858 + 1);
      do
      {
        v835 += 8;
        v887 = v859->u8[0];
        v859 = (uint8x8_t *)((char *)v859 + 1);
        *(_QWORD *)&v834 |= (unint64_t)v887 << v861;
        *v851 = v886;
        v861 -= 8;
        ++*(_QWORD *)&v886;
      }
      while (v861 >= v845);
    }
  }
LABEL_679:
  v888 = (int8x8_t)(*(_QWORD *)&v834 - (v836 << 56));
  if (*(_QWORD *)&v834 >= (unint64_t)(v836 << 56))
  {
    LODWORD(v836) = *(_DWORD *)(v1 + 10668) - v836;
    v889 = 32;
    v834 = v888;
  }
  else
  {
    v889 = 0;
  }
  v890 = vp8_norm[v836];
  v891 = (_DWORD)v836 << v890;
  v892 = (int8x8_t)(*(_QWORD *)&v834 << v890);
  v893 = v835 - v890;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v834 << v890;
  *(_DWORD *)(v1 + 10664) = v835 - v890;
  *(_DWORD *)(v1 + 10668) = v891;
  v894 = (((v891 << 7) - 128) >> 8) + 1;
  if (((v835 - v890) & 0x80000000) != 0)
  {
    v895 = *(uint8x8_t **)(v1 + 10648);
    v896 = 48 - v893;
    v897 = *(_QWORD *)(v1 + 10640) - (_QWORD)v895;
    v898 = 8 * v897;
    v899 = 56 - 8 * v897 - v893;
    v900 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v900)
    {
      if (v897 >= 9)
        v901 = 9;
      else
        v901 = *(_QWORD *)(v1 + 10640) - (_QWORD)v895;
      v900(*(_QWORD *)(v1 + 10680), v895, v4442, v901);
      v895 = (uint8x8_t *)v4442;
    }
    if (v899 >= 0)
      v893 += 0x40000000;
    if (v898)
      v902 = 1;
    else
      v902 = v899 <= -1;
    v903 = v899 & ~(v899 >> 31);
    if (!v902 || v896 < v903)
    {
      v1 = a1;
    }
    else
    {
      v1 = a1;
      v905 = (uint8x8_t *)(a1 + 10648);
      v906 = *(uint8x8_t *)(a1 + 10648);
      v907 = v890 - v835 + 40;
      if (v907 >= v903 - 1)
        v908 = v903 - 1;
      else
        v908 = v890 - v835 + 40;
      v909 = v890 - v835 - v908 + 47;
      if (v909 < 0x78)
        goto LABEL_714;
      if (v907 >= v903 - 1)
        v907 = v903 - 1;
      if (v905 >= (uint8x8_t *)&v895->i8[((v890 - v835 - v907 + 47) >> 3) + 1] || (unint64_t)v895 >= a1 + 10656)
      {
        v911 = (v909 >> 3) + 1;
        v912 = *(_QWORD *)&v906 + (v911 & 0x3FFFFFF8);
        v913 = (uint8x8_t *)((char *)v895 + (v911 & 0x3FFFFFF8));
        v914 = vdupq_n_s32(v896);
        v915 = v896 - 8 * (v911 & 0x3FFFFFF8);
        v916 = vaddq_s32(v914, (int32x4_t)xmmword_208F3A6A0);
        v917 = vaddq_s32(v914, (int32x4_t)xmmword_208F3A6B0);
        v918 = 0uLL;
        v919 = (int32x4_t)v893;
        v920 = (int8x16_t)(unint64_t)v892;
        v921.i64[0] = 0x800000008;
        v921.i64[1] = 0x800000008;
        v922.i64[0] = 0x3F0000003FLL;
        v922.i64[1] = 0x3F0000003FLL;
        v923 = v911 & 0x3FFFFFF8;
        v924 = 0uLL;
        v925 = 0uLL;
        v926 = 0uLL;
        do
        {
          v919 = vaddq_s32(v919, v921);
          v927 = *v895++;
          v918 = vaddq_s32(v918, v921);
          v928 = vmovl_u8(v927);
          v929 = vmovl_high_u16(v928);
          v930.i64[0] = v929.u32[2];
          v930.i64[1] = v929.u32[3];
          v931 = v930;
          v930.i64[0] = v929.u32[0];
          v930.i64[1] = v929.u32[1];
          v932 = v930;
          v933 = vmovl_u16(*(uint16x4_t *)v928.i8);
          v930.i64[0] = v933.u32[2];
          v930.i64[1] = v933.u32[3];
          v934 = v930;
          v930.i64[0] = v933.u32[0];
          v930.i64[1] = v933.u32[1];
          v935 = v930;
          v930.i64[0] = v916.u32[2];
          v930.i64[1] = v916.u32[3];
          v936 = v930;
          v930.i64[0] = v916.u32[0];
          v930.i64[1] = v916.u32[1];
          v937 = v930;
          v930.i64[0] = v917.u32[2];
          v930.i64[1] = v917.u32[3];
          v938 = v930;
          v930.i64[0] = v917.u32[0];
          v930.i64[1] = v917.u32[1];
          v926 = vorrq_s8((int8x16_t)vshlq_u64(v931, v936), v926);
          v925 = vorrq_s8((int8x16_t)vshlq_u64(v932, v937), v925);
          v924 = vorrq_s8((int8x16_t)vshlq_u64(v934, v938), v924);
          v920 = vorrq_s8((int8x16_t)vshlq_u64(v935, v930), v920);
          *(_QWORD *)&v906 += 8;
          v917 = vaddq_s32(v917, v922);
          v916 = vaddq_s32(v916, v922);
          v923 -= 8;
        }
        while (v923);
        *v905 = v906;
        v939 = vorrq_s8(vorrq_s8(v920, v925), vorrq_s8(v924, v926));
        v892 = vorr_s8(*(int8x8_t *)v939.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v939, v939, 8uLL));
        v893 = vaddvq_s32(vaddq_s32(v919, v918));
        if ((v911 & 0x3FFFFFF8) == v911)
          goto LABEL_717;
      }
      else
      {
LABEL_714:
        v912 = *(_QWORD *)(a1 + 10648);
        v913 = v895;
        v915 = v896;
      }
      v940 = (uint8x8_t)(v912 + 1);
      do
      {
        v893 += 8;
        v941 = v913->u8[0];
        v913 = (uint8x8_t *)((char *)v913 + 1);
        *(_QWORD *)&v892 |= (unint64_t)v941 << v915;
        *v905 = v940;
        v915 -= 8;
        ++*(_QWORD *)&v940;
      }
      while (v915 >= v903);
    }
  }
LABEL_717:
  v942 = (int8x8_t)(*(_QWORD *)&v892 - (v894 << 56));
  if (*(_QWORD *)&v892 >= (unint64_t)(v894 << 56))
  {
    LODWORD(v894) = *(_DWORD *)(v1 + 10668) - v894;
    v943 = 16;
    v892 = v942;
  }
  else
  {
    v943 = 0;
  }
  v944 = vp8_norm[v894];
  v945 = (_DWORD)v894 << v944;
  v946 = (int8x8_t)(*(_QWORD *)&v892 << v944);
  v947 = v893 - v944;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v892 << v944;
  *(_DWORD *)(v1 + 10664) = v893 - v944;
  *(_DWORD *)(v1 + 10668) = v945;
  v948 = (((v945 << 7) - 128) >> 8) + 1;
  if (((v893 - v944) & 0x80000000) != 0)
  {
    v949 = *(uint8x8_t **)(v1 + 10648);
    v950 = 48 - v947;
    v951 = *(_QWORD *)(v1 + 10640) - (_QWORD)v949;
    v952 = 8 * v951;
    v953 = 56 - 8 * v951 - v947;
    v954 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v954)
    {
      if (v951 >= 9)
        v955 = 9;
      else
        v955 = *(_QWORD *)(v1 + 10640) - (_QWORD)v949;
      v954(*(_QWORD *)(v1 + 10680), v949, v4442, v955);
      v949 = (uint8x8_t *)v4442;
    }
    if (v953 >= 0)
      v947 += 0x40000000;
    if (v952)
      v956 = 1;
    else
      v956 = v953 <= -1;
    v957 = v953 & ~(v953 >> 31);
    if (!v956 || v950 < v957)
    {
      v1 = a1;
    }
    else
    {
      v1 = a1;
      v959 = (uint8x8_t *)(a1 + 10648);
      v960 = *(uint8x8_t *)(a1 + 10648);
      v961 = v944 - v893 + 40;
      if (v961 >= v957 - 1)
        v962 = v957 - 1;
      else
        v962 = v944 - v893 + 40;
      v963 = v944 - v893 - v962 + 47;
      if (v963 >= 0x78)
      {
        if (v961 >= v957 - 1)
          v961 = v957 - 1;
        if (v959 >= (uint8x8_t *)&v949->i8[((v944 - v893 - v961 + 47) >> 3) + 1]
          || (unint64_t)v949 >= a1 + 10656)
        {
          v1012 = (v963 >> 3) + 1;
          v964 = *(_QWORD *)&v960 + (v1012 & 0x3FFFFFF8);
          v965 = (uint8x8_t *)((char *)v949 + (v1012 & 0x3FFFFFF8));
          v1013 = vdupq_n_s32(v950);
          v966 = v950 - 8 * (v1012 & 0x3FFFFFF8);
          v1014 = vaddq_s32(v1013, (int32x4_t)xmmword_208F3A6A0);
          v1015 = vaddq_s32(v1013, (int32x4_t)xmmword_208F3A6B0);
          v1016 = 0uLL;
          v1017 = (int32x4_t)v947;
          v1018 = (int8x16_t)(unint64_t)v946;
          v1019.i64[0] = 0x800000008;
          v1019.i64[1] = 0x800000008;
          v1020.i64[0] = 0x3F0000003FLL;
          v1020.i64[1] = 0x3F0000003FLL;
          v1021 = v1012 & 0x3FFFFFF8;
          v1022 = 0uLL;
          v1023 = 0uLL;
          v1024 = 0uLL;
          do
          {
            v1017 = vaddq_s32(v1017, v1019);
            v1025 = *v949++;
            v1016 = vaddq_s32(v1016, v1019);
            v1026 = vmovl_u8(v1025);
            v1027 = vmovl_high_u16(v1026);
            v1028.i64[0] = v1027.u32[2];
            v1028.i64[1] = v1027.u32[3];
            v1029 = v1028;
            v1028.i64[0] = v1027.u32[0];
            v1028.i64[1] = v1027.u32[1];
            v1030 = v1028;
            v1031 = vmovl_u16(*(uint16x4_t *)v1026.i8);
            v1028.i64[0] = v1031.u32[2];
            v1028.i64[1] = v1031.u32[3];
            v1032 = v1028;
            v1028.i64[0] = v1031.u32[0];
            v1028.i64[1] = v1031.u32[1];
            v1033 = v1028;
            v1028.i64[0] = v1014.u32[2];
            v1028.i64[1] = v1014.u32[3];
            v1034 = v1028;
            v1028.i64[0] = v1014.u32[0];
            v1028.i64[1] = v1014.u32[1];
            v1035 = v1028;
            v1028.i64[0] = v1015.u32[2];
            v1028.i64[1] = v1015.u32[3];
            v1036 = v1028;
            v1028.i64[0] = v1015.u32[0];
            v1028.i64[1] = v1015.u32[1];
            v1024 = vorrq_s8((int8x16_t)vshlq_u64(v1029, v1034), v1024);
            v1023 = vorrq_s8((int8x16_t)vshlq_u64(v1030, v1035), v1023);
            v1022 = vorrq_s8((int8x16_t)vshlq_u64(v1032, v1036), v1022);
            v1018 = vorrq_s8((int8x16_t)vshlq_u64(v1033, v1028), v1018);
            *(_QWORD *)&v960 += 8;
            v1015 = vaddq_s32(v1015, v1020);
            v1014 = vaddq_s32(v1014, v1020);
            v1021 -= 8;
          }
          while (v1021);
          *v959 = v960;
          v1037 = vorrq_s8(vorrq_s8(v1018, v1023), vorrq_s8(v1022, v1024));
          v946 = vorr_s8(*(int8x8_t *)v1037.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1037, v1037, 8uLL));
          v947 = vaddvq_s32(vaddq_s32(v1017, v1016));
          if ((v1012 & 0x3FFFFFF8) == v1012)
            goto LABEL_788;
        }
        else
        {
          v964 = *(_QWORD *)(a1 + 10648);
          v965 = v949;
          v966 = v950;
        }
      }
      else
      {
        v964 = *(_QWORD *)(a1 + 10648);
        v965 = v949;
        v966 = v950;
      }
      v1064 = (uint8x8_t)(v964 + 1);
      do
      {
        v947 += 8;
        v1065 = v965->u8[0];
        v965 = (uint8x8_t *)((char *)v965 + 1);
        *(_QWORD *)&v946 |= (unint64_t)v1065 << v966;
        *v959 = v1064;
        v966 -= 8;
        ++*(_QWORD *)&v1064;
      }
      while (v966 >= v957);
    }
  }
LABEL_788:
  v1066 = (int8x8_t)(*(_QWORD *)&v946 - (v948 << 56));
  if (*(_QWORD *)&v946 >= (unint64_t)(v948 << 56))
  {
    LODWORD(v948) = *(_DWORD *)(v1 + 10668) - v948;
    v1067 = 8;
    v946 = v1066;
  }
  else
  {
    v1067 = 0;
  }
  v1068 = vp8_norm[v948];
  v1069 = (int8x8_t)(*(_QWORD *)&v946 << v1068);
  v1070 = v947 - v1068;
  *(int8x8_t *)(v1 + 10656) = v1069;
  *(_DWORD *)(v1 + 10664) = v947 - v1068;
  *(_DWORD *)(v1 + 10668) = (_DWORD)v948 << v1068;
  v1071 = ((((_DWORD)v948 << v1068 << 7) - 128) >> 8) + 1;
  if (((v947 - v1068) & 0x80000000) != 0)
  {
    v4429 = v943;
    v1072 = v1067;
    v1073 = v889;
    v1074 = *(uint8x8_t **)(v1 + 10648);
    v1075 = 48 - v1070;
    v1076 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1074;
    v1077 = 8 * v1076;
    v1078 = 56 - 8 * v1076 - v1070;
    v1079 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v1079)
    {
      if (v1076 >= 9)
        v1080 = 9;
      else
        v1080 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1074;
      v1079(*(_QWORD *)(v1 + 10680), v1074, v4442, v1080);
      v1074 = (uint8x8_t *)v4442;
    }
    if (v1078 >= 0)
      v1070 += 0x40000000;
    if (v1077)
      v1081 = 1;
    else
      v1081 = v1078 <= -1;
    v1082 = v1078 & ~(v1078 >> 31);
    if (!v1081 || v1075 < v1082)
    {
      v1 = a1;
      v889 = v1073;
      v1067 = v1072;
      v943 = v4429;
    }
    else
    {
      v1 = a1;
      v1084 = (uint8x8_t *)(a1 + 10648);
      v1085 = *(uint8x8_t *)(a1 + 10648);
      v1086 = v1068 - v947 + 40;
      if (v1086 >= v1082 - 1)
        v1087 = v1082 - 1;
      else
        v1087 = v1068 - v947 + 40;
      v1088 = v1068 - v947 - v1087 + 47;
      v889 = v1073;
      v1067 = v1072;
      if (v1088 >= 0x78)
      {
        if (v1086 >= v1082 - 1)
          v1086 = v1082 - 1;
        v1092 = v1084 >= (uint8x8_t *)&v1074->i8[((v1068 - v947 - v1086 + 47) >> 3) + 1]
             || (unint64_t)v1074 >= a1 + 10656;
        v943 = v4429;
        if (v1092)
        {
          v1093 = (v1088 >> 3) + 1;
          v1089 = *(_QWORD *)&v1085 + (v1093 & 0x3FFFFFF8);
          v1090 = (uint8x8_t *)((char *)v1074 + (v1093 & 0x3FFFFFF8));
          v1094 = vdupq_n_s32(v1075);
          v1091 = v1075 - 8 * (v1093 & 0x3FFFFFF8);
          v1095 = vaddq_s32(v1094, (int32x4_t)xmmword_208F3A6A0);
          v1096 = vaddq_s32(v1094, (int32x4_t)xmmword_208F3A6B0);
          v1097 = 0uLL;
          v1098 = (int32x4_t)v1070;
          v1099 = (int8x16_t)(unint64_t)v1069;
          v1100.i64[0] = 0x800000008;
          v1100.i64[1] = 0x800000008;
          v1101.i64[0] = 0x3F0000003FLL;
          v1101.i64[1] = 0x3F0000003FLL;
          v1102 = v1093 & 0x3FFFFFF8;
          v1103 = 0uLL;
          v1104 = 0uLL;
          v1105 = 0uLL;
          do
          {
            v1098 = vaddq_s32(v1098, v1100);
            v1106 = *v1074++;
            v1097 = vaddq_s32(v1097, v1100);
            v1107 = vmovl_u8(v1106);
            v1108 = vmovl_high_u16(v1107);
            v1109.i64[0] = v1108.u32[2];
            v1109.i64[1] = v1108.u32[3];
            v1110 = v1109;
            v1109.i64[0] = v1108.u32[0];
            v1109.i64[1] = v1108.u32[1];
            v1111 = v1109;
            v1112 = vmovl_u16(*(uint16x4_t *)v1107.i8);
            v1109.i64[0] = v1112.u32[2];
            v1109.i64[1] = v1112.u32[3];
            v1113 = v1109;
            v1109.i64[0] = v1112.u32[0];
            v1109.i64[1] = v1112.u32[1];
            v1114 = v1109;
            v1109.i64[0] = v1095.u32[2];
            v1109.i64[1] = v1095.u32[3];
            v1115 = v1109;
            v1109.i64[0] = v1095.u32[0];
            v1109.i64[1] = v1095.u32[1];
            v1116 = v1109;
            v1109.i64[0] = v1096.u32[2];
            v1109.i64[1] = v1096.u32[3];
            v1117 = v1109;
            v1109.i64[0] = v1096.u32[0];
            v1109.i64[1] = v1096.u32[1];
            v1105 = vorrq_s8((int8x16_t)vshlq_u64(v1110, v1115), v1105);
            v1104 = vorrq_s8((int8x16_t)vshlq_u64(v1111, v1116), v1104);
            v1103 = vorrq_s8((int8x16_t)vshlq_u64(v1113, v1117), v1103);
            v1099 = vorrq_s8((int8x16_t)vshlq_u64(v1114, v1109), v1099);
            *(_QWORD *)&v1085 += 8;
            v1096 = vaddq_s32(v1096, v1101);
            v1095 = vaddq_s32(v1095, v1101);
            v1102 -= 8;
          }
          while (v1102);
          *v1084 = v1085;
          v1118 = vorrq_s8(vorrq_s8(v1099, v1104), vorrq_s8(v1103, v1105));
          v1069 = vorr_s8(*(int8x8_t *)v1118.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1118, v1118, 8uLL));
          v1070 = vaddvq_s32(vaddq_s32(v1098, v1097));
          if ((v1093 & 0x3FFFFFF8) == v1093)
            goto LABEL_825;
        }
        else
        {
          v1089 = *(_QWORD *)(a1 + 10648);
          v1090 = v1074;
          v1091 = v1075;
        }
      }
      else
      {
        v1089 = *(_QWORD *)(a1 + 10648);
        v1090 = v1074;
        v1091 = v1075;
        v943 = v4429;
      }
      v1119 = (uint8x8_t)(v1089 + 1);
      do
      {
        v1070 += 8;
        v1120 = v1090->u8[0];
        v1090 = (uint8x8_t *)((char *)v1090 + 1);
        *(_QWORD *)&v1069 |= (unint64_t)v1120 << v1091;
        *v1084 = v1119;
        v1091 -= 8;
        ++*(_QWORD *)&v1119;
      }
      while (v1091 >= v1082);
    }
  }
LABEL_825:
  v1121 = (int8x8_t)(*(_QWORD *)&v1069 - (v1071 << 56));
  if (*(_QWORD *)&v1069 >= (unint64_t)(v1071 << 56))
  {
    LODWORD(v1071) = *(_DWORD *)(v1 + 10668) - v1071;
    v1122 = 4;
    v1069 = v1121;
  }
  else
  {
    v1122 = 0;
  }
  v1123 = v943 | v889;
  v1124 = vp8_norm[v1071];
  v1125 = (_DWORD)v1071 << v1124;
  v1126 = (int8x8_t)(*(_QWORD *)&v1069 << v1124);
  v1127 = v1070 - v1124;
  *(int8x8_t *)(v1 + 10656) = v1126;
  *(_DWORD *)(v1 + 10664) = v1070 - v1124;
  *(_DWORD *)(v1 + 10668) = v1125;
  v1128 = (((v1125 << 7) - 128) >> 8) + 1;
  if (((v1070 - v1124) & 0x80000000) != 0)
  {
    v4430 = v1122;
    v1129 = *(uint8x8_t **)(v1 + 10648);
    v1130 = 48 - v1127;
    v1131 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1129;
    v1132 = 8 * v1131;
    v1133 = 56 - 8 * v1131 - v1127;
    v1134 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v1134)
    {
      if (v1131 >= 9)
        v1135 = 9;
      else
        v1135 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1129;
      v1136 = v1067;
      v1134(*(_QWORD *)(v1 + 10680), v1129, v4442, v1135);
      v1067 = v1136;
      v1129 = (uint8x8_t *)v4442;
    }
    if (v1133 >= 0)
      v1127 += 0x40000000;
    if (v1132)
      v1137 = 1;
    else
      v1137 = v1133 <= -1;
    v1138 = v1133 & ~(v1133 >> 31);
    if (!v1137 || v1130 < v1138)
    {
      v1 = a1;
      v1122 = v4430;
    }
    else
    {
      v1 = a1;
      v1140 = (uint8x8_t *)(a1 + 10648);
      v1141 = *(uint8x8_t *)(a1 + 10648);
      v1142 = v1124 - v1070 + 40;
      if (v1142 >= v1138 - 1)
        v1143 = v1138 - 1;
      else
        v1143 = v1124 - v1070 + 40;
      v1144 = v1124 - v1070 - v1143 + 47;
      if (v1144 < 0x78)
        goto LABEL_861;
      if (v1142 >= v1138 - 1)
        v1142 = v1138 - 1;
      if (v1140 >= (uint8x8_t *)&v1129->i8[((v1124 - v1070 - v1142 + 47) >> 3) + 1]
        || (unint64_t)v1129 >= a1 + 10656)
      {
        v1146 = (v1144 >> 3) + 1;
        v1147 = *(_QWORD *)&v1141 + (v1146 & 0x3FFFFFF8);
        v1148 = (uint8x8_t *)((char *)v1129 + (v1146 & 0x3FFFFFF8));
        v1149 = vdupq_n_s32(v1130);
        v1150 = v1130 - 8 * (v1146 & 0x3FFFFFF8);
        v1151 = vaddq_s32(v1149, (int32x4_t)xmmword_208F3A6A0);
        v1152 = vaddq_s32(v1149, (int32x4_t)xmmword_208F3A6B0);
        v1153 = 0uLL;
        v1154 = (int32x4_t)v1127;
        v1155 = (int8x16_t)(unint64_t)v1126;
        v1156.i64[0] = 0x800000008;
        v1156.i64[1] = 0x800000008;
        v1157.i64[0] = 0x3F0000003FLL;
        v1157.i64[1] = 0x3F0000003FLL;
        v1158 = v1146 & 0x3FFFFFF8;
        v1159 = 0uLL;
        v1160 = 0uLL;
        v1161 = 0uLL;
        do
        {
          v1154 = vaddq_s32(v1154, v1156);
          v1162 = *v1129++;
          v1153 = vaddq_s32(v1153, v1156);
          v1163 = vmovl_u8(v1162);
          v1164 = vmovl_high_u16(v1163);
          v1165.i64[0] = v1164.u32[2];
          v1165.i64[1] = v1164.u32[3];
          v1166 = v1165;
          v1165.i64[0] = v1164.u32[0];
          v1165.i64[1] = v1164.u32[1];
          v1167 = v1165;
          v1168 = vmovl_u16(*(uint16x4_t *)v1163.i8);
          v1165.i64[0] = v1168.u32[2];
          v1165.i64[1] = v1168.u32[3];
          v1169 = v1165;
          v1165.i64[0] = v1168.u32[0];
          v1165.i64[1] = v1168.u32[1];
          v1170 = v1165;
          v1165.i64[0] = v1151.u32[2];
          v1165.i64[1] = v1151.u32[3];
          v1171 = v1165;
          v1165.i64[0] = v1151.u32[0];
          v1165.i64[1] = v1151.u32[1];
          v1172 = v1165;
          v1165.i64[0] = v1152.u32[2];
          v1165.i64[1] = v1152.u32[3];
          v1173 = v1165;
          v1165.i64[0] = v1152.u32[0];
          v1165.i64[1] = v1152.u32[1];
          v1161 = vorrq_s8((int8x16_t)vshlq_u64(v1166, v1171), v1161);
          v1160 = vorrq_s8((int8x16_t)vshlq_u64(v1167, v1172), v1160);
          v1159 = vorrq_s8((int8x16_t)vshlq_u64(v1169, v1173), v1159);
          v1155 = vorrq_s8((int8x16_t)vshlq_u64(v1170, v1165), v1155);
          *(_QWORD *)&v1141 += 8;
          v1152 = vaddq_s32(v1152, v1157);
          v1151 = vaddq_s32(v1151, v1157);
          v1158 -= 8;
        }
        while (v1158);
        *v1140 = v1141;
        v1174 = vorrq_s8(vorrq_s8(v1155, v1160), vorrq_s8(v1159, v1161));
        v1126 = vorr_s8(*(int8x8_t *)v1174.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1174, v1174, 8uLL));
        v1127 = vaddvq_s32(vaddq_s32(v1154, v1153));
        v2465 = (v1146 & 0x3FFFFFF8) == v1146;
        v1122 = v4430;
        if (v2465)
          goto LABEL_864;
      }
      else
      {
LABEL_861:
        v1147 = *(_QWORD *)(a1 + 10648);
        v1148 = v1129;
        v1150 = v1130;
        v1122 = v4430;
      }
      v1175 = (uint8x8_t)(v1147 + 1);
      do
      {
        v1127 += 8;
        v1176 = v1148->u8[0];
        v1148 = (uint8x8_t *)((char *)v1148 + 1);
        *(_QWORD *)&v1126 |= (unint64_t)v1176 << v1150;
        *v1140 = v1175;
        v1150 -= 8;
        ++*(_QWORD *)&v1175;
      }
      while (v1150 >= v1138);
    }
  }
LABEL_864:
  v1177 = v1123 | v1067;
  v1178 = (int8x8_t)(*(_QWORD *)&v1126 - (v1128 << 56));
  if (*(_QWORD *)&v1126 >= (unint64_t)(v1128 << 56))
  {
    LODWORD(v1128) = *(_DWORD *)(v1 + 10668) - v1128;
    v1179 = 2;
    v1126 = v1178;
  }
  else
  {
    v1179 = 0;
  }
  v1180 = v1177 | v1122;
  v1181 = vp8_norm[v1128];
  v1182 = (_DWORD)v1128 << v1181;
  v1183 = (int8x8_t)(*(_QWORD *)&v1126 << v1181);
  v1184 = v1127 - v1181;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1126 << v1181;
  *(_DWORD *)(v1 + 10664) = v1127 - v1181;
  *(_DWORD *)(v1 + 10668) = v1182;
  v1185 = (((v1182 << 7) - 128) >> 8) + 1;
  if (((v1127 - v1181) & 0x80000000) != 0)
  {
    v1186 = *(uint8x8_t **)(v1 + 10648);
    v1187 = 48 - v1184;
    v1188 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1186;
    v1189 = 8 * v1188;
    v1190 = 56 - 8 * v1188 - v1184;
    v1191 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v1191)
    {
      if (v1188 >= 9)
        v1192 = 9;
      else
        v1192 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1186;
      v1191(*(_QWORD *)(v1 + 10680), v1186, v4442, v1192);
      v1186 = (uint8x8_t *)v4442;
    }
    if (v1190 >= 0)
      v1184 += 0x40000000;
    if (v1189)
      v1193 = 1;
    else
      v1193 = v1190 <= -1;
    v1194 = v1190 & ~(v1190 >> 31);
    if (!v1193 || v1187 < v1194)
    {
      v1 = a1;
    }
    else
    {
      v1 = a1;
      v1196 = (uint8x8_t *)(a1 + 10648);
      v1197 = *(uint8x8_t *)(a1 + 10648);
      v1198 = v1181 - v1127 + 40;
      if (v1198 >= v1194 - 1)
        v1199 = v1194 - 1;
      else
        v1199 = v1181 - v1127 + 40;
      v1200 = v1181 - v1127 - v1199 + 47;
      if (v1200 >= 0x78)
      {
        if (v1198 >= v1194 - 1)
          v1198 = v1194 - 1;
        if (v1196 >= (uint8x8_t *)&v1186->i8[((v1181 - v1127 - v1198 + 47) >> 3) + 1]
          || (unint64_t)v1186 >= a1 + 10656)
        {
          v1205 = (v1200 >> 3) + 1;
          v1201 = *(_QWORD *)&v1197 + (v1205 & 0x3FFFFFF8);
          v1202 = (uint8x8_t *)((char *)v1186 + (v1205 & 0x3FFFFFF8));
          v1206 = vdupq_n_s32(v1187);
          v1203 = v1187 - 8 * (v1205 & 0x3FFFFFF8);
          v1207 = vaddq_s32(v1206, (int32x4_t)xmmword_208F3A6A0);
          v1208 = vaddq_s32(v1206, (int32x4_t)xmmword_208F3A6B0);
          v1209 = 0uLL;
          v1210 = (int32x4_t)v1184;
          v1211 = (int8x16_t)(unint64_t)v1183;
          v1212.i64[0] = 0x800000008;
          v1212.i64[1] = 0x800000008;
          v1213.i64[0] = 0x3F0000003FLL;
          v1213.i64[1] = 0x3F0000003FLL;
          v1214 = v1205 & 0x3FFFFFF8;
          v1215 = 0uLL;
          v1216 = 0uLL;
          v1217 = 0uLL;
          do
          {
            v1210 = vaddq_s32(v1210, v1212);
            v1218 = *v1186++;
            v1209 = vaddq_s32(v1209, v1212);
            v1219 = vmovl_u8(v1218);
            v1220 = vmovl_high_u16(v1219);
            v1221.i64[0] = v1220.u32[2];
            v1221.i64[1] = v1220.u32[3];
            v1222 = v1221;
            v1221.i64[0] = v1220.u32[0];
            v1221.i64[1] = v1220.u32[1];
            v1223 = v1221;
            v1224 = vmovl_u16(*(uint16x4_t *)v1219.i8);
            v1221.i64[0] = v1224.u32[2];
            v1221.i64[1] = v1224.u32[3];
            v1225 = v1221;
            v1221.i64[0] = v1224.u32[0];
            v1221.i64[1] = v1224.u32[1];
            v1226 = v1221;
            v1221.i64[0] = v1207.u32[2];
            v1221.i64[1] = v1207.u32[3];
            v1227 = v1221;
            v1221.i64[0] = v1207.u32[0];
            v1221.i64[1] = v1207.u32[1];
            v1228 = v1221;
            v1221.i64[0] = v1208.u32[2];
            v1221.i64[1] = v1208.u32[3];
            v1229 = v1221;
            v1221.i64[0] = v1208.u32[0];
            v1221.i64[1] = v1208.u32[1];
            v1217 = vorrq_s8((int8x16_t)vshlq_u64(v1222, v1227), v1217);
            v1216 = vorrq_s8((int8x16_t)vshlq_u64(v1223, v1228), v1216);
            v1215 = vorrq_s8((int8x16_t)vshlq_u64(v1225, v1229), v1215);
            v1211 = vorrq_s8((int8x16_t)vshlq_u64(v1226, v1221), v1211);
            *(_QWORD *)&v1197 += 8;
            v1208 = vaddq_s32(v1208, v1213);
            v1207 = vaddq_s32(v1207, v1213);
            v1214 -= 8;
          }
          while (v1214);
          *v1196 = v1197;
          v1230 = vorrq_s8(vorrq_s8(v1211, v1216), vorrq_s8(v1215, v1217));
          v1183 = vorr_s8(*(int8x8_t *)v1230.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1230, v1230, 8uLL));
          v1184 = vaddvq_s32(vaddq_s32(v1210, v1209));
          if ((v1205 & 0x3FFFFFF8) == v1205)
            goto LABEL_901;
        }
        else
        {
          v1201 = *(_QWORD *)(a1 + 10648);
          v1202 = v1186;
          v1203 = v1187;
        }
      }
      else
      {
        v1201 = *(_QWORD *)(a1 + 10648);
        v1202 = v1186;
        v1203 = v1187;
      }
      v1231 = (uint8x8_t)(v1201 + 1);
      do
      {
        v1184 += 8;
        v1232 = v1202->u8[0];
        v1202 = (uint8x8_t *)((char *)v1202 + 1);
        *(_QWORD *)&v1183 |= (unint64_t)v1232 << v1203;
        *v1196 = v1231;
        v1203 -= 8;
        ++*(_QWORD *)&v1231;
      }
      while (v1203 >= v1194);
    }
  }
LABEL_901:
  v1233 = v1180 | v1179;
  v1234 = (int8x8_t)(*(_QWORD *)&v1183 - (v1185 << 56));
  if (*(_QWORD *)&v1183 >= (unint64_t)(v1185 << 56))
  {
    LODWORD(v1185) = *(_DWORD *)(v1 + 10668) - v1185;
    v1235 = 1;
    v1183 = v1234;
  }
  else
  {
    v1235 = 0;
  }
  v1236 = vp8_norm[v1185];
  v1237 = (int8x8_t)(*(_QWORD *)&v1183 << v1236);
  v1238 = v1184 - v1236;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1183 << v1236;
  *(_DWORD *)(v1 + 10664) = v1184 - v1236;
  *(_DWORD *)(v1 + 10668) = (_DWORD)v1185 << v1236;
  *(_DWORD *)(v1 + 7908) = v1233 | v1235;
  v1239 = ((((_DWORD)v1185 << v1236 << 7) - 128) >> 8) + 1;
  if (((v1184 - v1236) & 0x80000000) != 0)
  {
    v1240 = *(uint8x8_t **)(v1 + 10648);
    v1241 = 48 - v1238;
    v1242 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1240;
    v1243 = 8 * v1242;
    v1244 = 56 - 8 * v1242 - v1238;
    v1245 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v1245)
    {
      if (v1242 >= 9)
        v1246 = 9;
      else
        v1246 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1240;
      v1245(*(_QWORD *)(v1 + 10680), v1240, v4442, v1246);
      v1240 = (uint8x8_t *)v4442;
    }
    if (v1244 >= 0)
      v1238 += 0x40000000;
    if (v1243)
      v1247 = 1;
    else
      v1247 = v1244 <= -1;
    v1248 = v1244 & ~(v1244 >> 31);
    if (!v1247 || v1241 < v1248)
    {
      v1 = a1;
    }
    else
    {
      v1 = a1;
      v1250 = (uint8x8_t *)(a1 + 10648);
      v1251 = *(uint8x8_t *)(a1 + 10648);
      v1252 = v1236 - v1184 + 40;
      if (v1252 >= v1248 - 1)
        v1253 = v1248 - 1;
      else
        v1253 = v1236 - v1184 + 40;
      v1254 = v1236 - v1184 - v1253 + 47;
      if (v1254 < 0x78)
        goto LABEL_936;
      if (v1252 >= v1248 - 1)
        v1252 = v1248 - 1;
      if (v1250 >= (uint8x8_t *)&v1240->i8[((v1236 - v1184 - v1252 + 47) >> 3) + 1]
        || (unint64_t)v1240 >= a1 + 10656)
      {
        v1256 = (v1254 >> 3) + 1;
        v1257 = *(_QWORD *)&v1251 + (v1256 & 0x3FFFFFF8);
        v1258 = (uint8x8_t *)((char *)v1240 + (v1256 & 0x3FFFFFF8));
        v1259 = vdupq_n_s32(v1241);
        v1260 = v1241 - 8 * (v1256 & 0x3FFFFFF8);
        v1261 = vaddq_s32(v1259, (int32x4_t)xmmword_208F3A6A0);
        v1262 = vaddq_s32(v1259, (int32x4_t)xmmword_208F3A6B0);
        v1263 = 0uLL;
        v1264 = (int32x4_t)v1238;
        v1265 = (int8x16_t)(unint64_t)v1237;
        v1266.i64[0] = 0x800000008;
        v1266.i64[1] = 0x800000008;
        v1267.i64[0] = 0x3F0000003FLL;
        v1267.i64[1] = 0x3F0000003FLL;
        v1268 = v1256 & 0x3FFFFFF8;
        v1269 = 0uLL;
        v1270 = 0uLL;
        v1271 = 0uLL;
        do
        {
          v1264 = vaddq_s32(v1264, v1266);
          v1272 = *v1240++;
          v1263 = vaddq_s32(v1263, v1266);
          v1273 = vmovl_u8(v1272);
          v1274 = vmovl_high_u16(v1273);
          v1275.i64[0] = v1274.u32[2];
          v1275.i64[1] = v1274.u32[3];
          v1276 = v1275;
          v1275.i64[0] = v1274.u32[0];
          v1275.i64[1] = v1274.u32[1];
          v1277 = v1275;
          v1278 = vmovl_u16(*(uint16x4_t *)v1273.i8);
          v1275.i64[0] = v1278.u32[2];
          v1275.i64[1] = v1278.u32[3];
          v1279 = v1275;
          v1275.i64[0] = v1278.u32[0];
          v1275.i64[1] = v1278.u32[1];
          v1280 = v1275;
          v1275.i64[0] = v1261.u32[2];
          v1275.i64[1] = v1261.u32[3];
          v1281 = v1275;
          v1275.i64[0] = v1261.u32[0];
          v1275.i64[1] = v1261.u32[1];
          v1282 = v1275;
          v1275.i64[0] = v1262.u32[2];
          v1275.i64[1] = v1262.u32[3];
          v1283 = v1275;
          v1275.i64[0] = v1262.u32[0];
          v1275.i64[1] = v1262.u32[1];
          v1271 = vorrq_s8((int8x16_t)vshlq_u64(v1276, v1281), v1271);
          v1270 = vorrq_s8((int8x16_t)vshlq_u64(v1277, v1282), v1270);
          v1269 = vorrq_s8((int8x16_t)vshlq_u64(v1279, v1283), v1269);
          v1265 = vorrq_s8((int8x16_t)vshlq_u64(v1280, v1275), v1265);
          *(_QWORD *)&v1251 += 8;
          v1262 = vaddq_s32(v1262, v1267);
          v1261 = vaddq_s32(v1261, v1267);
          v1268 -= 8;
        }
        while (v1268);
        *v1250 = v1251;
        v1284 = vorrq_s8(vorrq_s8(v1265, v1270), vorrq_s8(v1269, v1271));
        v1237 = vorr_s8(*(int8x8_t *)v1284.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1284, v1284, 8uLL));
        v1238 = vaddvq_s32(vaddq_s32(v1264, v1263));
        if ((v1256 & 0x3FFFFFF8) == v1256)
          goto LABEL_939;
      }
      else
      {
LABEL_936:
        v1257 = *(_QWORD *)(a1 + 10648);
        v1258 = v1240;
        v1260 = v1241;
      }
      v1285 = (uint8x8_t)(v1257 + 1);
      do
      {
        v1238 += 8;
        v1286 = v1258->u8[0];
        v1258 = (uint8x8_t *)((char *)v1258 + 1);
        *(_QWORD *)&v1237 |= (unint64_t)v1286 << v1260;
        *v1250 = v1285;
        v1260 -= 8;
        ++*(_QWORD *)&v1285;
      }
      while (v1260 >= v1248);
    }
  }
LABEL_939:
  v1287 = (int8x8_t)(*(_QWORD *)&v1237 - (v1239 << 56));
  if (*(_QWORD *)&v1237 >= (unint64_t)(v1239 << 56))
  {
    LODWORD(v1239) = *(_DWORD *)(v1 + 10668) - v1239;
    v1288 = 4;
    v1237 = v1287;
  }
  else
  {
    v1288 = 0;
  }
  v1289 = vp8_norm[v1239];
  v1290 = (_DWORD)v1239 << v1289;
  v1291 = (int8x8_t)(*(_QWORD *)&v1237 << v1289);
  v1292 = v1238 - v1289;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1237 << v1289;
  *(_DWORD *)(v1 + 10664) = v1238 - v1289;
  *(_DWORD *)(v1 + 10668) = v1290;
  v1293 = (((v1290 << 7) - 128) >> 8) + 1;
  if (((v1238 - v1289) & 0x80000000) != 0)
  {
    v1294 = *(uint8x8_t **)(v1 + 10648);
    v1295 = 48 - v1292;
    v1296 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1294;
    v1297 = 8 * v1296;
    v1298 = 56 - 8 * v1296 - v1292;
    v1299 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v1299)
    {
      if (v1296 >= 9)
        v1300 = 9;
      else
        v1300 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1294;
      v1299(*(_QWORD *)(v1 + 10680), v1294, v4442, v1300);
      v1294 = (uint8x8_t *)v4442;
    }
    if (v1298 >= 0)
      v1292 += 0x40000000;
    if (v1297)
      v1301 = 1;
    else
      v1301 = v1298 <= -1;
    v1302 = v1298 & ~(v1298 >> 31);
    if (!v1301 || v1295 < v1302)
    {
      v1 = a1;
    }
    else
    {
      v1 = a1;
      v1304 = (uint8x8_t *)(a1 + 10648);
      v1305 = *(uint8x8_t *)(a1 + 10648);
      v1306 = v1289 - v1238 + 40;
      if (v1306 >= v1302 - 1)
        v1307 = v1302 - 1;
      else
        v1307 = v1289 - v1238 + 40;
      v1308 = v1289 - v1238 - v1307 + 47;
      if (v1308 < 0x78)
        goto LABEL_974;
      if (v1306 >= v1302 - 1)
        v1306 = v1302 - 1;
      if (v1304 >= (uint8x8_t *)&v1294->i8[((v1289 - v1238 - v1306 + 47) >> 3) + 1]
        || (unint64_t)v1294 >= a1 + 10656)
      {
        v1310 = (v1308 >> 3) + 1;
        v1311 = *(_QWORD *)&v1305 + (v1310 & 0x3FFFFFF8);
        v1312 = (uint8x8_t *)((char *)v1294 + (v1310 & 0x3FFFFFF8));
        v1313 = vdupq_n_s32(v1295);
        v1314 = v1295 - 8 * (v1310 & 0x3FFFFFF8);
        v1315 = vaddq_s32(v1313, (int32x4_t)xmmword_208F3A6A0);
        v1316 = vaddq_s32(v1313, (int32x4_t)xmmword_208F3A6B0);
        v1317 = 0uLL;
        v1318 = (int32x4_t)v1292;
        v1319 = (int8x16_t)(unint64_t)v1291;
        v1320.i64[0] = 0x800000008;
        v1320.i64[1] = 0x800000008;
        v1321.i64[0] = 0x3F0000003FLL;
        v1321.i64[1] = 0x3F0000003FLL;
        v1322 = v1310 & 0x3FFFFFF8;
        v1323 = 0uLL;
        v1324 = 0uLL;
        v1325 = 0uLL;
        do
        {
          v1318 = vaddq_s32(v1318, v1320);
          v1326 = *v1294++;
          v1317 = vaddq_s32(v1317, v1320);
          v1327 = vmovl_u8(v1326);
          v1328 = vmovl_high_u16(v1327);
          v1329.i64[0] = v1328.u32[2];
          v1329.i64[1] = v1328.u32[3];
          v1330 = v1329;
          v1329.i64[0] = v1328.u32[0];
          v1329.i64[1] = v1328.u32[1];
          v1331 = v1329;
          v1332 = vmovl_u16(*(uint16x4_t *)v1327.i8);
          v1329.i64[0] = v1332.u32[2];
          v1329.i64[1] = v1332.u32[3];
          v1333 = v1329;
          v1329.i64[0] = v1332.u32[0];
          v1329.i64[1] = v1332.u32[1];
          v1334 = v1329;
          v1329.i64[0] = v1315.u32[2];
          v1329.i64[1] = v1315.u32[3];
          v1335 = v1329;
          v1329.i64[0] = v1315.u32[0];
          v1329.i64[1] = v1315.u32[1];
          v1336 = v1329;
          v1329.i64[0] = v1316.u32[2];
          v1329.i64[1] = v1316.u32[3];
          v1337 = v1329;
          v1329.i64[0] = v1316.u32[0];
          v1329.i64[1] = v1316.u32[1];
          v1325 = vorrq_s8((int8x16_t)vshlq_u64(v1330, v1335), v1325);
          v1324 = vorrq_s8((int8x16_t)vshlq_u64(v1331, v1336), v1324);
          v1323 = vorrq_s8((int8x16_t)vshlq_u64(v1333, v1337), v1323);
          v1319 = vorrq_s8((int8x16_t)vshlq_u64(v1334, v1329), v1319);
          *(_QWORD *)&v1305 += 8;
          v1316 = vaddq_s32(v1316, v1321);
          v1315 = vaddq_s32(v1315, v1321);
          v1322 -= 8;
        }
        while (v1322);
        *v1304 = v1305;
        v1338 = vorrq_s8(vorrq_s8(v1319, v1324), vorrq_s8(v1323, v1325));
        v1291 = vorr_s8(*(int8x8_t *)v1338.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1338, v1338, 8uLL));
        v1292 = vaddvq_s32(vaddq_s32(v1318, v1317));
        if ((v1310 & 0x3FFFFFF8) == v1310)
          goto LABEL_977;
      }
      else
      {
LABEL_974:
        v1311 = *(_QWORD *)(a1 + 10648);
        v1312 = v1294;
        v1314 = v1295;
      }
      v1339 = (uint8x8_t)(v1311 + 1);
      do
      {
        v1292 += 8;
        v1340 = v1312->u8[0];
        v1312 = (uint8x8_t *)((char *)v1312 + 1);
        *(_QWORD *)&v1291 |= (unint64_t)v1340 << v1314;
        *v1304 = v1339;
        v1314 -= 8;
        ++*(_QWORD *)&v1339;
      }
      while (v1314 >= v1302);
    }
  }
LABEL_977:
  v1341 = (int8x8_t)(*(_QWORD *)&v1291 - (v1293 << 56));
  if (*(_QWORD *)&v1291 >= (unint64_t)(v1293 << 56))
  {
    LODWORD(v1293) = *(_DWORD *)(v1 + 10668) - v1293;
    v1342 = 2;
    v1291 = v1341;
  }
  else
  {
    v1342 = 0;
  }
  v1343 = vp8_norm[v1293];
  v1344 = (int8x8_t)(*(_QWORD *)&v1291 << v1343);
  v1345 = v1292 - v1343;
  *(int8x8_t *)(v1 + 10656) = v1344;
  *(_DWORD *)(v1 + 10664) = v1292 - v1343;
  *(_DWORD *)(v1 + 10668) = (_DWORD)v1293 << v1343;
  v1346 = ((((_DWORD)v1293 << v1343 << 7) - 128) >> 8) + 1;
  if (((v1292 - v1343) & 0x80000000) != 0)
  {
    v1347 = *(uint8x8_t **)(v1 + 10648);
    v1348 = 48 - v1345;
    v1349 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1347;
    v1350 = 8 * v1349;
    v1351 = 56 - 8 * v1349 - v1345;
    v1352 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v1352)
    {
      if (v1349 >= 9)
        v1353 = 9;
      else
        v1353 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1347;
      v1352(*(_QWORD *)(v1 + 10680), v1347, v4442, v1353);
      v1347 = (uint8x8_t *)v4442;
    }
    if (v1351 >= 0)
      v1345 += 0x40000000;
    if (v1350)
      v1354 = 1;
    else
      v1354 = v1351 <= -1;
    v1355 = v1351 & ~(v1351 >> 31);
    if (!v1354 || v1348 < v1355)
    {
      v1 = a1;
    }
    else
    {
      v1 = a1;
      v1357 = (uint8x8_t *)(a1 + 10648);
      v1358 = *(uint8x8_t *)(a1 + 10648);
      v1359 = v1343 - v1292 + 40;
      if (v1359 >= v1355 - 1)
        v1360 = v1355 - 1;
      else
        v1360 = v1343 - v1292 + 40;
      v1361 = v1343 - v1292 - v1360 + 47;
      if (v1361 >= 0x78)
      {
        if (v1359 >= v1355 - 1)
          v1359 = v1355 - 1;
        if (v1357 >= (uint8x8_t *)&v1347->i8[((v1343 - v1292 - v1359 + 47) >> 3) + 1]
          || (unint64_t)v1347 >= a1 + 10656)
        {
          v1366 = (v1361 >> 3) + 1;
          v1362 = *(_QWORD *)&v1358 + (v1366 & 0x3FFFFFF8);
          v1363 = (uint8x8_t *)((char *)v1347 + (v1366 & 0x3FFFFFF8));
          v1367 = vdupq_n_s32(v1348);
          v1364 = v1348 - 8 * (v1366 & 0x3FFFFFF8);
          v1368 = vaddq_s32(v1367, (int32x4_t)xmmword_208F3A6A0);
          v1369 = vaddq_s32(v1367, (int32x4_t)xmmword_208F3A6B0);
          v1370 = 0uLL;
          v1371 = (int32x4_t)v1345;
          v1372 = (int8x16_t)(unint64_t)v1344;
          v1373.i64[0] = 0x800000008;
          v1373.i64[1] = 0x800000008;
          v1374.i64[0] = 0x3F0000003FLL;
          v1374.i64[1] = 0x3F0000003FLL;
          v1375 = v1366 & 0x3FFFFFF8;
          v1376 = 0uLL;
          v1377 = 0uLL;
          v1378 = 0uLL;
          do
          {
            v1371 = vaddq_s32(v1371, v1373);
            v1379 = *v1347++;
            v1370 = vaddq_s32(v1370, v1373);
            v1380 = vmovl_u8(v1379);
            v1381 = vmovl_high_u16(v1380);
            v1382.i64[0] = v1381.u32[2];
            v1382.i64[1] = v1381.u32[3];
            v1383 = v1382;
            v1382.i64[0] = v1381.u32[0];
            v1382.i64[1] = v1381.u32[1];
            v1384 = v1382;
            v1385 = vmovl_u16(*(uint16x4_t *)v1380.i8);
            v1382.i64[0] = v1385.u32[2];
            v1382.i64[1] = v1385.u32[3];
            v1386 = v1382;
            v1382.i64[0] = v1385.u32[0];
            v1382.i64[1] = v1385.u32[1];
            v1387 = v1382;
            v1382.i64[0] = v1368.u32[2];
            v1382.i64[1] = v1368.u32[3];
            v1388 = v1382;
            v1382.i64[0] = v1368.u32[0];
            v1382.i64[1] = v1368.u32[1];
            v1389 = v1382;
            v1382.i64[0] = v1369.u32[2];
            v1382.i64[1] = v1369.u32[3];
            v1390 = v1382;
            v1382.i64[0] = v1369.u32[0];
            v1382.i64[1] = v1369.u32[1];
            v1378 = vorrq_s8((int8x16_t)vshlq_u64(v1383, v1388), v1378);
            v1377 = vorrq_s8((int8x16_t)vshlq_u64(v1384, v1389), v1377);
            v1376 = vorrq_s8((int8x16_t)vshlq_u64(v1386, v1390), v1376);
            v1372 = vorrq_s8((int8x16_t)vshlq_u64(v1387, v1382), v1372);
            *(_QWORD *)&v1358 += 8;
            v1369 = vaddq_s32(v1369, v1374);
            v1368 = vaddq_s32(v1368, v1374);
            v1375 -= 8;
          }
          while (v1375);
          *v1357 = v1358;
          v1391 = vorrq_s8(vorrq_s8(v1372, v1377), vorrq_s8(v1376, v1378));
          v1344 = vorr_s8(*(int8x8_t *)v1391.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1391, v1391, 8uLL));
          v1345 = vaddvq_s32(vaddq_s32(v1371, v1370));
          if ((v1366 & 0x3FFFFFF8) == v1366)
            goto LABEL_1014;
        }
        else
        {
          v1362 = *(_QWORD *)(a1 + 10648);
          v1363 = v1347;
          v1364 = v1348;
        }
      }
      else
      {
        v1362 = *(_QWORD *)(a1 + 10648);
        v1363 = v1347;
        v1364 = v1348;
      }
      v1392 = (uint8x8_t)(v1362 + 1);
      do
      {
        v1345 += 8;
        v1393 = v1363->u8[0];
        v1363 = (uint8x8_t *)((char *)v1363 + 1);
        *(_QWORD *)&v1344 |= (unint64_t)v1393 << v1364;
        *v1357 = v1392;
        v1364 -= 8;
        ++*(_QWORD *)&v1392;
      }
      while (v1364 >= v1355);
    }
  }
LABEL_1014:
  v1394 = v1342 | v1288;
  if (*(_QWORD *)&v1344 >= (unint64_t)(v1346 << 56))
  {
    v1396 = *(_DWORD *)(v1 + 10668) - v1346;
    v1395 = 1;
    *(_QWORD *)&v1344 -= v1346 << 56;
  }
  else
  {
    v1395 = 0;
    v1396 = v1346;
  }
  v1397 = vp8_norm[v1396];
  v1398 = v1396 << v1397;
  v1399 = (int8x8_t)(*(_QWORD *)&v1344 << v1397);
  v1400 = v1345 - v1397;
  *(int8x8_t *)(v1 + 10656) = v1399;
  *(_DWORD *)(v1 + 10664) = v1345 - v1397;
  *(_DWORD *)(v1 + 10668) = v1398;
  *(_DWORD *)(v1 + 7916) = v1394 | v1395;
  *(_BYTE *)(v1 + 3984) = 0;
  v1401 = (((v1398 << 7) - 128) >> 8) + 1;
  if (((v1345 - v1397) & 0x80000000) != 0)
  {
    v1402 = *(uint8x8_t **)(v1 + 10648);
    v1403 = 48 - v1400;
    v1404 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1402;
    v1405 = 8 * v1404;
    v1406 = 56 - 8 * v1404 - v1400;
    v1407 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v1407)
    {
      if (v1404 >= 9)
        v1408 = 9;
      else
        v1408 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1402;
      v1407(*(_QWORD *)(v1 + 10680), v1402, v4442, v1408);
      v1402 = (uint8x8_t *)v4442;
    }
    if (v1406 >= 0)
      v1400 += 0x40000000;
    if (v1405)
      v1409 = 1;
    else
      v1409 = v1406 <= -1;
    v1410 = v1406 & ~(v1406 >> 31);
    if (!v1409 || v1403 < v1410)
    {
      v1 = a1;
    }
    else
    {
      v1 = a1;
      v1412 = (uint8x8_t *)(a1 + 10648);
      v1413 = *(uint8x8_t *)(a1 + 10648);
      v1414 = v1397 - v1345 + 40;
      if (v1414 >= v1410 - 1)
        v1415 = v1410 - 1;
      else
        v1415 = v1397 - v1345 + 40;
      v1416 = v1397 - v1345 - v1415 + 47;
      if (v1416 < 0x78)
        goto LABEL_1049;
      if (v1414 >= v1410 - 1)
        v1414 = v1410 - 1;
      if (v1412 >= (uint8x8_t *)&v1402->i8[((v1397 - v1345 - v1414 + 47) >> 3) + 1]
        || (unint64_t)v1402 >= a1 + 10656)
      {
        v1418 = (v1416 >> 3) + 1;
        v1419 = *(_QWORD *)&v1413 + (v1418 & 0x3FFFFFF8);
        v1420 = (uint8x8_t *)((char *)v1402 + (v1418 & 0x3FFFFFF8));
        v1421 = vdupq_n_s32(v1403);
        v1422 = v1403 - 8 * (v1418 & 0x3FFFFFF8);
        v1423 = vaddq_s32(v1421, (int32x4_t)xmmword_208F3A6A0);
        v1424 = vaddq_s32(v1421, (int32x4_t)xmmword_208F3A6B0);
        v1425 = 0uLL;
        v1426 = (int32x4_t)v1400;
        v1427 = (int8x16_t)(unint64_t)v1399;
        v1428.i64[0] = 0x800000008;
        v1428.i64[1] = 0x800000008;
        v1429.i64[0] = 0x3F0000003FLL;
        v1429.i64[1] = 0x3F0000003FLL;
        v1430 = v1418 & 0x3FFFFFF8;
        v1431 = 0uLL;
        v1432 = 0uLL;
        v1433 = 0uLL;
        do
        {
          v1426 = vaddq_s32(v1426, v1428);
          v1434 = *v1402++;
          v1425 = vaddq_s32(v1425, v1428);
          v1435 = vmovl_u8(v1434);
          v1436 = vmovl_high_u16(v1435);
          v1437.i64[0] = v1436.u32[2];
          v1437.i64[1] = v1436.u32[3];
          v1438 = v1437;
          v1437.i64[0] = v1436.u32[0];
          v1437.i64[1] = v1436.u32[1];
          v1439 = v1437;
          v1440 = vmovl_u16(*(uint16x4_t *)v1435.i8);
          v1437.i64[0] = v1440.u32[2];
          v1437.i64[1] = v1440.u32[3];
          v1441 = v1437;
          v1437.i64[0] = v1440.u32[0];
          v1437.i64[1] = v1440.u32[1];
          v1442 = v1437;
          v1437.i64[0] = v1423.u32[2];
          v1437.i64[1] = v1423.u32[3];
          v1443 = v1437;
          v1437.i64[0] = v1423.u32[0];
          v1437.i64[1] = v1423.u32[1];
          v1444 = v1437;
          v1437.i64[0] = v1424.u32[2];
          v1437.i64[1] = v1424.u32[3];
          v1445 = v1437;
          v1437.i64[0] = v1424.u32[0];
          v1437.i64[1] = v1424.u32[1];
          v1433 = vorrq_s8((int8x16_t)vshlq_u64(v1438, v1443), v1433);
          v1432 = vorrq_s8((int8x16_t)vshlq_u64(v1439, v1444), v1432);
          v1431 = vorrq_s8((int8x16_t)vshlq_u64(v1441, v1445), v1431);
          v1427 = vorrq_s8((int8x16_t)vshlq_u64(v1442, v1437), v1427);
          *(_QWORD *)&v1413 += 8;
          v1424 = vaddq_s32(v1424, v1429);
          v1423 = vaddq_s32(v1423, v1429);
          v1430 -= 8;
        }
        while (v1430);
        *v1412 = v1413;
        v1446 = vorrq_s8(vorrq_s8(v1427, v1432), vorrq_s8(v1431, v1433));
        v1399 = vorr_s8(*(int8x8_t *)v1446.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1446, v1446, 8uLL));
        v1400 = vaddvq_s32(vaddq_s32(v1426, v1425));
        if ((v1418 & 0x3FFFFFF8) == v1418)
          goto LABEL_1052;
      }
      else
      {
LABEL_1049:
        v1419 = *(_QWORD *)(a1 + 10648);
        v1420 = v1402;
        v1422 = v1403;
      }
      v1447 = (uint8x8_t)(v1419 + 1);
      do
      {
        v1400 += 8;
        v1448 = v1420->u8[0];
        v1420 = (uint8x8_t *)((char *)v1420 + 1);
        *(_QWORD *)&v1399 |= (unint64_t)v1448 << v1422;
        *v1412 = v1447;
        v1422 -= 8;
        ++*(_QWORD *)&v1447;
      }
      while (v1422 >= v1410);
    }
  }
LABEL_1052:
  v1449 = v1401 << 56;
  v1450 = (int8x8_t)(*(_QWORD *)&v1399 - (v1401 << 56));
  if (*(_QWORD *)&v1399 >= (unint64_t)(v1401 << 56))
  {
    LODWORD(v1401) = *(_DWORD *)(v1 + 10668) - v1401;
    v1451 = 1;
  }
  else
  {
    v1451 = 0;
    v1450 = v1399;
  }
  v1452 = vp8_norm[v1401];
  v1453 = (int8x8_t)(*(_QWORD *)&v1450 << v1452);
  v1454 = v1400 - v1452;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1450 << v1452;
  *(_DWORD *)(v1 + 10664) = v1400 - v1452;
  v1455 = (_DWORD)v1401 << v1452;
  *(_DWORD *)(v1 + 10668) = (_DWORD)v1401 << v1452;
  *(_BYTE *)(v1 + 3983) = v1451;
  if (*(_QWORD *)&v1399 >= v1449)
  {
    v1456 = (((v1455 << 7) - 128) >> 8) + 1;
    if ((v1454 & 0x80000000) == 0)
    {
      v1457 = v1456 << 56;
      v1458 = (int8x8_t)(*(_QWORD *)&v1453 - (v1456 << 56));
      if (*(_QWORD *)&v1453 < (unint64_t)(v1456 << 56))
      {
LABEL_1058:
        v1459 = 0;
        v1458 = v1453;
        goto LABEL_1093;
      }
LABEL_1092:
      LODWORD(v1456) = *(_DWORD *)(v1 + 10668) - v1456;
      v1459 = 1;
LABEL_1093:
      v1506 = vp8_norm[v1456];
      v1507 = (int8x8_t)(*(_QWORD *)&v1458 << v1506);
      v1454 -= v1506;
      *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1458 << v1506;
      *(_DWORD *)(v1 + 10664) = v1454;
      v1455 = (_DWORD)v1456 << v1506;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v1456 << v1506;
      *(_BYTE *)(v1 + 3984) = v1459;
      if (*(_QWORD *)&v1453 < v1457)
      {
        v1453 = (int8x8_t)(*(_QWORD *)&v1458 << v1506);
        goto LABEL_1704;
      }
      v1508 = 0;
      v1509 = (uint8x8_t *)(v1 + 10648);
      v4403 = v1 + 10656;
      v1510.i64[0] = 0x800000008;
      v1510.i64[1] = 0x800000008;
      v1511.i64[0] = 0x3F0000003FLL;
      v1511.i64[1] = 0x3F0000003FLL;
      if ((v1454 & 0x80000000) != 0)
      {
LABEL_1096:
        v1512 = *(uint8x8_t **)(v1 + 10648);
        v1513 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1512;
        v1514 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v1514)
        {
          if (v1513 >= 9)
            v1515 = 9;
          else
            v1515 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1512;
          v1514(*(_QWORD *)(v1 + 10680), v1512, v4442, v1515);
          v1511.i64[0] = 0x3F0000003FLL;
          v1511.i64[1] = 0x3F0000003FLL;
          v1510.i64[0] = 0x800000008;
          v1510.i64[1] = 0x800000008;
          v1512 = (uint8x8_t *)v4442;
        }
        v1516 = 48 - v1454;
        v1517 = 56 - v1454 - 8 * v1513;
        if (v1517 < 0)
          v1518 = v1454;
        else
          v1518 = v1454 + 0x40000000;
        if (8 * v1513)
          v1519 = 1;
        else
          v1519 = v1517 <= -1;
        v1520 = v1517 & ~(v1517 >> 31);
        if (!v1519 || v1516 < v1520)
        {
          v1 = a1;
        }
        else
        {
          v1522 = *v1509;
          v1523 = v1520 - 1;
          if (v1520 - 1 >= (int)(40 - v1454))
            v1524 = 40 - v1454;
          else
            v1524 = v1520 - 1;
          v1525 = 47 - v1454 - v1524;
          v1 = a1;
          if (v1525 < 0x78)
            goto LABEL_1128;
          if (v1523 >= (int)(40 - v1454))
            v1523 = 40 - v1454;
          if (v1509 >= (uint8x8_t *)&v1512->i8[((47 - v1454 - v1523) >> 3) + 1] || (unint64_t)v1512 >= v4403)
          {
            v1527 = (v1525 >> 3) + 1;
            v1528 = *(_QWORD *)&v1522 + (v1527 & 0x3FFFFFF8);
            v1529 = (uint8x8_t *)((char *)v1512 + (v1527 & 0x3FFFFFF8));
            v1530 = v1516 - 8 * (v1527 & 0x3FFFFFF8);
            v1531 = vdupq_n_s32(v1516);
            v1532 = vaddq_s32(v1531, (int32x4_t)xmmword_208F3A6A0);
            v1533 = vaddq_s32(v1531, (int32x4_t)xmmword_208F3A6B0);
            v1534 = 0uLL;
            v1535 = (int32x4_t)v1518;
            v1536 = (int8x16_t)(unint64_t)v1507;
            v1537 = v1527 & 0x3FFFFFF8;
            v1538 = 0uLL;
            v1539 = 0uLL;
            v1540 = 0uLL;
            do
            {
              v1535 = vaddq_s32(v1535, v1510);
              v1541 = *v1512++;
              v1534 = vaddq_s32(v1534, v1510);
              v1542 = vmovl_u8(v1541);
              v1543 = vmovl_high_u16(v1542);
              v1544.i64[0] = v1543.u32[2];
              v1544.i64[1] = v1543.u32[3];
              v1545 = v1544;
              v1544.i64[0] = v1543.u32[0];
              v1544.i64[1] = v1543.u32[1];
              v1546 = v1544;
              v1547 = vmovl_u16(*(uint16x4_t *)v1542.i8);
              v1544.i64[0] = v1547.u32[2];
              v1544.i64[1] = v1547.u32[3];
              v1548 = v1544;
              v1544.i64[0] = v1547.u32[0];
              v1544.i64[1] = v1547.u32[1];
              v1549 = v1544;
              v1544.i64[0] = v1532.u32[2];
              v1544.i64[1] = v1532.u32[3];
              v1550 = v1544;
              v1544.i64[0] = v1532.u32[0];
              v1544.i64[1] = v1532.u32[1];
              v1551 = v1544;
              v1544.i64[0] = v1533.u32[2];
              v1544.i64[1] = v1533.u32[3];
              v1552 = v1544;
              v1544.i64[0] = v1533.u32[0];
              v1544.i64[1] = v1533.u32[1];
              v1540 = vorrq_s8((int8x16_t)vshlq_u64(v1545, v1550), v1540);
              v1539 = vorrq_s8((int8x16_t)vshlq_u64(v1546, v1551), v1539);
              v1538 = vorrq_s8((int8x16_t)vshlq_u64(v1548, v1552), v1538);
              v1536 = vorrq_s8((int8x16_t)vshlq_u64(v1549, v1544), v1536);
              *(_QWORD *)&v1522 += 8;
              v1533 = vaddq_s32(v1533, v1511);
              v1532 = vaddq_s32(v1532, v1511);
              v1537 -= 8;
            }
            while (v1537);
            *v1509 = v1522;
            v1553 = vorrq_s8(vorrq_s8(v1536, v1539), vorrq_s8(v1538, v1540));
            v1507 = vorr_s8(*(int8x8_t *)v1553.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1553, v1553, 8uLL));
            v1518 = vaddvq_s32(vaddq_s32(v1535, v1534));
            if ((v1527 & 0x3FFFFFF8) == v1527)
              goto LABEL_1131;
          }
          else
          {
LABEL_1128:
            v1528 = (uint64_t)*v1509;
            v1529 = v1512;
            v1530 = 48 - v1454;
          }
          v1554 = (uint8x8_t)(v1528 + 1);
          do
          {
            v1518 += 8;
            v1555 = v1529->u8[0];
            v1529 = (uint8x8_t *)((char *)v1529 + 1);
            *(_QWORD *)&v1507 |= (unint64_t)v1555 << v1530;
            *v1509 = v1554;
            v1530 -= 8;
            ++*(_QWORD *)&v1554;
          }
          while (v1530 >= v1520);
        }
LABEL_1131:
        v1454 = v1518;
        goto LABEL_1132;
      }
      while (1)
      {
LABEL_1132:
        v1556 = (((v1455 << 7) - 128) >> 8) + 1;
        v1557 = v1556 << 56;
        v1558 = v1507;
        v1559 = (int8x8_t)(*(_QWORD *)&v1507 - (v1556 << 56));
        if (*(_QWORD *)&v1507 >= (unint64_t)(v1556 << 56))
        {
          LODWORD(v1556) = *(_DWORD *)(v1 + 10668) - v1556;
          v1558 = v1559;
        }
        v1560 = vp8_norm[v1556];
        v1561 = (_DWORD)v1556 << v1560;
        v1562 = (int8x8_t)(*(_QWORD *)&v1558 << v1560);
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1558 << v1560;
        v1563 = v1454 - v1560;
        *(_DWORD *)(v1 + 10664) = v1454 - v1560;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v1556 << v1560;
        if (*(_QWORD *)&v1507 >= v1557)
          break;
LABEL_1392:
        if (++v1508 == 4)
        {
          v1917 = 0;
          v4404 = v1 + 10656;
          v1918.i64[0] = 0x800000008;
          v1918.i64[1] = 0x800000008;
          v1919.i64[0] = 0x3F0000003FLL;
          v1919.i64[1] = 0x3F0000003FLL;
          while (2)
          {
            v1920 = *(_DWORD *)(v1 + 10668);
            v1921 = *(_DWORD *)(v1 + 10664);
            v1922 = *(int8x8_t *)(v1 + 10656);
            if ((v1921 & 0x80000000) == 0)
              goto LABEL_1438;
            v1923 = *(uint8x8_t **)(v1 + 10648);
            v1924 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1923;
            v1925 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
            if (v1925)
            {
              if (v1924 >= 9)
                v1926 = 9;
              else
                v1926 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1923;
              v1925(*(_QWORD *)(v1 + 10680), v1923, v4442, v1926);
              v1919.i64[0] = 0x3F0000003FLL;
              v1919.i64[1] = 0x3F0000003FLL;
              v1918.i64[0] = 0x800000008;
              v1918.i64[1] = 0x800000008;
              v1923 = (uint8x8_t *)v4442;
            }
            v1927 = 48 - v1921;
            v1928 = 56 - v1921 - 8 * v1924;
            if (v1928 < 0)
              v1929 = v1921;
            else
              v1929 = v1921 + 0x40000000;
            if (8 * v1924)
              v1930 = 1;
            else
              v1930 = v1928 <= -1;
            v1931 = v1928 & ~(v1928 >> 31);
            if (!v1930 || v1927 < v1931)
            {
              v1 = a1;
            }
            else
            {
              v1933 = *v1509;
              v1934 = v1931 - 1;
              if (v1931 - 1 >= (int)(40 - v1921))
                v1935 = 40 - v1921;
              else
                v1935 = v1931 - 1;
              v1936 = 47 - v1921 - v1935;
              v1 = a1;
              if (v1936 < 0x78)
                goto LABEL_1434;
              if (v1934 >= (int)(40 - v1921))
                v1934 = 40 - v1921;
              if (v1509 < (uint8x8_t *)&v1923->i8[((47 - v1921 - v1934) >> 3) + 1] && (unint64_t)v1923 < v4404)
              {
LABEL_1434:
                v1939 = (uint64_t)*v1509;
                v1940 = v1923;
                v1941 = 48 - v1921;
                goto LABEL_1435;
              }
              v1938 = (v1936 >> 3) + 1;
              v1939 = *(_QWORD *)&v1933 + (v1938 & 0x3FFFFFF8);
              v1940 = (uint8x8_t *)((char *)v1923 + (v1938 & 0x3FFFFFF8));
              v1941 = v1927 - 8 * (v1938 & 0x3FFFFFF8);
              v1942 = vdupq_n_s32(v1927);
              v1943 = vaddq_s32(v1942, (int32x4_t)xmmword_208F3A6A0);
              v1944 = vaddq_s32(v1942, (int32x4_t)xmmword_208F3A6B0);
              v1945 = 0uLL;
              v1946 = (int32x4_t)v1929;
              v1947 = (int8x16_t)(unint64_t)v1922;
              v1948 = v1938 & 0x3FFFFFF8;
              v1949 = 0uLL;
              v1950 = 0uLL;
              v1951 = 0uLL;
              do
              {
                v1946 = vaddq_s32(v1946, v1918);
                v1952 = *v1923++;
                v1945 = vaddq_s32(v1945, v1918);
                v1953 = vmovl_u8(v1952);
                v1954 = vmovl_high_u16(v1953);
                v1955.i64[0] = v1954.u32[2];
                v1955.i64[1] = v1954.u32[3];
                v1956 = v1955;
                v1955.i64[0] = v1954.u32[0];
                v1955.i64[1] = v1954.u32[1];
                v1957 = v1955;
                v1958 = vmovl_u16(*(uint16x4_t *)v1953.i8);
                v1955.i64[0] = v1958.u32[2];
                v1955.i64[1] = v1958.u32[3];
                v1959 = v1955;
                v1955.i64[0] = v1958.u32[0];
                v1955.i64[1] = v1958.u32[1];
                v1960 = v1955;
                v1955.i64[0] = v1943.u32[2];
                v1955.i64[1] = v1943.u32[3];
                v1961 = v1955;
                v1955.i64[0] = v1943.u32[0];
                v1955.i64[1] = v1943.u32[1];
                v1962 = v1955;
                v1955.i64[0] = v1944.u32[2];
                v1955.i64[1] = v1944.u32[3];
                v1963 = v1955;
                v1955.i64[0] = v1944.u32[0];
                v1955.i64[1] = v1944.u32[1];
                v1951 = vorrq_s8((int8x16_t)vshlq_u64(v1956, v1961), v1951);
                v1950 = vorrq_s8((int8x16_t)vshlq_u64(v1957, v1962), v1950);
                v1949 = vorrq_s8((int8x16_t)vshlq_u64(v1959, v1963), v1949);
                v1947 = vorrq_s8((int8x16_t)vshlq_u64(v1960, v1955), v1947);
                *(_QWORD *)&v1933 += 8;
                v1944 = vaddq_s32(v1944, v1919);
                v1943 = vaddq_s32(v1943, v1919);
                v1948 -= 8;
              }
              while (v1948);
              *v1509 = v1933;
              v1964 = vorrq_s8(vorrq_s8(v1947, v1950), vorrq_s8(v1949, v1951));
              v1922 = vorr_s8(*(int8x8_t *)v1964.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1964, v1964, 8uLL));
              v1929 = vaddvq_s32(vaddq_s32(v1946, v1945));
              if ((v1938 & 0x3FFFFFF8) != v1938)
              {
LABEL_1435:
                v1965 = (uint8x8_t)(v1939 + 1);
                do
                {
                  v1929 += 8;
                  v1966 = v1940->u8[0];
                  v1940 = (uint8x8_t *)((char *)v1940 + 1);
                  *(_QWORD *)&v1922 |= (unint64_t)v1966 << v1941;
                  *v1509 = v1965;
                  v1941 -= 8;
                  ++*(_QWORD *)&v1965;
                }
                while (v1941 >= v1931);
              }
            }
            v1921 = v1929;
LABEL_1438:
            v1967 = (((v1920 << 7) - 128) >> 8) + 1;
            v1968 = v1967 << 56;
            v1969 = v1922;
            v1970 = (int8x8_t)(*(_QWORD *)&v1922 - (v1967 << 56));
            if (*(_QWORD *)&v1922 >= (unint64_t)(v1967 << 56))
            {
              LODWORD(v1967) = *(_DWORD *)(v1 + 10668) - v1967;
              v1969 = v1970;
            }
            v1971 = vp8_norm[v1967];
            v1972 = (_DWORD)v1967 << v1971;
            v1973 = (int8x8_t)(*(_QWORD *)&v1969 << v1971);
            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1969 << v1971;
            v1974 = v1921 - v1971;
            *(_DWORD *)(v1 + 10664) = v1921 - v1971;
            *(_DWORD *)(v1 + 10668) = (_DWORD)v1967 << v1971;
            if (*(_QWORD *)&v1922 < v1968)
              goto LABEL_1400;
            if ((v1974 & 0x80000000) != 0)
            {
              v1975 = *(uint8x8_t **)(v1 + 10648);
              v1976 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1975;
              v1977 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
              if (v1977)
              {
                if (v1976 >= 9)
                  v1978 = 9;
                else
                  v1978 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1975;
                v1977(*(_QWORD *)(v1 + 10680), v1975, v4442, v1978);
                v1919.i64[0] = 0x3F0000003FLL;
                v1919.i64[1] = 0x3F0000003FLL;
                v1918.i64[0] = 0x800000008;
                v1918.i64[1] = 0x800000008;
                v1975 = (uint8x8_t *)v4442;
              }
              v1979 = 48 - v1974;
              v1980 = 56 - 8 * v1976 - v1974;
              if (v1980 >= 0)
                v1974 += 0x40000000;
              if (8 * v1976)
                v1981 = 1;
              else
                v1981 = v1980 <= -1;
              v1982 = v1980 & ~(v1980 >> 31);
              if (!v1981 || v1979 < v1982)
              {
                v1 = a1;
              }
              else
              {
                v1984 = *v1509;
                v1985 = v1971 - v1921 + 40;
                if (v1985 >= v1982 - 1)
                  v1986 = v1982 - 1;
                else
                  v1986 = v1971 - v1921 + 40;
                v1987 = v1971 - v1921 - v1986 + 47;
                v1 = a1;
                if (v1987 >= 0x78)
                {
                  if (v1985 >= v1982 - 1)
                    v1985 = v1982 - 1;
                  if (v1509 >= (uint8x8_t *)&v1975->i8[((v1971 - v1921 - v1985 + 47) >> 3) + 1]
                    || (unint64_t)v1975 >= v4404)
                  {
                    v1992 = (v1987 >> 3) + 1;
                    v1988 = *(_QWORD *)&v1984 + (v1992 & 0x3FFFFFF8);
                    v1989 = (uint8x8_t *)((char *)v1975 + (v1992 & 0x3FFFFFF8));
                    v1990 = v1979 - 8 * (v1992 & 0x3FFFFFF8);
                    v1993 = vdupq_n_s32(v1979);
                    v1994 = vaddq_s32(v1993, (int32x4_t)xmmword_208F3A6A0);
                    v1995 = vaddq_s32(v1993, (int32x4_t)xmmword_208F3A6B0);
                    v1996 = 0uLL;
                    v1997 = (int32x4_t)v1974;
                    v1998 = (int8x16_t)(unint64_t)v1973;
                    v1999 = v1992 & 0x3FFFFFF8;
                    v2000 = 0uLL;
                    v2001 = 0uLL;
                    v2002 = 0uLL;
                    do
                    {
                      v1997 = vaddq_s32(v1997, v1918);
                      v2003 = *v1975++;
                      v1996 = vaddq_s32(v1996, v1918);
                      v2004 = vmovl_u8(v2003);
                      v2005 = vmovl_high_u16(v2004);
                      v2006.i64[0] = v2005.u32[2];
                      v2006.i64[1] = v2005.u32[3];
                      v2007 = v2006;
                      v2006.i64[0] = v2005.u32[0];
                      v2006.i64[1] = v2005.u32[1];
                      v2008 = v2006;
                      v2009 = vmovl_u16(*(uint16x4_t *)v2004.i8);
                      v2006.i64[0] = v2009.u32[2];
                      v2006.i64[1] = v2009.u32[3];
                      v2010 = v2006;
                      v2006.i64[0] = v2009.u32[0];
                      v2006.i64[1] = v2009.u32[1];
                      v2011 = v2006;
                      v2006.i64[0] = v1994.u32[2];
                      v2006.i64[1] = v1994.u32[3];
                      v2012 = v2006;
                      v2006.i64[0] = v1994.u32[0];
                      v2006.i64[1] = v1994.u32[1];
                      v2013 = v2006;
                      v2006.i64[0] = v1995.u32[2];
                      v2006.i64[1] = v1995.u32[3];
                      v2014 = v2006;
                      v2006.i64[0] = v1995.u32[0];
                      v2006.i64[1] = v1995.u32[1];
                      v2002 = vorrq_s8((int8x16_t)vshlq_u64(v2007, v2012), v2002);
                      v2001 = vorrq_s8((int8x16_t)vshlq_u64(v2008, v2013), v2001);
                      v2000 = vorrq_s8((int8x16_t)vshlq_u64(v2010, v2014), v2000);
                      v1998 = vorrq_s8((int8x16_t)vshlq_u64(v2011, v2006), v1998);
                      *(_QWORD *)&v1984 += 8;
                      v1995 = vaddq_s32(v1995, v1919);
                      v1994 = vaddq_s32(v1994, v1919);
                      v1999 -= 8;
                    }
                    while (v1999);
                    *v1509 = v1984;
                    v2015 = vorrq_s8(vorrq_s8(v1998, v2001), vorrq_s8(v2000, v2002));
                    v1973 = vorr_s8(*(int8x8_t *)v2015.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2015, v2015, 8uLL));
                    v1974 = vaddvq_s32(vaddq_s32(v1997, v1996));
                    if ((v1992 & 0x3FFFFFF8) == v1992)
                      goto LABEL_1475;
                  }
                  else
                  {
                    v1988 = (uint64_t)*v1509;
                    v1989 = v1975;
                    v1990 = v1979;
                  }
                }
                else
                {
                  v1988 = (uint64_t)*v1509;
                  v1989 = v1975;
                  v1990 = v1979;
                }
                v2016 = (uint8x8_t)(v1988 + 1);
                do
                {
                  v1974 += 8;
                  v2017 = v1989->u8[0];
                  v1989 = (uint8x8_t *)((char *)v1989 + 1);
                  *(_QWORD *)&v1973 |= (unint64_t)v2017 << v1990;
                  *v1509 = v2016;
                  v1990 -= 8;
                  ++*(_QWORD *)&v2016;
                }
                while (v1990 >= v1982);
              }
            }
LABEL_1475:
            v2018 = (((v1972 << 7) - 128) >> 8) + 1;
            v2019 = (int8x8_t)(*(_QWORD *)&v1973 - (v2018 << 56));
            if (*(_QWORD *)&v1973 >= (unint64_t)(v2018 << 56))
            {
              LODWORD(v2018) = *(_DWORD *)(v1 + 10668) - v2018;
              v4432 = 32;
              v1973 = v2019;
            }
            else
            {
              v4432 = 0;
            }
            v2020 = vp8_norm[v2018];
            v2021 = (_DWORD)v2018 << v2020;
            v2022 = (int8x8_t)(*(_QWORD *)&v1973 << v2020);
            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1973 << v2020;
            v2023 = v1974 - v2020;
            *(_DWORD *)(v1 + 10664) = v1974 - v2020;
            *(_DWORD *)(v1 + 10668) = (_DWORD)v2018 << v2020;
            if (((v1974 - v2020) & 0x80000000) != 0)
            {
              v2024 = *(uint8x8_t **)(v1 + 10648);
              v2025 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2024;
              v2026 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
              if (v2026)
              {
                if (v2025 >= 9)
                  v2027 = 9;
                else
                  v2027 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2024;
                v2026(*(_QWORD *)(v1 + 10680), v2024, v4442, v2027);
                v1919.i64[0] = 0x3F0000003FLL;
                v1919.i64[1] = 0x3F0000003FLL;
                v1918.i64[0] = 0x800000008;
                v1918.i64[1] = 0x800000008;
                v2024 = (uint8x8_t *)v4442;
              }
              v2028 = 48 - v2023;
              v2029 = 56 - 8 * v2025 - v2023;
              if (v2029 >= 0)
                v2023 += 0x40000000;
              if (8 * v2025)
                v2030 = 1;
              else
                v2030 = v2029 <= -1;
              v2031 = v2029 & ~(v2029 >> 31);
              if (!v2030 || v2028 < v2031)
              {
                v1 = a1;
              }
              else
              {
                v2033 = *v1509;
                v2034 = v2020 - v1974 + 40;
                if (v2034 >= v2031 - 1)
                  v2035 = v2031 - 1;
                else
                  v2035 = v2020 - v1974 + 40;
                v2036 = v2020 - v1974 - v2035 + 47;
                v1 = a1;
                if (v2036 < 0x78)
                  goto LABEL_1510;
                if (v2034 >= v2031 - 1)
                  v2034 = v2031 - 1;
                if (v1509 >= (uint8x8_t *)&v2024->i8[((v2020 - v1974 - v2034 + 47) >> 3) + 1]
                  || (unint64_t)v2024 >= v4404)
                {
                  v2038 = (v2036 >> 3) + 1;
                  v2039 = *(_QWORD *)&v2033 + (v2038 & 0x3FFFFFF8);
                  v2040 = (uint8x8_t *)((char *)v2024 + (v2038 & 0x3FFFFFF8));
                  v2041 = v2028 - 8 * (v2038 & 0x3FFFFFF8);
                  v2042 = vdupq_n_s32(v2028);
                  v2043 = vaddq_s32(v2042, (int32x4_t)xmmword_208F3A6A0);
                  v2044 = vaddq_s32(v2042, (int32x4_t)xmmword_208F3A6B0);
                  v2045 = 0uLL;
                  v2046 = (int32x4_t)v2023;
                  v2047 = (int8x16_t)(unint64_t)v2022;
                  v2048 = v2038 & 0x3FFFFFF8;
                  v2049 = 0uLL;
                  v2050 = 0uLL;
                  v2051 = 0uLL;
                  do
                  {
                    v2046 = vaddq_s32(v2046, v1918);
                    v2052 = *v2024++;
                    v2045 = vaddq_s32(v2045, v1918);
                    v2053 = vmovl_u8(v2052);
                    v2054 = vmovl_high_u16(v2053);
                    v2055.i64[0] = v2054.u32[2];
                    v2055.i64[1] = v2054.u32[3];
                    v2056 = v2055;
                    v2055.i64[0] = v2054.u32[0];
                    v2055.i64[1] = v2054.u32[1];
                    v2057 = v2055;
                    v2058 = vmovl_u16(*(uint16x4_t *)v2053.i8);
                    v2055.i64[0] = v2058.u32[2];
                    v2055.i64[1] = v2058.u32[3];
                    v2059 = v2055;
                    v2055.i64[0] = v2058.u32[0];
                    v2055.i64[1] = v2058.u32[1];
                    v2060 = v2055;
                    v2055.i64[0] = v2043.u32[2];
                    v2055.i64[1] = v2043.u32[3];
                    v2061 = v2055;
                    v2055.i64[0] = v2043.u32[0];
                    v2055.i64[1] = v2043.u32[1];
                    v2062 = v2055;
                    v2055.i64[0] = v2044.u32[2];
                    v2055.i64[1] = v2044.u32[3];
                    v2063 = v2055;
                    v2055.i64[0] = v2044.u32[0];
                    v2055.i64[1] = v2044.u32[1];
                    v2051 = vorrq_s8((int8x16_t)vshlq_u64(v2056, v2061), v2051);
                    v2050 = vorrq_s8((int8x16_t)vshlq_u64(v2057, v2062), v2050);
                    v2049 = vorrq_s8((int8x16_t)vshlq_u64(v2059, v2063), v2049);
                    v2047 = vorrq_s8((int8x16_t)vshlq_u64(v2060, v2055), v2047);
                    *(_QWORD *)&v2033 += 8;
                    v2044 = vaddq_s32(v2044, v1919);
                    v2043 = vaddq_s32(v2043, v1919);
                    v2048 -= 8;
                  }
                  while (v2048);
                  *v1509 = v2033;
                  v2064 = vorrq_s8(vorrq_s8(v2047, v2050), vorrq_s8(v2049, v2051));
                  v2022 = vorr_s8(*(int8x8_t *)v2064.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2064, v2064, 8uLL));
                  v2023 = vaddvq_s32(vaddq_s32(v2046, v2045));
                  if ((v2038 & 0x3FFFFFF8) == v2038)
                    goto LABEL_1513;
                }
                else
                {
LABEL_1510:
                  v2039 = (uint64_t)*v1509;
                  v2040 = v2024;
                  v2041 = v2028;
                }
                v2065 = (uint8x8_t)(v2039 + 1);
                do
                {
                  v2023 += 8;
                  v2066 = v2040->u8[0];
                  v2040 = (uint8x8_t *)((char *)v2040 + 1);
                  *(_QWORD *)&v2022 |= (unint64_t)v2066 << v2041;
                  *v1509 = v2065;
                  v2041 -= 8;
                  ++*(_QWORD *)&v2065;
                }
                while (v2041 >= v2031);
              }
            }
LABEL_1513:
            v2067 = (((v2021 << 7) - 128) >> 8) + 1;
            v2068 = (int8x8_t)(*(_QWORD *)&v2022 - (v2067 << 56));
            if (*(_QWORD *)&v2022 >= (unint64_t)(v2067 << 56))
            {
              LODWORD(v2067) = *(_DWORD *)(v1 + 10668) - v2067;
              v4424 = 16;
              v2022 = v2068;
            }
            else
            {
              v4424 = 0;
            }
            v2069 = vp8_norm[v2067];
            v2070 = (_DWORD)v2067 << v2069;
            v2071 = (int8x8_t)(*(_QWORD *)&v2022 << v2069);
            *(int8x8_t *)(v1 + 10656) = v2071;
            v2072 = v2023 - v2069;
            *(_DWORD *)(v1 + 10664) = v2023 - v2069;
            *(_DWORD *)(v1 + 10668) = (_DWORD)v2067 << v2069;
            if (((v2023 - v2069) & 0x80000000) != 0)
            {
              v2073 = *(uint8x8_t **)(v1 + 10648);
              v2074 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2073;
              v2075 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
              if (v2075)
              {
                if (v2074 >= 9)
                  v2076 = 9;
                else
                  v2076 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2073;
                v2075(*(_QWORD *)(v1 + 10680), v2073, v4442, v2076);
                v1919.i64[0] = 0x3F0000003FLL;
                v1919.i64[1] = 0x3F0000003FLL;
                v1918.i64[0] = 0x800000008;
                v1918.i64[1] = 0x800000008;
                v2073 = (uint8x8_t *)v4442;
              }
              v2077 = 48 - v2072;
              v2078 = 56 - 8 * v2074 - v2072;
              if (v2078 >= 0)
                v2072 += 0x40000000;
              if (8 * v2074)
                v2079 = 1;
              else
                v2079 = v2078 <= -1;
              v2080 = v2078 & ~(v2078 >> 31);
              if (!v2079 || v2077 < v2080)
              {
                v1 = a1;
              }
              else
              {
                v2082 = *v1509;
                v2083 = v2069 - v2023 + 40;
                if (v2083 >= v2080 - 1)
                  v2084 = v2080 - 1;
                else
                  v2084 = v2069 - v2023 + 40;
                v2085 = v2069 - v2023 - v2084 + 47;
                v1 = a1;
                if (v2085 < 0x78)
                  goto LABEL_1548;
                if (v2083 >= v2080 - 1)
                  v2083 = v2080 - 1;
                if (v1509 >= (uint8x8_t *)&v2073->i8[((v2069 - v2023 - v2083 + 47) >> 3) + 1]
                  || (unint64_t)v2073 >= v4404)
                {
                  v2087 = (v2085 >> 3) + 1;
                  v2088 = *(_QWORD *)&v2082 + (v2087 & 0x3FFFFFF8);
                  v2089 = (uint8x8_t *)((char *)v2073 + (v2087 & 0x3FFFFFF8));
                  v2090 = v2077 - 8 * (v2087 & 0x3FFFFFF8);
                  v2091 = vdupq_n_s32(v2077);
                  v2092 = vaddq_s32(v2091, (int32x4_t)xmmword_208F3A6A0);
                  v2093 = vaddq_s32(v2091, (int32x4_t)xmmword_208F3A6B0);
                  v2094 = 0uLL;
                  v2095 = (int32x4_t)v2072;
                  v2096 = (int8x16_t)(unint64_t)v2071;
                  v2097 = v2087 & 0x3FFFFFF8;
                  v2098 = 0uLL;
                  v2099 = 0uLL;
                  v2100 = 0uLL;
                  do
                  {
                    v2095 = vaddq_s32(v2095, v1918);
                    v2101 = *v2073++;
                    v2094 = vaddq_s32(v2094, v1918);
                    v2102 = vmovl_u8(v2101);
                    v2103 = vmovl_high_u16(v2102);
                    v2104.i64[0] = v2103.u32[2];
                    v2104.i64[1] = v2103.u32[3];
                    v2105 = v2104;
                    v2104.i64[0] = v2103.u32[0];
                    v2104.i64[1] = v2103.u32[1];
                    v2106 = v2104;
                    v2107 = vmovl_u16(*(uint16x4_t *)v2102.i8);
                    v2104.i64[0] = v2107.u32[2];
                    v2104.i64[1] = v2107.u32[3];
                    v2108 = v2104;
                    v2104.i64[0] = v2107.u32[0];
                    v2104.i64[1] = v2107.u32[1];
                    v2109 = v2104;
                    v2104.i64[0] = v2092.u32[2];
                    v2104.i64[1] = v2092.u32[3];
                    v2110 = v2104;
                    v2104.i64[0] = v2092.u32[0];
                    v2104.i64[1] = v2092.u32[1];
                    v2111 = v2104;
                    v2104.i64[0] = v2093.u32[2];
                    v2104.i64[1] = v2093.u32[3];
                    v2112 = v2104;
                    v2104.i64[0] = v2093.u32[0];
                    v2104.i64[1] = v2093.u32[1];
                    v2100 = vorrq_s8((int8x16_t)vshlq_u64(v2105, v2110), v2100);
                    v2099 = vorrq_s8((int8x16_t)vshlq_u64(v2106, v2111), v2099);
                    v2098 = vorrq_s8((int8x16_t)vshlq_u64(v2108, v2112), v2098);
                    v2096 = vorrq_s8((int8x16_t)vshlq_u64(v2109, v2104), v2096);
                    *(_QWORD *)&v2082 += 8;
                    v2093 = vaddq_s32(v2093, v1919);
                    v2092 = vaddq_s32(v2092, v1919);
                    v2097 -= 8;
                  }
                  while (v2097);
                  *v1509 = v2082;
                  v2113 = vorrq_s8(vorrq_s8(v2096, v2099), vorrq_s8(v2098, v2100));
                  v2071 = vorr_s8(*(int8x8_t *)v2113.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2113, v2113, 8uLL));
                  v2072 = vaddvq_s32(vaddq_s32(v2095, v2094));
                  if ((v2087 & 0x3FFFFFF8) == v2087)
                    goto LABEL_1551;
                }
                else
                {
LABEL_1548:
                  v2088 = (uint64_t)*v1509;
                  v2089 = v2073;
                  v2090 = v2077;
                }
                v2114 = (uint8x8_t)(v2088 + 1);
                do
                {
                  v2072 += 8;
                  v2115 = v2089->u8[0];
                  v2089 = (uint8x8_t *)((char *)v2089 + 1);
                  *(_QWORD *)&v2071 |= (unint64_t)v2115 << v2090;
                  *v1509 = v2114;
                  v2090 -= 8;
                  ++*(_QWORD *)&v2114;
                }
                while (v2090 >= v2080);
              }
            }
LABEL_1551:
            v2116 = (((v2070 << 7) - 128) >> 8) + 1;
            v2117 = (int8x8_t)(*(_QWORD *)&v2071 - (v2116 << 56));
            if (*(_QWORD *)&v2071 >= (unint64_t)(v2116 << 56))
            {
              LODWORD(v2116) = *(_DWORD *)(v1 + 10668) - v2116;
              v2118 = 8;
              v2071 = v2117;
            }
            else
            {
              v2118 = 0;
            }
            v2119 = vp8_norm[v2116];
            v2120 = (_DWORD)v2116 << v2119;
            v2121 = (int8x8_t)(*(_QWORD *)&v2071 << v2119);
            *(int8x8_t *)(v1 + 10656) = v2121;
            v2122 = v2072 - v2119;
            *(_DWORD *)(v1 + 10664) = v2072 - v2119;
            *(_DWORD *)(v1 + 10668) = (_DWORD)v2116 << v2119;
            if (((v2072 - v2119) & 0x80000000) != 0)
            {
              v2123 = v2118;
              v2124 = *(uint8x8_t **)(v1 + 10648);
              v2125 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2124;
              v2126 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
              if (v2126)
              {
                if (v2125 >= 9)
                  v2127 = 9;
                else
                  v2127 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2124;
                v2126(*(_QWORD *)(v1 + 10680), v2124, v4442, v2127);
                v1919.i64[0] = 0x3F0000003FLL;
                v1919.i64[1] = 0x3F0000003FLL;
                v1918.i64[0] = 0x800000008;
                v1918.i64[1] = 0x800000008;
                v2124 = (uint8x8_t *)v4442;
              }
              v2128 = 48 - v2122;
              v2129 = 56 - 8 * v2125 - v2122;
              if (v2129 >= 0)
                v2122 += 0x40000000;
              if (8 * v2125)
                v2130 = 1;
              else
                v2130 = v2129 <= -1;
              v2131 = v2129 & ~(v2129 >> 31);
              if (!v2130 || v2128 < v2131)
              {
                v1 = a1;
                v2118 = v2123;
              }
              else
              {
                v2133 = *v1509;
                v2134 = v2119 - v2072 + 40;
                if (v2134 >= v2131 - 1)
                  v2135 = v2131 - 1;
                else
                  v2135 = v2119 - v2072 + 40;
                v2136 = v2119 - v2072 - v2135 + 47;
                v1 = a1;
                v2118 = v2123;
                if (v2136 < 0x78)
                  goto LABEL_1586;
                if (v2134 >= v2131 - 1)
                  v2134 = v2131 - 1;
                if (v1509 >= (uint8x8_t *)&v2124->i8[((v2119 - v2072 - v2134 + 47) >> 3) + 1]
                  || (unint64_t)v2124 >= v4404)
                {
                  v2138 = (v2136 >> 3) + 1;
                  v2139 = *(_QWORD *)&v2133 + (v2138 & 0x3FFFFFF8);
                  v2140 = (uint8x8_t *)((char *)v2124 + (v2138 & 0x3FFFFFF8));
                  v2141 = v2128 - 8 * (v2138 & 0x3FFFFFF8);
                  v2142 = vdupq_n_s32(v2128);
                  v2143 = vaddq_s32(v2142, (int32x4_t)xmmword_208F3A6A0);
                  v2144 = vaddq_s32(v2142, (int32x4_t)xmmword_208F3A6B0);
                  v2145 = 0uLL;
                  v2146 = (int32x4_t)v2122;
                  v2147 = (int8x16_t)(unint64_t)v2121;
                  v2148 = v2138 & 0x3FFFFFF8;
                  v2149 = 0uLL;
                  v2150 = 0uLL;
                  v2151 = 0uLL;
                  do
                  {
                    v2146 = vaddq_s32(v2146, v1918);
                    v2152 = *v2124++;
                    v2145 = vaddq_s32(v2145, v1918);
                    v2153 = vmovl_u8(v2152);
                    v2154 = vmovl_high_u16(v2153);
                    v2155.i64[0] = v2154.u32[2];
                    v2155.i64[1] = v2154.u32[3];
                    v2156 = v2155;
                    v2155.i64[0] = v2154.u32[0];
                    v2155.i64[1] = v2154.u32[1];
                    v2157 = v2155;
                    v2158 = vmovl_u16(*(uint16x4_t *)v2153.i8);
                    v2155.i64[0] = v2158.u32[2];
                    v2155.i64[1] = v2158.u32[3];
                    v2159 = v2155;
                    v2155.i64[0] = v2158.u32[0];
                    v2155.i64[1] = v2158.u32[1];
                    v2160 = v2155;
                    v2155.i64[0] = v2143.u32[2];
                    v2155.i64[1] = v2143.u32[3];
                    v2161 = v2155;
                    v2155.i64[0] = v2143.u32[0];
                    v2155.i64[1] = v2143.u32[1];
                    v2162 = v2155;
                    v2155.i64[0] = v2144.u32[2];
                    v2155.i64[1] = v2144.u32[3];
                    v2163 = v2155;
                    v2155.i64[0] = v2144.u32[0];
                    v2155.i64[1] = v2144.u32[1];
                    v2151 = vorrq_s8((int8x16_t)vshlq_u64(v2156, v2161), v2151);
                    v2150 = vorrq_s8((int8x16_t)vshlq_u64(v2157, v2162), v2150);
                    v2149 = vorrq_s8((int8x16_t)vshlq_u64(v2159, v2163), v2149);
                    v2147 = vorrq_s8((int8x16_t)vshlq_u64(v2160, v2155), v2147);
                    *(_QWORD *)&v2133 += 8;
                    v2144 = vaddq_s32(v2144, v1919);
                    v2143 = vaddq_s32(v2143, v1919);
                    v2148 -= 8;
                  }
                  while (v2148);
                  *v1509 = v2133;
                  v2164 = vorrq_s8(vorrq_s8(v2147, v2150), vorrq_s8(v2149, v2151));
                  v2121 = vorr_s8(*(int8x8_t *)v2164.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2164, v2164, 8uLL));
                  v2122 = vaddvq_s32(vaddq_s32(v2146, v2145));
                  if ((v2138 & 0x3FFFFFF8) == v2138)
                    goto LABEL_1589;
                }
                else
                {
LABEL_1586:
                  v2139 = (uint64_t)*v1509;
                  v2140 = v2124;
                  v2141 = v2128;
                }
                v2165 = (uint8x8_t)(v2139 + 1);
                do
                {
                  v2122 += 8;
                  v2166 = v2140->u8[0];
                  v2140 = (uint8x8_t *)((char *)v2140 + 1);
                  *(_QWORD *)&v2121 |= (unint64_t)v2166 << v2141;
                  *v1509 = v2165;
                  v2141 -= 8;
                  ++*(_QWORD *)&v2165;
                }
                while (v2141 >= v2131);
              }
            }
LABEL_1589:
            v2167 = (((v2120 << 7) - 128) >> 8) + 1;
            v2168 = (int8x8_t)(*(_QWORD *)&v2121 - (v2167 << 56));
            if (*(_QWORD *)&v2121 >= (unint64_t)(v2167 << 56))
            {
              LODWORD(v2167) = *(_DWORD *)(v1 + 10668) - v2167;
              v2169 = 4;
              v2121 = v2168;
            }
            else
            {
              v2169 = 0;
            }
            v2170 = vp8_norm[v2167];
            v2171 = (_DWORD)v2167 << v2170;
            v2172 = (int8x8_t)(*(_QWORD *)&v2121 << v2170);
            *(int8x8_t *)(v1 + 10656) = v2172;
            v2173 = v2122 - v2170;
            *(_DWORD *)(v1 + 10664) = v2122 - v2170;
            *(_DWORD *)(v1 + 10668) = (_DWORD)v2167 << v2170;
            if (((v2122 - v2170) & 0x80000000) != 0)
            {
              v2174 = v2169;
              v2175 = v2118;
              v2176 = *(uint8x8_t **)(v1 + 10648);
              v2177 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2176;
              v2178 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
              if (v2178)
              {
                if (v2177 >= 9)
                  v2179 = 9;
                else
                  v2179 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2176;
                v2178(*(_QWORD *)(v1 + 10680), v2176, v4442, v2179);
                v1919.i64[0] = 0x3F0000003FLL;
                v1919.i64[1] = 0x3F0000003FLL;
                v1918.i64[0] = 0x800000008;
                v1918.i64[1] = 0x800000008;
                v2176 = (uint8x8_t *)v4442;
              }
              v2180 = 48 - v2173;
              v2181 = 56 - 8 * v2177 - v2173;
              if (v2181 >= 0)
                v2173 += 0x40000000;
              if (8 * v2177)
                v2182 = 1;
              else
                v2182 = v2181 <= -1;
              v2183 = v2181 & ~(v2181 >> 31);
              if (!v2182 || v2180 < v2183)
              {
                v1 = a1;
                v2118 = v2175;
                v2169 = v2174;
              }
              else
              {
                v2185 = *v1509;
                v2186 = v2170 - v2122 + 40;
                if (v2186 >= v2183 - 1)
                  v2187 = v2183 - 1;
                else
                  v2187 = v2170 - v2122 + 40;
                v2188 = v2170 - v2122 - v2187 + 47;
                v1 = a1;
                v2118 = v2175;
                v2169 = v2174;
                if (v2188 < 0x78)
                  goto LABEL_1624;
                if (v2186 >= v2183 - 1)
                  v2186 = v2183 - 1;
                if (v1509 >= (uint8x8_t *)&v2176->i8[((v2170 - v2122 - v2186 + 47) >> 3) + 1]
                  || (unint64_t)v2176 >= v4404)
                {
                  v2190 = (v2188 >> 3) + 1;
                  v2191 = *(_QWORD *)&v2185 + (v2190 & 0x3FFFFFF8);
                  v2192 = (uint8x8_t *)((char *)v2176 + (v2190 & 0x3FFFFFF8));
                  v2193 = v2180 - 8 * (v2190 & 0x3FFFFFF8);
                  v2194 = vdupq_n_s32(v2180);
                  v2195 = vaddq_s32(v2194, (int32x4_t)xmmword_208F3A6A0);
                  v2196 = vaddq_s32(v2194, (int32x4_t)xmmword_208F3A6B0);
                  v2197 = 0uLL;
                  v2198 = (int32x4_t)v2173;
                  v2199 = (int8x16_t)(unint64_t)v2172;
                  v2200 = v2190 & 0x3FFFFFF8;
                  v2201 = 0uLL;
                  v2202 = 0uLL;
                  v2203 = 0uLL;
                  do
                  {
                    v2198 = vaddq_s32(v2198, v1918);
                    v2204 = *v2176++;
                    v2197 = vaddq_s32(v2197, v1918);
                    v2205 = vmovl_u8(v2204);
                    v2206 = vmovl_high_u16(v2205);
                    v2207.i64[0] = v2206.u32[2];
                    v2207.i64[1] = v2206.u32[3];
                    v2208 = v2207;
                    v2207.i64[0] = v2206.u32[0];
                    v2207.i64[1] = v2206.u32[1];
                    v2209 = v2207;
                    v2210 = vmovl_u16(*(uint16x4_t *)v2205.i8);
                    v2207.i64[0] = v2210.u32[2];
                    v2207.i64[1] = v2210.u32[3];
                    v2211 = v2207;
                    v2207.i64[0] = v2210.u32[0];
                    v2207.i64[1] = v2210.u32[1];
                    v2212 = v2207;
                    v2207.i64[0] = v2195.u32[2];
                    v2207.i64[1] = v2195.u32[3];
                    v2213 = v2207;
                    v2207.i64[0] = v2195.u32[0];
                    v2207.i64[1] = v2195.u32[1];
                    v2214 = v2207;
                    v2207.i64[0] = v2196.u32[2];
                    v2207.i64[1] = v2196.u32[3];
                    v2215 = v2207;
                    v2207.i64[0] = v2196.u32[0];
                    v2207.i64[1] = v2196.u32[1];
                    v2203 = vorrq_s8((int8x16_t)vshlq_u64(v2208, v2213), v2203);
                    v2202 = vorrq_s8((int8x16_t)vshlq_u64(v2209, v2214), v2202);
                    v2201 = vorrq_s8((int8x16_t)vshlq_u64(v2211, v2215), v2201);
                    v2199 = vorrq_s8((int8x16_t)vshlq_u64(v2212, v2207), v2199);
                    *(_QWORD *)&v2185 += 8;
                    v2196 = vaddq_s32(v2196, v1919);
                    v2195 = vaddq_s32(v2195, v1919);
                    v2200 -= 8;
                  }
                  while (v2200);
                  *v1509 = v2185;
                  v2216 = vorrq_s8(vorrq_s8(v2199, v2202), vorrq_s8(v2201, v2203));
                  v2172 = vorr_s8(*(int8x8_t *)v2216.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2216, v2216, 8uLL));
                  v2173 = vaddvq_s32(vaddq_s32(v2198, v2197));
                  if ((v2190 & 0x3FFFFFF8) == v2190)
                    goto LABEL_1627;
                }
                else
                {
LABEL_1624:
                  v2191 = (uint64_t)*v1509;
                  v2192 = v2176;
                  v2193 = v2180;
                }
                v2217 = (uint8x8_t)(v2191 + 1);
                do
                {
                  v2173 += 8;
                  v2218 = v2192->u8[0];
                  v2192 = (uint8x8_t *)((char *)v2192 + 1);
                  *(_QWORD *)&v2172 |= (unint64_t)v2218 << v2193;
                  *v1509 = v2217;
                  v2193 -= 8;
                  ++*(_QWORD *)&v2217;
                }
                while (v2193 >= v2183);
              }
            }
LABEL_1627:
            v2219 = (((v2171 << 7) - 128) >> 8) + 1;
            v2220 = (int8x8_t)(*(_QWORD *)&v2172 - (v2219 << 56));
            v4416 = v1917;
            if (*(_QWORD *)&v2172 >= (unint64_t)(v2219 << 56))
            {
              LODWORD(v2219) = *(_DWORD *)(v1 + 10668) - v2219;
              v2221 = 2;
              v2172 = v2220;
            }
            else
            {
              v2221 = 0;
            }
            v2222 = vp8_norm[v2219];
            v2223 = (_DWORD)v2219 << v2222;
            v2224 = (int8x8_t)(*(_QWORD *)&v2172 << v2222);
            *(int8x8_t *)(v1 + 10656) = v2224;
            v2225 = v2173 - v2222;
            *(_DWORD *)(v1 + 10664) = v2173 - v2222;
            *(_DWORD *)(v1 + 10668) = (_DWORD)v2219 << v2222;
            if (((v2173 - v2222) & 0x80000000) != 0)
            {
              v4399 = v2221;
              v2228 = *(uint8x8_t **)(v1 + 10648);
              v2229 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2228;
              v2230 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
              if (v2230)
              {
                v2231 = v2169;
                if (v2229 >= 9)
                  v2232 = 9;
                else
                  v2232 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2228;
                v2233 = v2118;
                v2230(*(_QWORD *)(v1 + 10680), v2228, v4442, v2232);
                v2169 = v2231;
                v2118 = v2233;
                v1919.i64[0] = 0x3F0000003FLL;
                v1919.i64[1] = 0x3F0000003FLL;
                v1918.i64[0] = 0x800000008;
                v1918.i64[1] = 0x800000008;
                v2228 = (uint8x8_t *)v4442;
              }
              v2234 = 48 - v2225;
              v2235 = 56 - 8 * v2229 - v2225;
              if (v2235 >= 0)
                v2225 += 0x40000000;
              if (8 * v2229)
                v2236 = 1;
              else
                v2236 = v2235 <= -1;
              v2237 = v2235 & ~(v2235 >> 31);
              if (!v2236 || v2234 < v2237)
              {
                v1 = a1;
                v2226 = v4432;
                v2227 = v4424;
                v2221 = v4399;
              }
              else
              {
                v2239 = *v1509;
                v2240 = v2222 - v2173 + 40;
                if (v2240 >= v2237 - 1)
                  v2241 = v2237 - 1;
                else
                  v2241 = v2222 - v2173 + 40;
                v2242 = v2222 - v2173 - v2241 + 47;
                v1 = a1;
                v2226 = v4432;
                v2227 = v4424;
                v2221 = v4399;
                if (v2242 >= 0x78)
                {
                  if (v2240 >= v2237 - 1)
                    v2240 = v2237 - 1;
                  if (v1509 >= (uint8x8_t *)&v2228->i8[((v2222 - v2173 - v2240 + 47) >> 3) + 1]
                    || (unint64_t)v2228 >= v4404)
                  {
                    v2247 = (v2242 >> 3) + 1;
                    v2243 = *(_QWORD *)&v2239 + (v2247 & 0x3FFFFFF8);
                    v2244 = (uint8x8_t *)((char *)v2228 + (v2247 & 0x3FFFFFF8));
                    v2245 = v2234 - 8 * (v2247 & 0x3FFFFFF8);
                    v2248 = vdupq_n_s32(v2234);
                    v2249 = vaddq_s32(v2248, (int32x4_t)xmmword_208F3A6A0);
                    v2250 = vaddq_s32(v2248, (int32x4_t)xmmword_208F3A6B0);
                    v2251 = 0uLL;
                    v2252 = (int32x4_t)v2225;
                    v2253 = (int8x16_t)(unint64_t)v2224;
                    v2254 = v2247 & 0x3FFFFFF8;
                    v2255 = 0uLL;
                    v2256 = 0uLL;
                    v2257 = 0uLL;
                    do
                    {
                      v2252 = vaddq_s32(v2252, v1918);
                      v2258 = *v2228++;
                      v2251 = vaddq_s32(v2251, v1918);
                      v2259 = vmovl_u8(v2258);
                      v2260 = vmovl_high_u16(v2259);
                      v2261.i64[0] = v2260.u32[2];
                      v2261.i64[1] = v2260.u32[3];
                      v2262 = v2261;
                      v2261.i64[0] = v2260.u32[0];
                      v2261.i64[1] = v2260.u32[1];
                      v2263 = v2261;
                      v2264 = vmovl_u16(*(uint16x4_t *)v2259.i8);
                      v2261.i64[0] = v2264.u32[2];
                      v2261.i64[1] = v2264.u32[3];
                      v2265 = v2261;
                      v2261.i64[0] = v2264.u32[0];
                      v2261.i64[1] = v2264.u32[1];
                      v2266 = v2261;
                      v2261.i64[0] = v2249.u32[2];
                      v2261.i64[1] = v2249.u32[3];
                      v2267 = v2261;
                      v2261.i64[0] = v2249.u32[0];
                      v2261.i64[1] = v2249.u32[1];
                      v2268 = v2261;
                      v2261.i64[0] = v2250.u32[2];
                      v2261.i64[1] = v2250.u32[3];
                      v2269 = v2261;
                      v2261.i64[0] = v2250.u32[0];
                      v2261.i64[1] = v2250.u32[1];
                      v2257 = vorrq_s8((int8x16_t)vshlq_u64(v2262, v2267), v2257);
                      v2256 = vorrq_s8((int8x16_t)vshlq_u64(v2263, v2268), v2256);
                      v2255 = vorrq_s8((int8x16_t)vshlq_u64(v2265, v2269), v2255);
                      v2253 = vorrq_s8((int8x16_t)vshlq_u64(v2266, v2261), v2253);
                      *(_QWORD *)&v2239 += 8;
                      v2250 = vaddq_s32(v2250, v1919);
                      v2249 = vaddq_s32(v2249, v1919);
                      v2254 -= 8;
                    }
                    while (v2254);
                    *v1509 = v2239;
                    v2270 = vorrq_s8(vorrq_s8(v2253, v2256), vorrq_s8(v2255, v2257));
                    v2224 = vorr_s8(*(int8x8_t *)v2270.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2270, v2270, 8uLL));
                    v2225 = vaddvq_s32(vaddq_s32(v2252, v2251));
                    if ((v2247 & 0x3FFFFFF8) == v2247)
                      goto LABEL_1665;
                  }
                  else
                  {
                    v2243 = (uint64_t)*v1509;
                    v2244 = v2228;
                    v2245 = v2234;
                  }
                }
                else
                {
                  v2243 = (uint64_t)*v1509;
                  v2244 = v2228;
                  v2245 = v2234;
                }
                v2271 = (uint8x8_t)(v2243 + 1);
                do
                {
                  v2225 += 8;
                  v2272 = v2244->u8[0];
                  v2244 = (uint8x8_t *)((char *)v2244 + 1);
                  *(_QWORD *)&v2224 |= (unint64_t)v2272 << v2245;
                  *v1509 = v2271;
                  v2245 -= 8;
                  ++*(_QWORD *)&v2271;
                }
                while (v2245 >= v2237);
              }
            }
            else
            {
              v2226 = v4432;
              v2227 = v4424;
            }
LABEL_1665:
            v2273 = (((v2223 << 7) - 128) >> 8) + 1;
            v2274 = (int8x8_t)(*(_QWORD *)&v2224 - (v2273 << 56));
            if (*(_QWORD *)&v2224 >= (unint64_t)(v2273 << 56))
            {
              LODWORD(v2273) = *(_DWORD *)(v1 + 10668) - v2273;
              v2275 = 1;
              v2224 = v2274;
            }
            else
            {
              v2275 = 0;
            }
            v1917 = v4416;
            v2276 = vp8_norm[v2273];
            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2224 << v2276;
            *(_DWORD *)(v1 + 10664) = v2225 - v2276;
            *(_DWORD *)(v1 + 10668) = (_DWORD)v2273 << v2276;
            v2277 = v1 + v4416;
            *(_BYTE *)(v1 + v4416 + 3997) = v2227 | v2226 | v2118 | v2169 | v2221 | v2275;
            v2278 = *(_DWORD *)(v1 + 10668);
            v2279 = *(_DWORD *)(v1 + 10664);
            v2280 = *(int8x8_t *)(v1 + 10656);
            if ((v2279 & 0x80000000) == 0)
              goto LABEL_1695;
            v2281 = *(uint8x8_t **)(v1 + 10648);
            v2282 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2281;
            v2283 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
            if (v2283)
            {
              if (v2282 >= 9)
                v2284 = 9;
              else
                v2284 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2281;
              v2283(*(_QWORD *)(v1 + 10680), v2281, v4442, v2284);
              v1919.i64[0] = 0x3F0000003FLL;
              v1919.i64[1] = 0x3F0000003FLL;
              v1918.i64[0] = 0x800000008;
              v1918.i64[1] = 0x800000008;
              v1 = a1;
              v2281 = (uint8x8_t *)v4442;
            }
            v2285 = 56 - v2279 - 8 * v2282;
            if (v2285 < 0)
              v2286 = v2279;
            else
              v2286 = v2279 + 0x40000000;
            if (8 * v2282)
              v2287 = 1;
            else
              v2287 = v2285 <= -1;
            if (v2287)
            {
              v2288 = 48 - v2279;
              v2289 = v2285 & ~(v2285 >> 31);
              if ((int)(48 - v2279) >= v2289)
              {
                v2290 = *v1509;
                v2291 = v2289 - 1;
                if (v2289 - 1 >= (int)(40 - v2279))
                  v2292 = 40 - v2279;
                else
                  v2292 = v2289 - 1;
                v2293 = 47 - v2279 - v2292;
                if (v2293 < 0x78)
                  goto LABEL_1691;
                if (v2291 >= (int)(40 - v2279))
                  v2291 = 40 - v2279;
                if (v1509 >= (uint8x8_t *)&v2281->i8[((47 - v2279 - v2291) >> 3) + 1]
                  || (unint64_t)v2281 >= v4404)
                {
                  v2304 = (v2293 >> 3) + 1;
                  v2294 = *(_QWORD *)&v2290 + (v2304 & 0x3FFFFFF8);
                  v2295 = (uint8x8_t *)((char *)v2281 + (v2304 & 0x3FFFFFF8));
                  v2296 = v2288 - 8 * (v2304 & 0x3FFFFFF8);
                  v2305 = vdupq_n_s32(v2288);
                  v2306 = vaddq_s32(v2305, (int32x4_t)xmmword_208F3A6A0);
                  v2307 = vaddq_s32(v2305, (int32x4_t)xmmword_208F3A6B0);
                  v2308 = 0uLL;
                  v2309 = (int32x4_t)v2286;
                  v2310 = (int8x16_t)(unint64_t)v2280;
                  v2311 = v2304 & 0x3FFFFFF8;
                  v2312 = 0uLL;
                  v2313 = 0uLL;
                  v2314 = 0uLL;
                  do
                  {
                    v2309 = vaddq_s32(v2309, v1918);
                    v2315 = *v2281++;
                    v2308 = vaddq_s32(v2308, v1918);
                    v2316 = vmovl_u8(v2315);
                    v2317 = vmovl_high_u16(v2316);
                    v2318.i64[0] = v2317.u32[2];
                    v2318.i64[1] = v2317.u32[3];
                    v2319 = v2318;
                    v2318.i64[0] = v2317.u32[0];
                    v2318.i64[1] = v2317.u32[1];
                    v2320 = v2318;
                    v2321 = vmovl_u16(*(uint16x4_t *)v2316.i8);
                    v2318.i64[0] = v2321.u32[2];
                    v2318.i64[1] = v2321.u32[3];
                    v2322 = v2318;
                    v2318.i64[0] = v2321.u32[0];
                    v2318.i64[1] = v2321.u32[1];
                    v2323 = v2318;
                    v2318.i64[0] = v2306.u32[2];
                    v2318.i64[1] = v2306.u32[3];
                    v2324 = v2318;
                    v2318.i64[0] = v2306.u32[0];
                    v2318.i64[1] = v2306.u32[1];
                    v2325 = v2318;
                    v2318.i64[0] = v2307.u32[2];
                    v2318.i64[1] = v2307.u32[3];
                    v2326 = v2318;
                    v2318.i64[0] = v2307.u32[0];
                    v2318.i64[1] = v2307.u32[1];
                    v2314 = vorrq_s8((int8x16_t)vshlq_u64(v2319, v2324), v2314);
                    v2313 = vorrq_s8((int8x16_t)vshlq_u64(v2320, v2325), v2313);
                    v2312 = vorrq_s8((int8x16_t)vshlq_u64(v2322, v2326), v2312);
                    v2310 = vorrq_s8((int8x16_t)vshlq_u64(v2323, v2318), v2310);
                    *(_QWORD *)&v2290 += 8;
                    v2307 = vaddq_s32(v2307, v1919);
                    v2306 = vaddq_s32(v2306, v1919);
                    v2311 -= 8;
                  }
                  while (v2311);
                  *v1509 = v2290;
                  v2327 = vorrq_s8(vorrq_s8(v2310, v2313), vorrq_s8(v2312, v2314));
                  v2280 = vorr_s8(*(int8x8_t *)v2327.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2327, v2327, 8uLL));
                  v2286 = vaddvq_s32(vaddq_s32(v2309, v2308));
                  if ((v2304 & 0x3FFFFFF8) == v2304)
                    goto LABEL_1694;
                }
                else
                {
LABEL_1691:
                  v2294 = (uint64_t)*v1509;
                  v2295 = v2281;
                  v2296 = 48 - v2279;
                }
                v2297 = (uint8x8_t)(v2294 + 1);
                do
                {
                  v2286 += 8;
                  v2298 = v2295->u8[0];
                  v2295 = (uint8x8_t *)((char *)v2295 + 1);
                  *(_QWORD *)&v2280 |= (unint64_t)v2298 << v2296;
                  *v1509 = v2297;
                  v2296 -= 8;
                  ++*(_QWORD *)&v2297;
                }
                while (v2296 >= v2289);
              }
            }
LABEL_1694:
            v2279 = v2286;
LABEL_1695:
            v2299 = (((v2278 << 7) - 128) >> 8) + 1;
            v2300 = v2299 << 56;
            v2301 = v2280;
            v2302 = (int8x8_t)(*(_QWORD *)&v2280 - (v2299 << 56));
            if (*(_QWORD *)&v2280 >= (unint64_t)(v2299 << 56))
            {
              LODWORD(v2299) = *(_DWORD *)(v1 + 10668) - v2299;
              v2301 = v2302;
            }
            v2303 = vp8_norm[v2299];
            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2301 << v2303;
            *(_DWORD *)(v1 + 10664) = v2279 - v2303;
            *(_DWORD *)(v1 + 10668) = (_DWORD)v2299 << v2303;
            if (*(_QWORD *)&v2280 >= v2300)
              *(_BYTE *)(v2277 + 3997) = -*(_BYTE *)(v2277 + 3997);
LABEL_1400:
            if (++v1917 == 4)
            {
              v1455 = *(_DWORD *)(v1 + 10668);
              v1454 = *(_DWORD *)(v1 + 10664);
              v1453 = *(int8x8_t *)(v1 + 10656);
              goto LABEL_1704;
            }
            continue;
          }
        }
        v1454 = *(_DWORD *)(v1 + 10664);
        v1455 = *(_DWORD *)(v1 + 10668);
        v1507 = *(int8x8_t *)(v1 + 10656);
        if ((v1454 & 0x80000000) != 0)
          goto LABEL_1096;
      }
      if ((v1563 & 0x80000000) != 0)
      {
        v1564 = *(uint8x8_t **)(v1 + 10648);
        v1565 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1564;
        v1566 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v1566)
        {
          if (v1565 >= 9)
            v1567 = 9;
          else
            v1567 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1564;
          v1566(*(_QWORD *)(v1 + 10680), v1564, v4442, v1567);
          v1511.i64[0] = 0x3F0000003FLL;
          v1511.i64[1] = 0x3F0000003FLL;
          v1510.i64[0] = 0x800000008;
          v1510.i64[1] = 0x800000008;
          v1564 = (uint8x8_t *)v4442;
        }
        v1568 = 48 - v1563;
        v1569 = 56 - 8 * v1565 - v1563;
        if (v1569 >= 0)
          v1563 += 0x40000000;
        if (8 * v1565)
          v1570 = 1;
        else
          v1570 = v1569 <= -1;
        v1571 = v1569 & ~(v1569 >> 31);
        if (!v1570 || v1568 < v1571)
        {
          v1 = a1;
        }
        else
        {
          v1573 = *v1509;
          v1574 = v1560 - v1454 + 40;
          if (v1574 >= v1571 - 1)
            v1575 = v1571 - 1;
          else
            v1575 = v1560 - v1454 + 40;
          v1576 = v1560 - v1454 - v1575 + 47;
          v1 = a1;
          if (v1576 >= 0x78)
          {
            if (v1574 >= v1571 - 1)
              v1574 = v1571 - 1;
            if (v1509 >= (uint8x8_t *)&v1564->i8[((v1560 - v1454 - v1574 + 47) >> 3) + 1]
              || (unint64_t)v1564 >= v4403)
            {
              v1581 = (v1576 >> 3) + 1;
              v1577 = *(_QWORD *)&v1573 + (v1581 & 0x3FFFFFF8);
              v1578 = (uint8x8_t *)((char *)v1564 + (v1581 & 0x3FFFFFF8));
              v1579 = v1568 - 8 * (v1581 & 0x3FFFFFF8);
              v1582 = vdupq_n_s32(v1568);
              v1583 = vaddq_s32(v1582, (int32x4_t)xmmword_208F3A6A0);
              v1584 = vaddq_s32(v1582, (int32x4_t)xmmword_208F3A6B0);
              v1585 = 0uLL;
              v1586 = (int32x4_t)v1563;
              v1587 = (int8x16_t)(unint64_t)v1562;
              v1588 = v1581 & 0x3FFFFFF8;
              v1589 = 0uLL;
              v1590 = 0uLL;
              v1591 = 0uLL;
              do
              {
                v1586 = vaddq_s32(v1586, v1510);
                v1592 = *v1564++;
                v1585 = vaddq_s32(v1585, v1510);
                v1593 = vmovl_u8(v1592);
                v1594 = vmovl_high_u16(v1593);
                v1595.i64[0] = v1594.u32[2];
                v1595.i64[1] = v1594.u32[3];
                v1596 = v1595;
                v1595.i64[0] = v1594.u32[0];
                v1595.i64[1] = v1594.u32[1];
                v1597 = v1595;
                v1598 = vmovl_u16(*(uint16x4_t *)v1593.i8);
                v1595.i64[0] = v1598.u32[2];
                v1595.i64[1] = v1598.u32[3];
                v1599 = v1595;
                v1595.i64[0] = v1598.u32[0];
                v1595.i64[1] = v1598.u32[1];
                v1600 = v1595;
                v1595.i64[0] = v1583.u32[2];
                v1595.i64[1] = v1583.u32[3];
                v1601 = v1595;
                v1595.i64[0] = v1583.u32[0];
                v1595.i64[1] = v1583.u32[1];
                v1602 = v1595;
                v1595.i64[0] = v1584.u32[2];
                v1595.i64[1] = v1584.u32[3];
                v1603 = v1595;
                v1595.i64[0] = v1584.u32[0];
                v1595.i64[1] = v1584.u32[1];
                v1591 = vorrq_s8((int8x16_t)vshlq_u64(v1596, v1601), v1591);
                v1590 = vorrq_s8((int8x16_t)vshlq_u64(v1597, v1602), v1590);
                v1589 = vorrq_s8((int8x16_t)vshlq_u64(v1599, v1603), v1589);
                v1587 = vorrq_s8((int8x16_t)vshlq_u64(v1600, v1595), v1587);
                *(_QWORD *)&v1573 += 8;
                v1584 = vaddq_s32(v1584, v1511);
                v1583 = vaddq_s32(v1583, v1511);
                v1588 -= 8;
              }
              while (v1588);
              *v1509 = v1573;
              v1604 = vorrq_s8(vorrq_s8(v1587, v1590), vorrq_s8(v1589, v1591));
              v1562 = vorr_s8(*(int8x8_t *)v1604.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1604, v1604, 8uLL));
              v1563 = vaddvq_s32(vaddq_s32(v1586, v1585));
              if ((v1581 & 0x3FFFFFF8) == v1581)
                goto LABEL_1169;
            }
            else
            {
              v1577 = (uint64_t)*v1509;
              v1578 = v1564;
              v1579 = v1568;
            }
          }
          else
          {
            v1577 = (uint64_t)*v1509;
            v1578 = v1564;
            v1579 = v1568;
          }
          v1605 = (uint8x8_t)(v1577 + 1);
          do
          {
            v1563 += 8;
            v1606 = v1578->u8[0];
            v1578 = (uint8x8_t *)((char *)v1578 + 1);
            *(_QWORD *)&v1562 |= (unint64_t)v1606 << v1579;
            *v1509 = v1605;
            v1579 -= 8;
            ++*(_QWORD *)&v1605;
          }
          while (v1579 >= v1571);
        }
      }
LABEL_1169:
      v1607 = (((v1561 << 7) - 128) >> 8) + 1;
      v1608 = (int8x8_t)(*(_QWORD *)&v1562 - (v1607 << 56));
      if (*(_QWORD *)&v1562 >= (unint64_t)(v1607 << 56))
      {
        LODWORD(v1607) = *(_DWORD *)(v1 + 10668) - v1607;
        v4431 = 32;
        v1562 = v1608;
      }
      else
      {
        v4431 = 0;
      }
      v1609 = vp8_norm[v1607];
      v1610 = (_DWORD)v1607 << v1609;
      v1611 = (int8x8_t)(*(_QWORD *)&v1562 << v1609);
      *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1562 << v1609;
      v1612 = v1563 - v1609;
      *(_DWORD *)(v1 + 10664) = v1563 - v1609;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v1607 << v1609;
      if (((v1563 - v1609) & 0x80000000) != 0)
      {
        v1613 = *(uint8x8_t **)(v1 + 10648);
        v1614 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1613;
        v1615 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v1615)
        {
          if (v1614 >= 9)
            v1616 = 9;
          else
            v1616 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1613;
          v1615(*(_QWORD *)(v1 + 10680), v1613, v4442, v1616);
          v1511.i64[0] = 0x3F0000003FLL;
          v1511.i64[1] = 0x3F0000003FLL;
          v1510.i64[0] = 0x800000008;
          v1510.i64[1] = 0x800000008;
          v1613 = (uint8x8_t *)v4442;
        }
        v1617 = 48 - v1612;
        v1618 = 56 - 8 * v1614 - v1612;
        if (v1618 >= 0)
          v1612 += 0x40000000;
        if (8 * v1614)
          v1619 = 1;
        else
          v1619 = v1618 <= -1;
        v1620 = v1618 & ~(v1618 >> 31);
        if (!v1619 || v1617 < v1620)
        {
          v1 = a1;
        }
        else
        {
          v1622 = *v1509;
          v1623 = v1609 - v1563 + 40;
          if (v1623 >= v1620 - 1)
            v1624 = v1620 - 1;
          else
            v1624 = v1609 - v1563 + 40;
          v1625 = v1609 - v1563 - v1624 + 47;
          v1 = a1;
          if (v1625 >= 0x78)
          {
            if (v1623 >= v1620 - 1)
              v1623 = v1620 - 1;
            if (v1509 >= (uint8x8_t *)&v1613->i8[((v1609 - v1563 - v1623 + 47) >> 3) + 1]
              || (unint64_t)v1613 >= v4403)
            {
              v1630 = (v1625 >> 3) + 1;
              v1626 = *(_QWORD *)&v1622 + (v1630 & 0x3FFFFFF8);
              v1627 = (uint8x8_t *)((char *)v1613 + (v1630 & 0x3FFFFFF8));
              v1628 = v1617 - 8 * (v1630 & 0x3FFFFFF8);
              v1631 = vdupq_n_s32(v1617);
              v1632 = vaddq_s32(v1631, (int32x4_t)xmmword_208F3A6A0);
              v1633 = vaddq_s32(v1631, (int32x4_t)xmmword_208F3A6B0);
              v1634 = 0uLL;
              v1635 = (int32x4_t)v1612;
              v1636 = (int8x16_t)(unint64_t)(*(_QWORD *)&v1562 << v1609);
              v1637 = v1630 & 0x3FFFFFF8;
              v1638 = 0uLL;
              v1639 = 0uLL;
              v1640 = 0uLL;
              do
              {
                v1635 = vaddq_s32(v1635, v1510);
                v1641 = *v1613++;
                v1634 = vaddq_s32(v1634, v1510);
                v1642 = vmovl_u8(v1641);
                v1643 = vmovl_high_u16(v1642);
                v1644.i64[0] = v1643.u32[2];
                v1644.i64[1] = v1643.u32[3];
                v1645 = v1644;
                v1644.i64[0] = v1643.u32[0];
                v1644.i64[1] = v1643.u32[1];
                v1646 = v1644;
                v1647 = vmovl_u16(*(uint16x4_t *)v1642.i8);
                v1644.i64[0] = v1647.u32[2];
                v1644.i64[1] = v1647.u32[3];
                v1648 = v1644;
                v1644.i64[0] = v1647.u32[0];
                v1644.i64[1] = v1647.u32[1];
                v1649 = v1644;
                v1644.i64[0] = v1632.u32[2];
                v1644.i64[1] = v1632.u32[3];
                v1650 = v1644;
                v1644.i64[0] = v1632.u32[0];
                v1644.i64[1] = v1632.u32[1];
                v1651 = v1644;
                v1644.i64[0] = v1633.u32[2];
                v1644.i64[1] = v1633.u32[3];
                v1652 = v1644;
                v1644.i64[0] = v1633.u32[0];
                v1644.i64[1] = v1633.u32[1];
                v1640 = vorrq_s8((int8x16_t)vshlq_u64(v1645, v1650), v1640);
                v1639 = vorrq_s8((int8x16_t)vshlq_u64(v1646, v1651), v1639);
                v1638 = vorrq_s8((int8x16_t)vshlq_u64(v1648, v1652), v1638);
                v1636 = vorrq_s8((int8x16_t)vshlq_u64(v1649, v1644), v1636);
                *(_QWORD *)&v1622 += 8;
                v1633 = vaddq_s32(v1633, v1511);
                v1632 = vaddq_s32(v1632, v1511);
                v1637 -= 8;
              }
              while (v1637);
              *v1509 = v1622;
              v1653 = vorrq_s8(vorrq_s8(v1636, v1639), vorrq_s8(v1638, v1640));
              v1611 = vorr_s8(*(int8x8_t *)v1653.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1653, v1653, 8uLL));
              v1612 = vaddvq_s32(vaddq_s32(v1635, v1634));
              if ((v1630 & 0x3FFFFFF8) == v1630)
                goto LABEL_1206;
            }
            else
            {
              v1626 = (uint64_t)*v1509;
              v1627 = v1613;
              v1628 = v1617;
            }
          }
          else
          {
            v1626 = (uint64_t)*v1509;
            v1627 = v1613;
            v1628 = v1617;
          }
          v1654 = (uint8x8_t)(v1626 + 1);
          do
          {
            v1612 += 8;
            v1655 = v1627->u8[0];
            v1627 = (uint8x8_t *)((char *)v1627 + 1);
            *(_QWORD *)&v1611 |= (unint64_t)v1655 << v1628;
            *v1509 = v1654;
            v1628 -= 8;
            ++*(_QWORD *)&v1654;
          }
          while (v1628 >= v1620);
        }
      }
LABEL_1206:
      v1656 = (((v1610 << 7) - 128) >> 8) + 1;
      v1657 = (int8x8_t)(*(_QWORD *)&v1611 - (v1656 << 56));
      if (*(_QWORD *)&v1611 >= (unint64_t)(v1656 << 56))
      {
        LODWORD(v1656) = *(_DWORD *)(v1 + 10668) - v1656;
        v4423 = 16;
        v1611 = v1657;
      }
      else
      {
        v4423 = 0;
      }
      v1658 = vp8_norm[v1656];
      v1659 = (_DWORD)v1656 << v1658;
      v1660 = (int8x8_t)(*(_QWORD *)&v1611 << v1658);
      *(int8x8_t *)(v1 + 10656) = v1660;
      v1661 = v1612 - v1658;
      *(_DWORD *)(v1 + 10664) = v1612 - v1658;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v1656 << v1658;
      if (((v1612 - v1658) & 0x80000000) != 0)
      {
        v1662 = *(uint8x8_t **)(v1 + 10648);
        v1663 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1662;
        v1664 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v1664)
        {
          if (v1663 >= 9)
            v1665 = 9;
          else
            v1665 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1662;
          v1664(*(_QWORD *)(v1 + 10680), v1662, v4442, v1665);
          v1511.i64[0] = 0x3F0000003FLL;
          v1511.i64[1] = 0x3F0000003FLL;
          v1510.i64[0] = 0x800000008;
          v1510.i64[1] = 0x800000008;
          v1662 = (uint8x8_t *)v4442;
        }
        v1666 = 48 - v1661;
        v1667 = 56 - 8 * v1663 - v1661;
        if (v1667 >= 0)
          v1661 += 0x40000000;
        if (8 * v1663)
          v1668 = 1;
        else
          v1668 = v1667 <= -1;
        v1669 = v1667 & ~(v1667 >> 31);
        if (!v1668 || v1666 < v1669)
        {
          v1 = a1;
        }
        else
        {
          v1671 = *v1509;
          v1672 = v1658 - v1612 + 40;
          if (v1672 >= v1669 - 1)
            v1673 = v1669 - 1;
          else
            v1673 = v1658 - v1612 + 40;
          v1674 = v1658 - v1612 - v1673 + 47;
          v1 = a1;
          if (v1674 < 0x78)
            goto LABEL_1241;
          if (v1672 >= v1669 - 1)
            v1672 = v1669 - 1;
          if (v1509 >= (uint8x8_t *)&v1662->i8[((v1658 - v1612 - v1672 + 47) >> 3) + 1]
            || (unint64_t)v1662 >= v4403)
          {
            v1676 = (v1674 >> 3) + 1;
            v1677 = *(_QWORD *)&v1671 + (v1676 & 0x3FFFFFF8);
            v1678 = (uint8x8_t *)((char *)v1662 + (v1676 & 0x3FFFFFF8));
            v1679 = v1666 - 8 * (v1676 & 0x3FFFFFF8);
            v1680 = vdupq_n_s32(v1666);
            v1681 = vaddq_s32(v1680, (int32x4_t)xmmword_208F3A6A0);
            v1682 = vaddq_s32(v1680, (int32x4_t)xmmword_208F3A6B0);
            v1683 = 0uLL;
            v1684 = (int32x4_t)v1661;
            v1685 = (int8x16_t)(unint64_t)v1660;
            v1686 = v1676 & 0x3FFFFFF8;
            v1687 = 0uLL;
            v1688 = 0uLL;
            v1689 = 0uLL;
            do
            {
              v1684 = vaddq_s32(v1684, v1510);
              v1690 = *v1662++;
              v1683 = vaddq_s32(v1683, v1510);
              v1691 = vmovl_u8(v1690);
              v1692 = vmovl_high_u16(v1691);
              v1693.i64[0] = v1692.u32[2];
              v1693.i64[1] = v1692.u32[3];
              v1694 = v1693;
              v1693.i64[0] = v1692.u32[0];
              v1693.i64[1] = v1692.u32[1];
              v1695 = v1693;
              v1696 = vmovl_u16(*(uint16x4_t *)v1691.i8);
              v1693.i64[0] = v1696.u32[2];
              v1693.i64[1] = v1696.u32[3];
              v1697 = v1693;
              v1693.i64[0] = v1696.u32[0];
              v1693.i64[1] = v1696.u32[1];
              v1698 = v1693;
              v1693.i64[0] = v1681.u32[2];
              v1693.i64[1] = v1681.u32[3];
              v1699 = v1693;
              v1693.i64[0] = v1681.u32[0];
              v1693.i64[1] = v1681.u32[1];
              v1700 = v1693;
              v1693.i64[0] = v1682.u32[2];
              v1693.i64[1] = v1682.u32[3];
              v1701 = v1693;
              v1693.i64[0] = v1682.u32[0];
              v1693.i64[1] = v1682.u32[1];
              v1689 = vorrq_s8((int8x16_t)vshlq_u64(v1694, v1699), v1689);
              v1688 = vorrq_s8((int8x16_t)vshlq_u64(v1695, v1700), v1688);
              v1687 = vorrq_s8((int8x16_t)vshlq_u64(v1697, v1701), v1687);
              v1685 = vorrq_s8((int8x16_t)vshlq_u64(v1698, v1693), v1685);
              *(_QWORD *)&v1671 += 8;
              v1682 = vaddq_s32(v1682, v1511);
              v1681 = vaddq_s32(v1681, v1511);
              v1686 -= 8;
            }
            while (v1686);
            *v1509 = v1671;
            v1702 = vorrq_s8(vorrq_s8(v1685, v1688), vorrq_s8(v1687, v1689));
            v1660 = vorr_s8(*(int8x8_t *)v1702.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1702, v1702, 8uLL));
            v1661 = vaddvq_s32(vaddq_s32(v1684, v1683));
            if ((v1676 & 0x3FFFFFF8) == v1676)
              goto LABEL_1244;
          }
          else
          {
LABEL_1241:
            v1677 = (uint64_t)*v1509;
            v1678 = v1662;
            v1679 = v1666;
          }
          v1703 = (uint8x8_t)(v1677 + 1);
          do
          {
            v1661 += 8;
            v1704 = v1678->u8[0];
            v1678 = (uint8x8_t *)((char *)v1678 + 1);
            *(_QWORD *)&v1660 |= (unint64_t)v1704 << v1679;
            *v1509 = v1703;
            v1679 -= 8;
            ++*(_QWORD *)&v1703;
          }
          while (v1679 >= v1669);
        }
      }
LABEL_1244:
      v1705 = (((v1659 << 7) - 128) >> 8) + 1;
      v1706 = (int8x8_t)(*(_QWORD *)&v1660 - (v1705 << 56));
      if (*(_QWORD *)&v1660 >= (unint64_t)(v1705 << 56))
      {
        LODWORD(v1705) = *(_DWORD *)(v1 + 10668) - v1705;
        v1707 = 8;
        v1660 = v1706;
      }
      else
      {
        v1707 = 0;
      }
      v1708 = vp8_norm[v1705];
      v1709 = (_DWORD)v1705 << v1708;
      v1710 = (int8x8_t)(*(_QWORD *)&v1660 << v1708);
      *(int8x8_t *)(v1 + 10656) = v1710;
      v1711 = v1661 - v1708;
      *(_DWORD *)(v1 + 10664) = v1661 - v1708;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v1705 << v1708;
      if (((v1661 - v1708) & 0x80000000) != 0)
      {
        v1712 = v1707;
        v1713 = *(uint8x8_t **)(v1 + 10648);
        v1714 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1713;
        v1715 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v1715)
        {
          if (v1714 >= 9)
            v1716 = 9;
          else
            v1716 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1713;
          v1715(*(_QWORD *)(v1 + 10680), v1713, v4442, v1716);
          v1511.i64[0] = 0x3F0000003FLL;
          v1511.i64[1] = 0x3F0000003FLL;
          v1510.i64[0] = 0x800000008;
          v1510.i64[1] = 0x800000008;
          v1713 = (uint8x8_t *)v4442;
        }
        v1717 = 48 - v1711;
        v1718 = 56 - 8 * v1714 - v1711;
        if (v1718 >= 0)
          v1711 += 0x40000000;
        if (8 * v1714)
          v1719 = 1;
        else
          v1719 = v1718 <= -1;
        v1720 = v1718 & ~(v1718 >> 31);
        if (!v1719 || v1717 < v1720)
        {
          v1 = a1;
          v1707 = v1712;
        }
        else
        {
          v1722 = *v1509;
          v1723 = v1708 - v1661 + 40;
          if (v1723 >= v1720 - 1)
            v1724 = v1720 - 1;
          else
            v1724 = v1708 - v1661 + 40;
          v1725 = v1708 - v1661 - v1724 + 47;
          v1 = a1;
          v1707 = v1712;
          if (v1725 < 0x78)
            goto LABEL_1279;
          if (v1723 >= v1720 - 1)
            v1723 = v1720 - 1;
          if (v1509 >= (uint8x8_t *)&v1713->i8[((v1708 - v1661 - v1723 + 47) >> 3) + 1]
            || (unint64_t)v1713 >= v4403)
          {
            v1727 = (v1725 >> 3) + 1;
            v1728 = *(_QWORD *)&v1722 + (v1727 & 0x3FFFFFF8);
            v1729 = (uint8x8_t *)((char *)v1713 + (v1727 & 0x3FFFFFF8));
            v1730 = v1717 - 8 * (v1727 & 0x3FFFFFF8);
            v1731 = vdupq_n_s32(v1717);
            v1732 = vaddq_s32(v1731, (int32x4_t)xmmword_208F3A6A0);
            v1733 = vaddq_s32(v1731, (int32x4_t)xmmword_208F3A6B0);
            v1734 = 0uLL;
            v1735 = (int32x4_t)v1711;
            v1736 = (int8x16_t)(unint64_t)v1710;
            v1737 = v1727 & 0x3FFFFFF8;
            v1738 = 0uLL;
            v1739 = 0uLL;
            v1740 = 0uLL;
            do
            {
              v1735 = vaddq_s32(v1735, v1510);
              v1741 = *v1713++;
              v1734 = vaddq_s32(v1734, v1510);
              v1742 = vmovl_u8(v1741);
              v1743 = vmovl_high_u16(v1742);
              v1744.i64[0] = v1743.u32[2];
              v1744.i64[1] = v1743.u32[3];
              v1745 = v1744;
              v1744.i64[0] = v1743.u32[0];
              v1744.i64[1] = v1743.u32[1];
              v1746 = v1744;
              v1747 = vmovl_u16(*(uint16x4_t *)v1742.i8);
              v1744.i64[0] = v1747.u32[2];
              v1744.i64[1] = v1747.u32[3];
              v1748 = v1744;
              v1744.i64[0] = v1747.u32[0];
              v1744.i64[1] = v1747.u32[1];
              v1749 = v1744;
              v1744.i64[0] = v1732.u32[2];
              v1744.i64[1] = v1732.u32[3];
              v1750 = v1744;
              v1744.i64[0] = v1732.u32[0];
              v1744.i64[1] = v1732.u32[1];
              v1751 = v1744;
              v1744.i64[0] = v1733.u32[2];
              v1744.i64[1] = v1733.u32[3];
              v1752 = v1744;
              v1744.i64[0] = v1733.u32[0];
              v1744.i64[1] = v1733.u32[1];
              v1740 = vorrq_s8((int8x16_t)vshlq_u64(v1745, v1750), v1740);
              v1739 = vorrq_s8((int8x16_t)vshlq_u64(v1746, v1751), v1739);
              v1738 = vorrq_s8((int8x16_t)vshlq_u64(v1748, v1752), v1738);
              v1736 = vorrq_s8((int8x16_t)vshlq_u64(v1749, v1744), v1736);
              *(_QWORD *)&v1722 += 8;
              v1733 = vaddq_s32(v1733, v1511);
              v1732 = vaddq_s32(v1732, v1511);
              v1737 -= 8;
            }
            while (v1737);
            *v1509 = v1722;
            v1753 = vorrq_s8(vorrq_s8(v1736, v1739), vorrq_s8(v1738, v1740));
            v1710 = vorr_s8(*(int8x8_t *)v1753.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1753, v1753, 8uLL));
            v1711 = vaddvq_s32(vaddq_s32(v1735, v1734));
            if ((v1727 & 0x3FFFFFF8) == v1727)
              goto LABEL_1282;
          }
          else
          {
LABEL_1279:
            v1728 = (uint64_t)*v1509;
            v1729 = v1713;
            v1730 = v1717;
          }
          v1754 = (uint8x8_t)(v1728 + 1);
          do
          {
            v1711 += 8;
            v1755 = v1729->u8[0];
            v1729 = (uint8x8_t *)((char *)v1729 + 1);
            *(_QWORD *)&v1710 |= (unint64_t)v1755 << v1730;
            *v1509 = v1754;
            v1730 -= 8;
            ++*(_QWORD *)&v1754;
          }
          while (v1730 >= v1720);
        }
      }
LABEL_1282:
      v1756 = (((v1709 << 7) - 128) >> 8) + 1;
      v1757 = (int8x8_t)(*(_QWORD *)&v1710 - (v1756 << 56));
      if (*(_QWORD *)&v1710 >= (unint64_t)(v1756 << 56))
      {
        LODWORD(v1756) = *(_DWORD *)(v1 + 10668) - v1756;
        v1758 = 4;
        v1710 = v1757;
      }
      else
      {
        v1758 = 0;
      }
      v1759 = vp8_norm[v1756];
      v1760 = (_DWORD)v1756 << v1759;
      v1761 = (int8x8_t)(*(_QWORD *)&v1710 << v1759);
      *(int8x8_t *)(v1 + 10656) = v1761;
      v1762 = v1711 - v1759;
      *(_DWORD *)(v1 + 10664) = v1711 - v1759;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v1756 << v1759;
      if (((v1711 - v1759) & 0x80000000) != 0)
      {
        v1763 = v1758;
        v1764 = v1707;
        v1765 = *(uint8x8_t **)(v1 + 10648);
        v1766 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1765;
        v1767 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v1767)
        {
          if (v1766 >= 9)
            v1768 = 9;
          else
            v1768 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1765;
          v1767(*(_QWORD *)(v1 + 10680), v1765, v4442, v1768);
          v1511.i64[0] = 0x3F0000003FLL;
          v1511.i64[1] = 0x3F0000003FLL;
          v1510.i64[0] = 0x800000008;
          v1510.i64[1] = 0x800000008;
          v1765 = (uint8x8_t *)v4442;
        }
        v1769 = 48 - v1762;
        v1770 = 56 - 8 * v1766 - v1762;
        if (v1770 >= 0)
          v1762 += 0x40000000;
        if (8 * v1766)
          v1771 = 1;
        else
          v1771 = v1770 <= -1;
        v1772 = v1770 & ~(v1770 >> 31);
        if (!v1771 || v1769 < v1772)
        {
          v1 = a1;
          v1707 = v1764;
          v1758 = v1763;
        }
        else
        {
          v1774 = *v1509;
          v1775 = v1759 - v1711 + 40;
          if (v1775 >= v1772 - 1)
            v1776 = v1772 - 1;
          else
            v1776 = v1759 - v1711 + 40;
          v1777 = v1759 - v1711 - v1776 + 47;
          v1 = a1;
          v1707 = v1764;
          v1758 = v1763;
          if (v1777 < 0x78)
            goto LABEL_1317;
          if (v1775 >= v1772 - 1)
            v1775 = v1772 - 1;
          if (v1509 >= (uint8x8_t *)&v1765->i8[((v1759 - v1711 - v1775 + 47) >> 3) + 1]
            || (unint64_t)v1765 >= v4403)
          {
            v1779 = (v1777 >> 3) + 1;
            v1780 = *(_QWORD *)&v1774 + (v1779 & 0x3FFFFFF8);
            v1781 = (uint8x8_t *)((char *)v1765 + (v1779 & 0x3FFFFFF8));
            v1782 = v1769 - 8 * (v1779 & 0x3FFFFFF8);
            v1783 = vdupq_n_s32(v1769);
            v1784 = vaddq_s32(v1783, (int32x4_t)xmmword_208F3A6A0);
            v1785 = vaddq_s32(v1783, (int32x4_t)xmmword_208F3A6B0);
            v1786 = 0uLL;
            v1787 = (int32x4_t)v1762;
            v1788 = (int8x16_t)(unint64_t)v1761;
            v1789 = v1779 & 0x3FFFFFF8;
            v1790 = 0uLL;
            v1791 = 0uLL;
            v1792 = 0uLL;
            do
            {
              v1787 = vaddq_s32(v1787, v1510);
              v1793 = *v1765++;
              v1786 = vaddq_s32(v1786, v1510);
              v1794 = vmovl_u8(v1793);
              v1795 = vmovl_high_u16(v1794);
              v1796.i64[0] = v1795.u32[2];
              v1796.i64[1] = v1795.u32[3];
              v1797 = v1796;
              v1796.i64[0] = v1795.u32[0];
              v1796.i64[1] = v1795.u32[1];
              v1798 = v1796;
              v1799 = vmovl_u16(*(uint16x4_t *)v1794.i8);
              v1796.i64[0] = v1799.u32[2];
              v1796.i64[1] = v1799.u32[3];
              v1800 = v1796;
              v1796.i64[0] = v1799.u32[0];
              v1796.i64[1] = v1799.u32[1];
              v1801 = v1796;
              v1796.i64[0] = v1784.u32[2];
              v1796.i64[1] = v1784.u32[3];
              v1802 = v1796;
              v1796.i64[0] = v1784.u32[0];
              v1796.i64[1] = v1784.u32[1];
              v1803 = v1796;
              v1796.i64[0] = v1785.u32[2];
              v1796.i64[1] = v1785.u32[3];
              v1804 = v1796;
              v1796.i64[0] = v1785.u32[0];
              v1796.i64[1] = v1785.u32[1];
              v1792 = vorrq_s8((int8x16_t)vshlq_u64(v1797, v1802), v1792);
              v1791 = vorrq_s8((int8x16_t)vshlq_u64(v1798, v1803), v1791);
              v1790 = vorrq_s8((int8x16_t)vshlq_u64(v1800, v1804), v1790);
              v1788 = vorrq_s8((int8x16_t)vshlq_u64(v1801, v1796), v1788);
              *(_QWORD *)&v1774 += 8;
              v1785 = vaddq_s32(v1785, v1511);
              v1784 = vaddq_s32(v1784, v1511);
              v1789 -= 8;
            }
            while (v1789);
            *v1509 = v1774;
            v1805 = vorrq_s8(vorrq_s8(v1788, v1791), vorrq_s8(v1790, v1792));
            v1761 = vorr_s8(*(int8x8_t *)v1805.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1805, v1805, 8uLL));
            v1762 = vaddvq_s32(vaddq_s32(v1787, v1786));
            if ((v1779 & 0x3FFFFFF8) == v1779)
              goto LABEL_1320;
          }
          else
          {
LABEL_1317:
            v1780 = (uint64_t)*v1509;
            v1781 = v1765;
            v1782 = v1769;
          }
          v1806 = (uint8x8_t)(v1780 + 1);
          do
          {
            v1762 += 8;
            v1807 = v1781->u8[0];
            v1781 = (uint8x8_t *)((char *)v1781 + 1);
            *(_QWORD *)&v1761 |= (unint64_t)v1807 << v1782;
            *v1509 = v1806;
            v1782 -= 8;
            ++*(_QWORD *)&v1806;
          }
          while (v1782 >= v1772);
        }
      }
LABEL_1320:
      v1808 = (((v1760 << 7) - 128) >> 8) + 1;
      v1809 = (int8x8_t)(*(_QWORD *)&v1761 - (v1808 << 56));
      v4415 = v1508;
      if (*(_QWORD *)&v1761 >= (unint64_t)(v1808 << 56))
      {
        LODWORD(v1808) = *(_DWORD *)(v1 + 10668) - v1808;
        v1810 = 2;
        v1761 = v1809;
      }
      else
      {
        v1810 = 0;
      }
      v1811 = vp8_norm[v1808];
      v1812 = (_DWORD)v1808 << v1811;
      v1813 = (int8x8_t)(*(_QWORD *)&v1761 << v1811);
      *(int8x8_t *)(v1 + 10656) = v1813;
      v1814 = v1762 - v1811;
      *(_DWORD *)(v1 + 10664) = v1762 - v1811;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v1808 << v1811;
      if (((v1762 - v1811) & 0x80000000) != 0)
      {
        v4398 = v1810;
        v1817 = *(uint8x8_t **)(v1 + 10648);
        v1818 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1817;
        v1819 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
        if (v1819)
        {
          v1820 = v1758;
          if (v1818 >= 9)
            v1821 = 9;
          else
            v1821 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1817;
          v1822 = v1707;
          v1819(*(_QWORD *)(v1 + 10680), v1817, v4442, v1821);
          v1758 = v1820;
          v1707 = v1822;
          v1511.i64[0] = 0x3F0000003FLL;
          v1511.i64[1] = 0x3F0000003FLL;
          v1510.i64[0] = 0x800000008;
          v1510.i64[1] = 0x800000008;
          v1817 = (uint8x8_t *)v4442;
        }
        v1823 = 48 - v1814;
        v1824 = 56 - 8 * v1818 - v1814;
        if (v1824 >= 0)
          v1814 += 0x40000000;
        if (8 * v1818)
          v1825 = 1;
        else
          v1825 = v1824 <= -1;
        v1826 = v1824 & ~(v1824 >> 31);
        if (!v1825 || v1823 < v1826)
        {
          v1 = a1;
          v1815 = v4431;
          v1816 = v4423;
          v1810 = v4398;
        }
        else
        {
          v1828 = *v1509;
          v1829 = v1811 - v1762 + 40;
          if (v1829 >= v1826 - 1)
            v1830 = v1826 - 1;
          else
            v1830 = v1811 - v1762 + 40;
          v1831 = v1811 - v1762 - v1830 + 47;
          v1 = a1;
          v1815 = v4431;
          v1816 = v4423;
          v1810 = v4398;
          if (v1831 >= 0x78)
          {
            if (v1829 >= v1826 - 1)
              v1829 = v1826 - 1;
            if (v1509 >= (uint8x8_t *)&v1817->i8[((v1811 - v1762 - v1829 + 47) >> 3) + 1]
              || (unint64_t)v1817 >= v4403)
            {
              v1836 = (v1831 >> 3) + 1;
              v1832 = *(_QWORD *)&v1828 + (v1836 & 0x3FFFFFF8);
              v1833 = (uint8x8_t *)((char *)v1817 + (v1836 & 0x3FFFFFF8));
              v1834 = v1823 - 8 * (v1836 & 0x3FFFFFF8);
              v1837 = vdupq_n_s32(v1823);
              v1838 = vaddq_s32(v1837, (int32x4_t)xmmword_208F3A6A0);
              v1839 = vaddq_s32(v1837, (int32x4_t)xmmword_208F3A6B0);
              v1840 = 0uLL;
              v1841 = (int32x4_t)v1814;
              v1842 = (int8x16_t)(unint64_t)v1813;
              v1843 = v1836 & 0x3FFFFFF8;
              v1844 = 0uLL;
              v1845 = 0uLL;
              v1846 = 0uLL;
              do
              {
                v1841 = vaddq_s32(v1841, v1510);
                v1847 = *v1817++;
                v1840 = vaddq_s32(v1840, v1510);
                v1848 = vmovl_u8(v1847);
                v1849 = vmovl_high_u16(v1848);
                v1850.i64[0] = v1849.u32[2];
                v1850.i64[1] = v1849.u32[3];
                v1851 = v1850;
                v1850.i64[0] = v1849.u32[0];
                v1850.i64[1] = v1849.u32[1];
                v1852 = v1850;
                v1853 = vmovl_u16(*(uint16x4_t *)v1848.i8);
                v1850.i64[0] = v1853.u32[2];
                v1850.i64[1] = v1853.u32[3];
                v1854 = v1850;
                v1850.i64[0] = v1853.u32[0];
                v1850.i64[1] = v1853.u32[1];
                v1855 = v1850;
                v1850.i64[0] = v1838.u32[2];
                v1850.i64[1] = v1838.u32[3];
                v1856 = v1850;
                v1850.i64[0] = v1838.u32[0];
                v1850.i64[1] = v1838.u32[1];
                v1857 = v1850;
                v1850.i64[0] = v1839.u32[2];
                v1850.i64[1] = v1839.u32[3];
                v1858 = v1850;
                v1850.i64[0] = v1839.u32[0];
                v1850.i64[1] = v1839.u32[1];
                v1846 = vorrq_s8((int8x16_t)vshlq_u64(v1851, v1856), v1846);
                v1845 = vorrq_s8((int8x16_t)vshlq_u64(v1852, v1857), v1845);
                v1844 = vorrq_s8((int8x16_t)vshlq_u64(v1854, v1858), v1844);
                v1842 = vorrq_s8((int8x16_t)vshlq_u64(v1855, v1850), v1842);
                *(_QWORD *)&v1828 += 8;
                v1839 = vaddq_s32(v1839, v1511);
                v1838 = vaddq_s32(v1838, v1511);
                v1843 -= 8;
              }
              while (v1843);
              *v1509 = v1828;
              v1859 = vorrq_s8(vorrq_s8(v1842, v1845), vorrq_s8(v1844, v1846));
              v1813 = vorr_s8(*(int8x8_t *)v1859.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1859, v1859, 8uLL));
              v1814 = vaddvq_s32(vaddq_s32(v1841, v1840));
              if ((v1836 & 0x3FFFFFF8) == v1836)
                goto LABEL_1358;
            }
            else
            {
              v1832 = (uint64_t)*v1509;
              v1833 = v1817;
              v1834 = v1823;
            }
          }
          else
          {
            v1832 = (uint64_t)*v1509;
            v1833 = v1817;
            v1834 = v1823;
          }
          v1860 = (uint8x8_t)(v1832 + 1);
          do
          {
            v1814 += 8;
            v1861 = v1833->u8[0];
            v1833 = (uint8x8_t *)((char *)v1833 + 1);
            *(_QWORD *)&v1813 |= (unint64_t)v1861 << v1834;
            *v1509 = v1860;
            v1834 -= 8;
            ++*(_QWORD *)&v1860;
          }
          while (v1834 >= v1826);
        }
      }
      else
      {
        v1815 = v4431;
        v1816 = v4423;
      }
LABEL_1358:
      v1862 = (((v1812 << 7) - 128) >> 8) + 1;
      v1863 = (int8x8_t)(*(_QWORD *)&v1813 - (v1862 << 56));
      if (*(_QWORD *)&v1813 >= (unint64_t)(v1862 << 56))
      {
        LODWORD(v1862) = *(_DWORD *)(v1 + 10668) - v1862;
        v1864 = 1;
        v1813 = v1863;
      }
      else
      {
        v1864 = 0;
      }
      v1508 = v4415;
      v1865 = vp8_norm[v1862];
      *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1813 << v1865;
      *(_DWORD *)(v1 + 10664) = v1814 - v1865;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v1862 << v1865;
      v1866 = v1 + v4415;
      *(_BYTE *)(v1 + v4415 + 3989) = v1816 | v1815 | v1707 | v1758 | v1810 | v1864;
      v1867 = *(_DWORD *)(v1 + 10668);
      v1868 = *(_DWORD *)(v1 + 10664);
      v1869 = *(int8x8_t *)(v1 + 10656);
      if ((v1868 & 0x80000000) == 0)
        goto LABEL_1388;
      v1870 = *(uint8x8_t **)(v1 + 10648);
      v1871 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1870;
      v1872 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
      if (v1872)
      {
        if (v1871 >= 9)
          v1873 = 9;
        else
          v1873 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1870;
        v1872(*(_QWORD *)(v1 + 10680), v1870, v4442, v1873);
        v1511.i64[0] = 0x3F0000003FLL;
        v1511.i64[1] = 0x3F0000003FLL;
        v1510.i64[0] = 0x800000008;
        v1510.i64[1] = 0x800000008;
        v1 = a1;
        v1870 = (uint8x8_t *)v4442;
      }
      v1874 = 56 - v1868 - 8 * v1871;
      if (v1874 < 0)
        v1875 = v1868;
      else
        v1875 = v1868 + 0x40000000;
      if (8 * v1871)
        v1876 = 1;
      else
        v1876 = v1874 <= -1;
      if (v1876)
      {
        v1877 = 48 - v1868;
        v1878 = v1874 & ~(v1874 >> 31);
        if ((int)(48 - v1868) >= v1878)
        {
          v1879 = *v1509;
          v1880 = v1878 - 1;
          if (v1878 - 1 >= (int)(40 - v1868))
            v1881 = 40 - v1868;
          else
            v1881 = v1878 - 1;
          v1882 = 47 - v1868 - v1881;
          if (v1882 < 0x78)
            goto LABEL_1384;
          if (v1880 >= (int)(40 - v1868))
            v1880 = 40 - v1868;
          if (v1509 >= (uint8x8_t *)&v1870->i8[((47 - v1868 - v1880) >> 3) + 1] || (unint64_t)v1870 >= v4403)
          {
            v1893 = (v1882 >> 3) + 1;
            v1883 = *(_QWORD *)&v1879 + (v1893 & 0x3FFFFFF8);
            v1884 = (uint8x8_t *)((char *)v1870 + (v1893 & 0x3FFFFFF8));
            v1885 = v1877 - 8 * (v1893 & 0x3FFFFFF8);
            v1894 = vdupq_n_s32(v1877);
            v1895 = vaddq_s32(v1894, (int32x4_t)xmmword_208F3A6A0);
            v1896 = vaddq_s32(v1894, (int32x4_t)xmmword_208F3A6B0);
            v1897 = 0uLL;
            v1898 = (int32x4_t)v1875;
            v1899 = (int8x16_t)(unint64_t)v1869;
            v1900 = v1893 & 0x3FFFFFF8;
            v1901 = 0uLL;
            v1902 = 0uLL;
            v1903 = 0uLL;
            do
            {
              v1898 = vaddq_s32(v1898, v1510);
              v1904 = *v1870++;
              v1897 = vaddq_s32(v1897, v1510);
              v1905 = vmovl_u8(v1904);
              v1906 = vmovl_high_u16(v1905);
              v1907.i64[0] = v1906.u32[2];
              v1907.i64[1] = v1906.u32[3];
              v1908 = v1907;
              v1907.i64[0] = v1906.u32[0];
              v1907.i64[1] = v1906.u32[1];
              v1909 = v1907;
              v1910 = vmovl_u16(*(uint16x4_t *)v1905.i8);
              v1907.i64[0] = v1910.u32[2];
              v1907.i64[1] = v1910.u32[3];
              v1911 = v1907;
              v1907.i64[0] = v1910.u32[0];
              v1907.i64[1] = v1910.u32[1];
              v1912 = v1907;
              v1907.i64[0] = v1895.u32[2];
              v1907.i64[1] = v1895.u32[3];
              v1913 = v1907;
              v1907.i64[0] = v1895.u32[0];
              v1907.i64[1] = v1895.u32[1];
              v1914 = v1907;
              v1907.i64[0] = v1896.u32[2];
              v1907.i64[1] = v1896.u32[3];
              v1915 = v1907;
              v1907.i64[0] = v1896.u32[0];
              v1907.i64[1] = v1896.u32[1];
              v1903 = vorrq_s8((int8x16_t)vshlq_u64(v1908, v1913), v1903);
              v1902 = vorrq_s8((int8x16_t)vshlq_u64(v1909, v1914), v1902);
              v1901 = vorrq_s8((int8x16_t)vshlq_u64(v1911, v1915), v1901);
              v1899 = vorrq_s8((int8x16_t)vshlq_u64(v1912, v1907), v1899);
              *(_QWORD *)&v1879 += 8;
              v1896 = vaddq_s32(v1896, v1511);
              v1895 = vaddq_s32(v1895, v1511);
              v1900 -= 8;
            }
            while (v1900);
            *v1509 = v1879;
            v1916 = vorrq_s8(vorrq_s8(v1899, v1902), vorrq_s8(v1901, v1903));
            v1869 = vorr_s8(*(int8x8_t *)v1916.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1916, v1916, 8uLL));
            v1875 = vaddvq_s32(vaddq_s32(v1898, v1897));
            if ((v1893 & 0x3FFFFFF8) == v1893)
              goto LABEL_1387;
          }
          else
          {
LABEL_1384:
            v1883 = (uint64_t)*v1509;
            v1884 = v1870;
            v1885 = 48 - v1868;
          }
          v1886 = (uint8x8_t)(v1883 + 1);
          do
          {
            v1875 += 8;
            v1887 = v1884->u8[0];
            v1884 = (uint8x8_t *)((char *)v1884 + 1);
            *(_QWORD *)&v1869 |= (unint64_t)v1887 << v1885;
            *v1509 = v1886;
            v1885 -= 8;
            ++*(_QWORD *)&v1886;
          }
          while (v1885 >= v1878);
        }
      }
LABEL_1387:
      v1868 = v1875;
LABEL_1388:
      v1888 = (((v1867 << 7) - 128) >> 8) + 1;
      v1889 = v1888 << 56;
      v1890 = v1869;
      v1891 = (int8x8_t)(*(_QWORD *)&v1869 - (v1888 << 56));
      if (*(_QWORD *)&v1869 >= (unint64_t)(v1888 << 56))
      {
        LODWORD(v1888) = *(_DWORD *)(v1 + 10668) - v1888;
        v1890 = v1891;
      }
      v1892 = vp8_norm[v1888];
      *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1890 << v1892;
      *(_DWORD *)(v1 + 10664) = v1868 - v1892;
      *(_DWORD *)(v1 + 10668) = (_DWORD)v1888 << v1892;
      if (*(_QWORD *)&v1869 >= v1889)
        *(_BYTE *)(v1866 + 3989) = -*(_BYTE *)(v1866 + 3989);
      goto LABEL_1392;
    }
    v1460 = *(uint8x8_t **)(v1 + 10648);
    v1461 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1460;
    v1462 = 8 * v1461;
    v1463 = 56 - 8 * v1461 - v1454;
    v1464 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v1464)
    {
      if (v1461 >= 9)
        v1465 = 9;
      else
        v1465 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1460;
      v1464(*(_QWORD *)(v1 + 10680), v1460, v4442, v1465);
      v1 = a1;
      v1460 = (uint8x8_t *)v4442;
    }
    if (v1463 < 0)
      v1466 = v1400 - v1452;
    else
      v1466 = v1454 + 0x40000000;
    if (v1462)
      v1467 = 1;
    else
      v1467 = v1463 <= -1;
    if (v1467)
    {
      v1468 = 48 - v1454;
      v1469 = v1463 & ~(v1463 >> 31);
      if ((int)(48 - v1454) >= v1469)
      {
        v1470 = (uint8x8_t *)(v1 + 10648);
        v1471 = *(uint8x8_t *)(v1 + 10648);
        v1472 = v1452 - v1400 + 40;
        if (v1472 >= v1469 - 1)
          v1473 = v1469 - 1;
        else
          v1473 = v1452 - v1400 + 40;
        v1474 = v1452 - v1400 - v1473 + 47;
        if (v1474 < 0x78)
          goto LABEL_1088;
        if (v1472 >= v1469 - 1)
          v1472 = v1469 - 1;
        if (v1470 < (uint8x8_t *)&v1460->i8[((v1452 - v1400 - v1472 + 47) >> 3) + 1]
          && (unint64_t)v1460 < v1 + 10656)
        {
LABEL_1088:
          v1477 = *(_QWORD *)(v1 + 10648);
          v1478 = v1460;
LABEL_1089:
          v1504 = (uint8x8_t)(v1477 + 1);
          do
          {
            v1466 += 8;
            v1505 = v1478->u8[0];
            v1478 = (uint8x8_t *)((char *)v1478 + 1);
            *(_QWORD *)&v1453 |= (unint64_t)v1505 << v1468;
            *v1470 = v1504;
            v1468 -= 8;
            ++*(_QWORD *)&v1504;
          }
          while (v1468 >= v1469);
          goto LABEL_1091;
        }
        v1476 = (v1474 >> 3) + 1;
        v1477 = *(_QWORD *)&v1471 + (v1476 & 0x3FFFFFF8);
        v1478 = (uint8x8_t *)((char *)v1460 + (v1476 & 0x3FFFFFF8));
        v1479 = vdupq_n_s32(v1468);
        v1468 -= 8 * (v1476 & 0x3FFFFFF8);
        v1480 = vaddq_s32(v1479, (int32x4_t)xmmword_208F3A6A0);
        v1481 = vaddq_s32(v1479, (int32x4_t)xmmword_208F3A6B0);
        v1482 = 0uLL;
        v1483 = (int32x4_t)v1466;
        v1484 = (int8x16_t)(unint64_t)v1453;
        v1485.i64[0] = 0x800000008;
        v1485.i64[1] = 0x800000008;
        v1486.i64[0] = 0x3F0000003FLL;
        v1486.i64[1] = 0x3F0000003FLL;
        v1487 = v1476 & 0x3FFFFFF8;
        v1488 = 0uLL;
        v1489 = 0uLL;
        v1490 = 0uLL;
        do
        {
          v1483 = vaddq_s32(v1483, v1485);
          v1491 = *v1460++;
          v1482 = vaddq_s32(v1482, v1485);
          v1492 = vmovl_u8(v1491);
          v1493 = vmovl_high_u16(v1492);
          v1494.i64[0] = v1493.u32[2];
          v1494.i64[1] = v1493.u32[3];
          v1495 = v1494;
          v1494.i64[0] = v1493.u32[0];
          v1494.i64[1] = v1493.u32[1];
          v1496 = v1494;
          v1497 = vmovl_u16(*(uint16x4_t *)v1492.i8);
          v1494.i64[0] = v1497.u32[2];
          v1494.i64[1] = v1497.u32[3];
          v1498 = v1494;
          v1494.i64[0] = v1497.u32[0];
          v1494.i64[1] = v1497.u32[1];
          v1499 = v1494;
          v1494.i64[0] = v1480.u32[2];
          v1494.i64[1] = v1480.u32[3];
          v1500 = v1494;
          v1494.i64[0] = v1480.u32[0];
          v1494.i64[1] = v1480.u32[1];
          v1501 = v1494;
          v1494.i64[0] = v1481.u32[2];
          v1494.i64[1] = v1481.u32[3];
          v1502 = v1494;
          v1494.i64[0] = v1481.u32[0];
          v1494.i64[1] = v1481.u32[1];
          v1490 = vorrq_s8((int8x16_t)vshlq_u64(v1495, v1500), v1490);
          v1489 = vorrq_s8((int8x16_t)vshlq_u64(v1496, v1501), v1489);
          v1488 = vorrq_s8((int8x16_t)vshlq_u64(v1498, v1502), v1488);
          v1484 = vorrq_s8((int8x16_t)vshlq_u64(v1499, v1494), v1484);
          *(_QWORD *)&v1471 += 8;
          v1481 = vaddq_s32(v1481, v1486);
          v1480 = vaddq_s32(v1480, v1486);
          v1487 -= 8;
        }
        while (v1487);
        *v1470 = v1471;
        v1503 = vorrq_s8(vorrq_s8(v1484, v1489), vorrq_s8(v1488, v1490));
        v1453 = vorr_s8(*(int8x8_t *)v1503.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1503, v1503, 8uLL));
        v1466 = vaddvq_s32(vaddq_s32(v1483, v1482));
        if ((v1476 & 0x3FFFFFF8) != v1476)
          goto LABEL_1089;
      }
    }
LABEL_1091:
    v1454 = v1466;
    v1457 = v1456 << 56;
    v1458 = (int8x8_t)(*(_QWORD *)&v1453 - (v1456 << 56));
    if (*(_QWORD *)&v1453 < (unint64_t)(v1456 << 56))
      goto LABEL_1058;
    goto LABEL_1092;
  }
LABEL_1704:
  v2328 = *(_QWORD *)(v1 + 10720);
  v2329 = *(unsigned int *)(v1 + 10792);
  v2330 = (((v1455 << 7) - 128) >> 8) + 1;
  if ((v1454 & 0x80000000) != 0)
  {
    v2333 = *(uint8x8_t **)(v1 + 10648);
    v2334 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2333;
    v2335 = 8 * v2334;
    v2336 = 56 - v1454 - 8 * v2334;
    v2337 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v2337)
    {
      if (v2334 >= 9)
        v2338 = 9;
      else
        v2338 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2333;
      v2337(*(_QWORD *)(v1 + 10680), v2333, v4442, v2338);
      v1 = a1;
      v2333 = (uint8x8_t *)v4442;
    }
    if (v2336 < 0)
      v2339 = v1454;
    else
      v2339 = v1454 + 0x40000000;
    if (v2335)
      v2340 = 1;
    else
      v2340 = v2336 <= -1;
    if (v2340)
    {
      v2341 = 48 - v1454;
      v2342 = v2336 & ~(v2336 >> 31);
      if ((int)(48 - v1454) >= v2342)
      {
        v2343 = (uint8x8_t *)(v1 + 10648);
        v2344 = *(uint8x8_t *)(v1 + 10648);
        v2345 = v2342 - 1;
        if (v2342 - 1 >= (int)(40 - v1454))
          v2346 = 40 - v1454;
        else
          v2346 = v2342 - 1;
        v2347 = 47 - v1454 - v2346;
        if (v2347 < 0x78)
          goto LABEL_1736;
        if (v2345 >= (int)(40 - v1454))
          v2345 = 40 - v1454;
        if (v2343 < (uint8x8_t *)&v2333->i8[((47 - v1454 - v2345) >> 3) + 1] && (unint64_t)v2333 < v1 + 10656)
        {
LABEL_1736:
          v2350 = *(_QWORD *)(v1 + 10648);
          v2351 = v2333;
LABEL_1737:
          v2377 = (uint8x8_t)(v2350 + 1);
          do
          {
            v2339 += 8;
            v2378 = v2351->u8[0];
            v2351 = (uint8x8_t *)((char *)v2351 + 1);
            *(_QWORD *)&v1453 |= (unint64_t)v2378 << v2341;
            *v2343 = v2377;
            v2341 -= 8;
            ++*(_QWORD *)&v2377;
          }
          while (v2341 >= v2342);
          goto LABEL_1739;
        }
        v2349 = (v2347 >> 3) + 1;
        v2350 = *(_QWORD *)&v2344 + (v2349 & 0x3FFFFFF8);
        v2351 = (uint8x8_t *)((char *)v2333 + (v2349 & 0x3FFFFFF8));
        v2352 = vdupq_n_s32(v2341);
        v2341 -= 8 * (v2349 & 0x3FFFFFF8);
        v2353 = vaddq_s32(v2352, (int32x4_t)xmmword_208F3A6A0);
        v2354 = vaddq_s32(v2352, (int32x4_t)xmmword_208F3A6B0);
        v2355 = 0uLL;
        v2356 = (int32x4_t)v2339;
        v2357 = (int8x16_t)(unint64_t)v1453;
        v2358.i64[0] = 0x800000008;
        v2358.i64[1] = 0x800000008;
        v2359.i64[0] = 0x3F0000003FLL;
        v2359.i64[1] = 0x3F0000003FLL;
        v2360 = v2349 & 0x3FFFFFF8;
        v2361 = 0uLL;
        v2362 = 0uLL;
        v2363 = 0uLL;
        do
        {
          v2356 = vaddq_s32(v2356, v2358);
          v2364 = *v2333++;
          v2355 = vaddq_s32(v2355, v2358);
          v2365 = vmovl_u8(v2364);
          v2366 = vmovl_high_u16(v2365);
          v2367.i64[0] = v2366.u32[2];
          v2367.i64[1] = v2366.u32[3];
          v2368 = v2367;
          v2367.i64[0] = v2366.u32[0];
          v2367.i64[1] = v2366.u32[1];
          v2369 = v2367;
          v2370 = vmovl_u16(*(uint16x4_t *)v2365.i8);
          v2367.i64[0] = v2370.u32[2];
          v2367.i64[1] = v2370.u32[3];
          v2371 = v2367;
          v2367.i64[0] = v2370.u32[0];
          v2367.i64[1] = v2370.u32[1];
          v2372 = v2367;
          v2367.i64[0] = v2353.u32[2];
          v2367.i64[1] = v2353.u32[3];
          v2373 = v2367;
          v2367.i64[0] = v2353.u32[0];
          v2367.i64[1] = v2353.u32[1];
          v2374 = v2367;
          v2367.i64[0] = v2354.u32[2];
          v2367.i64[1] = v2354.u32[3];
          v2375 = v2367;
          v2367.i64[0] = v2354.u32[0];
          v2367.i64[1] = v2354.u32[1];
          v2363 = vorrq_s8((int8x16_t)vshlq_u64(v2368, v2373), v2363);
          v2362 = vorrq_s8((int8x16_t)vshlq_u64(v2369, v2374), v2362);
          v2361 = vorrq_s8((int8x16_t)vshlq_u64(v2371, v2375), v2361);
          v2357 = vorrq_s8((int8x16_t)vshlq_u64(v2372, v2367), v2357);
          *(_QWORD *)&v2344 += 8;
          v2354 = vaddq_s32(v2354, v2359);
          v2353 = vaddq_s32(v2353, v2359);
          v2360 -= 8;
        }
        while (v2360);
        *v2343 = v2344;
        v2376 = vorrq_s8(vorrq_s8(v2357, v2362), vorrq_s8(v2361, v2363));
        v1453 = vorr_s8(*(int8x8_t *)v2376.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2376, v2376, 8uLL));
        v2339 = vaddvq_s32(vaddq_s32(v2356, v2355));
        if ((v2349 & 0x3FFFFFF8) != v2349)
          goto LABEL_1737;
      }
    }
LABEL_1739:
    v1454 = v2339;
    v2331 = (int8x8_t)(*(_QWORD *)&v1453 - (v2330 << 56));
    if (*(_QWORD *)&v1453 < (unint64_t)(v2330 << 56))
      goto LABEL_1706;
    goto LABEL_1740;
  }
  v2331 = (int8x8_t)(*(_QWORD *)&v1453 - (v2330 << 56));
  if (*(_QWORD *)&v1453 < (unint64_t)(v2330 << 56))
  {
LABEL_1706:
    v2332 = 0;
    goto LABEL_1741;
  }
LABEL_1740:
  LODWORD(v2330) = *(_DWORD *)(v1 + 10668) - v2330;
  v2332 = 2;
  v1453 = v2331;
LABEL_1741:
  v2379 = vp8_norm[v2330];
  v2380 = (_DWORD)v2330 << v2379;
  v2381 = (int8x8_t)(*(_QWORD *)&v1453 << v2379);
  v2382 = v1454 - v2379;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1453 << v2379;
  *(_DWORD *)(v1 + 10664) = v1454 - v2379;
  *(_DWORD *)(v1 + 10668) = v2380;
  v2383 = (((v2380 << 7) - 128) >> 8) + 1;
  if (((v1454 - v2379) & 0x80000000) == 0)
    goto LABEL_1778;
  v4433 = v2332;
  v2384 = v2329;
  v2385 = v2328;
  v2386 = *(uint8x8_t **)(v1 + 10648);
  v2387 = 48 - v2382;
  v2388 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2386;
  v2389 = 8 * v2388;
  v2390 = 56 - 8 * v2388 - v2382;
  v2391 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
  if (v2391)
  {
    if (v2388 >= 9)
      v2392 = 9;
    else
      v2392 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2386;
    v2391(*(_QWORD *)(v1 + 10680), v2386, v4442, v2392);
    v2386 = (uint8x8_t *)v4442;
  }
  if (v2390 >= 0)
    v2382 += 0x40000000;
  if (v2389)
    v2393 = 1;
  else
    v2393 = v2390 <= -1;
  v2394 = v2390 & ~(v2390 >> 31);
  if (!v2393 || v2387 < v2394)
  {
    v1 = a1;
    v2328 = v2385;
    v2329 = v2384;
    v2332 = v4433;
    goto LABEL_1778;
  }
  v1 = a1;
  v2396 = (uint8x8_t *)(a1 + 10648);
  v2397 = *(uint8x8_t *)(a1 + 10648);
  v2398 = v2379 - v1454 + 40;
  if (v2398 >= v2394 - 1)
    v2399 = v2394 - 1;
  else
    v2399 = v2379 - v1454 + 40;
  v2400 = v2379 - v1454 - v2399 + 47;
  v2328 = v2385;
  if (v2400 < 0x78)
  {
    v2401 = *(_QWORD *)(a1 + 10648);
    v2402 = v2386;
    v2403 = v2387;
    v2329 = v2384;
LABEL_1775:
    v2332 = v4433;
LABEL_1776:
    v2431 = (uint8x8_t)(v2401 + 1);
    do
    {
      v2382 += 8;
      v2432 = v2402->u8[0];
      v2402 = (uint8x8_t *)((char *)v2402 + 1);
      *(_QWORD *)&v2381 |= (unint64_t)v2432 << v2403;
      *v2396 = v2431;
      v2403 -= 8;
      ++*(_QWORD *)&v2431;
    }
    while (v2403 >= v2394);
    goto LABEL_1778;
  }
  if (v2398 >= v2394 - 1)
    v2398 = v2394 - 1;
  v2404 = v2396 >= (uint8x8_t *)&v2386->i8[((v2379 - v1454 - v2398 + 47) >> 3) + 1]
       || (unint64_t)v2386 >= a1 + 10656;
  v2329 = v2384;
  if (!v2404)
  {
    v2401 = *(_QWORD *)(a1 + 10648);
    v2402 = v2386;
    v2403 = v2387;
    goto LABEL_1775;
  }
  v2405 = (v2400 >> 3) + 1;
  v2401 = *(_QWORD *)&v2397 + (v2405 & 0x3FFFFFF8);
  v2402 = (uint8x8_t *)((char *)v2386 + (v2405 & 0x3FFFFFF8));
  v2406 = vdupq_n_s32(v2387);
  v2403 = v2387 - 8 * (v2405 & 0x3FFFFFF8);
  v2407 = vaddq_s32(v2406, (int32x4_t)xmmword_208F3A6A0);
  v2408 = vaddq_s32(v2406, (int32x4_t)xmmword_208F3A6B0);
  v2409 = 0uLL;
  v2410 = (int32x4_t)v2382;
  v2411 = (int8x16_t)(unint64_t)v2381;
  v2412.i64[0] = 0x800000008;
  v2412.i64[1] = 0x800000008;
  v2413.i64[0] = 0x3F0000003FLL;
  v2413.i64[1] = 0x3F0000003FLL;
  v2414 = v2405 & 0x3FFFFFF8;
  v2415 = 0uLL;
  v2416 = 0uLL;
  v2417 = 0uLL;
  do
  {
    v2410 = vaddq_s32(v2410, v2412);
    v2418 = *v2386++;
    v2409 = vaddq_s32(v2409, v2412);
    v2419 = vmovl_u8(v2418);
    v2420 = vmovl_high_u16(v2419);
    v2421.i64[0] = v2420.u32[2];
    v2421.i64[1] = v2420.u32[3];
    v2422 = v2421;
    v2421.i64[0] = v2420.u32[0];
    v2421.i64[1] = v2420.u32[1];
    v2423 = v2421;
    v2424 = vmovl_u16(*(uint16x4_t *)v2419.i8);
    v2421.i64[0] = v2424.u32[2];
    v2421.i64[1] = v2424.u32[3];
    v2425 = v2421;
    v2421.i64[0] = v2424.u32[0];
    v2421.i64[1] = v2424.u32[1];
    v2426 = v2421;
    v2421.i64[0] = v2407.u32[2];
    v2421.i64[1] = v2407.u32[3];
    v2427 = v2421;
    v2421.i64[0] = v2407.u32[0];
    v2421.i64[1] = v2407.u32[1];
    v2428 = v2421;
    v2421.i64[0] = v2408.u32[2];
    v2421.i64[1] = v2408.u32[3];
    v2429 = v2421;
    v2421.i64[0] = v2408.u32[0];
    v2421.i64[1] = v2408.u32[1];
    v2417 = vorrq_s8((int8x16_t)vshlq_u64(v2422, v2427), v2417);
    v2416 = vorrq_s8((int8x16_t)vshlq_u64(v2423, v2428), v2416);
    v2415 = vorrq_s8((int8x16_t)vshlq_u64(v2425, v2429), v2415);
    v2411 = vorrq_s8((int8x16_t)vshlq_u64(v2426, v2421), v2411);
    *(_QWORD *)&v2397 += 8;
    v2408 = vaddq_s32(v2408, v2413);
    v2407 = vaddq_s32(v2407, v2413);
    v2414 -= 8;
  }
  while (v2414);
  *v2396 = v2397;
  v2430 = vorrq_s8(vorrq_s8(v2411, v2416), vorrq_s8(v2415, v2417));
  v2381 = vorr_s8(*(int8x8_t *)v2430.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2430, v2430, 8uLL));
  v2382 = vaddvq_s32(vaddq_s32(v2410, v2409));
  v2465 = (v2405 & 0x3FFFFFF8) == v2405;
  v2332 = v4433;
  if (!v2465)
    goto LABEL_1776;
LABEL_1778:
  v2433 = (int8x8_t)(*(_QWORD *)&v2381 - (v2383 << 56));
  if (*(_QWORD *)&v2381 >= (unint64_t)(v2383 << 56))
  {
    LODWORD(v2383) = *(_DWORD *)(v1 + 10668) - v2383;
    v2434 = 1;
    v2381 = v2433;
  }
  else
  {
    v2434 = 0;
  }
  v2435 = vp8_norm[v2383];
  v2436 = (_DWORD)v2383 << v2435;
  v2437 = *(_QWORD *)&v2381 << v2435;
  v2438 = v2382 - v2435;
  *(_QWORD *)(v1 + 10656) = v2437;
  *(_DWORD *)(v1 + 10664) = v2438;
  *(_DWORD *)(v1 + 10668) = v2436;
  if ((v2438 - 0x40000000) >= 0xC0000041)
  {
    v2439 = *(_DWORD *)(v1 + 10212);
  }
  else
  {
    v2439 = v2434 | v2332;
    *(_DWORD *)(v1 + 10212) = v2439;
  }
  v4408 = (int8x8_t *)(v1 + 10640);
  v4411 = 1 << v2439;
  if (*(_DWORD *)(v1 + 10716))
  {
    v2440 = 0;
    v2441 = (uint64_t)v4394 + v4392;
    v4434 = v2328 + v2329;
    v4417 = (3 << v2439) - 3;
    v2442 = v4411 - 1;
    v4425 = v1 + 10712;
    do
    {
      v2443 = *(unsigned int *)(v4425 + 4 * v2440 + 80);
      v2444 = v4425 + 8 * v2440;
      v2445 = *(_QWORD *)(v2444 + 8);
      if (v2440)
      {
        v2446 = *(_QWORD *)(v2444 + 8);
        v2447 = *(_DWORD *)(v4425 + 4 * v2440 + 80);
        if ((_DWORD)v2443)
        {
          v2448 = v2445 + v2443;
          v2449 = 3 * v2440 - 3;
          v2450 = v2448 - v2446;
          if ((uint64_t)(v2448 - v2446) >= 0)
            goto LABEL_1798;
LABEL_1796:
          while (2)
          {
            vpx_internal_error((uint64_t)v4388, 7, "Truncated packet or corrupt partition. No bytes left %d.", v2450);
            v1 = a1;
            if (v2442 <= (int)(v2440 - 1))
            {
LABEL_1806:
              v2454 = v2450;
              v2455 = v2450;
              if (v2448 > v2446)
                goto LABEL_1807;
              goto LABEL_1812;
            }
LABEL_1799:
            v2452 = (unsigned __int16 *)(v2441 + v2449);
            if (v4434 <= (unint64_t)v2452 || v4434 - (unint64_t)v2452 < 3)
            {
              if (*(_DWORD *)(v1 + 10976))
                goto LABEL_1806;
              vpx_internal_error((uint64_t)v4388, 7, "Truncated partition size data");
              v1 = a1;
              v2454 = 0;
              v2455 = 0;
              if (v2448 <= v2446)
                goto LABEL_1812;
            }
            else
            {
              v2453 = *(void (**)(_QWORD))(v1 + 10992);
              if (v2453)
              {
                v2453(*(_QWORD *)(v1 + 11000));
                v1 = a1;
                v2452 = (unsigned __int16 *)v4442;
              }
              v2454 = *v2452 | (*((unsigned __int8 *)v2452 + 2) << 16);
              v2455 = v2454;
              if (v2448 <= v2446)
                goto LABEL_1812;
            }
LABEL_1807:
            if (v2455 - 1 >= v2450)
            {
LABEL_1812:
              if (!*(_DWORD *)(v1 + 10976))
              {
                vpx_internal_error((uint64_t)v4388, 7, "Truncated packet or corrupt partition %d length", v2440);
                v1 = a1;
                *(_DWORD *)(a1 + 4 * v2440 + 10792) = v2454;
                if (v2447 < v2454)
                  goto LABEL_1809;
                goto LABEL_1814;
              }
              v2455 = v2450;
              v2454 = v2450;
              *(_DWORD *)(v1 + 4 * v2440 + 10792) = v2450;
              if (v2447 < v2450)
              {
LABEL_1809:
                vpx_internal_error((uint64_t)v4388, 7, "Corrupted fragment size %d", v2447);
                v1 = a1;
                v2447 -= v2454;
                if (!v2447)
                  break;
                goto LABEL_1815;
              }
            }
            else
            {
              *(_DWORD *)(v1 + 4 * v2440 + 10792) = v2454;
              if (v2447 < v2454)
                goto LABEL_1809;
            }
LABEL_1814:
            v2447 -= v2454;
            if (!v2447)
              break;
LABEL_1815:
            v2456 = (_QWORD *)(v1 + 8 * v2440++ + 10720);
            v2446 = *v2456 + v2455;
            *(_QWORD *)(v1 + 8 * v2440 + 10720) = v2446;
            v2449 += 3;
            v2450 = v2448 - v2446;
            if ((uint64_t)(v2448 - v2446) >= 0)
              goto LABEL_1798;
            continue;
          }
        }
      }
      else
      {
        v2451 = v4417 + v2441 - *(_DWORD *)(v1 + 10720);
        if (v2443 < v2451)
        {
          vpx_internal_error((uint64_t)v4388, 7, "Corrupted fragment size %d", *(_DWORD *)(v4425 + 80));
          v1 = a1;
        }
        v2447 = v2443 - v2451;
        if ((_DWORD)v2443 != v2451)
        {
          *(_DWORD *)(v1 + 10792) = v2451;
          v2446 = *(_QWORD *)(v1 + 10720) + v2451;
          *(_QWORD *)(v1 + 10728) = v2446;
          v2440 = 1;
          v2448 = v2445 + v2443;
          v2449 = 0;
          v2450 = v2448 - v2446;
          if ((uint64_t)(v2448 - v2446) < 0)
            goto LABEL_1796;
LABEL_1798:
          if (v2442 <= (int)(v2440 - 1))
            goto LABEL_1806;
          goto LABEL_1799;
        }
        v2440 = 0;
      }
      ++v2440;
    }
    while (v2440 < *(_DWORD *)(v1 + 10716));
  }
  v2457 = 0;
  v2458 = (_QWORD *)(v1 + 10256);
  *(_DWORD *)(v1 + 10716) = v4411 + 1;
  v2459 = 1;
  v2460 = v1 + 10712;
  v2461.i64[0] = 0x800000008;
  v2461.i64[1] = 0x800000008;
  v2462.i64[0] = 0x3F0000003FLL;
  v2462.i64[1] = 0x3F0000003FLL;
  v4418 = v1 + 10256;
  do
  {
    while (1)
    {
      v2463 = *(uint8x8_t **)(v2460 + 8 * v2459 + 8);
      v2464 = *(unsigned int *)(v2460 + 4 * v2459 + 80);
      v2465 = v2463 || (_DWORD)v2464 == 0;
      if (v2465)
        break;
      vpx_internal_error((uint64_t)v4388, 2, "Failed to allocate BOOL decoder %d", v2459);
      v2462.i64[0] = 0x3F0000003FLL;
      v2462.i64[1] = 0x3F0000003FLL;
      v2461.i64[0] = 0x800000008;
      v2461.i64[1] = 0x800000008;
      v1 = a1;
      v2458 += 6;
      ++v2459;
      ++v2457;
      if (v2459 >= *(unsigned int *)(a1 + 10716))
        goto LABEL_1853;
    }
    v2466 = *(void (**)(void))(v1 + 10992);
    v2467 = *(_QWORD *)(v1 + 11000);
    v2468 = (char *)v2463 + v2464;
    if (!v2463)
      v2468 = 0;
    *v2458 = v2468;
    v2458[1] = v2463;
    v2458[2] = 0;
    v2458[3] = 0xFFFFFFFFF8;
    v2458[4] = v2466;
    v2458[5] = v2467;
    v2469 = v2468 - (char *)v2463;
    if (v2466)
    {
      v2466();
      v2462.i64[0] = 0x3F0000003FLL;
      v2462.i64[1] = 0x3F0000003FLL;
      v2461.i64[0] = 0x800000008;
      v2461.i64[1] = 0x800000008;
      v2463 = (uint8x8_t *)v4442;
    }
    v2470 = 0;
    v2471 = 64 - 8 * v2469;
    if (v2471 < 0)
      v2472 = -8;
    else
      v2472 = 1073741816;
    if (8 * v2469)
      v2473 = 1;
    else
      v2473 = v2471 <= -1;
    if (!v2473)
    {
      v1 = a1;
      goto LABEL_1852;
    }
    v2474 = v2471 & ~(v2471 >> 31);
    v1 = a1;
    if (v2474 <= 56)
    {
      v2475 = v2458[1];
      v2476 = 56;
      if ((56 - v2474) < 0x38
        || ((v2477 = a1 + 48 * v2457,
             v2478 = v2477 + 10264,
             v2479 = v2477 + 10272,
             v2480 = (56 - v2474) >> 3,
             v2478 < (unint64_t)v2463 + v2480 + 1)
          ? (v2481 = (unint64_t)v2463 >= v2479)
          : (v2481 = 1),
            !v2481))
      {
        v2470 = 0;
        v2483 = v2458[1];
        v2484 = v2463;
LABEL_1850:
        v2507 = v2483 + 1;
        do
        {
          v2472 += 8;
          v2508 = v2484->u8[0];
          v2484 = (uint8x8_t *)((char *)v2484 + 1);
          *(_QWORD *)&v2470 |= (unint64_t)v2508 << v2476;
          v2458[1] = v2507;
          v2476 -= 8;
          ++v2507;
        }
        while (v2476 >= v2474);
        goto LABEL_1852;
      }
      v2482 = (v2480 + 1);
      v2483 = v2475 + (v2482 & 0x3FFFFFF8);
      v2484 = (uint8x8_t *)((char *)v2463 + (v2482 & 0x3FFFFFF8));
      v2476 = 56 - 8 * (v2482 & 0x3FFFFFF8);
      v2485 = 0uLL;
      v2486 = (int32x4_t)v2472;
      v2487 = v2482 & 0x3FFFFFF8;
      v2488 = (int32x4_t)xmmword_208F3A690;
      v2489 = (int32x4_t)xmmword_208F3A680;
      v2490 = 0uLL;
      v2491 = 0uLL;
      v2492 = 0uLL;
      v2493 = 0uLL;
      do
      {
        v2486 = vaddq_s32(v2486, v2461);
        v2494 = *v2463++;
        v2485 = vaddq_s32(v2485, v2461);
        v2495 = vmovl_u8(v2494);
        v2496 = vmovl_high_u16(v2495);
        v2497.i64[0] = v2496.u32[2];
        v2497.i64[1] = v2496.u32[3];
        v2498 = v2497;
        v2497.i64[0] = v2496.u32[0];
        v2497.i64[1] = v2496.u32[1];
        v2499 = v2497;
        v2500 = vmovl_u16(*(uint16x4_t *)v2495.i8);
        v2497.i64[0] = v2500.u32[2];
        v2497.i64[1] = v2500.u32[3];
        v2501 = v2497;
        v2497.i64[0] = v2500.u32[0];
        v2497.i64[1] = v2500.u32[1];
        v2502 = v2497;
        v2497.i64[0] = v2489.u32[2];
        v2497.i64[1] = v2489.u32[3];
        v2503 = v2497;
        v2497.i64[0] = v2489.u32[0];
        v2497.i64[1] = v2489.u32[1];
        v2504 = v2497;
        v2497.i64[0] = v2488.u32[2];
        v2497.i64[1] = v2488.u32[3];
        v2505 = v2497;
        v2497.i64[0] = v2488.u32[0];
        v2497.i64[1] = v2488.u32[1];
        v2493 = vorrq_s8((int8x16_t)vshlq_u64(v2498, v2503), v2493);
        v2492 = vorrq_s8((int8x16_t)vshlq_u64(v2499, v2504), v2492);
        v2491 = vorrq_s8((int8x16_t)vshlq_u64(v2501, v2505), v2491);
        v2490 = vorrq_s8((int8x16_t)vshlq_u64(v2502, v2497), v2490);
        v2475 += 8;
        v2488 = vaddq_s32(v2488, v2462);
        v2489 = vaddq_s32(v2489, v2462);
        v2487 -= 8;
      }
      while (v2487);
      v2458[1] = v2475;
      v2506 = vorrq_s8(vorrq_s8(v2490, v2492), vorrq_s8(v2491, v2493));
      v2470 = vorr_s8(*(int8x8_t *)v2506.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2506, v2506, 8uLL));
      v2472 = vaddvq_s32(vaddq_s32(v2486, v2485));
      if ((v2482 & 0x3FFFFFF8) != v2482)
        goto LABEL_1850;
    }
LABEL_1852:
    v2458[2] = v2470;
    *((_DWORD *)v2458 + 6) = v2472;
    v2458 += 6;
    ++v2459;
    ++v2457;
  }
  while (v2459 < *(unsigned int *)(v1 + 10716));
LABEL_1853:
  v2509 = *(_DWORD *)(v1 + 10844);
  if (v2509 > v4411 - 1)
  {
    *(_DWORD *)(v1 + 10844) = v4411 - 1;
    v2509 = v4411 - 1;
  }
  v2510 = *(_DWORD *)(v1 + 7428);
  if ((int)v2509 >= v2510)
    *(_DWORD *)(v1 + 10844) = v2510 - 1;
  *(_QWORD *)(v1 + 4056) = v4418;
  v4441[0] = 0;
  v2511 = *(_DWORD *)(v1 + 10664);
  v2512 = (((*(_DWORD *)(v1 + 10668) << 7) - 128) >> 8) + 1;
  v2513 = *(int8x8_t *)(v1 + 10656);
  if ((v2511 & 0x80000000) == 0)
  {
    v2514 = (int8x8_t)(*(_QWORD *)&v2513 - (v2512 << 56));
    if (*(_QWORD *)&v2513 < (unint64_t)(v2512 << 56))
      goto LABEL_1859;
LABEL_1886:
    LODWORD(v2512) = *(_DWORD *)(v1 + 10668) - v2512;
    v4435 = 64;
    v2513 = v2514;
    goto LABEL_1887;
  }
  v2515 = *(uint8x8_t **)(v1 + 10648);
  v2516 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2515;
  v2517 = 8 * v2516;
  v2518 = 56 - v2511 - 8 * v2516;
  v2519 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
  if (v2519)
  {
    if (v2516 >= 9)
      v2520 = 9;
    else
      v2520 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2515;
    v2519(*(_QWORD *)(v1 + 10680), v2515, v4442, v2520);
    v1 = a1;
    v2515 = (uint8x8_t *)v4442;
  }
  if (v2518 < 0)
    v2521 = v2511;
  else
    v2521 = v2511 + 0x40000000;
  if (v2517)
    v2522 = 1;
  else
    v2522 = v2518 <= -1;
  if (v2522)
  {
    v2523 = 48 - v2511;
    v2524 = v2518 & ~(v2518 >> 31);
    if ((int)(48 - v2511) >= v2524)
    {
      v2525 = (uint8x8_t *)(v1 + 10648);
      v2526 = *(uint8x8_t *)(v1 + 10648);
      v2527 = v2524 - 1;
      if (v2524 - 1 >= (int)(40 - v2511))
        v2528 = 40 - v2511;
      else
        v2528 = v2524 - 1;
      v2529 = 47 - v2511 - v2528;
      if (v2529 < 0x78)
        goto LABEL_1882;
      if (v2527 >= (int)(40 - v2511))
        v2527 = 40 - v2511;
      if (v2525 < (uint8x8_t *)&v2515->i8[((47 - v2511 - v2527) >> 3) + 1] && (unint64_t)v2515 < v1 + 10656)
      {
LABEL_1882:
        v2530 = *(_QWORD *)(v1 + 10648);
        v2531 = v2515;
        goto LABEL_1883;
      }
      v2636 = (v2529 >> 3) + 1;
      v2530 = *(_QWORD *)&v2526 + (v2636 & 0x3FFFFFF8);
      v2531 = (uint8x8_t *)((char *)v2515 + (v2636 & 0x3FFFFFF8));
      v2637 = vdupq_n_s32(v2523);
      v2523 -= 8 * (v2636 & 0x3FFFFFF8);
      v2638 = vaddq_s32(v2637, (int32x4_t)xmmword_208F3A6A0);
      v2639 = vaddq_s32(v2637, (int32x4_t)xmmword_208F3A6B0);
      v2640 = 0uLL;
      v2641 = (int32x4_t)v2521;
      v2642 = (int8x16_t)(unint64_t)v2513;
      v2643.i64[0] = 0x800000008;
      v2643.i64[1] = 0x800000008;
      v2644.i64[0] = 0x3F0000003FLL;
      v2644.i64[1] = 0x3F0000003FLL;
      v2645 = v2636 & 0x3FFFFFF8;
      v2646 = 0uLL;
      v2647 = 0uLL;
      v2648 = 0uLL;
      do
      {
        v2641 = vaddq_s32(v2641, v2643);
        v2649 = *v2515++;
        v2640 = vaddq_s32(v2640, v2643);
        v2650 = vmovl_u8(v2649);
        v2651 = vmovl_high_u16(v2650);
        v2652.i64[0] = v2651.u32[2];
        v2652.i64[1] = v2651.u32[3];
        v2653 = v2652;
        v2652.i64[0] = v2651.u32[0];
        v2652.i64[1] = v2651.u32[1];
        v2654 = v2652;
        v2655 = vmovl_u16(*(uint16x4_t *)v2650.i8);
        v2652.i64[0] = v2655.u32[2];
        v2652.i64[1] = v2655.u32[3];
        v2656 = v2652;
        v2652.i64[0] = v2655.u32[0];
        v2652.i64[1] = v2655.u32[1];
        v2657 = v2652;
        v2652.i64[0] = v2638.u32[2];
        v2652.i64[1] = v2638.u32[3];
        v2658 = v2652;
        v2652.i64[0] = v2638.u32[0];
        v2652.i64[1] = v2638.u32[1];
        v2659 = v2652;
        v2652.i64[0] = v2639.u32[2];
        v2652.i64[1] = v2639.u32[3];
        v2660 = v2652;
        v2652.i64[0] = v2639.u32[0];
        v2652.i64[1] = v2639.u32[1];
        v2648 = vorrq_s8((int8x16_t)vshlq_u64(v2653, v2658), v2648);
        v2647 = vorrq_s8((int8x16_t)vshlq_u64(v2654, v2659), v2647);
        v2646 = vorrq_s8((int8x16_t)vshlq_u64(v2656, v2660), v2646);
        v2642 = vorrq_s8((int8x16_t)vshlq_u64(v2657, v2652), v2642);
        *(_QWORD *)&v2526 += 8;
        v2639 = vaddq_s32(v2639, v2644);
        v2638 = vaddq_s32(v2638, v2644);
        v2645 -= 8;
      }
      while (v2645);
      *v2525 = v2526;
      v2661 = vorrq_s8(vorrq_s8(v2642, v2647), vorrq_s8(v2646, v2648));
      v2513 = vorr_s8(*(int8x8_t *)v2661.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2661, v2661, 8uLL));
      v2521 = vaddvq_s32(vaddq_s32(v2641, v2640));
      if ((v2636 & 0x3FFFFFF8) != v2636)
      {
LABEL_1883:
        v2532 = (uint8x8_t)(v2530 + 1);
        do
        {
          v2521 += 8;
          v2533 = v2531->u8[0];
          v2531 = (uint8x8_t *)((char *)v2531 + 1);
          *(_QWORD *)&v2513 |= (unint64_t)v2533 << v2523;
          *v2525 = v2532;
          v2523 -= 8;
          ++*(_QWORD *)&v2532;
        }
        while (v2523 >= v2524);
      }
    }
  }
  v2511 = v2521;
  v2514 = (int8x8_t)(*(_QWORD *)&v2513 - (v2512 << 56));
  if (*(_QWORD *)&v2513 >= (unint64_t)(v2512 << 56))
    goto LABEL_1886;
LABEL_1859:
  v4435 = 0;
LABEL_1887:
  v2534 = vp8_norm[v2512];
  v2535 = (int8x8_t)(*(_QWORD *)&v2513 << v2534);
  v2536 = v2511 - v2534;
  *(int8x8_t *)(v1 + 10656) = v2535;
  *(_DWORD *)(v1 + 10664) = v2511 - v2534;
  *(_DWORD *)(v1 + 10668) = (_DWORD)v2512 << v2534;
  v2537 = ((((_DWORD)v2512 << v2534 << 7) - 128) >> 8) + 1;
  if (((v2511 - v2534) & 0x80000000) != 0)
  {
    v2538 = *(uint8x8_t **)(v1 + 10648);
    v2539 = 48 - v2536;
    v2540 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2538;
    v2541 = 8 * v2540;
    v2542 = 56 - 8 * v2540 - v2536;
    v2543 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v2543)
    {
      if (v2540 >= 9)
        v2544 = 9;
      else
        v2544 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2538;
      v2543(*(_QWORD *)(v1 + 10680), v2538, v4442, v2544);
      v2538 = (uint8x8_t *)v4442;
    }
    if (v2542 >= 0)
      v2536 += 0x40000000;
    if (v2541)
      v2545 = 1;
    else
      v2545 = v2542 <= -1;
    v2546 = v2542 & ~(v2542 >> 31);
    if (!v2545 || v2539 < v2546)
    {
      v1 = a1;
    }
    else
    {
      v1 = a1;
      v2548 = (uint8x8_t *)(a1 + 10648);
      v2549 = *(uint8x8_t *)(a1 + 10648);
      v2550 = v2534 - v2511 + 40;
      if (v2550 >= v2546 - 1)
        v2551 = v2546 - 1;
      else
        v2551 = v2534 - v2511 + 40;
      v2552 = v2534 - v2511 - v2551 + 47;
      if (v2552 < 0x78)
        goto LABEL_1919;
      if (v2550 >= v2546 - 1)
        v2550 = v2546 - 1;
      if (v2548 < (uint8x8_t *)&v2538->i8[((v2534 - v2511 - v2550 + 47) >> 3) + 1]
        && (unint64_t)v2538 < a1 + 10656)
      {
LABEL_1919:
        v2555 = *(_QWORD *)(a1 + 10648);
        v2556 = v2538;
        v2558 = v2539;
        goto LABEL_1920;
      }
      v2554 = (v2552 >> 3) + 1;
      v2555 = *(_QWORD *)&v2549 + (v2554 & 0x3FFFFFF8);
      v2556 = (uint8x8_t *)((char *)v2538 + (v2554 & 0x3FFFFFF8));
      v2557 = vdupq_n_s32(v2539);
      v2558 = v2539 - 8 * (v2554 & 0x3FFFFFF8);
      v2559 = vaddq_s32(v2557, (int32x4_t)xmmword_208F3A6A0);
      v2560 = vaddq_s32(v2557, (int32x4_t)xmmword_208F3A6B0);
      v2561 = 0uLL;
      v2562 = (int32x4_t)v2536;
      v2563 = (int8x16_t)(unint64_t)v2535;
      v2564.i64[0] = 0x800000008;
      v2564.i64[1] = 0x800000008;
      v2565.i64[0] = 0x3F0000003FLL;
      v2565.i64[1] = 0x3F0000003FLL;
      v2566 = v2554 & 0x3FFFFFF8;
      v2567 = 0uLL;
      v2568 = 0uLL;
      v2569 = 0uLL;
      do
      {
        v2562 = vaddq_s32(v2562, v2564);
        v2570 = *v2538++;
        v2561 = vaddq_s32(v2561, v2564);
        v2571 = vmovl_u8(v2570);
        v2572 = vmovl_high_u16(v2571);
        v2573.i64[0] = v2572.u32[2];
        v2573.i64[1] = v2572.u32[3];
        v2574 = v2573;
        v2573.i64[0] = v2572.u32[0];
        v2573.i64[1] = v2572.u32[1];
        v2575 = v2573;
        v2576 = vmovl_u16(*(uint16x4_t *)v2571.i8);
        v2573.i64[0] = v2576.u32[2];
        v2573.i64[1] = v2576.u32[3];
        v2577 = v2573;
        v2573.i64[0] = v2576.u32[0];
        v2573.i64[1] = v2576.u32[1];
        v2578 = v2573;
        v2573.i64[0] = v2559.u32[2];
        v2573.i64[1] = v2559.u32[3];
        v2579 = v2573;
        v2573.i64[0] = v2559.u32[0];
        v2573.i64[1] = v2559.u32[1];
        v2580 = v2573;
        v2573.i64[0] = v2560.u32[2];
        v2573.i64[1] = v2560.u32[3];
        v2581 = v2573;
        v2573.i64[0] = v2560.u32[0];
        v2573.i64[1] = v2560.u32[1];
        v2569 = vorrq_s8((int8x16_t)vshlq_u64(v2574, v2579), v2569);
        v2568 = vorrq_s8((int8x16_t)vshlq_u64(v2575, v2580), v2568);
        v2567 = vorrq_s8((int8x16_t)vshlq_u64(v2577, v2581), v2567);
        v2563 = vorrq_s8((int8x16_t)vshlq_u64(v2578, v2573), v2563);
        *(_QWORD *)&v2549 += 8;
        v2560 = vaddq_s32(v2560, v2565);
        v2559 = vaddq_s32(v2559, v2565);
        v2566 -= 8;
      }
      while (v2566);
      *v2548 = v2549;
      v2582 = vorrq_s8(vorrq_s8(v2563, v2568), vorrq_s8(v2567, v2569));
      v2535 = vorr_s8(*(int8x8_t *)v2582.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2582, v2582, 8uLL));
      v2536 = vaddvq_s32(vaddq_s32(v2562, v2561));
      if ((v2554 & 0x3FFFFFF8) != v2554)
      {
LABEL_1920:
        v2583 = (uint8x8_t)(v2555 + 1);
        do
        {
          v2536 += 8;
          v2584 = v2556->u8[0];
          v2556 = (uint8x8_t *)((char *)v2556 + 1);
          *(_QWORD *)&v2535 |= (unint64_t)v2584 << v2558;
          *v2548 = v2583;
          v2558 -= 8;
          ++*(_QWORD *)&v2583;
        }
        while (v2558 >= v2546);
      }
    }
  }
  v2585 = (int8x8_t)(*(_QWORD *)&v2535 - (v2537 << 56));
  if (*(_QWORD *)&v2535 >= (unint64_t)(v2537 << 56))
  {
    LODWORD(v2537) = *(_DWORD *)(v1 + 10668) - v2537;
    v2586 = 32;
    v2535 = v2585;
  }
  else
  {
    v2586 = 0;
  }
  v2587 = vp8_norm[v2537];
  v2588 = (int8x8_t)(*(_QWORD *)&v2535 << v2587);
  v2589 = v2536 - v2587;
  *(int8x8_t *)(v1 + 10656) = v2588;
  *(_DWORD *)(v1 + 10664) = v2536 - v2587;
  *(_DWORD *)(v1 + 10668) = (_DWORD)v2537 << v2587;
  v2590 = ((((_DWORD)v2537 << v2587 << 7) - 128) >> 8) + 1;
  if (((v2536 - v2587) & 0x80000000) != 0)
  {
    v2591 = *(uint8x8_t **)(v1 + 10648);
    v2592 = 48 - v2589;
    v2593 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2591;
    v2594 = 8 * v2593;
    v2595 = 56 - 8 * v2593 - v2589;
    v2596 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v2596)
    {
      if (v2593 >= 9)
        v2597 = 9;
      else
        v2597 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2591;
      v2596(*(_QWORD *)(v1 + 10680), v2591, v4442, v2597);
      v2591 = (uint8x8_t *)v4442;
    }
    if (v2595 >= 0)
      v2589 += 0x40000000;
    if (v2594)
      v2598 = 1;
    else
      v2598 = v2595 <= -1;
    v2599 = v2595 & ~(v2595 >> 31);
    if (!v2598 || v2592 < v2599)
    {
      v1 = a1;
    }
    else
    {
      v1 = a1;
      v2601 = (uint8x8_t *)(a1 + 10648);
      v2602 = *(uint8x8_t *)(a1 + 10648);
      v2603 = v2587 - v2536 + 40;
      if (v2603 >= v2599 - 1)
        v2604 = v2599 - 1;
      else
        v2604 = v2587 - v2536 + 40;
      v2605 = v2587 - v2536 - v2604 + 47;
      if (v2605 < 0x78)
      {
        v2606 = *(_QWORD *)(a1 + 10648);
        v2607 = v2591;
        v2608 = v2592;
        goto LABEL_1962;
      }
      if (v2603 >= v2599 - 1)
        v2603 = v2599 - 1;
      if (v2601 < (uint8x8_t *)&v2591->i8[((v2587 - v2536 - v2603 + 47) >> 3) + 1]
        && (unint64_t)v2591 < a1 + 10656)
      {
        v2606 = *(_QWORD *)(a1 + 10648);
        v2607 = v2591;
        v2608 = v2592;
        goto LABEL_1962;
      }
      v2610 = (v2605 >> 3) + 1;
      v2606 = *(_QWORD *)&v2602 + (v2610 & 0x3FFFFFF8);
      v2607 = (uint8x8_t *)((char *)v2591 + (v2610 & 0x3FFFFFF8));
      v2611 = vdupq_n_s32(v2592);
      v2608 = v2592 - 8 * (v2610 & 0x3FFFFFF8);
      v2612 = vaddq_s32(v2611, (int32x4_t)xmmword_208F3A6A0);
      v2613 = vaddq_s32(v2611, (int32x4_t)xmmword_208F3A6B0);
      v2614 = 0uLL;
      v2615 = (int32x4_t)v2589;
      v2616 = (int8x16_t)(unint64_t)v2588;
      v2617.i64[0] = 0x800000008;
      v2617.i64[1] = 0x800000008;
      v2618.i64[0] = 0x3F0000003FLL;
      v2618.i64[1] = 0x3F0000003FLL;
      v2619 = v2610 & 0x3FFFFFF8;
      v2620 = 0uLL;
      v2621 = 0uLL;
      v2622 = 0uLL;
      do
      {
        v2615 = vaddq_s32(v2615, v2617);
        v2623 = *v2591++;
        v2614 = vaddq_s32(v2614, v2617);
        v2624 = vmovl_u8(v2623);
        v2625 = vmovl_high_u16(v2624);
        v2626.i64[0] = v2625.u32[2];
        v2626.i64[1] = v2625.u32[3];
        v2627 = v2626;
        v2626.i64[0] = v2625.u32[0];
        v2626.i64[1] = v2625.u32[1];
        v2628 = v2626;
        v2629 = vmovl_u16(*(uint16x4_t *)v2624.i8);
        v2626.i64[0] = v2629.u32[2];
        v2626.i64[1] = v2629.u32[3];
        v2630 = v2626;
        v2626.i64[0] = v2629.u32[0];
        v2626.i64[1] = v2629.u32[1];
        v2631 = v2626;
        v2626.i64[0] = v2612.u32[2];
        v2626.i64[1] = v2612.u32[3];
        v2632 = v2626;
        v2626.i64[0] = v2612.u32[0];
        v2626.i64[1] = v2612.u32[1];
        v2633 = v2626;
        v2626.i64[0] = v2613.u32[2];
        v2626.i64[1] = v2613.u32[3];
        v2634 = v2626;
        v2626.i64[0] = v2613.u32[0];
        v2626.i64[1] = v2613.u32[1];
        v2622 = vorrq_s8((int8x16_t)vshlq_u64(v2627, v2632), v2622);
        v2621 = vorrq_s8((int8x16_t)vshlq_u64(v2628, v2633), v2621);
        v2620 = vorrq_s8((int8x16_t)vshlq_u64(v2630, v2634), v2620);
        v2616 = vorrq_s8((int8x16_t)vshlq_u64(v2631, v2626), v2616);
        *(_QWORD *)&v2602 += 8;
        v2613 = vaddq_s32(v2613, v2618);
        v2612 = vaddq_s32(v2612, v2618);
        v2619 -= 8;
      }
      while (v2619);
      *v2601 = v2602;
      v2635 = vorrq_s8(vorrq_s8(v2616, v2621), vorrq_s8(v2620, v2622));
      v2588 = vorr_s8(*(int8x8_t *)v2635.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2635, v2635, 8uLL));
      v2589 = vaddvq_s32(vaddq_s32(v2615, v2614));
      if ((v2610 & 0x3FFFFFF8) != v2610)
      {
LABEL_1962:
        v2662 = (uint8x8_t)(v2606 + 1);
        do
        {
          v2589 += 8;
          v2663 = v2607->u8[0];
          v2607 = (uint8x8_t *)((char *)v2607 + 1);
          *(_QWORD *)&v2588 |= (unint64_t)v2663 << v2608;
          *v2601 = v2662;
          v2608 -= 8;
          ++*(_QWORD *)&v2662;
        }
        while (v2608 >= v2599);
      }
    }
  }
  v2664 = (int8x8_t)(*(_QWORD *)&v2588 - (v2590 << 56));
  if (*(_QWORD *)&v2588 >= (unint64_t)(v2590 << 56))
  {
    LODWORD(v2590) = *(_DWORD *)(v1 + 10668) - v2590;
    v2665 = 16;
    v2588 = v2664;
  }
  else
  {
    v2665 = 0;
  }
  v2666 = vp8_norm[v2590];
  v2667 = (_DWORD)v2590 << v2666;
  v2668 = (int8x8_t)(*(_QWORD *)&v2588 << v2666);
  v2669 = v2589 - v2666;
  *(int8x8_t *)(v1 + 10656) = v2668;
  *(_DWORD *)(v1 + 10664) = v2589 - v2666;
  *(_DWORD *)(v1 + 10668) = v2667;
  v2670 = (((v2667 << 7) - 128) >> 8) + 1;
  if (((v2589 - v2666) & 0x80000000) != 0)
  {
    v2672 = *(uint8x8_t **)(v1 + 10648);
    v2673 = 48 - v2669;
    v2674 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2672;
    v2675 = 8 * v2674;
    v2676 = 56 - 8 * v2674 - v2669;
    v2677 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v2677)
    {
      if (v2674 >= 9)
        v2678 = 9;
      else
        v2678 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2672;
      v2677(*(_QWORD *)(v1 + 10680), v2672, v4442, v2678);
      v2672 = (uint8x8_t *)v4442;
    }
    if (v2676 >= 0)
      v2669 += 0x40000000;
    if (v2675)
      v2679 = 1;
    else
      v2679 = v2676 <= -1;
    v2680 = v2676 & ~(v2676 >> 31);
    if (!v2679 || v2673 < v2680)
    {
      v1 = a1;
      v2671 = v4435;
    }
    else
    {
      v1 = a1;
      v2682 = (uint8x8_t *)(a1 + 10648);
      v2683 = *(uint8x8_t *)(a1 + 10648);
      v2684 = v2666 - v2589 + 40;
      if (v2684 >= v2680 - 1)
        v2685 = v2680 - 1;
      else
        v2685 = v2666 - v2589 + 40;
      v2686 = v2666 - v2589 - v2685 + 47;
      if (v2686 >= 0x78)
      {
        if (v2684 >= v2680 - 1)
          v2684 = v2680 - 1;
        v2690 = v2682 >= (uint8x8_t *)&v2672->i8[((v2666 - v2589 - v2684 + 47) >> 3) + 1]
             || (unint64_t)v2672 >= a1 + 10656;
        v2671 = v4435;
        if (v2690)
        {
          v2691 = (v2686 >> 3) + 1;
          v2687 = *(_QWORD *)&v2683 + (v2691 & 0x3FFFFFF8);
          v2688 = (uint8x8_t *)((char *)v2672 + (v2691 & 0x3FFFFFF8));
          v2692 = vdupq_n_s32(v2673);
          v2689 = v2673 - 8 * (v2691 & 0x3FFFFFF8);
          v2693 = vaddq_s32(v2692, (int32x4_t)xmmword_208F3A6A0);
          v2694 = vaddq_s32(v2692, (int32x4_t)xmmword_208F3A6B0);
          v2695 = 0uLL;
          v2696 = (int32x4_t)v2669;
          v2697 = (int8x16_t)(unint64_t)v2668;
          v2698.i64[0] = 0x800000008;
          v2698.i64[1] = 0x800000008;
          v2699.i64[0] = 0x3F0000003FLL;
          v2699.i64[1] = 0x3F0000003FLL;
          v2700 = v2691 & 0x3FFFFFF8;
          v2701 = 0uLL;
          v2702 = 0uLL;
          v2703 = 0uLL;
          do
          {
            v2696 = vaddq_s32(v2696, v2698);
            v2704 = *v2672++;
            v2695 = vaddq_s32(v2695, v2698);
            v2705 = vmovl_u8(v2704);
            v2706 = vmovl_high_u16(v2705);
            v2707.i64[0] = v2706.u32[2];
            v2707.i64[1] = v2706.u32[3];
            v2708 = v2707;
            v2707.i64[0] = v2706.u32[0];
            v2707.i64[1] = v2706.u32[1];
            v2709 = v2707;
            v2710 = vmovl_u16(*(uint16x4_t *)v2705.i8);
            v2707.i64[0] = v2710.u32[2];
            v2707.i64[1] = v2710.u32[3];
            v2711 = v2707;
            v2707.i64[0] = v2710.u32[0];
            v2707.i64[1] = v2710.u32[1];
            v2712 = v2707;
            v2707.i64[0] = v2693.u32[2];
            v2707.i64[1] = v2693.u32[3];
            v2713 = v2707;
            v2707.i64[0] = v2693.u32[0];
            v2707.i64[1] = v2693.u32[1];
            v2714 = v2707;
            v2707.i64[0] = v2694.u32[2];
            v2707.i64[1] = v2694.u32[3];
            v2715 = v2707;
            v2707.i64[0] = v2694.u32[0];
            v2707.i64[1] = v2694.u32[1];
            v2703 = vorrq_s8((int8x16_t)vshlq_u64(v2708, v2713), v2703);
            v2702 = vorrq_s8((int8x16_t)vshlq_u64(v2709, v2714), v2702);
            v2701 = vorrq_s8((int8x16_t)vshlq_u64(v2711, v2715), v2701);
            v2697 = vorrq_s8((int8x16_t)vshlq_u64(v2712, v2707), v2697);
            *(_QWORD *)&v2683 += 8;
            v2694 = vaddq_s32(v2694, v2699);
            v2693 = vaddq_s32(v2693, v2699);
            v2700 -= 8;
          }
          while (v2700);
          *v2682 = v2683;
          v2716 = vorrq_s8(vorrq_s8(v2697, v2702), vorrq_s8(v2701, v2703));
          v2668 = vorr_s8(*(int8x8_t *)v2716.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2716, v2716, 8uLL));
          v2669 = vaddvq_s32(vaddq_s32(v2696, v2695));
          if ((v2691 & 0x3FFFFFF8) == v2691)
            goto LABEL_2002;
        }
        else
        {
          v2687 = *(_QWORD *)(a1 + 10648);
          v2688 = v2672;
          v2689 = v2673;
        }
      }
      else
      {
        v2687 = *(_QWORD *)(a1 + 10648);
        v2688 = v2672;
        v2689 = v2673;
        v2671 = v4435;
      }
      v2717 = (uint8x8_t)(v2687 + 1);
      do
      {
        v2669 += 8;
        v2718 = v2688->u8[0];
        v2688 = (uint8x8_t *)((char *)v2688 + 1);
        *(_QWORD *)&v2668 |= (unint64_t)v2718 << v2689;
        *v2682 = v2717;
        v2689 -= 8;
        ++*(_QWORD *)&v2717;
      }
      while (v2689 >= v2680);
    }
  }
  else
  {
    v2671 = v4435;
  }
LABEL_2002:
  v2719 = (int8x8_t)(*(_QWORD *)&v2668 - (v2670 << 56));
  if (*(_QWORD *)&v2668 >= (unint64_t)(v2670 << 56))
  {
    LODWORD(v2670) = *(_DWORD *)(v1 + 10668) - v2670;
    v2720 = 8;
    v2668 = v2719;
  }
  else
  {
    v2720 = 0;
  }
  v2721 = vp8_norm[v2670];
  v2722 = (_DWORD)v2670 << v2721;
  v2723 = (int8x8_t)(*(_QWORD *)&v2668 << v2721);
  v2724 = v2669 - v2721;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2668 << v2721;
  *(_DWORD *)(v1 + 10664) = v2669 - v2721;
  *(_DWORD *)(v1 + 10668) = v2722;
  v2725 = (((v2722 << 7) - 128) >> 8) + 1;
  if (((v2669 - v2721) & 0x80000000) != 0)
  {
    v4426 = v2720;
    v4436 = v2665;
    v2726 = v2586;
    v2727 = *(uint8x8_t **)(v1 + 10648);
    v2728 = 48 - v2724;
    v2729 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2727;
    v2730 = 8 * v2729;
    v2731 = 56 - 8 * v2729 - v2724;
    v2732 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v2732)
    {
      if (v2729 >= 9)
        v2733 = 9;
      else
        v2733 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2727;
      v2732(*(_QWORD *)(v1 + 10680), v2727, v4442, v2733);
      v2727 = (uint8x8_t *)v4442;
    }
    if (v2731 >= 0)
      v2724 += 0x40000000;
    if (v2730)
      v2734 = 1;
    else
      v2734 = v2731 <= -1;
    v2735 = v2731 & ~(v2731 >> 31);
    if (!v2734 || v2728 < v2735)
    {
      v1 = a1;
      v2586 = v2726;
      v2665 = v4436;
      v2720 = v4426;
    }
    else
    {
      v1 = a1;
      v2737 = (uint8x8_t *)(a1 + 10648);
      v2738 = *(uint8x8_t *)(a1 + 10648);
      v2739 = v2721 - v2669 + 40;
      if (v2739 >= v2735 - 1)
        v2740 = v2735 - 1;
      else
        v2740 = v2721 - v2669 + 40;
      v2741 = v2721 - v2669 - v2740 + 47;
      v2586 = v2726;
      v2720 = v4426;
      if (v2741 < 0x78)
      {
        v2742 = *(_QWORD *)(a1 + 10648);
        v2743 = v2727;
        v2744 = v2728;
        v2665 = v4436;
        goto LABEL_2037;
      }
      if (v2739 >= v2735 - 1)
        v2739 = v2735 - 1;
      v2745 = v2737 >= (uint8x8_t *)&v2727->i8[((v2721 - v2669 - v2739 + 47) >> 3) + 1]
           || (unint64_t)v2727 >= a1 + 10656;
      v2665 = v4436;
      if (!v2745)
      {
        v2742 = *(_QWORD *)(a1 + 10648);
        v2743 = v2727;
        v2744 = v2728;
        goto LABEL_2037;
      }
      v2746 = (v2741 >> 3) + 1;
      v2742 = *(_QWORD *)&v2738 + (v2746 & 0x3FFFFFF8);
      v2743 = (uint8x8_t *)((char *)v2727 + (v2746 & 0x3FFFFFF8));
      v2747 = vdupq_n_s32(v2728);
      v2744 = v2728 - 8 * (v2746 & 0x3FFFFFF8);
      v2748 = vaddq_s32(v2747, (int32x4_t)xmmword_208F3A6A0);
      v2749 = vaddq_s32(v2747, (int32x4_t)xmmword_208F3A6B0);
      v2750 = 0uLL;
      v2751 = (int32x4_t)v2724;
      v2752 = (int8x16_t)(unint64_t)v2723;
      v2753.i64[0] = 0x800000008;
      v2753.i64[1] = 0x800000008;
      v2754.i64[0] = 0x3F0000003FLL;
      v2754.i64[1] = 0x3F0000003FLL;
      v2755 = v2746 & 0x3FFFFFF8;
      v2756 = 0uLL;
      v2757 = 0uLL;
      v2758 = 0uLL;
      do
      {
        v2751 = vaddq_s32(v2751, v2753);
        v2759 = *v2727++;
        v2750 = vaddq_s32(v2750, v2753);
        v2760 = vmovl_u8(v2759);
        v2761 = vmovl_high_u16(v2760);
        v2762.i64[0] = v2761.u32[2];
        v2762.i64[1] = v2761.u32[3];
        v2763 = v2762;
        v2762.i64[0] = v2761.u32[0];
        v2762.i64[1] = v2761.u32[1];
        v2764 = v2762;
        v2765 = vmovl_u16(*(uint16x4_t *)v2760.i8);
        v2762.i64[0] = v2765.u32[2];
        v2762.i64[1] = v2765.u32[3];
        v2766 = v2762;
        v2762.i64[0] = v2765.u32[0];
        v2762.i64[1] = v2765.u32[1];
        v2767 = v2762;
        v2762.i64[0] = v2748.u32[2];
        v2762.i64[1] = v2748.u32[3];
        v2768 = v2762;
        v2762.i64[0] = v2748.u32[0];
        v2762.i64[1] = v2748.u32[1];
        v2769 = v2762;
        v2762.i64[0] = v2749.u32[2];
        v2762.i64[1] = v2749.u32[3];
        v2770 = v2762;
        v2762.i64[0] = v2749.u32[0];
        v2762.i64[1] = v2749.u32[1];
        v2758 = vorrq_s8((int8x16_t)vshlq_u64(v2763, v2768), v2758);
        v2757 = vorrq_s8((int8x16_t)vshlq_u64(v2764, v2769), v2757);
        v2756 = vorrq_s8((int8x16_t)vshlq_u64(v2766, v2770), v2756);
        v2752 = vorrq_s8((int8x16_t)vshlq_u64(v2767, v2762), v2752);
        *(_QWORD *)&v2738 += 8;
        v2749 = vaddq_s32(v2749, v2754);
        v2748 = vaddq_s32(v2748, v2754);
        v2755 -= 8;
      }
      while (v2755);
      *v2737 = v2738;
      v2771 = vorrq_s8(vorrq_s8(v2752, v2757), vorrq_s8(v2756, v2758));
      v2723 = vorr_s8(*(int8x8_t *)v2771.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2771, v2771, 8uLL));
      v2724 = vaddvq_s32(vaddq_s32(v2751, v2750));
      if ((v2746 & 0x3FFFFFF8) != v2746)
      {
LABEL_2037:
        v2772 = (uint8x8_t)(v2742 + 1);
        do
        {
          v2724 += 8;
          v2773 = v2743->u8[0];
          v2743 = (uint8x8_t *)((char *)v2743 + 1);
          *(_QWORD *)&v2723 |= (unint64_t)v2773 << v2744;
          *v2737 = v2772;
          v2744 -= 8;
          ++*(_QWORD *)&v2772;
        }
        while (v2744 >= v2735);
      }
    }
  }
  v2774 = (int8x8_t)(*(_QWORD *)&v2723 - (v2725 << 56));
  if (*(_QWORD *)&v2723 >= (unint64_t)(v2725 << 56))
  {
    LODWORD(v2725) = *(_DWORD *)(v1 + 10668) - v2725;
    v2775 = 4;
    v2723 = v2774;
  }
  else
  {
    v2775 = 0;
  }
  v2776 = v2586 | v2671 | v2665;
  v2777 = vp8_norm[v2725];
  v2778 = (_DWORD)v2725 << v2777;
  v2779 = (int8x8_t)(*(_QWORD *)&v2723 << v2777);
  v2780 = v2724 - v2777;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2723 << v2777;
  *(_DWORD *)(v1 + 10664) = v2724 - v2777;
  *(_DWORD *)(v1 + 10668) = v2778;
  v2781 = (((v2778 << 7) - 128) >> 8) + 1;
  if (((v2724 - v2777) & 0x80000000) != 0)
  {
    v4437 = v2775;
    v2782 = *(uint8x8_t **)(v1 + 10648);
    v2783 = 48 - v2780;
    v2784 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2782;
    v2785 = 8 * v2784;
    v2786 = 56 - 8 * v2784 - v2780;
    v2787 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
    if (v2787)
    {
      if (v2784 >= 9)
        v2788 = 9;
      else
        v2788 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2782;
      v2789 = v2720;
      v2787(*(_QWORD *)(v1 + 10680), v2782, v4442, v2788);
      v2720 = v2789;
      v2782 = (uint8x8_t *)v4442;
    }
    if (v2786 >= 0)
      v2780 += 0x40000000;
    if (v2785)
      v2790 = 1;
    else
      v2790 = v2786 <= -1;
    v2791 = v2786 & ~(v2786 >> 31);
    if (!v2790 || v2783 < v2791)
    {
      v1 = a1;
      v2775 = v4437;
    }
    else
    {
      v1 = a1;
      v2793 = (uint8x8_t *)(a1 + 10648);
      v2794 = *(uint8x8_t *)(a1 + 10648);
      v2795 = v2777 - v2724 + 40;
      if (v2795 >= v2791 - 1)
        v2796 = v2791 - 1;
      else
        v2796 = v2777 - v2724 + 40;
      v2797 = v2777 - v2724 - v2796 + 47;
      if (v2797 < 0x78)
        goto LABEL_2074;
      if (v2795 >= v2791 - 1)
        v2795 = v2791 - 1;
      if (v2793 < (uint8x8_t *)&v2782->i8[((v2777 - v2724 - v2795 + 47) >> 3) + 1]
        && (unint64_t)v2782 < a1 + 10656)
      {
LABEL_2074:
        v2800 = *(_QWORD *)(a1 + 10648);
        v2801 = v2782;
        v2803 = v2783;
        v2775 = v4437;
        goto LABEL_2075;
      }
      v2799 = (v2797 >> 3) + 1;
      v2800 = *(_QWORD *)&v2794 + (v2799 & 0x3FFFFFF8);
      v2801 = (uint8x8_t *)((char *)v2782 + (v2799 & 0x3FFFFFF8));
      v2802 = vdupq_n_s32(v2783);
      v2803 = v2783 - 8 * (v2799 & 0x3FFFFFF8);
      v2804 = vaddq_s32(v2802, (int32x4_t)xmmword_208F3A6A0);
      v2805 = vaddq_s32(v2802, (int32x4_t)xmmword_208F3A6B0);
      v2806 = 0uLL;
      v2807 = (int32x4_t)v2780;
      v2808 = (int8x16_t)(unint64_t)v2779;
      v2809.i64[0] = 0x800000008;
      v2809.i64[1] = 0x800000008;
      v2810.i64[0] = 0x3F0000003FLL;
      v2810.i64[1] = 0x3F0000003FLL;
      v2811 = v2799 & 0x3FFFFFF8;
      v2812 = 0uLL;
      v2813 = 0uLL;
      v2814 = 0uLL;
      do
      {
        v2807 = vaddq_s32(v2807, v2809);
        v2815 = *v2782++;
        v2806 = vaddq_s32(v2806, v2809);
        v2816 = vmovl_u8(v2815);
        v2817 = vmovl_high_u16(v2816);
        v2818.i64[0] = v2817.u32[2];
        v2818.i64[1] = v2817.u32[3];
        v2819 = v2818;
        v2818.i64[0] = v2817.u32[0];
        v2818.i64[1] = v2817.u32[1];
        v2820 = v2818;
        v2821 = vmovl_u16(*(uint16x4_t *)v2816.i8);
        v2818.i64[0] = v2821.u32[2];
        v2818.i64[1] = v2821.u32[3];
        v2822 = v2818;
        v2818.i64[0] = v2821.u32[0];
        v2818.i64[1] = v2821.u32[1];
        v2823 = v2818;
        v2818.i64[0] = v2804.u32[2];
        v2818.i64[1] = v2804.u32[3];
        v2824 = v2818;
        v2818.i64[0] = v2804.u32[0];
        v2818.i64[1] = v2804.u32[1];
        v2825 = v2818;
        v2818.i64[0] = v2805.u32[2];
        v2818.i64[1] = v2805.u32[3];
        v2826 = v2818;
        v2818.i64[0] = v2805.u32[0];
        v2818.i64[1] = v2805.u32[1];
        v2814 = vorrq_s8((int8x16_t)vshlq_u64(v2819, v2824), v2814);
        v2813 = vorrq_s8((int8x16_t)vshlq_u64(v2820, v2825), v2813);
        v2812 = vorrq_s8((int8x16_t)vshlq_u64(v2822, v2826), v2812);
        v2808 = vorrq_s8((int8x16_t)vshlq_u64(v2823, v2818), v2808);
        *(_QWORD *)&v2794 += 8;
        v2805 = vaddq_s32(v2805, v2810);
        v2804 = vaddq_s32(v2804, v2810);
        v2811 -= 8;
      }
      while (v2811);
      *v2793 = v2794;
      v2827 = vorrq_s8(vorrq_s8(v2808, v2813), vorrq_s8(v2812, v2814));
      v2779 = vorr_s8(*(int8x8_t *)v2827.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2827, v2827, 8uLL));
      v2780 = vaddvq_s32(vaddq_s32(v2807, v2806));
      v2775 = v4437;
      if ((v2799 & 0x3FFFFFF8) != v2799)
      {
LABEL_2075:
        v2828 = (uint8x8_t)(v2800 + 1);
        do
        {
          v2780 += 8;
          v2829 = v2801->u8[0];
          v2801 = (uint8x8_t *)((char *)v2801 + 1);
          *(_QWORD *)&v2779 |= (unint64_t)v2829 << v2803;
          *v2793 = v2828;
          v2803 -= 8;
          ++*(_QWORD *)&v2828;
        }
        while (v2803 >= v2791);
      }
    }
  }
  v2830 = v2776 | v2720;
  v2831 = (int8x8_t)(*(_QWORD *)&v2779 - (v2781 << 56));
  if (*(_QWORD *)&v2779 >= (unint64_t)(v2781 << 56))
  {
    LODWORD(v2781) = *(_DWORD *)(v1 + 10668) - v2781;
    v2832 = 2;
    v2779 = v2831;
  }
  else
  {
    v2832 = 0;
  }
  v2833 = v2830 | v2775;
  v2834 = vp8_norm[v2781];
  v2835 = (_DWORD)v2781 << v2834;
  v2836 = (int8x8_t)(*(_QWORD *)&v2779 << v2834);
  v2837 = v2780 - v2834;
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2779 << v2834;
  *(_DWORD *)(v1 + 10664) = v2780 - v2834;
  *(_DWORD *)(v1 + 10668) = v2835;
  v2838 = (((v2835 << 7) - 128) >> 8) + 1;
  if (((v2780 - v2834) & 0x80000000) == 0)
    goto LABEL_2097;
  v2839 = *(uint8x8_t **)(v1 + 10648);
  v2840 = 48 - v2837;
  v2841 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2839;
  v2842 = 8 * v2841;
  v2843 = 56 - 8 * v2841 - v2837;
  v2844 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v1 + 10672);
  if (v2844)
  {
    if (v2841 >= 9)
      v2845 = 9;
    else
      v2845 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2839;
    v2844(*(_QWORD *)(v1 + 10680), v2839, v4442, v2845);
    v2839 = (uint8x8_t *)v4442;
  }
  if (v2843 >= 0)
    v2837 += 0x40000000;
  if (v2842)
    v2846 = 1;
  else
    v2846 = v2843 <= -1;
  v2847 = v2843 & ~(v2843 >> 31);
  if (!v2846 || v2840 < v2847)
  {
    v1 = a1;
LABEL_2097:
    v2849 = v4408;
    goto LABEL_2098;
  }
  v1 = a1;
  v2920 = (uint8x8_t *)(a1 + 10648);
  v2921 = *(uint8x8_t *)(a1 + 10648);
  v2922 = v2834 - v2780 + 40;
  if (v2922 >= v2847 - 1)
    v2923 = v2847 - 1;
  else
    v2923 = v2834 - v2780 + 40;
  v2924 = v2834 - v2780 - v2923 + 47;
  if (v2924 < 0x78)
  {
    v2925 = *(_QWORD *)(a1 + 10648);
    v2926 = v2839;
    v2927 = v2840;
    v2849 = v4408;
    goto LABEL_2263;
  }
  if (v2922 >= v2847 - 1)
    v2922 = v2847 - 1;
  v3003 = v2920 >= (uint8x8_t *)&v2839->i8[((v2834 - v2780 - v2922 + 47) >> 3) + 1]
       || (unint64_t)v2839 >= a1 + 10656;
  v2849 = v4408;
  if (!v3003)
  {
    v2925 = *(_QWORD *)(a1 + 10648);
    v2926 = v2839;
    v2927 = v2840;
    goto LABEL_2263;
  }
  v3004 = (v2924 >> 3) + 1;
  v2925 = *(_QWORD *)&v2921 + (v3004 & 0x3FFFFFF8);
  v2926 = (uint8x8_t *)((char *)v2839 + (v3004 & 0x3FFFFFF8));
  v3005 = vdupq_n_s32(v2840);
  v2927 = v2840 - 8 * (v3004 & 0x3FFFFFF8);
  v3006 = vaddq_s32(v3005, (int32x4_t)xmmword_208F3A6A0);
  v3007 = vaddq_s32(v3005, (int32x4_t)xmmword_208F3A6B0);
  v3008 = 0uLL;
  v3009 = (int32x4_t)v2837;
  v3010 = (int8x16_t)(unint64_t)v2836;
  v3011.i64[0] = 0x800000008;
  v3011.i64[1] = 0x800000008;
  v3012.i64[0] = 0x3F0000003FLL;
  v3012.i64[1] = 0x3F0000003FLL;
  v3013 = v3004 & 0x3FFFFFF8;
  v3014 = 0uLL;
  v3015 = 0uLL;
  v3016 = 0uLL;
  do
  {
    v3009 = vaddq_s32(v3009, v3011);
    v3017 = *v2839++;
    v3008 = vaddq_s32(v3008, v3011);
    v3018 = vmovl_u8(v3017);
    v3019 = vmovl_high_u16(v3018);
    v3020.i64[0] = v3019.u32[2];
    v3020.i64[1] = v3019.u32[3];
    v3021 = v3020;
    v3020.i64[0] = v3019.u32[0];
    v3020.i64[1] = v3019.u32[1];
    v3022 = v3020;
    v3023 = vmovl_u16(*(uint16x4_t *)v3018.i8);
    v3020.i64[0] = v3023.u32[2];
    v3020.i64[1] = v3023.u32[3];
    v3024 = v3020;
    v3020.i64[0] = v3023.u32[0];
    v3020.i64[1] = v3023.u32[1];
    v3025 = v3020;
    v3020.i64[0] = v3006.u32[2];
    v3020.i64[1] = v3006.u32[3];
    v3026 = v3020;
    v3020.i64[0] = v3006.u32[0];
    v3020.i64[1] = v3006.u32[1];
    v3027 = v3020;
    v3020.i64[0] = v3007.u32[2];
    v3020.i64[1] = v3007.u32[3];
    v3028 = v3020;
    v3020.i64[0] = v3007.u32[0];
    v3020.i64[1] = v3007.u32[1];
    v3016 = vorrq_s8((int8x16_t)vshlq_u64(v3021, v3026), v3016);
    v3015 = vorrq_s8((int8x16_t)vshlq_u64(v3022, v3027), v3015);
    v3014 = vorrq_s8((int8x16_t)vshlq_u64(v3024, v3028), v3014);
    v3010 = vorrq_s8((int8x16_t)vshlq_u64(v3025, v3020), v3010);
    *(_QWORD *)&v2921 += 8;
    v3007 = vaddq_s32(v3007, v3012);
    v3006 = vaddq_s32(v3006, v3012);
    v3013 -= 8;
  }
  while (v3013);
  *v2920 = v2921;
  v3029 = vorrq_s8(vorrq_s8(v3010, v3015), vorrq_s8(v3014, v3016));
  v2836 = vorr_s8(*(int8x8_t *)v3029.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3029, v3029, 8uLL));
  v2837 = vaddvq_s32(vaddq_s32(v3009, v3008));
  if ((v3004 & 0x3FFFFFF8) != v3004)
  {
LABEL_2263:
    v3052 = (uint8x8_t)(v2925 + 1);
    do
    {
      v2837 += 8;
      v3053 = v2926->u8[0];
      v2926 = (uint8x8_t *)((char *)v2926 + 1);
      *(_QWORD *)&v2836 |= (unint64_t)v3053 << v2927;
      *v2920 = v3052;
      v2927 -= 8;
      ++*(_QWORD *)&v3052;
    }
    while (v2927 >= v2847);
  }
LABEL_2098:
  v2850 = (int8x8_t)(*(_QWORD *)&v2836 - (v2838 << 56));
  if (*(_QWORD *)&v2836 >= (unint64_t)(v2838 << 56))
  {
    LODWORD(v2838) = *(_DWORD *)(v1 + 10668) - v2838;
    v2851 = 1;
    v2836 = v2850;
  }
  else
  {
    v2851 = 0;
  }
  v2852 = vp8_norm[v2838];
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2836 << v2852;
  *(_DWORD *)(v1 + 10664) = v2837 - v2852;
  *(_DWORD *)(v1 + 10668) = (_DWORD)v2838 << v2852;
  *(_DWORD *)(v1 + 7456) = v2833 | v2832 | v2851;
  v4441[0] = 0;
  *(_DWORD *)(a1 + 7460) = get_delta_q(v2849, *(_DWORD *)(v1 + 7460), v4441);
  *(_DWORD *)(a1 + 7464) = get_delta_q(v2849, *(_DWORD *)(a1 + 7464), v4441);
  *(_DWORD *)(a1 + 7468) = get_delta_q(v2849, *(_DWORD *)(a1 + 7468), v4441);
  *(_DWORD *)(a1 + 7472) = get_delta_q(v2849, *(_DWORD *)(a1 + 7472), v4441);
  delta_q = get_delta_q(v2849, *(_DWORD *)(a1 + 7476), v4441);
  *(_DWORD *)(a1 + 7476) = delta_q;
  if (v4441[0])
  {
    v2854 = 0;
    v2855 = *(_DWORD *)(a1 + 7460);
    v2856 = *(_DWORD *)(a1 + 7464);
    v2857 = *(_DWORD *)(a1 + 7472);
    v2858 = (_WORD *)(a1 + 4672);
    v2859 = *(_DWORD *)(a1 + 7468);
    do
    {
      v2860 = (v2855 + v2854) & ~((v2855 + (int)v2854) >> 31);
      if (v2860 >= 127)
        v2860 = 127;
      *v2858 = dc_qlookup[v2860];
      v2861 = (v2856 + v2854) & ~((v2856 + (int)v2854) >> 31);
      if (v2861 >= 127)
        v2861 = 127;
      v2858[256] = 2 * LOWORD(dc_qlookup[v2861]);
      v2862 = (v2857 + v2854) & ~((v2857 + (int)v2854) >> 31);
      if (v2862 >= 127)
        v2862 = 127;
      v2863 = dc_qlookup[v2862];
      if (v2863 >= 132)
        LOWORD(v2863) = 132;
      v2858[512] = v2863;
      v2858[1] = ac_qlookup[v2854];
      v2864 = (v2859 + v2854) & ~((v2859 + (int)v2854) >> 31);
      if (v2864 >= 127)
        v2864 = 127;
      v2865 = (101581 * ac_qlookup[v2864]) >> 16;
      if (v2865 <= 8)
        LOWORD(v2865) = 8;
      v2858[257] = v2865;
      v2866 = (delta_q + v2854) & ~((delta_q + (int)v2854) >> 31);
      if (v2866 >= 127)
        v2866 = 127;
      v2858[513] = ac_qlookup[v2866];
      ++v2854;
      v2858 += 2;
    }
    while (v2854 != 128);
  }
  vp8_mb_init_dequantizer(a1, a1);
  v2867 = a1;
  if (!*(_DWORD *)(a1 + 7412))
  {
    v2873 = *(_DWORD *)(a1 + 10664);
    v2874 = *(int8x8_t *)(a1 + 10656);
    v2875 = (((*(_DWORD *)(a1 + 10668) << 7) - 128) >> 8) + 1;
    if ((v2873 & 0x80000000) == 0)
      goto LABEL_2727;
LABEL_2123:
    v2876 = *(uint8x8_t **)(v2867 + 10648);
    v2877 = 48 - v2873;
    v2878 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v2876;
    v2879 = 8 * v2878;
    v2880 = 56 - v2873 - 8 * v2878;
    v2881 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
    if (v2881)
    {
      if (v2878 >= 9)
        v2882 = 9;
      else
        v2882 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v2876;
      v2881(*(_QWORD *)(v2867 + 10680), v2876, v4442, v2882);
      v2876 = (uint8x8_t *)v4442;
    }
    if (v2880 < 0)
      v2883 = v2873;
    else
      v2883 = v2873 + 0x40000000;
    if (v2879)
      v2884 = 1;
    else
      v2884 = v2880 <= -1;
    v2885 = v2880 & ~(v2880 >> 31);
    if (!v2884 || v2877 < v2885)
    {
      v2867 = a1;
      goto LABEL_2207;
    }
    v2867 = a1;
    v2928 = (uint8x8_t *)(a1 + 10648);
    v2929 = *(uint8x8_t *)(a1 + 10648);
    v2930 = v2885 - 1;
    if (v2885 - 1 >= (int)(40 - v2873))
      v2931 = 40 - v2873;
    else
      v2931 = v2885 - 1;
    v2932 = 47 - v2873 - v2931;
    if (v2932 < 0x78)
      goto LABEL_2204;
    if (v2930 >= (int)(40 - v2873))
      v2930 = 40 - v2873;
    if (v2928 >= (uint8x8_t *)&v2876->i8[((47 - v2873 - v2930) >> 3) + 1] || (unint64_t)v2876 >= a1 + 10656)
    {
      v2934 = (v2932 >> 3) + 1;
      v2935 = *(_QWORD *)&v2929 + (v2934 & 0x3FFFFFF8);
      v2936 = (uint8x8_t *)((char *)v2876 + (v2934 & 0x3FFFFFF8));
      v2937 = vdupq_n_s32(v2877);
      v2938 = v2877 - 8 * (v2934 & 0x3FFFFFF8);
      v2939 = vaddq_s32(v2937, (int32x4_t)xmmword_208F3A6A0);
      v2940 = vaddq_s32(v2937, (int32x4_t)xmmword_208F3A6B0);
      v2941 = 0uLL;
      v2942 = (int32x4_t)v2883;
      v2943 = (int8x16_t)(unint64_t)v2874;
      v2944.i64[0] = 0x800000008;
      v2944.i64[1] = 0x800000008;
      v2945.i64[0] = 0x3F0000003FLL;
      v2945.i64[1] = 0x3F0000003FLL;
      v2946 = v2934 & 0x3FFFFFF8;
      v2947 = 0uLL;
      v2948 = 0uLL;
      v2949 = 0uLL;
      do
      {
        v2942 = vaddq_s32(v2942, v2944);
        v2950 = *v2876++;
        v2941 = vaddq_s32(v2941, v2944);
        v2951 = vmovl_u8(v2950);
        v2952 = vmovl_high_u16(v2951);
        v2953.i64[0] = v2952.u32[2];
        v2953.i64[1] = v2952.u32[3];
        v2954 = v2953;
        v2953.i64[0] = v2952.u32[0];
        v2953.i64[1] = v2952.u32[1];
        v2955 = v2953;
        v2956 = vmovl_u16(*(uint16x4_t *)v2951.i8);
        v2953.i64[0] = v2956.u32[2];
        v2953.i64[1] = v2956.u32[3];
        v2957 = v2953;
        v2953.i64[0] = v2956.u32[0];
        v2953.i64[1] = v2956.u32[1];
        v2958 = v2953;
        v2953.i64[0] = v2939.u32[2];
        v2953.i64[1] = v2939.u32[3];
        v2959 = v2953;
        v2953.i64[0] = v2939.u32[0];
        v2953.i64[1] = v2939.u32[1];
        v2960 = v2953;
        v2953.i64[0] = v2940.u32[2];
        v2953.i64[1] = v2940.u32[3];
        v2961 = v2953;
        v2953.i64[0] = v2940.u32[0];
        v2953.i64[1] = v2940.u32[1];
        v2949 = vorrq_s8((int8x16_t)vshlq_u64(v2954, v2959), v2949);
        v2948 = vorrq_s8((int8x16_t)vshlq_u64(v2955, v2960), v2948);
        v2947 = vorrq_s8((int8x16_t)vshlq_u64(v2957, v2961), v2947);
        v2943 = vorrq_s8((int8x16_t)vshlq_u64(v2958, v2953), v2943);
        *(_QWORD *)&v2929 += 8;
        v2940 = vaddq_s32(v2940, v2945);
        v2939 = vaddq_s32(v2939, v2945);
        v2946 -= 8;
      }
      while (v2946);
      *v2928 = v2929;
      v2962 = vorrq_s8(vorrq_s8(v2943, v2948), vorrq_s8(v2947, v2949));
      v2874 = vorr_s8(*(int8x8_t *)v2962.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2962, v2962, 8uLL));
      v2883 = vaddvq_s32(vaddq_s32(v2942, v2941));
      if ((v2934 & 0x3FFFFFF8) == v2934)
      {
LABEL_2207:
        v2873 = v2883;
        v2965 = v2875 << 56;
        v2966 = (int8x8_t)(*(_QWORD *)&v2874 - (v2875 << 56));
        if (*(_QWORD *)&v2874 < (unint64_t)(v2875 << 56))
          goto LABEL_2728;
        goto LABEL_2208;
      }
    }
    else
    {
LABEL_2204:
      v2935 = *(_QWORD *)(a1 + 10648);
      v2936 = v2876;
      v2938 = 48 - v2873;
    }
    v2963 = (uint8x8_t)(v2935 + 1);
    do
    {
      v2883 += 8;
      v2964 = v2936->u8[0];
      v2936 = (uint8x8_t *)((char *)v2936 + 1);
      *(_QWORD *)&v2874 |= (unint64_t)v2964 << v2938;
      *v2928 = v2963;
      v2938 -= 8;
      ++*(_QWORD *)&v2963;
    }
    while (v2938 >= v2885);
    goto LABEL_2207;
  }
  v2868 = (((*(_DWORD *)(a1 + 10668) << 7) - 128) >> 8) + 1;
  v2869 = *(_DWORD *)(a1 + 10664);
  v2870 = *(int8x8_t *)(a1 + 10656);
  if ((v2869 & 0x80000000) == 0)
  {
    v2871 = (int8x8_t)(*(_QWORD *)&v2870 - (v2868 << 56));
    if (*(_QWORD *)&v2870 < (unint64_t)(v2868 << 56))
      goto LABEL_2121;
LABEL_2166:
    LODWORD(v2868) = *(_DWORD *)(v2867 + 10668) - v2868;
    v2872 = 1;
    v2870 = v2871;
    goto LABEL_2167;
  }
  v2887 = *(uint8x8_t **)(a1 + 10648);
  v2888 = *(_QWORD *)(a1 + 10640) - (_QWORD)v2887;
  v2889 = 8 * v2888;
  v2890 = 56 - v2869 - 8 * v2888;
  v2891 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(a1 + 10672);
  if (v2891)
  {
    if (v2888 >= 9)
      v2892 = 9;
    else
      v2892 = *(_QWORD *)(a1 + 10640) - (_QWORD)v2887;
    v2891(*(_QWORD *)(a1 + 10680), v2887, v4442, v2892);
    v2867 = a1;
    v2887 = (uint8x8_t *)v4442;
  }
  if (v2890 < 0)
    v2893 = v2869;
  else
    v2893 = v2869 + 0x40000000;
  if (v2889)
    v2894 = 1;
  else
    v2894 = v2890 <= -1;
  if (v2894)
  {
    v2895 = 48 - v2869;
    v2896 = v2890 & ~(v2890 >> 31);
    if ((int)(48 - v2869) >= v2896)
    {
      v2897 = (uint8x8_t *)(v2867 + 10648);
      v2898 = *(uint8x8_t *)(v2867 + 10648);
      v2899 = v2896 - 1;
      if (v2896 - 1 >= (int)(40 - v2869))
        v2900 = 40 - v2869;
      else
        v2900 = v2896 - 1;
      v2901 = 47 - v2869 - v2900;
      if (v2901 < 0x78)
        goto LABEL_2162;
      if (v2899 >= (int)(40 - v2869))
        v2899 = 40 - v2869;
      if (v2897 < (uint8x8_t *)&v2887->i8[((47 - v2869 - v2899) >> 3) + 1] && (unint64_t)v2887 < v2867 + 10656)
      {
LABEL_2162:
        v2902 = *(_QWORD *)(v2867 + 10648);
        v2903 = v2887;
        goto LABEL_2163;
      }
      v4339 = (v2901 >> 3) + 1;
      v2902 = *(_QWORD *)&v2898 + (v4339 & 0x3FFFFFF8);
      v2903 = (uint8x8_t *)((char *)v2887 + (v4339 & 0x3FFFFFF8));
      v4340 = vdupq_n_s32(v2895);
      v2895 -= 8 * (v4339 & 0x3FFFFFF8);
      v4341 = vaddq_s32(v4340, (int32x4_t)xmmword_208F3A6A0);
      v4342 = vaddq_s32(v4340, (int32x4_t)xmmword_208F3A6B0);
      v4343 = 0uLL;
      v4344 = (int32x4_t)v2893;
      v4345 = (int8x16_t)(unint64_t)v2870;
      v4346.i64[0] = 0x800000008;
      v4346.i64[1] = 0x800000008;
      v4347.i64[0] = 0x3F0000003FLL;
      v4347.i64[1] = 0x3F0000003FLL;
      v4348 = v4339 & 0x3FFFFFF8;
      v4349 = 0uLL;
      v4350 = 0uLL;
      v4351 = 0uLL;
      do
      {
        v4344 = vaddq_s32(v4344, v4346);
        v4352 = *v2887++;
        v4343 = vaddq_s32(v4343, v4346);
        v4353 = vmovl_u8(v4352);
        v4354 = vmovl_high_u16(v4353);
        v4355.i64[0] = v4354.u32[2];
        v4355.i64[1] = v4354.u32[3];
        v4356 = v4355;
        v4355.i64[0] = v4354.u32[0];
        v4355.i64[1] = v4354.u32[1];
        v4357 = v4355;
        v4358 = vmovl_u16(*(uint16x4_t *)v4353.i8);
        v4355.i64[0] = v4358.u32[2];
        v4355.i64[1] = v4358.u32[3];
        v4359 = v4355;
        v4355.i64[0] = v4358.u32[0];
        v4355.i64[1] = v4358.u32[1];
        v4360 = v4355;
        v4355.i64[0] = v4341.u32[2];
        v4355.i64[1] = v4341.u32[3];
        v4361 = v4355;
        v4355.i64[0] = v4341.u32[0];
        v4355.i64[1] = v4341.u32[1];
        v4362 = v4355;
        v4355.i64[0] = v4342.u32[2];
        v4355.i64[1] = v4342.u32[3];
        v4363 = v4355;
        v4355.i64[0] = v4342.u32[0];
        v4355.i64[1] = v4342.u32[1];
        v4351 = vorrq_s8((int8x16_t)vshlq_u64(v4356, v4361), v4351);
        v4350 = vorrq_s8((int8x16_t)vshlq_u64(v4357, v4362), v4350);
        v4349 = vorrq_s8((int8x16_t)vshlq_u64(v4359, v4363), v4349);
        v4345 = vorrq_s8((int8x16_t)vshlq_u64(v4360, v4355), v4345);
        *(_QWORD *)&v2898 += 8;
        v4342 = vaddq_s32(v4342, v4347);
        v4341 = vaddq_s32(v4341, v4347);
        v4348 -= 8;
      }
      while (v4348);
      *v2897 = v2898;
      v4364 = vorrq_s8(vorrq_s8(v4345, v4350), vorrq_s8(v4349, v4351));
      v2870 = vorr_s8(*(int8x8_t *)v4364.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4364, v4364, 8uLL));
      v2893 = vaddvq_s32(vaddq_s32(v4344, v4343));
      if ((v4339 & 0x3FFFFFF8) != v4339)
      {
LABEL_2163:
        v2904 = (uint8x8_t)(v2902 + 1);
        do
        {
          v2893 += 8;
          v2905 = v2903->u8[0];
          v2903 = (uint8x8_t *)((char *)v2903 + 1);
          *(_QWORD *)&v2870 |= (unint64_t)v2905 << v2895;
          *v2897 = v2904;
          v2895 -= 8;
          ++*(_QWORD *)&v2904;
        }
        while (v2895 >= v2896);
      }
    }
  }
  v2869 = v2893;
  v2871 = (int8x8_t)(*(_QWORD *)&v2870 - (v2868 << 56));
  if (*(_QWORD *)&v2870 >= (unint64_t)(v2868 << 56))
    goto LABEL_2166;
LABEL_2121:
  v2872 = 0;
LABEL_2167:
  v2906 = vp8_norm[v2868];
  v2907 = (int8x8_t)(*(_QWORD *)&v2870 << v2906);
  v2908 = v2869 - v2906;
  *(int8x8_t *)(v2867 + 10656) = v2907;
  *(_DWORD *)(v2867 + 10664) = v2869 - v2906;
  *(_DWORD *)(v2867 + 10668) = (_DWORD)v2868 << v2906;
  *(_DWORD *)(v2867 + 7924) = v2872;
  v2909 = ((((_DWORD)v2868 << v2906 << 7) - 128) >> 8) + 1;
  if (((v2869 - v2906) & 0x80000000) != 0)
  {
    v2910 = *(uint8x8_t **)(v2867 + 10648);
    v2911 = 48 - v2908;
    v2912 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v2910;
    v2913 = 8 * v2912;
    v2914 = 56 - 8 * v2912 - v2908;
    v2915 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
    if (v2915)
    {
      if (v2912 >= 9)
        v2916 = 9;
      else
        v2916 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v2910;
      v2915(*(_QWORD *)(v2867 + 10680), v2910, v4442, v2916);
      v2910 = (uint8x8_t *)v4442;
    }
    if (v2914 >= 0)
      v2908 += 0x40000000;
    if (v2913)
      v2917 = 1;
    else
      v2917 = v2914 <= -1;
    v2918 = v2914 & ~(v2914 >> 31);
    if (!v2917 || v2911 < v2918)
    {
      v2867 = a1;
    }
    else
    {
      v2867 = a1;
      v2968 = (uint8x8_t *)(a1 + 10648);
      v2969 = *(uint8x8_t *)(a1 + 10648);
      v2970 = v2906 - v2869 + 40;
      if (v2970 >= v2918 - 1)
        v2971 = v2918 - 1;
      else
        v2971 = v2906 - v2869 + 40;
      v2972 = v2906 - v2869 - v2971 + 47;
      if (v2972 < 0x78)
        goto LABEL_2235;
      if (v2970 >= v2918 - 1)
        v2970 = v2918 - 1;
      if (v2968 < (uint8x8_t *)&v2910->i8[((v2906 - v2869 - v2970 + 47) >> 3) + 1]
        && (unint64_t)v2910 < a1 + 10656)
      {
LABEL_2235:
        v2975 = *(_QWORD *)(a1 + 10648);
        v2976 = v2910;
        v2978 = v2911;
        goto LABEL_2236;
      }
      v2974 = (v2972 >> 3) + 1;
      v2975 = *(_QWORD *)&v2969 + (v2974 & 0x3FFFFFF8);
      v2976 = (uint8x8_t *)((char *)v2910 + (v2974 & 0x3FFFFFF8));
      v2977 = vdupq_n_s32(v2911);
      v2978 = v2911 - 8 * (v2974 & 0x3FFFFFF8);
      v2979 = vaddq_s32(v2977, (int32x4_t)xmmword_208F3A6A0);
      v2980 = vaddq_s32(v2977, (int32x4_t)xmmword_208F3A6B0);
      v2981 = 0uLL;
      v2982 = (int32x4_t)v2908;
      v2983 = (int8x16_t)(unint64_t)v2907;
      v2984.i64[0] = 0x800000008;
      v2984.i64[1] = 0x800000008;
      v2985.i64[0] = 0x3F0000003FLL;
      v2985.i64[1] = 0x3F0000003FLL;
      v2986 = v2974 & 0x3FFFFFF8;
      v2987 = 0uLL;
      v2988 = 0uLL;
      v2989 = 0uLL;
      do
      {
        v2982 = vaddq_s32(v2982, v2984);
        v2990 = *v2910++;
        v2981 = vaddq_s32(v2981, v2984);
        v2991 = vmovl_u8(v2990);
        v2992 = vmovl_high_u16(v2991);
        v2993.i64[0] = v2992.u32[2];
        v2993.i64[1] = v2992.u32[3];
        v2994 = v2993;
        v2993.i64[0] = v2992.u32[0];
        v2993.i64[1] = v2992.u32[1];
        v2995 = v2993;
        v2996 = vmovl_u16(*(uint16x4_t *)v2991.i8);
        v2993.i64[0] = v2996.u32[2];
        v2993.i64[1] = v2996.u32[3];
        v2997 = v2993;
        v2993.i64[0] = v2996.u32[0];
        v2993.i64[1] = v2996.u32[1];
        v2998 = v2993;
        v2993.i64[0] = v2979.u32[2];
        v2993.i64[1] = v2979.u32[3];
        v2999 = v2993;
        v2993.i64[0] = v2979.u32[0];
        v2993.i64[1] = v2979.u32[1];
        v3000 = v2993;
        v2993.i64[0] = v2980.u32[2];
        v2993.i64[1] = v2980.u32[3];
        v3001 = v2993;
        v2993.i64[0] = v2980.u32[0];
        v2993.i64[1] = v2980.u32[1];
        v2989 = vorrq_s8((int8x16_t)vshlq_u64(v2994, v2999), v2989);
        v2988 = vorrq_s8((int8x16_t)vshlq_u64(v2995, v3000), v2988);
        v2987 = vorrq_s8((int8x16_t)vshlq_u64(v2997, v3001), v2987);
        v2983 = vorrq_s8((int8x16_t)vshlq_u64(v2998, v2993), v2983);
        *(_QWORD *)&v2969 += 8;
        v2980 = vaddq_s32(v2980, v2985);
        v2979 = vaddq_s32(v2979, v2985);
        v2986 -= 8;
      }
      while (v2986);
      *v2968 = v2969;
      v3002 = vorrq_s8(vorrq_s8(v2983, v2988), vorrq_s8(v2987, v2989));
      v2907 = vorr_s8(*(int8x8_t *)v3002.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3002, v3002, 8uLL));
      v2908 = vaddvq_s32(vaddq_s32(v2982, v2981));
      if ((v2974 & 0x3FFFFFF8) != v2974)
      {
LABEL_2236:
        v3030 = (uint8x8_t)(v2975 + 1);
        do
        {
          v2908 += 8;
          v3031 = v2976->u8[0];
          v2976 = (uint8x8_t *)((char *)v2976 + 1);
          *(_QWORD *)&v2907 |= (unint64_t)v3031 << v2978;
          *v2968 = v3030;
          v2978 -= 8;
          ++*(_QWORD *)&v3030;
        }
        while (v2978 >= v2918);
      }
    }
  }
  v3032 = (int8x8_t)(*(_QWORD *)&v2907 - (v2909 << 56));
  if (*(_QWORD *)&v2907 >= (unint64_t)(v2909 << 56))
  {
    LODWORD(v2909) = *(_DWORD *)(v2867 + 10668) - v2909;
    v3033 = 1;
    v2907 = v3032;
  }
  else
  {
    v3033 = 0;
  }
  v3034 = vp8_norm[v2909];
  v3035 = (_DWORD)v2909 << v3034;
  v3036 = (int8x8_t)(*(_QWORD *)&v2907 << v3034);
  v3037 = v2908 - v3034;
  *(int8x8_t *)(v2867 + 10656) = v3036;
  *(_DWORD *)(v2867 + 10664) = v2908 - v3034;
  *(_DWORD *)(v2867 + 10668) = v3035;
  *(_DWORD *)(v2867 + 7928) = v3033;
  *(_DWORD *)(v2867 + 7932) = 0;
  if (!*(_DWORD *)(v2867 + 7924))
  {
    v3041 = (((v3035 << 7) - 128) >> 8) + 1;
    if ((v3037 & 0x80000000) != 0)
    {
      v3042 = *(uint8x8_t **)(v2867 + 10648);
      v3043 = 48 - v3037;
      v3044 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3042;
      v3045 = 8 * v3044;
      v3046 = 56 - 8 * v3044 - v3037;
      v3047 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
      if (v3047)
      {
        if (v3044 >= 9)
          v3048 = 9;
        else
          v3048 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3042;
        v3047(*(_QWORD *)(v2867 + 10680), v3042, v4442, v3048);
        v3042 = (uint8x8_t *)v4442;
      }
      if (v3046 >= 0)
        v3037 += 0x40000000;
      if (v3045)
        v3049 = 1;
      else
        v3049 = v3046 <= -1;
      v3050 = v3046 & ~(v3046 >> 31);
      if (!v3049 || v3043 < v3050)
      {
        v2867 = a1;
      }
      else
      {
        v2867 = a1;
        v3054 = (uint8x8_t *)(a1 + 10648);
        v3055 = *(uint8x8_t *)(a1 + 10648);
        v3056 = v3034 - v2908 + 40;
        if (v3056 >= v3050 - 1)
          v3057 = v3050 - 1;
        else
          v3057 = v3034 - v2908 + 40;
        v3058 = v3034 - v2908 - v3057 + 47;
        if (v3058 < 0x78)
          goto LABEL_2530;
        if (v3056 >= v3050 - 1)
          v3056 = v3050 - 1;
        if (v3054 >= (uint8x8_t *)&v3042->i8[((v3034 - v2908 - v3056 + 47) >> 3) + 1]
          || (unint64_t)v3042 >= a1 + 10656)
        {
          v3060 = (v3058 >> 3) + 1;
          v3061 = *(_QWORD *)&v3055 + (v3060 & 0x3FFFFFF8);
          v3062 = (uint8x8_t *)((char *)v3042 + (v3060 & 0x3FFFFFF8));
          v3063 = vdupq_n_s32(v3043);
          v3064 = v3043 - 8 * (v3060 & 0x3FFFFFF8);
          v3065 = vaddq_s32(v3063, (int32x4_t)xmmword_208F3A6A0);
          v3066 = vaddq_s32(v3063, (int32x4_t)xmmword_208F3A6B0);
          v3067 = 0uLL;
          v3068 = (int32x4_t)v3037;
          v3069 = (int8x16_t)(unint64_t)v3036;
          v3070.i64[0] = 0x800000008;
          v3070.i64[1] = 0x800000008;
          v3071.i64[0] = 0x3F0000003FLL;
          v3071.i64[1] = 0x3F0000003FLL;
          v3072 = v3060 & 0x3FFFFFF8;
          v3073 = 0uLL;
          v3074 = 0uLL;
          v3075 = 0uLL;
          do
          {
            v3068 = vaddq_s32(v3068, v3070);
            v3076 = *v3042++;
            v3067 = vaddq_s32(v3067, v3070);
            v3077 = vmovl_u8(v3076);
            v3078 = vmovl_high_u16(v3077);
            v3079.i64[0] = v3078.u32[2];
            v3079.i64[1] = v3078.u32[3];
            v3080 = v3079;
            v3079.i64[0] = v3078.u32[0];
            v3079.i64[1] = v3078.u32[1];
            v3081 = v3079;
            v3082 = vmovl_u16(*(uint16x4_t *)v3077.i8);
            v3079.i64[0] = v3082.u32[2];
            v3079.i64[1] = v3082.u32[3];
            v3083 = v3079;
            v3079.i64[0] = v3082.u32[0];
            v3079.i64[1] = v3082.u32[1];
            v3084 = v3079;
            v3079.i64[0] = v3065.u32[2];
            v3079.i64[1] = v3065.u32[3];
            v3085 = v3079;
            v3079.i64[0] = v3065.u32[0];
            v3079.i64[1] = v3065.u32[1];
            v3086 = v3079;
            v3079.i64[0] = v3066.u32[2];
            v3079.i64[1] = v3066.u32[3];
            v3087 = v3079;
            v3079.i64[0] = v3066.u32[0];
            v3079.i64[1] = v3066.u32[1];
            v3075 = vorrq_s8((int8x16_t)vshlq_u64(v3080, v3085), v3075);
            v3074 = vorrq_s8((int8x16_t)vshlq_u64(v3081, v3086), v3074);
            v3073 = vorrq_s8((int8x16_t)vshlq_u64(v3083, v3087), v3073);
            v3069 = vorrq_s8((int8x16_t)vshlq_u64(v3084, v3079), v3069);
            *(_QWORD *)&v3055 += 8;
            v3066 = vaddq_s32(v3066, v3071);
            v3065 = vaddq_s32(v3065, v3071);
            v3072 -= 8;
          }
          while (v3072);
          *v3054 = v3055;
          v3088 = vorrq_s8(vorrq_s8(v3069, v3074), vorrq_s8(v3073, v3075));
          v3036 = vorr_s8(*(int8x8_t *)v3088.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3088, v3088, 8uLL));
          v3037 = vaddvq_s32(vaddq_s32(v3068, v3067));
          if ((v3060 & 0x3FFFFFF8) == v3060)
            goto LABEL_2533;
        }
        else
        {
LABEL_2530:
          v3061 = *(_QWORD *)(a1 + 10648);
          v3062 = v3042;
          v3064 = v3043;
        }
        v3411 = (uint8x8_t)(v3061 + 1);
        do
        {
          v3037 += 8;
          v3412 = v3062->u8[0];
          v3062 = (uint8x8_t *)((char *)v3062 + 1);
          *(_QWORD *)&v3036 |= (unint64_t)v3412 << v3064;
          *v3054 = v3411;
          v3064 -= 8;
          ++*(_QWORD *)&v3411;
        }
        while (v3064 >= v3050);
      }
    }
LABEL_2533:
    v3413 = (int8x8_t)(*(_QWORD *)&v3036 - (v3041 << 56));
    if (*(_QWORD *)&v3036 >= (unint64_t)(v3041 << 56))
    {
      LODWORD(v3041) = *(_DWORD *)(v2867 + 10668) - v3041;
      v3414 = 2;
      v3036 = v3413;
    }
    else
    {
      v3414 = 0;
    }
    v3415 = vp8_norm[v3041];
    v3416 = (_DWORD)v3041 << v3415;
    v3417 = (int8x8_t)(*(_QWORD *)&v3036 << v3415);
    v3418 = v3037 - v3415;
    *(_QWORD *)(v2867 + 10656) = *(_QWORD *)&v3036 << v3415;
    *(_DWORD *)(v2867 + 10664) = v3037 - v3415;
    *(_DWORD *)(v2867 + 10668) = v3416;
    v3419 = (((v3416 << 7) - 128) >> 8) + 1;
    if (((v3037 - v3415) & 0x80000000) != 0)
    {
      v3420 = *(uint8x8_t **)(v2867 + 10648);
      v3421 = 48 - v3418;
      v3422 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3420;
      v3423 = 8 * v3422;
      v3424 = 56 - 8 * v3422 - v3418;
      v3425 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
      if (v3425)
      {
        if (v3422 >= 9)
          v3426 = 9;
        else
          v3426 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3420;
        v3425(*(_QWORD *)(v2867 + 10680), v3420, v4442, v3426);
        v3420 = (uint8x8_t *)v4442;
      }
      if (v3424 >= 0)
        v3418 += 0x40000000;
      if (v3423)
        v3427 = 1;
      else
        v3427 = v3424 <= -1;
      v3428 = v3424 & ~(v3424 >> 31);
      if (!v3427 || v3421 < v3428)
      {
        v2867 = a1;
      }
      else
      {
        v2867 = a1;
        v3430 = (uint8x8_t *)(a1 + 10648);
        v3431 = *(uint8x8_t *)(a1 + 10648);
        v3432 = v3415 - v3037 + 40;
        if (v3432 >= v3428 - 1)
          v3433 = v3428 - 1;
        else
          v3433 = v3415 - v3037 + 40;
        v3434 = v3415 - v3037 - v3433 + 47;
        if (v3434 < 0x78)
          goto LABEL_2568;
        if (v3432 >= v3428 - 1)
          v3432 = v3428 - 1;
        if (v3430 >= (uint8x8_t *)&v3420->i8[((v3415 - v3037 - v3432 + 47) >> 3) + 1]
          || (unint64_t)v3420 >= a1 + 10656)
        {
          v3436 = (v3434 >> 3) + 1;
          v3437 = *(_QWORD *)&v3431 + (v3436 & 0x3FFFFFF8);
          v3438 = (uint8x8_t *)((char *)v3420 + (v3436 & 0x3FFFFFF8));
          v3439 = vdupq_n_s32(v3421);
          v3440 = v3421 - 8 * (v3436 & 0x3FFFFFF8);
          v3441 = vaddq_s32(v3439, (int32x4_t)xmmword_208F3A6A0);
          v3442 = vaddq_s32(v3439, (int32x4_t)xmmword_208F3A6B0);
          v3443 = 0uLL;
          v3444 = (int32x4_t)v3418;
          v3445 = (int8x16_t)(unint64_t)v3417;
          v3446.i64[0] = 0x800000008;
          v3446.i64[1] = 0x800000008;
          v3447.i64[0] = 0x3F0000003FLL;
          v3447.i64[1] = 0x3F0000003FLL;
          v3448 = v3436 & 0x3FFFFFF8;
          v3449 = 0uLL;
          v3450 = 0uLL;
          v3451 = 0uLL;
          do
          {
            v3444 = vaddq_s32(v3444, v3446);
            v3452 = *v3420++;
            v3443 = vaddq_s32(v3443, v3446);
            v3453 = vmovl_u8(v3452);
            v3454 = vmovl_high_u16(v3453);
            v3455.i64[0] = v3454.u32[2];
            v3455.i64[1] = v3454.u32[3];
            v3456 = v3455;
            v3455.i64[0] = v3454.u32[0];
            v3455.i64[1] = v3454.u32[1];
            v3457 = v3455;
            v3458 = vmovl_u16(*(uint16x4_t *)v3453.i8);
            v3455.i64[0] = v3458.u32[2];
            v3455.i64[1] = v3458.u32[3];
            v3459 = v3455;
            v3455.i64[0] = v3458.u32[0];
            v3455.i64[1] = v3458.u32[1];
            v3460 = v3455;
            v3455.i64[0] = v3441.u32[2];
            v3455.i64[1] = v3441.u32[3];
            v3461 = v3455;
            v3455.i64[0] = v3441.u32[0];
            v3455.i64[1] = v3441.u32[1];
            v3462 = v3455;
            v3455.i64[0] = v3442.u32[2];
            v3455.i64[1] = v3442.u32[3];
            v3463 = v3455;
            v3455.i64[0] = v3442.u32[0];
            v3455.i64[1] = v3442.u32[1];
            v3451 = vorrq_s8((int8x16_t)vshlq_u64(v3456, v3461), v3451);
            v3450 = vorrq_s8((int8x16_t)vshlq_u64(v3457, v3462), v3450);
            v3449 = vorrq_s8((int8x16_t)vshlq_u64(v3459, v3463), v3449);
            v3445 = vorrq_s8((int8x16_t)vshlq_u64(v3460, v3455), v3445);
            *(_QWORD *)&v3431 += 8;
            v3442 = vaddq_s32(v3442, v3447);
            v3441 = vaddq_s32(v3441, v3447);
            v3448 -= 8;
          }
          while (v3448);
          *v3430 = v3431;
          v3464 = vorrq_s8(vorrq_s8(v3445, v3450), vorrq_s8(v3449, v3451));
          v3417 = vorr_s8(*(int8x8_t *)v3464.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3464, v3464, 8uLL));
          v3418 = vaddvq_s32(vaddq_s32(v3444, v3443));
          if ((v3436 & 0x3FFFFFF8) == v3436)
            goto LABEL_2571;
        }
        else
        {
LABEL_2568:
          v3437 = *(_QWORD *)(a1 + 10648);
          v3438 = v3420;
          v3440 = v3421;
        }
        v3465 = (uint8x8_t)(v3437 + 1);
        do
        {
          v3418 += 8;
          v3466 = v3438->u8[0];
          v3438 = (uint8x8_t *)((char *)v3438 + 1);
          *(_QWORD *)&v3417 |= (unint64_t)v3466 << v3440;
          *v3430 = v3465;
          v3440 -= 8;
          ++*(_QWORD *)&v3465;
        }
        while (v3440 >= v3428);
      }
    }
LABEL_2571:
    v3467 = (int8x8_t)(*(_QWORD *)&v3417 - (v3419 << 56));
    if (*(_QWORD *)&v3417 >= (unint64_t)(v3419 << 56))
    {
      LODWORD(v3419) = *(_DWORD *)(v2867 + 10668) - v3419;
      v3468 = 1;
      v3417 = v3467;
    }
    else
    {
      v3468 = 0;
    }
    v3469 = vp8_norm[v3419];
    v3035 = (_DWORD)v3419 << v3469;
    v3036 = (int8x8_t)(*(_QWORD *)&v3417 << v3469);
    v3037 = v3418 - v3469;
    *(_QWORD *)(v2867 + 10656) = *(_QWORD *)&v3417 << v3469;
    *(_DWORD *)(v2867 + 10664) = v3418 - v3469;
    *(_DWORD *)(v2867 + 10668) = v3035;
    *(_DWORD *)(v2867 + 7932) = v3468 | v3414;
    v3470 = *(_DWORD *)(v2867 + 7928);
    *(_DWORD *)(v2867 + 7936) = 0;
    if (!v3470)
      goto LABEL_2575;
LABEL_2243:
    v3038 = (((v3035 << 7) - 128) >> 8) + 1;
    if ((v3037 & 0x80000000) != 0)
      goto LABEL_2651;
LABEL_2244:
    v3039 = (int8x8_t)(*(_QWORD *)&v3036 - (v3038 << 56));
    if (*(_QWORD *)&v3036 >= (unint64_t)(v3038 << 56))
      goto LABEL_2687;
    goto LABEL_2245;
  }
  *(_DWORD *)(v2867 + 7936) = 0;
  if (v3033)
    goto LABEL_2243;
LABEL_2575:
  v3471 = (((v3035 << 7) - 128) >> 8) + 1;
  if ((v3037 & 0x80000000) == 0)
  {
    v3472 = (int8x8_t)(*(_QWORD *)&v3036 - (v3471 << 56));
    if (*(_QWORD *)&v3036 < (unint64_t)(v3471 << 56))
      goto LABEL_2577;
LABEL_2611:
    LODWORD(v3471) = *(_DWORD *)(v2867 + 10668) - v3471;
    v3473 = 2;
    v3036 = v3472;
    goto LABEL_2612;
  }
  v3474 = *(uint8x8_t **)(v2867 + 10648);
  v3475 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3474;
  v3476 = 8 * v3475;
  v3477 = 56 - v3037 - 8 * v3475;
  v3478 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
  if (v3478)
  {
    if (v3475 >= 9)
      v3479 = 9;
    else
      v3479 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3474;
    v3478(*(_QWORD *)(v2867 + 10680), v3474, v4442, v3479);
    v2867 = a1;
    v3474 = (uint8x8_t *)v4442;
  }
  if (v3477 < 0)
    v3480 = v3037;
  else
    v3480 = v3037 + 0x40000000;
  if (v3476)
    v3481 = 1;
  else
    v3481 = v3477 <= -1;
  if (v3481)
  {
    v3482 = 48 - v3037;
    v3483 = v3477 & ~(v3477 >> 31);
    if ((int)(48 - v3037) >= v3483)
    {
      v3484 = (uint8x8_t *)(v2867 + 10648);
      v3485 = *(uint8x8_t *)(v2867 + 10648);
      v3486 = v3483 - 1;
      if (v3483 - 1 >= (int)(40 - v3037))
        v3487 = 40 - v3037;
      else
        v3487 = v3483 - 1;
      v3488 = 47 - v3037 - v3487;
      if (v3488 < 0x78)
        goto LABEL_2607;
      if (v3486 >= (int)(40 - v3037))
        v3486 = 40 - v3037;
      if (v3484 < (uint8x8_t *)&v3474->i8[((47 - v3037 - v3486) >> 3) + 1] && (unint64_t)v3474 < v2867 + 10656)
      {
LABEL_2607:
        v3491 = *(_QWORD *)(v2867 + 10648);
        v3492 = v3474;
        goto LABEL_2608;
      }
      v3490 = (v3488 >> 3) + 1;
      v3491 = *(_QWORD *)&v3485 + (v3490 & 0x3FFFFFF8);
      v3492 = (uint8x8_t *)((char *)v3474 + (v3490 & 0x3FFFFFF8));
      v3493 = vdupq_n_s32(v3482);
      v3482 -= 8 * (v3490 & 0x3FFFFFF8);
      v3494 = vaddq_s32(v3493, (int32x4_t)xmmword_208F3A6A0);
      v3495 = vaddq_s32(v3493, (int32x4_t)xmmword_208F3A6B0);
      v3496 = 0uLL;
      v3497 = (int32x4_t)v3480;
      v3498 = (int8x16_t)(unint64_t)v3036;
      v3499.i64[0] = 0x800000008;
      v3499.i64[1] = 0x800000008;
      v3500.i64[0] = 0x3F0000003FLL;
      v3500.i64[1] = 0x3F0000003FLL;
      v3501 = v3490 & 0x3FFFFFF8;
      v3502 = 0uLL;
      v3503 = 0uLL;
      v3504 = 0uLL;
      do
      {
        v3497 = vaddq_s32(v3497, v3499);
        v3505 = *v3474++;
        v3496 = vaddq_s32(v3496, v3499);
        v3506 = vmovl_u8(v3505);
        v3507 = vmovl_high_u16(v3506);
        v3508.i64[0] = v3507.u32[2];
        v3508.i64[1] = v3507.u32[3];
        v3509 = v3508;
        v3508.i64[0] = v3507.u32[0];
        v3508.i64[1] = v3507.u32[1];
        v3510 = v3508;
        v3511 = vmovl_u16(*(uint16x4_t *)v3506.i8);
        v3508.i64[0] = v3511.u32[2];
        v3508.i64[1] = v3511.u32[3];
        v3512 = v3508;
        v3508.i64[0] = v3511.u32[0];
        v3508.i64[1] = v3511.u32[1];
        v3513 = v3508;
        v3508.i64[0] = v3494.u32[2];
        v3508.i64[1] = v3494.u32[3];
        v3514 = v3508;
        v3508.i64[0] = v3494.u32[0];
        v3508.i64[1] = v3494.u32[1];
        v3515 = v3508;
        v3508.i64[0] = v3495.u32[2];
        v3508.i64[1] = v3495.u32[3];
        v3516 = v3508;
        v3508.i64[0] = v3495.u32[0];
        v3508.i64[1] = v3495.u32[1];
        v3504 = vorrq_s8((int8x16_t)vshlq_u64(v3509, v3514), v3504);
        v3503 = vorrq_s8((int8x16_t)vshlq_u64(v3510, v3515), v3503);
        v3502 = vorrq_s8((int8x16_t)vshlq_u64(v3512, v3516), v3502);
        v3498 = vorrq_s8((int8x16_t)vshlq_u64(v3513, v3508), v3498);
        *(_QWORD *)&v3485 += 8;
        v3495 = vaddq_s32(v3495, v3500);
        v3494 = vaddq_s32(v3494, v3500);
        v3501 -= 8;
      }
      while (v3501);
      *v3484 = v3485;
      v3517 = vorrq_s8(vorrq_s8(v3498, v3503), vorrq_s8(v3502, v3504));
      v3036 = vorr_s8(*(int8x8_t *)v3517.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3517, v3517, 8uLL));
      v3480 = vaddvq_s32(vaddq_s32(v3497, v3496));
      if ((v3490 & 0x3FFFFFF8) != v3490)
      {
LABEL_2608:
        v3518 = (uint8x8_t)(v3491 + 1);
        do
        {
          v3480 += 8;
          v3519 = v3492->u8[0];
          v3492 = (uint8x8_t *)((char *)v3492 + 1);
          *(_QWORD *)&v3036 |= (unint64_t)v3519 << v3482;
          *v3484 = v3518;
          v3482 -= 8;
          ++*(_QWORD *)&v3518;
        }
        while (v3482 >= v3483);
      }
    }
  }
  v3037 = v3480;
  v3472 = (int8x8_t)(*(_QWORD *)&v3036 - (v3471 << 56));
  if (*(_QWORD *)&v3036 >= (unint64_t)(v3471 << 56))
    goto LABEL_2611;
LABEL_2577:
  v3473 = 0;
LABEL_2612:
  v3520 = vp8_norm[v3471];
  v3521 = (_DWORD)v3471 << v3520;
  v3522 = (int8x8_t)(*(_QWORD *)&v3036 << v3520);
  v3523 = v3037 - v3520;
  *(_QWORD *)(v2867 + 10656) = *(_QWORD *)&v3036 << v3520;
  *(_DWORD *)(v2867 + 10664) = v3037 - v3520;
  *(_DWORD *)(v2867 + 10668) = v3521;
  v3524 = (((v3521 << 7) - 128) >> 8) + 1;
  if (((v3037 - v3520) & 0x80000000) != 0)
  {
    v3525 = *(uint8x8_t **)(v2867 + 10648);
    v3526 = 48 - v3523;
    v3527 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3525;
    v3528 = 8 * v3527;
    v3529 = 56 - 8 * v3527 - v3523;
    v3530 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
    if (v3530)
    {
      if (v3527 >= 9)
        v3531 = 9;
      else
        v3531 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3525;
      v3530(*(_QWORD *)(v2867 + 10680), v3525, v4442, v3531);
      v3525 = (uint8x8_t *)v4442;
    }
    if (v3529 >= 0)
      v3523 += 0x40000000;
    if (v3528)
      v3532 = 1;
    else
      v3532 = v3529 <= -1;
    v3533 = v3529 & ~(v3529 >> 31);
    if (!v3532 || v3526 < v3533)
    {
      v2867 = a1;
    }
    else
    {
      v2867 = a1;
      v3535 = (uint8x8_t *)(a1 + 10648);
      v3536 = *(uint8x8_t *)(a1 + 10648);
      v3537 = v3520 - v3037 + 40;
      if (v3537 >= v3533 - 1)
        v3538 = v3533 - 1;
      else
        v3538 = v3520 - v3037 + 40;
      v3539 = v3520 - v3037 - v3538 + 47;
      if (v3539 < 0x78)
        goto LABEL_2644;
      if (v3537 >= v3533 - 1)
        v3537 = v3533 - 1;
      if (v3535 < (uint8x8_t *)&v3525->i8[((v3520 - v3037 - v3537 + 47) >> 3) + 1]
        && (unint64_t)v3525 < a1 + 10656)
      {
LABEL_2644:
        v3542 = *(_QWORD *)(a1 + 10648);
        v3543 = v3525;
        v3545 = v3526;
        goto LABEL_2645;
      }
      v3541 = (v3539 >> 3) + 1;
      v3542 = *(_QWORD *)&v3536 + (v3541 & 0x3FFFFFF8);
      v3543 = (uint8x8_t *)((char *)v3525 + (v3541 & 0x3FFFFFF8));
      v3544 = vdupq_n_s32(v3526);
      v3545 = v3526 - 8 * (v3541 & 0x3FFFFFF8);
      v3546 = vaddq_s32(v3544, (int32x4_t)xmmword_208F3A6A0);
      v3547 = vaddq_s32(v3544, (int32x4_t)xmmword_208F3A6B0);
      v3548 = 0uLL;
      v3549 = (int32x4_t)v3523;
      v3550 = (int8x16_t)(unint64_t)v3522;
      v3551.i64[0] = 0x800000008;
      v3551.i64[1] = 0x800000008;
      v3552.i64[0] = 0x3F0000003FLL;
      v3552.i64[1] = 0x3F0000003FLL;
      v3553 = v3541 & 0x3FFFFFF8;
      v3554 = 0uLL;
      v3555 = 0uLL;
      v3556 = 0uLL;
      do
      {
        v3549 = vaddq_s32(v3549, v3551);
        v3557 = *v3525++;
        v3548 = vaddq_s32(v3548, v3551);
        v3558 = vmovl_u8(v3557);
        v3559 = vmovl_high_u16(v3558);
        v3560.i64[0] = v3559.u32[2];
        v3560.i64[1] = v3559.u32[3];
        v3561 = v3560;
        v3560.i64[0] = v3559.u32[0];
        v3560.i64[1] = v3559.u32[1];
        v3562 = v3560;
        v3563 = vmovl_u16(*(uint16x4_t *)v3558.i8);
        v3560.i64[0] = v3563.u32[2];
        v3560.i64[1] = v3563.u32[3];
        v3564 = v3560;
        v3560.i64[0] = v3563.u32[0];
        v3560.i64[1] = v3563.u32[1];
        v3565 = v3560;
        v3560.i64[0] = v3546.u32[2];
        v3560.i64[1] = v3546.u32[3];
        v3566 = v3560;
        v3560.i64[0] = v3546.u32[0];
        v3560.i64[1] = v3546.u32[1];
        v3567 = v3560;
        v3560.i64[0] = v3547.u32[2];
        v3560.i64[1] = v3547.u32[3];
        v3568 = v3560;
        v3560.i64[0] = v3547.u32[0];
        v3560.i64[1] = v3547.u32[1];
        v3556 = vorrq_s8((int8x16_t)vshlq_u64(v3561, v3566), v3556);
        v3555 = vorrq_s8((int8x16_t)vshlq_u64(v3562, v3567), v3555);
        v3554 = vorrq_s8((int8x16_t)vshlq_u64(v3564, v3568), v3554);
        v3550 = vorrq_s8((int8x16_t)vshlq_u64(v3565, v3560), v3550);
        *(_QWORD *)&v3536 += 8;
        v3547 = vaddq_s32(v3547, v3552);
        v3546 = vaddq_s32(v3546, v3552);
        v3553 -= 8;
      }
      while (v3553);
      *v3535 = v3536;
      v3569 = vorrq_s8(vorrq_s8(v3550, v3555), vorrq_s8(v3554, v3556));
      v3522 = vorr_s8(*(int8x8_t *)v3569.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3569, v3569, 8uLL));
      v3523 = vaddvq_s32(vaddq_s32(v3549, v3548));
      if ((v3541 & 0x3FFFFFF8) != v3541)
      {
LABEL_2645:
        v3570 = (uint8x8_t)(v3542 + 1);
        do
        {
          v3523 += 8;
          v3571 = v3543->u8[0];
          v3543 = (uint8x8_t *)((char *)v3543 + 1);
          *(_QWORD *)&v3522 |= (unint64_t)v3571 << v3545;
          *v3535 = v3570;
          v3545 -= 8;
          ++*(_QWORD *)&v3570;
        }
        while (v3545 >= v3533);
      }
    }
  }
  v3572 = (int8x8_t)(*(_QWORD *)&v3522 - (v3524 << 56));
  if (*(_QWORD *)&v3522 >= (unint64_t)(v3524 << 56))
  {
    LODWORD(v3524) = *(_DWORD *)(v2867 + 10668) - v3524;
    v3573 = 1;
    v3522 = v3572;
  }
  else
  {
    v3573 = 0;
  }
  v3574 = vp8_norm[v3524];
  v3575 = (_DWORD)v3524 << v3574;
  v3036 = (int8x8_t)(*(_QWORD *)&v3522 << v3574);
  v3037 = v3523 - v3574;
  *(_QWORD *)(v2867 + 10656) = *(_QWORD *)&v3522 << v3574;
  *(_DWORD *)(v2867 + 10664) = v3523 - v3574;
  *(_DWORD *)(v2867 + 10668) = v3575;
  *(_DWORD *)(v2867 + 7936) = v3573 | v3473;
  v3038 = (((v3575 << 7) - 128) >> 8) + 1;
  if (((v3523 - v3574) & 0x80000000) == 0)
    goto LABEL_2244;
LABEL_2651:
  v3576 = *(uint8x8_t **)(v2867 + 10648);
  v3577 = 48 - v3037;
  v3578 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3576;
  v3579 = 8 * v3578;
  v3580 = 56 - v3037 - 8 * v3578;
  v3581 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
  if (v3581)
  {
    if (v3578 >= 9)
      v3582 = 9;
    else
      v3582 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3576;
    v3581(*(_QWORD *)(v2867 + 10680), v3576, v4442, v3582);
    v3576 = (uint8x8_t *)v4442;
  }
  if (v3580 < 0)
    v3583 = v3037;
  else
    v3583 = v3037 + 0x40000000;
  if (v3579)
    v3584 = 1;
  else
    v3584 = v3580 <= -1;
  v3585 = v3580 & ~(v3580 >> 31);
  if (!v3584 || v3577 < v3585)
  {
    v2867 = a1;
  }
  else
  {
    v2867 = a1;
    v3587 = (uint8x8_t *)(a1 + 10648);
    v3588 = *(uint8x8_t *)(a1 + 10648);
    v3589 = v3585 - 1;
    if (v3585 - 1 >= (int)(40 - v3037))
      v3590 = 40 - v3037;
    else
      v3590 = v3585 - 1;
    v3591 = 47 - v3037 - v3590;
    if (v3591 < 0x78)
      goto LABEL_2683;
    if (v3589 >= (int)(40 - v3037))
      v3589 = 40 - v3037;
    if (v3587 < (uint8x8_t *)&v3576->i8[((47 - v3037 - v3589) >> 3) + 1] && (unint64_t)v3576 < a1 + 10656)
    {
LABEL_2683:
      v3594 = *(_QWORD *)(a1 + 10648);
      v3595 = v3576;
      v3597 = 48 - v3037;
      goto LABEL_2684;
    }
    v3593 = (v3591 >> 3) + 1;
    v3594 = *(_QWORD *)&v3588 + (v3593 & 0x3FFFFFF8);
    v3595 = (uint8x8_t *)((char *)v3576 + (v3593 & 0x3FFFFFF8));
    v3596 = vdupq_n_s32(v3577);
    v3597 = v3577 - 8 * (v3593 & 0x3FFFFFF8);
    v3598 = vaddq_s32(v3596, (int32x4_t)xmmword_208F3A6A0);
    v3599 = vaddq_s32(v3596, (int32x4_t)xmmword_208F3A6B0);
    v3600 = 0uLL;
    v3601 = (int32x4_t)v3583;
    v3602 = (int8x16_t)(unint64_t)v3036;
    v3603.i64[0] = 0x800000008;
    v3603.i64[1] = 0x800000008;
    v3604.i64[0] = 0x3F0000003FLL;
    v3604.i64[1] = 0x3F0000003FLL;
    v3605 = v3593 & 0x3FFFFFF8;
    v3606 = 0uLL;
    v3607 = 0uLL;
    v3608 = 0uLL;
    do
    {
      v3601 = vaddq_s32(v3601, v3603);
      v3609 = *v3576++;
      v3600 = vaddq_s32(v3600, v3603);
      v3610 = vmovl_u8(v3609);
      v3611 = vmovl_high_u16(v3610);
      v3612.i64[0] = v3611.u32[2];
      v3612.i64[1] = v3611.u32[3];
      v3613 = v3612;
      v3612.i64[0] = v3611.u32[0];
      v3612.i64[1] = v3611.u32[1];
      v3614 = v3612;
      v3615 = vmovl_u16(*(uint16x4_t *)v3610.i8);
      v3612.i64[0] = v3615.u32[2];
      v3612.i64[1] = v3615.u32[3];
      v3616 = v3612;
      v3612.i64[0] = v3615.u32[0];
      v3612.i64[1] = v3615.u32[1];
      v3617 = v3612;
      v3612.i64[0] = v3598.u32[2];
      v3612.i64[1] = v3598.u32[3];
      v3618 = v3612;
      v3612.i64[0] = v3598.u32[0];
      v3612.i64[1] = v3598.u32[1];
      v3619 = v3612;
      v3612.i64[0] = v3599.u32[2];
      v3612.i64[1] = v3599.u32[3];
      v3620 = v3612;
      v3612.i64[0] = v3599.u32[0];
      v3612.i64[1] = v3599.u32[1];
      v3608 = vorrq_s8((int8x16_t)vshlq_u64(v3613, v3618), v3608);
      v3607 = vorrq_s8((int8x16_t)vshlq_u64(v3614, v3619), v3607);
      v3606 = vorrq_s8((int8x16_t)vshlq_u64(v3616, v3620), v3606);
      v3602 = vorrq_s8((int8x16_t)vshlq_u64(v3617, v3612), v3602);
      *(_QWORD *)&v3588 += 8;
      v3599 = vaddq_s32(v3599, v3604);
      v3598 = vaddq_s32(v3598, v3604);
      v3605 -= 8;
    }
    while (v3605);
    *v3587 = v3588;
    v3621 = vorrq_s8(vorrq_s8(v3602, v3607), vorrq_s8(v3606, v3608));
    v3036 = vorr_s8(*(int8x8_t *)v3621.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3621, v3621, 8uLL));
    v3583 = vaddvq_s32(vaddq_s32(v3601, v3600));
    if ((v3593 & 0x3FFFFFF8) != v3593)
    {
LABEL_2684:
      v3622 = (uint8x8_t)(v3594 + 1);
      do
      {
        v3583 += 8;
        v3623 = v3595->u8[0];
        v3595 = (uint8x8_t *)((char *)v3595 + 1);
        *(_QWORD *)&v3036 |= (unint64_t)v3623 << v3597;
        *v3587 = v3622;
        v3597 -= 8;
        ++*(_QWORD *)&v3622;
      }
      while (v3597 >= v3585);
    }
  }
  v3037 = v3583;
  v3039 = (int8x8_t)(*(_QWORD *)&v3036 - (v3038 << 56));
  if (*(_QWORD *)&v3036 < (unint64_t)(v3038 << 56))
  {
LABEL_2245:
    v3040 = 0;
    goto LABEL_2688;
  }
LABEL_2687:
  LODWORD(v3038) = *(_DWORD *)(v2867 + 10668) - v3038;
  v3040 = 1;
  v3036 = v3039;
LABEL_2688:
  v3624 = vp8_norm[v3038];
  v3625 = (_DWORD)v3038 << v3624;
  v3626 = (int8x8_t)(*(_QWORD *)&v3036 << v3624);
  v3627 = v3037 - v3624;
  *(_QWORD *)(v2867 + 10656) = *(_QWORD *)&v3036 << v3624;
  *(_DWORD *)(v2867 + 10664) = v3037 - v3624;
  *(_DWORD *)(v2867 + 10668) = v3625;
  *(_DWORD *)(v2867 + 7952) = v3040;
  v3628 = (((v3625 << 7) - 128) >> 8) + 1;
  if (((v3037 - v3624) & 0x80000000) != 0)
  {
    v3629 = *(uint8x8_t **)(v2867 + 10648);
    v3630 = 48 - v3627;
    v3631 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3629;
    v3632 = 8 * v3631;
    v3633 = 56 - 8 * v3631 - v3627;
    v3634 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
    if (v3634)
    {
      if (v3631 >= 9)
        v3635 = 9;
      else
        v3635 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3629;
      v3634(*(_QWORD *)(v2867 + 10680), v3629, v4442, v3635);
      v3629 = (uint8x8_t *)v4442;
    }
    if (v3633 >= 0)
      v3627 += 0x40000000;
    if (v3632)
      v3636 = 1;
    else
      v3636 = v3633 <= -1;
    v3637 = v3633 & ~(v3633 >> 31);
    if (!v3636 || v3630 < v3637)
    {
      v2867 = a1;
    }
    else
    {
      v2867 = a1;
      v3639 = (uint8x8_t *)(a1 + 10648);
      v3640 = *(uint8x8_t *)(a1 + 10648);
      v3641 = v3624 - v3037 + 40;
      if (v3641 >= v3637 - 1)
        v3642 = v3637 - 1;
      else
        v3642 = v3624 - v3037 + 40;
      v3643 = v3624 - v3037 - v3642 + 47;
      if (v3643 < 0x78)
        goto LABEL_2720;
      if (v3641 >= v3637 - 1)
        v3641 = v3637 - 1;
      if (v3639 < (uint8x8_t *)&v3629->i8[((v3624 - v3037 - v3641 + 47) >> 3) + 1]
        && (unint64_t)v3629 < a1 + 10656)
      {
LABEL_2720:
        v3646 = *(_QWORD *)(a1 + 10648);
        v3647 = v3629;
        v3649 = v3630;
        goto LABEL_2721;
      }
      v3645 = (v3643 >> 3) + 1;
      v3646 = *(_QWORD *)&v3640 + (v3645 & 0x3FFFFFF8);
      v3647 = (uint8x8_t *)((char *)v3629 + (v3645 & 0x3FFFFFF8));
      v3648 = vdupq_n_s32(v3630);
      v3649 = v3630 - 8 * (v3645 & 0x3FFFFFF8);
      v3650 = vaddq_s32(v3648, (int32x4_t)xmmword_208F3A6A0);
      v3651 = vaddq_s32(v3648, (int32x4_t)xmmword_208F3A6B0);
      v3652 = 0uLL;
      v3653 = (int32x4_t)v3627;
      v3654 = (int8x16_t)(unint64_t)v3626;
      v3655.i64[0] = 0x800000008;
      v3655.i64[1] = 0x800000008;
      v3656.i64[0] = 0x3F0000003FLL;
      v3656.i64[1] = 0x3F0000003FLL;
      v3657 = v3645 & 0x3FFFFFF8;
      v3658 = 0uLL;
      v3659 = 0uLL;
      v3660 = 0uLL;
      do
      {
        v3653 = vaddq_s32(v3653, v3655);
        v3661 = *v3629++;
        v3652 = vaddq_s32(v3652, v3655);
        v3662 = vmovl_u8(v3661);
        v3663 = vmovl_high_u16(v3662);
        v3664.i64[0] = v3663.u32[2];
        v3664.i64[1] = v3663.u32[3];
        v3665 = v3664;
        v3664.i64[0] = v3663.u32[0];
        v3664.i64[1] = v3663.u32[1];
        v3666 = v3664;
        v3667 = vmovl_u16(*(uint16x4_t *)v3662.i8);
        v3664.i64[0] = v3667.u32[2];
        v3664.i64[1] = v3667.u32[3];
        v3668 = v3664;
        v3664.i64[0] = v3667.u32[0];
        v3664.i64[1] = v3667.u32[1];
        v3669 = v3664;
        v3664.i64[0] = v3650.u32[2];
        v3664.i64[1] = v3650.u32[3];
        v3670 = v3664;
        v3664.i64[0] = v3650.u32[0];
        v3664.i64[1] = v3650.u32[1];
        v3671 = v3664;
        v3664.i64[0] = v3651.u32[2];
        v3664.i64[1] = v3651.u32[3];
        v3672 = v3664;
        v3664.i64[0] = v3651.u32[0];
        v3664.i64[1] = v3651.u32[1];
        v3660 = vorrq_s8((int8x16_t)vshlq_u64(v3665, v3670), v3660);
        v3659 = vorrq_s8((int8x16_t)vshlq_u64(v3666, v3671), v3659);
        v3658 = vorrq_s8((int8x16_t)vshlq_u64(v3668, v3672), v3658);
        v3654 = vorrq_s8((int8x16_t)vshlq_u64(v3669, v3664), v3654);
        *(_QWORD *)&v3640 += 8;
        v3651 = vaddq_s32(v3651, v3656);
        v3650 = vaddq_s32(v3650, v3656);
        v3657 -= 8;
      }
      while (v3657);
      *v3639 = v3640;
      v3673 = vorrq_s8(vorrq_s8(v3654, v3659), vorrq_s8(v3658, v3660));
      v3626 = vorr_s8(*(int8x8_t *)v3673.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3673, v3673, 8uLL));
      v3627 = vaddvq_s32(vaddq_s32(v3653, v3652));
      if ((v3645 & 0x3FFFFFF8) != v3645)
      {
LABEL_2721:
        v3674 = (uint8x8_t)(v3646 + 1);
        do
        {
          v3627 += 8;
          v3675 = v3647->u8[0];
          v3647 = (uint8x8_t *)((char *)v3647 + 1);
          *(_QWORD *)&v3626 |= (unint64_t)v3675 << v3649;
          *v3639 = v3674;
          v3649 -= 8;
          ++*(_QWORD *)&v3674;
        }
        while (v3649 >= v3637);
      }
    }
  }
  v3676 = (int8x8_t)(*(_QWORD *)&v3626 - (v3628 << 56));
  if (*(_QWORD *)&v3626 >= (unint64_t)(v3628 << 56))
  {
    LODWORD(v3628) = *(_DWORD *)(v2867 + 10668) - v3628;
    v3677 = 1;
    v3626 = v3676;
  }
  else
  {
    v3677 = 0;
  }
  v3678 = vp8_norm[v3628];
  v2874 = (int8x8_t)(*(_QWORD *)&v3626 << v3678);
  v2873 = v3627 - v3678;
  *(int8x8_t *)(v2867 + 10656) = v2874;
  *(_DWORD *)(v2867 + 10664) = v3627 - v3678;
  v3679 = (_DWORD)v3628 << v3678;
  *(_DWORD *)(v2867 + 10668) = v3679;
  *(_DWORD *)(v2867 + 7956) = v3677;
  v2875 = (((v3679 << 7) - 128) >> 8) + 1;
  if ((v2873 & 0x80000000) != 0)
    goto LABEL_2123;
LABEL_2727:
  v2965 = v2875 << 56;
  v2966 = (int8x8_t)(*(_QWORD *)&v2874 - (v2875 << 56));
  if (*(_QWORD *)&v2874 >= (unint64_t)(v2875 << 56))
  {
LABEL_2208:
    LODWORD(v2875) = *(_DWORD *)(v2867 + 10668) - v2875;
    v2967 = 1;
    goto LABEL_2729;
  }
LABEL_2728:
  v2967 = 0;
  v2966 = v2874;
LABEL_2729:
  v3680 = vp8_norm[v2875];
  v3681 = (int8x8_t)(*(_QWORD *)&v2966 << v3680);
  v3682 = v2873 - v3680;
  *(_QWORD *)(v2867 + 10656) = *(_QWORD *)&v2966 << v3680;
  *(_DWORD *)(v2867 + 10664) = v2873 - v3680;
  *(_DWORD *)(v2867 + 10668) = (_DWORD)v2875 << v3680;
  *(_DWORD *)(v2867 + 7940) = v2967;
  if (*(_QWORD *)&v2874 < v2965)
  {
    memcpy((void *)(v2867 + 7977), (const void *)(v2867 + 9090), 0x459uLL);
    v2867 = a1;
  }
  if (*v4367)
  {
    v3683 = ((((_DWORD)v2875 << v3680 << 7) - 128) >> 8) + 1;
    if ((v3682 & 0x80000000) == 0)
    {
      v3684 = (int8x8_t)(*(_QWORD *)&v3681 - (v3683 << 56));
      v3685 = *(_QWORD *)&v3681 >= (unint64_t)(v3683 << 56);
      if (*(_QWORD *)&v3681 >= (unint64_t)(v3683 << 56))
        goto LABEL_2734;
      goto LABEL_2735;
    }
    v4254 = *(uint8x8_t **)(v2867 + 10648);
    v4255 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v4254;
    v4256 = 8 * v4255;
    v4257 = 56 - 8 * v4255 - v3682;
    v4258 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
    if (v4258)
    {
      if (v4255 >= 9)
        v4259 = 9;
      else
        v4259 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v4254;
      v4258(*(_QWORD *)(v2867 + 10680), v4254, v4442, v4259);
      v2867 = a1;
      v4254 = (uint8x8_t *)v4442;
    }
    if (v4257 < 0)
      v4260 = v2873 - v3680;
    else
      v4260 = v3682 + 0x40000000;
    if (v4256)
      v4261 = 1;
    else
      v4261 = v4257 <= -1;
    if (v4261)
    {
      v4262 = 48 - v3682;
      v4263 = v4257 & ~(v4257 >> 31);
      if ((int)(48 - v3682) >= v4263)
      {
        v4264 = (uint8x8_t *)(v2867 + 10648);
        v4265 = *(uint8x8_t *)(v2867 + 10648);
        v4266 = v3680 - v2873 + 40;
        if (v4266 >= v4263 - 1)
          v4267 = v4263 - 1;
        else
          v4267 = v3680 - v2873 + 40;
        v4268 = v3680 - v2873 - v4267 + 47;
        if (v4268 < 0x78)
          goto LABEL_3229;
        if (v4266 >= v4263 - 1)
          v4266 = v4263 - 1;
        if (v4264 < (uint8x8_t *)&v4254->i8[((v3680 - v2873 - v4266 + 47) >> 3) + 1]
          && (unint64_t)v4254 < v2867 + 10656)
        {
LABEL_3229:
          v4271 = *(_QWORD *)(v2867 + 10648);
          v4272 = v4254;
          goto LABEL_3230;
        }
        v4270 = (v4268 >> 3) + 1;
        v4271 = *(_QWORD *)&v4265 + (v4270 & 0x3FFFFFF8);
        v4272 = (uint8x8_t *)((char *)v4254 + (v4270 & 0x3FFFFFF8));
        v4273 = vdupq_n_s32(v4262);
        v4262 -= 8 * (v4270 & 0x3FFFFFF8);
        v4274 = vaddq_s32(v4273, (int32x4_t)xmmword_208F3A6A0);
        v4275 = vaddq_s32(v4273, (int32x4_t)xmmword_208F3A6B0);
        v4276 = 0uLL;
        v4277 = (int32x4_t)v4260;
        v4278 = (int8x16_t)(unint64_t)v3681;
        v4279.i64[0] = 0x800000008;
        v4279.i64[1] = 0x800000008;
        v4280.i64[0] = 0x3F0000003FLL;
        v4280.i64[1] = 0x3F0000003FLL;
        v4281 = v4270 & 0x3FFFFFF8;
        v4282 = 0uLL;
        v4283 = 0uLL;
        v4284 = 0uLL;
        do
        {
          v4277 = vaddq_s32(v4277, v4279);
          v4285 = *v4254++;
          v4276 = vaddq_s32(v4276, v4279);
          v4286 = vmovl_u8(v4285);
          v4287 = vmovl_high_u16(v4286);
          v4288.i64[0] = v4287.u32[2];
          v4288.i64[1] = v4287.u32[3];
          v4289 = v4288;
          v4288.i64[0] = v4287.u32[0];
          v4288.i64[1] = v4287.u32[1];
          v4290 = v4288;
          v4291 = vmovl_u16(*(uint16x4_t *)v4286.i8);
          v4288.i64[0] = v4291.u32[2];
          v4288.i64[1] = v4291.u32[3];
          v4292 = v4288;
          v4288.i64[0] = v4291.u32[0];
          v4288.i64[1] = v4291.u32[1];
          v4293 = v4288;
          v4288.i64[0] = v4274.u32[2];
          v4288.i64[1] = v4274.u32[3];
          v4294 = v4288;
          v4288.i64[0] = v4274.u32[0];
          v4288.i64[1] = v4274.u32[1];
          v4295 = v4288;
          v4288.i64[0] = v4275.u32[2];
          v4288.i64[1] = v4275.u32[3];
          v4296 = v4288;
          v4288.i64[0] = v4275.u32[0];
          v4288.i64[1] = v4275.u32[1];
          v4284 = vorrq_s8((int8x16_t)vshlq_u64(v4289, v4294), v4284);
          v4283 = vorrq_s8((int8x16_t)vshlq_u64(v4290, v4295), v4283);
          v4282 = vorrq_s8((int8x16_t)vshlq_u64(v4292, v4296), v4282);
          v4278 = vorrq_s8((int8x16_t)vshlq_u64(v4293, v4288), v4278);
          *(_QWORD *)&v4265 += 8;
          v4275 = vaddq_s32(v4275, v4280);
          v4274 = vaddq_s32(v4274, v4280);
          v4281 -= 8;
        }
        while (v4281);
        *v4264 = v4265;
        v4297 = vorrq_s8(vorrq_s8(v4278, v4283), vorrq_s8(v4282, v4284));
        v3681 = vorr_s8(*(int8x8_t *)v4297.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4297, v4297, 8uLL));
        v4260 = vaddvq_s32(vaddq_s32(v4277, v4276));
        if ((v4270 & 0x3FFFFFF8) != v4270)
        {
LABEL_3230:
          v4337 = (uint8x8_t)(v4271 + 1);
          do
          {
            v4260 += 8;
            v4338 = v4272->u8[0];
            v4272 = (uint8x8_t *)((char *)v4272 + 1);
            *(_QWORD *)&v3681 |= (unint64_t)v4338 << v4262;
            *v4264 = v4337;
            v4262 -= 8;
            ++*(_QWORD *)&v4337;
          }
          while (v4262 >= v4263);
        }
      }
    }
    v3682 = v4260;
    v3684 = (int8x8_t)(*(_QWORD *)&v3681 - (v3683 << 56));
    v3685 = *(_QWORD *)&v3681 >= (unint64_t)(v3683 << 56);
    if (*(_QWORD *)&v3681 >= (unint64_t)(v3683 << 56))
    {
LABEL_2734:
      LODWORD(v3683) = *(_DWORD *)(v2867 + 10668) - v3683;
      v3681 = v3684;
    }
LABEL_2735:
    v3686 = vp8_norm[v3683];
    *(_QWORD *)(v2867 + 10656) = *(_QWORD *)&v3681 << v3686;
    *(_DWORD *)(v2867 + 10664) = v3682 - v3686;
    *(_DWORD *)(v2867 + 10668) = (_DWORD)v3683 << v3686;
  }
  else
  {
    v3685 = 1;
  }
  v3687 = 0;
  *(_DWORD *)(v2867 + 7920) = v3685;
  *(_DWORD *)(v2867 + 10984) = 1;
  v3688 = (uint8x8_t *)(v2867 + 10648);
  v4391 = v2867 + 10656;
  v3689.i64[0] = 0x800000008;
  v3689.i64[1] = 0x800000008;
  v3690.i64[0] = 0x3F0000003FLL;
  v3690.i64[1] = 0x3F0000003FLL;
  while (2)
  {
    v4396 = 0;
    v4393 = v3687;
    while (2)
    {
      v3691 = 0;
      while (2)
      {
        v3692 = 0;
        v4427 = v3691;
        v4438 = v2867 + 264 * v3687 + 33 * v4396 + 11 * v3691 + 9109;
        v4395 = v3691 - 1;
        while (2)
        {
          v3693 = vp8_coef_update_probs[264 * v3687 + 33 * v4396 + 11 * v3691 + v3692];
          v3694 = *(_DWORD *)(v2867 + 10668);
          v3695 = *(_DWORD *)(v2867 + 10664);
          v3696 = *(int8x8_t *)(v2867 + 10656);
          if ((v3695 & 0x80000000) != 0)
          {
            v3697 = *(uint8x8_t **)(v2867 + 10648);
            v3698 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3697;
            v3699 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
            if (v3699)
            {
              if (v3698 >= 9)
                v3700 = 9;
              else
                v3700 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3697;
              v3699(*(_QWORD *)(v2867 + 10680), v3697, v4442, v3700);
              v3690.i64[0] = 0x3F0000003FLL;
              v3690.i64[1] = 0x3F0000003FLL;
              v3689.i64[0] = 0x800000008;
              v3689.i64[1] = 0x800000008;
              v2867 = a1;
              v3697 = (uint8x8_t *)v4442;
            }
            v3701 = 56 - v3695 - 8 * v3698;
            if (v3701 < 0)
              v3702 = v3695;
            else
              v3702 = v3695 + 0x40000000;
            if (8 * v3698)
              v3703 = 1;
            else
              v3703 = v3701 <= -1;
            if (v3703)
            {
              v3704 = 48 - v3695;
              v3705 = v3701 & ~(v3701 >> 31);
              if ((int)(48 - v3695) >= v3705)
              {
                v3706 = *v3688;
                v3707 = v3705 - 1;
                if (v3705 - 1 >= (int)(40 - v3695))
                  v3708 = 40 - v3695;
                else
                  v3708 = v3705 - 1;
                v3709 = 47 - v3695 - v3708;
                if (v3709 < 0x78)
                  goto LABEL_2775;
                if (v3707 >= (int)(40 - v3695))
                  v3707 = 40 - v3695;
                if (v3688 < (uint8x8_t *)&v3697->i8[((47 - v3695 - v3707) >> 3) + 1] && (unint64_t)v3697 < v4391)
                {
LABEL_2775:
                  v3712 = (uint64_t)*v3688;
                  v3713 = v3697;
                  v3714 = 48 - v3695;
                  goto LABEL_2776;
                }
                v3711 = (v3709 >> 3) + 1;
                v3712 = *(_QWORD *)&v3706 + (v3711 & 0x3FFFFFF8);
                v3713 = (uint8x8_t *)((char *)v3697 + (v3711 & 0x3FFFFFF8));
                v3714 = v3704 - 8 * (v3711 & 0x3FFFFFF8);
                v3715 = vdupq_n_s32(v3704);
                v3716 = vaddq_s32(v3715, (int32x4_t)xmmword_208F3A6A0);
                v3717 = vaddq_s32(v3715, (int32x4_t)xmmword_208F3A6B0);
                v3718 = 0uLL;
                v3719 = (int32x4_t)v3702;
                v3720 = (int8x16_t)(unint64_t)v3696;
                v3721 = v3711 & 0x3FFFFFF8;
                v3722 = 0uLL;
                v3723 = 0uLL;
                v3724 = 0uLL;
                do
                {
                  v3719 = vaddq_s32(v3719, v3689);
                  v3725 = *v3697++;
                  v3718 = vaddq_s32(v3718, v3689);
                  v3726 = vmovl_u8(v3725);
                  v3727 = vmovl_high_u16(v3726);
                  v3728.i64[0] = v3727.u32[2];
                  v3728.i64[1] = v3727.u32[3];
                  v3729 = v3728;
                  v3728.i64[0] = v3727.u32[0];
                  v3728.i64[1] = v3727.u32[1];
                  v3730 = v3728;
                  v3731 = vmovl_u16(*(uint16x4_t *)v3726.i8);
                  v3728.i64[0] = v3731.u32[2];
                  v3728.i64[1] = v3731.u32[3];
                  v3732 = v3728;
                  v3728.i64[0] = v3731.u32[0];
                  v3728.i64[1] = v3731.u32[1];
                  v3733 = v3728;
                  v3728.i64[0] = v3716.u32[2];
                  v3728.i64[1] = v3716.u32[3];
                  v3734 = v3728;
                  v3728.i64[0] = v3716.u32[0];
                  v3728.i64[1] = v3716.u32[1];
                  v3735 = v3728;
                  v3728.i64[0] = v3717.u32[2];
                  v3728.i64[1] = v3717.u32[3];
                  v3736 = v3728;
                  v3728.i64[0] = v3717.u32[0];
                  v3728.i64[1] = v3717.u32[1];
                  v3724 = vorrq_s8((int8x16_t)vshlq_u64(v3729, v3734), v3724);
                  v3723 = vorrq_s8((int8x16_t)vshlq_u64(v3730, v3735), v3723);
                  v3722 = vorrq_s8((int8x16_t)vshlq_u64(v3732, v3736), v3722);
                  v3720 = vorrq_s8((int8x16_t)vshlq_u64(v3733, v3728), v3720);
                  *(_QWORD *)&v3706 += 8;
                  v3717 = vaddq_s32(v3717, v3690);
                  v3716 = vaddq_s32(v3716, v3690);
                  v3721 -= 8;
                }
                while (v3721);
                *v3688 = v3706;
                v3737 = vorrq_s8(vorrq_s8(v3720, v3723), vorrq_s8(v3722, v3724));
                v3696 = vorr_s8(*(int8x8_t *)v3737.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3737, v3737, 8uLL));
                v3702 = vaddvq_s32(vaddq_s32(v3719, v3718));
                if ((v3711 & 0x3FFFFFF8) != v3711)
                {
LABEL_2776:
                  v3738 = (uint8x8_t)(v3712 + 1);
                  do
                  {
                    v3702 += 8;
                    v3739 = v3713->u8[0];
                    v3713 = (uint8x8_t *)((char *)v3713 + 1);
                    *(_QWORD *)&v3696 |= (unint64_t)v3739 << v3714;
                    *v3688 = v3738;
                    v3714 -= 8;
                    ++*(_QWORD *)&v3738;
                  }
                  while (v3714 >= v3705);
                }
              }
            }
            v3695 = v3702;
          }
          v3740 = (((v3694 - 1) * v3693) >> 8) + 1;
          v3741 = v3740 << 56;
          v3742 = v3696;
          v3743 = (int8x8_t)(*(_QWORD *)&v3696 - (v3740 << 56));
          if (*(_QWORD *)&v3696 >= (unint64_t)(v3740 << 56))
          {
            LODWORD(v3740) = *(_DWORD *)(v2867 + 10668) - v3740;
            v3742 = v3743;
          }
          v3744 = vp8_norm[v3740];
          v3745 = (_DWORD)v3740 << v3744;
          v3746 = (int8x8_t)(*(_QWORD *)&v3742 << v3744);
          *(_QWORD *)(v2867 + 10656) = *(_QWORD *)&v3742 << v3744;
          v3747 = v3695 - v3744;
          *(_DWORD *)(v2867 + 10664) = v3695 - v3744;
          *(_DWORD *)(v2867 + 10668) = (_DWORD)v3740 << v3744;
          if (*(_QWORD *)&v3696 >= v3741)
          {
            if ((v3747 & 0x80000000) != 0)
            {
              v3748 = *(uint8x8_t **)(v2867 + 10648);
              v3749 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3748;
              v3750 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
              if (v3750)
              {
                if (v3749 >= 9)
                  v3751 = 9;
                else
                  v3751 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3748;
                v3750(*(_QWORD *)(v2867 + 10680), v3748, v4442, v3751);
                v3690.i64[0] = 0x3F0000003FLL;
                v3690.i64[1] = 0x3F0000003FLL;
                v3689.i64[0] = 0x800000008;
                v3689.i64[1] = 0x800000008;
                v3748 = (uint8x8_t *)v4442;
              }
              v3752 = 48 - v3747;
              v3753 = 56 - 8 * v3749 - v3747;
              if (v3753 >= 0)
                v3747 += 0x40000000;
              if (8 * v3749)
                v3754 = 1;
              else
                v3754 = v3753 <= -1;
              v3755 = v3753 & ~(v3753 >> 31);
              if (!v3754 || v3752 < v3755)
              {
                v2867 = a1;
              }
              else
              {
                v3757 = *v3688;
                v3758 = v3744 - v3695 + 40;
                if (v3758 >= v3755 - 1)
                  v3759 = v3755 - 1;
                else
                  v3759 = v3744 - v3695 + 40;
                v3760 = v3744 - v3695 - v3759 + 47;
                v2867 = a1;
                if (v3760 < 0x78)
                {
                  v3761 = (uint64_t)*v3688;
                  v3762 = v3748;
                  v3763 = v3752;
                  goto LABEL_2814;
                }
                if (v3758 >= v3755 - 1)
                  v3758 = v3755 - 1;
                if (v3688 < (uint8x8_t *)&v3748->i8[((v3744 - v3695 - v3758 + 47) >> 3) + 1]
                  && (unint64_t)v3748 < v4391)
                {
                  v3761 = (uint64_t)*v3688;
                  v3762 = v3748;
                  v3763 = v3752;
                  goto LABEL_2814;
                }
                v3765 = (v3760 >> 3) + 1;
                v3761 = *(_QWORD *)&v3757 + (v3765 & 0x3FFFFFF8);
                v3762 = (uint8x8_t *)((char *)v3748 + (v3765 & 0x3FFFFFF8));
                v3763 = v3752 - 8 * (v3765 & 0x3FFFFFF8);
                v3766 = vdupq_n_s32(v3752);
                v3767 = vaddq_s32(v3766, (int32x4_t)xmmword_208F3A6A0);
                v3768 = vaddq_s32(v3766, (int32x4_t)xmmword_208F3A6B0);
                v3769 = 0uLL;
                v3770 = (int32x4_t)v3747;
                v3771 = (int8x16_t)(unint64_t)v3746;
                v3772 = v3765 & 0x3FFFFFF8;
                v3773 = 0uLL;
                v3774 = 0uLL;
                v3775 = 0uLL;
                do
                {
                  v3770 = vaddq_s32(v3770, v3689);
                  v3776 = *v3748++;
                  v3769 = vaddq_s32(v3769, v3689);
                  v3777 = vmovl_u8(v3776);
                  v3778 = vmovl_high_u16(v3777);
                  v3779.i64[0] = v3778.u32[2];
                  v3779.i64[1] = v3778.u32[3];
                  v3780 = v3779;
                  v3779.i64[0] = v3778.u32[0];
                  v3779.i64[1] = v3778.u32[1];
                  v3781 = v3779;
                  v3782 = vmovl_u16(*(uint16x4_t *)v3777.i8);
                  v3779.i64[0] = v3782.u32[2];
                  v3779.i64[1] = v3782.u32[3];
                  v3783 = v3779;
                  v3779.i64[0] = v3782.u32[0];
                  v3779.i64[1] = v3782.u32[1];
                  v3784 = v3779;
                  v3779.i64[0] = v3767.u32[2];
                  v3779.i64[1] = v3767.u32[3];
                  v3785 = v3779;
                  v3779.i64[0] = v3767.u32[0];
                  v3779.i64[1] = v3767.u32[1];
                  v3786 = v3779;
                  v3779.i64[0] = v3768.u32[2];
                  v3779.i64[1] = v3768.u32[3];
                  v3787 = v3779;
                  v3779.i64[0] = v3768.u32[0];
                  v3779.i64[1] = v3768.u32[1];
                  v3775 = vorrq_s8((int8x16_t)vshlq_u64(v3780, v3785), v3775);
                  v3774 = vorrq_s8((int8x16_t)vshlq_u64(v3781, v3786), v3774);
                  v3773 = vorrq_s8((int8x16_t)vshlq_u64(v3783, v3787), v3773);
                  v3771 = vorrq_s8((int8x16_t)vshlq_u64(v3784, v3779), v3771);
                  *(_QWORD *)&v3757 += 8;
                  v3768 = vaddq_s32(v3768, v3690);
                  v3767 = vaddq_s32(v3767, v3690);
                  v3772 -= 8;
                }
                while (v3772);
                *v3688 = v3757;
                v3788 = vorrq_s8(vorrq_s8(v3771, v3774), vorrq_s8(v3773, v3775));
                v3746 = vorr_s8(*(int8x8_t *)v3788.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3788, v3788, 8uLL));
                v3747 = vaddvq_s32(vaddq_s32(v3770, v3769));
                if ((v3765 & 0x3FFFFFF8) != v3765)
                {
LABEL_2814:
                  v3789 = (uint8x8_t)(v3761 + 1);
                  do
                  {
                    v3747 += 8;
                    v3790 = v3762->u8[0];
                    v3762 = (uint8x8_t *)((char *)v3762 + 1);
                    *(_QWORD *)&v3746 |= (unint64_t)v3790 << v3763;
                    *v3688 = v3789;
                    v3763 -= 8;
                    ++*(_QWORD *)&v3789;
                  }
                  while (v3763 >= v3755);
                }
              }
            }
            v3791 = (((v3745 << 7) - 128) >> 8) + 1;
            v3792 = (int8x8_t)(*(_QWORD *)&v3746 - (v3791 << 56));
            if (*(_QWORD *)&v3746 >= (unint64_t)(v3791 << 56))
            {
              LODWORD(v3791) = *(_DWORD *)(v2867 + 10668) - v3791;
              v4412 = 0x80;
              v3746 = v3792;
            }
            else
            {
              v4412 = 0;
            }
            v3793 = vp8_norm[v3791];
            v3794 = (_DWORD)v3791 << v3793;
            v3795 = (int8x8_t)(*(_QWORD *)&v3746 << v3793);
            *(int8x8_t *)(v2867 + 10656) = v3795;
            v3796 = v3747 - v3793;
            *(_DWORD *)(v2867 + 10664) = v3747 - v3793;
            *(_DWORD *)(v2867 + 10668) = (_DWORD)v3791 << v3793;
            if (((v3747 - v3793) & 0x80000000) != 0)
            {
              v3797 = *(uint8x8_t **)(v2867 + 10648);
              v3798 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3797;
              v3799 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
              if (v3799)
              {
                if (v3798 >= 9)
                  v3800 = 9;
                else
                  v3800 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3797;
                v3799(*(_QWORD *)(v2867 + 10680), v3797, v4442, v3800);
                v3690.i64[0] = 0x3F0000003FLL;
                v3690.i64[1] = 0x3F0000003FLL;
                v3689.i64[0] = 0x800000008;
                v3689.i64[1] = 0x800000008;
                v3797 = (uint8x8_t *)v4442;
              }
              v3801 = 48 - v3796;
              v3802 = 56 - 8 * v3798 - v3796;
              if (v3802 >= 0)
                v3796 += 0x40000000;
              if (8 * v3798)
                v3803 = 1;
              else
                v3803 = v3802 <= -1;
              v3804 = v3802 & ~(v3802 >> 31);
              if (!v3803 || v3801 < v3804)
              {
                v2867 = a1;
              }
              else
              {
                v3806 = *v3688;
                v3807 = v3793 - v3747 + 40;
                if (v3807 >= v3804 - 1)
                  v3808 = v3804 - 1;
                else
                  v3808 = v3793 - v3747 + 40;
                v3809 = v3793 - v3747 - v3808 + 47;
                v2867 = a1;
                if (v3809 < 0x78)
                  goto LABEL_2851;
                if (v3807 >= v3804 - 1)
                  v3807 = v3804 - 1;
                if (v3688 < (uint8x8_t *)&v3797->i8[((v3793 - v3747 - v3807 + 47) >> 3) + 1]
                  && (unint64_t)v3797 < v4391)
                {
LABEL_2851:
                  v3812 = (uint64_t)*v3688;
                  v3813 = v3797;
                  v3814 = v3801;
                  goto LABEL_2852;
                }
                v3811 = (v3809 >> 3) + 1;
                v3812 = *(_QWORD *)&v3806 + (v3811 & 0x3FFFFFF8);
                v3813 = (uint8x8_t *)((char *)v3797 + (v3811 & 0x3FFFFFF8));
                v3814 = v3801 - 8 * (v3811 & 0x3FFFFFF8);
                v3815 = vdupq_n_s32(v3801);
                v3816 = vaddq_s32(v3815, (int32x4_t)xmmword_208F3A6A0);
                v3817 = vaddq_s32(v3815, (int32x4_t)xmmword_208F3A6B0);
                v3818 = 0uLL;
                v3819 = (int32x4_t)v3796;
                v3820 = (int8x16_t)(unint64_t)v3795;
                v3821 = v3811 & 0x3FFFFFF8;
                v3822 = 0uLL;
                v3823 = 0uLL;
                v3824 = 0uLL;
                do
                {
                  v3819 = vaddq_s32(v3819, v3689);
                  v3825 = *v3797++;
                  v3818 = vaddq_s32(v3818, v3689);
                  v3826 = vmovl_u8(v3825);
                  v3827 = vmovl_high_u16(v3826);
                  v3828.i64[0] = v3827.u32[2];
                  v3828.i64[1] = v3827.u32[3];
                  v3829 = v3828;
                  v3828.i64[0] = v3827.u32[0];
                  v3828.i64[1] = v3827.u32[1];
                  v3830 = v3828;
                  v3831 = vmovl_u16(*(uint16x4_t *)v3826.i8);
                  v3828.i64[0] = v3831.u32[2];
                  v3828.i64[1] = v3831.u32[3];
                  v3832 = v3828;
                  v3828.i64[0] = v3831.u32[0];
                  v3828.i64[1] = v3831.u32[1];
                  v3833 = v3828;
                  v3828.i64[0] = v3816.u32[2];
                  v3828.i64[1] = v3816.u32[3];
                  v3834 = v3828;
                  v3828.i64[0] = v3816.u32[0];
                  v3828.i64[1] = v3816.u32[1];
                  v3835 = v3828;
                  v3828.i64[0] = v3817.u32[2];
                  v3828.i64[1] = v3817.u32[3];
                  v3836 = v3828;
                  v3828.i64[0] = v3817.u32[0];
                  v3828.i64[1] = v3817.u32[1];
                  v3824 = vorrq_s8((int8x16_t)vshlq_u64(v3829, v3834), v3824);
                  v3823 = vorrq_s8((int8x16_t)vshlq_u64(v3830, v3835), v3823);
                  v3822 = vorrq_s8((int8x16_t)vshlq_u64(v3832, v3836), v3822);
                  v3820 = vorrq_s8((int8x16_t)vshlq_u64(v3833, v3828), v3820);
                  *(_QWORD *)&v3806 += 8;
                  v3817 = vaddq_s32(v3817, v3690);
                  v3816 = vaddq_s32(v3816, v3690);
                  v3821 -= 8;
                }
                while (v3821);
                *v3688 = v3806;
                v3837 = vorrq_s8(vorrq_s8(v3820, v3823), vorrq_s8(v3822, v3824));
                v3795 = vorr_s8(*(int8x8_t *)v3837.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3837, v3837, 8uLL));
                v3796 = vaddvq_s32(vaddq_s32(v3819, v3818));
                if ((v3811 & 0x3FFFFFF8) != v3811)
                {
LABEL_2852:
                  v3838 = (uint8x8_t)(v3812 + 1);
                  do
                  {
                    v3796 += 8;
                    v3839 = v3813->u8[0];
                    v3813 = (uint8x8_t *)((char *)v3813 + 1);
                    *(_QWORD *)&v3795 |= (unint64_t)v3839 << v3814;
                    *v3688 = v3838;
                    v3814 -= 8;
                    ++*(_QWORD *)&v3838;
                  }
                  while (v3814 >= v3804);
                }
              }
            }
            v3840 = (((v3794 << 7) - 128) >> 8) + 1;
            v3841 = (int8x8_t)(*(_QWORD *)&v3795 - (v3840 << 56));
            if (*(_QWORD *)&v3795 >= (unint64_t)(v3840 << 56))
            {
              LODWORD(v3840) = *(_DWORD *)(v2867 + 10668) - v3840;
              v4409 = 64;
              v3795 = v3841;
            }
            else
            {
              v4409 = 0;
            }
            v3842 = vp8_norm[v3840];
            v3843 = (_DWORD)v3840 << v3842;
            v3844 = (int8x8_t)(*(_QWORD *)&v3795 << v3842);
            *(_QWORD *)(v2867 + 10656) = *(_QWORD *)&v3795 << v3842;
            v3845 = v3796 - v3842;
            *(_DWORD *)(v2867 + 10664) = v3796 - v3842;
            *(_DWORD *)(v2867 + 10668) = (_DWORD)v3840 << v3842;
            if (((v3796 - v3842) & 0x80000000) != 0)
            {
              v3846 = *(uint8x8_t **)(v2867 + 10648);
              v3847 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3846;
              v3848 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
              if (v3848)
              {
                if (v3847 >= 9)
                  v3849 = 9;
                else
                  v3849 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3846;
                v3848(*(_QWORD *)(v2867 + 10680), v3846, v4442, v3849);
                v3690.i64[0] = 0x3F0000003FLL;
                v3690.i64[1] = 0x3F0000003FLL;
                v3689.i64[0] = 0x800000008;
                v3689.i64[1] = 0x800000008;
                v3846 = (uint8x8_t *)v4442;
              }
              v3850 = 48 - v3845;
              v3851 = 56 - 8 * v3847 - v3845;
              if (v3851 >= 0)
                v3845 += 0x40000000;
              if (8 * v3847)
                v3852 = 1;
              else
                v3852 = v3851 <= -1;
              v3853 = v3851 & ~(v3851 >> 31);
              if (!v3852 || v3850 < v3853)
              {
                v2867 = a1;
              }
              else
              {
                v3855 = *v3688;
                v3856 = v3842 - v3796 + 40;
                if (v3856 >= v3853 - 1)
                  v3857 = v3853 - 1;
                else
                  v3857 = v3842 - v3796 + 40;
                v3858 = v3842 - v3796 - v3857 + 47;
                v2867 = a1;
                if (v3858 < 0x78)
                  goto LABEL_2889;
                if (v3856 >= v3853 - 1)
                  v3856 = v3853 - 1;
                if (v3688 < (uint8x8_t *)&v3846->i8[((v3842 - v3796 - v3856 + 47) >> 3) + 1]
                  && (unint64_t)v3846 < v4391)
                {
LABEL_2889:
                  v3861 = (uint64_t)*v3688;
                  v3862 = v3846;
                  v3863 = v3850;
                  goto LABEL_2890;
                }
                v3860 = (v3858 >> 3) + 1;
                v3861 = *(_QWORD *)&v3855 + (v3860 & 0x3FFFFFF8);
                v3862 = (uint8x8_t *)((char *)v3846 + (v3860 & 0x3FFFFFF8));
                v3863 = v3850 - 8 * (v3860 & 0x3FFFFFF8);
                v3864 = vdupq_n_s32(v3850);
                v3865 = vaddq_s32(v3864, (int32x4_t)xmmword_208F3A6A0);
                v3866 = vaddq_s32(v3864, (int32x4_t)xmmword_208F3A6B0);
                v3867 = 0uLL;
                v3868 = (int32x4_t)v3845;
                v3869 = (int8x16_t)(unint64_t)v3844;
                v3870 = v3860 & 0x3FFFFFF8;
                v3871 = 0uLL;
                v3872 = 0uLL;
                v3873 = 0uLL;
                do
                {
                  v3868 = vaddq_s32(v3868, v3689);
                  v3874 = *v3846++;
                  v3867 = vaddq_s32(v3867, v3689);
                  v3875 = vmovl_u8(v3874);
                  v3876 = vmovl_high_u16(v3875);
                  v3877.i64[0] = v3876.u32[2];
                  v3877.i64[1] = v3876.u32[3];
                  v3878 = v3877;
                  v3877.i64[0] = v3876.u32[0];
                  v3877.i64[1] = v3876.u32[1];
                  v3879 = v3877;
                  v3880 = vmovl_u16(*(uint16x4_t *)v3875.i8);
                  v3877.i64[0] = v3880.u32[2];
                  v3877.i64[1] = v3880.u32[3];
                  v3881 = v3877;
                  v3877.i64[0] = v3880.u32[0];
                  v3877.i64[1] = v3880.u32[1];
                  v3882 = v3877;
                  v3877.i64[0] = v3865.u32[2];
                  v3877.i64[1] = v3865.u32[3];
                  v3883 = v3877;
                  v3877.i64[0] = v3865.u32[0];
                  v3877.i64[1] = v3865.u32[1];
                  v3884 = v3877;
                  v3877.i64[0] = v3866.u32[2];
                  v3877.i64[1] = v3866.u32[3];
                  v3885 = v3877;
                  v3877.i64[0] = v3866.u32[0];
                  v3877.i64[1] = v3866.u32[1];
                  v3873 = vorrq_s8((int8x16_t)vshlq_u64(v3878, v3883), v3873);
                  v3872 = vorrq_s8((int8x16_t)vshlq_u64(v3879, v3884), v3872);
                  v3871 = vorrq_s8((int8x16_t)vshlq_u64(v3881, v3885), v3871);
                  v3869 = vorrq_s8((int8x16_t)vshlq_u64(v3882, v3877), v3869);
                  *(_QWORD *)&v3855 += 8;
                  v3866 = vaddq_s32(v3866, v3690);
                  v3865 = vaddq_s32(v3865, v3690);
                  v3870 -= 8;
                }
                while (v3870);
                *v3688 = v3855;
                v3886 = vorrq_s8(vorrq_s8(v3869, v3872), vorrq_s8(v3871, v3873));
                v3844 = vorr_s8(*(int8x8_t *)v3886.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3886, v3886, 8uLL));
                v3845 = vaddvq_s32(vaddq_s32(v3868, v3867));
                if ((v3860 & 0x3FFFFFF8) != v3860)
                {
LABEL_2890:
                  v3887 = (uint8x8_t)(v3861 + 1);
                  do
                  {
                    v3845 += 8;
                    v3888 = v3862->u8[0];
                    v3862 = (uint8x8_t *)((char *)v3862 + 1);
                    *(_QWORD *)&v3844 |= (unint64_t)v3888 << v3863;
                    *v3688 = v3887;
                    v3863 -= 8;
                    ++*(_QWORD *)&v3887;
                  }
                  while (v3863 >= v3853);
                }
              }
            }
            v3889 = (((v3843 << 7) - 128) >> 8) + 1;
            v3890 = (int8x8_t)(*(_QWORD *)&v3844 - (v3889 << 56));
            if (*(_QWORD *)&v3844 >= (unint64_t)(v3889 << 56))
            {
              LODWORD(v3889) = *(_DWORD *)(v2867 + 10668) - v3889;
              v4405 = 32;
              v3844 = v3890;
            }
            else
            {
              v4405 = 0;
            }
            v3891 = vp8_norm[v3889];
            v3892 = (_DWORD)v3889 << v3891;
            v3893 = (int8x8_t)(*(_QWORD *)&v3844 << v3891);
            *(int8x8_t *)(v2867 + 10656) = v3893;
            v3894 = v3845 - v3891;
            *(_DWORD *)(v2867 + 10664) = v3845 - v3891;
            *(_DWORD *)(v2867 + 10668) = (_DWORD)v3889 << v3891;
            if (((v3845 - v3891) & 0x80000000) != 0)
            {
              v3895 = *(uint8x8_t **)(v2867 + 10648);
              v3896 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3895;
              v3897 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
              if (v3897)
              {
                if (v3896 >= 9)
                  v3898 = 9;
                else
                  v3898 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3895;
                v3897(*(_QWORD *)(v2867 + 10680), v3895, v4442, v3898);
                v3690.i64[0] = 0x3F0000003FLL;
                v3690.i64[1] = 0x3F0000003FLL;
                v3689.i64[0] = 0x800000008;
                v3689.i64[1] = 0x800000008;
                v3895 = (uint8x8_t *)v4442;
              }
              v3899 = 48 - v3894;
              v3900 = 56 - 8 * v3896 - v3894;
              if (v3900 >= 0)
                v3894 += 0x40000000;
              if (8 * v3896)
                v3901 = 1;
              else
                v3901 = v3900 <= -1;
              v3902 = v3900 & ~(v3900 >> 31);
              if (!v3901 || v3899 < v3902)
              {
                v2867 = a1;
              }
              else
              {
                v3904 = *v3688;
                v3905 = v3891 - v3845 + 40;
                if (v3905 >= v3902 - 1)
                  v3906 = v3902 - 1;
                else
                  v3906 = v3891 - v3845 + 40;
                v3907 = v3891 - v3845 - v3906 + 47;
                v2867 = a1;
                if (v3907 < 0x78)
                  goto LABEL_2927;
                if (v3905 >= v3902 - 1)
                  v3905 = v3902 - 1;
                if (v3688 < (uint8x8_t *)&v3895->i8[((v3891 - v3845 - v3905 + 47) >> 3) + 1]
                  && (unint64_t)v3895 < v4391)
                {
LABEL_2927:
                  v3910 = (uint64_t)*v3688;
                  v3911 = v3895;
                  v3912 = v3899;
                  goto LABEL_2928;
                }
                v3909 = (v3907 >> 3) + 1;
                v3910 = *(_QWORD *)&v3904 + (v3909 & 0x3FFFFFF8);
                v3911 = (uint8x8_t *)((char *)v3895 + (v3909 & 0x3FFFFFF8));
                v3912 = v3899 - 8 * (v3909 & 0x3FFFFFF8);
                v3913 = vdupq_n_s32(v3899);
                v3914 = vaddq_s32(v3913, (int32x4_t)xmmword_208F3A6A0);
                v3915 = vaddq_s32(v3913, (int32x4_t)xmmword_208F3A6B0);
                v3916 = 0uLL;
                v3917 = (int32x4_t)v3894;
                v3918 = (int8x16_t)(unint64_t)v3893;
                v3919 = v3909 & 0x3FFFFFF8;
                v3920 = 0uLL;
                v3921 = 0uLL;
                v3922 = 0uLL;
                do
                {
                  v3917 = vaddq_s32(v3917, v3689);
                  v3923 = *v3895++;
                  v3916 = vaddq_s32(v3916, v3689);
                  v3924 = vmovl_u8(v3923);
                  v3925 = vmovl_high_u16(v3924);
                  v3926.i64[0] = v3925.u32[2];
                  v3926.i64[1] = v3925.u32[3];
                  v3927 = v3926;
                  v3926.i64[0] = v3925.u32[0];
                  v3926.i64[1] = v3925.u32[1];
                  v3928 = v3926;
                  v3929 = vmovl_u16(*(uint16x4_t *)v3924.i8);
                  v3926.i64[0] = v3929.u32[2];
                  v3926.i64[1] = v3929.u32[3];
                  v3930 = v3926;
                  v3926.i64[0] = v3929.u32[0];
                  v3926.i64[1] = v3929.u32[1];
                  v3931 = v3926;
                  v3926.i64[0] = v3914.u32[2];
                  v3926.i64[1] = v3914.u32[3];
                  v3932 = v3926;
                  v3926.i64[0] = v3914.u32[0];
                  v3926.i64[1] = v3914.u32[1];
                  v3933 = v3926;
                  v3926.i64[0] = v3915.u32[2];
                  v3926.i64[1] = v3915.u32[3];
                  v3934 = v3926;
                  v3926.i64[0] = v3915.u32[0];
                  v3926.i64[1] = v3915.u32[1];
                  v3922 = vorrq_s8((int8x16_t)vshlq_u64(v3927, v3932), v3922);
                  v3921 = vorrq_s8((int8x16_t)vshlq_u64(v3928, v3933), v3921);
                  v3920 = vorrq_s8((int8x16_t)vshlq_u64(v3930, v3934), v3920);
                  v3918 = vorrq_s8((int8x16_t)vshlq_u64(v3931, v3926), v3918);
                  *(_QWORD *)&v3904 += 8;
                  v3915 = vaddq_s32(v3915, v3690);
                  v3914 = vaddq_s32(v3914, v3690);
                  v3919 -= 8;
                }
                while (v3919);
                *v3688 = v3904;
                v3935 = vorrq_s8(vorrq_s8(v3918, v3921), vorrq_s8(v3920, v3922));
                v3893 = vorr_s8(*(int8x8_t *)v3935.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3935, v3935, 8uLL));
                v3894 = vaddvq_s32(vaddq_s32(v3917, v3916));
                if ((v3909 & 0x3FFFFFF8) != v3909)
                {
LABEL_2928:
                  v3936 = (uint8x8_t)(v3910 + 1);
                  do
                  {
                    v3894 += 8;
                    v3937 = v3911->u8[0];
                    v3911 = (uint8x8_t *)((char *)v3911 + 1);
                    *(_QWORD *)&v3893 |= (unint64_t)v3937 << v3912;
                    *v3688 = v3936;
                    v3912 -= 8;
                    ++*(_QWORD *)&v3936;
                  }
                  while (v3912 >= v3902);
                }
              }
            }
            v3938 = (((v3892 << 7) - 128) >> 8) + 1;
            v3939 = (int8x8_t)(*(_QWORD *)&v3893 - (v3938 << 56));
            if (*(_QWORD *)&v3893 >= (unint64_t)(v3938 << 56))
            {
              LODWORD(v3938) = *(_DWORD *)(v2867 + 10668) - v3938;
              v4400 = 16;
              v3893 = v3939;
            }
            else
            {
              v4400 = 0;
            }
            v3940 = vp8_norm[v3938];
            v3941 = (_DWORD)v3938 << v3940;
            v3942 = (int8x8_t)(*(_QWORD *)&v3893 << v3940);
            *(int8x8_t *)(v2867 + 10656) = v3942;
            v3943 = v3894 - v3940;
            *(_DWORD *)(v2867 + 10664) = v3894 - v3940;
            *(_DWORD *)(v2867 + 10668) = (_DWORD)v3938 << v3940;
            if (((v3894 - v3940) & 0x80000000) != 0)
            {
              v3944 = *(uint8x8_t **)(v2867 + 10648);
              v3945 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3944;
              v3946 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
              if (v3946)
              {
                if (v3945 >= 9)
                  v3947 = 9;
                else
                  v3947 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3944;
                v3946(*(_QWORD *)(v2867 + 10680), v3944, v4442, v3947);
                v3690.i64[0] = 0x3F0000003FLL;
                v3690.i64[1] = 0x3F0000003FLL;
                v3689.i64[0] = 0x800000008;
                v3689.i64[1] = 0x800000008;
                v3944 = (uint8x8_t *)v4442;
              }
              v3948 = 48 - v3943;
              v3949 = 56 - 8 * v3945 - v3943;
              if (v3949 >= 0)
                v3943 += 0x40000000;
              if (8 * v3945)
                v3950 = 1;
              else
                v3950 = v3949 <= -1;
              v3951 = v3949 & ~(v3949 >> 31);
              if (!v3950 || v3948 < v3951)
              {
                v2867 = a1;
              }
              else
              {
                v3953 = *v3688;
                v3954 = v3940 - v3894 + 40;
                if (v3954 >= v3951 - 1)
                  v3955 = v3951 - 1;
                else
                  v3955 = v3940 - v3894 + 40;
                v3956 = v3940 - v3894 - v3955 + 47;
                v2867 = a1;
                if (v3956 < 0x78)
                  goto LABEL_2965;
                if (v3954 >= v3951 - 1)
                  v3954 = v3951 - 1;
                if (v3688 < (uint8x8_t *)&v3944->i8[((v3940 - v3894 - v3954 + 47) >> 3) + 1]
                  && (unint64_t)v3944 < v4391)
                {
LABEL_2965:
                  v3959 = (uint64_t)*v3688;
                  v3960 = v3944;
                  v3961 = v3948;
                  goto LABEL_2966;
                }
                v3958 = (v3956 >> 3) + 1;
                v3959 = *(_QWORD *)&v3953 + (v3958 & 0x3FFFFFF8);
                v3960 = (uint8x8_t *)((char *)v3944 + (v3958 & 0x3FFFFFF8));
                v3961 = v3948 - 8 * (v3958 & 0x3FFFFFF8);
                v3962 = vdupq_n_s32(v3948);
                v3963 = vaddq_s32(v3962, (int32x4_t)xmmword_208F3A6A0);
                v3964 = vaddq_s32(v3962, (int32x4_t)xmmword_208F3A6B0);
                v3965 = 0uLL;
                v3966 = (int32x4_t)v3943;
                v3967 = (int8x16_t)(unint64_t)v3942;
                v3968 = v3958 & 0x3FFFFFF8;
                v3969 = 0uLL;
                v3970 = 0uLL;
                v3971 = 0uLL;
                do
                {
                  v3966 = vaddq_s32(v3966, v3689);
                  v3972 = *v3944++;
                  v3965 = vaddq_s32(v3965, v3689);
                  v3973 = vmovl_u8(v3972);
                  v3974 = vmovl_high_u16(v3973);
                  v3975.i64[0] = v3974.u32[2];
                  v3975.i64[1] = v3974.u32[3];
                  v3976 = v3975;
                  v3975.i64[0] = v3974.u32[0];
                  v3975.i64[1] = v3974.u32[1];
                  v3977 = v3975;
                  v3978 = vmovl_u16(*(uint16x4_t *)v3973.i8);
                  v3975.i64[0] = v3978.u32[2];
                  v3975.i64[1] = v3978.u32[3];
                  v3979 = v3975;
                  v3975.i64[0] = v3978.u32[0];
                  v3975.i64[1] = v3978.u32[1];
                  v3980 = v3975;
                  v3975.i64[0] = v3963.u32[2];
                  v3975.i64[1] = v3963.u32[3];
                  v3981 = v3975;
                  v3975.i64[0] = v3963.u32[0];
                  v3975.i64[1] = v3963.u32[1];
                  v3982 = v3975;
                  v3975.i64[0] = v3964.u32[2];
                  v3975.i64[1] = v3964.u32[3];
                  v3983 = v3975;
                  v3975.i64[0] = v3964.u32[0];
                  v3975.i64[1] = v3964.u32[1];
                  v3971 = vorrq_s8((int8x16_t)vshlq_u64(v3976, v3981), v3971);
                  v3970 = vorrq_s8((int8x16_t)vshlq_u64(v3977, v3982), v3970);
                  v3969 = vorrq_s8((int8x16_t)vshlq_u64(v3979, v3983), v3969);
                  v3967 = vorrq_s8((int8x16_t)vshlq_u64(v3980, v3975), v3967);
                  *(_QWORD *)&v3953 += 8;
                  v3964 = vaddq_s32(v3964, v3690);
                  v3963 = vaddq_s32(v3963, v3690);
                  v3968 -= 8;
                }
                while (v3968);
                *v3688 = v3953;
                v3984 = vorrq_s8(vorrq_s8(v3967, v3970), vorrq_s8(v3969, v3971));
                v3942 = vorr_s8(*(int8x8_t *)v3984.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3984, v3984, 8uLL));
                v3943 = vaddvq_s32(vaddq_s32(v3966, v3965));
                if ((v3958 & 0x3FFFFFF8) != v3958)
                {
LABEL_2966:
                  v3985 = (uint8x8_t)(v3959 + 1);
                  do
                  {
                    v3943 += 8;
                    v3986 = v3960->u8[0];
                    v3960 = (uint8x8_t *)((char *)v3960 + 1);
                    *(_QWORD *)&v3942 |= (unint64_t)v3986 << v3961;
                    *v3688 = v3985;
                    v3961 -= 8;
                    ++*(_QWORD *)&v3985;
                  }
                  while (v3961 >= v3951);
                }
              }
            }
            v3987 = (((v3941 << 7) - 128) >> 8) + 1;
            v3988 = (int8x8_t)(*(_QWORD *)&v3942 - (v3987 << 56));
            if (*(_QWORD *)&v3942 >= (unint64_t)(v3987 << 56))
            {
              LODWORD(v3987) = *(_DWORD *)(v2867 + 10668) - v3987;
              v3989 = 8;
              v3942 = v3988;
            }
            else
            {
              v3989 = 0;
            }
            v3990 = vp8_norm[v3987];
            v3991 = (_DWORD)v3987 << v3990;
            v3992 = (int8x8_t)(*(_QWORD *)&v3942 << v3990);
            *(_QWORD *)(v2867 + 10656) = *(_QWORD *)&v3942 << v3990;
            v3993 = v3943 - v3990;
            *(_DWORD *)(v2867 + 10664) = v3943 - v3990;
            *(_DWORD *)(v2867 + 10668) = (_DWORD)v3987 << v3990;
            if (((v3943 - v3990) & 0x80000000) != 0)
            {
              v3994 = v3989;
              v3995 = *(uint8x8_t **)(v2867 + 10648);
              v3996 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3995;
              v3997 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
              if (v3997)
              {
                if (v3996 >= 9)
                  v3998 = 9;
                else
                  v3998 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v3995;
                v3997(*(_QWORD *)(v2867 + 10680), v3995, v4442, v3998);
                v3690.i64[0] = 0x3F0000003FLL;
                v3690.i64[1] = 0x3F0000003FLL;
                v3689.i64[0] = 0x800000008;
                v3689.i64[1] = 0x800000008;
                v3995 = (uint8x8_t *)v4442;
              }
              v3999 = 48 - v3993;
              v4000 = 56 - 8 * v3996 - v3993;
              if (v4000 >= 0)
                v3993 += 0x40000000;
              if (8 * v3996)
                v4001 = 1;
              else
                v4001 = v4000 <= -1;
              v4002 = v4000 & ~(v4000 >> 31);
              if (!v4001 || v3999 < v4002)
              {
                v2867 = a1;
                v3989 = v3994;
              }
              else
              {
                v4004 = *v3688;
                v4005 = v3990 - v3943 + 40;
                if (v4005 >= v4002 - 1)
                  v4006 = v4002 - 1;
                else
                  v4006 = v3990 - v3943 + 40;
                v4007 = v3990 - v3943 - v4006 + 47;
                v2867 = a1;
                v3989 = v3994;
                if (v4007 < 0x78)
                  goto LABEL_3003;
                if (v4005 >= v4002 - 1)
                  v4005 = v4002 - 1;
                if (v3688 < (uint8x8_t *)&v3995->i8[((v3990 - v3943 - v4005 + 47) >> 3) + 1]
                  && (unint64_t)v3995 < v4391)
                {
LABEL_3003:
                  v4010 = (uint64_t)*v3688;
                  v4011 = v3995;
                  v4012 = v3999;
                  goto LABEL_3004;
                }
                v4009 = (v4007 >> 3) + 1;
                v4010 = *(_QWORD *)&v4004 + (v4009 & 0x3FFFFFF8);
                v4011 = (uint8x8_t *)((char *)v3995 + (v4009 & 0x3FFFFFF8));
                v4012 = v3999 - 8 * (v4009 & 0x3FFFFFF8);
                v4013 = vdupq_n_s32(v3999);
                v4014 = vaddq_s32(v4013, (int32x4_t)xmmword_208F3A6A0);
                v4015 = vaddq_s32(v4013, (int32x4_t)xmmword_208F3A6B0);
                v4016 = 0uLL;
                v4017 = (int32x4_t)v3993;
                v4018 = (int8x16_t)(unint64_t)v3992;
                v4019 = v4009 & 0x3FFFFFF8;
                v4020 = 0uLL;
                v4021 = 0uLL;
                v4022 = 0uLL;
                do
                {
                  v4017 = vaddq_s32(v4017, v3689);
                  v4023 = *v3995++;
                  v4016 = vaddq_s32(v4016, v3689);
                  v4024 = vmovl_u8(v4023);
                  v4025 = vmovl_high_u16(v4024);
                  v4026.i64[0] = v4025.u32[2];
                  v4026.i64[1] = v4025.u32[3];
                  v4027 = v4026;
                  v4026.i64[0] = v4025.u32[0];
                  v4026.i64[1] = v4025.u32[1];
                  v4028 = v4026;
                  v4029 = vmovl_u16(*(uint16x4_t *)v4024.i8);
                  v4026.i64[0] = v4029.u32[2];
                  v4026.i64[1] = v4029.u32[3];
                  v4030 = v4026;
                  v4026.i64[0] = v4029.u32[0];
                  v4026.i64[1] = v4029.u32[1];
                  v4031 = v4026;
                  v4026.i64[0] = v4014.u32[2];
                  v4026.i64[1] = v4014.u32[3];
                  v4032 = v4026;
                  v4026.i64[0] = v4014.u32[0];
                  v4026.i64[1] = v4014.u32[1];
                  v4033 = v4026;
                  v4026.i64[0] = v4015.u32[2];
                  v4026.i64[1] = v4015.u32[3];
                  v4034 = v4026;
                  v4026.i64[0] = v4015.u32[0];
                  v4026.i64[1] = v4015.u32[1];
                  v4022 = vorrq_s8((int8x16_t)vshlq_u64(v4027, v4032), v4022);
                  v4021 = vorrq_s8((int8x16_t)vshlq_u64(v4028, v4033), v4021);
                  v4020 = vorrq_s8((int8x16_t)vshlq_u64(v4030, v4034), v4020);
                  v4018 = vorrq_s8((int8x16_t)vshlq_u64(v4031, v4026), v4018);
                  *(_QWORD *)&v4004 += 8;
                  v4015 = vaddq_s32(v4015, v3690);
                  v4014 = vaddq_s32(v4014, v3690);
                  v4019 -= 8;
                }
                while (v4019);
                *v3688 = v4004;
                v4035 = vorrq_s8(vorrq_s8(v4018, v4021), vorrq_s8(v4020, v4022));
                v3992 = vorr_s8(*(int8x8_t *)v4035.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4035, v4035, 8uLL));
                v3993 = vaddvq_s32(vaddq_s32(v4017, v4016));
                if ((v4009 & 0x3FFFFFF8) != v4009)
                {
LABEL_3004:
                  v4036 = (uint8x8_t)(v4010 + 1);
                  do
                  {
                    v3993 += 8;
                    v4037 = v4011->u8[0];
                    v4011 = (uint8x8_t *)((char *)v4011 + 1);
                    *(_QWORD *)&v3992 |= (unint64_t)v4037 << v4012;
                    *v3688 = v4036;
                    v4012 -= 8;
                    ++*(_QWORD *)&v4036;
                  }
                  while (v4012 >= v4002);
                }
              }
            }
            v4038 = (((v3991 << 7) - 128) >> 8) + 1;
            v4039 = (int8x8_t)(*(_QWORD *)&v3992 - (v4038 << 56));
            if (*(_QWORD *)&v3992 >= (unint64_t)(v4038 << 56))
            {
              LODWORD(v4038) = *(_DWORD *)(v2867 + 10668) - v4038;
              v4040 = 4;
              v3992 = v4039;
            }
            else
            {
              v4040 = 0;
            }
            v4041 = vp8_norm[v4038];
            v4042 = (_DWORD)v4038 << v4041;
            v4043 = (int8x8_t)(*(_QWORD *)&v3992 << v4041);
            *(int8x8_t *)(v2867 + 10656) = v4043;
            v4044 = v3993 - v4041;
            *(_DWORD *)(v2867 + 10664) = v3993 - v4041;
            *(_DWORD *)(v2867 + 10668) = (_DWORD)v4038 << v4041;
            if (((v3993 - v4041) & 0x80000000) != 0)
            {
              v4045 = v4040;
              v4046 = v3989;
              v4047 = *(uint8x8_t **)(v2867 + 10648);
              v4048 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v4047;
              v4049 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
              if (v4049)
              {
                if (v4048 >= 9)
                  v4050 = 9;
                else
                  v4050 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v4047;
                v4049(*(_QWORD *)(v2867 + 10680), v4047, v4442, v4050);
                v3690.i64[0] = 0x3F0000003FLL;
                v3690.i64[1] = 0x3F0000003FLL;
                v3689.i64[0] = 0x800000008;
                v3689.i64[1] = 0x800000008;
                v4047 = (uint8x8_t *)v4442;
              }
              v4051 = 48 - v4044;
              v4052 = 56 - 8 * v4048 - v4044;
              if (v4052 >= 0)
                v4044 += 0x40000000;
              if (8 * v4048)
                v4053 = 1;
              else
                v4053 = v4052 <= -1;
              v4054 = v4052 & ~(v4052 >> 31);
              if (!v4053 || v4051 < v4054)
              {
                v2867 = a1;
                v3989 = v4046;
                v4040 = v4045;
              }
              else
              {
                v4056 = *v3688;
                v4057 = v4041 - v3993 + 40;
                if (v4057 >= v4054 - 1)
                  v4058 = v4054 - 1;
                else
                  v4058 = v4041 - v3993 + 40;
                v4059 = v4041 - v3993 - v4058 + 47;
                v2867 = a1;
                v3989 = v4046;
                if (v4059 < 0x78)
                {
                  v4060 = (uint64_t)*v3688;
                  v4061 = v4047;
                  v4062 = v4051;
                  v4040 = v4045;
                  goto LABEL_3041;
                }
                if (v4057 >= v4054 - 1)
                  v4057 = v4054 - 1;
                v4063 = v3688 >= (uint8x8_t *)&v4047->i8[((v4041 - v3993 - v4057 + 47) >> 3) + 1]
                     || (unint64_t)v4047 >= v4391;
                v4040 = v4045;
                if (!v4063)
                {
                  v4060 = (uint64_t)*v3688;
                  v4061 = v4047;
                  v4062 = v4051;
                  goto LABEL_3041;
                }
                v4064 = (v4059 >> 3) + 1;
                v4060 = *(_QWORD *)&v4056 + (v4064 & 0x3FFFFFF8);
                v4061 = (uint8x8_t *)((char *)v4047 + (v4064 & 0x3FFFFFF8));
                v4062 = v4051 - 8 * (v4064 & 0x3FFFFFF8);
                v4065 = vdupq_n_s32(v4051);
                v4066 = vaddq_s32(v4065, (int32x4_t)xmmword_208F3A6A0);
                v4067 = vaddq_s32(v4065, (int32x4_t)xmmword_208F3A6B0);
                v4068 = 0uLL;
                v4069 = (int32x4_t)v4044;
                v4070 = (int8x16_t)(unint64_t)v4043;
                v4071 = v4064 & 0x3FFFFFF8;
                v4072 = 0uLL;
                v4073 = 0uLL;
                v4074 = 0uLL;
                do
                {
                  v4069 = vaddq_s32(v4069, v3689);
                  v4075 = *v4047++;
                  v4068 = vaddq_s32(v4068, v3689);
                  v4076 = vmovl_u8(v4075);
                  v4077 = vmovl_high_u16(v4076);
                  v4078.i64[0] = v4077.u32[2];
                  v4078.i64[1] = v4077.u32[3];
                  v4079 = v4078;
                  v4078.i64[0] = v4077.u32[0];
                  v4078.i64[1] = v4077.u32[1];
                  v4080 = v4078;
                  v4081 = vmovl_u16(*(uint16x4_t *)v4076.i8);
                  v4078.i64[0] = v4081.u32[2];
                  v4078.i64[1] = v4081.u32[3];
                  v4082 = v4078;
                  v4078.i64[0] = v4081.u32[0];
                  v4078.i64[1] = v4081.u32[1];
                  v4083 = v4078;
                  v4078.i64[0] = v4066.u32[2];
                  v4078.i64[1] = v4066.u32[3];
                  v4084 = v4078;
                  v4078.i64[0] = v4066.u32[0];
                  v4078.i64[1] = v4066.u32[1];
                  v4085 = v4078;
                  v4078.i64[0] = v4067.u32[2];
                  v4078.i64[1] = v4067.u32[3];
                  v4086 = v4078;
                  v4078.i64[0] = v4067.u32[0];
                  v4078.i64[1] = v4067.u32[1];
                  v4074 = vorrq_s8((int8x16_t)vshlq_u64(v4079, v4084), v4074);
                  v4073 = vorrq_s8((int8x16_t)vshlq_u64(v4080, v4085), v4073);
                  v4072 = vorrq_s8((int8x16_t)vshlq_u64(v4082, v4086), v4072);
                  v4070 = vorrq_s8((int8x16_t)vshlq_u64(v4083, v4078), v4070);
                  *(_QWORD *)&v4056 += 8;
                  v4067 = vaddq_s32(v4067, v3690);
                  v4066 = vaddq_s32(v4066, v3690);
                  v4071 -= 8;
                }
                while (v4071);
                *v3688 = v4056;
                v4087 = vorrq_s8(vorrq_s8(v4070, v4073), vorrq_s8(v4072, v4074));
                v4043 = vorr_s8(*(int8x8_t *)v4087.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4087, v4087, 8uLL));
                v4044 = vaddvq_s32(vaddq_s32(v4069, v4068));
                if ((v4064 & 0x3FFFFFF8) != v4064)
                {
LABEL_3041:
                  v4088 = (uint8x8_t)(v4060 + 1);
                  do
                  {
                    v4044 += 8;
                    v4089 = v4061->u8[0];
                    v4061 = (uint8x8_t *)((char *)v4061 + 1);
                    *(_QWORD *)&v4043 |= (unint64_t)v4089 << v4062;
                    *v3688 = v4088;
                    v4062 -= 8;
                    ++*(_QWORD *)&v4088;
                  }
                  while (v4062 >= v4054);
                }
              }
            }
            v4090 = (((v4042 << 7) - 128) >> 8) + 1;
            v4091 = (int8x8_t)(*(_QWORD *)&v4043 - (v4090 << 56));
            if (*(_QWORD *)&v4043 >= (unint64_t)(v4090 << 56))
            {
              LODWORD(v4090) = *(_DWORD *)(v2867 + 10668) - v4090;
              v4092 = 2;
              v4043 = v4091;
            }
            else
            {
              v4092 = 0;
            }
            v4093 = vp8_norm[v4090];
            v4094 = (_DWORD)v4090 << v4093;
            v4095 = (int8x8_t)(*(_QWORD *)&v4043 << v4093);
            *(int8x8_t *)(v2867 + 10656) = v4095;
            v4096 = v4044 - v4093;
            *(_DWORD *)(v2867 + 10664) = v4044 - v4093;
            *(_DWORD *)(v2867 + 10668) = (_DWORD)v4090 << v4093;
            if (((v4044 - v4093) & 0x80000000) != 0)
            {
              v4390 = v3692;
              v4101 = v4092;
              v4102 = *(uint8x8_t **)(v2867 + 10648);
              v4103 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v4102;
              v4104 = *(void (**)(_QWORD, uint8x8_t *, _QWORD *, uint64_t))(v2867 + 10672);
              if (v4104)
              {
                if (v4103 >= 9)
                  v4105 = 9;
                else
                  v4105 = *(_QWORD *)(v2867 + 10640) - (_QWORD)v4102;
                v4106 = v4040;
                v4107 = v3989;
                v4104(*(_QWORD *)(v2867 + 10680), v4102, v4442, v4105);
                v3989 = v4107;
                v4040 = v4106;
                v3690.i64[0] = 0x3F0000003FLL;
                v3690.i64[1] = 0x3F0000003FLL;
                v3689.i64[0] = 0x800000008;
                v3689.i64[1] = 0x800000008;
                v4102 = (uint8x8_t *)v4442;
              }
              v4108 = 48 - v4096;
              v4109 = 56 - 8 * v4103 - v4096;
              if (v4109 >= 0)
                v4096 += 0x40000000;
              if (8 * v4103)
                v4110 = 1;
              else
                v4110 = v4109 <= -1;
              v4111 = v4109 & ~(v4109 >> 31);
              if (!v4110 || v4108 < v4111)
              {
                v2867 = a1;
                v4097 = v4412;
                v4098 = v4409;
                v4099 = v4405;
                v4100 = v4400;
                v4092 = v4101;
                v3692 = v4390;
              }
              else
              {
                v4113 = *v3688;
                v4114 = v4093 - v4044 + 40;
                if (v4114 >= v4111 - 1)
                  v4115 = v4111 - 1;
                else
                  v4115 = v4093 - v4044 + 40;
                v4116 = v4093 - v4044 - v4115 + 47;
                v2867 = a1;
                v4092 = v4101;
                if (v4116 >= 0x78)
                {
                  if (v4114 >= v4111 - 1)
                    v4114 = v4111 - 1;
                  v3692 = v4390;
                  v4120 = v3688 >= (uint8x8_t *)&v4102->i8[((v4093 - v4044 - v4114 + 47) >> 3) + 1]
                       || (unint64_t)v4102 >= v4391;
                  v4097 = v4412;
                  v4098 = v4409;
                  v4099 = v4405;
                  v4100 = v4400;
                  if (v4120)
                  {
                    v4121 = (v4116 >> 3) + 1;
                    v4117 = *(_QWORD *)&v4113 + (v4121 & 0x3FFFFFF8);
                    v4118 = (uint8x8_t *)((char *)v4102 + (v4121 & 0x3FFFFFF8));
                    v4119 = v4108 - 8 * (v4121 & 0x3FFFFFF8);
                    v4122 = vdupq_n_s32(v4108);
                    v4123 = vaddq_s32(v4122, (int32x4_t)xmmword_208F3A6A0);
                    v4124 = vaddq_s32(v4122, (int32x4_t)xmmword_208F3A6B0);
                    v4125 = 0uLL;
                    v4126 = (int32x4_t)v4096;
                    v4127 = (int8x16_t)(unint64_t)v4095;
                    v4128 = v4121 & 0x3FFFFFF8;
                    v4129 = 0uLL;
                    v4130 = 0uLL;
                    v4131 = 0uLL;
                    do
                    {
                      v4126 = vaddq_s32(v4126, v3689);
                      v4132 = *v4102++;
                      v4125 = vaddq_s32(v4125, v3689);
                      v4133 = vmovl_u8(v4132);
                      v4134 = vmovl_high_u16(v4133);
                      v4135.i64[0] = v4134.u32[2];
                      v4135.i64[1] = v4134.u32[3];
                      v4136 = v4135;
                      v4135.i64[0] = v4134.u32[0];
                      v4135.i64[1] = v4134.u32[1];
                      v4137 = v4135;
                      v4138 = vmovl_u16(*(uint16x4_t *)v4133.i8);
                      v4135.i64[0] = v4138.u32[2];
                      v4135.i64[1] = v4138.u32[3];
                      v4139 = v4135;
                      v4135.i64[0] = v4138.u32[0];
                      v4135.i64[1] = v4138.u32[1];
                      v4140 = v4135;
                      v4135.i64[0] = v4123.u32[2];
                      v4135.i64[1] = v4123.u32[3];
                      v4141 = v4135;
                      v4135.i64[0] = v4123.u32[0];
                      v4135.i64[1] = v4123.u32[1];
                      v4142 = v4135;
                      v4135.i64[0] = v4124.u32[2];
                      v4135.i64[1] = v4124.u32[3];
                      v4143 = v4135;
                      v4135.i64[0] = v4124.u32[0];
                      v4135.i64[1] = v4124.u32[1];
                      v4131 = vorrq_s8((int8x16_t)vshlq_u64(v4136, v4141), v4131);
                      v4130 = vorrq_s8((int8x16_t)vshlq_u64(v4137, v4142), v4130);
                      v4129 = vorrq_s8((int8x16_t)vshlq_u64(v4139, v4143), v4129);
                      v4127 = vorrq_s8((int8x16_t)vshlq_u64(v4140, v4135), v4127);
                      *(_QWORD *)&v4113 += 8;
                      v4124 = vaddq_s32(v4124, v3690);
                      v4123 = vaddq_s32(v4123, v3690);
                      v4128 -= 8;
                    }
                    while (v4128);
                    *v3688 = v4113;
                    v4144 = vorrq_s8(vorrq_s8(v4127, v4130), vorrq_s8(v4129, v4131));
                    v4095 = vorr_s8(*(int8x8_t *)v4144.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4144, v4144, 8uLL));
                    v4096 = vaddvq_s32(vaddq_s32(v4126, v4125));
                    if ((v4121 & 0x3FFFFFF8) == v4121)
                      goto LABEL_3081;
                  }
                  else
                  {
                    v4117 = (uint64_t)*v3688;
                    v4118 = v4102;
                    v4119 = v4108;
                  }
                }
                else
                {
                  v4117 = (uint64_t)*v3688;
                  v4118 = v4102;
                  v4119 = v4108;
                  v4097 = v4412;
                  v4098 = v4409;
                  v4099 = v4405;
                  v4100 = v4400;
                  v3692 = v4390;
                }
                v4145 = (uint8x8_t)(v4117 + 1);
                do
                {
                  v4096 += 8;
                  v4146 = v4118->u8[0];
                  v4118 = (uint8x8_t *)((char *)v4118 + 1);
                  *(_QWORD *)&v4095 |= (unint64_t)v4146 << v4119;
                  *v3688 = v4145;
                  v4119 -= 8;
                  ++*(_QWORD *)&v4145;
                }
                while (v4119 >= v4111);
              }
            }
            else
            {
              v4097 = v4412;
              v4098 = v4409;
              v4099 = v4405;
              v4100 = v4400;
            }
LABEL_3081:
            v4147 = (((v4094 << 7) - 128) >> 8) + 1;
            v4148 = (int8x8_t)(*(_QWORD *)&v4095 - (v4147 << 56));
            if (*(_QWORD *)&v4095 >= (unint64_t)(v4147 << 56))
            {
              LODWORD(v4147) = *(_DWORD *)(v2867 + 10668) - v4147;
              v4149 = 1;
              v4095 = v4148;
            }
            else
            {
              v4149 = 0;
            }
            v4150 = vp8_norm[v4147];
            *(_QWORD *)(v2867 + 10656) = *(_QWORD *)&v4095 << v4150;
            *(_DWORD *)(v2867 + 10664) = v4096 - v4150;
            *(_DWORD *)(v2867 + 10668) = (_DWORD)v4147 << v4150;
            *(_BYTE *)(v4438 + v3692) = v4098 | v4097 | v4099 | v4100 | v3989 | v4040 | v4092 | v4149;
            v3687 = v4393;
          }
          v3691 = v4427;
          if (v4427
            && *(unsigned __int8 *)(v4438 + v3692) != *(unsigned __int8 *)(v2867
                                                                         + 264 * v3687
                                                                         + 33 * v4396
                                                                         + 11 * v4395
                                                                         + v3692
                                                                         + 9109))
          {
            *(_DWORD *)(v2867 + 10984) = 0;
          }
          if (++v3692 != 11)
            continue;
          break;
        }
        v3691 = v4427 + 1;
        if (v4427 != 2)
          continue;
        break;
      }
      if (++v4396 != 8)
        continue;
      break;
    }
    if (++v3687 != 4)
      continue;
    break;
  }
  v4389 = (uint8x8_t *)(v2867 + 384);
  bzero((void *)(v2867 + 384), 0x320uLL);
  vp8_decode_mode_mvs(a1);
  bzero(*(void **)(a1 + 7960), 9 * *(int *)(a1 + 7432));
  v4151 = (_DWORD *)a1;
  *(_DWORD *)(a1 + 10988) = 0;
  v4152 = atomic_load((unsigned int *)(a1 + 10832));
  v4153 = v4151[2553];
  if (!v4152 || !v4153)
  {
    v4381 = *(unsigned __int8 **)(a1 + 3872);
    v4160 = *(int **)(a1 + 4352);
    v4161 = v4160[4];
    v4162 = v4160[9];
    v4163 = *(_QWORD *)(a1 + 4360);
    v4443 = *(_OWORD *)(v4163 + 56);
    v4444 = *(_QWORD *)(v4163 + 72);
    LODWORD(v4163) = *(_DWORD *)(v4163 + 148);
    v4441[0] = 0;
    v4441[1] = v4163;
    v4164 = *(_QWORD *)(a1 + 4368);
    v4445 = *(_OWORD *)(v4164 + 56);
    v4446 = *(_QWORD *)(v4164 + 72);
    LODWORD(v4164) = *(_DWORD *)(v4164 + 148);
    v4165 = *(_QWORD *)(a1 + 4376);
    v4447 = *(_OWORD *)(v4165 + 56);
    v4448 = *(_QWORD *)(v4165 + 72);
    LODWORD(v4165) = *(_DWORD *)(v4165 + 148);
    v4441[2] = v4164;
    v4441[3] = v4165;
    v4166 = (int8x16_t *)*((_QWORD *)v4160 + 7);
    v4401 = (unsigned __int8 *)*((_QWORD *)v4160 + 8);
    v4397 = (unsigned __int8 *)*((_QWORD *)v4160 + 9);
    *(_DWORD *)(a1 + 3888) = 0;
    v4167 = *(_DWORD *)(a1 + 7908);
    v4369 = v4161;
    v4168 = v4161;
    v4406 = v4166;
    if (v4167)
    {
      vp8_loop_filter_frame_init((uint64_t)v4388, (_BYTE *)a1, v4167);
      v4166 = (int8x16_t *)*((_QWORD *)v4160 + 7);
      v4168 = v4160[4];
    }
    memset(&v4166->i8[~(uint64_t)v4168], 127, *v4160 + 5);
    memset((void *)(~(uint64_t)v4160[9] + *((_QWORD *)v4160 + 8)), 127, v4160[5] + 5);
    memset((void *)(~(uint64_t)v4160[9] + *((_QWORD *)v4160 + 9)), 127, v4160[5] + 5);
    v4169 = a1;
    v4382 = v4160;
    if (*(int *)(a1 + 7428) < 1)
    {
      v4383 = -1;
      v4380 = v4406;
      v4373 = (uint64_t)v4401;
      v4374 = (uint64_t)v4397;
      v4370 = (unsigned __int8 *)v4406;
      v4371 = v4401;
      v4372 = v4397;
LABEL_3186:
      if (*(_DWORD *)(v4169 + 7908))
      {
        if (*(_DWORD *)(v4169 + 7504))
          vp8_loop_filter_row_simple((uint64_t)v4388, v4381, v4383, v4369, v4380);
        else
          vp8_loop_filter_row_normal((uint64_t)v4388, v4381, v4383, v4369, v4162, (uint64_t)v4380, v4373, v4374);
        yv12_extend_frame_left_right_c(v4160, v4370, v4371, v4372);
        v4300 = &v4370[16 * v4369];
        v4299 = &v4371[8 * v4162];
        v4298 = &v4372[8 * v4162];
      }
      else
      {
        v4299 = v4371;
        v4298 = v4372;
        v4300 = v4370;
      }
      yv12_extend_frame_left_right_c(v4160, v4300, v4299, v4298);
      v4301 = v4160[26];
      if ((int)v4301 >= 1)
      {
        v4302 = (char *)(*((_QWORD *)v4382 + 7) - v4301);
        v4303 = v4382[4];
        v4304 = &v4302[-(v4303 * v4301)];
        v4305 = v4301;
        do
        {
          memcpy(v4304, v4302, v4303);
          v4304 += v4303;
          --v4305;
        }
        while (v4305);
      }
      if (v4301 >= 2)
      {
        v4306 = v4382[9];
        v4307 = -(uint64_t)(v4301 >> 1);
        v4308 = (char *)(*((_QWORD *)v4382 + 8) - (v4301 >> 1));
        v4309 = v4306 * (v4301 >> 1);
        v4310 = -v4309;
        v4311 = &v4308[-v4309];
        if ((v4301 >> 1) <= 1)
          v4312 = 1;
        else
          v4312 = v4301 >> 1;
        v4313 = v4312;
        do
        {
          memcpy(v4311, v4308, v4306);
          v4311 += v4306;
          --v4313;
        }
        while (v4313);
        v4314 = (char *)(*((_QWORD *)v4382 + 9) + v4307);
        v4315 = &v4314[v4310];
        do
        {
          memcpy(v4315, v4314, v4306);
          v4315 += v4306;
          --v4312;
        }
        while (v4312);
      }
      v4316 = v4382[26];
      if ((int)v4316 >= 1)
      {
        v4317 = v4382[4];
        v4318 = (char *)(*((_QWORD *)v4382 + 7) - v4316 + v4382[1] * (uint64_t)(int)v4317);
        v4319 = &v4318[-v4317];
        v4320 = v4382[26];
        do
        {
          memcpy(v4318, v4319, v4317);
          v4318 += v4317;
          --v4320;
        }
        while (v4320);
      }
      if (v4316 >= 2)
      {
        v4321 = v4382[9];
        v4322 = -(uint64_t)(v4316 >> 1);
        v4323 = v4382[6] * (uint64_t)(int)v4321;
        v4324 = (char *)(*((_QWORD *)v4382 + 8) - (v4316 >> 1) + v4323);
        v4325 = &v4324[-v4321];
        if ((v4316 >> 1) <= 1)
          v4326 = 1;
        else
          v4326 = v4316 >> 1;
        v4327 = v4326;
        do
        {
          memcpy(v4324, v4325, v4321);
          v4324 += v4321;
          --v4327;
        }
        while (v4327);
        v4328 = (char *)(*((_QWORD *)v4382 + 9) + v4322 + v4323);
        v4329 = &v4328[-v4321];
        do
        {
          memcpy(v4328, v4329, v4321);
          v4328 += v4321;
          --v4326;
        }
        while (v4326);
      }
      v4151 = (_DWORD *)a1;
      v4159 = *(_DWORD *)(a1 + 4064);
      goto LABEL_3221;
    }
    v4170 = 0;
    v4171 = 0;
    v4172 = 0;
    v4378 = 0;
    v4173 = 1 << v4153;
    v4421 = (int16x8_t *)(a1 + 2016);
    v4439 = (_QWORD *)(a1 + 1984);
    LODWORD(v4174) = 16 * v4369;
    LODWORD(v4175) = 8 * v4162;
    v4371 = v4401;
    v4372 = v4397;
    v4370 = (unsigned __int8 *)v4406;
    v4373 = (uint64_t)v4401;
    v4374 = (uint64_t)v4397;
    v4379 = v4162;
    v4380 = v4406;
    v4377 = 1 << v4153;
    v4375 = 8 * (int)v4162;
    v4376 = 16 * v4369;
    while (1)
    {
      if (v4173 > 1)
      {
        *(_QWORD *)(v4169 + 4056) = v4169 + 48 * v4378 + 10256;
        if (v4378 + 1 == v4173)
          v4176 = 0;
        else
          v4176 = v4378 + 1;
        v4378 = v4176;
      }
      v4384 = v4170;
      *(_QWORD *)(v4169 + 3952) = *(_QWORD *)(v4169 + 7960);
      v4177 = *(_QWORD *)(v4169 + 3960);
      *(_BYTE *)(v4177 + 8) = 0;
      v4178 = v4175 * v4170;
      *(_QWORD *)v4177 = 0;
      *(_DWORD *)(v4169 + 3892) = 0;
      *(_DWORD *)(v4169 + 4012) = -128 * v4170;
      v4383 = v4170;
      *(_DWORD *)(v4169 + 4016) = (*(_DWORD *)(v4169 + 7428) + ~(_DWORD)v4170) << 7;
      v4179 = &v4406->i8[(int)v4174 * (int)v4170];
      v4180 = &v4401[v4178];
      v4181 = &v4397[v4178];
      v4182 = v4179 - 1;
      *(_QWORD *)(v4169 + 3920) = v4179 - 1;
      v4183 = v4180 - 1;
      *(_QWORD *)(v4169 + 3928) = v4180 - 1;
      v4184 = v4181 - 1;
      *(_QWORD *)(v4169 + 3936) = v4181 - 1;
      v4185 = *(int *)(v4169 + 3728);
      *(_QWORD *)(v4169 + 3896) = &v4179[-v4185];
      v4186 = *(int *)(v4169 + 3748);
      *(_QWORD *)(v4169 + 3904) = &v4180[-v4186];
      *(_QWORD *)(v4169 + 3912) = &v4181[-v4186];
      *(_DWORD *)(v4169 + 3944) = v4185;
      *(_DWORD *)(v4169 + 3948) = v4186;
      *(v4179 - 1) = -127;
      v4182[v4185] = -127;
      v4182[2 * v4185] = -127;
      v4182[3 * v4185] = -127;
      v4182[4 * v4185] = -127;
      v4182[5 * v4185] = -127;
      v4386 = v4172;
      v4182[6 * (int)v4185] = -127;
      v4182[7 * v4185] = -127;
      v4182[8 * v4185] = -127;
      v4187 = 2 * v4186;
      v4182[9 * v4185] = -127;
      v4182[10 * (int)v4185] = -127;
      v4182[11 * (int)v4185] = -127;
      v4182[12 * (int)v4185] = -127;
      v4182[13 * (int)v4185] = -127;
      v4182[14 * (int)v4185] = -127;
      v4182[16 * v4185 - v4185] = -127;
      v4188 = 3 * v4186;
      v4189 = 4 * v4186;
      v4190 = 5 * v4186;
      v4191 = 6 * v4186;
      *(v4180 - 1) = -127;
      v4183[v4186] = -127;
      v4183[v4187] = -127;
      v4183[v4188] = -127;
      v4183[v4189] = -127;
      v4183[v4190] = -127;
      v4183[v4191] = -127;
      v4192 = 7 * v4186;
      v4183[v4192] = -127;
      v4385 = v4171;
      *(v4181 - 1) = -127;
      v4184[v4186] = -127;
      v4184[v4187] = -127;
      v4184[v4188] = -127;
      v4184[v4189] = -127;
      v4184[v4190] = -127;
      v4184[v4191] = -127;
      v4184[v4192] = -127;
      v4193 = *(_DWORD *)(v4169 + 7432);
      if (v4193 >= 1)
      {
        v4194 = 0;
        v4195 = *(unsigned __int8 **)(v4169 + 3872);
        v4196 = v4385;
        v4197 = v4386;
        do
        {
          *(_DWORD *)(v4169 + 4004) = -128 * v4194;
          *(_DWORD *)(v4169 + 4008) = (v4193 + ~v4194) << 7;
          *(_QWORD *)(v4169 + 3768) = (char *)v4406 + v4196;
          *(_QWORD *)(v4169 + 3776) = &v4401[v4197];
          *(_QWORD *)(v4169 + 3784) = &v4397[v4197];
          v4204 = v4195[2];
          if (v4195[2])
          {
            v4205 = &v4442[3 * v4195[2]];
            v4206 = v4205[1];
            *(_QWORD *)(v4169 + 3608) = *v4205 + v4196;
            *(_QWORD *)(v4169 + 3616) = v4206 + v4197;
            v4207 = v4205[2] + v4197;
          }
          else
          {
            v4207 = 0;
            *(_QWORD *)(a1 + 3608) = 0;
            *(_QWORD *)(a1 + 3616) = 0;
          }
          v4413 = v4196;
          *(_QWORD *)(v4169 + 3624) = v4207;
          *(_DWORD *)(v4169 + 4064) |= v4441[v4204];
          if (v4195[9])
          {
            v4208 = *(_QWORD *)(v4169 + 3952);
            v4209 = *(_QWORD *)(v4169 + 3960);
            *(_QWORD *)v4208 = 0;
            *(_QWORD *)v4209 = 0;
            v4195 = *(unsigned __int8 **)(v4169 + 3872);
            if (!v4195[3])
            {
              *(_BYTE *)(v4209 + 8) = 0;
              *(_BYTE *)(v4208 + 8) = 0;
              v4195 = *(unsigned __int8 **)(v4169 + 3872);
            }
          }
          else if ((*(_DWORD *)(*(_QWORD *)(v4169 + 4056) + 24) - 0x40000000) < 0xC0000041)
          {
            v4210 = vp8_decode_mb_tokens(v4169, (_QWORD *)v4169);
            v4169 = a1;
            v4195 = *(unsigned __int8 **)(a1 + 3872);
            v4195[9] = v4210 == 0;
          }
          v4211 = *v4195;
          if (*(_BYTE *)(v4169 + 3968))
          {
            vp8_mb_init_dequantizer(v4169, v4169);
            v4169 = a1;
            v4195 = *(unsigned __int8 **)(a1 + 3872);
          }
          if (v4195[2])
          {
            vp8_build_inter_predictors_mb(v4169);
            v4169 = a1;
          }
          else
          {
            v4212 = *(_QWORD *)(v4169 + 3904);
            v4213 = *(_QWORD *)(v4169 + 3912);
            v4214 = *(_BYTE **)(v4169 + 3928);
            v4215 = *(char **)(v4169 + 3936);
            v4216 = *(int *)(v4169 + 3948);
            v4217 = *(_QWORD *)(v4169 + 3776);
            v4218 = v4195[1];
            v4457[0] = *v4214;
            v4449 = *v4215;
            v4457[1] = v4214[v4216];
            v4450 = v4215[v4216];
            v4219 = *(_QWORD *)(v4169 + 3784);
            v4457[2] = v4214[2 * v4216];
            v4451 = v4215[2 * v4216];
            v4458 = v4214[3 * v4216];
            v4452 = v4215[3 * v4216];
            LOBYTE(v4459[0]) = v4214[4 * v4216];
            v4220 = *(int *)(v4169 + 3748);
            v4453 = v4215[4 * v4216];
            BYTE1(v4459[0]) = v4214[5 * v4216];
            v4454 = v4215[5 * v4216];
            BYTE2(v4459[0]) = v4214[6 * v4216];
            v4455 = v4215[6 * v4216];
            v4216 *= 7;
            BYTE3(v4459[0]) = v4214[v4216];
            v4456 = v4215[v4216];
            if (v4218)
              v4221 = (uint64_t *)((char *)&pred + 16 * v4218);
            else
              v4221 = &dc_pred[4 * *(int *)(v4169 + 3892) + 2 * *(int *)(v4169 + 3888)];
            v4222 = (void (*)(uint64_t, uint64_t, uint64_t, char *))v4221[1];
            v4222(v4217, v4220, v4212, v4457);
            v4222(v4219, v4220, v4213, &v4449);
            if (v4211 == 4)
            {
              v4169 = a1;
              if (*(_BYTE *)(*(_QWORD *)(a1 + 3872) + 9))
              {
                *v4439 = 0;
                *(_QWORD *)(a1 + 1992) = 0;
                *(_BYTE *)(a1 + 2008) = 0;
                *(_QWORD *)(a1 + 2000) = 0;
              }
              v4223 = 0;
              v4224 = *(int *)(a1 + 3728);
              v4225 = *(_QWORD *)(a1 + 3896);
              v4226 = *(_QWORD *)(a1 + 3768) - v4224 + 16;
              *(_DWORD *)(v4226 + 4 * v4224) = *(_DWORD *)(v4225 + 16);
              *(_DWORD *)(v4226 + 8 * v4224) = *(_DWORD *)(v4225 + 16);
              *(_DWORD *)(v4226 + 12 * (int)v4224) = *(_DWORD *)(v4225 + 16);
              v4227 = a1 + 2144;
              do
              {
                v4232 = (__int32 *)(*(_QWORD *)(v4169 + 3768) + *(int *)(v4227 + 32));
                v4233 = *(unsigned int *)(*(_QWORD *)(v4169 + 3872) + 4 * v4223 + 12);
                v4234 = *((_BYTE *)v4232 - v4224 - 1);
                v4449 = *((_BYTE *)v4232 - 1);
                v4450 = *((_BYTE *)v4232 + v4224 - 1);
                v4451 = *((_BYTE *)v4232 + 2 * v4224 - 1);
                v4452 = *((_BYTE *)v4232 + 3 * v4224 - 1);
                v4459[0] = *(_QWORD *)((char *)v4232 - v4224);
                v4458 = v4234;
                (*(&pred_0 + v4233))(v4232, v4224, v4459, &v4449);
                if (*((_BYTE *)v4439 + v4223))
                {
                  v4235 = *(int16x8_t **)v4227;
                  if (*((char *)v4439 + v4223) < 2)
                  {
                    v4228 = (uint16x8_t)vdupq_n_s16(((__int16)(v4421->i16[0] * v4235->i16[0]) + 4) >> 3);
                    v4229.i32[0] = *v4232;
                    v4229.i32[1] = *(__int32 *)((char *)v4232 + v4224);
                    v4230 = (__int32 *)((char *)v4232 + v4224 + v4224);
                    v4231 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v4228, v4229));
                    *v4232 = v4231.i32[0];
                    *(__int32 *)((char *)v4232 + v4224) = v4231.i32[1];
                    v4231.i32[0] = *v4230;
                    v4231.i32[1] = *(__int32 *)((char *)v4230 + v4224);
                    *(int8x8_t *)v4228.i8 = vqmovun_s16((int16x8_t)vaddw_u8(v4228, v4231));
                    *v4230 = v4228.i32[0];
                    *(__int32 *)((char *)v4230 + v4224) = v4228.i32[1];
                    **(_DWORD **)v4227 = 0;
                  }
                  else
                  {
                    vp8_dequant_idct_add_neon(v4235, v4421, v4232, v4224);
                  }
                }
                v4227 += 56;
                ++v4223;
                v4169 = a1;
              }
              while (v4223 != 16);
            }
            else
            {
              vp8_build_intra_predictors_mby_s(a1, *(_QWORD *)(a1 + 3896), *(_BYTE **)(a1 + 3920), *(_DWORD *)(a1 + 3944), *(_QWORD *)(a1 + 3768), *(_DWORD *)(a1 + 3728));
              v4169 = a1;
            }
          }
          v4201 = *(_QWORD *)(v4169 + 3872);
          if (!*(_BYTE *)(v4201 + 9))
          {
            if (v4211 != 4)
            {
              v4200 = (int16x8_t *)(a1 + 2016);
              if (v4211 != 9)
              {
                v4236 = *(const __int16 **)(v4169 + 3488);
                if (*(char *)(v4169 + 2008) < 2)
                {
                  v4198 = *(_WORD *)(v4169 + 2080) * *v4236;
                  **(_WORD **)(v4169 + 3496) = v4198;
                  v4199 = (v4198 + 3) >> 3;
                  *(_WORD *)(v4169 + 384) = v4199;
                  *(_WORD *)(v4169 + 416) = v4199;
                  *(_WORD *)(v4169 + 448) = v4199;
                  *(_WORD *)(v4169 + 480) = v4199;
                  *(_WORD *)(v4169 + 512) = v4199;
                  *(_WORD *)(v4169 + 544) = v4199;
                  *(_WORD *)(v4169 + 576) = v4199;
                  *(_WORD *)(v4169 + 608) = v4199;
                  *(_WORD *)(v4169 + 640) = v4199;
                  *(_WORD *)(v4169 + 672) = v4199;
                  *(_WORD *)(v4169 + 704) = v4199;
                  *(_WORD *)(v4169 + 736) = v4199;
                  *(_WORD *)(v4169 + 768) = v4199;
                  *(_WORD *)(v4169 + 800) = v4199;
                  *(_WORD *)(v4169 + 832) = v4199;
                  *(_WORD *)(v4169 + 864) = v4199;
                  *(_DWORD *)v4236 = 0;
                }
                else
                {
                  v4460 = vld2q_s16(v4236);
                  v4237 = (const __int16 *)(a1 + 2080);
                  v4461 = vld2q_s16(v4237);
                  v4462.val[0] = vmulq_s16(v4461.val[0], v4460.val[0]);
                  v4462.val[1] = vmulq_s16(v4461.val[1], v4460.val[1]);
                  v4238 = *(__int16 **)(v4169 + 3496);
                  vst2q_s16(v4238, v4462);
                  v4239 = *(_QWORD *)(v4169 + 3496);
                  v4460.val[1] = *(int16x8_t *)(v4239 + 16);
                  v4461.val[0].i64[0] = vextq_s8((int8x16_t)v4460.val[1], (int8x16_t)v4460.val[1], 8uLL).u64[0];
                  *(int16x4_t *)v4461.val[1].i8 = vadd_s16(*(int16x4_t *)v4461.val[0].i8, *(int16x4_t *)v4239);
                  v4462.val[0].i64[0] = vextq_s8(*(int8x16_t *)v4239, *(int8x16_t *)v4239, 8uLL).u64[0];
                  *(int16x4_t *)v4462.val[1].i8 = vadd_s16(*(int16x4_t *)v4460.val[1].i8, *(int16x4_t *)v4462.val[0].i8);
                  *(int16x4_t *)v4460.val[0].i8 = vsub_s16(*(int16x4_t *)v4239, *(int16x4_t *)v4461.val[0].i8);
                  *(int16x4_t *)v4460.val[1].i8 = vsub_s16(*(int16x4_t *)v4462.val[0].i8, *(int16x4_t *)v4460.val[1].i8);
                  *(int16x4_t *)v4461.val[0].i8 = vadd_s16(*(int16x4_t *)v4461.val[1].i8, *(int16x4_t *)v4462.val[1].i8);
                  *(int16x4_t *)v4461.val[1].i8 = vsub_s16(*(int16x4_t *)v4461.val[1].i8, *(int16x4_t *)v4462.val[1].i8);
                  *(int16x4_t *)v4462.val[0].i8 = vadd_s16(*(int16x4_t *)v4460.val[0].i8, *(int16x4_t *)v4460.val[1].i8);
                  *(int16x4_t *)v4460.val[0].i8 = vsub_s16(*(int16x4_t *)v4460.val[0].i8, *(int16x4_t *)v4460.val[1].i8);
                  *(int32x2_t *)v4460.val[1].i8 = vzip1_s32(*(int32x2_t *)v4461.val[0].i8, *(int32x2_t *)v4461.val[1].i8);
                  *(int32x2_t *)v4462.val[1].i8 = vzip1_s32(*(int32x2_t *)v4462.val[0].i8, *(int32x2_t *)v4460.val[0].i8);
                  v4240 = vtrn1_s16(*(int16x4_t *)v4460.val[1].i8, *(int16x4_t *)v4462.val[1].i8);
                  *(int16x4_t *)v4460.val[1].i8 = vtrn2_s16(*(int16x4_t *)v4460.val[1].i8, *(int16x4_t *)v4462.val[1].i8);
                  *(int32x2_t *)v4461.val[0].i8 = vzip2_s32(*(int32x2_t *)v4461.val[0].i8, *(int32x2_t *)v4461.val[1].i8);
                  *(int32x2_t *)v4460.val[0].i8 = vzip2_s32(*(int32x2_t *)v4462.val[0].i8, *(int32x2_t *)v4460.val[0].i8);
                  *(int16x4_t *)v4461.val[1].i8 = vtrn1_s16(*(int16x4_t *)v4461.val[0].i8, *(int16x4_t *)v4460.val[0].i8);
                  *(int16x4_t *)v4460.val[0].i8 = vtrn2_s16(*(int16x4_t *)v4461.val[0].i8, *(int16x4_t *)v4460.val[0].i8);
                  *(int16x4_t *)v4461.val[0].i8 = vadd_s16(v4240, *(int16x4_t *)v4460.val[0].i8);
                  *(int16x4_t *)v4462.val[0].i8 = vadd_s16(*(int16x4_t *)v4460.val[1].i8, *(int16x4_t *)v4461.val[1].i8);
                  v4461.val[0].u64[1] = (unint64_t)vsub_s16(v4240, *(int16x4_t *)v4460.val[0].i8);
                  v4462.val[0].u64[1] = (unint64_t)vsub_s16(*(int16x4_t *)v4460.val[1].i8, *(int16x4_t *)v4461.val[1].i8);
                  v4461.val[1].i64[0] = 0x3000300030003;
                  v4461.val[1].i64[1] = 0x3000300030003;
                  v4460.val[0] = vshrq_n_s16(vaddq_s16(vaddq_s16(v4462.val[0], v4461.val[0]), v4461.val[1]), 3uLL);
                  *(_WORD *)(v4169 + 416) = v4460.val[0].i16[4];
                  *(_WORD *)(v4169 + 384) = v4460.val[0].i16[0];
                  v4460.val[1] = vshrq_n_s16(vaddq_s16(vsubq_s16(v4461.val[0], v4462.val[0]), v4461.val[1]), 3uLL);
                  *(_WORD *)(v4169 + 448) = v4460.val[1].i16[0];
                  *(_WORD *)(v4169 + 480) = v4460.val[1].i16[4];
                  *(_WORD *)(v4169 + 512) = v4460.val[0].i16[1];
                  *(_WORD *)(v4169 + 544) = v4460.val[0].i16[5];
                  *(_WORD *)(v4169 + 576) = v4460.val[1].i16[1];
                  *(_WORD *)(v4169 + 608) = v4460.val[1].i16[5];
                  *(_WORD *)(v4169 + 640) = v4460.val[0].i16[2];
                  *(_WORD *)(v4169 + 672) = v4460.val[0].i16[6];
                  *(_WORD *)(v4169 + 704) = v4460.val[1].i16[2];
                  *(_WORD *)(v4169 + 736) = v4460.val[1].i16[6];
                  *(_WORD *)(v4169 + 768) = v4460.val[0].i16[3];
                  *(_WORD *)(v4169 + 800) = v4460.val[0].i16[7];
                  *(_WORD *)(v4169 + 832) = v4460.val[1].i16[3];
                  *(_WORD *)(v4169 + 864) = v4460.val[1].i16[7];
                  v4241 = *(_OWORD **)(v4169 + 3488);
                  *v4241 = 0u;
                  v4241[1] = 0u;
                }
                v4200 = (int16x8_t *)(a1 + 2048);
              }
              vp8_dequant_idct_add_y_block_neon(v4389, v4200, *(uint8x8_t **)(v4169 + 3768), *(_DWORD *)(v4169 + 3728), (uint64_t)v4439);
              v4169 = a1;
            }
            vp8_dequant_idct_add_uv_block_neon((int16x8_t *)(a1 + 896), (int16x8_t *)(a1 + 2112), *(uint8x8_t **)(v4169 + 3776), *(uint8x8_t **)(v4169 + 3784), *(_DWORD *)(v4169 + 3748), (_WORD *)(a1 + 2000));
            v4169 = a1;
            v4201 = *(_QWORD *)(a1 + 3872);
          }
          v4202 = vaddq_s64(*(int64x2_t *)v4387, (int64x2_t)xmmword_208F3C2C0);
          v4203 = vaddq_s64(*(int64x2_t *)(v4387 + 16), (int64x2_t)xmmword_208F3C2D0);
          *(_DWORD *)(v4169 + 3892) = 1;
          *(_DWORD *)(v4169 + 4064) |= (*(_DWORD *)(*(_QWORD *)(v4169 + 4056) + 24) - 65) < 0x3FFFFFBF;
          *(int64x2_t *)v4387 = v4202;
          *(int64x2_t *)(v4387 + 16) = v4203;
          *(int64x2_t *)(v4387 + 32) = vaddq_s64(*(int64x2_t *)(v4387 + 32), vdupq_n_s64(8uLL));
          v4196 = v4413 + 16;
          v4197 += 8;
          v4195 = (unsigned __int8 *)(v4201 + 76);
          *(_QWORD *)(v4169 + 3872) = v4195;
          *(_QWORD *)(v4169 + 3952) += 9;
          ++v4194;
          v4193 = *(_DWORD *)(v4169 + 7432);
        }
        while (v4194 < v4193);
      }
      v4160 = v4382;
      v4242 = (_BYTE *)(*(_QWORD *)(v4169 + 3768) + 14 * v4382[4]);
      v4243 = 6 * v4382[9];
      v4244 = (_BYTE *)(*(_QWORD *)(v4169 + 3776) + v4243);
      v4245 = (_BYTE *)(*(_QWORD *)(v4169 + 3784) + v4243);
      v4242[16] = v4242[15];
      v4244[8] = v4244[7];
      v4246 = v4244 + 8;
      v4245[8] = v4245[7];
      v4247 = v4245 + 8;
      v4242[17] = v4242[15];
      v4244[9] = v4244[7];
      v4245[9] = v4245[7];
      v4242[18] = v4242[15];
      v4244[10] = v4244[7];
      v4245[10] = v4245[7];
      v4242[19] = v4242[15];
      v4244[11] = v4244[7];
      v4245[11] = v4245[7];
      v4248 = &v4242[v4382[4] + 16];
      v4249 = v4382[9];
      v4250 = &v4246[v4249];
      v4251 = &v4247[v4249];
      *v4248 = *(v4248 - 1);
      *v4250 = *(v4250 - 1);
      *v4251 = *(v4251 - 1);
      v4248[1] = *(v4248 - 1);
      v4250[1] = *(v4250 - 1);
      v4251[1] = *(v4251 - 1);
      v4248[2] = *(v4248 - 1);
      v4250[2] = *(v4250 - 1);
      v4251[2] = *(v4251 - 1);
      v4248[3] = *(v4248 - 1);
      v4250[3] = *(v4250 - 1);
      v4251[3] = *(v4251 - 1);
      *(_QWORD *)(v4169 + 3872) += 76;
      *(_DWORD *)(v4169 + 3888) = 1;
      if (*(_DWORD *)(v4169 + 7908))
      {
        v4162 = v4379;
        v4252 = v4384;
        if (v4384)
        {
          v4253 = v4383 - 1;
          if (*(_DWORD *)(v4169 + 7504))
          {
            vp8_loop_filter_row_simple((uint64_t)v4388, v4381, v4253, v4369, v4380);
            if (v4384 >= 2)
              goto LABEL_3150;
LABEL_3154:
            v4169 = a1;
            v4173 = v4377;
            v4175 = v4375;
            v4174 = 16 * v4369;
          }
          else
          {
            vp8_loop_filter_row_normal((uint64_t)v4388, v4381, v4253, v4369, v4379, (uint64_t)v4380, v4373, v4374);
            if (v4384 < 2)
              goto LABEL_3154;
LABEL_3150:
            yv12_extend_frame_left_right_c(v4382, v4370, v4371, v4372);
            v4175 = v4375;
            v4174 = 16 * v4369;
            v4370 += v4376;
            v4371 += v4375;
            v4372 += v4375;
            v4169 = a1;
            v4173 = v4377;
          }
          v4380 = (int8x16_t *)((char *)v4380 + v4174);
          v4373 += v4175;
          v4374 += v4175;
          v4381 += 76 * *(int *)(v4169 + 7432) + 76;
          goto LABEL_3103;
        }
      }
      else
      {
        v4162 = v4379;
        v4252 = v4384;
        if (v4384)
        {
          yv12_extend_frame_left_right_c(v4382, v4370, v4371, v4372);
          v4169 = a1;
          LODWORD(v4175) = v4375;
          LODWORD(v4174) = 16 * v4369;
          v4370 += v4376;
          v4371 += v4375;
          v4372 += v4375;
          v4173 = v4377;
          goto LABEL_3103;
        }
      }
      v4173 = v4377;
      LODWORD(v4175) = v4375;
      LODWORD(v4174) = 16 * v4369;
LABEL_3103:
      v4170 = v4252 + 1;
      v4172 = v4386 + v4175;
      v4171 = v4385 + v4174;
      if (v4170 >= *(int *)(v4169 + 7428))
        goto LABEL_3186;
    }
  }
  if (vp8mt_decode_mb_rows(a1, a1))
  {
    vp8_decoder_remove_threads(a1);
    *(_DWORD *)(a1 + 11008) = 1;
    *(_QWORD *)(a1 + 4384) = 7;
    if (*(_DWORD *)(a1 + 4472))
      longjmp((int *)(a1 + 4476), 7);
  }
  v4154 = *((_DWORD *)v4368 + 26);
  if (v4154 >= 0)
    v4155 = *((_DWORD *)v4368 + 26);
  else
    v4155 = v4154 + 1;
  v4156 = v4155 >> 1;
  extend_plane(*((unsigned __int8 **)v4368 + 7), *((_DWORD *)v4368 + 4), *((_DWORD *)v4368 + 2), *((_DWORD *)v4368 + 3), v4154, *((_DWORD *)v4368 + 26), v4154 - *((_DWORD *)v4368 + 3) + *((_DWORD *)v4368 + 1), v4154 - *((_DWORD *)v4368 + 2) + *(_DWORD *)v4368);
  extend_plane(*((unsigned __int8 **)v4368 + 8), *((_DWORD *)v4368 + 9), *((_DWORD *)v4368 + 7), *((_DWORD *)v4368 + 8), v4156, v4156, v4156 - *((_DWORD *)v4368 + 8) + *((_DWORD *)v4368 + 6), v4156 - *((_DWORD *)v4368 + 7) + *((_DWORD *)v4368 + 5));
  extend_plane(*((unsigned __int8 **)v4368 + 9), *((_DWORD *)v4368 + 9), *((_DWORD *)v4368 + 7), *((_DWORD *)v4368 + 8), v4156, v4156, v4156 - *((_DWORD *)v4368 + 8) + *((_DWORD *)v4368 + 6), v4156 - *((_DWORD *)v4368 + 7) + *((_DWORD *)v4368 + 5));
  v4157 = *(unsigned int *)(a1 + 10844);
  if ((_DWORD)v4157)
  {
    if ((_DWORD)v4157 == 1)
    {
      v4158 = 0;
      v4159 = 0;
      goto LABEL_3219;
    }
    v4330 = 0;
    v4331 = 0;
    v4158 = v4157 & 0xFFFFFFFE;
    v4332 = v4158;
    v4333 = *(_QWORD *)(a1 + 10928);
    do
    {
      v4330 |= *(_DWORD *)(v4333 + 4064);
      v4331 |= *(_DWORD *)(v4333 + 8416);
      v4333 += 8704;
      v4332 -= 2;
    }
    while (v4332);
    v4159 = v4331 | v4330;
    if (v4158 != v4157)
    {
LABEL_3219:
      v4334 = v4157 - v4158;
      v4335 = (_DWORD *)(*(_QWORD *)(a1 + 10928) + 4352 * v4158 + 4064);
      do
      {
        v4159 |= *v4335;
        v4335 += 1088;
        --v4334;
      }
      while (v4334);
    }
  }
  else
  {
    v4159 = 0;
  }
LABEL_3221:
  v4336 = v4159 | ((v4151[2666] - 65) < 0x3FFFFFBF);
  *((_DWORD *)v4368 + 37) = v4336;
  if (v4151[2745])
  {
    if (v4151[1985])
      return 0;
LABEL_3228:
    memcpy((char *)v4151 + 9090, (char *)v4151 + 7977, 0x459uLL);
    result = 0;
    v4151[2746] = v4366;
  }
  else
  {
    if (*v4367 | v4336)
    {
      vpx_internal_error((uint64_t)v4388, 7, "A stream must start with a complete key frame");
      v4151 = (_DWORD *)a1;
      if (!*(_DWORD *)(a1 + 7940))
        goto LABEL_3228;
    }
    else
    {
      *v4365 = 1;
      if (!v4151[1985])
        goto LABEL_3228;
    }
    return 0;
  }
  return result;
}

uint64_t get_delta_q(int8x8_t *a1, int a2, _DWORD *a3)
{
  unsigned int v4;
  uint64_t v5;
  int8x8_t v6;
  unsigned int v7;
  uint8x8_t *v8;
  int8x8_t *v9;
  signed int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  void (*v14)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v15;
  BOOL v16;
  int v17;
  int8x8_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v24;
  int8x8_t v25;
  uint8x8_t *v26;
  int v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int32x4_t v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint8x8_t v40;
  uint16x8_t v41;
  uint32x4_t v42;
  uint64x2_t v43;
  uint64x2_t v44;
  uint64x2_t v45;
  uint32x4_t v46;
  uint64x2_t v47;
  uint64x2_t v48;
  uint64x2_t v49;
  uint64x2_t v50;
  uint64x2_t v51;
  int8x16_t v52;
  int8x8_t v53;
  unsigned int v54;
  unint64_t v55;
  int8x8_t v56;
  int8x8_t v57;
  int v58;
  int8x8_t v59;
  unsigned int v60;
  uint64_t result;
  uint64_t v62;
  int8x8_t v63;
  int v64;
  uint8x8_t *v65;
  int8x8_t *v66;
  signed int v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  void (*v71)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v72;
  BOOL v73;
  int v74;
  int8x8_t v76;
  int v77;
  int v78;
  unsigned int v79;
  uint64_t v81;
  int8x8_t v82;
  uint8x8_t *v83;
  signed int v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int32x4_t v91;
  int32x4_t v92;
  uint64_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  uint8x8_t v97;
  uint16x8_t v98;
  uint32x4_t v99;
  uint64x2_t v100;
  uint64x2_t v101;
  uint64x2_t v102;
  uint32x4_t v103;
  uint64x2_t v104;
  uint64x2_t v105;
  uint64x2_t v106;
  uint64x2_t v107;
  uint64x2_t v108;
  int8x16_t v109;
  int8x8_t v110;
  unsigned int v111;
  int v112;
  __int32 v113;
  int8x8_t v114;
  unsigned int v115;
  uint64_t v116;
  int8x8_t v117;
  int v118;
  uint8x8_t *v119;
  int8x8_t *v120;
  signed int v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  void (*v125)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v126;
  BOOL v127;
  int v128;
  int8x8_t v130;
  int v131;
  int v132;
  unsigned int v133;
  uint64_t v135;
  int8x8_t v136;
  uint8x8_t *v137;
  signed int v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int8x16_t v144;
  int32x4_t v145;
  int32x4_t v146;
  uint64_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  uint8x8_t v151;
  uint16x8_t v152;
  uint32x4_t v153;
  uint64x2_t v154;
  uint64x2_t v155;
  uint64x2_t v156;
  uint32x4_t v157;
  uint64x2_t v158;
  uint64x2_t v159;
  uint64x2_t v160;
  uint64x2_t v161;
  uint64x2_t v162;
  int8x16_t v163;
  int8x8_t v164;
  unsigned int v165;
  int v166;
  int8x8_t v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  int8x8_t v171;
  int v172;
  uint8x8_t *v173;
  int8x8_t *v174;
  signed int v175;
  unint64_t v176;
  uint64_t v177;
  int v178;
  void (*v179)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v180;
  int v181;
  BOOL v182;
  int v183;
  int8x8_t v185;
  int v186;
  int v187;
  unsigned int v188;
  uint64_t v190;
  int8x8_t v191;
  uint8x8_t *v192;
  signed int v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int8x16_t v199;
  int32x4_t v200;
  int32x4_t v201;
  uint64_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int8x16_t v205;
  uint8x8_t v206;
  uint16x8_t v207;
  uint32x4_t v208;
  uint64x2_t v209;
  uint64x2_t v210;
  uint64x2_t v211;
  uint32x4_t v212;
  uint64x2_t v213;
  uint64x2_t v214;
  uint64x2_t v215;
  uint64x2_t v216;
  uint64x2_t v217;
  int8x16_t v218;
  int8x8_t v219;
  unsigned int v220;
  int v221;
  __int32 v222;
  int8x8_t v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  int v227;
  int8x8_t v228;
  int v229;
  uint8x8_t *v230;
  int8x8_t *v231;
  signed int v232;
  unint64_t v233;
  uint64_t v234;
  int v235;
  void (*v236)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v237;
  int v238;
  int v239;
  BOOL v240;
  int v241;
  int8x8_t v243;
  int v244;
  int v245;
  unsigned int v246;
  uint64_t v248;
  int8x8_t v249;
  uint8x8_t *v250;
  signed int v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int8x16_t v257;
  int32x4_t v258;
  int32x4_t v259;
  uint64_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  uint8x8_t v264;
  uint16x8_t v265;
  uint32x4_t v266;
  uint64x2_t v267;
  uint64x2_t v268;
  uint64x2_t v269;
  uint32x4_t v270;
  uint64x2_t v271;
  uint64x2_t v272;
  uint64x2_t v273;
  uint64x2_t v274;
  uint64x2_t v275;
  int8x16_t v276;
  int8x8_t v277;
  unsigned int v278;
  int v279;
  int v280;
  int8x8_t v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  unsigned int v285;
  unint64_t v286;
  int8x8_t v287;
  int8x8_t v288;
  int v289;
  uint8x8_t *v290;
  int8x8_t *v291;
  signed int v292;
  unint64_t v293;
  uint64_t v294;
  int v295;
  void (*v296)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v297;
  int v298;
  BOOL v299;
  int v300;
  int8x8_t v302;
  int v303;
  int v304;
  unsigned int v305;
  uint64_t v307;
  int8x8_t v308;
  uint8x8_t *v309;
  signed int v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int8x16_t v316;
  int32x4_t v317;
  int32x4_t v318;
  uint64_t v319;
  int8x16_t v320;
  int8x16_t v321;
  int8x16_t v322;
  uint8x8_t v323;
  uint16x8_t v324;
  uint32x4_t v325;
  uint64x2_t v326;
  uint64x2_t v327;
  uint64x2_t v328;
  uint32x4_t v329;
  uint64x2_t v330;
  uint64x2_t v331;
  uint64x2_t v332;
  uint64x2_t v333;
  uint64x2_t v334;
  int8x16_t v335;
  BOOL v336;
  int8x8_t v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  int v343;
  int v344;
  int v345;
  _BYTE v348[9];
  uint64_t v349;

  v349 = *MEMORY[0x24BDAC8D0];
  v4 = a1[3].u32[0];
  v5 = (((a1[3].i32[1] << 7) - 128) >> 8) + 1;
  if ((v4 & 0x80000000) == 0)
  {
    v6 = a1[2];
    v7 = a1[3].u32[0];
    goto LABEL_36;
  }
  v9 = a1 + 1;
  v8 = (uint8x8_t *)a1[1];
  v6 = a1[2];
  v10 = 48 - v4;
  v11 = *(_QWORD *)a1 - (_QWORD)v8;
  v12 = 8 * v11;
  v13 = 56 - v4 - 8 * v11;
  v14 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
  if (v14)
  {
    if (v11 >= 9)
      v15 = 9;
    else
      v15 = *(_QWORD *)a1 - (_QWORD)v8;
    v14(*(_QWORD *)&a1[5], v8, v348, v15);
    v8 = (uint8x8_t *)v348;
  }
  if (v13 < 0)
    v7 = v4;
  else
    v7 = v4 + 0x40000000;
  if (v12)
    v16 = 1;
  else
    v16 = v13 <= -1;
  v17 = v13 & ~(v13 >> 31);
  if (v16 && v10 >= v17)
  {
    v19 = *v9;
    v20 = v17 - 1;
    if (v17 - 1 >= (int)(40 - v4))
      v21 = 40 - v4;
    else
      v21 = v17 - 1;
    v22 = 47 - v4 - v21;
    if (v22 < 0x78)
      goto LABEL_33;
    if (v20 >= (int)(40 - v4))
      v20 = 40 - v4;
    if (v9 < (int8x8_t *)((char *)v8 + ((47 - v4 - v20) >> 3) + 1) && v8 < (uint8x8_t *)&a1[2])
    {
LABEL_33:
      v25 = *v9;
      v26 = v8;
      v27 = 48 - v4;
LABEL_34:
      v53 = (int8x8_t)(*(_QWORD *)&v25 + 1);
      do
      {
        v7 += 8;
        v54 = v26->u8[0];
        v26 = (uint8x8_t *)((char *)v26 + 1);
        *(_QWORD *)&v6 |= (unint64_t)v54 << v27;
        *v9 = v53;
        v27 -= 8;
        ++*(_QWORD *)&v53;
      }
      while (v27 >= v17);
      goto LABEL_36;
    }
    v24 = (v22 >> 3) + 1;
    v25 = (int8x8_t)(*(_QWORD *)&v19 + (v24 & 0x3FFFFFF8));
    v26 = (uint8x8_t *)((char *)v8 + (v24 & 0x3FFFFFF8));
    v27 = v10 - 8 * (v24 & 0x3FFFFFF8);
    v28 = vdupq_n_s32(v10);
    v29 = vaddq_s32(v28, (int32x4_t)xmmword_208F3A6A0);
    v30 = vaddq_s32(v28, (int32x4_t)xmmword_208F3A6B0);
    v31 = 0uLL;
    v32 = (int32x4_t)v7;
    v33 = (int8x16_t)(unint64_t)v6;
    v34.i64[0] = 0x800000008;
    v34.i64[1] = 0x800000008;
    v35.i64[0] = 0x3F0000003FLL;
    v35.i64[1] = 0x3F0000003FLL;
    v36 = v24 & 0x3FFFFFF8;
    v37 = 0uLL;
    v38 = 0uLL;
    v39 = 0uLL;
    do
    {
      v32 = vaddq_s32(v32, v34);
      v40 = *v8++;
      v31 = vaddq_s32(v31, v34);
      v41 = vmovl_u8(v40);
      v42 = vmovl_high_u16(v41);
      v43.i64[0] = v42.u32[2];
      v43.i64[1] = v42.u32[3];
      v44 = v43;
      v43.i64[0] = v42.u32[0];
      v43.i64[1] = v42.u32[1];
      v45 = v43;
      v46 = vmovl_u16(*(uint16x4_t *)v41.i8);
      v43.i64[0] = v46.u32[2];
      v43.i64[1] = v46.u32[3];
      v47 = v43;
      v43.i64[0] = v46.u32[0];
      v43.i64[1] = v46.u32[1];
      v48 = v43;
      v43.i64[0] = v29.u32[2];
      v43.i64[1] = v29.u32[3];
      v49 = v43;
      v43.i64[0] = v29.u32[0];
      v43.i64[1] = v29.u32[1];
      v50 = v43;
      v43.i64[0] = v30.u32[2];
      v43.i64[1] = v30.u32[3];
      v51 = v43;
      v43.i64[0] = v30.u32[0];
      v43.i64[1] = v30.u32[1];
      v39 = vorrq_s8((int8x16_t)vshlq_u64(v44, v49), v39);
      v38 = vorrq_s8((int8x16_t)vshlq_u64(v45, v50), v38);
      v37 = vorrq_s8((int8x16_t)vshlq_u64(v47, v51), v37);
      v33 = vorrq_s8((int8x16_t)vshlq_u64(v48, v43), v33);
      *(_QWORD *)&v19 += 8;
      v30 = vaddq_s32(v30, v35);
      v29 = vaddq_s32(v29, v35);
      v36 -= 8;
    }
    while (v36);
    *v9 = v19;
    v52 = vorrq_s8(vorrq_s8(v33, v38), vorrq_s8(v37, v39));
    v6 = vorr_s8(*(int8x8_t *)v52.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
    v7 = vaddvq_s32(vaddq_s32(v32, v31));
    if ((v24 & 0x3FFFFFF8) != v24)
      goto LABEL_34;
  }
LABEL_36:
  v55 = v5 << 56;
  v56 = v6;
  v57 = (int8x8_t)(*(_QWORD *)&v6 - (v5 << 56));
  if (*(_QWORD *)&v6 >= (unint64_t)(v5 << 56))
  {
    LODWORD(v5) = a1[3].i32[1] - v5;
    v56 = v57;
  }
  v58 = vp8_norm[v5];
  v59 = (int8x8_t)(*(_QWORD *)&v56 << v58);
  a1[2] = (int8x8_t)(*(_QWORD *)&v56 << v58);
  v60 = v7 - v58;
  a1[3].i32[0] = v7 - v58;
  a1[3].i32[1] = (_DWORD)v5 << v58;
  if (*(_QWORD *)&v6 < v55)
  {
    result = 0;
    if (!a2)
      return result;
    goto LABEL_202;
  }
  v62 = ((((_DWORD)v5 << v58 << 7) - 128) >> 8) + 1;
  if ((v60 & 0x80000000) != 0)
  {
    v66 = a1 + 1;
    v65 = (uint8x8_t *)a1[1];
    v67 = 48 - v60;
    v68 = *(_QWORD *)a1 - (_QWORD)v65;
    v69 = 8 * v68;
    v70 = 56 - 8 * v68 - v60;
    v71 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
    if (v71)
    {
      if (v68 >= 9)
        v72 = 9;
      else
        v72 = *(_QWORD *)a1 - (_QWORD)v65;
      v71(*(_QWORD *)&a1[5], v65, v348, v72);
      v65 = (uint8x8_t *)v348;
    }
    if (v70 >= 0)
      v60 += 0x40000000;
    if (v69)
      v73 = 1;
    else
      v73 = v70 <= -1;
    v74 = v70 & ~(v70 >> 31);
    if (v73 && v67 >= v74)
    {
      v76 = *v66;
      v77 = v58 - v7 + 40;
      if (v77 >= v74 - 1)
        v78 = v74 - 1;
      else
        v78 = v58 - v7 + 40;
      v79 = v58 - v7 - v78 + 47;
      if (v79 < 0x78)
        goto LABEL_73;
      if (v77 >= v74 - 1)
        v77 = v74 - 1;
      if (v66 < (int8x8_t *)((char *)v65 + ((v58 - v7 - v77 + 47) >> 3) + 1) && v65 < (uint8x8_t *)&a1[2])
      {
LABEL_73:
        v82 = *v66;
        v83 = v65;
        v84 = v67;
LABEL_74:
        v110 = (int8x8_t)(*(_QWORD *)&v82 + 1);
        do
        {
          v60 += 8;
          v111 = v83->u8[0];
          v83 = (uint8x8_t *)((char *)v83 + 1);
          *(_QWORD *)&v59 |= (unint64_t)v111 << v84;
          *v66 = v110;
          v84 -= 8;
          ++*(_QWORD *)&v110;
        }
        while (v84 >= v74);
        goto LABEL_76;
      }
      v81 = (v79 >> 3) + 1;
      v82 = (int8x8_t)(*(_QWORD *)&v76 + (v81 & 0x3FFFFFF8));
      v83 = (uint8x8_t *)((char *)v65 + (v81 & 0x3FFFFFF8));
      v84 = v67 - 8 * (v81 & 0x3FFFFFF8);
      v85 = vdupq_n_s32(v67);
      v86 = vaddq_s32(v85, (int32x4_t)xmmword_208F3A6A0);
      v87 = vaddq_s32(v85, (int32x4_t)xmmword_208F3A6B0);
      v88 = 0uLL;
      v89 = (int32x4_t)v60;
      v90 = (int8x16_t)(unint64_t)v59;
      v91.i64[0] = 0x800000008;
      v91.i64[1] = 0x800000008;
      v92.i64[0] = 0x3F0000003FLL;
      v92.i64[1] = 0x3F0000003FLL;
      v93 = v81 & 0x3FFFFFF8;
      v94 = 0uLL;
      v95 = 0uLL;
      v96 = 0uLL;
      do
      {
        v89 = vaddq_s32(v89, v91);
        v97 = *v65++;
        v88 = vaddq_s32(v88, v91);
        v98 = vmovl_u8(v97);
        v99 = vmovl_high_u16(v98);
        v100.i64[0] = v99.u32[2];
        v100.i64[1] = v99.u32[3];
        v101 = v100;
        v100.i64[0] = v99.u32[0];
        v100.i64[1] = v99.u32[1];
        v102 = v100;
        v103 = vmovl_u16(*(uint16x4_t *)v98.i8);
        v100.i64[0] = v103.u32[2];
        v100.i64[1] = v103.u32[3];
        v104 = v100;
        v100.i64[0] = v103.u32[0];
        v100.i64[1] = v103.u32[1];
        v105 = v100;
        v100.i64[0] = v86.u32[2];
        v100.i64[1] = v86.u32[3];
        v106 = v100;
        v100.i64[0] = v86.u32[0];
        v100.i64[1] = v86.u32[1];
        v107 = v100;
        v100.i64[0] = v87.u32[2];
        v100.i64[1] = v87.u32[3];
        v108 = v100;
        v100.i64[0] = v87.u32[0];
        v100.i64[1] = v87.u32[1];
        v96 = vorrq_s8((int8x16_t)vshlq_u64(v101, v106), v96);
        v95 = vorrq_s8((int8x16_t)vshlq_u64(v102, v107), v95);
        v94 = vorrq_s8((int8x16_t)vshlq_u64(v104, v108), v94);
        v90 = vorrq_s8((int8x16_t)vshlq_u64(v105, v100), v90);
        *(_QWORD *)&v76 += 8;
        v87 = vaddq_s32(v87, v92);
        v86 = vaddq_s32(v86, v92);
        v93 -= 8;
      }
      while (v93);
      *v66 = v76;
      v109 = vorrq_s8(vorrq_s8(v90, v95), vorrq_s8(v94, v96));
      v59 = vorr_s8(*(int8x8_t *)v109.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL));
      v60 = vaddvq_s32(vaddq_s32(v89, v88));
      if ((v81 & 0x3FFFFFF8) != v81)
        goto LABEL_74;
    }
LABEL_76:
    v63 = (int8x8_t)(*(_QWORD *)&v59 - (v62 << 56));
    if (*(_QWORD *)&v59 < (unint64_t)(v62 << 56))
      goto LABEL_43;
    goto LABEL_77;
  }
  v63 = (int8x8_t)(*(_QWORD *)&v59 - (v62 << 56));
  if (*(_QWORD *)&v59 < (unint64_t)(v62 << 56))
  {
LABEL_43:
    v64 = 0;
    goto LABEL_78;
  }
LABEL_77:
  LODWORD(v62) = a1[3].i32[1] - v62;
  v64 = 8;
  v59 = v63;
LABEL_78:
  v112 = vp8_norm[v62];
  v113 = (_DWORD)v62 << v112;
  v114 = (int8x8_t)(*(_QWORD *)&v59 << v112);
  v115 = v60 - v112;
  a1[2] = (int8x8_t)(*(_QWORD *)&v59 << v112);
  a1[3].i32[0] = v60 - v112;
  a1[3].i32[1] = v113;
  v116 = (((v113 << 7) - 128) >> 8) + 1;
  if (((v60 - v112) & 0x80000000) != 0)
  {
    v342 = v64;
    v120 = a1 + 1;
    v119 = (uint8x8_t *)a1[1];
    v121 = 48 - v115;
    v122 = *(_QWORD *)a1 - (_QWORD)v119;
    v123 = 8 * v122;
    v124 = 56 - 8 * v122 - v115;
    v125 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
    if (v125)
    {
      if (v122 >= 9)
        v126 = 9;
      else
        v126 = *(_QWORD *)a1 - (_QWORD)v119;
      v125(*(_QWORD *)&a1[5], v119, v348, v126);
      v119 = (uint8x8_t *)v348;
    }
    if (v124 >= 0)
      v115 += 0x40000000;
    if (v123)
      v127 = 1;
    else
      v127 = v124 <= -1;
    v128 = v124 & ~(v124 >> 31);
    if (!v127 || v121 < v128)
    {
      v64 = v342;
      goto LABEL_115;
    }
    v130 = *v120;
    v131 = v112 - v60 + 40;
    if (v131 >= v128 - 1)
      v132 = v128 - 1;
    else
      v132 = v112 - v60 + 40;
    v133 = v112 - v60 - v132 + 47;
    v64 = v342;
    if (v133 < 0x78)
      goto LABEL_112;
    if (v131 >= v128 - 1)
      v131 = v128 - 1;
    if (v120 >= (int8x8_t *)((char *)v119 + ((v112 - v60 - v131 + 47) >> 3) + 1) || v119 >= (uint8x8_t *)&a1[2])
    {
      v135 = (v133 >> 3) + 1;
      v136 = (int8x8_t)(*(_QWORD *)&v130 + (v135 & 0x3FFFFFF8));
      v137 = (uint8x8_t *)((char *)v119 + (v135 & 0x3FFFFFF8));
      v138 = v121 - 8 * (v135 & 0x3FFFFFF8);
      v139 = vdupq_n_s32(v121);
      v140 = vaddq_s32(v139, (int32x4_t)xmmword_208F3A6A0);
      v141 = vaddq_s32(v139, (int32x4_t)xmmword_208F3A6B0);
      v142 = 0uLL;
      v143 = (int32x4_t)v115;
      v144 = (int8x16_t)(unint64_t)v114;
      v145.i64[0] = 0x800000008;
      v145.i64[1] = 0x800000008;
      v146.i64[0] = 0x3F0000003FLL;
      v146.i64[1] = 0x3F0000003FLL;
      v147 = v135 & 0x3FFFFFF8;
      v148 = 0uLL;
      v149 = 0uLL;
      v150 = 0uLL;
      do
      {
        v143 = vaddq_s32(v143, v145);
        v151 = *v119++;
        v142 = vaddq_s32(v142, v145);
        v152 = vmovl_u8(v151);
        v153 = vmovl_high_u16(v152);
        v154.i64[0] = v153.u32[2];
        v154.i64[1] = v153.u32[3];
        v155 = v154;
        v154.i64[0] = v153.u32[0];
        v154.i64[1] = v153.u32[1];
        v156 = v154;
        v157 = vmovl_u16(*(uint16x4_t *)v152.i8);
        v154.i64[0] = v157.u32[2];
        v154.i64[1] = v157.u32[3];
        v158 = v154;
        v154.i64[0] = v157.u32[0];
        v154.i64[1] = v157.u32[1];
        v159 = v154;
        v154.i64[0] = v140.u32[2];
        v154.i64[1] = v140.u32[3];
        v160 = v154;
        v154.i64[0] = v140.u32[0];
        v154.i64[1] = v140.u32[1];
        v161 = v154;
        v154.i64[0] = v141.u32[2];
        v154.i64[1] = v141.u32[3];
        v162 = v154;
        v154.i64[0] = v141.u32[0];
        v154.i64[1] = v141.u32[1];
        v150 = vorrq_s8((int8x16_t)vshlq_u64(v155, v160), v150);
        v149 = vorrq_s8((int8x16_t)vshlq_u64(v156, v161), v149);
        v148 = vorrq_s8((int8x16_t)vshlq_u64(v158, v162), v148);
        v144 = vorrq_s8((int8x16_t)vshlq_u64(v159, v154), v144);
        *(_QWORD *)&v130 += 8;
        v141 = vaddq_s32(v141, v146);
        v140 = vaddq_s32(v140, v146);
        v147 -= 8;
      }
      while (v147);
      *v120 = v130;
      v163 = vorrq_s8(vorrq_s8(v144, v149), vorrq_s8(v148, v150));
      v114 = vorr_s8(*(int8x8_t *)v163.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v163, v163, 8uLL));
      v115 = vaddvq_s32(vaddq_s32(v143, v142));
      if ((v135 & 0x3FFFFFF8) == v135)
      {
LABEL_115:
        v117 = (int8x8_t)(*(_QWORD *)&v114 - (v116 << 56));
        if (*(_QWORD *)&v114 < (unint64_t)(v116 << 56))
          goto LABEL_80;
        goto LABEL_116;
      }
    }
    else
    {
LABEL_112:
      v136 = *v120;
      v137 = v119;
      v138 = v121;
    }
    v164 = (int8x8_t)(*(_QWORD *)&v136 + 1);
    do
    {
      v115 += 8;
      v165 = v137->u8[0];
      v137 = (uint8x8_t *)((char *)v137 + 1);
      *(_QWORD *)&v114 |= (unint64_t)v165 << v138;
      *v120 = v164;
      v138 -= 8;
      ++*(_QWORD *)&v164;
    }
    while (v138 >= v128);
    goto LABEL_115;
  }
  v117 = (int8x8_t)(*(_QWORD *)&v114 - (v116 << 56));
  if (*(_QWORD *)&v114 < (unint64_t)(v116 << 56))
  {
LABEL_80:
    v118 = 0;
    goto LABEL_117;
  }
LABEL_116:
  LODWORD(v116) = a1[3].i32[1] - v116;
  v118 = 4;
  v114 = v117;
LABEL_117:
  v166 = vp8_norm[v116];
  v167 = (int8x8_t)(*(_QWORD *)&v114 << v166);
  v168 = v115 - v166;
  a1[2] = v167;
  a1[3].i32[0] = v115 - v166;
  a1[3].i32[1] = (_DWORD)v116 << v166;
  v169 = (((_DWORD)v116 << v166 << 7) - 128) >> 8;
  v170 = v169 + 1;
  if (((v115 - v166) & 0x80000000) != 0)
  {
    v339 = v169 + 1;
    v343 = v118;
    v174 = a1 + 1;
    v173 = (uint8x8_t *)a1[1];
    v175 = 48 - v168;
    v176 = *(_QWORD *)a1 - (_QWORD)v173;
    v177 = 8 * v176;
    v178 = 56 - 8 * v176 - v168;
    v179 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
    if (v179)
    {
      if (v176 >= 9)
        v180 = 9;
      else
        v180 = *(_QWORD *)a1 - (_QWORD)v173;
      v181 = v64;
      v179(*(_QWORD *)&a1[5], v173, v348, v180);
      v64 = v181;
      v173 = (uint8x8_t *)v348;
    }
    if (v178 >= 0)
      v168 += 0x40000000;
    if (v177)
      v182 = 1;
    else
      v182 = v178 <= -1;
    v183 = v178 & ~(v178 >> 31);
    if (!v182 || v175 < v183)
    {
      v118 = v343;
      v170 = v339;
      goto LABEL_154;
    }
    v185 = *v174;
    v186 = v166 - v115 + 40;
    if (v186 >= v183 - 1)
      v187 = v183 - 1;
    else
      v187 = v166 - v115 + 40;
    v188 = v166 - v115 - v187 + 47;
    v118 = v343;
    v170 = v339;
    if (v188 < 0x78)
      goto LABEL_151;
    if (v186 >= v183 - 1)
      v186 = v183 - 1;
    if (v174 >= (int8x8_t *)((char *)v173 + ((v166 - v115 - v186 + 47) >> 3) + 1) || v173 >= (uint8x8_t *)&a1[2])
    {
      v190 = (v188 >> 3) + 1;
      v191 = (int8x8_t)(*(_QWORD *)&v185 + (v190 & 0x3FFFFFF8));
      v192 = (uint8x8_t *)((char *)v173 + (v190 & 0x3FFFFFF8));
      v193 = v175 - 8 * (v190 & 0x3FFFFFF8);
      v194 = vdupq_n_s32(v175);
      v195 = vaddq_s32(v194, (int32x4_t)xmmword_208F3A6A0);
      v196 = vaddq_s32(v194, (int32x4_t)xmmword_208F3A6B0);
      v197 = 0uLL;
      v198 = (int32x4_t)v168;
      v199 = (int8x16_t)(unint64_t)v167;
      v200.i64[0] = 0x800000008;
      v200.i64[1] = 0x800000008;
      v201.i64[0] = 0x3F0000003FLL;
      v201.i64[1] = 0x3F0000003FLL;
      v202 = v190 & 0x3FFFFFF8;
      v203 = 0uLL;
      v204 = 0uLL;
      v205 = 0uLL;
      do
      {
        v198 = vaddq_s32(v198, v200);
        v206 = *v173++;
        v197 = vaddq_s32(v197, v200);
        v207 = vmovl_u8(v206);
        v208 = vmovl_high_u16(v207);
        v209.i64[0] = v208.u32[2];
        v209.i64[1] = v208.u32[3];
        v210 = v209;
        v209.i64[0] = v208.u32[0];
        v209.i64[1] = v208.u32[1];
        v211 = v209;
        v212 = vmovl_u16(*(uint16x4_t *)v207.i8);
        v209.i64[0] = v212.u32[2];
        v209.i64[1] = v212.u32[3];
        v213 = v209;
        v209.i64[0] = v212.u32[0];
        v209.i64[1] = v212.u32[1];
        v214 = v209;
        v209.i64[0] = v195.u32[2];
        v209.i64[1] = v195.u32[3];
        v215 = v209;
        v209.i64[0] = v195.u32[0];
        v209.i64[1] = v195.u32[1];
        v216 = v209;
        v209.i64[0] = v196.u32[2];
        v209.i64[1] = v196.u32[3];
        v217 = v209;
        v209.i64[0] = v196.u32[0];
        v209.i64[1] = v196.u32[1];
        v205 = vorrq_s8((int8x16_t)vshlq_u64(v210, v215), v205);
        v204 = vorrq_s8((int8x16_t)vshlq_u64(v211, v216), v204);
        v203 = vorrq_s8((int8x16_t)vshlq_u64(v213, v217), v203);
        v199 = vorrq_s8((int8x16_t)vshlq_u64(v214, v209), v199);
        *(_QWORD *)&v185 += 8;
        v196 = vaddq_s32(v196, v201);
        v195 = vaddq_s32(v195, v201);
        v202 -= 8;
      }
      while (v202);
      *v174 = v185;
      v218 = vorrq_s8(vorrq_s8(v199, v204), vorrq_s8(v203, v205));
      v167 = vorr_s8(*(int8x8_t *)v218.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v218, v218, 8uLL));
      v168 = vaddvq_s32(vaddq_s32(v198, v197));
      if ((v190 & 0x3FFFFFF8) == v190)
      {
LABEL_154:
        v171 = (int8x8_t)(*(_QWORD *)&v167 - (v170 << 56));
        if (*(_QWORD *)&v167 < (unint64_t)(v170 << 56))
          goto LABEL_119;
        goto LABEL_155;
      }
    }
    else
    {
LABEL_151:
      v191 = *v174;
      v192 = v173;
      v193 = v175;
    }
    v219 = (int8x8_t)(*(_QWORD *)&v191 + 1);
    do
    {
      v168 += 8;
      v220 = v192->u8[0];
      v192 = (uint8x8_t *)((char *)v192 + 1);
      *(_QWORD *)&v167 |= (unint64_t)v220 << v193;
      *v174 = v219;
      v193 -= 8;
      ++*(_QWORD *)&v219;
    }
    while (v193 >= v183);
    goto LABEL_154;
  }
  v171 = (int8x8_t)(*(_QWORD *)&v167 - (v170 << 56));
  if (*(_QWORD *)&v167 < (unint64_t)(v170 << 56))
  {
LABEL_119:
    v172 = 0;
    goto LABEL_156;
  }
LABEL_155:
  LODWORD(v170) = a1[3].i32[1] - v170;
  v172 = 2;
  v167 = v171;
LABEL_156:
  v221 = vp8_norm[v170];
  v222 = (_DWORD)v170 << v221;
  v223 = (int8x8_t)(*(_QWORD *)&v167 << v221);
  v224 = v168 - v221;
  a1[2] = v223;
  a1[3].i32[0] = v168 - v221;
  a1[3].i32[1] = v222;
  v225 = ((v222 << 7) - 128) >> 8;
  v226 = v225 + 1;
  if (((v168 - v221) & 0x80000000) != 0)
  {
    v340 = v225 + 1;
    v344 = v172;
    v231 = a1 + 1;
    v230 = (uint8x8_t *)a1[1];
    v232 = 48 - v224;
    v233 = *(_QWORD *)a1 - (_QWORD)v230;
    v234 = 8 * v233;
    v235 = 56 - 8 * v233 - v224;
    v236 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
    if (v236)
    {
      if (v233 >= 9)
        v237 = 9;
      else
        v237 = *(_QWORD *)a1 - (_QWORD)v230;
      v238 = v64;
      v239 = v118;
      v236(*(_QWORD *)&a1[5], v230, v348, v237);
      v232 = 48 - v224;
      v118 = v239;
      v64 = v238;
      v230 = (uint8x8_t *)v348;
    }
    if (v235 >= 0)
      v224 += 0x40000000;
    if (v234)
      v240 = 1;
    else
      v240 = v235 <= -1;
    v241 = v235 & ~(v235 >> 31);
    if (!v240 || v232 < v241)
    {
      v226 = v340;
      goto LABEL_193;
    }
    v243 = *v231;
    v244 = v221 - v168 + 40;
    if (v244 >= v241 - 1)
      v245 = v241 - 1;
    else
      v245 = v221 - v168 + 40;
    v246 = v221 - v168 - v245 + 47;
    v226 = v340;
    if (v246 < 0x78)
      goto LABEL_190;
    if (v244 >= v241 - 1)
      v244 = v241 - 1;
    if (v231 >= (int8x8_t *)((char *)v230 + ((v221 - v168 - v244 + 47) >> 3) + 1) || v230 >= (uint8x8_t *)&a1[2])
    {
      v248 = (v246 >> 3) + 1;
      v249 = (int8x8_t)(*(_QWORD *)&v243 + (v248 & 0x3FFFFFF8));
      v250 = (uint8x8_t *)((char *)v230 + (v248 & 0x3FFFFFF8));
      v251 = v232 - 8 * (v248 & 0x3FFFFFF8);
      v252 = vdupq_n_s32(v232);
      v253 = vaddq_s32(v252, (int32x4_t)xmmword_208F3A6A0);
      v254 = vaddq_s32(v252, (int32x4_t)xmmword_208F3A6B0);
      v255 = 0uLL;
      v256 = (int32x4_t)v224;
      v257 = (int8x16_t)(unint64_t)v223;
      v258.i64[0] = 0x800000008;
      v258.i64[1] = 0x800000008;
      v259.i64[0] = 0x3F0000003FLL;
      v259.i64[1] = 0x3F0000003FLL;
      v260 = v248 & 0x3FFFFFF8;
      v261 = 0uLL;
      v262 = 0uLL;
      v263 = 0uLL;
      do
      {
        v256 = vaddq_s32(v256, v258);
        v264 = *v230++;
        v255 = vaddq_s32(v255, v258);
        v265 = vmovl_u8(v264);
        v266 = vmovl_high_u16(v265);
        v267.i64[0] = v266.u32[2];
        v267.i64[1] = v266.u32[3];
        v268 = v267;
        v267.i64[0] = v266.u32[0];
        v267.i64[1] = v266.u32[1];
        v269 = v267;
        v270 = vmovl_u16(*(uint16x4_t *)v265.i8);
        v267.i64[0] = v270.u32[2];
        v267.i64[1] = v270.u32[3];
        v271 = v267;
        v267.i64[0] = v270.u32[0];
        v267.i64[1] = v270.u32[1];
        v272 = v267;
        v267.i64[0] = v253.u32[2];
        v267.i64[1] = v253.u32[3];
        v273 = v267;
        v267.i64[0] = v253.u32[0];
        v267.i64[1] = v253.u32[1];
        v274 = v267;
        v267.i64[0] = v254.u32[2];
        v267.i64[1] = v254.u32[3];
        v275 = v267;
        v267.i64[0] = v254.u32[0];
        v267.i64[1] = v254.u32[1];
        v263 = vorrq_s8((int8x16_t)vshlq_u64(v268, v273), v263);
        v262 = vorrq_s8((int8x16_t)vshlq_u64(v269, v274), v262);
        v261 = vorrq_s8((int8x16_t)vshlq_u64(v271, v275), v261);
        v257 = vorrq_s8((int8x16_t)vshlq_u64(v272, v267), v257);
        *(_QWORD *)&v243 += 8;
        v254 = vaddq_s32(v254, v259);
        v253 = vaddq_s32(v253, v259);
        v260 -= 8;
      }
      while (v260);
      *v231 = v243;
      v276 = vorrq_s8(vorrq_s8(v257, v262), vorrq_s8(v261, v263));
      v223 = vorr_s8(*(int8x8_t *)v276.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v276, v276, 8uLL));
      v224 = vaddvq_s32(vaddq_s32(v256, v255));
      if ((v248 & 0x3FFFFFF8) == v248)
      {
LABEL_193:
        v172 = v344;
        v227 = v118 | v64;
        v228 = (int8x8_t)(*(_QWORD *)&v223 - (v226 << 56));
        if (*(_QWORD *)&v223 < (unint64_t)(v226 << 56))
          goto LABEL_158;
        goto LABEL_194;
      }
    }
    else
    {
LABEL_190:
      v249 = *v231;
      v250 = v230;
      v251 = v232;
    }
    v277 = (int8x8_t)(*(_QWORD *)&v249 + 1);
    do
    {
      v224 += 8;
      v278 = v250->u8[0];
      v250 = (uint8x8_t *)((char *)v250 + 1);
      *(_QWORD *)&v223 |= (unint64_t)v278 << v251;
      *v231 = v277;
      v251 -= 8;
      ++*(_QWORD *)&v277;
    }
    while (v251 >= v241);
    goto LABEL_193;
  }
  v227 = v118 | v64;
  v228 = (int8x8_t)(*(_QWORD *)&v223 - (v226 << 56));
  if (*(_QWORD *)&v223 < (unint64_t)(v226 << 56))
  {
LABEL_158:
    v229 = 0;
    goto LABEL_195;
  }
LABEL_194:
  LODWORD(v226) = a1[3].i32[1] - v226;
  v229 = 1;
  v223 = v228;
LABEL_195:
  v279 = v227 | v172;
  v280 = vp8_norm[v226];
  v281 = (int8x8_t)(*(_QWORD *)&v223 << v280);
  v282 = v224 - v280;
  a1[2] = v281;
  a1[3].i32[0] = v224 - v280;
  a1[3].i32[1] = (_DWORD)v226 << v280;
  v283 = (((_DWORD)v226 << v280 << 7) - 128) >> 8;
  v284 = v283 + 1;
  if (((v224 - v280) & 0x80000000) == 0)
  {
    v285 = v279 | v229;
    v286 = v284 << 56;
    v287 = v281;
    v288 = (int8x8_t)(*(_QWORD *)&v281 - (v284 << 56));
    if (*(_QWORD *)&v281 < (unint64_t)(v284 << 56))
      goto LABEL_198;
    goto LABEL_197;
  }
  v341 = v283 + 1;
  v345 = v279;
  v291 = a1 + 1;
  v290 = (uint8x8_t *)a1[1];
  v292 = 48 - v282;
  v293 = *(_QWORD *)a1 - (_QWORD)v290;
  v294 = 8 * v293;
  v295 = 56 - 8 * v293 - v282;
  v296 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
  if (v296)
  {
    if (v293 >= 9)
      v297 = 9;
    else
      v297 = *(_QWORD *)a1 - (_QWORD)v290;
    v298 = v229;
    v296(*(_QWORD *)&a1[5], v290, v348, v297);
    v229 = v298;
    v290 = (uint8x8_t *)v348;
  }
  if (v295 >= 0)
    v282 += 0x40000000;
  if (v294)
    v299 = 1;
  else
    v299 = v295 <= -1;
  v300 = v295 & ~(v295 >> 31);
  if (!v299 || v292 < v300)
  {
    v284 = v341;
    goto LABEL_239;
  }
  v302 = *v291;
  v303 = v280 - v224 + 40;
  if (v303 >= v300 - 1)
    v304 = v300 - 1;
  else
    v304 = v280 - v224 + 40;
  v305 = v280 - v224 - v304 + 47;
  if (v305 < 0x78)
    goto LABEL_236;
  if (v303 >= v300 - 1)
    v303 = v300 - 1;
  if (v291 < (int8x8_t *)((char *)v290 + ((v280 - v224 - v303 + 47) >> 3) + 1) && v290 < (uint8x8_t *)&a1[2])
  {
LABEL_236:
    v308 = *v291;
    v309 = v290;
    v310 = v292;
    v284 = v341;
LABEL_237:
    v337 = (int8x8_t)(*(_QWORD *)&v308 + 1);
    do
    {
      v282 += 8;
      v338 = v309->u8[0];
      v309 = (uint8x8_t *)((char *)v309 + 1);
      *(_QWORD *)&v281 |= (unint64_t)v338 << v310;
      *v291 = v337;
      v310 -= 8;
      ++*(_QWORD *)&v337;
    }
    while (v310 >= v300);
    goto LABEL_239;
  }
  v307 = (v305 >> 3) + 1;
  v308 = (int8x8_t)(*(_QWORD *)&v302 + (v307 & 0x3FFFFFF8));
  v309 = (uint8x8_t *)((char *)v290 + (v307 & 0x3FFFFFF8));
  v310 = v292 - 8 * (v307 & 0x3FFFFFF8);
  v311 = vdupq_n_s32(v292);
  v312 = vaddq_s32(v311, (int32x4_t)xmmword_208F3A6A0);
  v313 = vaddq_s32(v311, (int32x4_t)xmmword_208F3A6B0);
  v314 = 0uLL;
  v315 = (int32x4_t)v282;
  v316 = (int8x16_t)(unint64_t)v281;
  v317.i64[0] = 0x800000008;
  v317.i64[1] = 0x800000008;
  v318.i64[0] = 0x3F0000003FLL;
  v318.i64[1] = 0x3F0000003FLL;
  v319 = v307 & 0x3FFFFFF8;
  v320 = 0uLL;
  v321 = 0uLL;
  v322 = 0uLL;
  do
  {
    v315 = vaddq_s32(v315, v317);
    v323 = *v290++;
    v314 = vaddq_s32(v314, v317);
    v324 = vmovl_u8(v323);
    v325 = vmovl_high_u16(v324);
    v326.i64[0] = v325.u32[2];
    v326.i64[1] = v325.u32[3];
    v327 = v326;
    v326.i64[0] = v325.u32[0];
    v326.i64[1] = v325.u32[1];
    v328 = v326;
    v329 = vmovl_u16(*(uint16x4_t *)v324.i8);
    v326.i64[0] = v329.u32[2];
    v326.i64[1] = v329.u32[3];
    v330 = v326;
    v326.i64[0] = v329.u32[0];
    v326.i64[1] = v329.u32[1];
    v331 = v326;
    v326.i64[0] = v312.u32[2];
    v326.i64[1] = v312.u32[3];
    v332 = v326;
    v326.i64[0] = v312.u32[0];
    v326.i64[1] = v312.u32[1];
    v333 = v326;
    v326.i64[0] = v313.u32[2];
    v326.i64[1] = v313.u32[3];
    v334 = v326;
    v326.i64[0] = v313.u32[0];
    v326.i64[1] = v313.u32[1];
    v322 = vorrq_s8((int8x16_t)vshlq_u64(v327, v332), v322);
    v321 = vorrq_s8((int8x16_t)vshlq_u64(v328, v333), v321);
    v320 = vorrq_s8((int8x16_t)vshlq_u64(v330, v334), v320);
    v316 = vorrq_s8((int8x16_t)vshlq_u64(v331, v326), v316);
    *(_QWORD *)&v302 += 8;
    v313 = vaddq_s32(v313, v318);
    v312 = vaddq_s32(v312, v318);
    v319 -= 8;
  }
  while (v319);
  *v291 = v302;
  v335 = vorrq_s8(vorrq_s8(v316, v321), vorrq_s8(v320, v322));
  v281 = vorr_s8(*(int8x8_t *)v335.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v335, v335, 8uLL));
  v282 = vaddvq_s32(vaddq_s32(v315, v314));
  v336 = (v307 & 0x3FFFFFF8) == v307;
  v284 = v341;
  if (!v336)
    goto LABEL_237;
LABEL_239:
  v285 = v345 | v229;
  v286 = v284 << 56;
  v287 = v281;
  v288 = (int8x8_t)(*(_QWORD *)&v281 - (v284 << 56));
  if (*(_QWORD *)&v281 >= (unint64_t)(v284 << 56))
  {
LABEL_197:
    LODWORD(v284) = a1[3].i32[1] - v284;
    v287 = v288;
  }
LABEL_198:
  v289 = vp8_norm[v284];
  a1[2] = (int8x8_t)(*(_QWORD *)&v287 << v289);
  a1[3].i32[0] = v282 - v289;
  a1[3].i32[1] = (_DWORD)v284 << v289;
  if (*(_QWORD *)&v281 < v286)
    result = v285;
  else
    result = -v285;
  if ((_DWORD)result != a2)
LABEL_202:
    *a3 = 1;
  return result;
}

void *yv12_extend_frame_left_right_c(int *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  size_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  char *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  char *v20;
  char *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  char *v24;
  char *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  char *v28;
  char *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  char *v32;
  char *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  char *v36;
  char *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  char *v40;
  char *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  char *v44;
  char *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  char *v48;
  char *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  char *v52;
  char *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  char *v56;
  char *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  char *v60;
  char *v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  char *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  char *v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  char *v84;
  char *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  char *v88;
  char *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  char *v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  char *v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  char *v104;
  char *v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  char *v108;
  char *v109;

  v8 = a1[26];
  v9 = a1[4];
  v10 = &a2[*a1];
  v11 = &a2[-v8];
  memset(&a2[-v8], *a2, v8);
  memset(v10, *(v10 - 1), v8);
  v12 = &a2[v9];
  v13 = &v10[v9 - 1];
  v14 = &v10[v9];
  memset(&v11[v9], a2[v9], v8);
  memset(v14, *v13, v8);
  v15 = &v13[v9];
  v16 = &v11[v9 + v9];
  v17 = (char *)&v14[v9];
  memset(v16, v12[v9], v8);
  memset(v17, *v15, v8);
  v18 = &v12[v9 + v9];
  v19 = &v15[v9];
  v20 = (char *)&v16[v9];
  v21 = &v17[v9];
  memset(v20, *v18, v8);
  memset(v21, *v19, v8);
  v22 = &v18[v9];
  v23 = &v19[v9];
  v24 = &v20[v9];
  v25 = &v21[v9];
  memset(v24, *v22, v8);
  memset(v25, *v23, v8);
  v26 = &v22[v9];
  v27 = &v23[v9];
  v28 = &v24[v9];
  v29 = &v25[v9];
  memset(v28, *v26, v8);
  memset(v29, *v27, v8);
  v30 = &v26[v9];
  v31 = &v27[v9];
  v32 = &v28[v9];
  v33 = &v29[v9];
  memset(v32, *v30, v8);
  memset(v33, *v31, v8);
  v34 = &v30[v9];
  v35 = &v31[v9];
  v36 = &v32[v9];
  v37 = &v33[v9];
  memset(v36, *v34, v8);
  memset(v37, *v35, v8);
  v38 = &v34[v9];
  v39 = &v35[v9];
  v40 = &v36[v9];
  v41 = &v37[v9];
  memset(v40, *v38, v8);
  memset(v41, *v39, v8);
  v42 = &v38[v9];
  v43 = &v39[v9];
  v44 = &v40[v9];
  v45 = &v41[v9];
  memset(v44, *v42, v8);
  memset(v45, *v43, v8);
  v46 = &v42[v9];
  v47 = &v43[v9];
  v48 = &v44[v9];
  v49 = &v45[v9];
  memset(v48, *v46, v8);
  memset(v49, *v47, v8);
  v50 = &v46[v9];
  v51 = &v47[v9];
  v52 = &v48[v9];
  v53 = &v49[v9];
  memset(v52, *v50, v8);
  memset(v53, *v51, v8);
  v54 = &v50[v9];
  v55 = &v51[v9];
  v56 = &v52[v9];
  v57 = &v53[v9];
  memset(v56, *v54, v8);
  memset(v57, *v55, v8);
  v58 = &v54[v9];
  v59 = &v55[v9];
  v60 = &v56[v9];
  v61 = &v57[v9];
  memset(v60, *v58, v8);
  memset(v61, *v59, v8);
  v62 = &v58[v9];
  v63 = &v59[v9];
  v64 = &v60[v9];
  v65 = &v61[v9];
  memset(v64, *v62, v8);
  memset(v65, *v63, v8);
  memset(&v64[v9], v62[v9], v8);
  memset(&v65[v9], v63[v9], v8);
  v66 = a1[9];
  v67 = a1[5];
  v68 = v8 >> 1;
  v69 = &a3[-(v8 >> 1)];
  memset(&a3[-v68], *a3, v68);
  memset(&a3[v67], a3[v67 - 1], v8 >> 1);
  v70 = &a3[v67 - 1 + v66];
  v71 = &a3[v67 + v66];
  memset(&a3[v66 - v68], a3[v66], v68);
  memset(v71, *v70, v68);
  v72 = &v70[v66];
  v73 = &v71[v66];
  memset(&v69[v66 + v66], a3[v66 + v66], v68);
  memset(v73, *v72, v68);
  v74 = &a3[v66 + v66 + v66];
  v75 = &v72[v66];
  v76 = &a3[v66 - v68 + v66 + v66];
  v77 = (char *)&v73[v66];
  memset(v76, *v74, v68);
  memset(v77, *v75, v68);
  v78 = &v74[v66];
  v79 = &v75[v66];
  v80 = &v76[v66];
  v81 = &v77[v66];
  memset(v80, *v78, v68);
  memset(v81, *v79, v68);
  v82 = &v78[v66];
  v83 = &v79[v66];
  v84 = (char *)&v80[v66];
  v85 = &v81[v66];
  memset(v84, *v82, v68);
  memset(v85, *v83, v68);
  v86 = &v82[v66];
  v87 = &v83[v66];
  v88 = &v84[v66];
  v89 = &v85[v66];
  memset(v88, *v86, v68);
  memset(v89, *v87, v68);
  memset(&v88[v66], v86[v66], v68);
  memset(&v89[v66], v87[v66], v68);
  memset(&a4[-v68], *a4, v68);
  memset(&a4[v67], a4[v67 - 1], v68);
  v90 = &a4[v67 - 1 + v66];
  v91 = &a4[v67 + v66];
  memset(&a4[v66 - v68], a4[v66], v68);
  memset(v91, *v90, v68);
  v92 = &v90[v66];
  v93 = &v91[v66];
  memset(&a4[v66 - v68 + v66], a4[v66 + v66], v68);
  memset(v93, *v92, v68);
  v94 = &a4[v66 + v66 + v66];
  v95 = &v92[v66];
  v96 = &a4[v66 - v68 + v66 + v66];
  v97 = (char *)&v93[v66];
  memset(v96, *v94, v68);
  memset(v97, *v95, v68);
  v98 = &v94[v66];
  v99 = &v95[v66];
  v100 = &v96[v66];
  v101 = &v97[v66];
  memset(v100, *v98, v68);
  memset(v101, *v99, v68);
  v102 = &v98[v66];
  v103 = &v99[v66];
  v104 = (char *)&v100[v66];
  v105 = &v101[v66];
  memset(v104, *v102, v68);
  memset(v105, *v103, v68);
  v106 = &v102[v66];
  v107 = &v103[v66];
  v108 = &v104[v66];
  v109 = &v105[v66];
  memset(v108, *v106, v68);
  memset(v109, *v107, v68);
  memset(&v108[v66], v106[v66], v68);
  return memset(&v109[v66], v107[v66], v68);
}

uint64_t vp8_decode_mode_mvs(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int8x8_t v4;
  unsigned int v5;
  uint8x8_t *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t (*v10)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  uint8x8_t *v15;
  uint8x8_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  uint8x8_t *v23;
  int v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int32x4_t v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  uint8x8_t v37;
  uint16x8_t v38;
  uint32x4_t v39;
  uint64x2_t v40;
  uint64x2_t v41;
  uint64x2_t v42;
  uint32x4_t v43;
  uint64x2_t v44;
  uint64x2_t v45;
  uint64x2_t v46;
  uint64x2_t v47;
  uint64x2_t v48;
  int8x16_t v49;
  uint8x8_t v50;
  unsigned int v51;
  unint64_t v52;
  int8x8_t v53;
  int v54;
  int v55;
  int8x8_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  int8x8_t v60;
  uint8x8_t *v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  void (*v65)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v66;
  unsigned int v67;
  BOOL v68;
  unsigned int v69;
  int v70;
  uint8x8_t *v71;
  uint8x8_t v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v77;
  uint64_t v78;
  uint8x8_t *v79;
  int v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int32x4_t v87;
  int32x4_t v88;
  uint64_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  uint8x8_t v93;
  uint16x8_t v94;
  uint32x4_t v95;
  uint64x2_t v96;
  uint64x2_t v97;
  uint64x2_t v98;
  uint32x4_t v99;
  uint64x2_t v100;
  uint64x2_t v101;
  uint64x2_t v102;
  uint64x2_t v103;
  uint64x2_t v104;
  int8x16_t v105;
  uint8x8_t v106;
  unsigned int v107;
  int v108;
  int v109;
  int8x8_t v110;
  unsigned int v111;
  uint64_t v112;
  uint8x8_t *v113;
  signed int v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  void (*v118)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v119;
  BOOL v120;
  int v121;
  int8x8_t v123;
  char v124;
  int v125;
  int v126;
  int8x8_t v127;
  unsigned int v128;
  uint64_t v129;
  uint8x8_t *v130;
  signed int v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  void (*v135)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v136;
  BOOL v137;
  int v138;
  uint8x8_t *v140;
  uint8x8_t v141;
  int v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  uint8x8_t *v146;
  signed int v147;
  uint8x8_t *v148;
  uint8x8_t v149;
  int v150;
  int v151;
  unsigned int v152;
  uint64_t v154;
  uint64_t v155;
  uint8x8_t *v156;
  signed int v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int8x16_t v163;
  int32x4_t v164;
  int32x4_t v165;
  uint64_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  uint8x8_t v170;
  uint16x8_t v171;
  uint32x4_t v172;
  uint64x2_t v173;
  uint64x2_t v174;
  uint64x2_t v175;
  uint32x4_t v176;
  uint64x2_t v177;
  uint64x2_t v178;
  uint64x2_t v179;
  uint64x2_t v180;
  uint64x2_t v181;
  int8x16_t v182;
  uint8x8_t v183;
  unsigned int v184;
  int8x8_t v185;
  int v186;
  int v187;
  int8x8_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint8x8_t *v192;
  signed int v193;
  unint64_t v194;
  uint64_t v195;
  int v196;
  void (*v197)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v198;
  BOOL v199;
  int v200;
  uint8x8_t *v202;
  uint8x8_t v203;
  int v204;
  int v205;
  unsigned int v206;
  uint64_t v207;
  uint8x8_t *v208;
  signed int v209;
  uint64_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int8x16_t v217;
  int32x4_t v218;
  int32x4_t v219;
  uint64_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  uint8x8_t v224;
  uint16x8_t v225;
  uint32x4_t v226;
  uint64x2_t v227;
  uint64x2_t v228;
  uint64x2_t v229;
  uint32x4_t v230;
  uint64x2_t v231;
  uint64x2_t v232;
  uint64x2_t v233;
  uint64x2_t v234;
  uint64x2_t v235;
  int8x16_t v236;
  BOOL v237;
  uint64_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int8x16_t v244;
  int32x4_t v245;
  int32x4_t v246;
  uint64_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  uint8x8_t v251;
  uint16x8_t v252;
  uint32x4_t v253;
  uint64x2_t v254;
  uint64x2_t v255;
  uint64x2_t v256;
  uint32x4_t v257;
  uint64x2_t v258;
  uint64x2_t v259;
  uint64x2_t v260;
  uint64x2_t v261;
  uint64x2_t v262;
  int8x16_t v263;
  uint8x8_t v264;
  unsigned int v265;
  uint8x8_t v266;
  unsigned int v267;
  int8x8_t v268;
  char v269;
  int v270;
  int8x8_t v271;
  unsigned int v272;
  uint64_t v273;
  uint8x8_t *v274;
  signed int v275;
  unint64_t v276;
  uint64_t v277;
  int v278;
  void (*v279)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v280;
  uint64_t v281;
  BOOL v282;
  int v283;
  uint8x8_t *v285;
  uint8x8_t v286;
  int v287;
  int v288;
  unsigned int v289;
  uint64_t v291;
  uint64_t v292;
  uint8x8_t *v293;
  signed int v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int8x16_t v300;
  int32x4_t v301;
  int32x4_t v302;
  uint64_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  uint8x8_t v307;
  uint16x8_t v308;
  uint32x4_t v309;
  uint64x2_t v310;
  uint64x2_t v311;
  uint64x2_t v312;
  uint32x4_t v313;
  uint64x2_t v314;
  uint64x2_t v315;
  uint64x2_t v316;
  uint64x2_t v317;
  uint64x2_t v318;
  int8x16_t v319;
  uint8x8_t v320;
  unsigned int v321;
  int8x8_t v322;
  char v323;
  char v324;
  int v325;
  int8x8_t v326;
  unsigned int v327;
  uint64_t v328;
  char v329;
  int8x8_t v330;
  char v331;
  uint8x8_t *v332;
  signed int v333;
  unint64_t v334;
  uint64_t v335;
  int v336;
  void (*v337)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v338;
  uint64_t v339;
  BOOL v340;
  int v341;
  uint8x8_t *v343;
  uint8x8_t v344;
  int v345;
  int v346;
  unsigned int v347;
  uint64_t v348;
  uint8x8_t *v349;
  signed int v350;
  uint64_t v352;
  int32x4_t v353;
  int32x4_t v354;
  int32x4_t v355;
  int32x4_t v356;
  int32x4_t v357;
  int8x16_t v358;
  int32x4_t v359;
  int32x4_t v360;
  uint64_t v361;
  int8x16_t v362;
  int8x16_t v363;
  int8x16_t v364;
  uint8x8_t v365;
  uint16x8_t v366;
  uint32x4_t v367;
  uint64x2_t v368;
  uint64x2_t v369;
  uint64x2_t v370;
  uint32x4_t v371;
  uint64x2_t v372;
  uint64x2_t v373;
  uint64x2_t v374;
  uint64x2_t v375;
  uint64x2_t v376;
  int8x16_t v377;
  uint8x8_t v378;
  unsigned int v379;
  char v380;
  int v381;
  int v382;
  int8x8_t v383;
  unsigned int v384;
  uint64_t v385;
  char v386;
  int8x8_t v387;
  char v388;
  uint8x8_t *v389;
  signed int v390;
  unint64_t v391;
  uint64_t v392;
  int v393;
  uint64_t (*v394)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v395;
  BOOL v396;
  int v397;
  uint8x8_t *v399;
  uint8x8_t v400;
  int v401;
  int v402;
  unsigned int v403;
  uint64_t v405;
  uint64_t v406;
  uint8x8_t *v407;
  signed int v408;
  int32x4_t v409;
  int32x4_t v410;
  int32x4_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int8x16_t v414;
  int32x4_t v415;
  int32x4_t v416;
  uint64_t v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  uint8x8_t v421;
  uint16x8_t v422;
  uint32x4_t v423;
  uint64x2_t v424;
  uint64x2_t v425;
  uint64x2_t v426;
  uint32x4_t v427;
  uint64x2_t v428;
  uint64x2_t v429;
  uint64x2_t v430;
  uint64x2_t v431;
  uint64x2_t v432;
  int8x16_t v433;
  uint8x8_t v434;
  unsigned int v435;
  char v436;
  int v437;
  int v438;
  int8x8_t v439;
  unsigned int v440;
  uint64_t v441;
  char v442;
  int8x8_t v443;
  char v444;
  uint8x8_t *v445;
  signed int v446;
  unint64_t v447;
  uint64_t v448;
  int v449;
  uint64_t (*v450)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v451;
  BOOL v452;
  int v453;
  uint8x8_t *v455;
  uint8x8_t v456;
  int v457;
  int v458;
  unsigned int v459;
  uint64_t v460;
  uint8x8_t *v461;
  signed int v462;
  uint64_t v464;
  int32x4_t v465;
  int32x4_t v466;
  int32x4_t v467;
  int32x4_t v468;
  int32x4_t v469;
  int8x16_t v470;
  int32x4_t v471;
  int32x4_t v472;
  uint64_t v473;
  int8x16_t v474;
  int8x16_t v475;
  int8x16_t v476;
  uint8x8_t v477;
  uint16x8_t v478;
  uint32x4_t v479;
  uint64x2_t v480;
  uint64x2_t v481;
  uint64x2_t v482;
  uint32x4_t v483;
  uint64x2_t v484;
  uint64x2_t v485;
  uint64x2_t v486;
  uint64x2_t v487;
  uint64x2_t v488;
  int8x16_t v489;
  uint8x8_t v490;
  unsigned int v491;
  int v492;
  uint64_t v493;
  int8x8_t v494;
  uint8x8_t *v495;
  unint64_t v496;
  uint64_t v497;
  int v498;
  void (*v499)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v500;
  unsigned int v501;
  BOOL v502;
  unsigned int v503;
  int v504;
  uint8x8_t *v505;
  uint8x8_t v506;
  int v507;
  int v508;
  unsigned int v509;
  uint64_t v511;
  uint64_t v512;
  uint8x8_t *v513;
  int v514;
  int32x4_t v515;
  int32x4_t v516;
  int32x4_t v517;
  int32x4_t v518;
  int32x4_t v519;
  int8x16_t v520;
  int32x4_t v521;
  int32x4_t v522;
  uint64_t v523;
  int8x16_t v524;
  int8x16_t v525;
  int8x16_t v526;
  uint8x8_t v527;
  uint16x8_t v528;
  uint32x4_t v529;
  uint64x2_t v530;
  uint64x2_t v531;
  uint64x2_t v532;
  uint32x4_t v533;
  uint64x2_t v534;
  uint64x2_t v535;
  uint64x2_t v536;
  uint64x2_t v537;
  uint64x2_t v538;
  int8x16_t v539;
  uint8x8_t v540;
  unsigned int v541;
  int v542;
  int8x8_t v543;
  unsigned int v544;
  uint64_t v545;
  uint8x8_t *v546;
  signed int v547;
  unint64_t v548;
  uint64_t v549;
  int v550;
  void (*v551)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v552;
  BOOL v553;
  int v554;
  int8x8_t v556;
  char v557;
  int v558;
  int8x8_t v559;
  unsigned int v560;
  uint64_t v561;
  uint8x8_t *v562;
  signed int v563;
  unint64_t v564;
  uint64_t v565;
  int v566;
  void (*v567)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v568;
  BOOL v569;
  int v570;
  uint8x8_t *v572;
  uint8x8_t v573;
  int v574;
  int v575;
  unsigned int v576;
  uint64_t v578;
  uint64_t v579;
  uint8x8_t *v580;
  signed int v581;
  int32x4_t v582;
  int32x4_t v583;
  int32x4_t v584;
  int32x4_t v585;
  int32x4_t v586;
  int8x16_t v587;
  int32x4_t v588;
  int32x4_t v589;
  uint64_t v590;
  int8x16_t v591;
  int8x16_t v592;
  int8x16_t v593;
  uint8x8_t v594;
  uint16x8_t v595;
  uint32x4_t v596;
  uint64x2_t v597;
  uint64x2_t v598;
  uint64x2_t v599;
  uint32x4_t v600;
  uint64x2_t v601;
  uint64x2_t v602;
  uint64x2_t v603;
  uint64x2_t v604;
  uint64x2_t v605;
  int8x16_t v606;
  uint8x8_t *v607;
  uint8x8_t v608;
  int v609;
  int v610;
  unsigned int v611;
  uint64_t v612;
  uint8x8_t *v613;
  signed int v614;
  uint8x8_t v615;
  unsigned int v616;
  int8x8_t v617;
  char v618;
  int v619;
  int v620;
  int8x8_t v621;
  unsigned int v622;
  uint64_t v623;
  char v624;
  uint8x8_t *v625;
  signed int v626;
  unint64_t v627;
  uint64_t v628;
  int v629;
  void (*v630)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v631;
  BOOL v632;
  int v633;
  uint8x8_t *v635;
  uint8x8_t v636;
  int v637;
  int v638;
  unsigned int v639;
  uint64_t v640;
  uint8x8_t *v641;
  signed int v642;
  uint64_t v644;
  int32x4_t v645;
  int32x4_t v646;
  int32x4_t v647;
  int32x4_t v648;
  int32x4_t v649;
  int8x16_t v650;
  int32x4_t v651;
  int32x4_t v652;
  uint64_t v653;
  int8x16_t v654;
  int8x16_t v655;
  int8x16_t v656;
  uint8x8_t v657;
  uint16x8_t v658;
  uint32x4_t v659;
  uint64x2_t v660;
  uint64x2_t v661;
  uint64x2_t v662;
  uint32x4_t v663;
  uint64x2_t v664;
  uint64x2_t v665;
  uint64x2_t v666;
  uint64x2_t v667;
  uint64x2_t v668;
  int8x16_t v669;
  BOOL v670;
  uint64_t v671;
  int32x4_t v672;
  int32x4_t v673;
  int32x4_t v674;
  int32x4_t v675;
  int32x4_t v676;
  int8x16_t v677;
  int32x4_t v678;
  int32x4_t v679;
  uint64_t v680;
  int8x16_t v681;
  int8x16_t v682;
  int8x16_t v683;
  uint8x8_t v684;
  uint16x8_t v685;
  uint32x4_t v686;
  uint64x2_t v687;
  uint64x2_t v688;
  uint64x2_t v689;
  uint32x4_t v690;
  uint64x2_t v691;
  uint64x2_t v692;
  uint64x2_t v693;
  uint64x2_t v694;
  uint64x2_t v695;
  int8x16_t v696;
  uint8x8_t v697;
  unsigned int v698;
  uint8x8_t v699;
  unsigned int v700;
  int8x8_t v701;
  char v702;
  int v703;
  int v704;
  int8x8_t v705;
  unsigned int v706;
  uint64_t v707;
  uint8x8_t *v708;
  signed int v709;
  unint64_t v710;
  uint64_t v711;
  int v712;
  void (*v713)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v714;
  char v715;
  BOOL v716;
  int v717;
  uint8x8_t *v719;
  uint8x8_t v720;
  int v721;
  int v722;
  unsigned int v723;
  uint64_t v725;
  uint64_t v726;
  uint8x8_t *v727;
  signed int v728;
  int32x4_t v729;
  int32x4_t v730;
  int32x4_t v731;
  int32x4_t v732;
  int32x4_t v733;
  int8x16_t v734;
  int32x4_t v735;
  int32x4_t v736;
  uint64_t v737;
  int8x16_t v738;
  int8x16_t v739;
  int8x16_t v740;
  uint8x8_t v741;
  uint16x8_t v742;
  uint32x4_t v743;
  uint64x2_t v744;
  uint64x2_t v745;
  uint64x2_t v746;
  uint32x4_t v747;
  uint64x2_t v748;
  uint64x2_t v749;
  uint64x2_t v750;
  uint64x2_t v751;
  uint64x2_t v752;
  int8x16_t v753;
  uint8x8_t v754;
  unsigned int v755;
  int8x8_t v756;
  char v757;
  char v758;
  int v759;
  int8x8_t v760;
  unsigned int v761;
  uint64_t v762;
  char v763;
  int8x8_t v764;
  char v765;
  uint8x8_t *v766;
  signed int v767;
  unint64_t v768;
  uint64_t v769;
  int v770;
  void (*v771)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v772;
  char v773;
  char v774;
  BOOL v775;
  int v776;
  uint8x8_t *v778;
  uint8x8_t v779;
  int v780;
  int v781;
  unsigned int v782;
  uint64_t v784;
  uint64_t v785;
  uint8x8_t *v786;
  signed int v787;
  int32x4_t v788;
  int32x4_t v789;
  int32x4_t v790;
  int32x4_t v791;
  int32x4_t v792;
  int8x16_t v793;
  int32x4_t v794;
  int32x4_t v795;
  uint64_t v796;
  int8x16_t v797;
  int8x16_t v798;
  int8x16_t v799;
  uint8x8_t v800;
  uint16x8_t v801;
  uint32x4_t v802;
  uint64x2_t v803;
  uint64x2_t v804;
  uint64x2_t v805;
  uint32x4_t v806;
  uint64x2_t v807;
  uint64x2_t v808;
  uint64x2_t v809;
  uint64x2_t v810;
  uint64x2_t v811;
  int8x16_t v812;
  uint8x8_t v813;
  unsigned int v814;
  char v815;
  int v816;
  int v817;
  int8x8_t v818;
  unsigned int v819;
  uint64_t v820;
  char v821;
  int8x8_t v822;
  char v823;
  uint8x8_t *v824;
  signed int v825;
  unint64_t v826;
  uint64_t v827;
  int v828;
  void (*v829)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v830;
  char v831;
  BOOL v832;
  int v833;
  uint8x8_t *v835;
  uint8x8_t v836;
  int v837;
  int v838;
  unsigned int v839;
  uint64_t v841;
  uint64_t v842;
  uint8x8_t *v843;
  signed int v844;
  int32x4_t v845;
  int32x4_t v846;
  int32x4_t v847;
  int32x4_t v848;
  int32x4_t v849;
  int8x16_t v850;
  int32x4_t v851;
  int32x4_t v852;
  uint64_t v853;
  int8x16_t v854;
  int8x16_t v855;
  int8x16_t v856;
  uint8x8_t v857;
  uint16x8_t v858;
  uint32x4_t v859;
  uint64x2_t v860;
  uint64x2_t v861;
  uint64x2_t v862;
  uint32x4_t v863;
  uint64x2_t v864;
  uint64x2_t v865;
  uint64x2_t v866;
  uint64x2_t v867;
  uint64x2_t v868;
  int8x16_t v869;
  uint8x8_t v870;
  unsigned int v871;
  char v872;
  int v873;
  int v874;
  int8x8_t v875;
  unsigned int v876;
  uint64_t v877;
  char v878;
  int8x8_t v879;
  char v880;
  uint8x8_t *v881;
  signed int v882;
  unint64_t v883;
  uint64_t v884;
  int v885;
  void (*v886)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v887;
  BOOL v888;
  int v889;
  uint8x8_t *v891;
  uint8x8_t v892;
  int v893;
  int v894;
  unsigned int v895;
  uint64_t v897;
  uint64_t v898;
  uint8x8_t *v899;
  signed int v900;
  int32x4_t v901;
  int32x4_t v902;
  int32x4_t v903;
  int32x4_t v904;
  int32x4_t v905;
  int8x16_t v906;
  int32x4_t v907;
  int32x4_t v908;
  uint64_t v909;
  int8x16_t v910;
  int8x16_t v911;
  int8x16_t v912;
  uint8x8_t v913;
  uint16x8_t v914;
  uint32x4_t v915;
  uint64x2_t v916;
  uint64x2_t v917;
  uint64x2_t v918;
  uint32x4_t v919;
  uint64x2_t v920;
  uint64x2_t v921;
  uint64x2_t v922;
  uint64x2_t v923;
  uint64x2_t v924;
  int8x16_t v925;
  uint8x8_t v926;
  unsigned int v927;
  int v928;
  int8x8_t v929;
  unsigned int v930;
  uint64_t v931;
  uint8x8_t *v932;
  signed int v933;
  unint64_t v934;
  uint64_t v935;
  int v936;
  void (*v937)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v938;
  BOOL v939;
  int v940;
  uint8x8_t *v942;
  uint8x8_t v943;
  int v944;
  int v945;
  unsigned int v946;
  uint64_t v948;
  uint64_t v949;
  uint8x8_t *v950;
  signed int v951;
  int32x4_t v952;
  int32x4_t v953;
  int32x4_t v954;
  int32x4_t v955;
  int32x4_t v956;
  int8x16_t v957;
  int32x4_t v958;
  int32x4_t v959;
  uint64_t v960;
  int8x16_t v961;
  int8x16_t v962;
  int8x16_t v963;
  uint8x8_t v964;
  uint16x8_t v965;
  uint32x4_t v966;
  uint64x2_t v967;
  uint64x2_t v968;
  uint64x2_t v969;
  uint32x4_t v970;
  uint64x2_t v971;
  uint64x2_t v972;
  uint64x2_t v973;
  uint64x2_t v974;
  uint64x2_t v975;
  int8x16_t v976;
  uint8x8_t v977;
  unsigned int v978;
  int8x8_t v979;
  int v980;
  int v981;
  int8x8_t v982;
  unsigned int v983;
  uint64_t v984;
  uint8x8_t *v985;
  signed int v986;
  unint64_t v987;
  uint64_t v988;
  int v989;
  void (*v990)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v991;
  BOOL v992;
  int v993;
  uint8x8_t *v995;
  uint8x8_t v996;
  int v997;
  int v998;
  unsigned int v999;
  uint64_t v1001;
  uint64_t v1002;
  uint8x8_t *v1003;
  signed int v1004;
  int32x4_t v1005;
  int32x4_t v1006;
  int32x4_t v1007;
  int32x4_t v1008;
  int32x4_t v1009;
  int8x16_t v1010;
  int32x4_t v1011;
  int32x4_t v1012;
  uint64_t v1013;
  int8x16_t v1014;
  int8x16_t v1015;
  int8x16_t v1016;
  uint8x8_t v1017;
  uint16x8_t v1018;
  uint32x4_t v1019;
  uint64x2_t v1020;
  uint64x2_t v1021;
  uint64x2_t v1022;
  uint32x4_t v1023;
  uint64x2_t v1024;
  uint64x2_t v1025;
  uint64x2_t v1026;
  uint64x2_t v1027;
  uint64x2_t v1028;
  int8x16_t v1029;
  uint8x8_t v1030;
  unsigned int v1031;
  int8x8_t v1032;
  char v1033;
  int v1034;
  int v1035;
  int8x8_t v1036;
  unsigned int v1037;
  uint64_t v1038;
  uint8x8_t *v1039;
  signed int v1040;
  unint64_t v1041;
  uint64_t v1042;
  int v1043;
  void (*v1044)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1045;
  BOOL v1046;
  int v1047;
  uint8x8_t *v1049;
  uint8x8_t v1050;
  int v1051;
  int v1052;
  unsigned int v1053;
  uint64_t v1055;
  uint64_t v1056;
  uint8x8_t *v1057;
  signed int v1058;
  int32x4_t v1059;
  int32x4_t v1060;
  int32x4_t v1061;
  int32x4_t v1062;
  int32x4_t v1063;
  int8x16_t v1064;
  int32x4_t v1065;
  int32x4_t v1066;
  uint64_t v1067;
  int8x16_t v1068;
  int8x16_t v1069;
  int8x16_t v1070;
  uint8x8_t v1071;
  uint16x8_t v1072;
  uint32x4_t v1073;
  uint64x2_t v1074;
  uint64x2_t v1075;
  uint64x2_t v1076;
  uint32x4_t v1077;
  uint64x2_t v1078;
  uint64x2_t v1079;
  uint64x2_t v1080;
  uint64x2_t v1081;
  uint64x2_t v1082;
  int8x16_t v1083;
  uint8x8_t v1084;
  unsigned int v1085;
  int8x8_t v1086;
  char v1087;
  int v1088;
  int v1089;
  int8x8_t v1090;
  unsigned int v1091;
  uint64_t v1092;
  char v1093;
  uint8x8_t *v1094;
  signed int v1095;
  unint64_t v1096;
  uint64_t v1097;
  int v1098;
  void (*v1099)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1100;
  BOOL v1101;
  int v1102;
  uint8x8_t *v1104;
  uint8x8_t v1105;
  int v1106;
  int v1107;
  unsigned int v1108;
  uint64_t v1109;
  uint8x8_t *v1110;
  signed int v1111;
  BOOL v1112;
  uint64_t v1113;
  int32x4_t v1114;
  int32x4_t v1115;
  int32x4_t v1116;
  int32x4_t v1117;
  int32x4_t v1118;
  int8x16_t v1119;
  int32x4_t v1120;
  int32x4_t v1121;
  uint64_t v1122;
  int8x16_t v1123;
  int8x16_t v1124;
  int8x16_t v1125;
  uint8x8_t v1126;
  uint16x8_t v1127;
  uint32x4_t v1128;
  uint64x2_t v1129;
  uint64x2_t v1130;
  uint64x2_t v1131;
  uint32x4_t v1132;
  uint64x2_t v1133;
  uint64x2_t v1134;
  uint64x2_t v1135;
  uint64x2_t v1136;
  uint64x2_t v1137;
  int8x16_t v1138;
  uint8x8_t v1139;
  unsigned int v1140;
  int8x8_t v1141;
  char v1142;
  int v1143;
  int v1144;
  int8x8_t v1145;
  unsigned int v1146;
  uint64_t v1147;
  uint8x8_t *v1148;
  signed int v1149;
  unint64_t v1150;
  uint64_t v1151;
  int v1152;
  void (*v1153)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1154;
  char v1155;
  BOOL v1156;
  int v1157;
  uint8x8_t *v1159;
  uint8x8_t v1160;
  int v1161;
  int v1162;
  unsigned int v1163;
  uint64_t v1165;
  uint64_t v1166;
  uint8x8_t *v1167;
  signed int v1168;
  int32x4_t v1169;
  int32x4_t v1170;
  int32x4_t v1171;
  int32x4_t v1172;
  int32x4_t v1173;
  int8x16_t v1174;
  int32x4_t v1175;
  int32x4_t v1176;
  uint64_t v1177;
  int8x16_t v1178;
  int8x16_t v1179;
  int8x16_t v1180;
  uint8x8_t v1181;
  uint16x8_t v1182;
  uint32x4_t v1183;
  uint64x2_t v1184;
  uint64x2_t v1185;
  uint64x2_t v1186;
  uint32x4_t v1187;
  uint64x2_t v1188;
  uint64x2_t v1189;
  uint64x2_t v1190;
  uint64x2_t v1191;
  uint64x2_t v1192;
  int8x16_t v1193;
  uint8x8_t v1194;
  unsigned int v1195;
  int8x8_t v1196;
  char v1197;
  char v1198;
  int v1199;
  int8x8_t v1200;
  unsigned int v1201;
  uint64_t v1202;
  char v1203;
  int8x8_t v1204;
  char v1205;
  uint8x8_t *v1206;
  signed int v1207;
  unint64_t v1208;
  uint64_t v1209;
  int v1210;
  void (*v1211)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1212;
  char v1213;
  char v1214;
  BOOL v1215;
  int v1216;
  uint8x8_t *v1218;
  uint8x8_t v1219;
  int v1220;
  int v1221;
  unsigned int v1222;
  uint64_t v1224;
  uint64_t v1225;
  uint8x8_t *v1226;
  signed int v1227;
  int32x4_t v1228;
  int32x4_t v1229;
  int32x4_t v1230;
  int32x4_t v1231;
  int32x4_t v1232;
  int8x16_t v1233;
  int32x4_t v1234;
  int32x4_t v1235;
  uint64_t v1236;
  int8x16_t v1237;
  int8x16_t v1238;
  int8x16_t v1239;
  uint8x8_t v1240;
  uint16x8_t v1241;
  uint32x4_t v1242;
  uint64x2_t v1243;
  uint64x2_t v1244;
  uint64x2_t v1245;
  uint32x4_t v1246;
  uint64x2_t v1247;
  uint64x2_t v1248;
  uint64x2_t v1249;
  uint64x2_t v1250;
  uint64x2_t v1251;
  int8x16_t v1252;
  uint8x8_t v1253;
  unsigned int v1254;
  char v1255;
  int v1256;
  int v1257;
  int8x8_t v1258;
  unsigned int v1259;
  uint64_t v1260;
  char v1261;
  int8x8_t v1262;
  char v1263;
  uint8x8_t *v1264;
  signed int v1265;
  unint64_t v1266;
  uint64_t v1267;
  int v1268;
  void (*v1269)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1270;
  char v1271;
  BOOL v1272;
  int v1273;
  uint8x8_t *v1275;
  uint8x8_t v1276;
  int v1277;
  int v1278;
  unsigned int v1279;
  uint64_t v1281;
  uint64_t v1282;
  uint8x8_t *v1283;
  signed int v1284;
  int32x4_t v1285;
  int32x4_t v1286;
  int32x4_t v1287;
  int32x4_t v1288;
  int32x4_t v1289;
  int8x16_t v1290;
  int32x4_t v1291;
  int32x4_t v1292;
  uint64_t v1293;
  int8x16_t v1294;
  int8x16_t v1295;
  int8x16_t v1296;
  uint8x8_t v1297;
  uint16x8_t v1298;
  uint32x4_t v1299;
  uint64x2_t v1300;
  uint64x2_t v1301;
  uint64x2_t v1302;
  uint32x4_t v1303;
  uint64x2_t v1304;
  uint64x2_t v1305;
  uint64x2_t v1306;
  uint64x2_t v1307;
  uint64x2_t v1308;
  int8x16_t v1309;
  uint8x8_t v1310;
  unsigned int v1311;
  char v1312;
  int v1313;
  int v1314;
  int8x8_t v1315;
  unsigned int v1316;
  uint64_t v1317;
  char v1318;
  int8x8_t v1319;
  char v1320;
  uint8x8_t *v1321;
  signed int v1322;
  unint64_t v1323;
  uint64_t v1324;
  int v1325;
  void (*v1326)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1327;
  BOOL v1328;
  int v1329;
  uint8x8_t *v1331;
  uint8x8_t v1332;
  int v1333;
  int v1334;
  unsigned int v1335;
  uint64_t v1337;
  uint64_t v1338;
  uint8x8_t *v1339;
  signed int v1340;
  int32x4_t v1341;
  int32x4_t v1342;
  int32x4_t v1343;
  int32x4_t v1344;
  int32x4_t v1345;
  int8x16_t v1346;
  int32x4_t v1347;
  int32x4_t v1348;
  uint64_t v1349;
  int8x16_t v1350;
  int8x16_t v1351;
  int8x16_t v1352;
  uint8x8_t v1353;
  uint16x8_t v1354;
  uint32x4_t v1355;
  uint64x2_t v1356;
  uint64x2_t v1357;
  uint64x2_t v1358;
  uint32x4_t v1359;
  uint64x2_t v1360;
  uint64x2_t v1361;
  uint64x2_t v1362;
  uint64x2_t v1363;
  uint64x2_t v1364;
  int8x16_t v1365;
  uint8x8_t v1366;
  unsigned int v1367;
  int v1368;
  int8x8_t v1369;
  unsigned int v1370;
  uint64_t v1371;
  uint8x8_t *v1372;
  signed int v1373;
  unint64_t v1374;
  uint64_t v1375;
  int v1376;
  void (*v1377)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1378;
  BOOL v1379;
  int v1380;
  uint8x8_t *v1382;
  uint8x8_t v1383;
  int v1384;
  int v1385;
  unsigned int v1386;
  uint64_t v1388;
  uint64_t v1389;
  uint8x8_t *v1390;
  signed int v1391;
  int32x4_t v1392;
  int32x4_t v1393;
  int32x4_t v1394;
  int32x4_t v1395;
  int32x4_t v1396;
  int8x16_t v1397;
  int32x4_t v1398;
  int32x4_t v1399;
  uint64_t v1400;
  int8x16_t v1401;
  int8x16_t v1402;
  int8x16_t v1403;
  uint8x8_t v1404;
  uint16x8_t v1405;
  uint32x4_t v1406;
  uint64x2_t v1407;
  uint64x2_t v1408;
  uint64x2_t v1409;
  uint32x4_t v1410;
  uint64x2_t v1411;
  uint64x2_t v1412;
  uint64x2_t v1413;
  uint64x2_t v1414;
  uint64x2_t v1415;
  int8x16_t v1416;
  uint8x8_t v1417;
  unsigned int v1418;
  int8x8_t v1419;
  int v1420;
  int v1421;
  int8x8_t v1422;
  unsigned int v1423;
  uint64_t v1424;
  uint8x8_t *v1425;
  signed int v1426;
  unint64_t v1427;
  uint64_t v1428;
  int v1429;
  void (*v1430)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1431;
  BOOL v1432;
  int v1433;
  uint8x8_t *v1435;
  uint8x8_t v1436;
  int v1437;
  int v1438;
  unsigned int v1439;
  uint64_t v1441;
  uint64_t v1442;
  uint8x8_t *v1443;
  signed int v1444;
  int32x4_t v1445;
  int32x4_t v1446;
  int32x4_t v1447;
  int32x4_t v1448;
  int32x4_t v1449;
  int8x16_t v1450;
  int32x4_t v1451;
  int32x4_t v1452;
  uint64_t v1453;
  int8x16_t v1454;
  int8x16_t v1455;
  int8x16_t v1456;
  uint8x8_t v1457;
  uint16x8_t v1458;
  uint32x4_t v1459;
  uint64x2_t v1460;
  uint64x2_t v1461;
  uint64x2_t v1462;
  uint32x4_t v1463;
  uint64x2_t v1464;
  uint64x2_t v1465;
  uint64x2_t v1466;
  uint64x2_t v1467;
  uint64x2_t v1468;
  int8x16_t v1469;
  uint8x8_t v1470;
  unsigned int v1471;
  int8x8_t v1472;
  char v1473;
  int v1474;
  int v1475;
  int8x8_t v1476;
  unsigned int v1477;
  uint64_t v1478;
  uint8x8_t *v1479;
  signed int v1480;
  unint64_t v1481;
  uint64_t v1482;
  int v1483;
  void (*v1484)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1485;
  BOOL v1486;
  int v1487;
  uint8x8_t *v1489;
  uint8x8_t v1490;
  int v1491;
  int v1492;
  unsigned int v1493;
  uint64_t v1495;
  uint64_t v1496;
  uint8x8_t *v1497;
  signed int v1498;
  int32x4_t v1499;
  int32x4_t v1500;
  int32x4_t v1501;
  int32x4_t v1502;
  int32x4_t v1503;
  int8x16_t v1504;
  int32x4_t v1505;
  int32x4_t v1506;
  uint64_t v1507;
  int8x16_t v1508;
  int8x16_t v1509;
  int8x16_t v1510;
  uint8x8_t v1511;
  uint16x8_t v1512;
  uint32x4_t v1513;
  uint64x2_t v1514;
  uint64x2_t v1515;
  uint64x2_t v1516;
  uint32x4_t v1517;
  uint64x2_t v1518;
  uint64x2_t v1519;
  uint64x2_t v1520;
  uint64x2_t v1521;
  uint64x2_t v1522;
  int8x16_t v1523;
  uint8x8_t v1524;
  unsigned int v1525;
  int8x8_t v1526;
  char v1527;
  int v1528;
  int v1529;
  int8x8_t v1530;
  unsigned int v1531;
  uint64_t v1532;
  char v1533;
  uint8x8_t *v1534;
  signed int v1535;
  unint64_t v1536;
  uint64_t v1537;
  int v1538;
  void (*v1539)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1540;
  BOOL v1541;
  int v1542;
  uint8x8_t *v1544;
  uint8x8_t v1545;
  int v1546;
  int v1547;
  unsigned int v1548;
  uint64_t v1549;
  uint8x8_t *v1550;
  signed int v1551;
  BOOL v1552;
  uint64_t v1553;
  int32x4_t v1554;
  int32x4_t v1555;
  int32x4_t v1556;
  int32x4_t v1557;
  int32x4_t v1558;
  int8x16_t v1559;
  int32x4_t v1560;
  int32x4_t v1561;
  uint64_t v1562;
  int8x16_t v1563;
  int8x16_t v1564;
  int8x16_t v1565;
  uint8x8_t v1566;
  uint16x8_t v1567;
  uint32x4_t v1568;
  uint64x2_t v1569;
  uint64x2_t v1570;
  uint64x2_t v1571;
  uint32x4_t v1572;
  uint64x2_t v1573;
  uint64x2_t v1574;
  uint64x2_t v1575;
  uint64x2_t v1576;
  uint64x2_t v1577;
  int8x16_t v1578;
  uint8x8_t v1579;
  unsigned int v1580;
  int8x8_t v1581;
  int v1582;
  int v1583;
  int8x8_t v1584;
  unsigned int v1585;
  uint64_t v1586;
  uint8x8_t *v1587;
  signed int v1588;
  unint64_t v1589;
  uint64_t v1590;
  int v1591;
  void (*v1592)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1593;
  char v1594;
  BOOL v1595;
  int v1596;
  uint8x8_t *v1598;
  uint8x8_t v1599;
  int v1600;
  int v1601;
  unsigned int v1602;
  uint64_t v1604;
  uint64_t v1605;
  uint8x8_t *v1606;
  signed int v1607;
  int32x4_t v1608;
  int32x4_t v1609;
  int32x4_t v1610;
  int32x4_t v1611;
  int32x4_t v1612;
  int8x16_t v1613;
  int32x4_t v1614;
  int32x4_t v1615;
  uint64_t v1616;
  int8x16_t v1617;
  int8x16_t v1618;
  int8x16_t v1619;
  uint8x8_t v1620;
  uint16x8_t v1621;
  uint32x4_t v1622;
  uint64x2_t v1623;
  uint64x2_t v1624;
  uint64x2_t v1625;
  uint32x4_t v1626;
  uint64x2_t v1627;
  uint64x2_t v1628;
  uint64x2_t v1629;
  uint64x2_t v1630;
  uint64x2_t v1631;
  int8x16_t v1632;
  uint8x8_t v1633;
  unsigned int v1634;
  int8x8_t v1635;
  char v1636;
  char v1637;
  int v1638;
  int8x8_t v1639;
  unsigned int v1640;
  uint64_t v1641;
  char v1642;
  int8x8_t v1643;
  char v1644;
  uint8x8_t *v1645;
  signed int v1646;
  unint64_t v1647;
  uint64_t v1648;
  int v1649;
  void (*v1650)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1651;
  uint64_t v1652;
  char v1653;
  BOOL v1654;
  int v1655;
  uint8x8_t *v1657;
  uint8x8_t v1658;
  int v1659;
  int v1660;
  unsigned int v1661;
  uint64_t v1663;
  uint64_t v1664;
  uint8x8_t *v1665;
  signed int v1666;
  int32x4_t v1667;
  int32x4_t v1668;
  int32x4_t v1669;
  int32x4_t v1670;
  int32x4_t v1671;
  int8x16_t v1672;
  int32x4_t v1673;
  int32x4_t v1674;
  uint64_t v1675;
  int8x16_t v1676;
  int8x16_t v1677;
  int8x16_t v1678;
  uint8x8_t v1679;
  uint16x8_t v1680;
  uint32x4_t v1681;
  uint64x2_t v1682;
  uint64x2_t v1683;
  uint64x2_t v1684;
  uint32x4_t v1685;
  uint64x2_t v1686;
  uint64x2_t v1687;
  uint64x2_t v1688;
  uint64x2_t v1689;
  uint64x2_t v1690;
  int8x16_t v1691;
  uint8x8_t v1692;
  unsigned int v1693;
  char v1694;
  int v1695;
  int v1696;
  int8x8_t v1697;
  unsigned int v1698;
  uint64_t v1699;
  char v1700;
  int8x8_t v1701;
  char v1702;
  uint8x8_t *v1703;
  signed int v1704;
  unint64_t v1705;
  uint64_t v1706;
  int v1707;
  uint64_t (*v1708)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1709;
  char v1710;
  BOOL v1711;
  int v1712;
  uint8x8_t *v1714;
  uint8x8_t v1715;
  int v1716;
  int v1717;
  unsigned int v1718;
  uint64_t v1720;
  uint64_t v1721;
  uint8x8_t *v1722;
  signed int v1723;
  int32x4_t v1724;
  int32x4_t v1725;
  int32x4_t v1726;
  int32x4_t v1727;
  int32x4_t v1728;
  int8x16_t v1729;
  int32x4_t v1730;
  int32x4_t v1731;
  uint64_t v1732;
  int8x16_t v1733;
  int8x16_t v1734;
  int8x16_t v1735;
  uint8x8_t v1736;
  uint16x8_t v1737;
  uint32x4_t v1738;
  uint64x2_t v1739;
  uint64x2_t v1740;
  uint64x2_t v1741;
  uint32x4_t v1742;
  uint64x2_t v1743;
  uint64x2_t v1744;
  uint64x2_t v1745;
  uint64x2_t v1746;
  uint64x2_t v1747;
  int8x16_t v1748;
  uint8x8_t v1749;
  unsigned int v1750;
  char v1751;
  int v1752;
  int v1753;
  int8x8_t v1754;
  unsigned int v1755;
  uint64_t v1756;
  char v1757;
  int8x8_t v1758;
  char v1759;
  uint8x8_t *v1760;
  signed int v1761;
  unint64_t v1762;
  uint64_t v1763;
  int v1764;
  uint64_t (*v1765)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1766;
  BOOL v1767;
  int v1768;
  uint8x8_t *v1770;
  uint8x8_t v1771;
  int v1772;
  int v1773;
  unsigned int v1774;
  uint64_t v1776;
  uint64_t v1777;
  uint8x8_t *v1778;
  signed int v1779;
  int32x4_t v1780;
  int32x4_t v1781;
  int32x4_t v1782;
  int32x4_t v1783;
  int32x4_t v1784;
  int8x16_t v1785;
  int32x4_t v1786;
  int32x4_t v1787;
  uint64_t v1788;
  int8x16_t v1789;
  int8x16_t v1790;
  int8x16_t v1791;
  uint8x8_t v1792;
  uint16x8_t v1793;
  uint32x4_t v1794;
  uint64x2_t v1795;
  uint64x2_t v1796;
  uint64x2_t v1797;
  uint32x4_t v1798;
  uint64x2_t v1799;
  uint64x2_t v1800;
  uint64x2_t v1801;
  uint64x2_t v1802;
  uint64x2_t v1803;
  int8x16_t v1804;
  uint8x8_t v1805;
  unsigned int v1806;
  int v1807;
  int8x8_t v1808;
  unsigned int v1809;
  uint64_t v1810;
  uint8x8_t *v1811;
  signed int v1812;
  unint64_t v1813;
  uint64_t v1814;
  int v1815;
  uint64_t (*v1816)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1817;
  BOOL v1818;
  int v1819;
  uint8x8_t *v1821;
  uint8x8_t v1822;
  int v1823;
  int v1824;
  unsigned int v1825;
  uint64_t v1827;
  uint64_t v1828;
  uint8x8_t *v1829;
  signed int v1830;
  int32x4_t v1831;
  int32x4_t v1832;
  int32x4_t v1833;
  int32x4_t v1834;
  int32x4_t v1835;
  int8x16_t v1836;
  int32x4_t v1837;
  int32x4_t v1838;
  uint64_t v1839;
  int8x16_t v1840;
  int8x16_t v1841;
  int8x16_t v1842;
  uint8x8_t v1843;
  uint16x8_t v1844;
  uint32x4_t v1845;
  uint64x2_t v1846;
  uint64x2_t v1847;
  uint64x2_t v1848;
  uint32x4_t v1849;
  uint64x2_t v1850;
  uint64x2_t v1851;
  uint64x2_t v1852;
  uint64x2_t v1853;
  uint64x2_t v1854;
  int8x16_t v1855;
  uint8x8_t v1856;
  unsigned int v1857;
  unint64_t v1858;
  int8x8_t v1859;
  int8x8_t v1860;
  int v1861;
  int v1862;
  int8x8_t v1863;
  unsigned int v1864;
  uint64_t v1865;
  unint64_t v1866;
  int8x8_t v1867;
  int8x8_t v1868;
  int v1869;
  int v1870;
  int8x8_t v1871;
  unsigned int v1872;
  uint8x8_t *v1873;
  int32x4_t v1874;
  int32x4_t v1875;
  uint8x8_t *v1876;
  unint64_t v1877;
  void (*v1878)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1879;
  signed int v1880;
  int v1881;
  unsigned int v1882;
  BOOL v1883;
  int v1884;
  uint8x8_t v1886;
  int v1887;
  int v1888;
  unsigned int v1889;
  uint64_t v1891;
  uint8x8_t v1892;
  uint8x8_t *v1893;
  int v1894;
  int32x4_t v1895;
  int32x4_t v1896;
  int32x4_t v1897;
  int32x4_t v1898;
  int32x4_t v1899;
  int8x16_t v1900;
  uint64_t v1901;
  int8x16_t v1902;
  int8x16_t v1903;
  int8x16_t v1904;
  uint8x8_t v1905;
  uint16x8_t v1906;
  uint32x4_t v1907;
  uint64x2_t v1908;
  uint64x2_t v1909;
  uint64x2_t v1910;
  uint32x4_t v1911;
  uint64x2_t v1912;
  uint64x2_t v1913;
  uint64x2_t v1914;
  uint64x2_t v1915;
  uint64x2_t v1916;
  int8x16_t v1917;
  uint8x8_t v1918;
  unsigned int v1919;
  uint64_t v1920;
  int8x8_t v1921;
  int v1922;
  int v1923;
  int8x8_t v1924;
  unsigned int v1925;
  uint8x8_t *v1926;
  unint64_t v1927;
  void (*v1928)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1929;
  signed int v1930;
  int v1931;
  BOOL v1932;
  int v1933;
  uint8x8_t v1935;
  int v1936;
  int v1937;
  unsigned int v1938;
  uint64_t v1940;
  uint8x8_t v1941;
  uint8x8_t *v1942;
  signed int v1943;
  int32x4_t v1944;
  int32x4_t v1945;
  int32x4_t v1946;
  int32x4_t v1947;
  int32x4_t v1948;
  int8x16_t v1949;
  uint64_t v1950;
  int8x16_t v1951;
  int8x16_t v1952;
  int8x16_t v1953;
  uint8x8_t v1954;
  uint16x8_t v1955;
  uint32x4_t v1956;
  uint64x2_t v1957;
  uint64x2_t v1958;
  uint64x2_t v1959;
  uint32x4_t v1960;
  uint64x2_t v1961;
  uint64x2_t v1962;
  uint64x2_t v1963;
  uint64x2_t v1964;
  uint64x2_t v1965;
  int8x16_t v1966;
  uint8x8_t v1967;
  unsigned int v1968;
  uint64_t v1969;
  int8x8_t v1970;
  int v1971;
  int v1972;
  int8x8_t v1973;
  unsigned int v1974;
  uint8x8_t *v1975;
  unint64_t v1976;
  void (*v1977)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1978;
  signed int v1979;
  int v1980;
  BOOL v1981;
  int v1982;
  uint64_t v1984;
  int8x8_t v1985;
  int v1986;
  int v1987;
  int8x8_t v1988;
  unsigned int v1989;
  uint8x8_t *v1990;
  unint64_t v1991;
  void (*v1992)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v1993;
  signed int v1994;
  int v1995;
  BOOL v1996;
  int v1997;
  uint8x8_t v1999;
  int v2000;
  int v2001;
  unsigned int v2002;
  uint64_t v2004;
  uint8x8_t v2005;
  uint8x8_t *v2006;
  signed int v2007;
  int32x4_t v2008;
  int32x4_t v2009;
  int32x4_t v2010;
  int32x4_t v2011;
  int32x4_t v2012;
  int8x16_t v2013;
  uint64_t v2014;
  int8x16_t v2015;
  int8x16_t v2016;
  int8x16_t v2017;
  uint8x8_t v2018;
  uint16x8_t v2019;
  uint32x4_t v2020;
  uint64x2_t v2021;
  uint64x2_t v2022;
  uint64x2_t v2023;
  uint32x4_t v2024;
  uint64x2_t v2025;
  uint64x2_t v2026;
  uint64x2_t v2027;
  uint64x2_t v2028;
  uint64x2_t v2029;
  int8x16_t v2030;
  uint8x8_t v2031;
  int v2032;
  int v2033;
  unsigned int v2034;
  uint8x8_t v2035;
  uint8x8_t *v2036;
  signed int v2037;
  uint8x8_t v2038;
  unsigned int v2039;
  uint64_t v2040;
  int8x8_t v2041;
  int v2042;
  int v2043;
  int8x8_t v2044;
  unsigned int v2045;
  uint8x8_t *v2046;
  unint64_t v2047;
  void (*v2048)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2049;
  signed int v2050;
  int v2051;
  BOOL v2052;
  int v2053;
  uint8x8_t v2055;
  int v2056;
  int v2057;
  unsigned int v2058;
  uint64_t v2060;
  uint8x8_t v2061;
  uint8x8_t *v2062;
  signed int v2063;
  int32x4_t v2064;
  int32x4_t v2065;
  int32x4_t v2066;
  int32x4_t v2067;
  int32x4_t v2068;
  int8x16_t v2069;
  uint64_t v2070;
  int8x16_t v2071;
  int8x16_t v2072;
  int8x16_t v2073;
  uint8x8_t v2074;
  uint16x8_t v2075;
  uint32x4_t v2076;
  uint64x2_t v2077;
  uint64x2_t v2078;
  uint64x2_t v2079;
  uint32x4_t v2080;
  uint64x2_t v2081;
  uint64x2_t v2082;
  uint64x2_t v2083;
  uint64x2_t v2084;
  uint64x2_t v2085;
  int8x16_t v2086;
  uint8x8_t v2087;
  unsigned int v2088;
  uint64_t v2089;
  int8x8_t v2090;
  char v2091;
  int v2092;
  int v2093;
  int8x8_t v2094;
  unsigned int v2095;
  char v2096;
  uint8x8_t *v2097;
  unint64_t v2098;
  void (*v2099)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2100;
  signed int v2101;
  int v2102;
  BOOL v2103;
  int v2104;
  uint8x8_t v2106;
  int v2107;
  int v2108;
  unsigned int v2109;
  uint64_t v2111;
  uint8x8_t v2112;
  uint8x8_t *v2113;
  signed int v2114;
  int32x4_t v2115;
  int32x4_t v2116;
  int32x4_t v2117;
  int32x4_t v2118;
  int32x4_t v2119;
  int8x16_t v2120;
  uint64_t v2121;
  int8x16_t v2122;
  int8x16_t v2123;
  int8x16_t v2124;
  uint8x8_t v2125;
  uint16x8_t v2126;
  uint32x4_t v2127;
  uint64x2_t v2128;
  uint64x2_t v2129;
  uint64x2_t v2130;
  uint32x4_t v2131;
  uint64x2_t v2132;
  uint64x2_t v2133;
  uint64x2_t v2134;
  uint64x2_t v2135;
  uint64x2_t v2136;
  int8x16_t v2137;
  uint8x8_t v2138;
  unsigned int v2139;
  uint64_t v2140;
  int8x8_t v2141;
  char v2142;
  int v2143;
  int v2144;
  int8x8_t v2145;
  unsigned int v2146;
  char v2147;
  char v2148;
  uint8x8_t *v2149;
  unint64_t v2150;
  void (*v2151)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2152;
  signed int v2153;
  int v2154;
  BOOL v2155;
  int v2156;
  uint8x8_t v2158;
  int v2159;
  int v2160;
  unsigned int v2161;
  uint64_t v2163;
  uint8x8_t v2164;
  uint8x8_t *v2165;
  signed int v2166;
  int32x4_t v2167;
  int32x4_t v2168;
  int32x4_t v2169;
  int32x4_t v2170;
  int32x4_t v2171;
  int8x16_t v2172;
  uint64_t v2173;
  int8x16_t v2174;
  int8x16_t v2175;
  int8x16_t v2176;
  uint8x8_t v2177;
  uint16x8_t v2178;
  uint32x4_t v2179;
  uint64x2_t v2180;
  uint64x2_t v2181;
  uint64x2_t v2182;
  uint32x4_t v2183;
  uint64x2_t v2184;
  uint64x2_t v2185;
  uint64x2_t v2186;
  uint64x2_t v2187;
  uint64x2_t v2188;
  int8x16_t v2189;
  uint8x8_t v2190;
  unsigned int v2191;
  uint64_t v2192;
  int8x8_t v2193;
  char v2194;
  int v2195;
  int v2196;
  int8x8_t v2197;
  unsigned int v2198;
  char v2199;
  char v2200;
  char v2201;
  uint8x8_t *v2202;
  unint64_t v2203;
  void (*v2204)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  char v2205;
  uint64_t v2206;
  char v2207;
  signed int v2208;
  int v2209;
  BOOL v2210;
  int v2211;
  uint8x8_t v2213;
  int v2214;
  int v2215;
  unsigned int v2216;
  uint8x8_t v2217;
  uint8x8_t *v2218;
  signed int v2219;
  uint64_t v2221;
  int32x4_t v2222;
  int32x4_t v2223;
  int32x4_t v2224;
  int32x4_t v2225;
  int32x4_t v2226;
  int8x16_t v2227;
  uint64_t v2228;
  int8x16_t v2229;
  int8x16_t v2230;
  int8x16_t v2231;
  uint8x8_t v2232;
  uint16x8_t v2233;
  uint32x4_t v2234;
  uint64x2_t v2235;
  uint64x2_t v2236;
  uint64x2_t v2237;
  uint32x4_t v2238;
  uint64x2_t v2239;
  uint64x2_t v2240;
  uint64x2_t v2241;
  uint64x2_t v2242;
  uint64x2_t v2243;
  int8x16_t v2244;
  BOOL v2245;
  uint64_t v2246;
  int32x4_t v2247;
  int32x4_t v2248;
  int32x4_t v2249;
  int32x4_t v2250;
  int32x4_t v2251;
  int8x16_t v2252;
  uint64_t v2253;
  int8x16_t v2254;
  int8x16_t v2255;
  int8x16_t v2256;
  uint8x8_t v2257;
  uint16x8_t v2258;
  uint32x4_t v2259;
  uint64x2_t v2260;
  uint64x2_t v2261;
  uint64x2_t v2262;
  uint32x4_t v2263;
  uint64x2_t v2264;
  uint64x2_t v2265;
  uint64x2_t v2266;
  uint64x2_t v2267;
  uint64x2_t v2268;
  int8x16_t v2269;
  uint8x8_t v2270;
  unsigned int v2271;
  uint8x8_t v2272;
  unsigned int v2273;
  uint64_t v2274;
  int8x8_t v2275;
  char v2276;
  int v2277;
  uint64_t v2278;
  uint8x8_t *v2279;
  unint64_t v2280;
  char v2281;
  int32x4_t v2282;
  int32x4_t v2283;
  uint64_t v2284;
  unsigned __int8 *v2285;
  uint64_t v2286;
  int v2287;
  int8x8_t v2288;
  int v2289;
  int v2290;
  char v2291;
  int v2292;
  int v2293;
  unsigned int v2294;
  int8x8_t v2295;
  uint8x8_t *v2296;
  unint64_t v2297;
  uint64_t (*v2298)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2299;
  signed int v2300;
  int v2301;
  unsigned int v2302;
  BOOL v2303;
  int v2304;
  uint8x8_t v2306;
  int v2307;
  int v2308;
  unsigned int v2309;
  uint64_t v2311;
  uint8x8_t v2312;
  uint8x8_t *v2313;
  int v2314;
  int32x4_t v2315;
  int32x4_t v2316;
  int32x4_t v2317;
  int32x4_t v2318;
  int32x4_t v2319;
  int8x16_t v2320;
  uint64_t v2321;
  int8x16_t v2322;
  int8x16_t v2323;
  int8x16_t v2324;
  uint8x8_t v2325;
  uint16x8_t v2326;
  uint32x4_t v2327;
  uint64x2_t v2328;
  uint64x2_t v2329;
  uint64x2_t v2330;
  uint32x4_t v2331;
  uint64x2_t v2332;
  uint64x2_t v2333;
  uint64x2_t v2334;
  uint64x2_t v2335;
  uint64x2_t v2336;
  int8x16_t v2337;
  uint8x8_t v2338;
  unsigned int v2339;
  uint64_t v2340;
  unint64_t v2341;
  int8x8_t v2342;
  int8x8_t v2343;
  int v2344;
  int v2345;
  int8x8_t v2346;
  unsigned int v2347;
  uint8x8_t *v2348;
  unint64_t v2349;
  void (*v2350)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2351;
  signed int v2352;
  int v2353;
  BOOL v2354;
  int v2355;
  uint8x8_t v2357;
  int v2358;
  int v2359;
  unsigned int v2360;
  uint64_t v2362;
  uint8x8_t v2363;
  uint8x8_t *v2364;
  signed int v2365;
  int32x4_t v2366;
  int32x4_t v2367;
  int32x4_t v2368;
  int32x4_t v2369;
  int32x4_t v2370;
  int8x16_t v2371;
  uint64_t v2372;
  int8x16_t v2373;
  int8x16_t v2374;
  int8x16_t v2375;
  uint8x8_t v2376;
  uint16x8_t v2377;
  uint32x4_t v2378;
  uint64x2_t v2379;
  uint64x2_t v2380;
  uint64x2_t v2381;
  uint32x4_t v2382;
  uint64x2_t v2383;
  uint64x2_t v2384;
  uint64x2_t v2385;
  uint64x2_t v2386;
  uint64x2_t v2387;
  int8x16_t v2388;
  uint8x8_t v2389;
  unsigned int v2390;
  uint64_t v2391;
  int8x8_t v2392;
  int v2393;
  int v2394;
  int8x8_t v2395;
  unsigned int v2396;
  uint8x8_t *v2397;
  unint64_t v2398;
  void (*v2399)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2400;
  signed int v2401;
  int v2402;
  BOOL v2403;
  int v2404;
  uint8x8_t v2406;
  int v2407;
  int v2408;
  unsigned int v2409;
  uint64_t v2411;
  uint8x8_t v2412;
  uint8x8_t *v2413;
  signed int v2414;
  int32x4_t v2415;
  int32x4_t v2416;
  int32x4_t v2417;
  int32x4_t v2418;
  int32x4_t v2419;
  int8x16_t v2420;
  uint64_t v2421;
  int8x16_t v2422;
  int8x16_t v2423;
  int8x16_t v2424;
  uint8x8_t v2425;
  uint16x8_t v2426;
  uint32x4_t v2427;
  uint64x2_t v2428;
  uint64x2_t v2429;
  uint64x2_t v2430;
  uint32x4_t v2431;
  uint64x2_t v2432;
  uint64x2_t v2433;
  uint64x2_t v2434;
  uint64x2_t v2435;
  uint64x2_t v2436;
  int8x16_t v2437;
  uint8x8_t v2438;
  unsigned int v2439;
  uint64_t v2440;
  int8x8_t v2441;
  int v2442;
  int v2443;
  int8x8_t v2444;
  unsigned int v2445;
  uint8x8_t *v2446;
  unint64_t v2447;
  void (*v2448)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2449;
  signed int v2450;
  int v2451;
  BOOL v2452;
  int v2453;
  uint8x8_t v2455;
  int v2456;
  int v2457;
  unsigned int v2458;
  uint64_t v2460;
  uint8x8_t v2461;
  uint8x8_t *v2462;
  signed int v2463;
  int32x4_t v2464;
  int32x4_t v2465;
  int32x4_t v2466;
  int32x4_t v2467;
  int32x4_t v2468;
  int8x16_t v2469;
  uint64_t v2470;
  int8x16_t v2471;
  int8x16_t v2472;
  int8x16_t v2473;
  uint8x8_t v2474;
  uint16x8_t v2475;
  uint32x4_t v2476;
  uint64x2_t v2477;
  uint64x2_t v2478;
  uint64x2_t v2479;
  uint32x4_t v2480;
  uint64x2_t v2481;
  uint64x2_t v2482;
  uint64x2_t v2483;
  uint64x2_t v2484;
  uint64x2_t v2485;
  int8x16_t v2486;
  uint8x8_t v2487;
  unsigned int v2488;
  uint64_t v2489;
  int8x8_t v2490;
  int v2491;
  int v2492;
  int8x8_t v2493;
  unsigned int v2494;
  uint8x8_t *v2495;
  unint64_t v2496;
  void (*v2497)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2498;
  signed int v2499;
  int v2500;
  BOOL v2501;
  int v2502;
  uint8x8_t v2504;
  int v2505;
  int v2506;
  unsigned int v2507;
  uint64_t v2509;
  uint8x8_t v2510;
  uint8x8_t *v2511;
  signed int v2512;
  int32x4_t v2513;
  int32x4_t v2514;
  int32x4_t v2515;
  int32x4_t v2516;
  int32x4_t v2517;
  int8x16_t v2518;
  uint64_t v2519;
  int8x16_t v2520;
  int8x16_t v2521;
  int8x16_t v2522;
  uint8x8_t v2523;
  uint16x8_t v2524;
  uint32x4_t v2525;
  uint64x2_t v2526;
  uint64x2_t v2527;
  uint64x2_t v2528;
  uint32x4_t v2529;
  uint64x2_t v2530;
  uint64x2_t v2531;
  uint64x2_t v2532;
  uint64x2_t v2533;
  uint64x2_t v2534;
  int8x16_t v2535;
  uint8x8_t v2536;
  unsigned int v2537;
  uint64_t v2538;
  int8x8_t v2539;
  int v2540;
  int v2541;
  int v2542;
  int8x8_t v2543;
  unsigned int v2544;
  int v2545;
  uint8x8_t *v2546;
  unint64_t v2547;
  void (*v2548)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2549;
  signed int v2550;
  int v2551;
  BOOL v2552;
  int v2553;
  uint8x8_t v2555;
  int v2556;
  int v2557;
  unsigned int v2558;
  uint64_t v2560;
  uint8x8_t v2561;
  uint8x8_t *v2562;
  signed int v2563;
  int32x4_t v2564;
  int32x4_t v2565;
  int32x4_t v2566;
  int32x4_t v2567;
  int32x4_t v2568;
  int8x16_t v2569;
  uint64_t v2570;
  int8x16_t v2571;
  int8x16_t v2572;
  int8x16_t v2573;
  uint8x8_t v2574;
  uint16x8_t v2575;
  uint32x4_t v2576;
  uint64x2_t v2577;
  uint64x2_t v2578;
  uint64x2_t v2579;
  uint32x4_t v2580;
  uint64x2_t v2581;
  uint64x2_t v2582;
  uint64x2_t v2583;
  uint64x2_t v2584;
  uint64x2_t v2585;
  int8x16_t v2586;
  uint8x8_t v2587;
  unsigned int v2588;
  uint64_t v2589;
  int8x8_t v2590;
  int v2591;
  int v2592;
  int v2593;
  int8x8_t v2594;
  unsigned int v2595;
  int v2596;
  uint8x8_t *v2597;
  unint64_t v2598;
  void (*v2599)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2600;
  signed int v2601;
  int v2602;
  BOOL v2603;
  int v2604;
  uint8x8_t v2606;
  int v2607;
  int v2608;
  unsigned int v2609;
  uint64_t v2611;
  uint8x8_t v2612;
  uint8x8_t *v2613;
  signed int v2614;
  int32x4_t v2615;
  int32x4_t v2616;
  int32x4_t v2617;
  int32x4_t v2618;
  int32x4_t v2619;
  int8x16_t v2620;
  uint64_t v2621;
  int8x16_t v2622;
  int8x16_t v2623;
  int8x16_t v2624;
  uint8x8_t v2625;
  uint16x8_t v2626;
  uint32x4_t v2627;
  uint64x2_t v2628;
  uint64x2_t v2629;
  uint64x2_t v2630;
  uint32x4_t v2631;
  uint64x2_t v2632;
  uint64x2_t v2633;
  uint64x2_t v2634;
  uint64x2_t v2635;
  uint64x2_t v2636;
  int8x16_t v2637;
  uint8x8_t v2638;
  unsigned int v2639;
  uint64_t v2640;
  int8x8_t v2641;
  int v2642;
  int v2643;
  int v2644;
  unsigned int v2645;
  int v2646;
  int v2647;
  uint8x8_t *v2648;
  unint64_t v2649;
  void (*v2650)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2651;
  int v2652;
  int v2653;
  signed int v2654;
  int v2655;
  BOOL v2656;
  int v2657;
  uint8x8_t v2659;
  int v2660;
  int v2661;
  unsigned int v2662;
  uint8x8_t v2663;
  uint8x8_t *v2664;
  signed int v2665;
  BOOL v2666;
  uint64_t v2667;
  int32x4_t v2668;
  int32x4_t v2669;
  int32x4_t v2670;
  int32x4_t v2671;
  int32x4_t v2672;
  int8x16_t v2673;
  uint64_t v2674;
  int8x16_t v2675;
  int8x16_t v2676;
  int8x16_t v2677;
  uint8x8_t v2678;
  uint16x8_t v2679;
  uint32x4_t v2680;
  uint64x2_t v2681;
  uint64x2_t v2682;
  uint64x2_t v2683;
  uint32x4_t v2684;
  uint64x2_t v2685;
  uint64x2_t v2686;
  uint64x2_t v2687;
  uint64x2_t v2688;
  uint64x2_t v2689;
  int8x16_t v2690;
  uint8x8_t v2691;
  unsigned int v2692;
  int8x8_t v2693;
  int v2694;
  int v2695;
  uint64_t v2696;
  int v2697;
  int v2698;
  uint8x8_t *v2699;
  int32x4_t v2700;
  int32x4_t v2701;
  int v2702;
  int v2703;
  unsigned int v2704;
  int8x8_t v2705;
  uint8x8_t *v2706;
  unint64_t v2707;
  void (*v2708)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2709;
  signed int v2710;
  int v2711;
  unsigned int v2712;
  BOOL v2713;
  int v2714;
  int v2716;
  uint8x8_t v2717;
  int v2718;
  int v2719;
  unsigned int v2720;
  uint64_t v2722;
  uint8x8_t v2723;
  uint8x8_t *v2724;
  int v2725;
  int32x4_t v2726;
  int32x4_t v2727;
  int32x4_t v2728;
  int32x4_t v2729;
  int32x4_t v2730;
  int8x16_t v2731;
  uint64_t v2732;
  int8x16_t v2733;
  int8x16_t v2734;
  int8x16_t v2735;
  uint8x8_t v2736;
  uint16x8_t v2737;
  uint32x4_t v2738;
  uint64x2_t v2739;
  uint64x2_t v2740;
  uint64x2_t v2741;
  uint32x4_t v2742;
  uint64x2_t v2743;
  uint64x2_t v2744;
  uint64x2_t v2745;
  uint64x2_t v2746;
  uint64x2_t v2747;
  int8x16_t v2748;
  uint8x8_t v2749;
  unsigned int v2750;
  uint64_t v2751;
  unint64_t v2752;
  int8x8_t v2753;
  int8x8_t v2754;
  int v2755;
  int v2756;
  int8x8_t v2757;
  unsigned int v2758;
  int v2759;
  int v2760;
  uint8x8_t *v2761;
  unint64_t v2762;
  void (*v2763)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2764;
  signed int v2765;
  int v2766;
  BOOL v2767;
  int v2768;
  int v2770;
  uint8x8_t *v2771;
  unint64_t v2772;
  void (*v2773)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2774;
  signed int v2775;
  int v2776;
  BOOL v2777;
  int v2778;
  uint8x8_t v2780;
  int v2781;
  int v2782;
  unsigned int v2783;
  uint64_t v2785;
  uint8x8_t v2786;
  uint8x8_t *v2787;
  signed int v2788;
  int32x4_t v2789;
  int32x4_t v2790;
  int32x4_t v2791;
  int32x4_t v2792;
  int32x4_t v2793;
  int8x16_t v2794;
  uint64_t v2795;
  int8x16_t v2796;
  int8x16_t v2797;
  int8x16_t v2798;
  uint8x8_t v2799;
  uint16x8_t v2800;
  uint32x4_t v2801;
  uint64x2_t v2802;
  uint64x2_t v2803;
  uint64x2_t v2804;
  uint32x4_t v2805;
  uint64x2_t v2806;
  uint64x2_t v2807;
  uint64x2_t v2808;
  uint64x2_t v2809;
  uint64x2_t v2810;
  int8x16_t v2811;
  uint8x8_t v2812;
  int v2813;
  int v2814;
  unsigned int v2815;
  uint64_t v2817;
  uint8x8_t v2818;
  uint8x8_t *v2819;
  signed int v2820;
  int32x4_t v2821;
  int32x4_t v2822;
  int32x4_t v2823;
  int32x4_t v2824;
  int32x4_t v2825;
  int8x16_t v2826;
  uint64_t v2827;
  int8x16_t v2828;
  int8x16_t v2829;
  int8x16_t v2830;
  uint8x8_t v2831;
  uint16x8_t v2832;
  uint32x4_t v2833;
  uint64x2_t v2834;
  uint64x2_t v2835;
  uint64x2_t v2836;
  uint32x4_t v2837;
  uint64x2_t v2838;
  uint64x2_t v2839;
  uint64x2_t v2840;
  uint64x2_t v2841;
  uint64x2_t v2842;
  int8x16_t v2843;
  uint8x8_t v2844;
  unsigned int v2845;
  uint64_t v2846;
  int8x8_t v2847;
  uint8x8_t v2848;
  unsigned int v2849;
  int v2850;
  int v2851;
  int v2852;
  int v2853;
  unsigned int v2854;
  int8x8_t v2855;
  uint8x8_t *v2856;
  unint64_t v2857;
  void (*v2858)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2859;
  signed int v2860;
  int v2861;
  unsigned int v2862;
  BOOL v2863;
  int v2864;
  uint8x8_t v2866;
  int v2867;
  int v2868;
  unsigned int v2869;
  uint64_t v2871;
  uint8x8_t v2872;
  uint8x8_t *v2873;
  int v2874;
  int32x4_t v2875;
  int32x4_t v2876;
  int32x4_t v2877;
  int32x4_t v2878;
  int32x4_t v2879;
  int8x16_t v2880;
  uint64_t v2881;
  int8x16_t v2882;
  int8x16_t v2883;
  int8x16_t v2884;
  uint8x8_t v2885;
  uint16x8_t v2886;
  uint32x4_t v2887;
  uint64x2_t v2888;
  uint64x2_t v2889;
  uint64x2_t v2890;
  uint32x4_t v2891;
  uint64x2_t v2892;
  uint64x2_t v2893;
  uint64x2_t v2894;
  uint64x2_t v2895;
  uint64x2_t v2896;
  int8x16_t v2897;
  uint8x8_t v2898;
  unsigned int v2899;
  uint64_t v2900;
  int8x8_t v2901;
  int v2902;
  int v2903;
  int v2904;
  unsigned int v2905;
  int8x8_t v2906;
  uint8x8_t *v2907;
  unint64_t v2908;
  void (*v2909)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2910;
  int v2911;
  unsigned int v2912;
  BOOL v2913;
  unsigned int v2914;
  int v2915;
  uint8x8_t v2916;
  int v2917;
  int v2918;
  unsigned int v2919;
  uint64_t v2921;
  uint8x8_t v2922;
  uint8x8_t *v2923;
  int v2924;
  int32x4_t v2925;
  int32x4_t v2926;
  int32x4_t v2927;
  int32x4_t v2928;
  int32x4_t v2929;
  int8x16_t v2930;
  uint64_t v2931;
  int8x16_t v2932;
  int8x16_t v2933;
  int8x16_t v2934;
  uint8x8_t v2935;
  uint16x8_t v2936;
  uint32x4_t v2937;
  uint64x2_t v2938;
  uint64x2_t v2939;
  uint64x2_t v2940;
  uint32x4_t v2941;
  uint64x2_t v2942;
  uint64x2_t v2943;
  uint64x2_t v2944;
  uint64x2_t v2945;
  uint64x2_t v2946;
  int8x16_t v2947;
  int v2948;
  int v2949;
  unsigned int v2950;
  int8x8_t v2951;
  uint64_t v2952;
  unsigned int v2953;
  int v2954;
  int v2955;
  uint8x8_t *v2956;
  unint64_t v2957;
  void (*v2958)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v2959;
  signed int v2960;
  int v2961;
  unsigned int v2962;
  BOOL v2963;
  int v2964;
  uint8x8_t v2966;
  int v2967;
  int v2968;
  unsigned int v2969;
  uint64_t v2971;
  uint8x8_t v2972;
  uint8x8_t *v2973;
  int v2974;
  int32x4_t v2975;
  int32x4_t v2976;
  int32x4_t v2977;
  int32x4_t v2978;
  int32x4_t v2979;
  int8x16_t v2980;
  uint64_t v2981;
  int8x16_t v2982;
  int8x16_t v2983;
  int8x16_t v2984;
  uint8x8_t v2985;
  uint16x8_t v2986;
  uint32x4_t v2987;
  uint64x2_t v2988;
  uint64x2_t v2989;
  uint64x2_t v2990;
  uint32x4_t v2991;
  uint64x2_t v2992;
  uint64x2_t v2993;
  uint64x2_t v2994;
  uint64x2_t v2995;
  uint64x2_t v2996;
  int8x16_t v2997;
  uint8x8_t v2998;
  unsigned int v2999;
  int8x8_t v3000;
  unint64_t v3001;
  unsigned int v3002;
  _BYTE *v3003;
  uint64_t v3004;
  uint64_t v3005;
  int v3006;
  char *v3007;
  int v3008;
  unsigned int v3009;
  int8x8_t v3010;
  uint64_t v3011;
  unsigned int v3012;
  int v3013;
  int v3014;
  uint8x8_t *v3015;
  unint64_t v3016;
  void (*v3017)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v3018;
  signed int v3019;
  int v3020;
  unsigned int v3021;
  BOOL v3022;
  int v3023;
  uint8x8_t v3025;
  int v3026;
  int v3027;
  unsigned int v3028;
  uint64_t v3030;
  uint8x8_t v3031;
  uint8x8_t *v3032;
  int v3033;
  int32x4_t v3034;
  int32x4_t v3035;
  int32x4_t v3036;
  int32x4_t v3037;
  int32x4_t v3038;
  int8x16_t v3039;
  uint64_t v3040;
  int8x16_t v3041;
  int8x16_t v3042;
  int8x16_t v3043;
  uint8x8_t v3044;
  uint16x8_t v3045;
  uint32x4_t v3046;
  uint64x2_t v3047;
  uint64x2_t v3048;
  uint64x2_t v3049;
  uint32x4_t v3050;
  uint64x2_t v3051;
  uint64x2_t v3052;
  uint64x2_t v3053;
  uint64x2_t v3054;
  uint64x2_t v3055;
  int8x16_t v3056;
  uint8x8_t v3057;
  unsigned int v3058;
  int8x8_t v3059;
  int v3060;
  uint64_t v3061;
  unsigned int v3062;
  int v3063;
  int v3064;
  uint8x8_t *v3065;
  unint64_t v3066;
  void (*v3067)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v3068;
  signed int v3069;
  int v3070;
  unsigned int v3071;
  BOOL v3072;
  int v3073;
  uint8x8_t v3075;
  int v3076;
  int v3077;
  unsigned int v3078;
  uint64_t v3080;
  uint8x8_t v3081;
  uint8x8_t *v3082;
  int v3083;
  int32x4_t v3084;
  int32x4_t v3085;
  int32x4_t v3086;
  int32x4_t v3087;
  int32x4_t v3088;
  int8x16_t v3089;
  uint64_t v3090;
  int8x16_t v3091;
  int8x16_t v3092;
  int8x16_t v3093;
  uint8x8_t v3094;
  uint16x8_t v3095;
  uint32x4_t v3096;
  uint64x2_t v3097;
  uint64x2_t v3098;
  uint64x2_t v3099;
  uint32x4_t v3100;
  uint64x2_t v3101;
  uint64x2_t v3102;
  uint64x2_t v3103;
  uint64x2_t v3104;
  uint64x2_t v3105;
  int8x16_t v3106;
  uint8x8_t v3107;
  unsigned int v3108;
  int8x8_t v3109;
  uint8x8_t v3110;
  unsigned int v3111;
  uint64_t v3112;
  unint64_t v3113;
  int8x8_t v3114;
  char v3115;
  int v3116;
  int8x8_t v3117;
  unsigned int v3118;
  int v3119;
  int v3120;
  int v3121;
  unsigned int v3122;
  int8x8_t v3123;
  uint64_t v3124;
  unsigned int v3125;
  int v3126;
  int v3127;
  uint8x8_t *v3128;
  unint64_t v3129;
  void (*v3130)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v3131;
  signed int v3132;
  int v3133;
  unsigned int v3134;
  BOOL v3135;
  int v3136;
  uint8x8_t v3138;
  int v3139;
  int v3140;
  unsigned int v3141;
  uint64_t v3143;
  uint8x8_t v3144;
  uint8x8_t *v3145;
  int v3146;
  int32x4_t v3147;
  int32x4_t v3148;
  int32x4_t v3149;
  int32x4_t v3150;
  int32x4_t v3151;
  int8x16_t v3152;
  uint64_t v3153;
  int8x16_t v3154;
  int8x16_t v3155;
  int8x16_t v3156;
  uint8x8_t v3157;
  uint16x8_t v3158;
  uint32x4_t v3159;
  uint64x2_t v3160;
  uint64x2_t v3161;
  uint64x2_t v3162;
  uint32x4_t v3163;
  uint64x2_t v3164;
  uint64x2_t v3165;
  uint64x2_t v3166;
  uint64x2_t v3167;
  uint64x2_t v3168;
  int8x16_t v3169;
  uint8x8_t v3170;
  unsigned int v3171;
  int8x8_t v3172;
  uint64_t v3173;
  int v3174;
  uint8x8_t *v3175;
  unint64_t v3176;
  void (*v3177)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v3178;
  int v3179;
  unsigned int v3180;
  BOOL v3181;
  unsigned int v3182;
  int v3183;
  uint8x8_t v3184;
  int v3185;
  int v3186;
  unsigned int v3187;
  uint64_t v3189;
  uint8x8_t v3190;
  uint8x8_t *v3191;
  int v3192;
  int32x4_t v3193;
  int32x4_t v3194;
  int32x4_t v3195;
  int32x4_t v3196;
  int32x4_t v3197;
  int8x16_t v3198;
  uint64_t v3199;
  int8x16_t v3200;
  int8x16_t v3201;
  int8x16_t v3202;
  uint8x8_t v3203;
  uint16x8_t v3204;
  uint32x4_t v3205;
  uint64x2_t v3206;
  uint64x2_t v3207;
  uint64x2_t v3208;
  uint32x4_t v3209;
  uint64x2_t v3210;
  uint64x2_t v3211;
  uint64x2_t v3212;
  uint64x2_t v3213;
  uint64x2_t v3214;
  int8x16_t v3215;
  uint64_t v3216;
  uint64_t v3217;
  int v3218;
  int v3219;
  unsigned int v3220;
  int8x8_t v3221;
  uint64_t v3222;
  unsigned int v3223;
  int v3224;
  int v3225;
  uint8x8_t *v3226;
  unint64_t v3227;
  void (*v3228)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v3229;
  signed int v3230;
  int v3231;
  unsigned int v3232;
  BOOL v3233;
  int v3234;
  uint8x8_t v3236;
  int v3237;
  int v3238;
  unsigned int v3239;
  uint64_t v3241;
  uint8x8_t v3242;
  uint8x8_t *v3243;
  int v3244;
  int32x4_t v3245;
  int32x4_t v3246;
  int32x4_t v3247;
  int32x4_t v3248;
  int32x4_t v3249;
  int8x16_t v3250;
  uint64_t v3251;
  int8x16_t v3252;
  int8x16_t v3253;
  int8x16_t v3254;
  uint8x8_t v3255;
  uint16x8_t v3256;
  uint32x4_t v3257;
  uint64x2_t v3258;
  uint64x2_t v3259;
  uint64x2_t v3260;
  uint32x4_t v3261;
  uint64x2_t v3262;
  uint64x2_t v3263;
  uint64x2_t v3264;
  uint64x2_t v3265;
  uint64x2_t v3266;
  int8x16_t v3267;
  uint8x8_t v3268;
  unsigned int v3269;
  int8x8_t v3270;
  uint64_t v3271;
  unsigned int v3272;
  int v3273;
  int v3274;
  uint8x8_t *v3275;
  unint64_t v3276;
  void (*v3277)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v3278;
  signed int v3279;
  int v3280;
  unsigned int v3281;
  BOOL v3282;
  int v3283;
  uint8x8_t v3285;
  int v3286;
  int v3287;
  unsigned int v3288;
  uint64_t v3290;
  uint8x8_t v3291;
  uint8x8_t *v3292;
  int v3293;
  int32x4_t v3294;
  int32x4_t v3295;
  int32x4_t v3296;
  int32x4_t v3297;
  int32x4_t v3298;
  int8x16_t v3299;
  uint64_t v3300;
  int8x16_t v3301;
  int8x16_t v3302;
  int8x16_t v3303;
  uint8x8_t v3304;
  uint16x8_t v3305;
  uint32x4_t v3306;
  uint64x2_t v3307;
  uint64x2_t v3308;
  uint64x2_t v3309;
  uint32x4_t v3310;
  uint64x2_t v3311;
  uint64x2_t v3312;
  uint64x2_t v3313;
  uint64x2_t v3314;
  uint64x2_t v3315;
  int8x16_t v3316;
  uint8x8_t v3317;
  unsigned int v3318;
  int8x8_t v3319;
  uint8x8_t v3320;
  unsigned int v3321;
  uint64_t v3322;
  unint64_t v3323;
  int8x8_t v3324;
  int8x8_t v3325;
  int v3326;
  int v3327;
  int8x8_t v3328;
  unsigned int v3329;
  uint64_t v3330;
  int v3331;
  uint64_t v3332;
  uint8x8_t *v3333;
  unint64_t v3334;
  void (*v3335)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v3336;
  signed int v3337;
  int v3338;
  BOOL v3339;
  int v3340;
  uint8x8_t v3342;
  int v3343;
  int v3344;
  unsigned int v3345;
  uint64_t v3347;
  uint8x8_t v3348;
  uint8x8_t *v3349;
  signed int v3350;
  int32x4_t v3351;
  int32x4_t v3352;
  int32x4_t v3353;
  int32x4_t v3354;
  int32x4_t v3355;
  int8x16_t v3356;
  uint64_t v3357;
  int8x16_t v3358;
  int8x16_t v3359;
  int8x16_t v3360;
  uint8x8_t v3361;
  uint16x8_t v3362;
  uint32x4_t v3363;
  uint64x2_t v3364;
  uint64x2_t v3365;
  uint64x2_t v3366;
  uint32x4_t v3367;
  uint64x2_t v3368;
  uint64x2_t v3369;
  uint64x2_t v3370;
  uint64x2_t v3371;
  uint64x2_t v3372;
  int8x16_t v3373;
  uint8x8_t v3374;
  unsigned int v3375;
  uint64_t v3376;
  int8x8_t v3377;
  char v3378;
  int v3379;
  uint64_t v3380;
  uint64_t v3381;
  int v3382;
  int v3383;
  unint64_t *v3384;
  uint64_t *v3385;
  int v3386;
  uint64_t v3387;
  unsigned int v3388;
  int v3389;
  int v3390;
  BOOL v3391;
  int v3392;
  int v3393;
  int v3394;
  uint64_t v3395;
  unsigned int v3396;
  int v3397;
  int v3398;
  BOOL v3399;
  int v3400;
  int v3401;
  int v3402;
  int v3403;
  int v3404;
  unsigned int v3405;
  int8x8_t v3406;
  uint8x8_t *v3407;
  uint64_t v3408;
  void (*v3409)(_QWORD);
  uint64_t v3410;
  unint64_t *v3411;
  int v3412;
  unsigned int v3413;
  BOOL v3414;
  unsigned int v3415;
  int v3416;
  uint8x8_t v3417;
  int v3418;
  int v3419;
  unsigned int v3420;
  uint8x8_t v3421;
  uint8x8_t *v3422;
  int v3423;
  uint8x8_t v3424;
  unsigned int v3425;
  uint64_t v3426;
  unint64_t v3427;
  int8x8_t v3428;
  int8x8_t v3429;
  int v3430;
  int v3431;
  int8x8_t v3432;
  unsigned int v3433;
  int v3434;
  int v3435;
  int v3437;
  int v3438;
  int v3439;
  uint8x8_t *v3440;
  uint64_t v3441;
  void (*v3442)(_QWORD);
  int v3443;
  int v3444;
  int v3445;
  unsigned int v3446;
  BOOL v3447;
  unsigned int v3448;
  int v3449;
  uint8x8_t v3450;
  int v3451;
  int v3452;
  unsigned int v3453;
  uint64_t v3455;
  uint8x8_t v3456;
  uint8x8_t *v3457;
  int v3458;
  int32x4_t v3459;
  int32x4_t v3460;
  int32x4_t v3461;
  int32x4_t v3462;
  int32x4_t v3463;
  int8x16_t v3464;
  uint64_t v3465;
  int8x16_t v3466;
  int8x16_t v3467;
  int8x16_t v3468;
  uint8x8_t v3469;
  uint16x8_t v3470;
  uint32x4_t v3471;
  uint64x2_t v3472;
  uint64x2_t v3473;
  uint64x2_t v3474;
  uint32x4_t v3475;
  uint64x2_t v3476;
  uint64x2_t v3477;
  uint64x2_t v3478;
  uint64x2_t v3479;
  uint64x2_t v3480;
  int8x16_t v3481;
  uint8x8_t v3482;
  unsigned int v3483;
  uint64_t v3484;
  unint64_t v3485;
  int8x8_t v3486;
  int8x8_t v3487;
  int v3488;
  int v3489;
  int8x8_t v3490;
  unsigned int v3491;
  int v3492;
  int v3493;
  int v3494;
  int v3495;
  uint8x8_t *v3496;
  uint64_t v3497;
  void (*v3498)(_QWORD);
  int v3499;
  int v3500;
  unsigned int v3501;
  BOOL v3502;
  unsigned int v3503;
  int v3504;
  uint8x8_t v3505;
  int v3506;
  int v3507;
  unsigned int v3508;
  uint64_t v3510;
  uint8x8_t v3511;
  uint8x8_t *v3512;
  int v3513;
  int32x4_t v3514;
  int32x4_t v3515;
  int32x4_t v3516;
  int32x4_t v3517;
  int32x4_t v3518;
  int8x16_t v3519;
  uint64_t v3520;
  int8x16_t v3521;
  int8x16_t v3522;
  int8x16_t v3523;
  uint8x8_t v3524;
  uint16x8_t v3525;
  uint32x4_t v3526;
  uint64x2_t v3527;
  uint64x2_t v3528;
  uint64x2_t v3529;
  uint32x4_t v3530;
  uint64x2_t v3531;
  uint64x2_t v3532;
  uint64x2_t v3533;
  uint64x2_t v3534;
  uint64x2_t v3535;
  int8x16_t v3536;
  uint64_t v3537;
  int32x4_t v3538;
  int32x4_t v3539;
  int32x4_t v3540;
  int32x4_t v3541;
  int32x4_t v3542;
  int8x16_t v3543;
  uint64_t v3544;
  int8x16_t v3545;
  int8x16_t v3546;
  int8x16_t v3547;
  uint8x8_t v3548;
  uint16x8_t v3549;
  uint32x4_t v3550;
  uint64x2_t v3551;
  uint64x2_t v3552;
  uint64x2_t v3553;
  uint32x4_t v3554;
  uint64x2_t v3555;
  uint64x2_t v3556;
  uint64x2_t v3557;
  uint64x2_t v3558;
  uint64x2_t v3559;
  int8x16_t v3560;
  uint8x8_t v3561;
  unsigned int v3562;
  uint64_t v3563;
  unint64_t v3564;
  int8x8_t v3565;
  int8x8_t v3566;
  int v3567;
  int v3568;
  int8x8_t v3569;
  unsigned int v3570;
  int v3571;
  int v3572;
  __int16 *v3573;
  int v3574;
  int v3575;
  int v3576;
  int v3577;
  uint64_t v3578;
  int v3579;
  uint8x8_t *v3580;
  uint64_t v3581;
  void (*v3582)(_QWORD);
  __int16 *v3583;
  int v3584;
  unsigned int v3585;
  BOOL v3586;
  unsigned int v3587;
  int v3588;
  uint8x8_t v3589;
  int v3590;
  int v3591;
  unsigned int v3592;
  uint8x8_t v3593;
  uint8x8_t *v3594;
  int v3595;
  uint8x8_t v3596;
  unsigned int v3597;
  uint64_t v3598;
  unint64_t v3599;
  int8x8_t v3600;
  int8x8_t v3601;
  int v3602;
  int v3603;
  int8x8_t v3604;
  unsigned int v3605;
  __int16 v3606;
  __int16 v3607;
  __int16 v3608;
  __int16 v3609;
  __int16 v3610;
  BOOL v3614;
  uint8x8_t *v3615;
  unint64_t v3616;
  void (*v3617)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v3618;
  uint64_t v3619;
  signed int v3620;
  int v3621;
  BOOL v3622;
  int v3623;
  uint8x8_t v3625;
  int v3626;
  int v3627;
  unsigned int v3628;
  uint64_t v3630;
  uint8x8_t v3631;
  uint8x8_t *v3632;
  signed int v3633;
  int32x4_t v3634;
  int32x4_t v3635;
  int32x4_t v3636;
  int32x4_t v3637;
  int32x4_t v3638;
  int8x16_t v3639;
  uint64_t v3640;
  int8x16_t v3641;
  int8x16_t v3642;
  int8x16_t v3643;
  uint8x8_t v3644;
  uint16x8_t v3645;
  uint32x4_t v3646;
  uint64x2_t v3647;
  uint64x2_t v3648;
  uint64x2_t v3649;
  uint32x4_t v3650;
  uint64x2_t v3651;
  uint64x2_t v3652;
  uint64x2_t v3653;
  uint64x2_t v3654;
  uint64x2_t v3655;
  int8x16_t v3656;
  uint8x8_t v3657;
  unsigned int v3658;
  uint64_t v3659;
  unint64_t v3660;
  int8x8_t v3661;
  int8x8_t v3662;
  int v3663;
  int v3664;
  int8x8_t v3665;
  unsigned int v3666;
  uint64_t v3667;
  uint64_t v3668;
  uint8x8_t *v3669;
  unint64_t v3670;
  void (*v3671)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v3672;
  uint64_t v3673;
  int v3674;
  unsigned int v3675;
  BOOL v3676;
  unsigned int v3677;
  int v3678;
  uint8x8_t v3679;
  int v3680;
  int v3681;
  unsigned int v3682;
  uint64_t v3684;
  uint8x8_t v3685;
  uint8x8_t *v3686;
  int v3687;
  int32x4_t v3688;
  int32x4_t v3689;
  int32x4_t v3690;
  int32x4_t v3691;
  int32x4_t v3692;
  int8x16_t v3693;
  uint64_t v3694;
  int8x16_t v3695;
  int8x16_t v3696;
  int8x16_t v3697;
  uint8x8_t v3698;
  uint16x8_t v3699;
  uint32x4_t v3700;
  uint64x2_t v3701;
  uint64x2_t v3702;
  uint64x2_t v3703;
  uint32x4_t v3704;
  uint64x2_t v3705;
  uint64x2_t v3706;
  uint64x2_t v3707;
  uint64x2_t v3708;
  uint64x2_t v3709;
  int8x16_t v3710;
  uint64_t v3711;
  int32x4_t v3712;
  int32x4_t v3713;
  int32x4_t v3714;
  int32x4_t v3715;
  int32x4_t v3716;
  int8x16_t v3717;
  uint64_t v3718;
  int8x16_t v3719;
  int8x16_t v3720;
  int8x16_t v3721;
  uint8x8_t v3722;
  uint16x8_t v3723;
  uint32x4_t v3724;
  uint64x2_t v3725;
  uint64x2_t v3726;
  uint64x2_t v3727;
  uint32x4_t v3728;
  uint64x2_t v3729;
  uint64x2_t v3730;
  uint64x2_t v3731;
  uint64x2_t v3732;
  uint64x2_t v3733;
  int8x16_t v3734;
  uint8x8_t v3735;
  unsigned int v3736;
  uint64_t v3737;
  unint64_t v3738;
  int8x8_t v3739;
  int8x8_t v3740;
  int v3741;
  int v3742;
  int8x8_t v3743;
  unsigned int v3744;
  uint8x8_t *v3745;
  unint64_t v3746;
  void (*v3747)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v3748;
  uint64_t v3749;
  int v3750;
  unsigned int v3751;
  BOOL v3752;
  unsigned int v3753;
  int v3754;
  uint8x8_t v3755;
  int v3756;
  int v3757;
  unsigned int v3758;
  uint64_t v3760;
  uint8x8_t v3761;
  uint8x8_t *v3762;
  int v3763;
  int32x4_t v3764;
  int32x4_t v3765;
  int32x4_t v3766;
  int32x4_t v3767;
  int32x4_t v3768;
  int8x16_t v3769;
  uint64_t v3770;
  int8x16_t v3771;
  int8x16_t v3772;
  int8x16_t v3773;
  uint8x8_t v3774;
  uint16x8_t v3775;
  uint32x4_t v3776;
  uint64x2_t v3777;
  uint64x2_t v3778;
  uint64x2_t v3779;
  uint32x4_t v3780;
  uint64x2_t v3781;
  uint64x2_t v3782;
  uint64x2_t v3783;
  uint64x2_t v3784;
  uint64x2_t v3785;
  int8x16_t v3786;
  uint8x8_t v3787;
  unsigned int v3788;
  uint64_t v3789;
  int8x8_t v3790;
  int v3791;
  uint64_t v3792;
  uint64_t v3793;
  unsigned int v3794;
  unsigned int *v3795;
  uint64_t v3796;
  unsigned int *v3797;
  unsigned int v3798;
  unsigned __int8 *v3799;
  int v3800;
  int v3801;
  unsigned int v3802;
  int8x8_t v3803;
  uint8x8_t *v3804;
  unint64_t v3805;
  void (*v3806)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v3807;
  uint64_t v3808;
  unsigned int v3809;
  int v3810;
  unsigned int v3811;
  BOOL v3812;
  unsigned int v3813;
  int v3814;
  uint8x8_t v3815;
  int v3816;
  int v3817;
  unsigned int v3818;
  uint8x8_t v3819;
  uint8x8_t *v3820;
  int v3821;
  uint8x8_t v3822;
  unsigned int v3823;
  uint64_t v3824;
  unint64_t v3825;
  int8x8_t v3826;
  int8x8_t v3827;
  int v3828;
  int v3829;
  int8x8_t v3830;
  unsigned int v3831;
  unsigned int v3832;
  int v3833;
  uint8x8_t *v3834;
  unint64_t v3835;
  void (*v3836)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v3837;
  signed int v3838;
  int v3839;
  BOOL v3840;
  int v3841;
  uint8x8_t v3843;
  int v3844;
  int v3845;
  unsigned int v3846;
  uint64_t v3848;
  uint8x8_t v3849;
  uint8x8_t *v3850;
  signed int v3851;
  int32x4_t v3852;
  int32x4_t v3853;
  int32x4_t v3854;
  int32x4_t v3855;
  int32x4_t v3856;
  int8x16_t v3857;
  uint64_t v3858;
  int8x16_t v3859;
  int8x16_t v3860;
  int8x16_t v3861;
  uint8x8_t v3862;
  uint16x8_t v3863;
  uint32x4_t v3864;
  uint64x2_t v3865;
  uint64x2_t v3866;
  uint64x2_t v3867;
  uint32x4_t v3868;
  uint64x2_t v3869;
  uint64x2_t v3870;
  uint64x2_t v3871;
  uint64x2_t v3872;
  uint64x2_t v3873;
  int8x16_t v3874;
  uint8x8_t v3875;
  unsigned int v3876;
  uint64_t v3877;
  unint64_t v3878;
  int8x8_t v3879;
  int8x8_t v3880;
  int v3881;
  int v3882;
  int8x8_t v3883;
  unsigned int v3884;
  BOOL v3888;
  uint64_t v3889;
  unsigned __int8 *v3890;
  int v3891;
  unsigned int v3892;
  int v3893;
  uint64_t v3894;
  uint8x8_t *v3895;
  unint64_t v3896;
  void (*v3897)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v3898;
  signed int v3899;
  int v3900;
  BOOL v3901;
  int v3902;
  uint64_t v3904;
  int32x4_t v3905;
  int32x4_t v3906;
  int32x4_t v3907;
  int32x4_t v3908;
  int32x4_t v3909;
  int8x16_t v3910;
  uint64_t v3911;
  int8x16_t v3912;
  int8x16_t v3913;
  int8x16_t v3914;
  uint8x8_t v3915;
  uint16x8_t v3916;
  uint32x4_t v3917;
  uint64x2_t v3918;
  uint64x2_t v3919;
  uint64x2_t v3920;
  uint32x4_t v3921;
  uint64x2_t v3922;
  uint64x2_t v3923;
  uint64x2_t v3924;
  uint64x2_t v3925;
  uint64x2_t v3926;
  int8x16_t v3927;
  uint8x8_t v3928;
  int v3929;
  int v3930;
  unsigned int v3931;
  uint8x8_t v3932;
  uint8x8_t *v3933;
  signed int v3934;
  BOOL v3935;
  uint64_t v3936;
  int32x4_t v3937;
  int32x4_t v3938;
  int32x4_t v3939;
  int32x4_t v3940;
  int32x4_t v3941;
  int8x16_t v3942;
  uint64_t v3943;
  int8x16_t v3944;
  int8x16_t v3945;
  int8x16_t v3946;
  uint8x8_t v3947;
  uint16x8_t v3948;
  uint32x4_t v3949;
  uint64x2_t v3950;
  uint64x2_t v3951;
  uint64x2_t v3952;
  uint32x4_t v3953;
  uint64x2_t v3954;
  uint64x2_t v3955;
  uint64x2_t v3956;
  uint64x2_t v3957;
  uint64x2_t v3958;
  int8x16_t v3959;
  uint8x8_t v3960;
  unsigned int v3961;
  uint64_t v3962;
  unint64_t v3963;
  int8x8_t v3964;
  int8x8_t v3965;
  int v3966;
  uint64_t v3967;
  __int16 mvcomponent;
  uint8x8_t *v3969;
  int32x4_t v3970;
  int32x4_t v3971;
  uint64_t v3972;
  char v3973;
  int8x8_t v3974;
  int v3975;
  int v3976;
  int8x8_t v3977;
  uint8x8_t *v3978;
  unint64_t v3979;
  void (*v3980)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v3981;
  signed int v3982;
  int v3983;
  unsigned int v3984;
  BOOL v3985;
  int v3986;
  uint8x8_t v3988;
  int v3989;
  int v3990;
  unsigned int v3991;
  uint64_t v3993;
  uint8x8_t v3994;
  uint8x8_t *v3995;
  int v3996;
  int32x4_t v3997;
  int32x4_t v3998;
  int32x4_t v3999;
  int32x4_t v4000;
  int32x4_t v4001;
  int8x16_t v4002;
  uint64_t v4003;
  int8x16_t v4004;
  int8x16_t v4005;
  int8x16_t v4006;
  uint8x8_t v4007;
  uint16x8_t v4008;
  uint32x4_t v4009;
  uint64x2_t v4010;
  uint64x2_t v4011;
  uint64x2_t v4012;
  uint32x4_t v4013;
  uint64x2_t v4014;
  uint64x2_t v4015;
  uint64x2_t v4016;
  uint64x2_t v4017;
  uint64x2_t v4018;
  int8x16_t v4019;
  uint8x8_t v4020;
  unsigned int v4021;
  uint64_t v4022;
  int8x8_t v4023;
  int v4024;
  int v4025;
  int8x8_t v4026;
  unsigned int v4027;
  uint8x8_t *v4028;
  unint64_t v4029;
  void (*v4030)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v4031;
  signed int v4032;
  int v4033;
  BOOL v4034;
  int v4035;
  uint64_t v4037;
  int8x8_t v4038;
  int v4039;
  int v4040;
  int8x8_t v4041;
  unsigned int v4042;
  uint8x8_t *v4043;
  unint64_t v4044;
  void (*v4045)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v4046;
  signed int v4047;
  int v4048;
  BOOL v4049;
  int v4050;
  uint8x8_t v4052;
  int v4053;
  int v4054;
  unsigned int v4055;
  uint64_t v4057;
  uint8x8_t v4058;
  uint8x8_t *v4059;
  signed int v4060;
  int32x4_t v4061;
  int32x4_t v4062;
  int32x4_t v4063;
  int32x4_t v4064;
  int32x4_t v4065;
  int8x16_t v4066;
  uint64_t v4067;
  int8x16_t v4068;
  int8x16_t v4069;
  int8x16_t v4070;
  uint8x8_t v4071;
  uint16x8_t v4072;
  uint32x4_t v4073;
  uint64x2_t v4074;
  uint64x2_t v4075;
  uint64x2_t v4076;
  uint32x4_t v4077;
  uint64x2_t v4078;
  uint64x2_t v4079;
  uint64x2_t v4080;
  uint64x2_t v4081;
  uint64x2_t v4082;
  int8x16_t v4083;
  uint8x8_t v4084;
  int v4085;
  int v4086;
  unsigned int v4087;
  uint8x8_t v4088;
  uint8x8_t *v4089;
  signed int v4090;
  uint8x8_t v4091;
  unsigned int v4092;
  uint64_t v4093;
  int8x8_t v4094;
  int v4095;
  int v4096;
  int8x8_t v4097;
  unsigned int v4098;
  uint8x8_t *v4099;
  unint64_t v4100;
  void (*v4101)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v4102;
  signed int v4103;
  int v4104;
  BOOL v4105;
  int v4106;
  uint8x8_t v4108;
  int v4109;
  int v4110;
  unsigned int v4111;
  uint64_t v4113;
  uint8x8_t v4114;
  uint8x8_t *v4115;
  signed int v4116;
  int32x4_t v4117;
  int32x4_t v4118;
  int32x4_t v4119;
  int32x4_t v4120;
  int32x4_t v4121;
  int8x16_t v4122;
  uint64_t v4123;
  int8x16_t v4124;
  int8x16_t v4125;
  int8x16_t v4126;
  uint8x8_t v4127;
  uint16x8_t v4128;
  uint32x4_t v4129;
  uint64x2_t v4130;
  uint64x2_t v4131;
  uint64x2_t v4132;
  uint32x4_t v4133;
  uint64x2_t v4134;
  uint64x2_t v4135;
  uint64x2_t v4136;
  uint64x2_t v4137;
  uint64x2_t v4138;
  int8x16_t v4139;
  uint8x8_t v4140;
  unsigned int v4141;
  uint64_t v4142;
  int8x8_t v4143;
  int v4144;
  int v4145;
  int8x8_t v4146;
  unsigned int v4147;
  uint8x8_t *v4148;
  unint64_t v4149;
  void (*v4150)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v4151;
  signed int v4152;
  int v4153;
  BOOL v4154;
  int v4155;
  uint8x8_t v4157;
  int v4158;
  int v4159;
  unsigned int v4160;
  uint64_t v4162;
  uint8x8_t v4163;
  uint8x8_t *v4164;
  signed int v4165;
  int32x4_t v4166;
  int32x4_t v4167;
  int32x4_t v4168;
  int32x4_t v4169;
  int32x4_t v4170;
  int8x16_t v4171;
  uint64_t v4172;
  int8x16_t v4173;
  int8x16_t v4174;
  int8x16_t v4175;
  uint8x8_t v4176;
  uint16x8_t v4177;
  uint32x4_t v4178;
  uint64x2_t v4179;
  uint64x2_t v4180;
  uint64x2_t v4181;
  uint32x4_t v4182;
  uint64x2_t v4183;
  uint64x2_t v4184;
  uint64x2_t v4185;
  uint64x2_t v4186;
  uint64x2_t v4187;
  int8x16_t v4188;
  uint8x8_t v4189;
  unsigned int v4190;
  uint64_t v4191;
  int8x8_t v4192;
  char v4193;
  int v4194;
  int v4195;
  int8x8_t v4196;
  unsigned int v4197;
  char v4198;
  uint8x8_t *v4199;
  unint64_t v4200;
  void (*v4201)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v4202;
  signed int v4203;
  int v4204;
  BOOL v4205;
  int v4206;
  uint8x8_t v4208;
  int v4209;
  int v4210;
  unsigned int v4211;
  uint64_t v4213;
  uint8x8_t v4214;
  uint8x8_t *v4215;
  signed int v4216;
  int32x4_t v4217;
  int32x4_t v4218;
  int32x4_t v4219;
  int32x4_t v4220;
  int32x4_t v4221;
  int8x16_t v4222;
  uint64_t v4223;
  int8x16_t v4224;
  int8x16_t v4225;
  int8x16_t v4226;
  uint8x8_t v4227;
  uint16x8_t v4228;
  uint32x4_t v4229;
  uint64x2_t v4230;
  uint64x2_t v4231;
  uint64x2_t v4232;
  uint32x4_t v4233;
  uint64x2_t v4234;
  uint64x2_t v4235;
  uint64x2_t v4236;
  uint64x2_t v4237;
  uint64x2_t v4238;
  int8x16_t v4239;
  uint8x8_t v4240;
  unsigned int v4241;
  uint64_t v4242;
  int8x8_t v4243;
  char v4244;
  int v4245;
  int v4246;
  int8x8_t v4247;
  unsigned int v4248;
  char v4249;
  char v4250;
  uint8x8_t *v4251;
  unint64_t v4252;
  void (*v4253)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v4254;
  signed int v4255;
  int v4256;
  BOOL v4257;
  int v4258;
  uint8x8_t v4260;
  int v4261;
  int v4262;
  unsigned int v4263;
  uint64_t v4265;
  uint8x8_t v4266;
  uint8x8_t *v4267;
  signed int v4268;
  int32x4_t v4269;
  int32x4_t v4270;
  int32x4_t v4271;
  int32x4_t v4272;
  int32x4_t v4273;
  int8x16_t v4274;
  uint64_t v4275;
  int8x16_t v4276;
  int8x16_t v4277;
  int8x16_t v4278;
  uint8x8_t v4279;
  uint16x8_t v4280;
  uint32x4_t v4281;
  uint64x2_t v4282;
  uint64x2_t v4283;
  uint64x2_t v4284;
  uint32x4_t v4285;
  uint64x2_t v4286;
  uint64x2_t v4287;
  uint64x2_t v4288;
  uint64x2_t v4289;
  uint64x2_t v4290;
  int8x16_t v4291;
  uint8x8_t v4292;
  unsigned int v4293;
  uint64_t v4294;
  int8x8_t v4295;
  char v4296;
  int v4297;
  int v4298;
  unsigned int v4299;
  char v4300;
  char v4301;
  char v4302;
  uint8x8_t *v4303;
  unint64_t v4304;
  void (*v4305)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  char v4306;
  uint64_t v4307;
  char v4308;
  signed int v4309;
  int v4310;
  BOOL v4311;
  int v4312;
  uint8x8_t v4314;
  int v4315;
  int v4316;
  unsigned int v4317;
  uint8x8_t v4318;
  uint8x8_t *v4319;
  signed int v4320;
  uint64_t v4322;
  int32x4_t v4323;
  int32x4_t v4324;
  int32x4_t v4325;
  int32x4_t v4326;
  int32x4_t v4327;
  int8x16_t v4328;
  uint64_t v4329;
  int8x16_t v4330;
  int8x16_t v4331;
  int8x16_t v4332;
  uint8x8_t v4333;
  uint16x8_t v4334;
  uint32x4_t v4335;
  uint64x2_t v4336;
  uint64x2_t v4337;
  uint64x2_t v4338;
  uint32x4_t v4339;
  uint64x2_t v4340;
  uint64x2_t v4341;
  uint64x2_t v4342;
  uint64x2_t v4343;
  uint64x2_t v4344;
  int8x16_t v4345;
  BOOL v4346;
  uint64_t v4347;
  int32x4_t v4348;
  int32x4_t v4349;
  int32x4_t v4350;
  int32x4_t v4351;
  int32x4_t v4352;
  int8x16_t v4353;
  uint64_t v4354;
  int8x16_t v4355;
  int8x16_t v4356;
  int8x16_t v4357;
  uint8x8_t v4358;
  uint16x8_t v4359;
  uint32x4_t v4360;
  uint64x2_t v4361;
  uint64x2_t v4362;
  uint64x2_t v4363;
  uint32x4_t v4364;
  uint64x2_t v4365;
  uint64x2_t v4366;
  uint64x2_t v4367;
  uint64x2_t v4368;
  uint64x2_t v4369;
  int8x16_t v4370;
  uint8x8_t v4371;
  unsigned int v4372;
  uint8x8_t v4373;
  unsigned int v4374;
  int8x8_t v4375;
  uint8x8_t *v4376;
  unint64_t v4377;
  uint64_t v4378;
  int v4379;
  uint64_t (*v4380)(_QWORD, uint8x8_t *, uint64_t *, uint64_t);
  uint64_t v4381;
  unsigned int v4382;
  BOOL v4383;
  unsigned int v4384;
  int v4385;
  uint8x8_t *v4386;
  uint8x8_t v4387;
  int v4388;
  int v4389;
  unsigned int v4390;
  uint64_t v4392;
  uint64_t v4393;
  uint8x8_t *v4394;
  int v4395;
  int32x4_t v4396;
  int32x4_t v4397;
  int32x4_t v4398;
  int32x4_t v4399;
  int32x4_t v4400;
  int8x16_t v4401;
  int32x4_t v4402;
  int32x4_t v4403;
  uint64_t v4404;
  int8x16_t v4405;
  int8x16_t v4406;
  int8x16_t v4407;
  uint8x8_t v4408;
  uint16x8_t v4409;
  uint32x4_t v4410;
  uint64x2_t v4411;
  uint64x2_t v4412;
  uint64x2_t v4413;
  uint32x4_t v4414;
  uint64x2_t v4415;
  uint64x2_t v4416;
  uint64x2_t v4417;
  uint64x2_t v4418;
  uint64x2_t v4419;
  int8x16_t v4420;
  uint8x8_t v4421;
  unsigned int v4422;
  int v4423;
  unsigned __int8 *v4424;
  int8x8_t *v4425;
  int v4426;
  int v4427;
  uint64_t v4428;
  unsigned __int8 *v4429;
  int v4430;
  uint64_t v4431;
  unsigned int *v4432;
  int v4433;
  uint64_t v4434;
  unsigned int *v4435;
  uint64_t v4436;
  uint64_t v4437;
  int v4438;
  uint64_t v4439;
  int v4440;
  uint64_t v4441;
  __int16 v4442;
  char *v4443;
  unsigned __int8 *v4444;
  int v4445;
  uint64_t v4446;
  uint64_t v4447;
  uint64_t v4448;
  uint64_t v4449;
  uint64_t v4450;
  uint64_t v4451;
  int v4452;
  int v4453;
  int v4454;
  int v4455;
  char v4456;
  int32x2_t *v4457;
  unsigned __int8 *v4458;
  int v4459;
  _BYTE *v4460;
  int v4461;
  int v4462;
  _BYTE *v4463;
  int v4464;
  int v4465;
  int v4466;
  int v4467;
  char v4468;
  int v4469;
  int v4470;
  uint64_t v4471;
  uint64_t v4472;
  int v4473;
  uint64_t v4474;
  char v4475;
  unint64_t v4476;
  unsigned __int8 *v4477;
  unint64_t v4478;
  char v4479;
  unsigned int v4480;
  char v4481;
  uint64_t v4482;
  uint64_t v4483;
  unsigned int v4484;
  int v4485;
  unsigned int v4486;
  char v4487;
  uint64_t v4488;
  char v4489;
  uint64_t v4490;
  char v4491;
  uint64_t v4492;
  unsigned int v4493;
  uint64_t v4494;
  char v4495;
  int v4496;
  char v4497;
  char v4498;
  char v4499;
  char v4500;
  char v4501;
  char v4502;
  char v4503;
  char v4504;
  char v4505;
  char v4506;
  char v4507;
  char v4508;
  char v4509;
  char v4510;
  char v4511;
  char v4512;
  char v4513;
  char v4514;
  unsigned __int8 *v4515;
  unint64_t v4516;
  char v4517;
  char v4518;
  char v4519;
  char v4520;
  char v4521;
  char v4522;
  char v4523;
  char v4524;
  char v4525;
  char v4526;
  char v4527;
  char v4528;
  char v4529;
  char v4530;
  char v4531;
  char v4532;
  char v4533;
  uint64_t v4534;
  uint64_t v4535;
  uint64_t v4536;
  int v4537;
  unint64_t v4538;
  uint64_t v4539;
  uint64_t v4540;
  _BYTE v4541[9];
  uint64_t v4542;

  v1 = result;
  v4542 = *MEMORY[0x24BDAC8D0];
  v4458 = (unsigned __int8 *)(result + 10968);
  v4482 = *(_QWORD *)(result + 7488);
  v2 = (((*(_DWORD *)(result + 10668) << 7) - 128) >> 8) + 1;
  v3 = *(_DWORD *)(result + 10664);
  if ((v3 & 0x80000000) != 0)
  {
    v6 = *(uint8x8_t **)(result + 10648);
    v4 = *(int8x8_t *)(result + 10656);
    v7 = *(_QWORD *)(result + 10640) - (_QWORD)v6;
    v8 = 8 * v7;
    v9 = 56 - v3 - 8 * v7;
    v10 = *(uint64_t (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(result + 10672);
    if (v10)
    {
      if (v7 >= 9)
        v11 = 9;
      else
        v11 = *(_QWORD *)(result + 10640) - (_QWORD)v6;
      result = v10(*(_QWORD *)(result + 10680), v6, &v4539, v11);
      v6 = (uint8x8_t *)&v4539;
    }
    if (v9 < 0)
      v5 = v3;
    else
      v5 = v3 + 0x40000000;
    if (v8)
      v12 = 1;
    else
      v12 = v9 <= -1;
    if (v12)
    {
      v13 = 48 - v3;
      v14 = v9 & ~(v9 >> 31);
      if ((int)(48 - v3) >= v14)
      {
        v15 = (uint8x8_t *)(v1 + 10648);
        v16 = *(uint8x8_t *)(v1 + 10648);
        v17 = v14 - 1;
        if (v14 - 1 >= (int)(40 - v3))
          v18 = 40 - v3;
        else
          v18 = v14 - 1;
        v19 = 47 - v3 - v18;
        if (v19 < 0x78)
          goto LABEL_32;
        if (v17 >= (int)(40 - v3))
          v17 = 40 - v3;
        if (v15 >= (uint8x8_t *)&v6->i8[((47 - v3 - v17) >> 3) + 1] || (unint64_t)v6 >= v1 + 10656)
        {
          v21 = (v19 >> 3) + 1;
          v22 = *(_QWORD *)&v16 + (v21 & 0x3FFFFFF8);
          v23 = (uint8x8_t *)((char *)v6 + (v21 & 0x3FFFFFF8));
          v24 = v13 - 8 * (v21 & 0x3FFFFFF8);
          v25 = vdupq_n_s32(v13);
          v26 = vaddq_s32(v25, (int32x4_t)xmmword_208F3A6A0);
          v27 = vaddq_s32(v25, (int32x4_t)xmmword_208F3A6B0);
          v28 = 0uLL;
          v29 = (int32x4_t)v5;
          v30 = (int8x16_t)(unint64_t)v4;
          v31.i64[0] = 0x800000008;
          v31.i64[1] = 0x800000008;
          v32.i64[0] = 0x3F0000003FLL;
          v32.i64[1] = 0x3F0000003FLL;
          v33 = v21 & 0x3FFFFFF8;
          v34 = 0uLL;
          v35 = 0uLL;
          v36 = 0uLL;
          do
          {
            v29 = vaddq_s32(v29, v31);
            v37 = *v6++;
            v28 = vaddq_s32(v28, v31);
            v38 = vmovl_u8(v37);
            v39 = vmovl_high_u16(v38);
            v40.i64[0] = v39.u32[2];
            v40.i64[1] = v39.u32[3];
            v41 = v40;
            v40.i64[0] = v39.u32[0];
            v40.i64[1] = v39.u32[1];
            v42 = v40;
            v43 = vmovl_u16(*(uint16x4_t *)v38.i8);
            v40.i64[0] = v43.u32[2];
            v40.i64[1] = v43.u32[3];
            v44 = v40;
            v40.i64[0] = v43.u32[0];
            v40.i64[1] = v43.u32[1];
            v45 = v40;
            v40.i64[0] = v26.u32[2];
            v40.i64[1] = v26.u32[3];
            v46 = v40;
            v40.i64[0] = v26.u32[0];
            v40.i64[1] = v26.u32[1];
            v47 = v40;
            v40.i64[0] = v27.u32[2];
            v40.i64[1] = v27.u32[3];
            v48 = v40;
            v40.i64[0] = v27.u32[0];
            v40.i64[1] = v27.u32[1];
            v36 = vorrq_s8((int8x16_t)vshlq_u64(v41, v46), v36);
            v35 = vorrq_s8((int8x16_t)vshlq_u64(v42, v47), v35);
            v34 = vorrq_s8((int8x16_t)vshlq_u64(v44, v48), v34);
            v30 = vorrq_s8((int8x16_t)vshlq_u64(v45, v40), v30);
            *(_QWORD *)&v16 += 8;
            v27 = vaddq_s32(v27, v32);
            v26 = vaddq_s32(v26, v32);
            v33 -= 8;
          }
          while (v33);
          *v15 = v16;
          v49 = vorrq_s8(vorrq_s8(v30, v35), vorrq_s8(v34, v36));
          v4 = vorr_s8(*(int8x8_t *)v49.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
          v5 = vaddvq_s32(vaddq_s32(v29, v28));
          if ((v21 & 0x3FFFFFF8) == v21)
            goto LABEL_35;
        }
        else
        {
LABEL_32:
          v22 = *(_QWORD *)(v1 + 10648);
          v23 = v6;
          v24 = 48 - v3;
        }
        v50 = (uint8x8_t)(v22 + 1);
        do
        {
          v5 += 8;
          v51 = v23->u8[0];
          v23 = (uint8x8_t *)((char *)v23 + 1);
          *(_QWORD *)&v4 |= (unint64_t)v51 << v24;
          *v15 = v50;
          v24 -= 8;
          ++*(_QWORD *)&v50;
        }
        while (v24 >= v14);
      }
    }
  }
  else
  {
    v4 = *(int8x8_t *)(result + 10656);
    v5 = *(_DWORD *)(result + 10664);
  }
LABEL_35:
  v52 = v2 << 56;
  v53 = (int8x8_t)(*(_QWORD *)&v4 - (v2 << 56));
  if (*(_QWORD *)&v4 >= (unint64_t)(v2 << 56))
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 10668) - v2;
    v54 = 1;
  }
  else
  {
    v54 = 0;
    v53 = v4;
  }
  v55 = vp8_norm[v2];
  v56 = (int8x8_t)(*(_QWORD *)&v53 << v55);
  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v53 << v55;
  v57 = (_DWORD)v2 << v55;
  v58 = v5 - v55;
  *(_DWORD *)(v1 + 10664) = v5 - v55;
  *(_DWORD *)(v1 + 10668) = (_DWORD)v2 << v55;
  *(_DWORD *)(v1 + 7440) = v54;
  v4458[3] = 0;
  if (*(_QWORD *)&v4 >= v52)
  {
    v59 = (((v57 << 7) - 128) >> 8) + 1;
    if ((v58 & 0x80000000) == 0)
    {
      v60 = (int8x8_t)(*(_QWORD *)&v56 - (v59 << 56));
      if (*(_QWORD *)&v56 < (unint64_t)(v59 << 56))
      {
LABEL_41:
        v4518 = 0;
LABEL_76:
        v108 = vp8_norm[v59];
        v109 = (_DWORD)v59 << v108;
        v110 = (int8x8_t)(*(_QWORD *)&v56 << v108);
        v111 = v58 - v108;
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v56 << v108;
        *(_DWORD *)(v1 + 10664) = v58 - v108;
        *(_DWORD *)(v1 + 10668) = v109;
        v112 = (((v109 << 7) - 128) >> 8) + 1;
        if (((v58 - v108) & 0x80000000) != 0)
        {
          v113 = *(uint8x8_t **)(v1 + 10648);
          v114 = 48 - v111;
          v115 = *(_QWORD *)(v1 + 10640) - (_QWORD)v113;
          v116 = 8 * v115;
          v117 = 56 - 8 * v115 - v111;
          v118 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v118)
          {
            if (v115 >= 9)
              v119 = 9;
            else
              v119 = *(_QWORD *)(v1 + 10640) - (_QWORD)v113;
            v118(*(_QWORD *)(v1 + 10680), v113, &v4539, v119);
            v113 = (uint8x8_t *)&v4539;
          }
          if (v117 >= 0)
            v111 += 0x40000000;
          v120 = v116 || v117 <= -1;
          v121 = v117 & ~(v117 >> 31);
          if (v120 && v114 >= v121)
          {
            v140 = (uint8x8_t *)(v1 + 10648);
            v141 = *(uint8x8_t *)(v1 + 10648);
            v142 = v108 - v58 + 40;
            if (v142 >= v121 - 1)
              v143 = v121 - 1;
            else
              v143 = v108 - v58 + 40;
            v144 = v108 - v58 - v143 + 47;
            if (v144 < 0x78)
            {
              v145 = *(_QWORD *)(v1 + 10648);
              v146 = v113;
              v147 = v114;
              goto LABEL_182;
            }
            if (v142 >= v121 - 1)
              v142 = v121 - 1;
            if (v140 < (uint8x8_t *)&v113->i8[((v108 - v58 - v142 + 47) >> 3) + 1]
              && (unint64_t)v113 < v1 + 10656)
            {
              v145 = *(_QWORD *)(v1 + 10648);
              v146 = v113;
              v147 = v114;
LABEL_182:
              v264 = (uint8x8_t)(v145 + 1);
              do
              {
                v111 += 8;
                v265 = v146->u8[0];
                v146 = (uint8x8_t *)((char *)v146 + 1);
                *(_QWORD *)&v110 |= (unint64_t)v265 << v147;
                *v140 = v264;
                v147 -= 8;
                ++*(_QWORD *)&v264;
              }
              while (v147 >= v121);
              goto LABEL_92;
            }
            v211 = (v144 >> 3) + 1;
            v145 = *(_QWORD *)&v141 + (v211 & 0x3FFFFFF8);
            v146 = (uint8x8_t *)((char *)v113 + (v211 & 0x3FFFFFF8));
            v147 = v114 - 8 * (v211 & 0x3FFFFFF8);
            v212 = vdupq_n_s32(v114);
            v213 = vaddq_s32(v212, (int32x4_t)xmmword_208F3A6A0);
            v214 = vaddq_s32(v212, (int32x4_t)xmmword_208F3A6B0);
            v215 = 0uLL;
            v216 = (int32x4_t)v111;
            v217 = (int8x16_t)(unint64_t)v110;
            v218.i64[0] = 0x800000008;
            v218.i64[1] = 0x800000008;
            v219.i64[0] = 0x3F0000003FLL;
            v219.i64[1] = 0x3F0000003FLL;
            v220 = v211 & 0x3FFFFFF8;
            v221 = 0uLL;
            v222 = 0uLL;
            v223 = 0uLL;
            do
            {
              v216 = vaddq_s32(v216, v218);
              v224 = *v113++;
              v215 = vaddq_s32(v215, v218);
              v225 = vmovl_u8(v224);
              v226 = vmovl_high_u16(v225);
              v227.i64[0] = v226.u32[2];
              v227.i64[1] = v226.u32[3];
              v228 = v227;
              v227.i64[0] = v226.u32[0];
              v227.i64[1] = v226.u32[1];
              v229 = v227;
              v230 = vmovl_u16(*(uint16x4_t *)v225.i8);
              v227.i64[0] = v230.u32[2];
              v227.i64[1] = v230.u32[3];
              v231 = v227;
              v227.i64[0] = v230.u32[0];
              v227.i64[1] = v230.u32[1];
              v232 = v227;
              v227.i64[0] = v213.u32[2];
              v227.i64[1] = v213.u32[3];
              v233 = v227;
              v227.i64[0] = v213.u32[0];
              v227.i64[1] = v213.u32[1];
              v234 = v227;
              v227.i64[0] = v214.u32[2];
              v227.i64[1] = v214.u32[3];
              v235 = v227;
              v227.i64[0] = v214.u32[0];
              v227.i64[1] = v214.u32[1];
              v223 = vorrq_s8((int8x16_t)vshlq_u64(v228, v233), v223);
              v222 = vorrq_s8((int8x16_t)vshlq_u64(v229, v234), v222);
              v221 = vorrq_s8((int8x16_t)vshlq_u64(v231, v235), v221);
              v217 = vorrq_s8((int8x16_t)vshlq_u64(v232, v227), v217);
              *(_QWORD *)&v141 += 8;
              v214 = vaddq_s32(v214, v219);
              v213 = vaddq_s32(v213, v219);
              v220 -= 8;
            }
            while (v220);
            *v140 = v141;
            v236 = vorrq_s8(vorrq_s8(v217, v222), vorrq_s8(v221, v223));
            v110 = vorr_s8(*(int8x8_t *)v236.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v236, v236, 8uLL));
            v111 = vaddvq_s32(vaddq_s32(v216, v215));
            if ((v211 & 0x3FFFFFF8) != v211)
              goto LABEL_182;
          }
        }
LABEL_92:
        v123 = (int8x8_t)(*(_QWORD *)&v110 - (v112 << 56));
        if (*(_QWORD *)&v110 >= (unint64_t)(v112 << 56))
        {
          LODWORD(v112) = *(_DWORD *)(v1 + 10668) - v112;
          v124 = 64;
          v110 = v123;
        }
        else
        {
          v124 = 0;
        }
        v125 = vp8_norm[v112];
        v126 = (_DWORD)v112 << v125;
        v127 = (int8x8_t)(*(_QWORD *)&v110 << v125);
        v128 = v111 - v125;
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v110 << v125;
        *(_DWORD *)(v1 + 10664) = v111 - v125;
        *(_DWORD *)(v1 + 10668) = v126;
        v129 = (((v126 << 7) - 128) >> 8) + 1;
        if (((v111 - v125) & 0x80000000) != 0)
        {
          v130 = *(uint8x8_t **)(v1 + 10648);
          v131 = 48 - v128;
          v132 = *(_QWORD *)(v1 + 10640) - (_QWORD)v130;
          v133 = 8 * v132;
          v134 = 56 - 8 * v132 - v128;
          v135 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v135)
          {
            if (v132 >= 9)
              v136 = 9;
            else
              v136 = *(_QWORD *)(v1 + 10640) - (_QWORD)v130;
            v135(*(_QWORD *)(v1 + 10680), v130, &v4539, v136);
            v130 = (uint8x8_t *)&v4539;
          }
          if (v134 >= 0)
            v128 += 0x40000000;
          v137 = v133 || v134 <= -1;
          v138 = v134 & ~(v134 >> 31);
          if (v137 && v131 >= v138)
          {
            v148 = (uint8x8_t *)(v1 + 10648);
            v149 = *(uint8x8_t *)(v1 + 10648);
            v150 = v125 - v111 + 40;
            if (v150 >= v138 - 1)
              v151 = v138 - 1;
            else
              v151 = v125 - v111 + 40;
            v152 = v125 - v111 - v151 + 47;
            if (v152 < 0x78)
              goto LABEL_132;
            if (v150 >= v138 - 1)
              v150 = v138 - 1;
            if (v148 >= (uint8x8_t *)&v130->i8[((v125 - v111 - v150 + 47) >> 3) + 1]
              || (unint64_t)v130 >= v1 + 10656)
            {
              v154 = (v152 >> 3) + 1;
              v155 = *(_QWORD *)&v149 + (v154 & 0x3FFFFFF8);
              v156 = (uint8x8_t *)((char *)v130 + (v154 & 0x3FFFFFF8));
              v157 = v131 - 8 * (v154 & 0x3FFFFFF8);
              v158 = vdupq_n_s32(v131);
              v159 = vaddq_s32(v158, (int32x4_t)xmmword_208F3A6A0);
              v160 = vaddq_s32(v158, (int32x4_t)xmmword_208F3A6B0);
              v161 = 0uLL;
              v162 = (int32x4_t)v128;
              v163 = (int8x16_t)(unint64_t)v127;
              v164.i64[0] = 0x800000008;
              v164.i64[1] = 0x800000008;
              v165.i64[0] = 0x3F0000003FLL;
              v165.i64[1] = 0x3F0000003FLL;
              v166 = v154 & 0x3FFFFFF8;
              v167 = 0uLL;
              v168 = 0uLL;
              v169 = 0uLL;
              do
              {
                v162 = vaddq_s32(v162, v164);
                v170 = *v130++;
                v161 = vaddq_s32(v161, v164);
                v171 = vmovl_u8(v170);
                v172 = vmovl_high_u16(v171);
                v173.i64[0] = v172.u32[2];
                v173.i64[1] = v172.u32[3];
                v174 = v173;
                v173.i64[0] = v172.u32[0];
                v173.i64[1] = v172.u32[1];
                v175 = v173;
                v176 = vmovl_u16(*(uint16x4_t *)v171.i8);
                v173.i64[0] = v176.u32[2];
                v173.i64[1] = v176.u32[3];
                v177 = v173;
                v173.i64[0] = v176.u32[0];
                v173.i64[1] = v176.u32[1];
                v178 = v173;
                v173.i64[0] = v159.u32[2];
                v173.i64[1] = v159.u32[3];
                v179 = v173;
                v173.i64[0] = v159.u32[0];
                v173.i64[1] = v159.u32[1];
                v180 = v173;
                v173.i64[0] = v160.u32[2];
                v173.i64[1] = v160.u32[3];
                v181 = v173;
                v173.i64[0] = v160.u32[0];
                v173.i64[1] = v160.u32[1];
                v169 = vorrq_s8((int8x16_t)vshlq_u64(v174, v179), v169);
                v168 = vorrq_s8((int8x16_t)vshlq_u64(v175, v180), v168);
                v167 = vorrq_s8((int8x16_t)vshlq_u64(v177, v181), v167);
                v163 = vorrq_s8((int8x16_t)vshlq_u64(v178, v173), v163);
                *(_QWORD *)&v149 += 8;
                v160 = vaddq_s32(v160, v165);
                v159 = vaddq_s32(v159, v165);
                v166 -= 8;
              }
              while (v166);
              *v148 = v149;
              v182 = vorrq_s8(vorrq_s8(v163, v168), vorrq_s8(v167, v169));
              v127 = vorr_s8(*(int8x8_t *)v182.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v182, v182, 8uLL));
              v128 = vaddvq_s32(vaddq_s32(v162, v161));
              if ((v154 & 0x3FFFFFF8) == v154)
                goto LABEL_135;
            }
            else
            {
LABEL_132:
              v155 = *(_QWORD *)(v1 + 10648);
              v156 = v130;
              v157 = v131;
            }
            v183 = (uint8x8_t)(v155 + 1);
            do
            {
              v128 += 8;
              v184 = v156->u8[0];
              v156 = (uint8x8_t *)((char *)v156 + 1);
              *(_QWORD *)&v127 |= (unint64_t)v184 << v157;
              *v148 = v183;
              v157 -= 8;
              ++*(_QWORD *)&v183;
            }
            while (v157 >= v138);
          }
        }
LABEL_135:
        v185 = (int8x8_t)(*(_QWORD *)&v127 - (v129 << 56));
        if (*(_QWORD *)&v127 >= (unint64_t)(v129 << 56))
        {
          LODWORD(v129) = *(_DWORD *)(v1 + 10668) - v129;
          result = 32;
          v127 = v185;
        }
        else
        {
          result = 0;
        }
        v186 = vp8_norm[v129];
        v187 = (_DWORD)v129 << v186;
        v188 = (int8x8_t)(*(_QWORD *)&v127 << v186);
        v189 = v128 - v186;
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v127 << v186;
        *(_DWORD *)(v1 + 10664) = v128 - v186;
        *(_DWORD *)(v1 + 10668) = v187;
        v190 = (((v187 << 7) - 128) >> 8) + 1;
        if (((v128 - v186) & 0x80000000) != 0)
        {
          v4498 = v124;
          v191 = result;
          v192 = *(uint8x8_t **)(v1 + 10648);
          v193 = 48 - v189;
          v194 = *(_QWORD *)(v1 + 10640) - (_QWORD)v192;
          v195 = 8 * v194;
          v196 = 56 - 8 * v194 - v189;
          v197 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v197)
          {
            if (v194 >= 9)
              v198 = 9;
            else
              v198 = *(_QWORD *)(v1 + 10640) - (_QWORD)v192;
            v197(*(_QWORD *)(v1 + 10680), v192, &v4539, v198);
            v192 = (uint8x8_t *)&v4539;
          }
          if (v196 >= 0)
            v189 += 0x40000000;
          if (v195)
            v199 = 1;
          else
            v199 = v196 <= -1;
          v200 = v196 & ~(v196 >> 31);
          if (!v199 || v193 < v200)
          {
            result = v191;
            v124 = v4498;
          }
          else
          {
            v202 = (uint8x8_t *)(v1 + 10648);
            v203 = *(uint8x8_t *)(v1 + 10648);
            v204 = v186 - v128 + 40;
            if (v204 >= v200 - 1)
              v205 = v200 - 1;
            else
              v205 = v186 - v128 + 40;
            v206 = v186 - v128 - v205 + 47;
            result = v191;
            if (v206 >= 0x78)
            {
              if (v204 >= v200 - 1)
                v204 = v200 - 1;
              v237 = v202 >= (uint8x8_t *)&v192->i8[((v186 - v128 - v204 + 47) >> 3) + 1]
                  || (unint64_t)v192 >= v1 + 10656;
              v124 = v4498;
              if (v237)
              {
                v238 = (v206 >> 3) + 1;
                v207 = *(_QWORD *)&v203 + (v238 & 0x3FFFFFF8);
                v208 = (uint8x8_t *)((char *)v192 + (v238 & 0x3FFFFFF8));
                v209 = v193 - 8 * (v238 & 0x3FFFFFF8);
                v239 = vdupq_n_s32(v193);
                v240 = vaddq_s32(v239, (int32x4_t)xmmword_208F3A6A0);
                v241 = vaddq_s32(v239, (int32x4_t)xmmword_208F3A6B0);
                v242 = 0uLL;
                v243 = (int32x4_t)v189;
                v244 = (int8x16_t)(unint64_t)v188;
                v245.i64[0] = 0x800000008;
                v245.i64[1] = 0x800000008;
                v246.i64[0] = 0x3F0000003FLL;
                v246.i64[1] = 0x3F0000003FLL;
                v247 = v238 & 0x3FFFFFF8;
                v248 = 0uLL;
                v249 = 0uLL;
                v250 = 0uLL;
                do
                {
                  v243 = vaddq_s32(v243, v245);
                  v251 = *v192++;
                  v242 = vaddq_s32(v242, v245);
                  v252 = vmovl_u8(v251);
                  v253 = vmovl_high_u16(v252);
                  v254.i64[0] = v253.u32[2];
                  v254.i64[1] = v253.u32[3];
                  v255 = v254;
                  v254.i64[0] = v253.u32[0];
                  v254.i64[1] = v253.u32[1];
                  v256 = v254;
                  v257 = vmovl_u16(*(uint16x4_t *)v252.i8);
                  v254.i64[0] = v257.u32[2];
                  v254.i64[1] = v257.u32[3];
                  v258 = v254;
                  v254.i64[0] = v257.u32[0];
                  v254.i64[1] = v257.u32[1];
                  v259 = v254;
                  v254.i64[0] = v240.u32[2];
                  v254.i64[1] = v240.u32[3];
                  v260 = v254;
                  v254.i64[0] = v240.u32[0];
                  v254.i64[1] = v240.u32[1];
                  v261 = v254;
                  v254.i64[0] = v241.u32[2];
                  v254.i64[1] = v241.u32[3];
                  v262 = v254;
                  v254.i64[0] = v241.u32[0];
                  v254.i64[1] = v241.u32[1];
                  v250 = vorrq_s8((int8x16_t)vshlq_u64(v255, v260), v250);
                  v249 = vorrq_s8((int8x16_t)vshlq_u64(v256, v261), v249);
                  v248 = vorrq_s8((int8x16_t)vshlq_u64(v258, v262), v248);
                  v244 = vorrq_s8((int8x16_t)vshlq_u64(v259, v254), v244);
                  *(_QWORD *)&v203 += 8;
                  v241 = vaddq_s32(v241, v246);
                  v240 = vaddq_s32(v240, v246);
                  v247 -= 8;
                }
                while (v247);
                *v202 = v203;
                v263 = vorrq_s8(vorrq_s8(v244, v249), vorrq_s8(v248, v250));
                v188 = vorr_s8(*(int8x8_t *)v263.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v263, v263, 8uLL));
                v189 = vaddvq_s32(vaddq_s32(v243, v242));
                if ((v238 & 0x3FFFFFF8) == v238)
                  goto LABEL_187;
              }
              else
              {
                v207 = *(_QWORD *)(v1 + 10648);
                v208 = v192;
                v209 = v193;
              }
            }
            else
            {
              v207 = *(_QWORD *)(v1 + 10648);
              v208 = v192;
              v209 = v193;
              v124 = v4498;
            }
            v266 = (uint8x8_t)(v207 + 1);
            do
            {
              v189 += 8;
              v267 = v208->u8[0];
              v208 = (uint8x8_t *)((char *)v208 + 1);
              *(_QWORD *)&v188 |= (unint64_t)v267 << v209;
              *v202 = v266;
              v209 -= 8;
              ++*(_QWORD *)&v266;
            }
            while (v209 >= v200);
          }
        }
LABEL_187:
        v268 = (int8x8_t)(*(_QWORD *)&v188 - (v190 << 56));
        if (*(_QWORD *)&v188 >= (unint64_t)(v190 << 56))
        {
          LODWORD(v190) = *(_DWORD *)(v1 + 10668) - v190;
          v269 = 16;
          v188 = v268;
        }
        else
        {
          v269 = 0;
        }
        v270 = vp8_norm[v190];
        v271 = (int8x8_t)(*(_QWORD *)&v188 << v270);
        v272 = v189 - v270;
        *(int8x8_t *)(v1 + 10656) = v271;
        *(_DWORD *)(v1 + 10664) = v189 - v270;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v190 << v270;
        v273 = ((((_DWORD)v190 << v270 << 7) - 128) >> 8) + 1;
        if (((v189 - v270) & 0x80000000) != 0)
        {
          v4487 = v269;
          v4499 = v124;
          v274 = *(uint8x8_t **)(v1 + 10648);
          v275 = 48 - v272;
          v276 = *(_QWORD *)(v1 + 10640) - (_QWORD)v274;
          v277 = 8 * v276;
          v278 = 56 - 8 * v276 - v272;
          v279 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v279)
          {
            if (v276 >= 9)
              v280 = 9;
            else
              v280 = *(_QWORD *)(v1 + 10640) - (_QWORD)v274;
            v281 = result;
            v279(*(_QWORD *)(v1 + 10680), v274, &v4539, v280);
            result = v281;
            v274 = (uint8x8_t *)&v4539;
          }
          if (v278 >= 0)
            v272 += 0x40000000;
          if (v277)
            v282 = 1;
          else
            v282 = v278 <= -1;
          v283 = v278 & ~(v278 >> 31);
          if (!v282 || v275 < v283)
          {
            v124 = v4499;
            v269 = v4487;
          }
          else
          {
            v285 = (uint8x8_t *)(v1 + 10648);
            v286 = *(uint8x8_t *)(v1 + 10648);
            v287 = v270 - v189 + 40;
            if (v287 >= v283 - 1)
              v288 = v283 - 1;
            else
              v288 = v270 - v189 + 40;
            v289 = v270 - v189 - v288 + 47;
            v124 = v4499;
            v269 = v4487;
            if (v289 < 0x78)
              goto LABEL_222;
            if (v287 >= v283 - 1)
              v287 = v283 - 1;
            if (v285 >= (uint8x8_t *)&v274->i8[((v270 - v189 - v287 + 47) >> 3) + 1]
              || (unint64_t)v274 >= v1 + 10656)
            {
              v291 = (v289 >> 3) + 1;
              v292 = *(_QWORD *)&v286 + (v291 & 0x3FFFFFF8);
              v293 = (uint8x8_t *)((char *)v274 + (v291 & 0x3FFFFFF8));
              v294 = v275 - 8 * (v291 & 0x3FFFFFF8);
              v295 = vdupq_n_s32(v275);
              v296 = vaddq_s32(v295, (int32x4_t)xmmword_208F3A6A0);
              v297 = vaddq_s32(v295, (int32x4_t)xmmword_208F3A6B0);
              v298 = 0uLL;
              v299 = (int32x4_t)v272;
              v300 = (int8x16_t)(unint64_t)v271;
              v301.i64[0] = 0x800000008;
              v301.i64[1] = 0x800000008;
              v302.i64[0] = 0x3F0000003FLL;
              v302.i64[1] = 0x3F0000003FLL;
              v303 = v291 & 0x3FFFFFF8;
              v304 = 0uLL;
              v305 = 0uLL;
              v306 = 0uLL;
              do
              {
                v299 = vaddq_s32(v299, v301);
                v307 = *v274++;
                v298 = vaddq_s32(v298, v301);
                v308 = vmovl_u8(v307);
                v309 = vmovl_high_u16(v308);
                v310.i64[0] = v309.u32[2];
                v310.i64[1] = v309.u32[3];
                v311 = v310;
                v310.i64[0] = v309.u32[0];
                v310.i64[1] = v309.u32[1];
                v312 = v310;
                v313 = vmovl_u16(*(uint16x4_t *)v308.i8);
                v310.i64[0] = v313.u32[2];
                v310.i64[1] = v313.u32[3];
                v314 = v310;
                v310.i64[0] = v313.u32[0];
                v310.i64[1] = v313.u32[1];
                v315 = v310;
                v310.i64[0] = v296.u32[2];
                v310.i64[1] = v296.u32[3];
                v316 = v310;
                v310.i64[0] = v296.u32[0];
                v310.i64[1] = v296.u32[1];
                v317 = v310;
                v310.i64[0] = v297.u32[2];
                v310.i64[1] = v297.u32[3];
                v318 = v310;
                v310.i64[0] = v297.u32[0];
                v310.i64[1] = v297.u32[1];
                v306 = vorrq_s8((int8x16_t)vshlq_u64(v311, v316), v306);
                v305 = vorrq_s8((int8x16_t)vshlq_u64(v312, v317), v305);
                v304 = vorrq_s8((int8x16_t)vshlq_u64(v314, v318), v304);
                v300 = vorrq_s8((int8x16_t)vshlq_u64(v315, v310), v300);
                *(_QWORD *)&v286 += 8;
                v297 = vaddq_s32(v297, v302);
                v296 = vaddq_s32(v296, v302);
                v303 -= 8;
              }
              while (v303);
              *v285 = v286;
              v319 = vorrq_s8(vorrq_s8(v300, v305), vorrq_s8(v304, v306));
              v271 = vorr_s8(*(int8x8_t *)v319.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v319, v319, 8uLL));
              v272 = vaddvq_s32(vaddq_s32(v299, v298));
              if ((v291 & 0x3FFFFFF8) == v291)
                goto LABEL_225;
            }
            else
            {
LABEL_222:
              v292 = *(_QWORD *)(v1 + 10648);
              v293 = v274;
              v294 = v275;
            }
            v320 = (uint8x8_t)(v292 + 1);
            do
            {
              v272 += 8;
              v321 = v293->u8[0];
              v293 = (uint8x8_t *)((char *)v293 + 1);
              *(_QWORD *)&v271 |= (unint64_t)v321 << v294;
              *v285 = v320;
              v294 -= 8;
              ++*(_QWORD *)&v320;
            }
            while (v294 >= v283);
          }
        }
LABEL_225:
        v322 = (int8x8_t)(*(_QWORD *)&v271 - (v273 << 56));
        if (*(_QWORD *)&v271 >= (unint64_t)(v273 << 56))
        {
          LODWORD(v273) = *(_DWORD *)(v1 + 10668) - v273;
          v323 = 8;
          v271 = v322;
        }
        else
        {
          v323 = 0;
        }
        v324 = v124 | v4518;
        v325 = vp8_norm[v273];
        v326 = (int8x8_t)(*(_QWORD *)&v271 << v325);
        v327 = v272 - v325;
        *(int8x8_t *)(v1 + 10656) = v326;
        *(_DWORD *)(v1 + 10664) = v272 - v325;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v273 << v325;
        v328 = ((((_DWORD)v273 << v325 << 7) - 128) >> 8) + 1;
        if (((v272 - v325) & 0x80000000) == 0)
        {
          v329 = v324 | result;
          v330 = (int8x8_t)(*(_QWORD *)&v326 - (v328 << 56));
          if (*(_QWORD *)&v326 < (unint64_t)(v328 << 56))
          {
LABEL_230:
            v331 = 0;
            goto LABEL_266;
          }
LABEL_265:
          LODWORD(v328) = *(_DWORD *)(v1 + 10668) - v328;
          v331 = 4;
          v326 = v330;
LABEL_266:
          v380 = v329 | v269;
          v381 = vp8_norm[v328];
          v382 = (_DWORD)v328 << v381;
          v383 = (int8x8_t)(*(_QWORD *)&v326 << v381);
          v384 = v327 - v381;
          *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v326 << v381;
          *(_DWORD *)(v1 + 10664) = v327 - v381;
          *(_DWORD *)(v1 + 10668) = v382;
          v385 = (((v382 << 7) - 128) >> 8) + 1;
          if (((v327 - v381) & 0x80000000) == 0)
          {
            v386 = v380 | v323;
            v387 = (int8x8_t)(*(_QWORD *)&v383 - (v385 << 56));
            if (*(_QWORD *)&v383 < (unint64_t)(v385 << 56))
            {
LABEL_268:
              v388 = 0;
              goto LABEL_303;
            }
LABEL_302:
            LODWORD(v385) = *(_DWORD *)(v1 + 10668) - v385;
            v388 = 2;
            v383 = v387;
LABEL_303:
            v436 = v386 | v331;
            v437 = vp8_norm[v385];
            v438 = (_DWORD)v385 << v437;
            v439 = (int8x8_t)(*(_QWORD *)&v383 << v437);
            v440 = v384 - v437;
            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v383 << v437;
            *(_DWORD *)(v1 + 10664) = v384 - v437;
            *(_DWORD *)(v1 + 10668) = v438;
            v441 = (((v438 << 7) - 128) >> 8) + 1;
            if (((v384 - v437) & 0x80000000) == 0)
            {
              v442 = v436 | v388;
              v443 = (int8x8_t)(*(_QWORD *)&v439 - (v441 << 56));
              if (*(_QWORD *)&v439 < (unint64_t)(v441 << 56))
              {
LABEL_305:
                v444 = 0;
LABEL_341:
                v492 = vp8_norm[v441];
                v57 = (_DWORD)v441 << v492;
                v56 = (int8x8_t)(*(_QWORD *)&v439 << v492);
                v58 = v440 - v492;
                *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v439 << v492;
                *(_DWORD *)(v1 + 10664) = v440 - v492;
                *(_DWORD *)(v1 + 10668) = (_DWORD)v441 << v492;
                v4458[3] = v442 | v444;
                goto LABEL_342;
              }
LABEL_340:
              LODWORD(v441) = *(_DWORD *)(v1 + 10668) - v441;
              v444 = 1;
              v439 = v443;
              goto LABEL_341;
            }
            v4521 = v436;
            v445 = *(uint8x8_t **)(v1 + 10648);
            v446 = 48 - v440;
            v447 = *(_QWORD *)(v1 + 10640) - (_QWORD)v445;
            v448 = 8 * v447;
            v449 = 56 - 8 * v447 - v440;
            v450 = *(uint64_t (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
            if (v450)
            {
              if (v447 >= 9)
                v451 = 9;
              else
                v451 = *(_QWORD *)(v1 + 10640) - (_QWORD)v445;
              result = v450(*(_QWORD *)(v1 + 10680), v445, &v4539, v451);
              v445 = (uint8x8_t *)&v4539;
            }
            if (v449 >= 0)
              v440 += 0x40000000;
            if (v448)
              v452 = 1;
            else
              v452 = v449 <= -1;
            v453 = v449 & ~(v449 >> 31);
            if (v452 && v446 >= v453)
            {
              v455 = (uint8x8_t *)(v1 + 10648);
              v456 = *(uint8x8_t *)(v1 + 10648);
              v457 = v437 - v384 + 40;
              if (v457 >= v453 - 1)
                v458 = v453 - 1;
              else
                v458 = v437 - v384 + 40;
              v459 = v437 - v384 - v458 + 47;
              if (v459 < 0x78)
              {
                v460 = *(_QWORD *)(v1 + 10648);
                v461 = v445;
                v462 = v446;
                goto LABEL_337;
              }
              if (v457 >= v453 - 1)
                v457 = v453 - 1;
              if (v455 < (uint8x8_t *)&v445->i8[((v437 - v384 - v457 + 47) >> 3) + 1]
                && (unint64_t)v445 < v1 + 10656)
              {
                v460 = *(_QWORD *)(v1 + 10648);
                v461 = v445;
                v462 = v446;
LABEL_337:
                v490 = (uint8x8_t)(v460 + 1);
                do
                {
                  v440 += 8;
                  v491 = v461->u8[0];
                  v461 = (uint8x8_t *)((char *)v461 + 1);
                  *(_QWORD *)&v439 |= (unint64_t)v491 << v462;
                  *v455 = v490;
                  v462 -= 8;
                  ++*(_QWORD *)&v490;
                }
                while (v462 >= v453);
                goto LABEL_339;
              }
              v464 = (v459 >> 3) + 1;
              v460 = *(_QWORD *)&v456 + (v464 & 0x3FFFFFF8);
              v461 = (uint8x8_t *)((char *)v445 + (v464 & 0x3FFFFFF8));
              v462 = v446 - 8 * (v464 & 0x3FFFFFF8);
              v465 = vdupq_n_s32(v446);
              v466 = vaddq_s32(v465, (int32x4_t)xmmword_208F3A6A0);
              v467 = vaddq_s32(v465, (int32x4_t)xmmword_208F3A6B0);
              v468 = 0uLL;
              v469 = (int32x4_t)v440;
              v470 = (int8x16_t)(unint64_t)v439;
              v471.i64[0] = 0x800000008;
              v471.i64[1] = 0x800000008;
              v472.i64[0] = 0x3F0000003FLL;
              v472.i64[1] = 0x3F0000003FLL;
              v473 = v464 & 0x3FFFFFF8;
              v474 = 0uLL;
              v475 = 0uLL;
              v476 = 0uLL;
              do
              {
                v469 = vaddq_s32(v469, v471);
                v477 = *v445++;
                v468 = vaddq_s32(v468, v471);
                v478 = vmovl_u8(v477);
                v479 = vmovl_high_u16(v478);
                v480.i64[0] = v479.u32[2];
                v480.i64[1] = v479.u32[3];
                v481 = v480;
                v480.i64[0] = v479.u32[0];
                v480.i64[1] = v479.u32[1];
                v482 = v480;
                v483 = vmovl_u16(*(uint16x4_t *)v478.i8);
                v480.i64[0] = v483.u32[2];
                v480.i64[1] = v483.u32[3];
                v484 = v480;
                v480.i64[0] = v483.u32[0];
                v480.i64[1] = v483.u32[1];
                v485 = v480;
                v480.i64[0] = v466.u32[2];
                v480.i64[1] = v466.u32[3];
                v486 = v480;
                v480.i64[0] = v466.u32[0];
                v480.i64[1] = v466.u32[1];
                v487 = v480;
                v480.i64[0] = v467.u32[2];
                v480.i64[1] = v467.u32[3];
                v488 = v480;
                v480.i64[0] = v467.u32[0];
                v480.i64[1] = v467.u32[1];
                v476 = vorrq_s8((int8x16_t)vshlq_u64(v481, v486), v476);
                v475 = vorrq_s8((int8x16_t)vshlq_u64(v482, v487), v475);
                v474 = vorrq_s8((int8x16_t)vshlq_u64(v484, v488), v474);
                v470 = vorrq_s8((int8x16_t)vshlq_u64(v485, v480), v470);
                *(_QWORD *)&v456 += 8;
                v467 = vaddq_s32(v467, v472);
                v466 = vaddq_s32(v466, v472);
                v473 -= 8;
              }
              while (v473);
              *v455 = v456;
              v489 = vorrq_s8(vorrq_s8(v470, v475), vorrq_s8(v474, v476));
              v439 = vorr_s8(*(int8x8_t *)v489.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v489, v489, 8uLL));
              v440 = vaddvq_s32(vaddq_s32(v469, v468));
              if ((v464 & 0x3FFFFFF8) != v464)
                goto LABEL_337;
            }
LABEL_339:
            v442 = v4521 | v388;
            v443 = (int8x8_t)(*(_QWORD *)&v439 - (v441 << 56));
            if (*(_QWORD *)&v439 < (unint64_t)(v441 << 56))
              goto LABEL_305;
            goto LABEL_340;
          }
          v4501 = v380;
          v4520 = v331;
          v389 = *(uint8x8_t **)(v1 + 10648);
          v390 = 48 - v384;
          v391 = *(_QWORD *)(v1 + 10640) - (_QWORD)v389;
          v392 = 8 * v391;
          v393 = 56 - 8 * v391 - v384;
          v394 = *(uint64_t (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v394)
          {
            if (v391 >= 9)
              v395 = 9;
            else
              v395 = *(_QWORD *)(v1 + 10640) - (_QWORD)v389;
            result = v394(*(_QWORD *)(v1 + 10680), v389, &v4539, v395);
            v389 = (uint8x8_t *)&v4539;
          }
          if (v393 >= 0)
            v384 += 0x40000000;
          if (v392)
            v396 = 1;
          else
            v396 = v393 <= -1;
          v397 = v393 & ~(v393 >> 31);
          if (v396 && v390 >= v397)
          {
            v399 = (uint8x8_t *)(v1 + 10648);
            v400 = *(uint8x8_t *)(v1 + 10648);
            v401 = v381 - v327 + 40;
            if (v401 >= v397 - 1)
              v402 = v397 - 1;
            else
              v402 = v381 - v327 + 40;
            v403 = v381 - v327 - v402 + 47;
            if (v403 < 0x78)
              goto LABEL_298;
            if (v401 >= v397 - 1)
              v401 = v397 - 1;
            if (v399 < (uint8x8_t *)&v389->i8[((v381 - v327 - v401 + 47) >> 3) + 1]
              && (unint64_t)v389 < v1 + 10656)
            {
LABEL_298:
              v406 = *(_QWORD *)(v1 + 10648);
              v407 = v389;
              v408 = v390;
LABEL_299:
              v434 = (uint8x8_t)(v406 + 1);
              do
              {
                v384 += 8;
                v435 = v407->u8[0];
                v407 = (uint8x8_t *)((char *)v407 + 1);
                *(_QWORD *)&v383 |= (unint64_t)v435 << v408;
                *v399 = v434;
                v408 -= 8;
                ++*(_QWORD *)&v434;
              }
              while (v408 >= v397);
              goto LABEL_301;
            }
            v405 = (v403 >> 3) + 1;
            v406 = *(_QWORD *)&v400 + (v405 & 0x3FFFFFF8);
            v407 = (uint8x8_t *)((char *)v389 + (v405 & 0x3FFFFFF8));
            v408 = v390 - 8 * (v405 & 0x3FFFFFF8);
            v409 = vdupq_n_s32(v390);
            v410 = vaddq_s32(v409, (int32x4_t)xmmword_208F3A6A0);
            v411 = vaddq_s32(v409, (int32x4_t)xmmword_208F3A6B0);
            v412 = 0uLL;
            v413 = (int32x4_t)v384;
            v414 = (int8x16_t)(unint64_t)v383;
            v415.i64[0] = 0x800000008;
            v415.i64[1] = 0x800000008;
            v416.i64[0] = 0x3F0000003FLL;
            v416.i64[1] = 0x3F0000003FLL;
            v417 = v405 & 0x3FFFFFF8;
            v418 = 0uLL;
            v419 = 0uLL;
            v420 = 0uLL;
            do
            {
              v413 = vaddq_s32(v413, v415);
              v421 = *v389++;
              v412 = vaddq_s32(v412, v415);
              v422 = vmovl_u8(v421);
              v423 = vmovl_high_u16(v422);
              v424.i64[0] = v423.u32[2];
              v424.i64[1] = v423.u32[3];
              v425 = v424;
              v424.i64[0] = v423.u32[0];
              v424.i64[1] = v423.u32[1];
              v426 = v424;
              v427 = vmovl_u16(*(uint16x4_t *)v422.i8);
              v424.i64[0] = v427.u32[2];
              v424.i64[1] = v427.u32[3];
              v428 = v424;
              v424.i64[0] = v427.u32[0];
              v424.i64[1] = v427.u32[1];
              v429 = v424;
              v424.i64[0] = v410.u32[2];
              v424.i64[1] = v410.u32[3];
              v430 = v424;
              v424.i64[0] = v410.u32[0];
              v424.i64[1] = v410.u32[1];
              v431 = v424;
              v424.i64[0] = v411.u32[2];
              v424.i64[1] = v411.u32[3];
              v432 = v424;
              v424.i64[0] = v411.u32[0];
              v424.i64[1] = v411.u32[1];
              v420 = vorrq_s8((int8x16_t)vshlq_u64(v425, v430), v420);
              v419 = vorrq_s8((int8x16_t)vshlq_u64(v426, v431), v419);
              v418 = vorrq_s8((int8x16_t)vshlq_u64(v428, v432), v418);
              v414 = vorrq_s8((int8x16_t)vshlq_u64(v429, v424), v414);
              *(_QWORD *)&v400 += 8;
              v411 = vaddq_s32(v411, v416);
              v410 = vaddq_s32(v410, v416);
              v417 -= 8;
            }
            while (v417);
            *v399 = v400;
            v433 = vorrq_s8(vorrq_s8(v414, v419), vorrq_s8(v418, v420));
            v383 = vorr_s8(*(int8x8_t *)v433.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v433, v433, 8uLL));
            v384 = vaddvq_s32(vaddq_s32(v413, v412));
            if ((v405 & 0x3FFFFFF8) != v405)
              goto LABEL_299;
          }
LABEL_301:
          v331 = v4520;
          v386 = v4501 | v323;
          v387 = (int8x8_t)(*(_QWORD *)&v383 - (v385 << 56));
          if (*(_QWORD *)&v383 < (unint64_t)(v385 << 56))
            goto LABEL_268;
          goto LABEL_302;
        }
        v4488 = v328;
        v4500 = v324;
        v4519 = v323;
        v332 = *(uint8x8_t **)(v1 + 10648);
        v333 = 48 - v327;
        v334 = *(_QWORD *)(v1 + 10640) - (_QWORD)v332;
        v335 = 8 * v334;
        v336 = 56 - 8 * v334 - v327;
        v337 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
        if (v337)
        {
          if (v334 >= 9)
            v338 = 9;
          else
            v338 = *(_QWORD *)(v1 + 10640) - (_QWORD)v332;
          v339 = result;
          v337(*(_QWORD *)(v1 + 10680), v332, &v4539, v338);
          result = v339;
          v332 = (uint8x8_t *)&v4539;
        }
        if (v336 >= 0)
          v327 += 0x40000000;
        if (v335)
          v340 = 1;
        else
          v340 = v336 <= -1;
        v341 = v336 & ~(v336 >> 31);
        if (!v340 || v333 < v341)
        {
          v323 = v4519;
          v328 = v4488;
          goto LABEL_264;
        }
        v343 = (uint8x8_t *)(v1 + 10648);
        v344 = *(uint8x8_t *)(v1 + 10648);
        v345 = v325 - v272 + 40;
        if (v345 >= v341 - 1)
          v346 = v341 - 1;
        else
          v346 = v325 - v272 + 40;
        v347 = v325 - v272 - v346 + 47;
        v323 = v4519;
        v328 = v4488;
        if (v347 >= 0x78)
        {
          if (v345 >= v341 - 1)
            v345 = v341 - 1;
          if (v343 >= (uint8x8_t *)&v332->i8[((v325 - v272 - v345 + 47) >> 3) + 1]
            || (unint64_t)v332 >= v1 + 10656)
          {
            v352 = (v347 >> 3) + 1;
            v348 = *(_QWORD *)&v344 + (v352 & 0x3FFFFFF8);
            v349 = (uint8x8_t *)((char *)v332 + (v352 & 0x3FFFFFF8));
            v350 = v333 - 8 * (v352 & 0x3FFFFFF8);
            v353 = vdupq_n_s32(v333);
            v354 = vaddq_s32(v353, (int32x4_t)xmmword_208F3A6A0);
            v355 = vaddq_s32(v353, (int32x4_t)xmmword_208F3A6B0);
            v356 = 0uLL;
            v357 = (int32x4_t)v327;
            v358 = (int8x16_t)(unint64_t)v326;
            v359.i64[0] = 0x800000008;
            v359.i64[1] = 0x800000008;
            v360.i64[0] = 0x3F0000003FLL;
            v360.i64[1] = 0x3F0000003FLL;
            v361 = v352 & 0x3FFFFFF8;
            v362 = 0uLL;
            v363 = 0uLL;
            v364 = 0uLL;
            do
            {
              v357 = vaddq_s32(v357, v359);
              v365 = *v332++;
              v356 = vaddq_s32(v356, v359);
              v366 = vmovl_u8(v365);
              v367 = vmovl_high_u16(v366);
              v368.i64[0] = v367.u32[2];
              v368.i64[1] = v367.u32[3];
              v369 = v368;
              v368.i64[0] = v367.u32[0];
              v368.i64[1] = v367.u32[1];
              v370 = v368;
              v371 = vmovl_u16(*(uint16x4_t *)v366.i8);
              v368.i64[0] = v371.u32[2];
              v368.i64[1] = v371.u32[3];
              v372 = v368;
              v368.i64[0] = v371.u32[0];
              v368.i64[1] = v371.u32[1];
              v373 = v368;
              v368.i64[0] = v354.u32[2];
              v368.i64[1] = v354.u32[3];
              v374 = v368;
              v368.i64[0] = v354.u32[0];
              v368.i64[1] = v354.u32[1];
              v375 = v368;
              v368.i64[0] = v355.u32[2];
              v368.i64[1] = v355.u32[3];
              v376 = v368;
              v368.i64[0] = v355.u32[0];
              v368.i64[1] = v355.u32[1];
              v364 = vorrq_s8((int8x16_t)vshlq_u64(v369, v374), v364);
              v363 = vorrq_s8((int8x16_t)vshlq_u64(v370, v375), v363);
              v362 = vorrq_s8((int8x16_t)vshlq_u64(v372, v376), v362);
              v358 = vorrq_s8((int8x16_t)vshlq_u64(v373, v368), v358);
              *(_QWORD *)&v344 += 8;
              v355 = vaddq_s32(v355, v360);
              v354 = vaddq_s32(v354, v360);
              v361 -= 8;
            }
            while (v361);
            *v343 = v344;
            v377 = vorrq_s8(vorrq_s8(v358, v363), vorrq_s8(v362, v364));
            v326 = vorr_s8(*(int8x8_t *)v377.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v377, v377, 8uLL));
            v327 = vaddvq_s32(vaddq_s32(v357, v356));
            if ((v352 & 0x3FFFFFF8) == v352)
            {
LABEL_264:
              v329 = v4500 | result;
              v330 = (int8x8_t)(*(_QWORD *)&v326 - (v328 << 56));
              if (*(_QWORD *)&v326 < (unint64_t)(v328 << 56))
                goto LABEL_230;
              goto LABEL_265;
            }
          }
          else
          {
            v348 = *(_QWORD *)(v1 + 10648);
            v349 = v332;
            v350 = v333;
          }
        }
        else
        {
          v348 = *(_QWORD *)(v1 + 10648);
          v349 = v332;
          v350 = v333;
        }
        v378 = (uint8x8_t)(v348 + 1);
        do
        {
          v327 += 8;
          v379 = v349->u8[0];
          v349 = (uint8x8_t *)((char *)v349 + 1);
          *(_QWORD *)&v326 |= (unint64_t)v379 << v350;
          *v343 = v378;
          v350 -= 8;
          ++*(_QWORD *)&v378;
        }
        while (v350 >= v341);
        goto LABEL_264;
      }
LABEL_75:
      LODWORD(v59) = *(_DWORD *)(v1 + 10668) - v59;
      v4518 = 0x80;
      v56 = v60;
      goto LABEL_76;
    }
    v61 = *(uint8x8_t **)(v1 + 10648);
    v62 = *(_QWORD *)(v1 + 10640) - (_QWORD)v61;
    v63 = 8 * v62;
    v64 = 56 - 8 * v62 - v58;
    v65 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
    if (v65)
    {
      if (v62 >= 9)
        v66 = 9;
      else
        v66 = *(_QWORD *)(v1 + 10640) - (_QWORD)v61;
      v65(*(_QWORD *)(v1 + 10680), v61, &v4539, v66);
      v61 = (uint8x8_t *)&v4539;
    }
    if (v64 < 0)
      v67 = v5 - v55;
    else
      v67 = v58 + 0x40000000;
    if (v63)
      v68 = 1;
    else
      v68 = v64 <= -1;
    if (v68)
    {
      v69 = 48 - v58;
      v70 = v64 & ~(v64 >> 31);
      if ((int)(48 - v58) >= v70)
      {
        v71 = (uint8x8_t *)(v1 + 10648);
        v72 = *(uint8x8_t *)(v1 + 10648);
        v73 = v55 - v5 + 40;
        if (v73 >= v70 - 1)
          v74 = v70 - 1;
        else
          v74 = v55 - v5 + 40;
        v75 = v55 - v5 - v74 + 47;
        if (v75 < 0x78)
          goto LABEL_71;
        if (v73 >= v70 - 1)
          v73 = v70 - 1;
        if (v71 < (uint8x8_t *)&v61->i8[((v55 - v5 - v73 + 47) >> 3) + 1] && (unint64_t)v61 < v1 + 10656)
        {
LABEL_71:
          v78 = *(_QWORD *)(v1 + 10648);
          v79 = v61;
          v80 = 48 - v58;
LABEL_72:
          v106 = (uint8x8_t)(v78 + 1);
          do
          {
            v67 += 8;
            v107 = v79->u8[0];
            v79 = (uint8x8_t *)((char *)v79 + 1);
            *(_QWORD *)&v56 |= (unint64_t)v107 << v80;
            *v71 = v106;
            v80 -= 8;
            ++*(_QWORD *)&v106;
          }
          while (v80 >= v70);
          goto LABEL_74;
        }
        v77 = (v75 >> 3) + 1;
        v78 = *(_QWORD *)&v72 + (v77 & 0x3FFFFFF8);
        v79 = (uint8x8_t *)((char *)v61 + (v77 & 0x3FFFFFF8));
        v80 = v69 - 8 * (v77 & 0x3FFFFFF8);
        v81 = vdupq_n_s32(v69);
        v82 = vaddq_s32(v81, (int32x4_t)xmmword_208F3A6A0);
        v83 = vaddq_s32(v81, (int32x4_t)xmmword_208F3A6B0);
        v84 = 0uLL;
        v85 = (int32x4_t)v67;
        v86 = (int8x16_t)(unint64_t)v56;
        v87.i64[0] = 0x800000008;
        v87.i64[1] = 0x800000008;
        v88.i64[0] = 0x3F0000003FLL;
        v88.i64[1] = 0x3F0000003FLL;
        v89 = v77 & 0x3FFFFFF8;
        v90 = 0uLL;
        v91 = 0uLL;
        v92 = 0uLL;
        do
        {
          v85 = vaddq_s32(v85, v87);
          v93 = *v61++;
          v84 = vaddq_s32(v84, v87);
          v94 = vmovl_u8(v93);
          v95 = vmovl_high_u16(v94);
          v96.i64[0] = v95.u32[2];
          v96.i64[1] = v95.u32[3];
          v97 = v96;
          v96.i64[0] = v95.u32[0];
          v96.i64[1] = v95.u32[1];
          v98 = v96;
          v99 = vmovl_u16(*(uint16x4_t *)v94.i8);
          v96.i64[0] = v99.u32[2];
          v96.i64[1] = v99.u32[3];
          v100 = v96;
          v96.i64[0] = v99.u32[0];
          v96.i64[1] = v99.u32[1];
          v101 = v96;
          v96.i64[0] = v82.u32[2];
          v96.i64[1] = v82.u32[3];
          v102 = v96;
          v96.i64[0] = v82.u32[0];
          v96.i64[1] = v82.u32[1];
          v103 = v96;
          v96.i64[0] = v83.u32[2];
          v96.i64[1] = v83.u32[3];
          v104 = v96;
          v96.i64[0] = v83.u32[0];
          v96.i64[1] = v83.u32[1];
          v92 = vorrq_s8((int8x16_t)vshlq_u64(v97, v102), v92);
          v91 = vorrq_s8((int8x16_t)vshlq_u64(v98, v103), v91);
          v90 = vorrq_s8((int8x16_t)vshlq_u64(v100, v104), v90);
          v86 = vorrq_s8((int8x16_t)vshlq_u64(v101, v96), v86);
          *(_QWORD *)&v72 += 8;
          v83 = vaddq_s32(v83, v88);
          v82 = vaddq_s32(v82, v88);
          v89 -= 8;
        }
        while (v89);
        *v71 = v72;
        v105 = vorrq_s8(vorrq_s8(v86, v91), vorrq_s8(v90, v92));
        v56 = vorr_s8(*(int8x8_t *)v105.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v105, v105, 8uLL));
        v67 = vaddvq_s32(vaddq_s32(v85, v84));
        if ((v77 & 0x3FFFFFF8) != v77)
          goto LABEL_72;
      }
    }
LABEL_74:
    v58 = v67;
    v60 = (int8x8_t)(*(_QWORD *)&v56 - (v59 << 56));
    if (*(_QWORD *)&v56 < (unint64_t)(v59 << 56))
      goto LABEL_41;
    goto LABEL_75;
  }
LABEL_342:
  v4429 = (unsigned __int8 *)(v1 + 10165);
  if (*(_DWORD *)(v1 + 7412))
  {
    v493 = (((v57 << 7) - 128) >> 8) + 1;
    if ((v58 & 0x80000000) == 0)
    {
      v494 = (int8x8_t)(*(_QWORD *)&v56 - (v493 << 56));
      if (*(_QWORD *)&v56 < (unint64_t)(v493 << 56))
      {
LABEL_345:
        v4522 = 0;
LABEL_380:
        v542 = vp8_norm[v493];
        v543 = (int8x8_t)(*(_QWORD *)&v56 << v542);
        v544 = v58 - v542;
        *(int8x8_t *)(v1 + 10656) = v543;
        *(_DWORD *)(v1 + 10664) = v58 - v542;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v493 << v542;
        v545 = ((((_DWORD)v493 << v542 << 7) - 128) >> 8) + 1;
        if (((v58 - v542) & 0x80000000) != 0)
        {
          v546 = *(uint8x8_t **)(v1 + 10648);
          v547 = 48 - v544;
          v548 = *(_QWORD *)(v1 + 10640) - (_QWORD)v546;
          v549 = 8 * v548;
          v550 = 56 - 8 * v548 - v544;
          v551 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v551)
          {
            if (v548 >= 9)
              v552 = 9;
            else
              v552 = *(_QWORD *)(v1 + 10640) - (_QWORD)v546;
            v551(*(_QWORD *)(v1 + 10680), v546, &v4539, v552);
            v546 = (uint8x8_t *)&v4539;
          }
          if (v550 >= 0)
            v544 += 0x40000000;
          v553 = v549 || v550 <= -1;
          v554 = v550 & ~(v550 >> 31);
          if (v553 && v547 >= v554)
          {
            v607 = (uint8x8_t *)(v1 + 10648);
            v608 = *(uint8x8_t *)(v1 + 10648);
            v609 = v542 - v58 + 40;
            if (v609 >= v554 - 1)
              v610 = v554 - 1;
            else
              v610 = v542 - v58 + 40;
            v611 = v542 - v58 - v610 + 47;
            if (v611 < 0x78)
            {
              v612 = *(_QWORD *)(v1 + 10648);
              v613 = v546;
              v614 = v547;
              goto LABEL_484;
            }
            if (v609 >= v554 - 1)
              v609 = v554 - 1;
            if (v607 < (uint8x8_t *)&v546->i8[((v542 - v58 - v609 + 47) >> 3) + 1]
              && (unint64_t)v546 < v1 + 10656)
            {
              v612 = *(_QWORD *)(v1 + 10648);
              v613 = v546;
              v614 = v547;
LABEL_484:
              v697 = (uint8x8_t)(v612 + 1);
              do
              {
                v544 += 8;
                v698 = v613->u8[0];
                v613 = (uint8x8_t *)((char *)v613 + 1);
                *(_QWORD *)&v543 |= (unint64_t)v698 << v614;
                *v607 = v697;
                v614 -= 8;
                ++*(_QWORD *)&v697;
              }
              while (v614 >= v554);
              goto LABEL_396;
            }
            v644 = (v611 >> 3) + 1;
            v612 = *(_QWORD *)&v608 + (v644 & 0x3FFFFFF8);
            v613 = (uint8x8_t *)((char *)v546 + (v644 & 0x3FFFFFF8));
            v614 = v547 - 8 * (v644 & 0x3FFFFFF8);
            v645 = vdupq_n_s32(v547);
            v646 = vaddq_s32(v645, (int32x4_t)xmmword_208F3A6A0);
            v647 = vaddq_s32(v645, (int32x4_t)xmmword_208F3A6B0);
            v648 = 0uLL;
            v649 = (int32x4_t)v544;
            v650 = (int8x16_t)(unint64_t)v543;
            v651.i64[0] = 0x800000008;
            v651.i64[1] = 0x800000008;
            v652.i64[0] = 0x3F0000003FLL;
            v652.i64[1] = 0x3F0000003FLL;
            v653 = v644 & 0x3FFFFFF8;
            v654 = 0uLL;
            v655 = 0uLL;
            v656 = 0uLL;
            do
            {
              v649 = vaddq_s32(v649, v651);
              v657 = *v546++;
              v648 = vaddq_s32(v648, v651);
              v658 = vmovl_u8(v657);
              v659 = vmovl_high_u16(v658);
              v660.i64[0] = v659.u32[2];
              v660.i64[1] = v659.u32[3];
              v661 = v660;
              v660.i64[0] = v659.u32[0];
              v660.i64[1] = v659.u32[1];
              v662 = v660;
              v663 = vmovl_u16(*(uint16x4_t *)v658.i8);
              v660.i64[0] = v663.u32[2];
              v660.i64[1] = v663.u32[3];
              v664 = v660;
              v660.i64[0] = v663.u32[0];
              v660.i64[1] = v663.u32[1];
              v665 = v660;
              v660.i64[0] = v646.u32[2];
              v660.i64[1] = v646.u32[3];
              v666 = v660;
              v660.i64[0] = v646.u32[0];
              v660.i64[1] = v646.u32[1];
              v667 = v660;
              v660.i64[0] = v647.u32[2];
              v660.i64[1] = v647.u32[3];
              v668 = v660;
              v660.i64[0] = v647.u32[0];
              v660.i64[1] = v647.u32[1];
              v656 = vorrq_s8((int8x16_t)vshlq_u64(v661, v666), v656);
              v655 = vorrq_s8((int8x16_t)vshlq_u64(v662, v667), v655);
              v654 = vorrq_s8((int8x16_t)vshlq_u64(v664, v668), v654);
              v650 = vorrq_s8((int8x16_t)vshlq_u64(v665, v660), v650);
              *(_QWORD *)&v608 += 8;
              v647 = vaddq_s32(v647, v652);
              v646 = vaddq_s32(v646, v652);
              v653 -= 8;
            }
            while (v653);
            *v607 = v608;
            v669 = vorrq_s8(vorrq_s8(v650, v655), vorrq_s8(v654, v656));
            v543 = vorr_s8(*(int8x8_t *)v669.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v669, v669, 8uLL));
            v544 = vaddvq_s32(vaddq_s32(v649, v648));
            if ((v644 & 0x3FFFFFF8) != v644)
              goto LABEL_484;
          }
        }
LABEL_396:
        v556 = (int8x8_t)(*(_QWORD *)&v543 - (v545 << 56));
        if (*(_QWORD *)&v543 >= (unint64_t)(v545 << 56))
        {
          LODWORD(v545) = *(_DWORD *)(v1 + 10668) - v545;
          v557 = 64;
          v543 = v556;
        }
        else
        {
          v557 = 0;
        }
        v558 = vp8_norm[v545];
        v559 = (int8x8_t)(*(_QWORD *)&v543 << v558);
        v560 = v544 - v558;
        *(int8x8_t *)(v1 + 10656) = v559;
        *(_DWORD *)(v1 + 10664) = v544 - v558;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v545 << v558;
        v561 = ((((_DWORD)v545 << v558 << 7) - 128) >> 8) + 1;
        if (((v544 - v558) & 0x80000000) != 0)
        {
          v562 = *(uint8x8_t **)(v1 + 10648);
          v563 = 48 - v560;
          v564 = *(_QWORD *)(v1 + 10640) - (_QWORD)v562;
          v565 = 8 * v564;
          v566 = 56 - 8 * v564 - v560;
          v567 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v567)
          {
            if (v564 >= 9)
              v568 = 9;
            else
              v568 = *(_QWORD *)(v1 + 10640) - (_QWORD)v562;
            v567(*(_QWORD *)(v1 + 10680), v562, &v4539, v568);
            v562 = (uint8x8_t *)&v4539;
          }
          if (v566 >= 0)
            v560 += 0x40000000;
          v569 = v565 || v566 <= -1;
          v570 = v566 & ~(v566 >> 31);
          if (v569 && v563 >= v570)
          {
            v572 = (uint8x8_t *)(v1 + 10648);
            v573 = *(uint8x8_t *)(v1 + 10648);
            v574 = v558 - v544 + 40;
            if (v574 >= v570 - 1)
              v575 = v570 - 1;
            else
              v575 = v558 - v544 + 40;
            v576 = v558 - v544 - v575 + 47;
            if (v576 < 0x78)
              goto LABEL_434;
            if (v574 >= v570 - 1)
              v574 = v570 - 1;
            if (v572 >= (uint8x8_t *)&v562->i8[((v558 - v544 - v574 + 47) >> 3) + 1]
              || (unint64_t)v562 >= v1 + 10656)
            {
              v578 = (v576 >> 3) + 1;
              v579 = *(_QWORD *)&v573 + (v578 & 0x3FFFFFF8);
              v580 = (uint8x8_t *)((char *)v562 + (v578 & 0x3FFFFFF8));
              v581 = v563 - 8 * (v578 & 0x3FFFFFF8);
              v582 = vdupq_n_s32(v563);
              v583 = vaddq_s32(v582, (int32x4_t)xmmword_208F3A6A0);
              v584 = vaddq_s32(v582, (int32x4_t)xmmword_208F3A6B0);
              v585 = 0uLL;
              v586 = (int32x4_t)v560;
              v587 = (int8x16_t)(unint64_t)v559;
              v588.i64[0] = 0x800000008;
              v588.i64[1] = 0x800000008;
              v589.i64[0] = 0x3F0000003FLL;
              v589.i64[1] = 0x3F0000003FLL;
              v590 = v578 & 0x3FFFFFF8;
              v591 = 0uLL;
              v592 = 0uLL;
              v593 = 0uLL;
              do
              {
                v586 = vaddq_s32(v586, v588);
                v594 = *v562++;
                v585 = vaddq_s32(v585, v588);
                v595 = vmovl_u8(v594);
                v596 = vmovl_high_u16(v595);
                v597.i64[0] = v596.u32[2];
                v597.i64[1] = v596.u32[3];
                v598 = v597;
                v597.i64[0] = v596.u32[0];
                v597.i64[1] = v596.u32[1];
                v599 = v597;
                v600 = vmovl_u16(*(uint16x4_t *)v595.i8);
                v597.i64[0] = v600.u32[2];
                v597.i64[1] = v600.u32[3];
                v601 = v597;
                v597.i64[0] = v600.u32[0];
                v597.i64[1] = v600.u32[1];
                v602 = v597;
                v597.i64[0] = v583.u32[2];
                v597.i64[1] = v583.u32[3];
                v603 = v597;
                v597.i64[0] = v583.u32[0];
                v597.i64[1] = v583.u32[1];
                v604 = v597;
                v597.i64[0] = v584.u32[2];
                v597.i64[1] = v584.u32[3];
                v605 = v597;
                v597.i64[0] = v584.u32[0];
                v597.i64[1] = v584.u32[1];
                v593 = vorrq_s8((int8x16_t)vshlq_u64(v598, v603), v593);
                v592 = vorrq_s8((int8x16_t)vshlq_u64(v599, v604), v592);
                v591 = vorrq_s8((int8x16_t)vshlq_u64(v601, v605), v591);
                v587 = vorrq_s8((int8x16_t)vshlq_u64(v602, v597), v587);
                *(_QWORD *)&v573 += 8;
                v584 = vaddq_s32(v584, v589);
                v583 = vaddq_s32(v583, v589);
                v590 -= 8;
              }
              while (v590);
              *v572 = v573;
              v606 = vorrq_s8(vorrq_s8(v587, v592), vorrq_s8(v591, v593));
              v559 = vorr_s8(*(int8x8_t *)v606.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v606, v606, 8uLL));
              v560 = vaddvq_s32(vaddq_s32(v586, v585));
              if ((v578 & 0x3FFFFFF8) == v578)
                goto LABEL_437;
            }
            else
            {
LABEL_434:
              v579 = *(_QWORD *)(v1 + 10648);
              v580 = v562;
              v581 = v563;
            }
            v615 = (uint8x8_t)(v579 + 1);
            do
            {
              v560 += 8;
              v616 = v580->u8[0];
              v580 = (uint8x8_t *)((char *)v580 + 1);
              *(_QWORD *)&v559 |= (unint64_t)v616 << v581;
              *v572 = v615;
              v581 -= 8;
              ++*(_QWORD *)&v615;
            }
            while (v581 >= v570);
          }
        }
LABEL_437:
        v617 = (int8x8_t)(*(_QWORD *)&v559 - (v561 << 56));
        if (*(_QWORD *)&v559 >= (unint64_t)(v561 << 56))
        {
          LODWORD(v561) = *(_DWORD *)(v1 + 10668) - v561;
          v618 = 32;
          v559 = v617;
        }
        else
        {
          v618 = 0;
        }
        v619 = vp8_norm[v561];
        v620 = (_DWORD)v561 << v619;
        v621 = (int8x8_t)(*(_QWORD *)&v559 << v619);
        v622 = v560 - v619;
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v559 << v619;
        *(_DWORD *)(v1 + 10664) = v560 - v619;
        *(_DWORD *)(v1 + 10668) = v620;
        v623 = (((v620 << 7) - 128) >> 8) + 1;
        if (((v560 - v619) & 0x80000000) != 0)
        {
          v4502 = v557;
          v624 = v618;
          v625 = *(uint8x8_t **)(v1 + 10648);
          v626 = 48 - v622;
          v627 = *(_QWORD *)(v1 + 10640) - (_QWORD)v625;
          v628 = 8 * v627;
          v629 = 56 - 8 * v627 - v622;
          v630 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v630)
          {
            if (v627 >= 9)
              v631 = 9;
            else
              v631 = *(_QWORD *)(v1 + 10640) - (_QWORD)v625;
            v630(*(_QWORD *)(v1 + 10680), v625, &v4539, v631);
            v625 = (uint8x8_t *)&v4539;
          }
          if (v629 >= 0)
            v622 += 0x40000000;
          if (v628)
            v632 = 1;
          else
            v632 = v629 <= -1;
          v633 = v629 & ~(v629 >> 31);
          if (!v632 || v626 < v633)
          {
            v618 = v624;
            v557 = v4502;
          }
          else
          {
            v635 = (uint8x8_t *)(v1 + 10648);
            v636 = *(uint8x8_t *)(v1 + 10648);
            v637 = v619 - v560 + 40;
            if (v637 >= v633 - 1)
              v638 = v633 - 1;
            else
              v638 = v619 - v560 + 40;
            v639 = v619 - v560 - v638 + 47;
            v618 = v624;
            if (v639 >= 0x78)
            {
              if (v637 >= v633 - 1)
                v637 = v633 - 1;
              v670 = v635 >= (uint8x8_t *)&v625->i8[((v619 - v560 - v637 + 47) >> 3) + 1]
                  || (unint64_t)v625 >= v1 + 10656;
              v557 = v4502;
              if (v670)
              {
                v671 = (v639 >> 3) + 1;
                v640 = *(_QWORD *)&v636 + (v671 & 0x3FFFFFF8);
                v641 = (uint8x8_t *)((char *)v625 + (v671 & 0x3FFFFFF8));
                v642 = v626 - 8 * (v671 & 0x3FFFFFF8);
                v672 = vdupq_n_s32(v626);
                v673 = vaddq_s32(v672, (int32x4_t)xmmword_208F3A6A0);
                v674 = vaddq_s32(v672, (int32x4_t)xmmword_208F3A6B0);
                v675 = 0uLL;
                v676 = (int32x4_t)v622;
                v677 = (int8x16_t)(unint64_t)v621;
                v678.i64[0] = 0x800000008;
                v678.i64[1] = 0x800000008;
                v679.i64[0] = 0x3F0000003FLL;
                v679.i64[1] = 0x3F0000003FLL;
                v680 = v671 & 0x3FFFFFF8;
                v681 = 0uLL;
                v682 = 0uLL;
                v683 = 0uLL;
                do
                {
                  v676 = vaddq_s32(v676, v678);
                  v684 = *v625++;
                  v675 = vaddq_s32(v675, v678);
                  v685 = vmovl_u8(v684);
                  v686 = vmovl_high_u16(v685);
                  v687.i64[0] = v686.u32[2];
                  v687.i64[1] = v686.u32[3];
                  v688 = v687;
                  v687.i64[0] = v686.u32[0];
                  v687.i64[1] = v686.u32[1];
                  v689 = v687;
                  v690 = vmovl_u16(*(uint16x4_t *)v685.i8);
                  v687.i64[0] = v690.u32[2];
                  v687.i64[1] = v690.u32[3];
                  v691 = v687;
                  v687.i64[0] = v690.u32[0];
                  v687.i64[1] = v690.u32[1];
                  v692 = v687;
                  v687.i64[0] = v673.u32[2];
                  v687.i64[1] = v673.u32[3];
                  v693 = v687;
                  v687.i64[0] = v673.u32[0];
                  v687.i64[1] = v673.u32[1];
                  v694 = v687;
                  v687.i64[0] = v674.u32[2];
                  v687.i64[1] = v674.u32[3];
                  v695 = v687;
                  v687.i64[0] = v674.u32[0];
                  v687.i64[1] = v674.u32[1];
                  v683 = vorrq_s8((int8x16_t)vshlq_u64(v688, v693), v683);
                  v682 = vorrq_s8((int8x16_t)vshlq_u64(v689, v694), v682);
                  v681 = vorrq_s8((int8x16_t)vshlq_u64(v691, v695), v681);
                  v677 = vorrq_s8((int8x16_t)vshlq_u64(v692, v687), v677);
                  *(_QWORD *)&v636 += 8;
                  v674 = vaddq_s32(v674, v679);
                  v673 = vaddq_s32(v673, v679);
                  v680 -= 8;
                }
                while (v680);
                *v635 = v636;
                v696 = vorrq_s8(vorrq_s8(v677, v682), vorrq_s8(v681, v683));
                v621 = vorr_s8(*(int8x8_t *)v696.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v696, v696, 8uLL));
                v622 = vaddvq_s32(vaddq_s32(v676, v675));
                if ((v671 & 0x3FFFFFF8) == v671)
                  goto LABEL_489;
              }
              else
              {
                v640 = *(_QWORD *)(v1 + 10648);
                v641 = v625;
                v642 = v626;
              }
            }
            else
            {
              v640 = *(_QWORD *)(v1 + 10648);
              v641 = v625;
              v642 = v626;
              v557 = v4502;
            }
            v699 = (uint8x8_t)(v640 + 1);
            do
            {
              v622 += 8;
              v700 = v641->u8[0];
              v641 = (uint8x8_t *)((char *)v641 + 1);
              *(_QWORD *)&v621 |= (unint64_t)v700 << v642;
              *v635 = v699;
              v642 -= 8;
              ++*(_QWORD *)&v699;
            }
            while (v642 >= v633);
          }
        }
LABEL_489:
        v701 = (int8x8_t)(*(_QWORD *)&v621 - (v623 << 56));
        if (*(_QWORD *)&v621 >= (unint64_t)(v623 << 56))
        {
          LODWORD(v623) = *(_DWORD *)(v1 + 10668) - v623;
          v702 = 16;
          v621 = v701;
        }
        else
        {
          v702 = 0;
        }
        v703 = vp8_norm[v623];
        v704 = (_DWORD)v623 << v703;
        v705 = (int8x8_t)(*(_QWORD *)&v621 << v703);
        v706 = v622 - v703;
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v621 << v703;
        *(_DWORD *)(v1 + 10664) = v622 - v703;
        *(_DWORD *)(v1 + 10668) = v704;
        v707 = (((v704 << 7) - 128) >> 8) + 1;
        if (((v622 - v703) & 0x80000000) != 0)
        {
          v4489 = v702;
          v4503 = v557;
          v708 = *(uint8x8_t **)(v1 + 10648);
          v709 = 48 - v706;
          v710 = *(_QWORD *)(v1 + 10640) - (_QWORD)v708;
          v711 = 8 * v710;
          v712 = 56 - 8 * v710 - v706;
          v713 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v713)
          {
            if (v710 >= 9)
              v714 = 9;
            else
              v714 = *(_QWORD *)(v1 + 10640) - (_QWORD)v708;
            v715 = v618;
            v713(*(_QWORD *)(v1 + 10680), v708, &v4539, v714);
            v709 = 48 - v706;
            v618 = v715;
            v708 = (uint8x8_t *)&v4539;
          }
          if (v712 >= 0)
            v706 += 0x40000000;
          if (v711)
            v716 = 1;
          else
            v716 = v712 <= -1;
          v717 = v712 & ~(v712 >> 31);
          if (!v716 || v709 < v717)
          {
            v557 = v4503;
            v702 = v4489;
          }
          else
          {
            v719 = (uint8x8_t *)(v1 + 10648);
            v720 = *(uint8x8_t *)(v1 + 10648);
            v721 = v703 - v622 + 40;
            if (v721 >= v717 - 1)
              v722 = v717 - 1;
            else
              v722 = v703 - v622 + 40;
            v723 = v703 - v622 - v722 + 47;
            v557 = v4503;
            v702 = v4489;
            if (v723 < 0x78)
              goto LABEL_524;
            if (v721 >= v717 - 1)
              v721 = v717 - 1;
            if (v719 >= (uint8x8_t *)&v708->i8[((v703 - v622 - v721 + 47) >> 3) + 1]
              || (unint64_t)v708 >= v1 + 10656)
            {
              v725 = (v723 >> 3) + 1;
              v726 = *(_QWORD *)&v720 + (v725 & 0x3FFFFFF8);
              v727 = (uint8x8_t *)((char *)v708 + (v725 & 0x3FFFFFF8));
              v728 = v709 - 8 * (v725 & 0x3FFFFFF8);
              v729 = vdupq_n_s32(v709);
              v730 = vaddq_s32(v729, (int32x4_t)xmmword_208F3A6A0);
              v731 = vaddq_s32(v729, (int32x4_t)xmmword_208F3A6B0);
              v732 = 0uLL;
              v733 = (int32x4_t)v706;
              v734 = (int8x16_t)(unint64_t)v705;
              v735.i64[0] = 0x800000008;
              v735.i64[1] = 0x800000008;
              v736.i64[0] = 0x3F0000003FLL;
              v736.i64[1] = 0x3F0000003FLL;
              v737 = v725 & 0x3FFFFFF8;
              v738 = 0uLL;
              v739 = 0uLL;
              v740 = 0uLL;
              do
              {
                v733 = vaddq_s32(v733, v735);
                v741 = *v708++;
                v732 = vaddq_s32(v732, v735);
                v742 = vmovl_u8(v741);
                v743 = vmovl_high_u16(v742);
                v744.i64[0] = v743.u32[2];
                v744.i64[1] = v743.u32[3];
                v745 = v744;
                v744.i64[0] = v743.u32[0];
                v744.i64[1] = v743.u32[1];
                v746 = v744;
                v747 = vmovl_u16(*(uint16x4_t *)v742.i8);
                v744.i64[0] = v747.u32[2];
                v744.i64[1] = v747.u32[3];
                v748 = v744;
                v744.i64[0] = v747.u32[0];
                v744.i64[1] = v747.u32[1];
                v749 = v744;
                v744.i64[0] = v730.u32[2];
                v744.i64[1] = v730.u32[3];
                v750 = v744;
                v744.i64[0] = v730.u32[0];
                v744.i64[1] = v730.u32[1];
                v751 = v744;
                v744.i64[0] = v731.u32[2];
                v744.i64[1] = v731.u32[3];
                v752 = v744;
                v744.i64[0] = v731.u32[0];
                v744.i64[1] = v731.u32[1];
                v740 = vorrq_s8((int8x16_t)vshlq_u64(v745, v750), v740);
                v739 = vorrq_s8((int8x16_t)vshlq_u64(v746, v751), v739);
                v738 = vorrq_s8((int8x16_t)vshlq_u64(v748, v752), v738);
                v734 = vorrq_s8((int8x16_t)vshlq_u64(v749, v744), v734);
                *(_QWORD *)&v720 += 8;
                v731 = vaddq_s32(v731, v736);
                v730 = vaddq_s32(v730, v736);
                v737 -= 8;
              }
              while (v737);
              *v719 = v720;
              v753 = vorrq_s8(vorrq_s8(v734, v739), vorrq_s8(v738, v740));
              v705 = vorr_s8(*(int8x8_t *)v753.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v753, v753, 8uLL));
              v706 = vaddvq_s32(vaddq_s32(v733, v732));
              if ((v725 & 0x3FFFFFF8) == v725)
                goto LABEL_527;
            }
            else
            {
LABEL_524:
              v726 = *(_QWORD *)(v1 + 10648);
              v727 = v708;
              v728 = v709;
            }
            v754 = (uint8x8_t)(v726 + 1);
            do
            {
              v706 += 8;
              v755 = v727->u8[0];
              v727 = (uint8x8_t *)((char *)v727 + 1);
              *(_QWORD *)&v705 |= (unint64_t)v755 << v728;
              *v719 = v754;
              v728 -= 8;
              ++*(_QWORD *)&v754;
            }
            while (v728 >= v717);
          }
        }
LABEL_527:
        v756 = (int8x8_t)(*(_QWORD *)&v705 - (v707 << 56));
        if (*(_QWORD *)&v705 >= (unint64_t)(v707 << 56))
        {
          LODWORD(v707) = *(_DWORD *)(v1 + 10668) - v707;
          v757 = 8;
          v705 = v756;
        }
        else
        {
          v757 = 0;
        }
        v758 = v557 | v4522;
        v759 = vp8_norm[v707];
        v760 = (int8x8_t)(*(_QWORD *)&v705 << v759);
        v761 = v706 - v759;
        *(int8x8_t *)(v1 + 10656) = v760;
        *(_DWORD *)(v1 + 10664) = v706 - v759;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v707 << v759;
        v762 = ((((_DWORD)v707 << v759 << 7) - 128) >> 8) + 1;
        if (((v706 - v759) & 0x80000000) == 0)
        {
          v763 = v758 | v618;
          v764 = (int8x8_t)(*(_QWORD *)&v760 - (v762 << 56));
          if (*(_QWORD *)&v760 < (unint64_t)(v762 << 56))
          {
LABEL_532:
            v765 = 0;
            goto LABEL_569;
          }
LABEL_568:
          LODWORD(v762) = *(_DWORD *)(v1 + 10668) - v762;
          v765 = 4;
          v760 = v764;
LABEL_569:
          v815 = v763 | v702;
          v816 = vp8_norm[v762];
          v817 = (_DWORD)v762 << v816;
          v818 = (int8x8_t)(*(_QWORD *)&v760 << v816);
          v819 = v761 - v816;
          *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v760 << v816;
          *(_DWORD *)(v1 + 10664) = v761 - v816;
          *(_DWORD *)(v1 + 10668) = v817;
          v820 = (((v817 << 7) - 128) >> 8) + 1;
          if (((v761 - v816) & 0x80000000) == 0)
          {
            v821 = v815 | v757;
            v822 = (int8x8_t)(*(_QWORD *)&v818 - (v820 << 56));
            if (*(_QWORD *)&v818 < (unint64_t)(v820 << 56))
            {
LABEL_571:
              v823 = 0;
              goto LABEL_606;
            }
LABEL_605:
            LODWORD(v820) = *(_DWORD *)(v1 + 10668) - v820;
            v823 = 2;
            v818 = v822;
LABEL_606:
            v872 = v821 | v765;
            v873 = vp8_norm[v820];
            v874 = (_DWORD)v820 << v873;
            v875 = (int8x8_t)(*(_QWORD *)&v818 << v873);
            v876 = v819 - v873;
            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v818 << v873;
            *(_DWORD *)(v1 + 10664) = v819 - v873;
            *(_DWORD *)(v1 + 10668) = v874;
            v877 = (((v874 << 7) - 128) >> 8) + 1;
            if (((v819 - v873) & 0x80000000) == 0)
            {
              v878 = v872 | v823;
              v879 = (int8x8_t)(*(_QWORD *)&v875 - (v877 << 56));
              if (*(_QWORD *)&v875 < (unint64_t)(v877 << 56))
              {
LABEL_608:
                v880 = 0;
LABEL_643:
                v928 = vp8_norm[v877];
                v929 = (int8x8_t)(*(_QWORD *)&v875 << v928);
                v930 = v876 - v928;
                *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v875 << v928;
                *(_DWORD *)(v1 + 10664) = v876 - v928;
                *(_DWORD *)(v1 + 10668) = (_DWORD)v877 << v928;
                *v4458 = v878 | v880;
                v931 = ((((_DWORD)v877 << v928 << 7) - 128) >> 8) + 1;
                if (((v876 - v928) & 0x80000000) != 0)
                {
                  v932 = *(uint8x8_t **)(v1 + 10648);
                  v933 = 48 - v930;
                  v934 = *(_QWORD *)(v1 + 10640) - (_QWORD)v932;
                  v935 = 8 * v934;
                  v936 = 56 - 8 * v934 - v930;
                  v937 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                  if (v937)
                  {
                    if (v934 >= 9)
                      v938 = 9;
                    else
                      v938 = *(_QWORD *)(v1 + 10640) - (_QWORD)v932;
                    v937(*(_QWORD *)(v1 + 10680), v932, &v4539, v938);
                    v932 = (uint8x8_t *)&v4539;
                  }
                  if (v936 >= 0)
                    v930 += 0x40000000;
                  v939 = v935 || v936 <= -1;
                  v940 = v936 & ~(v936 >> 31);
                  if (v939 && v933 >= v940)
                  {
                    v942 = (uint8x8_t *)(v1 + 10648);
                    v943 = *(uint8x8_t *)(v1 + 10648);
                    v944 = v928 - v876 + 40;
                    if (v944 >= v940 - 1)
                      v945 = v940 - 1;
                    else
                      v945 = v928 - v876 + 40;
                    v946 = v928 - v876 - v945 + 47;
                    if (v946 < 0x78)
                      goto LABEL_673;
                    if (v944 >= v940 - 1)
                      v944 = v940 - 1;
                    if (v942 < (uint8x8_t *)&v932->i8[((v928 - v876 - v944 + 47) >> 3) + 1]
                      && (unint64_t)v932 < v1 + 10656)
                    {
LABEL_673:
                      v949 = *(_QWORD *)(v1 + 10648);
                      v950 = v932;
                      v951 = v933;
LABEL_674:
                      v977 = (uint8x8_t)(v949 + 1);
                      do
                      {
                        v930 += 8;
                        v978 = v950->u8[0];
                        v950 = (uint8x8_t *)((char *)v950 + 1);
                        *(_QWORD *)&v929 |= (unint64_t)v978 << v951;
                        *v942 = v977;
                        v951 -= 8;
                        ++*(_QWORD *)&v977;
                      }
                      while (v951 >= v940);
                      goto LABEL_676;
                    }
                    v948 = (v946 >> 3) + 1;
                    v949 = *(_QWORD *)&v943 + (v948 & 0x3FFFFFF8);
                    v950 = (uint8x8_t *)((char *)v932 + (v948 & 0x3FFFFFF8));
                    v951 = v933 - 8 * (v948 & 0x3FFFFFF8);
                    v952 = vdupq_n_s32(v933);
                    v953 = vaddq_s32(v952, (int32x4_t)xmmword_208F3A6A0);
                    v954 = vaddq_s32(v952, (int32x4_t)xmmword_208F3A6B0);
                    v955 = 0uLL;
                    v956 = (int32x4_t)v930;
                    v957 = (int8x16_t)(unint64_t)v929;
                    v958.i64[0] = 0x800000008;
                    v958.i64[1] = 0x800000008;
                    v959.i64[0] = 0x3F0000003FLL;
                    v959.i64[1] = 0x3F0000003FLL;
                    v960 = v948 & 0x3FFFFFF8;
                    v961 = 0uLL;
                    v962 = 0uLL;
                    v963 = 0uLL;
                    do
                    {
                      v956 = vaddq_s32(v956, v958);
                      v964 = *v932++;
                      v955 = vaddq_s32(v955, v958);
                      v965 = vmovl_u8(v964);
                      v966 = vmovl_high_u16(v965);
                      v967.i64[0] = v966.u32[2];
                      v967.i64[1] = v966.u32[3];
                      v968 = v967;
                      v967.i64[0] = v966.u32[0];
                      v967.i64[1] = v966.u32[1];
                      v969 = v967;
                      v970 = vmovl_u16(*(uint16x4_t *)v965.i8);
                      v967.i64[0] = v970.u32[2];
                      v967.i64[1] = v970.u32[3];
                      v971 = v967;
                      v967.i64[0] = v970.u32[0];
                      v967.i64[1] = v970.u32[1];
                      v972 = v967;
                      v967.i64[0] = v953.u32[2];
                      v967.i64[1] = v953.u32[3];
                      v973 = v967;
                      v967.i64[0] = v953.u32[0];
                      v967.i64[1] = v953.u32[1];
                      v974 = v967;
                      v967.i64[0] = v954.u32[2];
                      v967.i64[1] = v954.u32[3];
                      v975 = v967;
                      v967.i64[0] = v954.u32[0];
                      v967.i64[1] = v954.u32[1];
                      v963 = vorrq_s8((int8x16_t)vshlq_u64(v968, v973), v963);
                      v962 = vorrq_s8((int8x16_t)vshlq_u64(v969, v974), v962);
                      v961 = vorrq_s8((int8x16_t)vshlq_u64(v971, v975), v961);
                      v957 = vorrq_s8((int8x16_t)vshlq_u64(v972, v967), v957);
                      *(_QWORD *)&v943 += 8;
                      v954 = vaddq_s32(v954, v959);
                      v953 = vaddq_s32(v953, v959);
                      v960 -= 8;
                    }
                    while (v960);
                    *v942 = v943;
                    v976 = vorrq_s8(vorrq_s8(v957, v962), vorrq_s8(v961, v963));
                    v929 = vorr_s8(*(int8x8_t *)v976.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v976, v976, 8uLL));
                    v930 = vaddvq_s32(vaddq_s32(v956, v955));
                    if ((v948 & 0x3FFFFFF8) != v948)
                      goto LABEL_674;
                  }
                }
LABEL_676:
                v979 = (int8x8_t)(*(_QWORD *)&v929 - (v931 << 56));
                if (*(_QWORD *)&v929 >= (unint64_t)(v931 << 56))
                {
                  LODWORD(v931) = *(_DWORD *)(v1 + 10668) - v931;
                  v4526 = 0x80;
                  v929 = v979;
                }
                else
                {
                  v4526 = 0;
                }
                v980 = vp8_norm[v931];
                v981 = (_DWORD)v931 << v980;
                v982 = (int8x8_t)(*(_QWORD *)&v929 << v980);
                v983 = v930 - v980;
                *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v929 << v980;
                *(_DWORD *)(v1 + 10664) = v930 - v980;
                *(_DWORD *)(v1 + 10668) = v981;
                v984 = (((v981 << 7) - 128) >> 8) + 1;
                if (((v930 - v980) & 0x80000000) != 0)
                {
                  v985 = *(uint8x8_t **)(v1 + 10648);
                  v986 = 48 - v983;
                  v987 = *(_QWORD *)(v1 + 10640) - (_QWORD)v985;
                  v988 = 8 * v987;
                  v989 = 56 - 8 * v987 - v983;
                  v990 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                  if (v990)
                  {
                    if (v987 >= 9)
                      v991 = 9;
                    else
                      v991 = *(_QWORD *)(v1 + 10640) - (_QWORD)v985;
                    v990(*(_QWORD *)(v1 + 10680), v985, &v4539, v991);
                    v985 = (uint8x8_t *)&v4539;
                  }
                  if (v989 >= 0)
                    v983 += 0x40000000;
                  v992 = v988 || v989 <= -1;
                  v993 = v989 & ~(v989 >> 31);
                  if (v992 && v986 >= v993)
                  {
                    v995 = (uint8x8_t *)(v1 + 10648);
                    v996 = *(uint8x8_t *)(v1 + 10648);
                    v997 = v980 - v930 + 40;
                    if (v997 >= v993 - 1)
                      v998 = v993 - 1;
                    else
                      v998 = v980 - v930 + 40;
                    v999 = v980 - v930 - v998 + 47;
                    if (v999 < 0x78)
                      goto LABEL_709;
                    if (v997 >= v993 - 1)
                      v997 = v993 - 1;
                    if (v995 < (uint8x8_t *)&v985->i8[((v980 - v930 - v997 + 47) >> 3) + 1]
                      && (unint64_t)v985 < v1 + 10656)
                    {
LABEL_709:
                      v1002 = *(_QWORD *)(v1 + 10648);
                      v1003 = v985;
                      v1004 = v986;
LABEL_710:
                      v1030 = (uint8x8_t)(v1002 + 1);
                      do
                      {
                        v983 += 8;
                        v1031 = v1003->u8[0];
                        v1003 = (uint8x8_t *)((char *)v1003 + 1);
                        *(_QWORD *)&v982 |= (unint64_t)v1031 << v1004;
                        *v995 = v1030;
                        v1004 -= 8;
                        ++*(_QWORD *)&v1030;
                      }
                      while (v1004 >= v993);
                      goto LABEL_712;
                    }
                    v1001 = (v999 >> 3) + 1;
                    v1002 = *(_QWORD *)&v996 + (v1001 & 0x3FFFFFF8);
                    v1003 = (uint8x8_t *)((char *)v985 + (v1001 & 0x3FFFFFF8));
                    v1004 = v986 - 8 * (v1001 & 0x3FFFFFF8);
                    v1005 = vdupq_n_s32(v986);
                    v1006 = vaddq_s32(v1005, (int32x4_t)xmmword_208F3A6A0);
                    v1007 = vaddq_s32(v1005, (int32x4_t)xmmword_208F3A6B0);
                    v1008 = 0uLL;
                    v1009 = (int32x4_t)v983;
                    v1010 = (int8x16_t)(unint64_t)v982;
                    v1011.i64[0] = 0x800000008;
                    v1011.i64[1] = 0x800000008;
                    v1012.i64[0] = 0x3F0000003FLL;
                    v1012.i64[1] = 0x3F0000003FLL;
                    v1013 = v1001 & 0x3FFFFFF8;
                    v1014 = 0uLL;
                    v1015 = 0uLL;
                    v1016 = 0uLL;
                    do
                    {
                      v1009 = vaddq_s32(v1009, v1011);
                      v1017 = *v985++;
                      v1008 = vaddq_s32(v1008, v1011);
                      v1018 = vmovl_u8(v1017);
                      v1019 = vmovl_high_u16(v1018);
                      v1020.i64[0] = v1019.u32[2];
                      v1020.i64[1] = v1019.u32[3];
                      v1021 = v1020;
                      v1020.i64[0] = v1019.u32[0];
                      v1020.i64[1] = v1019.u32[1];
                      v1022 = v1020;
                      v1023 = vmovl_u16(*(uint16x4_t *)v1018.i8);
                      v1020.i64[0] = v1023.u32[2];
                      v1020.i64[1] = v1023.u32[3];
                      v1024 = v1020;
                      v1020.i64[0] = v1023.u32[0];
                      v1020.i64[1] = v1023.u32[1];
                      v1025 = v1020;
                      v1020.i64[0] = v1006.u32[2];
                      v1020.i64[1] = v1006.u32[3];
                      v1026 = v1020;
                      v1020.i64[0] = v1006.u32[0];
                      v1020.i64[1] = v1006.u32[1];
                      v1027 = v1020;
                      v1020.i64[0] = v1007.u32[2];
                      v1020.i64[1] = v1007.u32[3];
                      v1028 = v1020;
                      v1020.i64[0] = v1007.u32[0];
                      v1020.i64[1] = v1007.u32[1];
                      v1016 = vorrq_s8((int8x16_t)vshlq_u64(v1021, v1026), v1016);
                      v1015 = vorrq_s8((int8x16_t)vshlq_u64(v1022, v1027), v1015);
                      v1014 = vorrq_s8((int8x16_t)vshlq_u64(v1024, v1028), v1014);
                      v1010 = vorrq_s8((int8x16_t)vshlq_u64(v1025, v1020), v1010);
                      *(_QWORD *)&v996 += 8;
                      v1007 = vaddq_s32(v1007, v1012);
                      v1006 = vaddq_s32(v1006, v1012);
                      v1013 -= 8;
                    }
                    while (v1013);
                    *v995 = v996;
                    v1029 = vorrq_s8(vorrq_s8(v1010, v1015), vorrq_s8(v1014, v1016));
                    v982 = vorr_s8(*(int8x8_t *)v1029.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1029, v1029, 8uLL));
                    v983 = vaddvq_s32(vaddq_s32(v1009, v1008));
                    if ((v1001 & 0x3FFFFFF8) != v1001)
                      goto LABEL_710;
                  }
                }
LABEL_712:
                v1032 = (int8x8_t)(*(_QWORD *)&v982 - (v984 << 56));
                if (*(_QWORD *)&v982 >= (unint64_t)(v984 << 56))
                {
                  LODWORD(v984) = *(_DWORD *)(v1 + 10668) - v984;
                  v1033 = 64;
                  v982 = v1032;
                }
                else
                {
                  v1033 = 0;
                }
                v1034 = vp8_norm[v984];
                v1035 = (_DWORD)v984 << v1034;
                v1036 = (int8x8_t)(*(_QWORD *)&v982 << v1034);
                v1037 = v983 - v1034;
                *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v982 << v1034;
                *(_DWORD *)(v1 + 10664) = v983 - v1034;
                *(_DWORD *)(v1 + 10668) = v1035;
                v1038 = (((v1035 << 7) - 128) >> 8) + 1;
                if (((v983 - v1034) & 0x80000000) != 0)
                {
                  v1039 = *(uint8x8_t **)(v1 + 10648);
                  v1040 = 48 - v1037;
                  v1041 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1039;
                  v1042 = 8 * v1041;
                  v1043 = 56 - 8 * v1041 - v1037;
                  v1044 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                  if (v1044)
                  {
                    if (v1041 >= 9)
                      v1045 = 9;
                    else
                      v1045 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1039;
                    v1044(*(_QWORD *)(v1 + 10680), v1039, &v4539, v1045);
                    v1039 = (uint8x8_t *)&v4539;
                  }
                  if (v1043 >= 0)
                    v1037 += 0x40000000;
                  v1046 = v1042 || v1043 <= -1;
                  v1047 = v1043 & ~(v1043 >> 31);
                  if (v1046 && v1040 >= v1047)
                  {
                    v1049 = (uint8x8_t *)(v1 + 10648);
                    v1050 = *(uint8x8_t *)(v1 + 10648);
                    v1051 = v1034 - v983 + 40;
                    if (v1051 >= v1047 - 1)
                      v1052 = v1047 - 1;
                    else
                      v1052 = v1034 - v983 + 40;
                    v1053 = v1034 - v983 - v1052 + 47;
                    if (v1053 < 0x78)
                      goto LABEL_745;
                    if (v1051 >= v1047 - 1)
                      v1051 = v1047 - 1;
                    if (v1049 >= (uint8x8_t *)&v1039->i8[((v1034 - v983 - v1051 + 47) >> 3) + 1]
                      || (unint64_t)v1039 >= v1 + 10656)
                    {
                      v1055 = (v1053 >> 3) + 1;
                      v1056 = *(_QWORD *)&v1050 + (v1055 & 0x3FFFFFF8);
                      v1057 = (uint8x8_t *)((char *)v1039 + (v1055 & 0x3FFFFFF8));
                      v1058 = v1040 - 8 * (v1055 & 0x3FFFFFF8);
                      v1059 = vdupq_n_s32(v1040);
                      v1060 = vaddq_s32(v1059, (int32x4_t)xmmword_208F3A6A0);
                      v1061 = vaddq_s32(v1059, (int32x4_t)xmmword_208F3A6B0);
                      v1062 = 0uLL;
                      v1063 = (int32x4_t)v1037;
                      v1064 = (int8x16_t)(unint64_t)v1036;
                      v1065.i64[0] = 0x800000008;
                      v1065.i64[1] = 0x800000008;
                      v1066.i64[0] = 0x3F0000003FLL;
                      v1066.i64[1] = 0x3F0000003FLL;
                      v1067 = v1055 & 0x3FFFFFF8;
                      v1068 = 0uLL;
                      v1069 = 0uLL;
                      v1070 = 0uLL;
                      do
                      {
                        v1063 = vaddq_s32(v1063, v1065);
                        v1071 = *v1039++;
                        v1062 = vaddq_s32(v1062, v1065);
                        v1072 = vmovl_u8(v1071);
                        v1073 = vmovl_high_u16(v1072);
                        v1074.i64[0] = v1073.u32[2];
                        v1074.i64[1] = v1073.u32[3];
                        v1075 = v1074;
                        v1074.i64[0] = v1073.u32[0];
                        v1074.i64[1] = v1073.u32[1];
                        v1076 = v1074;
                        v1077 = vmovl_u16(*(uint16x4_t *)v1072.i8);
                        v1074.i64[0] = v1077.u32[2];
                        v1074.i64[1] = v1077.u32[3];
                        v1078 = v1074;
                        v1074.i64[0] = v1077.u32[0];
                        v1074.i64[1] = v1077.u32[1];
                        v1079 = v1074;
                        v1074.i64[0] = v1060.u32[2];
                        v1074.i64[1] = v1060.u32[3];
                        v1080 = v1074;
                        v1074.i64[0] = v1060.u32[0];
                        v1074.i64[1] = v1060.u32[1];
                        v1081 = v1074;
                        v1074.i64[0] = v1061.u32[2];
                        v1074.i64[1] = v1061.u32[3];
                        v1082 = v1074;
                        v1074.i64[0] = v1061.u32[0];
                        v1074.i64[1] = v1061.u32[1];
                        v1070 = vorrq_s8((int8x16_t)vshlq_u64(v1075, v1080), v1070);
                        v1069 = vorrq_s8((int8x16_t)vshlq_u64(v1076, v1081), v1069);
                        v1068 = vorrq_s8((int8x16_t)vshlq_u64(v1078, v1082), v1068);
                        v1064 = vorrq_s8((int8x16_t)vshlq_u64(v1079, v1074), v1064);
                        *(_QWORD *)&v1050 += 8;
                        v1061 = vaddq_s32(v1061, v1066);
                        v1060 = vaddq_s32(v1060, v1066);
                        v1067 -= 8;
                      }
                      while (v1067);
                      *v1049 = v1050;
                      v1083 = vorrq_s8(vorrq_s8(v1064, v1069), vorrq_s8(v1068, v1070));
                      v1036 = vorr_s8(*(int8x8_t *)v1083.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1083, v1083, 8uLL));
                      v1037 = vaddvq_s32(vaddq_s32(v1063, v1062));
                      if ((v1055 & 0x3FFFFFF8) == v1055)
                        goto LABEL_748;
                    }
                    else
                    {
LABEL_745:
                      v1056 = *(_QWORD *)(v1 + 10648);
                      v1057 = v1039;
                      v1058 = v1040;
                    }
                    v1084 = (uint8x8_t)(v1056 + 1);
                    do
                    {
                      v1037 += 8;
                      v1085 = v1057->u8[0];
                      v1057 = (uint8x8_t *)((char *)v1057 + 1);
                      *(_QWORD *)&v1036 |= (unint64_t)v1085 << v1058;
                      *v1049 = v1084;
                      v1058 -= 8;
                      ++*(_QWORD *)&v1084;
                    }
                    while (v1058 >= v1047);
                  }
                }
LABEL_748:
                v1086 = (int8x8_t)(*(_QWORD *)&v1036 - (v1038 << 56));
                if (*(_QWORD *)&v1036 >= (unint64_t)(v1038 << 56))
                {
                  LODWORD(v1038) = *(_DWORD *)(v1 + 10668) - v1038;
                  v1087 = 32;
                  v1036 = v1086;
                }
                else
                {
                  v1087 = 0;
                }
                v1088 = vp8_norm[v1038];
                v1089 = (_DWORD)v1038 << v1088;
                v1090 = (int8x8_t)(*(_QWORD *)&v1036 << v1088);
                v1091 = v1037 - v1088;
                *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1036 << v1088;
                *(_DWORD *)(v1 + 10664) = v1037 - v1088;
                *(_DWORD *)(v1 + 10668) = v1089;
                v1092 = (((v1089 << 7) - 128) >> 8) + 1;
                if (((v1037 - v1088) & 0x80000000) != 0)
                {
                  v4506 = v1033;
                  v1093 = v1087;
                  v1094 = *(uint8x8_t **)(v1 + 10648);
                  v1095 = 48 - v1091;
                  v1096 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1094;
                  v1097 = 8 * v1096;
                  v1098 = 56 - 8 * v1096 - v1091;
                  v1099 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                  if (v1099)
                  {
                    if (v1096 >= 9)
                      v1100 = 9;
                    else
                      v1100 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1094;
                    v1099(*(_QWORD *)(v1 + 10680), v1094, &v4539, v1100);
                    v1094 = (uint8x8_t *)&v4539;
                  }
                  if (v1098 >= 0)
                    v1091 += 0x40000000;
                  if (v1097)
                    v1101 = 1;
                  else
                    v1101 = v1098 <= -1;
                  v1102 = v1098 & ~(v1098 >> 31);
                  if (!v1101 || v1095 < v1102)
                  {
                    v1087 = v1093;
                    v1033 = v4506;
                  }
                  else
                  {
                    v1104 = (uint8x8_t *)(v1 + 10648);
                    v1105 = *(uint8x8_t *)(v1 + 10648);
                    v1106 = v1088 - v1037 + 40;
                    if (v1106 >= v1102 - 1)
                      v1107 = v1102 - 1;
                    else
                      v1107 = v1088 - v1037 + 40;
                    v1108 = v1088 - v1037 - v1107 + 47;
                    v1087 = v1093;
                    if (v1108 >= 0x78)
                    {
                      if (v1106 >= v1102 - 1)
                        v1106 = v1102 - 1;
                      v1112 = v1104 >= (uint8x8_t *)&v1094->i8[((v1088 - v1037 - v1106 + 47) >> 3) + 1]
                           || (unint64_t)v1094 >= v1 + 10656;
                      v1033 = v4506;
                      if (v1112)
                      {
                        v1113 = (v1108 >> 3) + 1;
                        v1109 = *(_QWORD *)&v1105 + (v1113 & 0x3FFFFFF8);
                        v1110 = (uint8x8_t *)((char *)v1094 + (v1113 & 0x3FFFFFF8));
                        v1111 = v1095 - 8 * (v1113 & 0x3FFFFFF8);
                        v1114 = vdupq_n_s32(v1095);
                        v1115 = vaddq_s32(v1114, (int32x4_t)xmmword_208F3A6A0);
                        v1116 = vaddq_s32(v1114, (int32x4_t)xmmword_208F3A6B0);
                        v1117 = 0uLL;
                        v1118 = (int32x4_t)v1091;
                        v1119 = (int8x16_t)(unint64_t)v1090;
                        v1120.i64[0] = 0x800000008;
                        v1120.i64[1] = 0x800000008;
                        v1121.i64[0] = 0x3F0000003FLL;
                        v1121.i64[1] = 0x3F0000003FLL;
                        v1122 = v1113 & 0x3FFFFFF8;
                        v1123 = 0uLL;
                        v1124 = 0uLL;
                        v1125 = 0uLL;
                        do
                        {
                          v1118 = vaddq_s32(v1118, v1120);
                          v1126 = *v1094++;
                          v1117 = vaddq_s32(v1117, v1120);
                          v1127 = vmovl_u8(v1126);
                          v1128 = vmovl_high_u16(v1127);
                          v1129.i64[0] = v1128.u32[2];
                          v1129.i64[1] = v1128.u32[3];
                          v1130 = v1129;
                          v1129.i64[0] = v1128.u32[0];
                          v1129.i64[1] = v1128.u32[1];
                          v1131 = v1129;
                          v1132 = vmovl_u16(*(uint16x4_t *)v1127.i8);
                          v1129.i64[0] = v1132.u32[2];
                          v1129.i64[1] = v1132.u32[3];
                          v1133 = v1129;
                          v1129.i64[0] = v1132.u32[0];
                          v1129.i64[1] = v1132.u32[1];
                          v1134 = v1129;
                          v1129.i64[0] = v1115.u32[2];
                          v1129.i64[1] = v1115.u32[3];
                          v1135 = v1129;
                          v1129.i64[0] = v1115.u32[0];
                          v1129.i64[1] = v1115.u32[1];
                          v1136 = v1129;
                          v1129.i64[0] = v1116.u32[2];
                          v1129.i64[1] = v1116.u32[3];
                          v1137 = v1129;
                          v1129.i64[0] = v1116.u32[0];
                          v1129.i64[1] = v1116.u32[1];
                          v1125 = vorrq_s8((int8x16_t)vshlq_u64(v1130, v1135), v1125);
                          v1124 = vorrq_s8((int8x16_t)vshlq_u64(v1131, v1136), v1124);
                          v1123 = vorrq_s8((int8x16_t)vshlq_u64(v1133, v1137), v1123);
                          v1119 = vorrq_s8((int8x16_t)vshlq_u64(v1134, v1129), v1119);
                          *(_QWORD *)&v1105 += 8;
                          v1116 = vaddq_s32(v1116, v1121);
                          v1115 = vaddq_s32(v1115, v1121);
                          v1122 -= 8;
                        }
                        while (v1122);
                        *v1104 = v1105;
                        v1138 = vorrq_s8(vorrq_s8(v1119, v1124), vorrq_s8(v1123, v1125));
                        v1090 = vorr_s8(*(int8x8_t *)v1138.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1138, v1138, 8uLL));
                        v1091 = vaddvq_s32(vaddq_s32(v1118, v1117));
                        if ((v1113 & 0x3FFFFFF8) == v1113)
                          goto LABEL_785;
                      }
                      else
                      {
                        v1109 = *(_QWORD *)(v1 + 10648);
                        v1110 = v1094;
                        v1111 = v1095;
                      }
                    }
                    else
                    {
                      v1109 = *(_QWORD *)(v1 + 10648);
                      v1110 = v1094;
                      v1111 = v1095;
                      v1033 = v4506;
                    }
                    v1139 = (uint8x8_t)(v1109 + 1);
                    do
                    {
                      v1091 += 8;
                      v1140 = v1110->u8[0];
                      v1110 = (uint8x8_t *)((char *)v1110 + 1);
                      *(_QWORD *)&v1090 |= (unint64_t)v1140 << v1111;
                      *v1104 = v1139;
                      v1111 -= 8;
                      ++*(_QWORD *)&v1139;
                    }
                    while (v1111 >= v1102);
                  }
                }
LABEL_785:
                v1141 = (int8x8_t)(*(_QWORD *)&v1090 - (v1092 << 56));
                if (*(_QWORD *)&v1090 >= (unint64_t)(v1092 << 56))
                {
                  LODWORD(v1092) = *(_DWORD *)(v1 + 10668) - v1092;
                  v1142 = 16;
                  v1090 = v1141;
                }
                else
                {
                  v1142 = 0;
                }
                v1143 = vp8_norm[v1092];
                v1144 = (_DWORD)v1092 << v1143;
                v1145 = (int8x8_t)(*(_QWORD *)&v1090 << v1143);
                v1146 = v1091 - v1143;
                *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1090 << v1143;
                *(_DWORD *)(v1 + 10664) = v1091 - v1143;
                *(_DWORD *)(v1 + 10668) = v1144;
                v1147 = (((v1144 << 7) - 128) >> 8) + 1;
                if (((v1091 - v1143) & 0x80000000) != 0)
                {
                  v4491 = v1142;
                  v4507 = v1033;
                  v1148 = *(uint8x8_t **)(v1 + 10648);
                  v1149 = 48 - v1146;
                  v1150 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1148;
                  v1151 = 8 * v1150;
                  v1152 = 56 - 8 * v1150 - v1146;
                  v1153 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                  if (v1153)
                  {
                    if (v1150 >= 9)
                      v1154 = 9;
                    else
                      v1154 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1148;
                    v1155 = v1087;
                    v1153(*(_QWORD *)(v1 + 10680), v1148, &v4539, v1154);
                    v1149 = 48 - v1146;
                    v1087 = v1155;
                    v1148 = (uint8x8_t *)&v4539;
                  }
                  if (v1152 >= 0)
                    v1146 += 0x40000000;
                  if (v1151)
                    v1156 = 1;
                  else
                    v1156 = v1152 <= -1;
                  v1157 = v1152 & ~(v1152 >> 31);
                  if (!v1156 || v1149 < v1157)
                  {
                    v1033 = v4507;
                    v1142 = v4491;
                  }
                  else
                  {
                    v1159 = (uint8x8_t *)(v1 + 10648);
                    v1160 = *(uint8x8_t *)(v1 + 10648);
                    v1161 = v1143 - v1091 + 40;
                    if (v1161 >= v1157 - 1)
                      v1162 = v1157 - 1;
                    else
                      v1162 = v1143 - v1091 + 40;
                    v1163 = v1143 - v1091 - v1162 + 47;
                    v1033 = v4507;
                    v1142 = v4491;
                    if (v1163 < 0x78)
                      goto LABEL_820;
                    if (v1161 >= v1157 - 1)
                      v1161 = v1157 - 1;
                    if (v1159 >= (uint8x8_t *)&v1148->i8[((v1143 - v1091 - v1161 + 47) >> 3) + 1]
                      || (unint64_t)v1148 >= v1 + 10656)
                    {
                      v1165 = (v1163 >> 3) + 1;
                      v1166 = *(_QWORD *)&v1160 + (v1165 & 0x3FFFFFF8);
                      v1167 = (uint8x8_t *)((char *)v1148 + (v1165 & 0x3FFFFFF8));
                      v1168 = v1149 - 8 * (v1165 & 0x3FFFFFF8);
                      v1169 = vdupq_n_s32(v1149);
                      v1170 = vaddq_s32(v1169, (int32x4_t)xmmword_208F3A6A0);
                      v1171 = vaddq_s32(v1169, (int32x4_t)xmmword_208F3A6B0);
                      v1172 = 0uLL;
                      v1173 = (int32x4_t)v1146;
                      v1174 = (int8x16_t)(unint64_t)v1145;
                      v1175.i64[0] = 0x800000008;
                      v1175.i64[1] = 0x800000008;
                      v1176.i64[0] = 0x3F0000003FLL;
                      v1176.i64[1] = 0x3F0000003FLL;
                      v1177 = v1165 & 0x3FFFFFF8;
                      v1178 = 0uLL;
                      v1179 = 0uLL;
                      v1180 = 0uLL;
                      do
                      {
                        v1173 = vaddq_s32(v1173, v1175);
                        v1181 = *v1148++;
                        v1172 = vaddq_s32(v1172, v1175);
                        v1182 = vmovl_u8(v1181);
                        v1183 = vmovl_high_u16(v1182);
                        v1184.i64[0] = v1183.u32[2];
                        v1184.i64[1] = v1183.u32[3];
                        v1185 = v1184;
                        v1184.i64[0] = v1183.u32[0];
                        v1184.i64[1] = v1183.u32[1];
                        v1186 = v1184;
                        v1187 = vmovl_u16(*(uint16x4_t *)v1182.i8);
                        v1184.i64[0] = v1187.u32[2];
                        v1184.i64[1] = v1187.u32[3];
                        v1188 = v1184;
                        v1184.i64[0] = v1187.u32[0];
                        v1184.i64[1] = v1187.u32[1];
                        v1189 = v1184;
                        v1184.i64[0] = v1170.u32[2];
                        v1184.i64[1] = v1170.u32[3];
                        v1190 = v1184;
                        v1184.i64[0] = v1170.u32[0];
                        v1184.i64[1] = v1170.u32[1];
                        v1191 = v1184;
                        v1184.i64[0] = v1171.u32[2];
                        v1184.i64[1] = v1171.u32[3];
                        v1192 = v1184;
                        v1184.i64[0] = v1171.u32[0];
                        v1184.i64[1] = v1171.u32[1];
                        v1180 = vorrq_s8((int8x16_t)vshlq_u64(v1185, v1190), v1180);
                        v1179 = vorrq_s8((int8x16_t)vshlq_u64(v1186, v1191), v1179);
                        v1178 = vorrq_s8((int8x16_t)vshlq_u64(v1188, v1192), v1178);
                        v1174 = vorrq_s8((int8x16_t)vshlq_u64(v1189, v1184), v1174);
                        *(_QWORD *)&v1160 += 8;
                        v1171 = vaddq_s32(v1171, v1176);
                        v1170 = vaddq_s32(v1170, v1176);
                        v1177 -= 8;
                      }
                      while (v1177);
                      *v1159 = v1160;
                      v1193 = vorrq_s8(vorrq_s8(v1174, v1179), vorrq_s8(v1178, v1180));
                      v1145 = vorr_s8(*(int8x8_t *)v1193.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1193, v1193, 8uLL));
                      v1146 = vaddvq_s32(vaddq_s32(v1173, v1172));
                      if ((v1165 & 0x3FFFFFF8) == v1165)
                        goto LABEL_823;
                    }
                    else
                    {
LABEL_820:
                      v1166 = *(_QWORD *)(v1 + 10648);
                      v1167 = v1148;
                      v1168 = v1149;
                    }
                    v1194 = (uint8x8_t)(v1166 + 1);
                    do
                    {
                      v1146 += 8;
                      v1195 = v1167->u8[0];
                      v1167 = (uint8x8_t *)((char *)v1167 + 1);
                      *(_QWORD *)&v1145 |= (unint64_t)v1195 << v1168;
                      *v1159 = v1194;
                      v1168 -= 8;
                      ++*(_QWORD *)&v1194;
                    }
                    while (v1168 >= v1157);
                  }
                }
LABEL_823:
                v1196 = (int8x8_t)(*(_QWORD *)&v1145 - (v1147 << 56));
                if (*(_QWORD *)&v1145 >= (unint64_t)(v1147 << 56))
                {
                  LODWORD(v1147) = *(_DWORD *)(v1 + 10668) - v1147;
                  v1197 = 8;
                  v1145 = v1196;
                }
                else
                {
                  v1197 = 0;
                }
                v1198 = v1033 | v4526;
                v1199 = vp8_norm[v1147];
                v1200 = (int8x8_t)(*(_QWORD *)&v1145 << v1199);
                v1201 = v1146 - v1199;
                *(int8x8_t *)(v1 + 10656) = v1200;
                *(_DWORD *)(v1 + 10664) = v1146 - v1199;
                *(_DWORD *)(v1 + 10668) = (_DWORD)v1147 << v1199;
                v1202 = ((((_DWORD)v1147 << v1199 << 7) - 128) >> 8) + 1;
                if (((v1146 - v1199) & 0x80000000) == 0)
                {
                  v1203 = v1198 | v1087;
                  v1204 = (int8x8_t)(*(_QWORD *)&v1200 - (v1202 << 56));
                  if (*(_QWORD *)&v1200 < (unint64_t)(v1202 << 56))
                  {
LABEL_828:
                    v1205 = 0;
                    goto LABEL_865;
                  }
LABEL_864:
                  LODWORD(v1202) = *(_DWORD *)(v1 + 10668) - v1202;
                  v1205 = 4;
                  v1200 = v1204;
LABEL_865:
                  v1255 = v1203 | v1142;
                  v1256 = vp8_norm[v1202];
                  v1257 = (_DWORD)v1202 << v1256;
                  v1258 = (int8x8_t)(*(_QWORD *)&v1200 << v1256);
                  v1259 = v1201 - v1256;
                  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1200 << v1256;
                  *(_DWORD *)(v1 + 10664) = v1201 - v1256;
                  *(_DWORD *)(v1 + 10668) = v1257;
                  v1260 = (((v1257 << 7) - 128) >> 8) + 1;
                  if (((v1201 - v1256) & 0x80000000) == 0)
                  {
                    v1261 = v1255 | v1197;
                    v1262 = (int8x8_t)(*(_QWORD *)&v1258 - (v1260 << 56));
                    if (*(_QWORD *)&v1258 < (unint64_t)(v1260 << 56))
                    {
LABEL_867:
                      v1263 = 0;
                      goto LABEL_902;
                    }
LABEL_901:
                    LODWORD(v1260) = *(_DWORD *)(v1 + 10668) - v1260;
                    v1263 = 2;
                    v1258 = v1262;
LABEL_902:
                    v1312 = v1261 | v1205;
                    v1313 = vp8_norm[v1260];
                    v1314 = (_DWORD)v1260 << v1313;
                    v1315 = (int8x8_t)(*(_QWORD *)&v1258 << v1313);
                    v1316 = v1259 - v1313;
                    *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1258 << v1313;
                    *(_DWORD *)(v1 + 10664) = v1259 - v1313;
                    *(_DWORD *)(v1 + 10668) = v1314;
                    v1317 = (((v1314 << 7) - 128) >> 8) + 1;
                    if (((v1259 - v1313) & 0x80000000) == 0)
                    {
                      v1318 = v1312 | v1263;
                      v1319 = (int8x8_t)(*(_QWORD *)&v1315 - (v1317 << 56));
                      if (*(_QWORD *)&v1315 < (unint64_t)(v1317 << 56))
                      {
LABEL_904:
                        v1320 = 0;
LABEL_939:
                        v1368 = vp8_norm[v1317];
                        v1369 = (int8x8_t)(*(_QWORD *)&v1315 << v1368);
                        v1370 = v1316 - v1368;
                        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1315 << v1368;
                        *(_DWORD *)(v1 + 10664) = v1316 - v1368;
                        *(_DWORD *)(v1 + 10668) = (_DWORD)v1317 << v1368;
                        v4458[1] = v1318 | v1320;
                        v1371 = ((((_DWORD)v1317 << v1368 << 7) - 128) >> 8) + 1;
                        if (((v1316 - v1368) & 0x80000000) != 0)
                        {
                          v1372 = *(uint8x8_t **)(v1 + 10648);
                          v1373 = 48 - v1370;
                          v1374 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1372;
                          v1375 = 8 * v1374;
                          v1376 = 56 - 8 * v1374 - v1370;
                          v1377 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                          if (v1377)
                          {
                            if (v1374 >= 9)
                              v1378 = 9;
                            else
                              v1378 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1372;
                            v1377(*(_QWORD *)(v1 + 10680), v1372, &v4539, v1378);
                            v1372 = (uint8x8_t *)&v4539;
                          }
                          if (v1376 >= 0)
                            v1370 += 0x40000000;
                          v1379 = v1375 || v1376 <= -1;
                          v1380 = v1376 & ~(v1376 >> 31);
                          if (v1379 && v1373 >= v1380)
                          {
                            v1382 = (uint8x8_t *)(v1 + 10648);
                            v1383 = *(uint8x8_t *)(v1 + 10648);
                            v1384 = v1368 - v1316 + 40;
                            if (v1384 >= v1380 - 1)
                              v1385 = v1380 - 1;
                            else
                              v1385 = v1368 - v1316 + 40;
                            v1386 = v1368 - v1316 - v1385 + 47;
                            if (v1386 < 0x78)
                              goto LABEL_969;
                            if (v1384 >= v1380 - 1)
                              v1384 = v1380 - 1;
                            if (v1382 < (uint8x8_t *)&v1372->i8[((v1368 - v1316 - v1384 + 47) >> 3) + 1]
                              && (unint64_t)v1372 < v1 + 10656)
                            {
LABEL_969:
                              v1389 = *(_QWORD *)(v1 + 10648);
                              v1390 = v1372;
                              v1391 = v1373;
LABEL_970:
                              v1417 = (uint8x8_t)(v1389 + 1);
                              do
                              {
                                v1370 += 8;
                                v1418 = v1390->u8[0];
                                v1390 = (uint8x8_t *)((char *)v1390 + 1);
                                *(_QWORD *)&v1369 |= (unint64_t)v1418 << v1391;
                                *v1382 = v1417;
                                v1391 -= 8;
                                ++*(_QWORD *)&v1417;
                              }
                              while (v1391 >= v1380);
                              goto LABEL_972;
                            }
                            v1388 = (v1386 >> 3) + 1;
                            v1389 = *(_QWORD *)&v1383 + (v1388 & 0x3FFFFFF8);
                            v1390 = (uint8x8_t *)((char *)v1372 + (v1388 & 0x3FFFFFF8));
                            v1391 = v1373 - 8 * (v1388 & 0x3FFFFFF8);
                            v1392 = vdupq_n_s32(v1373);
                            v1393 = vaddq_s32(v1392, (int32x4_t)xmmword_208F3A6A0);
                            v1394 = vaddq_s32(v1392, (int32x4_t)xmmword_208F3A6B0);
                            v1395 = 0uLL;
                            v1396 = (int32x4_t)v1370;
                            v1397 = (int8x16_t)(unint64_t)v1369;
                            v1398.i64[0] = 0x800000008;
                            v1398.i64[1] = 0x800000008;
                            v1399.i64[0] = 0x3F0000003FLL;
                            v1399.i64[1] = 0x3F0000003FLL;
                            v1400 = v1388 & 0x3FFFFFF8;
                            v1401 = 0uLL;
                            v1402 = 0uLL;
                            v1403 = 0uLL;
                            do
                            {
                              v1396 = vaddq_s32(v1396, v1398);
                              v1404 = *v1372++;
                              v1395 = vaddq_s32(v1395, v1398);
                              v1405 = vmovl_u8(v1404);
                              v1406 = vmovl_high_u16(v1405);
                              v1407.i64[0] = v1406.u32[2];
                              v1407.i64[1] = v1406.u32[3];
                              v1408 = v1407;
                              v1407.i64[0] = v1406.u32[0];
                              v1407.i64[1] = v1406.u32[1];
                              v1409 = v1407;
                              v1410 = vmovl_u16(*(uint16x4_t *)v1405.i8);
                              v1407.i64[0] = v1410.u32[2];
                              v1407.i64[1] = v1410.u32[3];
                              v1411 = v1407;
                              v1407.i64[0] = v1410.u32[0];
                              v1407.i64[1] = v1410.u32[1];
                              v1412 = v1407;
                              v1407.i64[0] = v1393.u32[2];
                              v1407.i64[1] = v1393.u32[3];
                              v1413 = v1407;
                              v1407.i64[0] = v1393.u32[0];
                              v1407.i64[1] = v1393.u32[1];
                              v1414 = v1407;
                              v1407.i64[0] = v1394.u32[2];
                              v1407.i64[1] = v1394.u32[3];
                              v1415 = v1407;
                              v1407.i64[0] = v1394.u32[0];
                              v1407.i64[1] = v1394.u32[1];
                              v1403 = vorrq_s8((int8x16_t)vshlq_u64(v1408, v1413), v1403);
                              v1402 = vorrq_s8((int8x16_t)vshlq_u64(v1409, v1414), v1402);
                              v1401 = vorrq_s8((int8x16_t)vshlq_u64(v1411, v1415), v1401);
                              v1397 = vorrq_s8((int8x16_t)vshlq_u64(v1412, v1407), v1397);
                              *(_QWORD *)&v1383 += 8;
                              v1394 = vaddq_s32(v1394, v1399);
                              v1393 = vaddq_s32(v1393, v1399);
                              v1400 -= 8;
                            }
                            while (v1400);
                            *v1382 = v1383;
                            v1416 = vorrq_s8(vorrq_s8(v1397, v1402), vorrq_s8(v1401, v1403));
                            v1369 = vorr_s8(*(int8x8_t *)v1416.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1416, v1416, 8uLL));
                            v1370 = vaddvq_s32(vaddq_s32(v1396, v1395));
                            if ((v1388 & 0x3FFFFFF8) != v1388)
                              goto LABEL_970;
                          }
                        }
LABEL_972:
                        v1419 = (int8x8_t)(*(_QWORD *)&v1369 - (v1371 << 56));
                        if (*(_QWORD *)&v1369 >= (unint64_t)(v1371 << 56))
                        {
                          LODWORD(v1371) = *(_DWORD *)(v1 + 10668) - v1371;
                          v4530 = 0x80;
                          v1369 = v1419;
                        }
                        else
                        {
                          v4530 = 0;
                        }
                        v1420 = vp8_norm[v1371];
                        v1421 = (_DWORD)v1371 << v1420;
                        v1422 = (int8x8_t)(*(_QWORD *)&v1369 << v1420);
                        v1423 = v1370 - v1420;
                        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1369 << v1420;
                        *(_DWORD *)(v1 + 10664) = v1370 - v1420;
                        *(_DWORD *)(v1 + 10668) = v1421;
                        v1424 = (((v1421 << 7) - 128) >> 8) + 1;
                        if (((v1370 - v1420) & 0x80000000) != 0)
                        {
                          v1425 = *(uint8x8_t **)(v1 + 10648);
                          v1426 = 48 - v1423;
                          v1427 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1425;
                          v1428 = 8 * v1427;
                          v1429 = 56 - 8 * v1427 - v1423;
                          v1430 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                          if (v1430)
                          {
                            if (v1427 >= 9)
                              v1431 = 9;
                            else
                              v1431 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1425;
                            v1430(*(_QWORD *)(v1 + 10680), v1425, &v4539, v1431);
                            v1425 = (uint8x8_t *)&v4539;
                          }
                          if (v1429 >= 0)
                            v1423 += 0x40000000;
                          v1432 = v1428 || v1429 <= -1;
                          v1433 = v1429 & ~(v1429 >> 31);
                          if (v1432 && v1426 >= v1433)
                          {
                            v1435 = (uint8x8_t *)(v1 + 10648);
                            v1436 = *(uint8x8_t *)(v1 + 10648);
                            v1437 = v1420 - v1370 + 40;
                            if (v1437 >= v1433 - 1)
                              v1438 = v1433 - 1;
                            else
                              v1438 = v1420 - v1370 + 40;
                            v1439 = v1420 - v1370 - v1438 + 47;
                            if (v1439 < 0x78)
                              goto LABEL_1005;
                            if (v1437 >= v1433 - 1)
                              v1437 = v1433 - 1;
                            if (v1435 < (uint8x8_t *)&v1425->i8[((v1420 - v1370 - v1437 + 47) >> 3) + 1]
                              && (unint64_t)v1425 < v1 + 10656)
                            {
LABEL_1005:
                              v1442 = *(_QWORD *)(v1 + 10648);
                              v1443 = v1425;
                              v1444 = v1426;
LABEL_1006:
                              v1470 = (uint8x8_t)(v1442 + 1);
                              do
                              {
                                v1423 += 8;
                                v1471 = v1443->u8[0];
                                v1443 = (uint8x8_t *)((char *)v1443 + 1);
                                *(_QWORD *)&v1422 |= (unint64_t)v1471 << v1444;
                                *v1435 = v1470;
                                v1444 -= 8;
                                ++*(_QWORD *)&v1470;
                              }
                              while (v1444 >= v1433);
                              goto LABEL_1008;
                            }
                            v1441 = (v1439 >> 3) + 1;
                            v1442 = *(_QWORD *)&v1436 + (v1441 & 0x3FFFFFF8);
                            v1443 = (uint8x8_t *)((char *)v1425 + (v1441 & 0x3FFFFFF8));
                            v1444 = v1426 - 8 * (v1441 & 0x3FFFFFF8);
                            v1445 = vdupq_n_s32(v1426);
                            v1446 = vaddq_s32(v1445, (int32x4_t)xmmword_208F3A6A0);
                            v1447 = vaddq_s32(v1445, (int32x4_t)xmmword_208F3A6B0);
                            v1448 = 0uLL;
                            v1449 = (int32x4_t)v1423;
                            v1450 = (int8x16_t)(unint64_t)v1422;
                            v1451.i64[0] = 0x800000008;
                            v1451.i64[1] = 0x800000008;
                            v1452.i64[0] = 0x3F0000003FLL;
                            v1452.i64[1] = 0x3F0000003FLL;
                            v1453 = v1441 & 0x3FFFFFF8;
                            v1454 = 0uLL;
                            v1455 = 0uLL;
                            v1456 = 0uLL;
                            do
                            {
                              v1449 = vaddq_s32(v1449, v1451);
                              v1457 = *v1425++;
                              v1448 = vaddq_s32(v1448, v1451);
                              v1458 = vmovl_u8(v1457);
                              v1459 = vmovl_high_u16(v1458);
                              v1460.i64[0] = v1459.u32[2];
                              v1460.i64[1] = v1459.u32[3];
                              v1461 = v1460;
                              v1460.i64[0] = v1459.u32[0];
                              v1460.i64[1] = v1459.u32[1];
                              v1462 = v1460;
                              v1463 = vmovl_u16(*(uint16x4_t *)v1458.i8);
                              v1460.i64[0] = v1463.u32[2];
                              v1460.i64[1] = v1463.u32[3];
                              v1464 = v1460;
                              v1460.i64[0] = v1463.u32[0];
                              v1460.i64[1] = v1463.u32[1];
                              v1465 = v1460;
                              v1460.i64[0] = v1446.u32[2];
                              v1460.i64[1] = v1446.u32[3];
                              v1466 = v1460;
                              v1460.i64[0] = v1446.u32[0];
                              v1460.i64[1] = v1446.u32[1];
                              v1467 = v1460;
                              v1460.i64[0] = v1447.u32[2];
                              v1460.i64[1] = v1447.u32[3];
                              v1468 = v1460;
                              v1460.i64[0] = v1447.u32[0];
                              v1460.i64[1] = v1447.u32[1];
                              v1456 = vorrq_s8((int8x16_t)vshlq_u64(v1461, v1466), v1456);
                              v1455 = vorrq_s8((int8x16_t)vshlq_u64(v1462, v1467), v1455);
                              v1454 = vorrq_s8((int8x16_t)vshlq_u64(v1464, v1468), v1454);
                              v1450 = vorrq_s8((int8x16_t)vshlq_u64(v1465, v1460), v1450);
                              *(_QWORD *)&v1436 += 8;
                              v1447 = vaddq_s32(v1447, v1452);
                              v1446 = vaddq_s32(v1446, v1452);
                              v1453 -= 8;
                            }
                            while (v1453);
                            *v1435 = v1436;
                            v1469 = vorrq_s8(vorrq_s8(v1450, v1455), vorrq_s8(v1454, v1456));
                            v1422 = vorr_s8(*(int8x8_t *)v1469.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1469, v1469, 8uLL));
                            v1423 = vaddvq_s32(vaddq_s32(v1449, v1448));
                            if ((v1441 & 0x3FFFFFF8) != v1441)
                              goto LABEL_1006;
                          }
                        }
LABEL_1008:
                        v1472 = (int8x8_t)(*(_QWORD *)&v1422 - (v1424 << 56));
                        if (*(_QWORD *)&v1422 >= (unint64_t)(v1424 << 56))
                        {
                          LODWORD(v1424) = *(_DWORD *)(v1 + 10668) - v1424;
                          v1473 = 64;
                          v1422 = v1472;
                        }
                        else
                        {
                          v1473 = 0;
                        }
                        v1474 = vp8_norm[v1424];
                        v1475 = (_DWORD)v1424 << v1474;
                        v1476 = (int8x8_t)(*(_QWORD *)&v1422 << v1474);
                        v1477 = v1423 - v1474;
                        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1422 << v1474;
                        *(_DWORD *)(v1 + 10664) = v1423 - v1474;
                        *(_DWORD *)(v1 + 10668) = v1475;
                        v1478 = (((v1475 << 7) - 128) >> 8) + 1;
                        if (((v1423 - v1474) & 0x80000000) != 0)
                        {
                          v1479 = *(uint8x8_t **)(v1 + 10648);
                          v1480 = 48 - v1477;
                          v1481 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1479;
                          v1482 = 8 * v1481;
                          v1483 = 56 - 8 * v1481 - v1477;
                          v1484 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                          if (v1484)
                          {
                            if (v1481 >= 9)
                              v1485 = 9;
                            else
                              v1485 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1479;
                            v1484(*(_QWORD *)(v1 + 10680), v1479, &v4539, v1485);
                            v1479 = (uint8x8_t *)&v4539;
                          }
                          if (v1483 >= 0)
                            v1477 += 0x40000000;
                          v1486 = v1482 || v1483 <= -1;
                          v1487 = v1483 & ~(v1483 >> 31);
                          if (v1486 && v1480 >= v1487)
                          {
                            v1489 = (uint8x8_t *)(v1 + 10648);
                            v1490 = *(uint8x8_t *)(v1 + 10648);
                            v1491 = v1474 - v1423 + 40;
                            if (v1491 >= v1487 - 1)
                              v1492 = v1487 - 1;
                            else
                              v1492 = v1474 - v1423 + 40;
                            v1493 = v1474 - v1423 - v1492 + 47;
                            if (v1493 < 0x78)
                              goto LABEL_1041;
                            if (v1491 >= v1487 - 1)
                              v1491 = v1487 - 1;
                            if (v1489 >= (uint8x8_t *)&v1479->i8[((v1474 - v1423 - v1491 + 47) >> 3) + 1]
                              || (unint64_t)v1479 >= v1 + 10656)
                            {
                              v1495 = (v1493 >> 3) + 1;
                              v1496 = *(_QWORD *)&v1490 + (v1495 & 0x3FFFFFF8);
                              v1497 = (uint8x8_t *)((char *)v1479 + (v1495 & 0x3FFFFFF8));
                              v1498 = v1480 - 8 * (v1495 & 0x3FFFFFF8);
                              v1499 = vdupq_n_s32(v1480);
                              v1500 = vaddq_s32(v1499, (int32x4_t)xmmword_208F3A6A0);
                              v1501 = vaddq_s32(v1499, (int32x4_t)xmmword_208F3A6B0);
                              v1502 = 0uLL;
                              v1503 = (int32x4_t)v1477;
                              v1504 = (int8x16_t)(unint64_t)v1476;
                              v1505.i64[0] = 0x800000008;
                              v1505.i64[1] = 0x800000008;
                              v1506.i64[0] = 0x3F0000003FLL;
                              v1506.i64[1] = 0x3F0000003FLL;
                              v1507 = v1495 & 0x3FFFFFF8;
                              v1508 = 0uLL;
                              v1509 = 0uLL;
                              v1510 = 0uLL;
                              do
                              {
                                v1503 = vaddq_s32(v1503, v1505);
                                v1511 = *v1479++;
                                v1502 = vaddq_s32(v1502, v1505);
                                v1512 = vmovl_u8(v1511);
                                v1513 = vmovl_high_u16(v1512);
                                v1514.i64[0] = v1513.u32[2];
                                v1514.i64[1] = v1513.u32[3];
                                v1515 = v1514;
                                v1514.i64[0] = v1513.u32[0];
                                v1514.i64[1] = v1513.u32[1];
                                v1516 = v1514;
                                v1517 = vmovl_u16(*(uint16x4_t *)v1512.i8);
                                v1514.i64[0] = v1517.u32[2];
                                v1514.i64[1] = v1517.u32[3];
                                v1518 = v1514;
                                v1514.i64[0] = v1517.u32[0];
                                v1514.i64[1] = v1517.u32[1];
                                v1519 = v1514;
                                v1514.i64[0] = v1500.u32[2];
                                v1514.i64[1] = v1500.u32[3];
                                v1520 = v1514;
                                v1514.i64[0] = v1500.u32[0];
                                v1514.i64[1] = v1500.u32[1];
                                v1521 = v1514;
                                v1514.i64[0] = v1501.u32[2];
                                v1514.i64[1] = v1501.u32[3];
                                v1522 = v1514;
                                v1514.i64[0] = v1501.u32[0];
                                v1514.i64[1] = v1501.u32[1];
                                v1510 = vorrq_s8((int8x16_t)vshlq_u64(v1515, v1520), v1510);
                                v1509 = vorrq_s8((int8x16_t)vshlq_u64(v1516, v1521), v1509);
                                v1508 = vorrq_s8((int8x16_t)vshlq_u64(v1518, v1522), v1508);
                                v1504 = vorrq_s8((int8x16_t)vshlq_u64(v1519, v1514), v1504);
                                *(_QWORD *)&v1490 += 8;
                                v1501 = vaddq_s32(v1501, v1506);
                                v1500 = vaddq_s32(v1500, v1506);
                                v1507 -= 8;
                              }
                              while (v1507);
                              *v1489 = v1490;
                              v1523 = vorrq_s8(vorrq_s8(v1504, v1509), vorrq_s8(v1508, v1510));
                              v1476 = vorr_s8(*(int8x8_t *)v1523.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1523, v1523, 8uLL));
                              v1477 = vaddvq_s32(vaddq_s32(v1503, v1502));
                              if ((v1495 & 0x3FFFFFF8) == v1495)
                                goto LABEL_1044;
                            }
                            else
                            {
LABEL_1041:
                              v1496 = *(_QWORD *)(v1 + 10648);
                              v1497 = v1479;
                              v1498 = v1480;
                            }
                            v1524 = (uint8x8_t)(v1496 + 1);
                            do
                            {
                              v1477 += 8;
                              v1525 = v1497->u8[0];
                              v1497 = (uint8x8_t *)((char *)v1497 + 1);
                              *(_QWORD *)&v1476 |= (unint64_t)v1525 << v1498;
                              *v1489 = v1524;
                              v1498 -= 8;
                              ++*(_QWORD *)&v1524;
                            }
                            while (v1498 >= v1487);
                          }
                        }
LABEL_1044:
                        v1526 = (int8x8_t)(*(_QWORD *)&v1476 - (v1478 << 56));
                        if (*(_QWORD *)&v1476 >= (unint64_t)(v1478 << 56))
                        {
                          LODWORD(v1478) = *(_DWORD *)(v1 + 10668) - v1478;
                          v1527 = 32;
                          v1476 = v1526;
                        }
                        else
                        {
                          v1527 = 0;
                        }
                        v1528 = vp8_norm[v1478];
                        v1529 = (_DWORD)v1478 << v1528;
                        v1530 = (int8x8_t)(*(_QWORD *)&v1476 << v1528);
                        v1531 = v1477 - v1528;
                        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1476 << v1528;
                        *(_DWORD *)(v1 + 10664) = v1477 - v1528;
                        *(_DWORD *)(v1 + 10668) = v1529;
                        v1532 = (((v1529 << 7) - 128) >> 8) + 1;
                        if (((v1477 - v1528) & 0x80000000) != 0)
                        {
                          v4510 = v1473;
                          v1533 = v1527;
                          v1534 = *(uint8x8_t **)(v1 + 10648);
                          v1535 = 48 - v1531;
                          v1536 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1534;
                          v1537 = 8 * v1536;
                          v1538 = 56 - 8 * v1536 - v1531;
                          v1539 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                          if (v1539)
                          {
                            if (v1536 >= 9)
                              v1540 = 9;
                            else
                              v1540 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1534;
                            v1539(*(_QWORD *)(v1 + 10680), v1534, &v4539, v1540);
                            v1534 = (uint8x8_t *)&v4539;
                          }
                          if (v1538 >= 0)
                            v1531 += 0x40000000;
                          if (v1537)
                            v1541 = 1;
                          else
                            v1541 = v1538 <= -1;
                          v1542 = v1538 & ~(v1538 >> 31);
                          if (!v1541 || v1535 < v1542)
                          {
                            v1527 = v1533;
                            v1473 = v4510;
                          }
                          else
                          {
                            v1544 = (uint8x8_t *)(v1 + 10648);
                            v1545 = *(uint8x8_t *)(v1 + 10648);
                            v1546 = v1528 - v1477 + 40;
                            if (v1546 >= v1542 - 1)
                              v1547 = v1542 - 1;
                            else
                              v1547 = v1528 - v1477 + 40;
                            v1548 = v1528 - v1477 - v1547 + 47;
                            v1527 = v1533;
                            if (v1548 >= 0x78)
                            {
                              if (v1546 >= v1542 - 1)
                                v1546 = v1542 - 1;
                              v1552 = v1544 >= (uint8x8_t *)&v1534->i8[((v1528 - v1477 - v1546 + 47) >> 3) + 1]
                                   || (unint64_t)v1534 >= v1 + 10656;
                              v1473 = v4510;
                              if (v1552)
                              {
                                v1553 = (v1548 >> 3) + 1;
                                v1549 = *(_QWORD *)&v1545 + (v1553 & 0x3FFFFFF8);
                                v1550 = (uint8x8_t *)((char *)v1534 + (v1553 & 0x3FFFFFF8));
                                v1551 = v1535 - 8 * (v1553 & 0x3FFFFFF8);
                                v1554 = vdupq_n_s32(v1535);
                                v1555 = vaddq_s32(v1554, (int32x4_t)xmmword_208F3A6A0);
                                v1556 = vaddq_s32(v1554, (int32x4_t)xmmword_208F3A6B0);
                                v1557 = 0uLL;
                                v1558 = (int32x4_t)v1531;
                                v1559 = (int8x16_t)(unint64_t)v1530;
                                v1560.i64[0] = 0x800000008;
                                v1560.i64[1] = 0x800000008;
                                v1561.i64[0] = 0x3F0000003FLL;
                                v1561.i64[1] = 0x3F0000003FLL;
                                v1562 = v1553 & 0x3FFFFFF8;
                                v1563 = 0uLL;
                                v1564 = 0uLL;
                                v1565 = 0uLL;
                                do
                                {
                                  v1558 = vaddq_s32(v1558, v1560);
                                  v1566 = *v1534++;
                                  v1557 = vaddq_s32(v1557, v1560);
                                  v1567 = vmovl_u8(v1566);
                                  v1568 = vmovl_high_u16(v1567);
                                  v1569.i64[0] = v1568.u32[2];
                                  v1569.i64[1] = v1568.u32[3];
                                  v1570 = v1569;
                                  v1569.i64[0] = v1568.u32[0];
                                  v1569.i64[1] = v1568.u32[1];
                                  v1571 = v1569;
                                  v1572 = vmovl_u16(*(uint16x4_t *)v1567.i8);
                                  v1569.i64[0] = v1572.u32[2];
                                  v1569.i64[1] = v1572.u32[3];
                                  v1573 = v1569;
                                  v1569.i64[0] = v1572.u32[0];
                                  v1569.i64[1] = v1572.u32[1];
                                  v1574 = v1569;
                                  v1569.i64[0] = v1555.u32[2];
                                  v1569.i64[1] = v1555.u32[3];
                                  v1575 = v1569;
                                  v1569.i64[0] = v1555.u32[0];
                                  v1569.i64[1] = v1555.u32[1];
                                  v1576 = v1569;
                                  v1569.i64[0] = v1556.u32[2];
                                  v1569.i64[1] = v1556.u32[3];
                                  v1577 = v1569;
                                  v1569.i64[0] = v1556.u32[0];
                                  v1569.i64[1] = v1556.u32[1];
                                  v1565 = vorrq_s8((int8x16_t)vshlq_u64(v1570, v1575), v1565);
                                  v1564 = vorrq_s8((int8x16_t)vshlq_u64(v1571, v1576), v1564);
                                  v1563 = vorrq_s8((int8x16_t)vshlq_u64(v1573, v1577), v1563);
                                  v1559 = vorrq_s8((int8x16_t)vshlq_u64(v1574, v1569), v1559);
                                  *(_QWORD *)&v1545 += 8;
                                  v1556 = vaddq_s32(v1556, v1561);
                                  v1555 = vaddq_s32(v1555, v1561);
                                  v1562 -= 8;
                                }
                                while (v1562);
                                *v1544 = v1545;
                                v1578 = vorrq_s8(vorrq_s8(v1559, v1564), vorrq_s8(v1563, v1565));
                                v1530 = vorr_s8(*(int8x8_t *)v1578.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1578, v1578, 8uLL));
                                v1531 = vaddvq_s32(vaddq_s32(v1558, v1557));
                                if ((v1553 & 0x3FFFFFF8) == v1553)
                                  goto LABEL_1081;
                              }
                              else
                              {
                                v1549 = *(_QWORD *)(v1 + 10648);
                                v1550 = v1534;
                                v1551 = v1535;
                              }
                            }
                            else
                            {
                              v1549 = *(_QWORD *)(v1 + 10648);
                              v1550 = v1534;
                              v1551 = v1535;
                              v1473 = v4510;
                            }
                            v1579 = (uint8x8_t)(v1549 + 1);
                            do
                            {
                              v1531 += 8;
                              v1580 = v1550->u8[0];
                              v1550 = (uint8x8_t *)((char *)v1550 + 1);
                              *(_QWORD *)&v1530 |= (unint64_t)v1580 << v1551;
                              *v1544 = v1579;
                              v1551 -= 8;
                              ++*(_QWORD *)&v1579;
                            }
                            while (v1551 >= v1542);
                          }
                        }
LABEL_1081:
                        v1581 = (int8x8_t)(*(_QWORD *)&v1530 - (v1532 << 56));
                        if (*(_QWORD *)&v1530 >= (unint64_t)(v1532 << 56))
                        {
                          LODWORD(v1532) = *(_DWORD *)(v1 + 10668) - v1532;
                          result = 16;
                          v1530 = v1581;
                        }
                        else
                        {
                          result = 0;
                        }
                        v1582 = vp8_norm[v1532];
                        v1583 = (_DWORD)v1532 << v1582;
                        v1584 = (int8x8_t)(*(_QWORD *)&v1530 << v1582);
                        v1585 = v1531 - v1582;
                        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1530 << v1582;
                        *(_DWORD *)(v1 + 10664) = v1531 - v1582;
                        *(_DWORD *)(v1 + 10668) = v1583;
                        v1586 = (((v1583 << 7) - 128) >> 8) + 1;
                        if (((v1531 - v1582) & 0x80000000) != 0)
                        {
                          v4493 = result;
                          v4511 = v1473;
                          v1587 = *(uint8x8_t **)(v1 + 10648);
                          v1588 = 48 - v1585;
                          v1589 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1587;
                          v1590 = 8 * v1589;
                          v1591 = 56 - 8 * v1589 - v1585;
                          v1592 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                          if (v1592)
                          {
                            if (v1589 >= 9)
                              v1593 = 9;
                            else
                              v1593 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1587;
                            v1594 = v1527;
                            v1592(*(_QWORD *)(v1 + 10680), v1587, &v4539, v1593);
                            v1588 = 48 - v1585;
                            v1527 = v1594;
                            v1587 = (uint8x8_t *)&v4539;
                          }
                          if (v1591 >= 0)
                            v1585 += 0x40000000;
                          if (v1590)
                            v1595 = 1;
                          else
                            v1595 = v1591 <= -1;
                          v1596 = v1591 & ~(v1591 >> 31);
                          if (!v1595 || v1588 < v1596)
                          {
                            v1473 = v4511;
                            result = v4493;
                          }
                          else
                          {
                            v1598 = (uint8x8_t *)(v1 + 10648);
                            v1599 = *(uint8x8_t *)(v1 + 10648);
                            v1600 = v1582 - v1531 + 40;
                            if (v1600 >= v1596 - 1)
                              v1601 = v1596 - 1;
                            else
                              v1601 = v1582 - v1531 + 40;
                            v1602 = v1582 - v1531 - v1601 + 47;
                            v1473 = v4511;
                            result = v4493;
                            if (v1602 < 0x78)
                              goto LABEL_1116;
                            if (v1600 >= v1596 - 1)
                              v1600 = v1596 - 1;
                            if (v1598 >= (uint8x8_t *)&v1587->i8[((v1582 - v1531 - v1600 + 47) >> 3) + 1]
                              || (unint64_t)v1587 >= v1 + 10656)
                            {
                              v1604 = (v1602 >> 3) + 1;
                              v1605 = *(_QWORD *)&v1599 + (v1604 & 0x3FFFFFF8);
                              v1606 = (uint8x8_t *)((char *)v1587 + (v1604 & 0x3FFFFFF8));
                              v1607 = v1588 - 8 * (v1604 & 0x3FFFFFF8);
                              v1608 = vdupq_n_s32(v1588);
                              v1609 = vaddq_s32(v1608, (int32x4_t)xmmword_208F3A6A0);
                              v1610 = vaddq_s32(v1608, (int32x4_t)xmmword_208F3A6B0);
                              v1611 = 0uLL;
                              v1612 = (int32x4_t)v1585;
                              v1613 = (int8x16_t)(unint64_t)v1584;
                              v1614.i64[0] = 0x800000008;
                              v1614.i64[1] = 0x800000008;
                              v1615.i64[0] = 0x3F0000003FLL;
                              v1615.i64[1] = 0x3F0000003FLL;
                              v1616 = v1604 & 0x3FFFFFF8;
                              v1617 = 0uLL;
                              v1618 = 0uLL;
                              v1619 = 0uLL;
                              do
                              {
                                v1612 = vaddq_s32(v1612, v1614);
                                v1620 = *v1587++;
                                v1611 = vaddq_s32(v1611, v1614);
                                v1621 = vmovl_u8(v1620);
                                v1622 = vmovl_high_u16(v1621);
                                v1623.i64[0] = v1622.u32[2];
                                v1623.i64[1] = v1622.u32[3];
                                v1624 = v1623;
                                v1623.i64[0] = v1622.u32[0];
                                v1623.i64[1] = v1622.u32[1];
                                v1625 = v1623;
                                v1626 = vmovl_u16(*(uint16x4_t *)v1621.i8);
                                v1623.i64[0] = v1626.u32[2];
                                v1623.i64[1] = v1626.u32[3];
                                v1627 = v1623;
                                v1623.i64[0] = v1626.u32[0];
                                v1623.i64[1] = v1626.u32[1];
                                v1628 = v1623;
                                v1623.i64[0] = v1609.u32[2];
                                v1623.i64[1] = v1609.u32[3];
                                v1629 = v1623;
                                v1623.i64[0] = v1609.u32[0];
                                v1623.i64[1] = v1609.u32[1];
                                v1630 = v1623;
                                v1623.i64[0] = v1610.u32[2];
                                v1623.i64[1] = v1610.u32[3];
                                v1631 = v1623;
                                v1623.i64[0] = v1610.u32[0];
                                v1623.i64[1] = v1610.u32[1];
                                v1619 = vorrq_s8((int8x16_t)vshlq_u64(v1624, v1629), v1619);
                                v1618 = vorrq_s8((int8x16_t)vshlq_u64(v1625, v1630), v1618);
                                v1617 = vorrq_s8((int8x16_t)vshlq_u64(v1627, v1631), v1617);
                                v1613 = vorrq_s8((int8x16_t)vshlq_u64(v1628, v1623), v1613);
                                *(_QWORD *)&v1599 += 8;
                                v1610 = vaddq_s32(v1610, v1615);
                                v1609 = vaddq_s32(v1609, v1615);
                                v1616 -= 8;
                              }
                              while (v1616);
                              *v1598 = v1599;
                              v1632 = vorrq_s8(vorrq_s8(v1613, v1618), vorrq_s8(v1617, v1619));
                              v1584 = vorr_s8(*(int8x8_t *)v1632.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1632, v1632, 8uLL));
                              v1585 = vaddvq_s32(vaddq_s32(v1612, v1611));
                              if ((v1604 & 0x3FFFFFF8) == v1604)
                                goto LABEL_1119;
                            }
                            else
                            {
LABEL_1116:
                              v1605 = *(_QWORD *)(v1 + 10648);
                              v1606 = v1587;
                              v1607 = v1588;
                            }
                            v1633 = (uint8x8_t)(v1605 + 1);
                            do
                            {
                              v1585 += 8;
                              v1634 = v1606->u8[0];
                              v1606 = (uint8x8_t *)((char *)v1606 + 1);
                              *(_QWORD *)&v1584 |= (unint64_t)v1634 << v1607;
                              *v1598 = v1633;
                              v1607 -= 8;
                              ++*(_QWORD *)&v1633;
                            }
                            while (v1607 >= v1596);
                          }
                        }
LABEL_1119:
                        v1635 = (int8x8_t)(*(_QWORD *)&v1584 - (v1586 << 56));
                        if (*(_QWORD *)&v1584 >= (unint64_t)(v1586 << 56))
                        {
                          LODWORD(v1586) = *(_DWORD *)(v1 + 10668) - v1586;
                          v1636 = 8;
                          v1584 = v1635;
                        }
                        else
                        {
                          v1636 = 0;
                        }
                        v1637 = v1473 | v4530;
                        v1638 = vp8_norm[v1586];
                        v1639 = (int8x8_t)(*(_QWORD *)&v1584 << v1638);
                        v1640 = v1585 - v1638;
                        *(int8x8_t *)(v1 + 10656) = v1639;
                        *(_DWORD *)(v1 + 10664) = v1585 - v1638;
                        *(_DWORD *)(v1 + 10668) = (_DWORD)v1586 << v1638;
                        v1641 = ((((_DWORD)v1586 << v1638 << 7) - 128) >> 8) + 1;
                        if (((v1585 - v1638) & 0x80000000) == 0)
                        {
                          v1642 = v1637 | v1527;
                          v1643 = (int8x8_t)(*(_QWORD *)&v1639 - (v1641 << 56));
                          if (*(_QWORD *)&v1639 < (unint64_t)(v1641 << 56))
                          {
LABEL_1124:
                            v1644 = 0;
                            goto LABEL_1161;
                          }
LABEL_1160:
                          LODWORD(v1641) = *(_DWORD *)(v1 + 10668) - v1641;
                          v1644 = 4;
                          v1639 = v1643;
LABEL_1161:
                          v1694 = v1642 | result;
                          v1695 = vp8_norm[v1641];
                          v1696 = (_DWORD)v1641 << v1695;
                          v1697 = (int8x8_t)(*(_QWORD *)&v1639 << v1695);
                          v1698 = v1640 - v1695;
                          *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1639 << v1695;
                          *(_DWORD *)(v1 + 10664) = v1640 - v1695;
                          *(_DWORD *)(v1 + 10668) = v1696;
                          v1699 = (((v1696 << 7) - 128) >> 8) + 1;
                          if (((v1640 - v1695) & 0x80000000) == 0)
                          {
                            v1700 = v1694 | v1636;
                            v1701 = (int8x8_t)(*(_QWORD *)&v1697 - (v1699 << 56));
                            if (*(_QWORD *)&v1697 < (unint64_t)(v1699 << 56))
                            {
LABEL_1163:
                              v1702 = 0;
                              goto LABEL_1198;
                            }
LABEL_1197:
                            LODWORD(v1699) = *(_DWORD *)(v1 + 10668) - v1699;
                            v1702 = 2;
                            v1697 = v1701;
LABEL_1198:
                            v1751 = v1700 | v1644;
                            v1752 = vp8_norm[v1699];
                            v1753 = (_DWORD)v1699 << v1752;
                            v1754 = (int8x8_t)(*(_QWORD *)&v1697 << v1752);
                            v1755 = v1698 - v1752;
                            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1697 << v1752;
                            *(_DWORD *)(v1 + 10664) = v1698 - v1752;
                            *(_DWORD *)(v1 + 10668) = v1753;
                            v1756 = (((v1753 << 7) - 128) >> 8) + 1;
                            if (((v1698 - v1752) & 0x80000000) == 0)
                            {
                              v1757 = v1751 | v1702;
                              v1758 = (int8x8_t)(*(_QWORD *)&v1754 - (v1756 << 56));
                              if (*(_QWORD *)&v1754 < (unint64_t)(v1756 << 56))
                              {
LABEL_1200:
                                v1759 = 0;
LABEL_1235:
                                v1807 = vp8_norm[v1756];
                                v1808 = (int8x8_t)(*(_QWORD *)&v1754 << v1807);
                                v1809 = v1755 - v1807;
                                *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1754 << v1807;
                                *(_DWORD *)(v1 + 10664) = v1755 - v1807;
                                *(_DWORD *)(v1 + 10668) = (_DWORD)v1756 << v1807;
                                v4458[2] = v1757 | v1759;
                                v1810 = ((((_DWORD)v1756 << v1807 << 7) - 128) >> 8) + 1;
                                if (((v1755 - v1807) & 0x80000000) == 0)
                                  goto LABEL_1268;
                                v1811 = *(uint8x8_t **)(v1 + 10648);
                                v1812 = 48 - v1809;
                                v1813 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1811;
                                v1814 = 8 * v1813;
                                v1815 = 56 - 8 * v1813 - v1809;
                                v1816 = *(uint64_t (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                if (v1816)
                                {
                                  if (v1813 >= 9)
                                    v1817 = 9;
                                  else
                                    v1817 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1811;
                                  result = v1816(*(_QWORD *)(v1 + 10680), v1811, &v4539, v1817);
                                  v1811 = (uint8x8_t *)&v4539;
                                }
                                if (v1815 >= 0)
                                  v1809 += 0x40000000;
                                v1818 = v1814 || v1815 <= -1;
                                v1819 = v1815 & ~(v1815 >> 31);
                                if (!v1818 || v1812 < v1819)
                                  goto LABEL_1268;
                                v1821 = (uint8x8_t *)(v1 + 10648);
                                v1822 = *(uint8x8_t *)(v1 + 10648);
                                v1823 = v1807 - v1755 + 40;
                                if (v1823 >= v1819 - 1)
                                  v1824 = v1819 - 1;
                                else
                                  v1824 = v1807 - v1755 + 40;
                                v1825 = v1807 - v1755 - v1824 + 47;
                                if (v1825 < 0x78)
                                  goto LABEL_1265;
                                if (v1823 >= v1819 - 1)
                                  v1823 = v1819 - 1;
                                if (v1821 >= (uint8x8_t *)&v1811->i8[((v1807 - v1755 - v1823 + 47) >> 3) + 1]
                                  || (unint64_t)v1811 >= v1 + 10656)
                                {
                                  v1827 = (v1825 >> 3) + 1;
                                  v1828 = *(_QWORD *)&v1822 + (v1827 & 0x3FFFFFF8);
                                  v1829 = (uint8x8_t *)((char *)v1811 + (v1827 & 0x3FFFFFF8));
                                  v1830 = v1812 - 8 * (v1827 & 0x3FFFFFF8);
                                  v1831 = vdupq_n_s32(v1812);
                                  v1832 = vaddq_s32(v1831, (int32x4_t)xmmword_208F3A6A0);
                                  v1833 = vaddq_s32(v1831, (int32x4_t)xmmword_208F3A6B0);
                                  v1834 = 0uLL;
                                  v1835 = (int32x4_t)v1809;
                                  v1836 = (int8x16_t)(unint64_t)v1808;
                                  v1837.i64[0] = 0x800000008;
                                  v1837.i64[1] = 0x800000008;
                                  v1838.i64[0] = 0x3F0000003FLL;
                                  v1838.i64[1] = 0x3F0000003FLL;
                                  v1839 = v1827 & 0x3FFFFFF8;
                                  v1840 = 0uLL;
                                  v1841 = 0uLL;
                                  v1842 = 0uLL;
                                  do
                                  {
                                    v1835 = vaddq_s32(v1835, v1837);
                                    v1843 = *v1811++;
                                    v1834 = vaddq_s32(v1834, v1837);
                                    v1844 = vmovl_u8(v1843);
                                    v1845 = vmovl_high_u16(v1844);
                                    v1846.i64[0] = v1845.u32[2];
                                    v1846.i64[1] = v1845.u32[3];
                                    v1847 = v1846;
                                    v1846.i64[0] = v1845.u32[0];
                                    v1846.i64[1] = v1845.u32[1];
                                    v1848 = v1846;
                                    v1849 = vmovl_u16(*(uint16x4_t *)v1844.i8);
                                    v1846.i64[0] = v1849.u32[2];
                                    v1846.i64[1] = v1849.u32[3];
                                    v1850 = v1846;
                                    v1846.i64[0] = v1849.u32[0];
                                    v1846.i64[1] = v1849.u32[1];
                                    v1851 = v1846;
                                    v1846.i64[0] = v1832.u32[2];
                                    v1846.i64[1] = v1832.u32[3];
                                    v1852 = v1846;
                                    v1846.i64[0] = v1832.u32[0];
                                    v1846.i64[1] = v1832.u32[1];
                                    v1853 = v1846;
                                    v1846.i64[0] = v1833.u32[2];
                                    v1846.i64[1] = v1833.u32[3];
                                    v1854 = v1846;
                                    v1846.i64[0] = v1833.u32[0];
                                    v1846.i64[1] = v1833.u32[1];
                                    v1842 = vorrq_s8((int8x16_t)vshlq_u64(v1847, v1852), v1842);
                                    v1841 = vorrq_s8((int8x16_t)vshlq_u64(v1848, v1853), v1841);
                                    v1840 = vorrq_s8((int8x16_t)vshlq_u64(v1850, v1854), v1840);
                                    v1836 = vorrq_s8((int8x16_t)vshlq_u64(v1851, v1846), v1836);
                                    *(_QWORD *)&v1822 += 8;
                                    v1833 = vaddq_s32(v1833, v1838);
                                    v1832 = vaddq_s32(v1832, v1838);
                                    v1839 -= 8;
                                  }
                                  while (v1839);
                                  *v1821 = v1822;
                                  v1855 = vorrq_s8(vorrq_s8(v1836, v1841), vorrq_s8(v1840, v1842));
                                  v1808 = vorr_s8(*(int8x8_t *)v1855.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1855, v1855, 8uLL));
                                  v1809 = vaddvq_s32(vaddq_s32(v1835, v1834));
                                  if ((v1827 & 0x3FFFFFF8) == v1827)
                                    goto LABEL_1268;
                                }
                                else
                                {
LABEL_1265:
                                  v1828 = *(_QWORD *)(v1 + 10648);
                                  v1829 = v1811;
                                  v1830 = v1812;
                                }
                                v1856 = (uint8x8_t)(v1828 + 1);
                                do
                                {
                                  v1809 += 8;
                                  v1857 = v1829->u8[0];
                                  v1829 = (uint8x8_t *)((char *)v1829 + 1);
                                  *(_QWORD *)&v1808 |= (unint64_t)v1857 << v1830;
                                  *v1821 = v1856;
                                  v1830 -= 8;
                                  ++*(_QWORD *)&v1856;
                                }
                                while (v1830 >= v1819);
LABEL_1268:
                                v1858 = v1810 << 56;
                                v1859 = v1808;
                                v1860 = (int8x8_t)(*(_QWORD *)&v1808 - (v1810 << 56));
                                if (*(_QWORD *)&v1808 >= (unint64_t)(v1810 << 56))
                                {
                                  LODWORD(v1810) = *(_DWORD *)(v1 + 10668) - v1810;
                                  v1859 = v1860;
                                }
                                v1861 = vp8_norm[v1810];
                                v1862 = (_DWORD)v1810 << v1861;
                                v1863 = (int8x8_t)(*(_QWORD *)&v1859 << v1861);
                                *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1859 << v1861;
                                v1864 = v1809 - v1861;
                                *(_DWORD *)(v1 + 10664) = v1864;
                                *(_DWORD *)(v1 + 10668) = v1862;
                                if (*(_QWORD *)&v1808 < v1858)
                                {
                                  v1865 = (((v1862 << 7) - 128) >> 8) + 1;
                                  if ((v1864 & 0x80000000) != 0)
                                    goto LABEL_3212;
                                  goto LABEL_1272;
                                }
                                v4536 = 0;
                                v3969 = (uint8x8_t *)(v1 + 10648);
                                v4478 = v1 + 10656;
                                v3970.i64[0] = 0x800000008;
                                v3970.i64[1] = 0x800000008;
                                v3971.i64[0] = 0x3F0000003FLL;
                                v3971.i64[1] = 0x3F0000003FLL;
                                while (1)
                                {
                                  v3976 = *(_DWORD *)(v1 + 10668);
                                  v3977 = *(int8x8_t *)(v1 + 10656);
                                  if ((v1864 & 0x80000000) != 0)
                                    break;
LABEL_2948:
                                  v4022 = (((v3976 << 7) - 128) >> 8) + 1;
                                  v4023 = (int8x8_t)(*(_QWORD *)&v3977 - (v4022 << 56));
                                  if (*(_QWORD *)&v3977 >= (unint64_t)(v4022 << 56))
                                  {
                                    LODWORD(v4022) = *(_DWORD *)(v1 + 10668) - v4022;
                                    v4517 = 0x80;
                                    v3977 = v4023;
                                  }
                                  else
                                  {
                                    v4517 = 0;
                                  }
                                  v4024 = vp8_norm[v4022];
                                  v4025 = (_DWORD)v4022 << v4024;
                                  v4026 = (int8x8_t)(*(_QWORD *)&v3977 << v4024);
                                  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3977 << v4024;
                                  v4027 = v1864 - v4024;
                                  *(_DWORD *)(v1 + 10664) = v1864 - v4024;
                                  *(_DWORD *)(v1 + 10668) = (_DWORD)v4022 << v4024;
                                  if (((v1864 - v4024) & 0x80000000) != 0)
                                  {
                                    v4028 = *(uint8x8_t **)(v1 + 10648);
                                    v4029 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4028;
                                    v4030 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                    if (v4030)
                                    {
                                      if (v4029 >= 9)
                                        v4031 = 9;
                                      else
                                        v4031 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4028;
                                      v4030(*(_QWORD *)(v1 + 10680), v4028, &v4539, v4031);
                                      v3971.i64[0] = 0x3F0000003FLL;
                                      v3971.i64[1] = 0x3F0000003FLL;
                                      v3970.i64[0] = 0x800000008;
                                      v3970.i64[1] = 0x800000008;
                                      v4028 = (uint8x8_t *)&v4539;
                                    }
                                    v4032 = 48 - v4027;
                                    v4033 = 56 - 8 * v4029 - v4027;
                                    if (v4033 >= 0)
                                      v4027 += 0x40000000;
                                    v4034 = 8 * v4029 || v4033 <= -1;
                                    v4035 = v4033 & ~(v4033 >> 31);
                                    if (v4034 && v4032 >= v4035)
                                    {
                                      v4084 = *v3969;
                                      v4085 = v4024 - v1864 + 40;
                                      if (v4085 >= v4035 - 1)
                                        v4086 = v4035 - 1;
                                      else
                                        v4086 = v4024 - v1864 + 40;
                                      v4087 = v4024 - v1864 - v4086 + 47;
                                      if (v4087 < 0x78)
                                      {
                                        v4088 = *v3969;
                                        v4089 = v4028;
                                        v4090 = v4032;
                                        goto LABEL_3204;
                                      }
                                      if (v4085 >= v4035 - 1)
                                        v4085 = v4035 - 1;
                                      if (v3969 < (uint8x8_t *)&v4028->i8[((v4024 - v1864 - v4085 + 47) >> 3) + 1]
                                        && (unint64_t)v4028 < v4478)
                                      {
                                        v4088 = *v3969;
                                        v4089 = v4028;
                                        v4090 = v4032;
LABEL_3204:
                                        v4371 = (uint8x8_t)(*(_QWORD *)&v4088 + 1);
                                        do
                                        {
                                          v4027 += 8;
                                          v4372 = v4089->u8[0];
                                          v4089 = (uint8x8_t *)((char *)v4089 + 1);
                                          *(_QWORD *)&v4026 |= (unint64_t)v4372 << v4090;
                                          *v3969 = v4371;
                                          v4090 -= 8;
                                          ++*(_QWORD *)&v4371;
                                        }
                                        while (v4090 >= v4035);
                                        goto LABEL_2967;
                                      }
                                      v4322 = (v4087 >> 3) + 1;
                                      v4088 = (uint8x8_t)(*(_QWORD *)&v4084 + (v4322 & 0x3FFFFFF8));
                                      v4089 = (uint8x8_t *)((char *)v4028 + (v4322 & 0x3FFFFFF8));
                                      v4090 = v4032 - 8 * (v4322 & 0x3FFFFFF8);
                                      v4323 = vdupq_n_s32(v4032);
                                      v4324 = vaddq_s32(v4323, (int32x4_t)xmmword_208F3A6A0);
                                      v4325 = vaddq_s32(v4323, (int32x4_t)xmmword_208F3A6B0);
                                      v4326 = 0uLL;
                                      v4327 = (int32x4_t)v4027;
                                      v4328 = (int8x16_t)(unint64_t)v4026;
                                      v4329 = v4322 & 0x3FFFFFF8;
                                      v4330 = 0uLL;
                                      v4331 = 0uLL;
                                      v4332 = 0uLL;
                                      do
                                      {
                                        v4327 = vaddq_s32(v4327, v3970);
                                        v4333 = *v4028++;
                                        v4326 = vaddq_s32(v4326, v3970);
                                        v4334 = vmovl_u8(v4333);
                                        v4335 = vmovl_high_u16(v4334);
                                        v4336.i64[0] = v4335.u32[2];
                                        v4336.i64[1] = v4335.u32[3];
                                        v4337 = v4336;
                                        v4336.i64[0] = v4335.u32[0];
                                        v4336.i64[1] = v4335.u32[1];
                                        v4338 = v4336;
                                        v4339 = vmovl_u16(*(uint16x4_t *)v4334.i8);
                                        v4336.i64[0] = v4339.u32[2];
                                        v4336.i64[1] = v4339.u32[3];
                                        v4340 = v4336;
                                        v4336.i64[0] = v4339.u32[0];
                                        v4336.i64[1] = v4339.u32[1];
                                        v4341 = v4336;
                                        v4336.i64[0] = v4324.u32[2];
                                        v4336.i64[1] = v4324.u32[3];
                                        v4342 = v4336;
                                        v4336.i64[0] = v4324.u32[0];
                                        v4336.i64[1] = v4324.u32[1];
                                        v4343 = v4336;
                                        v4336.i64[0] = v4325.u32[2];
                                        v4336.i64[1] = v4325.u32[3];
                                        v4344 = v4336;
                                        v4336.i64[0] = v4325.u32[0];
                                        v4336.i64[1] = v4325.u32[1];
                                        v4332 = vorrq_s8((int8x16_t)vshlq_u64(v4337, v4342), v4332);
                                        v4331 = vorrq_s8((int8x16_t)vshlq_u64(v4338, v4343), v4331);
                                        v4330 = vorrq_s8((int8x16_t)vshlq_u64(v4340, v4344), v4330);
                                        v4328 = vorrq_s8((int8x16_t)vshlq_u64(v4341, v4336), v4328);
                                        *(_QWORD *)&v4084 += 8;
                                        v4325 = vaddq_s32(v4325, v3971);
                                        v4324 = vaddq_s32(v4324, v3971);
                                        v4329 -= 8;
                                      }
                                      while (v4329);
                                      *v3969 = v4084;
                                      v4345 = vorrq_s8(vorrq_s8(v4328, v4331), vorrq_s8(v4330, v4332));
                                      v4026 = vorr_s8(*(int8x8_t *)v4345.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4345, v4345, 8uLL));
                                      v4027 = vaddvq_s32(vaddq_s32(v4327, v4326));
                                      if ((v4322 & 0x3FFFFFF8) != v4322)
                                        goto LABEL_3204;
                                    }
                                  }
LABEL_2967:
                                  v4037 = (((v4025 << 7) - 128) >> 8) + 1;
                                  v4038 = (int8x8_t)(*(_QWORD *)&v4026 - (v4037 << 56));
                                  if (*(_QWORD *)&v4026 >= (unint64_t)(v4037 << 56))
                                  {
                                    LODWORD(v4037) = *(_DWORD *)(v1 + 10668) - v4037;
                                    v4497 = 64;
                                    v4026 = v4038;
                                  }
                                  else
                                  {
                                    v4497 = 0;
                                  }
                                  v4039 = vp8_norm[v4037];
                                  v4040 = (_DWORD)v4037 << v4039;
                                  v4041 = (int8x8_t)(*(_QWORD *)&v4026 << v4039);
                                  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v4026 << v4039;
                                  v4042 = v4027 - v4039;
                                  *(_DWORD *)(v1 + 10664) = v4027 - v4039;
                                  *(_DWORD *)(v1 + 10668) = (_DWORD)v4037 << v4039;
                                  if (((v4027 - v4039) & 0x80000000) != 0)
                                  {
                                    v4043 = *(uint8x8_t **)(v1 + 10648);
                                    v4044 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4043;
                                    v4045 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                    if (v4045)
                                    {
                                      if (v4044 >= 9)
                                        v4046 = 9;
                                      else
                                        v4046 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4043;
                                      v4045(*(_QWORD *)(v1 + 10680), v4043, &v4539, v4046);
                                      v3971.i64[0] = 0x3F0000003FLL;
                                      v3971.i64[1] = 0x3F0000003FLL;
                                      v3970.i64[0] = 0x800000008;
                                      v3970.i64[1] = 0x800000008;
                                      v4043 = (uint8x8_t *)&v4539;
                                    }
                                    v4047 = 48 - v4042;
                                    v4048 = 56 - 8 * v4044 - v4042;
                                    if (v4048 >= 0)
                                      v4042 += 0x40000000;
                                    v4049 = 8 * v4044 || v4048 <= -1;
                                    v4050 = v4048 & ~(v4048 >> 31);
                                    if (v4049 && v4047 >= v4050)
                                    {
                                      v4052 = *v3969;
                                      v4053 = v4039 - v4027 + 40;
                                      if (v4053 >= v4050 - 1)
                                        v4054 = v4050 - 1;
                                      else
                                        v4054 = v4039 - v4027 + 40;
                                      v4055 = v4039 - v4027 - v4054 + 47;
                                      if (v4055 < 0x78)
                                        goto LABEL_3005;
                                      if (v4053 >= v4050 - 1)
                                        v4053 = v4050 - 1;
                                      if (v3969 < (uint8x8_t *)&v4043->i8[((v4039 - v4027 - v4053 + 47) >> 3) + 1]
                                        && (unint64_t)v4043 < v4478)
                                      {
LABEL_3005:
                                        v4058 = *v3969;
                                        v4059 = v4043;
                                        v4060 = v4047;
LABEL_3006:
                                        v4091 = (uint8x8_t)(*(_QWORD *)&v4058 + 1);
                                        do
                                        {
                                          v4042 += 8;
                                          v4092 = v4059->u8[0];
                                          v4059 = (uint8x8_t *)((char *)v4059 + 1);
                                          *(_QWORD *)&v4041 |= (unint64_t)v4092 << v4060;
                                          *v3969 = v4091;
                                          v4060 -= 8;
                                          ++*(_QWORD *)&v4091;
                                        }
                                        while (v4060 >= v4050);
                                        goto LABEL_3008;
                                      }
                                      v4057 = (v4055 >> 3) + 1;
                                      v4058 = (uint8x8_t)(*(_QWORD *)&v4052 + (v4057 & 0x3FFFFFF8));
                                      v4059 = (uint8x8_t *)((char *)v4043 + (v4057 & 0x3FFFFFF8));
                                      v4060 = v4047 - 8 * (v4057 & 0x3FFFFFF8);
                                      v4061 = vdupq_n_s32(v4047);
                                      v4062 = vaddq_s32(v4061, (int32x4_t)xmmword_208F3A6A0);
                                      v4063 = vaddq_s32(v4061, (int32x4_t)xmmword_208F3A6B0);
                                      v4064 = 0uLL;
                                      v4065 = (int32x4_t)v4042;
                                      v4066 = (int8x16_t)(unint64_t)v4041;
                                      v4067 = v4057 & 0x3FFFFFF8;
                                      v4068 = 0uLL;
                                      v4069 = 0uLL;
                                      v4070 = 0uLL;
                                      do
                                      {
                                        v4065 = vaddq_s32(v4065, v3970);
                                        v4071 = *v4043++;
                                        v4064 = vaddq_s32(v4064, v3970);
                                        v4072 = vmovl_u8(v4071);
                                        v4073 = vmovl_high_u16(v4072);
                                        v4074.i64[0] = v4073.u32[2];
                                        v4074.i64[1] = v4073.u32[3];
                                        v4075 = v4074;
                                        v4074.i64[0] = v4073.u32[0];
                                        v4074.i64[1] = v4073.u32[1];
                                        v4076 = v4074;
                                        v4077 = vmovl_u16(*(uint16x4_t *)v4072.i8);
                                        v4074.i64[0] = v4077.u32[2];
                                        v4074.i64[1] = v4077.u32[3];
                                        v4078 = v4074;
                                        v4074.i64[0] = v4077.u32[0];
                                        v4074.i64[1] = v4077.u32[1];
                                        v4079 = v4074;
                                        v4074.i64[0] = v4062.u32[2];
                                        v4074.i64[1] = v4062.u32[3];
                                        v4080 = v4074;
                                        v4074.i64[0] = v4062.u32[0];
                                        v4074.i64[1] = v4062.u32[1];
                                        v4081 = v4074;
                                        v4074.i64[0] = v4063.u32[2];
                                        v4074.i64[1] = v4063.u32[3];
                                        v4082 = v4074;
                                        v4074.i64[0] = v4063.u32[0];
                                        v4074.i64[1] = v4063.u32[1];
                                        v4070 = vorrq_s8((int8x16_t)vshlq_u64(v4075, v4080), v4070);
                                        v4069 = vorrq_s8((int8x16_t)vshlq_u64(v4076, v4081), v4069);
                                        v4068 = vorrq_s8((int8x16_t)vshlq_u64(v4078, v4082), v4068);
                                        v4066 = vorrq_s8((int8x16_t)vshlq_u64(v4079, v4074), v4066);
                                        *(_QWORD *)&v4052 += 8;
                                        v4063 = vaddq_s32(v4063, v3971);
                                        v4062 = vaddq_s32(v4062, v3971);
                                        v4067 -= 8;
                                      }
                                      while (v4067);
                                      *v3969 = v4052;
                                      v4083 = vorrq_s8(vorrq_s8(v4066, v4069), vorrq_s8(v4068, v4070));
                                      v4041 = vorr_s8(*(int8x8_t *)v4083.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4083, v4083, 8uLL));
                                      v4042 = vaddvq_s32(vaddq_s32(v4065, v4064));
                                      if ((v4057 & 0x3FFFFFF8) != v4057)
                                        goto LABEL_3006;
                                    }
                                  }
LABEL_3008:
                                  v4093 = (((v4040 << 7) - 128) >> 8) + 1;
                                  v4094 = (int8x8_t)(*(_QWORD *)&v4041 - (v4093 << 56));
                                  if (*(_QWORD *)&v4041 >= (unint64_t)(v4093 << 56))
                                  {
                                    LODWORD(v4093) = *(_DWORD *)(v1 + 10668) - v4093;
                                    v4486 = 32;
                                    v4041 = v4094;
                                  }
                                  else
                                  {
                                    v4486 = 0;
                                  }
                                  v4095 = vp8_norm[v4093];
                                  v4096 = (_DWORD)v4093 << v4095;
                                  v4097 = (int8x8_t)(*(_QWORD *)&v4041 << v4095);
                                  *(int8x8_t *)(v1 + 10656) = v4097;
                                  v4098 = v4042 - v4095;
                                  *(_DWORD *)(v1 + 10664) = v4042 - v4095;
                                  *(_DWORD *)(v1 + 10668) = (_DWORD)v4093 << v4095;
                                  if (((v4042 - v4095) & 0x80000000) != 0)
                                  {
                                    v4099 = *(uint8x8_t **)(v1 + 10648);
                                    v4100 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4099;
                                    v4101 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                    if (v4101)
                                    {
                                      if (v4100 >= 9)
                                        v4102 = 9;
                                      else
                                        v4102 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4099;
                                      v4101(*(_QWORD *)(v1 + 10680), v4099, &v4539, v4102);
                                      v3971.i64[0] = 0x3F0000003FLL;
                                      v3971.i64[1] = 0x3F0000003FLL;
                                      v3970.i64[0] = 0x800000008;
                                      v3970.i64[1] = 0x800000008;
                                      v4099 = (uint8x8_t *)&v4539;
                                    }
                                    v4103 = 48 - v4098;
                                    v4104 = 56 - 8 * v4100 - v4098;
                                    if (v4104 >= 0)
                                      v4098 += 0x40000000;
                                    v4105 = 8 * v4100 || v4104 <= -1;
                                    v4106 = v4104 & ~(v4104 >> 31);
                                    if (v4105 && v4103 >= v4106)
                                    {
                                      v4108 = *v3969;
                                      v4109 = v4095 - v4042 + 40;
                                      if (v4109 >= v4106 - 1)
                                        v4110 = v4106 - 1;
                                      else
                                        v4110 = v4095 - v4042 + 40;
                                      v4111 = v4095 - v4042 - v4110 + 47;
                                      if (v4111 < 0x78)
                                        goto LABEL_3041;
                                      if (v4109 >= v4106 - 1)
                                        v4109 = v4106 - 1;
                                      if (v3969 < (uint8x8_t *)&v4099->i8[((v4095 - v4042 - v4109 + 47) >> 3) + 1]
                                        && (unint64_t)v4099 < v4478)
                                      {
LABEL_3041:
                                        v4114 = *v3969;
                                        v4115 = v4099;
                                        v4116 = v4103;
LABEL_3042:
                                        v4140 = (uint8x8_t)(*(_QWORD *)&v4114 + 1);
                                        do
                                        {
                                          v4098 += 8;
                                          v4141 = v4115->u8[0];
                                          v4115 = (uint8x8_t *)((char *)v4115 + 1);
                                          *(_QWORD *)&v4097 |= (unint64_t)v4141 << v4116;
                                          *v3969 = v4140;
                                          v4116 -= 8;
                                          ++*(_QWORD *)&v4140;
                                        }
                                        while (v4116 >= v4106);
                                        goto LABEL_3044;
                                      }
                                      v4113 = (v4111 >> 3) + 1;
                                      v4114 = (uint8x8_t)(*(_QWORD *)&v4108 + (v4113 & 0x3FFFFFF8));
                                      v4115 = (uint8x8_t *)((char *)v4099 + (v4113 & 0x3FFFFFF8));
                                      v4116 = v4103 - 8 * (v4113 & 0x3FFFFFF8);
                                      v4117 = vdupq_n_s32(v4103);
                                      v4118 = vaddq_s32(v4117, (int32x4_t)xmmword_208F3A6A0);
                                      v4119 = vaddq_s32(v4117, (int32x4_t)xmmword_208F3A6B0);
                                      v4120 = 0uLL;
                                      v4121 = (int32x4_t)v4098;
                                      v4122 = (int8x16_t)(unint64_t)v4097;
                                      v4123 = v4113 & 0x3FFFFFF8;
                                      v4124 = 0uLL;
                                      v4125 = 0uLL;
                                      v4126 = 0uLL;
                                      do
                                      {
                                        v4121 = vaddq_s32(v4121, v3970);
                                        v4127 = *v4099++;
                                        v4120 = vaddq_s32(v4120, v3970);
                                        v4128 = vmovl_u8(v4127);
                                        v4129 = vmovl_high_u16(v4128);
                                        v4130.i64[0] = v4129.u32[2];
                                        v4130.i64[1] = v4129.u32[3];
                                        v4131 = v4130;
                                        v4130.i64[0] = v4129.u32[0];
                                        v4130.i64[1] = v4129.u32[1];
                                        v4132 = v4130;
                                        v4133 = vmovl_u16(*(uint16x4_t *)v4128.i8);
                                        v4130.i64[0] = v4133.u32[2];
                                        v4130.i64[1] = v4133.u32[3];
                                        v4134 = v4130;
                                        v4130.i64[0] = v4133.u32[0];
                                        v4130.i64[1] = v4133.u32[1];
                                        v4135 = v4130;
                                        v4130.i64[0] = v4118.u32[2];
                                        v4130.i64[1] = v4118.u32[3];
                                        v4136 = v4130;
                                        v4130.i64[0] = v4118.u32[0];
                                        v4130.i64[1] = v4118.u32[1];
                                        v4137 = v4130;
                                        v4130.i64[0] = v4119.u32[2];
                                        v4130.i64[1] = v4119.u32[3];
                                        v4138 = v4130;
                                        v4130.i64[0] = v4119.u32[0];
                                        v4130.i64[1] = v4119.u32[1];
                                        v4126 = vorrq_s8((int8x16_t)vshlq_u64(v4131, v4136), v4126);
                                        v4125 = vorrq_s8((int8x16_t)vshlq_u64(v4132, v4137), v4125);
                                        v4124 = vorrq_s8((int8x16_t)vshlq_u64(v4134, v4138), v4124);
                                        v4122 = vorrq_s8((int8x16_t)vshlq_u64(v4135, v4130), v4122);
                                        *(_QWORD *)&v4108 += 8;
                                        v4119 = vaddq_s32(v4119, v3971);
                                        v4118 = vaddq_s32(v4118, v3971);
                                        v4123 -= 8;
                                      }
                                      while (v4123);
                                      *v3969 = v4108;
                                      v4139 = vorrq_s8(vorrq_s8(v4122, v4125), vorrq_s8(v4124, v4126));
                                      v4097 = vorr_s8(*(int8x8_t *)v4139.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4139, v4139, 8uLL));
                                      v4098 = vaddvq_s32(vaddq_s32(v4121, v4120));
                                      if ((v4113 & 0x3FFFFFF8) != v4113)
                                        goto LABEL_3042;
                                    }
                                  }
LABEL_3044:
                                  v4142 = (((v4096 << 7) - 128) >> 8) + 1;
                                  v4143 = (int8x8_t)(*(_QWORD *)&v4097 - (v4142 << 56));
                                  if (*(_QWORD *)&v4097 >= (unint64_t)(v4142 << 56))
                                  {
                                    LODWORD(v4142) = *(_DWORD *)(v1 + 10668) - v4142;
                                    v4481 = 16;
                                    v4097 = v4143;
                                  }
                                  else
                                  {
                                    v4481 = 0;
                                  }
                                  v4144 = vp8_norm[v4142];
                                  v4145 = (_DWORD)v4142 << v4144;
                                  v4146 = (int8x8_t)(*(_QWORD *)&v4097 << v4144);
                                  *(int8x8_t *)(v1 + 10656) = v4146;
                                  v4147 = v4098 - v4144;
                                  *(_DWORD *)(v1 + 10664) = v4098 - v4144;
                                  *(_DWORD *)(v1 + 10668) = (_DWORD)v4142 << v4144;
                                  if (((v4098 - v4144) & 0x80000000) != 0)
                                  {
                                    v4148 = *(uint8x8_t **)(v1 + 10648);
                                    v4149 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4148;
                                    v4150 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                    if (v4150)
                                    {
                                      if (v4149 >= 9)
                                        v4151 = 9;
                                      else
                                        v4151 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4148;
                                      v4150(*(_QWORD *)(v1 + 10680), v4148, &v4539, v4151);
                                      v3971.i64[0] = 0x3F0000003FLL;
                                      v3971.i64[1] = 0x3F0000003FLL;
                                      v3970.i64[0] = 0x800000008;
                                      v3970.i64[1] = 0x800000008;
                                      v4148 = (uint8x8_t *)&v4539;
                                    }
                                    v4152 = 48 - v4147;
                                    v4153 = 56 - 8 * v4149 - v4147;
                                    if (v4153 >= 0)
                                      v4147 += 0x40000000;
                                    v4154 = 8 * v4149 || v4153 <= -1;
                                    v4155 = v4153 & ~(v4153 >> 31);
                                    if (v4154 && v4152 >= v4155)
                                    {
                                      v4157 = *v3969;
                                      v4158 = v4144 - v4098 + 40;
                                      if (v4158 >= v4155 - 1)
                                        v4159 = v4155 - 1;
                                      else
                                        v4159 = v4144 - v4098 + 40;
                                      v4160 = v4144 - v4098 - v4159 + 47;
                                      if (v4160 < 0x78)
                                        goto LABEL_3077;
                                      if (v4158 >= v4155 - 1)
                                        v4158 = v4155 - 1;
                                      if (v3969 >= (uint8x8_t *)&v4148->i8[((v4144 - v4098 - v4158 + 47) >> 3) + 1]
                                        || (unint64_t)v4148 >= v4478)
                                      {
                                        v4162 = (v4160 >> 3) + 1;
                                        v4163 = (uint8x8_t)(*(_QWORD *)&v4157 + (v4162 & 0x3FFFFFF8));
                                        v4164 = (uint8x8_t *)((char *)v4148 + (v4162 & 0x3FFFFFF8));
                                        v4165 = v4152 - 8 * (v4162 & 0x3FFFFFF8);
                                        v4166 = vdupq_n_s32(v4152);
                                        v4167 = vaddq_s32(v4166, (int32x4_t)xmmword_208F3A6A0);
                                        v4168 = vaddq_s32(v4166, (int32x4_t)xmmword_208F3A6B0);
                                        v4169 = 0uLL;
                                        v4170 = (int32x4_t)v4147;
                                        v4171 = (int8x16_t)(unint64_t)v4146;
                                        v4172 = v4162 & 0x3FFFFFF8;
                                        v4173 = 0uLL;
                                        v4174 = 0uLL;
                                        v4175 = 0uLL;
                                        do
                                        {
                                          v4170 = vaddq_s32(v4170, v3970);
                                          v4176 = *v4148++;
                                          v4169 = vaddq_s32(v4169, v3970);
                                          v4177 = vmovl_u8(v4176);
                                          v4178 = vmovl_high_u16(v4177);
                                          v4179.i64[0] = v4178.u32[2];
                                          v4179.i64[1] = v4178.u32[3];
                                          v4180 = v4179;
                                          v4179.i64[0] = v4178.u32[0];
                                          v4179.i64[1] = v4178.u32[1];
                                          v4181 = v4179;
                                          v4182 = vmovl_u16(*(uint16x4_t *)v4177.i8);
                                          v4179.i64[0] = v4182.u32[2];
                                          v4179.i64[1] = v4182.u32[3];
                                          v4183 = v4179;
                                          v4179.i64[0] = v4182.u32[0];
                                          v4179.i64[1] = v4182.u32[1];
                                          v4184 = v4179;
                                          v4179.i64[0] = v4167.u32[2];
                                          v4179.i64[1] = v4167.u32[3];
                                          v4185 = v4179;
                                          v4179.i64[0] = v4167.u32[0];
                                          v4179.i64[1] = v4167.u32[1];
                                          v4186 = v4179;
                                          v4179.i64[0] = v4168.u32[2];
                                          v4179.i64[1] = v4168.u32[3];
                                          v4187 = v4179;
                                          v4179.i64[0] = v4168.u32[0];
                                          v4179.i64[1] = v4168.u32[1];
                                          v4175 = vorrq_s8((int8x16_t)vshlq_u64(v4180, v4185), v4175);
                                          v4174 = vorrq_s8((int8x16_t)vshlq_u64(v4181, v4186), v4174);
                                          v4173 = vorrq_s8((int8x16_t)vshlq_u64(v4183, v4187), v4173);
                                          v4171 = vorrq_s8((int8x16_t)vshlq_u64(v4184, v4179), v4171);
                                          *(_QWORD *)&v4157 += 8;
                                          v4168 = vaddq_s32(v4168, v3971);
                                          v4167 = vaddq_s32(v4167, v3971);
                                          v4172 -= 8;
                                        }
                                        while (v4172);
                                        *v3969 = v4157;
                                        v4188 = vorrq_s8(vorrq_s8(v4171, v4174), vorrq_s8(v4173, v4175));
                                        v4146 = vorr_s8(*(int8x8_t *)v4188.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4188, v4188, 8uLL));
                                        v4147 = vaddvq_s32(vaddq_s32(v4170, v4169));
                                        if ((v4162 & 0x3FFFFFF8) == v4162)
                                          goto LABEL_3080;
                                      }
                                      else
                                      {
LABEL_3077:
                                        v4163 = *v3969;
                                        v4164 = v4148;
                                        v4165 = v4152;
                                      }
                                      v4189 = (uint8x8_t)(*(_QWORD *)&v4163 + 1);
                                      do
                                      {
                                        v4147 += 8;
                                        v4190 = v4164->u8[0];
                                        v4164 = (uint8x8_t *)((char *)v4164 + 1);
                                        *(_QWORD *)&v4146 |= (unint64_t)v4190 << v4165;
                                        *v3969 = v4189;
                                        v4165 -= 8;
                                        ++*(_QWORD *)&v4189;
                                      }
                                      while (v4165 >= v4155);
                                    }
                                  }
LABEL_3080:
                                  v4191 = (((v4145 << 7) - 128) >> 8) + 1;
                                  v4192 = (int8x8_t)(*(_QWORD *)&v4146 - (v4191 << 56));
                                  if (*(_QWORD *)&v4146 >= (unint64_t)(v4191 << 56))
                                  {
                                    LODWORD(v4191) = *(_DWORD *)(v1 + 10668) - v4191;
                                    v4193 = 8;
                                    v4146 = v4192;
                                  }
                                  else
                                  {
                                    v4193 = 0;
                                  }
                                  v4194 = vp8_norm[v4191];
                                  v4195 = (_DWORD)v4191 << v4194;
                                  v4196 = (int8x8_t)(*(_QWORD *)&v4146 << v4194);
                                  *(int8x8_t *)(v1 + 10656) = v4196;
                                  v4197 = v4147 - v4194;
                                  *(_DWORD *)(v1 + 10664) = v4147 - v4194;
                                  *(_DWORD *)(v1 + 10668) = (_DWORD)v4191 << v4194;
                                  if (((v4147 - v4194) & 0x80000000) != 0)
                                  {
                                    v4198 = v4193;
                                    v4199 = *(uint8x8_t **)(v1 + 10648);
                                    v4200 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4199;
                                    v4201 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                    if (v4201)
                                    {
                                      if (v4200 >= 9)
                                        v4202 = 9;
                                      else
                                        v4202 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4199;
                                      v4201(*(_QWORD *)(v1 + 10680), v4199, &v4539, v4202);
                                      v3971.i64[0] = 0x3F0000003FLL;
                                      v3971.i64[1] = 0x3F0000003FLL;
                                      v3970.i64[0] = 0x800000008;
                                      v3970.i64[1] = 0x800000008;
                                      v4199 = (uint8x8_t *)&v4539;
                                    }
                                    v4203 = 48 - v4197;
                                    v4204 = 56 - 8 * v4200 - v4197;
                                    if (v4204 >= 0)
                                      v4197 += 0x40000000;
                                    if (8 * v4200)
                                      v4205 = 1;
                                    else
                                      v4205 = v4204 <= -1;
                                    v4206 = v4204 & ~(v4204 >> 31);
                                    if (!v4205 || v4203 < v4206)
                                    {
                                      v4193 = v4198;
                                    }
                                    else
                                    {
                                      v4208 = *v3969;
                                      v4209 = v4194 - v4147 + 40;
                                      if (v4209 >= v4206 - 1)
                                        v4210 = v4206 - 1;
                                      else
                                        v4210 = v4194 - v4147 + 40;
                                      v4211 = v4194 - v4147 - v4210 + 47;
                                      v4193 = v4198;
                                      if (v4211 < 0x78)
                                        goto LABEL_3115;
                                      if (v4209 >= v4206 - 1)
                                        v4209 = v4206 - 1;
                                      if (v3969 >= (uint8x8_t *)&v4199->i8[((v4194 - v4147 - v4209 + 47) >> 3) + 1]
                                        || (unint64_t)v4199 >= v4478)
                                      {
                                        v4213 = (v4211 >> 3) + 1;
                                        v4214 = (uint8x8_t)(*(_QWORD *)&v4208 + (v4213 & 0x3FFFFFF8));
                                        v4215 = (uint8x8_t *)((char *)v4199 + (v4213 & 0x3FFFFFF8));
                                        v4216 = v4203 - 8 * (v4213 & 0x3FFFFFF8);
                                        v4217 = vdupq_n_s32(v4203);
                                        v4218 = vaddq_s32(v4217, (int32x4_t)xmmword_208F3A6A0);
                                        v4219 = vaddq_s32(v4217, (int32x4_t)xmmword_208F3A6B0);
                                        v4220 = 0uLL;
                                        v4221 = (int32x4_t)v4197;
                                        v4222 = (int8x16_t)(unint64_t)v4196;
                                        v4223 = v4213 & 0x3FFFFFF8;
                                        v4224 = 0uLL;
                                        v4225 = 0uLL;
                                        v4226 = 0uLL;
                                        do
                                        {
                                          v4221 = vaddq_s32(v4221, v3970);
                                          v4227 = *v4199++;
                                          v4220 = vaddq_s32(v4220, v3970);
                                          v4228 = vmovl_u8(v4227);
                                          v4229 = vmovl_high_u16(v4228);
                                          v4230.i64[0] = v4229.u32[2];
                                          v4230.i64[1] = v4229.u32[3];
                                          v4231 = v4230;
                                          v4230.i64[0] = v4229.u32[0];
                                          v4230.i64[1] = v4229.u32[1];
                                          v4232 = v4230;
                                          v4233 = vmovl_u16(*(uint16x4_t *)v4228.i8);
                                          v4230.i64[0] = v4233.u32[2];
                                          v4230.i64[1] = v4233.u32[3];
                                          v4234 = v4230;
                                          v4230.i64[0] = v4233.u32[0];
                                          v4230.i64[1] = v4233.u32[1];
                                          v4235 = v4230;
                                          v4230.i64[0] = v4218.u32[2];
                                          v4230.i64[1] = v4218.u32[3];
                                          v4236 = v4230;
                                          v4230.i64[0] = v4218.u32[0];
                                          v4230.i64[1] = v4218.u32[1];
                                          v4237 = v4230;
                                          v4230.i64[0] = v4219.u32[2];
                                          v4230.i64[1] = v4219.u32[3];
                                          v4238 = v4230;
                                          v4230.i64[0] = v4219.u32[0];
                                          v4230.i64[1] = v4219.u32[1];
                                          v4226 = vorrq_s8((int8x16_t)vshlq_u64(v4231, v4236), v4226);
                                          v4225 = vorrq_s8((int8x16_t)vshlq_u64(v4232, v4237), v4225);
                                          v4224 = vorrq_s8((int8x16_t)vshlq_u64(v4234, v4238), v4224);
                                          v4222 = vorrq_s8((int8x16_t)vshlq_u64(v4235, v4230), v4222);
                                          *(_QWORD *)&v4208 += 8;
                                          v4219 = vaddq_s32(v4219, v3971);
                                          v4218 = vaddq_s32(v4218, v3971);
                                          v4223 -= 8;
                                        }
                                        while (v4223);
                                        *v3969 = v4208;
                                        v4239 = vorrq_s8(vorrq_s8(v4222, v4225), vorrq_s8(v4224, v4226));
                                        v4196 = vorr_s8(*(int8x8_t *)v4239.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4239, v4239, 8uLL));
                                        v4197 = vaddvq_s32(vaddq_s32(v4221, v4220));
                                        if ((v4213 & 0x3FFFFFF8) == v4213)
                                          goto LABEL_3118;
                                      }
                                      else
                                      {
LABEL_3115:
                                        v4214 = *v3969;
                                        v4215 = v4199;
                                        v4216 = v4203;
                                      }
                                      v4240 = (uint8x8_t)(*(_QWORD *)&v4214 + 1);
                                      do
                                      {
                                        v4197 += 8;
                                        v4241 = v4215->u8[0];
                                        v4215 = (uint8x8_t *)((char *)v4215 + 1);
                                        *(_QWORD *)&v4196 |= (unint64_t)v4241 << v4216;
                                        *v3969 = v4240;
                                        v4216 -= 8;
                                        ++*(_QWORD *)&v4240;
                                      }
                                      while (v4216 >= v4206);
                                    }
                                  }
LABEL_3118:
                                  v4242 = (((v4195 << 7) - 128) >> 8) + 1;
                                  v4243 = (int8x8_t)(*(_QWORD *)&v4196 - (v4242 << 56));
                                  if (*(_QWORD *)&v4196 >= (unint64_t)(v4242 << 56))
                                  {
                                    LODWORD(v4242) = *(_DWORD *)(v1 + 10668) - v4242;
                                    v4244 = 4;
                                    v4196 = v4243;
                                  }
                                  else
                                  {
                                    v4244 = 0;
                                  }
                                  v4245 = vp8_norm[v4242];
                                  v4246 = (_DWORD)v4242 << v4245;
                                  v4247 = (int8x8_t)(*(_QWORD *)&v4196 << v4245);
                                  *(int8x8_t *)(v1 + 10656) = v4247;
                                  v4248 = v4197 - v4245;
                                  *(_DWORD *)(v1 + 10664) = v4197 - v4245;
                                  *(_DWORD *)(v1 + 10668) = (_DWORD)v4242 << v4245;
                                  if (((v4197 - v4245) & 0x80000000) != 0)
                                  {
                                    v4249 = v4244;
                                    v4250 = v4193;
                                    v4251 = *(uint8x8_t **)(v1 + 10648);
                                    v4252 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4251;
                                    v4253 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                    if (v4253)
                                    {
                                      if (v4252 >= 9)
                                        v4254 = 9;
                                      else
                                        v4254 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4251;
                                      v4253(*(_QWORD *)(v1 + 10680), v4251, &v4539, v4254);
                                      v3971.i64[0] = 0x3F0000003FLL;
                                      v3971.i64[1] = 0x3F0000003FLL;
                                      v3970.i64[0] = 0x800000008;
                                      v3970.i64[1] = 0x800000008;
                                      v4251 = (uint8x8_t *)&v4539;
                                    }
                                    v4255 = 48 - v4248;
                                    v4256 = 56 - 8 * v4252 - v4248;
                                    if (v4256 >= 0)
                                      v4248 += 0x40000000;
                                    if (8 * v4252)
                                      v4257 = 1;
                                    else
                                      v4257 = v4256 <= -1;
                                    v4258 = v4256 & ~(v4256 >> 31);
                                    if (!v4257 || v4255 < v4258)
                                    {
                                      v4193 = v4250;
                                      v4244 = v4249;
                                    }
                                    else
                                    {
                                      v4260 = *v3969;
                                      v4261 = v4245 - v4197 + 40;
                                      if (v4261 >= v4258 - 1)
                                        v4262 = v4258 - 1;
                                      else
                                        v4262 = v4245 - v4197 + 40;
                                      v4263 = v4245 - v4197 - v4262 + 47;
                                      v4193 = v4250;
                                      v4244 = v4249;
                                      if (v4263 < 0x78)
                                        goto LABEL_3153;
                                      if (v4261 >= v4258 - 1)
                                        v4261 = v4258 - 1;
                                      if (v3969 >= (uint8x8_t *)&v4251->i8[((v4245 - v4197 - v4261 + 47) >> 3) + 1]
                                        || (unint64_t)v4251 >= v4478)
                                      {
                                        v4265 = (v4263 >> 3) + 1;
                                        v4266 = (uint8x8_t)(*(_QWORD *)&v4260 + (v4265 & 0x3FFFFFF8));
                                        v4267 = (uint8x8_t *)((char *)v4251 + (v4265 & 0x3FFFFFF8));
                                        v4268 = v4255 - 8 * (v4265 & 0x3FFFFFF8);
                                        v4269 = vdupq_n_s32(v4255);
                                        v4270 = vaddq_s32(v4269, (int32x4_t)xmmword_208F3A6A0);
                                        v4271 = vaddq_s32(v4269, (int32x4_t)xmmword_208F3A6B0);
                                        v4272 = 0uLL;
                                        v4273 = (int32x4_t)v4248;
                                        v4274 = (int8x16_t)(unint64_t)v4247;
                                        v4275 = v4265 & 0x3FFFFFF8;
                                        v4276 = 0uLL;
                                        v4277 = 0uLL;
                                        v4278 = 0uLL;
                                        do
                                        {
                                          v4273 = vaddq_s32(v4273, v3970);
                                          v4279 = *v4251++;
                                          v4272 = vaddq_s32(v4272, v3970);
                                          v4280 = vmovl_u8(v4279);
                                          v4281 = vmovl_high_u16(v4280);
                                          v4282.i64[0] = v4281.u32[2];
                                          v4282.i64[1] = v4281.u32[3];
                                          v4283 = v4282;
                                          v4282.i64[0] = v4281.u32[0];
                                          v4282.i64[1] = v4281.u32[1];
                                          v4284 = v4282;
                                          v4285 = vmovl_u16(*(uint16x4_t *)v4280.i8);
                                          v4282.i64[0] = v4285.u32[2];
                                          v4282.i64[1] = v4285.u32[3];
                                          v4286 = v4282;
                                          v4282.i64[0] = v4285.u32[0];
                                          v4282.i64[1] = v4285.u32[1];
                                          v4287 = v4282;
                                          v4282.i64[0] = v4270.u32[2];
                                          v4282.i64[1] = v4270.u32[3];
                                          v4288 = v4282;
                                          v4282.i64[0] = v4270.u32[0];
                                          v4282.i64[1] = v4270.u32[1];
                                          v4289 = v4282;
                                          v4282.i64[0] = v4271.u32[2];
                                          v4282.i64[1] = v4271.u32[3];
                                          v4290 = v4282;
                                          v4282.i64[0] = v4271.u32[0];
                                          v4282.i64[1] = v4271.u32[1];
                                          v4278 = vorrq_s8((int8x16_t)vshlq_u64(v4283, v4288), v4278);
                                          v4277 = vorrq_s8((int8x16_t)vshlq_u64(v4284, v4289), v4277);
                                          v4276 = vorrq_s8((int8x16_t)vshlq_u64(v4286, v4290), v4276);
                                          v4274 = vorrq_s8((int8x16_t)vshlq_u64(v4287, v4282), v4274);
                                          *(_QWORD *)&v4260 += 8;
                                          v4271 = vaddq_s32(v4271, v3971);
                                          v4270 = vaddq_s32(v4270, v3971);
                                          v4275 -= 8;
                                        }
                                        while (v4275);
                                        *v3969 = v4260;
                                        v4291 = vorrq_s8(vorrq_s8(v4274, v4277), vorrq_s8(v4276, v4278));
                                        v4247 = vorr_s8(*(int8x8_t *)v4291.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4291, v4291, 8uLL));
                                        v4248 = vaddvq_s32(vaddq_s32(v4273, v4272));
                                        if ((v4265 & 0x3FFFFFF8) == v4265)
                                          goto LABEL_3156;
                                      }
                                      else
                                      {
LABEL_3153:
                                        v4266 = *v3969;
                                        v4267 = v4251;
                                        v4268 = v4255;
                                      }
                                      v4292 = (uint8x8_t)(*(_QWORD *)&v4266 + 1);
                                      do
                                      {
                                        v4248 += 8;
                                        v4293 = v4267->u8[0];
                                        v4267 = (uint8x8_t *)((char *)v4267 + 1);
                                        *(_QWORD *)&v4247 |= (unint64_t)v4293 << v4268;
                                        *v3969 = v4292;
                                        v4268 -= 8;
                                        ++*(_QWORD *)&v4292;
                                      }
                                      while (v4268 >= v4258);
                                    }
                                  }
LABEL_3156:
                                  v4294 = (((v4246 << 7) - 128) >> 8) + 1;
                                  v4295 = (int8x8_t)(*(_QWORD *)&v4247 - (v4294 << 56));
                                  if (*(_QWORD *)&v4247 >= (unint64_t)(v4294 << 56))
                                  {
                                    LODWORD(v4294) = *(_DWORD *)(v1 + 10668) - v4294;
                                    v4296 = 2;
                                    v4247 = v4295;
                                  }
                                  else
                                  {
                                    v4296 = 0;
                                  }
                                  v4297 = vp8_norm[v4294];
                                  v4298 = (_DWORD)v4294 << v4297;
                                  v3974 = (int8x8_t)(*(_QWORD *)&v4247 << v4297);
                                  *(int8x8_t *)(v1 + 10656) = v3974;
                                  v4299 = v4248 - v4297;
                                  *(_DWORD *)(v1 + 10664) = v4248 - v4297;
                                  *(_DWORD *)(v1 + 10668) = (_DWORD)v4294 << v4297;
                                  if (((v4248 - v4297) & 0x80000000) == 0)
                                  {
                                    v4300 = v4517;
                                    v4301 = v4497;
                                    result = v4486;
                                    v4302 = v4481;
                                    goto LABEL_3209;
                                  }
                                  v4475 = v4296;
                                  v4303 = *(uint8x8_t **)(v1 + 10648);
                                  v4304 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4303;
                                  v4305 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                  if (v4305)
                                  {
                                    v4306 = v4193;
                                    if (v4304 >= 9)
                                      v4307 = 9;
                                    else
                                      v4307 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4303;
                                    v4308 = v4244;
                                    v4305(*(_QWORD *)(v1 + 10680), v4303, &v4539, v4307);
                                    v4244 = v4308;
                                    v4193 = v4306;
                                    v3971.i64[0] = 0x3F0000003FLL;
                                    v3971.i64[1] = 0x3F0000003FLL;
                                    v3970.i64[0] = 0x800000008;
                                    v3970.i64[1] = 0x800000008;
                                    v4303 = (uint8x8_t *)&v4539;
                                  }
                                  v4309 = 48 - v4299;
                                  v4310 = 56 - 8 * v4304 - v4299;
                                  if (v4310 >= 0)
                                    v4299 += 0x40000000;
                                  if (8 * v4304)
                                    v4311 = 1;
                                  else
                                    v4311 = v4310 <= -1;
                                  v4312 = v4310 & ~(v4310 >> 31);
                                  if (!v4311 || v4309 < v4312)
                                  {
                                    v4300 = v4517;
                                    v4301 = v4497;
                                    result = v4486;
                                    v4302 = v4481;
                                    v4296 = v4475;
                                    goto LABEL_3209;
                                  }
                                  v4314 = *v3969;
                                  v4315 = v4297 - v4248 + 40;
                                  if (v4315 >= v4312 - 1)
                                    v4316 = v4312 - 1;
                                  else
                                    v4316 = v4297 - v4248 + 40;
                                  v4317 = v4297 - v4248 - v4316 + 47;
                                  v4296 = v4475;
                                  if (v4317 < 0x78)
                                  {
                                    v4318 = *v3969;
                                    v4319 = v4303;
                                    v4320 = v4309;
                                    v4300 = v4517;
                                    v4301 = v4497;
                                    result = v4486;
                                    v4302 = v4481;
                                    goto LABEL_3207;
                                  }
                                  if (v4315 >= v4312 - 1)
                                    v4315 = v4312 - 1;
                                  v4346 = v3969 >= (uint8x8_t *)&v4303->i8[((v4297 - v4248 - v4315 + 47) >> 3) + 1]
                                       || (unint64_t)v4303 >= v4478;
                                  v4300 = v4517;
                                  v4301 = v4497;
                                  result = v4486;
                                  v4302 = v4481;
                                  if (!v4346)
                                  {
                                    v4318 = *v3969;
                                    v4319 = v4303;
                                    v4320 = v4309;
LABEL_3207:
                                    v4373 = (uint8x8_t)(*(_QWORD *)&v4318 + 1);
                                    do
                                    {
                                      v4299 += 8;
                                      v4374 = v4319->u8[0];
                                      v4319 = (uint8x8_t *)((char *)v4319 + 1);
                                      *(_QWORD *)&v3974 |= (unint64_t)v4374 << v4320;
                                      *v3969 = v4373;
                                      v4320 -= 8;
                                      ++*(_QWORD *)&v4373;
                                    }
                                    while (v4320 >= v4312);
                                    goto LABEL_3209;
                                  }
                                  v4347 = (v4317 >> 3) + 1;
                                  v4318 = (uint8x8_t)(*(_QWORD *)&v4314 + (v4347 & 0x3FFFFFF8));
                                  v4319 = (uint8x8_t *)((char *)v4303 + (v4347 & 0x3FFFFFF8));
                                  v4320 = v4309 - 8 * (v4347 & 0x3FFFFFF8);
                                  v4348 = vdupq_n_s32(v4309);
                                  v4349 = vaddq_s32(v4348, (int32x4_t)xmmword_208F3A6A0);
                                  v4350 = vaddq_s32(v4348, (int32x4_t)xmmword_208F3A6B0);
                                  v4351 = 0uLL;
                                  v4352 = (int32x4_t)v4299;
                                  v4353 = (int8x16_t)(unint64_t)v3974;
                                  v4354 = v4347 & 0x3FFFFFF8;
                                  v4355 = 0uLL;
                                  v4356 = 0uLL;
                                  v4357 = 0uLL;
                                  do
                                  {
                                    v4352 = vaddq_s32(v4352, v3970);
                                    v4358 = *v4303++;
                                    v4351 = vaddq_s32(v4351, v3970);
                                    v4359 = vmovl_u8(v4358);
                                    v4360 = vmovl_high_u16(v4359);
                                    v4361.i64[0] = v4360.u32[2];
                                    v4361.i64[1] = v4360.u32[3];
                                    v4362 = v4361;
                                    v4361.i64[0] = v4360.u32[0];
                                    v4361.i64[1] = v4360.u32[1];
                                    v4363 = v4361;
                                    v4364 = vmovl_u16(*(uint16x4_t *)v4359.i8);
                                    v4361.i64[0] = v4364.u32[2];
                                    v4361.i64[1] = v4364.u32[3];
                                    v4365 = v4361;
                                    v4361.i64[0] = v4364.u32[0];
                                    v4361.i64[1] = v4364.u32[1];
                                    v4366 = v4361;
                                    v4361.i64[0] = v4349.u32[2];
                                    v4361.i64[1] = v4349.u32[3];
                                    v4367 = v4361;
                                    v4361.i64[0] = v4349.u32[0];
                                    v4361.i64[1] = v4349.u32[1];
                                    v4368 = v4361;
                                    v4361.i64[0] = v4350.u32[2];
                                    v4361.i64[1] = v4350.u32[3];
                                    v4369 = v4361;
                                    v4361.i64[0] = v4350.u32[0];
                                    v4361.i64[1] = v4350.u32[1];
                                    v4357 = vorrq_s8((int8x16_t)vshlq_u64(v4362, v4367), v4357);
                                    v4356 = vorrq_s8((int8x16_t)vshlq_u64(v4363, v4368), v4356);
                                    v4355 = vorrq_s8((int8x16_t)vshlq_u64(v4365, v4369), v4355);
                                    v4353 = vorrq_s8((int8x16_t)vshlq_u64(v4366, v4361), v4353);
                                    *(_QWORD *)&v4314 += 8;
                                    v4350 = vaddq_s32(v4350, v3971);
                                    v4349 = vaddq_s32(v4349, v3971);
                                    v4354 -= 8;
                                  }
                                  while (v4354);
                                  *v3969 = v4314;
                                  v4370 = vorrq_s8(vorrq_s8(v4353, v4356), vorrq_s8(v4355, v4357));
                                  v3974 = vorr_s8(*(int8x8_t *)v4370.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4370, v4370, 8uLL));
                                  v4299 = vaddvq_s32(vaddq_s32(v4352, v4351));
                                  if ((v4347 & 0x3FFFFFF8) != v4347)
                                    goto LABEL_3207;
LABEL_3209:
                                  v3972 = (((v4298 << 7) - 128) >> 8) + 1;
                                  v4375 = (int8x8_t)(*(_QWORD *)&v3974 - (v3972 << 56));
                                  if (*(_QWORD *)&v3974 >= (unint64_t)(v3972 << 56))
                                  {
                                    LODWORD(v3972) = *(_DWORD *)(v1 + 10668) - v3972;
                                    v3973 = 1;
                                    v3974 = v4375;
                                  }
                                  else
                                  {
                                    v3973 = 0;
                                  }
                                  v3975 = vp8_norm[v3972];
                                  *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3974 << v3975;
                                  *(_DWORD *)(v1 + 10664) = v4299 - v3975;
                                  *(_DWORD *)(v1 + 10668) = (_DWORD)v3972 << v3975;
                                  *(_BYTE *)(v1 + v4536 + 9099) = v4301 | v4300 | result | v4302 | v4193 | v4244 | v4296 | v3973;
                                  v1864 = *(_DWORD *)(v1 + 10664);
                                  if (++v4536 == 4)
                                  {
                                    v1863 = *(int8x8_t *)(v1 + 10656);
                                    v1865 = (((*(_DWORD *)(v1 + 10668) << 7) - 128) >> 8) + 1;
                                    if ((v1864 & 0x80000000) != 0)
                                    {
LABEL_3212:
                                      v4376 = *(uint8x8_t **)(v1 + 10648);
                                      v4377 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4376;
                                      v4378 = 8 * v4377;
                                      v4379 = 56 - v1864 - 8 * v4377;
                                      v4380 = *(uint64_t (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                      if (v4380)
                                      {
                                        if (v4377 >= 9)
                                          v4381 = 9;
                                        else
                                          v4381 = *(_QWORD *)(v1 + 10640) - (_QWORD)v4376;
                                        result = v4380(*(_QWORD *)(v1 + 10680), v4376, &v4539, v4381);
                                        v4376 = (uint8x8_t *)&v4539;
                                      }
                                      if (v4379 < 0)
                                        v4382 = v1864;
                                      else
                                        v4382 = v1864 + 0x40000000;
                                      if (v4378)
                                        v4383 = 1;
                                      else
                                        v4383 = v4379 <= -1;
                                      if (v4383)
                                      {
                                        v4384 = 48 - v1864;
                                        v4385 = v4379 & ~(v4379 >> 31);
                                        if ((int)(48 - v1864) >= v4385)
                                        {
                                          v4386 = (uint8x8_t *)(v1 + 10648);
                                          v4387 = *(uint8x8_t *)(v1 + 10648);
                                          v4388 = v4385 - 1;
                                          if (v4385 - 1 >= (int)(40 - v1864))
                                            v4389 = 40 - v1864;
                                          else
                                            v4389 = v4385 - 1;
                                          v4390 = 47 - v1864 - v4389;
                                          if (v4390 < 0x78)
                                            goto LABEL_3243;
                                          if (v4388 >= (int)(40 - v1864))
                                            v4388 = 40 - v1864;
                                          if (v4386 < (uint8x8_t *)&v4376->i8[((47 - v1864 - v4388) >> 3) + 1]
                                            && (unint64_t)v4376 < v1 + 10656)
                                          {
LABEL_3243:
                                            v4393 = *(_QWORD *)(v1 + 10648);
                                            v4394 = v4376;
                                            v4395 = 48 - v1864;
                                            goto LABEL_3244;
                                          }
                                          v4392 = (v4390 >> 3) + 1;
                                          v4393 = *(_QWORD *)&v4387 + (v4392 & 0x3FFFFFF8);
                                          v4394 = (uint8x8_t *)((char *)v4376 + (v4392 & 0x3FFFFFF8));
                                          v4395 = v4384 - 8 * (v4392 & 0x3FFFFFF8);
                                          v4396 = vdupq_n_s32(v4384);
                                          v4397 = vaddq_s32(v4396, (int32x4_t)xmmword_208F3A6A0);
                                          v4398 = vaddq_s32(v4396, (int32x4_t)xmmword_208F3A6B0);
                                          v4399 = 0uLL;
                                          v4400 = (int32x4_t)v4382;
                                          v4401 = (int8x16_t)(unint64_t)v1863;
                                          v4402.i64[0] = 0x800000008;
                                          v4402.i64[1] = 0x800000008;
                                          v4403.i64[0] = 0x3F0000003FLL;
                                          v4403.i64[1] = 0x3F0000003FLL;
                                          v4404 = v4392 & 0x3FFFFFF8;
                                          v4405 = 0uLL;
                                          v4406 = 0uLL;
                                          v4407 = 0uLL;
                                          do
                                          {
                                            v4400 = vaddq_s32(v4400, v4402);
                                            v4408 = *v4376++;
                                            v4399 = vaddq_s32(v4399, v4402);
                                            v4409 = vmovl_u8(v4408);
                                            v4410 = vmovl_high_u16(v4409);
                                            v4411.i64[0] = v4410.u32[2];
                                            v4411.i64[1] = v4410.u32[3];
                                            v4412 = v4411;
                                            v4411.i64[0] = v4410.u32[0];
                                            v4411.i64[1] = v4410.u32[1];
                                            v4413 = v4411;
                                            v4414 = vmovl_u16(*(uint16x4_t *)v4409.i8);
                                            v4411.i64[0] = v4414.u32[2];
                                            v4411.i64[1] = v4414.u32[3];
                                            v4415 = v4411;
                                            v4411.i64[0] = v4414.u32[0];
                                            v4411.i64[1] = v4414.u32[1];
                                            v4416 = v4411;
                                            v4411.i64[0] = v4397.u32[2];
                                            v4411.i64[1] = v4397.u32[3];
                                            v4417 = v4411;
                                            v4411.i64[0] = v4397.u32[0];
                                            v4411.i64[1] = v4397.u32[1];
                                            v4418 = v4411;
                                            v4411.i64[0] = v4398.u32[2];
                                            v4411.i64[1] = v4398.u32[3];
                                            v4419 = v4411;
                                            v4411.i64[0] = v4398.u32[0];
                                            v4411.i64[1] = v4398.u32[1];
                                            v4407 = vorrq_s8((int8x16_t)vshlq_u64(v4412, v4417), v4407);
                                            v4406 = vorrq_s8((int8x16_t)vshlq_u64(v4413, v4418), v4406);
                                            v4405 = vorrq_s8((int8x16_t)vshlq_u64(v4415, v4419), v4405);
                                            v4401 = vorrq_s8((int8x16_t)vshlq_u64(v4416, v4411), v4401);
                                            *(_QWORD *)&v4387 += 8;
                                            v4398 = vaddq_s32(v4398, v4403);
                                            v4397 = vaddq_s32(v4397, v4403);
                                            v4404 -= 8;
                                          }
                                          while (v4404);
                                          *v4386 = v4387;
                                          v4420 = vorrq_s8(vorrq_s8(v4401, v4406), vorrq_s8(v4405, v4407));
                                          v1863 = vorr_s8(*(int8x8_t *)v4420.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4420, v4420, 8uLL));
                                          v4382 = vaddvq_s32(vaddq_s32(v4400, v4399));
                                          if ((v4392 & 0x3FFFFFF8) != v4392)
                                          {
LABEL_3244:
                                            v4421 = (uint8x8_t)(v4393 + 1);
                                            do
                                            {
                                              v4382 += 8;
                                              v4422 = v4394->u8[0];
                                              v4394 = (uint8x8_t *)((char *)v4394 + 1);
                                              *(_QWORD *)&v1863 |= (unint64_t)v4422 << v4395;
                                              *v4386 = v4421;
                                              v4395 -= 8;
                                              ++*(_QWORD *)&v4421;
                                            }
                                            while (v4395 >= v4385);
                                          }
                                        }
                                      }
                                      v1864 = v4382;
                                      v1866 = v1865 << 56;
                                      v1867 = v1863;
                                      v1868 = (int8x8_t)(*(_QWORD *)&v1863 - (v1865 << 56));
                                      if (*(_QWORD *)&v1863 < (unint64_t)(v1865 << 56))
                                      {
LABEL_1274:
                                        v1869 = vp8_norm[v1865];
                                        v1870 = (_DWORD)v1865 << v1869;
                                        v1871 = (int8x8_t)(*(_QWORD *)&v1867 << v1869);
                                        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1867 << v1869;
                                        v1872 = v1864 - v1869;
                                        *(_DWORD *)(v1 + 10664) = v1864 - v1869;
                                        *(_DWORD *)(v1 + 10668) = (_DWORD)v1865 << v1869;
                                        if (*(_QWORD *)&v1863 >= v1866)
                                        {
                                          v4534 = 0;
                                          v1873 = (uint8x8_t *)(v1 + 10648);
                                          v4476 = v1 + 10656;
                                          v1874.i64[0] = 0x800000008;
                                          v1874.i64[1] = 0x800000008;
                                          v1875.i64[0] = 0x3F0000003FLL;
                                          v1875.i64[1] = 0x3F0000003FLL;
                                          if ((v1872 & 0x80000000) != 0)
                                          {
LABEL_1278:
                                            v1876 = *(uint8x8_t **)(v1 + 10648);
                                            v1877 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1876;
                                            v1878 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                            if (v1878)
                                            {
                                              if (v1877 >= 9)
                                                v1879 = 9;
                                              else
                                                v1879 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1876;
                                              v1878(*(_QWORD *)(v1 + 10680), v1876, &v4539, v1879);
                                              v1875.i64[0] = 0x3F0000003FLL;
                                              v1875.i64[1] = 0x3F0000003FLL;
                                              v1874.i64[0] = 0x800000008;
                                              v1874.i64[1] = 0x800000008;
                                              v1876 = (uint8x8_t *)&v4539;
                                            }
                                            v1880 = 48 - v1872;
                                            v1881 = 56 - v1872 - 8 * v1877;
                                            if (v1881 < 0)
                                              v1882 = v1872;
                                            else
                                              v1882 = v1872 + 0x40000000;
                                            if (8 * v1877)
                                              v1883 = 1;
                                            else
                                              v1883 = v1881 <= -1;
                                            v1884 = v1881 & ~(v1881 >> 31);
                                            if (v1883 && v1880 >= v1884)
                                            {
                                              v1886 = *v1873;
                                              v1887 = v1884 - 1;
                                              if (v1884 - 1 >= (int)(40 - v1872))
                                                v1888 = 40 - v1872;
                                              else
                                                v1888 = v1884 - 1;
                                              v1889 = 47 - v1872 - v1888;
                                              if (v1889 < 0x78)
                                                goto LABEL_1310;
                                              if (v1887 >= (int)(40 - v1872))
                                                v1887 = 40 - v1872;
                                              if (v1873 < (uint8x8_t *)&v1876->i8[((47 - v1872 - v1887) >> 3) + 1]
                                                && (unint64_t)v1876 < v4476)
                                              {
LABEL_1310:
                                                v1892 = *v1873;
                                                v1893 = v1876;
                                                v1894 = 48 - v1872;
                                                goto LABEL_1311;
                                              }
                                              v1891 = (v1889 >> 3) + 1;
                                              v1892 = (uint8x8_t)(*(_QWORD *)&v1886 + (v1891 & 0x3FFFFFF8));
                                              v1893 = (uint8x8_t *)((char *)v1876 + (v1891 & 0x3FFFFFF8));
                                              v1894 = v1880 - 8 * (v1891 & 0x3FFFFFF8);
                                              v1895 = vdupq_n_s32(v1880);
                                              v1896 = vaddq_s32(v1895, (int32x4_t)xmmword_208F3A6A0);
                                              v1897 = vaddq_s32(v1895, (int32x4_t)xmmword_208F3A6B0);
                                              v1898 = 0uLL;
                                              v1899 = (int32x4_t)v1882;
                                              v1900 = (int8x16_t)(unint64_t)v1871;
                                              v1901 = v1891 & 0x3FFFFFF8;
                                              v1902 = 0uLL;
                                              v1903 = 0uLL;
                                              v1904 = 0uLL;
                                              do
                                              {
                                                v1899 = vaddq_s32(v1899, v1874);
                                                v1905 = *v1876++;
                                                v1898 = vaddq_s32(v1898, v1874);
                                                v1906 = vmovl_u8(v1905);
                                                v1907 = vmovl_high_u16(v1906);
                                                v1908.i64[0] = v1907.u32[2];
                                                v1908.i64[1] = v1907.u32[3];
                                                v1909 = v1908;
                                                v1908.i64[0] = v1907.u32[0];
                                                v1908.i64[1] = v1907.u32[1];
                                                v1910 = v1908;
                                                v1911 = vmovl_u16(*(uint16x4_t *)v1906.i8);
                                                v1908.i64[0] = v1911.u32[2];
                                                v1908.i64[1] = v1911.u32[3];
                                                v1912 = v1908;
                                                v1908.i64[0] = v1911.u32[0];
                                                v1908.i64[1] = v1911.u32[1];
                                                v1913 = v1908;
                                                v1908.i64[0] = v1896.u32[2];
                                                v1908.i64[1] = v1896.u32[3];
                                                v1914 = v1908;
                                                v1908.i64[0] = v1896.u32[0];
                                                v1908.i64[1] = v1896.u32[1];
                                                v1915 = v1908;
                                                v1908.i64[0] = v1897.u32[2];
                                                v1908.i64[1] = v1897.u32[3];
                                                v1916 = v1908;
                                                v1908.i64[0] = v1897.u32[0];
                                                v1908.i64[1] = v1897.u32[1];
                                                v1904 = vorrq_s8((int8x16_t)vshlq_u64(v1909, v1914), v1904);
                                                v1903 = vorrq_s8((int8x16_t)vshlq_u64(v1910, v1915), v1903);
                                                v1902 = vorrq_s8((int8x16_t)vshlq_u64(v1912, v1916), v1902);
                                                v1900 = vorrq_s8((int8x16_t)vshlq_u64(v1913, v1908), v1900);
                                                *(_QWORD *)&v1886 += 8;
                                                v1897 = vaddq_s32(v1897, v1875);
                                                v1896 = vaddq_s32(v1896, v1875);
                                                v1901 -= 8;
                                              }
                                              while (v1901);
                                              *v1873 = v1886;
                                              v1917 = vorrq_s8(vorrq_s8(v1900, v1903), vorrq_s8(v1902, v1904));
                                              v1871 = vorr_s8(*(int8x8_t *)v1917.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1917, v1917, 8uLL));
                                              v1882 = vaddvq_s32(vaddq_s32(v1899, v1898));
                                              if ((v1891 & 0x3FFFFFF8) != v1891)
                                              {
LABEL_1311:
                                                v1918 = (uint8x8_t)(*(_QWORD *)&v1892 + 1);
                                                do
                                                {
                                                  v1882 += 8;
                                                  v1919 = v1893->u8[0];
                                                  v1893 = (uint8x8_t *)((char *)v1893 + 1);
                                                  *(_QWORD *)&v1871 |= (unint64_t)v1919 << v1894;
                                                  *v1873 = v1918;
                                                  v1894 -= 8;
                                                  ++*(_QWORD *)&v1918;
                                                }
                                                while (v1894 >= v1884);
                                              }
                                            }
                                            v1872 = v1882;
                                          }
                                          while (2)
                                          {
                                            v1920 = (((v1870 << 7) - 128) >> 8) + 1;
                                            v1921 = (int8x8_t)(*(_QWORD *)&v1871 - (v1920 << 56));
                                            if (*(_QWORD *)&v1871 >= (unint64_t)(v1920 << 56))
                                            {
                                              LODWORD(v1920) = *(_DWORD *)(v1 + 10668) - v1920;
                                              v4514 = 0x80;
                                              v1871 = v1921;
                                            }
                                            else
                                            {
                                              v4514 = 0;
                                            }
                                            v1922 = vp8_norm[v1920];
                                            v1923 = (_DWORD)v1920 << v1922;
                                            v1924 = (int8x8_t)(*(_QWORD *)&v1871 << v1922);
                                            *(int8x8_t *)(v1 + 10656) = v1924;
                                            v1925 = v1872 - v1922;
                                            *(_DWORD *)(v1 + 10664) = v1872 - v1922;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v1920 << v1922;
                                            if (((v1872 - v1922) & 0x80000000) != 0)
                                            {
                                              v1926 = *(uint8x8_t **)(v1 + 10648);
                                              v1927 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1926;
                                              v1928 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                              if (v1928)
                                              {
                                                if (v1927 >= 9)
                                                  v1929 = 9;
                                                else
                                                  v1929 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1926;
                                                v1928(*(_QWORD *)(v1 + 10680), v1926, &v4539, v1929);
                                                v1875.i64[0] = 0x3F0000003FLL;
                                                v1875.i64[1] = 0x3F0000003FLL;
                                                v1874.i64[0] = 0x800000008;
                                                v1874.i64[1] = 0x800000008;
                                                v1926 = (uint8x8_t *)&v4539;
                                              }
                                              v1930 = 48 - v1925;
                                              v1931 = 56 - 8 * v1927 - v1925;
                                              if (v1931 >= 0)
                                                v1925 += 0x40000000;
                                              v1932 = 8 * v1927 || v1931 <= -1;
                                              v1933 = v1931 & ~(v1931 >> 31);
                                              if (v1932 && v1930 >= v1933)
                                              {
                                                v1935 = *v1873;
                                                v1936 = v1922 - v1872 + 40;
                                                if (v1936 >= v1933 - 1)
                                                  v1937 = v1933 - 1;
                                                else
                                                  v1937 = v1922 - v1872 + 40;
                                                v1938 = v1922 - v1872 - v1937 + 47;
                                                if (v1938 < 0x78)
                                                  goto LABEL_1347;
                                                if (v1936 >= v1933 - 1)
                                                  v1936 = v1933 - 1;
                                                if (v1873 < (uint8x8_t *)&v1926->i8[((v1922 - v1872 - v1936 + 47) >> 3)
                                                                                   + 1]
                                                  && (unint64_t)v1926 < v4476)
                                                {
LABEL_1347:
                                                  v1941 = *v1873;
                                                  v1942 = v1926;
                                                  v1943 = v1930;
                                                  goto LABEL_1348;
                                                }
                                                v1940 = (v1938 >> 3) + 1;
                                                v1941 = (uint8x8_t)(*(_QWORD *)&v1935 + (v1940 & 0x3FFFFFF8));
                                                v1942 = (uint8x8_t *)((char *)v1926 + (v1940 & 0x3FFFFFF8));
                                                v1943 = v1930 - 8 * (v1940 & 0x3FFFFFF8);
                                                v1944 = vdupq_n_s32(v1930);
                                                v1945 = vaddq_s32(v1944, (int32x4_t)xmmword_208F3A6A0);
                                                v1946 = vaddq_s32(v1944, (int32x4_t)xmmword_208F3A6B0);
                                                v1947 = 0uLL;
                                                v1948 = (int32x4_t)v1925;
                                                v1949 = (int8x16_t)(unint64_t)v1924;
                                                v1950 = v1940 & 0x3FFFFFF8;
                                                v1951 = 0uLL;
                                                v1952 = 0uLL;
                                                v1953 = 0uLL;
                                                do
                                                {
                                                  v1948 = vaddq_s32(v1948, v1874);
                                                  v1954 = *v1926++;
                                                  v1947 = vaddq_s32(v1947, v1874);
                                                  v1955 = vmovl_u8(v1954);
                                                  v1956 = vmovl_high_u16(v1955);
                                                  v1957.i64[0] = v1956.u32[2];
                                                  v1957.i64[1] = v1956.u32[3];
                                                  v1958 = v1957;
                                                  v1957.i64[0] = v1956.u32[0];
                                                  v1957.i64[1] = v1956.u32[1];
                                                  v1959 = v1957;
                                                  v1960 = vmovl_u16(*(uint16x4_t *)v1955.i8);
                                                  v1957.i64[0] = v1960.u32[2];
                                                  v1957.i64[1] = v1960.u32[3];
                                                  v1961 = v1957;
                                                  v1957.i64[0] = v1960.u32[0];
                                                  v1957.i64[1] = v1960.u32[1];
                                                  v1962 = v1957;
                                                  v1957.i64[0] = v1945.u32[2];
                                                  v1957.i64[1] = v1945.u32[3];
                                                  v1963 = v1957;
                                                  v1957.i64[0] = v1945.u32[0];
                                                  v1957.i64[1] = v1945.u32[1];
                                                  v1964 = v1957;
                                                  v1957.i64[0] = v1946.u32[2];
                                                  v1957.i64[1] = v1946.u32[3];
                                                  v1965 = v1957;
                                                  v1957.i64[0] = v1946.u32[0];
                                                  v1957.i64[1] = v1946.u32[1];
                                                  v1953 = vorrq_s8((int8x16_t)vshlq_u64(v1958, v1963), v1953);
                                                  v1952 = vorrq_s8((int8x16_t)vshlq_u64(v1959, v1964), v1952);
                                                  v1951 = vorrq_s8((int8x16_t)vshlq_u64(v1961, v1965), v1951);
                                                  v1949 = vorrq_s8((int8x16_t)vshlq_u64(v1962, v1957), v1949);
                                                  *(_QWORD *)&v1935 += 8;
                                                  v1946 = vaddq_s32(v1946, v1875);
                                                  v1945 = vaddq_s32(v1945, v1875);
                                                  v1950 -= 8;
                                                }
                                                while (v1950);
                                                *v1873 = v1935;
                                                v1966 = vorrq_s8(vorrq_s8(v1949, v1952), vorrq_s8(v1951, v1953));
                                                v1924 = vorr_s8(*(int8x8_t *)v1966.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1966, v1966, 8uLL));
                                                v1925 = vaddvq_s32(vaddq_s32(v1948, v1947));
                                                if ((v1940 & 0x3FFFFFF8) != v1940)
                                                {
LABEL_1348:
                                                  v1967 = (uint8x8_t)(*(_QWORD *)&v1941 + 1);
                                                  do
                                                  {
                                                    v1925 += 8;
                                                    v1968 = v1942->u8[0];
                                                    v1942 = (uint8x8_t *)((char *)v1942 + 1);
                                                    *(_QWORD *)&v1924 |= (unint64_t)v1968 << v1943;
                                                    *v1873 = v1967;
                                                    v1943 -= 8;
                                                    ++*(_QWORD *)&v1967;
                                                  }
                                                  while (v1943 >= v1933);
                                                }
                                              }
                                            }
                                            v1969 = (((v1923 << 7) - 128) >> 8) + 1;
                                            v1970 = (int8x8_t)(*(_QWORD *)&v1924 - (v1969 << 56));
                                            if (*(_QWORD *)&v1924 >= (unint64_t)(v1969 << 56))
                                            {
                                              LODWORD(v1969) = *(_DWORD *)(v1 + 10668) - v1969;
                                              v4495 = 64;
                                              v1924 = v1970;
                                            }
                                            else
                                            {
                                              v4495 = 0;
                                            }
                                            v1971 = vp8_norm[v1969];
                                            v1972 = (_DWORD)v1969 << v1971;
                                            v1973 = (int8x8_t)(*(_QWORD *)&v1924 << v1971);
                                            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1924 << v1971;
                                            v1974 = v1925 - v1971;
                                            *(_DWORD *)(v1 + 10664) = v1925 - v1971;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v1969 << v1971;
                                            if (((v1925 - v1971) & 0x80000000) != 0)
                                            {
                                              v1975 = *(uint8x8_t **)(v1 + 10648);
                                              v1976 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1975;
                                              v1977 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                              if (v1977)
                                              {
                                                if (v1976 >= 9)
                                                  v1978 = 9;
                                                else
                                                  v1978 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1975;
                                                v1977(*(_QWORD *)(v1 + 10680), v1975, &v4539, v1978);
                                                v1875.i64[0] = 0x3F0000003FLL;
                                                v1875.i64[1] = 0x3F0000003FLL;
                                                v1874.i64[0] = 0x800000008;
                                                v1874.i64[1] = 0x800000008;
                                                v1975 = (uint8x8_t *)&v4539;
                                              }
                                              v1979 = 48 - v1974;
                                              v1980 = 56 - 8 * v1976 - v1974;
                                              if (v1980 >= 0)
                                                v1974 += 0x40000000;
                                              v1981 = 8 * v1976 || v1980 <= -1;
                                              v1982 = v1980 & ~(v1980 >> 31);
                                              if (v1981 && v1979 >= v1982)
                                              {
                                                v2031 = *v1873;
                                                v2032 = v1971 - v1925 + 40;
                                                if (v2032 >= v1982 - 1)
                                                  v2033 = v1982 - 1;
                                                else
                                                  v2033 = v1971 - v1925 + 40;
                                                v2034 = v1971 - v1925 - v2033 + 47;
                                                if (v2034 < 0x78)
                                                {
                                                  v2035 = *v1873;
                                                  v2036 = v1975;
                                                  v2037 = v1979;
                                                  goto LABEL_1570;
                                                }
                                                if (v2032 >= v1982 - 1)
                                                  v2032 = v1982 - 1;
                                                if (v1873 < (uint8x8_t *)&v1975->i8[((v1971 - v1925 - v2032 + 47) >> 3)
                                                                                   + 1]
                                                  && (unint64_t)v1975 < v4476)
                                                {
                                                  v2035 = *v1873;
                                                  v2036 = v1975;
                                                  v2037 = v1979;
                                                  goto LABEL_1570;
                                                }
                                                v2221 = (v2034 >> 3) + 1;
                                                v2035 = (uint8x8_t)(*(_QWORD *)&v2031 + (v2221 & 0x3FFFFFF8));
                                                v2036 = (uint8x8_t *)((char *)v1975 + (v2221 & 0x3FFFFFF8));
                                                v2037 = v1979 - 8 * (v2221 & 0x3FFFFFF8);
                                                v2222 = vdupq_n_s32(v1979);
                                                v2223 = vaddq_s32(v2222, (int32x4_t)xmmword_208F3A6A0);
                                                v2224 = vaddq_s32(v2222, (int32x4_t)xmmword_208F3A6B0);
                                                v2225 = 0uLL;
                                                v2226 = (int32x4_t)v1974;
                                                v2227 = (int8x16_t)(unint64_t)v1973;
                                                v2228 = v2221 & 0x3FFFFFF8;
                                                v2229 = 0uLL;
                                                v2230 = 0uLL;
                                                v2231 = 0uLL;
                                                do
                                                {
                                                  v2226 = vaddq_s32(v2226, v1874);
                                                  v2232 = *v1975++;
                                                  v2225 = vaddq_s32(v2225, v1874);
                                                  v2233 = vmovl_u8(v2232);
                                                  v2234 = vmovl_high_u16(v2233);
                                                  v2235.i64[0] = v2234.u32[2];
                                                  v2235.i64[1] = v2234.u32[3];
                                                  v2236 = v2235;
                                                  v2235.i64[0] = v2234.u32[0];
                                                  v2235.i64[1] = v2234.u32[1];
                                                  v2237 = v2235;
                                                  v2238 = vmovl_u16(*(uint16x4_t *)v2233.i8);
                                                  v2235.i64[0] = v2238.u32[2];
                                                  v2235.i64[1] = v2238.u32[3];
                                                  v2239 = v2235;
                                                  v2235.i64[0] = v2238.u32[0];
                                                  v2235.i64[1] = v2238.u32[1];
                                                  v2240 = v2235;
                                                  v2235.i64[0] = v2223.u32[2];
                                                  v2235.i64[1] = v2223.u32[3];
                                                  v2241 = v2235;
                                                  v2235.i64[0] = v2223.u32[0];
                                                  v2235.i64[1] = v2223.u32[1];
                                                  v2242 = v2235;
                                                  v2235.i64[0] = v2224.u32[2];
                                                  v2235.i64[1] = v2224.u32[3];
                                                  v2243 = v2235;
                                                  v2235.i64[0] = v2224.u32[0];
                                                  v2235.i64[1] = v2224.u32[1];
                                                  v2231 = vorrq_s8((int8x16_t)vshlq_u64(v2236, v2241), v2231);
                                                  v2230 = vorrq_s8((int8x16_t)vshlq_u64(v2237, v2242), v2230);
                                                  v2229 = vorrq_s8((int8x16_t)vshlq_u64(v2239, v2243), v2229);
                                                  v2227 = vorrq_s8((int8x16_t)vshlq_u64(v2240, v2235), v2227);
                                                  *(_QWORD *)&v2031 += 8;
                                                  v2224 = vaddq_s32(v2224, v1875);
                                                  v2223 = vaddq_s32(v2223, v1875);
                                                  v2228 -= 8;
                                                }
                                                while (v2228);
                                                *v1873 = v2031;
                                                v2244 = vorrq_s8(vorrq_s8(v2227, v2230), vorrq_s8(v2229, v2231));
                                                v1973 = vorr_s8(*(int8x8_t *)v2244.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2244, v2244, 8uLL));
                                                v1974 = vaddvq_s32(vaddq_s32(v2226, v2225));
                                                if ((v2221 & 0x3FFFFFF8) != v2221)
                                                {
LABEL_1570:
                                                  v2270 = (uint8x8_t)(*(_QWORD *)&v2035 + 1);
                                                  do
                                                  {
                                                    v1974 += 8;
                                                    v2271 = v2036->u8[0];
                                                    v2036 = (uint8x8_t *)((char *)v2036 + 1);
                                                    *(_QWORD *)&v1973 |= (unint64_t)v2271 << v2037;
                                                    *v1873 = v2270;
                                                    v2037 -= 8;
                                                    ++*(_QWORD *)&v2270;
                                                  }
                                                  while (v2037 >= v1982);
                                                }
                                              }
                                            }
                                            v1984 = (((v1972 << 7) - 128) >> 8) + 1;
                                            v1985 = (int8x8_t)(*(_QWORD *)&v1973 - (v1984 << 56));
                                            if (*(_QWORD *)&v1973 >= (unint64_t)(v1984 << 56))
                                            {
                                              LODWORD(v1984) = *(_DWORD *)(v1 + 10668) - v1984;
                                              v4484 = 32;
                                              v1973 = v1985;
                                            }
                                            else
                                            {
                                              v4484 = 0;
                                            }
                                            v1986 = vp8_norm[v1984];
                                            v1987 = (_DWORD)v1984 << v1986;
                                            v1988 = (int8x8_t)(*(_QWORD *)&v1973 << v1986);
                                            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v1973 << v1986;
                                            v1989 = v1974 - v1986;
                                            *(_DWORD *)(v1 + 10664) = v1974 - v1986;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v1984 << v1986;
                                            if (((v1974 - v1986) & 0x80000000) != 0)
                                            {
                                              v1990 = *(uint8x8_t **)(v1 + 10648);
                                              v1991 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1990;
                                              v1992 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                              if (v1992)
                                              {
                                                if (v1991 >= 9)
                                                  v1993 = 9;
                                                else
                                                  v1993 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1990;
                                                v1992(*(_QWORD *)(v1 + 10680), v1990, &v4539, v1993);
                                                v1875.i64[0] = 0x3F0000003FLL;
                                                v1875.i64[1] = 0x3F0000003FLL;
                                                v1874.i64[0] = 0x800000008;
                                                v1874.i64[1] = 0x800000008;
                                                v1990 = (uint8x8_t *)&v4539;
                                              }
                                              v1994 = 48 - v1989;
                                              v1995 = 56 - 8 * v1991 - v1989;
                                              if (v1995 >= 0)
                                                v1989 += 0x40000000;
                                              v1996 = 8 * v1991 || v1995 <= -1;
                                              v1997 = v1995 & ~(v1995 >> 31);
                                              if (v1996 && v1994 >= v1997)
                                              {
                                                v1999 = *v1873;
                                                v2000 = v1986 - v1974 + 40;
                                                if (v2000 >= v1997 - 1)
                                                  v2001 = v1997 - 1;
                                                else
                                                  v2001 = v1986 - v1974 + 40;
                                                v2002 = v1986 - v1974 - v2001 + 47;
                                                if (v2002 < 0x78)
                                                  goto LABEL_1407;
                                                if (v2000 >= v1997 - 1)
                                                  v2000 = v1997 - 1;
                                                if (v1873 < (uint8x8_t *)&v1990->i8[((v1986 - v1974 - v2000 + 47) >> 3)
                                                                                   + 1]
                                                  && (unint64_t)v1990 < v4476)
                                                {
LABEL_1407:
                                                  v2005 = *v1873;
                                                  v2006 = v1990;
                                                  v2007 = v1994;
                                                  goto LABEL_1408;
                                                }
                                                v2004 = (v2002 >> 3) + 1;
                                                v2005 = (uint8x8_t)(*(_QWORD *)&v1999 + (v2004 & 0x3FFFFFF8));
                                                v2006 = (uint8x8_t *)((char *)v1990 + (v2004 & 0x3FFFFFF8));
                                                v2007 = v1994 - 8 * (v2004 & 0x3FFFFFF8);
                                                v2008 = vdupq_n_s32(v1994);
                                                v2009 = vaddq_s32(v2008, (int32x4_t)xmmword_208F3A6A0);
                                                v2010 = vaddq_s32(v2008, (int32x4_t)xmmword_208F3A6B0);
                                                v2011 = 0uLL;
                                                v2012 = (int32x4_t)v1989;
                                                v2013 = (int8x16_t)(unint64_t)v1988;
                                                v2014 = v2004 & 0x3FFFFFF8;
                                                v2015 = 0uLL;
                                                v2016 = 0uLL;
                                                v2017 = 0uLL;
                                                do
                                                {
                                                  v2012 = vaddq_s32(v2012, v1874);
                                                  v2018 = *v1990++;
                                                  v2011 = vaddq_s32(v2011, v1874);
                                                  v2019 = vmovl_u8(v2018);
                                                  v2020 = vmovl_high_u16(v2019);
                                                  v2021.i64[0] = v2020.u32[2];
                                                  v2021.i64[1] = v2020.u32[3];
                                                  v2022 = v2021;
                                                  v2021.i64[0] = v2020.u32[0];
                                                  v2021.i64[1] = v2020.u32[1];
                                                  v2023 = v2021;
                                                  v2024 = vmovl_u16(*(uint16x4_t *)v2019.i8);
                                                  v2021.i64[0] = v2024.u32[2];
                                                  v2021.i64[1] = v2024.u32[3];
                                                  v2025 = v2021;
                                                  v2021.i64[0] = v2024.u32[0];
                                                  v2021.i64[1] = v2024.u32[1];
                                                  v2026 = v2021;
                                                  v2021.i64[0] = v2009.u32[2];
                                                  v2021.i64[1] = v2009.u32[3];
                                                  v2027 = v2021;
                                                  v2021.i64[0] = v2009.u32[0];
                                                  v2021.i64[1] = v2009.u32[1];
                                                  v2028 = v2021;
                                                  v2021.i64[0] = v2010.u32[2];
                                                  v2021.i64[1] = v2010.u32[3];
                                                  v2029 = v2021;
                                                  v2021.i64[0] = v2010.u32[0];
                                                  v2021.i64[1] = v2010.u32[1];
                                                  v2017 = vorrq_s8((int8x16_t)vshlq_u64(v2022, v2027), v2017);
                                                  v2016 = vorrq_s8((int8x16_t)vshlq_u64(v2023, v2028), v2016);
                                                  v2015 = vorrq_s8((int8x16_t)vshlq_u64(v2025, v2029), v2015);
                                                  v2013 = vorrq_s8((int8x16_t)vshlq_u64(v2026, v2021), v2013);
                                                  *(_QWORD *)&v1999 += 8;
                                                  v2010 = vaddq_s32(v2010, v1875);
                                                  v2009 = vaddq_s32(v2009, v1875);
                                                  v2014 -= 8;
                                                }
                                                while (v2014);
                                                *v1873 = v1999;
                                                v2030 = vorrq_s8(vorrq_s8(v2013, v2016), vorrq_s8(v2015, v2017));
                                                v1988 = vorr_s8(*(int8x8_t *)v2030.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2030, v2030, 8uLL));
                                                v1989 = vaddvq_s32(vaddq_s32(v2012, v2011));
                                                if ((v2004 & 0x3FFFFFF8) != v2004)
                                                {
LABEL_1408:
                                                  v2038 = (uint8x8_t)(*(_QWORD *)&v2005 + 1);
                                                  do
                                                  {
                                                    v1989 += 8;
                                                    v2039 = v2006->u8[0];
                                                    v2006 = (uint8x8_t *)((char *)v2006 + 1);
                                                    *(_QWORD *)&v1988 |= (unint64_t)v2039 << v2007;
                                                    *v1873 = v2038;
                                                    v2007 -= 8;
                                                    ++*(_QWORD *)&v2038;
                                                  }
                                                  while (v2007 >= v1997);
                                                }
                                              }
                                            }
                                            v2040 = (((v1987 << 7) - 128) >> 8) + 1;
                                            v2041 = (int8x8_t)(*(_QWORD *)&v1988 - (v2040 << 56));
                                            if (*(_QWORD *)&v1988 >= (unint64_t)(v2040 << 56))
                                            {
                                              LODWORD(v2040) = *(_DWORD *)(v1 + 10668) - v2040;
                                              v4479 = 16;
                                              v1988 = v2041;
                                            }
                                            else
                                            {
                                              v4479 = 0;
                                            }
                                            v2042 = vp8_norm[v2040];
                                            v2043 = (_DWORD)v2040 << v2042;
                                            v2044 = (int8x8_t)(*(_QWORD *)&v1988 << v2042);
                                            *(int8x8_t *)(v1 + 10656) = v2044;
                                            v2045 = v1989 - v2042;
                                            *(_DWORD *)(v1 + 10664) = v1989 - v2042;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v2040 << v2042;
                                            if (((v1989 - v2042) & 0x80000000) != 0)
                                            {
                                              v2046 = *(uint8x8_t **)(v1 + 10648);
                                              v2047 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2046;
                                              v2048 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                              if (v2048)
                                              {
                                                if (v2047 >= 9)
                                                  v2049 = 9;
                                                else
                                                  v2049 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2046;
                                                v2048(*(_QWORD *)(v1 + 10680), v2046, &v4539, v2049);
                                                v1875.i64[0] = 0x3F0000003FLL;
                                                v1875.i64[1] = 0x3F0000003FLL;
                                                v1874.i64[0] = 0x800000008;
                                                v1874.i64[1] = 0x800000008;
                                                v2046 = (uint8x8_t *)&v4539;
                                              }
                                              v2050 = 48 - v2045;
                                              v2051 = 56 - 8 * v2047 - v2045;
                                              if (v2051 >= 0)
                                                v2045 += 0x40000000;
                                              v2052 = 8 * v2047 || v2051 <= -1;
                                              v2053 = v2051 & ~(v2051 >> 31);
                                              if (v2052 && v2050 >= v2053)
                                              {
                                                v2055 = *v1873;
                                                v2056 = v2042 - v1989 + 40;
                                                if (v2056 >= v2053 - 1)
                                                  v2057 = v2053 - 1;
                                                else
                                                  v2057 = v2042 - v1989 + 40;
                                                v2058 = v2042 - v1989 - v2057 + 47;
                                                if (v2058 < 0x78)
                                                  goto LABEL_1443;
                                                if (v2056 >= v2053 - 1)
                                                  v2056 = v2053 - 1;
                                                if (v1873 < (uint8x8_t *)&v2046->i8[((v2042 - v1989 - v2056 + 47) >> 3)
                                                                                   + 1]
                                                  && (unint64_t)v2046 < v4476)
                                                {
LABEL_1443:
                                                  v2061 = *v1873;
                                                  v2062 = v2046;
                                                  v2063 = v2050;
                                                  goto LABEL_1444;
                                                }
                                                v2060 = (v2058 >> 3) + 1;
                                                v2061 = (uint8x8_t)(*(_QWORD *)&v2055 + (v2060 & 0x3FFFFFF8));
                                                v2062 = (uint8x8_t *)((char *)v2046 + (v2060 & 0x3FFFFFF8));
                                                v2063 = v2050 - 8 * (v2060 & 0x3FFFFFF8);
                                                v2064 = vdupq_n_s32(v2050);
                                                v2065 = vaddq_s32(v2064, (int32x4_t)xmmword_208F3A6A0);
                                                v2066 = vaddq_s32(v2064, (int32x4_t)xmmword_208F3A6B0);
                                                v2067 = 0uLL;
                                                v2068 = (int32x4_t)v2045;
                                                v2069 = (int8x16_t)(unint64_t)v2044;
                                                v2070 = v2060 & 0x3FFFFFF8;
                                                v2071 = 0uLL;
                                                v2072 = 0uLL;
                                                v2073 = 0uLL;
                                                do
                                                {
                                                  v2068 = vaddq_s32(v2068, v1874);
                                                  v2074 = *v2046++;
                                                  v2067 = vaddq_s32(v2067, v1874);
                                                  v2075 = vmovl_u8(v2074);
                                                  v2076 = vmovl_high_u16(v2075);
                                                  v2077.i64[0] = v2076.u32[2];
                                                  v2077.i64[1] = v2076.u32[3];
                                                  v2078 = v2077;
                                                  v2077.i64[0] = v2076.u32[0];
                                                  v2077.i64[1] = v2076.u32[1];
                                                  v2079 = v2077;
                                                  v2080 = vmovl_u16(*(uint16x4_t *)v2075.i8);
                                                  v2077.i64[0] = v2080.u32[2];
                                                  v2077.i64[1] = v2080.u32[3];
                                                  v2081 = v2077;
                                                  v2077.i64[0] = v2080.u32[0];
                                                  v2077.i64[1] = v2080.u32[1];
                                                  v2082 = v2077;
                                                  v2077.i64[0] = v2065.u32[2];
                                                  v2077.i64[1] = v2065.u32[3];
                                                  v2083 = v2077;
                                                  v2077.i64[0] = v2065.u32[0];
                                                  v2077.i64[1] = v2065.u32[1];
                                                  v2084 = v2077;
                                                  v2077.i64[0] = v2066.u32[2];
                                                  v2077.i64[1] = v2066.u32[3];
                                                  v2085 = v2077;
                                                  v2077.i64[0] = v2066.u32[0];
                                                  v2077.i64[1] = v2066.u32[1];
                                                  v2073 = vorrq_s8((int8x16_t)vshlq_u64(v2078, v2083), v2073);
                                                  v2072 = vorrq_s8((int8x16_t)vshlq_u64(v2079, v2084), v2072);
                                                  v2071 = vorrq_s8((int8x16_t)vshlq_u64(v2081, v2085), v2071);
                                                  v2069 = vorrq_s8((int8x16_t)vshlq_u64(v2082, v2077), v2069);
                                                  *(_QWORD *)&v2055 += 8;
                                                  v2066 = vaddq_s32(v2066, v1875);
                                                  v2065 = vaddq_s32(v2065, v1875);
                                                  v2070 -= 8;
                                                }
                                                while (v2070);
                                                *v1873 = v2055;
                                                v2086 = vorrq_s8(vorrq_s8(v2069, v2072), vorrq_s8(v2071, v2073));
                                                v2044 = vorr_s8(*(int8x8_t *)v2086.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2086, v2086, 8uLL));
                                                v2045 = vaddvq_s32(vaddq_s32(v2068, v2067));
                                                if ((v2060 & 0x3FFFFFF8) != v2060)
                                                {
LABEL_1444:
                                                  v2087 = (uint8x8_t)(*(_QWORD *)&v2061 + 1);
                                                  do
                                                  {
                                                    v2045 += 8;
                                                    v2088 = v2062->u8[0];
                                                    v2062 = (uint8x8_t *)((char *)v2062 + 1);
                                                    *(_QWORD *)&v2044 |= (unint64_t)v2088 << v2063;
                                                    *v1873 = v2087;
                                                    v2063 -= 8;
                                                    ++*(_QWORD *)&v2087;
                                                  }
                                                  while (v2063 >= v2053);
                                                }
                                              }
                                            }
                                            v2089 = (((v2043 << 7) - 128) >> 8) + 1;
                                            v2090 = (int8x8_t)(*(_QWORD *)&v2044 - (v2089 << 56));
                                            if (*(_QWORD *)&v2044 >= (unint64_t)(v2089 << 56))
                                            {
                                              LODWORD(v2089) = *(_DWORD *)(v1 + 10668) - v2089;
                                              v2091 = 8;
                                              v2044 = v2090;
                                            }
                                            else
                                            {
                                              v2091 = 0;
                                            }
                                            v2092 = vp8_norm[v2089];
                                            v2093 = (_DWORD)v2089 << v2092;
                                            v2094 = (int8x8_t)(*(_QWORD *)&v2044 << v2092);
                                            *(int8x8_t *)(v1 + 10656) = v2094;
                                            v2095 = v2045 - v2092;
                                            *(_DWORD *)(v1 + 10664) = v2045 - v2092;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v2089 << v2092;
                                            if (((v2045 - v2092) & 0x80000000) != 0)
                                            {
                                              v2096 = v2091;
                                              v2097 = *(uint8x8_t **)(v1 + 10648);
                                              v2098 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2097;
                                              v2099 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                              if (v2099)
                                              {
                                                if (v2098 >= 9)
                                                  v2100 = 9;
                                                else
                                                  v2100 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2097;
                                                v2099(*(_QWORD *)(v1 + 10680), v2097, &v4539, v2100);
                                                v1875.i64[0] = 0x3F0000003FLL;
                                                v1875.i64[1] = 0x3F0000003FLL;
                                                v1874.i64[0] = 0x800000008;
                                                v1874.i64[1] = 0x800000008;
                                                v2097 = (uint8x8_t *)&v4539;
                                              }
                                              v2101 = 48 - v2095;
                                              v2102 = 56 - 8 * v2098 - v2095;
                                              if (v2102 >= 0)
                                                v2095 += 0x40000000;
                                              if (8 * v2098)
                                                v2103 = 1;
                                              else
                                                v2103 = v2102 <= -1;
                                              v2104 = v2102 & ~(v2102 >> 31);
                                              if (!v2103 || v2101 < v2104)
                                              {
                                                v2091 = v2096;
                                              }
                                              else
                                              {
                                                v2106 = *v1873;
                                                v2107 = v2092 - v2045 + 40;
                                                if (v2107 >= v2104 - 1)
                                                  v2108 = v2104 - 1;
                                                else
                                                  v2108 = v2092 - v2045 + 40;
                                                v2109 = v2092 - v2045 - v2108 + 47;
                                                v2091 = v2096;
                                                if (v2109 < 0x78)
                                                  goto LABEL_1481;
                                                if (v2107 >= v2104 - 1)
                                                  v2107 = v2104 - 1;
                                                if (v1873 < (uint8x8_t *)&v2097->i8[((v2092 - v2045 - v2107 + 47) >> 3)
                                                                                   + 1]
                                                  && (unint64_t)v2097 < v4476)
                                                {
LABEL_1481:
                                                  v2112 = *v1873;
                                                  v2113 = v2097;
                                                  v2114 = v2101;
                                                  goto LABEL_1482;
                                                }
                                                v2111 = (v2109 >> 3) + 1;
                                                v2112 = (uint8x8_t)(*(_QWORD *)&v2106 + (v2111 & 0x3FFFFFF8));
                                                v2113 = (uint8x8_t *)((char *)v2097 + (v2111 & 0x3FFFFFF8));
                                                v2114 = v2101 - 8 * (v2111 & 0x3FFFFFF8);
                                                v2115 = vdupq_n_s32(v2101);
                                                v2116 = vaddq_s32(v2115, (int32x4_t)xmmword_208F3A6A0);
                                                v2117 = vaddq_s32(v2115, (int32x4_t)xmmword_208F3A6B0);
                                                v2118 = 0uLL;
                                                v2119 = (int32x4_t)v2095;
                                                v2120 = (int8x16_t)(unint64_t)v2094;
                                                v2121 = v2111 & 0x3FFFFFF8;
                                                v2122 = 0uLL;
                                                v2123 = 0uLL;
                                                v2124 = 0uLL;
                                                do
                                                {
                                                  v2119 = vaddq_s32(v2119, v1874);
                                                  v2125 = *v2097++;
                                                  v2118 = vaddq_s32(v2118, v1874);
                                                  v2126 = vmovl_u8(v2125);
                                                  v2127 = vmovl_high_u16(v2126);
                                                  v2128.i64[0] = v2127.u32[2];
                                                  v2128.i64[1] = v2127.u32[3];
                                                  v2129 = v2128;
                                                  v2128.i64[0] = v2127.u32[0];
                                                  v2128.i64[1] = v2127.u32[1];
                                                  v2130 = v2128;
                                                  v2131 = vmovl_u16(*(uint16x4_t *)v2126.i8);
                                                  v2128.i64[0] = v2131.u32[2];
                                                  v2128.i64[1] = v2131.u32[3];
                                                  v2132 = v2128;
                                                  v2128.i64[0] = v2131.u32[0];
                                                  v2128.i64[1] = v2131.u32[1];
                                                  v2133 = v2128;
                                                  v2128.i64[0] = v2116.u32[2];
                                                  v2128.i64[1] = v2116.u32[3];
                                                  v2134 = v2128;
                                                  v2128.i64[0] = v2116.u32[0];
                                                  v2128.i64[1] = v2116.u32[1];
                                                  v2135 = v2128;
                                                  v2128.i64[0] = v2117.u32[2];
                                                  v2128.i64[1] = v2117.u32[3];
                                                  v2136 = v2128;
                                                  v2128.i64[0] = v2117.u32[0];
                                                  v2128.i64[1] = v2117.u32[1];
                                                  v2124 = vorrq_s8((int8x16_t)vshlq_u64(v2129, v2134), v2124);
                                                  v2123 = vorrq_s8((int8x16_t)vshlq_u64(v2130, v2135), v2123);
                                                  v2122 = vorrq_s8((int8x16_t)vshlq_u64(v2132, v2136), v2122);
                                                  v2120 = vorrq_s8((int8x16_t)vshlq_u64(v2133, v2128), v2120);
                                                  *(_QWORD *)&v2106 += 8;
                                                  v2117 = vaddq_s32(v2117, v1875);
                                                  v2116 = vaddq_s32(v2116, v1875);
                                                  v2121 -= 8;
                                                }
                                                while (v2121);
                                                *v1873 = v2106;
                                                v2137 = vorrq_s8(vorrq_s8(v2120, v2123), vorrq_s8(v2122, v2124));
                                                v2094 = vorr_s8(*(int8x8_t *)v2137.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2137, v2137, 8uLL));
                                                v2095 = vaddvq_s32(vaddq_s32(v2119, v2118));
                                                if ((v2111 & 0x3FFFFFF8) != v2111)
                                                {
LABEL_1482:
                                                  v2138 = (uint8x8_t)(*(_QWORD *)&v2112 + 1);
                                                  do
                                                  {
                                                    v2095 += 8;
                                                    v2139 = v2113->u8[0];
                                                    v2113 = (uint8x8_t *)((char *)v2113 + 1);
                                                    *(_QWORD *)&v2094 |= (unint64_t)v2139 << v2114;
                                                    *v1873 = v2138;
                                                    v2114 -= 8;
                                                    ++*(_QWORD *)&v2138;
                                                  }
                                                  while (v2114 >= v2104);
                                                }
                                              }
                                            }
                                            v2140 = (((v2093 << 7) - 128) >> 8) + 1;
                                            v2141 = (int8x8_t)(*(_QWORD *)&v2094 - (v2140 << 56));
                                            if (*(_QWORD *)&v2094 >= (unint64_t)(v2140 << 56))
                                            {
                                              LODWORD(v2140) = *(_DWORD *)(v1 + 10668) - v2140;
                                              v2142 = 4;
                                              v2094 = v2141;
                                            }
                                            else
                                            {
                                              v2142 = 0;
                                            }
                                            v2143 = vp8_norm[v2140];
                                            v2144 = (_DWORD)v2140 << v2143;
                                            v2145 = (int8x8_t)(*(_QWORD *)&v2094 << v2143);
                                            *(int8x8_t *)(v1 + 10656) = v2145;
                                            v2146 = v2095 - v2143;
                                            *(_DWORD *)(v1 + 10664) = v2095 - v2143;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v2140 << v2143;
                                            if (((v2095 - v2143) & 0x80000000) != 0)
                                            {
                                              v2147 = v2142;
                                              v2148 = v2091;
                                              v2149 = *(uint8x8_t **)(v1 + 10648);
                                              v2150 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2149;
                                              v2151 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                              if (v2151)
                                              {
                                                if (v2150 >= 9)
                                                  v2152 = 9;
                                                else
                                                  v2152 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2149;
                                                v2151(*(_QWORD *)(v1 + 10680), v2149, &v4539, v2152);
                                                v1875.i64[0] = 0x3F0000003FLL;
                                                v1875.i64[1] = 0x3F0000003FLL;
                                                v1874.i64[0] = 0x800000008;
                                                v1874.i64[1] = 0x800000008;
                                                v2149 = (uint8x8_t *)&v4539;
                                              }
                                              v2153 = 48 - v2146;
                                              v2154 = 56 - 8 * v2150 - v2146;
                                              if (v2154 >= 0)
                                                v2146 += 0x40000000;
                                              if (8 * v2150)
                                                v2155 = 1;
                                              else
                                                v2155 = v2154 <= -1;
                                              v2156 = v2154 & ~(v2154 >> 31);
                                              if (!v2155 || v2153 < v2156)
                                              {
                                                v2091 = v2148;
                                                v2142 = v2147;
                                              }
                                              else
                                              {
                                                v2158 = *v1873;
                                                v2159 = v2143 - v2095 + 40;
                                                if (v2159 >= v2156 - 1)
                                                  v2160 = v2156 - 1;
                                                else
                                                  v2160 = v2143 - v2095 + 40;
                                                v2161 = v2143 - v2095 - v2160 + 47;
                                                v2091 = v2148;
                                                v2142 = v2147;
                                                if (v2161 < 0x78)
                                                  goto LABEL_1519;
                                                if (v2159 >= v2156 - 1)
                                                  v2159 = v2156 - 1;
                                                if (v1873 < (uint8x8_t *)&v2149->i8[((v2143 - v2095 - v2159 + 47) >> 3)
                                                                                   + 1]
                                                  && (unint64_t)v2149 < v4476)
                                                {
LABEL_1519:
                                                  v2164 = *v1873;
                                                  v2165 = v2149;
                                                  v2166 = v2153;
                                                  goto LABEL_1520;
                                                }
                                                v2163 = (v2161 >> 3) + 1;
                                                v2164 = (uint8x8_t)(*(_QWORD *)&v2158 + (v2163 & 0x3FFFFFF8));
                                                v2165 = (uint8x8_t *)((char *)v2149 + (v2163 & 0x3FFFFFF8));
                                                v2166 = v2153 - 8 * (v2163 & 0x3FFFFFF8);
                                                v2167 = vdupq_n_s32(v2153);
                                                v2168 = vaddq_s32(v2167, (int32x4_t)xmmword_208F3A6A0);
                                                v2169 = vaddq_s32(v2167, (int32x4_t)xmmword_208F3A6B0);
                                                v2170 = 0uLL;
                                                v2171 = (int32x4_t)v2146;
                                                v2172 = (int8x16_t)(unint64_t)v2145;
                                                v2173 = v2163 & 0x3FFFFFF8;
                                                v2174 = 0uLL;
                                                v2175 = 0uLL;
                                                v2176 = 0uLL;
                                                do
                                                {
                                                  v2171 = vaddq_s32(v2171, v1874);
                                                  v2177 = *v2149++;
                                                  v2170 = vaddq_s32(v2170, v1874);
                                                  v2178 = vmovl_u8(v2177);
                                                  v2179 = vmovl_high_u16(v2178);
                                                  v2180.i64[0] = v2179.u32[2];
                                                  v2180.i64[1] = v2179.u32[3];
                                                  v2181 = v2180;
                                                  v2180.i64[0] = v2179.u32[0];
                                                  v2180.i64[1] = v2179.u32[1];
                                                  v2182 = v2180;
                                                  v2183 = vmovl_u16(*(uint16x4_t *)v2178.i8);
                                                  v2180.i64[0] = v2183.u32[2];
                                                  v2180.i64[1] = v2183.u32[3];
                                                  v2184 = v2180;
                                                  v2180.i64[0] = v2183.u32[0];
                                                  v2180.i64[1] = v2183.u32[1];
                                                  v2185 = v2180;
                                                  v2180.i64[0] = v2168.u32[2];
                                                  v2180.i64[1] = v2168.u32[3];
                                                  v2186 = v2180;
                                                  v2180.i64[0] = v2168.u32[0];
                                                  v2180.i64[1] = v2168.u32[1];
                                                  v2187 = v2180;
                                                  v2180.i64[0] = v2169.u32[2];
                                                  v2180.i64[1] = v2169.u32[3];
                                                  v2188 = v2180;
                                                  v2180.i64[0] = v2169.u32[0];
                                                  v2180.i64[1] = v2169.u32[1];
                                                  v2176 = vorrq_s8((int8x16_t)vshlq_u64(v2181, v2186), v2176);
                                                  v2175 = vorrq_s8((int8x16_t)vshlq_u64(v2182, v2187), v2175);
                                                  v2174 = vorrq_s8((int8x16_t)vshlq_u64(v2184, v2188), v2174);
                                                  v2172 = vorrq_s8((int8x16_t)vshlq_u64(v2185, v2180), v2172);
                                                  *(_QWORD *)&v2158 += 8;
                                                  v2169 = vaddq_s32(v2169, v1875);
                                                  v2168 = vaddq_s32(v2168, v1875);
                                                  v2173 -= 8;
                                                }
                                                while (v2173);
                                                *v1873 = v2158;
                                                v2189 = vorrq_s8(vorrq_s8(v2172, v2175), vorrq_s8(v2174, v2176));
                                                v2145 = vorr_s8(*(int8x8_t *)v2189.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2189, v2189, 8uLL));
                                                v2146 = vaddvq_s32(vaddq_s32(v2171, v2170));
                                                if ((v2163 & 0x3FFFFFF8) != v2163)
                                                {
LABEL_1520:
                                                  v2190 = (uint8x8_t)(*(_QWORD *)&v2164 + 1);
                                                  do
                                                  {
                                                    v2146 += 8;
                                                    v2191 = v2165->u8[0];
                                                    v2165 = (uint8x8_t *)((char *)v2165 + 1);
                                                    *(_QWORD *)&v2145 |= (unint64_t)v2191 << v2166;
                                                    *v1873 = v2190;
                                                    v2166 -= 8;
                                                    ++*(_QWORD *)&v2190;
                                                  }
                                                  while (v2166 >= v2156);
                                                }
                                              }
                                            }
                                            v2192 = (((v2144 << 7) - 128) >> 8) + 1;
                                            v2193 = (int8x8_t)(*(_QWORD *)&v2145 - (v2192 << 56));
                                            if (*(_QWORD *)&v2145 >= (unint64_t)(v2192 << 56))
                                            {
                                              LODWORD(v2192) = *(_DWORD *)(v1 + 10668) - v2192;
                                              v2194 = 2;
                                              v2145 = v2193;
                                            }
                                            else
                                            {
                                              v2194 = 0;
                                            }
                                            v2195 = vp8_norm[v2192];
                                            v2196 = (_DWORD)v2192 << v2195;
                                            v2197 = (int8x8_t)(*(_QWORD *)&v2145 << v2195);
                                            *(int8x8_t *)(v1 + 10656) = v2197;
                                            v2198 = v2146 - v2195;
                                            *(_DWORD *)(v1 + 10664) = v2146 - v2195;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v2192 << v2195;
                                            if (((v2146 - v2195) & 0x80000000) == 0)
                                            {
                                              v2199 = v4514;
                                              v2200 = v4495;
                                              result = v4484;
                                              v2201 = v4479;
                                              goto LABEL_1575;
                                            }
                                            v4468 = v2194;
                                            v2202 = *(uint8x8_t **)(v1 + 10648);
                                            v2203 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2202;
                                            v2204 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                            if (v2204)
                                            {
                                              v2205 = v2091;
                                              if (v2203 >= 9)
                                                v2206 = 9;
                                              else
                                                v2206 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2202;
                                              v2207 = v2142;
                                              v2204(*(_QWORD *)(v1 + 10680), v2202, &v4539, v2206);
                                              v2142 = v2207;
                                              v2091 = v2205;
                                              v1875.i64[0] = 0x3F0000003FLL;
                                              v1875.i64[1] = 0x3F0000003FLL;
                                              v1874.i64[0] = 0x800000008;
                                              v1874.i64[1] = 0x800000008;
                                              v2202 = (uint8x8_t *)&v4539;
                                            }
                                            v2208 = 48 - v2198;
                                            v2209 = 56 - 8 * v2203 - v2198;
                                            if (v2209 >= 0)
                                              v2198 += 0x40000000;
                                            if (8 * v2203)
                                              v2210 = 1;
                                            else
                                              v2210 = v2209 <= -1;
                                            v2211 = v2209 & ~(v2209 >> 31);
                                            if (!v2210 || v2208 < v2211)
                                            {
                                              v2199 = v4514;
                                              v2200 = v4495;
                                              result = v4484;
                                              v2201 = v4479;
                                              v2194 = v4468;
                                              goto LABEL_1575;
                                            }
                                            v2213 = *v1873;
                                            v2214 = v2195 - v2146 + 40;
                                            if (v2214 >= v2211 - 1)
                                              v2215 = v2211 - 1;
                                            else
                                              v2215 = v2195 - v2146 + 40;
                                            v2216 = v2195 - v2146 - v2215 + 47;
                                            v2194 = v4468;
                                            if (v2216 < 0x78)
                                            {
                                              v2217 = *v1873;
                                              v2218 = v2202;
                                              v2219 = v2208;
                                              v2199 = v4514;
                                              v2200 = v4495;
                                              result = v4484;
                                              v2201 = v4479;
                                              goto LABEL_1573;
                                            }
                                            if (v2214 >= v2211 - 1)
                                              v2214 = v2211 - 1;
                                            v2245 = v1873 >= (uint8x8_t *)&v2202->i8[((v2195 - v2146 - v2214 + 47) >> 3)
                                                                                   + 1]
                                                 || (unint64_t)v2202 >= v4476;
                                            v2199 = v4514;
                                            v2200 = v4495;
                                            result = v4484;
                                            v2201 = v4479;
                                            if (!v2245)
                                            {
                                              v2217 = *v1873;
                                              v2218 = v2202;
                                              v2219 = v2208;
                                              goto LABEL_1573;
                                            }
                                            v2246 = (v2216 >> 3) + 1;
                                            v2217 = (uint8x8_t)(*(_QWORD *)&v2213 + (v2246 & 0x3FFFFFF8));
                                            v2218 = (uint8x8_t *)((char *)v2202 + (v2246 & 0x3FFFFFF8));
                                            v2219 = v2208 - 8 * (v2246 & 0x3FFFFFF8);
                                            v2247 = vdupq_n_s32(v2208);
                                            v2248 = vaddq_s32(v2247, (int32x4_t)xmmword_208F3A6A0);
                                            v2249 = vaddq_s32(v2247, (int32x4_t)xmmword_208F3A6B0);
                                            v2250 = 0uLL;
                                            v2251 = (int32x4_t)v2198;
                                            v2252 = (int8x16_t)(unint64_t)v2197;
                                            v2253 = v2246 & 0x3FFFFFF8;
                                            v2254 = 0uLL;
                                            v2255 = 0uLL;
                                            v2256 = 0uLL;
                                            do
                                            {
                                              v2251 = vaddq_s32(v2251, v1874);
                                              v2257 = *v2202++;
                                              v2250 = vaddq_s32(v2250, v1874);
                                              v2258 = vmovl_u8(v2257);
                                              v2259 = vmovl_high_u16(v2258);
                                              v2260.i64[0] = v2259.u32[2];
                                              v2260.i64[1] = v2259.u32[3];
                                              v2261 = v2260;
                                              v2260.i64[0] = v2259.u32[0];
                                              v2260.i64[1] = v2259.u32[1];
                                              v2262 = v2260;
                                              v2263 = vmovl_u16(*(uint16x4_t *)v2258.i8);
                                              v2260.i64[0] = v2263.u32[2];
                                              v2260.i64[1] = v2263.u32[3];
                                              v2264 = v2260;
                                              v2260.i64[0] = v2263.u32[0];
                                              v2260.i64[1] = v2263.u32[1];
                                              v2265 = v2260;
                                              v2260.i64[0] = v2248.u32[2];
                                              v2260.i64[1] = v2248.u32[3];
                                              v2266 = v2260;
                                              v2260.i64[0] = v2248.u32[0];
                                              v2260.i64[1] = v2248.u32[1];
                                              v2267 = v2260;
                                              v2260.i64[0] = v2249.u32[2];
                                              v2260.i64[1] = v2249.u32[3];
                                              v2268 = v2260;
                                              v2260.i64[0] = v2249.u32[0];
                                              v2260.i64[1] = v2249.u32[1];
                                              v2256 = vorrq_s8((int8x16_t)vshlq_u64(v2261, v2266), v2256);
                                              v2255 = vorrq_s8((int8x16_t)vshlq_u64(v2262, v2267), v2255);
                                              v2254 = vorrq_s8((int8x16_t)vshlq_u64(v2264, v2268), v2254);
                                              v2252 = vorrq_s8((int8x16_t)vshlq_u64(v2265, v2260), v2252);
                                              *(_QWORD *)&v2213 += 8;
                                              v2249 = vaddq_s32(v2249, v1875);
                                              v2248 = vaddq_s32(v2248, v1875);
                                              v2253 -= 8;
                                            }
                                            while (v2253);
                                            *v1873 = v2213;
                                            v2269 = vorrq_s8(vorrq_s8(v2252, v2255), vorrq_s8(v2254, v2256));
                                            v2197 = vorr_s8(*(int8x8_t *)v2269.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2269, v2269, 8uLL));
                                            v2198 = vaddvq_s32(vaddq_s32(v2251, v2250));
                                            if ((v2246 & 0x3FFFFFF8) != v2246)
                                            {
LABEL_1573:
                                              v2272 = (uint8x8_t)(*(_QWORD *)&v2217 + 1);
                                              do
                                              {
                                                v2198 += 8;
                                                v2273 = v2218->u8[0];
                                                v2218 = (uint8x8_t *)((char *)v2218 + 1);
                                                *(_QWORD *)&v2197 |= (unint64_t)v2273 << v2219;
                                                *v1873 = v2272;
                                                v2219 -= 8;
                                                ++*(_QWORD *)&v2272;
                                              }
                                              while (v2219 >= v2211);
                                            }
LABEL_1575:
                                            v2274 = (((v2196 << 7) - 128) >> 8) + 1;
                                            v2275 = (int8x8_t)(*(_QWORD *)&v2197 - (v2274 << 56));
                                            if (*(_QWORD *)&v2197 >= (unint64_t)(v2274 << 56))
                                            {
                                              LODWORD(v2274) = *(_DWORD *)(v1 + 10668) - v2274;
                                              v2276 = 1;
                                              v2197 = v2275;
                                            }
                                            else
                                            {
                                              v2276 = 0;
                                            }
                                            v2277 = vp8_norm[v2274];
                                            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2197 << v2277;
                                            *(_DWORD *)(v1 + 10664) = v2198 - v2277;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v2274 << v2277;
                                            *(_BYTE *)(v1 + v4534++ + 9103) = v2200 | v2199 | result | v2201 | v2091 | v2142 | v2194 | v2276;
                                            if (v4534 == 3)
                                              break;
                                            v1872 = *(_DWORD *)(v1 + 10664);
                                            v1870 = *(_DWORD *)(v1 + 10668);
                                            v1871 = *(int8x8_t *)(v1 + 10656);
                                            if ((v1872 & 0x80000000) != 0)
                                              goto LABEL_1278;
                                            continue;
                                          }
                                        }
                                        v2278 = 0;
                                        v2279 = (uint8x8_t *)(v1 + 10648);
                                        v2280 = v1 + 10656;
                                        v2281 = 1;
                                        v2282.i64[0] = 0x800000008;
                                        v2282.i64[1] = 0x800000008;
                                        v2283.i64[0] = 0x3F0000003FLL;
                                        v2283.i64[1] = 0x3F0000003FLL;
                                        while (2)
                                        {
                                          v4535 = 0;
                                          v4456 = v2281;
                                          v2284 = 19 * v2278;
                                          v2285 = &vp8_mv_update_probs[v2284];
                                          v4477 = &v4429[v2284];
LABEL_1588:
                                          v2292 = *v2285;
                                          v2293 = *(_DWORD *)(v1 + 10668);
                                          v2294 = *(_DWORD *)(v1 + 10664);
                                          v2295 = *(int8x8_t *)(v1 + 10656);
                                          v4515 = v2285 + 1;
                                          if ((v2294 & 0x80000000) != 0)
                                          {
                                            v2296 = *(uint8x8_t **)(v1 + 10648);
                                            v2297 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2296;
                                            v2298 = *(uint64_t (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                            if (v2298)
                                            {
                                              if (v2297 >= 9)
                                                v2299 = 9;
                                              else
                                                v2299 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2296;
                                              result = v2298(*(_QWORD *)(v1 + 10680), v2296, &v4539, v2299);
                                              v2283.i64[0] = 0x3F0000003FLL;
                                              v2283.i64[1] = 0x3F0000003FLL;
                                              v2282.i64[0] = 0x800000008;
                                              v2282.i64[1] = 0x800000008;
                                              v2296 = (uint8x8_t *)&v4539;
                                            }
                                            v2300 = 48 - v2294;
                                            v2301 = 56 - v2294 - 8 * v2297;
                                            if (v2301 < 0)
                                              v2302 = v2294;
                                            else
                                              v2302 = v2294 + 0x40000000;
                                            if (8 * v2297)
                                              v2303 = 1;
                                            else
                                              v2303 = v2301 <= -1;
                                            v2304 = v2301 & ~(v2301 >> 31);
                                            if (v2303 && v2300 >= v2304)
                                            {
                                              v2306 = *v2279;
                                              v2307 = v2304 - 1;
                                              if (v2304 - 1 >= (int)(40 - v2294))
                                                v2308 = 40 - v2294;
                                              else
                                                v2308 = v2304 - 1;
                                              v2309 = 47 - v2294 - v2308;
                                              if (v2309 < 0x78)
                                                goto LABEL_1619;
                                              if (v2307 >= (int)(40 - v2294))
                                                v2307 = 40 - v2294;
                                              if (v2279 < (uint8x8_t *)&v2296->i8[((47 - v2294 - v2307) >> 3) + 1]
                                                && (unint64_t)v2296 < v2280)
                                              {
LABEL_1619:
                                                v2312 = *v2279;
                                                v2313 = v2296;
                                                v2314 = 48 - v2294;
                                                goto LABEL_1620;
                                              }
                                              v2311 = (v2309 >> 3) + 1;
                                              v2312 = (uint8x8_t)(*(_QWORD *)&v2306 + (v2311 & 0x3FFFFFF8));
                                              v2313 = (uint8x8_t *)((char *)v2296 + (v2311 & 0x3FFFFFF8));
                                              v2314 = v2300 - 8 * (v2311 & 0x3FFFFFF8);
                                              v2315 = vdupq_n_s32(v2300);
                                              v2316 = vaddq_s32(v2315, (int32x4_t)xmmword_208F3A6A0);
                                              v2317 = vaddq_s32(v2315, (int32x4_t)xmmword_208F3A6B0);
                                              v2318 = 0uLL;
                                              v2319 = (int32x4_t)v2302;
                                              v2320 = (int8x16_t)(unint64_t)v2295;
                                              v2321 = v2311 & 0x3FFFFFF8;
                                              v2322 = 0uLL;
                                              v2323 = 0uLL;
                                              v2324 = 0uLL;
                                              do
                                              {
                                                v2319 = vaddq_s32(v2319, v2282);
                                                v2325 = *v2296++;
                                                v2318 = vaddq_s32(v2318, v2282);
                                                v2326 = vmovl_u8(v2325);
                                                v2327 = vmovl_high_u16(v2326);
                                                v2328.i64[0] = v2327.u32[2];
                                                v2328.i64[1] = v2327.u32[3];
                                                v2329 = v2328;
                                                v2328.i64[0] = v2327.u32[0];
                                                v2328.i64[1] = v2327.u32[1];
                                                v2330 = v2328;
                                                v2331 = vmovl_u16(*(uint16x4_t *)v2326.i8);
                                                v2328.i64[0] = v2331.u32[2];
                                                v2328.i64[1] = v2331.u32[3];
                                                v2332 = v2328;
                                                v2328.i64[0] = v2331.u32[0];
                                                v2328.i64[1] = v2331.u32[1];
                                                v2333 = v2328;
                                                v2328.i64[0] = v2316.u32[2];
                                                v2328.i64[1] = v2316.u32[3];
                                                v2334 = v2328;
                                                v2328.i64[0] = v2316.u32[0];
                                                v2328.i64[1] = v2316.u32[1];
                                                v2335 = v2328;
                                                v2328.i64[0] = v2317.u32[2];
                                                v2328.i64[1] = v2317.u32[3];
                                                v2336 = v2328;
                                                v2328.i64[0] = v2317.u32[0];
                                                v2328.i64[1] = v2317.u32[1];
                                                v2324 = vorrq_s8((int8x16_t)vshlq_u64(v2329, v2334), v2324);
                                                v2323 = vorrq_s8((int8x16_t)vshlq_u64(v2330, v2335), v2323);
                                                v2322 = vorrq_s8((int8x16_t)vshlq_u64(v2332, v2336), v2322);
                                                v2320 = vorrq_s8((int8x16_t)vshlq_u64(v2333, v2328), v2320);
                                                *(_QWORD *)&v2306 += 8;
                                                v2317 = vaddq_s32(v2317, v2283);
                                                v2316 = vaddq_s32(v2316, v2283);
                                                v2321 -= 8;
                                              }
                                              while (v2321);
                                              *v2279 = v2306;
                                              v2337 = vorrq_s8(vorrq_s8(v2320, v2323), vorrq_s8(v2322, v2324));
                                              v2295 = vorr_s8(*(int8x8_t *)v2337.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2337, v2337, 8uLL));
                                              v2302 = vaddvq_s32(vaddq_s32(v2319, v2318));
                                              if ((v2311 & 0x3FFFFFF8) != v2311)
                                              {
LABEL_1620:
                                                v2338 = (uint8x8_t)(*(_QWORD *)&v2312 + 1);
                                                do
                                                {
                                                  v2302 += 8;
                                                  v2339 = v2313->u8[0];
                                                  v2313 = (uint8x8_t *)((char *)v2313 + 1);
                                                  *(_QWORD *)&v2295 |= (unint64_t)v2339 << v2314;
                                                  *v2279 = v2338;
                                                  v2314 -= 8;
                                                  ++*(_QWORD *)&v2338;
                                                }
                                                while (v2314 >= v2304);
                                              }
                                            }
                                            v2294 = v2302;
                                          }
                                          v2340 = (((v2293 - 1) * v2292) >> 8) + 1;
                                          v2341 = v2340 << 56;
                                          v2342 = v2295;
                                          v2343 = (int8x8_t)(*(_QWORD *)&v2295 - (v2340 << 56));
                                          if (*(_QWORD *)&v2295 >= (unint64_t)(v2340 << 56))
                                          {
                                            LODWORD(v2340) = *(_DWORD *)(v1 + 10668) - v2340;
                                            v2342 = v2343;
                                          }
                                          v2344 = vp8_norm[v2340];
                                          v2345 = (_DWORD)v2340 << v2344;
                                          v2346 = (int8x8_t)(*(_QWORD *)&v2342 << v2344);
                                          *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2342 << v2344;
                                          v2347 = v2294 - v2344;
                                          *(_DWORD *)(v1 + 10664) = v2294 - v2344;
                                          *(_DWORD *)(v1 + 10668) = (_DWORD)v2340 << v2344;
                                          if (*(_QWORD *)&v2295 >= v2341)
                                          {
                                            if ((v2347 & 0x80000000) != 0)
                                            {
                                              v2348 = *(uint8x8_t **)(v1 + 10648);
                                              v2349 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2348;
                                              v2350 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                              if (v2350)
                                              {
                                                if (v2349 >= 9)
                                                  v2351 = 9;
                                                else
                                                  v2351 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2348;
                                                v2350(*(_QWORD *)(v1 + 10680), v2348, &v4539, v2351);
                                                v2283.i64[0] = 0x3F0000003FLL;
                                                v2283.i64[1] = 0x3F0000003FLL;
                                                v2282.i64[0] = 0x800000008;
                                                v2282.i64[1] = 0x800000008;
                                                v2348 = (uint8x8_t *)&v4539;
                                              }
                                              v2352 = 48 - v2347;
                                              v2353 = 56 - 8 * v2349 - v2347;
                                              if (v2353 >= 0)
                                                v2347 += 0x40000000;
                                              v2354 = 8 * v2349 || v2353 <= -1;
                                              v2355 = v2353 & ~(v2353 >> 31);
                                              if (v2354 && v2352 >= v2355)
                                              {
                                                v2357 = *v2279;
                                                v2358 = v2344 - v2294 + 40;
                                                if (v2358 >= v2355 - 1)
                                                  v2359 = v2355 - 1;
                                                else
                                                  v2359 = v2344 - v2294 + 40;
                                                v2360 = v2344 - v2294 - v2359 + 47;
                                                if (v2360 < 0x78)
                                                  goto LABEL_1656;
                                                if (v2358 >= v2355 - 1)
                                                  v2358 = v2355 - 1;
                                                if (v2279 < (uint8x8_t *)&v2348->i8[((v2344 - v2294 - v2358 + 47) >> 3)
                                                                                   + 1]
                                                  && (unint64_t)v2348 < v2280)
                                                {
LABEL_1656:
                                                  v2363 = *v2279;
                                                  v2364 = v2348;
                                                  v2365 = v2352;
                                                  goto LABEL_1657;
                                                }
                                                v2362 = (v2360 >> 3) + 1;
                                                v2363 = (uint8x8_t)(*(_QWORD *)&v2357 + (v2362 & 0x3FFFFFF8));
                                                v2364 = (uint8x8_t *)((char *)v2348 + (v2362 & 0x3FFFFFF8));
                                                v2365 = v2352 - 8 * (v2362 & 0x3FFFFFF8);
                                                v2366 = vdupq_n_s32(v2352);
                                                v2367 = vaddq_s32(v2366, (int32x4_t)xmmword_208F3A6A0);
                                                v2368 = vaddq_s32(v2366, (int32x4_t)xmmword_208F3A6B0);
                                                v2369 = 0uLL;
                                                v2370 = (int32x4_t)v2347;
                                                v2371 = (int8x16_t)(unint64_t)v2346;
                                                v2372 = v2362 & 0x3FFFFFF8;
                                                v2373 = 0uLL;
                                                v2374 = 0uLL;
                                                v2375 = 0uLL;
                                                do
                                                {
                                                  v2370 = vaddq_s32(v2370, v2282);
                                                  v2376 = *v2348++;
                                                  v2369 = vaddq_s32(v2369, v2282);
                                                  v2377 = vmovl_u8(v2376);
                                                  v2378 = vmovl_high_u16(v2377);
                                                  v2379.i64[0] = v2378.u32[2];
                                                  v2379.i64[1] = v2378.u32[3];
                                                  v2380 = v2379;
                                                  v2379.i64[0] = v2378.u32[0];
                                                  v2379.i64[1] = v2378.u32[1];
                                                  v2381 = v2379;
                                                  v2382 = vmovl_u16(*(uint16x4_t *)v2377.i8);
                                                  v2379.i64[0] = v2382.u32[2];
                                                  v2379.i64[1] = v2382.u32[3];
                                                  v2383 = v2379;
                                                  v2379.i64[0] = v2382.u32[0];
                                                  v2379.i64[1] = v2382.u32[1];
                                                  v2384 = v2379;
                                                  v2379.i64[0] = v2367.u32[2];
                                                  v2379.i64[1] = v2367.u32[3];
                                                  v2385 = v2379;
                                                  v2379.i64[0] = v2367.u32[0];
                                                  v2379.i64[1] = v2367.u32[1];
                                                  v2386 = v2379;
                                                  v2379.i64[0] = v2368.u32[2];
                                                  v2379.i64[1] = v2368.u32[3];
                                                  v2387 = v2379;
                                                  v2379.i64[0] = v2368.u32[0];
                                                  v2379.i64[1] = v2368.u32[1];
                                                  v2375 = vorrq_s8((int8x16_t)vshlq_u64(v2380, v2385), v2375);
                                                  v2374 = vorrq_s8((int8x16_t)vshlq_u64(v2381, v2386), v2374);
                                                  v2373 = vorrq_s8((int8x16_t)vshlq_u64(v2383, v2387), v2373);
                                                  v2371 = vorrq_s8((int8x16_t)vshlq_u64(v2384, v2379), v2371);
                                                  *(_QWORD *)&v2357 += 8;
                                                  v2368 = vaddq_s32(v2368, v2283);
                                                  v2367 = vaddq_s32(v2367, v2283);
                                                  v2372 -= 8;
                                                }
                                                while (v2372);
                                                *v2279 = v2357;
                                                v2388 = vorrq_s8(vorrq_s8(v2371, v2374), vorrq_s8(v2373, v2375));
                                                v2346 = vorr_s8(*(int8x8_t *)v2388.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2388, v2388, 8uLL));
                                                v2347 = vaddvq_s32(vaddq_s32(v2370, v2369));
                                                if ((v2362 & 0x3FFFFFF8) != v2362)
                                                {
LABEL_1657:
                                                  v2389 = (uint8x8_t)(*(_QWORD *)&v2363 + 1);
                                                  do
                                                  {
                                                    v2347 += 8;
                                                    v2390 = v2364->u8[0];
                                                    v2364 = (uint8x8_t *)((char *)v2364 + 1);
                                                    *(_QWORD *)&v2346 |= (unint64_t)v2390 << v2365;
                                                    *v2279 = v2389;
                                                    v2365 -= 8;
                                                    ++*(_QWORD *)&v2389;
                                                  }
                                                  while (v2365 >= v2355);
                                                }
                                              }
                                            }
                                            v2391 = (((v2345 << 7) - 128) >> 8) + 1;
                                            v2392 = (int8x8_t)(*(_QWORD *)&v2346 - (v2391 << 56));
                                            if (*(_QWORD *)&v2346 >= (unint64_t)(v2391 << 56))
                                            {
                                              LODWORD(v2391) = *(_DWORD *)(v1 + 10668) - v2391;
                                              v4496 = 64;
                                              v2346 = v2392;
                                            }
                                            else
                                            {
                                              v4496 = 0;
                                            }
                                            v2393 = vp8_norm[v2391];
                                            v2394 = (_DWORD)v2391 << v2393;
                                            v2395 = (int8x8_t)(*(_QWORD *)&v2346 << v2393);
                                            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2346 << v2393;
                                            v2396 = v2347 - v2393;
                                            *(_DWORD *)(v1 + 10664) = v2347 - v2393;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v2391 << v2393;
                                            if (((v2347 - v2393) & 0x80000000) != 0)
                                            {
                                              v2397 = *(uint8x8_t **)(v1 + 10648);
                                              v2398 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2397;
                                              v2399 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                              if (v2399)
                                              {
                                                if (v2398 >= 9)
                                                  v2400 = 9;
                                                else
                                                  v2400 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2397;
                                                v2399(*(_QWORD *)(v1 + 10680), v2397, &v4539, v2400);
                                                v2283.i64[0] = 0x3F0000003FLL;
                                                v2283.i64[1] = 0x3F0000003FLL;
                                                v2282.i64[0] = 0x800000008;
                                                v2282.i64[1] = 0x800000008;
                                                v2397 = (uint8x8_t *)&v4539;
                                              }
                                              v2401 = 48 - v2396;
                                              v2402 = 56 - 8 * v2398 - v2396;
                                              if (v2402 >= 0)
                                                v2396 += 0x40000000;
                                              v2403 = 8 * v2398 || v2402 <= -1;
                                              v2404 = v2402 & ~(v2402 >> 31);
                                              if (v2403 && v2401 >= v2404)
                                              {
                                                v2406 = *v2279;
                                                v2407 = v2393 - v2347 + 40;
                                                if (v2407 >= v2404 - 1)
                                                  v2408 = v2404 - 1;
                                                else
                                                  v2408 = v2393 - v2347 + 40;
                                                v2409 = v2393 - v2347 - v2408 + 47;
                                                if (v2409 < 0x78)
                                                  goto LABEL_1692;
                                                if (v2407 >= v2404 - 1)
                                                  v2407 = v2404 - 1;
                                                if (v2279 < (uint8x8_t *)&v2397->i8[((v2393 - v2347 - v2407 + 47) >> 3)
                                                                                   + 1]
                                                  && (unint64_t)v2397 < v2280)
                                                {
LABEL_1692:
                                                  v2412 = *v2279;
                                                  v2413 = v2397;
                                                  v2414 = v2401;
                                                  goto LABEL_1693;
                                                }
                                                v2411 = (v2409 >> 3) + 1;
                                                v2412 = (uint8x8_t)(*(_QWORD *)&v2406 + (v2411 & 0x3FFFFFF8));
                                                v2413 = (uint8x8_t *)((char *)v2397 + (v2411 & 0x3FFFFFF8));
                                                v2414 = v2401 - 8 * (v2411 & 0x3FFFFFF8);
                                                v2415 = vdupq_n_s32(v2401);
                                                v2416 = vaddq_s32(v2415, (int32x4_t)xmmword_208F3A6A0);
                                                v2417 = vaddq_s32(v2415, (int32x4_t)xmmword_208F3A6B0);
                                                v2418 = 0uLL;
                                                v2419 = (int32x4_t)v2396;
                                                v2420 = (int8x16_t)(unint64_t)v2395;
                                                v2421 = v2411 & 0x3FFFFFF8;
                                                v2422 = 0uLL;
                                                v2423 = 0uLL;
                                                v2424 = 0uLL;
                                                do
                                                {
                                                  v2419 = vaddq_s32(v2419, v2282);
                                                  v2425 = *v2397++;
                                                  v2418 = vaddq_s32(v2418, v2282);
                                                  v2426 = vmovl_u8(v2425);
                                                  v2427 = vmovl_high_u16(v2426);
                                                  v2428.i64[0] = v2427.u32[2];
                                                  v2428.i64[1] = v2427.u32[3];
                                                  v2429 = v2428;
                                                  v2428.i64[0] = v2427.u32[0];
                                                  v2428.i64[1] = v2427.u32[1];
                                                  v2430 = v2428;
                                                  v2431 = vmovl_u16(*(uint16x4_t *)v2426.i8);
                                                  v2428.i64[0] = v2431.u32[2];
                                                  v2428.i64[1] = v2431.u32[3];
                                                  v2432 = v2428;
                                                  v2428.i64[0] = v2431.u32[0];
                                                  v2428.i64[1] = v2431.u32[1];
                                                  v2433 = v2428;
                                                  v2428.i64[0] = v2416.u32[2];
                                                  v2428.i64[1] = v2416.u32[3];
                                                  v2434 = v2428;
                                                  v2428.i64[0] = v2416.u32[0];
                                                  v2428.i64[1] = v2416.u32[1];
                                                  v2435 = v2428;
                                                  v2428.i64[0] = v2417.u32[2];
                                                  v2428.i64[1] = v2417.u32[3];
                                                  v2436 = v2428;
                                                  v2428.i64[0] = v2417.u32[0];
                                                  v2428.i64[1] = v2417.u32[1];
                                                  v2424 = vorrq_s8((int8x16_t)vshlq_u64(v2429, v2434), v2424);
                                                  v2423 = vorrq_s8((int8x16_t)vshlq_u64(v2430, v2435), v2423);
                                                  v2422 = vorrq_s8((int8x16_t)vshlq_u64(v2432, v2436), v2422);
                                                  v2420 = vorrq_s8((int8x16_t)vshlq_u64(v2433, v2428), v2420);
                                                  *(_QWORD *)&v2406 += 8;
                                                  v2417 = vaddq_s32(v2417, v2283);
                                                  v2416 = vaddq_s32(v2416, v2283);
                                                  v2421 -= 8;
                                                }
                                                while (v2421);
                                                *v2279 = v2406;
                                                v2437 = vorrq_s8(vorrq_s8(v2420, v2423), vorrq_s8(v2422, v2424));
                                                v2395 = vorr_s8(*(int8x8_t *)v2437.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2437, v2437, 8uLL));
                                                v2396 = vaddvq_s32(vaddq_s32(v2419, v2418));
                                                if ((v2411 & 0x3FFFFFF8) != v2411)
                                                {
LABEL_1693:
                                                  v2438 = (uint8x8_t)(*(_QWORD *)&v2412 + 1);
                                                  do
                                                  {
                                                    v2396 += 8;
                                                    v2439 = v2413->u8[0];
                                                    v2413 = (uint8x8_t *)((char *)v2413 + 1);
                                                    *(_QWORD *)&v2395 |= (unint64_t)v2439 << v2414;
                                                    *v2279 = v2438;
                                                    v2414 -= 8;
                                                    ++*(_QWORD *)&v2438;
                                                  }
                                                  while (v2414 >= v2404);
                                                }
                                              }
                                            }
                                            v2440 = (((v2394 << 7) - 128) >> 8) + 1;
                                            v2441 = (int8x8_t)(*(_QWORD *)&v2395 - (v2440 << 56));
                                            if (*(_QWORD *)&v2395 >= (unint64_t)(v2440 << 56))
                                            {
                                              LODWORD(v2440) = *(_DWORD *)(v1 + 10668) - v2440;
                                              v4485 = 32;
                                              v2395 = v2441;
                                            }
                                            else
                                            {
                                              v4485 = 0;
                                            }
                                            v2442 = vp8_norm[v2440];
                                            v2443 = (_DWORD)v2440 << v2442;
                                            v2444 = (int8x8_t)(*(_QWORD *)&v2395 << v2442);
                                            *(int8x8_t *)(v1 + 10656) = v2444;
                                            v2445 = v2396 - v2442;
                                            *(_DWORD *)(v1 + 10664) = v2396 - v2442;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v2440 << v2442;
                                            if (((v2396 - v2442) & 0x80000000) != 0)
                                            {
                                              v2446 = *(uint8x8_t **)(v1 + 10648);
                                              v2447 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2446;
                                              v2448 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                              if (v2448)
                                              {
                                                if (v2447 >= 9)
                                                  v2449 = 9;
                                                else
                                                  v2449 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2446;
                                                v2448(*(_QWORD *)(v1 + 10680), v2446, &v4539, v2449);
                                                v2283.i64[0] = 0x3F0000003FLL;
                                                v2283.i64[1] = 0x3F0000003FLL;
                                                v2282.i64[0] = 0x800000008;
                                                v2282.i64[1] = 0x800000008;
                                                v2446 = (uint8x8_t *)&v4539;
                                              }
                                              v2450 = 48 - v2445;
                                              v2451 = 56 - 8 * v2447 - v2445;
                                              if (v2451 >= 0)
                                                v2445 += 0x40000000;
                                              v2452 = 8 * v2447 || v2451 <= -1;
                                              v2453 = v2451 & ~(v2451 >> 31);
                                              if (v2452 && v2450 >= v2453)
                                              {
                                                v2455 = *v2279;
                                                v2456 = v2442 - v2396 + 40;
                                                if (v2456 >= v2453 - 1)
                                                  v2457 = v2453 - 1;
                                                else
                                                  v2457 = v2442 - v2396 + 40;
                                                v2458 = v2442 - v2396 - v2457 + 47;
                                                if (v2458 < 0x78)
                                                  goto LABEL_1728;
                                                if (v2456 >= v2453 - 1)
                                                  v2456 = v2453 - 1;
                                                if (v2279 < (uint8x8_t *)&v2446->i8[((v2442 - v2396 - v2456 + 47) >> 3)
                                                                                   + 1]
                                                  && (unint64_t)v2446 < v2280)
                                                {
LABEL_1728:
                                                  v2461 = *v2279;
                                                  v2462 = v2446;
                                                  v2463 = v2450;
                                                  goto LABEL_1729;
                                                }
                                                v2460 = (v2458 >> 3) + 1;
                                                v2461 = (uint8x8_t)(*(_QWORD *)&v2455 + (v2460 & 0x3FFFFFF8));
                                                v2462 = (uint8x8_t *)((char *)v2446 + (v2460 & 0x3FFFFFF8));
                                                v2463 = v2450 - 8 * (v2460 & 0x3FFFFFF8);
                                                v2464 = vdupq_n_s32(v2450);
                                                v2465 = vaddq_s32(v2464, (int32x4_t)xmmword_208F3A6A0);
                                                v2466 = vaddq_s32(v2464, (int32x4_t)xmmword_208F3A6B0);
                                                v2467 = 0uLL;
                                                v2468 = (int32x4_t)v2445;
                                                v2469 = (int8x16_t)(unint64_t)v2444;
                                                v2470 = v2460 & 0x3FFFFFF8;
                                                v2471 = 0uLL;
                                                v2472 = 0uLL;
                                                v2473 = 0uLL;
                                                do
                                                {
                                                  v2468 = vaddq_s32(v2468, v2282);
                                                  v2474 = *v2446++;
                                                  v2467 = vaddq_s32(v2467, v2282);
                                                  v2475 = vmovl_u8(v2474);
                                                  v2476 = vmovl_high_u16(v2475);
                                                  v2477.i64[0] = v2476.u32[2];
                                                  v2477.i64[1] = v2476.u32[3];
                                                  v2478 = v2477;
                                                  v2477.i64[0] = v2476.u32[0];
                                                  v2477.i64[1] = v2476.u32[1];
                                                  v2479 = v2477;
                                                  v2480 = vmovl_u16(*(uint16x4_t *)v2475.i8);
                                                  v2477.i64[0] = v2480.u32[2];
                                                  v2477.i64[1] = v2480.u32[3];
                                                  v2481 = v2477;
                                                  v2477.i64[0] = v2480.u32[0];
                                                  v2477.i64[1] = v2480.u32[1];
                                                  v2482 = v2477;
                                                  v2477.i64[0] = v2465.u32[2];
                                                  v2477.i64[1] = v2465.u32[3];
                                                  v2483 = v2477;
                                                  v2477.i64[0] = v2465.u32[0];
                                                  v2477.i64[1] = v2465.u32[1];
                                                  v2484 = v2477;
                                                  v2477.i64[0] = v2466.u32[2];
                                                  v2477.i64[1] = v2466.u32[3];
                                                  v2485 = v2477;
                                                  v2477.i64[0] = v2466.u32[0];
                                                  v2477.i64[1] = v2466.u32[1];
                                                  v2473 = vorrq_s8((int8x16_t)vshlq_u64(v2478, v2483), v2473);
                                                  v2472 = vorrq_s8((int8x16_t)vshlq_u64(v2479, v2484), v2472);
                                                  v2471 = vorrq_s8((int8x16_t)vshlq_u64(v2481, v2485), v2471);
                                                  v2469 = vorrq_s8((int8x16_t)vshlq_u64(v2482, v2477), v2469);
                                                  *(_QWORD *)&v2455 += 8;
                                                  v2466 = vaddq_s32(v2466, v2283);
                                                  v2465 = vaddq_s32(v2465, v2283);
                                                  v2470 -= 8;
                                                }
                                                while (v2470);
                                                *v2279 = v2455;
                                                v2486 = vorrq_s8(vorrq_s8(v2469, v2472), vorrq_s8(v2471, v2473));
                                                v2444 = vorr_s8(*(int8x8_t *)v2486.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2486, v2486, 8uLL));
                                                v2445 = vaddvq_s32(vaddq_s32(v2468, v2467));
                                                if ((v2460 & 0x3FFFFFF8) != v2460)
                                                {
LABEL_1729:
                                                  v2487 = (uint8x8_t)(*(_QWORD *)&v2461 + 1);
                                                  do
                                                  {
                                                    v2445 += 8;
                                                    v2488 = v2462->u8[0];
                                                    v2462 = (uint8x8_t *)((char *)v2462 + 1);
                                                    *(_QWORD *)&v2444 |= (unint64_t)v2488 << v2463;
                                                    *v2279 = v2487;
                                                    v2463 -= 8;
                                                    ++*(_QWORD *)&v2487;
                                                  }
                                                  while (v2463 >= v2453);
                                                }
                                              }
                                            }
                                            v2489 = (((v2443 << 7) - 128) >> 8) + 1;
                                            v2490 = (int8x8_t)(*(_QWORD *)&v2444 - (v2489 << 56));
                                            if (*(_QWORD *)&v2444 >= (unint64_t)(v2489 << 56))
                                            {
                                              LODWORD(v2489) = *(_DWORD *)(v1 + 10668) - v2489;
                                              v4480 = 16;
                                              v2444 = v2490;
                                            }
                                            else
                                            {
                                              v4480 = 0;
                                            }
                                            v2491 = vp8_norm[v2489];
                                            v2492 = (_DWORD)v2489 << v2491;
                                            v2493 = (int8x8_t)(*(_QWORD *)&v2444 << v2491);
                                            *(int8x8_t *)(v1 + 10656) = v2493;
                                            v2494 = v2445 - v2491;
                                            *(_DWORD *)(v1 + 10664) = v2445 - v2491;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v2489 << v2491;
                                            if (((v2445 - v2491) & 0x80000000) != 0)
                                            {
                                              v2495 = *(uint8x8_t **)(v1 + 10648);
                                              v2496 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2495;
                                              v2497 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                              if (v2497)
                                              {
                                                if (v2496 >= 9)
                                                  v2498 = 9;
                                                else
                                                  v2498 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2495;
                                                v2497(*(_QWORD *)(v1 + 10680), v2495, &v4539, v2498);
                                                v2283.i64[0] = 0x3F0000003FLL;
                                                v2283.i64[1] = 0x3F0000003FLL;
                                                v2282.i64[0] = 0x800000008;
                                                v2282.i64[1] = 0x800000008;
                                                v2495 = (uint8x8_t *)&v4539;
                                              }
                                              v2499 = 48 - v2494;
                                              v2500 = 56 - 8 * v2496 - v2494;
                                              if (v2500 >= 0)
                                                v2494 += 0x40000000;
                                              v2501 = 8 * v2496 || v2500 <= -1;
                                              v2502 = v2500 & ~(v2500 >> 31);
                                              if (v2501 && v2499 >= v2502)
                                              {
                                                v2504 = *v2279;
                                                v2505 = v2491 - v2445 + 40;
                                                if (v2505 >= v2502 - 1)
                                                  v2506 = v2502 - 1;
                                                else
                                                  v2506 = v2491 - v2445 + 40;
                                                v2507 = v2491 - v2445 - v2506 + 47;
                                                if (v2507 < 0x78)
                                                  goto LABEL_1764;
                                                if (v2505 >= v2502 - 1)
                                                  v2505 = v2502 - 1;
                                                if (v2279 < (uint8x8_t *)&v2495->i8[((v2491 - v2445 - v2505 + 47) >> 3)
                                                                                   + 1]
                                                  && (unint64_t)v2495 < v2280)
                                                {
LABEL_1764:
                                                  v2510 = *v2279;
                                                  v2511 = v2495;
                                                  v2512 = v2499;
                                                  goto LABEL_1765;
                                                }
                                                v2509 = (v2507 >> 3) + 1;
                                                v2510 = (uint8x8_t)(*(_QWORD *)&v2504 + (v2509 & 0x3FFFFFF8));
                                                v2511 = (uint8x8_t *)((char *)v2495 + (v2509 & 0x3FFFFFF8));
                                                v2512 = v2499 - 8 * (v2509 & 0x3FFFFFF8);
                                                v2513 = vdupq_n_s32(v2499);
                                                v2514 = vaddq_s32(v2513, (int32x4_t)xmmword_208F3A6A0);
                                                v2515 = vaddq_s32(v2513, (int32x4_t)xmmword_208F3A6B0);
                                                v2516 = 0uLL;
                                                v2517 = (int32x4_t)v2494;
                                                v2518 = (int8x16_t)(unint64_t)v2493;
                                                v2519 = v2509 & 0x3FFFFFF8;
                                                v2520 = 0uLL;
                                                v2521 = 0uLL;
                                                v2522 = 0uLL;
                                                do
                                                {
                                                  v2517 = vaddq_s32(v2517, v2282);
                                                  v2523 = *v2495++;
                                                  v2516 = vaddq_s32(v2516, v2282);
                                                  v2524 = vmovl_u8(v2523);
                                                  v2525 = vmovl_high_u16(v2524);
                                                  v2526.i64[0] = v2525.u32[2];
                                                  v2526.i64[1] = v2525.u32[3];
                                                  v2527 = v2526;
                                                  v2526.i64[0] = v2525.u32[0];
                                                  v2526.i64[1] = v2525.u32[1];
                                                  v2528 = v2526;
                                                  v2529 = vmovl_u16(*(uint16x4_t *)v2524.i8);
                                                  v2526.i64[0] = v2529.u32[2];
                                                  v2526.i64[1] = v2529.u32[3];
                                                  v2530 = v2526;
                                                  v2526.i64[0] = v2529.u32[0];
                                                  v2526.i64[1] = v2529.u32[1];
                                                  v2531 = v2526;
                                                  v2526.i64[0] = v2514.u32[2];
                                                  v2526.i64[1] = v2514.u32[3];
                                                  v2532 = v2526;
                                                  v2526.i64[0] = v2514.u32[0];
                                                  v2526.i64[1] = v2514.u32[1];
                                                  v2533 = v2526;
                                                  v2526.i64[0] = v2515.u32[2];
                                                  v2526.i64[1] = v2515.u32[3];
                                                  v2534 = v2526;
                                                  v2526.i64[0] = v2515.u32[0];
                                                  v2526.i64[1] = v2515.u32[1];
                                                  v2522 = vorrq_s8((int8x16_t)vshlq_u64(v2527, v2532), v2522);
                                                  v2521 = vorrq_s8((int8x16_t)vshlq_u64(v2528, v2533), v2521);
                                                  v2520 = vorrq_s8((int8x16_t)vshlq_u64(v2530, v2534), v2520);
                                                  v2518 = vorrq_s8((int8x16_t)vshlq_u64(v2531, v2526), v2518);
                                                  *(_QWORD *)&v2504 += 8;
                                                  v2515 = vaddq_s32(v2515, v2283);
                                                  v2514 = vaddq_s32(v2514, v2283);
                                                  v2519 -= 8;
                                                }
                                                while (v2519);
                                                *v2279 = v2504;
                                                v2535 = vorrq_s8(vorrq_s8(v2518, v2521), vorrq_s8(v2520, v2522));
                                                v2493 = vorr_s8(*(int8x8_t *)v2535.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2535, v2535, 8uLL));
                                                v2494 = vaddvq_s32(vaddq_s32(v2517, v2516));
                                                if ((v2509 & 0x3FFFFFF8) != v2509)
                                                {
LABEL_1765:
                                                  v2536 = (uint8x8_t)(*(_QWORD *)&v2510 + 1);
                                                  do
                                                  {
                                                    v2494 += 8;
                                                    v2537 = v2511->u8[0];
                                                    v2511 = (uint8x8_t *)((char *)v2511 + 1);
                                                    *(_QWORD *)&v2493 |= (unint64_t)v2537 << v2512;
                                                    *v2279 = v2536;
                                                    v2512 -= 8;
                                                    ++*(_QWORD *)&v2536;
                                                  }
                                                  while (v2512 >= v2502);
                                                }
                                              }
                                            }
                                            v2538 = (((v2492 << 7) - 128) >> 8) + 1;
                                            v2539 = (int8x8_t)(*(_QWORD *)&v2493 - (v2538 << 56));
                                            if (*(_QWORD *)&v2493 >= (unint64_t)(v2538 << 56))
                                            {
                                              LODWORD(v2538) = *(_DWORD *)(v1 + 10668) - v2538;
                                              v2540 = 8;
                                              v2493 = v2539;
                                            }
                                            else
                                            {
                                              v2540 = 0;
                                            }
                                            v2541 = vp8_norm[v2538];
                                            v2542 = (_DWORD)v2538 << v2541;
                                            v2543 = (int8x8_t)(*(_QWORD *)&v2493 << v2541);
                                            *(int8x8_t *)(v1 + 10656) = v2543;
                                            v2544 = v2494 - v2541;
                                            *(_DWORD *)(v1 + 10664) = v2494 - v2541;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v2538 << v2541;
                                            if (((v2494 - v2541) & 0x80000000) != 0)
                                            {
                                              v2545 = v2540;
                                              v2546 = *(uint8x8_t **)(v1 + 10648);
                                              v2547 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2546;
                                              v2548 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                              if (v2548)
                                              {
                                                if (v2547 >= 9)
                                                  v2549 = 9;
                                                else
                                                  v2549 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2546;
                                                v2548(*(_QWORD *)(v1 + 10680), v2546, &v4539, v2549);
                                                v2283.i64[0] = 0x3F0000003FLL;
                                                v2283.i64[1] = 0x3F0000003FLL;
                                                v2282.i64[0] = 0x800000008;
                                                v2282.i64[1] = 0x800000008;
                                                v2546 = (uint8x8_t *)&v4539;
                                              }
                                              v2550 = 48 - v2544;
                                              v2551 = 56 - 8 * v2547 - v2544;
                                              if (v2551 >= 0)
                                                v2544 += 0x40000000;
                                              if (8 * v2547)
                                                v2552 = 1;
                                              else
                                                v2552 = v2551 <= -1;
                                              v2553 = v2551 & ~(v2551 >> 31);
                                              if (!v2552 || v2550 < v2553)
                                              {
                                                v2540 = v2545;
                                              }
                                              else
                                              {
                                                v2555 = *v2279;
                                                v2556 = v2541 - v2494 + 40;
                                                if (v2556 >= v2553 - 1)
                                                  v2557 = v2553 - 1;
                                                else
                                                  v2557 = v2541 - v2494 + 40;
                                                v2558 = v2541 - v2494 - v2557 + 47;
                                                v2540 = v2545;
                                                if (v2558 < 0x78)
                                                  goto LABEL_1802;
                                                if (v2556 >= v2553 - 1)
                                                  v2556 = v2553 - 1;
                                                if (v2279 < (uint8x8_t *)&v2546->i8[((v2541 - v2494 - v2556 + 47) >> 3)
                                                                                   + 1]
                                                  && (unint64_t)v2546 < v2280)
                                                {
LABEL_1802:
                                                  v2561 = *v2279;
                                                  v2562 = v2546;
                                                  v2563 = v2550;
                                                  goto LABEL_1803;
                                                }
                                                v2560 = (v2558 >> 3) + 1;
                                                v2561 = (uint8x8_t)(*(_QWORD *)&v2555 + (v2560 & 0x3FFFFFF8));
                                                v2562 = (uint8x8_t *)((char *)v2546 + (v2560 & 0x3FFFFFF8));
                                                v2563 = v2550 - 8 * (v2560 & 0x3FFFFFF8);
                                                v2564 = vdupq_n_s32(v2550);
                                                v2565 = vaddq_s32(v2564, (int32x4_t)xmmword_208F3A6A0);
                                                v2566 = vaddq_s32(v2564, (int32x4_t)xmmword_208F3A6B0);
                                                v2567 = 0uLL;
                                                v2568 = (int32x4_t)v2544;
                                                v2569 = (int8x16_t)(unint64_t)v2543;
                                                v2570 = v2560 & 0x3FFFFFF8;
                                                v2571 = 0uLL;
                                                v2572 = 0uLL;
                                                v2573 = 0uLL;
                                                do
                                                {
                                                  v2568 = vaddq_s32(v2568, v2282);
                                                  v2574 = *v2546++;
                                                  v2567 = vaddq_s32(v2567, v2282);
                                                  v2575 = vmovl_u8(v2574);
                                                  v2576 = vmovl_high_u16(v2575);
                                                  v2577.i64[0] = v2576.u32[2];
                                                  v2577.i64[1] = v2576.u32[3];
                                                  v2578 = v2577;
                                                  v2577.i64[0] = v2576.u32[0];
                                                  v2577.i64[1] = v2576.u32[1];
                                                  v2579 = v2577;
                                                  v2580 = vmovl_u16(*(uint16x4_t *)v2575.i8);
                                                  v2577.i64[0] = v2580.u32[2];
                                                  v2577.i64[1] = v2580.u32[3];
                                                  v2581 = v2577;
                                                  v2577.i64[0] = v2580.u32[0];
                                                  v2577.i64[1] = v2580.u32[1];
                                                  v2582 = v2577;
                                                  v2577.i64[0] = v2565.u32[2];
                                                  v2577.i64[1] = v2565.u32[3];
                                                  v2583 = v2577;
                                                  v2577.i64[0] = v2565.u32[0];
                                                  v2577.i64[1] = v2565.u32[1];
                                                  v2584 = v2577;
                                                  v2577.i64[0] = v2566.u32[2];
                                                  v2577.i64[1] = v2566.u32[3];
                                                  v2585 = v2577;
                                                  v2577.i64[0] = v2566.u32[0];
                                                  v2577.i64[1] = v2566.u32[1];
                                                  v2573 = vorrq_s8((int8x16_t)vshlq_u64(v2578, v2583), v2573);
                                                  v2572 = vorrq_s8((int8x16_t)vshlq_u64(v2579, v2584), v2572);
                                                  v2571 = vorrq_s8((int8x16_t)vshlq_u64(v2581, v2585), v2571);
                                                  v2569 = vorrq_s8((int8x16_t)vshlq_u64(v2582, v2577), v2569);
                                                  *(_QWORD *)&v2555 += 8;
                                                  v2566 = vaddq_s32(v2566, v2283);
                                                  v2565 = vaddq_s32(v2565, v2283);
                                                  v2570 -= 8;
                                                }
                                                while (v2570);
                                                *v2279 = v2555;
                                                v2586 = vorrq_s8(vorrq_s8(v2569, v2572), vorrq_s8(v2571, v2573));
                                                v2543 = vorr_s8(*(int8x8_t *)v2586.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2586, v2586, 8uLL));
                                                v2544 = vaddvq_s32(vaddq_s32(v2568, v2567));
                                                if ((v2560 & 0x3FFFFFF8) != v2560)
                                                {
LABEL_1803:
                                                  v2587 = (uint8x8_t)(*(_QWORD *)&v2561 + 1);
                                                  do
                                                  {
                                                    v2544 += 8;
                                                    v2588 = v2562->u8[0];
                                                    v2562 = (uint8x8_t *)((char *)v2562 + 1);
                                                    *(_QWORD *)&v2543 |= (unint64_t)v2588 << v2563;
                                                    *v2279 = v2587;
                                                    v2563 -= 8;
                                                    ++*(_QWORD *)&v2587;
                                                  }
                                                  while (v2563 >= v2553);
                                                }
                                              }
                                            }
                                            v2589 = (((v2542 << 7) - 128) >> 8) + 1;
                                            v2590 = (int8x8_t)(*(_QWORD *)&v2543 - (v2589 << 56));
                                            if (*(_QWORD *)&v2543 >= (unint64_t)(v2589 << 56))
                                            {
                                              LODWORD(v2589) = *(_DWORD *)(v1 + 10668) - v2589;
                                              v2591 = 4;
                                              v2543 = v2590;
                                            }
                                            else
                                            {
                                              v2591 = 0;
                                            }
                                            v2592 = vp8_norm[v2589];
                                            v2593 = (_DWORD)v2589 << v2592;
                                            v2594 = (int8x8_t)(*(_QWORD *)&v2543 << v2592);
                                            *(int8x8_t *)(v1 + 10656) = v2594;
                                            v2595 = v2544 - v2592;
                                            *(_DWORD *)(v1 + 10664) = v2544 - v2592;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v2589 << v2592;
                                            if (((v2544 - v2592) & 0x80000000) != 0)
                                            {
                                              v4469 = v2591;
                                              v2596 = v2540;
                                              v2597 = *(uint8x8_t **)(v1 + 10648);
                                              v2598 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2597;
                                              v2599 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                              if (v2599)
                                              {
                                                if (v2598 >= 9)
                                                  v2600 = 9;
                                                else
                                                  v2600 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2597;
                                                v2599(*(_QWORD *)(v1 + 10680), v2597, &v4539, v2600);
                                                v2283.i64[0] = 0x3F0000003FLL;
                                                v2283.i64[1] = 0x3F0000003FLL;
                                                v2282.i64[0] = 0x800000008;
                                                v2282.i64[1] = 0x800000008;
                                                v2597 = (uint8x8_t *)&v4539;
                                              }
                                              v2601 = 48 - v2595;
                                              v2602 = 56 - 8 * v2598 - v2595;
                                              if (v2602 >= 0)
                                                v2595 += 0x40000000;
                                              if (8 * v2598)
                                                v2603 = 1;
                                              else
                                                v2603 = v2602 <= -1;
                                              v2604 = v2602 & ~(v2602 >> 31);
                                              if (!v2603 || v2601 < v2604)
                                              {
                                                v2540 = v2596;
                                                v2591 = v4469;
                                              }
                                              else
                                              {
                                                v2606 = *v2279;
                                                v2607 = v2592 - v2544 + 40;
                                                if (v2607 >= v2604 - 1)
                                                  v2608 = v2604 - 1;
                                                else
                                                  v2608 = v2592 - v2544 + 40;
                                                v2609 = v2592 - v2544 - v2608 + 47;
                                                v2540 = v2596;
                                                if (v2609 < 0x78)
                                                  goto LABEL_1840;
                                                if (v2607 >= v2604 - 1)
                                                  v2607 = v2604 - 1;
                                                if (v2279 < (uint8x8_t *)&v2597->i8[((v2592 - v2544 - v2607 + 47) >> 3)
                                                                                   + 1]
                                                  && (unint64_t)v2597 < v2280)
                                                {
LABEL_1840:
                                                  v2612 = *v2279;
                                                  v2613 = v2597;
                                                  v2614 = v2601;
                                                  v2591 = v4469;
                                                  goto LABEL_1841;
                                                }
                                                v2611 = (v2609 >> 3) + 1;
                                                v2612 = (uint8x8_t)(*(_QWORD *)&v2606 + (v2611 & 0x3FFFFFF8));
                                                v2613 = (uint8x8_t *)((char *)v2597 + (v2611 & 0x3FFFFFF8));
                                                v2614 = v2601 - 8 * (v2611 & 0x3FFFFFF8);
                                                v2615 = vdupq_n_s32(v2601);
                                                v2616 = vaddq_s32(v2615, (int32x4_t)xmmword_208F3A6A0);
                                                v2617 = vaddq_s32(v2615, (int32x4_t)xmmword_208F3A6B0);
                                                v2618 = 0uLL;
                                                v2619 = (int32x4_t)v2595;
                                                v2620 = (int8x16_t)(unint64_t)v2594;
                                                v2621 = v2611 & 0x3FFFFFF8;
                                                v2622 = 0uLL;
                                                v2623 = 0uLL;
                                                v2624 = 0uLL;
                                                v2591 = v4469;
                                                do
                                                {
                                                  v2619 = vaddq_s32(v2619, v2282);
                                                  v2625 = *v2597++;
                                                  v2618 = vaddq_s32(v2618, v2282);
                                                  v2626 = vmovl_u8(v2625);
                                                  v2627 = vmovl_high_u16(v2626);
                                                  v2628.i64[0] = v2627.u32[2];
                                                  v2628.i64[1] = v2627.u32[3];
                                                  v2629 = v2628;
                                                  v2628.i64[0] = v2627.u32[0];
                                                  v2628.i64[1] = v2627.u32[1];
                                                  v2630 = v2628;
                                                  v2631 = vmovl_u16(*(uint16x4_t *)v2626.i8);
                                                  v2628.i64[0] = v2631.u32[2];
                                                  v2628.i64[1] = v2631.u32[3];
                                                  v2632 = v2628;
                                                  v2628.i64[0] = v2631.u32[0];
                                                  v2628.i64[1] = v2631.u32[1];
                                                  v2633 = v2628;
                                                  v2628.i64[0] = v2616.u32[2];
                                                  v2628.i64[1] = v2616.u32[3];
                                                  v2634 = v2628;
                                                  v2628.i64[0] = v2616.u32[0];
                                                  v2628.i64[1] = v2616.u32[1];
                                                  v2635 = v2628;
                                                  v2628.i64[0] = v2617.u32[2];
                                                  v2628.i64[1] = v2617.u32[3];
                                                  v2636 = v2628;
                                                  v2628.i64[0] = v2617.u32[0];
                                                  v2628.i64[1] = v2617.u32[1];
                                                  v2624 = vorrq_s8((int8x16_t)vshlq_u64(v2629, v2634), v2624);
                                                  v2623 = vorrq_s8((int8x16_t)vshlq_u64(v2630, v2635), v2623);
                                                  v2622 = vorrq_s8((int8x16_t)vshlq_u64(v2632, v2636), v2622);
                                                  v2620 = vorrq_s8((int8x16_t)vshlq_u64(v2633, v2628), v2620);
                                                  *(_QWORD *)&v2606 += 8;
                                                  v2617 = vaddq_s32(v2617, v2283);
                                                  v2616 = vaddq_s32(v2616, v2283);
                                                  v2621 -= 8;
                                                }
                                                while (v2621);
                                                *v2279 = v2606;
                                                v2637 = vorrq_s8(vorrq_s8(v2620, v2623), vorrq_s8(v2622, v2624));
                                                v2594 = vorr_s8(*(int8x8_t *)v2637.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2637, v2637, 8uLL));
                                                v2595 = vaddvq_s32(vaddq_s32(v2619, v2618));
                                                if ((v2611 & 0x3FFFFFF8) != v2611)
                                                {
LABEL_1841:
                                                  v2638 = (uint8x8_t)(*(_QWORD *)&v2612 + 1);
                                                  do
                                                  {
                                                    v2595 += 8;
                                                    v2639 = v2613->u8[0];
                                                    v2613 = (uint8x8_t *)((char *)v2613 + 1);
                                                    *(_QWORD *)&v2594 |= (unint64_t)v2639 << v2614;
                                                    *v2279 = v2638;
                                                    v2614 -= 8;
                                                    ++*(_QWORD *)&v2638;
                                                  }
                                                  while (v2614 >= v2604);
                                                }
                                              }
                                            }
                                            v2640 = (((v2593 << 7) - 128) >> 8) + 1;
                                            v2641 = (int8x8_t)(*(_QWORD *)&v2594 - (v2640 << 56));
                                            if (*(_QWORD *)&v2594 >= (unint64_t)(v2640 << 56))
                                            {
                                              LODWORD(v2640) = *(_DWORD *)(v1 + 10668) - v2640;
                                              v2642 = 2;
                                              v2594 = v2641;
                                            }
                                            else
                                            {
                                              v2642 = 0;
                                            }
                                            v2643 = vp8_norm[v2640];
                                            v2644 = (_DWORD)v2640 << v2643;
                                            v2288 = (int8x8_t)(*(_QWORD *)&v2594 << v2643);
                                            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2594 << v2643;
                                            v2645 = v2595 - v2643;
                                            *(_DWORD *)(v1 + 10664) = v2595 - v2643;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v2640 << v2643;
                                            if (((v2595 - v2643) & 0x80000000) != 0)
                                            {
                                              v4470 = v2642;
                                              v2648 = *(uint8x8_t **)(v1 + 10648);
                                              v2649 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2648;
                                              v2650 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                              if (v2650)
                                              {
                                                if (v2649 >= 9)
                                                  v2651 = 9;
                                                else
                                                  v2651 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2648;
                                                v2652 = v2591;
                                                v2653 = v2540;
                                                v2650(*(_QWORD *)(v1 + 10680), v2648, &v4539, v2651);
                                                v2540 = v2653;
                                                v2591 = v2652;
                                                v2283.i64[0] = 0x3F0000003FLL;
                                                v2283.i64[1] = 0x3F0000003FLL;
                                                v2282.i64[0] = 0x800000008;
                                                v2282.i64[1] = 0x800000008;
                                                v2648 = (uint8x8_t *)&v4539;
                                              }
                                              v2654 = 48 - v2645;
                                              v2655 = 56 - 8 * v2649 - v2645;
                                              if (v2655 >= 0)
                                                v2645 += 0x40000000;
                                              if (8 * v2649)
                                                v2656 = 1;
                                              else
                                                v2656 = v2655 <= -1;
                                              v2657 = v2655 & ~(v2655 >> 31);
                                              if (!v2656 || v2654 < v2657)
                                              {
                                                v2280 = v1 + 10656;
                                                v2646 = v4496;
                                                v2647 = v4485;
                                                result = v4480;
                                                v2642 = v4470;
                                              }
                                              else
                                              {
                                                v2659 = *v2279;
                                                v2660 = v2643 - v2595 + 40;
                                                if (v2660 >= v2657 - 1)
                                                  v2661 = v2657 - 1;
                                                else
                                                  v2661 = v2643 - v2595 + 40;
                                                v2662 = v2643 - v2595 - v2661 + 47;
                                                v2280 = v1 + 10656;
                                                v2642 = v4470;
                                                if (v2662 >= 0x78)
                                                {
                                                  if (v2660 >= v2657 - 1)
                                                    v2660 = v2657 - 1;
                                                  v2666 = v2279 >= (uint8x8_t *)&v2648->i8[((v2643 - v2595 - v2660 + 47) >> 3)
                                                                                         + 1]
                                                       || (unint64_t)v2648 >= v1 + 10656;
                                                  v2646 = v4496;
                                                  v2647 = v4485;
                                                  result = v4480;
                                                  if (v2666)
                                                  {
                                                    v2667 = (v2662 >> 3) + 1;
                                                    v2663 = (uint8x8_t)(*(_QWORD *)&v2659 + (v2667 & 0x3FFFFFF8));
                                                    v2664 = (uint8x8_t *)((char *)v2648 + (v2667 & 0x3FFFFFF8));
                                                    v2665 = v2654 - 8 * (v2667 & 0x3FFFFFF8);
                                                    v2668 = vdupq_n_s32(v2654);
                                                    v2669 = vaddq_s32(v2668, (int32x4_t)xmmword_208F3A6A0);
                                                    v2670 = vaddq_s32(v2668, (int32x4_t)xmmword_208F3A6B0);
                                                    v2671 = 0uLL;
                                                    v2672 = (int32x4_t)v2645;
                                                    v2673 = (int8x16_t)(unint64_t)v2288;
                                                    v2674 = v2667 & 0x3FFFFFF8;
                                                    v2675 = 0uLL;
                                                    v2676 = 0uLL;
                                                    v2677 = 0uLL;
                                                    do
                                                    {
                                                      v2672 = vaddq_s32(v2672, v2282);
                                                      v2678 = *v2648++;
                                                      v2671 = vaddq_s32(v2671, v2282);
                                                      v2679 = vmovl_u8(v2678);
                                                      v2680 = vmovl_high_u16(v2679);
                                                      v2681.i64[0] = v2680.u32[2];
                                                      v2681.i64[1] = v2680.u32[3];
                                                      v2682 = v2681;
                                                      v2681.i64[0] = v2680.u32[0];
                                                      v2681.i64[1] = v2680.u32[1];
                                                      v2683 = v2681;
                                                      v2684 = vmovl_u16(*(uint16x4_t *)v2679.i8);
                                                      v2681.i64[0] = v2684.u32[2];
                                                      v2681.i64[1] = v2684.u32[3];
                                                      v2685 = v2681;
                                                      v2681.i64[0] = v2684.u32[0];
                                                      v2681.i64[1] = v2684.u32[1];
                                                      v2686 = v2681;
                                                      v2681.i64[0] = v2669.u32[2];
                                                      v2681.i64[1] = v2669.u32[3];
                                                      v2687 = v2681;
                                                      v2681.i64[0] = v2669.u32[0];
                                                      v2681.i64[1] = v2669.u32[1];
                                                      v2688 = v2681;
                                                      v2681.i64[0] = v2670.u32[2];
                                                      v2681.i64[1] = v2670.u32[3];
                                                      v2689 = v2681;
                                                      v2681.i64[0] = v2670.u32[0];
                                                      v2681.i64[1] = v2670.u32[1];
                                                      v2677 = vorrq_s8((int8x16_t)vshlq_u64(v2682, v2687), v2677);
                                                      v2676 = vorrq_s8((int8x16_t)vshlq_u64(v2683, v2688), v2676);
                                                      v2675 = vorrq_s8((int8x16_t)vshlq_u64(v2685, v2689), v2675);
                                                      v2673 = vorrq_s8((int8x16_t)vshlq_u64(v2686, v2681), v2673);
                                                      *(_QWORD *)&v2659 += 8;
                                                      v2670 = vaddq_s32(v2670, v2283);
                                                      v2669 = vaddq_s32(v2669, v2283);
                                                      v2674 -= 8;
                                                    }
                                                    while (v2674);
                                                    *v2279 = v2659;
                                                    v2690 = vorrq_s8(vorrq_s8(v2673, v2676), vorrq_s8(v2675, v2677));
                                                    v2288 = vorr_s8(*(int8x8_t *)v2690.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2690, v2690, 8uLL));
                                                    v2645 = vaddvq_s32(vaddq_s32(v2672, v2671));
                                                    if ((v2667 & 0x3FFFFFF8) == v2667)
                                                      goto LABEL_1881;
                                                  }
                                                  else
                                                  {
                                                    v2663 = *v2279;
                                                    v2664 = v2648;
                                                    v2665 = v2654;
                                                  }
                                                }
                                                else
                                                {
                                                  v2663 = *v2279;
                                                  v2664 = v2648;
                                                  v2665 = v2654;
                                                  v2646 = v4496;
                                                  v2647 = v4485;
                                                  result = v4480;
                                                }
                                                v2691 = (uint8x8_t)(*(_QWORD *)&v2663 + 1);
                                                do
                                                {
                                                  v2645 += 8;
                                                  v2692 = v2664->u8[0];
                                                  v2664 = (uint8x8_t *)((char *)v2664 + 1);
                                                  *(_QWORD *)&v2288 |= (unint64_t)v2692 << v2665;
                                                  *v2279 = v2691;
                                                  v2665 -= 8;
                                                  ++*(_QWORD *)&v2691;
                                                }
                                                while (v2665 >= v2657);
                                              }
                                            }
                                            else
                                            {
                                              v2646 = v4496;
                                              v2647 = v4485;
                                              result = v4480;
                                            }
LABEL_1881:
                                            v2286 = (((v2644 << 7) - 128) >> 8) + 1;
                                            v2693 = (int8x8_t)(*(_QWORD *)&v2288 - (v2286 << 56));
                                            if (*(_QWORD *)&v2288 >= (unint64_t)(v2286 << 56))
                                            {
                                              LODWORD(v2286) = *(_DWORD *)(v1 + 10668) - v2286;
                                              v2287 = 1;
                                              v2288 = v2693;
                                            }
                                            else
                                            {
                                              v2287 = 0;
                                            }
                                            v2289 = vp8_norm[v2286];
                                            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2288 << v2289;
                                            *(_DWORD *)(v1 + 10664) = v2645 - v2289;
                                            *(_DWORD *)(v1 + 10668) = (_DWORD)v2286 << v2289;
                                            v2290 = v2647 | v2646 | result | v2540 | v2591 | v2642 | v2287;
                                            if (v2290)
                                              v2291 = 2 * v2290;
                                            else
                                              v2291 = 1;
                                            v4477[v4535] = v2291;
                                          }
                                          v2285 = v4515;
                                          if (++v4535 == 19)
                                          {
                                            v2281 = 0;
                                            v2278 = 1;
                                            if ((v4456 & 1) == 0)
                                              goto LABEL_1883;
                                            continue;
                                          }
                                          goto LABEL_1588;
                                        }
                                      }
LABEL_1273:
                                      LODWORD(v1865) = *(_DWORD *)(v1 + 10668) - v1865;
                                      v1867 = v1868;
                                      goto LABEL_1274;
                                    }
LABEL_1272:
                                    v1866 = v1865 << 56;
                                    v1867 = v1863;
                                    v1868 = (int8x8_t)(*(_QWORD *)&v1863 - (v1865 << 56));
                                    if (*(_QWORD *)&v1863 < (unint64_t)(v1865 << 56))
                                      goto LABEL_1274;
                                    goto LABEL_1273;
                                  }
                                }
                                v3978 = *(uint8x8_t **)(v1 + 10648);
                                v3979 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3978;
                                v3980 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                                if (v3980)
                                {
                                  if (v3979 >= 9)
                                    v3981 = 9;
                                  else
                                    v3981 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3978;
                                  v3980(*(_QWORD *)(v1 + 10680), v3978, &v4539, v3981);
                                  v3971.i64[0] = 0x3F0000003FLL;
                                  v3971.i64[1] = 0x3F0000003FLL;
                                  v3970.i64[0] = 0x800000008;
                                  v3970.i64[1] = 0x800000008;
                                  v3978 = (uint8x8_t *)&v4539;
                                }
                                v3982 = 48 - v1864;
                                v3983 = 56 - v1864 - 8 * v3979;
                                if (v3983 < 0)
                                  v3984 = v1864;
                                else
                                  v3984 = v1864 + 0x40000000;
                                if (8 * v3979)
                                  v3985 = 1;
                                else
                                  v3985 = v3983 <= -1;
                                v3986 = v3983 & ~(v3983 >> 31);
                                if (v3985 && v3982 >= v3986)
                                {
                                  v3988 = *v3969;
                                  v3989 = v3986 - 1;
                                  if (v3986 - 1 >= (int)(40 - v1864))
                                    v3990 = 40 - v1864;
                                  else
                                    v3990 = v3986 - 1;
                                  v3991 = 47 - v1864 - v3990;
                                  if (v3991 < 0x78)
                                    goto LABEL_2944;
                                  if (v3989 >= (int)(40 - v1864))
                                    v3989 = 40 - v1864;
                                  if (v3969 >= (uint8x8_t *)&v3978->i8[((47 - v1864 - v3989) >> 3) + 1]
                                    || (unint64_t)v3978 >= v4478)
                                  {
                                    v3993 = (v3991 >> 3) + 1;
                                    v3994 = (uint8x8_t)(*(_QWORD *)&v3988 + (v3993 & 0x3FFFFFF8));
                                    v3995 = (uint8x8_t *)((char *)v3978 + (v3993 & 0x3FFFFFF8));
                                    v3996 = v3982 - 8 * (v3993 & 0x3FFFFFF8);
                                    v3997 = vdupq_n_s32(v3982);
                                    v3998 = vaddq_s32(v3997, (int32x4_t)xmmword_208F3A6A0);
                                    v3999 = vaddq_s32(v3997, (int32x4_t)xmmword_208F3A6B0);
                                    v4000 = 0uLL;
                                    v4001 = (int32x4_t)v3984;
                                    v4002 = (int8x16_t)(unint64_t)v3977;
                                    v4003 = v3993 & 0x3FFFFFF8;
                                    v4004 = 0uLL;
                                    v4005 = 0uLL;
                                    v4006 = 0uLL;
                                    do
                                    {
                                      v4001 = vaddq_s32(v4001, v3970);
                                      v4007 = *v3978++;
                                      v4000 = vaddq_s32(v4000, v3970);
                                      v4008 = vmovl_u8(v4007);
                                      v4009 = vmovl_high_u16(v4008);
                                      v4010.i64[0] = v4009.u32[2];
                                      v4010.i64[1] = v4009.u32[3];
                                      v4011 = v4010;
                                      v4010.i64[0] = v4009.u32[0];
                                      v4010.i64[1] = v4009.u32[1];
                                      v4012 = v4010;
                                      v4013 = vmovl_u16(*(uint16x4_t *)v4008.i8);
                                      v4010.i64[0] = v4013.u32[2];
                                      v4010.i64[1] = v4013.u32[3];
                                      v4014 = v4010;
                                      v4010.i64[0] = v4013.u32[0];
                                      v4010.i64[1] = v4013.u32[1];
                                      v4015 = v4010;
                                      v4010.i64[0] = v3998.u32[2];
                                      v4010.i64[1] = v3998.u32[3];
                                      v4016 = v4010;
                                      v4010.i64[0] = v3998.u32[0];
                                      v4010.i64[1] = v3998.u32[1];
                                      v4017 = v4010;
                                      v4010.i64[0] = v3999.u32[2];
                                      v4010.i64[1] = v3999.u32[3];
                                      v4018 = v4010;
                                      v4010.i64[0] = v3999.u32[0];
                                      v4010.i64[1] = v3999.u32[1];
                                      v4006 = vorrq_s8((int8x16_t)vshlq_u64(v4011, v4016), v4006);
                                      v4005 = vorrq_s8((int8x16_t)vshlq_u64(v4012, v4017), v4005);
                                      v4004 = vorrq_s8((int8x16_t)vshlq_u64(v4014, v4018), v4004);
                                      v4002 = vorrq_s8((int8x16_t)vshlq_u64(v4015, v4010), v4002);
                                      *(_QWORD *)&v3988 += 8;
                                      v3999 = vaddq_s32(v3999, v3971);
                                      v3998 = vaddq_s32(v3998, v3971);
                                      v4003 -= 8;
                                    }
                                    while (v4003);
                                    *v3969 = v3988;
                                    v4019 = vorrq_s8(vorrq_s8(v4002, v4005), vorrq_s8(v4004, v4006));
                                    v3977 = vorr_s8(*(int8x8_t *)v4019.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4019, v4019, 8uLL));
                                    v3984 = vaddvq_s32(vaddq_s32(v4001, v4000));
                                    if ((v3993 & 0x3FFFFFF8) == v3993)
                                      goto LABEL_2947;
                                  }
                                  else
                                  {
LABEL_2944:
                                    v3994 = *v3969;
                                    v3995 = v3978;
                                    v3996 = 48 - v1864;
                                  }
                                  v4020 = (uint8x8_t)(*(_QWORD *)&v3994 + 1);
                                  do
                                  {
                                    v3984 += 8;
                                    v4021 = v3995->u8[0];
                                    v3995 = (uint8x8_t *)((char *)v3995 + 1);
                                    *(_QWORD *)&v3977 |= (unint64_t)v4021 << v3996;
                                    *v3969 = v4020;
                                    v3996 -= 8;
                                    ++*(_QWORD *)&v4020;
                                  }
                                  while (v3996 >= v3986);
                                }
LABEL_2947:
                                v1864 = v3984;
                                goto LABEL_2948;
                              }
LABEL_1234:
                              LODWORD(v1756) = *(_DWORD *)(v1 + 10668) - v1756;
                              v1759 = 1;
                              v1754 = v1758;
                              goto LABEL_1235;
                            }
                            v4533 = v1751;
                            v1760 = *(uint8x8_t **)(v1 + 10648);
                            v1761 = 48 - v1755;
                            v1762 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1760;
                            v1763 = 8 * v1762;
                            v1764 = 56 - 8 * v1762 - v1755;
                            v1765 = *(uint64_t (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                            if (v1765)
                            {
                              if (v1762 >= 9)
                                v1766 = 9;
                              else
                                v1766 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1760;
                              result = v1765(*(_QWORD *)(v1 + 10680), v1760, &v4539, v1766);
                              v1760 = (uint8x8_t *)&v4539;
                            }
                            if (v1764 >= 0)
                              v1755 += 0x40000000;
                            if (v1763)
                              v1767 = 1;
                            else
                              v1767 = v1764 <= -1;
                            v1768 = v1764 & ~(v1764 >> 31);
                            if (v1767 && v1761 >= v1768)
                            {
                              v1770 = (uint8x8_t *)(v1 + 10648);
                              v1771 = *(uint8x8_t *)(v1 + 10648);
                              v1772 = v1752 - v1698 + 40;
                              if (v1772 >= v1768 - 1)
                                v1773 = v1768 - 1;
                              else
                                v1773 = v1752 - v1698 + 40;
                              v1774 = v1752 - v1698 - v1773 + 47;
                              if (v1774 < 0x78)
                                goto LABEL_1230;
                              if (v1772 >= v1768 - 1)
                                v1772 = v1768 - 1;
                              if (v1770 < (uint8x8_t *)&v1760->i8[((v1752 - v1698 - v1772 + 47) >> 3) + 1]
                                && (unint64_t)v1760 < v1 + 10656)
                              {
LABEL_1230:
                                v1777 = *(_QWORD *)(v1 + 10648);
                                v1778 = v1760;
                                v1779 = v1761;
LABEL_1231:
                                v1805 = (uint8x8_t)(v1777 + 1);
                                do
                                {
                                  v1755 += 8;
                                  v1806 = v1778->u8[0];
                                  v1778 = (uint8x8_t *)((char *)v1778 + 1);
                                  *(_QWORD *)&v1754 |= (unint64_t)v1806 << v1779;
                                  *v1770 = v1805;
                                  v1779 -= 8;
                                  ++*(_QWORD *)&v1805;
                                }
                                while (v1779 >= v1768);
                                goto LABEL_1233;
                              }
                              v1776 = (v1774 >> 3) + 1;
                              v1777 = *(_QWORD *)&v1771 + (v1776 & 0x3FFFFFF8);
                              v1778 = (uint8x8_t *)((char *)v1760 + (v1776 & 0x3FFFFFF8));
                              v1779 = v1761 - 8 * (v1776 & 0x3FFFFFF8);
                              v1780 = vdupq_n_s32(v1761);
                              v1781 = vaddq_s32(v1780, (int32x4_t)xmmword_208F3A6A0);
                              v1782 = vaddq_s32(v1780, (int32x4_t)xmmword_208F3A6B0);
                              v1783 = 0uLL;
                              v1784 = (int32x4_t)v1755;
                              v1785 = (int8x16_t)(unint64_t)v1754;
                              v1786.i64[0] = 0x800000008;
                              v1786.i64[1] = 0x800000008;
                              v1787.i64[0] = 0x3F0000003FLL;
                              v1787.i64[1] = 0x3F0000003FLL;
                              v1788 = v1776 & 0x3FFFFFF8;
                              v1789 = 0uLL;
                              v1790 = 0uLL;
                              v1791 = 0uLL;
                              do
                              {
                                v1784 = vaddq_s32(v1784, v1786);
                                v1792 = *v1760++;
                                v1783 = vaddq_s32(v1783, v1786);
                                v1793 = vmovl_u8(v1792);
                                v1794 = vmovl_high_u16(v1793);
                                v1795.i64[0] = v1794.u32[2];
                                v1795.i64[1] = v1794.u32[3];
                                v1796 = v1795;
                                v1795.i64[0] = v1794.u32[0];
                                v1795.i64[1] = v1794.u32[1];
                                v1797 = v1795;
                                v1798 = vmovl_u16(*(uint16x4_t *)v1793.i8);
                                v1795.i64[0] = v1798.u32[2];
                                v1795.i64[1] = v1798.u32[3];
                                v1799 = v1795;
                                v1795.i64[0] = v1798.u32[0];
                                v1795.i64[1] = v1798.u32[1];
                                v1800 = v1795;
                                v1795.i64[0] = v1781.u32[2];
                                v1795.i64[1] = v1781.u32[3];
                                v1801 = v1795;
                                v1795.i64[0] = v1781.u32[0];
                                v1795.i64[1] = v1781.u32[1];
                                v1802 = v1795;
                                v1795.i64[0] = v1782.u32[2];
                                v1795.i64[1] = v1782.u32[3];
                                v1803 = v1795;
                                v1795.i64[0] = v1782.u32[0];
                                v1795.i64[1] = v1782.u32[1];
                                v1791 = vorrq_s8((int8x16_t)vshlq_u64(v1796, v1801), v1791);
                                v1790 = vorrq_s8((int8x16_t)vshlq_u64(v1797, v1802), v1790);
                                v1789 = vorrq_s8((int8x16_t)vshlq_u64(v1799, v1803), v1789);
                                v1785 = vorrq_s8((int8x16_t)vshlq_u64(v1800, v1795), v1785);
                                *(_QWORD *)&v1771 += 8;
                                v1782 = vaddq_s32(v1782, v1787);
                                v1781 = vaddq_s32(v1781, v1787);
                                v1788 -= 8;
                              }
                              while (v1788);
                              *v1770 = v1771;
                              v1804 = vorrq_s8(vorrq_s8(v1785, v1790), vorrq_s8(v1789, v1791));
                              v1754 = vorr_s8(*(int8x8_t *)v1804.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1804, v1804, 8uLL));
                              v1755 = vaddvq_s32(vaddq_s32(v1784, v1783));
                              if ((v1776 & 0x3FFFFFF8) != v1776)
                                goto LABEL_1231;
                            }
LABEL_1233:
                            v1757 = v4533 | v1702;
                            v1758 = (int8x8_t)(*(_QWORD *)&v1754 - (v1756 << 56));
                            if (*(_QWORD *)&v1754 < (unint64_t)(v1756 << 56))
                              goto LABEL_1200;
                            goto LABEL_1234;
                          }
                          v4513 = v1694;
                          v4532 = v1644;
                          v1703 = *(uint8x8_t **)(v1 + 10648);
                          v1704 = 48 - v1698;
                          v1705 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1703;
                          v1706 = 8 * v1705;
                          v1707 = 56 - 8 * v1705 - v1698;
                          v1708 = *(uint64_t (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                          if (v1708)
                          {
                            if (v1705 >= 9)
                              v1709 = 9;
                            else
                              v1709 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1703;
                            v1710 = v1636;
                            result = v1708(*(_QWORD *)(v1 + 10680), v1703, &v4539, v1709);
                            v1636 = v1710;
                            v1703 = (uint8x8_t *)&v4539;
                          }
                          if (v1707 >= 0)
                            v1698 += 0x40000000;
                          if (v1706)
                            v1711 = 1;
                          else
                            v1711 = v1707 <= -1;
                          v1712 = v1707 & ~(v1707 >> 31);
                          if (v1711 && v1704 >= v1712)
                          {
                            v1714 = (uint8x8_t *)(v1 + 10648);
                            v1715 = *(uint8x8_t *)(v1 + 10648);
                            v1716 = v1695 - v1640 + 40;
                            if (v1716 >= v1712 - 1)
                              v1717 = v1712 - 1;
                            else
                              v1717 = v1695 - v1640 + 40;
                            v1718 = v1695 - v1640 - v1717 + 47;
                            if (v1718 < 0x78)
                              goto LABEL_1193;
                            if (v1716 >= v1712 - 1)
                              v1716 = v1712 - 1;
                            if (v1714 < (uint8x8_t *)&v1703->i8[((v1695 - v1640 - v1716 + 47) >> 3) + 1]
                              && (unint64_t)v1703 < v1 + 10656)
                            {
LABEL_1193:
                              v1721 = *(_QWORD *)(v1 + 10648);
                              v1722 = v1703;
                              v1723 = v1704;
LABEL_1194:
                              v1749 = (uint8x8_t)(v1721 + 1);
                              do
                              {
                                v1698 += 8;
                                v1750 = v1722->u8[0];
                                v1722 = (uint8x8_t *)((char *)v1722 + 1);
                                *(_QWORD *)&v1697 |= (unint64_t)v1750 << v1723;
                                *v1714 = v1749;
                                v1723 -= 8;
                                ++*(_QWORD *)&v1749;
                              }
                              while (v1723 >= v1712);
                              goto LABEL_1196;
                            }
                            v1720 = (v1718 >> 3) + 1;
                            v1721 = *(_QWORD *)&v1715 + (v1720 & 0x3FFFFFF8);
                            v1722 = (uint8x8_t *)((char *)v1703 + (v1720 & 0x3FFFFFF8));
                            v1723 = v1704 - 8 * (v1720 & 0x3FFFFFF8);
                            v1724 = vdupq_n_s32(v1704);
                            v1725 = vaddq_s32(v1724, (int32x4_t)xmmword_208F3A6A0);
                            v1726 = vaddq_s32(v1724, (int32x4_t)xmmword_208F3A6B0);
                            v1727 = 0uLL;
                            v1728 = (int32x4_t)v1698;
                            v1729 = (int8x16_t)(unint64_t)v1697;
                            v1730.i64[0] = 0x800000008;
                            v1730.i64[1] = 0x800000008;
                            v1731.i64[0] = 0x3F0000003FLL;
                            v1731.i64[1] = 0x3F0000003FLL;
                            v1732 = v1720 & 0x3FFFFFF8;
                            v1733 = 0uLL;
                            v1734 = 0uLL;
                            v1735 = 0uLL;
                            do
                            {
                              v1728 = vaddq_s32(v1728, v1730);
                              v1736 = *v1703++;
                              v1727 = vaddq_s32(v1727, v1730);
                              v1737 = vmovl_u8(v1736);
                              v1738 = vmovl_high_u16(v1737);
                              v1739.i64[0] = v1738.u32[2];
                              v1739.i64[1] = v1738.u32[3];
                              v1740 = v1739;
                              v1739.i64[0] = v1738.u32[0];
                              v1739.i64[1] = v1738.u32[1];
                              v1741 = v1739;
                              v1742 = vmovl_u16(*(uint16x4_t *)v1737.i8);
                              v1739.i64[0] = v1742.u32[2];
                              v1739.i64[1] = v1742.u32[3];
                              v1743 = v1739;
                              v1739.i64[0] = v1742.u32[0];
                              v1739.i64[1] = v1742.u32[1];
                              v1744 = v1739;
                              v1739.i64[0] = v1725.u32[2];
                              v1739.i64[1] = v1725.u32[3];
                              v1745 = v1739;
                              v1739.i64[0] = v1725.u32[0];
                              v1739.i64[1] = v1725.u32[1];
                              v1746 = v1739;
                              v1739.i64[0] = v1726.u32[2];
                              v1739.i64[1] = v1726.u32[3];
                              v1747 = v1739;
                              v1739.i64[0] = v1726.u32[0];
                              v1739.i64[1] = v1726.u32[1];
                              v1735 = vorrq_s8((int8x16_t)vshlq_u64(v1740, v1745), v1735);
                              v1734 = vorrq_s8((int8x16_t)vshlq_u64(v1741, v1746), v1734);
                              v1733 = vorrq_s8((int8x16_t)vshlq_u64(v1743, v1747), v1733);
                              v1729 = vorrq_s8((int8x16_t)vshlq_u64(v1744, v1739), v1729);
                              *(_QWORD *)&v1715 += 8;
                              v1726 = vaddq_s32(v1726, v1731);
                              v1725 = vaddq_s32(v1725, v1731);
                              v1732 -= 8;
                            }
                            while (v1732);
                            *v1714 = v1715;
                            v1748 = vorrq_s8(vorrq_s8(v1729, v1734), vorrq_s8(v1733, v1735));
                            v1697 = vorr_s8(*(int8x8_t *)v1748.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1748, v1748, 8uLL));
                            v1698 = vaddvq_s32(vaddq_s32(v1728, v1727));
                            if ((v1720 & 0x3FFFFFF8) != v1720)
                              goto LABEL_1194;
                          }
LABEL_1196:
                          v1644 = v4532;
                          v1700 = v4513 | v1636;
                          v1701 = (int8x8_t)(*(_QWORD *)&v1697 - (v1699 << 56));
                          if (*(_QWORD *)&v1697 < (unint64_t)(v1699 << 56))
                            goto LABEL_1163;
                          goto LABEL_1197;
                        }
                        v4494 = v1641;
                        v4512 = v1637;
                        v4531 = v1636;
                        v1645 = *(uint8x8_t **)(v1 + 10648);
                        v1646 = 48 - v1640;
                        v1647 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1645;
                        v1648 = 8 * v1647;
                        v1649 = 56 - 8 * v1647 - v1640;
                        v1650 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                        if (v1650)
                        {
                          if (v1647 >= 9)
                            v1651 = 9;
                          else
                            v1651 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1645;
                          v1652 = result;
                          v1653 = v1527;
                          v1650(*(_QWORD *)(v1 + 10680), v1645, &v4539, v1651);
                          result = v1652;
                          v1527 = v1653;
                          v1645 = (uint8x8_t *)&v4539;
                        }
                        if (v1649 >= 0)
                          v1640 += 0x40000000;
                        if (v1648)
                          v1654 = 1;
                        else
                          v1654 = v1649 <= -1;
                        v1655 = v1649 & ~(v1649 >> 31);
                        if (!v1654 || v1646 < v1655)
                        {
                          v1636 = v4531;
                          v1641 = v4494;
                          goto LABEL_1159;
                        }
                        v1657 = (uint8x8_t *)(v1 + 10648);
                        v1658 = *(uint8x8_t *)(v1 + 10648);
                        v1659 = v1638 - v1585 + 40;
                        if (v1659 >= v1655 - 1)
                          v1660 = v1655 - 1;
                        else
                          v1660 = v1638 - v1585 + 40;
                        v1661 = v1638 - v1585 - v1660 + 47;
                        v1636 = v4531;
                        v1641 = v4494;
                        if (v1661 < 0x78)
                          goto LABEL_1156;
                        if (v1659 >= v1655 - 1)
                          v1659 = v1655 - 1;
                        if (v1657 >= (uint8x8_t *)&v1645->i8[((v1638 - v1585 - v1659 + 47) >> 3) + 1]
                          || (unint64_t)v1645 >= v1 + 10656)
                        {
                          v1663 = (v1661 >> 3) + 1;
                          v1664 = *(_QWORD *)&v1658 + (v1663 & 0x3FFFFFF8);
                          v1665 = (uint8x8_t *)((char *)v1645 + (v1663 & 0x3FFFFFF8));
                          v1666 = v1646 - 8 * (v1663 & 0x3FFFFFF8);
                          v1667 = vdupq_n_s32(v1646);
                          v1668 = vaddq_s32(v1667, (int32x4_t)xmmword_208F3A6A0);
                          v1669 = vaddq_s32(v1667, (int32x4_t)xmmword_208F3A6B0);
                          v1670 = 0uLL;
                          v1671 = (int32x4_t)v1640;
                          v1672 = (int8x16_t)(unint64_t)v1639;
                          v1673.i64[0] = 0x800000008;
                          v1673.i64[1] = 0x800000008;
                          v1674.i64[0] = 0x3F0000003FLL;
                          v1674.i64[1] = 0x3F0000003FLL;
                          v1675 = v1663 & 0x3FFFFFF8;
                          v1676 = 0uLL;
                          v1677 = 0uLL;
                          v1678 = 0uLL;
                          do
                          {
                            v1671 = vaddq_s32(v1671, v1673);
                            v1679 = *v1645++;
                            v1670 = vaddq_s32(v1670, v1673);
                            v1680 = vmovl_u8(v1679);
                            v1681 = vmovl_high_u16(v1680);
                            v1682.i64[0] = v1681.u32[2];
                            v1682.i64[1] = v1681.u32[3];
                            v1683 = v1682;
                            v1682.i64[0] = v1681.u32[0];
                            v1682.i64[1] = v1681.u32[1];
                            v1684 = v1682;
                            v1685 = vmovl_u16(*(uint16x4_t *)v1680.i8);
                            v1682.i64[0] = v1685.u32[2];
                            v1682.i64[1] = v1685.u32[3];
                            v1686 = v1682;
                            v1682.i64[0] = v1685.u32[0];
                            v1682.i64[1] = v1685.u32[1];
                            v1687 = v1682;
                            v1682.i64[0] = v1668.u32[2];
                            v1682.i64[1] = v1668.u32[3];
                            v1688 = v1682;
                            v1682.i64[0] = v1668.u32[0];
                            v1682.i64[1] = v1668.u32[1];
                            v1689 = v1682;
                            v1682.i64[0] = v1669.u32[2];
                            v1682.i64[1] = v1669.u32[3];
                            v1690 = v1682;
                            v1682.i64[0] = v1669.u32[0];
                            v1682.i64[1] = v1669.u32[1];
                            v1678 = vorrq_s8((int8x16_t)vshlq_u64(v1683, v1688), v1678);
                            v1677 = vorrq_s8((int8x16_t)vshlq_u64(v1684, v1689), v1677);
                            v1676 = vorrq_s8((int8x16_t)vshlq_u64(v1686, v1690), v1676);
                            v1672 = vorrq_s8((int8x16_t)vshlq_u64(v1687, v1682), v1672);
                            *(_QWORD *)&v1658 += 8;
                            v1669 = vaddq_s32(v1669, v1674);
                            v1668 = vaddq_s32(v1668, v1674);
                            v1675 -= 8;
                          }
                          while (v1675);
                          *v1657 = v1658;
                          v1691 = vorrq_s8(vorrq_s8(v1672, v1677), vorrq_s8(v1676, v1678));
                          v1639 = vorr_s8(*(int8x8_t *)v1691.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1691, v1691, 8uLL));
                          v1640 = vaddvq_s32(vaddq_s32(v1671, v1670));
                          if ((v1663 & 0x3FFFFFF8) == v1663)
                          {
LABEL_1159:
                            v1642 = v4512 | v1527;
                            v1643 = (int8x8_t)(*(_QWORD *)&v1639 - (v1641 << 56));
                            if (*(_QWORD *)&v1639 < (unint64_t)(v1641 << 56))
                              goto LABEL_1124;
                            goto LABEL_1160;
                          }
                        }
                        else
                        {
LABEL_1156:
                          v1664 = *(_QWORD *)(v1 + 10648);
                          v1665 = v1645;
                          v1666 = v1646;
                        }
                        v1692 = (uint8x8_t)(v1664 + 1);
                        do
                        {
                          v1640 += 8;
                          v1693 = v1665->u8[0];
                          v1665 = (uint8x8_t *)((char *)v1665 + 1);
                          *(_QWORD *)&v1639 |= (unint64_t)v1693 << v1666;
                          *v1657 = v1692;
                          v1666 -= 8;
                          ++*(_QWORD *)&v1692;
                        }
                        while (v1666 >= v1655);
                        goto LABEL_1159;
                      }
LABEL_938:
                      LODWORD(v1317) = *(_DWORD *)(v1 + 10668) - v1317;
                      v1320 = 1;
                      v1315 = v1319;
                      goto LABEL_939;
                    }
                    v4529 = v1312;
                    v1321 = *(uint8x8_t **)(v1 + 10648);
                    v1322 = 48 - v1316;
                    v1323 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1321;
                    v1324 = 8 * v1323;
                    v1325 = 56 - 8 * v1323 - v1316;
                    v1326 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                    if (v1326)
                    {
                      if (v1323 >= 9)
                        v1327 = 9;
                      else
                        v1327 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1321;
                      v1326(*(_QWORD *)(v1 + 10680), v1321, &v4539, v1327);
                      v1321 = (uint8x8_t *)&v4539;
                    }
                    if (v1325 >= 0)
                      v1316 += 0x40000000;
                    if (v1324)
                      v1328 = 1;
                    else
                      v1328 = v1325 <= -1;
                    v1329 = v1325 & ~(v1325 >> 31);
                    if (v1328 && v1322 >= v1329)
                    {
                      v1331 = (uint8x8_t *)(v1 + 10648);
                      v1332 = *(uint8x8_t *)(v1 + 10648);
                      v1333 = v1313 - v1259 + 40;
                      if (v1333 >= v1329 - 1)
                        v1334 = v1329 - 1;
                      else
                        v1334 = v1313 - v1259 + 40;
                      v1335 = v1313 - v1259 - v1334 + 47;
                      if (v1335 < 0x78)
                        goto LABEL_934;
                      if (v1333 >= v1329 - 1)
                        v1333 = v1329 - 1;
                      if (v1331 < (uint8x8_t *)&v1321->i8[((v1313 - v1259 - v1333 + 47) >> 3) + 1]
                        && (unint64_t)v1321 < v1 + 10656)
                      {
LABEL_934:
                        v1338 = *(_QWORD *)(v1 + 10648);
                        v1339 = v1321;
                        v1340 = v1322;
LABEL_935:
                        v1366 = (uint8x8_t)(v1338 + 1);
                        do
                        {
                          v1316 += 8;
                          v1367 = v1339->u8[0];
                          v1339 = (uint8x8_t *)((char *)v1339 + 1);
                          *(_QWORD *)&v1315 |= (unint64_t)v1367 << v1340;
                          *v1331 = v1366;
                          v1340 -= 8;
                          ++*(_QWORD *)&v1366;
                        }
                        while (v1340 >= v1329);
                        goto LABEL_937;
                      }
                      v1337 = (v1335 >> 3) + 1;
                      v1338 = *(_QWORD *)&v1332 + (v1337 & 0x3FFFFFF8);
                      v1339 = (uint8x8_t *)((char *)v1321 + (v1337 & 0x3FFFFFF8));
                      v1340 = v1322 - 8 * (v1337 & 0x3FFFFFF8);
                      v1341 = vdupq_n_s32(v1322);
                      v1342 = vaddq_s32(v1341, (int32x4_t)xmmword_208F3A6A0);
                      v1343 = vaddq_s32(v1341, (int32x4_t)xmmword_208F3A6B0);
                      v1344 = 0uLL;
                      v1345 = (int32x4_t)v1316;
                      v1346 = (int8x16_t)(unint64_t)v1315;
                      v1347.i64[0] = 0x800000008;
                      v1347.i64[1] = 0x800000008;
                      v1348.i64[0] = 0x3F0000003FLL;
                      v1348.i64[1] = 0x3F0000003FLL;
                      v1349 = v1337 & 0x3FFFFFF8;
                      v1350 = 0uLL;
                      v1351 = 0uLL;
                      v1352 = 0uLL;
                      do
                      {
                        v1345 = vaddq_s32(v1345, v1347);
                        v1353 = *v1321++;
                        v1344 = vaddq_s32(v1344, v1347);
                        v1354 = vmovl_u8(v1353);
                        v1355 = vmovl_high_u16(v1354);
                        v1356.i64[0] = v1355.u32[2];
                        v1356.i64[1] = v1355.u32[3];
                        v1357 = v1356;
                        v1356.i64[0] = v1355.u32[0];
                        v1356.i64[1] = v1355.u32[1];
                        v1358 = v1356;
                        v1359 = vmovl_u16(*(uint16x4_t *)v1354.i8);
                        v1356.i64[0] = v1359.u32[2];
                        v1356.i64[1] = v1359.u32[3];
                        v1360 = v1356;
                        v1356.i64[0] = v1359.u32[0];
                        v1356.i64[1] = v1359.u32[1];
                        v1361 = v1356;
                        v1356.i64[0] = v1342.u32[2];
                        v1356.i64[1] = v1342.u32[3];
                        v1362 = v1356;
                        v1356.i64[0] = v1342.u32[0];
                        v1356.i64[1] = v1342.u32[1];
                        v1363 = v1356;
                        v1356.i64[0] = v1343.u32[2];
                        v1356.i64[1] = v1343.u32[3];
                        v1364 = v1356;
                        v1356.i64[0] = v1343.u32[0];
                        v1356.i64[1] = v1343.u32[1];
                        v1352 = vorrq_s8((int8x16_t)vshlq_u64(v1357, v1362), v1352);
                        v1351 = vorrq_s8((int8x16_t)vshlq_u64(v1358, v1363), v1351);
                        v1350 = vorrq_s8((int8x16_t)vshlq_u64(v1360, v1364), v1350);
                        v1346 = vorrq_s8((int8x16_t)vshlq_u64(v1361, v1356), v1346);
                        *(_QWORD *)&v1332 += 8;
                        v1343 = vaddq_s32(v1343, v1348);
                        v1342 = vaddq_s32(v1342, v1348);
                        v1349 -= 8;
                      }
                      while (v1349);
                      *v1331 = v1332;
                      v1365 = vorrq_s8(vorrq_s8(v1346, v1351), vorrq_s8(v1350, v1352));
                      v1315 = vorr_s8(*(int8x8_t *)v1365.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1365, v1365, 8uLL));
                      v1316 = vaddvq_s32(vaddq_s32(v1345, v1344));
                      if ((v1337 & 0x3FFFFFF8) != v1337)
                        goto LABEL_935;
                    }
LABEL_937:
                    v1318 = v4529 | v1263;
                    v1319 = (int8x8_t)(*(_QWORD *)&v1315 - (v1317 << 56));
                    if (*(_QWORD *)&v1315 < (unint64_t)(v1317 << 56))
                      goto LABEL_904;
                    goto LABEL_938;
                  }
                  v4509 = v1255;
                  v4528 = v1205;
                  v1264 = *(uint8x8_t **)(v1 + 10648);
                  v1265 = 48 - v1259;
                  v1266 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1264;
                  v1267 = 8 * v1266;
                  v1268 = 56 - 8 * v1266 - v1259;
                  v1269 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                  if (v1269)
                  {
                    if (v1266 >= 9)
                      v1270 = 9;
                    else
                      v1270 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1264;
                    v1271 = v1197;
                    v1269(*(_QWORD *)(v1 + 10680), v1264, &v4539, v1270);
                    v1197 = v1271;
                    v1264 = (uint8x8_t *)&v4539;
                  }
                  if (v1268 >= 0)
                    v1259 += 0x40000000;
                  if (v1267)
                    v1272 = 1;
                  else
                    v1272 = v1268 <= -1;
                  v1273 = v1268 & ~(v1268 >> 31);
                  if (v1272 && v1265 >= v1273)
                  {
                    v1275 = (uint8x8_t *)(v1 + 10648);
                    v1276 = *(uint8x8_t *)(v1 + 10648);
                    v1277 = v1256 - v1201 + 40;
                    if (v1277 >= v1273 - 1)
                      v1278 = v1273 - 1;
                    else
                      v1278 = v1256 - v1201 + 40;
                    v1279 = v1256 - v1201 - v1278 + 47;
                    if (v1279 < 0x78)
                      goto LABEL_897;
                    if (v1277 >= v1273 - 1)
                      v1277 = v1273 - 1;
                    if (v1275 < (uint8x8_t *)&v1264->i8[((v1256 - v1201 - v1277 + 47) >> 3) + 1]
                      && (unint64_t)v1264 < v1 + 10656)
                    {
LABEL_897:
                      v1282 = *(_QWORD *)(v1 + 10648);
                      v1283 = v1264;
                      v1284 = v1265;
LABEL_898:
                      v1310 = (uint8x8_t)(v1282 + 1);
                      do
                      {
                        v1259 += 8;
                        v1311 = v1283->u8[0];
                        v1283 = (uint8x8_t *)((char *)v1283 + 1);
                        *(_QWORD *)&v1258 |= (unint64_t)v1311 << v1284;
                        *v1275 = v1310;
                        v1284 -= 8;
                        ++*(_QWORD *)&v1310;
                      }
                      while (v1284 >= v1273);
                      goto LABEL_900;
                    }
                    v1281 = (v1279 >> 3) + 1;
                    v1282 = *(_QWORD *)&v1276 + (v1281 & 0x3FFFFFF8);
                    v1283 = (uint8x8_t *)((char *)v1264 + (v1281 & 0x3FFFFFF8));
                    v1284 = v1265 - 8 * (v1281 & 0x3FFFFFF8);
                    v1285 = vdupq_n_s32(v1265);
                    v1286 = vaddq_s32(v1285, (int32x4_t)xmmword_208F3A6A0);
                    v1287 = vaddq_s32(v1285, (int32x4_t)xmmword_208F3A6B0);
                    v1288 = 0uLL;
                    v1289 = (int32x4_t)v1259;
                    v1290 = (int8x16_t)(unint64_t)v1258;
                    v1291.i64[0] = 0x800000008;
                    v1291.i64[1] = 0x800000008;
                    v1292.i64[0] = 0x3F0000003FLL;
                    v1292.i64[1] = 0x3F0000003FLL;
                    v1293 = v1281 & 0x3FFFFFF8;
                    v1294 = 0uLL;
                    v1295 = 0uLL;
                    v1296 = 0uLL;
                    do
                    {
                      v1289 = vaddq_s32(v1289, v1291);
                      v1297 = *v1264++;
                      v1288 = vaddq_s32(v1288, v1291);
                      v1298 = vmovl_u8(v1297);
                      v1299 = vmovl_high_u16(v1298);
                      v1300.i64[0] = v1299.u32[2];
                      v1300.i64[1] = v1299.u32[3];
                      v1301 = v1300;
                      v1300.i64[0] = v1299.u32[0];
                      v1300.i64[1] = v1299.u32[1];
                      v1302 = v1300;
                      v1303 = vmovl_u16(*(uint16x4_t *)v1298.i8);
                      v1300.i64[0] = v1303.u32[2];
                      v1300.i64[1] = v1303.u32[3];
                      v1304 = v1300;
                      v1300.i64[0] = v1303.u32[0];
                      v1300.i64[1] = v1303.u32[1];
                      v1305 = v1300;
                      v1300.i64[0] = v1286.u32[2];
                      v1300.i64[1] = v1286.u32[3];
                      v1306 = v1300;
                      v1300.i64[0] = v1286.u32[0];
                      v1300.i64[1] = v1286.u32[1];
                      v1307 = v1300;
                      v1300.i64[0] = v1287.u32[2];
                      v1300.i64[1] = v1287.u32[3];
                      v1308 = v1300;
                      v1300.i64[0] = v1287.u32[0];
                      v1300.i64[1] = v1287.u32[1];
                      v1296 = vorrq_s8((int8x16_t)vshlq_u64(v1301, v1306), v1296);
                      v1295 = vorrq_s8((int8x16_t)vshlq_u64(v1302, v1307), v1295);
                      v1294 = vorrq_s8((int8x16_t)vshlq_u64(v1304, v1308), v1294);
                      v1290 = vorrq_s8((int8x16_t)vshlq_u64(v1305, v1300), v1290);
                      *(_QWORD *)&v1276 += 8;
                      v1287 = vaddq_s32(v1287, v1292);
                      v1286 = vaddq_s32(v1286, v1292);
                      v1293 -= 8;
                    }
                    while (v1293);
                    *v1275 = v1276;
                    v1309 = vorrq_s8(vorrq_s8(v1290, v1295), vorrq_s8(v1294, v1296));
                    v1258 = vorr_s8(*(int8x8_t *)v1309.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1309, v1309, 8uLL));
                    v1259 = vaddvq_s32(vaddq_s32(v1289, v1288));
                    if ((v1281 & 0x3FFFFFF8) != v1281)
                      goto LABEL_898;
                  }
LABEL_900:
                  v1205 = v4528;
                  v1261 = v4509 | v1197;
                  v1262 = (int8x8_t)(*(_QWORD *)&v1258 - (v1260 << 56));
                  if (*(_QWORD *)&v1258 < (unint64_t)(v1260 << 56))
                    goto LABEL_867;
                  goto LABEL_901;
                }
                v4492 = v1202;
                v4508 = v1198;
                v4527 = v1197;
                v1206 = *(uint8x8_t **)(v1 + 10648);
                v1207 = 48 - v1201;
                v1208 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1206;
                v1209 = 8 * v1208;
                v1210 = 56 - 8 * v1208 - v1201;
                v1211 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                if (v1211)
                {
                  if (v1208 >= 9)
                    v1212 = 9;
                  else
                    v1212 = *(_QWORD *)(v1 + 10640) - (_QWORD)v1206;
                  v1213 = v1142;
                  v1214 = v1087;
                  v1211(*(_QWORD *)(v1 + 10680), v1206, &v4539, v1212);
                  v1142 = v1213;
                  v1087 = v1214;
                  v1206 = (uint8x8_t *)&v4539;
                }
                if (v1210 >= 0)
                  v1201 += 0x40000000;
                if (v1209)
                  v1215 = 1;
                else
                  v1215 = v1210 <= -1;
                v1216 = v1210 & ~(v1210 >> 31);
                if (!v1215 || v1207 < v1216)
                {
                  v1197 = v4527;
                  v1202 = v4492;
                  goto LABEL_863;
                }
                v1218 = (uint8x8_t *)(v1 + 10648);
                v1219 = *(uint8x8_t *)(v1 + 10648);
                v1220 = v1199 - v1146 + 40;
                if (v1220 >= v1216 - 1)
                  v1221 = v1216 - 1;
                else
                  v1221 = v1199 - v1146 + 40;
                v1222 = v1199 - v1146 - v1221 + 47;
                v1197 = v4527;
                v1202 = v4492;
                if (v1222 < 0x78)
                  goto LABEL_860;
                if (v1220 >= v1216 - 1)
                  v1220 = v1216 - 1;
                if (v1218 >= (uint8x8_t *)&v1206->i8[((v1199 - v1146 - v1220 + 47) >> 3) + 1]
                  || (unint64_t)v1206 >= v1 + 10656)
                {
                  v1224 = (v1222 >> 3) + 1;
                  v1225 = *(_QWORD *)&v1219 + (v1224 & 0x3FFFFFF8);
                  v1226 = (uint8x8_t *)((char *)v1206 + (v1224 & 0x3FFFFFF8));
                  v1227 = v1207 - 8 * (v1224 & 0x3FFFFFF8);
                  v1228 = vdupq_n_s32(v1207);
                  v1229 = vaddq_s32(v1228, (int32x4_t)xmmword_208F3A6A0);
                  v1230 = vaddq_s32(v1228, (int32x4_t)xmmword_208F3A6B0);
                  v1231 = 0uLL;
                  v1232 = (int32x4_t)v1201;
                  v1233 = (int8x16_t)(unint64_t)v1200;
                  v1234.i64[0] = 0x800000008;
                  v1234.i64[1] = 0x800000008;
                  v1235.i64[0] = 0x3F0000003FLL;
                  v1235.i64[1] = 0x3F0000003FLL;
                  v1236 = v1224 & 0x3FFFFFF8;
                  v1237 = 0uLL;
                  v1238 = 0uLL;
                  v1239 = 0uLL;
                  do
                  {
                    v1232 = vaddq_s32(v1232, v1234);
                    v1240 = *v1206++;
                    v1231 = vaddq_s32(v1231, v1234);
                    v1241 = vmovl_u8(v1240);
                    v1242 = vmovl_high_u16(v1241);
                    v1243.i64[0] = v1242.u32[2];
                    v1243.i64[1] = v1242.u32[3];
                    v1244 = v1243;
                    v1243.i64[0] = v1242.u32[0];
                    v1243.i64[1] = v1242.u32[1];
                    v1245 = v1243;
                    v1246 = vmovl_u16(*(uint16x4_t *)v1241.i8);
                    v1243.i64[0] = v1246.u32[2];
                    v1243.i64[1] = v1246.u32[3];
                    v1247 = v1243;
                    v1243.i64[0] = v1246.u32[0];
                    v1243.i64[1] = v1246.u32[1];
                    v1248 = v1243;
                    v1243.i64[0] = v1229.u32[2];
                    v1243.i64[1] = v1229.u32[3];
                    v1249 = v1243;
                    v1243.i64[0] = v1229.u32[0];
                    v1243.i64[1] = v1229.u32[1];
                    v1250 = v1243;
                    v1243.i64[0] = v1230.u32[2];
                    v1243.i64[1] = v1230.u32[3];
                    v1251 = v1243;
                    v1243.i64[0] = v1230.u32[0];
                    v1243.i64[1] = v1230.u32[1];
                    v1239 = vorrq_s8((int8x16_t)vshlq_u64(v1244, v1249), v1239);
                    v1238 = vorrq_s8((int8x16_t)vshlq_u64(v1245, v1250), v1238);
                    v1237 = vorrq_s8((int8x16_t)vshlq_u64(v1247, v1251), v1237);
                    v1233 = vorrq_s8((int8x16_t)vshlq_u64(v1248, v1243), v1233);
                    *(_QWORD *)&v1219 += 8;
                    v1230 = vaddq_s32(v1230, v1235);
                    v1229 = vaddq_s32(v1229, v1235);
                    v1236 -= 8;
                  }
                  while (v1236);
                  *v1218 = v1219;
                  v1252 = vorrq_s8(vorrq_s8(v1233, v1238), vorrq_s8(v1237, v1239));
                  v1200 = vorr_s8(*(int8x8_t *)v1252.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1252, v1252, 8uLL));
                  v1201 = vaddvq_s32(vaddq_s32(v1232, v1231));
                  if ((v1224 & 0x3FFFFFF8) == v1224)
                  {
LABEL_863:
                    v1203 = v4508 | v1087;
                    v1204 = (int8x8_t)(*(_QWORD *)&v1200 - (v1202 << 56));
                    if (*(_QWORD *)&v1200 < (unint64_t)(v1202 << 56))
                      goto LABEL_828;
                    goto LABEL_864;
                  }
                }
                else
                {
LABEL_860:
                  v1225 = *(_QWORD *)(v1 + 10648);
                  v1226 = v1206;
                  v1227 = v1207;
                }
                v1253 = (uint8x8_t)(v1225 + 1);
                do
                {
                  v1201 += 8;
                  v1254 = v1226->u8[0];
                  v1226 = (uint8x8_t *)((char *)v1226 + 1);
                  *(_QWORD *)&v1200 |= (unint64_t)v1254 << v1227;
                  *v1218 = v1253;
                  v1227 -= 8;
                  ++*(_QWORD *)&v1253;
                }
                while (v1227 >= v1216);
                goto LABEL_863;
              }
LABEL_642:
              LODWORD(v877) = *(_DWORD *)(v1 + 10668) - v877;
              v880 = 1;
              v875 = v879;
              goto LABEL_643;
            }
            v4525 = v872;
            v881 = *(uint8x8_t **)(v1 + 10648);
            v882 = 48 - v876;
            v883 = *(_QWORD *)(v1 + 10640) - (_QWORD)v881;
            v884 = 8 * v883;
            v885 = 56 - 8 * v883 - v876;
            v886 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
            if (v886)
            {
              if (v883 >= 9)
                v887 = 9;
              else
                v887 = *(_QWORD *)(v1 + 10640) - (_QWORD)v881;
              v886(*(_QWORD *)(v1 + 10680), v881, &v4539, v887);
              v881 = (uint8x8_t *)&v4539;
            }
            if (v885 >= 0)
              v876 += 0x40000000;
            if (v884)
              v888 = 1;
            else
              v888 = v885 <= -1;
            v889 = v885 & ~(v885 >> 31);
            if (v888 && v882 >= v889)
            {
              v891 = (uint8x8_t *)(v1 + 10648);
              v892 = *(uint8x8_t *)(v1 + 10648);
              v893 = v873 - v819 + 40;
              if (v893 >= v889 - 1)
                v894 = v889 - 1;
              else
                v894 = v873 - v819 + 40;
              v895 = v873 - v819 - v894 + 47;
              if (v895 < 0x78)
                goto LABEL_638;
              if (v893 >= v889 - 1)
                v893 = v889 - 1;
              if (v891 < (uint8x8_t *)&v881->i8[((v873 - v819 - v893 + 47) >> 3) + 1]
                && (unint64_t)v881 < v1 + 10656)
              {
LABEL_638:
                v898 = *(_QWORD *)(v1 + 10648);
                v899 = v881;
                v900 = v882;
LABEL_639:
                v926 = (uint8x8_t)(v898 + 1);
                do
                {
                  v876 += 8;
                  v927 = v899->u8[0];
                  v899 = (uint8x8_t *)((char *)v899 + 1);
                  *(_QWORD *)&v875 |= (unint64_t)v927 << v900;
                  *v891 = v926;
                  v900 -= 8;
                  ++*(_QWORD *)&v926;
                }
                while (v900 >= v889);
                goto LABEL_641;
              }
              v897 = (v895 >> 3) + 1;
              v898 = *(_QWORD *)&v892 + (v897 & 0x3FFFFFF8);
              v899 = (uint8x8_t *)((char *)v881 + (v897 & 0x3FFFFFF8));
              v900 = v882 - 8 * (v897 & 0x3FFFFFF8);
              v901 = vdupq_n_s32(v882);
              v902 = vaddq_s32(v901, (int32x4_t)xmmword_208F3A6A0);
              v903 = vaddq_s32(v901, (int32x4_t)xmmword_208F3A6B0);
              v904 = 0uLL;
              v905 = (int32x4_t)v876;
              v906 = (int8x16_t)(unint64_t)v875;
              v907.i64[0] = 0x800000008;
              v907.i64[1] = 0x800000008;
              v908.i64[0] = 0x3F0000003FLL;
              v908.i64[1] = 0x3F0000003FLL;
              v909 = v897 & 0x3FFFFFF8;
              v910 = 0uLL;
              v911 = 0uLL;
              v912 = 0uLL;
              do
              {
                v905 = vaddq_s32(v905, v907);
                v913 = *v881++;
                v904 = vaddq_s32(v904, v907);
                v914 = vmovl_u8(v913);
                v915 = vmovl_high_u16(v914);
                v916.i64[0] = v915.u32[2];
                v916.i64[1] = v915.u32[3];
                v917 = v916;
                v916.i64[0] = v915.u32[0];
                v916.i64[1] = v915.u32[1];
                v918 = v916;
                v919 = vmovl_u16(*(uint16x4_t *)v914.i8);
                v916.i64[0] = v919.u32[2];
                v916.i64[1] = v919.u32[3];
                v920 = v916;
                v916.i64[0] = v919.u32[0];
                v916.i64[1] = v919.u32[1];
                v921 = v916;
                v916.i64[0] = v902.u32[2];
                v916.i64[1] = v902.u32[3];
                v922 = v916;
                v916.i64[0] = v902.u32[0];
                v916.i64[1] = v902.u32[1];
                v923 = v916;
                v916.i64[0] = v903.u32[2];
                v916.i64[1] = v903.u32[3];
                v924 = v916;
                v916.i64[0] = v903.u32[0];
                v916.i64[1] = v903.u32[1];
                v912 = vorrq_s8((int8x16_t)vshlq_u64(v917, v922), v912);
                v911 = vorrq_s8((int8x16_t)vshlq_u64(v918, v923), v911);
                v910 = vorrq_s8((int8x16_t)vshlq_u64(v920, v924), v910);
                v906 = vorrq_s8((int8x16_t)vshlq_u64(v921, v916), v906);
                *(_QWORD *)&v892 += 8;
                v903 = vaddq_s32(v903, v908);
                v902 = vaddq_s32(v902, v908);
                v909 -= 8;
              }
              while (v909);
              *v891 = v892;
              v925 = vorrq_s8(vorrq_s8(v906, v911), vorrq_s8(v910, v912));
              v875 = vorr_s8(*(int8x8_t *)v925.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v925, v925, 8uLL));
              v876 = vaddvq_s32(vaddq_s32(v905, v904));
              if ((v897 & 0x3FFFFFF8) != v897)
                goto LABEL_639;
            }
LABEL_641:
            v878 = v4525 | v823;
            v879 = (int8x8_t)(*(_QWORD *)&v875 - (v877 << 56));
            if (*(_QWORD *)&v875 < (unint64_t)(v877 << 56))
              goto LABEL_608;
            goto LABEL_642;
          }
          v4505 = v815;
          v4524 = v765;
          v824 = *(uint8x8_t **)(v1 + 10648);
          v825 = 48 - v819;
          v826 = *(_QWORD *)(v1 + 10640) - (_QWORD)v824;
          v827 = 8 * v826;
          v828 = 56 - 8 * v826 - v819;
          v829 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v829)
          {
            if (v826 >= 9)
              v830 = 9;
            else
              v830 = *(_QWORD *)(v1 + 10640) - (_QWORD)v824;
            v831 = v757;
            v829(*(_QWORD *)(v1 + 10680), v824, &v4539, v830);
            v757 = v831;
            v824 = (uint8x8_t *)&v4539;
          }
          if (v828 >= 0)
            v819 += 0x40000000;
          if (v827)
            v832 = 1;
          else
            v832 = v828 <= -1;
          v833 = v828 & ~(v828 >> 31);
          if (v832 && v825 >= v833)
          {
            v835 = (uint8x8_t *)(v1 + 10648);
            v836 = *(uint8x8_t *)(v1 + 10648);
            v837 = v816 - v761 + 40;
            if (v837 >= v833 - 1)
              v838 = v833 - 1;
            else
              v838 = v816 - v761 + 40;
            v839 = v816 - v761 - v838 + 47;
            if (v839 < 0x78)
              goto LABEL_601;
            if (v837 >= v833 - 1)
              v837 = v833 - 1;
            if (v835 < (uint8x8_t *)&v824->i8[((v816 - v761 - v837 + 47) >> 3) + 1]
              && (unint64_t)v824 < v1 + 10656)
            {
LABEL_601:
              v842 = *(_QWORD *)(v1 + 10648);
              v843 = v824;
              v844 = v825;
LABEL_602:
              v870 = (uint8x8_t)(v842 + 1);
              do
              {
                v819 += 8;
                v871 = v843->u8[0];
                v843 = (uint8x8_t *)((char *)v843 + 1);
                *(_QWORD *)&v818 |= (unint64_t)v871 << v844;
                *v835 = v870;
                v844 -= 8;
                ++*(_QWORD *)&v870;
              }
              while (v844 >= v833);
              goto LABEL_604;
            }
            v841 = (v839 >> 3) + 1;
            v842 = *(_QWORD *)&v836 + (v841 & 0x3FFFFFF8);
            v843 = (uint8x8_t *)((char *)v824 + (v841 & 0x3FFFFFF8));
            v844 = v825 - 8 * (v841 & 0x3FFFFFF8);
            v845 = vdupq_n_s32(v825);
            v846 = vaddq_s32(v845, (int32x4_t)xmmword_208F3A6A0);
            v847 = vaddq_s32(v845, (int32x4_t)xmmword_208F3A6B0);
            v848 = 0uLL;
            v849 = (int32x4_t)v819;
            v850 = (int8x16_t)(unint64_t)v818;
            v851.i64[0] = 0x800000008;
            v851.i64[1] = 0x800000008;
            v852.i64[0] = 0x3F0000003FLL;
            v852.i64[1] = 0x3F0000003FLL;
            v853 = v841 & 0x3FFFFFF8;
            v854 = 0uLL;
            v855 = 0uLL;
            v856 = 0uLL;
            do
            {
              v849 = vaddq_s32(v849, v851);
              v857 = *v824++;
              v848 = vaddq_s32(v848, v851);
              v858 = vmovl_u8(v857);
              v859 = vmovl_high_u16(v858);
              v860.i64[0] = v859.u32[2];
              v860.i64[1] = v859.u32[3];
              v861 = v860;
              v860.i64[0] = v859.u32[0];
              v860.i64[1] = v859.u32[1];
              v862 = v860;
              v863 = vmovl_u16(*(uint16x4_t *)v858.i8);
              v860.i64[0] = v863.u32[2];
              v860.i64[1] = v863.u32[3];
              v864 = v860;
              v860.i64[0] = v863.u32[0];
              v860.i64[1] = v863.u32[1];
              v865 = v860;
              v860.i64[0] = v846.u32[2];
              v860.i64[1] = v846.u32[3];
              v866 = v860;
              v860.i64[0] = v846.u32[0];
              v860.i64[1] = v846.u32[1];
              v867 = v860;
              v860.i64[0] = v847.u32[2];
              v860.i64[1] = v847.u32[3];
              v868 = v860;
              v860.i64[0] = v847.u32[0];
              v860.i64[1] = v847.u32[1];
              v856 = vorrq_s8((int8x16_t)vshlq_u64(v861, v866), v856);
              v855 = vorrq_s8((int8x16_t)vshlq_u64(v862, v867), v855);
              v854 = vorrq_s8((int8x16_t)vshlq_u64(v864, v868), v854);
              v850 = vorrq_s8((int8x16_t)vshlq_u64(v865, v860), v850);
              *(_QWORD *)&v836 += 8;
              v847 = vaddq_s32(v847, v852);
              v846 = vaddq_s32(v846, v852);
              v853 -= 8;
            }
            while (v853);
            *v835 = v836;
            v869 = vorrq_s8(vorrq_s8(v850, v855), vorrq_s8(v854, v856));
            v818 = vorr_s8(*(int8x8_t *)v869.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v869, v869, 8uLL));
            v819 = vaddvq_s32(vaddq_s32(v849, v848));
            if ((v841 & 0x3FFFFFF8) != v841)
              goto LABEL_602;
          }
LABEL_604:
          v765 = v4524;
          v821 = v4505 | v757;
          v822 = (int8x8_t)(*(_QWORD *)&v818 - (v820 << 56));
          if (*(_QWORD *)&v818 < (unint64_t)(v820 << 56))
            goto LABEL_571;
          goto LABEL_605;
        }
        v4490 = v762;
        v4504 = v758;
        v4523 = v757;
        v766 = *(uint8x8_t **)(v1 + 10648);
        v767 = 48 - v761;
        v768 = *(_QWORD *)(v1 + 10640) - (_QWORD)v766;
        v769 = 8 * v768;
        v770 = 56 - 8 * v768 - v761;
        v771 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
        if (v771)
        {
          if (v768 >= 9)
            v772 = 9;
          else
            v772 = *(_QWORD *)(v1 + 10640) - (_QWORD)v766;
          v773 = v702;
          v774 = v618;
          v771(*(_QWORD *)(v1 + 10680), v766, &v4539, v772);
          v702 = v773;
          v618 = v774;
          v766 = (uint8x8_t *)&v4539;
        }
        if (v770 >= 0)
          v761 += 0x40000000;
        if (v769)
          v775 = 1;
        else
          v775 = v770 <= -1;
        v776 = v770 & ~(v770 >> 31);
        if (!v775 || v767 < v776)
        {
          v757 = v4523;
          v762 = v4490;
          goto LABEL_567;
        }
        v778 = (uint8x8_t *)(v1 + 10648);
        v779 = *(uint8x8_t *)(v1 + 10648);
        v780 = v759 - v706 + 40;
        if (v780 >= v776 - 1)
          v781 = v776 - 1;
        else
          v781 = v759 - v706 + 40;
        v782 = v759 - v706 - v781 + 47;
        v757 = v4523;
        v762 = v4490;
        if (v782 < 0x78)
          goto LABEL_564;
        if (v780 >= v776 - 1)
          v780 = v776 - 1;
        if (v778 >= (uint8x8_t *)&v766->i8[((v759 - v706 - v780 + 47) >> 3) + 1]
          || (unint64_t)v766 >= v1 + 10656)
        {
          v784 = (v782 >> 3) + 1;
          v785 = *(_QWORD *)&v779 + (v784 & 0x3FFFFFF8);
          v786 = (uint8x8_t *)((char *)v766 + (v784 & 0x3FFFFFF8));
          v787 = v767 - 8 * (v784 & 0x3FFFFFF8);
          v788 = vdupq_n_s32(v767);
          v789 = vaddq_s32(v788, (int32x4_t)xmmword_208F3A6A0);
          v790 = vaddq_s32(v788, (int32x4_t)xmmword_208F3A6B0);
          v791 = 0uLL;
          v792 = (int32x4_t)v761;
          v793 = (int8x16_t)(unint64_t)v760;
          v794.i64[0] = 0x800000008;
          v794.i64[1] = 0x800000008;
          v795.i64[0] = 0x3F0000003FLL;
          v795.i64[1] = 0x3F0000003FLL;
          v796 = v784 & 0x3FFFFFF8;
          v797 = 0uLL;
          v798 = 0uLL;
          v799 = 0uLL;
          do
          {
            v792 = vaddq_s32(v792, v794);
            v800 = *v766++;
            v791 = vaddq_s32(v791, v794);
            v801 = vmovl_u8(v800);
            v802 = vmovl_high_u16(v801);
            v803.i64[0] = v802.u32[2];
            v803.i64[1] = v802.u32[3];
            v804 = v803;
            v803.i64[0] = v802.u32[0];
            v803.i64[1] = v802.u32[1];
            v805 = v803;
            v806 = vmovl_u16(*(uint16x4_t *)v801.i8);
            v803.i64[0] = v806.u32[2];
            v803.i64[1] = v806.u32[3];
            v807 = v803;
            v803.i64[0] = v806.u32[0];
            v803.i64[1] = v806.u32[1];
            v808 = v803;
            v803.i64[0] = v789.u32[2];
            v803.i64[1] = v789.u32[3];
            v809 = v803;
            v803.i64[0] = v789.u32[0];
            v803.i64[1] = v789.u32[1];
            v810 = v803;
            v803.i64[0] = v790.u32[2];
            v803.i64[1] = v790.u32[3];
            v811 = v803;
            v803.i64[0] = v790.u32[0];
            v803.i64[1] = v790.u32[1];
            v799 = vorrq_s8((int8x16_t)vshlq_u64(v804, v809), v799);
            v798 = vorrq_s8((int8x16_t)vshlq_u64(v805, v810), v798);
            v797 = vorrq_s8((int8x16_t)vshlq_u64(v807, v811), v797);
            v793 = vorrq_s8((int8x16_t)vshlq_u64(v808, v803), v793);
            *(_QWORD *)&v779 += 8;
            v790 = vaddq_s32(v790, v795);
            v789 = vaddq_s32(v789, v795);
            v796 -= 8;
          }
          while (v796);
          *v778 = v779;
          v812 = vorrq_s8(vorrq_s8(v793, v798), vorrq_s8(v797, v799));
          v760 = vorr_s8(*(int8x8_t *)v812.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v812, v812, 8uLL));
          v761 = vaddvq_s32(vaddq_s32(v792, v791));
          if ((v784 & 0x3FFFFFF8) == v784)
          {
LABEL_567:
            v763 = v4504 | v618;
            v764 = (int8x8_t)(*(_QWORD *)&v760 - (v762 << 56));
            if (*(_QWORD *)&v760 < (unint64_t)(v762 << 56))
              goto LABEL_532;
            goto LABEL_568;
          }
        }
        else
        {
LABEL_564:
          v785 = *(_QWORD *)(v1 + 10648);
          v786 = v766;
          v787 = v767;
        }
        v813 = (uint8x8_t)(v785 + 1);
        do
        {
          v761 += 8;
          v814 = v786->u8[0];
          v786 = (uint8x8_t *)((char *)v786 + 1);
          *(_QWORD *)&v760 |= (unint64_t)v814 << v787;
          *v778 = v813;
          v787 -= 8;
          ++*(_QWORD *)&v813;
        }
        while (v787 >= v776);
        goto LABEL_567;
      }
LABEL_379:
      LODWORD(v493) = *(_DWORD *)(v1 + 10668) - v493;
      v4522 = 0x80;
      v56 = v494;
      goto LABEL_380;
    }
    v495 = *(uint8x8_t **)(v1 + 10648);
    v496 = *(_QWORD *)(v1 + 10640) - (_QWORD)v495;
    v497 = 8 * v496;
    v498 = 56 - v58 - 8 * v496;
    v499 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
    if (v499)
    {
      if (v496 >= 9)
        v500 = 9;
      else
        v500 = *(_QWORD *)(v1 + 10640) - (_QWORD)v495;
      v499(*(_QWORD *)(v1 + 10680), v495, &v4539, v500);
      v495 = (uint8x8_t *)&v4539;
    }
    if (v498 < 0)
      v501 = v58;
    else
      v501 = v58 + 0x40000000;
    if (v497)
      v502 = 1;
    else
      v502 = v498 <= -1;
    if (v502)
    {
      v503 = 48 - v58;
      v504 = v498 & ~(v498 >> 31);
      if ((int)(48 - v58) >= v504)
      {
        v505 = (uint8x8_t *)(v1 + 10648);
        v506 = *(uint8x8_t *)(v1 + 10648);
        v507 = v504 - 1;
        if (v504 - 1 >= (int)(40 - v58))
          v508 = 40 - v58;
        else
          v508 = v504 - 1;
        v509 = 47 - v58 - v508;
        if (v509 < 0x78)
          goto LABEL_375;
        if (v507 >= (int)(40 - v58))
          v507 = 40 - v58;
        if (v505 < (uint8x8_t *)&v495->i8[((47 - v58 - v507) >> 3) + 1] && (unint64_t)v495 < v1 + 10656)
        {
LABEL_375:
          v512 = *(_QWORD *)(v1 + 10648);
          v513 = v495;
          v514 = 48 - v58;
LABEL_376:
          v540 = (uint8x8_t)(v512 + 1);
          do
          {
            v501 += 8;
            v541 = v513->u8[0];
            v513 = (uint8x8_t *)((char *)v513 + 1);
            *(_QWORD *)&v56 |= (unint64_t)v541 << v514;
            *v505 = v540;
            v514 -= 8;
            ++*(_QWORD *)&v540;
          }
          while (v514 >= v504);
          goto LABEL_378;
        }
        v511 = (v509 >> 3) + 1;
        v512 = *(_QWORD *)&v506 + (v511 & 0x3FFFFFF8);
        v513 = (uint8x8_t *)((char *)v495 + (v511 & 0x3FFFFFF8));
        v514 = v503 - 8 * (v511 & 0x3FFFFFF8);
        v515 = vdupq_n_s32(v503);
        v516 = vaddq_s32(v515, (int32x4_t)xmmword_208F3A6A0);
        v517 = vaddq_s32(v515, (int32x4_t)xmmword_208F3A6B0);
        v518 = 0uLL;
        v519 = (int32x4_t)v501;
        v520 = (int8x16_t)(unint64_t)v56;
        v521.i64[0] = 0x800000008;
        v521.i64[1] = 0x800000008;
        v522.i64[0] = 0x3F0000003FLL;
        v522.i64[1] = 0x3F0000003FLL;
        v523 = v511 & 0x3FFFFFF8;
        v524 = 0uLL;
        v525 = 0uLL;
        v526 = 0uLL;
        do
        {
          v519 = vaddq_s32(v519, v521);
          v527 = *v495++;
          v518 = vaddq_s32(v518, v521);
          v528 = vmovl_u8(v527);
          v529 = vmovl_high_u16(v528);
          v530.i64[0] = v529.u32[2];
          v530.i64[1] = v529.u32[3];
          v531 = v530;
          v530.i64[0] = v529.u32[0];
          v530.i64[1] = v529.u32[1];
          v532 = v530;
          v533 = vmovl_u16(*(uint16x4_t *)v528.i8);
          v530.i64[0] = v533.u32[2];
          v530.i64[1] = v533.u32[3];
          v534 = v530;
          v530.i64[0] = v533.u32[0];
          v530.i64[1] = v533.u32[1];
          v535 = v530;
          v530.i64[0] = v516.u32[2];
          v530.i64[1] = v516.u32[3];
          v536 = v530;
          v530.i64[0] = v516.u32[0];
          v530.i64[1] = v516.u32[1];
          v537 = v530;
          v530.i64[0] = v517.u32[2];
          v530.i64[1] = v517.u32[3];
          v538 = v530;
          v530.i64[0] = v517.u32[0];
          v530.i64[1] = v517.u32[1];
          v526 = vorrq_s8((int8x16_t)vshlq_u64(v531, v536), v526);
          v525 = vorrq_s8((int8x16_t)vshlq_u64(v532, v537), v525);
          v524 = vorrq_s8((int8x16_t)vshlq_u64(v534, v538), v524);
          v520 = vorrq_s8((int8x16_t)vshlq_u64(v535, v530), v520);
          *(_QWORD *)&v506 += 8;
          v517 = vaddq_s32(v517, v522);
          v516 = vaddq_s32(v516, v522);
          v523 -= 8;
        }
        while (v523);
        *v505 = v506;
        v539 = vorrq_s8(vorrq_s8(v520, v525), vorrq_s8(v524, v526));
        v56 = vorr_s8(*(int8x8_t *)v539.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v539, v539, 8uLL));
        v501 = vaddvq_s32(vaddq_s32(v519, v518));
        if ((v511 & 0x3FFFFFF8) != v511)
          goto LABEL_376;
      }
    }
LABEL_378:
    v58 = v501;
    v494 = (int8x8_t)(*(_QWORD *)&v56 - (v493 << 56));
    if (*(_QWORD *)&v56 < (unint64_t)(v493 << 56))
      goto LABEL_345;
    goto LABEL_379;
  }
LABEL_1883:
  *(_DWORD *)(v1 + 4012) = 0;
  v2694 = *(_DWORD *)(v1 + 7428);
  v2695 = (v2694 << 7) - 128;
  *(_DWORD *)(v1 + 4016) = v2695;
  v2696 = v4482;
  if (v2694 >= 1)
  {
    v2697 = *(_DWORD *)(v1 + 7432);
    if (v2697 >= 1)
    {
      v4423 = (v2697 << 7) - 128;
      v2698 = 0;
      v4426 = 0;
      v4425 = (int8x8_t *)(v1 + 10640);
      v4457 = (int32x2_t *)(v1 + 4004);
      v4437 = v1 + 7944;
      v4424 = (unsigned __int8 *)(v1 + 10184);
      v2699 = (uint8x8_t *)(v1 + 10648);
      v4516 = v1 + 10656;
      v2700.i64[0] = 0x800000008;
      v2700.i64[1] = 0x800000008;
      v2701.i64[0] = 0x3F0000003FLL;
      v2701.i64[1] = 0x3F0000003FLL;
      result = (uint64_t)vp8_bmode_tree;
      while (1)
      {
        *(_DWORD *)(v1 + 4004) = 0;
        *(_DWORD *)(v1 + 4008) = v4423;
        if (v2697 >= 1)
          break;
LABEL_1887:
        v2698 -= 128;
        *(_DWORD *)(v1 + 4012) = v2698;
        v2695 -= 128;
        *(_DWORD *)(v1 + 4016) = v2695;
        v2696 += 76;
        if (++v4426 >= v2694)
          return result;
      }
      v4459 = 0;
      while (1)
      {
        v4483 = v2696;
        if (!*(_BYTE *)(v1 + 3969))
        {
          v2716 = *(_DWORD *)(v1 + 7412);
          if (v2716)
            goto LABEL_2015;
          goto LABEL_2014;
        }
        if (!*(_BYTE *)(v1 + 3968))
          goto LABEL_2015;
        v2702 = *(unsigned __int8 *)(v1 + 3972);
        v2703 = *(_DWORD *)(v1 + 10668);
        v2704 = *(_DWORD *)(v1 + 10664);
        v2705 = *(int8x8_t *)(v1 + 10656);
        if ((v2704 & 0x80000000) != 0)
          break;
LABEL_1933:
        v2751 = (((v2703 - 1) * v2702) >> 8) + 1;
        v2752 = v2751 << 56;
        v2753 = v2705;
        v2754 = (int8x8_t)(*(_QWORD *)&v2705 - (v2751 << 56));
        if (*(_QWORD *)&v2705 >= (unint64_t)(v2751 << 56))
        {
          LODWORD(v2751) = *(_DWORD *)(v1 + 10668) - v2751;
          v2753 = v2754;
        }
        v2755 = vp8_norm[v2751];
        v2756 = (_DWORD)v2751 << v2755;
        v2757 = (int8x8_t)(*(_QWORD *)&v2753 << v2755);
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2753 << v2755;
        v2758 = v2704 - v2755;
        *(_DWORD *)(v1 + 10664) = v2704 - v2755;
        *(_DWORD *)(v1 + 10668) = v2756;
        v2759 = v2756 - 1;
        if (*(_QWORD *)&v2705 < v2752)
        {
          v2760 = *(unsigned __int8 *)(v1 + 3973);
          v2696 = v4483;
          if ((v2758 & 0x80000000) != 0)
          {
            v2761 = *(uint8x8_t **)(v1 + 10648);
            v2762 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2761;
            v2763 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
            if (v2763)
            {
              if (v2762 >= 9)
                v2764 = 9;
              else
                v2764 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2761;
              v2763(*(_QWORD *)(v1 + 10680), v2761, &v4539, v2764);
              v2701.i64[0] = 0x3F0000003FLL;
              v2701.i64[1] = 0x3F0000003FLL;
              v2700.i64[0] = 0x800000008;
              v2700.i64[1] = 0x800000008;
              v2761 = (uint8x8_t *)&v4539;
            }
            v2765 = 48 - v2758;
            v2766 = 56 - 8 * v2762 - v2758;
            if (v2766 >= 0)
              v2758 += 0x40000000;
            if (8 * v2762)
              v2767 = 1;
            else
              v2767 = v2766 <= -1;
            v2768 = v2766 & ~(v2766 >> 31);
            if (!v2767 || v2765 < v2768)
            {
              v2696 = v4483;
              result = (uint64_t)vp8_bmode_tree;
            }
            else
            {
              v2780 = *v2699;
              v2781 = v2755 - v2704 + 40;
              if (v2781 >= v2768 - 1)
                v2782 = v2768 - 1;
              else
                v2782 = v2755 - v2704 + 40;
              v2783 = v2755 - v2704 - v2782 + 47;
              v2696 = v4483;
              result = (uint64_t)vp8_bmode_tree;
              if (v2783 < 0x78)
                goto LABEL_2000;
              if (v2781 >= v2768 - 1)
                v2781 = v2768 - 1;
              if (v2699 < (uint8x8_t *)&v2761->i8[((v2755 - v2704 - v2781 + 47) >> 3) + 1]
                && (unint64_t)v2761 < v4516)
              {
LABEL_2000:
                v2786 = *v2699;
                v2787 = v2761;
                v2788 = v2765;
                goto LABEL_2001;
              }
              v2785 = (v2783 >> 3) + 1;
              v2786 = (uint8x8_t)(*(_QWORD *)&v2780 + (v2785 & 0x3FFFFFF8));
              v2787 = (uint8x8_t *)((char *)v2761 + (v2785 & 0x3FFFFFF8));
              v2788 = v2765 - 8 * (v2785 & 0x3FFFFFF8);
              v2789 = vdupq_n_s32(v2765);
              v2790 = vaddq_s32(v2789, (int32x4_t)xmmword_208F3A6A0);
              v2791 = vaddq_s32(v2789, (int32x4_t)xmmword_208F3A6B0);
              v2792 = 0uLL;
              v2793 = (int32x4_t)v2758;
              v2794 = (int8x16_t)(unint64_t)v2757;
              v2795 = v2785 & 0x3FFFFFF8;
              v2796 = 0uLL;
              v2797 = 0uLL;
              v2798 = 0uLL;
              do
              {
                v2793 = vaddq_s32(v2793, v2700);
                v2799 = *v2761++;
                v2792 = vaddq_s32(v2792, v2700);
                v2800 = vmovl_u8(v2799);
                v2801 = vmovl_high_u16(v2800);
                v2802.i64[0] = v2801.u32[2];
                v2802.i64[1] = v2801.u32[3];
                v2803 = v2802;
                v2802.i64[0] = v2801.u32[0];
                v2802.i64[1] = v2801.u32[1];
                v2804 = v2802;
                v2805 = vmovl_u16(*(uint16x4_t *)v2800.i8);
                v2802.i64[0] = v2805.u32[2];
                v2802.i64[1] = v2805.u32[3];
                v2806 = v2802;
                v2802.i64[0] = v2805.u32[0];
                v2802.i64[1] = v2805.u32[1];
                v2807 = v2802;
                v2802.i64[0] = v2790.u32[2];
                v2802.i64[1] = v2790.u32[3];
                v2808 = v2802;
                v2802.i64[0] = v2790.u32[0];
                v2802.i64[1] = v2790.u32[1];
                v2809 = v2802;
                v2802.i64[0] = v2791.u32[2];
                v2802.i64[1] = v2791.u32[3];
                v2810 = v2802;
                v2802.i64[0] = v2791.u32[0];
                v2802.i64[1] = v2791.u32[1];
                v2798 = vorrq_s8((int8x16_t)vshlq_u64(v2803, v2808), v2798);
                v2797 = vorrq_s8((int8x16_t)vshlq_u64(v2804, v2809), v2797);
                v2796 = vorrq_s8((int8x16_t)vshlq_u64(v2806, v2810), v2796);
                v2794 = vorrq_s8((int8x16_t)vshlq_u64(v2807, v2802), v2794);
                *(_QWORD *)&v2780 += 8;
                v2791 = vaddq_s32(v2791, v2701);
                v2790 = vaddq_s32(v2790, v2701);
                v2795 -= 8;
              }
              while (v2795);
              *v2699 = v2780;
              v2811 = vorrq_s8(vorrq_s8(v2794, v2797), vorrq_s8(v2796, v2798));
              v2757 = vorr_s8(*(int8x8_t *)v2811.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2811, v2811, 8uLL));
              v2758 = vaddvq_s32(vaddq_s32(v2793, v2792));
              if ((v2785 & 0x3FFFFFF8) != v2785)
              {
LABEL_2001:
                v2844 = (uint8x8_t)(*(_QWORD *)&v2786 + 1);
                do
                {
                  v2758 += 8;
                  v2845 = v2787->u8[0];
                  v2787 = (uint8x8_t *)((char *)v2787 + 1);
                  *(_QWORD *)&v2757 |= (unint64_t)v2845 << v2788;
                  *v2699 = v2844;
                  v2788 -= 8;
                  ++*(_QWORD *)&v2844;
                }
                while (v2788 >= v2768);
              }
            }
          }
          v2846 = ((v2759 * v2760) >> 8) + 1;
          v2847 = (int8x8_t)(*(_QWORD *)&v2757 - (v2846 << 56));
          if (*(_QWORD *)&v2757 >= (unint64_t)(v2846 << 56))
          {
            LODWORD(v2846) = *(_DWORD *)(v1 + 10668) - v2846;
            LOBYTE(v2716) = 1;
LABEL_2012:
            v2757 = v2847;
            goto LABEL_2013;
          }
          LOBYTE(v2716) = 0;
          goto LABEL_2013;
        }
        v2770 = *(unsigned __int8 *)(v1 + 3974);
        v2696 = v4483;
        if ((v2758 & 0x80000000) != 0)
        {
          v2771 = *(uint8x8_t **)(v1 + 10648);
          v2772 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2771;
          v2773 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v2773)
          {
            if (v2772 >= 9)
              v2774 = 9;
            else
              v2774 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2771;
            v2773(*(_QWORD *)(v1 + 10680), v2771, &v4539, v2774);
            v2701.i64[0] = 0x3F0000003FLL;
            v2701.i64[1] = 0x3F0000003FLL;
            v2700.i64[0] = 0x800000008;
            v2700.i64[1] = 0x800000008;
            v2771 = (uint8x8_t *)&v4539;
          }
          v2775 = 48 - v2758;
          v2776 = 56 - 8 * v2772 - v2758;
          if (v2776 >= 0)
            v2758 += 0x40000000;
          if (8 * v2772)
            v2777 = 1;
          else
            v2777 = v2776 <= -1;
          v2778 = v2776 & ~(v2776 >> 31);
          if (!v2777 || v2775 < v2778)
          {
            v2696 = v4483;
            result = (uint64_t)vp8_bmode_tree;
          }
          else
          {
            v2812 = *v2699;
            v2813 = v2755 - v2704 + 40;
            if (v2813 >= v2778 - 1)
              v2814 = v2778 - 1;
            else
              v2814 = v2755 - v2704 + 40;
            v2815 = v2755 - v2704 - v2814 + 47;
            v2696 = v4483;
            result = (uint64_t)vp8_bmode_tree;
            if (v2815 < 0x78)
              goto LABEL_2006;
            if (v2813 >= v2778 - 1)
              v2813 = v2778 - 1;
            if (v2699 >= (uint8x8_t *)&v2771->i8[((v2755 - v2704 - v2813 + 47) >> 3) + 1]
              || (unint64_t)v2771 >= v4516)
            {
              v2817 = (v2815 >> 3) + 1;
              v2818 = (uint8x8_t)(*(_QWORD *)&v2812 + (v2817 & 0x3FFFFFF8));
              v2819 = (uint8x8_t *)((char *)v2771 + (v2817 & 0x3FFFFFF8));
              v2820 = v2775 - 8 * (v2817 & 0x3FFFFFF8);
              v2821 = vdupq_n_s32(v2775);
              v2822 = vaddq_s32(v2821, (int32x4_t)xmmword_208F3A6A0);
              v2823 = vaddq_s32(v2821, (int32x4_t)xmmword_208F3A6B0);
              v2824 = 0uLL;
              v2825 = (int32x4_t)v2758;
              v2826 = (int8x16_t)(unint64_t)v2757;
              v2827 = v2817 & 0x3FFFFFF8;
              v2828 = 0uLL;
              v2829 = 0uLL;
              v2830 = 0uLL;
              do
              {
                v2825 = vaddq_s32(v2825, v2700);
                v2831 = *v2771++;
                v2824 = vaddq_s32(v2824, v2700);
                v2832 = vmovl_u8(v2831);
                v2833 = vmovl_high_u16(v2832);
                v2834.i64[0] = v2833.u32[2];
                v2834.i64[1] = v2833.u32[3];
                v2835 = v2834;
                v2834.i64[0] = v2833.u32[0];
                v2834.i64[1] = v2833.u32[1];
                v2836 = v2834;
                v2837 = vmovl_u16(*(uint16x4_t *)v2832.i8);
                v2834.i64[0] = v2837.u32[2];
                v2834.i64[1] = v2837.u32[3];
                v2838 = v2834;
                v2834.i64[0] = v2837.u32[0];
                v2834.i64[1] = v2837.u32[1];
                v2839 = v2834;
                v2834.i64[0] = v2822.u32[2];
                v2834.i64[1] = v2822.u32[3];
                v2840 = v2834;
                v2834.i64[0] = v2822.u32[0];
                v2834.i64[1] = v2822.u32[1];
                v2841 = v2834;
                v2834.i64[0] = v2823.u32[2];
                v2834.i64[1] = v2823.u32[3];
                v2842 = v2834;
                v2834.i64[0] = v2823.u32[0];
                v2834.i64[1] = v2823.u32[1];
                v2830 = vorrq_s8((int8x16_t)vshlq_u64(v2835, v2840), v2830);
                v2829 = vorrq_s8((int8x16_t)vshlq_u64(v2836, v2841), v2829);
                v2828 = vorrq_s8((int8x16_t)vshlq_u64(v2838, v2842), v2828);
                v2826 = vorrq_s8((int8x16_t)vshlq_u64(v2839, v2834), v2826);
                *(_QWORD *)&v2812 += 8;
                v2823 = vaddq_s32(v2823, v2701);
                v2822 = vaddq_s32(v2822, v2701);
                v2827 -= 8;
              }
              while (v2827);
              *v2699 = v2812;
              v2843 = vorrq_s8(vorrq_s8(v2826, v2829), vorrq_s8(v2828, v2830));
              v2757 = vorr_s8(*(int8x8_t *)v2843.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2843, v2843, 8uLL));
              v2758 = vaddvq_s32(vaddq_s32(v2825, v2824));
              if ((v2817 & 0x3FFFFFF8) == v2817)
                goto LABEL_2009;
            }
            else
            {
LABEL_2006:
              v2818 = *v2699;
              v2819 = v2771;
              v2820 = v2775;
            }
            v2848 = (uint8x8_t)(*(_QWORD *)&v2818 + 1);
            do
            {
              v2758 += 8;
              v2849 = v2819->u8[0];
              v2819 = (uint8x8_t *)((char *)v2819 + 1);
              *(_QWORD *)&v2757 |= (unint64_t)v2849 << v2820;
              *v2699 = v2848;
              v2820 -= 8;
              ++*(_QWORD *)&v2848;
            }
            while (v2820 >= v2778);
          }
        }
LABEL_2009:
        v2846 = ((v2759 * v2770) >> 8) + 1;
        v2847 = (int8x8_t)(*(_QWORD *)&v2757 - (v2846 << 56));
        if (*(_QWORD *)&v2757 >= (unint64_t)(v2846 << 56))
        {
          LODWORD(v2846) = *(_DWORD *)(v1 + 10668) - v2846;
          LOBYTE(v2716) = 3;
          goto LABEL_2012;
        }
        LOBYTE(v2716) = 2;
LABEL_2013:
        v2850 = vp8_norm[v2846];
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2757 << v2850;
        *(_DWORD *)(v1 + 10664) = v2758 - v2850;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v2846 << v2850;
LABEL_2014:
        *(_BYTE *)(v2696 + 11) = v2716;
LABEL_2015:
        v2851 = *(_DWORD *)(v1 + 7440);
        if (!v2851)
          goto LABEL_2057;
        v2852 = v4458[3];
        v2853 = *(_DWORD *)(v1 + 10668);
        v2854 = *(_DWORD *)(v1 + 10664);
        v2855 = *(int8x8_t *)(v1 + 10656);
        if ((v2854 & 0x80000000) != 0)
        {
          v2856 = *(uint8x8_t **)(v1 + 10648);
          v2857 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2856;
          v2858 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v2858)
          {
            if (v2857 >= 9)
              v2859 = 9;
            else
              v2859 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2856;
            v2858(*(_QWORD *)(v1 + 10680), v2856, &v4539, v2859);
            v2701.i64[0] = 0x3F0000003FLL;
            v2701.i64[1] = 0x3F0000003FLL;
            v2700.i64[0] = 0x800000008;
            v2700.i64[1] = 0x800000008;
            v2856 = (uint8x8_t *)&v4539;
          }
          v2860 = 48 - v2854;
          v2861 = 56 - v2854 - 8 * v2857;
          if (v2861 < 0)
            v2862 = v2854;
          else
            v2862 = v2854 + 0x40000000;
          if (8 * v2857)
            v2863 = 1;
          else
            v2863 = v2861 <= -1;
          v2864 = v2861 & ~(v2861 >> 31);
          if (!v2863 || v2860 < v2864)
          {
            result = (uint64_t)vp8_bmode_tree;
          }
          else
          {
            v2866 = *v2699;
            v2867 = v2864 - 1;
            if (v2864 - 1 >= (int)(40 - v2854))
              v2868 = 40 - v2854;
            else
              v2868 = v2864 - 1;
            v2869 = 47 - v2854 - v2868;
            result = (uint64_t)vp8_bmode_tree;
            if (v2869 < 0x78)
              goto LABEL_2049;
            if (v2867 >= (int)(40 - v2854))
              v2867 = 40 - v2854;
            if (v2699 < (uint8x8_t *)&v2856->i8[((47 - v2854 - v2867) >> 3) + 1] && (unint64_t)v2856 < v4516)
            {
LABEL_2049:
              v2872 = *v2699;
              v2873 = v2856;
              v2874 = 48 - v2854;
              goto LABEL_2050;
            }
            v2871 = (v2869 >> 3) + 1;
            v2872 = (uint8x8_t)(*(_QWORD *)&v2866 + (v2871 & 0x3FFFFFF8));
            v2873 = (uint8x8_t *)((char *)v2856 + (v2871 & 0x3FFFFFF8));
            v2874 = v2860 - 8 * (v2871 & 0x3FFFFFF8);
            v2875 = vdupq_n_s32(v2860);
            v2876 = vaddq_s32(v2875, (int32x4_t)xmmword_208F3A6A0);
            v2877 = vaddq_s32(v2875, (int32x4_t)xmmword_208F3A6B0);
            v2878 = 0uLL;
            v2879 = (int32x4_t)v2862;
            v2880 = (int8x16_t)(unint64_t)v2855;
            v2881 = v2871 & 0x3FFFFFF8;
            v2882 = 0uLL;
            v2883 = 0uLL;
            v2884 = 0uLL;
            do
            {
              v2879 = vaddq_s32(v2879, v2700);
              v2885 = *v2856++;
              v2878 = vaddq_s32(v2878, v2700);
              v2886 = vmovl_u8(v2885);
              v2887 = vmovl_high_u16(v2886);
              v2888.i64[0] = v2887.u32[2];
              v2888.i64[1] = v2887.u32[3];
              v2889 = v2888;
              v2888.i64[0] = v2887.u32[0];
              v2888.i64[1] = v2887.u32[1];
              v2890 = v2888;
              v2891 = vmovl_u16(*(uint16x4_t *)v2886.i8);
              v2888.i64[0] = v2891.u32[2];
              v2888.i64[1] = v2891.u32[3];
              v2892 = v2888;
              v2888.i64[0] = v2891.u32[0];
              v2888.i64[1] = v2891.u32[1];
              v2893 = v2888;
              v2888.i64[0] = v2876.u32[2];
              v2888.i64[1] = v2876.u32[3];
              v2894 = v2888;
              v2888.i64[0] = v2876.u32[0];
              v2888.i64[1] = v2876.u32[1];
              v2895 = v2888;
              v2888.i64[0] = v2877.u32[2];
              v2888.i64[1] = v2877.u32[3];
              v2896 = v2888;
              v2888.i64[0] = v2877.u32[0];
              v2888.i64[1] = v2877.u32[1];
              v2884 = vorrq_s8((int8x16_t)vshlq_u64(v2889, v2894), v2884);
              v2883 = vorrq_s8((int8x16_t)vshlq_u64(v2890, v2895), v2883);
              v2882 = vorrq_s8((int8x16_t)vshlq_u64(v2892, v2896), v2882);
              v2880 = vorrq_s8((int8x16_t)vshlq_u64(v2893, v2888), v2880);
              *(_QWORD *)&v2866 += 8;
              v2877 = vaddq_s32(v2877, v2701);
              v2876 = vaddq_s32(v2876, v2701);
              v2881 -= 8;
            }
            while (v2881);
            *v2699 = v2866;
            v2897 = vorrq_s8(vorrq_s8(v2880, v2883), vorrq_s8(v2882, v2884));
            v2855 = vorr_s8(*(int8x8_t *)v2897.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2897, v2897, 8uLL));
            v2862 = vaddvq_s32(vaddq_s32(v2879, v2878));
            if ((v2871 & 0x3FFFFFF8) != v2871)
            {
LABEL_2050:
              v2898 = (uint8x8_t)(*(_QWORD *)&v2872 + 1);
              do
              {
                v2862 += 8;
                v2899 = v2873->u8[0];
                v2873 = (uint8x8_t *)((char *)v2873 + 1);
                *(_QWORD *)&v2855 |= (unint64_t)v2899 << v2874;
                *v2699 = v2898;
                v2874 -= 8;
                ++*(_QWORD *)&v2898;
              }
              while (v2874 >= v2864);
            }
          }
          v2854 = v2862;
        }
        v2900 = (((v2853 - 1) * v2852) >> 8) + 1;
        v2901 = (int8x8_t)(*(_QWORD *)&v2855 - (v2900 << 56));
        if (*(_QWORD *)&v2855 >= (unint64_t)(v2900 << 56))
        {
          LODWORD(v2900) = *(_DWORD *)(v1 + 10668) - v2900;
          LOBYTE(v2851) = 1;
          v2855 = v2901;
        }
        else
        {
          LOBYTE(v2851) = 0;
        }
        v2902 = vp8_norm[v2900];
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v2855 << v2902;
        *(_DWORD *)(v1 + 10664) = v2854 - v2902;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v2900 << v2902;
        v2696 = v4483;
LABEL_2057:
        *(_BYTE *)(v2696 + 9) = v2851;
        *(_BYTE *)(v2696 + 3) = 0;
        if (!*(_DWORD *)(v1 + 7412))
        {
          LOBYTE(v2948) = 0;
          v4471 = *(int *)(v1 + 7436);
          *(_BYTE *)(v2696 + 2) = 0;
          v2949 = *(_DWORD *)(v1 + 10668);
          v2950 = *(_DWORD *)(v1 + 10664);
          v2951 = *(int8x8_t *)(v1 + 10656);
          while (1)
          {
            v2955 = vp8_kf_ymode_prob[v2948 >> 1];
            if ((v2950 & 0x80000000) != 0)
              break;
LABEL_2128:
            v2952 = (((v2949 - 1) * v2955) >> 8) + 1;
            v3000 = (int8x8_t)(*(_QWORD *)&v2951 - (v2952 << 56));
            if (*(_QWORD *)&v2951 >= (unint64_t)(v2952 << 56))
            {
              LODWORD(v2952) = *(_DWORD *)(v1 + 10668) - v2952;
              v2953 = 1;
              v2951 = v3000;
            }
            else
            {
              v2953 = 0;
            }
            v2954 = vp8_norm[v2952];
            v2949 = (_DWORD)v2952 << v2954;
            *(_QWORD *)&v2951 <<= v2954;
            v2950 -= v2954;
            *(int8x8_t *)(v1 + 10656) = v2951;
            *(_DWORD *)(v1 + 10664) = v2950;
            *(_DWORD *)(v1 + 10668) = (_DWORD)v2952 << v2954;
            v2948 = (char)vp8_kf_ymode_tree[v2953 + (unint64_t)v2948];
            if (v2948 <= 0)
            {
              *(_BYTE *)v2696 = -(char)v2948;
              if (v2948 != -4)
                goto LABEL_2194;
              v3001 = 0;
              *(_BYTE *)(v2696 + 3) = 1;
              v4463 = (_BYTE *)(v2696 - 4);
              v4460 = (_BYTE *)(v2696 - 76 * v4471);
              v4472 = v2696 + 8;
              v4451 = v2696 - 52;
LABEL_2133:
              if (v3001 > 3)
              {
                v3003 = v4463;
LABEL_2137:
                v3002 = *(_DWORD *)&v3003[4 * v3001];
              }
              else
              {
                switch(*v4460)
                {
                  case 1:
                    v3002 = 2;
                    break;
                  case 2:
                    v3002 = 3;
                    break;
                  case 3:
                    v3002 = 1;
                    break;
                  case 4:
                    v3003 = v4460 + 60;
                    goto LABEL_2137;
                  default:
                    v3002 = 0;
                    break;
                }
              }
              if ((v3001 & 3) != 0)
              {
                v3004 = v4472;
LABEL_2140:
                v3005 = *(unsigned int *)(v3004 + 4 * v3001);
              }
              else
              {
                switch(*(_BYTE *)(v2696 - 76))
                {
                  case 1:
                    v3005 = 2;
                    break;
                  case 2:
                    v3005 = 3;
                    break;
                  case 3:
                    v3005 = 1;
                    break;
                  case 4:
                    v3004 = v4451;
                    goto LABEL_2140;
                  default:
                    v3005 = 0;
                    break;
                }
              }
              LOBYTE(v3006) = 0;
              v3007 = (char *)&vp8_kf_bmode_prob + 90 * v3002 + 9 * v3005;
              v3008 = *(_DWORD *)(v1 + 10668);
              v3009 = *(_DWORD *)(v1 + 10664);
              v3010 = *(int8x8_t *)(v1 + 10656);
              while (1)
              {
                v3014 = v3007[v3006 >> 1];
                if ((v3009 & 0x80000000) != 0)
                  break;
LABEL_2181:
                v3011 = (((v3008 - 1) * v3014) >> 8) + 1;
                v3059 = (int8x8_t)(*(_QWORD *)&v3010 - (v3011 << 56));
                if (*(_QWORD *)&v3010 >= (unint64_t)(v3011 << 56))
                {
                  LODWORD(v3011) = *(_DWORD *)(v1 + 10668) - v3011;
                  v3012 = 1;
                  v3010 = v3059;
                }
                else
                {
                  v3012 = 0;
                }
                v3013 = vp8_norm[v3011];
                v3008 = (_DWORD)v3011 << v3013;
                *(_QWORD *)&v3010 <<= v3013;
                v3009 -= v3013;
                *(int8x8_t *)(v1 + 10656) = v3010;
                *(_DWORD *)(v1 + 10664) = v3009;
                *(_DWORD *)(v1 + 10668) = (_DWORD)v3011 << v3013;
                v3006 = (char)vp8_bmode_tree[v3012 + (unint64_t)v3006];
                if (v3006 <= 0)
                {
                  v2696 = v4483;
                  *(_DWORD *)(v4483 + 4 * v3001++ + 12) = -v3006;
                  if (v3001 != 16)
                    goto LABEL_2133;
                  v2949 = *(_DWORD *)(v1 + 10668);
                  v2950 = *(_DWORD *)(v1 + 10664);
                  v2951 = *(int8x8_t *)(v1 + 10656);
LABEL_2194:
                  LOBYTE(v3060) = 0;
                  while (2)
                  {
                    v3064 = vp8_kf_uv_mode_prob[v3060 >> 1];
                    if ((v2950 & 0x80000000) != 0)
                    {
                      v3065 = *(uint8x8_t **)(v1 + 10648);
                      v3066 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3065;
                      v3067 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                      if (v3067)
                      {
                        if (v3066 >= 9)
                          v3068 = 9;
                        else
                          v3068 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3065;
                        v3067(*(_QWORD *)(v1 + 10680), v3065, &v4539, v3068);
                        v2701.i64[0] = 0x3F0000003FLL;
                        v2701.i64[1] = 0x3F0000003FLL;
                        v2700.i64[0] = 0x800000008;
                        v2700.i64[1] = 0x800000008;
                        v3065 = (uint8x8_t *)&v4539;
                      }
                      v3069 = 48 - v2950;
                      v3070 = 56 - v2950 - 8 * v3066;
                      if (v3070 < 0)
                        v3071 = v2950;
                      else
                        v3071 = v2950 + 0x40000000;
                      if (8 * v3066)
                        v3072 = 1;
                      else
                        v3072 = v3070 <= -1;
                      v3073 = v3070 & ~(v3070 >> 31);
                      if (!v3072 || v3069 < v3073)
                      {
                        result = (uint64_t)vp8_bmode_tree;
                      }
                      else
                      {
                        v3075 = *v2699;
                        v3076 = v3073 - 1;
                        if (v3073 - 1 >= (int)(40 - v2950))
                          v3077 = 40 - v2950;
                        else
                          v3077 = v3073 - 1;
                        v3078 = 47 - v2950 - v3077;
                        result = (uint64_t)vp8_bmode_tree;
                        if (v3078 < 0x78)
                          goto LABEL_2230;
                        if (v3076 >= (int)(40 - v2950))
                          v3076 = 40 - v2950;
                        if (v2699 < (uint8x8_t *)&v3065->i8[((47 - v2950 - v3076) >> 3) + 1]
                          && (unint64_t)v3065 < v4516)
                        {
LABEL_2230:
                          v3081 = *v2699;
                          v3082 = v3065;
                          v3083 = 48 - v2950;
                          goto LABEL_2231;
                        }
                        v3080 = (v3078 >> 3) + 1;
                        v3081 = (uint8x8_t)(*(_QWORD *)&v3075 + (v3080 & 0x3FFFFFF8));
                        v3082 = (uint8x8_t *)((char *)v3065 + (v3080 & 0x3FFFFFF8));
                        v3083 = v3069 - 8 * (v3080 & 0x3FFFFFF8);
                        v3084 = vdupq_n_s32(v3069);
                        v3085 = vaddq_s32(v3084, (int32x4_t)xmmword_208F3A6A0);
                        v3086 = vaddq_s32(v3084, (int32x4_t)xmmword_208F3A6B0);
                        v3087 = 0uLL;
                        v3088 = (int32x4_t)v3071;
                        v3089 = (int8x16_t)(unint64_t)v2951;
                        v3090 = v3080 & 0x3FFFFFF8;
                        v3091 = 0uLL;
                        v3092 = 0uLL;
                        v3093 = 0uLL;
                        do
                        {
                          v3088 = vaddq_s32(v3088, v2700);
                          v3094 = *v3065++;
                          v3087 = vaddq_s32(v3087, v2700);
                          v3095 = vmovl_u8(v3094);
                          v3096 = vmovl_high_u16(v3095);
                          v3097.i64[0] = v3096.u32[2];
                          v3097.i64[1] = v3096.u32[3];
                          v3098 = v3097;
                          v3097.i64[0] = v3096.u32[0];
                          v3097.i64[1] = v3096.u32[1];
                          v3099 = v3097;
                          v3100 = vmovl_u16(*(uint16x4_t *)v3095.i8);
                          v3097.i64[0] = v3100.u32[2];
                          v3097.i64[1] = v3100.u32[3];
                          v3101 = v3097;
                          v3097.i64[0] = v3100.u32[0];
                          v3097.i64[1] = v3100.u32[1];
                          v3102 = v3097;
                          v3097.i64[0] = v3085.u32[2];
                          v3097.i64[1] = v3085.u32[3];
                          v3103 = v3097;
                          v3097.i64[0] = v3085.u32[0];
                          v3097.i64[1] = v3085.u32[1];
                          v3104 = v3097;
                          v3097.i64[0] = v3086.u32[2];
                          v3097.i64[1] = v3086.u32[3];
                          v3105 = v3097;
                          v3097.i64[0] = v3086.u32[0];
                          v3097.i64[1] = v3086.u32[1];
                          v3093 = vorrq_s8((int8x16_t)vshlq_u64(v3098, v3103), v3093);
                          v3092 = vorrq_s8((int8x16_t)vshlq_u64(v3099, v3104), v3092);
                          v3091 = vorrq_s8((int8x16_t)vshlq_u64(v3101, v3105), v3091);
                          v3089 = vorrq_s8((int8x16_t)vshlq_u64(v3102, v3097), v3089);
                          *(_QWORD *)&v3075 += 8;
                          v3086 = vaddq_s32(v3086, v2701);
                          v3085 = vaddq_s32(v3085, v2701);
                          v3090 -= 8;
                        }
                        while (v3090);
                        *v2699 = v3075;
                        v3106 = vorrq_s8(vorrq_s8(v3089, v3092), vorrq_s8(v3091, v3093));
                        v2951 = vorr_s8(*(int8x8_t *)v3106.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3106, v3106, 8uLL));
                        v3071 = vaddvq_s32(vaddq_s32(v3088, v3087));
                        if ((v3080 & 0x3FFFFFF8) != v3080)
                        {
LABEL_2231:
                          v3107 = (uint8x8_t)(*(_QWORD *)&v3081 + 1);
                          do
                          {
                            v3071 += 8;
                            v3108 = v3082->u8[0];
                            v3082 = (uint8x8_t *)((char *)v3082 + 1);
                            *(_QWORD *)&v2951 |= (unint64_t)v3108 << v3083;
                            *v2699 = v3107;
                            v3083 -= 8;
                            ++*(_QWORD *)&v3107;
                          }
                          while (v3083 >= v3073);
                        }
                      }
                      v2950 = v3071;
                    }
                    v3061 = (((v2949 - 1) * v3064) >> 8) + 1;
                    v3109 = (int8x8_t)(*(_QWORD *)&v2951 - (v3061 << 56));
                    if (*(_QWORD *)&v2951 >= (unint64_t)(v3061 << 56))
                    {
                      LODWORD(v3061) = *(_DWORD *)(v1 + 10668) - v3061;
                      v3062 = 1;
                      v2951 = v3109;
                    }
                    else
                    {
                      v3062 = 0;
                    }
                    v3063 = vp8_norm[v3061];
                    v2949 = (_DWORD)v3061 << v3063;
                    *(_QWORD *)&v2951 <<= v3063;
                    v2950 -= v3063;
                    *(int8x8_t *)(v1 + 10656) = v2951;
                    *(_DWORD *)(v1 + 10664) = v2950;
                    *(_DWORD *)(v1 + 10668) = (_DWORD)v3061 << v3063;
                    v3060 = (char)vp8_uv_mode_tree[v3062 + (unint64_t)v3060];
                    if (v3060 <= 0)
                    {
LABEL_1890:
                      *(_BYTE *)(v2696 + 1) = -(char)v3060;
                      goto LABEL_1891;
                    }
                    continue;
                  }
                }
              }
              v3015 = *(uint8x8_t **)(v1 + 10648);
              v3016 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3015;
              v3017 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
              if (v3017)
              {
                if (v3016 >= 9)
                  v3018 = 9;
                else
                  v3018 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3015;
                v3017(*(_QWORD *)(v1 + 10680), v3015, &v4539, v3018);
                v2701.i64[0] = 0x3F0000003FLL;
                v2701.i64[1] = 0x3F0000003FLL;
                v2700.i64[0] = 0x800000008;
                v2700.i64[1] = 0x800000008;
                v3015 = (uint8x8_t *)&v4539;
              }
              v3019 = 48 - v3009;
              v3020 = 56 - v3009 - 8 * v3016;
              if (v3020 < 0)
                v3021 = v3009;
              else
                v3021 = v3009 + 0x40000000;
              if (8 * v3016)
                v3022 = 1;
              else
                v3022 = v3020 <= -1;
              v3023 = v3020 & ~(v3020 >> 31);
              if (!v3022 || v3019 < v3023)
              {
                result = (uint64_t)vp8_bmode_tree;
              }
              else
              {
                v3025 = *v2699;
                v3026 = v3023 - 1;
                if (v3023 - 1 >= (int)(40 - v3009))
                  v3027 = 40 - v3009;
                else
                  v3027 = v3023 - 1;
                v3028 = 47 - v3009 - v3027;
                result = (uint64_t)vp8_bmode_tree;
                if (v3028 < 0x78)
                  goto LABEL_2177;
                if (v3026 >= (int)(40 - v3009))
                  v3026 = 40 - v3009;
                if (v2699 < (uint8x8_t *)&v3015->i8[((47 - v3009 - v3026) >> 3) + 1] && (unint64_t)v3015 < v4516)
                {
LABEL_2177:
                  v3031 = *v2699;
                  v3032 = v3015;
                  v3033 = 48 - v3009;
                  goto LABEL_2178;
                }
                v3030 = (v3028 >> 3) + 1;
                v3031 = (uint8x8_t)(*(_QWORD *)&v3025 + (v3030 & 0x3FFFFFF8));
                v3032 = (uint8x8_t *)((char *)v3015 + (v3030 & 0x3FFFFFF8));
                v3033 = v3019 - 8 * (v3030 & 0x3FFFFFF8);
                v3034 = vdupq_n_s32(v3019);
                v3035 = vaddq_s32(v3034, (int32x4_t)xmmword_208F3A6A0);
                v3036 = vaddq_s32(v3034, (int32x4_t)xmmword_208F3A6B0);
                v3037 = 0uLL;
                v3038 = (int32x4_t)v3021;
                v3039 = (int8x16_t)(unint64_t)v3010;
                v3040 = v3030 & 0x3FFFFFF8;
                v3041 = 0uLL;
                v3042 = 0uLL;
                v3043 = 0uLL;
                do
                {
                  v3038 = vaddq_s32(v3038, v2700);
                  v3044 = *v3015++;
                  v3037 = vaddq_s32(v3037, v2700);
                  v3045 = vmovl_u8(v3044);
                  v3046 = vmovl_high_u16(v3045);
                  v3047.i64[0] = v3046.u32[2];
                  v3047.i64[1] = v3046.u32[3];
                  v3048 = v3047;
                  v3047.i64[0] = v3046.u32[0];
                  v3047.i64[1] = v3046.u32[1];
                  v3049 = v3047;
                  v3050 = vmovl_u16(*(uint16x4_t *)v3045.i8);
                  v3047.i64[0] = v3050.u32[2];
                  v3047.i64[1] = v3050.u32[3];
                  v3051 = v3047;
                  v3047.i64[0] = v3050.u32[0];
                  v3047.i64[1] = v3050.u32[1];
                  v3052 = v3047;
                  v3047.i64[0] = v3035.u32[2];
                  v3047.i64[1] = v3035.u32[3];
                  v3053 = v3047;
                  v3047.i64[0] = v3035.u32[0];
                  v3047.i64[1] = v3035.u32[1];
                  v3054 = v3047;
                  v3047.i64[0] = v3036.u32[2];
                  v3047.i64[1] = v3036.u32[3];
                  v3055 = v3047;
                  v3047.i64[0] = v3036.u32[0];
                  v3047.i64[1] = v3036.u32[1];
                  v3043 = vorrq_s8((int8x16_t)vshlq_u64(v3048, v3053), v3043);
                  v3042 = vorrq_s8((int8x16_t)vshlq_u64(v3049, v3054), v3042);
                  v3041 = vorrq_s8((int8x16_t)vshlq_u64(v3051, v3055), v3041);
                  v3039 = vorrq_s8((int8x16_t)vshlq_u64(v3052, v3047), v3039);
                  *(_QWORD *)&v3025 += 8;
                  v3036 = vaddq_s32(v3036, v2701);
                  v3035 = vaddq_s32(v3035, v2701);
                  v3040 -= 8;
                }
                while (v3040);
                *v2699 = v3025;
                v3056 = vorrq_s8(vorrq_s8(v3039, v3042), vorrq_s8(v3041, v3043));
                v3010 = vorr_s8(*(int8x8_t *)v3056.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3056, v3056, 8uLL));
                v3021 = vaddvq_s32(vaddq_s32(v3038, v3037));
                if ((v3030 & 0x3FFFFFF8) != v3030)
                {
LABEL_2178:
                  v3057 = (uint8x8_t)(*(_QWORD *)&v3031 + 1);
                  do
                  {
                    v3021 += 8;
                    v3058 = v3032->u8[0];
                    v3032 = (uint8x8_t *)((char *)v3032 + 1);
                    *(_QWORD *)&v3010 |= (unint64_t)v3058 << v3033;
                    *v2699 = v3057;
                    v3033 -= 8;
                    ++*(_QWORD *)&v3057;
                  }
                  while (v3033 >= v3023);
                }
              }
              v3009 = v3021;
              goto LABEL_2181;
            }
          }
          v2956 = *(uint8x8_t **)(v1 + 10648);
          v2957 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2956;
          v2958 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v2958)
          {
            if (v2957 >= 9)
              v2959 = 9;
            else
              v2959 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2956;
            v2958(*(_QWORD *)(v1 + 10680), v2956, &v4539, v2959);
            v2701.i64[0] = 0x3F0000003FLL;
            v2701.i64[1] = 0x3F0000003FLL;
            v2700.i64[0] = 0x800000008;
            v2700.i64[1] = 0x800000008;
            v2956 = (uint8x8_t *)&v4539;
          }
          v2960 = 48 - v2950;
          v2961 = 56 - v2950 - 8 * v2957;
          if (v2961 < 0)
            v2962 = v2950;
          else
            v2962 = v2950 + 0x40000000;
          if (8 * v2957)
            v2963 = 1;
          else
            v2963 = v2961 <= -1;
          v2964 = v2961 & ~(v2961 >> 31);
          if (!v2963 || v2960 < v2964)
          {
            result = (uint64_t)vp8_bmode_tree;
          }
          else
          {
            v2966 = *v2699;
            v2967 = v2964 - 1;
            if (v2964 - 1 >= (int)(40 - v2950))
              v2968 = 40 - v2950;
            else
              v2968 = v2964 - 1;
            v2969 = 47 - v2950 - v2968;
            result = (uint64_t)vp8_bmode_tree;
            if (v2969 < 0x78)
              goto LABEL_2124;
            if (v2967 >= (int)(40 - v2950))
              v2967 = 40 - v2950;
            if (v2699 < (uint8x8_t *)&v2956->i8[((47 - v2950 - v2967) >> 3) + 1] && (unint64_t)v2956 < v4516)
            {
LABEL_2124:
              v2972 = *v2699;
              v2973 = v2956;
              v2974 = 48 - v2950;
              goto LABEL_2125;
            }
            v2971 = (v2969 >> 3) + 1;
            v2972 = (uint8x8_t)(*(_QWORD *)&v2966 + (v2971 & 0x3FFFFFF8));
            v2973 = (uint8x8_t *)((char *)v2956 + (v2971 & 0x3FFFFFF8));
            v2974 = v2960 - 8 * (v2971 & 0x3FFFFFF8);
            v2975 = vdupq_n_s32(v2960);
            v2976 = vaddq_s32(v2975, (int32x4_t)xmmword_208F3A6A0);
            v2977 = vaddq_s32(v2975, (int32x4_t)xmmword_208F3A6B0);
            v2978 = 0uLL;
            v2979 = (int32x4_t)v2962;
            v2980 = (int8x16_t)(unint64_t)v2951;
            v2981 = v2971 & 0x3FFFFFF8;
            v2982 = 0uLL;
            v2983 = 0uLL;
            v2984 = 0uLL;
            do
            {
              v2979 = vaddq_s32(v2979, v2700);
              v2985 = *v2956++;
              v2978 = vaddq_s32(v2978, v2700);
              v2986 = vmovl_u8(v2985);
              v2987 = vmovl_high_u16(v2986);
              v2988.i64[0] = v2987.u32[2];
              v2988.i64[1] = v2987.u32[3];
              v2989 = v2988;
              v2988.i64[0] = v2987.u32[0];
              v2988.i64[1] = v2987.u32[1];
              v2990 = v2988;
              v2991 = vmovl_u16(*(uint16x4_t *)v2986.i8);
              v2988.i64[0] = v2991.u32[2];
              v2988.i64[1] = v2991.u32[3];
              v2992 = v2988;
              v2988.i64[0] = v2991.u32[0];
              v2988.i64[1] = v2991.u32[1];
              v2993 = v2988;
              v2988.i64[0] = v2976.u32[2];
              v2988.i64[1] = v2976.u32[3];
              v2994 = v2988;
              v2988.i64[0] = v2976.u32[0];
              v2988.i64[1] = v2976.u32[1];
              v2995 = v2988;
              v2988.i64[0] = v2977.u32[2];
              v2988.i64[1] = v2977.u32[3];
              v2996 = v2988;
              v2988.i64[0] = v2977.u32[0];
              v2988.i64[1] = v2977.u32[1];
              v2984 = vorrq_s8((int8x16_t)vshlq_u64(v2989, v2994), v2984);
              v2983 = vorrq_s8((int8x16_t)vshlq_u64(v2990, v2995), v2983);
              v2982 = vorrq_s8((int8x16_t)vshlq_u64(v2992, v2996), v2982);
              v2980 = vorrq_s8((int8x16_t)vshlq_u64(v2993, v2988), v2980);
              *(_QWORD *)&v2966 += 8;
              v2977 = vaddq_s32(v2977, v2701);
              v2976 = vaddq_s32(v2976, v2701);
              v2981 -= 8;
            }
            while (v2981);
            *v2699 = v2966;
            v2997 = vorrq_s8(vorrq_s8(v2980, v2983), vorrq_s8(v2982, v2984));
            v2951 = vorr_s8(*(int8x8_t *)v2997.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2997, v2997, 8uLL));
            v2962 = vaddvq_s32(vaddq_s32(v2979, v2978));
            if ((v2971 & 0x3FFFFFF8) != v2971)
            {
LABEL_2125:
              v2998 = (uint8x8_t)(*(_QWORD *)&v2972 + 1);
              do
              {
                v2962 += 8;
                v2999 = v2973->u8[0];
                v2973 = (uint8x8_t *)((char *)v2973 + 1);
                *(_QWORD *)&v2951 |= (unint64_t)v2999 << v2974;
                *v2699 = v2998;
                v2974 -= 8;
                ++*(_QWORD *)&v2998;
              }
              while (v2974 >= v2964);
            }
          }
          v2950 = v2962;
          goto LABEL_2128;
        }
        v2903 = *v4458;
        v2904 = *(_DWORD *)(v1 + 10668);
        v2905 = *(_DWORD *)(v1 + 10664);
        v2906 = *(int8x8_t *)(v1 + 10656);
        if ((v2905 & 0x80000000) == 0)
          goto LABEL_2240;
        v2907 = *(uint8x8_t **)(v1 + 10648);
        v2908 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2907;
        v2909 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
        if (v2909)
        {
          if (v2908 >= 9)
            v2910 = 9;
          else
            v2910 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2907;
          v2909(*(_QWORD *)(v1 + 10680), v2907, &v4539, v2910);
          result = (uint64_t)vp8_bmode_tree;
          v2701.i64[0] = 0x3F0000003FLL;
          v2701.i64[1] = 0x3F0000003FLL;
          v2700.i64[0] = 0x800000008;
          v2700.i64[1] = 0x800000008;
          v2907 = (uint8x8_t *)&v4539;
        }
        v2911 = 56 - v2905 - 8 * v2908;
        if (v2911 < 0)
          v2912 = v2905;
        else
          v2912 = v2905 + 0x40000000;
        if (8 * v2908)
          v2913 = 1;
        else
          v2913 = v2911 <= -1;
        if (v2913)
        {
          v2914 = 48 - v2905;
          v2915 = v2911 & ~(v2911 >> 31);
          if ((int)(48 - v2905) >= v2915)
          {
            v2916 = *v2699;
            v2917 = v2915 - 1;
            if (v2915 - 1 >= (int)(40 - v2905))
              v2918 = 40 - v2905;
            else
              v2918 = v2915 - 1;
            v2919 = 47 - v2905 - v2918;
            if (v2919 < 0x78)
              goto LABEL_2236;
            if (v2917 >= (int)(40 - v2905))
              v2917 = 40 - v2905;
            if (v2699 >= (uint8x8_t *)&v2907->i8[((47 - v2905 - v2917) >> 3) + 1] || (unint64_t)v2907 >= v4516)
            {
              v2921 = (v2919 >> 3) + 1;
              v2922 = (uint8x8_t)(*(_QWORD *)&v2916 + (v2921 & 0x3FFFFFF8));
              v2923 = (uint8x8_t *)((char *)v2907 + (v2921 & 0x3FFFFFF8));
              v2924 = v2914 - 8 * (v2921 & 0x3FFFFFF8);
              v2925 = vdupq_n_s32(v2914);
              v2926 = vaddq_s32(v2925, (int32x4_t)xmmword_208F3A6A0);
              v2927 = vaddq_s32(v2925, (int32x4_t)xmmword_208F3A6B0);
              v2928 = 0uLL;
              v2929 = (int32x4_t)v2912;
              v2930 = (int8x16_t)(unint64_t)v2906;
              v2931 = v2921 & 0x3FFFFFF8;
              v2932 = 0uLL;
              v2933 = 0uLL;
              v2934 = 0uLL;
              do
              {
                v2929 = vaddq_s32(v2929, v2700);
                v2935 = *v2907++;
                v2928 = vaddq_s32(v2928, v2700);
                v2936 = vmovl_u8(v2935);
                v2937 = vmovl_high_u16(v2936);
                v2938.i64[0] = v2937.u32[2];
                v2938.i64[1] = v2937.u32[3];
                v2939 = v2938;
                v2938.i64[0] = v2937.u32[0];
                v2938.i64[1] = v2937.u32[1];
                v2940 = v2938;
                v2941 = vmovl_u16(*(uint16x4_t *)v2936.i8);
                v2938.i64[0] = v2941.u32[2];
                v2938.i64[1] = v2941.u32[3];
                v2942 = v2938;
                v2938.i64[0] = v2941.u32[0];
                v2938.i64[1] = v2941.u32[1];
                v2943 = v2938;
                v2938.i64[0] = v2926.u32[2];
                v2938.i64[1] = v2926.u32[3];
                v2944 = v2938;
                v2938.i64[0] = v2926.u32[0];
                v2938.i64[1] = v2926.u32[1];
                v2945 = v2938;
                v2938.i64[0] = v2927.u32[2];
                v2938.i64[1] = v2927.u32[3];
                v2946 = v2938;
                v2938.i64[0] = v2927.u32[0];
                v2938.i64[1] = v2927.u32[1];
                v2934 = vorrq_s8((int8x16_t)vshlq_u64(v2939, v2944), v2934);
                v2933 = vorrq_s8((int8x16_t)vshlq_u64(v2940, v2945), v2933);
                v2932 = vorrq_s8((int8x16_t)vshlq_u64(v2942, v2946), v2932);
                v2930 = vorrq_s8((int8x16_t)vshlq_u64(v2943, v2938), v2930);
                *(_QWORD *)&v2916 += 8;
                v2927 = vaddq_s32(v2927, v2701);
                v2926 = vaddq_s32(v2926, v2701);
                v2931 -= 8;
              }
              while (v2931);
              *v2699 = v2916;
              v2947 = vorrq_s8(vorrq_s8(v2930, v2933), vorrq_s8(v2932, v2934));
              v2906 = vorr_s8(*(int8x8_t *)v2947.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2947, v2947, 8uLL));
              v2912 = vaddvq_s32(vaddq_s32(v2929, v2928));
              if ((v2921 & 0x3FFFFFF8) == v2921)
                goto LABEL_2239;
            }
            else
            {
LABEL_2236:
              v2922 = *v2699;
              v2923 = v2907;
              v2924 = 48 - v2905;
            }
            v3110 = (uint8x8_t)(*(_QWORD *)&v2922 + 1);
            do
            {
              v2912 += 8;
              v3111 = v2923->u8[0];
              v2923 = (uint8x8_t *)((char *)v2923 + 1);
              *(_QWORD *)&v2906 |= (unint64_t)v3111 << v2924;
              *v2699 = v3110;
              v2924 -= 8;
              ++*(_QWORD *)&v3110;
            }
            while (v2924 >= v2915);
          }
        }
LABEL_2239:
        v2905 = v2912;
LABEL_2240:
        v3112 = (((v2904 - 1) * v2903) >> 8) + 1;
        v3113 = v3112 << 56;
        v3114 = (int8x8_t)(*(_QWORD *)&v2906 - (v3112 << 56));
        if (*(_QWORD *)&v2906 >= (unint64_t)(v3112 << 56))
        {
          LODWORD(v3112) = *(_DWORD *)(v1 + 10668) - v3112;
          v3115 = 1;
        }
        else
        {
          v3115 = 0;
          v3114 = v2906;
        }
        v3116 = vp8_norm[v3112];
        v3117 = (int8x8_t)(*(_QWORD *)&v3114 << v3116);
        v3118 = v2905 - v3116;
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3114 << v3116;
        *(_DWORD *)(v1 + 10664) = v2905 - v3116;
        v3119 = (_DWORD)v3112 << v3116;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v3112 << v3116;
        *(_BYTE *)(v4483 + 2) = v3115;
        if (*(_QWORD *)&v2906 < v3113)
        {
          LOBYTE(v3120) = 0;
          *(_DWORD *)(v4483 + 4) = 0;
          v3121 = *(_DWORD *)(v1 + 10668);
          v3122 = *(_DWORD *)(v1 + 10664);
          v3123 = *(int8x8_t *)(v1 + 10656);
          v2696 = v4483;
          while (1)
          {
            v3127 = *(unsigned __int8 *)(v1 + 9099 + (v3120 >> 1));
            if ((v3122 & 0x80000000) != 0)
              break;
LABEL_2284:
            v3124 = (((v3121 - 1) * v3127) >> 8) + 1;
            v3172 = (int8x8_t)(*(_QWORD *)&v3123 - (v3124 << 56));
            if (*(_QWORD *)&v3123 >= (unint64_t)(v3124 << 56))
            {
              LODWORD(v3124) = *(_DWORD *)(v1 + 10668) - v3124;
              v3125 = 1;
              v3123 = v3172;
            }
            else
            {
              v3125 = 0;
            }
            v3126 = vp8_norm[v3124];
            v3121 = (_DWORD)v3124 << v3126;
            *(_QWORD *)&v3123 <<= v3126;
            v3122 -= v3126;
            *(int8x8_t *)(v1 + 10656) = v3123;
            *(_DWORD *)(v1 + 10664) = v3122;
            *(_DWORD *)(v1 + 10668) = (_DWORD)v3124 << v3126;
            v3120 = (char)vp8_ymode_tree[v3125 + (unint64_t)v3120];
            if (v3120 <= 0)
            {
              *(_BYTE *)v4483 = -(char)v3120;
              if (v3120 != -4)
                goto LABEL_2362;
              v3216 = 0;
              *(_BYTE *)(v4483 + 3) = 1;
              v3217 = v1 + 9090;
LABEL_2319:
              LOBYTE(v3218) = 0;
              v3219 = *(_DWORD *)(v1 + 10668);
              v3220 = *(_DWORD *)(v1 + 10664);
              v3221 = *(int8x8_t *)(v1 + 10656);
              while (1)
              {
                v3225 = *(unsigned __int8 *)(v3217 + (v3218 >> 1));
                if ((v3220 & 0x80000000) != 0)
                  break;
LABEL_2359:
                v3222 = (((v3219 - 1) * v3225) >> 8) + 1;
                v3270 = (int8x8_t)(*(_QWORD *)&v3221 - (v3222 << 56));
                if (*(_QWORD *)&v3221 >= (unint64_t)(v3222 << 56))
                {
                  LODWORD(v3222) = *(_DWORD *)(v1 + 10668) - v3222;
                  v3223 = 1;
                  v3221 = v3270;
                }
                else
                {
                  v3223 = 0;
                }
                v3224 = vp8_norm[v3222];
                v3219 = (_DWORD)v3222 << v3224;
                *(_QWORD *)&v3221 <<= v3224;
                v3220 -= v3224;
                *(int8x8_t *)(v1 + 10656) = v3221;
                *(_DWORD *)(v1 + 10664) = v3220;
                *(_DWORD *)(v1 + 10668) = (_DWORD)v3222 << v3224;
                v3218 = (char)vp8_bmode_tree[v3223 + (unint64_t)v3218];
                if (v3218 <= 0)
                {
                  v2696 = v4483;
                  *(_DWORD *)(v4483 + 4 * v3216++ + 12) = -v3218;
                  if (v3216 != 16)
                    goto LABEL_2319;
                  v3121 = *(_DWORD *)(v1 + 10668);
                  v3122 = *(_DWORD *)(v1 + 10664);
                  v3123 = *(int8x8_t *)(v1 + 10656);
LABEL_2362:
                  LOBYTE(v3060) = 0;
                  while (2)
                  {
                    v3274 = *(unsigned __int8 *)(v1 + 9103 + (v3060 >> 1));
                    if ((v3122 & 0x80000000) != 0)
                    {
                      v3275 = *(uint8x8_t **)(v1 + 10648);
                      v3276 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3275;
                      v3277 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
                      if (v3277)
                      {
                        if (v3276 >= 9)
                          v3278 = 9;
                        else
                          v3278 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3275;
                        v3277(*(_QWORD *)(v1 + 10680), v3275, &v4539, v3278);
                        v2701.i64[0] = 0x3F0000003FLL;
                        v2701.i64[1] = 0x3F0000003FLL;
                        v2700.i64[0] = 0x800000008;
                        v2700.i64[1] = 0x800000008;
                        v3275 = (uint8x8_t *)&v4539;
                      }
                      v3279 = 48 - v3122;
                      v3280 = 56 - v3122 - 8 * v3276;
                      if (v3280 < 0)
                        v3281 = v3122;
                      else
                        v3281 = v3122 + 0x40000000;
                      if (8 * v3276)
                        v3282 = 1;
                      else
                        v3282 = v3280 <= -1;
                      v3283 = v3280 & ~(v3280 >> 31);
                      if (!v3282 || v3279 < v3283)
                      {
                        result = (uint64_t)vp8_bmode_tree;
                      }
                      else
                      {
                        v3285 = *v2699;
                        v3286 = v3283 - 1;
                        if (v3283 - 1 >= (int)(40 - v3122))
                          v3287 = 40 - v3122;
                        else
                          v3287 = v3283 - 1;
                        v3288 = 47 - v3122 - v3287;
                        result = (uint64_t)vp8_bmode_tree;
                        if (v3288 < 0x78)
                          goto LABEL_2398;
                        if (v3286 >= (int)(40 - v3122))
                          v3286 = 40 - v3122;
                        if (v2699 < (uint8x8_t *)&v3275->i8[((47 - v3122 - v3286) >> 3) + 1]
                          && (unint64_t)v3275 < v4516)
                        {
LABEL_2398:
                          v3291 = *v2699;
                          v3292 = v3275;
                          v3293 = 48 - v3122;
                          goto LABEL_2399;
                        }
                        v3290 = (v3288 >> 3) + 1;
                        v3291 = (uint8x8_t)(*(_QWORD *)&v3285 + (v3290 & 0x3FFFFFF8));
                        v3292 = (uint8x8_t *)((char *)v3275 + (v3290 & 0x3FFFFFF8));
                        v3293 = v3279 - 8 * (v3290 & 0x3FFFFFF8);
                        v3294 = vdupq_n_s32(v3279);
                        v3295 = vaddq_s32(v3294, (int32x4_t)xmmword_208F3A6A0);
                        v3296 = vaddq_s32(v3294, (int32x4_t)xmmword_208F3A6B0);
                        v3297 = 0uLL;
                        v3298 = (int32x4_t)v3281;
                        v3299 = (int8x16_t)(unint64_t)v3123;
                        v3300 = v3290 & 0x3FFFFFF8;
                        v3301 = 0uLL;
                        v3302 = 0uLL;
                        v3303 = 0uLL;
                        do
                        {
                          v3298 = vaddq_s32(v3298, v2700);
                          v3304 = *v3275++;
                          v3297 = vaddq_s32(v3297, v2700);
                          v3305 = vmovl_u8(v3304);
                          v3306 = vmovl_high_u16(v3305);
                          v3307.i64[0] = v3306.u32[2];
                          v3307.i64[1] = v3306.u32[3];
                          v3308 = v3307;
                          v3307.i64[0] = v3306.u32[0];
                          v3307.i64[1] = v3306.u32[1];
                          v3309 = v3307;
                          v3310 = vmovl_u16(*(uint16x4_t *)v3305.i8);
                          v3307.i64[0] = v3310.u32[2];
                          v3307.i64[1] = v3310.u32[3];
                          v3311 = v3307;
                          v3307.i64[0] = v3310.u32[0];
                          v3307.i64[1] = v3310.u32[1];
                          v3312 = v3307;
                          v3307.i64[0] = v3295.u32[2];
                          v3307.i64[1] = v3295.u32[3];
                          v3313 = v3307;
                          v3307.i64[0] = v3295.u32[0];
                          v3307.i64[1] = v3295.u32[1];
                          v3314 = v3307;
                          v3307.i64[0] = v3296.u32[2];
                          v3307.i64[1] = v3296.u32[3];
                          v3315 = v3307;
                          v3307.i64[0] = v3296.u32[0];
                          v3307.i64[1] = v3296.u32[1];
                          v3303 = vorrq_s8((int8x16_t)vshlq_u64(v3308, v3313), v3303);
                          v3302 = vorrq_s8((int8x16_t)vshlq_u64(v3309, v3314), v3302);
                          v3301 = vorrq_s8((int8x16_t)vshlq_u64(v3311, v3315), v3301);
                          v3299 = vorrq_s8((int8x16_t)vshlq_u64(v3312, v3307), v3299);
                          *(_QWORD *)&v3285 += 8;
                          v3296 = vaddq_s32(v3296, v2701);
                          v3295 = vaddq_s32(v3295, v2701);
                          v3300 -= 8;
                        }
                        while (v3300);
                        *v2699 = v3285;
                        v3316 = vorrq_s8(vorrq_s8(v3299, v3302), vorrq_s8(v3301, v3303));
                        v3123 = vorr_s8(*(int8x8_t *)v3316.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3316, v3316, 8uLL));
                        v3281 = vaddvq_s32(vaddq_s32(v3298, v3297));
                        if ((v3290 & 0x3FFFFFF8) != v3290)
                        {
LABEL_2399:
                          v3317 = (uint8x8_t)(*(_QWORD *)&v3291 + 1);
                          do
                          {
                            v3281 += 8;
                            v3318 = v3292->u8[0];
                            v3292 = (uint8x8_t *)((char *)v3292 + 1);
                            *(_QWORD *)&v3123 |= (unint64_t)v3318 << v3293;
                            *v2699 = v3317;
                            v3293 -= 8;
                            ++*(_QWORD *)&v3317;
                          }
                          while (v3293 >= v3283);
                        }
                      }
                      v3122 = v3281;
                    }
                    v3271 = (((v3121 - 1) * v3274) >> 8) + 1;
                    v3319 = (int8x8_t)(*(_QWORD *)&v3123 - (v3271 << 56));
                    if (*(_QWORD *)&v3123 >= (unint64_t)(v3271 << 56))
                    {
                      LODWORD(v3271) = *(_DWORD *)(v1 + 10668) - v3271;
                      v3272 = 1;
                      v3123 = v3319;
                    }
                    else
                    {
                      v3272 = 0;
                    }
                    v3273 = vp8_norm[v3271];
                    v3121 = (_DWORD)v3271 << v3273;
                    *(_QWORD *)&v3123 <<= v3273;
                    v3122 -= v3273;
                    *(int8x8_t *)(v1 + 10656) = v3123;
                    *(_DWORD *)(v1 + 10664) = v3122;
                    *(_DWORD *)(v1 + 10668) = (_DWORD)v3271 << v3273;
                    v3060 = (char)vp8_uv_mode_tree[v3272 + (unint64_t)v3060];
                    if (v3060 <= 0)
                      goto LABEL_1890;
                    continue;
                  }
                }
              }
              v3226 = *(uint8x8_t **)(v1 + 10648);
              v3227 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3226;
              v3228 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
              if (v3228)
              {
                if (v3227 >= 9)
                  v3229 = 9;
                else
                  v3229 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3226;
                v3228(*(_QWORD *)(v1 + 10680), v3226, &v4539, v3229);
                v2701.i64[0] = 0x3F0000003FLL;
                v2701.i64[1] = 0x3F0000003FLL;
                v2700.i64[0] = 0x800000008;
                v2700.i64[1] = 0x800000008;
                v3226 = (uint8x8_t *)&v4539;
              }
              v3230 = 48 - v3220;
              v3231 = 56 - v3220 - 8 * v3227;
              if (v3231 < 0)
                v3232 = v3220;
              else
                v3232 = v3220 + 0x40000000;
              if (8 * v3227)
                v3233 = 1;
              else
                v3233 = v3231 <= -1;
              v3234 = v3231 & ~(v3231 >> 31);
              if (!v3233 || v3230 < v3234)
              {
                v3217 = v1 + 9090;
                result = (uint64_t)vp8_bmode_tree;
              }
              else
              {
                v3236 = *v2699;
                v3237 = v3234 - 1;
                if (v3234 - 1 >= (int)(40 - v3220))
                  v3238 = 40 - v3220;
                else
                  v3238 = v3234 - 1;
                v3239 = 47 - v3220 - v3238;
                v3217 = v1 + 9090;
                result = (uint64_t)vp8_bmode_tree;
                if (v3239 < 0x78)
                  goto LABEL_2355;
                if (v3237 >= (int)(40 - v3220))
                  v3237 = 40 - v3220;
                if (v2699 < (uint8x8_t *)&v3226->i8[((47 - v3220 - v3237) >> 3) + 1] && (unint64_t)v3226 < v4516)
                {
LABEL_2355:
                  v3242 = *v2699;
                  v3243 = v3226;
                  v3244 = 48 - v3220;
                  goto LABEL_2356;
                }
                v3241 = (v3239 >> 3) + 1;
                v3242 = (uint8x8_t)(*(_QWORD *)&v3236 + (v3241 & 0x3FFFFFF8));
                v3243 = (uint8x8_t *)((char *)v3226 + (v3241 & 0x3FFFFFF8));
                v3244 = v3230 - 8 * (v3241 & 0x3FFFFFF8);
                v3245 = vdupq_n_s32(v3230);
                v3246 = vaddq_s32(v3245, (int32x4_t)xmmword_208F3A6A0);
                v3247 = vaddq_s32(v3245, (int32x4_t)xmmword_208F3A6B0);
                v3248 = 0uLL;
                v3249 = (int32x4_t)v3232;
                v3250 = (int8x16_t)(unint64_t)v3221;
                v3251 = v3241 & 0x3FFFFFF8;
                v3252 = 0uLL;
                v3253 = 0uLL;
                v3254 = 0uLL;
                do
                {
                  v3249 = vaddq_s32(v3249, v2700);
                  v3255 = *v3226++;
                  v3248 = vaddq_s32(v3248, v2700);
                  v3256 = vmovl_u8(v3255);
                  v3257 = vmovl_high_u16(v3256);
                  v3258.i64[0] = v3257.u32[2];
                  v3258.i64[1] = v3257.u32[3];
                  v3259 = v3258;
                  v3258.i64[0] = v3257.u32[0];
                  v3258.i64[1] = v3257.u32[1];
                  v3260 = v3258;
                  v3261 = vmovl_u16(*(uint16x4_t *)v3256.i8);
                  v3258.i64[0] = v3261.u32[2];
                  v3258.i64[1] = v3261.u32[3];
                  v3262 = v3258;
                  v3258.i64[0] = v3261.u32[0];
                  v3258.i64[1] = v3261.u32[1];
                  v3263 = v3258;
                  v3258.i64[0] = v3246.u32[2];
                  v3258.i64[1] = v3246.u32[3];
                  v3264 = v3258;
                  v3258.i64[0] = v3246.u32[0];
                  v3258.i64[1] = v3246.u32[1];
                  v3265 = v3258;
                  v3258.i64[0] = v3247.u32[2];
                  v3258.i64[1] = v3247.u32[3];
                  v3266 = v3258;
                  v3258.i64[0] = v3247.u32[0];
                  v3258.i64[1] = v3247.u32[1];
                  v3254 = vorrq_s8((int8x16_t)vshlq_u64(v3259, v3264), v3254);
                  v3253 = vorrq_s8((int8x16_t)vshlq_u64(v3260, v3265), v3253);
                  v3252 = vorrq_s8((int8x16_t)vshlq_u64(v3262, v3266), v3252);
                  v3250 = vorrq_s8((int8x16_t)vshlq_u64(v3263, v3258), v3250);
                  *(_QWORD *)&v3236 += 8;
                  v3247 = vaddq_s32(v3247, v2701);
                  v3246 = vaddq_s32(v3246, v2701);
                  v3251 -= 8;
                }
                while (v3251);
                *v2699 = v3236;
                v3267 = vorrq_s8(vorrq_s8(v3250, v3253), vorrq_s8(v3252, v3254));
                v3221 = vorr_s8(*(int8x8_t *)v3267.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3267, v3267, 8uLL));
                v3232 = vaddvq_s32(vaddq_s32(v3249, v3248));
                if ((v3241 & 0x3FFFFFF8) != v3241)
                {
LABEL_2356:
                  v3268 = (uint8x8_t)(*(_QWORD *)&v3242 + 1);
                  do
                  {
                    v3232 += 8;
                    v3269 = v3243->u8[0];
                    v3243 = (uint8x8_t *)((char *)v3243 + 1);
                    *(_QWORD *)&v3221 |= (unint64_t)v3269 << v3244;
                    *v2699 = v3268;
                    v3244 -= 8;
                    ++*(_QWORD *)&v3268;
                  }
                  while (v3244 >= v3234);
                }
              }
              v3220 = v3232;
              goto LABEL_2359;
            }
          }
          v3128 = *(uint8x8_t **)(v1 + 10648);
          v3129 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3128;
          v3130 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
          if (v3130)
          {
            if (v3129 >= 9)
              v3131 = 9;
            else
              v3131 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3128;
            v3130(*(_QWORD *)(v1 + 10680), v3128, &v4539, v3131);
            v2701.i64[0] = 0x3F0000003FLL;
            v2701.i64[1] = 0x3F0000003FLL;
            v2700.i64[0] = 0x800000008;
            v2700.i64[1] = 0x800000008;
            v3128 = (uint8x8_t *)&v4539;
          }
          v3132 = 48 - v3122;
          v3133 = 56 - v3122 - 8 * v3129;
          if (v3133 < 0)
            v3134 = v3122;
          else
            v3134 = v3122 + 0x40000000;
          if (8 * v3129)
            v3135 = 1;
          else
            v3135 = v3133 <= -1;
          v3136 = v3133 & ~(v3133 >> 31);
          if (!v3135 || v3132 < v3136)
          {
            result = (uint64_t)vp8_bmode_tree;
          }
          else
          {
            v3138 = *v2699;
            v3139 = v3136 - 1;
            if (v3136 - 1 >= (int)(40 - v3122))
              v3140 = 40 - v3122;
            else
              v3140 = v3136 - 1;
            v3141 = 47 - v3122 - v3140;
            result = (uint64_t)vp8_bmode_tree;
            if (v3141 < 0x78)
              goto LABEL_2280;
            if (v3139 >= (int)(40 - v3122))
              v3139 = 40 - v3122;
            if (v2699 < (uint8x8_t *)&v3128->i8[((47 - v3122 - v3139) >> 3) + 1] && (unint64_t)v3128 < v4516)
            {
LABEL_2280:
              v3144 = *v2699;
              v3145 = v3128;
              v3146 = 48 - v3122;
              goto LABEL_2281;
            }
            v3143 = (v3141 >> 3) + 1;
            v3144 = (uint8x8_t)(*(_QWORD *)&v3138 + (v3143 & 0x3FFFFFF8));
            v3145 = (uint8x8_t *)((char *)v3128 + (v3143 & 0x3FFFFFF8));
            v3146 = v3132 - 8 * (v3143 & 0x3FFFFFF8);
            v3147 = vdupq_n_s32(v3132);
            v3148 = vaddq_s32(v3147, (int32x4_t)xmmword_208F3A6A0);
            v3149 = vaddq_s32(v3147, (int32x4_t)xmmword_208F3A6B0);
            v3150 = 0uLL;
            v3151 = (int32x4_t)v3134;
            v3152 = (int8x16_t)(unint64_t)v3123;
            v3153 = v3143 & 0x3FFFFFF8;
            v3154 = 0uLL;
            v3155 = 0uLL;
            v3156 = 0uLL;
            do
            {
              v3151 = vaddq_s32(v3151, v2700);
              v3157 = *v3128++;
              v3150 = vaddq_s32(v3150, v2700);
              v3158 = vmovl_u8(v3157);
              v3159 = vmovl_high_u16(v3158);
              v3160.i64[0] = v3159.u32[2];
              v3160.i64[1] = v3159.u32[3];
              v3161 = v3160;
              v3160.i64[0] = v3159.u32[0];
              v3160.i64[1] = v3159.u32[1];
              v3162 = v3160;
              v3163 = vmovl_u16(*(uint16x4_t *)v3158.i8);
              v3160.i64[0] = v3163.u32[2];
              v3160.i64[1] = v3163.u32[3];
              v3164 = v3160;
              v3160.i64[0] = v3163.u32[0];
              v3160.i64[1] = v3163.u32[1];
              v3165 = v3160;
              v3160.i64[0] = v3148.u32[2];
              v3160.i64[1] = v3148.u32[3];
              v3166 = v3160;
              v3160.i64[0] = v3148.u32[0];
              v3160.i64[1] = v3148.u32[1];
              v3167 = v3160;
              v3160.i64[0] = v3149.u32[2];
              v3160.i64[1] = v3149.u32[3];
              v3168 = v3160;
              v3160.i64[0] = v3149.u32[0];
              v3160.i64[1] = v3149.u32[1];
              v3156 = vorrq_s8((int8x16_t)vshlq_u64(v3161, v3166), v3156);
              v3155 = vorrq_s8((int8x16_t)vshlq_u64(v3162, v3167), v3155);
              v3154 = vorrq_s8((int8x16_t)vshlq_u64(v3164, v3168), v3154);
              v3152 = vorrq_s8((int8x16_t)vshlq_u64(v3165, v3160), v3152);
              *(_QWORD *)&v3138 += 8;
              v3149 = vaddq_s32(v3149, v2701);
              v3148 = vaddq_s32(v3148, v2701);
              v3153 -= 8;
            }
            while (v3153);
            *v2699 = v3138;
            v3169 = vorrq_s8(vorrq_s8(v3152, v3155), vorrq_s8(v3154, v3156));
            v3123 = vorr_s8(*(int8x8_t *)v3169.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3169, v3169, 8uLL));
            v3134 = vaddvq_s32(vaddq_s32(v3151, v3150));
            if ((v3143 & 0x3FFFFFF8) != v3143)
            {
LABEL_2281:
              v3170 = (uint8x8_t)(*(_QWORD *)&v3144 + 1);
              do
              {
                v3134 += 8;
                v3171 = v3145->u8[0];
                v3145 = (uint8x8_t *)((char *)v3145 + 1);
                *(_QWORD *)&v3123 |= (unint64_t)v3171 << v3146;
                *v2699 = v3170;
                v3146 -= 8;
                ++*(_QWORD *)&v3170;
              }
              while (v3146 >= v3136);
            }
          }
          v3122 = v3134;
          goto LABEL_2284;
        }
        v3173 = *(int *)(v1 + 3880);
        *(_BYTE *)(v4483 + 10) = 0;
        v3174 = v4458[1];
        if ((v3118 & 0x80000000) != 0)
        {
          v3175 = *(uint8x8_t **)(v1 + 10648);
          v3176 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3175;
          v3177 = *(void (**)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))(v1 + 10672);
          if (v3177)
          {
            if (v3176 >= 9)
              v3178 = 9;
            else
              v3178 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3175;
            v4446 = v3173;
            v3177(*(_QWORD *)(v1 + 10680), v3175, v4541, v3178);
            v3173 = v4446;
            result = (uint64_t)vp8_bmode_tree;
            v2701.i64[0] = 0x3F0000003FLL;
            v2701.i64[1] = 0x3F0000003FLL;
            v2700.i64[0] = 0x800000008;
            v2700.i64[1] = 0x800000008;
            v3175 = (uint8x8_t *)v4541;
          }
          v3179 = 56 - 8 * v3176 - v3118;
          if (v3179 < 0)
            v3180 = v2905 - v3116;
          else
            v3180 = v3118 + 0x40000000;
          if (8 * v3176)
            v3181 = 1;
          else
            v3181 = v3179 <= -1;
          if (v3181)
          {
            v3182 = 48 - v3118;
            v3183 = v3179 & ~(v3179 >> 31);
            if ((int)(48 - v3118) >= v3183)
            {
              v3184 = *v2699;
              v3185 = v3116 - v2905 + 40;
              if (v3185 >= v3183 - 1)
                v3186 = v3183 - 1;
              else
                v3186 = v3116 - v2905 + 40;
              v3187 = v3116 - v2905 - v3186 + 47;
              if (v3187 < 0x78)
                goto LABEL_2404;
              if (v3185 >= v3183 - 1)
                v3185 = v3183 - 1;
              if (v2699 < (uint8x8_t *)&v3175->i8[((v3116 - v2905 - v3185 + 47) >> 3) + 1]
                && (unint64_t)v3175 < v4516)
              {
LABEL_2404:
                v3190 = *v2699;
                v3191 = v3175;
                v3192 = 48 - v3118;
                goto LABEL_2405;
              }
              v3189 = (v3187 >> 3) + 1;
              v3190 = (uint8x8_t)(*(_QWORD *)&v3184 + (v3189 & 0x3FFFFFF8));
              v3191 = (uint8x8_t *)((char *)v3175 + (v3189 & 0x3FFFFFF8));
              v3192 = v3182 - 8 * (v3189 & 0x3FFFFFF8);
              v3193 = vdupq_n_s32(v3182);
              v3194 = vaddq_s32(v3193, (int32x4_t)xmmword_208F3A6A0);
              v3195 = vaddq_s32(v3193, (int32x4_t)xmmword_208F3A6B0);
              v3196 = 0uLL;
              v3197 = (int32x4_t)v3180;
              v3198 = (int8x16_t)(unint64_t)v3117;
              v3199 = v3189 & 0x3FFFFFF8;
              v3200 = 0uLL;
              v3201 = 0uLL;
              v3202 = 0uLL;
              do
              {
                v3197 = vaddq_s32(v3197, v2700);
                v3203 = *v3175++;
                v3196 = vaddq_s32(v3196, v2700);
                v3204 = vmovl_u8(v3203);
                v3205 = vmovl_high_u16(v3204);
                v3206.i64[0] = v3205.u32[2];
                v3206.i64[1] = v3205.u32[3];
                v3207 = v3206;
                v3206.i64[0] = v3205.u32[0];
                v3206.i64[1] = v3205.u32[1];
                v3208 = v3206;
                v3209 = vmovl_u16(*(uint16x4_t *)v3204.i8);
                v3206.i64[0] = v3209.u32[2];
                v3206.i64[1] = v3209.u32[3];
                v3210 = v3206;
                v3206.i64[0] = v3209.u32[0];
                v3206.i64[1] = v3209.u32[1];
                v3211 = v3206;
                v3206.i64[0] = v3194.u32[2];
                v3206.i64[1] = v3194.u32[3];
                v3212 = v3206;
                v3206.i64[0] = v3194.u32[0];
                v3206.i64[1] = v3194.u32[1];
                v3213 = v3206;
                v3206.i64[0] = v3195.u32[2];
                v3206.i64[1] = v3195.u32[3];
                v3214 = v3206;
                v3206.i64[0] = v3195.u32[0];
                v3206.i64[1] = v3195.u32[1];
                v3202 = vorrq_s8((int8x16_t)vshlq_u64(v3207, v3212), v3202);
                v3201 = vorrq_s8((int8x16_t)vshlq_u64(v3208, v3213), v3201);
                v3200 = vorrq_s8((int8x16_t)vshlq_u64(v3210, v3214), v3200);
                v3198 = vorrq_s8((int8x16_t)vshlq_u64(v3211, v3206), v3198);
                *(_QWORD *)&v3184 += 8;
                v3195 = vaddq_s32(v3195, v2701);
                v3194 = vaddq_s32(v3194, v2701);
                v3199 -= 8;
              }
              while (v3199);
              *v2699 = v3184;
              v3215 = vorrq_s8(vorrq_s8(v3198, v3201), vorrq_s8(v3200, v3202));
              v3117 = vorr_s8(*(int8x8_t *)v3215.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3215, v3215, 8uLL));
              v3180 = vaddvq_s32(vaddq_s32(v3197, v3196));
              if ((v3189 & 0x3FFFFFF8) != v3189)
              {
LABEL_2405:
                v3320 = (uint8x8_t)(*(_QWORD *)&v3190 + 1);
                do
                {
                  v3180 += 8;
                  v3321 = v3191->u8[0];
                  v3191 = (uint8x8_t *)((char *)v3191 + 1);
                  *(_QWORD *)&v3117 |= (unint64_t)v3321 << v3192;
                  *v2699 = v3320;
                  v3192 -= 8;
                  ++*(_QWORD *)&v3320;
                }
                while (v3192 >= v3183);
              }
            }
          }
          v3118 = v3180;
        }
        v3322 = (((v3119 - 1) * v3174) >> 8) + 1;
        v3323 = v3322 << 56;
        v3324 = v3117;
        v3325 = (int8x8_t)(*(_QWORD *)&v3117 - (v3322 << 56));
        if (*(_QWORD *)&v3117 >= (unint64_t)(v3322 << 56))
        {
          LODWORD(v3322) = *(_DWORD *)(v1 + 10668) - v3322;
          v3324 = v3325;
        }
        v3326 = vp8_norm[v3322];
        v3327 = (_DWORD)v3322 << v3326;
        v3328 = (int8x8_t)(*(_QWORD *)&v3324 << v3326);
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3324 << v3326;
        v3329 = v3118 - v3326;
        *(_DWORD *)(v1 + 10664) = v3118 - v3326;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v3322 << v3326;
        v3330 = v4483;
        if (*(_QWORD *)&v3117 >= v3323)
        {
          v3331 = v4458[2];
          if ((v3329 & 0x80000000) != 0)
          {
            v4473 = v4458[2];
            v3332 = v3173;
            v3333 = *(uint8x8_t **)(v1 + 10648);
            v3334 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3333;
            v3335 = *(void (**)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))(v1 + 10672);
            if (v3335)
            {
              if (v3334 >= 9)
                v3336 = 9;
              else
                v3336 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3333;
              v3335(*(_QWORD *)(v1 + 10680), v3333, v4541, v3336);
              v2701.i64[0] = 0x3F0000003FLL;
              v2701.i64[1] = 0x3F0000003FLL;
              v2700.i64[0] = 0x800000008;
              v2700.i64[1] = 0x800000008;
              v3333 = (uint8x8_t *)v4541;
            }
            v3337 = 48 - v3329;
            v3338 = 56 - 8 * v3334 - v3329;
            if (v3338 >= 0)
              v3329 += 0x40000000;
            if (8 * v3334)
              v3339 = 1;
            else
              v3339 = v3338 <= -1;
            v3340 = v3338 & ~(v3338 >> 31);
            if (!v3339 || v3337 < v3340)
            {
              v3330 = v4483;
              result = (uint64_t)vp8_bmode_tree;
              v3173 = v3332;
              v3331 = v4473;
            }
            else
            {
              v3342 = *v2699;
              v3343 = v3326 - v3118 + 40;
              if (v3343 >= v3340 - 1)
                v3344 = v3340 - 1;
              else
                v3344 = v3326 - v3118 + 40;
              v3345 = v3326 - v3118 - v3344 + 47;
              v3330 = v4483;
              result = (uint64_t)vp8_bmode_tree;
              v3173 = v3332;
              v3331 = v4473;
              if (v3345 < 0x78)
                goto LABEL_2443;
              if (v3343 >= v3340 - 1)
                v3343 = v3340 - 1;
              if (v2699 < (uint8x8_t *)&v3333->i8[((v3326 - v3118 - v3343 + 47) >> 3) + 1]
                && (unint64_t)v3333 < v4516)
              {
LABEL_2443:
                v3348 = *v2699;
                v3349 = v3333;
                v3350 = v3337;
                goto LABEL_2444;
              }
              v3347 = (v3345 >> 3) + 1;
              v3348 = (uint8x8_t)(*(_QWORD *)&v3342 + (v3347 & 0x3FFFFFF8));
              v3349 = (uint8x8_t *)((char *)v3333 + (v3347 & 0x3FFFFFF8));
              v3350 = v3337 - 8 * (v3347 & 0x3FFFFFF8);
              v3351 = vdupq_n_s32(v3337);
              v3352 = vaddq_s32(v3351, (int32x4_t)xmmword_208F3A6A0);
              v3353 = vaddq_s32(v3351, (int32x4_t)xmmword_208F3A6B0);
              v3354 = 0uLL;
              v3355 = (int32x4_t)v3329;
              v3356 = (int8x16_t)(unint64_t)v3328;
              v3357 = v3347 & 0x3FFFFFF8;
              v3358 = 0uLL;
              v3359 = 0uLL;
              v3360 = 0uLL;
              do
              {
                v3355 = vaddq_s32(v3355, v2700);
                v3361 = *v3333++;
                v3354 = vaddq_s32(v3354, v2700);
                v3362 = vmovl_u8(v3361);
                v3363 = vmovl_high_u16(v3362);
                v3364.i64[0] = v3363.u32[2];
                v3364.i64[1] = v3363.u32[3];
                v3365 = v3364;
                v3364.i64[0] = v3363.u32[0];
                v3364.i64[1] = v3363.u32[1];
                v3366 = v3364;
                v3367 = vmovl_u16(*(uint16x4_t *)v3362.i8);
                v3364.i64[0] = v3367.u32[2];
                v3364.i64[1] = v3367.u32[3];
                v3368 = v3364;
                v3364.i64[0] = v3367.u32[0];
                v3364.i64[1] = v3367.u32[1];
                v3369 = v3364;
                v3364.i64[0] = v3352.u32[2];
                v3364.i64[1] = v3352.u32[3];
                v3370 = v3364;
                v3364.i64[0] = v3352.u32[0];
                v3364.i64[1] = v3352.u32[1];
                v3371 = v3364;
                v3364.i64[0] = v3353.u32[2];
                v3364.i64[1] = v3353.u32[3];
                v3372 = v3364;
                v3364.i64[0] = v3353.u32[0];
                v3364.i64[1] = v3353.u32[1];
                v3360 = vorrq_s8((int8x16_t)vshlq_u64(v3365, v3370), v3360);
                v3359 = vorrq_s8((int8x16_t)vshlq_u64(v3366, v3371), v3359);
                v3358 = vorrq_s8((int8x16_t)vshlq_u64(v3368, v3372), v3358);
                v3356 = vorrq_s8((int8x16_t)vshlq_u64(v3369, v3364), v3356);
                *(_QWORD *)&v3342 += 8;
                v3353 = vaddq_s32(v3353, v2701);
                v3352 = vaddq_s32(v3352, v2701);
                v3357 -= 8;
              }
              while (v3357);
              *v2699 = v3342;
              v3373 = vorrq_s8(vorrq_s8(v3356, v3359), vorrq_s8(v3358, v3360));
              v3328 = vorr_s8(*(int8x8_t *)v3373.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3373, v3373, 8uLL));
              v3329 = vaddvq_s32(vaddq_s32(v3355, v3354));
              if ((v3347 & 0x3FFFFFF8) != v3347)
              {
LABEL_2444:
                v3374 = (uint8x8_t)(*(_QWORD *)&v3348 + 1);
                do
                {
                  v3329 += 8;
                  v3375 = v3349->u8[0];
                  v3349 = (uint8x8_t *)((char *)v3349 + 1);
                  *(_QWORD *)&v3328 |= (unint64_t)v3375 << v3350;
                  *v2699 = v3374;
                  v3350 -= 8;
                  ++*(_QWORD *)&v3374;
                }
                while (v3350 >= v3340);
              }
            }
          }
          v3376 = (((v3327 - 1) * v3331) >> 8) + 1;
          v3377 = (int8x8_t)(*(_QWORD *)&v3328 - (v3376 << 56));
          if (*(_QWORD *)&v3328 >= (unint64_t)(v3376 << 56))
          {
            LODWORD(v3376) = *(_DWORD *)(v1 + 10668) - v3376;
            v3378 = 3;
            v3328 = v3377;
          }
          else
          {
            v3378 = 2;
          }
          v3379 = vp8_norm[v3376];
          *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3328 << v3379;
          *(_DWORD *)(v1 + 10664) = v3329 - v3379;
          *(_DWORD *)(v1 + 10668) = (_DWORD)v3376 << v3379;
          *(_BYTE *)(v3330 + 2) = v3378;
        }
        v3380 = v3330 - 76 * v3173;
        v4538 = 0;
        v4537 = 0;
        v4539 = 0;
        v4540 = 0;
        v3381 = *(unsigned __int8 *)(v3380 + 2);
        if (*(_BYTE *)(v3380 + 2))
        {
          v3382 = *(_DWORD *)(v3380 + 4);
          if (v3382)
          {
            LODWORD(v4538) = *(_DWORD *)(v3380 + 4);
            v3383 = *(_DWORD *)(v4437 + 4 * v3381);
            v3385 = (uint64_t *)((char *)&v4539 + 4);
            v3384 = &v4538;
            if (*(_DWORD *)(v4437 + 4 * *(unsigned __int8 *)(v3330 + 2)) != v3383)
            {
              LOWORD(v4538) = -(__int16)v3382;
              WORD1(v4538) = -HIWORD(v3382);
              v3385 = (uint64_t *)((char *)&v4539 + 4);
              v3384 = &v4538;
            }
            v3386 = 2;
            HIDWORD(v4539) = 2;
            v3387 = *(unsigned __int8 *)(v3330 - 74);
            if (!*(_BYTE *)(v3330 - 74))
              goto LABEL_2468;
          }
          else
          {
            v3385 = &v4539;
            v3384 = (unint64_t *)&v4537;
            v3386 = 2;
            LODWORD(v4539) = 2;
            v3387 = *(unsigned __int8 *)(v3330 - 74);
            if (!*(_BYTE *)(v3330 - 74))
              goto LABEL_2468;
          }
        }
        else
        {
          v3386 = 0;
          v3385 = &v4539;
          v3384 = (unint64_t *)&v4537;
          v3387 = *(unsigned __int8 *)(v3330 - 74);
          if (!*(_BYTE *)(v3330 - 74))
            goto LABEL_2468;
        }
        v3388 = *(_DWORD *)(v3330 - 72);
        if (!v3388)
        {
          LODWORD(v4539) = v4539 + 2;
          v3395 = *(unsigned __int8 *)(v3380 - 74);
          if (!*(_BYTE *)(v3380 - 74))
            goto LABEL_2481;
          goto LABEL_2469;
        }
        v3389 = *(_DWORD *)(v4437 + 4 * v3387);
        v3390 = *(_DWORD *)(v4437 + 4 * *(unsigned __int8 *)(v3330 + 2));
        v3391 = v3390 == v3389;
        if (v3390 == v3389)
          LOWORD(v3392) = HIWORD(*(_DWORD *)(v3330 - 72));
        else
          v3392 = -HIWORD(v3388);
        if (!v3391)
          v3388 = -v3388;
        v3393 = (unsigned __int16)v3388 | ((unsigned __int16)v3392 << 16);
        if (v3393 != *(_DWORD *)v3384)
        {
          *((_DWORD *)v3384 + 1) = v3393;
          v3384 = (unint64_t *)((char *)v3384 + 4);
          v3394 = *((_DWORD *)v3385 + 1);
          v3385 = (uint64_t *)((char *)v3385 + 4);
          v3386 = v3394;
        }
        *(_DWORD *)v3385 = v3386 + 2;
LABEL_2468:
        v3395 = *(unsigned __int8 *)(v3380 - 74);
        if (!*(_BYTE *)(v3380 - 74))
          goto LABEL_2481;
LABEL_2469:
        v3396 = *(_DWORD *)(v3380 - 72);
        if (v3396)
        {
          v3397 = *(_DWORD *)(v4437 + 4 * v3395);
          v3398 = *(_DWORD *)(v4437 + 4 * *(unsigned __int8 *)(v3330 + 2));
          v3399 = v3398 == v3397;
          if (v3398 == v3397)
            LOWORD(v3400) = HIWORD(*(_DWORD *)(v3380 - 72));
          else
            v3400 = -HIWORD(v3396);
          if (!v3399)
            v3396 = -v3396;
          v3401 = (unsigned __int16)v3396 | ((unsigned __int16)v3400 << 16);
          if (v3401 != *(_DWORD *)v3384)
          {
            *((_DWORD *)v3384 + 1) = v3401;
            v3384 = (unint64_t *)((char *)v3384 + 4);
            v3385 = (uint64_t *)((char *)v3385 + 4);
          }
          ++*(_DWORD *)v3385;
        }
        else
        {
          LODWORD(v4539) = v4539 + 1;
        }
LABEL_2481:
        v3402 = v4539;
        v3403 = vp8_mode_contexts[4 * (int)v4539];
        v3404 = *(_DWORD *)(v1 + 10668);
        v3405 = *(_DWORD *)(v1 + 10664);
        v3406 = *(int8x8_t *)(v1 + 10656);
        v4474 = v3330 - 76 * v3173;
        if ((v3405 & 0x80000000) == 0)
          goto LABEL_2505;
        v3407 = *(uint8x8_t **)(v1 + 10648);
        v3408 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3407;
        v3409 = *(void (**)(_QWORD))(v1 + 10672);
        if (v3409)
        {
          v4464 = v4539;
          v3410 = v3173;
          v3411 = v3384;
          v3409(*(_QWORD *)(v1 + 10680));
          v3384 = v3411;
          v3402 = v4464;
          v3173 = v3410;
          v3380 = v4474;
          result = (uint64_t)vp8_bmode_tree;
          v2701.i64[0] = 0x3F0000003FLL;
          v2701.i64[1] = 0x3F0000003FLL;
          v2700.i64[0] = 0x800000008;
          v2700.i64[1] = 0x800000008;
          v3407 = (uint8x8_t *)v4541;
        }
        v3412 = 56 - v3405 - 8 * v3408;
        if (v3412 < 0)
          v3413 = v3405;
        else
          v3413 = v3405 + 0x40000000;
        if (8 * v3408)
          v3414 = 1;
        else
          v3414 = v3412 <= -1;
        if (v3414)
        {
          v3415 = 48 - v3405;
          v3416 = v3412 & ~(v3412 >> 31);
          if ((int)(48 - v3405) >= v3416)
          {
            v3417 = *v2699;
            v3418 = v3416 - 1;
            if (v3416 - 1 >= (int)(40 - v3405))
              v3419 = 40 - v3405;
            else
              v3419 = v3416 - 1;
            v3420 = 47 - v3405 - v3419;
            if (v3420 < 0x78)
              goto LABEL_2501;
            if (v3418 >= (int)(40 - v3405))
              v3418 = 40 - v3405;
            if (v2699 >= (uint8x8_t *)&v3407->i8[((47 - v3405 - v3418) >> 3) + 1] || (unint64_t)v3407 >= v4516)
            {
              v3537 = (v3420 >> 3) + 1;
              v3421 = (uint8x8_t)(*(_QWORD *)&v3417 + (v3537 & 0x3FFFFFF8));
              v3422 = (uint8x8_t *)((char *)v3407 + (v3537 & 0x3FFFFFF8));
              v3423 = v3415 - 8 * (v3537 & 0x3FFFFFF8);
              v3538 = vdupq_n_s32(v3415);
              v3539 = vaddq_s32(v3538, (int32x4_t)xmmword_208F3A6A0);
              v3540 = vaddq_s32(v3538, (int32x4_t)xmmword_208F3A6B0);
              v3541 = 0uLL;
              v3542 = (int32x4_t)v3413;
              v3543 = (int8x16_t)(unint64_t)v3406;
              v3544 = v3537 & 0x3FFFFFF8;
              v3545 = 0uLL;
              v3546 = 0uLL;
              v3547 = 0uLL;
              do
              {
                v3542 = vaddq_s32(v3542, v2700);
                v3548 = *v3407++;
                v3541 = vaddq_s32(v3541, v2700);
                v3549 = vmovl_u8(v3548);
                v3550 = vmovl_high_u16(v3549);
                v3551.i64[0] = v3550.u32[2];
                v3551.i64[1] = v3550.u32[3];
                v3552 = v3551;
                v3551.i64[0] = v3550.u32[0];
                v3551.i64[1] = v3550.u32[1];
                v3553 = v3551;
                v3554 = vmovl_u16(*(uint16x4_t *)v3549.i8);
                v3551.i64[0] = v3554.u32[2];
                v3551.i64[1] = v3554.u32[3];
                v3555 = v3551;
                v3551.i64[0] = v3554.u32[0];
                v3551.i64[1] = v3554.u32[1];
                v3556 = v3551;
                v3551.i64[0] = v3539.u32[2];
                v3551.i64[1] = v3539.u32[3];
                v3557 = v3551;
                v3551.i64[0] = v3539.u32[0];
                v3551.i64[1] = v3539.u32[1];
                v3558 = v3551;
                v3551.i64[0] = v3540.u32[2];
                v3551.i64[1] = v3540.u32[3];
                v3559 = v3551;
                v3551.i64[0] = v3540.u32[0];
                v3551.i64[1] = v3540.u32[1];
                v3547 = vorrq_s8((int8x16_t)vshlq_u64(v3552, v3557), v3547);
                v3546 = vorrq_s8((int8x16_t)vshlq_u64(v3553, v3558), v3546);
                v3545 = vorrq_s8((int8x16_t)vshlq_u64(v3555, v3559), v3545);
                v3543 = vorrq_s8((int8x16_t)vshlq_u64(v3556, v3551), v3543);
                *(_QWORD *)&v3417 += 8;
                v3540 = vaddq_s32(v3540, v2701);
                v3539 = vaddq_s32(v3539, v2701);
                v3544 -= 8;
              }
              while (v3544);
              *v2699 = v3417;
              v3560 = vorrq_s8(vorrq_s8(v3543, v3546), vorrq_s8(v3545, v3547));
              v3406 = vorr_s8(*(int8x8_t *)v3560.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3560, v3560, 8uLL));
              v3413 = vaddvq_s32(vaddq_s32(v3542, v3541));
              if ((v3537 & 0x3FFFFFF8) == v3537)
                goto LABEL_2504;
            }
            else
            {
LABEL_2501:
              v3421 = *v2699;
              v3422 = v3407;
              v3423 = 48 - v3405;
            }
            v3424 = (uint8x8_t)(*(_QWORD *)&v3421 + 1);
            do
            {
              v3413 += 8;
              v3425 = v3422->u8[0];
              v3422 = (uint8x8_t *)((char *)v3422 + 1);
              *(_QWORD *)&v3406 |= (unint64_t)v3425 << v3423;
              *v2699 = v3424;
              v3423 -= 8;
              ++*(_QWORD *)&v3424;
            }
            while (v3423 >= v3416);
          }
        }
LABEL_2504:
        v3405 = v3413;
LABEL_2505:
        v3426 = (((v3404 - 1) * v3403) >> 8) + 1;
        v3427 = v3426 << 56;
        v3428 = v3406;
        v3429 = (int8x8_t)(*(_QWORD *)&v3406 - (v3426 << 56));
        if (*(_QWORD *)&v3406 >= (unint64_t)(v3426 << 56))
        {
          LODWORD(v3426) = *(_DWORD *)(v1 + 10668) - v3426;
          v3428 = v3429;
        }
        v3430 = vp8_norm[v3426];
        v3431 = (_DWORD)v3426 << v3430;
        v3432 = (int8x8_t)(*(_QWORD *)&v3428 << v3430);
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3428 << v3430;
        v3433 = v3405 - v3430;
        *(_DWORD *)(v1 + 10664) = v3405 - v3430;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v3426 << v3430;
        if (*(_QWORD *)&v3406 < v3427)
        {
          v2696 = v4483;
          *(_BYTE *)v4483 = 7;
          *(_DWORD *)(v4483 + 4) = 0;
          goto LABEL_1891;
        }
        v3434 = v4540;
        v3435 = v4538;
        if (SHIDWORD(v4540) > 0 && *(_DWORD *)v3384 == (_DWORD)v4538)
          v3437 = HIDWORD(v4539) + 1;
        else
          v3437 = HIDWORD(v4539);
        if ((int)v4540 <= v3437)
        {
          v3438 = v4540;
          v3434 = v3437;
          v3439 = vp8_mode_contexts[4 * v3437 + 1];
          if ((v3433 & 0x80000000) == 0)
            goto LABEL_2549;
        }
        else
        {
          HIDWORD(v4539) = v4540;
          LODWORD(v4540) = v3437;
          v4538 = __PAIR64__(v4538, HIDWORD(v4538));
          v3435 = v4538;
          v3438 = v3437;
          v3439 = vp8_mode_contexts[4 * v3434 + 1];
          if ((v3433 & 0x80000000) == 0)
            goto LABEL_2549;
        }
        v3440 = *(uint8x8_t **)(v1 + 10648);
        v3441 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3440;
        v3442 = *(void (**)(_QWORD))(v1 + 10672);
        if (v3442)
        {
          v4465 = v3402;
          v4447 = v3173;
          v3443 = v3434;
          v4461 = v3435;
          v4452 = v3439;
          v3444 = v3438;
          v4454 = (_DWORD)v3426 << v3430;
          v3442(*(_QWORD *)(v1 + 10680));
          v3431 = v4454;
          v3438 = v3444;
          v3439 = v4452;
          v3435 = v4461;
          v3434 = v3443;
          v3402 = v4465;
          v3173 = v4447;
          v3380 = v4474;
          result = (uint64_t)vp8_bmode_tree;
          v2701.i64[0] = 0x3F0000003FLL;
          v2701.i64[1] = 0x3F0000003FLL;
          v2700.i64[0] = 0x800000008;
          v2700.i64[1] = 0x800000008;
          v3440 = (uint8x8_t *)v4541;
        }
        v3445 = 56 - 8 * v3441 - v3433;
        if (v3445 < 0)
          v3446 = v3405 - v3430;
        else
          v3446 = v3433 + 0x40000000;
        if (8 * v3441)
          v3447 = 1;
        else
          v3447 = v3445 <= -1;
        if (v3447)
        {
          v3448 = 48 - v3433;
          v3449 = v3445 & ~(v3445 >> 31);
          if ((int)(48 - v3433) >= v3449)
          {
            v3450 = *v2699;
            v3451 = v3430 - v3405 + 40;
            if (v3451 >= v3449 - 1)
              v3452 = v3449 - 1;
            else
              v3452 = v3430 - v3405 + 40;
            v3453 = v3430 - v3405 - v3452 + 47;
            if (v3453 < 0x78)
              goto LABEL_2545;
            if (v3451 >= v3449 - 1)
              v3451 = v3449 - 1;
            if (v2699 >= (uint8x8_t *)&v3440->i8[((v3430 - v3405 - v3451 + 47) >> 3) + 1]
              || (unint64_t)v3440 >= v4516)
            {
              v3455 = (v3453 >> 3) + 1;
              v3456 = (uint8x8_t)(*(_QWORD *)&v3450 + (v3455 & 0x3FFFFFF8));
              v3457 = (uint8x8_t *)((char *)v3440 + (v3455 & 0x3FFFFFF8));
              v3458 = v3448 - 8 * (v3455 & 0x3FFFFFF8);
              v3459 = vdupq_n_s32(v3448);
              v3460 = vaddq_s32(v3459, (int32x4_t)xmmword_208F3A6A0);
              v3461 = vaddq_s32(v3459, (int32x4_t)xmmword_208F3A6B0);
              v3462 = 0uLL;
              v3463 = (int32x4_t)v3446;
              v3464 = (int8x16_t)(unint64_t)v3432;
              v3465 = v3455 & 0x3FFFFFF8;
              v3466 = 0uLL;
              v3467 = 0uLL;
              v3468 = 0uLL;
              do
              {
                v3463 = vaddq_s32(v3463, v2700);
                v3469 = *v3440++;
                v3462 = vaddq_s32(v3462, v2700);
                v3470 = vmovl_u8(v3469);
                v3471 = vmovl_high_u16(v3470);
                v3472.i64[0] = v3471.u32[2];
                v3472.i64[1] = v3471.u32[3];
                v3473 = v3472;
                v3472.i64[0] = v3471.u32[0];
                v3472.i64[1] = v3471.u32[1];
                v3474 = v3472;
                v3475 = vmovl_u16(*(uint16x4_t *)v3470.i8);
                v3472.i64[0] = v3475.u32[2];
                v3472.i64[1] = v3475.u32[3];
                v3476 = v3472;
                v3472.i64[0] = v3475.u32[0];
                v3472.i64[1] = v3475.u32[1];
                v3477 = v3472;
                v3472.i64[0] = v3460.u32[2];
                v3472.i64[1] = v3460.u32[3];
                v3478 = v3472;
                v3472.i64[0] = v3460.u32[0];
                v3472.i64[1] = v3460.u32[1];
                v3479 = v3472;
                v3472.i64[0] = v3461.u32[2];
                v3472.i64[1] = v3461.u32[3];
                v3480 = v3472;
                v3472.i64[0] = v3461.u32[0];
                v3472.i64[1] = v3461.u32[1];
                v3468 = vorrq_s8((int8x16_t)vshlq_u64(v3473, v3478), v3468);
                v3467 = vorrq_s8((int8x16_t)vshlq_u64(v3474, v3479), v3467);
                v3466 = vorrq_s8((int8x16_t)vshlq_u64(v3476, v3480), v3466);
                v3464 = vorrq_s8((int8x16_t)vshlq_u64(v3477, v3472), v3464);
                *(_QWORD *)&v3450 += 8;
                v3461 = vaddq_s32(v3461, v2701);
                v3460 = vaddq_s32(v3460, v2701);
                v3465 -= 8;
              }
              while (v3465);
              *v2699 = v3450;
              v3481 = vorrq_s8(vorrq_s8(v3464, v3467), vorrq_s8(v3466, v3468));
              v3432 = vorr_s8(*(int8x8_t *)v3481.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3481, v3481, 8uLL));
              v3446 = vaddvq_s32(vaddq_s32(v3463, v3462));
              if ((v3455 & 0x3FFFFFF8) == v3455)
                goto LABEL_2548;
            }
            else
            {
LABEL_2545:
              v3456 = *v2699;
              v3457 = v3440;
              v3458 = 48 - v3433;
            }
            v3482 = (uint8x8_t)(*(_QWORD *)&v3456 + 1);
            do
            {
              v3446 += 8;
              v3483 = v3457->u8[0];
              v3457 = (uint8x8_t *)((char *)v3457 + 1);
              *(_QWORD *)&v3432 |= (unint64_t)v3483 << v3458;
              *v2699 = v3482;
              v3458 -= 8;
              ++*(_QWORD *)&v3482;
            }
            while (v3458 >= v3449);
          }
        }
LABEL_2548:
        v3433 = v3446;
LABEL_2549:
        v3484 = ((v3439 * (v3431 - 1)) >> 8) + 1;
        v3485 = v3484 << 56;
        v3486 = v3432;
        v3487 = (int8x8_t)(*(_QWORD *)&v3432 - (v3484 << 56));
        if (*(_QWORD *)&v3432 >= (unint64_t)(v3484 << 56))
        {
          LODWORD(v3484) = *(_DWORD *)(v1 + 10668) - v3484;
          v3486 = v3487;
        }
        v3488 = vp8_norm[v3484];
        v3489 = (_DWORD)v3484 << v3488;
        v3490 = (int8x8_t)(*(_QWORD *)&v3486 << v3488);
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3486 << v3488;
        v3491 = v3433 - v3488;
        *(_DWORD *)(v1 + 10664) = v3433 - v3488;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v3484 << v3488;
        if (*(_QWORD *)&v3432 < v3485)
        {
          v2696 = v4483;
          *(_BYTE *)v4483 = 5;
          *(_DWORD *)(v4483 + 4) = v3435;
          v3492 = v4457->i32[0] - 128;
          if (v3492 > v3435 >> 16 || (v3492 = *(_DWORD *)(v1 + 4008) + 128, v3492 < v3435 >> 16))
            *(_WORD *)(v4483 + 6) = v3492;
          v3493 = (__int16)v3435;
          v3494 = *(_DWORD *)(v1 + 4012) - 128;
          if (v3494 <= (__int16)v3435)
          {
LABEL_2599:
            v3494 = *(_DWORD *)(v1 + 4016) + 128;
            if (v3494 >= v3493)
              goto LABEL_1891;
          }
LABEL_2600:
          *(_WORD *)(v2696 + 4) = v3494;
          goto LABEL_1891;
        }
        v3495 = vp8_mode_contexts[4 * v3438 + 2];
        if ((v3491 & 0x80000000) != 0)
        {
          v3496 = *(uint8x8_t **)(v1 + 10648);
          v3497 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3496;
          v3498 = *(void (**)(_QWORD))(v1 + 10672);
          if (v3498)
          {
            v4466 = v3402;
            v4448 = v3173;
            v3499 = v3434;
            v3498(*(_QWORD *)(v1 + 10680));
            v3434 = v3499;
            v3402 = v4466;
            v3173 = v4448;
            v3380 = v4474;
            result = (uint64_t)vp8_bmode_tree;
            v2701.i64[0] = 0x3F0000003FLL;
            v2701.i64[1] = 0x3F0000003FLL;
            v2700.i64[0] = 0x800000008;
            v2700.i64[1] = 0x800000008;
            v3496 = (uint8x8_t *)v4541;
          }
          v3500 = 56 - 8 * v3497 - v3491;
          if (v3500 < 0)
            v3501 = v3433 - v3488;
          else
            v3501 = v3491 + 0x40000000;
          if (8 * v3497)
            v3502 = 1;
          else
            v3502 = v3500 <= -1;
          if (v3502)
          {
            v3503 = 48 - v3491;
            v3504 = v3500 & ~(v3500 >> 31);
            if ((int)(48 - v3491) >= v3504)
            {
              v3505 = *v2699;
              v3506 = v3488 - v3433 + 40;
              if (v3506 >= v3504 - 1)
                v3507 = v3504 - 1;
              else
                v3507 = v3488 - v3433 + 40;
              v3508 = v3488 - v3433 - v3507 + 47;
              if (v3508 < 0x78)
                goto LABEL_2588;
              if (v3506 >= v3504 - 1)
                v3506 = v3504 - 1;
              if (v2699 < (uint8x8_t *)&v3496->i8[((v3488 - v3433 - v3506 + 47) >> 3) + 1]
                && (unint64_t)v3496 < v4516)
              {
LABEL_2588:
                v3511 = *v2699;
                v3512 = v3496;
                v3513 = 48 - v3491;
                goto LABEL_2589;
              }
              v3510 = (v3508 >> 3) + 1;
              v3511 = (uint8x8_t)(*(_QWORD *)&v3505 + (v3510 & 0x3FFFFFF8));
              v3512 = (uint8x8_t *)((char *)v3496 + (v3510 & 0x3FFFFFF8));
              v3513 = v3503 - 8 * (v3510 & 0x3FFFFFF8);
              v3514 = vdupq_n_s32(v3503);
              v3515 = vaddq_s32(v3514, (int32x4_t)xmmword_208F3A6A0);
              v3516 = vaddq_s32(v3514, (int32x4_t)xmmword_208F3A6B0);
              v3517 = 0uLL;
              v3518 = (int32x4_t)v3501;
              v3519 = (int8x16_t)(unint64_t)v3490;
              v3520 = v3510 & 0x3FFFFFF8;
              v3521 = 0uLL;
              v3522 = 0uLL;
              v3523 = 0uLL;
              do
              {
                v3518 = vaddq_s32(v3518, v2700);
                v3524 = *v3496++;
                v3517 = vaddq_s32(v3517, v2700);
                v3525 = vmovl_u8(v3524);
                v3526 = vmovl_high_u16(v3525);
                v3527.i64[0] = v3526.u32[2];
                v3527.i64[1] = v3526.u32[3];
                v3528 = v3527;
                v3527.i64[0] = v3526.u32[0];
                v3527.i64[1] = v3526.u32[1];
                v3529 = v3527;
                v3530 = vmovl_u16(*(uint16x4_t *)v3525.i8);
                v3527.i64[0] = v3530.u32[2];
                v3527.i64[1] = v3530.u32[3];
                v3531 = v3527;
                v3527.i64[0] = v3530.u32[0];
                v3527.i64[1] = v3530.u32[1];
                v3532 = v3527;
                v3527.i64[0] = v3515.u32[2];
                v3527.i64[1] = v3515.u32[3];
                v3533 = v3527;
                v3527.i64[0] = v3515.u32[0];
                v3527.i64[1] = v3515.u32[1];
                v3534 = v3527;
                v3527.i64[0] = v3516.u32[2];
                v3527.i64[1] = v3516.u32[3];
                v3535 = v3527;
                v3527.i64[0] = v3516.u32[0];
                v3527.i64[1] = v3516.u32[1];
                v3523 = vorrq_s8((int8x16_t)vshlq_u64(v3528, v3533), v3523);
                v3522 = vorrq_s8((int8x16_t)vshlq_u64(v3529, v3534), v3522);
                v3521 = vorrq_s8((int8x16_t)vshlq_u64(v3531, v3535), v3521);
                v3519 = vorrq_s8((int8x16_t)vshlq_u64(v3532, v3527), v3519);
                *(_QWORD *)&v3505 += 8;
                v3516 = vaddq_s32(v3516, v2701);
                v3515 = vaddq_s32(v3515, v2701);
                v3520 -= 8;
              }
              while (v3520);
              *v2699 = v3505;
              v3536 = vorrq_s8(vorrq_s8(v3519, v3522), vorrq_s8(v3521, v3523));
              v3490 = vorr_s8(*(int8x8_t *)v3536.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3536, v3536, 8uLL));
              v3501 = vaddvq_s32(vaddq_s32(v3518, v3517));
              if ((v3510 & 0x3FFFFFF8) != v3510)
              {
LABEL_2589:
                v3561 = (uint8x8_t)(*(_QWORD *)&v3511 + 1);
                do
                {
                  v3501 += 8;
                  v3562 = v3512->u8[0];
                  v3512 = (uint8x8_t *)((char *)v3512 + 1);
                  *(_QWORD *)&v3490 |= (unint64_t)v3562 << v3513;
                  *v2699 = v3561;
                  v3513 -= 8;
                  ++*(_QWORD *)&v3561;
                }
                while (v3513 >= v3504);
              }
            }
          }
          v3491 = v3501;
        }
        v3563 = ((v3495 * (v3489 - 1)) >> 8) + 1;
        v3564 = v3563 << 56;
        v3565 = v3490;
        v3566 = (int8x8_t)(*(_QWORD *)&v3490 - (v3563 << 56));
        if (*(_QWORD *)&v3490 >= (unint64_t)(v3563 << 56))
        {
          LODWORD(v3563) = *(_DWORD *)(v1 + 10668) - v3563;
          v3565 = v3566;
        }
        v3567 = vp8_norm[v3563];
        v3568 = (_DWORD)v3563 << v3567;
        v3569 = (int8x8_t)(*(_QWORD *)&v3565 << v3567);
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3565 << v3567;
        v3570 = v3491 - v3567;
        *(_DWORD *)(v1 + 10664) = v3491 - v3567;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v3563 << v3567;
        if (*(_QWORD *)&v3490 < v3564)
        {
          v2696 = v4483;
          *(_BYTE *)v4483 = 6;
          v3571 = HIDWORD(v4538);
          *(_DWORD *)(v4483 + 4) = HIDWORD(v4538);
          v3572 = v4457->i32[0] - 128;
          if (v3572 > v3571 >> 16 || (v3572 = *(_DWORD *)(v1 + 4008) + 128, v3572 < v3571 >> 16))
            *(_WORD *)(v4483 + 6) = v3572;
          v3493 = (__int16)v3571;
          v3494 = *(_DWORD *)(v1 + 4012) - 128;
          if (v3494 <= v3493)
            goto LABEL_2599;
          goto LABEL_2600;
        }
        v4467 = *(_DWORD *)(v1 + 4008) + 128;
        v3573 = (__int16 *)((unint64_t)&v4537 | (4 * (v3434 >= v3402)));
        v3574 = v3573[1];
        v3575 = *(_DWORD *)(v1 + 4004) - 128;
        v4455 = v3575;
        if (v3575 <= v3574 && (v3575 = *(_DWORD *)(v1 + 4008) + 128, v4467 >= v3574))
          LOWORD(v3575) = v3573[1];
        else
          v3573[1] = v3575;
        v4462 = *(_DWORD *)(v1 + 4016) + 128;
        v3576 = *v3573;
        v3577 = *(_DWORD *)(v1 + 4012) - 128;
        v4453 = v3577;
        if (v3577 <= v3576 && (v3577 = *(_DWORD *)(v1 + 4016) + 128, v4462 >= v3576))
          LOWORD(v3577) = *v3573;
        else
          *v3573 = v3577;
        if (*(_BYTE *)v3380 == 9)
          v3578 = (*(_BYTE *)(v4483 - 76) == 9) + 1;
        else
          v3578 = *(unsigned __int8 *)(v4483 - 76) == 9;
        v3579 = *(_DWORD *)((char *)&vp8_mode_contexts[3] + ((16 * (*(_BYTE *)(v3380 - 76) == 9)) | (32 * v3578)));
        if ((v3570 & 0x80000000) != 0)
        {
          v3580 = *(uint8x8_t **)(v1 + 10648);
          v3581 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3580;
          v3582 = *(void (**)(_QWORD))(v1 + 10672);
          if (v3582)
          {
            v4442 = v3575;
            v4449 = v3173;
            v3583 = v3573;
            v4440 = (_DWORD)v3563 << v3567;
            v4438 = v3579;
            v3582(*(_QWORD *)(v1 + 10680));
            v3579 = v4438;
            v3568 = v4440;
            v3573 = v3583;
            LOWORD(v3575) = v4442;
            v3173 = v4449;
            v3380 = v4474;
            result = (uint64_t)vp8_bmode_tree;
            v2701.i64[0] = 0x3F0000003FLL;
            v2701.i64[1] = 0x3F0000003FLL;
            v2700.i64[0] = 0x800000008;
            v2700.i64[1] = 0x800000008;
            v3580 = (uint8x8_t *)v4541;
          }
          v3584 = 56 - 8 * v3581 - v3570;
          if (v3584 < 0)
            v3585 = v3491 - v3567;
          else
            v3585 = v3570 + 0x40000000;
          if (8 * v3581)
            v3586 = 1;
          else
            v3586 = v3584 <= -1;
          if (v3586)
          {
            v3587 = 48 - v3570;
            v3588 = v3584 & ~(v3584 >> 31);
            if ((int)(48 - v3570) >= v3588)
            {
              v3589 = *v2699;
              v3590 = v3567 - v3491 + 40;
              if (v3590 >= v3588 - 1)
                v3591 = v3588 - 1;
              else
                v3591 = v3567 - v3491 + 40;
              v3592 = v3567 - v3491 - v3591 + 47;
              if (v3592 < 0x78)
                goto LABEL_2632;
              if (v3590 >= v3588 - 1)
                v3590 = v3588 - 1;
              if (v2699 < (uint8x8_t *)&v3580->i8[((v3567 - v3491 - v3590 + 47) >> 3) + 1]
                && (unint64_t)v3580 < v4516)
              {
LABEL_2632:
                v3593 = *v2699;
                v3594 = v3580;
                v3595 = 48 - v3570;
                goto LABEL_2633;
              }
              v3711 = (v3592 >> 3) + 1;
              v3593 = (uint8x8_t)(*(_QWORD *)&v3589 + (v3711 & 0x3FFFFFF8));
              v3594 = (uint8x8_t *)((char *)v3580 + (v3711 & 0x3FFFFFF8));
              v3595 = v3587 - 8 * (v3711 & 0x3FFFFFF8);
              v3712 = vdupq_n_s32(v3587);
              v3713 = vaddq_s32(v3712, (int32x4_t)xmmword_208F3A6A0);
              v3714 = vaddq_s32(v3712, (int32x4_t)xmmword_208F3A6B0);
              v3715 = 0uLL;
              v3716 = (int32x4_t)v3585;
              v3717 = (int8x16_t)(unint64_t)v3569;
              v3718 = v3711 & 0x3FFFFFF8;
              v3719 = 0uLL;
              v3720 = 0uLL;
              v3721 = 0uLL;
              do
              {
                v3716 = vaddq_s32(v3716, v2700);
                v3722 = *v3580++;
                v3715 = vaddq_s32(v3715, v2700);
                v3723 = vmovl_u8(v3722);
                v3724 = vmovl_high_u16(v3723);
                v3725.i64[0] = v3724.u32[2];
                v3725.i64[1] = v3724.u32[3];
                v3726 = v3725;
                v3725.i64[0] = v3724.u32[0];
                v3725.i64[1] = v3724.u32[1];
                v3727 = v3725;
                v3728 = vmovl_u16(*(uint16x4_t *)v3723.i8);
                v3725.i64[0] = v3728.u32[2];
                v3725.i64[1] = v3728.u32[3];
                v3729 = v3725;
                v3725.i64[0] = v3728.u32[0];
                v3725.i64[1] = v3728.u32[1];
                v3730 = v3725;
                v3725.i64[0] = v3713.u32[2];
                v3725.i64[1] = v3713.u32[3];
                v3731 = v3725;
                v3725.i64[0] = v3713.u32[0];
                v3725.i64[1] = v3713.u32[1];
                v3732 = v3725;
                v3725.i64[0] = v3714.u32[2];
                v3725.i64[1] = v3714.u32[3];
                v3733 = v3725;
                v3725.i64[0] = v3714.u32[0];
                v3725.i64[1] = v3714.u32[1];
                v3721 = vorrq_s8((int8x16_t)vshlq_u64(v3726, v3731), v3721);
                v3720 = vorrq_s8((int8x16_t)vshlq_u64(v3727, v3732), v3720);
                v3719 = vorrq_s8((int8x16_t)vshlq_u64(v3729, v3733), v3719);
                v3717 = vorrq_s8((int8x16_t)vshlq_u64(v3730, v3725), v3717);
                *(_QWORD *)&v3589 += 8;
                v3714 = vaddq_s32(v3714, v2701);
                v3713 = vaddq_s32(v3713, v2701);
                v3718 -= 8;
              }
              while (v3718);
              *v2699 = v3589;
              v3734 = vorrq_s8(vorrq_s8(v3717, v3720), vorrq_s8(v3719, v3721));
              v3569 = vorr_s8(*(int8x8_t *)v3734.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3734, v3734, 8uLL));
              v3585 = vaddvq_s32(vaddq_s32(v3716, v3715));
              if ((v3711 & 0x3FFFFFF8) != v3711)
              {
LABEL_2633:
                v3596 = (uint8x8_t)(*(_QWORD *)&v3593 + 1);
                do
                {
                  v3585 += 8;
                  v3597 = v3594->u8[0];
                  v3594 = (uint8x8_t *)((char *)v3594 + 1);
                  *(_QWORD *)&v3569 |= (unint64_t)v3597 << v3595;
                  *v2699 = v3596;
                  v3595 -= 8;
                  ++*(_QWORD *)&v3596;
                }
                while (v3595 >= v3588);
              }
            }
          }
          v3570 = v3585;
        }
        v3598 = ((v3579 * (v3568 - 1)) >> 8) + 1;
        v3599 = v3598 << 56;
        v3600 = v3569;
        v3601 = (int8x8_t)(*(_QWORD *)&v3569 - (v3598 << 56));
        if (*(_QWORD *)&v3569 >= (unint64_t)(v3598 << 56))
        {
          LODWORD(v3598) = *(_DWORD *)(v1 + 10668) - v3598;
          v3600 = v3601;
        }
        v3602 = vp8_norm[v3598];
        v3603 = (_DWORD)v3598 << v3602;
        v3604 = (int8x8_t)(*(_QWORD *)&v3600 << v3602);
        *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3600 << v3602;
        v3605 = v3570 - v3602;
        *(_DWORD *)(v1 + 10664) = v3570 - v3602;
        *(_DWORD *)(v1 + 10668) = (_DWORD)v3598 << v3602;
        if (*(_QWORD *)&v3569 >= v3599)
        {
          v4427 = *(_DWORD *)v3573;
          if ((v3605 & 0x80000000) != 0)
          {
            v3615 = *(uint8x8_t **)(v1 + 10648);
            v3616 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3615;
            v3617 = *(void (**)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))(v1 + 10672);
            if (v3617)
            {
              if (v3616 >= 9)
                v3618 = 9;
              else
                v3618 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3615;
              v3619 = v3173;
              v3617(*(_QWORD *)(v1 + 10680), v3615, v4541, v3618);
              v3173 = v3619;
              v3380 = v4474;
              result = (uint64_t)vp8_bmode_tree;
              v2701.i64[0] = 0x3F0000003FLL;
              v2701.i64[1] = 0x3F0000003FLL;
              v2700.i64[0] = 0x800000008;
              v2700.i64[1] = 0x800000008;
              v3615 = (uint8x8_t *)v4541;
            }
            v3620 = 48 - v3605;
            v3621 = 56 - 8 * v3616 - v3605;
            if (v3621 >= 0)
              v3605 += 0x40000000;
            v3622 = 8 * v3616 || v3621 <= -1;
            v3623 = v3621 & ~(v3621 >> 31);
            if (v3622 && v3620 >= v3623)
            {
              v3625 = *v2699;
              v3626 = v3602 - v3570 + 40;
              if (v3626 >= v3623 - 1)
                v3627 = v3623 - 1;
              else
                v3627 = v3602 - v3570 + 40;
              v3628 = v3602 - v3570 - v3627 + 47;
              if (v3628 < 0x78)
                goto LABEL_2682;
              if (v3626 >= v3623 - 1)
                v3626 = v3623 - 1;
              if (v2699 < (uint8x8_t *)&v3615->i8[((v3602 - v3570 - v3626 + 47) >> 3) + 1]
                && (unint64_t)v3615 < v4516)
              {
LABEL_2682:
                v3631 = *v2699;
                v3632 = v3615;
                v3633 = v3620;
                goto LABEL_2683;
              }
              v3630 = (v3628 >> 3) + 1;
              v3631 = (uint8x8_t)(*(_QWORD *)&v3625 + (v3630 & 0x3FFFFFF8));
              v3632 = (uint8x8_t *)((char *)v3615 + (v3630 & 0x3FFFFFF8));
              v3633 = v3620 - 8 * (v3630 & 0x3FFFFFF8);
              v3634 = vdupq_n_s32(v3620);
              v3635 = vaddq_s32(v3634, (int32x4_t)xmmword_208F3A6A0);
              v3636 = vaddq_s32(v3634, (int32x4_t)xmmword_208F3A6B0);
              v3637 = 0uLL;
              v3638 = (int32x4_t)v3605;
              v3639 = (int8x16_t)(unint64_t)v3604;
              v3640 = v3630 & 0x3FFFFFF8;
              v3641 = 0uLL;
              v3642 = 0uLL;
              v3643 = 0uLL;
              do
              {
                v3638 = vaddq_s32(v3638, v2700);
                v3644 = *v3615++;
                v3637 = vaddq_s32(v3637, v2700);
                v3645 = vmovl_u8(v3644);
                v3646 = vmovl_high_u16(v3645);
                v3647.i64[0] = v3646.u32[2];
                v3647.i64[1] = v3646.u32[3];
                v3648 = v3647;
                v3647.i64[0] = v3646.u32[0];
                v3647.i64[1] = v3646.u32[1];
                v3649 = v3647;
                v3650 = vmovl_u16(*(uint16x4_t *)v3645.i8);
                v3647.i64[0] = v3650.u32[2];
                v3647.i64[1] = v3650.u32[3];
                v3651 = v3647;
                v3647.i64[0] = v3650.u32[0];
                v3647.i64[1] = v3650.u32[1];
                v3652 = v3647;
                v3647.i64[0] = v3635.u32[2];
                v3647.i64[1] = v3635.u32[3];
                v3653 = v3647;
                v3647.i64[0] = v3635.u32[0];
                v3647.i64[1] = v3635.u32[1];
                v3654 = v3647;
                v3647.i64[0] = v3636.u32[2];
                v3647.i64[1] = v3636.u32[3];
                v3655 = v3647;
                v3647.i64[0] = v3636.u32[0];
                v3647.i64[1] = v3636.u32[1];
                v3643 = vorrq_s8((int8x16_t)vshlq_u64(v3648, v3653), v3643);
                v3642 = vorrq_s8((int8x16_t)vshlq_u64(v3649, v3654), v3642);
                v3641 = vorrq_s8((int8x16_t)vshlq_u64(v3651, v3655), v3641);
                v3639 = vorrq_s8((int8x16_t)vshlq_u64(v3652, v3647), v3639);
                *(_QWORD *)&v3625 += 8;
                v3636 = vaddq_s32(v3636, v2701);
                v3635 = vaddq_s32(v3635, v2701);
                v3640 -= 8;
              }
              while (v3640);
              *v2699 = v3625;
              v3656 = vorrq_s8(vorrq_s8(v3639, v3642), vorrq_s8(v3641, v3643));
              v3604 = vorr_s8(*(int8x8_t *)v3656.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3656, v3656, 8uLL));
              v3605 = vaddvq_s32(vaddq_s32(v3638, v3637));
              if ((v3630 & 0x3FFFFFF8) != v3630)
              {
LABEL_2683:
                v3657 = (uint8x8_t)(*(_QWORD *)&v3631 + 1);
                do
                {
                  v3605 += 8;
                  v3658 = v3632->u8[0];
                  v3632 = (uint8x8_t *)((char *)v3632 + 1);
                  *(_QWORD *)&v3604 |= (unint64_t)v3658 << v3633;
                  *v2699 = v3657;
                  v3633 -= 8;
                  ++*(_QWORD *)&v3657;
                }
                while (v3633 >= v3623);
              }
            }
          }
          v3659 = ((110 * v3603 - 110) >> 8) + 1;
          v3660 = v3659 << 56;
          v3661 = v3604;
          v3662 = (int8x8_t)(*(_QWORD *)&v3604 - (v3659 << 56));
          if (*(_QWORD *)&v3604 >= (unint64_t)(v3659 << 56))
          {
            LODWORD(v3659) = *(_DWORD *)(v1 + 10668) - v3659;
            v3661 = v3662;
          }
          v3663 = vp8_norm[v3659];
          v3664 = (_DWORD)v3659 << v3663;
          v3665 = (int8x8_t)(*(_QWORD *)&v3661 << v3663);
          *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3661 << v3663;
          v3666 = v3605 - v3663;
          *(_DWORD *)(v1 + 10664) = v3605 - v3663;
          *(_DWORD *)(v1 + 10668) = (_DWORD)v3659 << v3663;
          if (*(_QWORD *)&v3604 < v3660)
          {
            v3667 = 3u;
            v3668 = 16;
            goto LABEL_2731;
          }
          if ((v3666 & 0x80000000) != 0)
          {
            v3669 = *(uint8x8_t **)(v1 + 10648);
            v3670 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3669;
            v3671 = *(void (**)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))(v1 + 10672);
            if (v3671)
            {
              if (v3670 >= 9)
                v3672 = 9;
              else
                v3672 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3669;
              v3673 = v3173;
              v3671(*(_QWORD *)(v1 + 10680), v3669, v4541, v3672);
              v3173 = v3673;
              v3380 = v4474;
              result = (uint64_t)vp8_bmode_tree;
              v2701.i64[0] = 0x3F0000003FLL;
              v2701.i64[1] = 0x3F0000003FLL;
              v2700.i64[0] = 0x800000008;
              v2700.i64[1] = 0x800000008;
              v3669 = (uint8x8_t *)v4541;
            }
            v3674 = 56 - 8 * v3670 - v3666;
            if (v3674 < 0)
              v3675 = v3605 - v3663;
            else
              v3675 = v3666 + 0x40000000;
            if (8 * v3670)
              v3676 = 1;
            else
              v3676 = v3674 <= -1;
            if (v3676)
            {
              v3677 = 48 - v3666;
              v3678 = v3674 & ~(v3674 >> 31);
              if ((int)(48 - v3666) >= v3678)
              {
                v3679 = *v2699;
                v3680 = v3663 - v3605 + 40;
                if (v3680 >= v3678 - 1)
                  v3681 = v3678 - 1;
                else
                  v3681 = v3663 - v3605 + 40;
                v3682 = v3663 - v3605 - v3681 + 47;
                if (v3682 < 0x78)
                  goto LABEL_2723;
                if (v3680 >= v3678 - 1)
                  v3680 = v3678 - 1;
                if (v2699 < (uint8x8_t *)&v3669->i8[((v3663 - v3605 - v3680 + 47) >> 3) + 1]
                  && (unint64_t)v3669 < v4516)
                {
LABEL_2723:
                  v3685 = *v2699;
                  v3686 = v3669;
                  v3687 = 48 - v3666;
                  goto LABEL_2724;
                }
                v3684 = (v3682 >> 3) + 1;
                v3685 = (uint8x8_t)(*(_QWORD *)&v3679 + (v3684 & 0x3FFFFFF8));
                v3686 = (uint8x8_t *)((char *)v3669 + (v3684 & 0x3FFFFFF8));
                v3687 = v3677 - 8 * (v3684 & 0x3FFFFFF8);
                v3688 = vdupq_n_s32(v3677);
                v3689 = vaddq_s32(v3688, (int32x4_t)xmmword_208F3A6A0);
                v3690 = vaddq_s32(v3688, (int32x4_t)xmmword_208F3A6B0);
                v3691 = 0uLL;
                v3692 = (int32x4_t)v3675;
                v3693 = (int8x16_t)(unint64_t)v3665;
                v3694 = v3684 & 0x3FFFFFF8;
                v3695 = 0uLL;
                v3696 = 0uLL;
                v3697 = 0uLL;
                do
                {
                  v3692 = vaddq_s32(v3692, v2700);
                  v3698 = *v3669++;
                  v3691 = vaddq_s32(v3691, v2700);
                  v3699 = vmovl_u8(v3698);
                  v3700 = vmovl_high_u16(v3699);
                  v3701.i64[0] = v3700.u32[2];
                  v3701.i64[1] = v3700.u32[3];
                  v3702 = v3701;
                  v3701.i64[0] = v3700.u32[0];
                  v3701.i64[1] = v3700.u32[1];
                  v3703 = v3701;
                  v3704 = vmovl_u16(*(uint16x4_t *)v3699.i8);
                  v3701.i64[0] = v3704.u32[2];
                  v3701.i64[1] = v3704.u32[3];
                  v3705 = v3701;
                  v3701.i64[0] = v3704.u32[0];
                  v3701.i64[1] = v3704.u32[1];
                  v3706 = v3701;
                  v3701.i64[0] = v3689.u32[2];
                  v3701.i64[1] = v3689.u32[3];
                  v3707 = v3701;
                  v3701.i64[0] = v3689.u32[0];
                  v3701.i64[1] = v3689.u32[1];
                  v3708 = v3701;
                  v3701.i64[0] = v3690.u32[2];
                  v3701.i64[1] = v3690.u32[3];
                  v3709 = v3701;
                  v3701.i64[0] = v3690.u32[0];
                  v3701.i64[1] = v3690.u32[1];
                  v3697 = vorrq_s8((int8x16_t)vshlq_u64(v3702, v3707), v3697);
                  v3696 = vorrq_s8((int8x16_t)vshlq_u64(v3703, v3708), v3696);
                  v3695 = vorrq_s8((int8x16_t)vshlq_u64(v3705, v3709), v3695);
                  v3693 = vorrq_s8((int8x16_t)vshlq_u64(v3706, v3701), v3693);
                  *(_QWORD *)&v3679 += 8;
                  v3690 = vaddq_s32(v3690, v2701);
                  v3689 = vaddq_s32(v3689, v2701);
                  v3694 -= 8;
                }
                while (v3694);
                *v2699 = v3679;
                v3710 = vorrq_s8(vorrq_s8(v3693, v3696), vorrq_s8(v3695, v3697));
                v3665 = vorr_s8(*(int8x8_t *)v3710.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3710, v3710, 8uLL));
                v3675 = vaddvq_s32(vaddq_s32(v3692, v3691));
                if ((v3684 & 0x3FFFFFF8) != v3684)
                {
LABEL_2724:
                  v3735 = (uint8x8_t)(*(_QWORD *)&v3685 + 1);
                  do
                  {
                    v3675 += 8;
                    v3736 = v3686->u8[0];
                    v3686 = (uint8x8_t *)((char *)v3686 + 1);
                    *(_QWORD *)&v3665 |= (unint64_t)v3736 << v3687;
                    *v2699 = v3735;
                    v3687 -= 8;
                    ++*(_QWORD *)&v3735;
                  }
                  while (v3687 >= v3678);
                }
              }
            }
            v3666 = v3675;
          }
          v3737 = ((111 * v3664 - 111) >> 8) + 1;
          v3738 = v3737 << 56;
          v3739 = v3665;
          v3740 = (int8x8_t)(*(_QWORD *)&v3665 - (v3737 << 56));
          if (*(_QWORD *)&v3665 >= (unint64_t)(v3737 << 56))
          {
            LODWORD(v3737) = *(_DWORD *)(v1 + 10668) - v3737;
            v3739 = v3740;
          }
          v3741 = vp8_norm[v3737];
          v3742 = (_DWORD)v3737 << v3741;
          v3743 = (int8x8_t)(*(_QWORD *)&v3739 << v3741);
          *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3739 << v3741;
          v3744 = v3666 - v3741;
          *(_DWORD *)(v1 + 10664) = v3666 - v3741;
          *(_DWORD *)(v1 + 10668) = (_DWORD)v3737 << v3741;
          if (*(_QWORD *)&v3665 < v3738)
          {
            v3667 = 2u;
            v3668 = 4;
LABEL_2731:
            v4450 = v3668;
            v2696 = v4483;
LABEL_2770:
            v3792 = 0;
            v4439 = v2696 + 8;
            v4441 = v3667;
            v4431 = v2696 - 52;
            v4432 = (unsigned int *)(v2696 - 72);
            v4435 = (unsigned int *)(v3380 + 4);
            v4436 = v2696 - 4;
            v4428 = v2696 - 76 * v3173 + 60;
            while (2)
            {
              v3793 = vp8_mbsplit_offset[16 * v3667 + v3792];
              if ((v3793 & 3) != 0)
              {
                v3794 = *(_DWORD *)(v4439 + 4 * v3793);
                if (v3793 <= 3)
                  goto LABEL_2773;
LABEL_2778:
                v3796 = v4436;
LABEL_2779:
                v3795 = (unsigned int *)(v3796 + 4 * v3793);
              }
              else
              {
                v3797 = (unsigned int *)(v4431 + 4 * v3793);
                if (*(_BYTE *)(v2696 - 76) != 9)
                  v3797 = v4432;
                v3794 = *v3797;
                if (v3793 > 3)
                  goto LABEL_2778;
LABEL_2773:
                v3795 = v4435;
                if (*(_BYTE *)v3380 == 9)
                {
                  v3796 = v4428;
                  goto LABEL_2779;
                }
              }
              v3798 = *v3795;
              v3799 = (unsigned __int8 *)&vp8_sub_mv_ref_prob3
                    + 3 * ((2 * (v3794 == 0)) | (4 * (v3798 == 0)) | (v3794 == v3798));
              v3800 = *v3799;
              v3801 = *(_DWORD *)(v1 + 10668);
              v3802 = *(_DWORD *)(v1 + 10664);
              v3803 = *(int8x8_t *)(v1 + 10656);
              if ((v3802 & 0x80000000) != 0)
              {
                v3804 = *(uint8x8_t **)(v1 + 10648);
                v3805 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3804;
                v3806 = *(void (**)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))(v1 + 10672);
                if (v3806)
                {
                  if (v3805 >= 9)
                    v3807 = 9;
                  else
                    v3807 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3804;
                  v4443 = (char *)&vp8_sub_mv_ref_prob3
                        + 3 * ((2 * (v3794 == 0)) | (4 * (v3798 == 0)) | (v3794 == v3798));
                  v3808 = v3792;
                  v3809 = v3794;
                  v4433 = *(_DWORD *)(v1 + 10668);
                  v3806(*(_QWORD *)(v1 + 10680), v3804, v4541, v3807);
                  v3801 = v4433;
                  v3794 = v3809;
                  v3667 = v4441;
                  v3799 = (unsigned __int8 *)v4443;
                  v3792 = v3808;
                  v3380 = v4474;
                  result = (uint64_t)vp8_bmode_tree;
                  v2701.i64[0] = 0x3F0000003FLL;
                  v2701.i64[1] = 0x3F0000003FLL;
                  v2700.i64[0] = 0x800000008;
                  v2700.i64[1] = 0x800000008;
                  v3804 = (uint8x8_t *)v4541;
                }
                v3810 = 56 - v3802 - 8 * v3805;
                if (v3810 < 0)
                  v3811 = v3802;
                else
                  v3811 = v3802 + 0x40000000;
                if (8 * v3805)
                  v3812 = 1;
                else
                  v3812 = v3810 <= -1;
                if (v3812)
                {
                  v3813 = 48 - v3802;
                  v3814 = v3810 & ~(v3810 >> 31);
                  if ((int)(48 - v3802) >= v3814)
                  {
                    v3815 = *v2699;
                    v3816 = v3814 - 1;
                    if (v3814 - 1 >= (int)(40 - v3802))
                      v3817 = 40 - v3802;
                    else
                      v3817 = v3814 - 1;
                    v3818 = 47 - v3802 - v3817;
                    if (v3818 < 0x78)
                      goto LABEL_2803;
                    if (v3816 >= (int)(40 - v3802))
                      v3816 = 40 - v3802;
                    if (v2699 < (uint8x8_t *)&v3804->i8[((47 - v3802 - v3816) >> 3) + 1]
                      && (unint64_t)v3804 < v4516)
                    {
LABEL_2803:
                      v3819 = *v2699;
                      v3820 = v3804;
                      v3821 = 48 - v3802;
                      goto LABEL_2804;
                    }
                    v3904 = (v3818 >> 3) + 1;
                    v3819 = (uint8x8_t)(*(_QWORD *)&v3815 + (v3904 & 0x3FFFFFF8));
                    v3820 = (uint8x8_t *)((char *)v3804 + (v3904 & 0x3FFFFFF8));
                    v3821 = v3813 - 8 * (v3904 & 0x3FFFFFF8);
                    v3905 = vdupq_n_s32(v3813);
                    v3906 = vaddq_s32(v3905, (int32x4_t)xmmword_208F3A6A0);
                    v3907 = vaddq_s32(v3905, (int32x4_t)xmmword_208F3A6B0);
                    v3908 = 0uLL;
                    v3909 = (int32x4_t)v3811;
                    v3910 = (int8x16_t)(unint64_t)v3803;
                    v3911 = v3904 & 0x3FFFFFF8;
                    v3912 = 0uLL;
                    v3913 = 0uLL;
                    v3914 = 0uLL;
                    do
                    {
                      v3909 = vaddq_s32(v3909, v2700);
                      v3915 = *v3804++;
                      v3908 = vaddq_s32(v3908, v2700);
                      v3916 = vmovl_u8(v3915);
                      v3917 = vmovl_high_u16(v3916);
                      v3918.i64[0] = v3917.u32[2];
                      v3918.i64[1] = v3917.u32[3];
                      v3919 = v3918;
                      v3918.i64[0] = v3917.u32[0];
                      v3918.i64[1] = v3917.u32[1];
                      v3920 = v3918;
                      v3921 = vmovl_u16(*(uint16x4_t *)v3916.i8);
                      v3918.i64[0] = v3921.u32[2];
                      v3918.i64[1] = v3921.u32[3];
                      v3922 = v3918;
                      v3918.i64[0] = v3921.u32[0];
                      v3918.i64[1] = v3921.u32[1];
                      v3923 = v3918;
                      v3918.i64[0] = v3906.u32[2];
                      v3918.i64[1] = v3906.u32[3];
                      v3924 = v3918;
                      v3918.i64[0] = v3906.u32[0];
                      v3918.i64[1] = v3906.u32[1];
                      v3925 = v3918;
                      v3918.i64[0] = v3907.u32[2];
                      v3918.i64[1] = v3907.u32[3];
                      v3926 = v3918;
                      v3918.i64[0] = v3907.u32[0];
                      v3918.i64[1] = v3907.u32[1];
                      v3914 = vorrq_s8((int8x16_t)vshlq_u64(v3919, v3924), v3914);
                      v3913 = vorrq_s8((int8x16_t)vshlq_u64(v3920, v3925), v3913);
                      v3912 = vorrq_s8((int8x16_t)vshlq_u64(v3922, v3926), v3912);
                      v3910 = vorrq_s8((int8x16_t)vshlq_u64(v3923, v3918), v3910);
                      *(_QWORD *)&v3815 += 8;
                      v3907 = vaddq_s32(v3907, v2701);
                      v3906 = vaddq_s32(v3906, v2701);
                      v3911 -= 8;
                    }
                    while (v3911);
                    *v2699 = v3815;
                    v3927 = vorrq_s8(vorrq_s8(v3910, v3913), vorrq_s8(v3912, v3914));
                    v3803 = vorr_s8(*(int8x8_t *)v3927.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3927, v3927, 8uLL));
                    v3811 = vaddvq_s32(vaddq_s32(v3909, v3908));
                    if ((v3904 & 0x3FFFFFF8) != v3904)
                    {
LABEL_2804:
                      v3822 = (uint8x8_t)(*(_QWORD *)&v3819 + 1);
                      do
                      {
                        v3811 += 8;
                        v3823 = v3820->u8[0];
                        v3820 = (uint8x8_t *)((char *)v3820 + 1);
                        *(_QWORD *)&v3803 |= (unint64_t)v3823 << v3821;
                        *v2699 = v3822;
                        v3821 -= 8;
                        ++*(_QWORD *)&v3822;
                      }
                      while (v3821 >= v3814);
                    }
                  }
                }
                v3802 = v3811;
              }
              v3824 = (((v3801 - 1) * v3800) >> 8) + 1;
              v3825 = v3824 << 56;
              v3826 = v3803;
              v3827 = (int8x8_t)(*(_QWORD *)&v3803 - (v3824 << 56));
              if (*(_QWORD *)&v3803 >= (unint64_t)(v3824 << 56))
              {
                LODWORD(v3824) = *(_DWORD *)(v1 + 10668) - v3824;
                v3826 = v3827;
              }
              v3828 = vp8_norm[v3824];
              v3829 = (_DWORD)v3824 << v3828;
              v3830 = (int8x8_t)(*(_QWORD *)&v3826 << v3828);
              *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3826 << v3828;
              v3831 = v3802 - v3828;
              *(_DWORD *)(v1 + 10664) = v3802 - v3828;
              *(_DWORD *)(v1 + 10668) = (_DWORD)v3824 << v3828;
              if (*(_QWORD *)&v3803 < v3825)
              {
                v3832 = HIWORD(v3794);
                LOWORD(v3798) = v3794;
                goto LABEL_2850;
              }
              v3833 = v3799[1];
              if ((v3831 & 0x80000000) != 0)
              {
                v4430 = v3799[1];
                v4444 = v3799;
                v4434 = v3792;
                v3834 = *(uint8x8_t **)(v1 + 10648);
                v3835 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3834;
                v3836 = *(void (**)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))(v1 + 10672);
                if (v3836)
                {
                  if (v3835 >= 9)
                    v3837 = 9;
                  else
                    v3837 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3834;
                  v3836(*(_QWORD *)(v1 + 10680), v3834, v4541, v3837);
                  v2701.i64[0] = 0x3F0000003FLL;
                  v2701.i64[1] = 0x3F0000003FLL;
                  v2700.i64[0] = 0x800000008;
                  v2700.i64[1] = 0x800000008;
                  v3834 = (uint8x8_t *)v4541;
                }
                v3838 = 48 - v3831;
                v3839 = 56 - 8 * v3835 - v3831;
                if (v3839 >= 0)
                  v3831 += 0x40000000;
                if (8 * v3835)
                  v3840 = 1;
                else
                  v3840 = v3839 <= -1;
                v3841 = v3839 & ~(v3839 >> 31);
                if (!v3840 || v3838 < v3841)
                {
                  result = (uint64_t)vp8_bmode_tree;
                  v3380 = v4474;
                  v3667 = v4441;
                  v3799 = v4444;
                  v3792 = v4434;
                  v3833 = v4430;
                }
                else
                {
                  v3843 = *v2699;
                  v3844 = v3828 - v3802 + 40;
                  if (v3844 >= v3841 - 1)
                    v3845 = v3841 - 1;
                  else
                    v3845 = v3828 - v3802 + 40;
                  v3846 = v3828 - v3802 - v3845 + 47;
                  result = (uint64_t)vp8_bmode_tree;
                  v3380 = v4474;
                  v3667 = v4441;
                  v3799 = v4444;
                  v3792 = v4434;
                  v3833 = v4430;
                  if (v3846 < 0x78)
                    goto LABEL_2843;
                  if (v3844 >= v3841 - 1)
                    v3844 = v3841 - 1;
                  if (v2699 < (uint8x8_t *)&v3834->i8[((v3828 - v3802 - v3844 + 47) >> 3) + 1]
                    && (unint64_t)v3834 < v4516)
                  {
LABEL_2843:
                    v3849 = *v2699;
                    v3850 = v3834;
                    v3851 = v3838;
                    goto LABEL_2844;
                  }
                  v3848 = (v3846 >> 3) + 1;
                  v3849 = (uint8x8_t)(*(_QWORD *)&v3843 + (v3848 & 0x3FFFFFF8));
                  v3850 = (uint8x8_t *)((char *)v3834 + (v3848 & 0x3FFFFFF8));
                  v3851 = v3838 - 8 * (v3848 & 0x3FFFFFF8);
                  v3852 = vdupq_n_s32(v3838);
                  v3853 = vaddq_s32(v3852, (int32x4_t)xmmword_208F3A6A0);
                  v3854 = vaddq_s32(v3852, (int32x4_t)xmmword_208F3A6B0);
                  v3855 = 0uLL;
                  v3856 = (int32x4_t)v3831;
                  v3857 = (int8x16_t)(unint64_t)v3830;
                  v3858 = v3848 & 0x3FFFFFF8;
                  v3859 = 0uLL;
                  v3860 = 0uLL;
                  v3861 = 0uLL;
                  do
                  {
                    v3856 = vaddq_s32(v3856, v2700);
                    v3862 = *v3834++;
                    v3855 = vaddq_s32(v3855, v2700);
                    v3863 = vmovl_u8(v3862);
                    v3864 = vmovl_high_u16(v3863);
                    v3865.i64[0] = v3864.u32[2];
                    v3865.i64[1] = v3864.u32[3];
                    v3866 = v3865;
                    v3865.i64[0] = v3864.u32[0];
                    v3865.i64[1] = v3864.u32[1];
                    v3867 = v3865;
                    v3868 = vmovl_u16(*(uint16x4_t *)v3863.i8);
                    v3865.i64[0] = v3868.u32[2];
                    v3865.i64[1] = v3868.u32[3];
                    v3869 = v3865;
                    v3865.i64[0] = v3868.u32[0];
                    v3865.i64[1] = v3868.u32[1];
                    v3870 = v3865;
                    v3865.i64[0] = v3853.u32[2];
                    v3865.i64[1] = v3853.u32[3];
                    v3871 = v3865;
                    v3865.i64[0] = v3853.u32[0];
                    v3865.i64[1] = v3853.u32[1];
                    v3872 = v3865;
                    v3865.i64[0] = v3854.u32[2];
                    v3865.i64[1] = v3854.u32[3];
                    v3873 = v3865;
                    v3865.i64[0] = v3854.u32[0];
                    v3865.i64[1] = v3854.u32[1];
                    v3861 = vorrq_s8((int8x16_t)vshlq_u64(v3866, v3871), v3861);
                    v3860 = vorrq_s8((int8x16_t)vshlq_u64(v3867, v3872), v3860);
                    v3859 = vorrq_s8((int8x16_t)vshlq_u64(v3869, v3873), v3859);
                    v3857 = vorrq_s8((int8x16_t)vshlq_u64(v3870, v3865), v3857);
                    *(_QWORD *)&v3843 += 8;
                    v3854 = vaddq_s32(v3854, v2701);
                    v3853 = vaddq_s32(v3853, v2701);
                    v3858 -= 8;
                  }
                  while (v3858);
                  *v2699 = v3843;
                  v3874 = vorrq_s8(vorrq_s8(v3857, v3860), vorrq_s8(v3859, v3861));
                  v3830 = vorr_s8(*(int8x8_t *)v3874.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3874, v3874, 8uLL));
                  v3831 = vaddvq_s32(vaddq_s32(v3856, v3855));
                  if ((v3848 & 0x3FFFFFF8) != v3848)
                  {
LABEL_2844:
                    v3875 = (uint8x8_t)(*(_QWORD *)&v3849 + 1);
                    do
                    {
                      v3831 += 8;
                      v3876 = v3850->u8[0];
                      v3850 = (uint8x8_t *)((char *)v3850 + 1);
                      *(_QWORD *)&v3830 |= (unint64_t)v3876 << v3851;
                      *v2699 = v3875;
                      v3851 -= 8;
                      ++*(_QWORD *)&v3875;
                    }
                    while (v3851 >= v3841);
                  }
                }
              }
              v3877 = (((v3829 - 1) * v3833) >> 8) + 1;
              v3878 = v3877 << 56;
              v3879 = v3830;
              v3880 = (int8x8_t)(*(_QWORD *)&v3830 - (v3877 << 56));
              if (*(_QWORD *)&v3830 >= (unint64_t)(v3877 << 56))
              {
                LODWORD(v3877) = *(_DWORD *)(v1 + 10668) - v3877;
                v3879 = v3880;
              }
              v3881 = vp8_norm[v3877];
              v3882 = (_DWORD)v3877 << v3881;
              v3883 = (int8x8_t)(*(_QWORD *)&v3879 << v3881);
              *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3879 << v3881;
              v3884 = v3831 - v3881;
              *(_DWORD *)(v1 + 10664) = v3831 - v3881;
              *(_DWORD *)(v1 + 10668) = (_DWORD)v3877 << v3881;
              if (*(_QWORD *)&v3830 < v3878)
              {
                v3832 = HIWORD(v3798);
LABEL_2850:
                v2696 = v4483;
LABEL_2851:
                v3888 = v4455 > (__int16)v3832
                     || v4467 < (__int16)v3832
                     || v4453 > (__int16)v3798
                     || v4462 < (__int16)v3798;
                *(_BYTE *)(v2696 + 10) |= v3888;
                v3889 = mbsplit_fill_count[v3667];
                v3890 = (unsigned __int8 *)&mbsplit_fill_offset + 16 * v3667 + v3792 * v3889;
                v3891 = (unsigned __int16)v3798 | ((unsigned __int16)v3832 << 16);
                do
                {
                  v3892 = *v3890++;
                  *(_DWORD *)(v2696 + 4 * v3892 + 12) = v3891;
                  LODWORD(v3889) = v3889 - 1;
                }
                while ((_DWORD)v3889);
                if (++v3792 == v4450)
                {
                  *(_BYTE *)(v2696 + 8) = v3667;
                  *(_DWORD *)(v2696 + 4) = *(_DWORD *)(v2696 + 72);
                  *(_BYTE *)v2696 = 9;
                  *(_BYTE *)(v2696 + 3) = 1;
                  goto LABEL_1891;
                }
                continue;
              }
              break;
            }
            v3893 = v3799[2];
            v2696 = v4483;
            if ((v3884 & 0x80000000) != 0)
            {
              v4445 = v3799[2];
              v3894 = v3792;
              v3895 = *(uint8x8_t **)(v1 + 10648);
              v3896 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3895;
              v3897 = *(void (**)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))(v1 + 10672);
              if (v3897)
              {
                if (v3896 >= 9)
                  v3898 = 9;
                else
                  v3898 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3895;
                v3897(*(_QWORD *)(v1 + 10680), v3895, v4541, v3898);
                v2701.i64[0] = 0x3F0000003FLL;
                v2701.i64[1] = 0x3F0000003FLL;
                v2700.i64[0] = 0x800000008;
                v2700.i64[1] = 0x800000008;
                v3895 = (uint8x8_t *)v4541;
              }
              v3899 = 48 - v3884;
              v3900 = 56 - 8 * v3896 - v3884;
              if (v3900 >= 0)
                v3884 += 0x40000000;
              if (8 * v3896)
                v3901 = 1;
              else
                v3901 = v3900 <= -1;
              v3902 = v3900 & ~(v3900 >> 31);
              if (!v3901 || v3899 < v3902)
              {
                v2696 = v4483;
                result = (uint64_t)vp8_bmode_tree;
                v3380 = v4474;
                v3667 = v4441;
                v3792 = v3894;
                v3893 = v4445;
              }
              else
              {
                v3928 = *v2699;
                v3929 = v3881 - v3831 + 40;
                if (v3929 >= v3902 - 1)
                  v3930 = v3902 - 1;
                else
                  v3930 = v3881 - v3831 + 40;
                v3931 = v3881 - v3831 - v3930 + 47;
                v2696 = v4483;
                result = (uint64_t)vp8_bmode_tree;
                v3380 = v4474;
                v3667 = v4441;
                v3792 = v3894;
                if (v3931 < 0x78)
                {
                  v3932 = *v2699;
                  v3933 = v3895;
                  v3934 = v3899;
                  v3893 = v4445;
                  goto LABEL_2903;
                }
                if (v3929 >= v3902 - 1)
                  v3929 = v3902 - 1;
                v3935 = v2699 >= (uint8x8_t *)&v3895->i8[((v3881 - v3831 - v3929 + 47) >> 3) + 1]
                     || (unint64_t)v3895 >= v4516;
                v3893 = v4445;
                if (!v3935)
                {
                  v3932 = *v2699;
                  v3933 = v3895;
                  v3934 = v3899;
                  goto LABEL_2903;
                }
                v3936 = (v3931 >> 3) + 1;
                v3932 = (uint8x8_t)(*(_QWORD *)&v3928 + (v3936 & 0x3FFFFFF8));
                v3933 = (uint8x8_t *)((char *)v3895 + (v3936 & 0x3FFFFFF8));
                v3934 = v3899 - 8 * (v3936 & 0x3FFFFFF8);
                v3937 = vdupq_n_s32(v3899);
                v3938 = vaddq_s32(v3937, (int32x4_t)xmmword_208F3A6A0);
                v3939 = vaddq_s32(v3937, (int32x4_t)xmmword_208F3A6B0);
                v3940 = 0uLL;
                v3941 = (int32x4_t)v3884;
                v3942 = (int8x16_t)(unint64_t)v3883;
                v3943 = v3936 & 0x3FFFFFF8;
                v3944 = 0uLL;
                v3945 = 0uLL;
                v3946 = 0uLL;
                do
                {
                  v3941 = vaddq_s32(v3941, v2700);
                  v3947 = *v3895++;
                  v3940 = vaddq_s32(v3940, v2700);
                  v3948 = vmovl_u8(v3947);
                  v3949 = vmovl_high_u16(v3948);
                  v3950.i64[0] = v3949.u32[2];
                  v3950.i64[1] = v3949.u32[3];
                  v3951 = v3950;
                  v3950.i64[0] = v3949.u32[0];
                  v3950.i64[1] = v3949.u32[1];
                  v3952 = v3950;
                  v3953 = vmovl_u16(*(uint16x4_t *)v3948.i8);
                  v3950.i64[0] = v3953.u32[2];
                  v3950.i64[1] = v3953.u32[3];
                  v3954 = v3950;
                  v3950.i64[0] = v3953.u32[0];
                  v3950.i64[1] = v3953.u32[1];
                  v3955 = v3950;
                  v3950.i64[0] = v3938.u32[2];
                  v3950.i64[1] = v3938.u32[3];
                  v3956 = v3950;
                  v3950.i64[0] = v3938.u32[0];
                  v3950.i64[1] = v3938.u32[1];
                  v3957 = v3950;
                  v3950.i64[0] = v3939.u32[2];
                  v3950.i64[1] = v3939.u32[3];
                  v3958 = v3950;
                  v3950.i64[0] = v3939.u32[0];
                  v3950.i64[1] = v3939.u32[1];
                  v3946 = vorrq_s8((int8x16_t)vshlq_u64(v3951, v3956), v3946);
                  v3945 = vorrq_s8((int8x16_t)vshlq_u64(v3952, v3957), v3945);
                  v3944 = vorrq_s8((int8x16_t)vshlq_u64(v3954, v3958), v3944);
                  v3942 = vorrq_s8((int8x16_t)vshlq_u64(v3955, v3950), v3942);
                  *(_QWORD *)&v3928 += 8;
                  v3939 = vaddq_s32(v3939, v2701);
                  v3938 = vaddq_s32(v3938, v2701);
                  v3943 -= 8;
                }
                while (v3943);
                *v2699 = v3928;
                v3959 = vorrq_s8(vorrq_s8(v3942, v3945), vorrq_s8(v3944, v3946));
                v3883 = vorr_s8(*(int8x8_t *)v3959.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3959, v3959, 8uLL));
                v3884 = vaddvq_s32(vaddq_s32(v3941, v3940));
                if ((v3936 & 0x3FFFFFF8) != v3936)
                {
LABEL_2903:
                  v3960 = (uint8x8_t)(*(_QWORD *)&v3932 + 1);
                  do
                  {
                    v3884 += 8;
                    v3961 = v3933->u8[0];
                    v3933 = (uint8x8_t *)((char *)v3933 + 1);
                    *(_QWORD *)&v3883 |= (unint64_t)v3961 << v3934;
                    *v2699 = v3960;
                    v3934 -= 8;
                    ++*(_QWORD *)&v3960;
                  }
                  while (v3934 >= v3902);
                }
              }
            }
            v3962 = (((v3882 - 1) * v3893) >> 8) + 1;
            v3963 = v3962 << 56;
            v3964 = v3883;
            v3965 = (int8x8_t)(*(_QWORD *)&v3883 - (v3962 << 56));
            if (*(_QWORD *)&v3883 >= (unint64_t)(v3962 << 56))
            {
              LODWORD(v3962) = *(_DWORD *)(v1 + 10668) - v3962;
              v3964 = v3965;
            }
            v3966 = vp8_norm[v3962];
            *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3964 << v3966;
            *(_DWORD *)(v1 + 10664) = v3884 - v3966;
            *(_DWORD *)(v1 + 10668) = (_DWORD)v3962 << v3966;
            if (*(_QWORD *)&v3883 >= v3963)
            {
              v3967 = v3792;
              LOWORD(v3798) = v4427 + 2 * read_mvcomponent(v4425, v4429);
              mvcomponent = read_mvcomponent(v4425, v4424);
              v3792 = v3967;
              v3667 = v4441;
              v3380 = v4474;
              v2701.i64[0] = 0x3F0000003FLL;
              v2701.i64[1] = 0x3F0000003FLL;
              v2700.i64[0] = 0x800000008;
              v2700.i64[1] = 0x800000008;
              LOWORD(v3832) = HIWORD(v4427) + 2 * mvcomponent;
              result = (uint64_t)vp8_bmode_tree;
            }
            else
            {
              LOWORD(v3832) = 0;
              LOWORD(v3798) = 0;
            }
            goto LABEL_2851;
          }
          v2696 = v4483;
          if ((v3744 & 0x80000000) != 0)
          {
            v3745 = *(uint8x8_t **)(v1 + 10648);
            v3746 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3745;
            v3747 = *(void (**)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))(v1 + 10672);
            if (v3747)
            {
              if (v3746 >= 9)
                v3748 = 9;
              else
                v3748 = *(_QWORD *)(v1 + 10640) - (_QWORD)v3745;
              v3749 = v3173;
              v3747(*(_QWORD *)(v1 + 10680), v3745, v4541, v3748);
              v3173 = v3749;
              v3380 = v4474;
              result = (uint64_t)vp8_bmode_tree;
              v2701.i64[0] = 0x3F0000003FLL;
              v2701.i64[1] = 0x3F0000003FLL;
              v2700.i64[0] = 0x800000008;
              v2700.i64[1] = 0x800000008;
              v3745 = (uint8x8_t *)v4541;
            }
            v3750 = 56 - 8 * v3746 - v3744;
            if (v3750 < 0)
              v3751 = v3666 - v3741;
            else
              v3751 = v3744 + 0x40000000;
            if (8 * v3746)
              v3752 = 1;
            else
              v3752 = v3750 <= -1;
            if (!v3752)
            {
              v2696 = v4483;
              goto LABEL_2765;
            }
            v3753 = 48 - v3744;
            v3754 = v3750 & ~(v3750 >> 31);
            v2696 = v4483;
            if ((int)(48 - v3744) >= v3754)
            {
              v3755 = *v2699;
              v3756 = v3741 - v3666 + 40;
              if (v3756 >= v3754 - 1)
                v3757 = v3754 - 1;
              else
                v3757 = v3741 - v3666 + 40;
              v3758 = v3741 - v3666 - v3757 + 47;
              if (v3758 < 0x78)
                goto LABEL_2762;
              if (v3756 >= v3754 - 1)
                v3756 = v3754 - 1;
              if (v2699 < (uint8x8_t *)&v3745->i8[((v3741 - v3666 - v3756 + 47) >> 3) + 1]
                && (unint64_t)v3745 < v4516)
              {
LABEL_2762:
                v3761 = *v2699;
                v3762 = v3745;
                v3763 = 48 - v3744;
                goto LABEL_2763;
              }
              v3760 = (v3758 >> 3) + 1;
              v3761 = (uint8x8_t)(*(_QWORD *)&v3755 + (v3760 & 0x3FFFFFF8));
              v3762 = (uint8x8_t *)((char *)v3745 + (v3760 & 0x3FFFFFF8));
              v3763 = v3753 - 8 * (v3760 & 0x3FFFFFF8);
              v3764 = vdupq_n_s32(v3753);
              v3765 = vaddq_s32(v3764, (int32x4_t)xmmword_208F3A6A0);
              v3766 = vaddq_s32(v3764, (int32x4_t)xmmword_208F3A6B0);
              v3767 = 0uLL;
              v3768 = (int32x4_t)v3751;
              v3769 = (int8x16_t)(unint64_t)v3743;
              v3770 = v3760 & 0x3FFFFFF8;
              v3771 = 0uLL;
              v3772 = 0uLL;
              v3773 = 0uLL;
              do
              {
                v3768 = vaddq_s32(v3768, v2700);
                v3774 = *v3745++;
                v3767 = vaddq_s32(v3767, v2700);
                v3775 = vmovl_u8(v3774);
                v3776 = vmovl_high_u16(v3775);
                v3777.i64[0] = v3776.u32[2];
                v3777.i64[1] = v3776.u32[3];
                v3778 = v3777;
                v3777.i64[0] = v3776.u32[0];
                v3777.i64[1] = v3776.u32[1];
                v3779 = v3777;
                v3780 = vmovl_u16(*(uint16x4_t *)v3775.i8);
                v3777.i64[0] = v3780.u32[2];
                v3777.i64[1] = v3780.u32[3];
                v3781 = v3777;
                v3777.i64[0] = v3780.u32[0];
                v3777.i64[1] = v3780.u32[1];
                v3782 = v3777;
                v3777.i64[0] = v3765.u32[2];
                v3777.i64[1] = v3765.u32[3];
                v3783 = v3777;
                v3777.i64[0] = v3765.u32[0];
                v3777.i64[1] = v3765.u32[1];
                v3784 = v3777;
                v3777.i64[0] = v3766.u32[2];
                v3777.i64[1] = v3766.u32[3];
                v3785 = v3777;
                v3777.i64[0] = v3766.u32[0];
                v3777.i64[1] = v3766.u32[1];
                v3773 = vorrq_s8((int8x16_t)vshlq_u64(v3778, v3783), v3773);
                v3772 = vorrq_s8((int8x16_t)vshlq_u64(v3779, v3784), v3772);
                v3771 = vorrq_s8((int8x16_t)vshlq_u64(v3781, v3785), v3771);
                v3769 = vorrq_s8((int8x16_t)vshlq_u64(v3782, v3777), v3769);
                *(_QWORD *)&v3755 += 8;
                v3766 = vaddq_s32(v3766, v2701);
                v3765 = vaddq_s32(v3765, v2701);
                v3770 -= 8;
              }
              while (v3770);
              *v2699 = v3755;
              v3786 = vorrq_s8(vorrq_s8(v3769, v3772), vorrq_s8(v3771, v3773));
              v3743 = vorr_s8(*(int8x8_t *)v3786.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3786, v3786, 8uLL));
              v3751 = vaddvq_s32(vaddq_s32(v3768, v3767));
              if ((v3760 & 0x3FFFFFF8) != v3760)
              {
LABEL_2763:
                v3787 = (uint8x8_t)(*(_QWORD *)&v3761 + 1);
                do
                {
                  v3751 += 8;
                  v3788 = v3762->u8[0];
                  v3762 = (uint8x8_t *)((char *)v3762 + 1);
                  *(_QWORD *)&v3743 |= (unint64_t)v3788 << v3763;
                  *v2699 = v3787;
                  v3763 -= 8;
                  ++*(_QWORD *)&v3787;
                }
                while (v3763 >= v3754);
              }
            }
LABEL_2765:
            v3744 = v3751;
          }
          v3789 = ((150 * v3742 - 150) >> 8) + 1;
          v3790 = (int8x8_t)(*(_QWORD *)&v3743 - (v3789 << 56));
          if (*(_QWORD *)&v3743 >= (unint64_t)(v3789 << 56))
          {
            LODWORD(v3789) = *(_DWORD *)(v1 + 10668) - v3789;
            v3743 = v3790;
            v3667 = 1u;
          }
          else
          {
            v3667 = 0;
          }
          v3791 = vp8_norm[v3789];
          *(_QWORD *)(v1 + 10656) = *(_QWORD *)&v3743 << v3791;
          *(_DWORD *)(v1 + 10664) = v3744 - v3791;
          *(_DWORD *)(v1 + 10668) = (_DWORD)v3789 << v3791;
          v4450 = 2;
          goto LABEL_2770;
        }
        v3606 = v3575;
        v3607 = v3577;
        v2696 = v4483;
        *(_WORD *)(v4483 + 4) = 2 * read_mvcomponent(v4425, v4429);
        v3608 = read_mvcomponent(v4425, v4424);
        v2701.i64[0] = 0x3F0000003FLL;
        v2701.i64[1] = 0x3F0000003FLL;
        v2700.i64[0] = 0x800000008;
        v2700.i64[1] = 0x800000008;
        v3609 = *(_WORD *)(v4483 + 4) + v3607;
        *(_WORD *)(v4483 + 4) = v3609;
        v3610 = v3606 + 2 * v3608;
        result = (uint64_t)vp8_bmode_tree;
        *(_WORD *)(v4483 + 6) = v3610;
        v3614 = v4455 > v3610 || v4467 < v3610 || v4453 > v3609 || v4462 < v3609;
        *(_BYTE *)(v4483 + 10) = v3614;
        *(_BYTE *)v4483 = 8;
LABEL_1891:
        *v4457 = vadd_s32(*v4457, (int32x2_t)0x7F0000007FLL);
        v2696 += 76;
        v2697 = *(_DWORD *)(v1 + 7432);
        if (++v4459 >= v2697)
        {
          v2698 = *(_DWORD *)(v1 + 4012);
          v2695 = *(_DWORD *)(v1 + 4016);
          v2694 = *(_DWORD *)(v1 + 7428);
          goto LABEL_1887;
        }
      }
      v2706 = *(uint8x8_t **)(v1 + 10648);
      v2707 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2706;
      v2708 = *(void (**)(_QWORD, uint8x8_t *, uint64_t *, uint64_t))(v1 + 10672);
      if (v2708)
      {
        if (v2707 >= 9)
          v2709 = 9;
        else
          v2709 = *(_QWORD *)(v1 + 10640) - (_QWORD)v2706;
        v2708(*(_QWORD *)(v1 + 10680), v2706, &v4539, v2709);
        v2701.i64[0] = 0x3F0000003FLL;
        v2701.i64[1] = 0x3F0000003FLL;
        v2700.i64[0] = 0x800000008;
        v2700.i64[1] = 0x800000008;
        v2706 = (uint8x8_t *)&v4539;
      }
      v2710 = 48 - v2704;
      v2711 = 56 - v2704 - 8 * v2707;
      if (v2711 < 0)
        v2712 = v2704;
      else
        v2712 = v2704 + 0x40000000;
      if (8 * v2707)
        v2713 = 1;
      else
        v2713 = v2711 <= -1;
      v2714 = v2711 & ~(v2711 >> 31);
      if (!v2713 || v2710 < v2714)
      {
        result = (uint64_t)vp8_bmode_tree;
      }
      else
      {
        v2717 = *v2699;
        v2718 = v2714 - 1;
        if (v2714 - 1 >= (int)(40 - v2704))
          v2719 = 40 - v2704;
        else
          v2719 = v2714 - 1;
        v2720 = 47 - v2704 - v2719;
        result = (uint64_t)vp8_bmode_tree;
        if (v2720 < 0x78)
          goto LABEL_1929;
        if (v2718 >= (int)(40 - v2704))
          v2718 = 40 - v2704;
        if (v2699 >= (uint8x8_t *)&v2706->i8[((47 - v2704 - v2718) >> 3) + 1] || (unint64_t)v2706 >= v4516)
        {
          v2722 = (v2720 >> 3) + 1;
          v2723 = (uint8x8_t)(*(_QWORD *)&v2717 + (v2722 & 0x3FFFFFF8));
          v2724 = (uint8x8_t *)((char *)v2706 + (v2722 & 0x3FFFFFF8));
          v2725 = v2710 - 8 * (v2722 & 0x3FFFFFF8);
          v2726 = vdupq_n_s32(v2710);
          v2727 = vaddq_s32(v2726, (int32x4_t)xmmword_208F3A6A0);
          v2728 = vaddq_s32(v2726, (int32x4_t)xmmword_208F3A6B0);
          v2729 = 0uLL;
          v2730 = (int32x4_t)v2712;
          v2731 = (int8x16_t)(unint64_t)v2705;
          v2732 = v2722 & 0x3FFFFFF8;
          v2733 = 0uLL;
          v2734 = 0uLL;
          v2735 = 0uLL;
          do
          {
            v2730 = vaddq_s32(v2730, v2700);
            v2736 = *v2706++;
            v2729 = vaddq_s32(v2729, v2700);
            v2737 = vmovl_u8(v2736);
            v2738 = vmovl_high_u16(v2737);
            v2739.i64[0] = v2738.u32[2];
            v2739.i64[1] = v2738.u32[3];
            v2740 = v2739;
            v2739.i64[0] = v2738.u32[0];
            v2739.i64[1] = v2738.u32[1];
            v2741 = v2739;
            v2742 = vmovl_u16(*(uint16x4_t *)v2737.i8);
            v2739.i64[0] = v2742.u32[2];
            v2739.i64[1] = v2742.u32[3];
            v2743 = v2739;
            v2739.i64[0] = v2742.u32[0];
            v2739.i64[1] = v2742.u32[1];
            v2744 = v2739;
            v2739.i64[0] = v2727.u32[2];
            v2739.i64[1] = v2727.u32[3];
            v2745 = v2739;
            v2739.i64[0] = v2727.u32[0];
            v2739.i64[1] = v2727.u32[1];
            v2746 = v2739;
            v2739.i64[0] = v2728.u32[2];
            v2739.i64[1] = v2728.u32[3];
            v2747 = v2739;
            v2739.i64[0] = v2728.u32[0];
            v2739.i64[1] = v2728.u32[1];
            v2735 = vorrq_s8((int8x16_t)vshlq_u64(v2740, v2745), v2735);
            v2734 = vorrq_s8((int8x16_t)vshlq_u64(v2741, v2746), v2734);
            v2733 = vorrq_s8((int8x16_t)vshlq_u64(v2743, v2747), v2733);
            v2731 = vorrq_s8((int8x16_t)vshlq_u64(v2744, v2739), v2731);
            *(_QWORD *)&v2717 += 8;
            v2728 = vaddq_s32(v2728, v2701);
            v2727 = vaddq_s32(v2727, v2701);
            v2732 -= 8;
          }
          while (v2732);
          *v2699 = v2717;
          v2748 = vorrq_s8(vorrq_s8(v2731, v2734), vorrq_s8(v2733, v2735));
          v2705 = vorr_s8(*(int8x8_t *)v2748.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2748, v2748, 8uLL));
          v2712 = vaddvq_s32(vaddq_s32(v2730, v2729));
          if ((v2722 & 0x3FFFFFF8) == v2722)
            goto LABEL_1932;
        }
        else
        {
LABEL_1929:
          v2723 = *v2699;
          v2724 = v2706;
          v2725 = 48 - v2704;
        }
        v2749 = (uint8x8_t)(*(_QWORD *)&v2723 + 1);
        do
        {
          v2712 += 8;
          v2750 = v2724->u8[0];
          v2724 = (uint8x8_t *)((char *)v2724 + 1);
          *(_QWORD *)&v2705 |= (unint64_t)v2750 << v2725;
          *v2699 = v2749;
          v2725 -= 8;
          ++*(_QWORD *)&v2749;
        }
        while (v2725 >= v2714);
      }
LABEL_1932:
      v2704 = v2712;
      goto LABEL_1933;
    }
    *(_DWORD *)(v1 + 4004) = 0;
    *(_DWORD *)(v1 + 4008) = (v2697 << 7) - 128;
    *(_DWORD *)(v1 + 4012) = -128 * v2694;
    *(_DWORD *)(v1 + 4016) = -128;
  }
  return result;
}

uint64_t read_mvcomponent(int8x8_t *a1, unsigned __int8 *a2)
{
  unsigned int v3;
  uint64_t v4;
  int8x8_t v5;
  unsigned int v6;
  uint8x8_t *v7;
  int8x8_t *v8;
  signed int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  void (*v13)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v14;
  BOOL v15;
  int v16;
  int8x8_t v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v23;
  int8x8_t v24;
  uint8x8_t *v25;
  int v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int8x16_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint8x8_t v39;
  uint16x8_t v40;
  uint32x4_t v41;
  uint64x2_t v42;
  uint64x2_t v43;
  uint64x2_t v44;
  uint32x4_t v45;
  uint64x2_t v46;
  uint64x2_t v47;
  uint64x2_t v48;
  uint64x2_t v49;
  uint64x2_t v50;
  int8x16_t v51;
  int8x8_t v52;
  unsigned int v53;
  unint64_t v54;
  int8x8_t v55;
  int8x8_t v56;
  int v57;
  int v58;
  int8x8_t v59;
  unsigned int v60;
  int v61;
  int8x8_t *v62;
  int32x4_t v63;
  int32x4_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  int v68;
  uint8x8_t *v69;
  unint64_t v70;
  void (*v71)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v72;
  signed int v73;
  int v74;
  unsigned int v75;
  BOOL v76;
  int v77;
  int8x8_t v79;
  int v80;
  int v81;
  unsigned int v82;
  uint64_t v84;
  int8x8_t v85;
  uint8x8_t *v86;
  int v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int8x16_t v93;
  uint64_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  uint8x8_t v98;
  uint16x8_t v99;
  uint32x4_t v100;
  uint64x2_t v101;
  uint64x2_t v102;
  uint64x2_t v103;
  uint32x4_t v104;
  uint64x2_t v105;
  uint64x2_t v106;
  uint64x2_t v107;
  uint64x2_t v108;
  uint64x2_t v109;
  int8x16_t v110;
  int8x8_t v111;
  unsigned int v112;
  int8x8_t v113;
  uint64_t v114;
  uint8x8_t *v115;
  int8x8_t *v116;
  signed int v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  void (*v121)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v122;
  BOOL v123;
  int v124;
  unsigned int v126;
  int8x8_t v128;
  int v129;
  int v130;
  unsigned int v131;
  uint64_t v133;
  int8x8_t v134;
  uint8x8_t *v135;
  signed int v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int8x16_t v142;
  int32x4_t v143;
  int32x4_t v144;
  uint64_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  uint8x8_t v149;
  uint16x8_t v150;
  uint32x4_t v151;
  uint64x2_t v152;
  uint64x2_t v153;
  uint64x2_t v154;
  uint32x4_t v155;
  uint64x2_t v156;
  uint64x2_t v157;
  uint64x2_t v158;
  uint64x2_t v159;
  uint64x2_t v160;
  int8x16_t v161;
  int8x8_t v162;
  unsigned int v163;
  int8x8_t v164;
  int v165;
  __int32 v166;
  int8x8_t v167;
  unsigned int v168;
  uint64_t v169;
  uint8x8_t *v170;
  int8x8_t *v171;
  signed int v172;
  unint64_t v173;
  uint64_t v174;
  int v175;
  void (*v176)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v177;
  BOOL v178;
  int v179;
  int8x8_t v181;
  int v182;
  int v183;
  unsigned int v184;
  uint64_t v186;
  int8x8_t v187;
  uint8x8_t *v188;
  signed int v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int8x16_t v195;
  int32x4_t v196;
  int32x4_t v197;
  uint64_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  uint8x8_t v202;
  uint16x8_t v203;
  uint32x4_t v204;
  uint64x2_t v205;
  uint64x2_t v206;
  uint64x2_t v207;
  uint32x4_t v208;
  uint64x2_t v209;
  uint64x2_t v210;
  uint64x2_t v211;
  uint64x2_t v212;
  uint64x2_t v213;
  int8x16_t v214;
  int8x8_t v215;
  unsigned int v216;
  int8x8_t v217;
  int v218;
  __int32 v219;
  int8x8_t v220;
  unsigned int v221;
  uint64_t v222;
  uint8x8_t *v223;
  int8x8_t *v224;
  signed int v225;
  unint64_t v226;
  uint64_t v227;
  int v228;
  void (*v229)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v230;
  BOOL v231;
  int v232;
  int8x8_t v234;
  int v235;
  int v236;
  unsigned int v237;
  uint64_t v239;
  int8x8_t v240;
  uint8x8_t *v241;
  signed int v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int8x16_t v248;
  int32x4_t v249;
  int32x4_t v250;
  uint64_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  uint8x8_t v255;
  uint16x8_t v256;
  uint32x4_t v257;
  uint64x2_t v258;
  uint64x2_t v259;
  uint64x2_t v260;
  uint32x4_t v261;
  uint64x2_t v262;
  uint64x2_t v263;
  uint64x2_t v264;
  uint64x2_t v265;
  uint64x2_t v266;
  int8x16_t v267;
  int8x8_t v268;
  unsigned int v269;
  int8x8_t v270;
  int v271;
  int v272;
  int8x8_t v273;
  unsigned int v274;
  uint64_t v275;
  uint8x8_t *v276;
  int8x8_t *v277;
  signed int v278;
  unint64_t v279;
  uint64_t v280;
  int v281;
  void (*v282)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v283;
  BOOL v284;
  int v285;
  int8x8_t v287;
  int v288;
  int v289;
  unsigned int v290;
  uint64_t v292;
  int8x8_t v293;
  uint8x8_t *v294;
  signed int v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int8x16_t v301;
  int32x4_t v302;
  int32x4_t v303;
  uint64_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;
  uint8x8_t v308;
  uint16x8_t v309;
  uint32x4_t v310;
  uint64x2_t v311;
  uint64x2_t v312;
  uint64x2_t v313;
  uint32x4_t v314;
  uint64x2_t v315;
  uint64x2_t v316;
  uint64x2_t v317;
  uint64x2_t v318;
  uint64x2_t v319;
  int8x16_t v320;
  int8x8_t v321;
  unsigned int v322;
  int8x8_t v323;
  int v324;
  int v325;
  int8x8_t v326;
  unsigned int v327;
  uint64_t v328;
  uint8x8_t *v329;
  int8x8_t *v330;
  signed int v331;
  unint64_t v332;
  uint64_t v333;
  int v334;
  void (*v335)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v336;
  BOOL v337;
  int v338;
  int8x8_t v340;
  int v341;
  int v342;
  unsigned int v343;
  uint64_t v345;
  int8x8_t v346;
  uint8x8_t *v347;
  signed int v348;
  int32x4_t v349;
  int32x4_t v350;
  int32x4_t v351;
  int32x4_t v352;
  int32x4_t v353;
  int8x16_t v354;
  int32x4_t v355;
  int32x4_t v356;
  uint64_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  uint8x8_t v361;
  uint16x8_t v362;
  uint32x4_t v363;
  uint64x2_t v364;
  uint64x2_t v365;
  uint64x2_t v366;
  uint32x4_t v367;
  uint64x2_t v368;
  uint64x2_t v369;
  uint64x2_t v370;
  uint64x2_t v371;
  uint64x2_t v372;
  int8x16_t v373;
  int8x8_t v374;
  unsigned int v375;
  int8x8_t v376;
  int v377;
  int v378;
  int8x8_t v379;
  unsigned int v380;
  unsigned int v381;
  uint64_t v382;
  uint8x8_t *v383;
  int8x8_t *v384;
  signed int v385;
  unint64_t v386;
  uint64_t v387;
  int v388;
  void (*v389)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v390;
  int v391;
  BOOL v392;
  int v393;
  int8x8_t v395;
  int v396;
  int v397;
  unsigned int v398;
  uint64_t v400;
  int8x8_t v401;
  uint8x8_t *v402;
  signed int v403;
  int32x4_t v404;
  int32x4_t v405;
  int32x4_t v406;
  int32x4_t v407;
  int32x4_t v408;
  int8x16_t v409;
  int32x4_t v410;
  int32x4_t v411;
  uint64_t v412;
  int8x16_t v413;
  int8x16_t v414;
  int8x16_t v415;
  uint8x8_t v416;
  uint16x8_t v417;
  uint32x4_t v418;
  uint64x2_t v419;
  uint64x2_t v420;
  uint64x2_t v421;
  uint32x4_t v422;
  uint64x2_t v423;
  uint64x2_t v424;
  uint64x2_t v425;
  uint64x2_t v426;
  uint64x2_t v427;
  int8x16_t v428;
  int8x8_t v429;
  unsigned int v430;
  int8x8_t v431;
  int v432;
  int v433;
  int8x8_t v434;
  unsigned int v435;
  unsigned int v436;
  uint64_t v437;
  int v438;
  int8x8_t v439;
  int v440;
  uint8x8_t *v441;
  int8x8_t *v442;
  signed int v443;
  unint64_t v444;
  uint64_t v445;
  int v446;
  void (*v447)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v448;
  int v449;
  BOOL v450;
  int v451;
  int8x8_t v453;
  int v454;
  int v455;
  unsigned int v456;
  uint64_t v458;
  int8x8_t v459;
  uint8x8_t *v460;
  signed int v461;
  int32x4_t v462;
  int32x4_t v463;
  int32x4_t v464;
  int32x4_t v465;
  int32x4_t v466;
  int8x16_t v467;
  int32x4_t v468;
  int32x4_t v469;
  uint64_t v470;
  int8x16_t v471;
  int8x16_t v472;
  int8x16_t v473;
  uint8x8_t v474;
  uint16x8_t v475;
  uint32x4_t v476;
  uint64x2_t v477;
  uint64x2_t v478;
  uint64x2_t v479;
  uint32x4_t v480;
  uint64x2_t v481;
  uint64x2_t v482;
  uint64x2_t v483;
  uint64x2_t v484;
  uint64x2_t v485;
  int8x16_t v486;
  int8x8_t v487;
  unsigned int v488;
  int v489;
  int v490;
  __int32 v491;
  int8x8_t v492;
  unsigned int v493;
  unsigned int v494;
  uint64_t v495;
  int v496;
  int8x8_t v497;
  int v498;
  uint8x8_t *v499;
  int8x8_t *v500;
  signed int v501;
  unint64_t v502;
  uint64_t v503;
  int v504;
  void (*v505)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  int v506;
  uint64_t v507;
  BOOL v508;
  int v509;
  int8x8_t v511;
  int v512;
  int v513;
  unsigned int v514;
  uint64_t v516;
  int8x8_t v517;
  uint8x8_t *v518;
  signed int v519;
  int32x4_t v520;
  int32x4_t v521;
  int32x4_t v522;
  int32x4_t v523;
  int32x4_t v524;
  int8x16_t v525;
  int32x4_t v526;
  int32x4_t v527;
  uint64_t v528;
  int8x16_t v529;
  int8x16_t v530;
  int8x16_t v531;
  uint8x8_t v532;
  uint16x8_t v533;
  uint32x4_t v534;
  uint64x2_t v535;
  uint64x2_t v536;
  uint64x2_t v537;
  uint32x4_t v538;
  uint64x2_t v539;
  uint64x2_t v540;
  uint64x2_t v541;
  uint64x2_t v542;
  uint64x2_t v543;
  int8x16_t v544;
  int8x8_t v545;
  unsigned int v546;
  int v547;
  int v548;
  int8x8_t v549;
  unsigned int v550;
  unsigned int v551;
  uint64_t v552;
  int v553;
  int8x8_t v554;
  int v555;
  uint8x8_t *v556;
  int8x8_t *v557;
  signed int v558;
  unint64_t v559;
  uint64_t v560;
  int v561;
  void (*v562)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v563;
  int v564;
  BOOL v565;
  int v566;
  int8x8_t v568;
  int v569;
  int v570;
  unsigned int v571;
  uint64_t v573;
  int8x8_t v574;
  uint8x8_t *v575;
  signed int v576;
  int32x4_t v577;
  int32x4_t v578;
  int32x4_t v579;
  int32x4_t v580;
  int32x4_t v581;
  int8x16_t v582;
  int32x4_t v583;
  int32x4_t v584;
  uint64_t v585;
  int8x16_t v586;
  int8x16_t v587;
  int8x16_t v588;
  uint8x8_t v589;
  uint16x8_t v590;
  uint32x4_t v591;
  uint64x2_t v592;
  uint64x2_t v593;
  uint64x2_t v594;
  uint32x4_t v595;
  uint64x2_t v596;
  uint64x2_t v597;
  uint64x2_t v598;
  uint64x2_t v599;
  uint64x2_t v600;
  int8x16_t v601;
  int8x8_t v602;
  unsigned int v603;
  int v604;
  int8x8_t v605;
  uint64_t v606;
  uint8x8_t *v607;
  int8x8_t *v608;
  unint64_t v609;
  uint64_t v610;
  int v611;
  void (*v612)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v613;
  unsigned int v614;
  BOOL v615;
  unsigned int v616;
  int v617;
  int8x8_t v618;
  int v619;
  int v620;
  unsigned int v621;
  uint64_t v623;
  int8x8_t v624;
  uint8x8_t *v625;
  int v626;
  int32x4_t v627;
  int32x4_t v628;
  int32x4_t v629;
  int32x4_t v630;
  int32x4_t v631;
  int8x16_t v632;
  int32x4_t v633;
  int32x4_t v634;
  uint64_t v635;
  int8x16_t v636;
  int8x16_t v637;
  int8x16_t v638;
  uint8x8_t v639;
  uint16x8_t v640;
  uint32x4_t v641;
  uint64x2_t v642;
  uint64x2_t v643;
  uint64x2_t v644;
  uint32x4_t v645;
  uint64x2_t v646;
  uint64x2_t v647;
  uint64x2_t v648;
  uint64x2_t v649;
  uint64x2_t v650;
  int8x16_t v651;
  int8x8_t v652;
  unsigned int v653;
  unint64_t v654;
  int8x8_t v655;
  int8x8_t v656;
  int v657;
  uint64_t v658;
  unint64_t v659;
  int8x8_t v660;
  int8x8_t v661;
  int v662;
  uint8x8_t *v663;
  int8x8_t *v664;
  signed int v665;
  unint64_t v666;
  uint64_t v667;
  int v668;
  void (*v669)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v670;
  unsigned int v671;
  BOOL v672;
  int v673;
  int8x8_t v675;
  int v676;
  int v677;
  unsigned int v678;
  uint64_t v680;
  int8x8_t v681;
  uint8x8_t *v682;
  int v683;
  int32x4_t v684;
  int32x4_t v685;
  int32x4_t v686;
  int32x4_t v687;
  int32x4_t v688;
  int8x16_t v689;
  int32x4_t v690;
  int32x4_t v691;
  uint64_t v692;
  int8x16_t v693;
  int8x16_t v694;
  int8x16_t v695;
  uint8x8_t v696;
  uint16x8_t v697;
  uint32x4_t v698;
  uint64x2_t v699;
  uint64x2_t v700;
  uint64x2_t v701;
  uint32x4_t v702;
  uint64x2_t v703;
  uint64x2_t v704;
  uint64x2_t v705;
  uint64x2_t v706;
  uint64x2_t v707;
  int8x16_t v708;
  int8x8_t v709;
  unsigned int v710;
  uint64_t v711;
  int v712;
  int v713;
  int v714;
  uint64_t v715;
  int v716;
  int v717;
  int v718;
  uint64_t v719;
  int v720;
  int v721;
  int v722;
  uint64_t v723;
  int v724;
  int v725;
  int v726;
  int v727;
  _BYTE v729[9];
  uint64_t v730;

  v730 = *MEMORY[0x24BDAC8D0];
  v3 = a1[3].u32[0];
  v4 = (((a1[3].i32[1] - 1) * *a2) >> 8) + 1;
  if ((v3 & 0x80000000) == 0)
  {
    v5 = a1[2];
    v6 = a1[3].u32[0];
    goto LABEL_36;
  }
  v8 = a1 + 1;
  v7 = (uint8x8_t *)a1[1];
  v5 = a1[2];
  v9 = 48 - v3;
  v10 = *(_QWORD *)a1 - (_QWORD)v7;
  v11 = 8 * v10;
  v12 = 56 - v3 - 8 * v10;
  v13 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
  if (v13)
  {
    if (v10 >= 9)
      v14 = 9;
    else
      v14 = *(_QWORD *)a1 - (_QWORD)v7;
    v13(*(_QWORD *)&a1[5], v7, v729, v14);
    v7 = (uint8x8_t *)v729;
  }
  if (v12 < 0)
    v6 = v3;
  else
    v6 = v3 + 0x40000000;
  if (v11)
    v15 = 1;
  else
    v15 = v12 <= -1;
  v16 = v12 & ~(v12 >> 31);
  if (v15 && v9 >= v16)
  {
    v18 = *v8;
    v19 = v16 - 1;
    if (v16 - 1 >= (int)(40 - v3))
      v20 = 40 - v3;
    else
      v20 = v16 - 1;
    v21 = 47 - v3 - v20;
    if (v21 < 0x78)
      goto LABEL_33;
    if (v19 >= (int)(40 - v3))
      v19 = 40 - v3;
    if (v8 < (int8x8_t *)((char *)v7 + ((47 - v3 - v19) >> 3) + 1) && v7 < (uint8x8_t *)&a1[2])
    {
LABEL_33:
      v24 = *v8;
      v25 = v7;
      v26 = 48 - v3;
LABEL_34:
      v52 = (int8x8_t)(*(_QWORD *)&v24 + 1);
      do
      {
        v6 += 8;
        v53 = v25->u8[0];
        v25 = (uint8x8_t *)((char *)v25 + 1);
        *(_QWORD *)&v5 |= (unint64_t)v53 << v26;
        *v8 = v52;
        v26 -= 8;
        ++*(_QWORD *)&v52;
      }
      while (v26 >= v16);
      goto LABEL_36;
    }
    v23 = (v21 >> 3) + 1;
    v24 = (int8x8_t)(*(_QWORD *)&v18 + (v23 & 0x3FFFFFF8));
    v25 = (uint8x8_t *)((char *)v7 + (v23 & 0x3FFFFFF8));
    v26 = v9 - 8 * (v23 & 0x3FFFFFF8);
    v27 = vdupq_n_s32(v9);
    v28 = vaddq_s32(v27, (int32x4_t)xmmword_208F3A6A0);
    v29 = vaddq_s32(v27, (int32x4_t)xmmword_208F3A6B0);
    v30 = 0uLL;
    v31 = (int32x4_t)v6;
    v32 = (int8x16_t)(unint64_t)v5;
    v33.i64[0] = 0x800000008;
    v33.i64[1] = 0x800000008;
    v34.i64[0] = 0x3F0000003FLL;
    v34.i64[1] = 0x3F0000003FLL;
    v35 = v23 & 0x3FFFFFF8;
    v36 = 0uLL;
    v37 = 0uLL;
    v38 = 0uLL;
    do
    {
      v31 = vaddq_s32(v31, v33);
      v39 = *v7++;
      v30 = vaddq_s32(v30, v33);
      v40 = vmovl_u8(v39);
      v41 = vmovl_high_u16(v40);
      v42.i64[0] = v41.u32[2];
      v42.i64[1] = v41.u32[3];
      v43 = v42;
      v42.i64[0] = v41.u32[0];
      v42.i64[1] = v41.u32[1];
      v44 = v42;
      v45 = vmovl_u16(*(uint16x4_t *)v40.i8);
      v42.i64[0] = v45.u32[2];
      v42.i64[1] = v45.u32[3];
      v46 = v42;
      v42.i64[0] = v45.u32[0];
      v42.i64[1] = v45.u32[1];
      v47 = v42;
      v42.i64[0] = v28.u32[2];
      v42.i64[1] = v28.u32[3];
      v48 = v42;
      v42.i64[0] = v28.u32[0];
      v42.i64[1] = v28.u32[1];
      v49 = v42;
      v42.i64[0] = v29.u32[2];
      v42.i64[1] = v29.u32[3];
      v50 = v42;
      v42.i64[0] = v29.u32[0];
      v42.i64[1] = v29.u32[1];
      v38 = vorrq_s8((int8x16_t)vshlq_u64(v43, v48), v38);
      v37 = vorrq_s8((int8x16_t)vshlq_u64(v44, v49), v37);
      v36 = vorrq_s8((int8x16_t)vshlq_u64(v46, v50), v36);
      v32 = vorrq_s8((int8x16_t)vshlq_u64(v47, v42), v32);
      *(_QWORD *)&v18 += 8;
      v29 = vaddq_s32(v29, v34);
      v28 = vaddq_s32(v28, v34);
      v35 -= 8;
    }
    while (v35);
    *v8 = v18;
    v51 = vorrq_s8(vorrq_s8(v32, v37), vorrq_s8(v36, v38));
    v5 = vorr_s8(*(int8x8_t *)v51.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL));
    v6 = vaddvq_s32(vaddq_s32(v31, v30));
    if ((v23 & 0x3FFFFFF8) != v23)
      goto LABEL_34;
  }
LABEL_36:
  v54 = v4 << 56;
  v55 = v5;
  v56 = (int8x8_t)(*(_QWORD *)&v5 - (v4 << 56));
  if (*(_QWORD *)&v5 >= (unint64_t)(v4 << 56))
  {
    LODWORD(v4) = a1[3].i32[1] - v4;
    v55 = v56;
  }
  v57 = vp8_norm[v4];
  v58 = (_DWORD)v4 << v57;
  v59 = (int8x8_t)(*(_QWORD *)&v55 << v57);
  a1[2] = (int8x8_t)(*(_QWORD *)&v55 << v57);
  v60 = v6 - v57;
  a1[3].i32[0] = v6 - v57;
  a1[3].i32[1] = (_DWORD)v4 << v57;
  if (*(_QWORD *)&v5 >= v54)
  {
    v114 = (((v58 - 1) * a2[9]) >> 8) + 1;
    if ((v60 & 0x80000000) != 0)
    {
      v116 = a1 + 1;
      v115 = (uint8x8_t *)a1[1];
      v117 = 48 - v60;
      v118 = *(_QWORD *)a1 - (_QWORD)v115;
      v119 = 8 * v118;
      v120 = 56 - 8 * v118 - v60;
      v121 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
      if (v121)
      {
        if (v118 >= 9)
          v122 = 9;
        else
          v122 = *(_QWORD *)a1 - (_QWORD)v115;
        v121(*(_QWORD *)&a1[5], v115, v729, v122);
        v115 = (uint8x8_t *)v729;
      }
      if (v120 >= 0)
        v60 += 0x40000000;
      v123 = v119 || v120 <= -1;
      v124 = v120 & ~(v120 >> 31);
      if (v123 && v117 >= v124)
      {
        v128 = *v116;
        v129 = v57 - v6 + 40;
        if (v129 >= v124 - 1)
          v130 = v124 - 1;
        else
          v130 = v57 - v6 + 40;
        v131 = v57 - v6 - v130 + 47;
        if (v131 < 0x78)
          goto LABEL_116;
        if (v129 >= v124 - 1)
          v129 = v124 - 1;
        if (v116 < (int8x8_t *)((char *)v115 + ((v57 - v6 - v129 + 47) >> 3) + 1) && v115 < (uint8x8_t *)&a1[2])
        {
LABEL_116:
          v134 = *v116;
          v135 = v115;
          v136 = v117;
LABEL_117:
          v162 = (int8x8_t)(*(_QWORD *)&v134 + 1);
          do
          {
            v60 += 8;
            v163 = v135->u8[0];
            v135 = (uint8x8_t *)((char *)v135 + 1);
            *(_QWORD *)&v59 |= (unint64_t)v163 << v136;
            *v116 = v162;
            v136 -= 8;
            ++*(_QWORD *)&v162;
          }
          while (v136 >= v124);
          goto LABEL_119;
        }
        v133 = (v131 >> 3) + 1;
        v134 = (int8x8_t)(*(_QWORD *)&v128 + (v133 & 0x3FFFFFF8));
        v135 = (uint8x8_t *)((char *)v115 + (v133 & 0x3FFFFFF8));
        v136 = v117 - 8 * (v133 & 0x3FFFFFF8);
        v137 = vdupq_n_s32(v117);
        v138 = vaddq_s32(v137, (int32x4_t)xmmword_208F3A6A0);
        v139 = vaddq_s32(v137, (int32x4_t)xmmword_208F3A6B0);
        v140 = 0uLL;
        v141 = (int32x4_t)v60;
        v142 = (int8x16_t)(unint64_t)v59;
        v143.i64[0] = 0x800000008;
        v143.i64[1] = 0x800000008;
        v144.i64[0] = 0x3F0000003FLL;
        v144.i64[1] = 0x3F0000003FLL;
        v145 = v133 & 0x3FFFFFF8;
        v146 = 0uLL;
        v147 = 0uLL;
        v148 = 0uLL;
        do
        {
          v141 = vaddq_s32(v141, v143);
          v149 = *v115++;
          v140 = vaddq_s32(v140, v143);
          v150 = vmovl_u8(v149);
          v151 = vmovl_high_u16(v150);
          v152.i64[0] = v151.u32[2];
          v152.i64[1] = v151.u32[3];
          v153 = v152;
          v152.i64[0] = v151.u32[0];
          v152.i64[1] = v151.u32[1];
          v154 = v152;
          v155 = vmovl_u16(*(uint16x4_t *)v150.i8);
          v152.i64[0] = v155.u32[2];
          v152.i64[1] = v155.u32[3];
          v156 = v152;
          v152.i64[0] = v155.u32[0];
          v152.i64[1] = v155.u32[1];
          v157 = v152;
          v152.i64[0] = v138.u32[2];
          v152.i64[1] = v138.u32[3];
          v158 = v152;
          v152.i64[0] = v138.u32[0];
          v152.i64[1] = v138.u32[1];
          v159 = v152;
          v152.i64[0] = v139.u32[2];
          v152.i64[1] = v139.u32[3];
          v160 = v152;
          v152.i64[0] = v139.u32[0];
          v152.i64[1] = v139.u32[1];
          v148 = vorrq_s8((int8x16_t)vshlq_u64(v153, v158), v148);
          v147 = vorrq_s8((int8x16_t)vshlq_u64(v154, v159), v147);
          v146 = vorrq_s8((int8x16_t)vshlq_u64(v156, v160), v146);
          v142 = vorrq_s8((int8x16_t)vshlq_u64(v157, v152), v142);
          *(_QWORD *)&v128 += 8;
          v139 = vaddq_s32(v139, v144);
          v138 = vaddq_s32(v138, v144);
          v145 -= 8;
        }
        while (v145);
        *v116 = v128;
        v161 = vorrq_s8(vorrq_s8(v142, v147), vorrq_s8(v146, v148));
        v59 = vorr_s8(*(int8x8_t *)v161.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL));
        v60 = vaddvq_s32(vaddq_s32(v141, v140));
        if ((v133 & 0x3FFFFFF8) != v133)
          goto LABEL_117;
      }
    }
LABEL_119:
    v164 = (int8x8_t)(*(_QWORD *)&v59 - (v114 << 56));
    if (*(_QWORD *)&v59 >= (unint64_t)(v114 << 56))
    {
      LODWORD(v114) = a1[3].i32[1] - v114;
      v724 = 1;
      v59 = v164;
    }
    else
    {
      v724 = 0;
    }
    v165 = vp8_norm[v114];
    v166 = (_DWORD)v114 << v165;
    v167 = (int8x8_t)(*(_QWORD *)&v59 << v165);
    v168 = v60 - v165;
    a1[2] = (int8x8_t)(*(_QWORD *)&v59 << v165);
    a1[3].i32[0] = v60 - v165;
    a1[3].i32[1] = v166;
    v169 = (((v166 - 1) * a2[10]) >> 8) + 1;
    if (((v60 - v165) & 0x80000000) != 0)
    {
      v171 = a1 + 1;
      v170 = (uint8x8_t *)a1[1];
      v172 = 48 - v168;
      v173 = *(_QWORD *)a1 - (_QWORD)v170;
      v174 = 8 * v173;
      v175 = 56 - 8 * v173 - v168;
      v176 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
      if (v176)
      {
        if (v173 >= 9)
          v177 = 9;
        else
          v177 = *(_QWORD *)a1 - (_QWORD)v170;
        v176(*(_QWORD *)&a1[5], v170, v729, v177);
        v170 = (uint8x8_t *)v729;
      }
      if (v175 >= 0)
        v168 += 0x40000000;
      v178 = v174 || v175 <= -1;
      v179 = v175 & ~(v175 >> 31);
      if (v178 && v172 >= v179)
      {
        v181 = *v171;
        v182 = v165 - v60 + 40;
        if (v182 >= v179 - 1)
          v183 = v179 - 1;
        else
          v183 = v165 - v60 + 40;
        v184 = v165 - v60 - v183 + 47;
        if (v184 < 0x78)
          goto LABEL_154;
        if (v182 >= v179 - 1)
          v182 = v179 - 1;
        if (v171 < (int8x8_t *)((char *)v170 + ((v165 - v60 - v182 + 47) >> 3) + 1) && v170 < (uint8x8_t *)&a1[2])
        {
LABEL_154:
          v187 = *v171;
          v188 = v170;
          v189 = v172;
LABEL_155:
          v215 = (int8x8_t)(*(_QWORD *)&v187 + 1);
          do
          {
            v168 += 8;
            v216 = v188->u8[0];
            v188 = (uint8x8_t *)((char *)v188 + 1);
            *(_QWORD *)&v167 |= (unint64_t)v216 << v189;
            *v171 = v215;
            v189 -= 8;
            ++*(_QWORD *)&v215;
          }
          while (v189 >= v179);
          goto LABEL_157;
        }
        v186 = (v184 >> 3) + 1;
        v187 = (int8x8_t)(*(_QWORD *)&v181 + (v186 & 0x3FFFFFF8));
        v188 = (uint8x8_t *)((char *)v170 + (v186 & 0x3FFFFFF8));
        v189 = v172 - 8 * (v186 & 0x3FFFFFF8);
        v190 = vdupq_n_s32(v172);
        v191 = vaddq_s32(v190, (int32x4_t)xmmword_208F3A6A0);
        v192 = vaddq_s32(v190, (int32x4_t)xmmword_208F3A6B0);
        v193 = 0uLL;
        v194 = (int32x4_t)v168;
        v195 = (int8x16_t)(unint64_t)v167;
        v196.i64[0] = 0x800000008;
        v196.i64[1] = 0x800000008;
        v197.i64[0] = 0x3F0000003FLL;
        v197.i64[1] = 0x3F0000003FLL;
        v198 = v186 & 0x3FFFFFF8;
        v199 = 0uLL;
        v200 = 0uLL;
        v201 = 0uLL;
        do
        {
          v194 = vaddq_s32(v194, v196);
          v202 = *v170++;
          v193 = vaddq_s32(v193, v196);
          v203 = vmovl_u8(v202);
          v204 = vmovl_high_u16(v203);
          v205.i64[0] = v204.u32[2];
          v205.i64[1] = v204.u32[3];
          v206 = v205;
          v205.i64[0] = v204.u32[0];
          v205.i64[1] = v204.u32[1];
          v207 = v205;
          v208 = vmovl_u16(*(uint16x4_t *)v203.i8);
          v205.i64[0] = v208.u32[2];
          v205.i64[1] = v208.u32[3];
          v209 = v205;
          v205.i64[0] = v208.u32[0];
          v205.i64[1] = v208.u32[1];
          v210 = v205;
          v205.i64[0] = v191.u32[2];
          v205.i64[1] = v191.u32[3];
          v211 = v205;
          v205.i64[0] = v191.u32[0];
          v205.i64[1] = v191.u32[1];
          v212 = v205;
          v205.i64[0] = v192.u32[2];
          v205.i64[1] = v192.u32[3];
          v213 = v205;
          v205.i64[0] = v192.u32[0];
          v205.i64[1] = v192.u32[1];
          v201 = vorrq_s8((int8x16_t)vshlq_u64(v206, v211), v201);
          v200 = vorrq_s8((int8x16_t)vshlq_u64(v207, v212), v200);
          v199 = vorrq_s8((int8x16_t)vshlq_u64(v209, v213), v199);
          v195 = vorrq_s8((int8x16_t)vshlq_u64(v210, v205), v195);
          *(_QWORD *)&v181 += 8;
          v192 = vaddq_s32(v192, v197);
          v191 = vaddq_s32(v191, v197);
          v198 -= 8;
        }
        while (v198);
        *v171 = v181;
        v214 = vorrq_s8(vorrq_s8(v195, v200), vorrq_s8(v199, v201));
        v167 = vorr_s8(*(int8x8_t *)v214.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v214, v214, 8uLL));
        v168 = vaddvq_s32(vaddq_s32(v194, v193));
        if ((v186 & 0x3FFFFFF8) != v186)
          goto LABEL_155;
      }
    }
LABEL_157:
    v217 = (int8x8_t)(*(_QWORD *)&v167 - (v169 << 56));
    if (*(_QWORD *)&v167 >= (unint64_t)(v169 << 56))
    {
      LODWORD(v169) = a1[3].i32[1] - v169;
      v720 = 2;
      v167 = v217;
    }
    else
    {
      v720 = 0;
    }
    v218 = vp8_norm[v169];
    v219 = (_DWORD)v169 << v218;
    v220 = (int8x8_t)(*(_QWORD *)&v167 << v218);
    v221 = v168 - v218;
    a1[2] = (int8x8_t)(*(_QWORD *)&v167 << v218);
    a1[3].i32[0] = v168 - v218;
    a1[3].i32[1] = v219;
    v222 = (((v219 - 1) * a2[11]) >> 8) + 1;
    if (((v168 - v218) & 0x80000000) != 0)
    {
      v224 = a1 + 1;
      v223 = (uint8x8_t *)a1[1];
      v225 = 48 - v221;
      v226 = *(_QWORD *)a1 - (_QWORD)v223;
      v227 = 8 * v226;
      v228 = 56 - 8 * v226 - v221;
      v229 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
      if (v229)
      {
        if (v226 >= 9)
          v230 = 9;
        else
          v230 = *(_QWORD *)a1 - (_QWORD)v223;
        v229(*(_QWORD *)&a1[5], v223, v729, v230);
        v223 = (uint8x8_t *)v729;
      }
      if (v228 >= 0)
        v221 += 0x40000000;
      v231 = v227 || v228 <= -1;
      v232 = v228 & ~(v228 >> 31);
      if (v231 && v225 >= v232)
      {
        v234 = *v224;
        v235 = v218 - v168 + 40;
        if (v235 >= v232 - 1)
          v236 = v232 - 1;
        else
          v236 = v218 - v168 + 40;
        v237 = v218 - v168 - v236 + 47;
        if (v237 < 0x78)
          goto LABEL_192;
        if (v235 >= v232 - 1)
          v235 = v232 - 1;
        if (v224 >= (int8x8_t *)((char *)v223 + ((v218 - v168 - v235 + 47) >> 3) + 1) || v223 >= (uint8x8_t *)&a1[2])
        {
          v239 = (v237 >> 3) + 1;
          v240 = (int8x8_t)(*(_QWORD *)&v234 + (v239 & 0x3FFFFFF8));
          v241 = (uint8x8_t *)((char *)v223 + (v239 & 0x3FFFFFF8));
          v242 = v225 - 8 * (v239 & 0x3FFFFFF8);
          v243 = vdupq_n_s32(v225);
          v244 = vaddq_s32(v243, (int32x4_t)xmmword_208F3A6A0);
          v245 = vaddq_s32(v243, (int32x4_t)xmmword_208F3A6B0);
          v246 = 0uLL;
          v247 = (int32x4_t)v221;
          v248 = (int8x16_t)(unint64_t)v220;
          v249.i64[0] = 0x800000008;
          v249.i64[1] = 0x800000008;
          v250.i64[0] = 0x3F0000003FLL;
          v250.i64[1] = 0x3F0000003FLL;
          v251 = v239 & 0x3FFFFFF8;
          v252 = 0uLL;
          v253 = 0uLL;
          v254 = 0uLL;
          do
          {
            v247 = vaddq_s32(v247, v249);
            v255 = *v223++;
            v246 = vaddq_s32(v246, v249);
            v256 = vmovl_u8(v255);
            v257 = vmovl_high_u16(v256);
            v258.i64[0] = v257.u32[2];
            v258.i64[1] = v257.u32[3];
            v259 = v258;
            v258.i64[0] = v257.u32[0];
            v258.i64[1] = v257.u32[1];
            v260 = v258;
            v261 = vmovl_u16(*(uint16x4_t *)v256.i8);
            v258.i64[0] = v261.u32[2];
            v258.i64[1] = v261.u32[3];
            v262 = v258;
            v258.i64[0] = v261.u32[0];
            v258.i64[1] = v261.u32[1];
            v263 = v258;
            v258.i64[0] = v244.u32[2];
            v258.i64[1] = v244.u32[3];
            v264 = v258;
            v258.i64[0] = v244.u32[0];
            v258.i64[1] = v244.u32[1];
            v265 = v258;
            v258.i64[0] = v245.u32[2];
            v258.i64[1] = v245.u32[3];
            v266 = v258;
            v258.i64[0] = v245.u32[0];
            v258.i64[1] = v245.u32[1];
            v254 = vorrq_s8((int8x16_t)vshlq_u64(v259, v264), v254);
            v253 = vorrq_s8((int8x16_t)vshlq_u64(v260, v265), v253);
            v252 = vorrq_s8((int8x16_t)vshlq_u64(v262, v266), v252);
            v248 = vorrq_s8((int8x16_t)vshlq_u64(v263, v258), v248);
            *(_QWORD *)&v234 += 8;
            v245 = vaddq_s32(v245, v250);
            v244 = vaddq_s32(v244, v250);
            v251 -= 8;
          }
          while (v251);
          *v224 = v234;
          v267 = vorrq_s8(vorrq_s8(v248, v253), vorrq_s8(v252, v254));
          v220 = vorr_s8(*(int8x8_t *)v267.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v267, v267, 8uLL));
          v221 = vaddvq_s32(vaddq_s32(v247, v246));
          if ((v239 & 0x3FFFFFF8) == v239)
            goto LABEL_195;
        }
        else
        {
LABEL_192:
          v240 = *v224;
          v241 = v223;
          v242 = v225;
        }
        v268 = (int8x8_t)(*(_QWORD *)&v240 + 1);
        do
        {
          v221 += 8;
          v269 = v241->u8[0];
          v241 = (uint8x8_t *)((char *)v241 + 1);
          *(_QWORD *)&v220 |= (unint64_t)v269 << v242;
          *v224 = v268;
          v242 -= 8;
          ++*(_QWORD *)&v268;
        }
        while (v242 >= v232);
      }
    }
LABEL_195:
    v270 = (int8x8_t)(*(_QWORD *)&v220 - (v222 << 56));
    if (*(_QWORD *)&v220 >= (unint64_t)(v222 << 56))
    {
      LODWORD(v222) = a1[3].i32[1] - v222;
      v271 = 4;
      v220 = v270;
    }
    else
    {
      v271 = 0;
    }
    v272 = vp8_norm[v222];
    v273 = (int8x8_t)(*(_QWORD *)&v220 << v272);
    v274 = v221 - v272;
    a1[2] = (int8x8_t)(*(_QWORD *)&v220 << v272);
    a1[3].i32[0] = v221 - v272;
    a1[3].i32[1] = (_DWORD)v222 << v272;
    v275 = (((((_DWORD)v222 << v272) - 1) * a2[18]) >> 8) + 1;
    if (((v221 - v272) & 0x80000000) != 0)
    {
      v712 = v271;
      v277 = a1 + 1;
      v276 = (uint8x8_t *)a1[1];
      v278 = 48 - v274;
      v279 = *(_QWORD *)a1 - (_QWORD)v276;
      v280 = 8 * v279;
      v281 = 56 - 8 * v279 - v274;
      v282 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
      if (v282)
      {
        if (v279 >= 9)
          v283 = 9;
        else
          v283 = *(_QWORD *)a1 - (_QWORD)v276;
        v282(*(_QWORD *)&a1[5], v276, v729, v283);
        v276 = (uint8x8_t *)v729;
      }
      if (v281 >= 0)
        v274 += 0x40000000;
      if (v280)
        v284 = 1;
      else
        v284 = v281 <= -1;
      v285 = v281 & ~(v281 >> 31);
      if (!v284 || v278 < v285)
      {
        v271 = v712;
      }
      else
      {
        v287 = *v277;
        v288 = v272 - v221 + 40;
        if (v288 >= v285 - 1)
          v289 = v285 - 1;
        else
          v289 = v272 - v221 + 40;
        v290 = v272 - v221 - v289 + 47;
        v271 = v712;
        if (v290 < 0x78)
          goto LABEL_230;
        if (v288 >= v285 - 1)
          v288 = v285 - 1;
        if (v277 >= (int8x8_t *)((char *)v276 + ((v272 - v221 - v288 + 47) >> 3) + 1) || v276 >= (uint8x8_t *)&a1[2])
        {
          v292 = (v290 >> 3) + 1;
          v293 = (int8x8_t)(*(_QWORD *)&v287 + (v292 & 0x3FFFFFF8));
          v294 = (uint8x8_t *)((char *)v276 + (v292 & 0x3FFFFFF8));
          v295 = v278 - 8 * (v292 & 0x3FFFFFF8);
          v296 = vdupq_n_s32(v278);
          v297 = vaddq_s32(v296, (int32x4_t)xmmword_208F3A6A0);
          v298 = vaddq_s32(v296, (int32x4_t)xmmword_208F3A6B0);
          v299 = 0uLL;
          v300 = (int32x4_t)v274;
          v301 = (int8x16_t)(unint64_t)v273;
          v302.i64[0] = 0x800000008;
          v302.i64[1] = 0x800000008;
          v303.i64[0] = 0x3F0000003FLL;
          v303.i64[1] = 0x3F0000003FLL;
          v304 = v292 & 0x3FFFFFF8;
          v305 = 0uLL;
          v306 = 0uLL;
          v307 = 0uLL;
          do
          {
            v300 = vaddq_s32(v300, v302);
            v308 = *v276++;
            v299 = vaddq_s32(v299, v302);
            v309 = vmovl_u8(v308);
            v310 = vmovl_high_u16(v309);
            v311.i64[0] = v310.u32[2];
            v311.i64[1] = v310.u32[3];
            v312 = v311;
            v311.i64[0] = v310.u32[0];
            v311.i64[1] = v310.u32[1];
            v313 = v311;
            v314 = vmovl_u16(*(uint16x4_t *)v309.i8);
            v311.i64[0] = v314.u32[2];
            v311.i64[1] = v314.u32[3];
            v315 = v311;
            v311.i64[0] = v314.u32[0];
            v311.i64[1] = v314.u32[1];
            v316 = v311;
            v311.i64[0] = v297.u32[2];
            v311.i64[1] = v297.u32[3];
            v317 = v311;
            v311.i64[0] = v297.u32[0];
            v311.i64[1] = v297.u32[1];
            v318 = v311;
            v311.i64[0] = v298.u32[2];
            v311.i64[1] = v298.u32[3];
            v319 = v311;
            v311.i64[0] = v298.u32[0];
            v311.i64[1] = v298.u32[1];
            v307 = vorrq_s8((int8x16_t)vshlq_u64(v312, v317), v307);
            v306 = vorrq_s8((int8x16_t)vshlq_u64(v313, v318), v306);
            v305 = vorrq_s8((int8x16_t)vshlq_u64(v315, v319), v305);
            v301 = vorrq_s8((int8x16_t)vshlq_u64(v316, v311), v301);
            *(_QWORD *)&v287 += 8;
            v298 = vaddq_s32(v298, v303);
            v297 = vaddq_s32(v297, v303);
            v304 -= 8;
          }
          while (v304);
          *v277 = v287;
          v320 = vorrq_s8(vorrq_s8(v301, v306), vorrq_s8(v305, v307));
          v273 = vorr_s8(*(int8x8_t *)v320.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v320, v320, 8uLL));
          v274 = vaddvq_s32(vaddq_s32(v300, v299));
          if ((v292 & 0x3FFFFFF8) == v292)
            goto LABEL_233;
        }
        else
        {
LABEL_230:
          v293 = *v277;
          v294 = v276;
          v295 = v278;
        }
        v321 = (int8x8_t)(*(_QWORD *)&v293 + 1);
        do
        {
          v274 += 8;
          v322 = v294->u8[0];
          v294 = (uint8x8_t *)((char *)v294 + 1);
          *(_QWORD *)&v273 |= (unint64_t)v322 << v295;
          *v277 = v321;
          v295 -= 8;
          ++*(_QWORD *)&v321;
        }
        while (v295 >= v285);
      }
    }
LABEL_233:
    v323 = (int8x8_t)(*(_QWORD *)&v273 - (v275 << 56));
    if (*(_QWORD *)&v273 >= (unint64_t)(v275 << 56))
    {
      LODWORD(v275) = a1[3].i32[1] - v275;
      v324 = 512;
      v273 = v323;
    }
    else
    {
      v324 = 0;
    }
    v325 = vp8_norm[v275];
    v326 = (int8x8_t)(*(_QWORD *)&v273 << v325);
    v327 = v274 - v325;
    a1[2] = v326;
    a1[3].i32[0] = v274 - v325;
    a1[3].i32[1] = (_DWORD)v275 << v325;
    v328 = (((((_DWORD)v275 << v325) - 1) * a2[17]) >> 8) + 1;
    if (((v274 - v325) & 0x80000000) != 0)
    {
      v716 = v324;
      v713 = v271;
      v330 = a1 + 1;
      v329 = (uint8x8_t *)a1[1];
      v331 = 48 - v327;
      v332 = *(_QWORD *)a1 - (_QWORD)v329;
      v333 = 8 * v332;
      v334 = 56 - 8 * v332 - v327;
      v335 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
      if (v335)
      {
        if (v332 >= 9)
          v336 = 9;
        else
          v336 = *(_QWORD *)a1 - (_QWORD)v329;
        v335(*(_QWORD *)&a1[5], v329, v729, v336);
        v329 = (uint8x8_t *)v729;
      }
      if (v334 >= 0)
        v327 += 0x40000000;
      if (v333)
        v337 = 1;
      else
        v337 = v334 <= -1;
      v338 = v334 & ~(v334 >> 31);
      if (!v337 || v331 < v338)
      {
        v271 = v713;
        v324 = v716;
      }
      else
      {
        v340 = *v330;
        v341 = v325 - v274 + 40;
        if (v341 >= v338 - 1)
          v342 = v338 - 1;
        else
          v342 = v325 - v274 + 40;
        v343 = v325 - v274 - v342 + 47;
        v271 = v713;
        v324 = v716;
        if (v343 < 0x78)
          goto LABEL_268;
        if (v341 >= v338 - 1)
          v341 = v338 - 1;
        if (v330 >= (int8x8_t *)((char *)v329 + ((v325 - v274 - v341 + 47) >> 3) + 1) || v329 >= (uint8x8_t *)&a1[2])
        {
          v345 = (v343 >> 3) + 1;
          v346 = (int8x8_t)(*(_QWORD *)&v340 + (v345 & 0x3FFFFFF8));
          v347 = (uint8x8_t *)((char *)v329 + (v345 & 0x3FFFFFF8));
          v348 = v331 - 8 * (v345 & 0x3FFFFFF8);
          v349 = vdupq_n_s32(v331);
          v350 = vaddq_s32(v349, (int32x4_t)xmmword_208F3A6A0);
          v351 = vaddq_s32(v349, (int32x4_t)xmmword_208F3A6B0);
          v352 = 0uLL;
          v353 = (int32x4_t)v327;
          v354 = (int8x16_t)(unint64_t)v326;
          v355.i64[0] = 0x800000008;
          v355.i64[1] = 0x800000008;
          v356.i64[0] = 0x3F0000003FLL;
          v356.i64[1] = 0x3F0000003FLL;
          v357 = v345 & 0x3FFFFFF8;
          v358 = 0uLL;
          v359 = 0uLL;
          v360 = 0uLL;
          do
          {
            v353 = vaddq_s32(v353, v355);
            v361 = *v329++;
            v352 = vaddq_s32(v352, v355);
            v362 = vmovl_u8(v361);
            v363 = vmovl_high_u16(v362);
            v364.i64[0] = v363.u32[2];
            v364.i64[1] = v363.u32[3];
            v365 = v364;
            v364.i64[0] = v363.u32[0];
            v364.i64[1] = v363.u32[1];
            v366 = v364;
            v367 = vmovl_u16(*(uint16x4_t *)v362.i8);
            v364.i64[0] = v367.u32[2];
            v364.i64[1] = v367.u32[3];
            v368 = v364;
            v364.i64[0] = v367.u32[0];
            v364.i64[1] = v367.u32[1];
            v369 = v364;
            v364.i64[0] = v350.u32[2];
            v364.i64[1] = v350.u32[3];
            v370 = v364;
            v364.i64[0] = v350.u32[0];
            v364.i64[1] = v350.u32[1];
            v371 = v364;
            v364.i64[0] = v351.u32[2];
            v364.i64[1] = v351.u32[3];
            v372 = v364;
            v364.i64[0] = v351.u32[0];
            v364.i64[1] = v351.u32[1];
            v360 = vorrq_s8((int8x16_t)vshlq_u64(v365, v370), v360);
            v359 = vorrq_s8((int8x16_t)vshlq_u64(v366, v371), v359);
            v358 = vorrq_s8((int8x16_t)vshlq_u64(v368, v372), v358);
            v354 = vorrq_s8((int8x16_t)vshlq_u64(v369, v364), v354);
            *(_QWORD *)&v340 += 8;
            v351 = vaddq_s32(v351, v356);
            v350 = vaddq_s32(v350, v356);
            v357 -= 8;
          }
          while (v357);
          *v330 = v340;
          v373 = vorrq_s8(vorrq_s8(v354, v359), vorrq_s8(v358, v360));
          v326 = vorr_s8(*(int8x8_t *)v373.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v373, v373, 8uLL));
          v327 = vaddvq_s32(vaddq_s32(v353, v352));
          if ((v345 & 0x3FFFFFF8) == v345)
            goto LABEL_271;
        }
        else
        {
LABEL_268:
          v346 = *v330;
          v347 = v329;
          v348 = v331;
        }
        v374 = (int8x8_t)(*(_QWORD *)&v346 + 1);
        do
        {
          v327 += 8;
          v375 = v347->u8[0];
          v347 = (uint8x8_t *)((char *)v347 + 1);
          *(_QWORD *)&v326 |= (unint64_t)v375 << v348;
          *v330 = v374;
          v348 -= 8;
          ++*(_QWORD *)&v374;
        }
        while (v348 >= v338);
      }
    }
LABEL_271:
    v376 = (int8x8_t)(*(_QWORD *)&v326 - (v328 << 56));
    if (*(_QWORD *)&v326 >= (unint64_t)(v328 << 56))
    {
      LODWORD(v328) = a1[3].i32[1] - v328;
      v377 = 256;
      v326 = v376;
    }
    else
    {
      v377 = 0;
    }
    v378 = vp8_norm[v328];
    v379 = (int8x8_t)(*(_QWORD *)&v326 << v378);
    v380 = v327 - v378;
    a1[2] = v379;
    a1[3].i32[0] = v327 - v378;
    a1[3].i32[1] = (_DWORD)v328 << v378;
    v381 = ((((_DWORD)v328 << v378) - 1) * a2[16]) >> 8;
    v382 = v381 + 1;
    if (((v327 - v378) & 0x80000000) != 0)
    {
      v711 = v381 + 1;
      v714 = v377;
      v384 = a1 + 1;
      v383 = (uint8x8_t *)a1[1];
      v385 = 48 - v380;
      v386 = *(_QWORD *)a1 - (_QWORD)v383;
      v387 = 8 * v386;
      v388 = 56 - 8 * v386 - v380;
      v389 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
      if (v389)
      {
        if (v386 >= 9)
          v390 = 9;
        else
          v390 = *(_QWORD *)a1 - (_QWORD)v383;
        v717 = v324;
        v391 = v271;
        v389(*(_QWORD *)&a1[5], v383, v729, v390);
        v385 = 48 - v380;
        v324 = v717;
        v271 = v391;
        v383 = (uint8x8_t *)v729;
      }
      if (v388 >= 0)
        v380 += 0x40000000;
      if (v387)
        v392 = 1;
      else
        v392 = v388 <= -1;
      v393 = v388 & ~(v388 >> 31);
      if (!v392 || v385 < v393)
      {
        v377 = v714;
        v382 = v711;
      }
      else
      {
        v395 = *v384;
        v396 = v378 - v327 + 40;
        if (v396 >= v393 - 1)
          v397 = v393 - 1;
        else
          v397 = v378 - v327 + 40;
        v398 = v378 - v327 - v397 + 47;
        v377 = v714;
        v382 = v711;
        if (v398 < 0x78)
          goto LABEL_306;
        if (v396 >= v393 - 1)
          v396 = v393 - 1;
        if (v384 >= (int8x8_t *)((char *)v383 + ((v378 - v327 - v396 + 47) >> 3) + 1) || v383 >= (uint8x8_t *)&a1[2])
        {
          v400 = (v398 >> 3) + 1;
          v401 = (int8x8_t)(*(_QWORD *)&v395 + (v400 & 0x3FFFFFF8));
          v402 = (uint8x8_t *)((char *)v383 + (v400 & 0x3FFFFFF8));
          v403 = v385 - 8 * (v400 & 0x3FFFFFF8);
          v404 = vdupq_n_s32(v385);
          v405 = vaddq_s32(v404, (int32x4_t)xmmword_208F3A6A0);
          v406 = vaddq_s32(v404, (int32x4_t)xmmword_208F3A6B0);
          v407 = 0uLL;
          v408 = (int32x4_t)v380;
          v409 = (int8x16_t)(unint64_t)v379;
          v410.i64[0] = 0x800000008;
          v410.i64[1] = 0x800000008;
          v411.i64[0] = 0x3F0000003FLL;
          v411.i64[1] = 0x3F0000003FLL;
          v412 = v400 & 0x3FFFFFF8;
          v413 = 0uLL;
          v414 = 0uLL;
          v415 = 0uLL;
          do
          {
            v408 = vaddq_s32(v408, v410);
            v416 = *v383++;
            v407 = vaddq_s32(v407, v410);
            v417 = vmovl_u8(v416);
            v418 = vmovl_high_u16(v417);
            v419.i64[0] = v418.u32[2];
            v419.i64[1] = v418.u32[3];
            v420 = v419;
            v419.i64[0] = v418.u32[0];
            v419.i64[1] = v418.u32[1];
            v421 = v419;
            v422 = vmovl_u16(*(uint16x4_t *)v417.i8);
            v419.i64[0] = v422.u32[2];
            v419.i64[1] = v422.u32[3];
            v423 = v419;
            v419.i64[0] = v422.u32[0];
            v419.i64[1] = v422.u32[1];
            v424 = v419;
            v419.i64[0] = v405.u32[2];
            v419.i64[1] = v405.u32[3];
            v425 = v419;
            v419.i64[0] = v405.u32[0];
            v419.i64[1] = v405.u32[1];
            v426 = v419;
            v419.i64[0] = v406.u32[2];
            v419.i64[1] = v406.u32[3];
            v427 = v419;
            v419.i64[0] = v406.u32[0];
            v419.i64[1] = v406.u32[1];
            v415 = vorrq_s8((int8x16_t)vshlq_u64(v420, v425), v415);
            v414 = vorrq_s8((int8x16_t)vshlq_u64(v421, v426), v414);
            v413 = vorrq_s8((int8x16_t)vshlq_u64(v423, v427), v413);
            v409 = vorrq_s8((int8x16_t)vshlq_u64(v424, v419), v409);
            *(_QWORD *)&v395 += 8;
            v406 = vaddq_s32(v406, v411);
            v405 = vaddq_s32(v405, v411);
            v412 -= 8;
          }
          while (v412);
          *v384 = v395;
          v428 = vorrq_s8(vorrq_s8(v409, v414), vorrq_s8(v413, v415));
          v379 = vorr_s8(*(int8x8_t *)v428.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v428, v428, 8uLL));
          v380 = vaddvq_s32(vaddq_s32(v408, v407));
          if ((v400 & 0x3FFFFFF8) == v400)
            goto LABEL_309;
        }
        else
        {
LABEL_306:
          v401 = *v384;
          v402 = v383;
          v403 = v385;
        }
        v429 = (int8x8_t)(*(_QWORD *)&v401 + 1);
        do
        {
          v380 += 8;
          v430 = v402->u8[0];
          v402 = (uint8x8_t *)((char *)v402 + 1);
          *(_QWORD *)&v379 |= (unint64_t)v430 << v403;
          *v384 = v429;
          v403 -= 8;
          ++*(_QWORD *)&v429;
        }
        while (v403 >= v393);
      }
    }
LABEL_309:
    v431 = (int8x8_t)(*(_QWORD *)&v379 - (v382 << 56));
    if (*(_QWORD *)&v379 >= (unint64_t)(v382 << 56))
    {
      LODWORD(v382) = a1[3].i32[1] - v382;
      v432 = 128;
      v379 = v431;
    }
    else
    {
      v432 = 0;
    }
    v433 = vp8_norm[v382];
    v434 = (int8x8_t)(*(_QWORD *)&v379 << v433);
    v435 = v380 - v433;
    a1[2] = (int8x8_t)(*(_QWORD *)&v379 << v433);
    a1[3].i32[0] = v380 - v433;
    a1[3].i32[1] = (_DWORD)v382 << v433;
    v436 = ((((_DWORD)v382 << v433) - 1) * a2[15]) >> 8;
    v437 = v436 + 1;
    if (((v380 - v433) & 0x80000000) == 0)
    {
      v438 = v724 | v720 | v271 | v324;
      v439 = (int8x8_t)(*(_QWORD *)&v434 - (v437 << 56));
      if (*(_QWORD *)&v434 < (unint64_t)(v437 << 56))
      {
LABEL_314:
        v440 = 0;
        goto LABEL_351;
      }
LABEL_350:
      LODWORD(v437) = a1[3].i32[1] - v437;
      v440 = 64;
      v434 = v439;
LABEL_351:
      v489 = vp8_norm[v437];
      v490 = v438 | v377;
      v491 = (_DWORD)v437 << v489;
      v492 = (int8x8_t)(*(_QWORD *)&v434 << v489);
      v493 = v435 - v489;
      a1[2] = (int8x8_t)(*(_QWORD *)&v434 << v489);
      a1[3].i32[0] = v435 - v489;
      a1[3].i32[1] = v491;
      v494 = ((v491 - 1) * a2[14]) >> 8;
      v495 = v494 + 1;
      if (((v435 - v489) & 0x80000000) == 0)
      {
        v496 = v432 | v490;
        v497 = (int8x8_t)(*(_QWORD *)&v492 - (v495 << 56));
        if (*(_QWORD *)&v492 < (unint64_t)(v495 << 56))
        {
LABEL_353:
          v498 = 0;
          goto LABEL_390;
        }
LABEL_389:
        LODWORD(v495) = a1[3].i32[1] - v495;
        v498 = 32;
        v492 = v497;
LABEL_390:
        v547 = vp8_norm[v495];
        v548 = v496 + v440;
        v549 = (int8x8_t)(*(_QWORD *)&v492 << v547);
        v550 = v493 - v547;
        a1[2] = (int8x8_t)(*(_QWORD *)&v492 << v547);
        a1[3].i32[0] = v493 - v547;
        a1[3].i32[1] = (_DWORD)v495 << v547;
        v551 = ((((_DWORD)v495 << v547) - 1) * a2[13]) >> 8;
        v552 = v551 + 1;
        if (((v493 - v547) & 0x80000000) == 0)
        {
          v553 = v548 + v498;
          v554 = (int8x8_t)(*(_QWORD *)&v549 - (v552 << 56));
          if (*(_QWORD *)&v549 < (unint64_t)(v552 << 56))
          {
LABEL_392:
            v555 = 0;
            goto LABEL_429;
          }
LABEL_428:
          LODWORD(v552) = a1[3].i32[1] - v552;
          v555 = 16;
          v549 = v554;
LABEL_429:
          v604 = vp8_norm[v552];
          v58 = (_DWORD)v552 << v604;
          v605 = (int8x8_t)(*(_QWORD *)&v549 << v604);
          v60 = v550 - v604;
          a1[2] = v605;
          a1[3].i32[0] = v550 - v604;
          a1[3].i32[1] = (_DWORD)v552 << v604;
          v126 = v553 + v555;
          if (((v553 + v555) & 0x1FF0) == 0)
          {
            v59 = v605;
            goto LABEL_468;
          }
          v606 = (((v58 - 1) * a2[12]) >> 8) + 1;
          if ((v60 & 0x80000000) == 0)
          {
LABEL_465:
            v654 = v606 << 56;
            v655 = v605;
            v656 = (int8x8_t)(*(_QWORD *)&v605 - (v606 << 56));
            if (*(_QWORD *)&v605 >= (unint64_t)(v606 << 56))
            {
              LODWORD(v606) = a1[3].i32[1] - v606;
              v655 = v656;
            }
            v657 = vp8_norm[v606];
            v58 = (_DWORD)v606 << v657;
            v59 = (int8x8_t)(*(_QWORD *)&v655 << v657);
            a1[2] = (int8x8_t)(*(_QWORD *)&v655 << v657);
            v60 -= v657;
            a1[3].i32[0] = v60;
            a1[3].i32[1] = (_DWORD)v606 << v657;
            if (*(_QWORD *)&v605 < v654)
            {
LABEL_469:
              v658 = (((v58 - 1) * a2[1]) >> 8) + 1;
              if ((v60 & 0x80000000) == 0)
              {
                v659 = v658 << 56;
                v660 = v59;
                v661 = (int8x8_t)(*(_QWORD *)&v59 - (v658 << 56));
                if (*(_QWORD *)&v59 < (unint64_t)(v658 << 56))
                  goto LABEL_472;
                goto LABEL_471;
              }
              v664 = a1 + 1;
              v663 = (uint8x8_t *)a1[1];
              v665 = 48 - v60;
              v666 = *(_QWORD *)a1 - (_QWORD)v663;
              v667 = 8 * v666;
              v668 = 56 - v60 - 8 * v666;
              v669 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
              if (v669)
              {
                if (v666 >= 9)
                  v670 = 9;
                else
                  v670 = *(_QWORD *)a1 - (_QWORD)v663;
                v669(*(_QWORD *)&a1[5], v663, v729, v670);
                v663 = (uint8x8_t *)v729;
              }
              if (v668 < 0)
                v671 = v60;
              else
                v671 = v60 + 0x40000000;
              if (v667)
                v672 = 1;
              else
                v672 = v668 <= -1;
              v673 = v668 & ~(v668 >> 31);
              if (v672 && v665 >= v673)
              {
                v675 = *v664;
                v676 = v673 - 1;
                if (v673 - 1 >= (int)(40 - v60))
                  v677 = 40 - v60;
                else
                  v677 = v673 - 1;
                v678 = 47 - v60 - v677;
                if (v678 < 0x78)
                  goto LABEL_507;
                if (v676 >= (int)(40 - v60))
                  v676 = 40 - v60;
                if (v664 < (int8x8_t *)((char *)v663 + ((47 - v60 - v676) >> 3) + 1) && v663 < (uint8x8_t *)&a1[2])
                {
LABEL_507:
                  v681 = *v664;
                  v682 = v663;
                  v683 = 48 - v60;
LABEL_508:
                  v709 = (int8x8_t)(*(_QWORD *)&v681 + 1);
                  do
                  {
                    v671 += 8;
                    v710 = v682->u8[0];
                    v682 = (uint8x8_t *)((char *)v682 + 1);
                    *(_QWORD *)&v59 |= (unint64_t)v710 << v683;
                    *v664 = v709;
                    v683 -= 8;
                    ++*(_QWORD *)&v709;
                  }
                  while (v683 >= v673);
                  goto LABEL_510;
                }
                v680 = (v678 >> 3) + 1;
                v681 = (int8x8_t)(*(_QWORD *)&v675 + (v680 & 0x3FFFFFF8));
                v682 = (uint8x8_t *)((char *)v663 + (v680 & 0x3FFFFFF8));
                v683 = v665 - 8 * (v680 & 0x3FFFFFF8);
                v684 = vdupq_n_s32(v665);
                v685 = vaddq_s32(v684, (int32x4_t)xmmword_208F3A6A0);
                v686 = vaddq_s32(v684, (int32x4_t)xmmword_208F3A6B0);
                v687 = 0uLL;
                v688 = (int32x4_t)v671;
                v689 = (int8x16_t)(unint64_t)v59;
                v690.i64[0] = 0x800000008;
                v690.i64[1] = 0x800000008;
                v691.i64[0] = 0x3F0000003FLL;
                v691.i64[1] = 0x3F0000003FLL;
                v692 = v680 & 0x3FFFFFF8;
                v693 = 0uLL;
                v694 = 0uLL;
                v695 = 0uLL;
                do
                {
                  v688 = vaddq_s32(v688, v690);
                  v696 = *v663++;
                  v687 = vaddq_s32(v687, v690);
                  v697 = vmovl_u8(v696);
                  v698 = vmovl_high_u16(v697);
                  v699.i64[0] = v698.u32[2];
                  v699.i64[1] = v698.u32[3];
                  v700 = v699;
                  v699.i64[0] = v698.u32[0];
                  v699.i64[1] = v698.u32[1];
                  v701 = v699;
                  v702 = vmovl_u16(*(uint16x4_t *)v697.i8);
                  v699.i64[0] = v702.u32[2];
                  v699.i64[1] = v702.u32[3];
                  v703 = v699;
                  v699.i64[0] = v702.u32[0];
                  v699.i64[1] = v702.u32[1];
                  v704 = v699;
                  v699.i64[0] = v685.u32[2];
                  v699.i64[1] = v685.u32[3];
                  v705 = v699;
                  v699.i64[0] = v685.u32[0];
                  v699.i64[1] = v685.u32[1];
                  v706 = v699;
                  v699.i64[0] = v686.u32[2];
                  v699.i64[1] = v686.u32[3];
                  v707 = v699;
                  v699.i64[0] = v686.u32[0];
                  v699.i64[1] = v686.u32[1];
                  v695 = vorrq_s8((int8x16_t)vshlq_u64(v700, v705), v695);
                  v694 = vorrq_s8((int8x16_t)vshlq_u64(v701, v706), v694);
                  v693 = vorrq_s8((int8x16_t)vshlq_u64(v703, v707), v693);
                  v689 = vorrq_s8((int8x16_t)vshlq_u64(v704, v699), v689);
                  *(_QWORD *)&v675 += 8;
                  v686 = vaddq_s32(v686, v691);
                  v685 = vaddq_s32(v685, v691);
                  v692 -= 8;
                }
                while (v692);
                *v664 = v675;
                v708 = vorrq_s8(vorrq_s8(v689, v694), vorrq_s8(v693, v695));
                v59 = vorr_s8(*(int8x8_t *)v708.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v708, v708, 8uLL));
                v671 = vaddvq_s32(vaddq_s32(v688, v687));
                if ((v680 & 0x3FFFFFF8) != v680)
                  goto LABEL_508;
              }
LABEL_510:
              v60 = v671;
              v659 = v658 << 56;
              v660 = v59;
              v661 = (int8x8_t)(*(_QWORD *)&v59 - (v658 << 56));
              if (*(_QWORD *)&v59 < (unint64_t)(v658 << 56))
              {
LABEL_472:
                v662 = vp8_norm[v658];
                a1[2] = (int8x8_t)(*(_QWORD *)&v660 << v662);
                a1[3].i32[0] = v60 - v662;
                a1[3].i32[1] = (_DWORD)v658 << v662;
                if (*(_QWORD *)&v59 < v659)
                  return v126;
                else
                  return -v126;
              }
LABEL_471:
              LODWORD(v658) = a1[3].i32[1] - v658;
              v660 = v661;
              goto LABEL_472;
            }
LABEL_468:
            v126 += 8;
            goto LABEL_469;
          }
          v608 = a1 + 1;
          v607 = (uint8x8_t *)a1[1];
          v609 = *(_QWORD *)a1 - (_QWORD)v607;
          v610 = 8 * v609;
          v611 = 56 - 8 * v609 - v60;
          v612 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
          if (v612)
          {
            if (v609 >= 9)
              v613 = 9;
            else
              v613 = *(_QWORD *)a1 - (_QWORD)v607;
            v612(*(_QWORD *)&a1[5], v607, v729, v613);
            v607 = (uint8x8_t *)v729;
          }
          if (v611 < 0)
            v614 = v550 - v604;
          else
            v614 = v60 + 0x40000000;
          if (v610)
            v615 = 1;
          else
            v615 = v611 <= -1;
          if (v615)
          {
            v616 = 48 - v60;
            v617 = v611 & ~(v611 >> 31);
            if ((int)(48 - v60) >= v617)
            {
              v618 = *v608;
              v619 = v604 - v550 + 40;
              if (v619 >= v617 - 1)
                v620 = v617 - 1;
              else
                v620 = v604 - v550 + 40;
              v621 = v604 - v550 - v620 + 47;
              if (v621 < 0x78)
                goto LABEL_461;
              if (v619 >= v617 - 1)
                v619 = v617 - 1;
              if (v608 >= (int8x8_t *)((char *)v607 + ((v604 - v550 - v619 + 47) >> 3) + 1)
                || v607 >= (uint8x8_t *)&a1[2])
              {
                v623 = (v621 >> 3) + 1;
                v624 = (int8x8_t)(*(_QWORD *)&v618 + (v623 & 0x3FFFFFF8));
                v625 = (uint8x8_t *)((char *)v607 + (v623 & 0x3FFFFFF8));
                v626 = v616 - 8 * (v623 & 0x3FFFFFF8);
                v627 = vdupq_n_s32(v616);
                v628 = vaddq_s32(v627, (int32x4_t)xmmword_208F3A6A0);
                v629 = vaddq_s32(v627, (int32x4_t)xmmword_208F3A6B0);
                v630 = 0uLL;
                v631 = (int32x4_t)v614;
                v632 = (int8x16_t)(unint64_t)v605;
                v633.i64[0] = 0x800000008;
                v633.i64[1] = 0x800000008;
                v634.i64[0] = 0x3F0000003FLL;
                v634.i64[1] = 0x3F0000003FLL;
                v635 = v623 & 0x3FFFFFF8;
                v636 = 0uLL;
                v637 = 0uLL;
                v638 = 0uLL;
                do
                {
                  v631 = vaddq_s32(v631, v633);
                  v639 = *v607++;
                  v630 = vaddq_s32(v630, v633);
                  v640 = vmovl_u8(v639);
                  v641 = vmovl_high_u16(v640);
                  v642.i64[0] = v641.u32[2];
                  v642.i64[1] = v641.u32[3];
                  v643 = v642;
                  v642.i64[0] = v641.u32[0];
                  v642.i64[1] = v641.u32[1];
                  v644 = v642;
                  v645 = vmovl_u16(*(uint16x4_t *)v640.i8);
                  v642.i64[0] = v645.u32[2];
                  v642.i64[1] = v645.u32[3];
                  v646 = v642;
                  v642.i64[0] = v645.u32[0];
                  v642.i64[1] = v645.u32[1];
                  v647 = v642;
                  v642.i64[0] = v628.u32[2];
                  v642.i64[1] = v628.u32[3];
                  v648 = v642;
                  v642.i64[0] = v628.u32[0];
                  v642.i64[1] = v628.u32[1];
                  v649 = v642;
                  v642.i64[0] = v629.u32[2];
                  v642.i64[1] = v629.u32[3];
                  v650 = v642;
                  v642.i64[0] = v629.u32[0];
                  v642.i64[1] = v629.u32[1];
                  v638 = vorrq_s8((int8x16_t)vshlq_u64(v643, v648), v638);
                  v637 = vorrq_s8((int8x16_t)vshlq_u64(v644, v649), v637);
                  v636 = vorrq_s8((int8x16_t)vshlq_u64(v646, v650), v636);
                  v632 = vorrq_s8((int8x16_t)vshlq_u64(v647, v642), v632);
                  *(_QWORD *)&v618 += 8;
                  v629 = vaddq_s32(v629, v634);
                  v628 = vaddq_s32(v628, v634);
                  v635 -= 8;
                }
                while (v635);
                *v608 = v618;
                v651 = vorrq_s8(vorrq_s8(v632, v637), vorrq_s8(v636, v638));
                v605 = vorr_s8(*(int8x8_t *)v651.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v651, v651, 8uLL));
                v614 = vaddvq_s32(vaddq_s32(v631, v630));
                if ((v623 & 0x3FFFFFF8) == v623)
                  goto LABEL_464;
              }
              else
              {
LABEL_461:
                v624 = *v608;
                v625 = v607;
                v626 = 48 - v60;
              }
              v652 = (int8x8_t)(*(_QWORD *)&v624 + 1);
              do
              {
                v614 += 8;
                v653 = v625->u8[0];
                v625 = (uint8x8_t *)((char *)v625 + 1);
                *(_QWORD *)&v605 |= (unint64_t)v653 << v626;
                *v608 = v652;
                v626 -= 8;
                ++*(_QWORD *)&v652;
              }
              while (v626 >= v617);
            }
          }
LABEL_464:
          v60 = v614;
          goto LABEL_465;
        }
        v723 = v551 + 1;
        v727 = v548;
        v557 = a1 + 1;
        v556 = (uint8x8_t *)a1[1];
        v558 = 48 - v550;
        v559 = *(_QWORD *)a1 - (_QWORD)v556;
        v560 = 8 * v559;
        v561 = 56 - 8 * v559 - v550;
        v562 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
        if (v562)
        {
          if (v559 >= 9)
            v563 = 9;
          else
            v563 = *(_QWORD *)a1 - (_QWORD)v556;
          v564 = v498;
          v562(*(_QWORD *)&a1[5], v556, v729, v563);
          v498 = v564;
          v556 = (uint8x8_t *)v729;
        }
        if (v561 >= 0)
          v550 += 0x40000000;
        if (v560)
          v565 = 1;
        else
          v565 = v561 <= -1;
        v566 = v561 & ~(v561 >> 31);
        if (!v565 || v558 < v566)
        {
          v552 = v723;
          goto LABEL_427;
        }
        v568 = *v557;
        v569 = v547 - v493 + 40;
        if (v569 >= v566 - 1)
          v570 = v566 - 1;
        else
          v570 = v547 - v493 + 40;
        v571 = v547 - v493 - v570 + 47;
        v552 = v723;
        if (v571 < 0x78)
          goto LABEL_424;
        if (v569 >= v566 - 1)
          v569 = v566 - 1;
        if (v557 >= (int8x8_t *)((char *)v556 + ((v547 - v493 - v569 + 47) >> 3) + 1) || v556 >= (uint8x8_t *)&a1[2])
        {
          v573 = (v571 >> 3) + 1;
          v574 = (int8x8_t)(*(_QWORD *)&v568 + (v573 & 0x3FFFFFF8));
          v575 = (uint8x8_t *)((char *)v556 + (v573 & 0x3FFFFFF8));
          v576 = v558 - 8 * (v573 & 0x3FFFFFF8);
          v577 = vdupq_n_s32(v558);
          v578 = vaddq_s32(v577, (int32x4_t)xmmword_208F3A6A0);
          v579 = vaddq_s32(v577, (int32x4_t)xmmword_208F3A6B0);
          v580 = 0uLL;
          v581 = (int32x4_t)v550;
          v582 = (int8x16_t)(unint64_t)v549;
          v583.i64[0] = 0x800000008;
          v583.i64[1] = 0x800000008;
          v584.i64[0] = 0x3F0000003FLL;
          v584.i64[1] = 0x3F0000003FLL;
          v585 = v573 & 0x3FFFFFF8;
          v586 = 0uLL;
          v587 = 0uLL;
          v588 = 0uLL;
          do
          {
            v581 = vaddq_s32(v581, v583);
            v589 = *v556++;
            v580 = vaddq_s32(v580, v583);
            v590 = vmovl_u8(v589);
            v591 = vmovl_high_u16(v590);
            v592.i64[0] = v591.u32[2];
            v592.i64[1] = v591.u32[3];
            v593 = v592;
            v592.i64[0] = v591.u32[0];
            v592.i64[1] = v591.u32[1];
            v594 = v592;
            v595 = vmovl_u16(*(uint16x4_t *)v590.i8);
            v592.i64[0] = v595.u32[2];
            v592.i64[1] = v595.u32[3];
            v596 = v592;
            v592.i64[0] = v595.u32[0];
            v592.i64[1] = v595.u32[1];
            v597 = v592;
            v592.i64[0] = v578.u32[2];
            v592.i64[1] = v578.u32[3];
            v598 = v592;
            v592.i64[0] = v578.u32[0];
            v592.i64[1] = v578.u32[1];
            v599 = v592;
            v592.i64[0] = v579.u32[2];
            v592.i64[1] = v579.u32[3];
            v600 = v592;
            v592.i64[0] = v579.u32[0];
            v592.i64[1] = v579.u32[1];
            v588 = vorrq_s8((int8x16_t)vshlq_u64(v593, v598), v588);
            v587 = vorrq_s8((int8x16_t)vshlq_u64(v594, v599), v587);
            v586 = vorrq_s8((int8x16_t)vshlq_u64(v596, v600), v586);
            v582 = vorrq_s8((int8x16_t)vshlq_u64(v597, v592), v582);
            *(_QWORD *)&v568 += 8;
            v579 = vaddq_s32(v579, v584);
            v578 = vaddq_s32(v578, v584);
            v585 -= 8;
          }
          while (v585);
          *v557 = v568;
          v601 = vorrq_s8(vorrq_s8(v582, v587), vorrq_s8(v586, v588));
          v549 = vorr_s8(*(int8x8_t *)v601.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v601, v601, 8uLL));
          v550 = vaddvq_s32(vaddq_s32(v581, v580));
          if ((v573 & 0x3FFFFFF8) == v573)
          {
LABEL_427:
            v553 = v727 + v498;
            v554 = (int8x8_t)(*(_QWORD *)&v549 - (v552 << 56));
            if (*(_QWORD *)&v549 < (unint64_t)(v552 << 56))
              goto LABEL_392;
            goto LABEL_428;
          }
        }
        else
        {
LABEL_424:
          v574 = *v557;
          v575 = v556;
          v576 = v558;
        }
        v602 = (int8x8_t)(*(_QWORD *)&v574 + 1);
        do
        {
          v550 += 8;
          v603 = v575->u8[0];
          v575 = (uint8x8_t *)((char *)v575 + 1);
          *(_QWORD *)&v549 |= (unint64_t)v603 << v576;
          *v557 = v602;
          v576 -= 8;
          ++*(_QWORD *)&v602;
        }
        while (v576 >= v566);
        goto LABEL_427;
      }
      v719 = v494 + 1;
      v722 = v490;
      v726 = v440;
      v500 = a1 + 1;
      v499 = (uint8x8_t *)a1[1];
      v501 = 48 - v493;
      v502 = *(_QWORD *)a1 - (_QWORD)v499;
      v503 = 8 * v502;
      v504 = 56 - 8 * v502 - v493;
      v505 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
      if (v505)
      {
        v506 = v432;
        if (v502 >= 9)
          v507 = 9;
        else
          v507 = *(_QWORD *)a1 - (_QWORD)v499;
        v505(*(_QWORD *)&a1[5], v499, v729, v507);
        v432 = v506;
        v499 = (uint8x8_t *)v729;
      }
      if (v504 >= 0)
        v493 += 0x40000000;
      if (v503)
        v508 = 1;
      else
        v508 = v504 <= -1;
      v509 = v504 & ~(v504 >> 31);
      if (!v508 || v501 < v509)
      {
        v495 = v719;
        goto LABEL_388;
      }
      v511 = *v500;
      v512 = v489 - v435 + 40;
      if (v512 >= v509 - 1)
        v513 = v509 - 1;
      else
        v513 = v489 - v435 + 40;
      v514 = v489 - v435 - v513 + 47;
      v495 = v719;
      if (v514 < 0x78)
        goto LABEL_385;
      if (v512 >= v509 - 1)
        v512 = v509 - 1;
      if (v500 >= (int8x8_t *)((char *)v499 + ((v489 - v435 - v512 + 47) >> 3) + 1) || v499 >= (uint8x8_t *)&a1[2])
      {
        v516 = (v514 >> 3) + 1;
        v517 = (int8x8_t)(*(_QWORD *)&v511 + (v516 & 0x3FFFFFF8));
        v518 = (uint8x8_t *)((char *)v499 + (v516 & 0x3FFFFFF8));
        v519 = v501 - 8 * (v516 & 0x3FFFFFF8);
        v520 = vdupq_n_s32(v501);
        v521 = vaddq_s32(v520, (int32x4_t)xmmword_208F3A6A0);
        v522 = vaddq_s32(v520, (int32x4_t)xmmword_208F3A6B0);
        v523 = 0uLL;
        v524 = (int32x4_t)v493;
        v525 = (int8x16_t)(unint64_t)v492;
        v526.i64[0] = 0x800000008;
        v526.i64[1] = 0x800000008;
        v527.i64[0] = 0x3F0000003FLL;
        v527.i64[1] = 0x3F0000003FLL;
        v528 = v516 & 0x3FFFFFF8;
        v529 = 0uLL;
        v530 = 0uLL;
        v531 = 0uLL;
        do
        {
          v524 = vaddq_s32(v524, v526);
          v532 = *v499++;
          v523 = vaddq_s32(v523, v526);
          v533 = vmovl_u8(v532);
          v534 = vmovl_high_u16(v533);
          v535.i64[0] = v534.u32[2];
          v535.i64[1] = v534.u32[3];
          v536 = v535;
          v535.i64[0] = v534.u32[0];
          v535.i64[1] = v534.u32[1];
          v537 = v535;
          v538 = vmovl_u16(*(uint16x4_t *)v533.i8);
          v535.i64[0] = v538.u32[2];
          v535.i64[1] = v538.u32[3];
          v539 = v535;
          v535.i64[0] = v538.u32[0];
          v535.i64[1] = v538.u32[1];
          v540 = v535;
          v535.i64[0] = v521.u32[2];
          v535.i64[1] = v521.u32[3];
          v541 = v535;
          v535.i64[0] = v521.u32[0];
          v535.i64[1] = v521.u32[1];
          v542 = v535;
          v535.i64[0] = v522.u32[2];
          v535.i64[1] = v522.u32[3];
          v543 = v535;
          v535.i64[0] = v522.u32[0];
          v535.i64[1] = v522.u32[1];
          v531 = vorrq_s8((int8x16_t)vshlq_u64(v536, v541), v531);
          v530 = vorrq_s8((int8x16_t)vshlq_u64(v537, v542), v530);
          v529 = vorrq_s8((int8x16_t)vshlq_u64(v539, v543), v529);
          v525 = vorrq_s8((int8x16_t)vshlq_u64(v540, v535), v525);
          *(_QWORD *)&v511 += 8;
          v522 = vaddq_s32(v522, v527);
          v521 = vaddq_s32(v521, v527);
          v528 -= 8;
        }
        while (v528);
        *v500 = v511;
        v544 = vorrq_s8(vorrq_s8(v525, v530), vorrq_s8(v529, v531));
        v492 = vorr_s8(*(int8x8_t *)v544.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v544, v544, 8uLL));
        v493 = vaddvq_s32(vaddq_s32(v524, v523));
        if ((v516 & 0x3FFFFFF8) == v516)
        {
LABEL_388:
          v440 = v726;
          v496 = v432 | v722;
          v497 = (int8x8_t)(*(_QWORD *)&v492 - (v495 << 56));
          if (*(_QWORD *)&v492 < (unint64_t)(v495 << 56))
            goto LABEL_353;
          goto LABEL_389;
        }
      }
      else
      {
LABEL_385:
        v517 = *v500;
        v518 = v499;
        v519 = v501;
      }
      v545 = (int8x8_t)(*(_QWORD *)&v517 + 1);
      do
      {
        v493 += 8;
        v546 = v518->u8[0];
        v518 = (uint8x8_t *)((char *)v518 + 1);
        *(_QWORD *)&v492 |= (unint64_t)v546 << v519;
        *v500 = v545;
        v519 -= 8;
        ++*(_QWORD *)&v545;
      }
      while (v519 >= v509);
      goto LABEL_388;
    }
    v715 = v436 + 1;
    v721 = v724 | v720 | v271;
    v725 = v432;
    v442 = a1 + 1;
    v441 = (uint8x8_t *)a1[1];
    v443 = 48 - v435;
    v444 = *(_QWORD *)a1 - (_QWORD)v441;
    v445 = 8 * v444;
    v446 = 56 - 8 * v444 - v435;
    v447 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
    if (v447)
    {
      if (v444 >= 9)
        v448 = 9;
      else
        v448 = *(_QWORD *)a1 - (_QWORD)v441;
      v718 = v324;
      v449 = v377;
      v447(*(_QWORD *)&a1[5], v441, v729, v448);
      v443 = 48 - v435;
      v377 = v449;
      v324 = v718;
      v441 = (uint8x8_t *)v729;
    }
    if (v446 >= 0)
      v435 += 0x40000000;
    if (v445)
      v450 = 1;
    else
      v450 = v446 <= -1;
    v451 = v446 & ~(v446 >> 31);
    if (!v450 || v443 < v451)
    {
      v432 = v725;
      v437 = v715;
      goto LABEL_349;
    }
    v453 = *v442;
    v454 = v433 - v380 + 40;
    if (v454 >= v451 - 1)
      v455 = v451 - 1;
    else
      v455 = v433 - v380 + 40;
    v456 = v433 - v380 - v455 + 47;
    v432 = v725;
    v437 = v715;
    if (v456 < 0x78)
      goto LABEL_346;
    if (v454 >= v451 - 1)
      v454 = v451 - 1;
    if (v442 >= (int8x8_t *)((char *)v441 + ((v433 - v380 - v454 + 47) >> 3) + 1) || v441 >= (uint8x8_t *)&a1[2])
    {
      v458 = (v456 >> 3) + 1;
      v459 = (int8x8_t)(*(_QWORD *)&v453 + (v458 & 0x3FFFFFF8));
      v460 = (uint8x8_t *)((char *)v441 + (v458 & 0x3FFFFFF8));
      v461 = v443 - 8 * (v458 & 0x3FFFFFF8);
      v462 = vdupq_n_s32(v443);
      v463 = vaddq_s32(v462, (int32x4_t)xmmword_208F3A6A0);
      v464 = vaddq_s32(v462, (int32x4_t)xmmword_208F3A6B0);
      v465 = 0uLL;
      v466 = (int32x4_t)v435;
      v467 = (int8x16_t)(unint64_t)v434;
      v468.i64[0] = 0x800000008;
      v468.i64[1] = 0x800000008;
      v469.i64[0] = 0x3F0000003FLL;
      v469.i64[1] = 0x3F0000003FLL;
      v470 = v458 & 0x3FFFFFF8;
      v471 = 0uLL;
      v472 = 0uLL;
      v473 = 0uLL;
      do
      {
        v466 = vaddq_s32(v466, v468);
        v474 = *v441++;
        v465 = vaddq_s32(v465, v468);
        v475 = vmovl_u8(v474);
        v476 = vmovl_high_u16(v475);
        v477.i64[0] = v476.u32[2];
        v477.i64[1] = v476.u32[3];
        v478 = v477;
        v477.i64[0] = v476.u32[0];
        v477.i64[1] = v476.u32[1];
        v479 = v477;
        v480 = vmovl_u16(*(uint16x4_t *)v475.i8);
        v477.i64[0] = v480.u32[2];
        v477.i64[1] = v480.u32[3];
        v481 = v477;
        v477.i64[0] = v480.u32[0];
        v477.i64[1] = v480.u32[1];
        v482 = v477;
        v477.i64[0] = v463.u32[2];
        v477.i64[1] = v463.u32[3];
        v483 = v477;
        v477.i64[0] = v463.u32[0];
        v477.i64[1] = v463.u32[1];
        v484 = v477;
        v477.i64[0] = v464.u32[2];
        v477.i64[1] = v464.u32[3];
        v485 = v477;
        v477.i64[0] = v464.u32[0];
        v477.i64[1] = v464.u32[1];
        v473 = vorrq_s8((int8x16_t)vshlq_u64(v478, v483), v473);
        v472 = vorrq_s8((int8x16_t)vshlq_u64(v479, v484), v472);
        v471 = vorrq_s8((int8x16_t)vshlq_u64(v481, v485), v471);
        v467 = vorrq_s8((int8x16_t)vshlq_u64(v482, v477), v467);
        *(_QWORD *)&v453 += 8;
        v464 = vaddq_s32(v464, v469);
        v463 = vaddq_s32(v463, v469);
        v470 -= 8;
      }
      while (v470);
      *v442 = v453;
      v486 = vorrq_s8(vorrq_s8(v467, v472), vorrq_s8(v471, v473));
      v434 = vorr_s8(*(int8x8_t *)v486.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v486, v486, 8uLL));
      v435 = vaddvq_s32(vaddq_s32(v466, v465));
      if ((v458 & 0x3FFFFFF8) == v458)
      {
LABEL_349:
        v438 = v721 | v324;
        v439 = (int8x8_t)(*(_QWORD *)&v434 - (v437 << 56));
        if (*(_QWORD *)&v434 < (unint64_t)(v437 << 56))
          goto LABEL_314;
        goto LABEL_350;
      }
    }
    else
    {
LABEL_346:
      v459 = *v442;
      v460 = v441;
      v461 = v443;
    }
    v487 = (int8x8_t)(*(_QWORD *)&v459 + 1);
    do
    {
      v435 += 8;
      v488 = v460->u8[0];
      v460 = (uint8x8_t *)((char *)v460 + 1);
      *(_QWORD *)&v434 |= (unint64_t)v488 << v461;
      *v442 = v487;
      v461 -= 8;
      ++*(_QWORD *)&v487;
    }
    while (v461 >= v451);
    goto LABEL_349;
  }
  LOBYTE(v61) = 0;
  v62 = a1 + 1;
  v63.i64[0] = 0x800000008;
  v63.i64[1] = 0x800000008;
  v64.i64[0] = 0x3F0000003FLL;
  v64.i64[1] = 0x3F0000003FLL;
  do
  {
    v68 = a2[(v61 >> 1) + 2];
    if ((v60 & 0x80000000) == 0)
      goto LABEL_79;
    v69 = (uint8x8_t *)a1[1];
    v70 = *(_QWORD *)a1 - (_QWORD)v69;
    v71 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
    if (v71)
    {
      if (v70 >= 9)
        v72 = 9;
      else
        v72 = *(_QWORD *)a1 - (_QWORD)v69;
      v71(*(_QWORD *)&a1[5], v69, v729, v72);
      v64.i64[0] = 0x3F0000003FLL;
      v64.i64[1] = 0x3F0000003FLL;
      v63.i64[0] = 0x800000008;
      v63.i64[1] = 0x800000008;
      v69 = (uint8x8_t *)v729;
    }
    v73 = 48 - v60;
    v74 = 56 - v60 - 8 * v70;
    if (v74 < 0)
      v75 = v60;
    else
      v75 = v60 + 0x40000000;
    if (8 * v70)
      v76 = 1;
    else
      v76 = v74 <= -1;
    v77 = v74 & ~(v74 >> 31);
    if (v76 && v73 >= v77)
    {
      v79 = *v62;
      v80 = v77 - 1;
      if (v77 - 1 >= (int)(40 - v60))
        v81 = 40 - v60;
      else
        v81 = v77 - 1;
      v82 = 47 - v60 - v81;
      if (v82 < 0x78)
        goto LABEL_75;
      if (v80 >= (int)(40 - v60))
        v80 = 40 - v60;
      if (v62 >= (int8x8_t *)((char *)v69 + ((47 - v60 - v80) >> 3) + 1) || v69 >= (uint8x8_t *)&a1[2])
      {
        v84 = (v82 >> 3) + 1;
        v85 = (int8x8_t)(*(_QWORD *)&v79 + (v84 & 0x3FFFFFF8));
        v86 = (uint8x8_t *)((char *)v69 + (v84 & 0x3FFFFFF8));
        v87 = v73 - 8 * (v84 & 0x3FFFFFF8);
        v88 = vdupq_n_s32(v73);
        v89 = vaddq_s32(v88, (int32x4_t)xmmword_208F3A6A0);
        v90 = vaddq_s32(v88, (int32x4_t)xmmword_208F3A6B0);
        v91 = 0uLL;
        v92 = (int32x4_t)v75;
        v93 = (int8x16_t)(unint64_t)v59;
        v94 = v84 & 0x3FFFFFF8;
        v95 = 0uLL;
        v96 = 0uLL;
        v97 = 0uLL;
        do
        {
          v92 = vaddq_s32(v92, v63);
          v98 = *v69++;
          v91 = vaddq_s32(v91, v63);
          v99 = vmovl_u8(v98);
          v100 = vmovl_high_u16(v99);
          v101.i64[0] = v100.u32[2];
          v101.i64[1] = v100.u32[3];
          v102 = v101;
          v101.i64[0] = v100.u32[0];
          v101.i64[1] = v100.u32[1];
          v103 = v101;
          v104 = vmovl_u16(*(uint16x4_t *)v99.i8);
          v101.i64[0] = v104.u32[2];
          v101.i64[1] = v104.u32[3];
          v105 = v101;
          v101.i64[0] = v104.u32[0];
          v101.i64[1] = v104.u32[1];
          v106 = v101;
          v101.i64[0] = v89.u32[2];
          v101.i64[1] = v89.u32[3];
          v107 = v101;
          v101.i64[0] = v89.u32[0];
          v101.i64[1] = v89.u32[1];
          v108 = v101;
          v101.i64[0] = v90.u32[2];
          v101.i64[1] = v90.u32[3];
          v109 = v101;
          v101.i64[0] = v90.u32[0];
          v101.i64[1] = v90.u32[1];
          v97 = vorrq_s8((int8x16_t)vshlq_u64(v102, v107), v97);
          v96 = vorrq_s8((int8x16_t)vshlq_u64(v103, v108), v96);
          v95 = vorrq_s8((int8x16_t)vshlq_u64(v105, v109), v95);
          v93 = vorrq_s8((int8x16_t)vshlq_u64(v106, v101), v93);
          *(_QWORD *)&v79 += 8;
          v90 = vaddq_s32(v90, v64);
          v89 = vaddq_s32(v89, v64);
          v94 -= 8;
        }
        while (v94);
        *v62 = v79;
        v110 = vorrq_s8(vorrq_s8(v93, v96), vorrq_s8(v95, v97));
        v59 = vorr_s8(*(int8x8_t *)v110.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL));
        v75 = vaddvq_s32(vaddq_s32(v92, v91));
        if ((v84 & 0x3FFFFFF8) == v84)
          goto LABEL_78;
      }
      else
      {
LABEL_75:
        v85 = *v62;
        v86 = v69;
        v87 = 48 - v60;
      }
      v111 = (int8x8_t)(*(_QWORD *)&v85 + 1);
      do
      {
        v75 += 8;
        v112 = v86->u8[0];
        v86 = (uint8x8_t *)((char *)v86 + 1);
        *(_QWORD *)&v59 |= (unint64_t)v112 << v87;
        *v62 = v111;
        v87 -= 8;
        ++*(_QWORD *)&v111;
      }
      while (v87 >= v77);
    }
LABEL_78:
    v60 = v75;
LABEL_79:
    v65 = (((v58 - 1) * v68) >> 8) + 1;
    v113 = (int8x8_t)(*(_QWORD *)&v59 - (v65 << 56));
    if (*(_QWORD *)&v59 >= (unint64_t)(v65 << 56))
    {
      LODWORD(v65) = a1[3].i32[1] - v65;
      v66 = 1;
      v59 = v113;
    }
    else
    {
      v66 = 0;
    }
    v67 = vp8_norm[v65];
    v58 = (_DWORD)v65 << v67;
    *(_QWORD *)&v59 <<= v67;
    v60 -= v67;
    a1[2] = v59;
    a1[3].i32[0] = v60;
    a1[3].i32[1] = (_DWORD)v65 << v67;
    v61 = vp8_small_mvtree[v66 + (unint64_t)v61];
  }
  while (v61 > 0);
  if (v61)
  {
    v126 = -v61;
    goto LABEL_469;
  }
  return 0;
}

uint64_t vp8_denoiser_allocate(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  int v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;

  *(_DWORD *)(a1 + 968) = a5;
  *(_DWORD *)(a1 + 152) = 0;
  if (*(_QWORD *)(a1 + 96))
  {
    v12 = *(_QWORD *)(a1 + 88);
    if (v12)
      free(*(void **)(v12 - 8));
  }
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if ((vp8_yv12_realloc_frame_buffer(a1, a2, a3, 32) & 0x80000000) != 0)
    goto LABEL_102;
  bzero(*(void **)(a1 + 88), *(_QWORD *)(a1 + 112));
  v13 = (_OWORD *)(a1 + 160);
  *(_DWORD *)(a1 + 312) = 0;
  if (*(_QWORD *)(a1 + 256))
  {
    v14 = *(_QWORD *)(a1 + 248);
    if (v14)
      free(*(void **)(v14 - 8));
  }
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *v13 = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  if ((vp8_yv12_realloc_frame_buffer(a1 + 160, a2, a3, 32) & 0x80000000) != 0)
    goto LABEL_102;
  bzero(*(void **)(a1 + 248), *(_QWORD *)(a1 + 272));
  v15 = (_OWORD *)(a1 + 320);
  *(_DWORD *)(a1 + 472) = 0;
  if (*(_QWORD *)(a1 + 416))
  {
    v16 = *(_QWORD *)(a1 + 408);
    if (v16)
      free(*(void **)(v16 - 8));
  }
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *v15 = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  if ((vp8_yv12_realloc_frame_buffer(a1 + 320, a2, a3, 32) & 0x80000000) != 0)
    goto LABEL_102;
  bzero(*(void **)(a1 + 408), *(_QWORD *)(a1 + 432));
  v17 = (_OWORD *)(a1 + 480);
  *(_DWORD *)(a1 + 632) = 0;
  if (*(_QWORD *)(a1 + 576))
  {
    v18 = *(_QWORD *)(a1 + 568);
    if (v18)
      free(*(void **)(v18 - 8));
  }
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *v17 = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  if ((vp8_yv12_realloc_frame_buffer(a1 + 480, a2, a3, 32) & 0x80000000) != 0)
  {
LABEL_102:
    if (*(_QWORD *)(a1 + 96))
    {
      v26 = *(_QWORD *)(a1 + 88);
      if (v26)
        free(*(void **)(v26 - 8));
    }
    v27 = 0uLL;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    if (*(_QWORD *)(a1 + 256))
    {
      v28 = *(_QWORD *)(a1 + 248);
      if (v28)
      {
        free(*(void **)(v28 - 8));
        v27 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 288) = v27;
    *(_OWORD *)(a1 + 304) = v27;
    *(_OWORD *)(a1 + 256) = v27;
    *(_OWORD *)(a1 + 272) = v27;
    *(_OWORD *)(a1 + 224) = v27;
    *(_OWORD *)(a1 + 240) = v27;
    *(_OWORD *)(a1 + 192) = v27;
    *(_OWORD *)(a1 + 208) = v27;
    *(_OWORD *)(a1 + 160) = v27;
    *(_OWORD *)(a1 + 176) = v27;
    if (*(_QWORD *)(a1 + 416))
    {
      v29 = *(_QWORD *)(a1 + 408);
      if (v29)
        free(*(void **)(v29 - 8));
    }
    v30 = 0uLL;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    if (*(_QWORD *)(a1 + 576))
    {
      v31 = *(_QWORD *)(a1 + 568);
      if (v31)
      {
        free(*(void **)(v31 - 8));
        v30 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 608) = v30;
    *(_OWORD *)(a1 + 624) = v30;
    *(_OWORD *)(a1 + 576) = v30;
    *(_OWORD *)(a1 + 592) = v30;
    *(_OWORD *)(a1 + 544) = v30;
    *(_OWORD *)(a1 + 560) = v30;
    *(_OWORD *)(a1 + 512) = v30;
    *(_OWORD *)(a1 + 528) = v30;
    *(_OWORD *)(a1 + 480) = v30;
    *(_OWORD *)(a1 + 496) = v30;
    v19 = (_OWORD *)(a1 + 640);
    if (!*(_QWORD *)(a1 + 736))
    {
LABEL_44:
      v33 = 0uLL;
      v19[8] = 0u;
      v19[9] = 0u;
      v19[6] = 0u;
      v19[7] = 0u;
      v19[4] = 0u;
      v19[5] = 0u;
      v19[2] = 0u;
      v19[3] = 0u;
      *v19 = 0u;
      v19[1] = 0u;
      if (*(_QWORD *)(a1 + 896))
      {
        v34 = *(_QWORD *)(a1 + 888);
        if (v34)
        {
          free(*(void **)(v34 - 8));
          v33 = 0uLL;
        }
      }
      *(_OWORD *)(a1 + 928) = v33;
      *(_OWORD *)(a1 + 944) = v33;
      *(_OWORD *)(a1 + 896) = v33;
      *(_OWORD *)(a1 + 912) = v33;
      *(_OWORD *)(a1 + 864) = v33;
      *(_OWORD *)(a1 + 880) = v33;
      *(_OWORD *)(a1 + 832) = v33;
      *(_OWORD *)(a1 + 848) = v33;
      *(_OWORD *)(a1 + 800) = v33;
      *(_OWORD *)(a1 + 816) = v33;
      v35 = *(_QWORD *)(a1 + 960);
      if (!v35)
        return 1;
LABEL_48:
      free(*(void **)(v35 - 8));
      return 1;
    }
LABEL_42:
    v32 = *(_QWORD *)(a1 + 728);
    if (v32)
      free(*(void **)(v32 - 8));
    goto LABEL_44;
  }
  bzero(*(void **)(a1 + 568), *(_QWORD *)(a1 + 592));
  v19 = (_OWORD *)(a1 + 640);
  *(_DWORD *)(a1 + 792) = 0;
  if (*(_QWORD *)(a1 + 736))
  {
    v20 = *(_QWORD *)(a1 + 728);
    if (v20)
      free(*(void **)(v20 - 8));
  }
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *v19 = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  if ((vp8_yv12_realloc_frame_buffer(a1 + 640, a2, a3, 32) & 0x80000000) != 0)
  {
    if (*(_QWORD *)(a1 + 96))
    {
      v37 = *(_QWORD *)(a1 + 88);
      if (v37)
        free(*(void **)(v37 - 8));
    }
    v38 = 0uLL;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    if (*(_QWORD *)(a1 + 256))
    {
      v39 = *(_QWORD *)(a1 + 248);
      if (v39)
      {
        free(*(void **)(v39 - 8));
        v38 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 288) = v38;
    *(_OWORD *)(a1 + 304) = v38;
    *(_OWORD *)(a1 + 256) = v38;
    *(_OWORD *)(a1 + 272) = v38;
    *(_OWORD *)(a1 + 224) = v38;
    *(_OWORD *)(a1 + 240) = v38;
    *(_OWORD *)(a1 + 192) = v38;
    *(_OWORD *)(a1 + 208) = v38;
    *v13 = v38;
    *(_OWORD *)(a1 + 176) = v38;
    if (*(_QWORD *)(a1 + 416))
    {
      v40 = *(_QWORD *)(a1 + 408);
      if (v40)
        free(*(void **)(v40 - 8));
    }
    v41 = 0uLL;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *v15 = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    if (*(_QWORD *)(a1 + 576))
    {
      v42 = *(_QWORD *)(a1 + 568);
      if (v42)
      {
        free(*(void **)(v42 - 8));
        v41 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 608) = v41;
    *(_OWORD *)(a1 + 624) = v41;
    *(_OWORD *)(a1 + 576) = v41;
    *(_OWORD *)(a1 + 592) = v41;
    *(_OWORD *)(a1 + 544) = v41;
    *(_OWORD *)(a1 + 560) = v41;
    *(_OWORD *)(a1 + 512) = v41;
    *(_OWORD *)(a1 + 528) = v41;
    *v17 = v41;
    *(_OWORD *)(a1 + 496) = v41;
    if (!*(_QWORD *)(a1 + 736))
      goto LABEL_44;
    goto LABEL_42;
  }
  v65 = a6;
  bzero(*(void **)(a1 + 728), *(_QWORD *)(a1 + 752));
  v21 = (_OWORD *)(a1 + 800);
  if (*(_QWORD *)(a1 + 896))
  {
    v22 = *(_QWORD *)(a1 + 888);
    if (v22)
      free(*(void **)(v22 - 8));
  }
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *v21 = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  if ((vp8_yv12_realloc_frame_buffer(a1 + 800, a2, a3, 32) & 0x80000000) != 0)
  {
    if (!*(_QWORD *)(a1 + 96))
      goto LABEL_74;
LABEL_72:
    v54 = *(_QWORD *)(a1 + 88);
    if (v54)
      free(*(void **)(v54 - 8));
LABEL_74:
    v55 = 0uLL;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    if (*(_QWORD *)(a1 + 256))
    {
      v56 = *(_QWORD *)(a1 + 248);
      if (v56)
      {
        free(*(void **)(v56 - 8));
        v55 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 288) = v55;
    *(_OWORD *)(a1 + 304) = v55;
    *(_OWORD *)(a1 + 256) = v55;
    *(_OWORD *)(a1 + 272) = v55;
    *(_OWORD *)(a1 + 224) = v55;
    *(_OWORD *)(a1 + 240) = v55;
    *(_OWORD *)(a1 + 192) = v55;
    *(_OWORD *)(a1 + 208) = v55;
    *v13 = v55;
    *(_OWORD *)(a1 + 176) = v55;
    if (*(_QWORD *)(a1 + 416))
    {
      v57 = *(_QWORD *)(a1 + 408);
      if (v57)
        free(*(void **)(v57 - 8));
    }
    v58 = 0uLL;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *v15 = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    if (*(_QWORD *)(a1 + 576))
    {
      v59 = *(_QWORD *)(a1 + 568);
      if (v59)
      {
        free(*(void **)(v59 - 8));
        v58 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 608) = v58;
    *(_OWORD *)(a1 + 624) = v58;
    *(_OWORD *)(a1 + 576) = v58;
    *(_OWORD *)(a1 + 592) = v58;
    *(_OWORD *)(a1 + 544) = v58;
    *(_OWORD *)(a1 + 560) = v58;
    *(_OWORD *)(a1 + 512) = v58;
    *(_OWORD *)(a1 + 528) = v58;
    *v17 = v58;
    *(_OWORD *)(a1 + 496) = v58;
    if (*(_QWORD *)(a1 + 736))
    {
      v60 = *(_QWORD *)(a1 + 728);
      if (v60)
        free(*(void **)(v60 - 8));
    }
    v61 = 0uLL;
    *(_OWORD *)(a1 + 768) = 0u;
    *(_OWORD *)(a1 + 784) = 0u;
    *(_OWORD *)(a1 + 736) = 0u;
    *(_OWORD *)(a1 + 752) = 0u;
    *(_OWORD *)(a1 + 704) = 0u;
    *(_OWORD *)(a1 + 720) = 0u;
    *(_OWORD *)(a1 + 672) = 0u;
    *(_OWORD *)(a1 + 688) = 0u;
    *v19 = 0u;
    *(_OWORD *)(a1 + 656) = 0u;
    if (*(_QWORD *)(a1 + 896))
    {
      v62 = *(_QWORD *)(a1 + 888);
      if (v62)
      {
        free(*(void **)(v62 - 8));
        v61 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 928) = v61;
    *(_OWORD *)(a1 + 944) = v61;
    *(_OWORD *)(a1 + 896) = v61;
    *(_OWORD *)(a1 + 912) = v61;
    *(_OWORD *)(a1 + 864) = v61;
    *(_OWORD *)(a1 + 880) = v61;
    *(_OWORD *)(a1 + 832) = v61;
    *(_OWORD *)(a1 + 848) = v61;
    *v21 = v61;
    *(_OWORD *)(a1 + 816) = v61;
    v35 = *(_QWORD *)(a1 + 960);
    if (!v35)
      return 1;
    goto LABEL_48;
  }
  bzero(*(void **)(a1 + 888), *(_QWORD *)(a1 + 912));
  v23 = a5 * a4;
  v24 = a5 * a4;
  if (v23)
  {
    if ((v24 & 0x80000000) != 0 || (v25 = v23 + 23, v24 + 23 > 0x10000000000))
    {
LABEL_71:
      *(_QWORD *)(a1 + 960) = 0;
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_74;
      goto LABEL_72;
    }
  }
  else
  {
    v25 = 23;
  }
  v43 = malloc_type_malloc(v25, 0x74AD08B5uLL);
  if (!v43)
    goto LABEL_71;
  v44 = (_QWORD *)(((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF0);
  *(v44 - 1) = v43;
  if (!v44)
    goto LABEL_71;
  bzero((void *)(((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF0), v24);
  *(_QWORD *)(a1 + 960) = v44;
  bzero(v44, v24);
  v45 = v65;
  if ((v65 - 1) > 2)
  {
    v49 = 0;
    v52 = 0;
    v53 = -1;
    v51 = 100;
    v50 = 95;
    v48 = 8;
    v47 = 1;
    v45 = 2;
  }
  else
  {
    v46 = 4 * (v65 - 1);
    v47 = *(_DWORD *)((char *)&unk_208F3C380 + v46);
    v48 = *(_DWORD *)((char *)&unk_208F3C38C + v46);
    v49 = *(_DWORD *)((char *)&unk_208F3C398 + v46);
    v50 = *(_DWORD *)((char *)&unk_208F3C3A4 + v46);
    v51 = *(_DWORD *)((char *)&unk_208F3C3B0 + v46);
    v52 = *(_DWORD *)((char *)&unk_208F3C3BC + v46);
    v53 = *(_DWORD *)((char *)&unk_208F3C3C8 + v46);
  }
  *(_DWORD *)(a1 + 972) = v45;
  *(_DWORD *)(a1 + 1004) = v47;
  *(_DWORD *)(a1 + 1008) = v48;
  *(_DWORD *)(a1 + 1012) = v49;
  *(_DWORD *)(a1 + 1016) = v50;
  *(_DWORD *)(a1 + 1020) = v51;
  *(_DWORD *)(a1 + 1024) = v52;
  *(_DWORD *)(a1 + 1028) = v53;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 992) = 0x8000000050;
  *(_DWORD *)(a1 + 1000) = 400000;
  v63 = a3 * a2;
  *(_OWORD *)(a1 + 976) = xmmword_208F3C370;
  if (a3 * a2 > 921600)
  {
    result = 0;
    *(_DWORD *)(a1 + 1000) = 3000000;
    v64 = 200;
LABEL_98:
    *(_DWORD *)(a1 + 976) = v64;
    return result;
  }
  if (v63 >= 518401)
  {
    result = 0;
    *(_DWORD *)(a1 + 1000) = 1200000;
    v64 = 120;
    goto LABEL_98;
  }
  if (v63 > 307200)
  {
    result = 0;
    *(_DWORD *)(a1 + 1000) = 600000;
    v64 = 100;
    goto LABEL_98;
  }
  return 0;
}

void vp8_denoiser_free(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 96))
    {
      v2 = *(_QWORD *)(a1 + 88);
      if (v2)
        free(*(void **)(v2 - 8));
    }
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  if (*(_QWORD *)(a1 + 256))
  {
    v3 = *(_QWORD *)(a1 + 248);
    if (v3)
      free(*(void **)(v3 - 8));
  }
  v4 = 0uLL;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  if (*(_QWORD *)(a1 + 416))
  {
    v5 = *(_QWORD *)(a1 + 408);
    if (v5)
    {
      free(*(void **)(v5 - 8));
      v4 = 0uLL;
    }
  }
  *(_OWORD *)(a1 + 448) = v4;
  *(_OWORD *)(a1 + 464) = v4;
  *(_OWORD *)(a1 + 416) = v4;
  *(_OWORD *)(a1 + 432) = v4;
  *(_OWORD *)(a1 + 384) = v4;
  *(_OWORD *)(a1 + 400) = v4;
  *(_OWORD *)(a1 + 352) = v4;
  *(_OWORD *)(a1 + 368) = v4;
  *(_OWORD *)(a1 + 320) = v4;
  *(_OWORD *)(a1 + 336) = v4;
  if (*(_QWORD *)(a1 + 576))
  {
    v6 = *(_QWORD *)(a1 + 568);
    if (v6)
      free(*(void **)(v6 - 8));
  }
  v7 = 0uLL;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  if (*(_QWORD *)(a1 + 736))
  {
    v8 = *(_QWORD *)(a1 + 728);
    if (v8)
    {
      free(*(void **)(v8 - 8));
      v7 = 0uLL;
    }
  }
  *(_OWORD *)(a1 + 768) = v7;
  *(_OWORD *)(a1 + 784) = v7;
  *(_OWORD *)(a1 + 736) = v7;
  *(_OWORD *)(a1 + 752) = v7;
  *(_OWORD *)(a1 + 704) = v7;
  *(_OWORD *)(a1 + 720) = v7;
  *(_OWORD *)(a1 + 672) = v7;
  *(_OWORD *)(a1 + 688) = v7;
  *(_OWORD *)(a1 + 640) = v7;
  *(_OWORD *)(a1 + 656) = v7;
  if (*(_QWORD *)(a1 + 896))
  {
    v9 = *(_QWORD *)(a1 + 888);
    if (v9)
      free(*(void **)(v9 - 8));
  }
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  v10 = *(_QWORD *)(a1 + 960);
  if (v10)
    free(*(void **)(v10 - 8));
}

__n128 vp8_denoiser_denoise_mb(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, int a6, unsigned __int8 *a7, int a8, int a9, int a10, int a11)
{
  int v11;
  int v13;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  _BOOL4 v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  _QWORD *v33;
  uint64_t v35;
  _OWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  __n128 result;
  char v41;
  uint64_t *v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  _OWORD *v52;
  uint64_t v53;
  _OWORD *v54;
  _OWORD *v55;
  _OWORD *v56;
  _OWORD *v57;
  _OWORD *v58;
  _OWORD *v59;
  _OWORD *v60;
  _OWORD *v61;
  _OWORD *v62;
  _OWORD *v63;
  _OWORD *v64;
  _OWORD *v65;
  _OWORD *v66;
  _OWORD *v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  int v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  _OWORD *v108;
  _OWORD *v109;
  _OWORD *v110;
  _OWORD *v111;
  _OWORD *v112;
  _OWORD *v113;
  _OWORD *v114;
  _OWORD *v115;
  _OWORD *v116;
  _OWORD *v117;
  _OWORD *v118;
  _OWORD *v119;
  _OWORD *v120;
  _OWORD *v121;
  _OWORD *v122;
  int v123;
  uint64_t v126;
  int v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;

  v11 = a8;
  v13 = a5;
  v16 = *(_DWORD *)(a2 + 8832);
  if (v16)
  {
    v17 = *(_DWORD *)(a2 + 8828);
    v18 = *(uint64_t **)(a2 + 8096);
    v19 = *(_DWORD *)(a1 + 1016) * a4 / 100;
    v126 = *v18;
    v127 = *((_DWORD *)v18 + 2);
    *((_BYTE *)v18 + 2) = v17;
    *(_BYTE *)v18 = *(_DWORD *)(a2 + 8820);
    *((_DWORD *)v18 + 1) = *(_DWORD *)(a2 + 8824);
    *((_BYTE *)v18 + 10) = *(_BYTE *)(a2 + 8836);
    v20 = *(__int16 *)(a2 + 8826);
    v21 = *(__int16 *)(a2 + 8824);
    if ((v20 * v20 + v21 * v21) >= 0x272)
      v22 = 0;
    else
      v22 = 5120;
    if (v17 && (int)(v19 - a3) > v22)
    {
      v16 = v17;
    }
    else
    {
      LOWORD(v20) = 0;
      LOWORD(v21) = 0;
      *(_DWORD *)(a2 + 8812) = 1;
      *((_BYTE *)v18 + 2) = *(_DWORD *)(a2 + 8832);
      *(_BYTE *)v18 = 7;
      *((_DWORD *)v18 + 1) = 0;
      *(_QWORD *)(a2 + 8820) = 7;
      a3 = v19;
    }
    v23 = (__int16)v20 * (__int16)v20 + (__int16)v21 * (__int16)v21;
    v24 = 625 * *(_DWORD *)(a1 + 1008);
    if (v23 >= 625 * *(_DWORD *)(a1 + 1012))
    {
      if (*(_DWORD *)(a2 + 8816))
        v25 = 20480;
      else
        v25 = 10240;
    }
    else
    {
      *(_DWORD *)(a2 + 8816) = 1;
      v25 = 20480;
    }
    v27 = a3 <= *(_DWORD *)(a1 + 1004) * v25 && v23 <= v24;
    if (v23)
      v28 = 1;
    else
      v28 = a11 < 2;
    v29 = !v28 && v27;
    if (!*(_DWORD *)(a2 + 8808))
      v29 = v27;
    if (v29)
    {
      v30 = a2 + 4224;
      v31 = (_OWORD *)(a2 + 7776);
      v144 = *(_OWORD *)(a2 + 7872);
      v145 = *(_OWORD *)(a2 + 7888);
      v146 = *(_OWORD *)(a2 + 7904);
      v147 = *(_OWORD *)(a2 + 7920);
      v140 = *(_OWORD *)(a2 + 7808);
      v141 = *(_OWORD *)(a2 + 7824);
      v142 = *(_OWORD *)(a2 + 7840);
      v143 = *(_OWORD *)(a2 + 7856);
      v138 = *(_OWORD *)(a2 + 7776);
      v139 = *(_OWORD *)(a2 + 7792);
      v32 = (_OWORD *)(a2 + 7936);
      v134 = *(_OWORD *)(a2 + 8032);
      v135 = *(_OWORD *)(a2 + 8048);
      v136 = *(_OWORD *)(a2 + 8064);
      v137 = *(_OWORD *)(a2 + 8080);
      v130 = *(_OWORD *)(a2 + 7968);
      v131 = *(_OWORD *)(a2 + 7984);
      v132 = *(_OWORD *)(a2 + 8000);
      v133 = *(_OWORD *)(a2 + 8016);
      v128 = *(_OWORD *)(a2 + 7936);
      v129 = *(_OWORD *)(a2 + 7952);
      v33 = (_QWORD *)(a1 + 160 * v16);
      *(_QWORD *)(a2 + 7832) = v33[7] + a5;
      v35 = a6;
      *(_QWORD *)(a2 + 7840) = v33[8] + a6;
      *(_QWORD *)(a2 + 7848) = v33[9] + a6;
      v36 = (_OWORD *)(*(_QWORD *)(a1 + 696) + a5);
      *(_QWORD *)(a2 + 7992) = v36;
      v37 = (_QWORD *)(*(_QWORD *)(a1 + 704) + a6);
      *(_QWORD *)(a2 + 8000) = v37;
      v38 = (_QWORD *)(*(_QWORD *)(a1 + 712) + a6);
      *(_QWORD *)(a2 + 8008) = v38;
      v123 = a6;
      if (*(_DWORD *)(a2 + 8768))
        vp8_build_inter16x16_predictors_mb(v30, v36, v37, v38, *(_DWORD *)(a2 + 7952), *(unsigned int *)(a2 + 7972));
      else
        vp8_build_inter_predictors_mb(v30);
      *(_OWORD *)(a2 + 7872) = v144;
      *(_OWORD *)(a2 + 7888) = v145;
      *(_OWORD *)(a2 + 7904) = v146;
      *(_OWORD *)(a2 + 7920) = v147;
      *(_OWORD *)(a2 + 7808) = v140;
      *(_OWORD *)(a2 + 7824) = v141;
      *(_OWORD *)(a2 + 7840) = v142;
      *(_OWORD *)(a2 + 7856) = v143;
      *v31 = v138;
      *(_OWORD *)(a2 + 7792) = v139;
      *(_OWORD *)(a2 + 8000) = v132;
      *(_OWORD *)(a2 + 8016) = v133;
      *(_OWORD *)(a2 + 7968) = v130;
      *(_OWORD *)(a2 + 7984) = v131;
      *(_OWORD *)(a2 + 8064) = v136;
      *(_OWORD *)(a2 + 8080) = v137;
      *(_OWORD *)(a2 + 8032) = v134;
      *(_OWORD *)(a2 + 8048) = v135;
      *v32 = v128;
      *(_OWORD *)(a2 + 7952) = v129;
      *((_DWORD *)v18 + 2) = v127;
      *v18 = v126;
      v39 = vp8_denoiser_filter_neon((uint8x16_t *)(*(_QWORD *)(a1 + 696) + a5), *(_DWORD *)(a1 + 656), (uint8x16_t *)(*(_QWORD *)(a1 + 56) + a5), *(_DWORD *)(a1 + 16), (uint8x16_t *)(a2 + 1600), 16, v23, *(_DWORD *)(a2 + 8816));
      if (v23)
        v41 = 2;
      else
        v41 = 1;
      *(_BYTE *)(*(_QWORD *)(a1 + 960) + a10) = v41;
      if (!v23 && *(_DWORD *)(a1 + 972) != 1 && v39 == 1)
      {
        v42 = (uint64_t *)(*(_QWORD *)(a1 + 704) + v35);
        v43 = (char *)(*(_QWORD *)(a1 + 64) + v35);
        v44 = (uint64_t *)(*(_QWORD *)(a1 + 712) + v35);
        v45 = (char *)(*(_QWORD *)(a1 + 72) + v35);
        v46 = *(_DWORD *)(a1 + 676);
        v47 = *(_DWORD *)(a1 + 36);
        v48 = *(_DWORD *)(a2 + 3356);
        v49 = vp8_denoiser_filter_uv_neon(v42, v46, v43, v47, (uint8x8_t *)(**(_QWORD **)(a2 + 3344) + *(int *)(a2 + 3352)), v48, 0, 0);
        v50 = vp8_denoiser_filter_uv_neon(v44, v46, v45, v47, (uint8x8_t *)(**(_QWORD **)(a2 + 3696) + *(int *)(a2 + 3704)), v48, 0, 0);
        a6 = v123;
        v13 = a5;
        v11 = a8;
        v51 = a9;
        if (*(_DWORD *)(a1 + 972) == 1)
          goto LABEL_47;
        goto LABEL_45;
      }
      a6 = v123;
      v13 = a5;
      v11 = a8;
      if (v39)
      {
        v49 = 0;
        v50 = 0;
        v51 = a9;
        if (*(_DWORD *)(a1 + 972) == 1)
          goto LABEL_47;
        goto LABEL_45;
      }
    }
    else
    {
      v11 = a8;
    }
  }
  v49 = 0;
  v50 = 0;
  *(_DWORD *)(a2 + 8812) = 0;
  v52 = (_OWORD *)(*(_QWORD *)(a1 + 56) + v13);
  v53 = *(int *)(a1 + 16);
  *v52 = *(_OWORD *)(a2 + 1600);
  v54 = (_OWORD *)((char *)v52 + v53);
  *v54 = *(_OWORD *)(a2 + 1616);
  v55 = (_OWORD *)((char *)v54 + v53);
  *v55 = *(_OWORD *)(a2 + 1632);
  v56 = (_OWORD *)((char *)v55 + v53);
  *v56 = *(_OWORD *)(a2 + 1648);
  v57 = (_OWORD *)((char *)v56 + v53);
  *v57 = *(_OWORD *)(a2 + 1664);
  v58 = (_OWORD *)((char *)v57 + v53);
  *v58 = *(_OWORD *)(a2 + 1680);
  v59 = (_OWORD *)((char *)v58 + v53);
  *v59 = *(_OWORD *)(a2 + 1696);
  v60 = (_OWORD *)((char *)v59 + v53);
  *v60 = *(_OWORD *)(a2 + 1712);
  v61 = (_OWORD *)((char *)v60 + v53);
  *v61 = *(_OWORD *)(a2 + 1728);
  v62 = (_OWORD *)((char *)v61 + v53);
  *v62 = *(_OWORD *)(a2 + 1744);
  v63 = (_OWORD *)((char *)v62 + v53);
  *v63 = *(_OWORD *)(a2 + 1760);
  v64 = (_OWORD *)((char *)v63 + v53);
  *v64 = *(_OWORD *)(a2 + 1776);
  v65 = (_OWORD *)((char *)v64 + v53);
  *v65 = *(_OWORD *)(a2 + 1792);
  v66 = (_OWORD *)((char *)v65 + v53);
  *v66 = *(_OWORD *)(a2 + 1808);
  v67 = (_OWORD *)((char *)v66 + v53);
  *v67 = *(_OWORD *)(a2 + 1824);
  result = *(__n128 *)(a2 + 1840);
  *(__n128 *)((char *)v67 + v53) = result;
  *(_BYTE *)(*(_QWORD *)(a1 + 960) + a10) = 0;
  v51 = a9;
  if (*(_DWORD *)(a1 + 972) == 1)
    goto LABEL_47;
LABEL_45:
  if (v49)
  {
    if (v50)
      goto LABEL_47;
  }
  else
  {
    v73 = (_QWORD *)(**(_QWORD **)(a2 + 3344) + *(int *)(a2 + 3352));
    v74 = *(int *)(a2 + 3356);
    v75 = (_QWORD *)(*(_QWORD *)(a1 + 64) + a6);
    v76 = *(int *)(a1 + 36);
    *v75 = *v73;
    v77 = (_QWORD *)((char *)v73 + v74);
    v78 = (_QWORD *)((char *)v75 + v76);
    *v78 = *v77;
    v79 = (_QWORD *)((char *)v77 + v74);
    v80 = (_QWORD *)((char *)v78 + v76);
    *v80 = *v79;
    v81 = (_QWORD *)((char *)v79 + v74);
    v82 = (_QWORD *)((char *)v80 + v76);
    *v82 = *v81;
    v83 = (_QWORD *)((char *)v81 + v74);
    v84 = (_QWORD *)((char *)v82 + v76);
    *v84 = *v83;
    v85 = (_QWORD *)((char *)v83 + v74);
    v86 = (_QWORD *)((char *)v84 + v76);
    *v86 = *v85;
    v87 = (_QWORD *)((char *)v85 + v74);
    v88 = (_QWORD *)((char *)v86 + v76);
    *v88 = *v87;
    result.n128_u64[0] = *(_QWORD *)((char *)v87 + v74);
    *(_QWORD *)((char *)v88 + v76) = result.n128_u64[0];
    if (v50)
    {
LABEL_47:
      v68 = *(int *)(a1 + 16);
      v69 = &a7[a7[372] + 192];
      if (v51 < 1)
        goto LABEL_54;
      goto LABEL_48;
    }
  }
  v89 = (_QWORD *)(**(_QWORD **)(a2 + 3696) + *(int *)(a2 + 3704));
  v90 = *(int *)(a2 + 3356);
  v91 = (_QWORD *)(*(_QWORD *)(a1 + 72) + a6);
  v92 = *(int *)(a1 + 36);
  *v91 = *v89;
  v93 = (_QWORD *)((char *)v89 + v90);
  v94 = (_QWORD *)((char *)v91 + v92);
  *v94 = *v93;
  v95 = (_QWORD *)((char *)v93 + v90);
  v96 = (_QWORD *)((char *)v94 + v92);
  *v96 = *v95;
  v97 = (_QWORD *)((char *)v95 + v90);
  v98 = (_QWORD *)((char *)v96 + v92);
  *v98 = *v97;
  v99 = (_QWORD *)((char *)v97 + v90);
  v100 = (_QWORD *)((char *)v98 + v92);
  *v100 = *v99;
  v101 = (_QWORD *)((char *)v99 + v90);
  v102 = (_QWORD *)((char *)v100 + v92);
  *v102 = *v101;
  v103 = (_QWORD *)((char *)v101 + v90);
  v104 = (_QWORD *)((char *)v102 + v92);
  *v104 = *v103;
  result.n128_u64[0] = *(_QWORD *)((char *)v103 + v90);
  *(_QWORD *)((char *)v104 + v92) = result.n128_u64[0];
  v68 = *(int *)(a1 + 16);
  v69 = &a7[a7[372] + 192];
  if (v51 < 1)
    goto LABEL_54;
LABEL_48:
  v70 = (unsigned __int8 *)(*(_QWORD *)(a1 + 960) + a10);
  v71 = *v70;
  if (v71 != 2 && v71 == *(v70 - 1))
  {
LABEL_54:
    v72 = 1;
    if (v11 < 1)
      goto LABEL_57;
    goto LABEL_55;
  }
  result.n128_f64[0] = vp8_mbloop_filter_vertical_edge_y_neon(*(_QWORD *)(a1 + 56) + v13, v68, a7[48], a7[176], *v69);
  v72 = 0;
  if (v11 < 1)
    goto LABEL_57;
LABEL_55:
  v105 = *(_QWORD *)(a1 + 960);
  v106 = *(unsigned __int8 *)(v105 + a10);
  if (v106 == 2 || v106 != *(unsigned __int8 *)(v105 + a10 - (uint64_t)*(int *)(a1 + 968)))
  {
    v107 = v13;
    vp8_mbloop_filter_horizontal_edge_y_neon(*(_QWORD *)(a1 + 56) + v13, v68, a7[48], a7[176], *v69);
    goto LABEL_60;
  }
LABEL_57:
  if ((v72 & 1) != 0)
    return result;
  v107 = v13;
LABEL_60:
  v108 = (_OWORD *)(*(_QWORD *)(a1 + 56) + v107);
  *(_OWORD *)(a2 + 1600) = *v108;
  v109 = (_OWORD *)((char *)v108 + v68);
  *(_OWORD *)(a2 + 1616) = *v109;
  v110 = (_OWORD *)((char *)v109 + v68);
  *(_OWORD *)(a2 + 1632) = *v110;
  v111 = (_OWORD *)((char *)v110 + v68);
  *(_OWORD *)(a2 + 1648) = *v111;
  v112 = (_OWORD *)((char *)v111 + v68);
  *(_OWORD *)(a2 + 1664) = *v112;
  v113 = (_OWORD *)((char *)v112 + v68);
  *(_OWORD *)(a2 + 1680) = *v113;
  v114 = (_OWORD *)((char *)v113 + v68);
  *(_OWORD *)(a2 + 1696) = *v114;
  v115 = (_OWORD *)((char *)v114 + v68);
  *(_OWORD *)(a2 + 1712) = *v115;
  v116 = (_OWORD *)((char *)v115 + v68);
  *(_OWORD *)(a2 + 1728) = *v116;
  v117 = (_OWORD *)((char *)v116 + v68);
  *(_OWORD *)(a2 + 1744) = *v117;
  v118 = (_OWORD *)((char *)v117 + v68);
  *(_OWORD *)(a2 + 1760) = *v118;
  v119 = (_OWORD *)((char *)v118 + v68);
  *(_OWORD *)(a2 + 1776) = *v119;
  v120 = (_OWORD *)((char *)v119 + v68);
  *(_OWORD *)(a2 + 1792) = *v120;
  v121 = (_OWORD *)((char *)v120 + v68);
  *(_OWORD *)(a2 + 1808) = *v121;
  v122 = (_OWORD *)((char *)v121 + v68);
  *(_OWORD *)(a2 + 1824) = *v122;
  result = *(__n128 *)((char *)v122 + v68);
  *(__n128 *)(a2 + 1840) = result;
  return result;
}

uint64_t vp8_denoiser_filter_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4, uint8x16_t *a5, int a6, unsigned int a7, int a8)
{
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  int8x16_t v11;
  uint8x16_t v12;
  int64x2_t v13;
  int v14;
  uint8x16_t v15;
  uint8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unsigned __int32 v22;
  __int32 v23;
  BOOL v24;
  int v25;
  uint8x16_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x16_t *v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int64x2_t v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int64x2_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int64x2_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int64x2_t v66;
  uint8x16_t v67;
  uint8x16_t v68;
  uint8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int64x2_t v75;
  uint8x16_t v76;
  uint8x16_t v77;
  uint8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int64x2_t v84;
  uint8x16_t v85;
  uint8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int64x2_t v90;
  int64x2_t v91;
  uint8x16_t v92;
  uint8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int64x2_t v97;
  uint8x16_t v98;
  uint8x16_t v99;
  uint8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int64x2_t v106;
  uint8x16_t v107;
  uint8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  uint8x16_t v112;
  uint8x16_t v113;
  int64x2_t v114;
  uint8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int64x2_t v121;
  uint8x16_t v122;
  uint8x16_t v123;
  uint8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int64x2_t v130;
  uint8x16_t v131;
  uint8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  uint8x16_t v136;
  uint8x16_t v137;
  int64x2_t v138;
  uint8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int64x2_t v145;
  uint8x16_t v146;
  uint8x16_t v147;
  uint8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int64x2_t v154;
  uint8x16_t *v155;
  uint8x16_t *v156;
  uint8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  uint64_t v164;
  uint64_t v165;
  __int8 *v166;
  __int8 *v167;
  __int8 *v168;
  __int8 *v169;
  __int8 *v170;
  __int8 *v171;
  __int8 *v172;
  __int8 *v173;
  __int8 *v174;
  __int8 *v175;
  __int8 *v176;
  __int8 *v177;
  __int8 *v178;
  __int8 *v179;
  __int8 *v180;
  __int8 *v181;
  __int8 *v182;
  __int8 *v183;
  _OWORD *v184;
  _OWORD *v185;
  _OWORD *v186;
  _OWORD *v187;
  _OWORD *v188;
  _OWORD *v189;
  _OWORD *v190;
  _OWORD *v191;
  _OWORD *v192;
  _OWORD *v193;
  _OWORD *v194;
  _OWORD *v195;

  if (a8)
    v8 = a7 >= 0x19;
  else
    v8 = 1;
  if (v8)
    v9 = 4;
  else
    v9 = 5;
  if (a7 >= 0x19)
    v10 = 3;
  else
    v10 = v9;
  v11 = vdupq_n_s8(v10);
  v12 = (uint8x16_t)vdupq_n_s8(v9);
  v13 = 0uLL;
  v14 = 16;
  v15.i64[0] = 0x707070707070707;
  v15.i64[1] = 0x707070707070707;
  v16.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v16.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v17.i64[0] = 0x202020202020202;
  v17.i64[1] = 0x202020202020202;
  do
  {
    v18 = (int8x16_t)vabdq_u8(*a5, *a1);
    v19 = vbslq_s8((int8x16_t)vcgtq_u8(v12, (uint8x16_t)v18), v18, vaddq_s8(vsubq_s8(v11, (int8x16_t)vcgtq_u8((uint8x16_t)v18, v15)), vandq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v18, v16), v17)));
    v20 = vandq_s8(v19, (int8x16_t)vcgtq_u8(*a1, *a5));
    v21 = vandq_s8(v19, (int8x16_t)vcgtq_u8(*a5, *a1));
    *a3 = vqsubq_u8(vqaddq_u8(*a5, (uint8x16_t)v20), (uint8x16_t)v21);
    v13 = vqaddq_s64(v13, vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v20, v21)))));
    a5 = (uint8x16_t *)((char *)a5 + a6);
    a1 = (uint8x16_t *)((char *)a1 + a2);
    a3 = (uint8x16_t *)((char *)a3 + a4);
    --v14;
  }
  while (v14);
  v22 = vabs_s32((int32x2_t)vqaddd_s64(vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).i64[0], v13.i64[0])).u32[0];
  if (a8)
    v23 = 600;
  else
    v23 = 512;
  v24 = __OFSUB__(v22, v23);
  v25 = v22 - v23;
  if ((v25 < 0) ^ v24 | (v25 == 0))
  {
    v156 = (uint8x16_t *)((char *)a3 - a4);
    v155 = (uint8x16_t *)((char *)a5 - a6);
    v164 = -16 * a4;
    v165 = -16 * a6;
  }
  else
  {
    if (v25 > 767)
      return 0;
    v26 = (uint8x16_t)vdupq_n_s8((v25 >> 8) + 1);
    v27 = 16 * a6;
    v28 = 16 * a2;
    v29 = 16 * a4;
    v30 = &a3[v29 / 0xFFFFFFFFFFFFFFF0];
    v31 = a5[v27 / 0xFFFFFFFFFFFFFFF0];
    v32 = a1[v28 / 0xFFFFFFFFFFFFFFF0];
    v33 = vabdq_u8(v31, v32);
    v34 = (int8x16_t)vcgtq_u8(v32, v31);
    v35 = (int8x16_t)vcgtq_u8(v31, v32);
    v36 = (int8x16_t)vminq_u8(v33, v26);
    v37 = vandq_s8(v36, v34);
    v38 = vandq_s8(v36, v35);
    *v30 = vqaddq_u8(vqsubq_u8(a3[v29 / 0xFFFFFFFFFFFFFFF0], (uint8x16_t)v37), (uint8x16_t)v38);
    v39 = vqaddq_s64(v13, vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v38, v37)))));
    v40 = *(uint8x16_t *)((char *)a5 + a6 - v27);
    v41 = *(uint8x16_t *)((char *)a1 + a2 - v28);
    v42 = vabdq_u8(v40, v41);
    v43 = (int8x16_t)vcgtq_u8(v41, v40);
    v44 = (int8x16_t)vcgtq_u8(v40, v41);
    v45 = (int8x16_t)vminq_u8(v42, v26);
    v46 = vandq_s8(v45, v43);
    v47 = vandq_s8(v45, v44);
    *(uint8x16_t *)((char *)a3 + a4 - v29) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)a3 + a4 - v29), (uint8x16_t)v46), (uint8x16_t)v47);
    v48 = vqaddq_s64(v39, vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v47, v46)))));
    v49 = *(uint8x16_t *)((char *)&a5[v27 / 0xFFFFFFFFFFFFFFF0] + 2 * a6);
    v50 = *(uint8x16_t *)((char *)&a1[v28 / 0xFFFFFFFFFFFFFFF0] + 2 * a2);
    v51 = vabdq_u8(v49, v50);
    v52 = (int8x16_t)vcgtq_u8(v50, v49);
    v53 = (int8x16_t)vcgtq_u8(v49, v50);
    v54 = (int8x16_t)vminq_u8(v51, v26);
    v55 = vandq_s8(v54, v52);
    v56 = vandq_s8(v54, v53);
    *(uint8x16_t *)((char *)v30 + 2 * a4) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)&a3[v29 / 0xFFFFFFFFFFFFFFF0] + 2 * a4), (uint8x16_t)v55), (uint8x16_t)v56);
    v57 = vqaddq_s64(v48, vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v56, v55)))));
    v58 = *(uint8x16_t *)((char *)a5 + 3 * a6 - v27);
    v59 = *(uint8x16_t *)((char *)a1 + 3 * a2 - v28);
    v60 = vabdq_u8(v58, v59);
    v61 = (int8x16_t)vcgtq_u8(v59, v58);
    v62 = (int8x16_t)vcgtq_u8(v58, v59);
    v63 = (int8x16_t)vminq_u8(v60, v26);
    v64 = vandq_s8(v63, v61);
    v65 = vandq_s8(v63, v62);
    *(uint8x16_t *)((char *)a3 + 3 * a4 - v29) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)a3 + 3 * a4 - v29), (uint8x16_t)v64), (uint8x16_t)v65);
    v66 = vqaddq_s64(v57, vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v65, v64)))));
    v67 = *(uint8x16_t *)((char *)&a5[v27 / 0xFFFFFFFFFFFFFFF0] + 4 * a6);
    v68 = *(uint8x16_t *)((char *)&a1[v28 / 0xFFFFFFFFFFFFFFF0] + 4 * a2);
    v69 = vabdq_u8(v67, v68);
    v70 = (int8x16_t)vcgtq_u8(v68, v67);
    v71 = (int8x16_t)vcgtq_u8(v67, v68);
    v72 = (int8x16_t)vminq_u8(v69, v26);
    v73 = vandq_s8(v72, v70);
    v74 = vandq_s8(v72, v71);
    *(uint8x16_t *)((char *)v30 + 4 * a4) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)&a3[v29 / 0xFFFFFFFFFFFFFFF0] + 4 * a4), (uint8x16_t)v73), (uint8x16_t)v74);
    v75 = vqaddq_s64(v66, vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v74, v73)))));
    v76 = *(uint8x16_t *)((char *)a5 + 5 * a6 - v27);
    v77 = *(uint8x16_t *)((char *)a1 + 5 * a2 - v28);
    v78 = vabdq_u8(v76, v77);
    v79 = (int8x16_t)vcgtq_u8(v77, v76);
    v80 = (int8x16_t)vcgtq_u8(v76, v77);
    v81 = (int8x16_t)vminq_u8(v78, v26);
    v82 = vandq_s8(v81, v79);
    v83 = vandq_s8(v81, v80);
    *(uint8x16_t *)((char *)a3 + 5 * a4 - v29) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)a3 + 5 * a4 - v29), (uint8x16_t)v82), (uint8x16_t)v83);
    v84 = vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v83, v82))));
    v85 = *(uint8x16_t *)((char *)a5 + 6 * a6 - v27);
    v86 = *(uint8x16_t *)((char *)a1 + 6 * a2 - v28);
    v87 = (int8x16_t)vminq_u8(vabdq_u8(v85, v86), v26);
    v88 = vandq_s8(v87, (int8x16_t)vcgtq_u8(v86, v85));
    v89 = vandq_s8(v87, (int8x16_t)vcgtq_u8(v85, v86));
    *(uint8x16_t *)((char *)a3 + 6 * a4 - v29) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)a3 + 6 * a4 - v29), (uint8x16_t)v88), (uint8x16_t)v89);
    v90 = vqaddq_s64(v75, v84);
    v91 = vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v89, v88))));
    v92 = *(uint8x16_t *)((char *)a5 + 7 * a6 - v27);
    v93 = *(uint8x16_t *)((char *)a1 + 7 * a2 - v28);
    v94 = (int8x16_t)vminq_u8(vabdq_u8(v92, v93), v26);
    v95 = vandq_s8(v94, (int8x16_t)vcgtq_u8(v93, v92));
    v96 = vandq_s8(v94, (int8x16_t)vcgtq_u8(v92, v93));
    *(uint8x16_t *)((char *)a3 + 7 * a4 - v29) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)a3 + 7 * a4 - v29), (uint8x16_t)v95), (uint8x16_t)v96);
    v97 = vqaddq_s64(vqaddq_s64(v90, v91), vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v96, v95)))));
    v98 = *(uint8x16_t *)((char *)&a5[v27 / 0xFFFFFFFFFFFFFFF0] + 8 * a6);
    v99 = *(uint8x16_t *)((char *)&a1[v28 / 0xFFFFFFFFFFFFFFF0] + 8 * a2);
    v100 = vabdq_u8(v98, v99);
    v101 = (int8x16_t)vcgtq_u8(v99, v98);
    v102 = (int8x16_t)vcgtq_u8(v98, v99);
    v103 = (int8x16_t)vminq_u8(v100, v26);
    v104 = vandq_s8(v103, v101);
    v105 = vandq_s8(v103, v102);
    *(uint8x16_t *)((char *)v30 + 8 * a4) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)&a3[v29 / 0xFFFFFFFFFFFFFFF0] + 8 * a4), (uint8x16_t)v104), (uint8x16_t)v105);
    v106 = vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v105, v104))));
    v107 = *(uint8x16_t *)((char *)a5 + 9 * a6 - v27);
    v108 = *(uint8x16_t *)((char *)a1 + 9 * a2 - v28);
    v109 = (int8x16_t)vminq_u8(vabdq_u8(v107, v108), v26);
    v110 = vandq_s8(v109, (int8x16_t)vcgtq_u8(v108, v107));
    v111 = vandq_s8(v109, (int8x16_t)vcgtq_u8(v107, v108));
    *(uint8x16_t *)((char *)a3 + 9 * a4 - v29) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)a3 + 9 * a4 - v29), (uint8x16_t)v110), (uint8x16_t)v111);
    v112 = *(uint8x16_t *)((char *)a5 + 10 * a6 - v27);
    v113 = *(uint8x16_t *)((char *)a1 + 10 * a2 - v28);
    v114 = vqaddq_s64(vqaddq_s64(v97, v106), vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v111, v110)))));
    v115 = vabdq_u8(v112, v113);
    v116 = (int8x16_t)vcgtq_u8(v113, v112);
    v117 = (int8x16_t)vcgtq_u8(v112, v113);
    v118 = (int8x16_t)vminq_u8(v115, v26);
    v119 = vandq_s8(v118, v116);
    v120 = vandq_s8(v118, v117);
    *(uint8x16_t *)((char *)a3 + 10 * a4 - v29) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)a3 + 10 * a4 - v29), (uint8x16_t)v119), (uint8x16_t)v120);
    v121 = vqaddq_s64(v114, vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v120, v119)))));
    v122 = *(uint8x16_t *)((char *)a5 + 11 * a6 - v27);
    v123 = *(uint8x16_t *)((char *)a1 + 11 * a2 - v28);
    v124 = vabdq_u8(v122, v123);
    v125 = (int8x16_t)vcgtq_u8(v123, v122);
    v126 = (int8x16_t)vcgtq_u8(v122, v123);
    v127 = (int8x16_t)vminq_u8(v124, v26);
    v128 = vandq_s8(v127, v125);
    v129 = vandq_s8(v127, v126);
    *(uint8x16_t *)((char *)a3 + 11 * a4 - v29) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)a3 + 11 * a4 - v29), (uint8x16_t)v128), (uint8x16_t)v129);
    v130 = vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v129, v128))));
    v131 = *(uint8x16_t *)((char *)a5 + 12 * a6 - v27);
    v132 = *(uint8x16_t *)((char *)a1 + 12 * a2 - v28);
    v133 = (int8x16_t)vminq_u8(vabdq_u8(v131, v132), v26);
    v134 = vandq_s8(v133, (int8x16_t)vcgtq_u8(v132, v131));
    v135 = vandq_s8(v133, (int8x16_t)vcgtq_u8(v131, v132));
    *(uint8x16_t *)((char *)a3 + 12 * a4 - v29) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)a3 + 12 * a4 - v29), (uint8x16_t)v134), (uint8x16_t)v135);
    v136 = *(uint8x16_t *)((char *)a5 + 13 * a6 - v27);
    v137 = *(uint8x16_t *)((char *)a1 + 13 * a2 - v28);
    v138 = vqaddq_s64(vqaddq_s64(v121, v130), vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v135, v134)))));
    v139 = vabdq_u8(v136, v137);
    v140 = (int8x16_t)vcgtq_u8(v137, v136);
    v141 = (int8x16_t)vcgtq_u8(v136, v137);
    v142 = (int8x16_t)vminq_u8(v139, v26);
    v143 = vandq_s8(v142, v140);
    v144 = vandq_s8(v142, v141);
    *(uint8x16_t *)((char *)a3 + 13 * a4 - v29) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)a3 + 13 * a4 - v29), (uint8x16_t)v143), (uint8x16_t)v144);
    v145 = vqaddq_s64(v138, vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v144, v143)))));
    v146 = *(uint8x16_t *)((char *)a5 + 14 * a6 - v27);
    v147 = *(uint8x16_t *)((char *)a1 + 14 * a2 - v28);
    v148 = vabdq_u8(v146, v147);
    v149 = (int8x16_t)vcgtq_u8(v147, v146);
    v150 = (int8x16_t)vcgtq_u8(v146, v147);
    v151 = (int8x16_t)vminq_u8(v148, v26);
    v152 = vandq_s8(v151, v149);
    v153 = vandq_s8(v151, v150);
    *(uint8x16_t *)((char *)a3 + 14 * a4 - v29) = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)((char *)a3 + 14 * a4 - v29), (uint8x16_t)v152), (uint8x16_t)v153);
    v154 = vqaddq_s64(v145, vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v153, v152)))));
    v155 = (uint8x16_t *)((char *)a5 + 15 * a6 - v27);
    v156 = (uint8x16_t *)((char *)a3 + 15 * a4 - v29);
    v157 = *(uint8x16_t *)((char *)a1 + 15 * a2 - v28);
    v158 = (int8x16_t)vcgtq_u8(*v155, v157);
    v159 = (int8x16_t)vminq_u8(vabdq_u8(*v155, v157), v26);
    v160 = vandq_s8(v159, (int8x16_t)vcgtq_u8(v157, *v155));
    v161 = vandq_s8(v159, v158);
    *v156 = vqaddq_u8(vqsubq_u8(*v156, (uint8x16_t)v160), (uint8x16_t)v161);
    v162 = (int8x16_t)vqaddq_s64(v154, vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v161, v160)))));
    if (vabs_s32((int32x2_t)vqaddd_s64(vextq_s8(v162, v162, 8uLL).i64[0], v162.i64[0])).i32[0] > v23)
      return 0;
    v165 = -16 * a6;
    v164 = -16 * a4;
  }
  v166 = &v156->i8[a4 + v164];
  v167 = &v155->i8[a6 + v165];
  *(_OWORD *)v167 = *(_OWORD *)v166;
  v168 = &v166[a4];
  v169 = &v167[a6];
  *(_OWORD *)v169 = *(_OWORD *)v168;
  v170 = &v168[a4];
  v171 = &v169[a6];
  *(_OWORD *)v171 = *(_OWORD *)v170;
  v172 = &v170[a4];
  v173 = &v171[a6];
  *(_OWORD *)v173 = *(_OWORD *)v172;
  v174 = &v172[a4];
  v175 = &v173[a6];
  *(_OWORD *)v175 = *(_OWORD *)v174;
  v176 = &v174[a4];
  v177 = &v175[a6];
  *(_OWORD *)v177 = *(_OWORD *)v176;
  v178 = &v176[a4];
  v179 = &v177[a6];
  *(_OWORD *)v179 = *(_OWORD *)v178;
  v180 = &v178[a4];
  v181 = &v179[a6];
  *(_OWORD *)v181 = *(_OWORD *)v180;
  v182 = &v180[a4];
  v183 = &v181[a6];
  *v183 = *v182;
  v184 = (_OWORD *)((char *)v182 + a4);
  v185 = (_OWORD *)((char *)v183 + a6);
  *v185 = *v184;
  v186 = (_OWORD *)((char *)v184 + a4);
  v187 = (_OWORD *)((char *)v185 + a6);
  *v187 = *v186;
  v188 = (_OWORD *)((char *)v186 + a4);
  v189 = (_OWORD *)((char *)v187 + a6);
  *v189 = *v188;
  v190 = (_OWORD *)((char *)v188 + a4);
  v191 = (_OWORD *)((char *)v189 + a6);
  *v191 = *v190;
  v192 = (_OWORD *)((char *)v190 + a4);
  v193 = (_OWORD *)((char *)v191 + a6);
  *v193 = *v192;
  v194 = (_OWORD *)((char *)v192 + a4);
  v195 = (_OWORD *)((char *)v193 + a6);
  *v195 = *v194;
  *(_OWORD *)((char *)v195 + a6) = *(_OWORD *)((char *)v194 + a4);
  return 1;
}

uint64_t vp8_denoiser_filter_uv_neon(uint64_t *a1, int a2, char *a3, int a4, uint8x8_t *a5, int a6, unsigned int a7, int a8)
{
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int64x2_t v12;
  uint8x8_t *v13;
  uint16x4_t v14;
  uint8x8_t *v15;
  uint16x4_t v16;
  uint8x8_t *v17;
  uint16x4_t v18;
  uint8x8_t *v19;
  int v20;
  int v21;
  int v22;
  int8x16_t v23;
  uint8x16_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  int8x16_t v35;
  uint64_t *v36;
  uint8x16_t v37;
  uint8x16_t v38;
  char *v39;
  char *v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  unsigned __int32 v46;
  __int32 v47;
  BOOL v48;
  int v49;
  uint8x16_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  uint8x16_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  char *v67;
  _QWORD *v68;
  _QWORD *v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  _QWORD *v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  _QWORD *v79;

  if (a8)
    v8 = a7 >= 0x19;
  else
    v8 = 1;
  if (v8)
    v9 = 4;
  else
    v9 = 5;
  if (a7 >= 0x19)
    v10 = 3;
  else
    v10 = v9;
  v11 = a6;
  v12 = 0uLL;
  v13 = (uint8x8_t *)((char *)a5 + a6);
  v14 = vqadd_u16(vqadd_u16(0, vpaddl_u8(*a5)), vpaddl_u8(*v13));
  v15 = (uint8x8_t *)((char *)v13 + a6);
  v16 = vqadd_u16(v14, vpaddl_u8(*v15));
  v17 = (uint8x8_t *)((char *)v15 + a6);
  v18 = vqadd_u16(v16, vpaddl_u8(*v17));
  v19 = (uint8x8_t *)((char *)v17 + a6);
  v20 = vpaddl_u32(vpaddl_u16(vqadd_u16(vqadd_u16(vqadd_u16(vqadd_u16(v18, vpaddl_u8(*v19)), vpaddl_u8(*(uint8x8_t *)((char *)v19 + a6))), vpaddl_u8(*(uint8x8_t *)((char *)v19 + a6 + a6))), vpaddl_u8(*(uint8x8_t *)((char *)v19 + a6 + a6 + a6)))));
  v21 = v20 - 0x2000;
  if (v20 < 0x2000)
    v21 = 0x2000 - v20;
  if (v21 < 512)
    return 0;
  v22 = 0;
  v23 = vdupq_n_s8(v10);
  v24 = (uint8x16_t)vdupq_n_s8(v9);
  v25 = -1 * a6;
  v26 = (uint64_t *)&a5[a6 + v25];
  v27 = a2;
  v28 = a4;
  v29 = 2 * a6;
  v30 = 2 * a2;
  v31 = (char *)a5 + v29 - 16 * a6;
  v32 = 2 * a4;
  v33.i64[0] = 0x707070707070707;
  v33.i64[1] = 0x707070707070707;
  v34.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v34.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v35.i64[0] = 0x202020202020202;
  v35.i64[1] = 0x202020202020202;
  do
  {
    v36 = v26;
    v37.i64[0] = *v26;
    v37.i64[1] = *(uint64_t *)((char *)v26 + v11);
    v38.i64[0] = *a1;
    v38.i64[1] = *(uint64_t *)((char *)a1 + a2);
    v39 = a3;
    v40 = v31;
    v41 = (int8x16_t)vabdq_u8(v37, v38);
    v42 = vbslq_s8((int8x16_t)vcgtq_u8(v24, (uint8x16_t)v41), v41, vaddq_s8(vsubq_s8(v23, (int8x16_t)vcgtq_u8((uint8x16_t)v41, v33)), vandq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v41, v34), v35)));
    v43 = vandq_s8(v42, (int8x16_t)vcgtq_u8(v38, v37));
    v44 = vandq_s8(v42, (int8x16_t)vcgtq_u8(v37, v38));
    v45 = (int8x16_t)vqsubq_u8(vqaddq_u8(v37, (uint8x16_t)v43), (uint8x16_t)v44);
    *(_QWORD *)a3 = v45.i64[0];
    v12 = vqaddq_s64(v12, vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v43, v44)))));
    *(_QWORD *)&a3[a4] = vextq_s8(v45, v45, 8uLL).u64[0];
    v26 = (uint64_t *)((char *)v26 + v29);
    a1 = (uint64_t *)((char *)a1 + v30);
    a3 += v32;
    ++v22;
    v31 += v29;
  }
  while (v22 != 4);
  v46 = vabs_s32((int32x2_t)vqaddd_s64(vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).i64[0], v12.i64[0])).u32[0];
  if (a8)
    v47 = 128;
  else
    v47 = 96;
  v48 = __OFSUB__(v46, v47);
  v49 = v46 - v47;
  if ((v49 < 0) ^ v48 | (v49 == 0))
  {
    v53 = -8 * a4;
  }
  else
  {
    if (v49 > 767)
      return 0;
    v50 = (uint8x16_t)vdupq_n_s8((v49 >> 8) + 1);
    v51 = &a1[-a2];
    v52 = 8 * a4;
    v53 = -8 * a4;
    v54 = (uint64_t *)&a3[-v52];
    v55 = v52 + v32;
    v56 = 4;
    do
    {
      v57.i64[0] = *(_QWORD *)&v40[8 * v11];
      v57.i64[1] = *(_QWORD *)&v40[9 * v11];
      v58.i64[0] = *v51;
      v58.i64[1] = *(uint64_t *)((char *)v51 + v27);
      v59 = vabdq_u8(v57, v58);
      v60 = (int8x16_t)vcgtq_u8(v58, v57);
      v61 = (int8x16_t)vcgtq_u8(v57, v58);
      v62 = (int8x16_t)vminq_u8(v59, v50);
      v63 = vandq_s8(v62, v60);
      v64 = vandq_s8(v62, v61);
      v62.i64[0] = *v54;
      v62.i64[1] = *(uint64_t *)((char *)v54 + v28);
      v65 = (int8x16_t)vqaddq_u8(vqsubq_u8((uint8x16_t)v62, (uint8x16_t)v63), (uint8x16_t)v64);
      *v54 = v65.i64[0];
      *(uint64_t *)((char *)v54 + v28) = vextq_s8(v65, v65, 8uLL).u64[0];
      v51 = (uint64_t *)((char *)v51 + v30);
      v12 = vqaddq_s64(v12, vpaddlq_s32(vpaddlq_s16(vpaddlq_s8(vqsubq_s8(v64, v63)))));
      v54 = (uint64_t *)((char *)v54 + v32);
      v55 -= v32;
      v40 += v29;
      --v56;
    }
    while (v56);
    if (vabs_s32((int32x2_t)vqaddd_s64(vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).i64[0], v12.i64[0])).i32[0] > v47)
      return 0;
    v39 = &a3[-v55];
    v36 = (uint64_t *)&v40[6 * v11];
  }
  v67 = &v39[v32 + v53];
  v68 = (uint64_t *)((char *)v36 + v29 + v25 * 8);
  *v68 = *(_QWORD *)v67;
  v69 = (_QWORD *)((char *)v68 + v11);
  *v69 = *(_QWORD *)&v67[v28];
  v70 = &v67[v28 + v28];
  v71 = (_QWORD *)((char *)v69 + v11);
  *v71 = *(_QWORD *)v70;
  v72 = &v70[v28];
  v73 = (_QWORD *)((char *)v71 + v11);
  *v73 = *(_QWORD *)v72;
  v74 = &v72[v28];
  v75 = (_QWORD *)((char *)v73 + v11);
  *v75 = *(_QWORD *)v74;
  v76 = &v74[v28];
  v77 = (_QWORD *)((char *)v75 + v11);
  *v77 = *(_QWORD *)v76;
  v78 = &v76[v28];
  v79 = (_QWORD *)((char *)v77 + v11);
  *v79 = *(_QWORD *)v78;
  *(_QWORD *)((char *)v79 + v11) = *(_QWORD *)&v78[v28];
  return 1;
}

int8x8_t vp8_dequant_idct_add_neon(int16x8_t *a1, int16x8_t *a2, __int32 *a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  uint8x8_t v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  uint8x8_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x4_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int8x16_t v16;
  int16x8_t v17;
  int8x16_t v18;
  int16x4_t v19;
  int32x2_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x8_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint16x8_t v27;
  int8x8_t v28;
  int8x8_t result;

  v4 = *a1;
  v5 = a1[1];
  *a1 = 0u;
  a1[1] = 0u;
  v6.i32[0] = *a3;
  v7 = (__int32 *)((char *)a3 + a4);
  v6.i32[1] = *v7;
  v8 = (__int32 *)((char *)v7 + a4);
  v9 = (__int32 *)((char *)v8 + a4);
  v10.i32[0] = *v8;
  v10.i32[1] = *v9;
  v11 = (int8x16_t)vmulq_s16(*a2, v4);
  v12 = (int8x16_t)vmulq_s16(a2[1], v5);
  v13 = vqadd_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v12.i8);
  v14.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
  v14.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
  v15 = vdupq_n_s16(0x4546u);
  *(int16x4_t *)v11.i8 = vqsub_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v12.i8);
  v16 = (int8x16_t)vqdmulhq_s16(v14, v15);
  v17 = vdupq_n_s16(0x4E7Bu);
  v18 = (int8x16_t)vqaddq_s16(vshrq_n_s16(vqdmulhq_s16(v14, v17), 1uLL), v14);
  v19 = vqsub_s16(*(int16x4_t *)v16.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  *(int16x4_t *)v16.i8 = vqadd_s16((int16x4_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), *(int16x4_t *)v18.i8);
  *(int16x4_t *)v18.i8 = vqadd_s16(v13, *(int16x4_t *)v16.i8);
  v20 = (int32x2_t)vqadd_s16(*(int16x4_t *)v11.i8, v19);
  *(int16x4_t *)v11.i8 = vqsub_s16(*(int16x4_t *)v11.i8, v19);
  *(int16x4_t *)v16.i8 = vqsub_s16(v13, *(int16x4_t *)v16.i8);
  v21 = (int16x4_t)vzip1_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)v11.i8);
  v22 = (int16x4_t)vzip1_s32(v20, *(int32x2_t *)v16.i8);
  v23 = vtrn1_s16(v21, v22);
  *(int16x4_t *)v24.i8 = vtrn2_s16(v21, v22);
  *(int32x2_t *)v11.i8 = vzip2_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)v11.i8);
  *(int32x2_t *)v16.i8 = vzip2_s32(v20, *(int32x2_t *)v16.i8);
  *(int16x4_t *)v18.i8 = vtrn1_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v16.i8);
  v24.u64[1] = (unint64_t)vtrn2_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v16.i8);
  v25 = (int8x16_t)vqdmulhq_s16(v24, v15);
  *(int16x4_t *)v15.i8 = vqadd_s16(v23, *(int16x4_t *)v18.i8);
  *(int16x4_t *)v18.i8 = vqsub_s16(v23, *(int16x4_t *)v18.i8);
  v26 = (int8x16_t)vqaddq_s16(vshrq_n_s16(vqdmulhq_s16(v24, v17), 1uLL), v24);
  *(int16x4_t *)v24.i8 = vqsub_s16(*(int16x4_t *)v25.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
  *(int16x4_t *)v25.i8 = vqadd_s16((int16x4_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), *(int16x4_t *)v26.i8);
  *(int16x4_t *)v17.i8 = vqadd_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v24.i8);
  *(int16x4_t *)v24.i8 = vqsub_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v24.i8);
  *(int16x4_t *)v26.i8 = vrshr_n_s16(vqadd_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v25.i8), 3uLL);
  *(int16x4_t *)v18.i8 = vrshr_n_s16(*(int16x4_t *)v17.i8, 3uLL);
  *(int16x4_t *)v24.i8 = vrshr_n_s16(*(int16x4_t *)v24.i8, 3uLL);
  *(int16x4_t *)v25.i8 = vrshr_n_s16(vqsub_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v25.i8), 3uLL);
  *(int32x2_t *)v15.i8 = vzip1_s32(*(int32x2_t *)v26.i8, *(int32x2_t *)v24.i8);
  *(int32x2_t *)v17.i8 = vzip1_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)v25.i8);
  *(int16x4_t *)v27.i8 = vtrn1_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v17.i8);
  *(int32x2_t *)v26.i8 = vzip2_s32(*(int32x2_t *)v26.i8, *(int32x2_t *)v24.i8);
  *(int32x2_t *)v25.i8 = vzip2_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)v25.i8);
  *(int16x4_t *)v24.i8 = vtrn1_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v25.i8);
  v27.u64[1] = (unint64_t)vtrn2_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v17.i8);
  v24.u64[1] = (unint64_t)vtrn2_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v25.i8);
  v28 = vqmovun_s16((int16x8_t)vaddw_u8(v27, v6));
  *a3 = v28.i32[0];
  *(__int32 *)((char *)a3 + a4) = v28.i32[1];
  result = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)v24, v10));
  *v8 = result.i32[0];
  *v9 = result.i32[1];
  return result;
}

uint64_t vp8_decode_mb_tokens(uint64_t a1, _QWORD *a2)
{
  _BYTE *v2;
  int8x8_t *v3;
  char *v4;
  char *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int Coeffs;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char *v32;

  v2 = a2;
  v3 = (int8x8_t *)a2[507];
  v4 = (char *)a2[494];
  v5 = (char *)a2[495];
  v32 = v4;
  if (*(_BYTE *)(a2[484] + 3))
  {
    v6 = 0;
    v7 = 0;
    v8 = a1 + 9901;
  }
  else
  {
    v8 = a1 + 9109;
    Coeffs = GetCoeffs(v3, a1 + 9373, v5[8] + v4[8], 0, (uint64_t)(a2 + 144));
    v4 = v32;
    v5[8] = Coeffs > 0;
    v32[8] = Coeffs > 0;
    v2[2008] = Coeffs;
    v6 = Coeffs - 16;
    v7 = 1;
  }
  v10 = 0;
  v11 = 1984;
  do
  {
    v12 = (uint64_t)&v2[v10 + 384];
    v13 = (v11 - 1984) & 3;
    v14 = v2;
    v15 = (v11 - 1984) >> 2;
    v16 = GetCoeffs(v3, v8, v5[v15] + v4[v13], v7, v12);
    v4 = v32;
    v5[v15] = v16 > 0;
    v2 = v14;
    v32[v13] = v16 > 0;
    v14[v11] = v16 + v7;
    v6 += v16 + v7;
    v10 += 32;
    ++v11;
  }
  while (v10 != 512);
  v17 = GetCoeffs(v3, a1 + 9637, v5[4] + v32[4], 0, (uint64_t)(v14 + 896));
  v5[4] = v17 > 0;
  v32[4] = v17 > 0;
  v14[2000] = v17;
  v18 = GetCoeffs(v3, a1 + 9637, v5[4] + v32[5], 0, (uint64_t)(v14 + 928));
  v5[4] = v18 > 0;
  v32[5] = v18 > 0;
  v14[2001] = v18;
  v19 = v17 + v18;
  v20 = GetCoeffs(v3, a1 + 9637, v5[5] + v32[4], 0, (uint64_t)(v14 + 960));
  v5[5] = v20 > 0;
  v32[4] = v20 > 0;
  v14[2002] = v20;
  v21 = v19 + v20;
  v22 = GetCoeffs(v3, a1 + 9637, v5[5] + v32[5], 0, (uint64_t)(v14 + 992));
  v5[5] = v22 > 0;
  v32[5] = v22 > 0;
  v14[2003] = v22;
  v23 = v21 + v22;
  v24 = GetCoeffs(v3, a1 + 9637, v5[6] + v32[6], 0, (uint64_t)(v14 + 1024));
  v5[6] = v24 > 0;
  v32[6] = v24 > 0;
  v14[2004] = v24;
  v25 = v23 + v24;
  v26 = GetCoeffs(v3, a1 + 9637, v5[6] + v32[7], 0, (uint64_t)(v14 + 1056));
  v5[6] = v26 > 0;
  v32[7] = v26 > 0;
  v14[2005] = v26;
  v27 = v25 + v26 + v6;
  v28 = GetCoeffs(v3, a1 + 9637, v5[7] + v32[6], 0, (uint64_t)(v14 + 1088));
  v5[7] = v28 > 0;
  v32[6] = v28 > 0;
  v14[2006] = v28;
  v29 = GetCoeffs(v3, a1 + 9637, v5[7] + v32[7], 0, (uint64_t)(v14 + 1120));
  v5[7] = v29 > 0;
  v32[7] = v29 > 0;
  v14[2007] = v29;
  return (v27 + v28 + v29);
}

uint64_t GetCoeffs(int8x8_t *a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  int8x8_t v10;
  unsigned int v11;
  uint8x8_t *v12;
  int8x8_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  void (*v17)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  int8x8_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v27;
  int8x8_t v28;
  uint8x8_t *v29;
  int v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int32x4_t v38;
  uint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint8x8_t v43;
  uint16x8_t v44;
  uint32x4_t v45;
  uint64x2_t v46;
  uint64x2_t v47;
  uint64x2_t v48;
  uint32x4_t v49;
  uint64x2_t v50;
  uint64x2_t v51;
  uint64x2_t v52;
  uint64x2_t v53;
  uint64x2_t v54;
  int8x16_t v55;
  int8x8_t v56;
  unsigned int v57;
  unint64_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int v61;
  int v62;
  int8x8_t v63;
  unsigned int v64;
  uint64_t result;
  int8x8_t *v66;
  int32x4_t v67;
  int32x4_t v68;
  int v69;
  uint8x8_t *v70;
  unint64_t v71;
  void (*v72)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v73;
  signed int v74;
  int v75;
  unsigned int v76;
  BOOL v77;
  int v78;
  int8x8_t v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v85;
  int8x8_t v86;
  uint8x8_t *v87;
  int v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int8x16_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  uint8x8_t v99;
  uint16x8_t v100;
  uint32x4_t v101;
  uint64x2_t v102;
  uint64x2_t v103;
  uint64x2_t v104;
  uint32x4_t v105;
  uint64x2_t v106;
  uint64x2_t v107;
  uint64x2_t v108;
  uint64x2_t v109;
  uint64x2_t v110;
  int8x16_t v111;
  int8x8_t v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  int8x8_t v116;
  int8x8_t v117;
  uint64_t v118;
  int v119;
  int8x8_t v120;
  unsigned int v121;
  int v122;
  uint8x8_t *v123;
  unint64_t v124;
  void (*v125)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v126;
  signed int v127;
  int v128;
  BOOL v129;
  int v130;
  int8x8_t v132;
  int v133;
  int v134;
  unsigned int v135;
  uint64_t v137;
  int8x8_t v138;
  uint8x8_t *v139;
  signed int v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int8x16_t v146;
  uint64_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  uint8x8_t v151;
  uint16x8_t v152;
  uint32x4_t v153;
  uint64x2_t v154;
  uint64x2_t v155;
  uint64x2_t v156;
  uint32x4_t v157;
  uint64x2_t v158;
  uint64x2_t v159;
  uint64x2_t v160;
  uint64x2_t v161;
  uint64x2_t v162;
  int8x16_t v163;
  int8x8_t v164;
  unsigned int v165;
  uint64_t v166;
  unint64_t v167;
  int8x8_t v168;
  int8x8_t v169;
  int v170;
  __int32 v171;
  int8x8_t v172;
  int v173;
  unsigned int v174;
  int v175;
  int v176;
  uint8x8_t *v177;
  unint64_t v178;
  void (*v179)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v180;
  signed int v181;
  int v182;
  BOOL v183;
  int v184;
  int8x8_t v186;
  int v187;
  int v188;
  unsigned int v189;
  uint64_t v191;
  int8x8_t v192;
  uint8x8_t *v193;
  signed int v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int8x16_t v200;
  uint64_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  uint8x8_t v205;
  uint16x8_t v206;
  uint32x4_t v207;
  uint64x2_t v208;
  uint64x2_t v209;
  uint64x2_t v210;
  uint32x4_t v211;
  uint64x2_t v212;
  uint64x2_t v213;
  uint64x2_t v214;
  uint64x2_t v215;
  uint64x2_t v216;
  int8x16_t v217;
  int8x8_t v218;
  unsigned int v219;
  uint64_t v220;
  unint64_t v221;
  int8x8_t v222;
  int8x8_t v223;
  int v224;
  __int32 v225;
  int8x8_t v226;
  unsigned int v227;
  __int32 v228;
  int v229;
  uint8x8_t *v230;
  unint64_t v231;
  void (*v232)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v233;
  signed int v234;
  int v235;
  BOOL v236;
  int v237;
  int v239;
  uint8x8_t *v240;
  unint64_t v241;
  void (*v242)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v243;
  signed int v244;
  int v245;
  BOOL v246;
  int v247;
  int8x8_t v249;
  int v250;
  int v251;
  unsigned int v252;
  uint64_t v254;
  int8x8_t v255;
  uint8x8_t *v256;
  signed int v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int8x16_t v263;
  uint64_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  uint8x8_t v268;
  uint16x8_t v269;
  uint32x4_t v270;
  uint64x2_t v271;
  uint64x2_t v272;
  uint64x2_t v273;
  uint32x4_t v274;
  uint64x2_t v275;
  uint64x2_t v276;
  uint64x2_t v277;
  uint64x2_t v278;
  uint64x2_t v279;
  int8x16_t v280;
  int8x8_t v281;
  int v282;
  int v283;
  unsigned int v284;
  uint64_t v286;
  int8x8_t v287;
  uint8x8_t *v288;
  signed int v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int8x16_t v295;
  uint64_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  uint8x8_t v300;
  uint16x8_t v301;
  uint32x4_t v302;
  uint64x2_t v303;
  uint64x2_t v304;
  uint64x2_t v305;
  uint32x4_t v306;
  uint64x2_t v307;
  uint64x2_t v308;
  uint64x2_t v309;
  uint64x2_t v310;
  uint64x2_t v311;
  int8x16_t v312;
  int8x8_t v313;
  unsigned int v314;
  uint64_t v315;
  unint64_t v316;
  int8x8_t v317;
  int8x8_t v318;
  int v319;
  int v320;
  uint8x8_t *v321;
  unint64_t v322;
  void (*v323)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v324;
  signed int v325;
  int v326;
  BOOL v327;
  int v328;
  int8x8_t v330;
  unsigned int v331;
  uint64_t v332;
  unint64_t v333;
  int8x8_t v334;
  int8x8_t v335;
  int v336;
  __int32 v337;
  int8x8_t v338;
  unsigned int v339;
  __int32 v340;
  int v341;
  uint8x8_t *v342;
  unint64_t v343;
  void (*v344)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v345;
  signed int v346;
  int v347;
  BOOL v348;
  int v349;
  int v351;
  uint8x8_t *v352;
  unint64_t v353;
  void (*v354)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v355;
  signed int v356;
  int v357;
  BOOL v358;
  int v359;
  int8x8_t v361;
  int v362;
  int v363;
  unsigned int v364;
  uint64_t v366;
  int8x8_t v367;
  uint8x8_t *v368;
  signed int v369;
  int32x4_t v370;
  int32x4_t v371;
  int32x4_t v372;
  int32x4_t v373;
  int32x4_t v374;
  int8x16_t v375;
  uint64_t v376;
  int8x16_t v377;
  int8x16_t v378;
  int8x16_t v379;
  uint8x8_t v380;
  uint16x8_t v381;
  uint32x4_t v382;
  uint64x2_t v383;
  uint64x2_t v384;
  uint64x2_t v385;
  uint32x4_t v386;
  uint64x2_t v387;
  uint64x2_t v388;
  uint64x2_t v389;
  uint64x2_t v390;
  uint64x2_t v391;
  int8x16_t v392;
  int8x8_t v393;
  int v394;
  int v395;
  unsigned int v396;
  uint64_t v398;
  int8x8_t v399;
  uint8x8_t *v400;
  signed int v401;
  int32x4_t v402;
  int32x4_t v403;
  int32x4_t v404;
  int32x4_t v405;
  int32x4_t v406;
  int8x16_t v407;
  uint64_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  uint8x8_t v412;
  uint16x8_t v413;
  uint32x4_t v414;
  uint64x2_t v415;
  uint64x2_t v416;
  uint64x2_t v417;
  uint32x4_t v418;
  uint64x2_t v419;
  uint64x2_t v420;
  uint64x2_t v421;
  uint64x2_t v422;
  uint64x2_t v423;
  int8x16_t v424;
  int8x8_t v425;
  int v426;
  int v427;
  unsigned int v428;
  uint64_t v430;
  int8x8_t v431;
  uint8x8_t *v432;
  signed int v433;
  int32x4_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int32x4_t v438;
  int8x16_t v439;
  uint64_t v440;
  int8x16_t v441;
  int8x16_t v442;
  int8x16_t v443;
  uint8x8_t v444;
  uint16x8_t v445;
  uint32x4_t v446;
  uint64x2_t v447;
  uint64x2_t v448;
  uint64x2_t v449;
  uint32x4_t v450;
  uint64x2_t v451;
  uint64x2_t v452;
  uint64x2_t v453;
  uint64x2_t v454;
  uint64x2_t v455;
  int8x16_t v456;
  int8x8_t v457;
  unsigned int v458;
  uint64_t v459;
  int8x8_t v460;
  int v461;
  int8x8_t v462;
  unsigned int v463;
  uint64_t v464;
  unint64_t v465;
  int8x8_t v466;
  int8x8_t v467;
  int v468;
  int v469;
  int8x8_t v470;
  unsigned int v471;
  uint8x8_t *v472;
  unint64_t v473;
  void (*v474)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v475;
  signed int v476;
  int v477;
  BOOL v478;
  int v479;
  uint8x8_t *v481;
  unint64_t v482;
  void (*v483)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v484;
  signed int v485;
  int v486;
  BOOL v487;
  int v488;
  int8x8_t v490;
  unsigned int v491;
  uint64_t v492;
  int8x8_t v493;
  unsigned int v494;
  int v495;
  int v496;
  int8x8_t v497;
  unsigned int v498;
  int v499;
  uint8x8_t *v500;
  unint64_t v501;
  void (*v502)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v503;
  signed int v504;
  int v505;
  BOOL v506;
  int v507;
  int8x8_t v509;
  int v510;
  int v511;
  unsigned int v512;
  uint64_t v514;
  int8x8_t v515;
  uint8x8_t *v516;
  signed int v517;
  int32x4_t v518;
  int32x4_t v519;
  int32x4_t v520;
  int32x4_t v521;
  int32x4_t v522;
  int8x16_t v523;
  uint64_t v524;
  int8x16_t v525;
  int8x16_t v526;
  int8x16_t v527;
  uint8x8_t v528;
  uint16x8_t v529;
  uint32x4_t v530;
  uint64x2_t v531;
  uint64x2_t v532;
  uint64x2_t v533;
  uint32x4_t v534;
  uint64x2_t v535;
  uint64x2_t v536;
  uint64x2_t v537;
  uint64x2_t v538;
  uint64x2_t v539;
  int8x16_t v540;
  int8x8_t v541;
  unsigned int v542;
  uint64_t v543;
  int8x8_t v544;
  int v545;
  int v546;
  unsigned int v547;
  _BYTE *v548;
  int v549;
  int v550;
  uint64_t v551;
  int v552;
  int v553;
  int v554;
  uint8x8_t *v555;
  unint64_t v556;
  void (*v557)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v558;
  signed int v559;
  int v560;
  unsigned int v561;
  BOOL v562;
  int v563;
  int8x8_t v565;
  int v566;
  int v567;
  unsigned int v568;
  uint64_t v570;
  int8x8_t v571;
  uint8x8_t *v572;
  int v573;
  int32x4_t v574;
  int32x4_t v575;
  int32x4_t v576;
  int32x4_t v577;
  int32x4_t v578;
  int8x16_t v579;
  uint64_t v580;
  int8x16_t v581;
  int8x16_t v582;
  int8x16_t v583;
  uint8x8_t v584;
  uint16x8_t v585;
  uint32x4_t v586;
  uint64x2_t v587;
  uint64x2_t v588;
  uint64x2_t v589;
  uint32x4_t v590;
  uint64x2_t v591;
  uint64x2_t v592;
  uint64x2_t v593;
  uint64x2_t v594;
  uint64x2_t v595;
  int8x16_t v596;
  int8x8_t v597;
  unsigned int v598;
  int8x8_t v599;
  int8x8_t v600;
  int v601;
  int v602;
  unsigned int v603;
  uint64_t v605;
  int8x8_t v606;
  uint8x8_t *v607;
  signed int v608;
  int32x4_t v609;
  int32x4_t v610;
  int32x4_t v611;
  int32x4_t v612;
  int32x4_t v613;
  int8x16_t v614;
  uint64_t v615;
  int8x16_t v616;
  int8x16_t v617;
  int8x16_t v618;
  uint8x8_t v619;
  uint16x8_t v620;
  uint32x4_t v621;
  uint64x2_t v622;
  uint64x2_t v623;
  uint64x2_t v624;
  uint32x4_t v625;
  uint64x2_t v626;
  uint64x2_t v627;
  uint64x2_t v628;
  uint64x2_t v629;
  uint64x2_t v630;
  int8x16_t v631;
  int8x8_t v632;
  int v633;
  int v634;
  unsigned int v635;
  uint64_t v637;
  int8x8_t v638;
  uint8x8_t *v639;
  signed int v640;
  int32x4_t v641;
  int32x4_t v642;
  int32x4_t v643;
  int32x4_t v644;
  int32x4_t v645;
  int8x16_t v646;
  uint64_t v647;
  int8x16_t v648;
  int8x16_t v649;
  int8x16_t v650;
  uint8x8_t v651;
  uint16x8_t v652;
  uint32x4_t v653;
  uint64x2_t v654;
  uint64x2_t v655;
  uint64x2_t v656;
  uint32x4_t v657;
  uint64x2_t v658;
  uint64x2_t v659;
  uint64x2_t v660;
  uint64x2_t v661;
  uint64x2_t v662;
  int8x16_t v663;
  int8x8_t v664;
  unsigned int v665;
  uint64_t v666;
  int8x8_t v667;
  int v668;
  int8x8_t v669;
  unsigned int v670;
  uint64_t v671;
  int8x8_t v672;
  int v673;
  int v674;
  int v675;
  int8x8_t v676;
  unsigned int v677;
  uint8x8_t *v678;
  unint64_t v679;
  void (*v680)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v681;
  signed int v682;
  int v683;
  BOOL v684;
  int v685;
  int8x8_t v687;
  int v688;
  int v689;
  unsigned int v690;
  uint64_t v692;
  int8x8_t v693;
  uint8x8_t *v694;
  signed int v695;
  int32x4_t v696;
  int32x4_t v697;
  int32x4_t v698;
  int32x4_t v699;
  int32x4_t v700;
  int8x16_t v701;
  uint64_t v702;
  int8x16_t v703;
  int8x16_t v704;
  int8x16_t v705;
  uint8x8_t v706;
  uint16x8_t v707;
  uint32x4_t v708;
  uint64x2_t v709;
  uint64x2_t v710;
  uint64x2_t v711;
  uint32x4_t v712;
  uint64x2_t v713;
  uint64x2_t v714;
  uint64x2_t v715;
  uint64x2_t v716;
  uint64x2_t v717;
  int8x16_t v718;
  int8x8_t v719;
  unsigned int v720;
  uint64_t v721;
  int8x8_t v722;
  int v723;
  int v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  int8x8_t v728;
  int v729;
  unint64_t v730;
  unsigned int v731;
  int v732;
  uint8x8_t *v733;
  unint64_t v734;
  void (*v735)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v736;
  int v737;
  unsigned int v739;
  int v740;
  int8x8_t v741;
  int v742;
  int v743;
  unsigned int v744;
  uint64_t v746;
  int8x8_t v747;
  uint8x8_t *v748;
  int v749;
  int32x4_t v750;
  int32x4_t v751;
  int32x4_t v752;
  int32x4_t v753;
  int32x4_t v754;
  int8x16_t v755;
  uint64_t v756;
  int8x16_t v757;
  int8x16_t v758;
  int8x16_t v759;
  uint8x8_t v760;
  uint16x8_t v761;
  uint32x4_t v762;
  uint64x2_t v763;
  uint64x2_t v764;
  uint64x2_t v765;
  uint32x4_t v766;
  uint64x2_t v767;
  uint64x2_t v768;
  uint64x2_t v769;
  uint64x2_t v770;
  uint64x2_t v771;
  int8x16_t v772;
  uint8x8_t *v773;
  unint64_t v774;
  void (*v775)(_QWORD, uint8x8_t *, _BYTE *, uint64_t);
  uint64_t v776;
  unsigned int v777;
  int v778;
  unsigned int v779;
  BOOL v780;
  unsigned int v781;
  int v782;
  int8x8_t v783;
  int v784;
  int v785;
  unsigned int v786;
  uint64_t v788;
  int8x8_t v789;
  uint8x8_t *v790;
  int v791;
  int32x4_t v792;
  int32x4_t v793;
  int32x4_t v794;
  int32x4_t v795;
  int32x4_t v796;
  int8x16_t v797;
  uint64_t v798;
  int8x16_t v799;
  int8x16_t v800;
  int8x16_t v801;
  uint8x8_t v802;
  uint16x8_t v803;
  uint32x4_t v804;
  uint64x2_t v805;
  uint64x2_t v806;
  uint64x2_t v807;
  uint32x4_t v808;
  uint64x2_t v809;
  uint64x2_t v810;
  uint64x2_t v811;
  uint64x2_t v812;
  uint64x2_t v813;
  int8x16_t v814;
  int8x8_t v815;
  unsigned int v816;
  int8x8_t v817;
  unsigned int v818;
  uint64_t v819;
  unint64_t v820;
  unint64_t v821;
  unint64_t v822;
  int v823;
  unsigned int v824;
  unint64_t v825;
  unsigned int v827;
  uint64_t v828;
  uint64_t v830;
  _BYTE v831[9];
  uint64_t v832;

  v832 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  v7 = (unsigned __int8 *)(a2 + 33 * a4 + 11 * a3);
  v8 = a1[3].u32[0];
  v9 = (((a1[3].i32[1] - 1) * *v7) >> 8) + 1;
  if ((v8 & 0x80000000) != 0)
  {
    v13 = a1 + 1;
    v12 = (uint8x8_t *)a1[1];
    v10 = a1[2];
    v14 = *(_QWORD *)a1 - (_QWORD)v12;
    v15 = 8 * v14;
    v16 = 56 - v8 - 8 * v14;
    v17 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
    if (v17)
    {
      if (v14 >= 9)
        v18 = 9;
      else
        v18 = *(_QWORD *)a1 - (_QWORD)v12;
      v17(*(_QWORD *)&a1[5], v12, v831, v18);
      v12 = (uint8x8_t *)v831;
    }
    if (v16 < 0)
      v11 = v8;
    else
      v11 = v8 + 0x40000000;
    if (v15)
      v19 = 1;
    else
      v19 = v16 <= -1;
    if (!v19)
      goto LABEL_35;
    v20 = 48 - v8;
    v21 = v16 & ~(v16 >> 31);
    if ((int)(48 - v8) < v21)
      goto LABEL_35;
    v22 = *v13;
    v23 = v21 - 1;
    if (v21 - 1 >= (int)(40 - v8))
      v24 = 40 - v8;
    else
      v24 = v21 - 1;
    v25 = 47 - v8 - v24;
    if (v25 < 0x78)
      goto LABEL_32;
    if (v23 >= (int)(40 - v8))
      v23 = 40 - v8;
    if (v13 >= (int8x8_t *)((char *)v12 + ((47 - v8 - v23) >> 3) + 1) || v12 >= (uint8x8_t *)&a1[2])
    {
      v27 = (v25 >> 3) + 1;
      v28 = (int8x8_t)(*(_QWORD *)&v22 + (v27 & 0x3FFFFFF8));
      v29 = (uint8x8_t *)((char *)v12 + (v27 & 0x3FFFFFF8));
      v30 = v20 - 8 * (v27 & 0x3FFFFFF8);
      v31 = vdupq_n_s32(v20);
      v32 = vaddq_s32(v31, (int32x4_t)xmmword_208F3A6A0);
      v33 = vaddq_s32(v31, (int32x4_t)xmmword_208F3A6B0);
      v34 = 0uLL;
      v35 = (int32x4_t)v11;
      v36 = (int8x16_t)(unint64_t)v10;
      v37.i64[0] = 0x800000008;
      v37.i64[1] = 0x800000008;
      v38.i64[0] = 0x3F0000003FLL;
      v38.i64[1] = 0x3F0000003FLL;
      v39 = v27 & 0x3FFFFFF8;
      v40 = 0uLL;
      v41 = 0uLL;
      v42 = 0uLL;
      do
      {
        v35 = vaddq_s32(v35, v37);
        v43 = *v12++;
        v34 = vaddq_s32(v34, v37);
        v44 = vmovl_u8(v43);
        v45 = vmovl_high_u16(v44);
        v46.i64[0] = v45.u32[2];
        v46.i64[1] = v45.u32[3];
        v47 = v46;
        v46.i64[0] = v45.u32[0];
        v46.i64[1] = v45.u32[1];
        v48 = v46;
        v49 = vmovl_u16(*(uint16x4_t *)v44.i8);
        v46.i64[0] = v49.u32[2];
        v46.i64[1] = v49.u32[3];
        v50 = v46;
        v46.i64[0] = v49.u32[0];
        v46.i64[1] = v49.u32[1];
        v51 = v46;
        v46.i64[0] = v32.u32[2];
        v46.i64[1] = v32.u32[3];
        v52 = v46;
        v46.i64[0] = v32.u32[0];
        v46.i64[1] = v32.u32[1];
        v53 = v46;
        v46.i64[0] = v33.u32[2];
        v46.i64[1] = v33.u32[3];
        v54 = v46;
        v46.i64[0] = v33.u32[0];
        v46.i64[1] = v33.u32[1];
        v42 = vorrq_s8((int8x16_t)vshlq_u64(v47, v52), v42);
        v41 = vorrq_s8((int8x16_t)vshlq_u64(v48, v53), v41);
        v40 = vorrq_s8((int8x16_t)vshlq_u64(v50, v54), v40);
        v36 = vorrq_s8((int8x16_t)vshlq_u64(v51, v46), v36);
        *(_QWORD *)&v22 += 8;
        v33 = vaddq_s32(v33, v38);
        v32 = vaddq_s32(v32, v38);
        v39 -= 8;
      }
      while (v39);
      *v13 = v22;
      v55 = vorrq_s8(vorrq_s8(v36, v41), vorrq_s8(v40, v42));
      v10 = vorr_s8(*(int8x8_t *)v55.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL));
      v11 = vaddvq_s32(vaddq_s32(v35, v34));
      if ((v27 & 0x3FFFFFF8) == v27)
        goto LABEL_35;
    }
    else
    {
LABEL_32:
      v28 = *v13;
      v29 = v12;
      v30 = 48 - v8;
    }
    v56 = (int8x8_t)(*(_QWORD *)&v28 + 1);
    do
    {
      v11 += 8;
      v57 = v29->u8[0];
      v29 = (uint8x8_t *)((char *)v29 + 1);
      *(_QWORD *)&v10 |= (unint64_t)v57 << v30;
      *v13 = v56;
      v30 -= 8;
      ++*(_QWORD *)&v56;
    }
    while (v30 >= v21);
  }
  else
  {
    v10 = a1[2];
    v11 = a1[3].u32[0];
  }
LABEL_35:
  v58 = v9 << 56;
  v59 = v10;
  v60 = (int8x8_t)(*(_QWORD *)&v10 - (v9 << 56));
  if (*(_QWORD *)&v10 >= (unint64_t)(v9 << 56))
  {
    LODWORD(v9) = a1[3].i32[1] - v9;
    v59 = v60;
  }
  v61 = vp8_norm[v9];
  v62 = (_DWORD)v9 << v61;
  v63 = (int8x8_t)(*(_QWORD *)&v59 << v61);
  a1[2] = (int8x8_t)(*(_QWORD *)&v59 << v61);
  v64 = v11 - v61;
  a1[3].i32[0] = v11 - v61;
  a1[3].i32[1] = (_DWORD)v9 << v61;
  if (*(_QWORD *)&v10 < v58)
    return 0;
  v66 = a1 + 1;
  v825 = (unint64_t)&a1[2];
  v67.i64[0] = 0x800000008;
  v67.i64[1] = 0x800000008;
  v68.i64[0] = 0x3F0000003FLL;
  v68.i64[1] = 0x3F0000003FLL;
  do
  {
    while (1)
    {
      v69 = v7[1];
      if ((v64 & 0x80000000) == 0)
        goto LABEL_76;
      v70 = (uint8x8_t *)a1[1];
      v71 = *(_QWORD *)a1 - (_QWORD)v70;
      v72 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
      if (v72)
      {
        if (v71 >= 9)
          v73 = 9;
        else
          v73 = *(_QWORD *)a1 - (_QWORD)v70;
        v72(*(_QWORD *)&a1[5], v70, v831, v73);
        v68.i64[0] = 0x3F0000003FLL;
        v68.i64[1] = 0x3F0000003FLL;
        v67.i64[0] = 0x800000008;
        v67.i64[1] = 0x800000008;
        v70 = (uint8x8_t *)v831;
      }
      v74 = 48 - v64;
      v75 = 56 - v64 - 8 * v71;
      if (v75 < 0)
        v76 = v64;
      else
        v76 = v64 + 0x40000000;
      if (8 * v71)
        v77 = 1;
      else
        v77 = v75 <= -1;
      v78 = v75 & ~(v75 >> 31);
      if (v77 && v74 >= v78)
      {
        v80 = *v66;
        v81 = v78 - 1;
        if (v78 - 1 >= (int)(40 - v64))
          v82 = 40 - v64;
        else
          v82 = v78 - 1;
        v83 = 47 - v64 - v82;
        if (v83 < 0x78)
          goto LABEL_72;
        if (v81 >= (int)(40 - v64))
          v81 = 40 - v64;
        if (v66 >= (int8x8_t *)((char *)v70 + ((47 - v64 - v81) >> 3) + 1) || (unint64_t)v70 >= v825)
        {
          v85 = (v83 >> 3) + 1;
          v86 = (int8x8_t)(*(_QWORD *)&v80 + (v85 & 0x3FFFFFF8));
          v87 = (uint8x8_t *)((char *)v70 + (v85 & 0x3FFFFFF8));
          v88 = v74 - 8 * (v85 & 0x3FFFFFF8);
          v89 = vdupq_n_s32(v74);
          v90 = vaddq_s32(v89, (int32x4_t)xmmword_208F3A6A0);
          v91 = vaddq_s32(v89, (int32x4_t)xmmword_208F3A6B0);
          v92 = 0uLL;
          v93 = (int32x4_t)v76;
          v94 = (int8x16_t)(unint64_t)v63;
          v95 = v85 & 0x3FFFFFF8;
          v96 = 0uLL;
          v97 = 0uLL;
          v98 = 0uLL;
          do
          {
            v93 = vaddq_s32(v93, v67);
            v99 = *v70++;
            v92 = vaddq_s32(v92, v67);
            v100 = vmovl_u8(v99);
            v101 = vmovl_high_u16(v100);
            v102.i64[0] = v101.u32[2];
            v102.i64[1] = v101.u32[3];
            v103 = v102;
            v102.i64[0] = v101.u32[0];
            v102.i64[1] = v101.u32[1];
            v104 = v102;
            v105 = vmovl_u16(*(uint16x4_t *)v100.i8);
            v102.i64[0] = v105.u32[2];
            v102.i64[1] = v105.u32[3];
            v106 = v102;
            v102.i64[0] = v105.u32[0];
            v102.i64[1] = v105.u32[1];
            v107 = v102;
            v102.i64[0] = v90.u32[2];
            v102.i64[1] = v90.u32[3];
            v108 = v102;
            v102.i64[0] = v90.u32[0];
            v102.i64[1] = v90.u32[1];
            v109 = v102;
            v102.i64[0] = v91.u32[2];
            v102.i64[1] = v91.u32[3];
            v110 = v102;
            v102.i64[0] = v91.u32[0];
            v102.i64[1] = v91.u32[1];
            v98 = vorrq_s8((int8x16_t)vshlq_u64(v103, v108), v98);
            v97 = vorrq_s8((int8x16_t)vshlq_u64(v104, v109), v97);
            v96 = vorrq_s8((int8x16_t)vshlq_u64(v106, v110), v96);
            v94 = vorrq_s8((int8x16_t)vshlq_u64(v107, v102), v94);
            *(_QWORD *)&v80 += 8;
            v91 = vaddq_s32(v91, v68);
            v90 = vaddq_s32(v90, v68);
            v95 -= 8;
          }
          while (v95);
          *v66 = v80;
          v111 = vorrq_s8(vorrq_s8(v94, v97), vorrq_s8(v96, v98));
          v63 = vorr_s8(*(int8x8_t *)v111.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL));
          v76 = vaddvq_s32(vaddq_s32(v93, v92));
          if ((v85 & 0x3FFFFFF8) == v85)
            goto LABEL_75;
        }
        else
        {
LABEL_72:
          v86 = *v66;
          v87 = v70;
          v88 = 48 - v64;
        }
        v112 = (int8x8_t)(*(_QWORD *)&v86 + 1);
        do
        {
          v76 += 8;
          v113 = v87->u8[0];
          v87 = (uint8x8_t *)((char *)v87 + 1);
          *(_QWORD *)&v63 |= (unint64_t)v113 << v88;
          *v66 = v112;
          v88 -= 8;
          ++*(_QWORD *)&v112;
        }
        while (v88 >= v78);
      }
LABEL_75:
      v64 = v76;
LABEL_76:
      v114 = (((v62 - 1) * v69) >> 8) + 1;
      v115 = v114 << 56;
      v116 = v63;
      v117 = (int8x8_t)(*(_QWORD *)&v63 - (v114 << 56));
      if (*(_QWORD *)&v63 >= (unint64_t)(v114 << 56))
      {
        LODWORD(v114) = a1[3].i32[1] - v114;
        v116 = v117;
      }
      v118 = v6 + 1;
      v119 = vp8_norm[v114];
      v62 = (_DWORD)v114 << v119;
      v120 = (int8x8_t)(*(_QWORD *)&v116 << v119);
      a1[2] = (int8x8_t)(*(_QWORD *)&v116 << v119);
      v121 = v64 - v119;
      a1[3].i32[0] = v64 - v119;
      a1[3].i32[1] = (_DWORD)v114 << v119;
      if (*(_QWORD *)&v63 >= v115)
        break;
      v7 = (unsigned __int8 *)(a2 + 33 * kBands[v118]);
      v63 = (int8x8_t)(*(_QWORD *)&v116 << v119);
      v64 -= v119;
      ++v6;
      if ((_DWORD)v118 == 16)
        return 16;
    }
    v122 = v7[2];
    v828 = v6;
    v830 = v6 + 1;
    if ((v121 & 0x80000000) == 0)
      goto LABEL_114;
    v123 = (uint8x8_t *)a1[1];
    v124 = *(_QWORD *)a1 - (_QWORD)v123;
    v125 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
    if (v125)
    {
      if (v124 >= 9)
        v126 = 9;
      else
        v126 = *(_QWORD *)a1 - (_QWORD)v123;
      v125(*(_QWORD *)&a1[5], v123, v831, v126);
      v68.i64[0] = 0x3F0000003FLL;
      v68.i64[1] = 0x3F0000003FLL;
      v67.i64[0] = 0x800000008;
      v67.i64[1] = 0x800000008;
      v123 = (uint8x8_t *)v831;
    }
    v127 = 48 - v121;
    v128 = 56 - 8 * v124 - v121;
    if (v128 >= 0)
      v121 += 0x40000000;
    if (8 * v124)
      v129 = 1;
    else
      v129 = v128 <= -1;
    v130 = v128 & ~(v128 >> 31);
    if (!v129 || v127 < v130)
    {
      v118 = v830;
      goto LABEL_114;
    }
    v132 = *v66;
    v133 = v119 - v64 + 40;
    if (v133 >= v130 - 1)
      v134 = v130 - 1;
    else
      v134 = v119 - v64 + 40;
    v135 = v119 - v64 - v134 + 47;
    v118 = v830;
    if (v135 < 0x78)
      goto LABEL_111;
    if (v133 >= v130 - 1)
      v133 = v130 - 1;
    if (v66 < (int8x8_t *)((char *)v123 + ((v119 - v64 - v133 + 47) >> 3) + 1) && (unint64_t)v123 < v825)
    {
LABEL_111:
      v138 = *v66;
      v139 = v123;
      v140 = v127;
LABEL_112:
      v164 = (int8x8_t)(*(_QWORD *)&v138 + 1);
      do
      {
        v121 += 8;
        v165 = v139->u8[0];
        v139 = (uint8x8_t *)((char *)v139 + 1);
        *(_QWORD *)&v120 |= (unint64_t)v165 << v140;
        *v66 = v164;
        v140 -= 8;
        ++*(_QWORD *)&v164;
      }
      while (v140 >= v130);
      goto LABEL_114;
    }
    v137 = (v135 >> 3) + 1;
    v138 = (int8x8_t)(*(_QWORD *)&v132 + (v137 & 0x3FFFFFF8));
    v139 = (uint8x8_t *)((char *)v123 + (v137 & 0x3FFFFFF8));
    v140 = v127 - 8 * (v137 & 0x3FFFFFF8);
    v141 = vdupq_n_s32(v127);
    v142 = vaddq_s32(v141, (int32x4_t)xmmword_208F3A6A0);
    v143 = vaddq_s32(v141, (int32x4_t)xmmword_208F3A6B0);
    v144 = 0uLL;
    v145 = (int32x4_t)v121;
    v146 = (int8x16_t)(unint64_t)v120;
    v147 = v137 & 0x3FFFFFF8;
    v148 = 0uLL;
    v149 = 0uLL;
    v150 = 0uLL;
    do
    {
      v145 = vaddq_s32(v145, v67);
      v151 = *v123++;
      v144 = vaddq_s32(v144, v67);
      v152 = vmovl_u8(v151);
      v153 = vmovl_high_u16(v152);
      v154.i64[0] = v153.u32[2];
      v154.i64[1] = v153.u32[3];
      v155 = v154;
      v154.i64[0] = v153.u32[0];
      v154.i64[1] = v153.u32[1];
      v156 = v154;
      v157 = vmovl_u16(*(uint16x4_t *)v152.i8);
      v154.i64[0] = v157.u32[2];
      v154.i64[1] = v157.u32[3];
      v158 = v154;
      v154.i64[0] = v157.u32[0];
      v154.i64[1] = v157.u32[1];
      v159 = v154;
      v154.i64[0] = v142.u32[2];
      v154.i64[1] = v142.u32[3];
      v160 = v154;
      v154.i64[0] = v142.u32[0];
      v154.i64[1] = v142.u32[1];
      v161 = v154;
      v154.i64[0] = v143.u32[2];
      v154.i64[1] = v143.u32[3];
      v162 = v154;
      v154.i64[0] = v143.u32[0];
      v154.i64[1] = v143.u32[1];
      v150 = vorrq_s8((int8x16_t)vshlq_u64(v155, v160), v150);
      v149 = vorrq_s8((int8x16_t)vshlq_u64(v156, v161), v149);
      v148 = vorrq_s8((int8x16_t)vshlq_u64(v158, v162), v148);
      v146 = vorrq_s8((int8x16_t)vshlq_u64(v159, v154), v146);
      *(_QWORD *)&v132 += 8;
      v143 = vaddq_s32(v143, v68);
      v142 = vaddq_s32(v142, v68);
      v147 -= 8;
    }
    while (v147);
    *v66 = v132;
    v163 = vorrq_s8(vorrq_s8(v146, v149), vorrq_s8(v148, v150));
    v120 = vorr_s8(*(int8x8_t *)v163.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v163, v163, 8uLL));
    v121 = vaddvq_s32(vaddq_s32(v145, v144));
    if ((v137 & 0x3FFFFFF8) != v137)
      goto LABEL_112;
LABEL_114:
    v166 = (((v62 - 1) * v122) >> 8) + 1;
    v167 = v166 << 56;
    v168 = v120;
    v169 = (int8x8_t)(*(_QWORD *)&v120 - (v166 << 56));
    if (*(_QWORD *)&v120 >= (unint64_t)(v166 << 56))
    {
      LODWORD(v166) = a1[3].i32[1] - v166;
      v168 = v169;
    }
    v170 = vp8_norm[v166];
    v171 = (_DWORD)v166 << v170;
    v172 = (int8x8_t)(*(_QWORD *)&v168 << v170);
    a1[2] = (int8x8_t)(*(_QWORD *)&v168 << v170);
    v173 = v121 - v170;
    a1[3].i32[0] = v121 - v170;
    a1[3].i32[1] = (_DWORD)v166 << v170;
    if (*(_QWORD *)&v120 < v167)
    {
      v174 = 1;
      v175 = 1;
      goto LABEL_549;
    }
    v176 = v7[3];
    if (v173 < 0)
    {
      v177 = (uint8x8_t *)a1[1];
      v178 = *(_QWORD *)a1 - (_QWORD)v177;
      v179 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
      if (v179)
      {
        if (v178 >= 9)
          v180 = 9;
        else
          v180 = *(_QWORD *)a1 - (_QWORD)v177;
        v179(*(_QWORD *)&a1[5], v177, v831, v180);
        v68.i64[0] = 0x3F0000003FLL;
        v68.i64[1] = 0x3F0000003FLL;
        v67.i64[0] = 0x800000008;
        v67.i64[1] = 0x800000008;
        v177 = (uint8x8_t *)v831;
      }
      v181 = 48 - v173;
      v182 = 56 - 8 * v178 - v173;
      if (v182 >= 0)
        v173 += 0x40000000;
      if (8 * v178)
        v183 = 1;
      else
        v183 = v182 <= -1;
      v184 = v182 & ~(v182 >> 31);
      if (!v183 || v181 < v184)
      {
        v118 = v830;
        goto LABEL_153;
      }
      v186 = *v66;
      v187 = v170 - v121 + 40;
      if (v187 >= v184 - 1)
        v188 = v184 - 1;
      else
        v188 = v170 - v121 + 40;
      v189 = v170 - v121 - v188 + 47;
      v118 = v830;
      if (v189 < 0x78)
        goto LABEL_150;
      if (v187 >= v184 - 1)
        v187 = v184 - 1;
      if (v66 < (int8x8_t *)((char *)v177 + ((v170 - v121 - v187 + 47) >> 3) + 1) && (unint64_t)v177 < v825)
      {
LABEL_150:
        v192 = *v66;
        v193 = v177;
        v194 = v181;
LABEL_151:
        v218 = (int8x8_t)(*(_QWORD *)&v192 + 1);
        do
        {
          v173 += 8;
          v219 = v193->u8[0];
          v193 = (uint8x8_t *)((char *)v193 + 1);
          *(_QWORD *)&v172 |= (unint64_t)v219 << v194;
          *v66 = v218;
          v194 -= 8;
          ++*(_QWORD *)&v218;
        }
        while (v194 >= v184);
        goto LABEL_153;
      }
      v191 = (v189 >> 3) + 1;
      v192 = (int8x8_t)(*(_QWORD *)&v186 + (v191 & 0x3FFFFFF8));
      v193 = (uint8x8_t *)((char *)v177 + (v191 & 0x3FFFFFF8));
      v194 = v181 - 8 * (v191 & 0x3FFFFFF8);
      v195 = vdupq_n_s32(v181);
      v196 = vaddq_s32(v195, (int32x4_t)xmmword_208F3A6A0);
      v197 = vaddq_s32(v195, (int32x4_t)xmmword_208F3A6B0);
      v198 = 0uLL;
      v199 = (int32x4_t)v173;
      v200 = (int8x16_t)(unint64_t)v172;
      v201 = v191 & 0x3FFFFFF8;
      v202 = 0uLL;
      v203 = 0uLL;
      v204 = 0uLL;
      do
      {
        v199 = vaddq_s32(v199, v67);
        v205 = *v177++;
        v198 = vaddq_s32(v198, v67);
        v206 = vmovl_u8(v205);
        v207 = vmovl_high_u16(v206);
        v208.i64[0] = v207.u32[2];
        v208.i64[1] = v207.u32[3];
        v209 = v208;
        v208.i64[0] = v207.u32[0];
        v208.i64[1] = v207.u32[1];
        v210 = v208;
        v211 = vmovl_u16(*(uint16x4_t *)v206.i8);
        v208.i64[0] = v211.u32[2];
        v208.i64[1] = v211.u32[3];
        v212 = v208;
        v208.i64[0] = v211.u32[0];
        v208.i64[1] = v211.u32[1];
        v213 = v208;
        v208.i64[0] = v196.u32[2];
        v208.i64[1] = v196.u32[3];
        v214 = v208;
        v208.i64[0] = v196.u32[0];
        v208.i64[1] = v196.u32[1];
        v215 = v208;
        v208.i64[0] = v197.u32[2];
        v208.i64[1] = v197.u32[3];
        v216 = v208;
        v208.i64[0] = v197.u32[0];
        v208.i64[1] = v197.u32[1];
        v204 = vorrq_s8((int8x16_t)vshlq_u64(v209, v214), v204);
        v203 = vorrq_s8((int8x16_t)vshlq_u64(v210, v215), v203);
        v202 = vorrq_s8((int8x16_t)vshlq_u64(v212, v216), v202);
        v200 = vorrq_s8((int8x16_t)vshlq_u64(v213, v208), v200);
        *(_QWORD *)&v186 += 8;
        v197 = vaddq_s32(v197, v68);
        v196 = vaddq_s32(v196, v68);
        v201 -= 8;
      }
      while (v201);
      *v66 = v186;
      v217 = vorrq_s8(vorrq_s8(v200, v203), vorrq_s8(v202, v204));
      v172 = vorr_s8(*(int8x8_t *)v217.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v217, v217, 8uLL));
      v173 = vaddvq_s32(vaddq_s32(v199, v198));
      if ((v191 & 0x3FFFFFF8) != v191)
        goto LABEL_151;
    }
LABEL_153:
    v220 = (((v171 - 1) * v176) >> 8) + 1;
    v221 = v220 << 56;
    v222 = v172;
    v223 = (int8x8_t)(*(_QWORD *)&v172 - (v220 << 56));
    if (*(_QWORD *)&v172 >= (unint64_t)(v220 << 56))
    {
      LODWORD(v220) = a1[3].i32[1] - v220;
      v222 = v223;
    }
    v224 = vp8_norm[v220];
    v225 = (_DWORD)v220 << v224;
    v226 = (int8x8_t)(*(_QWORD *)&v222 << v224);
    a1[2] = (int8x8_t)(*(_QWORD *)&v222 << v224);
    v227 = v173 - v224;
    a1[3].i32[0] = v173 - v224;
    a1[3].i32[1] = v225;
    v228 = v225 - 1;
    if (*(_QWORD *)&v172 >= v221)
    {
      v239 = v7[6];
      if ((v227 & 0x80000000) == 0)
        goto LABEL_247;
      v240 = (uint8x8_t *)a1[1];
      v241 = *(_QWORD *)a1 - (_QWORD)v240;
      v242 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
      if (v242)
      {
        if (v241 >= 9)
          v243 = 9;
        else
          v243 = *(_QWORD *)a1 - (_QWORD)v240;
        v242(*(_QWORD *)&a1[5], v240, v831, v243);
        v68.i64[0] = 0x3F0000003FLL;
        v68.i64[1] = 0x3F0000003FLL;
        v67.i64[0] = 0x800000008;
        v67.i64[1] = 0x800000008;
        v240 = (uint8x8_t *)v831;
      }
      v244 = 48 - v227;
      v245 = 56 - 8 * v241 - v227;
      if (v245 >= 0)
        v227 += 0x40000000;
      if (8 * v241)
        v246 = 1;
      else
        v246 = v245 <= -1;
      v247 = v245 & ~(v245 >> 31);
      if (!v246 || v244 < v247)
      {
        v118 = v830;
        goto LABEL_247;
      }
      v281 = *v66;
      v282 = v224 - v173 + 40;
      if (v282 >= v247 - 1)
        v283 = v247 - 1;
      else
        v283 = v224 - v173 + 40;
      v284 = v224 - v173 - v283 + 47;
      v118 = v830;
      if (v284 < 0x78)
        goto LABEL_244;
      if (v282 >= v247 - 1)
        v282 = v247 - 1;
      if (v66 >= (int8x8_t *)((char *)v240 + ((v224 - v173 - v282 + 47) >> 3) + 1)
        || (unint64_t)v240 >= v825)
      {
        v286 = (v284 >> 3) + 1;
        v287 = (int8x8_t)(*(_QWORD *)&v281 + (v286 & 0x3FFFFFF8));
        v288 = (uint8x8_t *)((char *)v240 + (v286 & 0x3FFFFFF8));
        v289 = v244 - 8 * (v286 & 0x3FFFFFF8);
        v290 = vdupq_n_s32(v244);
        v291 = vaddq_s32(v290, (int32x4_t)xmmword_208F3A6A0);
        v292 = vaddq_s32(v290, (int32x4_t)xmmword_208F3A6B0);
        v293 = 0uLL;
        v294 = (int32x4_t)v227;
        v295 = (int8x16_t)(unint64_t)v226;
        v296 = v286 & 0x3FFFFFF8;
        v297 = 0uLL;
        v298 = 0uLL;
        v299 = 0uLL;
        do
        {
          v294 = vaddq_s32(v294, v67);
          v300 = *v240++;
          v293 = vaddq_s32(v293, v67);
          v301 = vmovl_u8(v300);
          v302 = vmovl_high_u16(v301);
          v303.i64[0] = v302.u32[2];
          v303.i64[1] = v302.u32[3];
          v304 = v303;
          v303.i64[0] = v302.u32[0];
          v303.i64[1] = v302.u32[1];
          v305 = v303;
          v306 = vmovl_u16(*(uint16x4_t *)v301.i8);
          v303.i64[0] = v306.u32[2];
          v303.i64[1] = v306.u32[3];
          v307 = v303;
          v303.i64[0] = v306.u32[0];
          v303.i64[1] = v306.u32[1];
          v308 = v303;
          v303.i64[0] = v291.u32[2];
          v303.i64[1] = v291.u32[3];
          v309 = v303;
          v303.i64[0] = v291.u32[0];
          v303.i64[1] = v291.u32[1];
          v310 = v303;
          v303.i64[0] = v292.u32[2];
          v303.i64[1] = v292.u32[3];
          v311 = v303;
          v303.i64[0] = v292.u32[0];
          v303.i64[1] = v292.u32[1];
          v299 = vorrq_s8((int8x16_t)vshlq_u64(v304, v309), v299);
          v298 = vorrq_s8((int8x16_t)vshlq_u64(v305, v310), v298);
          v297 = vorrq_s8((int8x16_t)vshlq_u64(v307, v311), v297);
          v295 = vorrq_s8((int8x16_t)vshlq_u64(v308, v303), v295);
          *(_QWORD *)&v281 += 8;
          v292 = vaddq_s32(v292, v68);
          v291 = vaddq_s32(v291, v68);
          v296 -= 8;
        }
        while (v296);
        *v66 = v281;
        v312 = vorrq_s8(vorrq_s8(v295, v298), vorrq_s8(v297, v299));
        v226 = vorr_s8(*(int8x8_t *)v312.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v312, v312, 8uLL));
        v227 = vaddvq_s32(vaddq_s32(v294, v293));
        if ((v286 & 0x3FFFFFF8) == v286)
        {
LABEL_247:
          v332 = ((v228 * v239) >> 8) + 1;
          v333 = v332 << 56;
          v334 = v226;
          v335 = (int8x8_t)(*(_QWORD *)&v226 - (v332 << 56));
          if (*(_QWORD *)&v226 >= (unint64_t)(v332 << 56))
          {
            LODWORD(v332) = a1[3].i32[1] - v332;
            v334 = v335;
          }
          v336 = vp8_norm[v332];
          v337 = (_DWORD)v332 << v336;
          v338 = (int8x8_t)(*(_QWORD *)&v334 << v336);
          a1[2] = (int8x8_t)(*(_QWORD *)&v334 << v336);
          v339 = v227 - v336;
          a1[3].i32[0] = v227 - v336;
          a1[3].i32[1] = v337;
          v340 = v337 - 1;
          if (*(_QWORD *)&v226 < v333)
          {
            v341 = v7[7];
            if ((v339 & 0x80000000) != 0)
            {
              v342 = (uint8x8_t *)a1[1];
              v343 = *(_QWORD *)a1 - (_QWORD)v342;
              v344 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
              if (v344)
              {
                if (v343 >= 9)
                  v345 = 9;
                else
                  v345 = *(_QWORD *)a1 - (_QWORD)v342;
                v344(*(_QWORD *)&a1[5], v342, v831, v345);
                v118 = v830;
                v68.i64[0] = 0x3F0000003FLL;
                v68.i64[1] = 0x3F0000003FLL;
                v67.i64[0] = 0x800000008;
                v67.i64[1] = 0x800000008;
                v342 = (uint8x8_t *)v831;
              }
              v346 = 48 - v339;
              v347 = 56 - 8 * v343 - v339;
              if (v347 >= 0)
                v339 += 0x40000000;
              v348 = 8 * v343 || v347 <= -1;
              v349 = v347 & ~(v347 >> 31);
              if (v348 && v346 >= v349)
              {
                v393 = *v66;
                v394 = v336 - v227 + 40;
                if (v394 >= v349 - 1)
                  v395 = v349 - 1;
                else
                  v395 = v336 - v227 + 40;
                v396 = v336 - v227 - v395 + 47;
                if (v396 < 0x78)
                  goto LABEL_336;
                if (v394 >= v349 - 1)
                  v394 = v349 - 1;
                if (v66 < (int8x8_t *)((char *)v342 + ((v336 - v227 - v394 + 47) >> 3) + 1)
                  && (unint64_t)v342 < v825)
                {
LABEL_336:
                  v399 = *v66;
                  v400 = v342;
                  v401 = v346;
LABEL_337:
                  v462 = (int8x8_t)(*(_QWORD *)&v399 + 1);
                  do
                  {
                    v339 += 8;
                    v463 = v400->u8[0];
                    v400 = (uint8x8_t *)((char *)v400 + 1);
                    *(_QWORD *)&v338 |= (unint64_t)v463 << v401;
                    *v66 = v462;
                    v401 -= 8;
                    ++*(_QWORD *)&v462;
                  }
                  while (v401 >= v349);
                  goto LABEL_339;
                }
                v398 = (v396 >> 3) + 1;
                v399 = (int8x8_t)(*(_QWORD *)&v393 + (v398 & 0x3FFFFFF8));
                v400 = (uint8x8_t *)((char *)v342 + (v398 & 0x3FFFFFF8));
                v401 = v346 - 8 * (v398 & 0x3FFFFFF8);
                v402 = vdupq_n_s32(v346);
                v403 = vaddq_s32(v402, (int32x4_t)xmmword_208F3A6A0);
                v404 = vaddq_s32(v402, (int32x4_t)xmmword_208F3A6B0);
                v405 = 0uLL;
                v406 = (int32x4_t)v339;
                v407 = (int8x16_t)(unint64_t)v338;
                v408 = v398 & 0x3FFFFFF8;
                v409 = 0uLL;
                v410 = 0uLL;
                v411 = 0uLL;
                do
                {
                  v406 = vaddq_s32(v406, v67);
                  v412 = *v342++;
                  v405 = vaddq_s32(v405, v67);
                  v413 = vmovl_u8(v412);
                  v414 = vmovl_high_u16(v413);
                  v415.i64[0] = v414.u32[2];
                  v415.i64[1] = v414.u32[3];
                  v416 = v415;
                  v415.i64[0] = v414.u32[0];
                  v415.i64[1] = v414.u32[1];
                  v417 = v415;
                  v418 = vmovl_u16(*(uint16x4_t *)v413.i8);
                  v415.i64[0] = v418.u32[2];
                  v415.i64[1] = v418.u32[3];
                  v419 = v415;
                  v415.i64[0] = v418.u32[0];
                  v415.i64[1] = v418.u32[1];
                  v420 = v415;
                  v415.i64[0] = v403.u32[2];
                  v415.i64[1] = v403.u32[3];
                  v421 = v415;
                  v415.i64[0] = v403.u32[0];
                  v415.i64[1] = v403.u32[1];
                  v422 = v415;
                  v415.i64[0] = v404.u32[2];
                  v415.i64[1] = v404.u32[3];
                  v423 = v415;
                  v415.i64[0] = v404.u32[0];
                  v415.i64[1] = v404.u32[1];
                  v411 = vorrq_s8((int8x16_t)vshlq_u64(v416, v421), v411);
                  v410 = vorrq_s8((int8x16_t)vshlq_u64(v417, v422), v410);
                  v409 = vorrq_s8((int8x16_t)vshlq_u64(v419, v423), v409);
                  v407 = vorrq_s8((int8x16_t)vshlq_u64(v420, v415), v407);
                  *(_QWORD *)&v393 += 8;
                  v404 = vaddq_s32(v404, v68);
                  v403 = vaddq_s32(v403, v68);
                  v408 -= 8;
                }
                while (v408);
                *v66 = v393;
                v424 = vorrq_s8(vorrq_s8(v407, v410), vorrq_s8(v409, v411));
                v338 = vorr_s8(*(int8x8_t *)v424.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v424, v424, 8uLL));
                v339 = vaddvq_s32(vaddq_s32(v406, v405));
                if ((v398 & 0x3FFFFFF8) != v398)
                  goto LABEL_337;
              }
            }
LABEL_339:
            v464 = ((v340 * v341) >> 8) + 1;
            v465 = v464 << 56;
            v466 = v338;
            v467 = (int8x8_t)(*(_QWORD *)&v338 - (v464 << 56));
            if (*(_QWORD *)&v338 >= (unint64_t)(v464 << 56))
            {
              LODWORD(v464) = a1[3].i32[1] - v464;
              v466 = v467;
            }
            v468 = vp8_norm[v464];
            v469 = (_DWORD)v464 << v468;
            v470 = (int8x8_t)(*(_QWORD *)&v466 << v468);
            a1[2] = (int8x8_t)(*(_QWORD *)&v466 << v468);
            v471 = v339 - v468;
            a1[3].i32[0] = v339 - v468;
            a1[3].i32[1] = (_DWORD)v464 << v468;
            if (*(_QWORD *)&v338 < v465)
            {
              if ((v471 & 0x80000000) == 0)
                goto LABEL_498;
              v472 = (uint8x8_t *)a1[1];
              v473 = *(_QWORD *)a1 - (_QWORD)v472;
              v474 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
              if (v474)
              {
                if (v473 >= 9)
                  v475 = 9;
                else
                  v475 = *(_QWORD *)a1 - (_QWORD)v472;
                v474(*(_QWORD *)&a1[5], v472, v831, v475);
                v118 = v830;
                v68.i64[0] = 0x3F0000003FLL;
                v68.i64[1] = 0x3F0000003FLL;
                v67.i64[0] = 0x800000008;
                v67.i64[1] = 0x800000008;
                v472 = (uint8x8_t *)v831;
              }
              v476 = 48 - v471;
              v477 = 56 - 8 * v473 - v471;
              if (v477 >= 0)
                v471 += 0x40000000;
              v478 = 8 * v473 || v477 <= -1;
              v479 = v477 & ~(v477 >> 31);
              if (!v478 || v476 < v479)
                goto LABEL_498;
              v600 = *v66;
              v601 = v468 - v339 + 40;
              if (v601 >= v479 - 1)
                v602 = v479 - 1;
              else
                v602 = v468 - v339 + 40;
              v603 = v468 - v339 - v602 + 47;
              if (v603 < 0x78)
                goto LABEL_495;
              if (v601 >= v479 - 1)
                v601 = v479 - 1;
              if (v66 >= (int8x8_t *)((char *)v472 + ((v468 - v339 - v601 + 47) >> 3) + 1)
                || (unint64_t)v472 >= v825)
              {
                v605 = (v603 >> 3) + 1;
                v606 = (int8x8_t)(*(_QWORD *)&v600 + (v605 & 0x3FFFFFF8));
                v607 = (uint8x8_t *)((char *)v472 + (v605 & 0x3FFFFFF8));
                v608 = v476 - 8 * (v605 & 0x3FFFFFF8);
                v609 = vdupq_n_s32(v476);
                v610 = vaddq_s32(v609, (int32x4_t)xmmword_208F3A6A0);
                v611 = vaddq_s32(v609, (int32x4_t)xmmword_208F3A6B0);
                v612 = 0uLL;
                v613 = (int32x4_t)v471;
                v614 = (int8x16_t)(unint64_t)v470;
                v615 = v605 & 0x3FFFFFF8;
                v616 = 0uLL;
                v617 = 0uLL;
                v618 = 0uLL;
                do
                {
                  v613 = vaddq_s32(v613, v67);
                  v619 = *v472++;
                  v612 = vaddq_s32(v612, v67);
                  v620 = vmovl_u8(v619);
                  v621 = vmovl_high_u16(v620);
                  v622.i64[0] = v621.u32[2];
                  v622.i64[1] = v621.u32[3];
                  v623 = v622;
                  v622.i64[0] = v621.u32[0];
                  v622.i64[1] = v621.u32[1];
                  v624 = v622;
                  v625 = vmovl_u16(*(uint16x4_t *)v620.i8);
                  v622.i64[0] = v625.u32[2];
                  v622.i64[1] = v625.u32[3];
                  v626 = v622;
                  v622.i64[0] = v625.u32[0];
                  v622.i64[1] = v625.u32[1];
                  v627 = v622;
                  v622.i64[0] = v610.u32[2];
                  v622.i64[1] = v610.u32[3];
                  v628 = v622;
                  v622.i64[0] = v610.u32[0];
                  v622.i64[1] = v610.u32[1];
                  v629 = v622;
                  v622.i64[0] = v611.u32[2];
                  v622.i64[1] = v611.u32[3];
                  v630 = v622;
                  v622.i64[0] = v611.u32[0];
                  v622.i64[1] = v611.u32[1];
                  v618 = vorrq_s8((int8x16_t)vshlq_u64(v623, v628), v618);
                  v617 = vorrq_s8((int8x16_t)vshlq_u64(v624, v629), v617);
                  v616 = vorrq_s8((int8x16_t)vshlq_u64(v626, v630), v616);
                  v614 = vorrq_s8((int8x16_t)vshlq_u64(v627, v622), v614);
                  *(_QWORD *)&v600 += 8;
                  v611 = vaddq_s32(v611, v68);
                  v610 = vaddq_s32(v610, v68);
                  v615 -= 8;
                }
                while (v615);
                *v66 = v600;
                v631 = vorrq_s8(vorrq_s8(v614, v617), vorrq_s8(v616, v618));
                v470 = vorr_s8(*(int8x8_t *)v631.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v631, v631, 8uLL));
                v471 = vaddvq_s32(vaddq_s32(v613, v612));
                if ((v605 & 0x3FFFFFF8) == v605)
                {
LABEL_498:
                  v666 = ((159 * v469 - 159) >> 8) + 1;
                  v667 = (int8x8_t)(*(_QWORD *)&v470 - (v666 << 56));
                  if (*(_QWORD *)&v470 >= (unint64_t)(v666 << 56))
                  {
                    LODWORD(v666) = a1[3].i32[1] - v666;
                    v175 = 6;
                    v470 = v667;
                  }
                  else
                  {
                    v175 = 5;
                  }
                  v668 = vp8_norm[v666];
                  v171 = (_DWORD)v666 << v668;
                  v172 = (int8x8_t)(*(_QWORD *)&v470 << v668);
                  a1[2] = (int8x8_t)(*(_QWORD *)&v470 << v668);
                  v173 = v471 - v668;
                  goto LABEL_502;
                }
              }
              else
              {
LABEL_495:
                v606 = *v66;
                v607 = v472;
                v608 = v476;
              }
              v664 = (int8x8_t)(*(_QWORD *)&v606 + 1);
              do
              {
                v471 += 8;
                v665 = v607->u8[0];
                v607 = (uint8x8_t *)((char *)v607 + 1);
                *(_QWORD *)&v470 |= (unint64_t)v665 << v608;
                *v66 = v664;
                v608 -= 8;
                ++*(_QWORD *)&v664;
              }
              while (v608 >= v479);
              goto LABEL_498;
            }
            if ((v471 & 0x80000000) != 0)
            {
              v481 = (uint8x8_t *)a1[1];
              v482 = *(_QWORD *)a1 - (_QWORD)v481;
              v483 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
              if (v483)
              {
                if (v482 >= 9)
                  v484 = 9;
                else
                  v484 = *(_QWORD *)a1 - (_QWORD)v481;
                v483(*(_QWORD *)&a1[5], v481, v831, v484);
                v68.i64[0] = 0x3F0000003FLL;
                v68.i64[1] = 0x3F0000003FLL;
                v67.i64[0] = 0x800000008;
                v67.i64[1] = 0x800000008;
                v481 = (uint8x8_t *)v831;
              }
              v485 = 48 - v471;
              v486 = 56 - 8 * v482 - v471;
              if (v486 >= 0)
                v471 += 0x40000000;
              if (8 * v482)
                v487 = 1;
              else
                v487 = v486 <= -1;
              v488 = v486 & ~(v486 >> 31);
              if (!v487 || v485 < v488)
              {
                v118 = v830;
                goto LABEL_506;
              }
              v632 = *v66;
              v633 = v468 - v339 + 40;
              if (v633 >= v488 - 1)
                v634 = v488 - 1;
              else
                v634 = v468 - v339 + 40;
              v635 = v468 - v339 - v634 + 47;
              v118 = v830;
              if (v635 < 0x78)
                goto LABEL_503;
              if (v633 >= v488 - 1)
                v633 = v488 - 1;
              if (v66 < (int8x8_t *)((char *)v481 + ((v468 - v339 - v633 + 47) >> 3) + 1)
                && (unint64_t)v481 < v825)
              {
LABEL_503:
                v638 = *v66;
                v639 = v481;
                v640 = v485;
LABEL_504:
                v669 = (int8x8_t)(*(_QWORD *)&v638 + 1);
                do
                {
                  v471 += 8;
                  v670 = v639->u8[0];
                  v639 = (uint8x8_t *)((char *)v639 + 1);
                  *(_QWORD *)&v470 |= (unint64_t)v670 << v640;
                  *v66 = v669;
                  v640 -= 8;
                  ++*(_QWORD *)&v669;
                }
                while (v640 >= v488);
                goto LABEL_506;
              }
              v637 = (v635 >> 3) + 1;
              v638 = (int8x8_t)(*(_QWORD *)&v632 + (v637 & 0x3FFFFFF8));
              v639 = (uint8x8_t *)((char *)v481 + (v637 & 0x3FFFFFF8));
              v640 = v485 - 8 * (v637 & 0x3FFFFFF8);
              v641 = vdupq_n_s32(v485);
              v642 = vaddq_s32(v641, (int32x4_t)xmmword_208F3A6A0);
              v643 = vaddq_s32(v641, (int32x4_t)xmmword_208F3A6B0);
              v644 = 0uLL;
              v645 = (int32x4_t)v471;
              v646 = (int8x16_t)(unint64_t)v470;
              v647 = v637 & 0x3FFFFFF8;
              v648 = 0uLL;
              v649 = 0uLL;
              v650 = 0uLL;
              do
              {
                v645 = vaddq_s32(v645, v67);
                v651 = *v481++;
                v644 = vaddq_s32(v644, v67);
                v652 = vmovl_u8(v651);
                v653 = vmovl_high_u16(v652);
                v654.i64[0] = v653.u32[2];
                v654.i64[1] = v653.u32[3];
                v655 = v654;
                v654.i64[0] = v653.u32[0];
                v654.i64[1] = v653.u32[1];
                v656 = v654;
                v657 = vmovl_u16(*(uint16x4_t *)v652.i8);
                v654.i64[0] = v657.u32[2];
                v654.i64[1] = v657.u32[3];
                v658 = v654;
                v654.i64[0] = v657.u32[0];
                v654.i64[1] = v657.u32[1];
                v659 = v654;
                v654.i64[0] = v642.u32[2];
                v654.i64[1] = v642.u32[3];
                v660 = v654;
                v654.i64[0] = v642.u32[0];
                v654.i64[1] = v642.u32[1];
                v661 = v654;
                v654.i64[0] = v643.u32[2];
                v654.i64[1] = v643.u32[3];
                v662 = v654;
                v654.i64[0] = v643.u32[0];
                v654.i64[1] = v643.u32[1];
                v650 = vorrq_s8((int8x16_t)vshlq_u64(v655, v660), v650);
                v649 = vorrq_s8((int8x16_t)vshlq_u64(v656, v661), v649);
                v648 = vorrq_s8((int8x16_t)vshlq_u64(v658, v662), v648);
                v646 = vorrq_s8((int8x16_t)vshlq_u64(v659, v654), v646);
                *(_QWORD *)&v632 += 8;
                v643 = vaddq_s32(v643, v68);
                v642 = vaddq_s32(v642, v68);
                v647 -= 8;
              }
              while (v647);
              *v66 = v632;
              v663 = vorrq_s8(vorrq_s8(v646, v649), vorrq_s8(v648, v650));
              v470 = vorr_s8(*(int8x8_t *)v663.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v663, v663, 8uLL));
              v471 = vaddvq_s32(vaddq_s32(v645, v644));
              if ((v637 & 0x3FFFFFF8) != v637)
                goto LABEL_504;
            }
LABEL_506:
            v671 = ((165 * v469 - 165) >> 8) + 1;
            v672 = (int8x8_t)(*(_QWORD *)&v470 - (v671 << 56));
            if (*(_QWORD *)&v470 >= (unint64_t)(v671 << 56))
            {
              LODWORD(v671) = a1[3].i32[1] - v671;
              v673 = 9;
              v470 = v672;
            }
            else
            {
              v673 = 7;
            }
            v674 = vp8_norm[v671];
            v675 = (_DWORD)v671 << v674;
            v676 = (int8x8_t)(*(_QWORD *)&v470 << v674);
            a1[2] = v676;
            v677 = v471 - v674;
            a1[3].i32[0] = v471 - v674;
            a1[3].i32[1] = (_DWORD)v671 << v674;
            if ((int)(v471 - v674) >= 0)
              goto LABEL_544;
            v678 = (uint8x8_t *)a1[1];
            v679 = *(_QWORD *)a1 - (_QWORD)v678;
            v680 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
            if (v680)
            {
              if (v679 >= 9)
                v681 = 9;
              else
                v681 = *(_QWORD *)a1 - (_QWORD)v678;
              v680(*(_QWORD *)&a1[5], v678, v831, v681);
              v118 = v830;
              v68.i64[0] = 0x3F0000003FLL;
              v68.i64[1] = 0x3F0000003FLL;
              v67.i64[0] = 0x800000008;
              v67.i64[1] = 0x800000008;
              v678 = (uint8x8_t *)v831;
            }
            v682 = 48 - v677;
            v683 = 56 - 8 * v679 - v677;
            if (v683 >= 0)
              v677 += 0x40000000;
            v684 = 8 * v679 || v683 <= -1;
            v685 = v683 & ~(v683 >> 31);
            if (!v684 || v682 < v685)
              goto LABEL_544;
            v687 = *v66;
            v688 = v674 - v471 + 40;
            if (v688 >= v685 - 1)
              v689 = v685 - 1;
            else
              v689 = v674 - v471 + 40;
            v690 = v674 - v471 - v689 + 47;
            if (v690 < 0x78)
              goto LABEL_541;
            if (v688 >= v685 - 1)
              v688 = v685 - 1;
            if (v66 >= (int8x8_t *)((char *)v678 + ((v674 - v471 - v688 + 47) >> 3) + 1)
              || (unint64_t)v678 >= v825)
            {
              v692 = (v690 >> 3) + 1;
              v693 = (int8x8_t)(*(_QWORD *)&v687 + (v692 & 0x3FFFFFF8));
              v694 = (uint8x8_t *)((char *)v678 + (v692 & 0x3FFFFFF8));
              v695 = v682 - 8 * (v692 & 0x3FFFFFF8);
              v696 = vdupq_n_s32(v682);
              v697 = vaddq_s32(v696, (int32x4_t)xmmword_208F3A6A0);
              v698 = vaddq_s32(v696, (int32x4_t)xmmword_208F3A6B0);
              v699 = 0uLL;
              v700 = (int32x4_t)v677;
              v701 = (int8x16_t)(unint64_t)v676;
              v702 = v692 & 0x3FFFFFF8;
              v703 = 0uLL;
              v704 = 0uLL;
              v705 = 0uLL;
              do
              {
                v700 = vaddq_s32(v700, v67);
                v706 = *v678++;
                v699 = vaddq_s32(v699, v67);
                v707 = vmovl_u8(v706);
                v708 = vmovl_high_u16(v707);
                v709.i64[0] = v708.u32[2];
                v709.i64[1] = v708.u32[3];
                v710 = v709;
                v709.i64[0] = v708.u32[0];
                v709.i64[1] = v708.u32[1];
                v711 = v709;
                v712 = vmovl_u16(*(uint16x4_t *)v707.i8);
                v709.i64[0] = v712.u32[2];
                v709.i64[1] = v712.u32[3];
                v713 = v709;
                v709.i64[0] = v712.u32[0];
                v709.i64[1] = v712.u32[1];
                v714 = v709;
                v709.i64[0] = v697.u32[2];
                v709.i64[1] = v697.u32[3];
                v715 = v709;
                v709.i64[0] = v697.u32[0];
                v709.i64[1] = v697.u32[1];
                v716 = v709;
                v709.i64[0] = v698.u32[2];
                v709.i64[1] = v698.u32[3];
                v717 = v709;
                v709.i64[0] = v698.u32[0];
                v709.i64[1] = v698.u32[1];
                v705 = vorrq_s8((int8x16_t)vshlq_u64(v710, v715), v705);
                v704 = vorrq_s8((int8x16_t)vshlq_u64(v711, v716), v704);
                v703 = vorrq_s8((int8x16_t)vshlq_u64(v713, v717), v703);
                v701 = vorrq_s8((int8x16_t)vshlq_u64(v714, v709), v701);
                *(_QWORD *)&v687 += 8;
                v698 = vaddq_s32(v698, v68);
                v697 = vaddq_s32(v697, v68);
                v702 -= 8;
              }
              while (v702);
              *v66 = v687;
              v718 = vorrq_s8(vorrq_s8(v701, v704), vorrq_s8(v703, v705));
              v676 = vorr_s8(*(int8x8_t *)v718.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v718, v718, 8uLL));
              v677 = vaddvq_s32(vaddq_s32(v700, v699));
              if ((v692 & 0x3FFFFFF8) == v692)
              {
LABEL_544:
                v721 = ((145 * v675 - 145) >> 8) + 1;
                v722 = (int8x8_t)(*(_QWORD *)&v676 - (v721 << 56));
                if (*(_QWORD *)&v676 >= (unint64_t)(v721 << 56))
                {
                  LODWORD(v721) = a1[3].i32[1] - v721;
                  v723 = 1;
                  v676 = v722;
                }
                else
                {
                  v723 = 0;
                }
                v724 = vp8_norm[v721];
                v171 = (_DWORD)v721 << v724;
                v172 = (int8x8_t)(*(_QWORD *)&v676 << v724);
                a1[2] = (int8x8_t)(*(_QWORD *)&v676 << v724);
                v173 = v677 - v724;
                a1[3].i32[0] = v677 - v724;
                a1[3].i32[1] = (_DWORD)v721 << v724;
                v175 = v723 + v673;
                goto LABEL_548;
              }
            }
            else
            {
LABEL_541:
              v693 = *v66;
              v694 = v678;
              v695 = v682;
            }
            v719 = (int8x8_t)(*(_QWORD *)&v693 + 1);
            do
            {
              v677 += 8;
              v720 = v694->u8[0];
              v694 = (uint8x8_t *)((char *)v694 + 1);
              *(_QWORD *)&v676 |= (unint64_t)v720 << v695;
              *v66 = v719;
              v695 -= 8;
              ++*(_QWORD *)&v719;
            }
            while (v695 >= v685);
            goto LABEL_544;
          }
          v351 = v7[8];
          if ((v339 & 0x80000000) != 0)
          {
            v352 = (uint8x8_t *)a1[1];
            v353 = *(_QWORD *)a1 - (_QWORD)v352;
            v354 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
            if (v354)
            {
              if (v353 >= 9)
                v355 = 9;
              else
                v355 = *(_QWORD *)a1 - (_QWORD)v352;
              v354(*(_QWORD *)&a1[5], v352, v831, v355);
              v118 = v830;
              v68.i64[0] = 0x3F0000003FLL;
              v68.i64[1] = 0x3F0000003FLL;
              v67.i64[0] = 0x800000008;
              v67.i64[1] = 0x800000008;
              v352 = (uint8x8_t *)v831;
            }
            v356 = 48 - v339;
            v357 = 56 - 8 * v353 - v339;
            if (v357 >= 0)
              v339 += 0x40000000;
            v358 = 8 * v353 || v357 <= -1;
            v359 = v357 & ~(v357 >> 31);
            if (v358 && v356 >= v359)
            {
              v425 = *v66;
              v426 = v336 - v227 + 40;
              if (v426 >= v359 - 1)
                v427 = v359 - 1;
              else
                v427 = v336 - v227 + 40;
              v428 = v336 - v227 - v427 + 47;
              if (v428 < 0x78)
                goto LABEL_376;
              if (v426 >= v359 - 1)
                v426 = v359 - 1;
              if (v66 < (int8x8_t *)((char *)v352 + ((v336 - v227 - v426 + 47) >> 3) + 1)
                && (unint64_t)v352 < v825)
              {
LABEL_376:
                v431 = *v66;
                v432 = v352;
                v433 = v356;
LABEL_377:
                v490 = (int8x8_t)(*(_QWORD *)&v431 + 1);
                do
                {
                  v339 += 8;
                  v491 = v432->u8[0];
                  v432 = (uint8x8_t *)((char *)v432 + 1);
                  *(_QWORD *)&v338 |= (unint64_t)v491 << v433;
                  *v66 = v490;
                  v433 -= 8;
                  ++*(_QWORD *)&v490;
                }
                while (v433 >= v359);
                goto LABEL_379;
              }
              v430 = (v428 >> 3) + 1;
              v431 = (int8x8_t)(*(_QWORD *)&v425 + (v430 & 0x3FFFFFF8));
              v432 = (uint8x8_t *)((char *)v352 + (v430 & 0x3FFFFFF8));
              v433 = v356 - 8 * (v430 & 0x3FFFFFF8);
              v434 = vdupq_n_s32(v356);
              v435 = vaddq_s32(v434, (int32x4_t)xmmword_208F3A6A0);
              v436 = vaddq_s32(v434, (int32x4_t)xmmword_208F3A6B0);
              v437 = 0uLL;
              v438 = (int32x4_t)v339;
              v439 = (int8x16_t)(unint64_t)v338;
              v440 = v430 & 0x3FFFFFF8;
              v441 = 0uLL;
              v442 = 0uLL;
              v443 = 0uLL;
              do
              {
                v438 = vaddq_s32(v438, v67);
                v444 = *v352++;
                v437 = vaddq_s32(v437, v67);
                v445 = vmovl_u8(v444);
                v446 = vmovl_high_u16(v445);
                v447.i64[0] = v446.u32[2];
                v447.i64[1] = v446.u32[3];
                v448 = v447;
                v447.i64[0] = v446.u32[0];
                v447.i64[1] = v446.u32[1];
                v449 = v447;
                v450 = vmovl_u16(*(uint16x4_t *)v445.i8);
                v447.i64[0] = v450.u32[2];
                v447.i64[1] = v450.u32[3];
                v451 = v447;
                v447.i64[0] = v450.u32[0];
                v447.i64[1] = v450.u32[1];
                v452 = v447;
                v447.i64[0] = v435.u32[2];
                v447.i64[1] = v435.u32[3];
                v453 = v447;
                v447.i64[0] = v435.u32[0];
                v447.i64[1] = v435.u32[1];
                v454 = v447;
                v447.i64[0] = v436.u32[2];
                v447.i64[1] = v436.u32[3];
                v455 = v447;
                v447.i64[0] = v436.u32[0];
                v447.i64[1] = v436.u32[1];
                v443 = vorrq_s8((int8x16_t)vshlq_u64(v448, v453), v443);
                v442 = vorrq_s8((int8x16_t)vshlq_u64(v449, v454), v442);
                v441 = vorrq_s8((int8x16_t)vshlq_u64(v451, v455), v441);
                v439 = vorrq_s8((int8x16_t)vshlq_u64(v452, v447), v439);
                *(_QWORD *)&v425 += 8;
                v436 = vaddq_s32(v436, v68);
                v435 = vaddq_s32(v435, v68);
                v440 -= 8;
              }
              while (v440);
              *v66 = v425;
              v456 = vorrq_s8(vorrq_s8(v439, v442), vorrq_s8(v441, v443));
              v338 = vorr_s8(*(int8x8_t *)v456.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v456, v456, 8uLL));
              v339 = vaddvq_s32(vaddq_s32(v438, v437));
              if ((v430 & 0x3FFFFFF8) != v430)
                goto LABEL_377;
            }
          }
LABEL_379:
          v492 = ((v340 * v351) >> 8) + 1;
          v493 = (int8x8_t)(*(_QWORD *)&v338 - (v492 << 56));
          if (*(_QWORD *)&v338 >= (unint64_t)(v492 << 56))
          {
            LODWORD(v492) = a1[3].i32[1] - v492;
            v494 = 1;
            v338 = v493;
          }
          else
          {
            v494 = 0;
          }
          v495 = vp8_norm[v492];
          v496 = (_DWORD)v492 << v495;
          v497 = (int8x8_t)(*(_QWORD *)&v338 << v495);
          v498 = v339 - v495;
          a1[2] = v497;
          a1[3].i32[0] = v339 - v495;
          a1[3].i32[1] = (_DWORD)v492 << v495;
          v499 = v7[v494 + 9];
          if (((v339 - v495) & 0x80000000) == 0)
            goto LABEL_417;
          v500 = (uint8x8_t *)a1[1];
          v501 = *(_QWORD *)a1 - (_QWORD)v500;
          v502 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
          if (v502)
          {
            if (v501 >= 9)
              v503 = 9;
            else
              v503 = *(_QWORD *)a1 - (_QWORD)v500;
            v502(*(_QWORD *)&a1[5], v500, v831, v503);
            v118 = v830;
            v68.i64[0] = 0x3F0000003FLL;
            v68.i64[1] = 0x3F0000003FLL;
            v67.i64[0] = 0x800000008;
            v67.i64[1] = 0x800000008;
            v500 = (uint8x8_t *)v831;
          }
          v504 = 48 - v498;
          v505 = 56 - 8 * v501 - v498;
          if (v505 >= 0)
            v498 += 0x40000000;
          v506 = 8 * v501 || v505 <= -1;
          v507 = v505 & ~(v505 >> 31);
          if (!v506 || v504 < v507)
            goto LABEL_417;
          v509 = *v66;
          v510 = v495 - v339 + 40;
          if (v510 >= v507 - 1)
            v511 = v507 - 1;
          else
            v511 = v495 - v339 + 40;
          v512 = v495 - v339 - v511 + 47;
          if (v512 < 0x78)
            goto LABEL_414;
          if (v510 >= v507 - 1)
            v510 = v507 - 1;
          if (v66 >= (int8x8_t *)((char *)v500 + ((v495 - v339 - v510 + 47) >> 3) + 1)
            || (unint64_t)v500 >= v825)
          {
            v514 = (v512 >> 3) + 1;
            v515 = (int8x8_t)(*(_QWORD *)&v509 + (v514 & 0x3FFFFFF8));
            v516 = (uint8x8_t *)((char *)v500 + (v514 & 0x3FFFFFF8));
            v517 = v504 - 8 * (v514 & 0x3FFFFFF8);
            v518 = vdupq_n_s32(v504);
            v519 = vaddq_s32(v518, (int32x4_t)xmmword_208F3A6A0);
            v520 = vaddq_s32(v518, (int32x4_t)xmmword_208F3A6B0);
            v521 = 0uLL;
            v522 = (int32x4_t)v498;
            v523 = (int8x16_t)(unint64_t)v497;
            v524 = v514 & 0x3FFFFFF8;
            v525 = 0uLL;
            v526 = 0uLL;
            v527 = 0uLL;
            do
            {
              v522 = vaddq_s32(v522, v67);
              v528 = *v500++;
              v521 = vaddq_s32(v521, v67);
              v529 = vmovl_u8(v528);
              v530 = vmovl_high_u16(v529);
              v531.i64[0] = v530.u32[2];
              v531.i64[1] = v530.u32[3];
              v532 = v531;
              v531.i64[0] = v530.u32[0];
              v531.i64[1] = v530.u32[1];
              v533 = v531;
              v534 = vmovl_u16(*(uint16x4_t *)v529.i8);
              v531.i64[0] = v534.u32[2];
              v531.i64[1] = v534.u32[3];
              v535 = v531;
              v531.i64[0] = v534.u32[0];
              v531.i64[1] = v534.u32[1];
              v536 = v531;
              v531.i64[0] = v519.u32[2];
              v531.i64[1] = v519.u32[3];
              v537 = v531;
              v531.i64[0] = v519.u32[0];
              v531.i64[1] = v519.u32[1];
              v538 = v531;
              v531.i64[0] = v520.u32[2];
              v531.i64[1] = v520.u32[3];
              v539 = v531;
              v531.i64[0] = v520.u32[0];
              v531.i64[1] = v520.u32[1];
              v527 = vorrq_s8((int8x16_t)vshlq_u64(v532, v537), v527);
              v526 = vorrq_s8((int8x16_t)vshlq_u64(v533, v538), v526);
              v525 = vorrq_s8((int8x16_t)vshlq_u64(v535, v539), v525);
              v523 = vorrq_s8((int8x16_t)vshlq_u64(v536, v531), v523);
              *(_QWORD *)&v509 += 8;
              v520 = vaddq_s32(v520, v68);
              v519 = vaddq_s32(v519, v68);
              v524 -= 8;
            }
            while (v524);
            *v66 = v509;
            v540 = vorrq_s8(vorrq_s8(v523, v526), vorrq_s8(v525, v527));
            v497 = vorr_s8(*(int8x8_t *)v540.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v540, v540, 8uLL));
            v498 = vaddvq_s32(vaddq_s32(v522, v521));
            if ((v514 & 0x3FFFFFF8) == v514)
            {
LABEL_417:
              v543 = (((v496 - 1) * v499) >> 8) + 1;
              v544 = (int8x8_t)(*(_QWORD *)&v497 - (v543 << 56));
              if (*(_QWORD *)&v497 >= (unint64_t)(v543 << 56))
              {
                LODWORD(v543) = a1[3].i32[1] - v543;
                v545 = 1;
                v497 = v544;
              }
              else
              {
                v545 = 0;
              }
              v546 = vp8_norm[v543];
              v171 = (_DWORD)v543 << v546;
              v172 = (int8x8_t)(*(_QWORD *)&v497 << v546);
              v173 = v498 - v546;
              a1[2] = v172;
              a1[3].i32[0] = v498 - v546;
              a1[3].i32[1] = (_DWORD)v543 << v546;
              v547 = v545 | (2 * v494);
              v548 = *(&kCat3456 + v547);
              v549 = *v548;
              if (!*v548)
              {
                v550 = 0;
LABEL_464:
                v175 = v550 + (8 << v547) + 3;
                goto LABEL_548;
              }
              v550 = 0;
              while ((v173 & 0x80000000) == 0)
              {
LABEL_461:
                v551 = (((v171 - 1) * v549) >> 8) + 1;
                v599 = (int8x8_t)(*(_QWORD *)&v172 - (v551 << 56));
                if (*(_QWORD *)&v172 >= (unint64_t)(v551 << 56))
                {
                  LODWORD(v551) = a1[3].i32[1] - v551;
                  v552 = 1;
                  v172 = v599;
                }
                else
                {
                  v552 = 0;
                }
                v553 = vp8_norm[v551];
                v171 = (_DWORD)v551 << v553;
                *(_QWORD *)&v172 <<= v553;
                v173 -= v553;
                a1[2] = v172;
                a1[3].i32[0] = v173;
                a1[3].i32[1] = (_DWORD)v551 << v553;
                v550 = v552 | (2 * v550);
                v554 = *++v548;
                v549 = v554;
                if (!v554)
                  goto LABEL_464;
              }
              v555 = (uint8x8_t *)a1[1];
              v556 = *(_QWORD *)a1 - (_QWORD)v555;
              v557 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
              if (v557)
              {
                if (v556 >= 9)
                  v558 = 9;
                else
                  v558 = *(_QWORD *)a1 - (_QWORD)v555;
                v557(*(_QWORD *)&a1[5], v555, v831, v558);
                v68.i64[0] = 0x3F0000003FLL;
                v68.i64[1] = 0x3F0000003FLL;
                v67.i64[0] = 0x800000008;
                v67.i64[1] = 0x800000008;
                v555 = (uint8x8_t *)v831;
              }
              v559 = 48 - v173;
              v560 = 56 - v173 - 8 * v556;
              if (v560 < 0)
                v561 = v173;
              else
                v561 = v173 + 0x40000000;
              if (8 * v556)
                v562 = 1;
              else
                v562 = v560 <= -1;
              v563 = v560 & ~(v560 >> 31);
              if (!v562 || v559 < v563)
              {
                v118 = v830;
              }
              else
              {
                v565 = *v66;
                v566 = v563 - 1;
                if (v563 - 1 >= 40 - v173)
                  v567 = 40 - v173;
                else
                  v567 = v563 - 1;
                v568 = 47 - v173 - v567;
                v118 = v830;
                if (v568 < 0x78)
                  goto LABEL_457;
                if (v566 >= 40 - v173)
                  v566 = 40 - v173;
                if (v66 >= (int8x8_t *)((char *)v555 + ((47 - v173 - v566) >> 3) + 1)
                  || (unint64_t)v555 >= v825)
                {
                  v570 = (v568 >> 3) + 1;
                  v571 = (int8x8_t)(*(_QWORD *)&v565 + (v570 & 0x3FFFFFF8));
                  v572 = (uint8x8_t *)((char *)v555 + (v570 & 0x3FFFFFF8));
                  v573 = v559 - 8 * (v570 & 0x3FFFFFF8);
                  v574 = vdupq_n_s32(v559);
                  v575 = vaddq_s32(v574, (int32x4_t)xmmword_208F3A6A0);
                  v576 = vaddq_s32(v574, (int32x4_t)xmmword_208F3A6B0);
                  v577 = 0uLL;
                  v578 = (int32x4_t)v561;
                  v579 = (int8x16_t)(unint64_t)v172;
                  v580 = v570 & 0x3FFFFFF8;
                  v581 = 0uLL;
                  v582 = 0uLL;
                  v583 = 0uLL;
                  do
                  {
                    v578 = vaddq_s32(v578, v67);
                    v584 = *v555++;
                    v577 = vaddq_s32(v577, v67);
                    v585 = vmovl_u8(v584);
                    v586 = vmovl_high_u16(v585);
                    v587.i64[0] = v586.u32[2];
                    v587.i64[1] = v586.u32[3];
                    v588 = v587;
                    v587.i64[0] = v586.u32[0];
                    v587.i64[1] = v586.u32[1];
                    v589 = v587;
                    v590 = vmovl_u16(*(uint16x4_t *)v585.i8);
                    v587.i64[0] = v590.u32[2];
                    v587.i64[1] = v590.u32[3];
                    v591 = v587;
                    v587.i64[0] = v590.u32[0];
                    v587.i64[1] = v590.u32[1];
                    v592 = v587;
                    v587.i64[0] = v575.u32[2];
                    v587.i64[1] = v575.u32[3];
                    v593 = v587;
                    v587.i64[0] = v575.u32[0];
                    v587.i64[1] = v575.u32[1];
                    v594 = v587;
                    v587.i64[0] = v576.u32[2];
                    v587.i64[1] = v576.u32[3];
                    v595 = v587;
                    v587.i64[0] = v576.u32[0];
                    v587.i64[1] = v576.u32[1];
                    v583 = vorrq_s8((int8x16_t)vshlq_u64(v588, v593), v583);
                    v582 = vorrq_s8((int8x16_t)vshlq_u64(v589, v594), v582);
                    v581 = vorrq_s8((int8x16_t)vshlq_u64(v591, v595), v581);
                    v579 = vorrq_s8((int8x16_t)vshlq_u64(v592, v587), v579);
                    *(_QWORD *)&v565 += 8;
                    v576 = vaddq_s32(v576, v68);
                    v575 = vaddq_s32(v575, v68);
                    v580 -= 8;
                  }
                  while (v580);
                  *v66 = v565;
                  v596 = vorrq_s8(vorrq_s8(v579, v582), vorrq_s8(v581, v583));
                  v172 = vorr_s8(*(int8x8_t *)v596.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v596, v596, 8uLL));
                  v561 = vaddvq_s32(vaddq_s32(v578, v577));
                  if ((v570 & 0x3FFFFFF8) == v570)
                    goto LABEL_460;
                }
                else
                {
LABEL_457:
                  v571 = *v66;
                  v572 = v555;
                  v573 = 48 - v173;
                }
                v597 = (int8x8_t)(*(_QWORD *)&v571 + 1);
                do
                {
                  v561 += 8;
                  v598 = v572->u8[0];
                  v572 = (uint8x8_t *)((char *)v572 + 1);
                  *(_QWORD *)&v172 |= (unint64_t)v598 << v573;
                  *v66 = v597;
                  v573 -= 8;
                  ++*(_QWORD *)&v597;
                }
                while (v573 >= v563);
              }
LABEL_460:
              v173 = v561;
              goto LABEL_461;
            }
          }
          else
          {
LABEL_414:
            v515 = *v66;
            v516 = v500;
            v517 = v504;
          }
          v541 = (int8x8_t)(*(_QWORD *)&v515 + 1);
          do
          {
            v498 += 8;
            v542 = v516->u8[0];
            v516 = (uint8x8_t *)((char *)v516 + 1);
            *(_QWORD *)&v497 |= (unint64_t)v542 << v517;
            *v66 = v541;
            v517 -= 8;
            ++*(_QWORD *)&v541;
          }
          while (v517 >= v507);
          goto LABEL_417;
        }
      }
      else
      {
LABEL_244:
        v287 = *v66;
        v288 = v240;
        v289 = v244;
      }
      v330 = (int8x8_t)(*(_QWORD *)&v287 + 1);
      do
      {
        v227 += 8;
        v331 = v288->u8[0];
        v288 = (uint8x8_t *)((char *)v288 + 1);
        *(_QWORD *)&v226 |= (unint64_t)v331 << v289;
        *v66 = v330;
        v289 -= 8;
        ++*(_QWORD *)&v330;
      }
      while (v289 >= v247);
      goto LABEL_247;
    }
    v229 = v7[4];
    if ((v227 & 0x80000000) != 0)
    {
      v230 = (uint8x8_t *)a1[1];
      v231 = *(_QWORD *)a1 - (_QWORD)v230;
      v232 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
      if (v232)
      {
        if (v231 >= 9)
          v233 = 9;
        else
          v233 = *(_QWORD *)a1 - (_QWORD)v230;
        v232(*(_QWORD *)&a1[5], v230, v831, v233);
        v118 = v830;
        v68.i64[0] = 0x3F0000003FLL;
        v68.i64[1] = 0x3F0000003FLL;
        v67.i64[0] = 0x800000008;
        v67.i64[1] = 0x800000008;
        v230 = (uint8x8_t *)v831;
      }
      v234 = 48 - v227;
      v235 = 56 - 8 * v231 - v227;
      if (v235 >= 0)
        v227 += 0x40000000;
      v236 = 8 * v231 || v235 <= -1;
      v237 = v235 & ~(v235 >> 31);
      if (v236 && v234 >= v237)
      {
        v249 = *v66;
        v250 = v224 - v173 + 40;
        if (v250 >= v237 - 1)
          v251 = v237 - 1;
        else
          v251 = v224 - v173 + 40;
        v252 = v224 - v173 - v251 + 47;
        if (v252 < 0x78)
          goto LABEL_220;
        if (v250 >= v237 - 1)
          v250 = v237 - 1;
        if (v66 < (int8x8_t *)((char *)v230 + ((v224 - v173 - v250 + 47) >> 3) + 1)
          && (unint64_t)v230 < v825)
        {
LABEL_220:
          v255 = *v66;
          v256 = v230;
          v257 = v234;
LABEL_221:
          v313 = (int8x8_t)(*(_QWORD *)&v255 + 1);
          do
          {
            v227 += 8;
            v314 = v256->u8[0];
            v256 = (uint8x8_t *)((char *)v256 + 1);
            *(_QWORD *)&v226 |= (unint64_t)v314 << v257;
            *v66 = v313;
            v257 -= 8;
            ++*(_QWORD *)&v313;
          }
          while (v257 >= v237);
          goto LABEL_223;
        }
        v254 = (v252 >> 3) + 1;
        v255 = (int8x8_t)(*(_QWORD *)&v249 + (v254 & 0x3FFFFFF8));
        v256 = (uint8x8_t *)((char *)v230 + (v254 & 0x3FFFFFF8));
        v257 = v234 - 8 * (v254 & 0x3FFFFFF8);
        v258 = vdupq_n_s32(v234);
        v259 = vaddq_s32(v258, (int32x4_t)xmmword_208F3A6A0);
        v260 = vaddq_s32(v258, (int32x4_t)xmmword_208F3A6B0);
        v261 = 0uLL;
        v262 = (int32x4_t)v227;
        v263 = (int8x16_t)(unint64_t)v226;
        v264 = v254 & 0x3FFFFFF8;
        v265 = 0uLL;
        v266 = 0uLL;
        v267 = 0uLL;
        do
        {
          v262 = vaddq_s32(v262, v67);
          v268 = *v230++;
          v261 = vaddq_s32(v261, v67);
          v269 = vmovl_u8(v268);
          v270 = vmovl_high_u16(v269);
          v271.i64[0] = v270.u32[2];
          v271.i64[1] = v270.u32[3];
          v272 = v271;
          v271.i64[0] = v270.u32[0];
          v271.i64[1] = v270.u32[1];
          v273 = v271;
          v274 = vmovl_u16(*(uint16x4_t *)v269.i8);
          v271.i64[0] = v274.u32[2];
          v271.i64[1] = v274.u32[3];
          v275 = v271;
          v271.i64[0] = v274.u32[0];
          v271.i64[1] = v274.u32[1];
          v276 = v271;
          v271.i64[0] = v259.u32[2];
          v271.i64[1] = v259.u32[3];
          v277 = v271;
          v271.i64[0] = v259.u32[0];
          v271.i64[1] = v259.u32[1];
          v278 = v271;
          v271.i64[0] = v260.u32[2];
          v271.i64[1] = v260.u32[3];
          v279 = v271;
          v271.i64[0] = v260.u32[0];
          v271.i64[1] = v260.u32[1];
          v267 = vorrq_s8((int8x16_t)vshlq_u64(v272, v277), v267);
          v266 = vorrq_s8((int8x16_t)vshlq_u64(v273, v278), v266);
          v265 = vorrq_s8((int8x16_t)vshlq_u64(v275, v279), v265);
          v263 = vorrq_s8((int8x16_t)vshlq_u64(v276, v271), v263);
          *(_QWORD *)&v249 += 8;
          v260 = vaddq_s32(v260, v68);
          v259 = vaddq_s32(v259, v68);
          v264 -= 8;
        }
        while (v264);
        *v66 = v249;
        v280 = vorrq_s8(vorrq_s8(v263, v266), vorrq_s8(v265, v267));
        v226 = vorr_s8(*(int8x8_t *)v280.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v280, v280, 8uLL));
        v227 = vaddvq_s32(vaddq_s32(v262, v261));
        if ((v254 & 0x3FFFFFF8) != v254)
          goto LABEL_221;
      }
    }
LABEL_223:
    v315 = ((v228 * v229) >> 8) + 1;
    v316 = v315 << 56;
    v317 = v226;
    v318 = (int8x8_t)(*(_QWORD *)&v226 - (v315 << 56));
    if (*(_QWORD *)&v226 >= (unint64_t)(v315 << 56))
    {
      LODWORD(v315) = a1[3].i32[1] - v315;
      v317 = v318;
    }
    v319 = vp8_norm[v315];
    v171 = (_DWORD)v315 << v319;
    v172 = (int8x8_t)(*(_QWORD *)&v317 << v319);
    a1[2] = (int8x8_t)(*(_QWORD *)&v317 << v319);
    v173 = v227 - v319;
    a1[3].i32[0] = v227 - v319;
    a1[3].i32[1] = (_DWORD)v315 << v319;
    if (*(_QWORD *)&v226 < v316)
    {
      v174 = 2;
      v175 = 2;
      goto LABEL_549;
    }
    v320 = v7[5];
    if ((v173 & 0x80000000) == 0)
      goto LABEL_332;
    v321 = (uint8x8_t *)a1[1];
    v322 = *(_QWORD *)a1 - (_QWORD)v321;
    v323 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
    if (v323)
    {
      if (v322 >= 9)
        v324 = 9;
      else
        v324 = *(_QWORD *)a1 - (_QWORD)v321;
      v323(*(_QWORD *)&a1[5], v321, v831, v324);
      v68.i64[0] = 0x3F0000003FLL;
      v68.i64[1] = 0x3F0000003FLL;
      v67.i64[0] = 0x800000008;
      v67.i64[1] = 0x800000008;
      v321 = (uint8x8_t *)v831;
    }
    v325 = 48 - v173;
    v326 = 56 - 8 * v322 - v173;
    if (v326 >= 0)
      v173 += 0x40000000;
    if (8 * v322)
      v327 = 1;
    else
      v327 = v326 <= -1;
    v328 = v326 & ~(v326 >> 31);
    if (!v327 || v325 < v328)
    {
      v118 = v830;
      goto LABEL_332;
    }
    v361 = *v66;
    v362 = v319 - v227 + 40;
    if (v362 >= v328 - 1)
      v363 = v328 - 1;
    else
      v363 = v319 - v227 + 40;
    v364 = v319 - v227 - v363 + 47;
    v118 = v830;
    if (v364 < 0x78)
      goto LABEL_329;
    if (v362 >= v328 - 1)
      v362 = v328 - 1;
    if (v66 < (int8x8_t *)((char *)v321 + ((v319 - v227 - v362 + 47) >> 3) + 1) && (unint64_t)v321 < v825)
    {
LABEL_329:
      v367 = *v66;
      v368 = v321;
      v369 = v325;
LABEL_330:
      v457 = (int8x8_t)(*(_QWORD *)&v367 + 1);
      do
      {
        v173 += 8;
        v458 = v368->u8[0];
        v368 = (uint8x8_t *)((char *)v368 + 1);
        *(_QWORD *)&v172 |= (unint64_t)v458 << v369;
        *v66 = v457;
        v369 -= 8;
        ++*(_QWORD *)&v457;
      }
      while (v369 >= v328);
      goto LABEL_332;
    }
    v366 = (v364 >> 3) + 1;
    v367 = (int8x8_t)(*(_QWORD *)&v361 + (v366 & 0x3FFFFFF8));
    v368 = (uint8x8_t *)((char *)v321 + (v366 & 0x3FFFFFF8));
    v369 = v325 - 8 * (v366 & 0x3FFFFFF8);
    v370 = vdupq_n_s32(v325);
    v371 = vaddq_s32(v370, (int32x4_t)xmmword_208F3A6A0);
    v372 = vaddq_s32(v370, (int32x4_t)xmmword_208F3A6B0);
    v373 = 0uLL;
    v374 = (int32x4_t)v173;
    v375 = (int8x16_t)(unint64_t)v172;
    v376 = v366 & 0x3FFFFFF8;
    v377 = 0uLL;
    v378 = 0uLL;
    v379 = 0uLL;
    do
    {
      v374 = vaddq_s32(v374, v67);
      v380 = *v321++;
      v373 = vaddq_s32(v373, v67);
      v381 = vmovl_u8(v380);
      v382 = vmovl_high_u16(v381);
      v383.i64[0] = v382.u32[2];
      v383.i64[1] = v382.u32[3];
      v384 = v383;
      v383.i64[0] = v382.u32[0];
      v383.i64[1] = v382.u32[1];
      v385 = v383;
      v386 = vmovl_u16(*(uint16x4_t *)v381.i8);
      v383.i64[0] = v386.u32[2];
      v383.i64[1] = v386.u32[3];
      v387 = v383;
      v383.i64[0] = v386.u32[0];
      v383.i64[1] = v386.u32[1];
      v388 = v383;
      v383.i64[0] = v371.u32[2];
      v383.i64[1] = v371.u32[3];
      v389 = v383;
      v383.i64[0] = v371.u32[0];
      v383.i64[1] = v371.u32[1];
      v390 = v383;
      v383.i64[0] = v372.u32[2];
      v383.i64[1] = v372.u32[3];
      v391 = v383;
      v383.i64[0] = v372.u32[0];
      v383.i64[1] = v372.u32[1];
      v379 = vorrq_s8((int8x16_t)vshlq_u64(v384, v389), v379);
      v378 = vorrq_s8((int8x16_t)vshlq_u64(v385, v390), v378);
      v377 = vorrq_s8((int8x16_t)vshlq_u64(v387, v391), v377);
      v375 = vorrq_s8((int8x16_t)vshlq_u64(v388, v383), v375);
      *(_QWORD *)&v361 += 8;
      v372 = vaddq_s32(v372, v68);
      v371 = vaddq_s32(v371, v68);
      v376 -= 8;
    }
    while (v376);
    *v66 = v361;
    v392 = vorrq_s8(vorrq_s8(v375, v378), vorrq_s8(v377, v379));
    v172 = vorr_s8(*(int8x8_t *)v392.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v392, v392, 8uLL));
    v173 = vaddvq_s32(vaddq_s32(v374, v373));
    if ((v366 & 0x3FFFFFF8) != v366)
      goto LABEL_330;
LABEL_332:
    v459 = (((v171 - 1) * v320) >> 8) + 1;
    v460 = (int8x8_t)(*(_QWORD *)&v172 - (v459 << 56));
    if (*(_QWORD *)&v172 >= (unint64_t)(v459 << 56))
    {
      LODWORD(v459) = a1[3].i32[1] - v459;
      v175 = 4;
      v172 = v460;
    }
    else
    {
      v175 = 3;
    }
    v461 = vp8_norm[v459];
    v171 = (_DWORD)v459 << v461;
    *(_QWORD *)&v172 <<= v461;
    a1[2] = v172;
    v173 -= v461;
LABEL_502:
    a1[3].i32[0] = v173;
    a1[3].i32[1] = v171;
LABEL_548:
    v174 = 2;
LABEL_549:
    v725 = kBands[v118];
    v726 = kZigzag[v828];
    if ((v173 & 0x80000000) == 0)
    {
      v727 = (v171 + 1) >> 1;
      v728 = (int8x8_t)(*(_QWORD *)&v172 - (v727 << 56));
      if (*(_QWORD *)&v172 < (unint64_t)(v727 << 56))
        goto LABEL_552;
LABEL_551:
      LODWORD(v727) = a1[3].i32[1] - v727;
      v175 = -v175;
      v172 = v728;
      goto LABEL_552;
    }
    v773 = (uint8x8_t *)a1[1];
    v774 = *(_QWORD *)a1 - (_QWORD)v773;
    v775 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
    if (v775)
    {
      if (v774 >= 9)
        v776 = 9;
      else
        v776 = *(_QWORD *)a1 - (_QWORD)v773;
      v777 = v174;
      v775(*(_QWORD *)&a1[5], v773, v831, v776);
      v174 = v777;
      v118 = v830;
      v68.i64[0] = 0x3F0000003FLL;
      v68.i64[1] = 0x3F0000003FLL;
      v67.i64[0] = 0x800000008;
      v67.i64[1] = 0x800000008;
      v773 = (uint8x8_t *)v831;
    }
    v778 = 56 - v173 - 8 * v774;
    if (v778 < 0)
      v779 = v173;
    else
      v779 = v173 + 0x40000000;
    if (8 * v774)
      v780 = 1;
    else
      v780 = v778 <= -1;
    if (v780)
    {
      v781 = 48 - v173;
      v782 = v778 & ~(v778 >> 31);
      if (48 - v173 >= v782)
      {
        v783 = *v66;
        v784 = v782 - 1;
        if (v782 - 1 >= 40 - v173)
          v785 = 40 - v173;
        else
          v785 = v782 - 1;
        v786 = 47 - v173 - v785;
        if (v786 < 0x78)
          goto LABEL_611;
        if (v784 >= 40 - v173)
          v784 = 40 - v173;
        if (v66 < (int8x8_t *)((char *)v773 + ((47 - v173 - v784) >> 3) + 1)
          && (unint64_t)v773 < v825)
        {
LABEL_611:
          v789 = *v66;
          v790 = v773;
          v791 = 48 - v173;
LABEL_612:
          v815 = (int8x8_t)(*(_QWORD *)&v789 + 1);
          do
          {
            v779 += 8;
            v816 = v790->u8[0];
            v790 = (uint8x8_t *)((char *)v790 + 1);
            *(_QWORD *)&v172 |= (unint64_t)v816 << v791;
            *v66 = v815;
            v791 -= 8;
            ++*(_QWORD *)&v815;
          }
          while (v791 >= v782);
          goto LABEL_614;
        }
        v788 = (v786 >> 3) + 1;
        v789 = (int8x8_t)(*(_QWORD *)&v783 + (v788 & 0x3FFFFFF8));
        v790 = (uint8x8_t *)((char *)v773 + (v788 & 0x3FFFFFF8));
        v791 = v781 - 8 * (v788 & 0x3FFFFFF8);
        v792 = vdupq_n_s32(v781);
        v793 = vaddq_s32(v792, (int32x4_t)xmmword_208F3A6A0);
        v794 = vaddq_s32(v792, (int32x4_t)xmmword_208F3A6B0);
        v795 = 0uLL;
        v796 = (int32x4_t)v779;
        v797 = (int8x16_t)(unint64_t)v172;
        v798 = v788 & 0x3FFFFFF8;
        v799 = 0uLL;
        v800 = 0uLL;
        v801 = 0uLL;
        do
        {
          v796 = vaddq_s32(v796, v67);
          v802 = *v773++;
          v795 = vaddq_s32(v795, v67);
          v803 = vmovl_u8(v802);
          v804 = vmovl_high_u16(v803);
          v805.i64[0] = v804.u32[2];
          v805.i64[1] = v804.u32[3];
          v806 = v805;
          v805.i64[0] = v804.u32[0];
          v805.i64[1] = v804.u32[1];
          v807 = v805;
          v808 = vmovl_u16(*(uint16x4_t *)v803.i8);
          v805.i64[0] = v808.u32[2];
          v805.i64[1] = v808.u32[3];
          v809 = v805;
          v805.i64[0] = v808.u32[0];
          v805.i64[1] = v808.u32[1];
          v810 = v805;
          v805.i64[0] = v793.u32[2];
          v805.i64[1] = v793.u32[3];
          v811 = v805;
          v805.i64[0] = v793.u32[0];
          v805.i64[1] = v793.u32[1];
          v812 = v805;
          v805.i64[0] = v794.u32[2];
          v805.i64[1] = v794.u32[3];
          v813 = v805;
          v805.i64[0] = v794.u32[0];
          v805.i64[1] = v794.u32[1];
          v801 = vorrq_s8((int8x16_t)vshlq_u64(v806, v811), v801);
          v800 = vorrq_s8((int8x16_t)vshlq_u64(v807, v812), v800);
          v799 = vorrq_s8((int8x16_t)vshlq_u64(v809, v813), v799);
          v797 = vorrq_s8((int8x16_t)vshlq_u64(v810, v805), v797);
          *(_QWORD *)&v783 += 8;
          v794 = vaddq_s32(v794, v68);
          v793 = vaddq_s32(v793, v68);
          v798 -= 8;
        }
        while (v798);
        *v66 = v783;
        v814 = vorrq_s8(vorrq_s8(v797, v800), vorrq_s8(v799, v801));
        v172 = vorr_s8(*(int8x8_t *)v814.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v814, v814, 8uLL));
        v779 = vaddvq_s32(vaddq_s32(v796, v795));
        if ((v788 & 0x3FFFFFF8) != v788)
          goto LABEL_612;
      }
    }
LABEL_614:
    v173 = v779;
    v727 = (v171 + 1) >> 1;
    v728 = (int8x8_t)(*(_QWORD *)&v172 - (v727 << 56));
    if (*(_QWORD *)&v172 >= (unint64_t)(v727 << 56))
      goto LABEL_551;
LABEL_552:
    v729 = 2 * v727;
    v730 = 2 * *(_QWORD *)&v172;
    a1[2] = (int8x8_t)(2 * *(_QWORD *)&v172);
    v731 = v173 - 1;
    a1[3].i32[0] = v173 - 1;
    a1[3].i32[1] = 2 * v727;
    *(_WORD *)(a5 + 2 * v726) = v175;
    if ((_DWORD)v118 == 16)
      return 16;
    v7 = (unsigned __int8 *)(a2 + 33 * v725 + 11 * v174);
    v732 = *v7;
    if (v173 <= 0)
    {
      v733 = (uint8x8_t *)a1[1];
      v734 = *(_QWORD *)a1 - (_QWORD)v733;
      v735 = (void (*)(_QWORD, uint8x8_t *, _BYTE *, uint64_t))a1[4];
      if (v735)
      {
        if (v734 >= 9)
          v736 = 9;
        else
          v736 = *(_QWORD *)a1 - (_QWORD)v733;
        v735(*(_QWORD *)&a1[5], v733, v831, v736);
        v118 = v830;
        v68.i64[0] = 0x3F0000003FLL;
        v68.i64[1] = 0x3F0000003FLL;
        v67.i64[0] = 0x800000008;
        v67.i64[1] = 0x800000008;
        v733 = (uint8x8_t *)v831;
      }
      v737 = 57 - v173 - 8 * v734;
      if (v737 >= 0)
        v731 = v173 + 0x3FFFFFFF;
      if (8 * v734 || v737 <= -1)
      {
        v739 = 49 - v173;
        v740 = v737 & ~(v737 >> 31);
        if (49 - v173 >= v740)
        {
          v741 = *v66;
          v742 = v740 - 1;
          if (v740 - 1 >= 41 - v173)
            v743 = 41 - v173;
          else
            v743 = v740 - 1;
          v744 = 48 - v173 - v743;
          if (v744 < 0x78)
            goto LABEL_616;
          if (v742 >= 41 - v173)
            v742 = 41 - v173;
          if (v66 >= (int8x8_t *)((char *)v733 + ((48 - v173 - v742) >> 3) + 1)
            || (unint64_t)v733 >= v825)
          {
            v746 = (v744 >> 3) + 1;
            v747 = (int8x8_t)(*(_QWORD *)&v741 + (v746 & 0x3FFFFFF8));
            v748 = (uint8x8_t *)((char *)v733 + (v746 & 0x3FFFFFF8));
            v749 = v739 - 8 * (v746 & 0x3FFFFFF8);
            v750 = vdupq_n_s32(v739);
            v751 = vaddq_s32(v750, (int32x4_t)xmmword_208F3A6A0);
            v752 = vaddq_s32(v750, (int32x4_t)xmmword_208F3A6B0);
            v753 = 0uLL;
            v754 = (int32x4_t)v731;
            v755 = (int8x16_t)(unint64_t)(2 * *(_QWORD *)&v172);
            v756 = v746 & 0x3FFFFFF8;
            v757 = 0uLL;
            v758 = 0uLL;
            v759 = 0uLL;
            do
            {
              v754 = vaddq_s32(v754, v67);
              v760 = *v733++;
              v753 = vaddq_s32(v753, v67);
              v761 = vmovl_u8(v760);
              v762 = vmovl_high_u16(v761);
              v763.i64[0] = v762.u32[2];
              v763.i64[1] = v762.u32[3];
              v764 = v763;
              v763.i64[0] = v762.u32[0];
              v763.i64[1] = v762.u32[1];
              v765 = v763;
              v766 = vmovl_u16(*(uint16x4_t *)v761.i8);
              v763.i64[0] = v766.u32[2];
              v763.i64[1] = v766.u32[3];
              v767 = v763;
              v763.i64[0] = v766.u32[0];
              v763.i64[1] = v766.u32[1];
              v768 = v763;
              v763.i64[0] = v751.u32[2];
              v763.i64[1] = v751.u32[3];
              v769 = v763;
              v763.i64[0] = v751.u32[0];
              v763.i64[1] = v751.u32[1];
              v770 = v763;
              v763.i64[0] = v752.u32[2];
              v763.i64[1] = v752.u32[3];
              v771 = v763;
              v763.i64[0] = v752.u32[0];
              v763.i64[1] = v752.u32[1];
              v759 = vorrq_s8((int8x16_t)vshlq_u64(v764, v769), v759);
              v758 = vorrq_s8((int8x16_t)vshlq_u64(v765, v770), v758);
              v757 = vorrq_s8((int8x16_t)vshlq_u64(v767, v771), v757);
              v755 = vorrq_s8((int8x16_t)vshlq_u64(v768, v763), v755);
              *(_QWORD *)&v741 += 8;
              v752 = vaddq_s32(v752, v68);
              v751 = vaddq_s32(v751, v68);
              v756 -= 8;
            }
            while (v756);
            *v66 = v741;
            v772 = vorrq_s8(vorrq_s8(v755, v758), vorrq_s8(v757, v759));
            v730 = (unint64_t)vorr_s8(*(int8x8_t *)v772.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v772, v772, 8uLL));
            v731 = vaddvq_s32(vaddq_s32(v754, v753));
            if ((v746 & 0x3FFFFFF8) == v746)
              goto LABEL_619;
          }
          else
          {
LABEL_616:
            v747 = *v66;
            v748 = v733;
            v749 = 49 - v173;
          }
          v817 = (int8x8_t)(*(_QWORD *)&v747 + 1);
          do
          {
            v731 += 8;
            v818 = v748->u8[0];
            v748 = (uint8x8_t *)((char *)v748 + 1);
            v730 |= (unint64_t)v818 << v749;
            *v66 = v817;
            v749 -= 8;
            ++*(_QWORD *)&v817;
          }
          while (v749 >= v740);
        }
      }
    }
LABEL_619:
    v819 = (((v729 - 1) * v732) >> 8) + 1;
    v820 = v819 << 56;
    result = v118;
    v821 = v730;
    v822 = v730 - (v819 << 56);
    if (v730 >= v819 << 56)
    {
      LODWORD(v819) = a1[3].i32[1] - v819;
      result = v827;
      v821 = v822;
    }
    v823 = vp8_norm[v819];
    v62 = (_DWORD)v819 << v823;
    a1[2] = (int8x8_t)(v821 << v823);
    v824 = v731 - v823;
    a1[3].i32[0] = v731 - v823;
    a1[3].i32[1] = (_DWORD)v819 << v823;
    if (v730 < v820)
      return result;
    v827 = result;
    v63 = (int8x8_t)(v821 << v823);
    v64 = v824;
    v6 = v118;
  }
  while ((_DWORD)v118 != 16);
  return 16;
}

uint64_t vp8_encode_frame(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int v43;
  _OWORD *v44;
  int v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  _OWORD *v51;
  _OWORD *v52;
  _OWORD *v53;
  _OWORD *v54;
  _OWORD *v55;
  _OWORD *v56;
  _OWORD *v57;
  _OWORD *v58;
  _OWORD *v59;
  _OWORD *v60;
  _OWORD *v61;
  _OWORD *v62;
  int v63;
  unsigned int v64;
  int v65;
  int *v66;
  uint64_t v68;
  int v69;
  size_t v70;
  void *v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int32x4_t v90;
  int32x4_t v91;
  const double *v92;
  uint64_t v93;
  const double *v94;
  const double *v95;
  const double *v96;
  uint64_t v97;
  _QWORD *v98;
  int32x4_t v99;
  uint64_t v100;
  int32x4_t v101;
  uint64_t v102;
  int32x4_t *v103;
  uint64_t v104;
  int32x4_t *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int32x4_t *v129;
  int32x4_t v130;
  int32x4_t *v131;
  int32x4_t v132;
  _DWORD *v133;
  _DWORD *v134;
  _DWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t j;
  uint64_t i;
  int32x4_t *v143;
  int32x4_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t k;
  _DWORD *v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  uint64_t result;
  int v166;
  _BYTE *v167;
  __int32 v168;
  int v169;
  __int32 v170;
  int v171;
  int v172;
  int32x4_t v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int *v180;
  int *v181;
  unint64_t v182;
  int v183;
  unint64_t v184;
  int *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  timeval v191;
  timeval v192;
  int v193;
  uint64_t v194;
  int32x4_t v195;
  uint64_t v196;
  float64x2x2_t v197;
  float64x2x2_t v198;
  float64x2x2_t v199;
  float64x2x2_t v200;

  v196 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 131908;
  v3 = a1 + 111136;
  v4 = a1 + 103556;
  v5 = a1 + 75328;
  v6 = a1 + 73728;
  v194 = *(_QWORD *)(a1 + 115152);
  v195 = 0uLL;
  v193 = 0;
  if (*(_DWORD *)(a1 + 142788) != 2)
    goto LABEL_15;
  v7 = *(_DWORD *)(a1 + 114296);
  if (v7 < 0)
  {
    v16 = -v7;
LABEL_14:
    *(_DWORD *)(a1 + 142784) = v16;
    goto LABEL_15;
  }
  v8 = (16 - v7) * (int)(1000000.0 / *(double *)(a1 + 132096)) / 16;
  v9 = *(_DWORD *)(a1 + 142780);
  if (v9 >= v8 || (v10 = *(_DWORD *)(a1 + 142776), v10 - v9 >= v8))
  {
    v14 = *(_DWORD *)(a1 + 142784);
    if (v14 <= 12)
      v15 = v14 + 4;
    else
      v15 = 16;
    *(_DWORD *)(a1 + 142784) = v15;
    *(_QWORD *)(a1 + 142776) = 0;
  }
  else
  {
    if (!v9)
      goto LABEL_133;
    v11 = (_QWORD *)(a1 + 142776);
    v12 = 100 * v8;
    v13 = *(_DWORD *)(a1 + 142784);
    if (v12 < 95 * v10)
    {
      *(_DWORD *)(a1 + 142784) = v13 + 2;
      *v11 = 0;
      v10 = 0;
      if (v13 < 15)
      {
        v13 += 2;
      }
      else
      {
        v13 = 16;
        *(_DWORD *)(a1 + 142784) = 16;
      }
    }
    if (v12 > auto_speed_thresh[v13] * v10)
    {
      *(_DWORD *)(a1 + 142784) = v13 - 1;
      *v11 = 0;
      if (v13 <= 4)
      {
LABEL_133:
        v16 = 4;
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  v17 = a1 + 143168;
  v18 = a1 + 81920;
  if (*(_DWORD *)(a1 + 111096))
  {
    v19 = vp8_bilinear_predict16x16_neon;
    v20 = vp8_bilinear_predict8x8_neon;
    v21 = vp8_bilinear_predict8x4_neon;
    v22 = vp8_bilinear_predict4x4_neon;
  }
  else
  {
    v19 = vp8_sixtap_predict16x16_neon;
    v20 = vp8_sixtap_predict8x8_neon;
    v21 = vp8_sixtap_predict8x4_neon;
    v22 = vp8_sixtap_predict4x4_neon;
  }
  v23 = a1 + 108032;
  v24 = a1 + 77952;
  *(_QWORD *)(a1 + 81976) = v22;
  *(_QWORD *)(a1 + 81984) = v21;
  *(_QWORD *)(a1 + 81992) = v20;
  *(_QWORD *)(a1 + 82000) = v19;
  *(_DWORD *)(a1 + 82568) = 0;
  *(_DWORD *)(a1 + 115160) = 0;
  *(_QWORD *)(a1 + 81824) = *(_QWORD *)v3;
  v187 = a1 + 87180;
  bzero((void *)(a1 + 87180), 0x3FF8uLL);
  *(_DWORD *)(v4 + 316) = 0;
  vp8cx_mb_init_quantizer(a1, v6, 0);
  v25 = *(_DWORD *)(v4 + 7552) + *(_DWORD *)(v4 + 7548);
  v26 = v25 & ~(v25 >> 31);
  if (v26 >= 127)
    v26 = 127;
  vp8_initialize_rd_consts((_DWORD *)a1, v6, dc_qlookup[v26]);
  v27 = 4 * *(int *)(v4 + 7548);
  *(_DWORD *)(a1 + 82364) = *(_DWORD *)((char *)&sad_per_bit16lut + v27);
  *(_DWORD *)(a1 + 82368) = *(_DWORD *)((char *)&sad_per_bit4lut + v27);
  v190 = a1 + 143168;
  v180 = (int *)v2;
  if (*(_DWORD *)(v3 + 3376) == 1)
  {
    v177 = v3;
    v176 = a1;
    init_encode_frame_mb_context(a1);
    if (*(int *)(v4 + 7520) >= 1)
    {
      v28 = 0;
      v29 = 0;
      v30 = a1 + 160 * *(int *)(v4 + 6988);
      v185 = (int *)(v30 + 109904);
      v183 = 16 * *(_DWORD *)(v30 + 109904);
      v31 = (_QWORD *)(v30 + 109944);
      v181 = (int *)(v30 + 109924);
      v188 = v24;
      do
      {
        *(_DWORD *)(v5 + 6512) = v29 != 0;
        v43 = *(_DWORD *)(v4 + 7524);
        v44 = *(_OWORD **)(v5 + 2520);
        if (v43 >= 1)
        {
          v45 = 0;
          v46 = v28;
          do
          {
            v47 = v29 == 0;
            *(_QWORD *)(v5 + 6392) = *v31 + v46;
            *(_DWORD *)(v5 + 6516) = v45 != 0;
            v48 = *(int *)(v5 + 2480);
            *(_OWORD *)v5 = *v44;
            v49 = (_OWORD *)((char *)v44 + v48);
            *(_OWORD *)(v5 + 16) = *v49;
            v50 = (_OWORD *)((char *)v49 + v48);
            *(_OWORD *)(v5 + 32) = *v50;
            v51 = (_OWORD *)((char *)v50 + v48);
            *(_OWORD *)(v5 + 48) = *v51;
            v52 = (_OWORD *)((char *)v51 + v48);
            *(_OWORD *)(v5 + 64) = *v52;
            v53 = (_OWORD *)((char *)v52 + v48);
            *(_OWORD *)(v5 + 80) = *v53;
            v54 = (_OWORD *)((char *)v53 + v48);
            *(_OWORD *)(v5 + 96) = *v54;
            v55 = (_OWORD *)((char *)v54 + v48);
            *(_OWORD *)(v5 + 112) = *v55;
            v56 = (_OWORD *)((char *)v55 + v48);
            *(_OWORD *)(v5 + 128) = *v56;
            v57 = (_OWORD *)((char *)v56 + v48);
            *(_OWORD *)(v5 + 144) = *v57;
            v58 = (_OWORD *)((char *)v57 + v48);
            *(_OWORD *)(v5 + 160) = *v58;
            v59 = (_OWORD *)((char *)v58 + v48);
            *(_OWORD *)(v5 + 176) = *v59;
            v60 = (_OWORD *)((char *)v59 + v48);
            *(_OWORD *)(v5 + 192) = *v60;
            v61 = (_OWORD *)((char *)v60 + v48);
            *(_OWORD *)(v5 + 208) = *v61;
            v62 = (_OWORD *)((char *)v61 + v48);
            *(_OWORD *)(v5 + 224) = *v62;
            v46 += 16;
            if (!v45)
              v47 = 1;
            if (v45 | v29)
              v63 = v47;
            else
              v63 = 0;
            *(_OWORD *)(v5 + 240) = *(_OWORD *)((char *)v62 + v48);
            v64 = vp8_encode_intra(v6, v63);
            if (v64 <= 0x40)
              v65 = 64;
            else
              v65 = v64;
            v66 = *(int **)(v18 + 464);
            *v66 = v65;
            *(_QWORD *)(v18 + 464) = v66 + 1;
            v44 = (_OWORD *)(*(_QWORD *)(v5 + 2520) + 16);
            *(_QWORD *)(v5 + 2520) = v44;
            ++v45;
            v43 = *(_DWORD *)(v4 + 7524);
          }
          while (v45 < v43);
          v24 = v188;
          v17 = a1 + 143168;
        }
        *(_QWORD *)(v5 + 2520) = &v44[*(_DWORD *)(v5 + 2480) - v43];
        v32 = (_BYTE *)(*(_QWORD *)(v5 + 6392) + 14 * *v185);
        v33 = 6 * *v181;
        v34 = (_BYTE *)(*(_QWORD *)(v5 + 6400) + v33);
        v35 = *(_QWORD *)(v5 + 6408);
        v32[16] = v32[15];
        v36 = (_BYTE *)(v35 + v33);
        v34[8] = v34[7];
        v37 = v34 + 8;
        v36[8] = v36[7];
        v38 = v36 + 8;
        v32[17] = v32[15];
        v34[9] = v34[7];
        v36[9] = v36[7];
        v32[18] = v32[15];
        v34[10] = v34[7];
        v36[10] = v36[7];
        v32[19] = v32[15];
        v34[11] = v34[7];
        v36[11] = v36[7];
        v39 = &v32[*v185 + 16];
        v40 = *v181;
        v41 = &v37[v40];
        v42 = &v38[v40];
        *v39 = *(v39 - 1);
        *v41 = *(v41 - 1);
        *v42 = *(v42 - 1);
        v39[1] = *(v39 - 1);
        v41[1] = *(v41 - 1);
        v42[1] = *(v42 - 1);
        v39[2] = *(v39 - 1);
        v41[2] = *(v41 - 1);
        v42[2] = *(v42 - 1);
        v39[3] = *(v39 - 1);
        v41[3] = *(v41 - 1);
        v42[3] = *(v42 - 1);
        ++v29;
        v28 += v183;
      }
      while (v29 < *(_DWORD *)(v4 + 7520));
    }
    *(_DWORD *)(v17 + 4996) = 100000;
    v3 = v177;
    v23 = a1 + 108032;
  }
  init_encode_frame_mb_context(a1);
  v191 = (timeval)0;
  v192 = (timeval)0;
  gettimeofday(&v191, 0);
  if (atomic_load((unsigned int *)(v17 + 16)))
  {
    vp8cx_init_mbrthread_data(a1, v6, *(_QWORD *)(v17 + 48), *(_DWORD *)(v17 + 20));
    LODWORD(v68) = *(_DWORD *)(v17 + 8);
    v69 = *(_DWORD *)(v4 + 7520);
    if ((_DWORD)v68 == v69)
      goto LABEL_52;
    if (*(_QWORD *)v17)
    {
      free(*(void **)(*(_QWORD *)v17 - 8));
      v69 = *(_DWORD *)(v4 + 7520);
    }
    *(_QWORD *)v17 = 0;
    *(_DWORD *)(v17 + 8) = 0;
    v70 = 4 * v69 + 23;
    if (v70 <= 0x10000000000 && (v71 = malloc_type_malloc(v70, 0x74AD08B5uLL)) != 0)
    {
      v72 = ((unint64_t)v71 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v72 - 8) = v71;
      *(_QWORD *)v17 = v72;
      if (v72)
      {
LABEL_51:
        LODWORD(v68) = *(_DWORD *)(v4 + 7520);
        *(_DWORD *)(v17 + 8) = v68;
LABEL_52:
        if ((int)v68 >= 1)
        {
          v78 = 0;
          do
          {
            atomic_store(0xFFFFFFFF, (unsigned int *)(*(_QWORD *)v17 + 4 * v78++));
            v68 = *(int *)(v4 + 7520);
          }
          while (v78 < v68);
        }
        LODWORD(v79) = *(_DWORD *)(v17 + 20);
        if ((int)v79 >= 1)
        {
          v179 = v23;
          v80 = v3;
          v81 = v24;
          v82 = 0;
          do
          {
            MEMORY[0x20BD0B6E0](*(unsigned int *)(*(_QWORD *)(v17 + 80) + 4 * v82++));
            v79 = *(int *)(v17 + 20);
          }
          while (v82 < v79);
          LODWORD(v68) = *(_DWORD *)(v4 + 7520);
          v24 = v81;
          v3 = v80;
          v23 = v179;
        }
        if ((int)v68 >= 1)
        {
          v83 = 0;
          do
          {
            *(_BYTE *)(a1 + 111624) = 0;
            *(_QWORD *)(a1 + 111616) = 0;
            v194 = *(_QWORD *)(v3 + 4016) + 6144 * v83 * *(_DWORD *)(v4 + 7524);
            encode_mb_row(a1, v23, v83, v6, v24, &v194, (uint64_t)&v195, &v193);
            LODWORD(v79) = *(_DWORD *)(v17 + 20);
            LODWORD(v68) = *(_DWORD *)(v4 + 7524);
            *(_QWORD *)(v5 + 2520) += 16 * *(_DWORD *)(v5 + 2480) * ((int)v79 + 1) - 16 * (int)v68;
            v84 = 8 * ((int)v79 + 1) * *(_DWORD *)(v5 + 2500) - 8 * (int)v68;
            *(_QWORD *)(v5 + 2528) += v84;
            *(_QWORD *)(v5 + 2536) += v84;
            LODWORD(v84) = *(_DWORD *)(v5 + 6504) * v79;
            *(_QWORD *)(v5 + 6496) += 76 * (int)v84;
            *(_QWORD *)(v18 + 384) += 132 * (int)v84;
            *(_QWORD *)(v18 + 584) += (int)v68 * (int)v79;
            v83 += v79 + 1;
            LODWORD(v68) = *(_DWORD *)(v4 + 7520);
          }
          while (v83 < (int)v68);
        }
        v77 = v180;
        if ((int)v79 >= 1)
        {
          v85 = 0;
          do
          {
            MEMORY[0x20BD0B6EC](*(unsigned int *)(*(_QWORD *)(v17 + 88) + 4 * v85++));
            v79 = *(int *)(v17 + 20);
          }
          while (v85 < v79);
          LODWORD(v68) = *(_DWORD *)(v4 + 7520);
        }
        if ((int)v68 < 1)
        {
LABEL_75:
          if ((int)v79 < 1 || !*(_BYTE *)v18)
            goto LABEL_85;
          v99 = v195;
          if (v79 >= 2)
          {
            v100 = v79 & 0xFFFFFFFE;
            v101 = 0uLL;
            v102 = v100;
            v103 = *(int32x4_t **)(v17 + 48);
            do
            {
              v99 = vaddq_s32(v103[2144], v99);
              v101 = vaddq_s32(v103[4290], v101);
              v103 += 4292;
              v102 -= 2;
            }
            while (v102);
            v99 = vaddq_s32(v101, v99);
            if (v100 == v79)
              goto LABEL_84;
          }
          else
          {
            v100 = 0;
          }
          v104 = v79 - v100;
          v105 = (int32x4_t *)(*(_QWORD *)(v17 + 48) + 34336 * v100 + 34304);
          do
          {
            v99 = vaddq_s32(*v105, v99);
            v105 += 2146;
            --v104;
          }
          while (v104);
LABEL_84:
          v195 = v99;
LABEL_85:
          v106 = v193;
          if ((int)v79 >= 1)
          {
            v107 = 0;
            v108 = *(_QWORD *)(v17 + 48);
            v109 = a1 + 103888;
            v110 = *(_DWORD *)(v18 + 648);
            v111 = *(_QWORD *)(v4 + 36);
            v182 = a1 + 103556;
            v184 = a1 + 107984;
            v112 = *(_QWORD *)(v4 + 44);
            v113 = v108 + 13452;
            v114 = a1 + 95384;
            v115 = v108 + 21656;
            v116 = v108 + 21640;
            v189 = a1 + 87180;
            v117 = v108 + 30176;
            v118 = a1 + 103904;
            v119 = v108 + 30160;
            v186 = a1 + 82572;
            v120 = v108 + 8980;
            do
            {
              v121 = (_DWORD *)(v108 + 34336 * v107);
              v122 = v121[8580];
              v110 += v121[2210];
              *(_DWORD *)(v18 + 648) = v110;
              v123 = *(_DWORD *)(v4 + 4);
              *(_DWORD *)v4 += v121[7457];
              *(_DWORD *)(v4 + 4) = v123 + v121[7458];
              v124 = *(_DWORD *)(v4 + 12);
              *(_DWORD *)(v4 + 8) += v121[7459];
              *(_DWORD *)(v4 + 12) = v124 + v121[7460];
              v125 = *(_DWORD *)(v4 + 20);
              *(_DWORD *)(v4 + 16) += v121[7461];
              *(_DWORD *)(v4 + 20) = v125 + v121[7462];
              v126 = *(_DWORD *)(v4 + 28);
              *(_DWORD *)(v4 + 24) += v121[7463];
              *(_DWORD *)(v4 + 28) = v126 + v121[7464];
              *(_DWORD *)(v4 + 32) += v121[7465];
              if (v187 >= (unint64_t)(v121 + 7457) || (unint64_t)(v121 + 3363) >= v182)
              {
                v128 = -8160;
                do
                {
                  v129 = (int32x4_t *)(v187 + v128);
                  v130 = vaddq_s32(*(int32x4_t *)(v187 + v128 + 8176), *(int32x4_t *)(v113 + v128 + 8176));
                  v129[510] = vaddq_s32(*(int32x4_t *)(v187 + v128 + 8160), *(int32x4_t *)(v113 + v128 + 8160));
                  v129[511] = v130;
                  v131 = (int32x4_t *)(v114 + v128);
                  v132 = vaddq_s32(*(int32x4_t *)(v114 + v128 + 8160), *(int32x4_t *)(v115 + v128 + 8160));
                  v131[509] = vaddq_s32(*(int32x4_t *)(v114 + v128 + 8144), *(int32x4_t *)(v115 + v128 + 8144));
                  v131[510] = v132;
                  v128 += 32;
                }
                while (v128);
                v127 = 2040;
              }
              else
              {
                v127 = 0;
              }
              v133 = v121 + 7540;
              v134 = v121 + 8564;
              v135 = (_DWORD *)(v189 + 4 * v127);
              do
              {
                *v135 += *(_DWORD *)(v113 + 4 * v127);
                v135[2047] += *(_DWORD *)(v116 + 4 * v127++);
                ++v135;
              }
              while (v127 != 2047);
              v136 = v108 + 34336 * v107;
              v137 = *(_QWORD *)(v136 + 29864);
              v138 = *(_QWORD *)(v136 + 29872);
              v136 += 29880;
              v139 = *(_DWORD *)(v4 + 56);
              *(_DWORD *)(v4 + 52) += *(_DWORD *)v136;
              *(_DWORD *)(v4 + 56) = v139 + *(_DWORD *)(v136 + 4);
              v140 = *(_DWORD *)(v4 + 64);
              *(_DWORD *)(v4 + 60) += *(_DWORD *)(v136 + 8);
              *(_DWORD *)(v4 + 64) = v140 + *(_DWORD *)(v136 + 12);
              if (v109 >= (unint64_t)v134 || (unint64_t)v133 >= v184)
              {
                for (i = 0; i != 4096; i += 32)
                {
                  v143 = (int32x4_t *)(v118 + i);
                  v144 = vaddq_s32(*(int32x4_t *)(v118 + i), *(int32x4_t *)(v117 + i));
                  v143[-1] = vaddq_s32(*(int32x4_t *)(v118 + i - 16), *(int32x4_t *)(v117 + i - 16));
                  *v143 = v144;
                }
              }
              else
              {
                for (j = 0; j != 4096; j += 4)
                  *(_DWORD *)(v109 + j) += *(_DWORD *)(v119 + j);
              }
              v145 = 0;
              v111 += v137;
              v146 = v120;
              v147 = v186;
              do
              {
                for (k = 0; k != 1152; k += 144)
                {
                  v149 = (_DWORD *)(v147 + k);
                  v150 = *(_DWORD *)(v147 + k + 4);
                  *v149 = *(_DWORD *)(v147 + k) + *(_DWORD *)(v146 + k - 136);
                  v149[1] = v150 + *(_DWORD *)(v146 + k - 132);
                  v151 = *(_DWORD *)(v147 + k + 12);
                  v149[2] = *(_DWORD *)(v147 + k + 8) + *(_DWORD *)(v146 + k - 128);
                  v149[3] = v151 + *(_DWORD *)(v146 + k - 124);
                  v152 = *(_DWORD *)(v147 + k + 20);
                  v149[4] = *(_DWORD *)(v147 + k + 16) + *(_DWORD *)(v146 + k - 120);
                  v149[5] = v152 + *(_DWORD *)(v146 + k - 116);
                  v153 = *(_DWORD *)(v147 + k + 28);
                  v149[6] = *(_DWORD *)(v147 + k + 24) + *(_DWORD *)(v146 + k - 112);
                  v149[7] = v153 + *(_DWORD *)(v146 + k - 108);
                  v154 = *(_DWORD *)(v147 + k + 36);
                  v149[8] = *(_DWORD *)(v147 + k + 32) + *(_DWORD *)(v146 + k - 104);
                  v149[9] = v154 + *(_DWORD *)(v146 + k - 100);
                  v149[10] = *(_DWORD *)(v147 + k + 40) + *(_DWORD *)(v146 + k - 96);
                  v155 = *(_DWORD *)(v147 + k + 52);
                  v149[12] = *(_DWORD *)(v147 + k + 48) + *(_DWORD *)(v146 + k - 88);
                  v149[13] = v155 + *(_DWORD *)(v146 + k - 84);
                  v156 = *(_DWORD *)(v147 + k + 60);
                  v149[14] = *(_DWORD *)(v147 + k + 56) + *(_DWORD *)(v146 + k - 80);
                  v149[15] = v156 + *(_DWORD *)(v146 + k - 76);
                  v157 = *(_DWORD *)(v147 + k + 68);
                  v149[16] = *(_DWORD *)(v147 + k + 64) + *(_DWORD *)(v146 + k - 72);
                  v149[17] = v157 + *(_DWORD *)(v146 + k - 68);
                  v158 = *(_DWORD *)(v147 + k + 76);
                  v149[18] = *(_DWORD *)(v147 + k + 72) + *(_DWORD *)(v146 + k - 64);
                  v149[19] = v158 + *(_DWORD *)(v146 + k - 60);
                  v159 = *(_DWORD *)(v147 + k + 84);
                  v149[20] = *(_DWORD *)(v147 + k + 80) + *(_DWORD *)(v146 + k - 56);
                  v149[21] = v159 + *(_DWORD *)(v146 + k - 52);
                  v149[22] = *(_DWORD *)(v147 + k + 88) + *(_DWORD *)(v146 + k - 48);
                  v160 = *(_DWORD *)(v147 + k + 100);
                  v149[24] = *(_DWORD *)(v147 + k + 96) + *(_DWORD *)(v146 + k - 40);
                  v149[25] = v160 + *(_DWORD *)(v146 + k - 36);
                  v161 = *(_DWORD *)(v147 + k + 108);
                  v149[26] = *(_DWORD *)(v147 + k + 104) + *(_DWORD *)(v146 + k - 32);
                  v149[27] = v161 + *(_DWORD *)(v146 + k - 28);
                  v162 = *(_DWORD *)(v147 + k + 116);
                  v149[28] = *(_DWORD *)(v147 + k + 112) + *(_DWORD *)(v146 + k - 24);
                  v149[29] = v162 + *(_DWORD *)(v146 + k - 20);
                  v163 = *(_DWORD *)(v147 + k + 124);
                  v149[30] = *(_DWORD *)(v147 + k + 120) + *(_DWORD *)(v146 + k - 16);
                  v149[31] = v163 + *(_DWORD *)(v146 + k - 12);
                  v164 = *(_DWORD *)(v147 + k + 132);
                  v149[32] = *(_DWORD *)(v147 + k + 128) + *(_DWORD *)(v146 + k - 8);
                  v149[33] = v164 + *(_DWORD *)(v146 + k - 4);
                  v149[34] = *(_DWORD *)(v147 + k + 136) + *(_DWORD *)(v146 + k);
                }
                ++v145;
                v147 += 1152;
                v146 += 1152;
              }
              while (v145 != 4);
              v106 += v122;
              v112 += v138;
              ++v107;
              v17 = v190;
              v113 += 34336;
              v115 += 34336;
              v116 += 34336;
              v117 += 34336;
              v119 += 34336;
              v120 += 34336;
            }
            while (v107 < *(int *)(v190 + 20));
            *(_QWORD *)(v4 + 36) = v111;
            *(_QWORD *)(v4 + 44) = v112;
            v77 = v180;
          }
          v193 = v106;
          goto LABEL_109;
        }
        v86 = *(_QWORD *)(v17 + 104);
        v87 = *(_DWORD *)(v3 + 4024);
        v88 = v68;
        if (v68 >= 8)
        {
          v89 = v68 & 0x7FFFFFF8;
          v90 = 0uLL;
          v91 = (int32x4_t)*(unsigned int *)(v3 + 4024);
          v92 = (const double *)(v86 + 64);
          v93 = v88 & 0xFFFFFFF8;
          do
          {
            v94 = v92 - 8;
            v197 = vld2q_f64(v94);
            v95 = v92 - 4;
            v198 = vld2q_f64(v95);
            v96 = v92;
            v199 = vld2q_f64(v96);
            v96 += 4;
            v200 = vld2q_f64(v96);
            v91 = vaddq_s32(v91, vshrn_high_n_s64(vshrn_n_s64(vsubq_s64((int64x2_t)v197.val[1], (int64x2_t)v197.val[0]), 4uLL), vsubq_s64((int64x2_t)v198.val[1], (int64x2_t)v198.val[0]), 4uLL));
            v90 = vaddq_s32(v90, vshrn_high_n_s64(vshrn_n_s64(vsubq_s64((int64x2_t)v199.val[1], (int64x2_t)v199.val[0]), 4uLL), vsubq_s64((int64x2_t)v200.val[1], (int64x2_t)v200.val[0]), 4uLL));
            v92 += 16;
            v93 -= 8;
          }
          while (v93);
          v87 = vaddvq_s32(vaddq_s32(v90, v91));
          if (v89 == v88)
            goto LABEL_74;
        }
        else
        {
          v89 = 0;
        }
        v97 = v88 - v89;
        v98 = (_QWORD *)(v86 + 16 * v89 + 8);
        do
        {
          v87 += (*v98 - *(v98 - 1)) >> 4;
          v98 += 2;
          --v97;
        }
        while (v97);
LABEL_74:
        *(_DWORD *)(v3 + 4024) = v87;
        goto LABEL_75;
      }
    }
    else
    {
      *(_QWORD *)v17 = 0;
    }
    vpx_internal_error(v23, 2, "Failed to allocate cpi->mt_current_mb_col", v176);
    goto LABEL_51;
  }
  v178 = v3;
  if (*(int *)(v4 + 7520) >= 1)
  {
    v73 = v24;
    v74 = 0;
    do
    {
      *(_BYTE *)(a1 + 111624) = 0;
      *(_QWORD *)(a1 + 111616) = 0;
      encode_mb_row(a1, v23, v74, v6, v73, &v194, (uint64_t)&v195, &v193);
      v75 = *(_DWORD *)(v4 + 7524);
      *(_QWORD *)(v5 + 2520) += 16 * (*(_DWORD *)(v5 + 2480) - v75);
      v76 = 8 * (*(_DWORD *)(v5 + 2500) - v75);
      *(_QWORD *)(v5 + 2528) += v76;
      *(_QWORD *)(v5 + 2536) += v76;
      ++v74;
    }
    while (v74 < *(_DWORD *)(v4 + 7520));
  }
  *(_DWORD *)(v178 + 4024) = (unint64_t)(v194 - *(_QWORD *)(v178 + 4016)) >> 4;
  v77 = v180;
LABEL_109:
  result = gettimeofday(&v192, 0);
  v166 = v192.tv_usec - v191.tv_usec + 1000000;
  if (v192.tv_usec >= v191.tv_usec)
    v166 = v192.tv_usec - v191.tv_usec;
  *(_QWORD *)(v17 + 504) += v166 + 1000000 * (v192.tv_sec - v191.tv_sec + ((v192.tv_usec - v191.tv_usec) >> 31));
  if (*(_BYTE *)v18)
  {
    if (*(_BYTE *)(v18 + 1))
    {
      *(_WORD *)(v18 + 4) = -1;
      v167 = (_BYTE *)(v18 + 4);
      *(_BYTE *)(v18 + 6) = -1;
      v168 = v195.i32[0];
      v169 = v195.i32[1] + v195.i32[0];
      v170 = v195.i32[2];
      v171 = v195.i32[3] + v195.i32[2];
      if (v195.i32[3] + v195.i32[2] + v195.i32[1] + v195.i32[0])
      {
        v172 = 255 * v169 / (v195.i32[3] + v195.i32[2] + v195.i32[1] + v195.i32[0]);
        *v167 = v172;
        if (v169 >= 1)
          *(_BYTE *)(v18 + 5) = 255 * v168 / v169;
        if (v171 >= 1)
          *(_BYTE *)(v18 + 6) = 255 * v170 / v171;
        if ((_BYTE)v172)
        {
          if (*(_BYTE *)(v18 + 5))
            goto LABEL_120;
        }
        else
        {
          *v167 = 1;
          if (*(_BYTE *)(v18 + 5))
          {
LABEL_120:
            if (*(_BYTE *)(v18 + 6))
              goto LABEL_121;
LABEL_126:
            *(_BYTE *)(v18 + 6) = 1;
            *v77 = v193 >> 8;
            if (*(_DWORD *)(v4 + 7504))
              goto LABEL_122;
LABEL_127:
            v175 = 100;
            goto LABEL_128;
          }
        }
        *(_BYTE *)(v18 + 5) = 1;
        if (!*(_BYTE *)(v18 + 6))
          goto LABEL_126;
      }
    }
  }
LABEL_121:
  *v77 = v193 >> 8;
  if (!*(_DWORD *)(v4 + 7504))
    goto LABEL_127;
LABEL_122:
  v173 = *(int32x4_t *)(v4 + 52);
  v174 = vaddvq_s32(v173);
  if (!v174)
    return result;
  v175 = 100 * v173.i32[0] / v174;
LABEL_128:
  v77[2740] = v175;
  return result;
}

double init_encode_frame_mb_context(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  _OWORD *v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  double result;

  v2 = (int *)(a1 + 142812);
  v3 = a1 + 81496;
  v4 = *(_QWORD *)(a1 + 148168);
  *(_QWORD *)(a1 + 82504) = *(_QWORD *)(a1 + 148176);
  v5 = (void **)(a1 + 110544);
  v6 = (_OWORD *)(a1 + 73728);
  *(_QWORD *)(a1 + 82384) = v4;
  *(_DWORD *)(a1 + 82400) = 0;
  *(_QWORD *)(a1 + 82304) = *(_QWORD *)(a1 + 82312);
  *(_QWORD *)(a1 + 81824) = *(_QWORD *)(a1 + 111136);
  *(_DWORD *)(a1 + 81832) = *(_DWORD *)(a1 + 111084);
  LODWORD(v4) = *(_DWORD *)(a1 + 111060);
  *(_DWORD *)(a1 + 81836) = v4;
  if (!(_DWORD)v4)
  {
    *(_DWORD *)(a1 + 112747) = 629954160;
    *(_WORD *)(a1 + 112751) = vp8_uv_mode_prob;
    *(_BYTE *)(a1 + 112753) = -52;
    *(_WORD *)(a1 + 112754) = sub_mv_ref_prob;
    *(_BYTE *)(a1 + 112756) = 25;
  }
  v7 = *(__int128 **)(a1 + 114776);
  v8 = *v7;
  *(_OWORD *)(a1 + 77808) = v7[1];
  *(_OWORD *)(a1 + 77792) = v8;
  v9 = v7[2];
  v10 = v7[3];
  v11 = v7[4];
  *(_OWORD *)(a1 + 77872) = v7[5];
  *(_OWORD *)(a1 + 77856) = v11;
  *(_OWORD *)(a1 + 77840) = v10;
  *(_OWORD *)(a1 + 77824) = v9;
  v12 = v7[6];
  v13 = v7[7];
  v14 = v7[8];
  *(_OWORD *)(a1 + 77936) = v7[9];
  *(_OWORD *)(a1 + 77920) = v14;
  *(_OWORD *)(a1 + 77904) = v13;
  *(_OWORD *)(a1 + 77888) = v12;
  v15 = *(_DWORD *)v5;
  v16 = (__int128 *)(a1 + 109888 + 160 * *(int *)(a1 + 110548));
  v17 = *v16;
  *(_OWORD *)(a1 + 81520) = v16[1];
  *(_OWORD *)(a1 + 81504) = v17;
  v18 = v16[4];
  *(_OWORD *)(a1 + 81584) = v16[5];
  *(_OWORD *)(a1 + 81568) = v18;
  v19 = v16[2];
  *(_OWORD *)(a1 + 81552) = v16[3];
  *(_OWORD *)(a1 + 81536) = v19;
  v20 = v16[8];
  v22 = v16[6];
  v21 = v16[7];
  *(_OWORD *)(a1 + 81648) = v16[9];
  *(_OWORD *)(a1 + 81632) = v20;
  *(_OWORD *)(a1 + 81616) = v21;
  *(_OWORD *)(a1 + 81600) = v22;
  v23 = a1 + 109888 + 160 * v15;
  v24 = *(_OWORD *)(v23 + 128);
  v6[505] = *(_OWORD *)(v23 + 144);
  v25 = *(_OWORD *)(v23 + 112);
  v6[502] = *(_OWORD *)(v23 + 96);
  v6[503] = v25;
  v6[504] = v24;
  v26 = *(_OWORD *)(v23 + 48);
  v6[498] = *(_OWORD *)(v23 + 32);
  v6[499] = v26;
  v27 = *(_OWORD *)(v23 + 80);
  v6[500] = *(_OWORD *)(v23 + 64);
  v6[501] = v27;
  v28 = *(_OWORD *)(v23 + 16);
  v6[496] = *(_OWORD *)v23;
  v6[497] = v28;
  vp8_setup_intra_recon((int *)v23);
  vp8_build_block_offsets((uint64_t)v6);
  **(_WORD **)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 416) = a1 + 111616;
  *(_QWORD *)(v3 + 1024) = a1 + 113813;
  bzero(v5[133], 9 * *((int *)v5 + 134));
  v29 = v2[16];
  if (v29 == 1)
  {
    v30 = *v2;
    *(_DWORD *)(v3 + 832) = vp8_prob_cost[v30];
    LODWORD(v30) = vp8_prob_cost[255 - v30];
    *(int32x2_t *)(v3 + 836) = vadd_s32(vdup_n_s32(v30), (int32x2_t)0x8FE00000001);
    v31 = v30 + 2304;
  }
  else
  {
    v32 = *(_DWORD *)(a1 + 114516);
    if (v29 == 2 && v32 >= 2)
    {
      v33 = *v2;
      *(_DWORD *)(v3 + 832) = vp8_prob_cost[v33];
      LODWORD(v33) = vp8_prob_cost[255 - v33];
      *(int32x2_t *)(v3 + 836) = vadd_s32(vdup_n_s32(v33), (int32x2_t)0x2000007FFLL);
      v31 = v33 + 2048;
    }
    else
    {
      v34 = *v2;
      if (v29 == 4 && v32 >= 2)
      {
        *(_DWORD *)(v3 + 832) = vp8_prob_cost[v34];
        v35 = vp8_prob_cost[255 - v34];
        *(int32x2_t *)(v3 + 836) = vadd_s32(vdup_n_s32(v35), (int32x2_t)0x800000007FFLL);
        v31 = v35 + 2;
      }
      else
      {
        v36 = v2[1];
        v37 = v2[2];
        *(_DWORD *)(v3 + 832) = vp8_prob_cost[v34];
        v38 = vp8_prob_cost[255 - v34];
        *(_DWORD *)(v3 + 836) = vp8_prob_cost[v36] + v38;
        v39 = vp8_prob_cost[255 - v36] + v38;
        *(_DWORD *)(v3 + 840) = v39 + vp8_prob_cost[v37];
        v31 = vp8_prob_cost[255 - v37] + v39;
      }
    }
  }
  *(_DWORD *)(v3 + 844) = v31;
  if (*((_DWORD *)v5 + 139))
    v40 = -8;
  else
    v40 = -1;
  *(_DWORD *)v3 = v40;
  bzero((void *)(a1 + 82572), 0x1200uLL);
  *(_DWORD *)(a1 + 103572) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 103556) = 0u;
  *(_OWORD *)(a1 + 103576) = 0u;
  *(_OWORD *)(a1 + 103592) = 0u;
  *(_OWORD *)(a1 + 103608) = 0u;
  return result;
}

uint64_t encode_mb_row(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, int *a8)
{
  uint64_t v10;
  int32x2_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  int v31;
  int64x2_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  _OWORD *v38;
  _OWORD *v39;
  _OWORD *v40;
  _OWORD *v41;
  _OWORD *v42;
  _OWORD *v43;
  _OWORD *v44;
  _OWORD *v45;
  _OWORD *v46;
  _OWORD *v47;
  _OWORD *v48;
  _OWORD *v49;
  signed int v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  unsigned int v83;
  int v84;
  _DWORD *v85;
  unsigned int *v86;
  uint64_t v87;
  int32x2_t *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  _DWORD *v99;
  unsigned int v100[3];

  v87 = result + 148168;
  v10 = result + 143084;
  v99 = (_DWORD *)result;
  v11 = (int32x2_t *)(result + 111080);
  v12 = *(_DWORD *)(a2 + 2512);
  v13 = a2 + 160 * *(int *)(a2 + 2516);
  v14 = *(_DWORD *)(v13 + 1872);
  v15 = *(_DWORD *)(v13 + 1892);
  v16 = *(_DWORD *)(result + 111080);
  v17 = *(int *)(result + 143180);
  v100[0] = *(_DWORD *)(a2 + 3048) + v17;
  v18 = (unsigned int *)(result + 143184);
  if (atomic_load((unsigned int *)(result + 143184)))
  {
    v86 = (unsigned int *)(*(_QWORD *)(result + 143168) + 4 * a3);
    v20 = v16 * (uint64_t)a3;
    v21 = atomic_load(v18);
    v22 = v100;
    if (!a3)
      goto LABEL_7;
LABEL_5:
    if (v21)
      v22 = (unsigned int *)(*(_QWORD *)(result + 143168) + 4 * a3 - 4);
    goto LABEL_7;
  }
  v86 = 0;
  v20 = v16 * (uint64_t)a3;
  v21 = atomic_load(v18);
  v22 = v100;
  if (a3)
    goto LABEL_5;
LABEL_7:
  *(_QWORD *)(a5 + 3952) = *(_QWORD *)(a2 + 3576);
  *(_DWORD *)(a5 + 3888) = a3 != 0;
  *(_QWORD *)(*(_QWORD *)(result + 143272) + 16 * a3) = *a6;
  *(_DWORD *)(a5 + 4012) = -128 * a3;
  v23 = *(_DWORD *)(a2 + 3044) + ~a3;
  *(_DWORD *)(a5 + 4016) = v23 << 7;
  *(_DWORD *)(a4 + 8760) = (16 * a3) ^ 0xFFFFFFF0;
  *(_DWORD *)(a4 + 8764) = 16 * v23 + 16;
  *(_QWORD *)(a4 + 8656) = *(_QWORD *)v87 + 4 * v20;
  LODWORD(v24) = *(_DWORD *)(a2 + 3048);
  if ((int)v24 <= 0)
    goto LABEL_58;
  v25 = 0;
  v84 = v12;
  v85 = (_DWORD *)(a4 + 34292);
  v26 = (int64x2_t *)(a4 + 4120);
  v27 = (_QWORD *)(a2 + 160 * v12);
  v91 = v27 + 239;
  v92 = a3;
  v89 = v27 + 241;
  v90 = v27 + 240;
  v88 = (int32x2_t *)(a4 + 8644);
  v28 = v14 * 16 * a3;
  v29 = 8 * a3 * v15;
  v30 = *(_OWORD **)(a4 + 4120);
  v97 = a6;
  v98 = a2;
  v96 = v20;
  do
  {
    *(_DWORD *)(a5 + 4004) = -128 * v25;
    v34 = v24 + ~(_DWORD)v25;
    *(_DWORD *)(a5 + 4008) = v34 << 7;
    *(_DWORD *)(a4 + 8752) = 16 * ~(_DWORD)v25;
    *(_DWORD *)(a4 + 8756) = 16 * v34 + 16;
    *(_QWORD *)(a5 + 3768) = *v91 + v28;
    *(_QWORD *)(a5 + 3776) = *v90 + v29;
    *(_QWORD *)(a5 + 3784) = *v89 + v29;
    *(_DWORD *)(a5 + 3892) = v25 != 0;
    *v88 = vrev64_s32(v11[533]);
    v35 = *(int *)(a4 + 4080);
    *(_OWORD *)(a4 + 1600) = *v30;
    v36 = (_OWORD *)((char *)v30 + v35);
    *(_OWORD *)(a4 + 1616) = *v36;
    v37 = (_OWORD *)((char *)v36 + v35);
    *(_OWORD *)(a4 + 1632) = *v37;
    v38 = (_OWORD *)((char *)v37 + v35);
    *(_OWORD *)(a4 + 1648) = *v38;
    v39 = (_OWORD *)((char *)v38 + v35);
    *(_OWORD *)(a4 + 1664) = *v39;
    v40 = (_OWORD *)((char *)v39 + v35);
    *(_OWORD *)(a4 + 1680) = *v40;
    v41 = (_OWORD *)((char *)v40 + v35);
    *(_OWORD *)(a4 + 1696) = *v41;
    v42 = (_OWORD *)((char *)v41 + v35);
    *(_OWORD *)(a4 + 1712) = *v42;
    v43 = (_OWORD *)((char *)v42 + v35);
    *(_OWORD *)(a4 + 1728) = *v43;
    v44 = (_OWORD *)((char *)v43 + v35);
    *(_OWORD *)(a4 + 1744) = *v44;
    v45 = (_OWORD *)((char *)v44 + v35);
    *(_OWORD *)(a4 + 1760) = *v45;
    v46 = (_OWORD *)((char *)v45 + v35);
    *(_OWORD *)(a4 + 1776) = *v46;
    v47 = (_OWORD *)((char *)v46 + v35);
    *(_OWORD *)(a4 + 1792) = *v47;
    v48 = (_OWORD *)((char *)v47 + v35);
    *(_OWORD *)(a4 + 1808) = *v48;
    v49 = (_OWORD *)((char *)v48 + v35);
    *(_OWORD *)(a4 + 1824) = *v49;
    *(_OWORD *)(a4 + 1840) = *(_OWORD *)((char *)v49 + v35);
    LODWORD(v49) = atomic_load((unsigned int *)(v10 + 100));
    if ((_DWORD)v49)
    {
      if (!(((int)v25 - 1) % (int)v17))
        atomic_store(v25 - 1, v86);
      if (a3 && (((_DWORD)v17 - 1) & v25) == 0)
      {
        do
          v50 = atomic_load(v22);
        while (v25 > v50 - v17);
      }
    }
    if (v11[429].i32[0] == 1)
    {
      v51 = *(unsigned int **)(a4 + 8656);
      v52 = *(unsigned int *)(v10 + 5080);
      v53 = (uint64_t)((v52 + 2 * *v51) * *(int *)(a4 + 8648)
                    + (((2 * v52) + (unint64_t)*v51) >> 1))
          / (uint64_t)((2 * v52) + (unint64_t)*v51);
      *(_DWORD *)(a4 + 8648) = v53;
      v54 = 100 * (int)v53 / (110 * *(_DWORD *)(a4 + 8644));
      if (!v54)
        v54 = 1;
      *(_DWORD *)(a4 + 8632) = v54;
      v55 = *v51;
      v56 = v55 + (4 * v52);
      v57 = v52 + 4 * v55;
      if (v55 <= v52)
        v58 = 1 - (v56 + (v57 >> 1)) / v57;
      else
        v58 = (v57 + (v56 >> 1)) / v56 - 1;
      *(_DWORD *)(a4 + 8672) = v58;
    }
    if (*(_BYTE *)(a5 + 3968))
    {
      v59 = *(unsigned __int8 *)(*(_QWORD *)&v11[3995] + v25 + v20);
      if (v59 >= 4)
        LOBYTE(v59) = 0;
      *(_BYTE *)(*(_QWORD *)(a5 + 3872) + 11) = v59;
      vp8cx_mb_init_quantizer((uint64_t)v99, a4, 1);
      a6 = v97;
      *(_QWORD *)(a4 + 8784) = *(_QWORD *)&v11[3999] + v96 + v25;
      if (!*(_DWORD *)(v98 + 3028))
      {
LABEL_9:
        result = vp8cx_encode_intra_macroblock(v99, a4, a6);
        v20 = v96;
        a6 = v97;
        a2 = v98;
        v31 = *a8 + result;
        if ((*a8 ^ 0x7FFFFFFF) <= (int)result)
          v31 = 0x7FFFFFFF;
        *a8 = v31;
        goto LABEL_12;
      }
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a5 + 3872) + 11) = 0;
      *(_QWORD *)(a4 + 8784) = *(_QWORD *)&v11[3999] + v20 + v25;
      if (!*(_DWORD *)(a2 + 3028))
        goto LABEL_9;
    }
    result = vp8cx_encode_inter_macroblock(v99, a4, a6, v28, v29, a3, v25);
    v20 = v96;
    a6 = v97;
    a2 = v98;
    v60 = *a8 + result;
    if ((*a8 ^ 0x7FFFFFFF) <= (int)result)
      v60 = 0x7FFFFFFF;
    *a8 = v60;
    if (!*(_DWORD *)(v87 + 1104))
    {
      v61 = *(_BYTE **)(a5 + 3872);
      if (*v61 != 7 || v61[2] != 1)
      {
        v71 = v25 + v96;
        *(_BYTE *)(*(_QWORD *)(v10 + 28) + v71) = 0;
        *(_BYTE *)(*(_QWORD *)(v10 + 36) + v71) = 0;
        if (!*v85)
          goto LABEL_41;
        goto LABEL_40;
      }
      v62 = *(_QWORD *)(v10 + 28);
      v63 = v25 + v96;
      v64 = *(unsigned __int8 *)(v62 + v25 + v96);
      if (v64 == 255)
      {
        v65 = *(_QWORD *)(v10 + 36);
        v66 = *(unsigned __int8 *)(v65 + v63);
        if (v66 == 255)
          goto LABEL_39;
      }
      else
      {
        *(_BYTE *)(v62 + v63) = v64 + 1;
        v65 = *(_QWORD *)(v10 + 36);
        v66 = *(unsigned __int8 *)(v65 + v63);
        if (v66 == 255)
        {
LABEL_39:
          if (!*v85)
          {
LABEL_41:
            if (!*(_DWORD *)(v87 + 1104) && *(_DWORD *)v10 && *(_BYTE *)(a5 + 3968))
            {
              v67 = v25 + v96;
              *(_BYTE *)(*(_QWORD *)&v11[3995] + v25 + v96) = *(_BYTE *)(*(_QWORD *)(a5 + 3872) + 11);
              v68 = *(_BYTE **)(a5 + 3872);
              if (v68[11])
              {
                v69 = *(_QWORD *)(v10 + 20);
                v70 = -1;
LABEL_56:
                *(_BYTE *)(v69 + v67) = v70;
                goto LABEL_12;
              }
              if (*v68 != 7 || v68[2] != 1)
              {
                v69 = *(_QWORD *)(v10 + 20);
                v70 = 1;
                goto LABEL_56;
              }
              v72 = *(_QWORD *)(v10 + 20);
              if (*(_BYTE *)(v72 + v67) == 1)
                *(_BYTE *)(v72 + v67) = 0;
            }
            goto LABEL_12;
          }
LABEL_40:
          *(_BYTE *)(*(_QWORD *)(v10 + 36) + v25 + v96) = 0;
          goto LABEL_41;
        }
      }
      *(_BYTE *)(v65 + v63) = v66 + 1;
      if (!*v85)
        goto LABEL_41;
      goto LABEL_40;
    }
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v10 + 188) + 16 * v92 + 8) = *a6;
    ++*(_QWORD *)(a4 + 8776);
    *(_QWORD *)(a4 + 8656) += 4;
    v32 = vaddq_s64(*v26, (int64x2_t)xmmword_208F3C2C0);
    *v26 = v32;
    *(_QWORD *)(a4 + 4136) += 8;
    v28 += 16;
    v29 += 8;
    v33 = *(_QWORD *)(a5 + 3872);
    ++*(_DWORD *)(a7 + 4 * *(unsigned __int8 *)(v33 + 11));
    *(_QWORD *)(a5 + 3872) = v33 + 76;
    *(_QWORD *)(a4 + 8576) += 132;
    *(_QWORD *)(a5 + 3952) += 9;
    ++v25;
    v24 = *(int *)(a2 + 3048);
    v30 = (_OWORD *)v32.i64[0];
  }
  while (v25 < v24);
  v12 = v84;
LABEL_58:
  v73 = a2 + 160 * v12;
  v74 = (_BYTE *)(*(_QWORD *)(a5 + 3768) + 14 * *(int *)(v73 + 1872));
  v75 = 6 * *(int *)(v73 + 1892);
  v76 = (_BYTE *)(*(_QWORD *)(a5 + 3776) + v75);
  v77 = *(_QWORD *)(a5 + 3784);
  v74[16] = v74[15];
  v76[8] = v76[7];
  v78 = (_BYTE *)(v77 + v75);
  v78[8] = v78[7];
  v74[17] = v74[15];
  v76[9] = v76[7];
  v78[9] = v78[7];
  v74[18] = v74[15];
  v76[10] = v76[7];
  v78[10] = v78[7];
  v74[19] = v74[15];
  v76[11] = v76[7];
  v78[11] = v78[7];
  v79 = &v74[*(int *)(v73 + 1872) + 16];
  v80 = *(int *)(v73 + 1892);
  v81 = &v76[v80 + 8];
  v82 = &v78[v80 + 8];
  *v79 = *(v79 - 1);
  *v81 = *(v81 - 1);
  *v82 = *(v82 - 1);
  v79[1] = *(v79 - 1);
  v81[1] = *(v81 - 1);
  v82[1] = *(v82 - 1);
  v79[2] = *(v79 - 1);
  v81[2] = *(v81 - 1);
  v82[2] = *(v82 - 1);
  v79[3] = *(v79 - 1);
  v81[3] = *(v81 - 1);
  v82[3] = *(v82 - 1);
  LODWORD(v79) = atomic_load((unsigned int *)(v10 + 100));
  if ((_DWORD)v79)
  {
    v83 = atomic_load(v100);
    atomic_store(v83, v86);
  }
  *(_QWORD *)(a5 + 3872) += 76;
  *(_QWORD *)(a4 + 8576) += 132;
  return result;
}

_QWORD *vp8_setup_block_ptrs(_QWORD *result)
{
  result[233] = result;
  result[244] = result + 1;
  result[255] = result + 2;
  result[266] = result + 3;
  result[277] = result + 16;
  result[288] = result + 17;
  result[299] = result + 18;
  result[310] = result + 19;
  result[321] = result + 32;
  result[332] = result + 33;
  result[343] = result + 34;
  result[354] = result + 35;
  result[365] = result + 48;
  result[376] = result + 49;
  result[387] = result + 50;
  result[398] = result + 51;
  result[409] = result + 64;
  result[420] = result + 65;
  result[431] = result + 72;
  result[442] = result + 73;
  result[453] = result + 80;
  result[464] = result + 81;
  result[475] = result + 88;
  result[486] = result + 89;
  result[497] = result + 96;
  result[234] = result + 100;
  result[245] = result + 104;
  result[256] = result + 108;
  result[267] = result + 112;
  result[278] = result + 116;
  result[289] = result + 120;
  result[300] = result + 124;
  result[311] = result + 128;
  result[322] = result + 132;
  result[333] = result + 136;
  result[344] = result + 140;
  result[355] = result + 144;
  result[366] = result + 148;
  result[377] = result + 152;
  result[388] = result + 156;
  result[399] = result + 160;
  result[410] = result + 164;
  result[421] = result + 168;
  result[432] = result + 172;
  result[443] = result + 176;
  result[454] = result + 180;
  result[465] = result + 184;
  result[476] = result + 188;
  result[487] = result + 192;
  result[498] = result + 196;
  return result;
}

double vp8_build_block_offsets(uint64_t a1)
{
  int v1;
  int v2;
  double result;
  int v4;
  int v5;

  v1 = *(_DWORD *)(a1 + 7952);
  *(_DWORD *)(a1 + 6400) = 0;
  *(_DWORD *)(a1 + 6456) = 4;
  *(_DWORD *)(a1 + 6512) = 8;
  *(_DWORD *)(a1 + 6568) = 12;
  *(_DWORD *)(a1 + 6624) = 4 * v1;
  *(_DWORD *)(a1 + 6680) = 4 * v1 + 4;
  *(_DWORD *)(a1 + 6736) = 4 * v1 + 8;
  *(_DWORD *)(a1 + 6792) = 4 * v1 + 12;
  *(_DWORD *)(a1 + 6848) = 8 * v1;
  *(_DWORD *)(a1 + 6904) = (8 * v1) | 4;
  *(_DWORD *)(a1 + 6960) = 8 * v1 + 8;
  *(_DWORD *)(a1 + 7016) = 8 * v1 + 12;
  v1 *= 12;
  *(_DWORD *)(a1 + 7072) = v1;
  *(_DWORD *)(a1 + 7128) = v1 + 4;
  *(_DWORD *)(a1 + 7184) = v1 + 8;
  *(_DWORD *)(a1 + 7240) = v1 + 12;
  v2 = *(_DWORD *)(a1 + 7972);
  *(_DWORD *)(a1 + 7296) = 0;
  *(_DWORD *)(a1 + 7520) = 0;
  *(_DWORD *)(a1 + 7352) = 4;
  *(_DWORD *)(a1 + 7576) = 4;
  v2 *= 4;
  *(_DWORD *)(a1 + 7408) = v2;
  *(_DWORD *)(a1 + 7632) = v2;
  v2 += 4;
  *(_DWORD *)(a1 + 7464) = v2;
  *(_DWORD *)(a1 + 7688) = v2;
  *(_QWORD *)(a1 + 1856) = a1 + 1600;
  *(_QWORD *)(a1 + 1936) = a1 + 1856;
  *(_QWORD *)(a1 + 1944) = 0x1000000000;
  *(_QWORD *)(a1 + 2024) = a1 + 1856;
  *(_QWORD *)(a1 + 2032) = 0x1000000004;
  *(_QWORD *)(a1 + 2112) = a1 + 1856;
  *(_QWORD *)(a1 + 2120) = 0x1000000008;
  *(_QWORD *)(a1 + 2200) = a1 + 1856;
  *(_QWORD *)(a1 + 2208) = 0x100000000CLL;
  *(_QWORD *)(a1 + 2288) = a1 + 1856;
  *(_QWORD *)(a1 + 2296) = 0x1000000040;
  *(_QWORD *)(a1 + 2376) = a1 + 1856;
  *(_QWORD *)(a1 + 2384) = 0x1000000044;
  *(_QWORD *)(a1 + 2464) = a1 + 1856;
  *(_QWORD *)(a1 + 2472) = 0x1000000048;
  *(_QWORD *)(a1 + 2552) = a1 + 1856;
  *(_QWORD *)(a1 + 2560) = 0x100000004CLL;
  *(_QWORD *)(a1 + 2640) = a1 + 1856;
  *(_QWORD *)(a1 + 2648) = 0x1000000080;
  *(_QWORD *)(a1 + 2728) = a1 + 1856;
  *(_QWORD *)(a1 + 2736) = 0x1000000084;
  *(_QWORD *)(a1 + 2816) = a1 + 1856;
  *(_QWORD *)(a1 + 2824) = 0x1000000088;
  *(_QWORD *)(a1 + 2904) = a1 + 1856;
  *(_QWORD *)(a1 + 2912) = 0x100000008CLL;
  *(_QWORD *)(a1 + 2992) = a1 + 1856;
  *(_QWORD *)(a1 + 3000) = 0x10000000C0;
  *(_QWORD *)(a1 + 3080) = a1 + 1856;
  *(_QWORD *)(a1 + 3088) = 0x10000000C4;
  *(_QWORD *)(a1 + 3168) = a1 + 1856;
  *(_QWORD *)(a1 + 3176) = 0x10000000C8;
  *(_QWORD *)(a1 + 3256) = a1 + 1856;
  *(_QWORD *)&result = 0x10000000CCLL;
  *(_QWORD *)(a1 + 3264) = 0x10000000CCLL;
  v4 = *(_DWORD *)(a1 + 4100);
  *(_QWORD *)(a1 + 3344) = a1 + 4128;
  *(_DWORD *)(a1 + 3356) = v4;
  *(_DWORD *)(a1 + 3352) = 0;
  *(_QWORD *)(a1 + 3432) = a1 + 4128;
  *(_DWORD *)(a1 + 3444) = v4;
  *(_DWORD *)(a1 + 3440) = 4;
  *(_QWORD *)(a1 + 3520) = a1 + 4128;
  *(_DWORD *)(a1 + 3532) = v4;
  *(_DWORD *)(a1 + 3528) = 4 * v4;
  *(_QWORD *)(a1 + 3608) = a1 + 4128;
  *(_DWORD *)(a1 + 3620) = v4;
  v5 = 4 * v4 + 4;
  *(_DWORD *)(a1 + 3616) = v5;
  *(_QWORD *)(a1 + 3696) = a1 + 4136;
  *(_DWORD *)(a1 + 3708) = v4;
  *(_DWORD *)(a1 + 3704) = 0;
  *(_QWORD *)(a1 + 3784) = a1 + 4136;
  *(_DWORD *)(a1 + 3796) = v4;
  *(_DWORD *)(a1 + 3792) = 4;
  *(_QWORD *)(a1 + 3872) = a1 + 4136;
  *(_DWORD *)(a1 + 3884) = v4;
  *(_DWORD *)(a1 + 3880) = 4 * v4;
  *(_QWORD *)(a1 + 3960) = a1 + 4136;
  *(_DWORD *)(a1 + 3972) = v4;
  *(_DWORD *)(a1 + 3968) = v5;
  return result;
}

uint64_t vp8cx_encode_intra_macroblock(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;

  v6 = a1 + 28628;
  v25 = 0;
  if (a1[35720] && a1[35697] != 2)
  {
    vp8_rd_pick_intra_mode(a2, &v25);
    if (*v6 != 1)
      goto LABEL_11;
  }
  else
  {
    vp8_pick_intra_mode(a2, &v25);
    if (*v6 != 1)
      goto LABEL_11;
  }
  v7 = a1[37041];
  v8 = **(unsigned int **)(a2 + 8656);
  v9 = v8 + (4 * v7);
  v10 = v7 + 4 * v8;
  v11 = 1 - (v9 + (v10 >> 1)) / v10;
  v12 = (v10 + (v9 >> 1)) / v9 - 1;
  if (v8 > v7)
    v13 = v12;
  else
    v13 = v11;
  *(_DWORD *)(a2 + 8672) = v13;
  v14 = (uint64_t)&a1[*(int *)(a2 + 8804) + 27008];
  v15 = *(_DWORD *)(a2 + 30156);
  v16 = *(_DWORD *)(a2 + 30144) + v13;
  v17 = ((v16 + v15) * SHIWORD(a1[*(int *)(a2 + 8804) + 27080])) >> 7;
  *(_WORD *)(a2 + 1928) = v17;
  *(_WORD *)(a2 + 2016) = v17;
  *(_WORD *)(a2 + 2104) = v17;
  *(_WORD *)(a2 + 2192) = v17;
  *(_WORD *)(a2 + 2280) = v17;
  *(_WORD *)(a2 + 2368) = v17;
  *(_WORD *)(a2 + 2456) = v17;
  *(_WORD *)(a2 + 2544) = v17;
  *(_WORD *)(a2 + 2632) = v17;
  *(_WORD *)(a2 + 2720) = v17;
  *(_WORD *)(a2 + 2808) = v17;
  *(_WORD *)(a2 + 2896) = v17;
  *(_WORD *)(a2 + 2984) = v17;
  *(_WORD *)(a2 + 3072) = v17;
  *(_WORD *)(a2 + 3160) = v17;
  *(_WORD *)(a2 + 3248) = v17;
  v18 = ((v16 + v15) * *(__int16 *)(v14 + 1314)) >> 7;
  *(_WORD *)(a2 + 3336) = v18;
  *(_WORD *)(a2 + 3424) = v18;
  *(_WORD *)(a2 + 3512) = v18;
  *(_WORD *)(a2 + 3600) = v18;
  *(_WORD *)(a2 + 3688) = v18;
  *(_WORD *)(a2 + 3776) = v18;
  *(_WORD *)(a2 + 3864) = v18;
  *(_WORD *)(a2 + 3952) = v18;
  v19 = *(__int16 *)(v14 + 802);
  if (v15 >= 0)
    v20 = v15;
  else
    v20 = v15 + 1;
  *(_WORD *)(a2 + 4040) = ((v16 + (v20 >> 1)) * v19) >> 7;
LABEL_11:
  if (**(_BYTE **)(a2 + 8096) == 4)
    vp8_encode_intra4x4mby(a2);
  else
    vp8_encode_intra16x16mby(a2);
  vp8_encode_intra16x16mbuv(a2);
  v21 = *(unsigned __int8 **)(a2 + 8096);
  v22 = *v21;
  v23 = v21[1];
  ++*(_DWORD *)(a2 + 4 * v22 + 29828);
  ++*(_DWORD *)(a2 + 4 * v23 + 29848);
  vp8_tokenize_mb((uint64_t)a1, (int8x16_t *)a2, a3);
  if (**(_BYTE **)(a2 + 8096) != 4)
    vp8_inverse_transform_mby(a2 + 4224);
  vp8_dequant_idct_add_uv_block_neon((int16x8_t *)(a2 + 5120), (int16x8_t *)(a2 + 6336), *(uint8x8_t **)(a2 + 8000), *(uint8x8_t **)(a2 + 8008), *(_DWORD *)(a2 + 7972), (_WORD *)(a2 + 6224));
  return v25;
}

uint8x8_t *vp8_inverse_transform_mby(uint64_t a1)
{
  int8x16_t *v1;
  int8x16_t v2;
  int16x4_t v3;
  int16x4_t v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  __int16 v21;
  __int16 v22;
  int16x8_t v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  int v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;

  if (**(_BYTE **)(a1 + 3872) == 9)
    return vp8_dequant_idct_add_y_block_neon((uint8x8_t *)(a1 + 384), (int16x8_t *)(a1 + 2016), *(uint8x8_t **)(a1 + 3768), *(_DWORD *)(a1 + 3728), a1 + 1984);
  v1 = *(int8x16_t **)(a1 + 3496);
  if (*(char *)(a1 + 2008) < 2)
  {
    v31 = (v1->i16[0] + 3) >> 3;
    *(_WORD *)(a1 + 384) = v31;
    *(_WORD *)(a1 + 416) = v31;
    *(_WORD *)(a1 + 448) = v31;
    *(_WORD *)(a1 + 480) = v31;
    v30 = v31;
    v29 = v31;
    v28 = v31;
    *(_WORD *)(a1 + 512) = v31;
    *(_WORD *)(a1 + 544) = v31;
    v27 = v31;
    v26 = v31;
    v25 = v31;
    v24 = v31;
    *(_WORD *)(a1 + 576) = v31;
    *(_WORD *)(a1 + 608) = v31;
    v22 = v31;
    v21 = v31;
    v32 = v31;
    v33 = v31;
    *(_WORD *)(a1 + 640) = v31;
    *(_WORD *)(a1 + 672) = v31;
    v34 = v31;
    v35 = v31;
    v36 = v31;
    v37 = v31;
  }
  else
  {
    v2 = v1[1];
    v3 = (int16x4_t)vextq_s8(v2, v2, 8uLL).u64[0];
    v4 = vadd_s16(v3, *(int16x4_t *)v1->i8);
    v5 = (int16x4_t)vextq_s8(*v1, *v1, 8uLL).u64[0];
    v6 = vadd_s16(*(int16x4_t *)v2.i8, v5);
    v7 = vsub_s16(*(int16x4_t *)v1->i8, v3);
    *(int16x4_t *)v2.i8 = vsub_s16(v5, *(int16x4_t *)v2.i8);
    v8 = (int32x2_t)vadd_s16(v4, v6);
    v9 = (int32x2_t)vsub_s16(v4, v6);
    v10 = (int32x2_t)vadd_s16(v7, *(int16x4_t *)v2.i8);
    v11 = (int32x2_t)vsub_s16(v7, *(int16x4_t *)v2.i8);
    *(int32x2_t *)v2.i8 = vzip1_s32(v8, v9);
    v12 = (int16x4_t)vzip1_s32(v10, v11);
    v13 = vtrn1_s16(*(int16x4_t *)v2.i8, v12);
    *(int16x4_t *)v2.i8 = vtrn2_s16(*(int16x4_t *)v2.i8, v12);
    v14 = (int16x4_t)vzip2_s32(v8, v9);
    v15 = (int16x4_t)vzip2_s32(v10, v11);
    v16 = vtrn1_s16(v14, v15);
    v17 = vtrn2_s16(v14, v15);
    *(int16x4_t *)v18.i8 = vadd_s16(v13, v17);
    *(int16x4_t *)v19.i8 = vadd_s16(*(int16x4_t *)v2.i8, v16);
    v18.u64[1] = (unint64_t)vsub_s16(v13, v17);
    v19.u64[1] = (unint64_t)vsub_s16(*(int16x4_t *)v2.i8, v16);
    v2.i64[0] = 0x3000300030003;
    v2.i64[1] = 0x3000300030003;
    v20 = vshrq_n_s16(vaddq_s16(vaddq_s16(v19, v18), (int16x8_t)v2), 3uLL);
    v21 = v20.i16[0];
    v22 = v20.i16[4];
    *(_WORD *)(a1 + 416) = v20.i16[4];
    v23 = vshrq_n_s16(vaddq_s16(vsubq_s16(v18, v19), (int16x8_t)v2), 3uLL);
    v24 = v23.i16[0];
    v25 = v23.i16[4];
    *(_WORD *)(a1 + 480) = v23.i16[4];
    v26 = v20.i16[1];
    *(_WORD *)(a1 + 512) = v20.i16[1];
    v27 = v20.i16[5];
    *(_WORD *)(a1 + 544) = v20.i16[5];
    v28 = v23.i16[1];
    *(_WORD *)(a1 + 576) = v23.i16[1];
    v29 = v23.i16[5];
    *(_WORD *)(a1 + 608) = v23.i16[5];
    *(_WORD *)(a1 + 384) = v20.i16[0];
    v30 = v20.i16[2];
    *(_WORD *)(a1 + 640) = v20.i16[2];
    *(_WORD *)(a1 + 448) = v23.i16[0];
    LOWORD(v31) = v20.i16[6];
    *(_WORD *)(a1 + 672) = v20.i16[6];
    v32 = v23.i16[2];
    v33 = v23.i16[6];
    v34 = v20.i16[3];
    v35 = v20.i16[7];
    v36 = v23.i16[3];
    v37 = v23.i16[7];
  }
  *(_WORD *)(a1 + 704) = v32;
  *(_WORD *)(a1 + 736) = v33;
  *(_WORD *)(a1 + 768) = v34;
  *(_WORD *)(a1 + 800) = v35;
  *(_WORD *)(a1 + 832) = v36;
  *(_WORD *)(a1 + 864) = v37;
  if (!*(_BYTE *)(a1 + 1984) && v21)
    *(_BYTE *)(a1 + 1984) = 1;
  if (!*(_BYTE *)(a1 + 1985) && v22)
    *(_BYTE *)(a1 + 1985) = 1;
  if (!*(_BYTE *)(a1 + 1986) && v24)
    *(_BYTE *)(a1 + 1986) = 1;
  if (!*(_BYTE *)(a1 + 1987) && v25)
    *(_BYTE *)(a1 + 1987) = 1;
  if (!*(_BYTE *)(a1 + 1988) && v26)
    *(_BYTE *)(a1 + 1988) = 1;
  if (!*(_BYTE *)(a1 + 1989) && v27)
    *(_BYTE *)(a1 + 1989) = 1;
  if (!*(_BYTE *)(a1 + 1990) && v28)
    *(_BYTE *)(a1 + 1990) = 1;
  if (!*(_BYTE *)(a1 + 1991) && v29)
    *(_BYTE *)(a1 + 1991) = 1;
  if (!*(_BYTE *)(a1 + 1992) && v30)
    *(_BYTE *)(a1 + 1992) = 1;
  if (!*(_BYTE *)(a1 + 1993) && (_WORD)v31)
    *(_BYTE *)(a1 + 1993) = 1;
  if (!*(_BYTE *)(a1 + 1994) && v32)
    *(_BYTE *)(a1 + 1994) = 1;
  if (!*(_BYTE *)(a1 + 1995) && v33)
    *(_BYTE *)(a1 + 1995) = 1;
  if (!*(_BYTE *)(a1 + 1996) && v34)
    *(_BYTE *)(a1 + 1996) = 1;
  if (!*(_BYTE *)(a1 + 1997) && v35)
    *(_BYTE *)(a1 + 1997) = 1;
  if (!*(_BYTE *)(a1 + 1998) && v36)
    *(_BYTE *)(a1 + 1998) = 1;
  if (!*(_BYTE *)(a1 + 1999))
  {
    if (v37)
      *(_BYTE *)(a1 + 1999) = 1;
  }
  return vp8_dequant_idct_add_y_block_neon((uint8x8_t *)(a1 + 384), (int16x8_t *)(a1 + 2048), *(uint8x8_t **)(a1 + 3768), *(_DWORD *)(a1 + 3728), a1 + 1984);
}

uint64_t vp8cx_encode_inter_macroblock(_DWORD *a1, uint64_t a2, uint64_t *a3, unsigned int a4, signed int a5, int a6, int a7)
{
  _DWORD *v10;
  int *v11;
  _BYTE *v12;
  int *v13;
  _DWORD *v14;
  unsigned int *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int *v38;
  signed int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  int v52;
  unsigned int v53;
  int v54;

  v10 = a1 + 35720;
  v11 = a1 + 27637;
  v54 = 0;
  *(_DWORD *)(a2 + 8768) = 0;
  v12 = (_BYTE *)(a2 + 0x2000);
  v13 = (int *)(a2 + 30140);
  if (*(_BYTE *)(a2 + 0x2000))
    v14 = &a1[*(unsigned __int8 *)(*(_QWORD *)(a2 + 8096) + 11) + 35764];
  else
    v14 = a1 + 28617;
  v15 = a1 + 37041;
  v52 = 0;
  v53 = 0;
  *(_DWORD *)(a2 + 8772) = *v14;
  *(_BYTE *)(a2 + 8836) = 0;
  *(_OWORD *)(a2 + 8820) = 0u;
  if (*v10)
  {
    v16 = (_QWORD *)(a2 + 34280);
    v17 = *v13;
    if (a1[35752])
    {
      *v16 = vp8_fast_quantize_b_neon;
      *v13 = 0;
    }
    vp8_rd_pick_inter_mode(a1, a2, a4, a5, &v53, &v52, &v54, a6, a7);
    if (v10[2])
      *v16 = vp8_regular_quantize_b_c;
    *v13 = v17;
  }
  else
  {
    vp8_pick_inter_mode((uint64_t)a1, a2, a4, a5, &v53, &v52, &v54, a6, a7);
  }
  *(_QWORD *)(a2 + 29864) += v52;
  *(_QWORD *)(a2 + 29872) += v54;
  if (v11[991] == 1)
  {
    v18 = *v15;
    v19 = **(unsigned int **)(a2 + 8656);
    v20 = v19 + (4 * v18);
    v21 = v18 + 4 * v19;
    v22 = 1 - (v20 + (v21 >> 1)) / v21;
    v23 = (v21 + (v20 >> 1)) / v20 - 1;
    if (v19 > v18)
      v24 = v23;
    else
      v24 = v22;
    *(_DWORD *)(a2 + 8672) = v24;
  }
  if (*v12)
  {
    if (!a1[37318])
    {
      if (v10[51])
      {
        v28 = *(_BYTE **)(a2 + 8096);
        if (v28[11] == 1 && (v28[2] != 1 || *v28 != 7))
        {
          v28[11] = 0;
          vp8cx_mb_init_quantizer((uint64_t)a1, a2, 1);
        }
      }
    }
  }
  v13[1] = 0;
  v25 = *v13;
  if (*v13)
  {
    v26 = *(unsigned __int8 **)(a2 + 8096);
    v25 = v26[2];
    if (v26[2])
    {
      v27 = *v26;
      if (v27 == 9)
      {
        v25 = 0;
      }
      else
      {
        if (v27 == 7)
        {
          if (v25 == 1 || v11[992] != 1)
            v25 = 6;
          else
            v25 = 12;
        }
        else
        {
          v25 = 4;
        }
        v13[1] = v25;
      }
    }
  }
  if (v10[2])
  {
    v29 = (uint64_t)&a1[*(int *)(a2 + 8804) + 27008];
    v30 = v13[4];
    v31 = *(_DWORD *)(a2 + 8672) + v25;
    v32 = ((v31 + v30) * SHIWORD(a1[*(int *)(a2 + 8804) + 27080])) >> 7;
    *(_WORD *)(a2 + 1928) = v32;
    *(_WORD *)(a2 + 2016) = v32;
    *(_WORD *)(a2 + 2104) = v32;
    *(_WORD *)(a2 + 2192) = v32;
    *(_WORD *)(a2 + 2280) = v32;
    *(_WORD *)(a2 + 2368) = v32;
    *(_WORD *)(a2 + 2456) = v32;
    *(_WORD *)(a2 + 2544) = v32;
    *(_WORD *)(a2 + 2632) = v32;
    *(_WORD *)(a2 + 2720) = v32;
    *(_WORD *)(a2 + 2808) = v32;
    *(_WORD *)(a2 + 2896) = v32;
    *(_WORD *)(a2 + 2984) = v32;
    *(_WORD *)(a2 + 3072) = v32;
    *(_WORD *)(a2 + 3160) = v32;
    *(_WORD *)(a2 + 3248) = v32;
    v33 = ((v31 + v30) * *(__int16 *)(v29 + 1314)) >> 7;
    *(_WORD *)(a2 + 3336) = v33;
    *(_WORD *)(a2 + 3424) = v33;
    *(_WORD *)(a2 + 3512) = v33;
    *(_WORD *)(a2 + 3600) = v33;
    *(_WORD *)(a2 + 3688) = v33;
    *(_WORD *)(a2 + 3776) = v33;
    *(_WORD *)(a2 + 3864) = v33;
    *(_WORD *)(a2 + 3952) = v33;
    v34 = *(__int16 *)(v29 + 802);
    if (v30 >= 0)
      v35 = v30;
    else
      v35 = v30 + 1;
    *(_WORD *)(a2 + 4040) = ((v31 + (v35 >> 1)) * v34) >> 7;
  }
  v36 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8096) + 2);
  v37 = a2 + 4 * *(unsigned __int8 *)(*(_QWORD *)(a2 + 8096) + 2);
  ++*(_DWORD *)(v37 + 29880);
  if (v36 == 2)
  {
    v38 = v11 + 1;
    v39 = a4;
    goto LABEL_46;
  }
  v38 = v11;
  v39 = a4;
  if (v36 == 1)
    goto LABEL_46;
  if (v36)
  {
    v38 = v11 + 2;
LABEL_46:
    v40 = (uint64_t)&a1[40 * *v38 + 27472];
    v41 = *(_QWORD *)&a1[40 * *v38 + 27488];
    *(_QWORD *)(a2 + 7832) = *(_QWORD *)&a1[40 * *v38 + 27486] + v39;
    *(_QWORD *)(a2 + 7840) = v41 + a5;
    *(_QWORD *)(a2 + 7848) = *(_QWORD *)(v40 + 72) + a5;
    if (*(_DWORD *)(a2 + 8768))
    {
      vp8_build_inter16x16_predictors_mb(a2 + 4224, *(_OWORD **)(a2 + 7992), *(_QWORD **)(a2 + 8000), *(_QWORD **)(a2 + 8008), *(_DWORD *)(a2 + 7952), *(unsigned int *)(a2 + 7972));
      if (!*(_DWORD *)(a2 + 8768))
        goto LABEL_58;
    }
    else
    {
      vp8_encode_inter16x16(a2);
      if (!*(_DWORD *)(a2 + 8768))
        goto LABEL_58;
    }
LABEL_50:
    v42 = *(unsigned __int8 **)(a2 + 8096);
    v42[9] = 1;
    if (v11[135])
    {
      ++*(_DWORD *)(a2 + 8840);
      v43 = *v42;
      if (v43 == 4 || v43 == 9)
      {
        **(_QWORD **)(a2 + 8176) = 0;
        **(_QWORD **)(a2 + 8184) = 0;
      }
      else
      {
        v44 = *(_QWORD *)(a2 + 8176);
        *(_BYTE *)(v44 + 8) = 0;
        *(_QWORD *)v44 = 0;
        v45 = *(_QWORD *)(a2 + 8184);
        *(_BYTE *)(v45 + 8) = 0;
        *(_QWORD *)v45 = 0;
      }
    }
    else
    {
      vp8_stuff_mb((uint64_t)a1, a2, a3);
    }
    return v53;
  }
  vp8_encode_intra16x16mbuv(a2);
  if (**(_BYTE **)(a2 + 8096) == 4)
    vp8_encode_intra4x4mby(a2);
  else
    vp8_encode_intra16x16mby(a2);
  v46 = *(unsigned __int8 **)(a2 + 8096);
  v47 = *v46;
  v48 = v46[1];
  ++*(_DWORD *)(a2 + 4 * v47 + 29828);
  ++*(_DWORD *)(a2 + 4 * v48 + 29848);
  if (*(_DWORD *)(a2 + 8768))
    goto LABEL_50;
LABEL_58:
  vp8_tokenize_mb((uint64_t)a1, (int8x16_t *)a2, a3);
  if (**(_BYTE **)(a2 + 8096) != 4)
    vp8_inverse_transform_mby(a2 + 4224);
  vp8_dequant_idct_add_uv_block_neon((int16x8_t *)(a2 + 5120), (int16x8_t *)(a2 + 6336), *(uint8x8_t **)(a2 + 8000), *(uint8x8_t **)(a2 + 8008), *(_DWORD *)(a2 + 7972), (_WORD *)(a2 + 6224));
  return v53;
}

uint64_t vp8_encode_intra(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int8x16_t *v6;
  int8x16_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  __int16 v26;
  __int16 v27;
  int16x8_t v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  int v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int16x8_t v125;
  int16x8_t v126;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 8096);
    *(_WORD *)v3 = 0;
    *(_BYTE *)(v3 + 2) = 0;
    vp8_build_intra_predictors_mby_s(a1 + 4224, *(_QWORD *)(a1 + 7992) - *(int *)(a1 + 7952), (_BYTE *)(*(_QWORD *)(a1 + 7992) - 1), *(_DWORD *)(a1 + 7952), *(_QWORD *)(a1 + 7992), *(_DWORD *)(a1 + 7952));
    vpx_subtract_block_neon(16, 16, (uint16x8_t *)a1, 16, **(uint8x8_t ***)(a1 + 1936), *(int *)(a1 + 1948), *(uint8x8_t **)(a1 + 7992), *(int *)(a1 + 7952));
    vp8_transform_intra_mby(a1);
    vp8_quantize_mby(a1);
    if (*(_DWORD *)(a1 + 8800))
      vp8_optimize_mby(a1);
    if (**(_BYTE **)(a1 + 8096) == 9)
    {
      v4 = 6240;
    }
    else
    {
      v5 = (_BYTE *)(a1 + 6208);
      v6 = *(int8x16_t **)(a1 + 7720);
      if (*(char *)(a1 + 6232) < 2)
      {
        v36 = (v6->i16[0] + 3) >> 3;
        *(_WORD *)(a1 + 4608) = v36;
        *(_WORD *)(a1 + 4640) = v36;
        *(_WORD *)(a1 + 4672) = v36;
        *(_WORD *)(a1 + 4704) = v36;
        v35 = v36;
        v34 = v36;
        v33 = v36;
        *(_WORD *)(a1 + 4736) = v36;
        *(_WORD *)(a1 + 4768) = v36;
        v32 = v36;
        v31 = v36;
        v30 = v36;
        v29 = v36;
        *(_WORD *)(a1 + 4800) = v36;
        *(_WORD *)(a1 + 4832) = v36;
        v27 = v36;
        v26 = v36;
        v37 = v36;
        v38 = v36;
        *(_WORD *)(a1 + 4864) = v36;
        *(_WORD *)(a1 + 4896) = v36;
        v39 = v36;
        v40 = v36;
        v41 = v36;
        v42 = v36;
      }
      else
      {
        v7 = v6[1];
        v8 = (int16x4_t)vextq_s8(v7, v7, 8uLL).u64[0];
        v9 = vadd_s16(v8, *(int16x4_t *)v6->i8);
        v10 = (int16x4_t)vextq_s8(*v6, *v6, 8uLL).u64[0];
        v11 = vadd_s16(*(int16x4_t *)v7.i8, v10);
        v12 = vsub_s16(*(int16x4_t *)v6->i8, v8);
        *(int16x4_t *)v7.i8 = vsub_s16(v10, *(int16x4_t *)v7.i8);
        v13 = (int32x2_t)vadd_s16(v9, v11);
        v14 = (int32x2_t)vsub_s16(v9, v11);
        v15 = (int32x2_t)vadd_s16(v12, *(int16x4_t *)v7.i8);
        v16 = (int32x2_t)vsub_s16(v12, *(int16x4_t *)v7.i8);
        *(int32x2_t *)v7.i8 = vzip1_s32(v13, v14);
        v17 = (int16x4_t)vzip1_s32(v15, v16);
        v18 = vtrn1_s16(*(int16x4_t *)v7.i8, v17);
        *(int16x4_t *)v7.i8 = vtrn2_s16(*(int16x4_t *)v7.i8, v17);
        v19 = (int16x4_t)vzip2_s32(v13, v14);
        v20 = (int16x4_t)vzip2_s32(v15, v16);
        v21 = vtrn1_s16(v19, v20);
        v22 = vtrn2_s16(v19, v20);
        *(int16x4_t *)v23.i8 = vadd_s16(v18, v22);
        *(int16x4_t *)v24.i8 = vadd_s16(*(int16x4_t *)v7.i8, v21);
        v23.u64[1] = (unint64_t)vsub_s16(v18, v22);
        v24.u64[1] = (unint64_t)vsub_s16(*(int16x4_t *)v7.i8, v21);
        v7.i64[0] = 0x3000300030003;
        v7.i64[1] = 0x3000300030003;
        v25 = vshrq_n_s16(vaddq_s16(vaddq_s16(v24, v23), (int16x8_t)v7), 3uLL);
        v26 = v25.i16[0];
        *(_WORD *)(a1 + 4608) = v25.i16[0];
        v27 = v25.i16[4];
        *(_WORD *)(a1 + 4640) = v25.i16[4];
        v28 = vshrq_n_s16(vaddq_s16(vsubq_s16(v23, v24), (int16x8_t)v7), 3uLL);
        v29 = v28.i16[0];
        *(_WORD *)(a1 + 4672) = v28.i16[0];
        v30 = v28.i16[4];
        *(_WORD *)(a1 + 4704) = v28.i16[4];
        v31 = v25.i16[1];
        *(_WORD *)(a1 + 4736) = v25.i16[1];
        v32 = v25.i16[5];
        *(_WORD *)(a1 + 4768) = v25.i16[5];
        v33 = v28.i16[1];
        *(_WORD *)(a1 + 4800) = v28.i16[1];
        v34 = v28.i16[5];
        *(_WORD *)(a1 + 4832) = v28.i16[5];
        v35 = v25.i16[2];
        *(_WORD *)(a1 + 4864) = v25.i16[2];
        LOWORD(v36) = v25.i16[6];
        *(_WORD *)(a1 + 4896) = v25.i16[6];
        v37 = v28.i16[2];
        v38 = v28.i16[6];
        v39 = v25.i16[3];
        v40 = v25.i16[7];
        v41 = v28.i16[3];
        v42 = v28.i16[7];
      }
      *(_WORD *)(a1 + 4928) = v37;
      *(_WORD *)(a1 + 4960) = v38;
      *(_WORD *)(a1 + 4992) = v39;
      *(_WORD *)(a1 + 5024) = v40;
      *(_WORD *)(a1 + 5056) = v41;
      *(_WORD *)(a1 + 5088) = v42;
      if (!*v5 && v26)
        *v5 = 1;
      if (!*(_BYTE *)(a1 + 6209) && v27)
        *(_BYTE *)(a1 + 6209) = 1;
      if (!*(_BYTE *)(a1 + 6210) && v29)
        *(_BYTE *)(a1 + 6210) = 1;
      if (!*(_BYTE *)(a1 + 6211) && v30)
        *(_BYTE *)(a1 + 6211) = 1;
      if (!*(_BYTE *)(a1 + 6212) && v31)
        *(_BYTE *)(a1 + 6212) = 1;
      if (!*(_BYTE *)(a1 + 6213) && v32)
        *(_BYTE *)(a1 + 6213) = 1;
      if (!*(_BYTE *)(a1 + 6214) && v33)
        *(_BYTE *)(a1 + 6214) = 1;
      if (!*(_BYTE *)(a1 + 6215) && v34)
        *(_BYTE *)(a1 + 6215) = 1;
      if (!*(_BYTE *)(a1 + 6216) && v35)
        *(_BYTE *)(a1 + 6216) = 1;
      if (!*(_BYTE *)(a1 + 6217) && (_WORD)v36)
        *(_BYTE *)(a1 + 6217) = 1;
      if (!*(_BYTE *)(a1 + 6218) && v37)
        *(_BYTE *)(a1 + 6218) = 1;
      if (!*(_BYTE *)(a1 + 6219) && v38)
        *(_BYTE *)(a1 + 6219) = 1;
      if (!*(_BYTE *)(a1 + 6220) && v39)
        *(_BYTE *)(a1 + 6220) = 1;
      if (!*(_BYTE *)(a1 + 6221) && v40)
        *(_BYTE *)(a1 + 6221) = 1;
      if (!*(_BYTE *)(a1 + 6222) && v41)
        *(_BYTE *)(a1 + 6222) = 1;
      if (!*(_BYTE *)(a1 + 6223) && v42)
        *(_BYTE *)(a1 + 6223) = 1;
      v4 = 6272;
    }
    vp8_dequant_idct_add_y_block_neon((uint8x8_t *)(a1 + 4608), (int16x8_t *)(a1 + v4), *(uint8x8_t **)(a1 + 7992), *(_DWORD *)(a1 + 7952), a1 + 6208);
  }
  else
  {
    *(_DWORD *)(a1 + 6416) = 0;
    vp8_encode_intra4x4block(a1, 0);
    *(_DWORD *)(a1 + 6472) = 0;
    vp8_encode_intra4x4block(a1, 1);
    *(_DWORD *)(a1 + 6528) = 0;
    vp8_encode_intra4x4block(a1, 2);
    *(_DWORD *)(a1 + 6584) = 0;
    vp8_encode_intra4x4block(a1, 3);
    *(_DWORD *)(a1 + 6640) = 0;
    vp8_encode_intra4x4block(a1, 4);
    *(_DWORD *)(a1 + 6696) = 0;
    vp8_encode_intra4x4block(a1, 5);
    *(_DWORD *)(a1 + 6752) = 0;
    vp8_encode_intra4x4block(a1, 6);
    *(_DWORD *)(a1 + 6808) = 0;
    vp8_encode_intra4x4block(a1, 7);
    *(_DWORD *)(a1 + 6864) = 0;
    vp8_encode_intra4x4block(a1, 8);
    *(_DWORD *)(a1 + 6920) = 0;
    vp8_encode_intra4x4block(a1, 9);
    *(_DWORD *)(a1 + 6976) = 0;
    vp8_encode_intra4x4block(a1, 10);
    *(_DWORD *)(a1 + 7032) = 0;
    vp8_encode_intra4x4block(a1, 11);
    *(_DWORD *)(a1 + 7088) = 0;
    vp8_encode_intra4x4block(a1, 12);
    *(_DWORD *)(a1 + 7144) = 0;
    vp8_encode_intra4x4block(a1, 13);
    *(_DWORD *)(a1 + 7200) = 0;
    vp8_encode_intra4x4block(a1, 14);
    *(_DWORD *)(a1 + 7256) = 0;
    vp8_encode_intra4x4block(a1, 15);
  }
  v43 = *(int16x8_t *)a1;
  v44 = *(int16x8_t *)(a1 + 16);
  v45 = *(int16x8_t *)(a1 + 32);
  v46 = *(int16x8_t *)(a1 + 48);
  v47 = vmull_high_s16(v45, v45);
  v48 = vmull_high_s16(v46, v46);
  v49 = vmlal_s16(vmull_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v45.i8), *(int16x4_t *)v43.i8, *(int16x4_t *)v43.i8);
  v50 = vmlal_high_s16(v47, v43, v43);
  v51 = vmlal_s16(vmull_s16(*(int16x4_t *)v46.i8, *(int16x4_t *)v46.i8), *(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8);
  v52 = vmlal_high_s16(v48, v44, v44);
  v53 = *(int16x8_t *)(a1 + 64);
  v54 = *(int16x8_t *)(a1 + 80);
  v55 = vmlal_high_s16(v50, v53, v53);
  v56 = vmlal_s16(v49, *(int16x4_t *)v53.i8, *(int16x4_t *)v53.i8);
  v57 = vmlal_high_s16(v52, v54, v54);
  v58 = vmlal_s16(v51, *(int16x4_t *)v54.i8, *(int16x4_t *)v54.i8);
  v59 = *(int16x8_t *)(a1 + 96);
  v60 = *(int16x8_t *)(a1 + 112);
  v61 = vmlal_s16(v56, *(int16x4_t *)v59.i8, *(int16x4_t *)v59.i8);
  v62 = vmlal_high_s16(v55, v59, v59);
  v63 = vmlal_s16(v58, *(int16x4_t *)v60.i8, *(int16x4_t *)v60.i8);
  v64 = vmlal_high_s16(v57, v60, v60);
  v65 = *(int16x8_t *)(a1 + 128);
  v66 = *(int16x8_t *)(a1 + 144);
  v67 = vmlal_high_s16(v62, v65, v65);
  v68 = vmlal_s16(v61, *(int16x4_t *)v65.i8, *(int16x4_t *)v65.i8);
  v69 = vmlal_high_s16(v64, v66, v66);
  v70 = vmlal_s16(v63, *(int16x4_t *)v66.i8, *(int16x4_t *)v66.i8);
  v71 = *(int16x8_t *)(a1 + 160);
  v72 = *(int16x8_t *)(a1 + 176);
  v73 = vmlal_s16(v68, *(int16x4_t *)v71.i8, *(int16x4_t *)v71.i8);
  v74 = vmlal_high_s16(v67, v71, v71);
  v75 = vmlal_s16(v70, *(int16x4_t *)v72.i8, *(int16x4_t *)v72.i8);
  v76 = vmlal_high_s16(v69, v72, v72);
  v77 = *(int16x8_t *)(a1 + 192);
  v78 = *(int16x8_t *)(a1 + 208);
  v79 = vmlal_high_s16(v74, v77, v77);
  v80 = vmlal_s16(v73, *(int16x4_t *)v77.i8, *(int16x4_t *)v77.i8);
  v81 = vmlal_high_s16(v76, v78, v78);
  v82 = vmlal_s16(v75, *(int16x4_t *)v78.i8, *(int16x4_t *)v78.i8);
  v83 = *(int16x8_t *)(a1 + 224);
  v84 = *(int16x8_t *)(a1 + 240);
  v85 = vmlal_s16(v80, *(int16x4_t *)v83.i8, *(int16x4_t *)v83.i8);
  v86 = vmlal_high_s16(v79, v83, v83);
  v87 = vmlal_s16(v82, *(int16x4_t *)v84.i8, *(int16x4_t *)v84.i8);
  v88 = vmlal_high_s16(v81, v84, v84);
  v89 = *(int16x8_t *)(a1 + 256);
  v90 = *(int16x8_t *)(a1 + 272);
  v91 = vmlal_high_s16(v86, v89, v89);
  v92 = vmlal_s16(v85, *(int16x4_t *)v89.i8, *(int16x4_t *)v89.i8);
  v93 = vmlal_high_s16(v88, v90, v90);
  v94 = vmlal_s16(v87, *(int16x4_t *)v90.i8, *(int16x4_t *)v90.i8);
  v95 = *(int16x8_t *)(a1 + 288);
  v96 = *(int16x8_t *)(a1 + 304);
  v97 = vmlal_s16(v92, *(int16x4_t *)v95.i8, *(int16x4_t *)v95.i8);
  v98 = vmlal_high_s16(v91, v95, v95);
  v99 = vmlal_s16(v94, *(int16x4_t *)v96.i8, *(int16x4_t *)v96.i8);
  v100 = vmlal_high_s16(v93, v96, v96);
  v101 = *(int16x8_t *)(a1 + 320);
  v102 = *(int16x8_t *)(a1 + 336);
  v103 = vmlal_high_s16(v98, v101, v101);
  v104 = vmlal_s16(v97, *(int16x4_t *)v101.i8, *(int16x4_t *)v101.i8);
  v105 = vmlal_high_s16(v100, v102, v102);
  v106 = vmlal_s16(v99, *(int16x4_t *)v102.i8, *(int16x4_t *)v102.i8);
  v107 = *(int16x8_t *)(a1 + 352);
  v108 = *(int16x8_t *)(a1 + 368);
  v109 = vmlal_s16(v104, *(int16x4_t *)v107.i8, *(int16x4_t *)v107.i8);
  v110 = vmlal_high_s16(v103, v107, v107);
  v111 = vmlal_s16(v106, *(int16x4_t *)v108.i8, *(int16x4_t *)v108.i8);
  v112 = vmlal_high_s16(v105, v108, v108);
  v113 = *(int16x8_t *)(a1 + 384);
  v114 = *(int16x8_t *)(a1 + 400);
  v115 = vmlal_high_s16(v110, v113, v113);
  v116 = vmlal_s16(v109, *(int16x4_t *)v113.i8, *(int16x4_t *)v113.i8);
  v117 = vmlal_high_s16(v112, v114, v114);
  v118 = vmlal_s16(v111, *(int16x4_t *)v114.i8, *(int16x4_t *)v114.i8);
  v119 = *(int16x8_t *)(a1 + 416);
  v120 = *(int16x8_t *)(a1 + 432);
  v121 = vmlal_s16(v116, *(int16x4_t *)v119.i8, *(int16x4_t *)v119.i8);
  v122 = vmlal_high_s16(v115, v119, v119);
  v123 = vmlal_s16(v118, *(int16x4_t *)v120.i8, *(int16x4_t *)v120.i8);
  v124 = vmlal_high_s16(v117, v120, v120);
  v125 = *(int16x8_t *)(a1 + 448);
  v126 = *(int16x8_t *)(a1 + 464);
  return vaddvq_s32(vaddq_s32(vaddq_s32(vmlal_s16(vmlal_s16(v123, *(int16x4_t *)v126.i8, *(int16x4_t *)v126.i8), *(int16x4_t *)(a1 + 496), *(int16x4_t *)(a1 + 496)), vmlal_s16(vmlal_s16(v121, *(int16x4_t *)v125.i8, *(int16x4_t *)v125.i8), *(int16x4_t *)(a1 + 480), *(int16x4_t *)(a1 + 480))), vaddq_s32(vmlal_high_s16(vmlal_high_s16(v124, v126, v126), *(int16x8_t *)(a1 + 496), *(int16x8_t *)(a1 + 496)), vmlal_high_s16(vmlal_high_s16(v122, v125, v125), *(int16x8_t *)(a1 + 480), *(int16x8_t *)(a1 + 480)))));
}

uint64_t vp8_encode_intra16x16mby(uint64_t a1)
{
  uint64_t result;

  vp8_build_intra_predictors_mby_s(a1 + 4224, *(_QWORD *)(a1 + 7992) - *(int *)(a1 + 7952), (_BYTE *)(*(_QWORD *)(a1 + 7992) - 1), *(_DWORD *)(a1 + 7952), *(_QWORD *)(a1 + 7992), *(_DWORD *)(a1 + 7952));
  vpx_subtract_block_neon(16, 16, (uint16x8_t *)a1, 16, **(uint8x8_t ***)(a1 + 1936), *(int *)(a1 + 1948), *(uint8x8_t **)(a1 + 7992), *(int *)(a1 + 7952));
  vp8_transform_intra_mby(a1);
  result = vp8_quantize_mby(a1);
  if (*(_DWORD *)(a1 + 8800))
    return vp8_optimize_mby(a1);
  return result;
}

int8x8_t vp8_encode_intra4x4block(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  char v7;
  uint64_t v8;
  __int32 **v9;
  uint64_t v10;
  int16x4_t *v11;
  int8x8_t result;
  __int32 *v13;
  uint16x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  _DWORD *v17;
  _BYTE v18[12];
  _QWORD v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 34256;
  v3 = a1 + 56 * a2;
  v4 = a1 + 88 * a2;
  v5 = *(int *)(a1 + 7952);
  v6 = (_DWORD *)(*(_QWORD *)(a1 + 7992) + *(int *)(v3 + 6400));
  v7 = *((_BYTE *)v6 - v5 - 1);
  v8 = *(unsigned int *)(v3 + 6416);
  v9 = (__int32 **)(v3 + 6384);
  v10 = *(_QWORD *)(v3 + 6384);
  v18[0] = *((_BYTE *)v6 - 1);
  v18[1] = *((_BYTE *)v6 + v5 - 1);
  v18[2] = *((_BYTE *)v6 + 2 * v5 - 1);
  v18[3] = *((_BYTE *)v6 + 3 * v5 - 1);
  v19[0] = *(_QWORD *)((char *)v6 - v5);
  v18[11] = v7;
  ((void (*)(uint64_t, uint64_t, _QWORD *, _BYTE *))*(&pred_0 + v8))(v10, 16, v19, v18);
  vpx_subtract_block_neon(4, 4, *(uint16x8_t **)(v4 + 1864), 16, (uint8x8_t *)(**(_QWORD **)(v4 + 1936) + *(int *)(v4 + 1944)), *(int *)(v4 + 1948), *(uint8x8_t **)(v3 + 6384), 16);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(v4 + 1864), *(_QWORD *)(v4 + 1872), 32);
  (*(void (**)(uint64_t, uint64_t))(v2 + 24))(v4 + 1864, v3 + 6368);
  v11 = *(int16x4_t **)(v3 + 6376);
  if (**(char **)(v3 + 6408) >= 2)
    return vp8_short_idct4x4llm_neon(v11, *v9, 16, v6, v5);
  v13 = *v9;
  v14 = (uint16x8_t)vdupq_n_s16((v11->i16[0] + 4) >> 3);
  v15.i32[0] = **v9;
  v15.i32[1] = (*v9)[4];
  v16 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v14, v15));
  *v6 = v16.i32[0];
  *(_DWORD *)((char *)v6 + v5) = v16.i32[1];
  v17 = (_DWORD *)((char *)v6 + v5 + v5);
  v16.i32[0] = v13[8];
  v16.i32[1] = v13[12];
  result = vqmovun_s16((int16x8_t)vaddw_u8(v14, v16));
  *v17 = result.i32[0];
  *(_DWORD *)((char *)v17 + v5) = result.i32[1];
  return result;
}

int8x8_t vp8_encode_intra4x4mby(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;

  v2 = *(int *)(a1 + 7952);
  v3 = (_DWORD *)(*(_QWORD *)(a1 + 7992) - v2);
  v4 = v3[4];
  v3 += 4;
  v3[v2] = v4;
  v3[2 * v2] = *v3;
  v3[3 * (int)v2] = *v3;
  vp8_encode_intra4x4block(a1, 0);
  vp8_encode_intra4x4block(a1, 1);
  vp8_encode_intra4x4block(a1, 2);
  vp8_encode_intra4x4block(a1, 3);
  vp8_encode_intra4x4block(a1, 4);
  vp8_encode_intra4x4block(a1, 5);
  vp8_encode_intra4x4block(a1, 6);
  vp8_encode_intra4x4block(a1, 7);
  vp8_encode_intra4x4block(a1, 8);
  vp8_encode_intra4x4block(a1, 9);
  vp8_encode_intra4x4block(a1, 10);
  vp8_encode_intra4x4block(a1, 11);
  vp8_encode_intra4x4block(a1, 12);
  vp8_encode_intra4x4block(a1, 13);
  vp8_encode_intra4x4block(a1, 14);
  return vp8_encode_intra4x4block(a1, 15);
}

uint64_t vp8_encode_intra16x16mbuv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void (*v8)(void);
  uint8x8_t *v9;
  uint64_t v10;
  uint8x8_t *v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[16];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 34264;
  v3 = *(_QWORD *)(a1 + 8000);
  v4 = *(int *)(a1 + 7972);
  v5 = *(_QWORD *)(a1 + 8008);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8096) + 1);
  v14[8] = *(_BYTE *)(v3 - 1);
  v14[0] = *(_BYTE *)(v5 - 1);
  v14[9] = *(_BYTE *)(v3 - 1 + v4);
  v14[1] = *(_BYTE *)(v5 - 1 + v4);
  v14[10] = *(_BYTE *)(v3 - 1 + 2 * v4);
  v14[2] = *(_BYTE *)(v5 - 1 + 2 * v4);
  v14[11] = *(_BYTE *)(v3 - 1 + 3 * v4);
  v14[3] = *(_BYTE *)(v5 - 1 + 3 * v4);
  v14[12] = *(_BYTE *)(v3 - 1 + 4 * v4);
  v14[4] = *(_BYTE *)(v5 - 1 + 4 * v4);
  v14[13] = *(_BYTE *)(v3 - 1 + 5 * v4);
  v14[5] = *(_BYTE *)(v5 - 1 + 5 * v4);
  v14[14] = *(_BYTE *)(v3 - 1 + 6 * v4);
  v14[6] = *(_BYTE *)(v5 - 1 + 6 * v4);
  v14[15] = *(_BYTE *)(v3 - 1 + 7 * v4);
  v14[7] = *(_BYTE *)(v5 - 1 + 7 * v4);
  if (v6)
    v7 = (uint64_t *)((char *)&pred + 16 * v6);
  else
    v7 = &dc_pred[4 * *(int *)(a1 + 8116) + 2 * *(int *)(a1 + 8112)];
  v8 = (void (*)(void))v7[1];
  v8();
  ((void (*)(uint64_t, uint64_t, uint64_t, _BYTE *))v8)(v5, v4, v5 - v4, v14);
  v9 = *(uint8x8_t **)(a1 + 4136);
  v10 = *(int *)(a1 + 4100);
  v11 = *(uint8x8_t **)(a1 + 8008);
  v12 = *(int *)(a1 + 7972);
  vpx_subtract_block_neon(8, 8, (uint16x8_t *)(a1 + 512), 8, *(uint8x8_t **)(a1 + 4128), v10, *(uint8x8_t **)(a1 + 8000), v12);
  vpx_subtract_block_neon(8, 8, (uint16x8_t *)(a1 + 640), 8, v9, v10, v11, v12);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 3272), *(_QWORD *)(a1 + 3280), 16);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 3448), *(_QWORD *)(a1 + 3456), 16);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 3624), *(_QWORD *)(a1 + 3632), 16);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 3800), *(_QWORD *)(a1 + 3808), 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(a1 + 3272, a1 + 7264);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(a1 + 3360, a1 + 7320);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(a1 + 3448, a1 + 7376);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(a1 + 3536, a1 + 7432);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(a1 + 3624, a1 + 7488);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(a1 + 3712, a1 + 7544);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(a1 + 3800, a1 + 7600);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(a1 + 3888, a1 + 7656);
  if (*(_DWORD *)(a1 + 8800))
    return vp8_optimize_mbuv(a1);
  return result;
}

uint64_t vp8_transform_intra_mby(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 34264;
  (*(void (**)(_QWORD, _QWORD, uint64_t))(a1 + 34264))(*(_QWORD *)(a1 + 1864), *(_QWORD *)(a1 + 1872), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 2040), *(_QWORD *)(a1 + 2048), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 2216), *(_QWORD *)(a1 + 2224), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 2392), *(_QWORD *)(a1 + 2400), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 2568), *(_QWORD *)(a1 + 2576), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 2744), *(_QWORD *)(a1 + 2752), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 2920), *(_QWORD *)(a1 + 2928), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 3096), *(_QWORD *)(a1 + 3104), 32);
  *(_WORD *)(a1 + 768) = *(_WORD *)(a1 + 800);
  *(_WORD *)(a1 + 770) = *(_WORD *)(a1 + 832);
  *(_WORD *)(a1 + 772) = *(_WORD *)(a1 + 864);
  *(_WORD *)(a1 + 774) = *(_WORD *)(a1 + 896);
  *(_WORD *)(a1 + 776) = *(_WORD *)(a1 + 928);
  *(_WORD *)(a1 + 778) = *(_WORD *)(a1 + 960);
  *(_WORD *)(a1 + 780) = *(_WORD *)(a1 + 992);
  *(_WORD *)(a1 + 782) = *(_WORD *)(a1 + 1024);
  *(_WORD *)(a1 + 784) = *(_WORD *)(a1 + 1056);
  *(_WORD *)(a1 + 786) = *(_WORD *)(a1 + 1088);
  *(_WORD *)(a1 + 788) = *(_WORD *)(a1 + 1120);
  *(_WORD *)(a1 + 790) = *(_WORD *)(a1 + 1152);
  *(_WORD *)(a1 + 792) = *(_WORD *)(a1 + 1184);
  *(_WORD *)(a1 + 794) = *(_WORD *)(a1 + 1216);
  *(_WORD *)(a1 + 796) = *(_WORD *)(a1 + 1248);
  *(_WORD *)(a1 + 798) = *(_WORD *)(a1 + 1280);
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(a1 + 3976), *(_QWORD *)(a1 + 3984), 8);
}

uint64_t vp8_optimize_mby(uint64_t result)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  __int16 *v7;
  _BYTE *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;

  v1 = *(uint64_t **)(result + 8176);
  if (v1)
  {
    v2 = (_QWORD *)result;
    v3 = *(uint64_t **)(result + 8184);
    if (v3)
    {
      v20 = *v1;
      v21 = *((_BYTE *)v1 + 8);
      v18 = *v3;
      v19 = *((_BYTE *)v3 + 8);
      v4 = **(unsigned __int8 **)(result + 8096);
      v5 = v4 == 9 || v4 == 4;
      v6 = v5 ? 3 : 0;
      optimize_b(result, 0, v6, (BOOL *)&v20, (BOOL *)&v18);
      optimize_b((uint64_t)v2, 1, v6, (BOOL *)&v20 + 1, (BOOL *)&v18);
      optimize_b((uint64_t)v2, 2, v6, (BOOL *)&v20 + 2, (BOOL *)&v18);
      optimize_b((uint64_t)v2, 3, v6, (BOOL *)&v20 + 3, (BOOL *)&v18);
      optimize_b((uint64_t)v2, 4, v6, (BOOL *)&v20, (BOOL *)&v18 + 1);
      optimize_b((uint64_t)v2, 5, v6, (BOOL *)&v20 + 1, (BOOL *)&v18 + 1);
      optimize_b((uint64_t)v2, 6, v6, (BOOL *)&v20 + 2, (BOOL *)&v18 + 1);
      optimize_b((uint64_t)v2, 7, v6, (BOOL *)&v20 + 3, (BOOL *)&v18 + 1);
      optimize_b((uint64_t)v2, 8, v6, (BOOL *)&v20, (BOOL *)&v18 + 2);
      optimize_b((uint64_t)v2, 9, v6, (BOOL *)&v20 + 1, (BOOL *)&v18 + 2);
      optimize_b((uint64_t)v2, 10, v6, (BOOL *)&v20 + 2, (BOOL *)&v18 + 2);
      optimize_b((uint64_t)v2, 11, v6, (BOOL *)&v20 + 3, (BOOL *)&v18 + 2);
      optimize_b((uint64_t)v2, 12, v6, (BOOL *)&v20, (BOOL *)&v18 + 3);
      optimize_b((uint64_t)v2, 13, v6, (BOOL *)&v20 + 1, (BOOL *)&v18 + 3);
      optimize_b((uint64_t)v2, 14, v6, (BOOL *)&v20 + 2, (BOOL *)&v18 + 3);
      result = optimize_b((uint64_t)v2, 15, v6, (BOOL *)&v20 + 3, (BOOL *)&v18 + 3);
      if (v4 != 4 && v4 != 9)
      {
        result = optimize_b((uint64_t)v2, 24, 1u, &v21, &v19);
        v7 = (__int16 *)v2[967];
        if (*v7 < 35 || v7[1] <= 34)
        {
          v8 = (_BYTE *)v2[969];
          if ((char)*v8 < 1)
          {
LABEL_21:
            *v8 = 0;
          }
          else
          {
            v9 = 0;
            v10 = *v8;
            v11 = v2[965];
            v12 = vp8_default_zig_zag1d;
            while (1)
            {
              v13 = *v12++;
              v14 = *(__int16 *)(v11 + 2 * v13);
              if (v14 < 0)
                v14 = -v14;
              v9 += v14;
              if (v9 >= 0x23)
                break;
              if (!--v10)
              {
                v15 = 0;
                v16 = v2[964];
                do
                {
                  v17 = 2 * vp8_default_zig_zag1d[v15];
                  *(_WORD *)(v16 + v17) = 0;
                  *(_WORD *)(v11 + v17) = 0;
                  ++v15;
                }
                while (v15 < (char)*v8);
                goto LABEL_21;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t optimize_b(uint64_t result, int a2, unsigned int a3, BOOL *a4, BOOL *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE **v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  _DWORD *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  _DWORD *v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  _DWORD *v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  int v79;
  _BYTE **v80;
  BOOL *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  _DWORD v91[104];
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v5 = result + 56 * a2;
  v6 = *(_QWORD *)(v5 + 6392);
  v85 = *(_QWORD *)(result + 88 * a2 + 1872);
  v7 = *(_QWORD *)(v5 + 6368);
  v8 = *(_QWORD *)(v5 + 6376);
  v9 = a3 == 0;
  v10 = (_BYTE **)(v5 + 6408);
  v11 = **(char **)(v5 + 6408);
  v12 = *(_DWORD *)(result + 8648) * plane_rd_mult[a3];
  if (!*(_BYTE *)(*(_QWORD *)(result + 8096) + 2))
    v12 = (9 * v12) >> 4;
  v90 = v12;
  v89 = result;
  v86 = *(_DWORD *)(result + 8644);
  v13 = &v91[6 * (int)v11 + 2];
  *(_QWORD *)v13 = 0;
  v13[2] = 2832;
  v13[5] = 2832;
  *(_QWORD *)(v13 + 3) = 0;
  if ((int)v11 <= v9)
  {
    if (a3)
      v65 = -1;
    else
      v65 = 0;
    goto LABEL_81;
  }
  v83 = v8;
  v84 = v6;
  v80 = (_BYTE **)(v5 + 6408);
  v81 = a5;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v87 = a3 == 0;
  v88 = a3;
  v17 = &v91[6 * (int)v11 - 1];
  v18 = v11;
  v79 = v11;
  v82 = v7;
  do
  {
    v28 = v18--;
    v29 = vp8_default_zig_zag1d[v28 - 1];
    v30 = *(__int16 *)(v7 + 2 * v29);
    if (*(_WORD *)(v7 + 2 * v29))
    {
      v31 = &v91[6 * (int)v11 + 2];
      v32 = *v31;
      v24 = v31[3];
      v33 = dct_value_tokens[2 * v30 + 4096];
      v34 = v24;
      if ((int)v11 <= 15)
      {
        v35 = *(_QWORD *)(v89 + 8744)
            + 1152 * v88
            + 144 * vp8_coef_bands[v28]
            + 48 * vp8_prev_token_class[v33];
        v32 += *(_DWORD *)(v35 + 4 * *((char *)v31 + 9));
        v34 = *(_DWORD *)(v35 + 4 * SBYTE1(v91[6 * (int)v11 + 7])) + v24;
      }
      v36 = v31[1];
      v26 = v31[4];
      v37 = v36 * v86;
      v38 = v26 * v86;
      v39 = v26 * v86 + ((int)(v34 * v90 + 128) >> 8);
      v40 = (v32 * v90 + 0x80);
      if (v36 * v86 + ((int)(v32 * v90 + 128) >> 8) == v39)
        v39 = (v34 * v90 + 0x80);
      else
        v40 = v36 * v86 + ((int)(v32 * v90 + 128) >> 8);
      v41 = 2 * v29;
      v42 = *(__int16 *)(v85 + v41);
      v43 = *(__int16 *)(v83 + v41) - v42;
      v44 = v39 < v40;
      v45 = v39 < v40;
      if (v44)
        v46 = v34;
      else
        v46 = v32;
      v47 = v46 + dct_value_cost[v30 + 2048];
      if (v44)
        v48 = v31[4];
      else
        v48 = v31[1];
      *(v17 - 3) = v47;
      *(v17 - 2) = v48 + v43 * v43;
      *((_BYTE *)v17 - 4) = v11;
      *((_BYTE *)v17 - 3) = v33;
      *((_WORD *)v17 - 1) = v30;
      if (v30 >= 0)
        v49 = v30;
      else
        v49 = -v30;
      v50 = *(__int16 *)(v84 + v41);
      v51 = v49 * v50;
      if (v42 < 0)
        v42 = -v42;
      v22 = v51 <= v42;
      v52 = v50 + v42;
      v54 = v22 || v51 >= v52;
      v55 = ~(2 * ((__int16)v30 >> 15)) + v30;
      if ((v54 & 1) != 0)
        v55 = v30;
      else
        v14 = (__int16)v30 >> 15;
      if (v55)
      {
        v56 = dct_value_tokens[2 * v55 + 4096];
        v57 = v56;
        v58 = *v31;
        if ((int)v11 <= 15)
        {
LABEL_58:
          v64 = vp8_coef_bands[v28];
          if (v56 != 11)
            v58 += *(_DWORD *)(*(_QWORD *)(v89 + 8744)
                             + 1152 * v88
                             + 144 * v64
                             + 48 * vp8_prev_token_class[v56]
                             + 4 * *((char *)v31 + 9));
          if (v57 != 11)
            v24 += *(_DWORD *)(*(_QWORD *)(v89 + 8744)
                             + 1152 * v88
                             + 144 * v64
                             + 48 * vp8_prev_token_class[v57]
                             + 4 * SBYTE1(v91[6 * (int)v11 + 7]));
        }
      }
      else
      {
        if (*((_BYTE *)v31 + 9) == 11)
          v56 = 11;
        else
          v56 = 0;
        if (BYTE1(v91[6 * (int)v11 + 7]) == 11)
          v57 = 11;
        else
          v57 = 0;
        v58 = *v31;
        if ((int)v11 <= 15)
          goto LABEL_58;
      }
      v15 |= v45 << v18;
      result = v90;
      v19 = (v58 * v90 + 0x80);
      if (v37 + ((int)(v58 * v90 + 128) >> 8) == v38 + ((int)(v24 * v90 + 128) >> 8))
      {
        v20 = (v24 * v90 + 0x80);
      }
      else
      {
        v19 = v37 + ((int)(v58 * v90 + 128) >> 8);
        v20 = v38 + ((int)(v24 * v90 + 128) >> 8);
      }
      v21 = (v43 - ((v14 + v50) ^ v14)) * (v43 - ((v14 + v50) ^ v14));
      if (v54)
        v21 = v43 * v43;
      v22 = v20 < v19;
      v23 = v20 < v19;
      if (!v22)
        v24 = v58;
      v25 = v24 + dct_value_cost[v55 + 2048];
      if (!v22)
        v26 = v36;
      *v17 = v25;
      v17[1] = v26 + v21;
      *((_BYTE *)v17 + 8) = v11;
      if (v22)
        v27 = v57;
      else
        v27 = v56;
      *((_BYTE *)v17 + 9) = v27;
      *((_WORD *)v17 + 5) = v55;
      v16 |= v23 << v18;
      LODWORD(v11) = v18;
      v7 = v82;
      goto LABEL_18;
    }
    v59 = vp8_coef_bands[v28];
    v60 = &v91[6 * (int)v11 + 2];
    v61 = *((char *)v60 + 9);
    if (v61 == 11)
    {
      v62 = (char *)v60 + 21;
      v63 = *((char *)v60 + 21);
      if ((_DWORD)v63 == 11)
        goto LABEL_18;
    }
    else
    {
      *v60 += *(_DWORD *)(*(_QWORD *)(v89 + 8744)
                        + 1152 * v88
                        + 144 * vp8_coef_bands[v28]
                        + 4 * v61);
      *((_BYTE *)v60 + 9) = 0;
      v62 = (char *)v60 + 21;
      v63 = *((char *)v60 + 21);
      if ((_DWORD)v63 == 11)
        goto LABEL_18;
    }
    result = 1152;
    v60[3] += *(_DWORD *)(*(_QWORD *)(v89 + 8744) + 1152 * v88 + 144 * v59 + 4 * v63);
    *v62 = 0;
LABEL_18:
    v17 -= 6;
  }
  while (v18 > v87);
  v91[0] = v15;
  v91[1] = v16;
  if (a3)
    v65 = -1;
  else
    v65 = 0;
  if ((int)v11 >= v79)
  {
    a5 = v81;
    v10 = v80;
  }
  else
  {
    a5 = v81;
    v66 = &v91[6 * (int)v11 + 2];
    v67 = *(_QWORD *)(v89 + 8744)
        + 1152 * v88
        + 144 * vp8_coef_bands[v18]
        + 48 * (*a4 + *v81);
    v68 = (*v66 + *(_DWORD *)(v67 + 4 * *((char *)v66 + 9))) * v90 + 128;
    v69 = v66[1] * v86 + (v68 >> 8);
    v71 = (v66[3] + *(_DWORD *)(v67 + 4 * *((char *)v66 + 21))) * v90 + 128;
    v70 = v66[4] * v86 + (v71 >> 8);
    v71 = v71;
    if (v69 != v70)
      v71 = v70;
    v68 = v68;
    if (v69 != v70)
      v68 = v69;
    v72 = v71 < v68;
    v10 = v80;
    do
    {
      v73 = &v91[6 * (int)v11 + 2 + 3 * v72];
      v74 = *((unsigned __int16 *)v73 + 5);
      v75 = 2 * vp8_default_zig_zag1d[(int)v11];
      *(_WORD *)(v7 + v75) = v74;
      result = *(unsigned __int16 *)(v84 + v75);
      *(_WORD *)(v83 + v75) = result * v74;
      v76 = v91[v72];
      if (v74)
        v65 = v11;
      v72 = (v76 >> v11) & 1;
      LODWORD(v11) = *((char *)v73 + 8);
    }
    while ((int)v11 < v79);
  }
LABEL_81:
  v77 = v65 + 1;
  *a5 = v77 != v9;
  *a4 = v77 != v9;
  **v10 = v77;
  return result;
}

uint64_t vp8_optimize_mbuv(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v1 = *(uint64_t **)(result + 8176);
  if (v1)
  {
    v2 = result;
    v3 = *(uint64_t **)(result + 8184);
    if (v3)
    {
      v6 = *v1;
      v7 = *((_BYTE *)v1 + 8);
      v4 = *v3;
      v5 = *((_BYTE *)v3 + 8);
      optimize_b(result, 16, 2u, (BOOL *)&v6 + 4, (BOOL *)&v4 + 4);
      optimize_b(v2, 17, 2u, (BOOL *)&v6 + 5, (BOOL *)&v4 + 4);
      optimize_b(v2, 18, 2u, (BOOL *)&v6 + 4, (BOOL *)&v4 + 5);
      optimize_b(v2, 19, 2u, (BOOL *)&v6 + 5, (BOOL *)&v4 + 5);
      optimize_b(v2, 20, 2u, (BOOL *)&v6 + 6, (BOOL *)&v4 + 6);
      optimize_b(v2, 21, 2u, (BOOL *)&v6 + 7, (BOOL *)&v4 + 6);
      optimize_b(v2, 22, 2u, (BOOL *)&v6 + 6, (BOOL *)&v4 + 7);
      return optimize_b(v2, 23, 2u, (BOOL *)&v6 + 7, (BOOL *)&v4 + 7);
    }
  }
  return result;
}

uint64_t vp8_encode_inter16x16(uint64_t a1)
{
  uint64_t v2;
  uint8x8_t *v3;
  uint64_t v4;
  uint8x8_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  __int16 *v18;
  _BYTE *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;

  v2 = a1 + 34264;
  vp8_build_inter_predictors_mb(a1 + 4224);
  vpx_subtract_block_neon(16, 16, (uint16x8_t *)a1, 16, **(uint8x8_t ***)(a1 + 1936), *(int *)(a1 + 1948), *(uint8x8_t **)(a1 + 7992), *(int *)(a1 + 7952));
  v3 = *(uint8x8_t **)(a1 + 4136);
  v4 = *(int *)(a1 + 4100);
  v5 = *(uint8x8_t **)(a1 + 8008);
  v6 = *(int *)(a1 + 7972);
  vpx_subtract_block_neon(8, 8, (uint16x8_t *)(a1 + 512), 8, *(uint8x8_t **)(a1 + 4128), v4, *(uint8x8_t **)(a1 + 8000), v6);
  vpx_subtract_block_neon(8, 8, (uint16x8_t *)(a1 + 640), 8, v3, v4, v5, v6);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 1864), *(_QWORD *)(a1 + 1872), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 2040), *(_QWORD *)(a1 + 2048), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 2216), *(_QWORD *)(a1 + 2224), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 2392), *(_QWORD *)(a1 + 2400), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 2568), *(_QWORD *)(a1 + 2576), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 2744), *(_QWORD *)(a1 + 2752), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 2920), *(_QWORD *)(a1 + 2928), 32);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 3096), *(_QWORD *)(a1 + 3104), 32);
  if (**(_BYTE **)(a1 + 8096) != 9)
  {
    *(_WORD *)(a1 + 768) = *(_WORD *)(a1 + 800);
    *(_WORD *)(a1 + 770) = *(_WORD *)(a1 + 832);
    *(_WORD *)(a1 + 772) = *(_WORD *)(a1 + 864);
    *(_WORD *)(a1 + 774) = *(_WORD *)(a1 + 896);
    *(_WORD *)(a1 + 776) = *(_WORD *)(a1 + 928);
    *(_WORD *)(a1 + 778) = *(_WORD *)(a1 + 960);
    *(_WORD *)(a1 + 780) = *(_WORD *)(a1 + 992);
    *(_WORD *)(a1 + 782) = *(_WORD *)(a1 + 1024);
    *(_WORD *)(a1 + 784) = *(_WORD *)(a1 + 1056);
    *(_WORD *)(a1 + 786) = *(_WORD *)(a1 + 1088);
    *(_WORD *)(a1 + 788) = *(_WORD *)(a1 + 1120);
    *(_WORD *)(a1 + 790) = *(_WORD *)(a1 + 1152);
    *(_WORD *)(a1 + 792) = *(_WORD *)(a1 + 1184);
    *(_WORD *)(a1 + 794) = *(_WORD *)(a1 + 1216);
    *(_WORD *)(a1 + 796) = *(_WORD *)(a1 + 1248);
    *(_WORD *)(a1 + 798) = *(_WORD *)(a1 + 1280);
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 3272), *(_QWORD *)(a1 + 3280), 16);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 3448), *(_QWORD *)(a1 + 3456), 16);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 3624), *(_QWORD *)(a1 + 3632), 16);
  (*(void (**)(_QWORD, _QWORD, uint64_t))v2)(*(_QWORD *)(a1 + 3800), *(_QWORD *)(a1 + 3808), 16);
  v7 = **(unsigned __int8 **)(a1 + 8096);
  if (v7 != 9)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(a1 + 3976), *(_QWORD *)(a1 + 3984), 8);
    v7 = **(unsigned __int8 **)(a1 + 8096);
  }
  v8 = 0;
  if (v7 == 9 || v7 == 4)
    v10 = 2112;
  else
    v10 = 2200;
  v11 = a1 + 6368;
  do
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(a1 + v8 + 1864, v11);
    v8 += 88;
    v11 += 56;
  }
  while (v10 != v8);
  if (*(_DWORD *)(a1 + 8800))
  {
    v13 = *(uint64_t **)(a1 + 8176);
    v31 = *v13;
    v32 = *((_BYTE *)v13 + 8);
    v14 = *(uint64_t **)(a1 + 8184);
    v29 = *v14;
    v30 = *((_BYTE *)v14 + 8);
    v15 = **(unsigned __int8 **)(a1 + 8096);
    v16 = v15 == 9 || v15 == 4;
    v17 = v16 ? 3 : 0;
    optimize_b(a1, 0, v17, (BOOL *)&v31, (BOOL *)&v29);
    optimize_b(a1, 1, v17, (BOOL *)&v31 + 1, (BOOL *)&v29);
    optimize_b(a1, 2, v17, (BOOL *)&v31 + 2, (BOOL *)&v29);
    optimize_b(a1, 3, v17, (BOOL *)&v31 + 3, (BOOL *)&v29);
    optimize_b(a1, 4, v17, (BOOL *)&v31, (BOOL *)&v29 + 1);
    optimize_b(a1, 5, v17, (BOOL *)&v31 + 1, (BOOL *)&v29 + 1);
    optimize_b(a1, 6, v17, (BOOL *)&v31 + 2, (BOOL *)&v29 + 1);
    optimize_b(a1, 7, v17, (BOOL *)&v31 + 3, (BOOL *)&v29 + 1);
    optimize_b(a1, 8, v17, (BOOL *)&v31, (BOOL *)&v29 + 2);
    optimize_b(a1, 9, v17, (BOOL *)&v31 + 1, (BOOL *)&v29 + 2);
    optimize_b(a1, 10, v17, (BOOL *)&v31 + 2, (BOOL *)&v29 + 2);
    optimize_b(a1, 11, v17, (BOOL *)&v31 + 3, (BOOL *)&v29 + 2);
    optimize_b(a1, 12, v17, (BOOL *)&v31, (BOOL *)&v29 + 3);
    optimize_b(a1, 13, v17, (BOOL *)&v31 + 1, (BOOL *)&v29 + 3);
    optimize_b(a1, 14, v17, (BOOL *)&v31 + 2, (BOOL *)&v29 + 3);
    optimize_b(a1, 15, v17, (BOOL *)&v31 + 3, (BOOL *)&v29 + 3);
    optimize_b(a1, 16, 2u, (BOOL *)&v31 + 4, (BOOL *)&v29 + 4);
    optimize_b(a1, 17, 2u, (BOOL *)&v31 + 5, (BOOL *)&v29 + 4);
    optimize_b(a1, 18, 2u, (BOOL *)&v31 + 4, (BOOL *)&v29 + 5);
    optimize_b(a1, 19, 2u, (BOOL *)&v31 + 5, (BOOL *)&v29 + 5);
    optimize_b(a1, 20, 2u, (BOOL *)&v31 + 6, (BOOL *)&v29 + 6);
    optimize_b(a1, 21, 2u, (BOOL *)&v31 + 7, (BOOL *)&v29 + 6);
    optimize_b(a1, 22, 2u, (BOOL *)&v31 + 6, (BOOL *)&v29 + 7);
    result = optimize_b(a1, 23, 2u, (BOOL *)&v31 + 7, (BOOL *)&v29 + 7);
    if (v15 != 4 && v15 != 9)
    {
      result = optimize_b(a1, 24, 1u, &v32, &v30);
      v18 = *(__int16 **)(a1 + 7736);
      if (*v18 < 35 || v18[1] <= 34)
      {
        v19 = *(_BYTE **)(a1 + 7752);
        if ((char)*v19 < 1)
        {
LABEL_32:
          *v19 = 0;
        }
        else
        {
          v20 = 0;
          v21 = *v19;
          v22 = *(_QWORD *)(a1 + 7720);
          v23 = vp8_default_zig_zag1d;
          while (1)
          {
            v24 = *v23++;
            v25 = *(__int16 *)(v22 + 2 * v24);
            if (v25 < 0)
              v25 = -v25;
            v20 += v25;
            if (v20 >= 0x23)
              break;
            if (!--v21)
            {
              v26 = 0;
              v27 = *(_QWORD *)(a1 + 7712);
              do
              {
                v28 = 2 * vp8_default_zig_zag1d[v26];
                *(_WORD *)(v27 + v28) = 0;
                *(_WORD *)(v22 + v28) = 0;
                ++v26;
              }
              while (v26 < (char)*v19);
              goto LABEL_32;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t encode_mvcomponent(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  unint64_t v6;
  int v7;
  int v8;
  uint64_t result;

  if ((a2 & 0x80000000) == 0)
    v6 = a2;
  else
    v6 = -a2;
  v7 = *a3;
  if (v6 > 7)
  {
    vp8_encode_BOOL(a1, 1, v7);
    vp8_encode_BOOL(a1, v6 & 1, a3[9]);
    vp8_encode_BOOL(a1, (v6 >> 1) & 1, a3[10]);
    vp8_encode_BOOL(a1, (v6 >> 2) & 1, a3[11]);
    vp8_encode_BOOL(a1, (v6 >> 9) & 1, a3[18]);
    vp8_encode_BOOL(a1, (v6 >> 8) & 1, a3[17]);
    vp8_encode_BOOL(a1, (v6 >> 7) & 1, a3[16]);
    vp8_encode_BOOL(a1, (v6 >> 6) & 1, a3[15]);
    vp8_encode_BOOL(a1, (v6 >> 5) & 1, a3[14]);
    vp8_encode_BOOL(a1, (v6 >> 4) & 1, a3[13]);
    if ((v6 & 0xFFF0) != 0)
      vp8_encode_BOOL(a1, (v6 >> 3) & 1, a3[12]);
    return vp8_encode_BOOL(a1, a2 >> 31, a3[1]);
  }
  vp8_encode_BOOL(a1, 0, v7);
  vp8_encode_BOOL(a1, v6 >> 2, a3[2]);
  v8 = vp8_small_mvtree[v6 >> 2];
  vp8_encode_BOOL(a1, (v6 >> 1) & 1, a3[(v8 >> 1) + 2]);
  result = vp8_encode_BOOL(a1, v6 & 1, a3[(vp8_small_mvtree[((v6 >> 1) & 1) + v8] >> 1) + 2]);
  if (a2)
    return vp8_encode_BOOL(a1, a2 >> 31, a3[1]);
  return result;
}

_QWORD *vp8_build_component_cost_table(_QWORD *result, unsigned __int8 *a2, _DWORD *a3)
{
  _QWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t i;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t j;

  v5 = result;
  if (*a3)
  {
    v6 = (_DWORD *)*result;
    v7 = (_DWORD *)*result;
    *v7 = vp8_prob_cost[a2[2]] + vp8_prob_cost[*a2] + vp8_prob_cost[a2[3]] + vp8_prob_cost[a2[4]];
    v8 = v7 - 1;
    for (i = 1; i != 1024; ++i)
    {
      result = (_QWORD *)cost_mvcomponent(i, a2);
      v6[i] = vp8_prob_cost[a2[1]] + (_DWORD)result;
      *v8-- = vp8_prob_cost[~a2[1]] + (_DWORD)result;
    }
  }
  if (a3[1])
  {
    v10 = (_DWORD *)v5[1];
    *v10 = vp8_prob_cost[a2[21]] + vp8_prob_cost[a2[19]] + vp8_prob_cost[a2[22]] + vp8_prob_cost[a2[23]];
    v11 = v10 - 1;
    for (j = 1; j != 1024; ++j)
    {
      result = (_QWORD *)cost_mvcomponent(j, a2 + 19);
      v10[j] = vp8_prob_cost[a2[20]] + (_DWORD)result;
      *v11-- = vp8_prob_cost[~a2[20]] + (_DWORD)result;
    }
  }
  return result;
}

uint64_t cost_mvcomponent(unint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;

  v2 = *a2;
  if ((int)a1 > 7)
  {
    v5 = vp8_prob_cost[(a2[9] ^ -(a1 & 1))]
       + vp8_prob_cost[~(_BYTE)v2]
       + vp8_prob_cost[(a2[10] ^ ((int)((_DWORD)a1 << 30) >> 31))]
       + vp8_prob_cost[(a2[11] ^ ((int)((_DWORD)a1 << 29) >> 31))]
       + vp8_prob_cost[(a2[18] ^ ((int)((_DWORD)a1 << 22) >> 31))]
       + vp8_prob_cost[(a2[17] ^ ((int)((_DWORD)a1 << 23) >> 31))]
       + vp8_prob_cost[(a2[16] ^ ((char)a1 >> 7))]
       + vp8_prob_cost[(a2[15] ^ ((int)((_DWORD)a1 << 25) >> 31))]
       + vp8_prob_cost[(a2[14] ^ ((int)((_DWORD)a1 << 26) >> 31))]
       + vp8_prob_cost[(a2[13] ^ ((int)((_DWORD)a1 << 27) >> 31))];
    if ((a1 & 0xFFF0) != 0)
      return vp8_prob_cost[(a2[12] ^ ((int)((_DWORD)a1 << 28) >> 31))] + v5;
    return v5;
  }
  else
  {
    v3 = vp8_small_mvtree[(a1 >> 2) & 1];
    return vp8_prob_cost[(a2[2] ^ ((int)((_DWORD)a1 << 29) >> 31))]
         + vp8_prob_cost[v2]
         + vp8_prob_cost[(a2[(v3 >> 1) + 2] ^ ((int)((_DWORD)a1 << 30) >> 31))]
         + vp8_prob_cost[(a2[(vp8_small_mvtree[((a1 >> 1) & 1) + v3] >> 1) + 2] ^ -(a1 & 1))];
  }
}

uint64_t write_component_probs(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned __int8 v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  unsigned __int8 v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  unsigned __int8 v122;
  unsigned int v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v137 = *MEMORY[0x24BDAC8D0];
  v15 = *a3;
  v111 = a3[1];
  v112 = a3[2];
  v113 = a3[3];
  v114 = a3[4];
  v115 = a3[5];
  v116 = a3[6];
  v117 = a3[7];
  v118 = a3[8];
  v119 = a3[9];
  v120 = a3[10];
  LOBYTE(v16) = a3[11];
  LOBYTE(v17) = a3[12];
  LOBYTE(v18) = a3[13];
  LOBYTE(v19) = a3[14];
  LOBYTE(v20) = a3[15];
  LOBYTE(v21) = a3[16];
  LOBYTE(v22) = a3[17];
  v121 = a3[18];
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v132 = 0u;
  v128 = 0;
  v130 = 0;
  v129 = 0;
  v131 = 0;
  v23 = 4088;
  v24 = *(_DWORD *)(a5 + 4092);
  v25 = v24;
  do
  {
    while (1)
    {
      v26 = v11 + 1;
      v27 = *(_DWORD *)(a5 + 4 * v11 + 4096);
      v28 = *(_DWORD *)(a5 + v23);
      v29 = v28 + v27;
      if ((unint64_t)(v11 + 1) <= 7)
        break;
      *(_DWORD *)(((unint64_t)&v132 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v26 >> 9) & 1))) + 0x48) += v29;
      *(_DWORD *)(((unint64_t)&v132 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v26 >> 8) & 1))) + 0x40) += v29;
      *(_DWORD *)(((unint64_t)&v132 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v26 >> 7) & 1))) + 0x38) += v29;
      *(_DWORD *)(((unint64_t)&v132 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v26 >> 6) & 1))) + 0x30) += v29;
      *(_DWORD *)(((unint64_t)&v132 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v26 >> 5) & 1))) + 0x28) += v29;
      *(_DWORD *)(((unint64_t)&v132 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v26 >> 4) & 1))) + 0x20) += v29;
      *(_DWORD *)(((unint64_t)&v132 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v26 >> 3) & 1))) + 0x18) += v29;
      *(_DWORD *)(((unint64_t)&v132 | v26 & 4) + 0x10) += v29;
      *(_DWORD *)(((unint64_t)&v132 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v26 >> 1) & 1))) + 8) += v29;
      v12 += v29;
      *(_DWORD *)((unint64_t)&v132 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v26 & 1))) += v29;
      v14 += v27;
      v13 += v28;
      ++v11;
      v23 -= 4;
      if (v11 == 1023)
        goto LABEL_5;
    }
    v25 += v29;
    *((_DWORD *)&v128 + v11) += v29;
    v14 += v27;
    v13 += v28;
    ++v11;
    v23 -= 4;
  }
  while (v11 != 1023);
LABEL_5:
  if (v25 + v12)
  {
    v30 = (255 * v25 / (v25 + v12)) & 0xFE;
    if (v30)
      v15 = v30;
    else
      v15 = 1;
  }
  if (v13 + v14)
  {
    v31 = (255 * v14 / (v13 + v14)) & 0xFE;
    if (!v31)
      LOBYTE(v31) = 1;
    v111 = v31;
  }
  v32 = 0;
  v124 = 0u;
  v127 = 0;
  v126 = 0u;
  v125 = 0u;
  v123 = v24;
  DWORD1(v124) = v24;
  HIDWORD(v124) = v24;
  v33 = 2;
  v34 = v128;
  do
  {
    *(&v123 + 2 * (v32 >> 1) + (1u >> v33)) += v34;
    v35 = vp8_small_mvtree[(1u >> v33) + (unint64_t)v32];
    v32 = vp8_small_mvtree[(1u >> v33--) + (unint64_t)v32];
  }
  while (v35 > 0);
  LODWORD(v36) = 0;
  v37 = -1;
  v38 = HIDWORD(v128);
  do
  {
    *(&v123 + 2 * (v36 >> 1) + (v37 == 0)) += v38;
    v36 = v36;
    if (!v37)
      v36 = v36 + 1;
    v39 = vp8_small_mvtree[v36];
    LODWORD(v36) = vp8_small_mvtree[v36];
    ++v37;
  }
  while (v39 > 0);
  v40 = 0;
  v41 = 2;
  v42 = v129;
  do
  {
    *(&v123 + 2 * (v40 >> 1) + ((3u >> v41) & 1)) += v42;
    v43 = vp8_small_mvtree[((3u >> v41) & 1) + (unint64_t)v40];
    v40 = vp8_small_mvtree[((3u >> v41--) & 1) + (unint64_t)v40];
  }
  while (v43 > 0);
  v44 = 0;
  LODWORD(v45) = 0;
  v46 = HIDWORD(v129);
  do
  {
    *(&v123 + 2 * (v45 >> 1) + (v44 == 0)) += v46;
    v45 = v45;
    if (!v44)
      v45 = v45 + 1;
    v47 = vp8_small_mvtree[v45];
    LODWORD(v45) = vp8_small_mvtree[v45];
    ++v44;
  }
  while (v47 > 0);
  v48 = 0;
  v49 = 2;
  v50 = v130;
  do
  {
    *(&v123 + 2 * (v48 >> 1) + ((5u >> v49) & 1)) += v50;
    v51 = vp8_small_mvtree[((5u >> v49) & 1) + (unint64_t)v48];
    v48 = vp8_small_mvtree[((5u >> v49--) & 1) + (unint64_t)v48];
  }
  while (v51 > 0);
  v52 = 0;
  v53 = 2;
  v54 = HIDWORD(v130);
  do
  {
    *(&v123 + 2 * (v52 >> 1) + ((6u >> v53) & 1)) += v54;
    v55 = vp8_small_mvtree[((6u >> v53) & 1) + (unint64_t)v52];
    v52 = vp8_small_mvtree[((6u >> v53--) & 1) + (unint64_t)v52];
  }
  while (v55 > 0);
  v56 = 0;
  v57 = 2;
  v58 = v131;
  do
  {
    *(&v123 + 2 * (v56 >> 1) + ((7u >> v57) & 1)) += v58;
    v59 = vp8_small_mvtree[((7u >> v57) & 1) + (unint64_t)v56];
    v56 = vp8_small_mvtree[((7u >> v57--) & 1) + (unint64_t)v56];
  }
  while (v59 > 0);
  v104 = v124;
  if ((_DWORD)v124 + v123)
  {
    v60 = (255 * v123 / (v124 + v123)) & 0xFE;
    if (!v60)
      LOBYTE(v60) = 1;
    v112 = v60;
  }
  v103 = DWORD2(v124);
  if (DWORD2(v124) + DWORD1(v124))
  {
    v61 = (255 * DWORD1(v124) / (DWORD2(v124) + DWORD1(v124))) & 0xFE;
    if (!v61)
      LOBYTE(v61) = 1;
    v113 = v61;
  }
  v102 = v125;
  if ((_DWORD)v125 + HIDWORD(v124))
  {
    v62 = (255 * HIDWORD(v124) / (v125 + HIDWORD(v124))) & 0xFE;
    if (!v62)
      LOBYTE(v62) = 1;
    v114 = v62;
  }
  v100 = DWORD2(v125);
  if (DWORD2(v125) + DWORD1(v125))
  {
    v63 = (255 * DWORD1(v125) / (DWORD2(v125) + DWORD1(v125))) & 0xFE;
    if (!v63)
      LOBYTE(v63) = 1;
    v115 = v63;
  }
  v98 = v126;
  if ((_DWORD)v126 + HIDWORD(v125))
  {
    v64 = (255 * HIDWORD(v125) / (v126 + HIDWORD(v125))) & 0xFE;
    if (!v64)
      LOBYTE(v64) = 1;
    v116 = v64;
  }
  v96 = DWORD2(v126);
  if (DWORD2(v126) + DWORD1(v126))
  {
    v65 = (255 * DWORD1(v126) / (DWORD2(v126) + DWORD1(v126))) & 0xFE;
    if (!v65)
      LOBYTE(v65) = 1;
    v117 = v65;
  }
  v94 = v127;
  if (v127 + HIDWORD(v126))
  {
    v66 = (255 * HIDWORD(v126) / (v127 + HIDWORD(v126))) & 0xFE;
    if (!v66)
      LOBYTE(v66) = 1;
    v118 = v66;
  }
  v92 = DWORD1(v132);
  if (DWORD1(v132) + (_DWORD)v132)
  {
    v67 = (255 * (int)v132 / (DWORD1(v132) + v132)) & 0xFE;
    if (!v67)
      LOBYTE(v67) = 1;
    v119 = v67;
  }
  v90 = HIDWORD(v132);
  if (HIDWORD(v132) + DWORD2(v132))
  {
    v68 = (255 * DWORD2(v132) / (HIDWORD(v132) + DWORD2(v132))) & 0xFE;
    if (!v68)
      LOBYTE(v68) = 1;
    v120 = v68;
  }
  v88 = DWORD1(v133);
  if (DWORD1(v133) + (_DWORD)v133)
  {
    if (((255 * (int)v133 / (DWORD1(v133) + v133)) & 0xFE) != 0)
      v16 = (255 * (int)v133 / (DWORD1(v133) + v133)) & 0xFE;
    else
      LOBYTE(v16) = 1;
  }
  v86 = HIDWORD(v133);
  if (HIDWORD(v133) + DWORD2(v133))
  {
    if (((255 * DWORD2(v133) / (HIDWORD(v133) + DWORD2(v133))) & 0xFE) != 0)
      v17 = (255 * DWORD2(v133) / (HIDWORD(v133) + DWORD2(v133))) & 0xFE;
    else
      LOBYTE(v17) = 1;
  }
  v87 = DWORD2(v133);
  v84 = DWORD1(v134);
  if (DWORD1(v134) + (_DWORD)v134)
  {
    if (((255 * (int)v134 / (DWORD1(v134) + v134)) & 0xFE) != 0)
      v18 = (255 * (int)v134 / (DWORD1(v134) + v134)) & 0xFE;
    else
      LOBYTE(v18) = 1;
  }
  v85 = v134;
  v106 = v18;
  v82 = HIDWORD(v134);
  if (HIDWORD(v134) + DWORD2(v134))
  {
    if (((255 * DWORD2(v134) / (HIDWORD(v134) + DWORD2(v134))) & 0xFE) != 0)
      v19 = (255 * DWORD2(v134) / (HIDWORD(v134) + DWORD2(v134))) & 0xFE;
    else
      LOBYTE(v19) = 1;
  }
  v107 = v19;
  v80 = DWORD1(v135);
  if (DWORD1(v135) + (_DWORD)v135)
  {
    if (((255 * (int)v135 / (DWORD1(v135) + v135)) & 0xFE) != 0)
      v20 = (255 * (int)v135 / (DWORD1(v135) + v135)) & 0xFE;
    else
      LOBYTE(v20) = 1;
  }
  v105 = v17;
  v78 = HIDWORD(v135);
  if (HIDWORD(v135) + DWORD2(v135))
  {
    if (((255 * DWORD2(v135) / (HIDWORD(v135) + DWORD2(v135))) & 0xFE) != 0)
      v21 = (255 * DWORD2(v135) / (HIDWORD(v135) + DWORD2(v135))) & 0xFE;
    else
      LOBYTE(v21) = 1;
  }
  v79 = DWORD2(v135);
  v83 = DWORD2(v134);
  v108 = v20;
  v76 = DWORD1(v136);
  if (DWORD1(v136) + (_DWORD)v136)
  {
    if (((255 * (int)v136 / (DWORD1(v136) + v136)) & 0xFE) != 0)
      v22 = (255 * (int)v136 / (DWORD1(v136) + v136)) & 0xFE;
    else
      LOBYTE(v22) = 1;
  }
  v77 = v136;
  v81 = v135;
  v89 = v133;
  v91 = DWORD2(v132);
  v93 = v132;
  v95 = HIDWORD(v126);
  v97 = DWORD1(v126);
  v99 = HIDWORD(v125);
  v101 = DWORD1(v125);
  v69 = HIDWORD(v124);
  v70 = DWORD1(v124);
  v71 = v123;
  v109 = v21;
  v110 = v22;
  v72 = DWORD2(v136);
  v75 = HIDWORD(v136);
  LOBYTE(v73) = v121;
  if (HIDWORD(v136) + DWORD2(v136))
  {
    if (((255 * DWORD2(v136) / (HIDWORD(v136) + DWORD2(v136))) & 0xFE) != 0)
      v73 = (255 * DWORD2(v136) / (HIDWORD(v136) + DWORD2(v136))) & 0xFE;
    else
      LOBYTE(v73) = 1;
  }
  v122 = v73;
  update(a1, v25, v12, a2, v15, *a4, a6);
  update(a1, v14, v13, a2 + 1, v111, a4[1], a6);
  update(a1, v71, v104, a2 + 2, v112, a4[2], a6);
  update(a1, v70, v103, a2 + 3, v113, a4[3], a6);
  update(a1, v69, v102, a2 + 4, v114, a4[4], a6);
  update(a1, v101, v100, a2 + 5, v115, a4[5], a6);
  update(a1, v99, v98, a2 + 6, v116, a4[6], a6);
  update(a1, v97, v96, a2 + 7, v117, a4[7], a6);
  update(a1, v95, v94, a2 + 8, v118, a4[8], a6);
  update(a1, v93, v92, a2 + 9, v119, a4[9], a6);
  update(a1, v91, v90, a2 + 10, v120, a4[10], a6);
  update(a1, v89, v88, a2 + 11, v16, a4[11], a6);
  update(a1, v87, v86, a2 + 12, v105, a4[12], a6);
  update(a1, v85, v84, a2 + 13, v106, a4[13], a6);
  update(a1, v83, v82, a2 + 14, v107, a4[14], a6);
  update(a1, v81, v80, a2 + 15, v108, a4[15], a6);
  update(a1, v79, v78, a2 + 16, v109, a4[16], a6);
  update(a1, v77, v76, a2 + 17, v110, a4[17], a6);
  return update(a1, v72, v75, a2 + 18, v122, a4[18], a6);
}

uint64_t update(uint64_t a1, unsigned int a2, unsigned int a3, _BYTE *a4, unsigned int a5, int a6, _DWORD *a7)
{
  uint64_t result;

  if ((int)(((vp8_prob_cost[*a4] * (unint64_t)a2
             + vp8_prob_cost[~*a4] * (unint64_t)a3) >> 8)
           - ((vp8_prob_cost[a5] * (unint64_t)a2
             + vp8_prob_cost[~(_BYTE)a5] * (unint64_t)a3) >> 8)) <= (int)(((vp8_prob_cost[a6 ^ 0xFF]
                                                                                                  - vp8_prob_cost[a6]
                                                                                                  + 128) >> 8)
                                                                                                + 6))
    return vp8_encode_BOOL(a1, 0, a6);
  *a4 = a5;
  vp8_encode_BOOL(a1, 1, a6);
  vp8_encode_BOOL_0(a1, a5 >> 7);
  vp8_encode_BOOL_0(a1, (a5 >> 6) & 1);
  vp8_encode_BOOL_0(a1, (a5 >> 5) & 1);
  vp8_encode_BOOL_0(a1, (a5 >> 4) & 1);
  vp8_encode_BOOL_0(a1, (a5 >> 3) & 1);
  vp8_encode_BOOL_0(a1, (a5 >> 2) & 1);
  result = vp8_encode_BOOL_0(a1, (a5 >> 1) & 1);
  *a7 = 1;
  return result;
}

void vp8cx_init_mbrthread_data(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  __int128 *v54;
  __int128 *v55;
  __int128 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  if (a4 >= 1)
  {
    v5 = 0;
    v6 = (int *)(a1 + 110544);
    v59 = a2 + 30140;
    v7 = a2 + 0x2000;
    v57 = a1 + 113813;
    v58 = a1 + 111616;
    v56 = (__int128 *)(a2 + 6272);
    v55 = (__int128 *)(a2 + 6240);
    v54 = (__int128 *)(a2 + 6304);
    v53 = (__int128 *)(a2 + 6336);
    v8 = (_OWORD *)(a2 + 29976);
    v9 = (_OWORD *)(a2 + 29896);
    v52 = a2 + 29828;
    v10 = 0uLL;
    v50 = a1 + 109888;
    v51 = a4;
    v11 = a3;
    do
    {
      v12 = a3 + 34336 * v5;
      *(_OWORD *)(v12 + 8248) = *(_OWORD *)(v7 + 56);
      *(_OWORD *)(v12 + 8264) = *(_OWORD *)(v7 + 72);
      *(_QWORD *)(v12 + 8776) = *(_QWORD *)(a2 + 8776);
      *(_DWORD *)(v12 + 34320) = 0;
      *(_OWORD *)(v12 + 34304) = v10;
      *(_QWORD *)(v12 + 8576) = *(_QWORD *)(a2 + 8584) + 132 * *(_DWORD *)(a2 + 8104) * (int)++v5;
      *(_DWORD *)(v12 + 8108) = v6[129];
      v13 = (__int128 *)*((_QWORD *)v6 + 529);
      v15 = v13[6];
      v14 = v13[7];
      v16 = v13[9];
      *(_OWORD *)(v12 + 4192) = v13[8];
      *(_OWORD *)(v12 + 4160) = v15;
      *(_OWORD *)(v12 + 4208) = v16;
      v18 = v13[2];
      v17 = v13[3];
      v19 = v13[4];
      *(_OWORD *)(v12 + 4144) = v13[5];
      *(_OWORD *)(v12 + 4096) = v18;
      *(_OWORD *)(v12 + 4128) = v19;
      *(_OWORD *)(v12 + 4112) = v17;
      v20 = *v13;
      *(_OWORD *)(v12 + 4080) = v13[1];
      *(_OWORD *)(v12 + 4064) = v20;
      *(_OWORD *)(v12 + 4176) = v14;
      v21 = (__int128 *)(v50 + 160 * v6[1]);
      v22 = *v21;
      *(_OWORD *)(v12 + 7792) = v21[1];
      *(_OWORD *)(v12 + 7776) = v22;
      v23 = v21[2];
      v24 = v21[3];
      v25 = v21[4];
      *(_OWORD *)(v12 + 7856) = v21[5];
      *(_OWORD *)(v12 + 7840) = v25;
      *(_OWORD *)(v12 + 7824) = v24;
      *(_OWORD *)(v12 + 7808) = v23;
      v26 = v21[6];
      v27 = v21[7];
      v28 = v21[8];
      *(_OWORD *)(v12 + 7920) = v21[9];
      *(_OWORD *)(v12 + 7904) = v28;
      *(_OWORD *)(v12 + 7888) = v27;
      *(_OWORD *)(v12 + 7872) = v26;
      v29 = (__int128 *)(v50 + 160 * *v6);
      v30 = *v29;
      *(_OWORD *)(v12 + 7952) = v29[1];
      *(_OWORD *)(v12 + 7936) = v30;
      v31 = v29[2];
      v32 = v29[3];
      v33 = v29[4];
      *(_OWORD *)(v12 + 8016) = v29[5];
      *(_OWORD *)(v12 + 8000) = v33;
      *(_OWORD *)(v12 + 7984) = v32;
      *(_OWORD *)(v12 + 7968) = v31;
      v34 = v29[6];
      v35 = v29[7];
      v36 = v29[8];
      *(_OWORD *)(v12 + 8080) = v29[9];
      *(_OWORD *)(v12 + 8064) = v36;
      *(_OWORD *)(v12 + 8048) = v35;
      *(_OWORD *)(v12 + 8032) = v34;
      *(_QWORD *)(v12 + 4120) += 16 * (int)v5 * *(_DWORD *)(a2 + 4080);
      v37 = 8 * (int)v5 * *(_DWORD *)(a2 + 4100);
      *(_QWORD *)(v12 + 4128) += v37;
      *(_QWORD *)(v12 + 4136) += v37;
      vp8_build_block_offsets(v12);
      v38 = 0;
      *(_QWORD *)(v12 + 8184) = v58;
      *(_QWORD *)(v12 + 8792) = v57;
      *(_QWORD *)(v12 + 8616) = *(_QWORD *)(a2 + 8616);
      *(_OWORD *)(v12 + 8624) = *(_OWORD *)(a2 + 8624);
      *(_DWORD *)(v12 + 8640) = *(_DWORD *)(a2 + 8640);
      *(_OWORD *)(v12 + 34256) = *(_OWORD *)(a2 + 34256);
      *(_OWORD *)(v12 + 34272) = *(_OWORD *)(a2 + 34272);
      *(_DWORD *)(v12 + 8800) = *(_DWORD *)(a2 + 8800);
      *(_QWORD *)(v12 + 8680) = *(_QWORD *)(a2 + 8680);
      *(_QWORD *)(v12 + 8688) = *(_QWORD *)(a2 + 8688);
      *(_QWORD *)(v12 + 8696) = *(_QWORD *)(a2 + 8696);
      *(_QWORD *)(v12 + 8704) = *(_QWORD *)(a2 + 8704);
      *(_OWORD *)(v12 + 8736) = *(_OWORD *)(a2 + 8736);
      *(_QWORD *)(v12 + 8712) = *(_QWORD *)(a2 + 8712);
      *(_OWORD *)(v12 + 8720) = *(_OWORD *)(a2 + 8720);
      do
      {
        *(_OWORD *)(v11 + v38 + 1880) = *(_OWORD *)(a2 + v38 + 1880);
        *(_OWORD *)(v11 + v38 + 1896) = *(_OWORD *)(a2 + v38 + 1896);
        *(_OWORD *)(v11 + v38 + 1912) = *(_OWORD *)(a2 + v38 + 1912);
        *(_DWORD *)(v11 + v38 + 1948) = *(_DWORD *)(a2 + v38 + 1948);
        v38 += 88;
      }
      while (v38 != 2200);
      *(_DWORD *)(v12 + 8804) = *(_DWORD *)(a2 + 8804);
      *(_QWORD *)(v12 + 8672) = *(_QWORD *)(a2 + 8672);
      *(_OWORD *)(v12 + 8248) = *(_OWORD *)(v7 + 56);
      *(_OWORD *)(v12 + 8264) = *(_OWORD *)(v7 + 72);
      *(_BYTE *)(v12 + 0x2000) = *(_BYTE *)v7;
      *(_BYTE *)(v12 + 8195) = *(_BYTE *)(v7 + 3);
      *(_QWORD *)(v12 + 8199) = *(_QWORD *)(v7 + 7);
      v39 = *v56;
      *(_OWORD *)(v12 + 6288) = v56[1];
      *(_OWORD *)(v12 + 6272) = v39;
      v40 = *v55;
      *(_OWORD *)(v12 + 6256) = v55[1];
      *(_OWORD *)(v12 + 6240) = v40;
      v41 = *v54;
      *(_OWORD *)(v12 + 6320) = v54[1];
      *(_OWORD *)(v12 + 6304) = v41;
      v42 = *v53;
      *(_OWORD *)(v12 + 6352) = v53[1];
      *(_OWORD *)(v12 + 6336) = v42;
      *(_QWORD *)(v12 + 6392) = v12 + 6240;
      *(_QWORD *)(v12 + 6448) = v12 + 6240;
      *(_QWORD *)(v12 + 6504) = v12 + 6240;
      *(_QWORD *)(v12 + 6560) = v12 + 6240;
      *(_QWORD *)(v12 + 6616) = v12 + 6240;
      *(_QWORD *)(v12 + 6672) = v12 + 6240;
      *(_QWORD *)(v12 + 6728) = v12 + 6240;
      *(_QWORD *)(v12 + 6784) = v12 + 6240;
      *(_QWORD *)(v12 + 6840) = v12 + 6240;
      *(_QWORD *)(v12 + 6896) = v12 + 6240;
      *(_QWORD *)(v12 + 6952) = v12 + 6240;
      *(_QWORD *)(v12 + 7008) = v12 + 6240;
      *(_QWORD *)(v12 + 7064) = v12 + 6240;
      *(_QWORD *)(v12 + 7120) = v12 + 6240;
      *(_QWORD *)(v12 + 7176) = v12 + 6240;
      *(_QWORD *)(v12 + 7232) = v12 + 6240;
      *(_QWORD *)(v12 + 7288) = v12 + 6336;
      *(_QWORD *)(v12 + 7344) = v12 + 6336;
      *(_QWORD *)(v12 + 7400) = v12 + 6336;
      *(_QWORD *)(v12 + 7456) = v12 + 6336;
      *(_QWORD *)(v12 + 7512) = v12 + 6336;
      *(_QWORD *)(v12 + 7568) = v12 + 6336;
      *(_QWORD *)(v12 + 7624) = v12 + 6336;
      *(_QWORD *)(v12 + 7680) = v12 + 6336;
      *(_QWORD *)(v12 + 7736) = v12 + 6304;
      *(_OWORD *)(v12 + 29976) = *v8;
      v43 = v8[1];
      v44 = v8[2];
      v45 = v8[4];
      *(_OWORD *)(v12 + 30024) = v8[3];
      *(_OWORD *)(v12 + 30040) = v45;
      *(_OWORD *)(v12 + 29992) = v43;
      *(_OWORD *)(v12 + 30008) = v44;
      v46 = v9[4];
      v48 = v9[1];
      v47 = v9[2];
      *(_OWORD *)(v12 + 29944) = v9[3];
      *(_OWORD *)(v12 + 29960) = v46;
      *(_OWORD *)(v12 + 29912) = v48;
      *(_OWORD *)(v12 + 29928) = v47;
      *(_OWORD *)(v12 + 29896) = *v9;
      *(_DWORD *)(v12 + 30156) = *(_DWORD *)(v59 + 16);
      *(_QWORD *)(v12 + 30140) = *(_QWORD *)v59;
      bzero((void *)(v12 + 30160), 0x1000uLL);
      if (v6[139])
        v49 = -8;
      else
        v49 = -1;
      *(_DWORD *)(v12 + 7768) = v49;
      bzero((void *)(v12 + 8844), 0x1200uLL);
      *(_DWORD *)(v52 + 16) = 0;
      *(_OWORD *)v52 = 0u;
      *(_DWORD *)(v12 + 8840) = 0;
      bzero((void *)(v12 + 13452), 0x3FF8uLL);
      v10 = 0uLL;
      *(_OWORD *)(v12 + 29864) = 0u;
      *(_OWORD *)(v12 + 29880) = 0u;
      v11 += 34336;
      *(_DWORD *)(v12 + 30056) = 0;
      *(_DWORD *)(v12 + 34288) = 0;
    }
    while (v5 != v51);
  }
}

uint64_t vp8cx_create_encoder_threads(_DWORD *a1)
{
  pthread_t *v1;
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  _QWORD *v17;
  size_t v18;
  size_t v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  void **v23;
  size_t v24;
  void *v25;
  unint64_t v26;
  task_t *v27;
  pthread_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  int v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  _DWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  void **v46;
  _QWORD *v47;

  v1 = (pthread_t *)a1;
  v2 = a1 + 35795;
  v3 = a1[28466];
  if (v3 < 2 || (v4 = a1[28615], v4 < 2))
  {
    v6 = 0;
    if (!a1[35797])
      return 0;
  }
  else
  {
    if (v4 < v3)
      v3 = a1[28615];
    v5 = a1[27770] / *v2;
    if (v3 < v5)
      v5 = v3;
    v6 = v5 - 1;
    if (v5 - 1 == a1[35797])
      return 0;
  }
  vp8cx_remove_encoder_threads((uint64_t)a1);
  if (!v6)
    return 0;
  v7 = 8 * v6 + 23;
  if (v7 > 0x10000000000 || (v8 = malloc_type_malloc(v7, 0x74AD08B5uLL)) == 0)
  {
    *(_QWORD *)(v2 + 5) = 0;
    v10 = v2 + 5;
LABEL_17:
    vpx_internal_error((uint64_t)(v1 + 13504), 2, "Failed to allocate cpi->h_encoding_thread");
    v11 = 4 * v6 + 23;
    if (v11 >= 0x10000000001)
      goto LABEL_15;
    goto LABEL_18;
  }
  v9 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 - 8) = v8;
  *(_QWORD *)(v2 + 5) = v9;
  v10 = v2 + 5;
  if (!v9)
    goto LABEL_17;
  v11 = 4 * v6 + 23;
  if (v11 >= 0x10000000001)
  {
LABEL_15:
    *(_QWORD *)(v2 + 17) = 0;
    v12 = v2 + 17;
    vpx_internal_error((uint64_t)(v1 + 13504), 2, "Failed to allocate cpi->h_event_start_encoding");
LABEL_26:
    *(_QWORD *)(v2 + 19) = 0;
    v17 = v2 + 19;
    goto LABEL_27;
  }
LABEL_18:
  v13 = malloc_type_malloc(v11, 0x74AD08B5uLL);
  if (!v13)
  {
    *(_QWORD *)(v2 + 17) = 0;
    v12 = v2 + 17;
LABEL_25:
    vpx_internal_error((uint64_t)(v1 + 13504), 2, "Failed to allocate cpi->h_event_start_encoding");
    v15 = malloc_type_malloc(v11, 0x74AD08B5uLL);
    if (!v15)
      goto LABEL_26;
    goto LABEL_21;
  }
  v14 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v14 - 8) = v13;
  *(_QWORD *)(v2 + 17) = v14;
  v12 = v2 + 17;
  if (!v14)
    goto LABEL_25;
  v15 = malloc_type_malloc(v11, 0x74AD08B5uLL);
  if (!v15)
    goto LABEL_26;
LABEL_21:
  v16 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v16 - 8) = v15;
  *(_QWORD *)(v2 + 19) = v16;
  v17 = v2 + 19;
  if (v16)
  {
    v18 = 34336 * v6;
    v19 = v18 + 39;
    if (v18 + 39 > 0x10000000000)
      goto LABEL_31;
    goto LABEL_28;
  }
LABEL_27:
  vpx_internal_error((uint64_t)(v1 + 13504), 2, "Failed to allocate cpi->h_event_end_encoding");
  v18 = 34336 * v6;
  v19 = v18 + 39;
  if (v18 + 39 > 0x10000000000)
  {
LABEL_31:
    *(_QWORD *)(v2 + 9) = 0;
    v23 = (void **)(v2 + 9);
LABEL_32:
    vpx_internal_error((uint64_t)(v1 + 13504), 2, "Failed to allocate cpi->mb_row_ei");
    v22 = *v23;
    goto LABEL_33;
  }
LABEL_28:
  v20 = malloc_type_malloc(v19, 0x74AD08B5uLL);
  if (!v20)
    goto LABEL_31;
  v21 = v20;
  v22 = (_QWORD *)(((unint64_t)v20 + 39) & 0xFFFFFFFFFFFFFFE0);
  *(v22 - 1) = v21;
  *(_QWORD *)(v2 + 9) = v22;
  v23 = (void **)(v2 + 9);
  if (!v22)
    goto LABEL_32;
LABEL_33:
  bzero(v22, v18);
  v24 = 24 * v6 + 23;
  if (v24 <= 0x10000000000 && (v25 = malloc_type_malloc(v24, 0x74AD08B5uLL)) != 0)
  {
    v26 = ((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v26 - 8) = v25;
    *(_QWORD *)(v2 + 11) = v26;
    v47 = v2 + 11;
    if (v26)
      goto LABEL_39;
  }
  else
  {
    *(_QWORD *)(v2 + 11) = 0;
    v47 = v2 + 11;
  }
  vpx_internal_error((uint64_t)(v1 + 13504), 2, "Failed to allocate cpi->en_thread_data");
LABEL_39:
  v46 = v23;
  atomic_store(1u, v2 + 1);
  v2[2] = v6;
  v27 = (task_t *)MEMORY[0x24BDAEC58];
  if (v6 < 1)
  {
    v36 = 0;
LABEL_45:
    semaphore_create(*v27, v2 + 21, 0, 0);
    semaphore_create(*v27, v2 + 22, 0, 0);
    *(_QWORD *)(v2 + 15) = v1;
    if (pthread_create(v1 + 17901, 0, (void *(__cdecl *)(void *))thread_loopfilter, v1 + 17904))
    {
      atomic_store(0, v2 + 1);
      if (v36 >= 1)
      {
        v37 = v36;
        do
        {
          MEMORY[0x20BD0B6E0](*(unsigned int *)(*v12 + 4 * v37 - 4));
          MEMORY[0x20BD0B6E0](*(unsigned int *)(*v17 + 4 * v37 - 4));
          pthread_join(*(pthread_t *)(*v10 + 8 * v37 - 8), 0);
          semaphore_destroy(*v27, *(_DWORD *)(*v12 + 4 * v37 - 4));
          semaphore_destroy(*v27, *(_DWORD *)(*v17 + 4 * v37 - 4));
        }
        while (v37-- > 1);
      }
      semaphore_destroy(*v27, v2[22]);
      semaphore_destroy(*v27, v2[21]);
      v39 = 4294967294;
      goto LABEL_56;
    }
    return 0;
  }
  v28 = v1;
  v44 = v10;
  v45 = v12;
  v43 = v2;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  while (1)
  {
    v34 = (_QWORD *)(*v47 + v32);
    vp8_setup_block_ptrs((char *)*v46 + v30);
    vp8_setup_block_dptrs((char *)*v46 + v30 + 4224);
    semaphore_create(*v27, (semaphore_t *)(*v45 + v29), 0, 0);
    semaphore_create(*v27, (semaphore_t *)(*v17 + v29), 0, 0);
    *(_DWORD *)v34 = v33;
    v35 = (char *)*v46 + v30;
    v34[1] = v28;
    v34[2] = v35;
    if (pthread_create((pthread_t *)(*v44 + v31), 0, (void *(__cdecl *)(void *))thread_encoding_proc, v34))
      break;
    ++v33;
    v32 += 24;
    v31 += 8;
    v30 += 34336;
    v29 += 4;
    if (24 * v6 == v32)
    {
      v10 = v44;
      v12 = v45;
      v1 = v28;
      v36 = v6;
      v2 = v43;
      goto LABEL_45;
    }
  }
  v2 = v43;
  atomic_store(0, v43 + 1);
  if ((_DWORD)v33)
  {
    v40 = v33 + 1;
    v10 = v44;
    v12 = v45;
    v41 = v46;
    do
    {
      MEMORY[0x20BD0B6E0](*(unsigned int *)(*v45 + 4 * (v40 - 2)));
      MEMORY[0x20BD0B6E0](*(unsigned int *)(*v17 + 4 * (v40 - 2)));
      pthread_join(*(pthread_t *)(*v44 + 8 * (v40 - 2)), 0);
      semaphore_destroy(*v27, *(_DWORD *)(*v45 + 4 * (v40 - 2)));
      semaphore_destroy(*v27, *(_DWORD *)(*v17 + 4 * (v40-- - 2)));
    }
    while (v40 > 1);
    v39 = 0xFFFFFFFFLL;
    goto LABEL_57;
  }
  v39 = 0xFFFFFFFFLL;
  v10 = v44;
  v12 = v45;
LABEL_56:
  v41 = v46;
LABEL_57:
  if (*v12)
    free(*(void **)(*v12 - 8));
  *v12 = 0;
  if (*v17)
    free(*(void **)(*v17 - 8));
  *v17 = 0;
  if (*v10)
    free(*(void **)(*v10 - 8));
  *v10 = 0;
  if (*v41)
    free(*((void **)*v41 - 1));
  *v41 = 0;
  if (*v47)
    free(*(void **)(*v47 - 8));
  *(_QWORD *)(v2 + 11) = 0;
  v2[2] = 0;
  return v39;
}

void vp8cx_remove_encoder_threads(uint64_t a1)
{
  uint64_t v1;
  task_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1 + 143168;
  if (atomic_load((unsigned int *)(a1 + 143184)))
  {
    atomic_store(0, (unsigned int *)(a1 + 143184));
    v3 = (task_t *)MEMORY[0x24BDAEC58];
    if (*(int *)(a1 + 143188) >= 1)
    {
      v4 = 0;
      do
      {
        MEMORY[0x20BD0B6E0](*(unsigned int *)(*(_QWORD *)(v1 + 80) + 4 * v4));
        MEMORY[0x20BD0B6E0](*(unsigned int *)(*(_QWORD *)(v1 + 88) + 4 * v4));
        pthread_join(*(pthread_t *)(*(_QWORD *)(v1 + 32) + 8 * v4), 0);
        semaphore_destroy(*v3, *(_DWORD *)(*(_QWORD *)(v1 + 80) + 4 * v4));
        semaphore_destroy(*v3, *(_DWORD *)(*(_QWORD *)(v1 + 88) + 4 * v4++));
      }
      while (v4 < *(int *)(v1 + 20));
    }
    MEMORY[0x20BD0B6E0](*(unsigned int *)(v1 + 96));
    pthread_join(*(pthread_t *)(v1 + 40), 0);
    semaphore_destroy(*v3, *(_DWORD *)(v1 + 100));
    semaphore_destroy(*v3, *(_DWORD *)(v1 + 96));
    *(_DWORD *)(v1 + 24) = 0;
    if (*(_QWORD *)v1)
      free(*(void **)(*(_QWORD *)v1 - 8));
    *(_QWORD *)v1 = 0;
    *(_DWORD *)(v1 + 8) = 0;
    v5 = *(_QWORD *)(v1 + 80);
    if (v5)
      free(*(void **)(v5 - 8));
    *(_QWORD *)(v1 + 80) = 0;
    v6 = *(_QWORD *)(v1 + 88);
    if (v6)
      free(*(void **)(v6 - 8));
    *(_QWORD *)(v1 + 88) = 0;
    v7 = *(_QWORD *)(v1 + 32);
    if (v7)
      free(*(void **)(v7 - 8));
    *(_QWORD *)(v1 + 32) = 0;
    v8 = *(_QWORD *)(v1 + 48);
    if (v8)
      free(*(void **)(v8 - 8));
    *(_QWORD *)(v1 + 48) = 0;
    v9 = *(_QWORD *)(v1 + 56);
    if (v9)
      free(*(void **)(v9 - 8));
    *(_QWORD *)(v1 + 56) = 0;
    *(_DWORD *)(v1 + 20) = 0;
  }
}

uint64_t thread_encoding_proc(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v6;
  uint64_t v8;
  int v10;
  int64x2_t *v11;
  int v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  signed int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  _OWORD *v48;
  _OWORD *v49;
  _OWORD *v50;
  _OWORD *v51;
  _OWORD *v52;
  _OWORD *v53;
  _OWORD *v54;
  _OWORD *v55;
  _OWORD *v56;
  _OWORD *v57;
  _OWORD *v58;
  _OWORD *v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  int v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  int v84;
  _DWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  unsigned int v89;
  int v90;
  int v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;

  v1 = *a1;
  v3 = (_DWORD *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 2);
  v4 = v3 + 35771;
  v98 = 0;
  v97 = 0;
  if (atomic_load(v3 + 35796))
  {
    v85 = v3 + 37042;
    v6 = v3 + 27636;
    v92 = (_DWORD *)(v2 + 34292);
    v84 = v1 + 1;
    v83 = v1;
    v95 = v3;
    do
    {
      if (!MEMORY[0x20BD0B6EC](*(unsigned int *)(*(_QWORD *)(v4 + 41) + 4 * v1)))
      {
        v8 = (int)v4[24];
        v96 = 0;
        if (!atomic_load(v4 + 25))
          return 0;
        v10 = v6[135];
        *(_QWORD *)(v2 + 8096) = *((_QWORD *)v6 + 74) + 76 * v10 * v84;
        *(_DWORD *)(v2 + 8104) = v10;
        v11 = (int64x2_t *)(v2 + 4120);
        if (v84 < v6[133])
        {
          v12 = v6[134];
          v13 = v84;
          while (1)
          {
            v25 = *v6;
            v26 = v3[40 * v6[1] + 27476];
            v27 = v3[40 * v6[1] + 27481];
            v28 = v13 * v12;
            v29 = *(_QWORD *)(v4 + 21);
            v30 = v13;
            v96 = *((_QWORD *)v6 + 576) + 6144 * v13 * v12;
            *(_QWORD *)(*(_QWORD *)(v4 + 47) + 16 * v13) = v96;
            *(_QWORD *)(v2 + 8176) = *((_QWORD *)v6 + 133);
            *(_QWORD *)(v2 + 8184) = &v97;
            v97 = 0;
            v98 = 0;
            *(_DWORD *)(v2 + 8112) = v13 != 0;
            *(_QWORD *)(v2 + 8656) = *(_QWORD *)v85 + 4 * v13 * v12;
            if (v12 > 0)
              break;
            LODWORD(v31) = 0;
LABEL_10:
            v14 = (_BYTE *)(*(_QWORD *)(v2 + 7992) + 14 * (int)v3[40 * v25 + 27476]);
            v15 = 6 * (int)v3[40 * v25 + 27481];
            v16 = (_BYTE *)(*(_QWORD *)(v2 + 8000) + v15);
            v17 = (_BYTE *)(*(_QWORD *)(v2 + 8008) + v15);
            v14[16] = v14[15];
            v16[8] = v16[7];
            v17[8] = v17[7];
            v14[17] = v14[15];
            v16[9] = v16[7];
            v17[9] = v17[7];
            v14[18] = v14[15];
            v16[10] = v16[7];
            v17[10] = v17[7];
            v14[19] = v14[15];
            v16[11] = v16[7];
            v17[11] = v17[7];
            v18 = &v14[v3[40 * v25 + 27476] + 16];
            v19 = (int)v3[40 * v25 + 27481];
            v20 = &v16[v19 + 8];
            v21 = &v17[v19 + 8];
            *v18 = *(v18 - 1);
            *v20 = *(v20 - 1);
            *v21 = *(v21 - 1);
            v18[1] = *(v18 - 1);
            v20[1] = *(v20 - 1);
            v21[1] = *(v21 - 1);
            v18[2] = *(v18 - 1);
            v20[2] = *(v20 - 1);
            v21[2] = *(v21 - 1);
            v18[3] = *(v18 - 1);
            v20[3] = *(v20 - 1);
            v21[3] = *(v21 - 1);
            atomic_store(v31 + v8, (unsigned int *)(v29 + 4 * v30));
            LODWORD(v21) = v4[26];
            LODWORD(v20) = *(_DWORD *)(v2 + 8104) * (_DWORD)v21;
            v22 = *(_QWORD *)(v2 + 8096) + 76 * (int)v20;
            v23 = *(_QWORD *)(v2 + 8576) + 132 * (int)v20;
            v12 = v6[134];
            *(_QWORD *)(v2 + 4120) += 16 * *(_DWORD *)(v2 + 4080) * ((int)v21 + 1) - 16 * v12;
            v24 = 8 * ((int)v21 + 1) * *(_DWORD *)(v2 + 4100) - 8 * v12;
            *(_QWORD *)(v2 + 4128) += v24;
            *(_QWORD *)(v2 + 4136) += v24;
            *(_QWORD *)(v2 + 8096) = v22 + 76;
            *(_QWORD *)(v2 + 8576) = v23 + 132;
            *(_QWORD *)(v2 + 8776) += v12 * (int)v21;
            v13 = (_DWORD)v21 + 1 + v30;
            if (v13 >= v6[133])
              goto LABEL_3;
          }
          v31 = 0;
          v32 = v13 - 1;
          v33 = v28;
          v91 = -128 * v13;
          v89 = (16 * v13) ^ 0xFFFFFFF0;
          v90 = ~v13;
          v34 = &v3[40 * v25];
          v88 = v34 + 13743;
          v87 = v34 + 13744;
          v86 = v34 + 13745;
          v35 = 8 * (int)v30 * v27;
          v36 = v26 * 16 * (int)v30;
          v93 = v30;
          v94 = v28;
          while (2)
          {
            if (!(((int)v31 - 1) % (int)v8))
              atomic_store(v31 - 1, (unsigned int *)(v29 + 4 * v30));
            if ((_DWORD)v30 && (((_DWORD)v8 - 1) & v31) == 0)
            {
              do
                v39 = atomic_load((unsigned int *)(v29 + 4 * v32));
              while (v31 > v39 - v8);
            }
            *(_DWORD *)(v2 + 8228) = -128 * v31;
            v40 = v6[134] + ~(_DWORD)v31;
            *(_DWORD *)(v2 + 8232) = v40 << 7;
            *(_DWORD *)(v2 + 8236) = v91;
            v41 = v6[133] + v90;
            *(_DWORD *)(v2 + 8240) = v41 << 7;
            *(_DWORD *)(v2 + 8752) = 16 * ~(_DWORD)v31;
            *(_DWORD *)(v2 + 8756) = 16 * v40 + 16;
            *(_DWORD *)(v2 + 8760) = v89;
            *(_DWORD *)(v2 + 8764) = 16 * v41 + 16;
            *(_QWORD *)(v2 + 7992) = *v88 + v36;
            *(_QWORD *)(v2 + 8000) = *v87 + v35;
            *(_QWORD *)(v2 + 8008) = *v86 + v35;
            *(_DWORD *)(v2 + 8116) = v31 != 0;
            v42 = v6[1201];
            *(_DWORD *)(v2 + 8644) = v42;
            v43 = (int)v6[1200];
            *(_DWORD *)(v2 + 8648) = v43;
            v44 = *(_OWORD **)(v2 + 4120);
            v45 = *(int *)(v2 + 4080);
            *(_OWORD *)(v2 + 1600) = *v44;
            v46 = (_OWORD *)((char *)v44 + v45);
            *(_OWORD *)(v2 + 1616) = *v46;
            v47 = (_OWORD *)((char *)v46 + v45);
            *(_OWORD *)(v2 + 1632) = *v47;
            v48 = (_OWORD *)((char *)v47 + v45);
            *(_OWORD *)(v2 + 1648) = *v48;
            v49 = (_OWORD *)((char *)v48 + v45);
            *(_OWORD *)(v2 + 1664) = *v49;
            v50 = (_OWORD *)((char *)v49 + v45);
            *(_OWORD *)(v2 + 1680) = *v50;
            v51 = (_OWORD *)((char *)v50 + v45);
            *(_OWORD *)(v2 + 1696) = *v51;
            v52 = (_OWORD *)((char *)v51 + v45);
            *(_OWORD *)(v2 + 1712) = *v52;
            v53 = (_OWORD *)((char *)v52 + v45);
            *(_OWORD *)(v2 + 1728) = *v53;
            v54 = (_OWORD *)((char *)v53 + v45);
            *(_OWORD *)(v2 + 1744) = *v54;
            v55 = (_OWORD *)((char *)v54 + v45);
            *(_OWORD *)(v2 + 1760) = *v55;
            v56 = (_OWORD *)((char *)v55 + v45);
            *(_OWORD *)(v2 + 1776) = *v56;
            v57 = (_OWORD *)((char *)v56 + v45);
            *(_OWORD *)(v2 + 1792) = *v57;
            v58 = (_OWORD *)((char *)v57 + v45);
            *(_OWORD *)(v2 + 1808) = *v58;
            v59 = (_OWORD *)((char *)v58 + v45);
            *(_OWORD *)(v2 + 1824) = *v59;
            *(_OWORD *)(v2 + 1840) = *(_OWORD *)((char *)v59 + v45);
            if (v6[992] == 1)
            {
              v60 = *(unsigned int **)(v2 + 8656);
              v61 = v4[1270];
              v62 = (uint64_t)((v61 + 2 * *v60) * v43 + (((2 * v61) + (unint64_t)*v60) >> 1))
                  / (uint64_t)((2 * v61) + (unint64_t)*v60);
              *(_DWORD *)(v2 + 8648) = v62;
              v63 = 100 * (int)v62 / (110 * v42);
              if (!v63)
                v63 = 1;
              *(_DWORD *)(v2 + 8632) = v63;
              v64 = *v60;
              v65 = v64 + (4 * v61);
              v66 = v61 + 4 * v64;
              if (v64 <= v61)
                v67 = 1 - (v65 + (v66 >> 1)) / v66;
              else
                v67 = (v66 + (v65 >> 1)) / v65 - 1;
              *(_DWORD *)(v2 + 8672) = v67;
            }
            if (v11[254].i8[8])
            {
              v68 = *(unsigned __int8 *)(*((_QWORD *)v6 + 4062) + v31 + v33);
              if (v68 >= 4)
                LOBYTE(v68) = 0;
              *(_BYTE *)(*(_QWORD *)(v2 + 8096) + 11) = v68;
              vp8cx_mb_init_quantizer((uint64_t)v95, v2, 1);
              *(_QWORD *)(v2 + 8784) = *((_QWORD *)v6 + 4066) + v94 + v31;
              if (!v6[129])
              {
LABEL_13:
                v37 = vp8cx_encode_intra_macroblock(v95, v2, &v96);
                v30 = v93;
                *(_DWORD *)(v2 + 34320) += v37;
                v11 = (int64x2_t *)(v2 + 4120);
                v33 = v94;
                goto LABEL_14;
              }
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)(v2 + 8096) + 11) = 0;
              *(_QWORD *)(v2 + 8784) = *((_QWORD *)v6 + 4066) + v33 + v31;
              if (!v6[129])
                goto LABEL_13;
            }
            v69 = vp8cx_encode_inter_macroblock(v95, v2, &v96, v36, v35, v93, v31);
            v30 = v93;
            *(_DWORD *)(v2 + 34320) += v69;
            v11 = (int64x2_t *)(v2 + 4120);
            v33 = v94;
            if (!v85[276])
            {
              v70 = *(_BYTE **)(v2 + 8096);
              if (*v70 != 7 || v70[2] != 1)
              {
                v80 = v31 + v94;
                *(_BYTE *)(*(_QWORD *)(v4 + 7) + v80) = 0;
                *(_BYTE *)(*(_QWORD *)(v4 + 9) + v80) = 0;
                if (!*v92)
                  goto LABEL_40;
                goto LABEL_39;
              }
              v71 = *(_QWORD *)(v4 + 7);
              v72 = v31 + v94;
              v73 = *(unsigned __int8 *)(v71 + v31 + v94);
              if (v73 == 255)
              {
                v74 = *(_QWORD *)(v4 + 9);
                v75 = *(unsigned __int8 *)(v74 + v72);
                if (v75 == 255)
                  goto LABEL_38;
LABEL_48:
                *(_BYTE *)(v74 + v72) = v75 + 1;
                if (!*v92)
                  goto LABEL_40;
LABEL_39:
                *(_BYTE *)(*(_QWORD *)(v4 + 9) + v31 + v94) = 0;
                goto LABEL_40;
              }
              *(_BYTE *)(v71 + v72) = v73 + 1;
              v74 = *(_QWORD *)(v4 + 9);
              v75 = *(unsigned __int8 *)(v74 + v72);
              if (v75 != 255)
                goto LABEL_48;
LABEL_38:
              if (*v92)
                goto LABEL_39;
LABEL_40:
              if (!v85[276] && *v4 && *(_BYTE *)(v2 + 0x2000))
              {
                v76 = *(_BYTE **)(v2 + 8096);
                v77 = v31 + v94;
                *(_BYTE *)(*((_QWORD *)v6 + 4062) + v31 + v94) = v76[11];
                if (v76[11])
                {
                  v78 = *(_QWORD *)(v4 + 5);
                  v79 = -1;
                  goto LABEL_55;
                }
                if (*v76 == 7 && v76[2] == 1)
                {
                  v81 = *(_QWORD *)(v4 + 5);
                  if (*(_BYTE *)(v81 + v77) == 1)
                    *(_BYTE *)(v81 + v77) = 0;
                }
                else
                {
                  v78 = *(_QWORD *)(v4 + 5);
                  v79 = 1;
LABEL_55:
                  *(_BYTE *)(v78 + v77) = v79;
                }
              }
            }
LABEL_14:
            *(_QWORD *)(*(_QWORD *)(v4 + 47) + 16 * v30 + 8) = v96;
            ++*(_QWORD *)(v2 + 8776);
            *(_QWORD *)(v2 + 8656) += 4;
            *v11 = vaddq_s64(*v11, (int64x2_t)xmmword_208F3C2C0);
            *(_QWORD *)(v2 + 4136) += 8;
            v36 += 16;
            v38 = *(_QWORD *)(v2 + 8096);
            ++*(_DWORD *)(v2 + 34304 + 4 * *(unsigned __int8 *)(v38 + 11));
            v35 += 8;
            *(_QWORD *)(v2 + 8096) = v38 + 76;
            *(_QWORD *)(v2 + 8576) += 132;
            *(_QWORD *)(v2 + 8176) += 9;
            if (++v31 >= (int)v6[134])
            {
              v3 = v95;
              goto LABEL_10;
            }
            continue;
          }
        }
LABEL_3:
        v1 = v83;
        MEMORY[0x20BD0B6E0](*(unsigned int *)(*(_QWORD *)(v4 + 43) + 4 * v83));
      }
    }
    while (atomic_load(v4 + 25));
  }
  return 0;
}

uint64_t thread_loopfilter(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned int *)(v1 + 143184);
  while (atomic_load(v2))
  {
    if (!MEMORY[0x20BD0B6EC](*(unsigned int *)(v1 + 143264)))
    {
      if (!atomic_load(v2))
        return 0;
      vp8_loopfilter_frame(v1, v1 + 108032);
      MEMORY[0x20BD0B6E0](*(unsigned int *)(v1 + 143268));
    }
  }
  return 0;
}

unsigned __int8 *vp8_copy_and_extend_frame(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v4 = *(_DWORD *)(a2 + 104);
  v6 = *(_DWORD *)a1;
  v5 = *(_DWORD *)(a1 + 4);
  v7 = *(_DWORD *)a2 + v4 - *(_DWORD *)a1;
  v9 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v10 = *(unsigned __int8 **)(a1 + 56);
  if (v8 - v9 == 1)
    v11 = 2;
  else
    v11 = 1;
  copy_and_extend_plane(v10, *(_DWORD *)(a1 + 16), *(char **)(a2 + 56), *(_DWORD *)(a2 + 16), v5, v6, v4, v4, *(_DWORD *)(a2 + 4) + v4 - v5, v7, 1);
  v12 = *(int *)(a2 + 104) >> 1;
  v14 = *(_DWORD *)(a1 + 20);
  v13 = *(_DWORD *)(a1 + 24);
  v15 = v12 + *(_DWORD *)(a2 + 24) - v13;
  v16 = *(_DWORD *)(a2 + 20) + v12;
  v17 = v16 - v14;
  copy_and_extend_plane(*(unsigned __int8 **)(a1 + 64), *(_DWORD *)(a1 + 36), *(char **)(a2 + 64), *(_DWORD *)(a2 + 36), v13, v14, v12, v12, v15, v16 - v14, v11);
  return copy_and_extend_plane(*(unsigned __int8 **)(a1 + 72), *(_DWORD *)(a1 + 36), *(char **)(a2 + 72), *(_DWORD *)(a2 + 36), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 20), v12, v12, v15, v17, v11);
}

unsigned __int8 *copy_and_extend_plane(unsigned __int8 *result, int a2, char *a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  size_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int128 *v23;
  char *v24;
  unsigned __int8 *v25;
  BOOL v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int128 *v31;
  const char *v32;
  const char *v33;
  unsigned __int128 v34;
  unsigned __int128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  int v44;
  int v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *__b;
  const char *v58;
  uint64_t v59;
  size_t v60;
  uint64_t v61;

  v12 = a8;
  v59 = -(uint64_t)a8;
  __b = &a3[-a8];
  if (a5 >= 1)
  {
    v13 = result;
    v14 = (a6 - 1) * a11;
    v61 = a2;
    v60 = a8;
    if (a11 == 1)
    {
      v15 = a5;
      v16 = a3;
      do
      {
        memset(&v16[v59], *v13, v12);
        memcpy(v16, v13, a6);
        result = (unsigned __int8 *)memset(&v16[a6], v13[v14], a10);
        v13 += v61;
        v12 = v60;
        v16 += a4;
        --v15;
      }
      while (v15);
      goto LABEL_33;
    }
    if (a6 > 0)
    {
      v17 = 0;
      v18 = &result[v14];
      v19 = a3;
      v20 = &a3[a6];
      v21 = a6 & 0x1F;
      if (!v21)
        v21 = 32;
      v48 = v21;
      v51 = a6 - v21;
      v22 = a6 & 7;
      if (!v22)
        v22 = 8;
      v50 = a6 - v22;
      v58 = (const char *)(result + 32);
      v23 = (unsigned __int128 *)(a3 + 16);
      v49 = v22 - a6;
      v24 = &a3[-a8];
      v25 = result;
      while (1)
      {
        memset(v24, *v25, v12);
        if (a6 >= 9
          && (&a3[v17 * a4] < (char *)&v13[2 * a6 - 1 + v17 * v61]
            ? (v26 = v25 >= (unsigned __int8 *)&a3[a6 + v17 * a4])
            : (v26 = 1),
              v26))
        {
          if (a6 >= 0x21)
          {
            v30 = v51;
            v31 = v23;
            v32 = v58;
            v28 = a10;
            do
            {
              v33 = v32 - 32;
              v34 = (unsigned __int128)vld2q_s8(v33);
              v35 = (unsigned __int128)vld2q_s8(v32);
              *(v31 - 1) = v34;
              *v31 = v35;
              v32 += 64;
              v31 += 2;
              v30 -= 32;
            }
            while (v30);
            v29 = v51;
            v27 = v51;
            if (v48 < 9)
              goto LABEL_27;
          }
          else
          {
            v27 = 0;
            v28 = a10;
          }
          v36 = 2 * v27;
          v37 = &v19[v27];
          v38 = v49 + v27;
          do
          {
            v39 = (const char *)&v25[v36];
            v40 = *(_OWORD *)vld2_s8(v39).val;
            *(_QWORD *)v37 = v40;
            v37 += 8;
            v36 += 16;
            v38 += 8;
          }
          while (v38);
          v29 = v50;
        }
        else
        {
          v29 = 0;
          v28 = a10;
        }
LABEL_27:
        v41 = 2 * v29;
        do
        {
          v19[v29++] = v25[v41];
          v41 += 2;
        }
        while (a6 != v29);
        result = (unsigned __int8 *)memset(v20, *v18, v28);
        v25 += v61;
        v18 += v61;
        v24 += a4;
        v20 += a4;
        ++v17;
        v58 += v61;
        v23 = (unsigned __int128 *)((char *)v23 + a4);
        v19 += a4;
        v12 = v60;
        if ((_DWORD)v17 == a5)
          goto LABEL_33;
      }
    }
    v42 = a5;
    v43 = a3;
    do
    {
      memset(&v43[v59], *v13, v12);
      result = (unsigned __int8 *)memset(&v43[a6], v13[v14], a10);
      v13 += v61;
      v12 = v60;
      v43 += a4;
      --v42;
    }
    while (v42);
  }
LABEL_33:
  v44 = a9;
  v45 = a8 + a6 + a10;
  if (a7 >= 1)
  {
    v46 = &a3[v59 - a4 * a7];
    do
    {
      result = (unsigned __int8 *)memcpy(v46, __b, v45);
      v46 += a4;
      --a7;
    }
    while (a7);
  }
  if (a9 >= 1)
  {
    v47 = &a3[a5 * (uint64_t)a4 + v59];
    do
    {
      result = (unsigned __int8 *)memcpy(v47, &a3[(a5 - 1) * a4 + v59], v45);
      v47 += a4;
      --v44;
    }
    while (v44);
  }
  return result;
}

unsigned __int8 *vp8_copy_and_extend_frame_with_rect(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v28;
  int v29;

  v10 = *(_DWORD *)(a2 + 104);
  v11 = *(_DWORD *)(a1 + 4);
  if (a3)
    v12 = 0;
  else
    v12 = *(_DWORD *)(a2 + 104);
  if (a4)
    v13 = 0;
  else
    v13 = *(_DWORD *)(a2 + 104);
  if (a5 + a3 == v11)
    v14 = *(_DWORD *)(a2 + 4) + v10 - v11;
  else
    v14 = 0;
  if (a6 + a4 == *(_DWORD *)a1)
    v15 = *(_DWORD *)a2 + v10 - *(_DWORD *)a1;
  else
    v15 = 0;
  if (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64) == 1)
    v16 = 2;
  else
    v16 = 1;
  v29 = v16;
  v17 = (uint64_t)a4 >> 1;
  v18 = v17 + ((*(_DWORD *)(a2 + 36) * a3) >> 1);
  v19 = v17 + ((*(_DWORD *)(a1 + 36) * a3) >> 1);
  copy_and_extend_plane((unsigned __int8 *)(*(_QWORD *)(a1 + 56) + a4 + (uint64_t)(*(_DWORD *)(a1 + 16) * a3)), *(_DWORD *)(a1 + 16), (char *)(*(_QWORD *)(a2 + 56) + a4 + (uint64_t)(*(_DWORD *)(a2 + 16) * a3)), *(_DWORD *)(a2 + 16), a5, a6, v12, v13, v14, v15, 1);
  v20 = (v12 + 1) >> 1;
  v21 = (v13 + 1) >> 1;
  v28 = v21;
  v22 = (v14 + 1) >> 1;
  v23 = (v15 + 1) >> 1;
  v24 = (a5 + 1) >> 1;
  v25 = (a6 + 1) >> 1;
  v26 = v20;
  copy_and_extend_plane((unsigned __int8 *)(*(_QWORD *)(a1 + 64) + v19), *(_DWORD *)(a1 + 36), (char *)(*(_QWORD *)(a2 + 64) + v18), *(_DWORD *)(a2 + 36), v24, v25, v20, v21, v22, v23, v29);
  return copy_and_extend_plane((unsigned __int8 *)(*(_QWORD *)(a1 + 72) + v19), *(_DWORD *)(a1 + 36), (char *)(*(_QWORD *)(a2 + 72) + v18), *(_DWORD *)(a2 + 36), v24, v25, v26, v28, v22, v23, v29);
}

int16x8_t vp8_fast_quantize_b_neon(_QWORD *a1, uint64_t a2)
{
  int16x8_t *v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t *v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t *v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t result;

  v2 = (int16x8_t *)a1[1];
  v3 = *v2;
  v4 = v2[1];
  v5 = (int16x8_t *)a1[7];
  v6 = *v5;
  v7 = v5[1];
  v8 = (int16x8_t *)a1[3];
  v9 = *v8;
  v10 = v8[1];
  v11 = *(int16x8_t **)(a2 + 24);
  v12 = *v11;
  v13 = v11[1];
  v14 = vcltzq_s16(v3);
  v15 = vcltzq_s16(v4);
  v16 = vqdmulhq_s16(vaddq_s16(vabsq_s16(v3), v6), v9);
  v17 = vqdmulhq_s16(vaddq_s16(vabsq_s16(v4), v7), v10);
  v7.i64[0] = 0x1000100010001;
  v7.i64[1] = 0x1000100010001;
  v18 = vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vshrq_n_s16(v16, 1uLL), (int8x16_t)v14), v14);
  v19 = vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vshrq_n_s16(v17, 1uLL), (int8x16_t)v15), v15);
  **(_BYTE **)(a2 + 40) = vmaxvq_u16(vmaxq_u16((uint16x8_t)vandq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v16, (uint16x8_t)v7), (int8x16_t)xmmword_208F3D5A0), (uint16x8_t)vandq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, (uint16x8_t)v7), (int8x16_t)xmmword_208F3D5B0)));
  *(int16x8_t *)*(_QWORD *)a2 = v18;
  *(int16x8_t *)(*(_QWORD *)a2 + 16) = v19;
  *(int16x8_t *)*(_QWORD *)(a2 + 8) = vmulq_s16(v18, v12);
  result = vmulq_s16(v19, v13);
  *(int16x8_t *)(*(_QWORD *)(a2 + 8) + 16) = result;
  return result;
}

void vpx_fdct16x16_neon(int16x8_t *a1, uint64_t a2, int a3)
{
  int16x8_t *v4;
  int16x8_t v5;
  uint64_t v6;
  int16x8_t v7;
  int16x8_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint64_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  uint64_t v20;
  int16x8_t v21;
  uint64_t v22;
  int16x8_t v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int64x2_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int16x8_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int8x16_t v134;
  int64x2_t v135;
  int8x16_t v136;
  int64x2_t v137;
  int8x16_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int16x8_t v194;
  int64x2_t v195;
  int64x2_t v196;
  int64x2_t v197;
  int64x2_t v198;
  int64x2_t v199;
  int64x2_t v200;
  int64x2_t v201;
  int64x2_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int64x2_t v227;
  int64x2_t v228;
  int64x2_t v229;
  int64x2_t v230;
  int64x2_t v231;
  int64x2_t v232;
  int16x8_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int16x8_t v257;
  int32x4_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int16x8_t v262;
  int32x4_t v263;
  int16x8_t v264;
  int32x4_t v265;
  int32x4_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int16x8_t v274[16];
  int16x8_t v275;
  int16x8_t v276;
  int16x8_t v277;
  int16x8_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int16x8_t v282;
  int16x8_t v283;
  int16x8_t v284;
  int16x8_t v285;
  int16x8_t v286;
  int16x8_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int16x8_t v290;
  int16x8_t v291;
  int16x8_t v292;
  int16x8_t v293;
  int16x8_t v294;
  int16x8_t v295;
  int16x8_t v296;
  int16x8_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int16x8_t v308;
  int16x8_t v309;
  int16x8_t v310;
  int16x8_t v311;
  int16x8_t v312;
  int16x8_t v313;
  int16x8_t v314;
  int16x8_t v315;
  int16x8_t v316;
  int16x8_t v317;
  int16x8_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  uint64_t v323;

  v4 = a1;
  v323 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = 2 * a3;
  v273 = 30 * a3;
  v7 = *(int16x8_t *)((char *)a1 + v273);
  v8 = *(int16x8_t *)((char *)a1 + v6);
  v9 = 16 * a3;
  v272 = 2 * (v9 - v6);
  v10 = *(int16x8_t *)((char *)a1 + v272);
  v307 = vaddq_s16(v7, *a1);
  v308 = vaddq_s16(v10, v8);
  v11 = 4 * a3;
  v12 = *(int16x8_t *)((char *)a1 + v11);
  v271 = 26 * a3;
  v13 = *(int16x8_t *)((char *)a1 + v271);
  v270 = 6 * a3;
  v14 = *(int16x8_t *)((char *)a1 + v270);
  v269 = 24 * a3;
  v15 = *(int16x8_t *)((char *)a1 + v269);
  v309 = vaddq_s16(v13, v12);
  v310 = vaddq_s16(v15, v14);
  v16 = 8 * a3;
  v17 = *(int16x8_t *)((char *)a1 + v16);
  v268 = 22 * a3;
  v18 = *(int16x8_t *)((char *)a1 + v268);
  v267 = 10 * a3;
  v19 = *(int16x8_t *)((char *)a1 + v267);
  v20 = 20 * a3;
  v21 = *(int16x8_t *)((char *)a1 + v20);
  v311 = vaddq_s16(v18, v17);
  v312 = vaddq_s16(v21, v19);
  v22 = 12 * a3;
  v23 = *(int16x8_t *)((char *)a1 + v22);
  v24 = 18 * a3;
  v25 = *(int16x8_t *)((char *)a1 + v24);
  v26 = *(int16x8_t *)((char *)a1 + v9 - v6);
  v27 = a1[(unint64_t)v9 / 0x10];
  v313 = vaddq_s16(v25, v23);
  v314 = vaddq_s16(v27, v26);
  v315 = vsubq_s16(v26, v27);
  v316 = vsubq_s16(v23, v25);
  v317 = vsubq_s16(v19, v21);
  v318 = vsubq_s16(v17, v18);
  v319 = vsubq_s16(v14, v15);
  v320 = vsubq_s16(v12, v13);
  v321 = vsubq_s16(v8, v10);
  v322 = vsubq_s16(v5, v7);
  v291 = vshlq_n_s16(v307, 2uLL);
  v292 = vshlq_n_s16(v308, 2uLL);
  v293 = vshlq_n_s16(v309, 2uLL);
  v294 = vshlq_n_s16(v310, 2uLL);
  v295 = vshlq_n_s16(v311, 2uLL);
  v296 = vshlq_n_s16(v312, 2uLL);
  v297 = vshlq_n_s16(v313, 2uLL);
  v298 = vshlq_n_s16(v314, 2uLL);
  v299 = vshlq_n_s16(v315, 2uLL);
  v300 = vshlq_n_s16(v316, 2uLL);
  v301 = vshlq_n_s16(v317, 2uLL);
  v302 = vshlq_n_s16(v318, 2uLL);
  v303 = vshlq_n_s16(v319, 2uLL);
  v304 = vshlq_n_s16(v320, 2uLL);
  v305 = vshlq_n_s16(v321, 2uLL);
  v306 = vshlq_n_s16(v322, 2uLL);
  vpx_fdct8x16_body(&v291, &v307);
  v28 = v4[1];
  v29 = *(int16x8_t *)((char *)++v4 + v273);
  v30 = *(int16x8_t *)((char *)v4 + v6);
  v31 = *(int16x8_t *)((char *)v4 + v272);
  v291 = vaddq_s16(v29, v28);
  v292 = vaddq_s16(v31, v30);
  v32 = *(int16x8_t *)((char *)v4 + v11);
  v33 = *(int16x8_t *)((char *)v4 + v271);
  v34 = *(int16x8_t *)((char *)v4 + v270);
  v35 = *(int16x8_t *)((char *)v4 + v269);
  v293 = vaddq_s16(v33, v32);
  v294 = vaddq_s16(v35, v34);
  v36 = *(int16x8_t *)((char *)v4 + v16);
  v37 = *(int16x8_t *)((char *)v4 + v268);
  v38 = *(int16x8_t *)((char *)v4 + v267);
  v39 = *(int16x8_t *)((char *)v4 + v20);
  v295 = vaddq_s16(v37, v36);
  v296 = vaddq_s16(v39, v38);
  v40 = *(int16x8_t *)((char *)v4 + v22);
  v41 = *(int16x8_t *)((char *)v4 + v24);
  v42 = *(int16x8_t *)((char *)v4 + v9 - v6);
  v43 = v4[(unint64_t)v9 / 0x10];
  v297 = vaddq_s16(v41, v40);
  v298 = vaddq_s16(v43, v42);
  v299 = vsubq_s16(v42, v43);
  v300 = vsubq_s16(v40, v41);
  v301 = vsubq_s16(v38, v39);
  v302 = vsubq_s16(v36, v37);
  v303 = vsubq_s16(v34, v35);
  v304 = vsubq_s16(v32, v33);
  v305 = vsubq_s16(v30, v31);
  v306 = vsubq_s16(v28, v29);
  v275 = vshlq_n_s16(v291, 2uLL);
  v276 = vshlq_n_s16(v292, 2uLL);
  v277 = vshlq_n_s16(v293, 2uLL);
  v278 = vshlq_n_s16(v294, 2uLL);
  v279 = vshlq_n_s16(v295, 2uLL);
  v280 = vshlq_n_s16(v296, 2uLL);
  v281 = vshlq_n_s16(v297, 2uLL);
  v282 = vshlq_n_s16(v298, 2uLL);
  v283 = vshlq_n_s16(v299, 2uLL);
  v284 = vshlq_n_s16(v300, 2uLL);
  v285 = vshlq_n_s16(v301, 2uLL);
  v286 = vshlq_n_s16(v302, 2uLL);
  v287 = vshlq_n_s16(v303, 2uLL);
  v288 = vshlq_n_s16(v304, 2uLL);
  v289 = vshlq_n_s16(v305, 2uLL);
  v290 = vshlq_n_s16(v306, 2uLL);
  vpx_fdct8x16_body(&v275, &v291);
  v44 = (int32x4_t)vtrn1q_s16(v307, v308);
  v45 = (int32x4_t)vtrn2q_s16(v307, v308);
  v46 = (int32x4_t)vtrn1q_s16(v309, v310);
  v47 = (int32x4_t)vtrn2q_s16(v309, v310);
  v48 = (int32x4_t)vtrn1q_s16(v311, v312);
  v49 = (int32x4_t)vtrn2q_s16(v311, v312);
  v50 = (int32x4_t)vtrn1q_s16(v313, v314);
  v51 = (int32x4_t)vtrn2q_s16(v313, v314);
  v52 = (int64x2_t)vtrn1q_s32(v44, v46);
  v53 = (int64x2_t)vtrn2q_s32(v44, v46);
  v54 = (int64x2_t)vtrn1q_s32(v45, v47);
  v55 = (int64x2_t)vtrn2q_s32(v45, v47);
  v56 = (int64x2_t)vtrn1q_s32(v48, v50);
  v57 = (int64x2_t)vtrn2q_s32(v48, v50);
  v58 = (int64x2_t)vtrn1q_s32(v49, v51);
  v59 = (int64x2_t)vtrn2q_s32(v49, v51);
  v60 = (int16x8_t)vzip1q_s64(v52, v56);
  v61 = (int16x8_t)vzip2q_s64(v52, v56);
  v62 = (int16x8_t)vzip1q_s64(v54, v58);
  v63 = (int16x8_t)vzip2q_s64(v54, v58);
  v64 = (int16x8_t)vzip1q_s64(v53, v57);
  v65 = (int16x8_t)vzip2q_s64(v53, v57);
  v66 = (int16x8_t)vzip1q_s64(v55, v59);
  v67 = (int16x8_t)vzip2q_s64(v55, v59);
  v68 = (int32x4_t)vtrn1q_s16(v291, v292);
  v69 = (int32x4_t)vtrn2q_s16(v291, v292);
  v70 = (int32x4_t)vtrn1q_s16(v293, v294);
  v71 = (int32x4_t)vtrn2q_s16(v293, v294);
  v72 = (int32x4_t)vtrn1q_s16(v295, v296);
  v73 = (int32x4_t)vtrn2q_s16(v295, v296);
  v74 = (int32x4_t)vtrn1q_s16(v297, v298);
  v75 = (int32x4_t)vtrn2q_s16(v297, v298);
  v76 = (int64x2_t)vtrn1q_s32(v68, v70);
  v77 = (int64x2_t)vtrn2q_s32(v68, v70);
  v78 = (int64x2_t)vtrn1q_s32(v69, v71);
  v79 = (int64x2_t)vtrn2q_s32(v69, v71);
  v80 = (int64x2_t)vtrn1q_s32(v72, v74);
  v81 = (int64x2_t)vtrn2q_s32(v72, v74);
  v82 = (int64x2_t)vtrn1q_s32(v73, v75);
  v83 = (int64x2_t)vtrn2q_s32(v73, v75);
  v84 = (int16x8_t)vzip1q_s64(v76, v80);
  v85 = (int16x8_t)vzip2q_s64(v76, v80);
  v86.i64[0] = 0x1000100010001;
  v86.i64[1] = 0x1000100010001;
  v87 = vaddq_s16(v60, v86);
  v88 = vaddq_s16(v62, v86);
  v275 = vshrq_n_s16(v87, 2uLL);
  v276 = vshrq_n_s16(v88, 2uLL);
  v89 = vaddq_s16(v64, v86);
  v90 = vaddq_s16(v66, v86);
  v277 = vshrq_n_s16(v89, 2uLL);
  v278 = vshrq_n_s16(v90, 2uLL);
  v91 = vaddq_s16(v61, v86);
  v92 = vaddq_s16(v63, v86);
  v279 = vshrq_n_s16(v91, 2uLL);
  v280 = vshrq_n_s16(v92, 2uLL);
  v93 = vaddq_s16(v65, v86);
  v94 = vaddq_s16(v67, v86);
  v281 = vshrq_n_s16(v93, 2uLL);
  v282 = vshrq_n_s16(v94, 2uLL);
  v283 = vshrq_n_s16(vaddq_s16(v84, v86), 2uLL);
  v284 = vshrq_n_s16(vaddq_s16((int16x8_t)vzip1q_s64(v78, v82), v86), 2uLL);
  v285 = vshrq_n_s16(vaddq_s16((int16x8_t)vzip1q_s64(v77, v81), v86), 2uLL);
  v286 = vshrq_n_s16(vaddq_s16((int16x8_t)vzip1q_s64(v79, v83), v86), 2uLL);
  v287 = vshrq_n_s16(vaddq_s16(v85, v86), 2uLL);
  v288 = vshrq_n_s16(vaddq_s16((int16x8_t)vzip2q_s64(v78, v82), v86), 2uLL);
  v289 = vshrq_n_s16(vaddq_s16((int16x8_t)vzip2q_s64(v77, v81), v86), 2uLL);
  v290 = vshrq_n_s16(vaddq_s16((int16x8_t)vzip2q_s64(v79, v83), v86), 2uLL);
  v274[0] = vsraq_n_s16(v290, v87, 2uLL);
  v274[1] = vsraq_n_s16(v289, v88, 2uLL);
  v274[2] = vsraq_n_s16(v288, v89, 2uLL);
  v274[3] = vsraq_n_s16(v287, v90, 2uLL);
  v274[4] = vsraq_n_s16(v286, v91, 2uLL);
  v274[5] = vsraq_n_s16(v285, v92, 2uLL);
  v274[6] = vsraq_n_s16(v284, v93, 2uLL);
  v274[7] = vsraq_n_s16(v283, v94, 2uLL);
  v274[8] = vsubq_s16(v282, v283);
  v274[9] = vsubq_s16(v281, v284);
  v274[10] = vsubq_s16(v280, v285);
  v274[11] = vsubq_s16(v279, v286);
  v274[12] = vsubq_s16(v278, v287);
  v274[13] = vsubq_s16(v277, v288);
  v274[14] = vsubq_s16(v276, v289);
  v274[15] = vsubq_s16(v275, v290);
  vpx_fdct8x16_body(v274, &v275);
  v95 = (int32x4_t)vtrn1q_s16(v275, v276);
  v96 = (int32x4_t)vtrn2q_s16(v275, v276);
  v97 = (int32x4_t)vtrn1q_s16(v277, v278);
  v98 = (int32x4_t)vtrn2q_s16(v277, v278);
  v99 = (int32x4_t)vtrn1q_s16(v279, v280);
  v100 = (int32x4_t)vtrn2q_s16(v279, v280);
  v101 = (int32x4_t)vtrn1q_s16(v281, v282);
  v102 = (int32x4_t)vtrn2q_s16(v281, v282);
  v103 = (int64x2_t)vtrn1q_s32(v95, v97);
  v104 = (int64x2_t)vtrn2q_s32(v95, v97);
  v105 = (int64x2_t)vtrn1q_s32(v96, v98);
  v106 = (int64x2_t)vtrn2q_s32(v96, v98);
  v107 = (int64x2_t)vtrn1q_s32(v99, v101);
  v108 = (int64x2_t)vtrn2q_s32(v99, v101);
  v109 = (int64x2_t)vtrn1q_s32(v100, v102);
  v110 = (int64x2_t)vtrn2q_s32(v100, v102);
  v281 = (int16x8_t)vzip2q_s64(v104, v108);
  v282 = (int16x8_t)vzip2q_s64(v106, v110);
  v111 = (int8x16_t)vzip1q_s64(v103, v107);
  v112 = (int8x16_t)vzip2q_s64(v103, v107);
  v113 = (int8x16_t)vzip1q_s64(v105, v109);
  v114 = vzip2q_s64(v105, v109);
  v115 = (int8x16_t)vzip1q_s64(v104, v108);
  v116 = (int8x16_t)vzip1q_s64(v106, v110);
  v117 = v282;
  v118 = (int32x4_t)vtrn1q_s16(v283, v284);
  v119 = (int32x4_t)vtrn2q_s16(v283, v284);
  v120 = (int32x4_t)vtrn1q_s16(v285, v286);
  v121 = (int32x4_t)vtrn2q_s16(v285, v286);
  v122 = (int32x4_t)vtrn1q_s16(v287, v288);
  v123 = (int32x4_t)vtrn2q_s16(v287, v288);
  v124 = (int32x4_t)vtrn1q_s16(v289, v290);
  v275 = (int16x8_t)v111;
  v276 = (int16x8_t)v113;
  v125 = (int32x4_t)vtrn2q_s16(v289, v290);
  v126 = (int64x2_t)vtrn1q_s32(v118, v120);
  v127 = (int64x2_t)vtrn2q_s32(v118, v120);
  v277 = (int16x8_t)v115;
  v278 = (int16x8_t)v116;
  v128 = (int64x2_t)vtrn1q_s32(v119, v121);
  v129 = (int64x2_t)vtrn2q_s32(v119, v121);
  v130 = (int64x2_t)vtrn1q_s32(v122, v124);
  v279 = (int16x8_t)v112;
  v280 = (int16x8_t)v114;
  v131 = (int64x2_t)vtrn2q_s32(v122, v124);
  v132 = (int64x2_t)vtrn1q_s32(v123, v125);
  v133 = (int64x2_t)vtrn2q_s32(v123, v125);
  v134 = (int8x16_t)vzip1q_s64(v126, v130);
  v135 = vzip2q_s64(v126, v130);
  v136 = (int8x16_t)vzip1q_s64(v128, v132);
  v137 = vzip2q_s64(v128, v132);
  v283 = (int16x8_t)v134;
  v284 = (int16x8_t)v136;
  v138 = (int8x16_t)vzip1q_s64(v127, v131);
  v285 = (int16x8_t)v138;
  v286 = (int16x8_t)vzip1q_s64(v129, v133);
  v287 = (int16x8_t)v135;
  v288 = (int16x8_t)v137;
  v289 = (int16x8_t)vzip2q_s64(v127, v131);
  v290 = (int16x8_t)vzip2q_s64(v129, v133);
  *(int32x4_t *)a2 = vmovl_s16(*(int16x4_t *)v111.i8);
  *(int32x4_t *)(a2 + 16) = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL));
  *(int32x4_t *)(a2 + 64) = vmovl_s16(*(int16x4_t *)v113.i8);
  *(int32x4_t *)(a2 + 80) = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL));
  *(int32x4_t *)(a2 + 128) = vmovl_s16(*(int16x4_t *)v115.i8);
  *(int32x4_t *)(a2 + 144) = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL));
  v139 = v280;
  v140 = v281;
  v141 = vmovl_s16(*(int16x4_t *)v280.i8);
  *(int32x4_t *)(a2 + 192) = vmovl_s16(*(int16x4_t *)v116.i8);
  *(int32x4_t *)(a2 + 208) = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL));
  v142 = vmovl_high_s16(v139);
  v143 = vmovl_s16(*(int16x4_t *)v140.i8);
  v144 = vmovl_high_s16(v140);
  *(int32x4_t *)(a2 + 256) = vmovl_s16(*(int16x4_t *)v112.i8);
  *(int32x4_t *)(a2 + 272) = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL));
  v145 = vmovl_s16(*(int16x4_t *)v117.i8);
  v146 = vmovl_high_s16(v117);
  v147 = vmovl_s16(*(int16x4_t *)v134.i8);
  *(int32x4_t *)(a2 + 320) = v141;
  *(int32x4_t *)(a2 + 336) = v142;
  v148 = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL));
  v149 = vmovl_s16(*(int16x4_t *)v136.i8);
  *(int32x4_t *)(a2 + 384) = v143;
  *(int32x4_t *)(a2 + 400) = v144;
  v150 = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL));
  v151 = vmovl_s16(*(int16x4_t *)v138.i8);
  v152 = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v138, v138, 8uLL));
  v153 = vmovl_s16(*(int16x4_t *)v286.i8);
  v154 = vmovl_high_s16(v286);
  v155 = vmovl_s16(*(int16x4_t *)v287.i8);
  v156 = vmovl_high_s16(v287);
  v157 = vmovl_s16(*(int16x4_t *)v288.i8);
  v158 = vmovl_high_s16(v288);
  v159 = vmovl_s16(*(int16x4_t *)v289.i8);
  v160 = vmovl_high_s16(v289);
  v161 = (int32x4_t)vtrn1q_s16(v315, v316);
  v162 = (int32x4_t)vtrn2q_s16(v315, v316);
  v163 = (int32x4_t)vtrn1q_s16(v317, v318);
  v164 = (int32x4_t)vtrn2q_s16(v317, v318);
  v165 = (int32x4_t)vtrn1q_s16(v319, v320);
  v166 = (int32x4_t)vtrn2q_s16(v319, v320);
  v167 = (int32x4_t)vtrn1q_s16(v321, v322);
  v168 = (int32x4_t)vtrn2q_s16(v321, v322);
  *(int32x4_t *)(a2 + 448) = v145;
  *(int32x4_t *)(a2 + 464) = v146;
  v169 = (int64x2_t)vtrn1q_s32(v161, v163);
  v170 = (int64x2_t)vtrn2q_s32(v161, v163);
  v171 = (int64x2_t)vtrn1q_s32(v162, v164);
  *(int32x4_t *)(a2 + 32) = v147;
  *(int32x4_t *)(a2 + 48) = v148;
  v172 = (int64x2_t)vtrn2q_s32(v162, v164);
  v173 = (int64x2_t)vtrn1q_s32(v165, v167);
  v174 = (int64x2_t)vtrn2q_s32(v165, v167);
  *(int32x4_t *)(a2 + 96) = v149;
  *(int32x4_t *)(a2 + 112) = v150;
  v175 = (int64x2_t)vtrn1q_s32(v166, v168);
  v176 = (int64x2_t)vtrn2q_s32(v166, v168);
  v177 = (int16x8_t)vzip1q_s64(v169, v173);
  *(int32x4_t *)(a2 + 160) = v151;
  *(int32x4_t *)(a2 + 176) = v152;
  v178 = (int16x8_t)vzip2q_s64(v169, v173);
  v179 = (int16x8_t)vzip1q_s64(v171, v175);
  v180 = (int16x8_t)vzip2q_s64(v171, v175);
  v181 = (int16x8_t)vzip1q_s64(v170, v174);
  v182 = (int16x8_t)vzip2q_s64(v170, v174);
  v183 = (int16x8_t)vzip1q_s64(v172, v176);
  v184 = (int16x8_t)vzip2q_s64(v172, v176);
  v185 = (int32x4_t)vtrn1q_s16(v299, v300);
  v186 = (int32x4_t)vtrn2q_s16(v299, v300);
  v187 = (int32x4_t)vtrn1q_s16(v301, v302);
  v188 = (int32x4_t)vtrn2q_s16(v301, v302);
  v189 = (int32x4_t)vtrn1q_s16(v303, v304);
  v190 = (int32x4_t)vtrn2q_s16(v303, v304);
  v191 = (int32x4_t)vtrn1q_s16(v305, v306);
  v192 = (int32x4_t)vtrn2q_s16(v305, v306);
  v193 = vmovl_s16(*(int16x4_t *)v290.i8);
  v194 = (int16x8_t)vmovl_high_s16(v290);
  *(int32x4_t *)(a2 + 224) = v153;
  *(int32x4_t *)(a2 + 240) = v154;
  v195 = (int64x2_t)vtrn1q_s32(v185, v187);
  v196 = (int64x2_t)vtrn2q_s32(v185, v187);
  v197 = (int64x2_t)vtrn1q_s32(v186, v188);
  *(int32x4_t *)(a2 + 288) = v155;
  *(int32x4_t *)(a2 + 304) = v156;
  v198 = (int64x2_t)vtrn2q_s32(v186, v188);
  v199 = (int64x2_t)vtrn1q_s32(v189, v191);
  v200 = (int64x2_t)vtrn2q_s32(v189, v191);
  *(int32x4_t *)(a2 + 352) = v157;
  *(int32x4_t *)(a2 + 368) = v158;
  v201 = (int64x2_t)vtrn1q_s32(v190, v192);
  v202 = (int64x2_t)vtrn2q_s32(v190, v192);
  v203 = (int16x8_t)vzip1q_s64(v195, v199);
  *(int32x4_t *)(a2 + 416) = v159;
  *(int32x4_t *)(a2 + 432) = v160;
  v204 = (int16x8_t)vzip2q_s64(v195, v199);
  v205 = (int16x8_t)vzip1q_s64(v197, v201);
  v206 = (int16x8_t)vzip2q_s64(v197, v201);
  *(int32x4_t *)(a2 + 480) = v193;
  *(int16x8_t *)(a2 + 496) = v194;
  v194.i64[0] = 0x1000100010001;
  v194.i64[1] = 0x1000100010001;
  v207 = vaddq_s16(v177, v194);
  v208 = vaddq_s16(v179, v194);
  v291 = vshrq_n_s16(v207, 2uLL);
  v292 = vshrq_n_s16(v208, 2uLL);
  v209 = vaddq_s16(v181, v194);
  v210 = vaddq_s16(v183, v194);
  v293 = vshrq_n_s16(v209, 2uLL);
  v294 = vshrq_n_s16(v210, 2uLL);
  v211 = vaddq_s16(v178, v194);
  v212 = vaddq_s16(v180, v194);
  v295 = vshrq_n_s16(v211, 2uLL);
  v296 = vshrq_n_s16(v212, 2uLL);
  v213 = (int16x8_t)vzip1q_s64(v196, v200);
  v214 = (int16x8_t)vzip2q_s64(v196, v200);
  v215 = (int16x8_t)vzip1q_s64(v198, v202);
  v216 = (int16x8_t)vzip2q_s64(v198, v202);
  v217 = vaddq_s16(v182, v194);
  v218 = vaddq_s16(v184, v194);
  v297 = vshrq_n_s16(v217, 2uLL);
  v298 = vshrq_n_s16(v218, 2uLL);
  v299 = vshrq_n_s16(vaddq_s16(v203, v194), 2uLL);
  v300 = vshrq_n_s16(vaddq_s16(v205, v194), 2uLL);
  v301 = vshrq_n_s16(vaddq_s16(v213, v194), 2uLL);
  v302 = vshrq_n_s16(vaddq_s16(v215, v194), 2uLL);
  v303 = vshrq_n_s16(vaddq_s16(v204, v194), 2uLL);
  v304 = vshrq_n_s16(vaddq_s16(v206, v194), 2uLL);
  v203.i64[0] = 0x1000100010001;
  v203.i64[1] = 0x1000100010001;
  v305 = vshrq_n_s16(vaddq_s16(v214, v194), 2uLL);
  v306 = vshrq_n_s16(vaddq_s16(v216, v203), 2uLL);
  v307 = vsraq_n_s16(v306, v207, 2uLL);
  v308 = vsraq_n_s16(v305, v208, 2uLL);
  v309 = vsraq_n_s16(v304, v209, 2uLL);
  v310 = vsraq_n_s16(v303, v210, 2uLL);
  v311 = vsraq_n_s16(v302, v211, 2uLL);
  v312 = vsraq_n_s16(v301, v212, 2uLL);
  v313 = vsraq_n_s16(v300, v217, 2uLL);
  v314 = vsraq_n_s16(v299, v218, 2uLL);
  v315 = vsubq_s16(v298, v299);
  v316 = vsubq_s16(v297, v300);
  v317 = vsubq_s16(v296, v301);
  v318 = vsubq_s16(v295, v302);
  v319 = vsubq_s16(v294, v303);
  v320 = vsubq_s16(v293, v304);
  v321 = vsubq_s16(v292, v305);
  v322 = vsubq_s16(v291, v306);
  vpx_fdct8x16_body(&v307, &v291);
  v219 = (int32x4_t)vtrn1q_s16(v291, v292);
  v220 = (int32x4_t)vtrn2q_s16(v291, v292);
  v221 = (int32x4_t)vtrn1q_s16(v293, v294);
  v222 = (int32x4_t)vtrn2q_s16(v293, v294);
  v223 = (int32x4_t)vtrn1q_s16(v295, v296);
  v224 = (int32x4_t)vtrn2q_s16(v295, v296);
  v225 = (int32x4_t)vtrn1q_s16(v297, v298);
  v226 = (int32x4_t)vtrn2q_s16(v297, v298);
  v227 = (int64x2_t)vtrn2q_s32(v219, v221);
  v228 = (int64x2_t)vtrn1q_s32(v220, v222);
  v229 = (int64x2_t)vtrn2q_s32(v220, v222);
  v230 = (int64x2_t)vtrn2q_s32(v223, v225);
  v231 = (int64x2_t)vtrn1q_s32(v224, v226);
  v296 = (int16x8_t)vzip2q_s64(v228, v231);
  v297 = (int16x8_t)vzip2q_s64(v227, v230);
  v232 = (int64x2_t)vtrn2q_s32(v224, v226);
  v298 = (int16x8_t)vzip2q_s64(v229, v232);
  v233 = v298;
  v234 = (int32x4_t)vtrn1q_s16(v299, v300);
  v235 = (int32x4_t)vtrn2q_s16(v299, v300);
  v236 = (int32x4_t)vtrn1q_s16(v301, v302);
  v237 = (int32x4_t)vtrn2q_s16(v301, v302);
  v238 = (int32x4_t)vtrn1q_s16(v303, v304);
  v239 = (int32x4_t)vtrn2q_s16(v303, v304);
  v240 = (int32x4_t)vtrn1q_s16(v305, v306);
  v241 = (int32x4_t)vtrn2q_s16(v305, v306);
  v242 = (int64x2_t)vtrn1q_s32(v234, v236);
  v243 = (int64x2_t)vtrn2q_s32(v234, v236);
  v244 = (int64x2_t)vtrn1q_s32(v235, v237);
  v245 = (int64x2_t)vtrn2q_s32(v235, v237);
  v246 = (int64x2_t)vtrn1q_s32(v238, v240);
  v247 = (int64x2_t)vtrn2q_s32(v239, v241);
  v302 = (int16x8_t)vzip1q_s64(v245, v247);
  v303 = (int16x8_t)vzip2q_s64(v242, v246);
  v248 = (int64x2_t)vtrn2q_s32(v238, v240);
  v249 = (int64x2_t)vtrn1q_s32(v239, v241);
  v304 = (int16x8_t)vzip2q_s64(v244, v249);
  v305 = (int16x8_t)vzip2q_s64(v243, v248);
  v306 = (int16x8_t)vzip2q_s64(v245, v247);
  v250 = (int64x2_t)vtrn1q_s32(v219, v221);
  v251 = (int64x2_t)vtrn1q_s32(v223, v225);
  v252 = (int8x16_t)vzip1q_s64(v250, v251);
  *(int32x4_t *)(a2 + 512) = vmovl_s16(*(int16x4_t *)v252.i8);
  *(int32x4_t *)(a2 + 528) = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v252, v252, 8uLL));
  v253 = (int8x16_t)vzip1q_s64(v228, v231);
  *(int32x4_t *)(a2 + 576) = vmovl_s16(*(int16x4_t *)v253.i8);
  *(int32x4_t *)(a2 + 592) = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v253, v253, 8uLL));
  v254 = (int8x16_t)vzip1q_s64(v227, v230);
  *(int32x4_t *)(a2 + 640) = vmovl_s16(*(int16x4_t *)v254.i8);
  *(int32x4_t *)(a2 + 656) = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v254, v254, 8uLL));
  v255 = (int8x16_t)vzip1q_s64(v229, v232);
  *(int32x4_t *)(a2 + 704) = vmovl_s16(*(int16x4_t *)v255.i8);
  *(int32x4_t *)(a2 + 720) = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v255, v255, 8uLL));
  v256 = (int8x16_t)vzip2q_s64(v250, v251);
  *(int32x4_t *)(a2 + 768) = vmovl_s16(*(int16x4_t *)v256.i8);
  *(int32x4_t *)(a2 + 784) = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v256, v256, 8uLL));
  v257 = v297;
  v258 = vmovl_high_s16(v296);
  *(int32x4_t *)(a2 + 832) = vmovl_s16(*(int16x4_t *)v296.i8);
  *(int32x4_t *)(a2 + 848) = v258;
  *(int32x4_t *)(a2 + 896) = vmovl_s16(*(int16x4_t *)v257.i8);
  *(int32x4_t *)(a2 + 912) = vmovl_high_s16(v257);
  v259 = (int8x16_t)vzip1q_s64(v242, v246);
  v260 = (int8x16_t)vzip1q_s64(v244, v249);
  v261 = (int8x16_t)vzip1q_s64(v243, v248);
  *(int32x4_t *)(a2 + 960) = vmovl_s16(*(int16x4_t *)v233.i8);
  *(int32x4_t *)(a2 + 976) = vmovl_high_s16(v233);
  *(int32x4_t *)(a2 + 544) = vmovl_s16(*(int16x4_t *)v259.i8);
  *(int32x4_t *)(a2 + 560) = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v259, v259, 8uLL));
  *(int32x4_t *)(a2 + 608) = vmovl_s16(*(int16x4_t *)v260.i8);
  *(int32x4_t *)(a2 + 624) = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v260, v260, 8uLL));
  *(int32x4_t *)(a2 + 672) = vmovl_s16(*(int16x4_t *)v261.i8);
  *(int32x4_t *)(a2 + 688) = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v261, v261, 8uLL));
  v262 = v303;
  v263 = vmovl_high_s16(v302);
  *(int32x4_t *)(a2 + 736) = vmovl_s16(*(int16x4_t *)v302.i8);
  *(int32x4_t *)(a2 + 752) = v263;
  *(int32x4_t *)(a2 + 800) = vmovl_s16(*(int16x4_t *)v262.i8);
  *(int32x4_t *)(a2 + 816) = vmovl_high_s16(v262);
  v264 = v305;
  v265 = vmovl_high_s16(v304);
  *(int32x4_t *)(a2 + 864) = vmovl_s16(*(int16x4_t *)v304.i8);
  *(int32x4_t *)(a2 + 880) = v265;
  *(int32x4_t *)(a2 + 928) = vmovl_s16(*(int16x4_t *)v264.i8);
  *(int32x4_t *)(a2 + 944) = vmovl_high_s16(v264);
  v266 = vmovl_high_s16(v306);
  *(int32x4_t *)(a2 + 992) = vmovl_s16(*(int16x4_t *)v306.i8);
  *(int32x4_t *)(a2 + 1008) = v266;
}

int16x8_t vpx_fdct8x16_body(int16x8_t *a1, int16x8_t *a2)
{
  int16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int16x8_t result;

  v2 = a1[1];
  v4 = a1[6];
  v3 = a1[7];
  v5 = vaddq_s16(v3, *a1);
  v6 = vaddq_s16(v4, v2);
  v7 = a1[2];
  v8 = a1[3];
  v10 = a1[4];
  v9 = a1[5];
  v11 = vaddq_s16(v9, v7);
  v12 = vaddq_s16(v10, v8);
  v13 = vsubq_s16(v8, v10);
  v14 = vsubq_s16(v7, v9);
  v15 = vsubq_s16(v2, v4);
  v16 = vsubq_s16(*a1, v3);
  v17 = vaddq_s16(v12, v5);
  v18 = vaddq_s16(v11, v6);
  v19 = vsubq_s16(v6, v11);
  v20 = vsubq_s16(v5, v12);
  v21 = vdupq_n_s32(0x5A820000u);
  *a2 = vuzp1q_s16((int16x8_t)vqrdmulhq_s32(vaddl_s16(*(int16x4_t *)v17.i8, *(int16x4_t *)v18.i8), v21), (int16x8_t)vqrdmulhq_s32(vaddl_high_s16(v17, v18), v21));
  a2[8] = vuzp1q_s16((int16x8_t)vqrdmulhq_s32(vsubl_s16(*(int16x4_t *)v17.i8, *(int16x4_t *)v18.i8), v21), (int16x8_t)vqrdmulhq_s32(vsubl_high_s16(v17, v18), v21));
  v22 = vdupq_n_s16(0x3B21u);
  v23 = vdupq_n_s16(0x187Eu);
  a2[4] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v19.i8, *(int16x4_t *)v23.i8), *(int16x4_t *)v20.i8, *(int16x4_t *)v22.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v19, v23), v20, v22), 0xEuLL);
  a2[12] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v23.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v22.i8), 0xEuLL), vmlsl_high_s16(vmull_high_s16(v20, v23), v19, v22), 0xEuLL);
  v24 = vdupq_n_s16(0x5A82u);
  v25 = vqrdmulhq_s16(vaddq_s16(v14, v15), v24);
  v26 = vqrdmulhq_s16(vsubq_s16(v15, v14), v24);
  v27 = vaddq_s16(v26, v13);
  v28 = vsubq_s16(v13, v26);
  v29 = vsubq_s16(v16, v25);
  v30 = vdupq_n_s16(0x3EC5u);
  v31 = vaddq_s16(v25, v16);
  v32 = vdupq_n_s16(0xC7Cu);
  a2[2] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v32.i8), *(int16x4_t *)v31.i8, *(int16x4_t *)v30.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v27, v32), v31, v30), 0xEuLL);
  a2[14] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v32.i8), *(int16x4_t *)v27.i8, *(int16x4_t *)v30.i8), 0xEuLL), vmlsl_high_s16(vmull_high_s16(v31, v32), v27, v30), 0xEuLL);
  v33 = vdupq_n_s16(0x238Eu);
  v34 = vdupq_n_s16(0x3537u);
  a2[10] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v34.i8), *(int16x4_t *)v29.i8, *(int16x4_t *)v33.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v28, v34), v29, v33), 0xEuLL);
  a2[6] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v34.i8), *(int16x4_t *)v28.i8, *(int16x4_t *)v33.i8), 0xEuLL), vmlsl_high_s16(vmull_high_s16(v29, v34), v28, v33), 0xEuLL);
  v36 = a1[12];
  v35 = a1[13];
  v37 = a1[10];
  v38 = a1[11];
  v39 = vqrdmulhq_s16(vaddq_s16(v37, v35), v24);
  v40 = vqrdmulhq_s16(vsubq_s16(v35, v37), v24);
  v41 = vqrdmulhq_s16(vaddq_s16(v38, v36), v24);
  v42 = vqrdmulhq_s16(vsubq_s16(v36, v38), v24);
  v43 = a1[8];
  v44 = a1[9];
  v45 = vaddq_s16(v43, v42);
  v46 = vaddq_s16(v44, v40);
  v47 = vsubq_s16(v44, v40);
  v48 = vsubq_s16(v43, v42);
  v50 = a1[14];
  v49 = a1[15];
  v51 = vsubq_s16(v49, v41);
  v52 = vsubq_s16(v50, v39);
  v53 = vaddq_s16(v50, v39);
  v54 = vaddq_s16(v49, v41);
  v55 = vmlsl_s16(vmull_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v23.i8), *(int16x4_t *)v46.i8, *(int16x4_t *)v22.i8);
  v56 = vmlsl_high_s16(vmull_high_s16(v53, v23), v46, v22);
  v57 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v46.i8, *(int16x4_t *)v23.i8), *(int16x4_t *)v53.i8, *(int16x4_t *)v22.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v46, v23), v53, v22), 0xEuLL);
  v58 = vqrshrn_high_n_s32(vqrshrn_n_s32(v55, 0xEuLL), v56, 0xEuLL);
  v59 = vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v22.i8);
  v60 = vmull_high_s16(v47, v22);
  v61 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v47.i8, *(int16x4_t *)v23.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v52, v22), v47, v23), 0xEuLL);
  v62 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlsl_s16(v59, *(int16x4_t *)v52.i8, *(int16x4_t *)v23.i8), 0xEuLL), vmlsl_high_s16(v60, v52, v23), 0xEuLL);
  v63 = vaddq_s16(v58, v45);
  v64 = vsubq_s16(v45, v58);
  v65 = vaddq_s16(v61, v48);
  v66 = vsubq_s16(v48, v61);
  v67 = vsubq_s16(v51, v62);
  v68 = vaddq_s16(v62, v51);
  v69 = vsubq_s16(v54, v57);
  v70 = vdupq_n_s16(0x289Au);
  v71 = vaddq_s16(v57, v54);
  v72 = vdupq_n_s16(0x3179u);
  a2[9] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v64.i8, *(int16x4_t *)v72.i8), *(int16x4_t *)v69.i8, *(int16x4_t *)v70.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v64, v72), v69, v70), 0xEuLL);
  a2[7] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v72.i8), *(int16x4_t *)v64.i8, *(int16x4_t *)v70.i8), 0xEuLL), vmlsl_high_s16(vmull_high_s16(v69, v72), v64, v70), 0xEuLL);
  v73 = vdupq_n_s16(0x3FB1u);
  v74 = vdupq_n_s16(0x646u);
  a2[1] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v74.i8), *(int16x4_t *)v71.i8, *(int16x4_t *)v73.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v63, v74), v71, v73), 0xEuLL);
  a2[15] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v74.i8), *(int16x4_t *)v63.i8, *(int16x4_t *)v73.i8), 0xEuLL), vmlsl_high_s16(vmull_high_s16(v71, v74), v63, v73), 0xEuLL);
  v75 = vdupq_n_s16(0x1294u);
  v76 = vdupq_n_s16(0x3D3Fu);
  a2[13] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v76.i8), *(int16x4_t *)v67.i8, *(int16x4_t *)v75.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v66, v76), v67, v75), 0xEuLL);
  v77 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v76.i8), *(int16x4_t *)v66.i8, *(int16x4_t *)v75.i8), 0xEuLL), vmlsl_high_s16(vmull_high_s16(v67, v76), v66, v75), 0xEuLL);
  v78 = vdupq_n_s16(0x3871u);
  a2[3] = v77;
  v79 = vdupq_n_s16(0x1E2Bu);
  v80 = vmlsl_s16(vmull_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v79.i8), *(int16x4_t *)v65.i8, *(int16x4_t *)v78.i8);
  v81 = vmlsl_high_s16(vmull_high_s16(v68, v79), v65, v78);
  result = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v79.i8), *(int16x4_t *)v68.i8, *(int16x4_t *)v78.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v65, v79), v68, v78), 0xEuLL);
  a2[5] = result;
  a2[11] = vqrshrn_high_n_s32(vqrshrn_n_s32(v80, 0xEuLL), v81, 0xEuLL);
  return result;
}

void vpx_highbd_fdct16x16_neon(int16x8_t *a1, int64x2_t *a2, int a3)
{
  int16x8_t *v4;
  uint64_t v5;
  int16x8_t v6;
  int16x8_t v7;
  uint64_t v8;
  int16x8_t v9;
  uint64_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint64_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  uint64_t v20;
  int16x8_t v21;
  uint64_t v22;
  int16x8_t v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int32x4_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int64x2_t v86;
  int32x4_t v87;
  int64x2_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int64x2_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int64x2_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int64x2_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int64x2_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int64x2_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int64x2_t v255;
  int64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int64x2_t v266;
  int64x2_t v267;
  int64x2_t v268;
  int64x2_t v269;
  int64x2_t v270;
  int64x2_t v271;
  int64x2_t v272;
  int64x2_t v273;
  int64x2_t v274;
  int64x2_t v275;
  int64x2_t v276;
  int64x2_t v277;
  int64x2_t v278;
  int64x2_t v279;
  int64x2_t v280;
  int64x2_t v281;
  int64x2_t v282;
  int64x2_t v283;
  int64x2_t v284;
  int64x2_t v285;
  int64x2_t v286;
  int64x2_t v287;
  int64x2_t v288;
  int64x2_t v289;
  int64x2_t v290;
  int64x2_t v291;
  int64x2_t v292;
  int64x2_t v293;
  int64x2_t v294;
  int64x2_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int64x2_t v298;
  int64x2_t v299;
  int64x2_t v300;
  int64x2_t v301;
  int64x2_t v302;
  int64x2_t v303;
  int64x2_t v304;
  int64x2_t v305;
  int64x2_t v306;
  int64x2_t v307;
  int64x2_t v308;
  int64x2_t v309;
  int64x2_t v310;
  int64x2_t v311;
  int64x2_t v312;
  int64x2_t v313;
  int64x2_t v314;
  int64x2_t v315;
  int64x2_t v316;
  int64x2_t v317;
  int64x2_t v318;
  int64x2_t v319;
  int64x2_t v320;
  int64x2_t v321;
  int64x2_t v322;
  int64x2_t v323;
  int64x2_t v324;
  int64x2_t v325;
  int64x2_t v326;
  int64x2_t v327;
  int64x2_t v328;
  int64x2_t v329;
  int64x2_t v330;
  int64x2_t v331;
  int64x2_t v332;
  int64x2_t v333;
  int64x2_t v334;
  int64x2_t v335;
  int64x2_t v336;
  int64x2_t v337;
  int64x2_t v338;
  int64x2_t v339;
  int64x2_t v340;
  int64x2_t v341;
  int64x2_t v342;
  int64x2_t v343;
  int64x2_t v344;
  int64x2_t v345;
  int64x2_t v346;
  int64x2_t v347;
  int64x2_t v348;
  int64x2_t v349;
  int64x2_t v350;
  int64x2_t v351;
  int64x2_t v352;
  int64x2_t v353;
  int64x2_t v354;
  int64x2_t v355;
  int64x2_t v356;
  int64x2_t v357;
  int64x2_t v358;
  int64x2_t v359;
  int64x2_t v360;
  int64x2_t v361;
  int64x2_t v362;
  int64x2_t v363;
  int64x2_t v364;
  int64x2_t v365;
  int64x2_t v366;
  int64x2_t v367;
  int64x2_t v368;
  int64x2_t v369;
  int64x2_t v370;
  int64x2_t v371;
  int64x2_t v372;
  int64x2_t v373;
  int64x2_t v374;
  int64x2_t v375;
  int64x2_t v376;
  int64x2_t v377;
  int64x2_t v378;
  int64x2_t v379;
  int64x2_t v380;
  int64x2_t v381;
  int64x2_t v382;
  int64x2_t v383;
  int64x2_t v384;
  int64x2_t v385;
  int64x2_t v386;
  int64x2_t v387;
  uint64_t v388;
  int64x2_t v389;
  int64x2_t v390;
  uint64_t v391;
  int64x2_t v392;
  int64x2_t v393;
  uint64_t v394;
  int64x2_t v395;
  int64x2_t v396;
  uint64_t v397;
  int64x2_t v398;
  int64x2_t v399;
  uint64_t v400;
  int64x2_t v401;
  int64x2_t v402;
  uint64_t v403;
  int32x4_t v404;
  int64x2_t v405;
  int64x2_t v406;
  uint64_t v407;
  int32x4_t v408;
  int64x2_t v409;
  int64x2_t v410;
  int32x4_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int32x4_t v417;
  int32x4_t v418;
  int32x4_t v419;
  int32x4_t v420;
  int32x4_t v421;
  int32x4_t v422;
  int32x4_t v423;
  int32x4_t v424;
  int32x4_t v425;
  int32x4_t v426;
  int32x4_t v427;
  int32x4_t v428;
  int32x4_t v429;
  int32x4_t v430;
  int32x4_t v431;
  int32x4_t v432;
  int32x4_t v433;
  int32x4_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int32x4_t v438;
  int32x4_t v439;
  int32x4_t v440;
  int32x4_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int32x4_t v444;
  int32x4_t v445;
  int32x4_t v446;
  int32x4_t v447;
  int32x4_t v448;
  int32x4_t v449;
  int32x4_t v450;
  int32x4_t v451;
  int32x4_t v452;
  int32x4_t v453;
  int32x4_t v454;
  int32x4_t v455;
  int32x4_t v456;
  int32x4_t v457;
  int32x4_t v458;
  int32x4_t v459;
  int32x4_t v460;
  int32x4_t v461;
  int32x4_t v462;
  int32x4_t v463;
  int32x4_t v464;
  int32x4_t v465;
  int32x4_t v466;
  int32x4_t v467;
  int32x4_t v468;
  int32x4_t v469;
  int32x4_t v470;
  int32x4_t v471;
  int32x4_t v472;
  int32x4_t v473;
  int32x4_t v474;
  uint64_t v475;

  v4 = a1;
  v475 = *MEMORY[0x24BDAC8D0];
  v5 = 2 * a3;
  v407 = 30 * a3;
  v6 = *(int16x8_t *)((char *)a1 + v407);
  v7 = *(int16x8_t *)((char *)a1 + v5);
  v8 = 16 * a3;
  v403 = 2 * (v8 - v5);
  v9 = *(int16x8_t *)((char *)a1 + v403);
  v10 = 4 * a3;
  v11 = *(int16x8_t *)((char *)a1 + v10);
  v400 = 26 * a3;
  v12 = *(int16x8_t *)((char *)a1 + v400);
  v13 = *a1;
  v397 = 6 * a3;
  v14 = *(int16x8_t *)((char *)a1 + v397);
  v394 = 24 * a3;
  v15 = *(int16x8_t *)((char *)a1 + v394);
  v16 = 8 * a3;
  v17 = *(int16x8_t *)((char *)a1 + v16);
  v391 = 22 * a3;
  v18 = *(int16x8_t *)((char *)a1 + v391);
  v388 = 10 * a3;
  v19 = *(int16x8_t *)((char *)a1 + v388);
  v20 = 20 * a3;
  v21 = *(int16x8_t *)((char *)a1 + v20);
  v22 = 12 * a3;
  v23 = *(int16x8_t *)((char *)a1 + v22);
  v24 = 18 * a3;
  v25 = *(int16x8_t *)((char *)a1 + v24);
  v26 = *(int16x8_t *)((char *)a1 + v8 - v5);
  v27 = a1[(unint64_t)v8 / 0x10];
  v28 = vaddq_s16(v6, *a1);
  v29 = vaddq_s16(v9, v7);
  v459 = vshll_n_s16(*(int16x4_t *)v28.i8, 2uLL);
  v460 = vshll_n_s16(*(int16x4_t *)v29.i8, 2uLL);
  v30 = vaddq_s16(v12, v11);
  v31 = vaddq_s16(v15, v14);
  v461 = vshll_n_s16(*(int16x4_t *)v30.i8, 2uLL);
  v462 = vshll_n_s16(*(int16x4_t *)v31.i8, 2uLL);
  v32 = vaddq_s16(v18, v17);
  v33 = vaddq_s16(v21, v19);
  v463 = vshll_n_s16(*(int16x4_t *)v32.i8, 2uLL);
  v464 = vshll_n_s16(*(int16x4_t *)v33.i8, 2uLL);
  v34 = vaddq_s16(v25, v23);
  v35 = vaddq_s16(v27, v26);
  v465 = vshll_n_s16(*(int16x4_t *)v34.i8, 2uLL);
  v466 = vshll_n_s16(*(int16x4_t *)v35.i8, 2uLL);
  v36 = vsubq_s16(v26, v27);
  v37 = vsubq_s16(v23, v25);
  v467 = vshll_n_s16(*(int16x4_t *)v36.i8, 2uLL);
  v468 = vshll_n_s16(*(int16x4_t *)v37.i8, 2uLL);
  v38 = vsubq_s16(v19, v21);
  v39 = vsubq_s16(v17, v18);
  v469 = vshll_n_s16(*(int16x4_t *)v38.i8, 2uLL);
  v470 = vshll_n_s16(*(int16x4_t *)v39.i8, 2uLL);
  v40 = vsubq_s16(v14, v15);
  v41 = vsubq_s16(v11, v12);
  v471 = vshll_n_s16(*(int16x4_t *)v40.i8, 2uLL);
  v472 = vshll_n_s16(*(int16x4_t *)v41.i8, 2uLL);
  v42 = vsubq_s16(v7, v9);
  v43 = vsubq_s16(v13, v6);
  v473 = vshll_n_s16(*(int16x4_t *)v42.i8, 2uLL);
  v474 = vshll_n_s16(*(int16x4_t *)v43.i8, 2uLL);
  v427 = vshll_high_n_s16(v28, 2uLL);
  v428 = vshll_high_n_s16(v29, 2uLL);
  v429 = vshll_high_n_s16(v30, 2uLL);
  v430 = vshll_high_n_s16(v31, 2uLL);
  v431 = vshll_high_n_s16(v32, 2uLL);
  v432 = vshll_high_n_s16(v33, 2uLL);
  v433 = vshll_high_n_s16(v34, 2uLL);
  v434 = vshll_high_n_s16(v35, 2uLL);
  v435 = vshll_high_n_s16(v36, 2uLL);
  v436 = vshll_high_n_s16(v37, 2uLL);
  v437 = vshll_high_n_s16(v38, 2uLL);
  v438 = vshll_high_n_s16(v39, 2uLL);
  v439 = vshll_high_n_s16(v40, 2uLL);
  v440 = vshll_high_n_s16(v41, 2uLL);
  v441 = vshll_high_n_s16(v42, 2uLL);
  v442 = vshll_high_n_s16(v43, 2uLL);
  vpx_highbd_fdct8x16_body(&v459, &v427);
  v44 = v4[1];
  v45 = *(int16x8_t *)((char *)++v4 + v407);
  v46 = vaddq_s16(v45, v44);
  v47 = *(int16x8_t *)((char *)v4 + v5);
  v48 = *(int16x8_t *)((char *)v4 + v403);
  v49 = vaddq_s16(v48, v47);
  v50 = *(int16x8_t *)((char *)v4 + v10);
  v51 = *(int16x8_t *)((char *)v4 + v400);
  v52 = *(int16x8_t *)((char *)v4 + v397);
  v53 = vaddq_s16(v51, v50);
  v54 = *(int16x8_t *)((char *)v4 + v394);
  v55 = vaddq_s16(v54, v52);
  v56 = *(int16x8_t *)((char *)v4 + v16);
  v57 = *(int16x8_t *)((char *)v4 + v391);
  v58 = *(int16x8_t *)((char *)v4 + v388);
  v59 = *(int16x8_t *)((char *)v4 + v20);
  v60 = vaddq_s16(v57, v56);
  v61 = vaddq_s16(v59, v58);
  v62 = *(int16x8_t *)((char *)v4 + v22);
  v63 = *(int16x8_t *)((char *)v4 + v24);
  v64 = vaddq_s16(v63, v62);
  v65 = *(int16x8_t *)((char *)v4 + v8 - v5);
  v66 = v4[(unint64_t)v8 / 0x10];
  v67 = vaddq_s16(v66, v65);
  v68 = vsubq_s16(v65, v66);
  v69 = vsubq_s16(v62, v63);
  v70 = vsubq_s16(v58, v59);
  v71 = vsubq_s16(v56, v57);
  v72 = vsubq_s16(v52, v54);
  v73 = vsubq_s16(v50, v51);
  v74 = vsubq_s16(v47, v48);
  v75 = vsubq_s16(v44, v45);
  v443 = vshll_n_s16(*(int16x4_t *)v46.i8, 2uLL);
  v444 = vshll_n_s16(*(int16x4_t *)v49.i8, 2uLL);
  v445 = vshll_n_s16(*(int16x4_t *)v53.i8, 2uLL);
  v446 = vshll_n_s16(*(int16x4_t *)v55.i8, 2uLL);
  v447 = vshll_n_s16(*(int16x4_t *)v60.i8, 2uLL);
  v448 = vshll_n_s16(*(int16x4_t *)v61.i8, 2uLL);
  v449 = vshll_n_s16(*(int16x4_t *)v64.i8, 2uLL);
  v450 = vshll_n_s16(*(int16x4_t *)v67.i8, 2uLL);
  v451 = vshll_n_s16(*(int16x4_t *)v68.i8, 2uLL);
  v452 = vshll_n_s16(*(int16x4_t *)v69.i8, 2uLL);
  v453 = vshll_n_s16(*(int16x4_t *)v70.i8, 2uLL);
  v454 = vshll_n_s16(*(int16x4_t *)v71.i8, 2uLL);
  v455 = vshll_n_s16(*(int16x4_t *)v72.i8, 2uLL);
  v456 = vshll_n_s16(*(int16x4_t *)v73.i8, 2uLL);
  v457 = vshll_n_s16(*(int16x4_t *)v74.i8, 2uLL);
  v458 = vshll_n_s16(*(int16x4_t *)v75.i8, 2uLL);
  v411 = vshll_high_n_s16(v46, 2uLL);
  v412 = vshll_high_n_s16(v49, 2uLL);
  v413 = vshll_high_n_s16(v53, 2uLL);
  v414 = vshll_high_n_s16(v55, 2uLL);
  v415 = vshll_high_n_s16(v60, 2uLL);
  v416 = vshll_high_n_s16(v61, 2uLL);
  v417 = vshll_high_n_s16(v64, 2uLL);
  v418 = vshll_high_n_s16(v67, 2uLL);
  v419 = vshll_high_n_s16(v68, 2uLL);
  v420 = vshll_high_n_s16(v69, 2uLL);
  v421 = vshll_high_n_s16(v70, 2uLL);
  v422 = vshll_high_n_s16(v71, 2uLL);
  v423 = vshll_high_n_s16(v72, 2uLL);
  v424 = vshll_high_n_s16(v73, 2uLL);
  v425 = vshll_high_n_s16(v74, 2uLL);
  v426 = vshll_high_n_s16(v75, 2uLL);
  vpx_highbd_fdct8x16_body(&v443, &v411);
  v76 = vtrn1q_s32(v459, v460);
  v77 = vtrn2q_s32(v459, v460);
  v78 = (int64x2_t)vtrn1q_s32(v461, v462);
  v79 = (int64x2_t)vtrn2q_s32(v461, v462);
  v80 = (int64x2_t)vtrn1q_s32(v463, v464);
  v81 = vtrn2q_s32(v463, v464);
  v82 = (int64x2_t)vtrn1q_s32(v465, v466);
  v83 = (int64x2_t)vtrn2q_s32(v465, v466);
  v84 = vtrn1q_s32(v427, v428);
  v85 = vtrn2q_s32(v427, v428);
  v86 = (int64x2_t)vtrn1q_s32(v429, v430);
  v87 = vtrn2q_s32(v429, v430);
  v88 = (int64x2_t)vtrn1q_s32(v443, v444);
  v89 = vtrn2q_s32(v443, v444);
  v90 = vtrn1q_s32(v445, v446);
  v91 = (int64x2_t)vtrn2q_s32(v445, v446);
  v92 = vtrn1q_s32(v411, v412);
  v93 = vtrn2q_s32(v411, v412);
  v94 = (int64x2_t)vtrn1q_s32(v413, v414);
  v95 = (int64x2_t)vtrn2q_s32(v413, v414);
  v96 = vtrn1q_s32(v415, v416);
  v97 = vtrn2q_s32(v415, v416);
  v98 = (int64x2_t)vtrn1q_s32(v417, v418);
  v99 = (int64x2_t)vtrn2q_s32(v417, v418);
  v100 = (int32x4_t)vzip2q_s64((int64x2_t)v76, v78);
  v76.i64[1] = v78.i64[0];
  v101.i64[0] = 0x100000001;
  v101.i64[1] = 0x100000001;
  v102 = vaddq_s32(v76, v101);
  v103 = (int32x4_t)vzip2q_s64((int64x2_t)v77, v79);
  v77.i64[1] = v79.i64[0];
  v104 = vaddq_s32(v77, v101);
  v105 = vaddq_s32(v100, v101);
  v106 = (int32x4_t)vzip2q_s64((int64x2_t)v84, v86);
  v84.i64[1] = v86.i64[0];
  v107 = (int32x4_t)vzip2q_s64((int64x2_t)v85, (int64x2_t)v87);
  v85.i64[1] = v87.i64[0];
  v108 = (int32x4_t)vzip2q_s64(v88, (int64x2_t)v90);
  v87.i64[0] = v88.i64[0];
  v87.i64[1] = v90.i64[0];
  v109 = (int32x4_t)vzip2q_s64((int64x2_t)v89, v91);
  v89.i64[1] = v91.i64[0];
  v110 = (int32x4_t)vzip2q_s64((int64x2_t)v92, v94);
  v92.i64[1] = v94.i64[0];
  v111 = (int32x4_t)vzip2q_s64((int64x2_t)v93, v95);
  v93.i64[1] = v95.i64[0];
  v112 = vshrq_n_s32(vaddq_s32(v110, v101), 2uLL);
  v113 = vshrq_n_s32(vaddq_s32(v111, v101), 2uLL);
  v114 = (int32x4_t)vzip2q_s64(v80, v82);
  v90.i64[0] = v80.i64[0];
  v90.i64[1] = v82.i64[0];
  v115 = (int32x4_t)vzip2q_s64((int64x2_t)v81, v83);
  v81.i64[1] = v83.i64[0];
  v116 = (int32x4_t)vzip2q_s64((int64x2_t)v96, v98);
  v76.i64[0] = v96.i64[0];
  v76.i64[1] = v98.i64[0];
  v117 = (int32x4_t)vzip2q_s64((int64x2_t)v97, v99);
  v96.i64[0] = v97.i64[0];
  v96.i64[1] = v99.i64[0];
  v408 = vsubq_s32(vshrq_n_s32(v102, 2uLL), v113);
  v404 = vsubq_s32(vshrq_n_s32(v104, 2uLL), v112);
  v97.i64[0] = 0x100000001;
  v97.i64[1] = 0x100000001;
  v118 = vaddq_s32(v103, v97);
  v459 = vsraq_n_s32(v113, v102, 2uLL);
  v119 = vshrq_n_s32(vaddq_s32(v93, v97), 2uLL);
  v460 = vsraq_n_s32(v112, v104, 2uLL);
  v120 = vsubq_s32(vshrq_n_s32(v105, 2uLL), v119);
  v121 = vsraq_n_s32(v119, v105, 2uLL);
  v122 = vaddq_s32(v84, v97);
  v123 = vshrq_n_s32(vaddq_s32(v92, v97), 2uLL);
  v124 = vsubq_s32(vshrq_n_s32(v118, 2uLL), v123);
  v461 = v121;
  v462 = vsraq_n_s32(v123, v118, 2uLL);
  v125 = v467;
  v126 = v468;
  v127 = vaddq_s32(v85, v97);
  v128 = vshrq_n_s32(vaddq_s32(v109, v97), 2uLL);
  v129 = vsubq_s32(vshrq_n_s32(v122, 2uLL), v128);
  v130 = vsraq_n_s32(v128, v122, 2uLL);
  v131 = vshrq_n_s32(vaddq_s32(v108, v97), 2uLL);
  v132 = vsubq_s32(vshrq_n_s32(v127, 2uLL), v131);
  v463 = v130;
  v133 = v435;
  v134 = v436;
  v135 = vaddq_s32(v106, v97);
  v464 = vsraq_n_s32(v131, v127, 2uLL);
  v136 = vaddq_s32(v107, v97);
  v137 = vshrq_n_s32(vaddq_s32(v89, v97), 2uLL);
  v138 = vsubq_s32(vshrq_n_s32(v135, 2uLL), v137);
  v139 = vshrq_n_s32(vaddq_s32(v87, v97), 2uLL);
  v140 = vsubq_s32(vshrq_n_s32(v136, 2uLL), v139);
  v141 = vsraq_n_s32(v139, v136, 2uLL);
  v465 = vsraq_n_s32(v137, v135, 2uLL);
  v142 = v469;
  v143 = v470;
  v144 = vaddq_s32(v90, v97);
  v466 = v141;
  v145 = vaddq_s32(v81, v97);
  v146 = vshrq_n_s32(vaddq_s32(v117, v97), 2uLL);
  v147 = vsubq_s32(vshrq_n_s32(v144, 2uLL), v146);
  v148 = vsraq_n_s32(v146, v144, 2uLL);
  v149.i64[0] = 0x100000001;
  v149.i64[1] = 0x100000001;
  v150 = vshrq_n_s32(vaddq_s32(v116, v149), 2uLL);
  v151 = vsubq_s32(vshrq_n_s32(v145, 2uLL), v150);
  v427 = v148;
  v428 = vsraq_n_s32(v150, v145, 2uLL);
  v152 = vaddq_s32(v114, v149);
  v153 = vaddq_s32(v115, v149);
  v154 = vshrq_n_s32(vaddq_s32(v96, v149), 2uLL);
  v155 = vsubq_s32(vshrq_n_s32(v152, 2uLL), v154);
  v156 = vsraq_n_s32(v154, v152, 2uLL);
  v157 = vshrq_n_s32(vaddq_s32(v76, v149), 2uLL);
  v158 = vsubq_s32(vshrq_n_s32(v153, 2uLL), v157);
  v429 = v156;
  v430 = vsraq_n_s32(v157, v153, 2uLL);
  v159 = vtrn1q_s32(v431, v432);
  v160 = (int64x2_t)vtrn1q_s32(v433, v434);
  v161 = (int32x4_t)vzip2q_s64((int64x2_t)v159, v160);
  v159.i64[1] = v160.i64[0];
  v162 = vtrn2q_s32(v431, v432);
  v163 = (int64x2_t)vtrn2q_s32(v433, v434);
  v164 = (int32x4_t)vzip2q_s64((int64x2_t)v162, v163);
  v162.i64[1] = v163.i64[0];
  v165 = vtrn1q_s32(v447, v448);
  v166 = (int64x2_t)vtrn1q_s32(v449, v450);
  v167 = (int32x4_t)vzip2q_s64((int64x2_t)v165, v166);
  v165.i64[1] = v166.i64[0];
  v168 = vtrn2q_s32(v447, v448);
  v169 = (int64x2_t)vtrn2q_s32(v449, v450);
  v170 = vaddq_s32(v159, v149);
  v171 = vshrq_n_s32(vaddq_s32((int32x4_t)vzip2q_s64((int64x2_t)v168, v169), v149), 2uLL);
  v172 = vsubq_s32(vshrq_n_s32(v170, 2uLL), v171);
  v173 = vaddq_s32(v162, v149);
  v174 = vshrq_n_s32(vaddq_s32(v167, v149), 2uLL);
  v175 = vsubq_s32(vshrq_n_s32(v173, 2uLL), v174);
  v176 = vsraq_n_s32(v171, v170, 2uLL);
  v177 = vsraq_n_s32(v174, v173, 2uLL);
  v178 = v471;
  v179 = v472;
  v431 = v176;
  v432 = v177;
  v168.i64[1] = v169.i64[0];
  v180 = vaddq_s32(v161, v149);
  v181 = vshrq_n_s32(vaddq_s32(v168, v149), 2uLL);
  v182 = vsubq_s32(vshrq_n_s32(v180, 2uLL), v181);
  v183 = vaddq_s32(v164, v149);
  v184 = vsraq_n_s32(v181, v180, 2uLL);
  v185 = vshrq_n_s32(vaddq_s32(v165, v149), 2uLL);
  v186 = vsubq_s32(vshrq_n_s32(v183, 2uLL), v185);
  v433 = v184;
  v434 = vsraq_n_s32(v185, v183, 2uLL);
  v187 = v473;
  v188 = v474;
  v467 = v140;
  v468 = v138;
  v469 = v132;
  v470 = v129;
  v471 = v124;
  v472 = v120;
  v473 = v404;
  v350 = (int64x2_t)vtrn2q_s32(v125, v126);
  v345 = (int64x2_t)vtrn1q_s32(v142, v143);
  v346 = (int64x2_t)vtrn1q_s32(v125, v126);
  v348 = (int64x2_t)vtrn2q_s32(v142, v143);
  v474 = v408;
  v375 = (int64x2_t)vtrn2q_s32(v178, v179);
  v435 = v186;
  v436 = v182;
  v369 = (int64x2_t)vtrn1q_s32(v187, v188);
  v371 = (int64x2_t)vtrn1q_s32(v178, v179);
  v373 = (int64x2_t)vtrn2q_s32(v187, v188);
  v349 = (int64x2_t)vtrn1q_s32(v133, v134);
  v355 = (int64x2_t)vtrn2q_s32(v133, v134);
  v347 = (int64x2_t)vtrn1q_s32(v437, v438);
  v352 = (int64x2_t)vtrn2q_s32(v437, v438);
  v437 = v175;
  v438 = v172;
  v386 = (int64x2_t)vtrn1q_s32(v439, v440);
  v389 = (int64x2_t)vtrn2q_s32(v439, v440);
  v398 = (int64x2_t)vtrn1q_s32(v441, v442);
  v409 = (int64x2_t)vtrn2q_s32(v441, v442);
  v353 = (int64x2_t)vtrn1q_s32(v451, v452);
  v439 = v158;
  v440 = v155;
  v351 = (int64x2_t)vtrn1q_s32(v453, v454);
  v359 = (int64x2_t)vtrn2q_s32(v453, v454);
  v405 = (int64x2_t)vtrn1q_s32(v455, v456);
  v395 = (int64x2_t)vtrn2q_s32(v455, v456);
  v401 = (int64x2_t)vtrn1q_s32(v457, v458);
  v392 = (int64x2_t)vtrn2q_s32(v457, v458);
  v441 = v151;
  v442 = v147;
  v361 = (int64x2_t)vtrn1q_s32(v419, v420);
  v363 = (int64x2_t)vtrn2q_s32(v451, v452);
  v357 = (int64x2_t)vtrn1q_s32(v421, v422);
  v365 = (int64x2_t)vtrn2q_s32(v421, v422);
  v367 = (int64x2_t)vtrn2q_s32(v419, v420);
  v377 = (int64x2_t)vtrn1q_s32(v425, v426);
  v379 = (int64x2_t)vtrn1q_s32(v423, v424);
  v381 = (int64x2_t)vtrn2q_s32(v425, v426);
  v383 = (int64x2_t)vtrn2q_s32(v423, v424);
  vpx_highbd_fdct8x16_body(&v459, &v427);
  v189.i64[0] = v346.i64[0];
  v189.i64[1] = v345.i64[0];
  v190.i64[0] = v350.i64[0];
  v190.i64[1] = v348.i64[0];
  v191.i64[0] = v349.i64[0];
  v191.i64[1] = v347.i64[0];
  v192.i64[0] = v355.i64[0];
  v192.i64[1] = v352.i64[0];
  v193.i64[0] = v353.i64[0];
  v193.i64[1] = v351.i64[0];
  v194.i64[0] = v363.i64[0];
  v194.i64[1] = v359.i64[0];
  v195.i64[0] = v361.i64[0];
  v195.i64[1] = v357.i64[0];
  v196.i64[0] = v367.i64[0];
  v196.i64[1] = v365.i64[0];
  v197.i64[0] = v371.i64[0];
  v197.i64[1] = v369.i64[0];
  v198.i64[0] = v375.i64[0];
  v198.i64[1] = v373.i64[0];
  v199.i64[0] = v379.i64[0];
  v199.i64[1] = v377.i64[0];
  v200.i64[0] = v383.i64[0];
  v200.i64[1] = v381.i64[0];
  v158.i64[0] = 0x100000001;
  v158.i64[1] = 0x100000001;
  v201 = vaddq_s32(v189, v158);
  v202 = vshrq_n_s32(vaddq_s32((int32x4_t)vzip2q_s64(v367, v365), v158), 2uLL);
  v203 = vsubq_s32(vshrq_n_s32(v201, 2uLL), v202);
  v204 = vsraq_n_s32(v202, v201, 2uLL);
  v205 = vaddq_s32(v190, v158);
  v206 = vshrq_n_s32(vaddq_s32((int32x4_t)vzip2q_s64(v361, v357), v158), 2uLL);
  v207 = vsubq_s32(vshrq_n_s32(v205, 2uLL), v206);
  v443 = v204;
  v208 = vaddq_s32((int32x4_t)vzip2q_s64(v346, v345), v158);
  v444 = vsraq_n_s32(v206, v205, 2uLL);
  v209 = vaddq_s32((int32x4_t)vzip2q_s64(v350, v348), v158);
  v210 = vshrq_n_s32(vaddq_s32(v196, v158), 2uLL);
  v211 = vsubq_s32(vshrq_n_s32(v208, 2uLL), v210);
  v212 = vsraq_n_s32(v210, v208, 2uLL);
  v213 = vshrq_n_s32(vaddq_s32(v195, v158), 2uLL);
  v214 = vsubq_s32(vshrq_n_s32(v209, 2uLL), v213);
  v445 = v212;
  v215 = vaddq_s32(v191, v158);
  v446 = vsraq_n_s32(v213, v209, 2uLL);
  v216 = vaddq_s32(v192, v158);
  v217 = vshrq_n_s32(vaddq_s32((int32x4_t)vzip2q_s64(v363, v359), v158), 2uLL);
  v218 = vsubq_s32(vshrq_n_s32(v215, 2uLL), v217);
  v219 = vsraq_n_s32(v217, v215, 2uLL);
  v220 = vshrq_n_s32(vaddq_s32((int32x4_t)vzip2q_s64(v353, v351), v158), 2uLL);
  v221 = vsubq_s32(vshrq_n_s32(v216, 2uLL), v220);
  v447 = v219;
  v222 = vaddq_s32((int32x4_t)vzip2q_s64(v349, v347), v158);
  v448 = vsraq_n_s32(v220, v216, 2uLL);
  v223 = vaddq_s32((int32x4_t)vzip2q_s64(v355, v352), v158);
  v224 = vshrq_n_s32(vaddq_s32(v194, v158), 2uLL);
  v225 = vsubq_s32(vshrq_n_s32(v222, 2uLL), v224);
  v226 = vsraq_n_s32(v224, v222, 2uLL);
  v227 = vshrq_n_s32(vaddq_s32(v193, v158), 2uLL);
  v228 = vsubq_s32(vshrq_n_s32(v223, 2uLL), v227);
  v229 = vsraq_n_s32(v227, v223, 2uLL);
  v449 = v226;
  v230 = vaddq_s32(v197, v158);
  v450 = v229;
  v231 = vaddq_s32(v198, v158);
  v232 = vshrq_n_s32(vaddq_s32((int32x4_t)vzip2q_s64(v383, v381), v158), 2uLL);
  v233 = vsubq_s32(vshrq_n_s32(v230, 2uLL), v232);
  v234 = vsraq_n_s32(v232, v230, 2uLL);
  v235 = vaddq_s32((int32x4_t)vzip2q_s64(v371, v369), v158);
  v236 = vshrq_n_s32(vaddq_s32((int32x4_t)vzip2q_s64(v379, v377), v158), 2uLL);
  v237 = vsubq_s32(vshrq_n_s32(v231, 2uLL), v236);
  v411 = v234;
  v412 = vsraq_n_s32(v236, v231, 2uLL);
  v234.i64[0] = v386.i64[0];
  v236.i64[0] = v389.i64[0];
  v238 = vshrq_n_s32(vaddq_s32(v200, v158), 2uLL);
  v239 = vsubq_s32(vshrq_n_s32(v235, 2uLL), v238);
  v240 = vaddq_s32((int32x4_t)vzip2q_s64(v375, v373), v158);
  v241 = vsraq_n_s32(v238, v235, 2uLL);
  v242 = vshrq_n_s32(vaddq_s32(v199, v158), 2uLL);
  v243 = vsubq_s32(vshrq_n_s32(v240, 2uLL), v242);
  v413 = v241;
  v414 = vsraq_n_s32(v242, v240, 2uLL);
  v234.i64[1] = v398.i64[0];
  v244 = vaddq_s32(v234, v158);
  v245 = vshrq_n_s32(vaddq_s32((int32x4_t)vzip2q_s64(v395, v392), v158), 2uLL);
  v246 = vsubq_s32(vshrq_n_s32(v244, 2uLL), v245);
  v236.i64[1] = v409.i64[0];
  v247 = vaddq_s32(v236, v158);
  v248 = vsraq_n_s32(v245, v244, 2uLL);
  v249 = vshrq_n_s32(vaddq_s32((int32x4_t)vzip2q_s64(v405, v401), v158), 2uLL);
  v250 = vsubq_s32(vshrq_n_s32(v247, 2uLL), v249);
  v415 = v248;
  v416 = vsraq_n_s32(v249, v247, 2uLL);
  v247.i64[0] = v405.i64[0];
  v247.i64[1] = v401.i64[0];
  v248.i64[0] = v395.i64[0];
  v248.i64[1] = v392.i64[0];
  v251 = vaddq_s32((int32x4_t)vzip2q_s64(v386, v398), v158);
  v252 = vaddq_s32((int32x4_t)vzip2q_s64(v389, v409), v158);
  v253 = vshrq_n_s32(vaddq_s32(v248, v158), 2uLL);
  v254 = vshrq_n_s32(vaddq_s32(v247, v158), 2uLL);
  v417 = vsraq_n_s32(v253, v251, 2uLL);
  v418 = vsraq_n_s32(v254, v252, 2uLL);
  v451 = v228;
  v452 = v225;
  v453 = v221;
  v454 = v218;
  v455 = v214;
  v456 = v211;
  v457 = v207;
  v458 = v203;
  v419 = vsubq_s32(vshrq_n_s32(v252, 2uLL), v254);
  v420 = vsubq_s32(vshrq_n_s32(v251, 2uLL), v253);
  v421 = v250;
  v422 = v246;
  v423 = v243;
  v424 = v239;
  v425 = v237;
  v426 = v233;
  vpx_highbd_fdct8x16_body(&v443, &v411);
  v255 = (int64x2_t)vtrn1q_s32(v459, v460);
  v256 = (int64x2_t)vtrn2q_s32(v459, v460);
  v257 = (int64x2_t)vtrn1q_s32(v461, v462);
  v258 = (int64x2_t)vtrn2q_s32(v461, v462);
  v259 = (int64x2_t)vtrn1q_s32(v463, v464);
  v260 = (int64x2_t)vtrn2q_s32(v463, v464);
  v261 = (int64x2_t)vtrn1q_s32(v465, v466);
  v262 = (int64x2_t)vtrn2q_s32(v465, v466);
  v263 = (int64x2_t)vtrn1q_s32(v427, v428);
  v264 = (int64x2_t)vtrn2q_s32(v427, v428);
  v265 = (int64x2_t)vtrn1q_s32(v429, v430);
  v266 = (int64x2_t)vtrn2q_s32(v429, v430);
  v267 = (int64x2_t)vtrn1q_s32(v431, v432);
  v268 = (int64x2_t)vtrn2q_s32(v431, v432);
  v269 = (int64x2_t)vtrn1q_s32(v433, v434);
  v270 = (int64x2_t)vtrn2q_s32(v433, v434);
  v271 = vzip1q_s64(v255, v257);
  v272 = vzip2q_s64(v255, v257);
  v273 = vzip1q_s64(v256, v258);
  v274 = vzip2q_s64(v256, v258);
  v275 = vzip1q_s64(v259, v261);
  v382 = vzip2q_s64(v259, v261);
  v384 = v272;
  v276 = vzip1q_s64(v260, v262);
  v277 = vzip2q_s64(v260, v262);
  v278 = vzip1q_s64(v263, v265);
  v406 = vzip2q_s64(v264, v266);
  v410 = vzip2q_s64(v263, v265);
  v279 = vzip1q_s64(v267, v269);
  v393 = vzip1q_s64(v268, v270);
  v396 = vzip2q_s64(v267, v269);
  v399 = vzip2q_s64(v268, v270);
  v402 = vzip1q_s64(v264, v266);
  v280 = (int64x2_t)vtrn1q_s32(v443, v444);
  v281 = (int64x2_t)vtrn2q_s32(v443, v444);
  v282 = (int64x2_t)vtrn1q_s32(v445, v446);
  v283 = (int64x2_t)vtrn2q_s32(v445, v446);
  v284 = (int64x2_t)vtrn1q_s32(v447, v448);
  v285 = (int64x2_t)vtrn2q_s32(v447, v448);
  v286 = (int64x2_t)vtrn1q_s32(v449, v450);
  v287 = (int64x2_t)vtrn2q_s32(v449, v450);
  v288 = (int64x2_t)vtrn1q_s32(v411, v412);
  v289 = (int64x2_t)vtrn2q_s32(v411, v412);
  v290 = (int64x2_t)vtrn1q_s32(v413, v414);
  v291 = (int64x2_t)vtrn2q_s32(v413, v414);
  v292 = (int64x2_t)vtrn1q_s32(v415, v416);
  v293 = (int64x2_t)vtrn2q_s32(v415, v416);
  v294 = (int64x2_t)vtrn1q_s32(v417, v418);
  v295 = (int64x2_t)vtrn2q_s32(v417, v418);
  v387 = vzip1q_s64(v280, v282);
  v390 = vzip2q_s64(v280, v282);
  *a2 = v271;
  a2[1] = v275;
  v378 = vzip2q_s64(v281, v283);
  v380 = vzip1q_s64(v281, v283);
  v354 = vzip1q_s64(v284, v286);
  v374 = vzip2q_s64(v285, v287);
  v376 = vzip2q_s64(v284, v286);
  v296 = v467;
  v297 = v468;
  a2[4] = v273;
  a2[5] = v276;
  v372 = vzip2q_s64(v288, v290);
  v366 = vzip1q_s64(v289, v291);
  v368 = vzip1q_s64(v288, v290);
  v370 = vzip2q_s64(v289, v291);
  v358 = vzip1q_s64(v292, v294);
  v360 = vzip1q_s64(v285, v287);
  v356 = vzip1q_s64(v293, v295);
  v362 = vzip2q_s64(v293, v295);
  v364 = vzip2q_s64(v292, v294);
  v298 = (int64x2_t)vtrn1q_s32(v296, v297);
  v299 = (int64x2_t)vtrn2q_s32(v296, v297);
  v300 = (int64x2_t)vtrn1q_s32(v469, v470);
  v301 = (int64x2_t)vtrn2q_s32(v469, v470);
  v302 = (int64x2_t)vtrn1q_s32(v471, v472);
  v303 = (int64x2_t)vtrn2q_s32(v471, v472);
  v304 = (int64x2_t)vtrn1q_s32(v473, v474);
  v305 = (int64x2_t)vtrn2q_s32(v473, v474);
  v306 = (int64x2_t)vtrn1q_s32(v435, v436);
  v307 = (int64x2_t)vtrn2q_s32(v435, v436);
  v308 = (int64x2_t)vtrn1q_s32(v437, v438);
  v309 = (int64x2_t)vtrn2q_s32(v437, v438);
  v310 = (int64x2_t)vtrn1q_s32(v439, v440);
  v311 = (int64x2_t)vtrn2q_s32(v439, v440);
  v312 = (int64x2_t)vtrn1q_s32(v441, v442);
  v313 = (int64x2_t)vtrn2q_s32(v441, v442);
  a2[8] = v384;
  a2[9] = v382;
  v314 = vzip1q_s64(v298, v300);
  v385 = vzip2q_s64(v298, v300);
  v315 = vzip1q_s64(v299, v301);
  v316 = vzip2q_s64(v299, v301);
  a2[12] = v274;
  a2[13] = v277;
  v317 = vzip1q_s64(v302, v304);
  v318 = vzip2q_s64(v302, v304);
  a2[16] = v278;
  a2[17] = v279;
  v319 = vzip1q_s64(v303, v305);
  v320 = vzip2q_s64(v303, v305);
  v321 = vzip1q_s64(v306, v308);
  v322 = vzip2q_s64(v306, v308);
  v323 = vzip1q_s64(v307, v309);
  v324 = vzip2q_s64(v307, v309);
  v325 = vzip1q_s64(v310, v312);
  v326 = vzip2q_s64(v310, v312);
  v327 = vzip1q_s64(v311, v313);
  v328 = vzip2q_s64(v311, v313);
  v329 = (int64x2_t)vtrn1q_s32(v451, v452);
  v330 = (int64x2_t)vtrn2q_s32(v451, v452);
  v331 = (int64x2_t)vtrn1q_s32(v453, v454);
  v332 = (int64x2_t)vtrn2q_s32(v453, v454);
  v333 = (int64x2_t)vtrn1q_s32(v455, v456);
  v334 = (int64x2_t)vtrn2q_s32(v455, v456);
  v335 = (int64x2_t)vtrn1q_s32(v457, v458);
  v336 = (int64x2_t)vtrn2q_s32(v457, v458);
  v337 = (int64x2_t)vtrn1q_s32(v419, v420);
  v338 = (int64x2_t)vtrn2q_s32(v419, v420);
  v339 = (int64x2_t)vtrn1q_s32(v421, v422);
  v340 = (int64x2_t)vtrn2q_s32(v421, v422);
  v341 = (int64x2_t)vtrn1q_s32(v423, v424);
  v342 = (int64x2_t)vtrn2q_s32(v423, v424);
  v343 = (int64x2_t)vtrn1q_s32(v425, v426);
  v344 = (int64x2_t)vtrn2q_s32(v425, v426);
  a2[20] = v402;
  a2[21] = v393;
  a2[24] = v410;
  a2[25] = v396;
  a2[28] = v406;
  a2[29] = v399;
  a2[32] = v387;
  a2[33] = v354;
  a2[36] = v380;
  a2[37] = v360;
  a2[40] = v390;
  a2[41] = v376;
  a2[44] = v378;
  a2[45] = v374;
  a2[48] = v368;
  a2[49] = v358;
  a2[52] = v366;
  a2[53] = v356;
  a2[56] = v372;
  a2[57] = v364;
  a2[60] = v370;
  a2[61] = v362;
  a2[2] = v314;
  a2[3] = v317;
  a2[6] = v315;
  a2[7] = v319;
  a2[10] = v385;
  a2[11] = v318;
  a2[14] = v316;
  a2[15] = v320;
  a2[18] = v321;
  a2[19] = v325;
  a2[22] = v323;
  a2[23] = v327;
  a2[26] = v322;
  a2[27] = v326;
  a2[30] = v324;
  a2[31] = v328;
  a2[34] = vzip1q_s64(v329, v331);
  a2[35] = vzip1q_s64(v333, v335);
  a2[38] = vzip1q_s64(v330, v332);
  a2[39] = vzip1q_s64(v334, v336);
  a2[42] = vzip2q_s64(v329, v331);
  a2[43] = vzip2q_s64(v333, v335);
  a2[46] = vzip2q_s64(v330, v332);
  a2[47] = vzip2q_s64(v334, v336);
  a2[50] = vzip1q_s64(v337, v339);
  a2[51] = vzip1q_s64(v341, v343);
  a2[54] = vzip1q_s64(v338, v340);
  a2[55] = vzip1q_s64(v342, v344);
  a2[58] = vzip2q_s64(v337, v339);
  a2[59] = vzip2q_s64(v341, v343);
  a2[62] = vzip2q_s64(v338, v340);
  a2[63] = vzip2q_s64(v342, v344);
}

int32x4_t vpx_highbd_fdct8x16_body(int32x4_t *a1, int32x4_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int64x2_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int64x2_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int64x2_t v177;
  int64x2_t v178;
  int64x2_t v179;
  int64x2_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t result;
  int32x4_t v186;
  int32x4_t v187;
  int64x2_t v188;
  int64x2_t v189;
  int64x2_t v190;
  int64x2_t v191;
  int64x2_t v192;
  int64x2_t v193;
  int32x4_t v194;
  int64x2_t v195;
  int64x2_t v196;
  int64x2_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int64x2_t v201;
  int64x2_t v202;
  int64x2_t v203;
  int64x2_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int64x2_t v219;
  int64x2_t v220;
  int64x2_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int64x2_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;

  v2 = a1[1];
  v4 = a1[6];
  v3 = a1[7];
  v5 = a2[1];
  v6 = a2[6];
  v7 = a2[7];
  v200 = vaddq_s32(v6, v5);
  v9 = a1[2];
  v8 = a1[3];
  v10 = a1[4];
  v11 = a1[5];
  v227 = vaddq_s32(v4, v2);
  v228 = vaddq_s32(v11, v9);
  v12 = a2[2];
  v13 = a2[3];
  v15 = a2[4];
  v14 = a2[5];
  v198 = vaddq_s32(v7, *a2);
  v199 = vaddq_s32(v14, v12);
  v225 = vaddq_s32(v3, *a1);
  v226 = vaddq_s32(v10, v8);
  v194 = vaddq_s32(v15, v13);
  v16 = vsubq_s32(v8, v10);
  v17 = vsubq_s32(v13, v15);
  v18 = vsubq_s32(v9, v11);
  v19 = vsubq_s32(v12, v14);
  v20 = vsubq_s32(v2, v4);
  v21 = vsubq_s32(v5, v6);
  v22 = vsubq_s32(*a1, v3);
  v23 = vsubq_s32(*a2, v7);
  v24 = vsubq_s32(v227, v228);
  v25 = vsubq_s32(v225, v226);
  v26 = vdupq_n_s32(0x5A820000u);
  v27 = vdupq_n_s32(0x3B21u);
  v28 = vqrdmulhq_s32(vaddq_s32(v18, v20), v26);
  v29 = vqrdmulhq_s32(vaddq_s32(v19, v21), v26);
  v30 = vqrdmulhq_s32(vsubq_s32(v20, v18), v26);
  v31 = vqrdmulhq_s32(vsubq_s32(v21, v19), v26);
  v32 = vaddq_s32(v30, v16);
  v33 = vaddq_s32(v31, v17);
  v34 = vsubq_s32(v16, v30);
  v35 = vsubq_s32(v17, v31);
  v36 = vsubq_s32(v22, v28);
  v37 = vsubq_s32(v23, v29);
  v38 = vaddq_s32(v28, v22);
  v39 = vaddq_s32(v29, v23);
  v40 = vdupq_n_s32(0x3EC5u);
  v41 = vdupq_n_s32(0xC7Cu);
  v224 = vmlal_s32(vmull_s32(*(int32x2_t *)v32.i8, *(int32x2_t *)v41.i8), *(int32x2_t *)v38.i8, *(int32x2_t *)v40.i8);
  v222 = vmlal_s32(vmull_s32(*(int32x2_t *)v33.i8, *(int32x2_t *)v41.i8), *(int32x2_t *)v39.i8, *(int32x2_t *)v40.i8);
  v223 = vmlal_high_s32(vmull_high_s32(v32, v41), v38, v40);
  v220 = vmlsl_s32(vmull_s32(*(int32x2_t *)v38.i8, *(int32x2_t *)v41.i8), *(int32x2_t *)v32.i8, *(int32x2_t *)v40.i8);
  v221 = vmlal_high_s32(vmull_high_s32(v33, v41), v39, v40);
  v218 = vmlsl_s32(vmull_s32(*(int32x2_t *)v39.i8, *(int32x2_t *)v41.i8), *(int32x2_t *)v33.i8, *(int32x2_t *)v40.i8);
  v219 = vmlsl_high_s32(vmull_high_s32(v38, v41), v32, v40);
  v42 = vmlsl_high_s32(vmull_high_s32(v39, v41), v33, v40);
  v43 = vdupq_n_s32(0x238Eu);
  v44 = vdupq_n_s32(0x3537u);
  v45 = vmull_s32(*(int32x2_t *)v36.i8, *(int32x2_t *)v44.i8);
  v46 = vmull_high_s32(v36, v44);
  v216 = vmlal_s32(vmull_s32(*(int32x2_t *)v34.i8, *(int32x2_t *)v44.i8), *(int32x2_t *)v36.i8, *(int32x2_t *)v43.i8);
  v217 = v42;
  v214 = vmlal_s32(vmull_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v44.i8), *(int32x2_t *)v37.i8, *(int32x2_t *)v43.i8);
  v215 = vmlal_high_s32(vmull_high_s32(v34, v44), v36, v43);
  v47 = vdupq_n_s32(0x187Eu);
  v212 = vmlsl_s32(v45, *(int32x2_t *)v34.i8, *(int32x2_t *)v43.i8);
  v213 = vmlal_high_s32(vmull_high_s32(v35, v44), v37, v43);
  v210 = vmlsl_s32(vmull_s32(*(int32x2_t *)v37.i8, *(int32x2_t *)v44.i8), *(int32x2_t *)v35.i8, *(int32x2_t *)v43.i8);
  v211 = vmlsl_high_s32(v46, v34, v43);
  v206 = vmlal_s32(vmull_s32(*(int32x2_t *)v24.i8, *(int32x2_t *)v47.i8), *(int32x2_t *)v25.i8, *(int32x2_t *)v27.i8);
  v205 = vmlal_high_s32(vmull_high_s32(v24, v47), v25, v27);
  v208 = vmlsl_s32(vmull_s32(*(int32x2_t *)v25.i8, *(int32x2_t *)v47.i8), *(int32x2_t *)v24.i8, *(int32x2_t *)v27.i8);
  v209 = vmlsl_high_s32(vmull_high_s32(v37, v44), v35, v43);
  v207 = vmlsl_high_s32(vmull_high_s32(v25, v47), v24, v27);
  v48 = vsubq_s32(v200, v199);
  v49 = vsubq_s32(v198, v194);
  v202 = vmlal_s32(vmull_s32(*(int32x2_t *)v48.i8, *(int32x2_t *)v47.i8), *(int32x2_t *)v49.i8, *(int32x2_t *)v27.i8);
  v201 = vmlal_high_s32(vmull_high_s32(v48, v47), v49, v27);
  v203 = vmlsl_high_s32(vmull_high_s32(v49, v47), v48, v27);
  v204 = vmlsl_s32(vmull_s32(*(int32x2_t *)v49.i8, *(int32x2_t *)v47.i8), *(int32x2_t *)v48.i8, *(int32x2_t *)v27.i8);
  v51 = a1[10];
  v50 = a1[11];
  v52 = a1[13];
  v53 = vaddq_s32(v52, v51);
  v54 = vsubq_s32(v52, v51);
  v55 = a2[10];
  v56 = a2[11];
  v57 = a2[13];
  v58 = vaddq_s32(v57, v55);
  v59 = vsubq_s32(v57, v55);
  v60 = vqrdmulhq_s32(v54, v26);
  v61 = a1[9];
  v62 = vaddq_s32(v60, v61);
  v63 = vsubq_s32(v61, v60);
  v64 = vqrdmulhq_s32(v59, v26);
  v65 = a2[9];
  v66 = vaddq_s32(v64, v65);
  v67 = vsubq_s32(v65, v64);
  v68 = vqrdmulhq_s32(v53, v26);
  v69 = a1[14];
  v70 = a1[15];
  v71 = vsubq_s32(v69, v68);
  v72 = vaddq_s32(v68, v69);
  v73 = vqrdmulhq_s32(v58, v26);
  v74 = a2[14];
  v187 = a2[15];
  v75 = vsubq_s32(v74, v73);
  v76 = vaddq_s32(v73, v74);
  v77 = vmlal_s32(vmull_s32(*(int32x2_t *)v62.i8, *(int32x2_t *)v47.i8), *(int32x2_t *)v72.i8, *(int32x2_t *)v27.i8);
  v78 = vmlal_high_s32(vmull_high_s32(v62, v47), v72, v27);
  v79 = vmlsl_s32(vmull_s32(*(int32x2_t *)v72.i8, *(int32x2_t *)v47.i8), *(int32x2_t *)v62.i8, *(int32x2_t *)v27.i8);
  v80 = vmlsl_high_s32(vmull_high_s32(v72, v47), v62, v27);
  v81 = vmlal_s32(vmull_s32(*(int32x2_t *)v66.i8, *(int32x2_t *)v47.i8), *(int32x2_t *)v76.i8, *(int32x2_t *)v27.i8);
  v82 = vmlal_high_s32(vmull_high_s32(v66, v47), v76, v27);
  v83 = vmlsl_s32(vmull_s32(*(int32x2_t *)v76.i8, *(int32x2_t *)v47.i8), *(int32x2_t *)v66.i8, *(int32x2_t *)v27.i8);
  v84 = vmlsl_high_s32(vmull_high_s32(v76, v47), v66, v27);
  v189 = vmlal_s32(vmull_s32(*(int32x2_t *)v71.i8, *(int32x2_t *)v27.i8), *(int32x2_t *)v63.i8, *(int32x2_t *)v47.i8);
  v188 = vmlal_high_s32(vmull_high_s32(v71, v27), v63, v47);
  v85 = vmlal_s32(vmull_s32(*(int32x2_t *)v75.i8, *(int32x2_t *)v27.i8), *(int32x2_t *)v67.i8, *(int32x2_t *)v47.i8);
  v86 = vmlal_high_s32(vmull_high_s32(v75, v27), v67, v47);
  v87 = vmlsl_s32(vmull_s32(*(int32x2_t *)v63.i8, *(int32x2_t *)v27.i8), *(int32x2_t *)v71.i8, *(int32x2_t *)v47.i8);
  v88 = vmlsl_high_s32(vmull_high_s32(v63, v27), v71, v47);
  v89 = vmlsl_s32(vmull_s32(*(int32x2_t *)v67.i8, *(int32x2_t *)v27.i8), *(int32x2_t *)v75.i8, *(int32x2_t *)v47.i8);
  v90 = vmlsl_high_s32(vmull_high_s32(v67, v27), v75, v47);
  v91 = a1[12];
  v92 = vaddq_s32(v91, v50);
  v93 = vsubq_s32(v91, v50);
  v94 = a2[12];
  v95 = vaddq_s32(v94, v56);
  v96 = vsubq_s32(v94, v56);
  v97 = vrshrn_high_n_s64(vrshrn_n_s64(v77, 0xEuLL), v78, 0xEuLL);
  v98 = vrshrn_high_n_s64(vrshrn_n_s64(v81, 0xEuLL), v82, 0xEuLL);
  v99 = vrshrn_high_n_s64(vrshrn_n_s64(v79, 0xEuLL), v80, 0xEuLL);
  v100 = vrshrn_high_n_s64(vrshrn_n_s64(v83, 0xEuLL), v84, 0xEuLL);
  v101 = vqrdmulhq_s32(v92, v26);
  v186 = vqrdmulhq_s32(v95, v26);
  v102 = vqrdmulhq_s32(v93, v26);
  v103 = vqrdmulhq_s32(v96, v26);
  v104 = a1[8];
  v105 = vaddq_s32(v102, v104);
  v106 = vaddq_s32(v101, v70);
  v107 = vsubq_s32(v105, v99);
  v108 = vsubq_s32(v106, v97);
  v109 = vdupq_n_s32(0x289Au);
  v110 = vdupq_n_s32(0x3179u);
  v197 = vmlal_s32(vmull_s32(*(int32x2_t *)v107.i8, *(int32x2_t *)v110.i8), *(int32x2_t *)v108.i8, *(int32x2_t *)v109.i8);
  v196 = vmlal_high_s32(vmull_high_s32(v107, v110), v108, v109);
  v111 = vmull_s32(*(int32x2_t *)v108.i8, *(int32x2_t *)v110.i8);
  v112 = vmull_high_s32(v108, v110);
  v113 = a2[8];
  v114 = vaddq_s32(v103, v113);
  v115 = vaddq_s32(v186, v187);
  v116 = vsubq_s32(v114, v100);
  v117 = vsubq_s32(v115, v98);
  v195 = vmlal_s32(vmull_s32(*(int32x2_t *)v116.i8, *(int32x2_t *)v110.i8), *(int32x2_t *)v117.i8, *(int32x2_t *)v109.i8);
  v118 = vmlal_high_s32(vmull_high_s32(v116, v110), v117, v109);
  v192 = vmlsl_s32(vmull_s32(*(int32x2_t *)v117.i8, *(int32x2_t *)v110.i8), *(int32x2_t *)v116.i8, *(int32x2_t *)v109.i8);
  v193 = vmlsl_s32(v111, *(int32x2_t *)v107.i8, *(int32x2_t *)v109.i8);
  v190 = vmlsl_high_s32(vmull_high_s32(v117, v110), v116, v109);
  v191 = vmlsl_high_s32(v112, v107, v109);
  v119 = vaddq_s32(v99, v105);
  v120 = vaddq_s32(v100, v114);
  v121 = vaddq_s32(v97, v106);
  v122 = vaddq_s32(v98, v115);
  v123 = vdupq_n_s32(0x3FB1u);
  v124 = vdupq_n_s32(0x646u);
  v125 = vmlal_s32(vmull_s32(*(int32x2_t *)v119.i8, *(int32x2_t *)v124.i8), *(int32x2_t *)v121.i8, *(int32x2_t *)v123.i8);
  v126 = vmlal_high_s32(vmull_high_s32(v119, v124), v121, v123);
  v127 = vmull_s32(*(int32x2_t *)v121.i8, *(int32x2_t *)v124.i8);
  v128 = vmull_high_s32(v121, v124);
  v129 = vmlal_s32(vmull_s32(*(int32x2_t *)v120.i8, *(int32x2_t *)v124.i8), *(int32x2_t *)v122.i8, *(int32x2_t *)v123.i8);
  v130 = vmull_s32(*(int32x2_t *)v122.i8, *(int32x2_t *)v124.i8);
  v131 = vmull_high_s32(v122, v124);
  v132 = vmlal_high_s32(vmull_high_s32(v120, v124), v122, v123);
  v133 = vmlsl_s32(v127, *(int32x2_t *)v119.i8, *(int32x2_t *)v123.i8);
  v134 = vmlsl_high_s32(v128, v119, v123);
  v135 = vmlsl_s32(v130, *(int32x2_t *)v120.i8, *(int32x2_t *)v123.i8);
  v136 = vmlsl_high_s32(v131, v120, v123);
  v137 = vsubq_s32(v104, v102);
  v138 = vsubq_s32(v113, v103);
  v139 = vsubq_s32(v70, v101);
  v140 = vsubq_s32(v187, v186);
  v141 = vrshrn_high_n_s64(vrshrn_n_s64(v189, 0xEuLL), v188, 0xEuLL);
  v142 = vrshrn_high_n_s64(vrshrn_n_s64(v85, 0xEuLL), v86, 0xEuLL);
  v143 = vrshrn_high_n_s64(vrshrn_n_s64(v87, 0xEuLL), v88, 0xEuLL);
  v144 = vrshrn_high_n_s64(vrshrn_n_s64(v89, 0xEuLL), v90, 0xEuLL);
  v145 = vsubq_s32(v137, v141);
  v146 = vsubq_s32(v139, v143);
  v147 = vdupq_n_s32(0x1294u);
  v148 = vdupq_n_s32(0x3D3Fu);
  v149 = vmlal_s32(vmull_s32(*(int32x2_t *)v145.i8, *(int32x2_t *)v148.i8), *(int32x2_t *)v146.i8, *(int32x2_t *)v147.i8);
  v150 = vmlal_high_s32(vmull_high_s32(v145, v148), v146, v147);
  v151 = vmull_s32(*(int32x2_t *)v146.i8, *(int32x2_t *)v148.i8);
  v152 = vmull_high_s32(v146, v148);
  v153 = vsubq_s32(v138, v142);
  v154 = vsubq_s32(v140, v144);
  v155 = vmlal_s32(vmull_s32(*(int32x2_t *)v153.i8, *(int32x2_t *)v148.i8), *(int32x2_t *)v154.i8, *(int32x2_t *)v147.i8);
  v156 = vmull_s32(*(int32x2_t *)v154.i8, *(int32x2_t *)v148.i8);
  v157 = vmull_high_s32(v154, v148);
  v158 = vmlal_high_s32(vmull_high_s32(v153, v148), v154, v147);
  v159 = vmlsl_s32(v151, *(int32x2_t *)v145.i8, *(int32x2_t *)v147.i8);
  v160 = vmlsl_high_s32(v152, v145, v147);
  v161 = vmlsl_s32(v156, *(int32x2_t *)v153.i8, *(int32x2_t *)v147.i8);
  v162 = vmlsl_high_s32(v157, v153, v147);
  v163 = vaddq_s32(v141, v137);
  v164 = vaddq_s32(v142, v138);
  v165 = vaddq_s32(v143, v139);
  v166 = vaddq_s32(v144, v140);
  v167 = vdupq_n_s32(0x3871u);
  v168 = vdupq_n_s32(0x1E2Bu);
  v169 = vmlal_s32(vmull_s32(*(int32x2_t *)v163.i8, *(int32x2_t *)v168.i8), *(int32x2_t *)v165.i8, *(int32x2_t *)v167.i8);
  v170 = vmlal_high_s32(vmull_high_s32(v163, v168), v165, v167);
  v171 = vmull_s32(*(int32x2_t *)v165.i8, *(int32x2_t *)v168.i8);
  v172 = vmull_high_s32(v165, v168);
  v173 = vmlal_s32(vmull_s32(*(int32x2_t *)v164.i8, *(int32x2_t *)v168.i8), *(int32x2_t *)v166.i8, *(int32x2_t *)v167.i8);
  v174 = vmull_s32(*(int32x2_t *)v166.i8, *(int32x2_t *)v168.i8);
  v175 = vmull_high_s32(v166, v168);
  v176 = vmlal_high_s32(vmull_high_s32(v164, v168), v166, v167);
  v177 = vmlsl_s32(v171, *(int32x2_t *)v163.i8, *(int32x2_t *)v167.i8);
  v178 = vmlsl_high_s32(v172, v163, v167);
  v179 = vmlsl_s32(v174, *(int32x2_t *)v164.i8, *(int32x2_t *)v167.i8);
  v180 = vmlsl_high_s32(v175, v164, v167);
  v181 = vaddq_s32(v226, v225);
  v182 = vaddq_s32(v194, v198);
  v183 = vaddq_s32(v228, v227);
  v184 = vaddq_s32(v199, v200);
  *a1 = vqrdmulhq_s32(vaddq_s32(v181, v183), v26);
  *a2 = vqrdmulhq_s32(vaddq_s32(v182, v184), v26);
  a1[8] = vqrdmulhq_s32(vsubq_s32(v181, v183), v26);
  a2[8] = vqrdmulhq_s32(vsubq_s32(v182, v184), v26);
  a1[4] = vrshrn_high_n_s64(vrshrn_n_s64(v206, 0xEuLL), v205, 0xEuLL);
  a2[4] = vrshrn_high_n_s64(vrshrn_n_s64(v202, 0xEuLL), v201, 0xEuLL);
  a1[12] = vrshrn_high_n_s64(vrshrn_n_s64(v208, 0xEuLL), v207, 0xEuLL);
  a2[12] = vrshrn_high_n_s64(vrshrn_n_s64(v204, 0xEuLL), v203, 0xEuLL);
  a1[2] = vrshrn_high_n_s64(vrshrn_n_s64(v224, 0xEuLL), v223, 0xEuLL);
  a2[2] = vrshrn_high_n_s64(vrshrn_n_s64(v222, 0xEuLL), v221, 0xEuLL);
  a1[14] = vrshrn_high_n_s64(vrshrn_n_s64(v220, 0xEuLL), v219, 0xEuLL);
  a2[14] = vrshrn_high_n_s64(vrshrn_n_s64(v218, 0xEuLL), v217, 0xEuLL);
  a1[10] = vrshrn_high_n_s64(vrshrn_n_s64(v216, 0xEuLL), v215, 0xEuLL);
  a2[10] = vrshrn_high_n_s64(vrshrn_n_s64(v214, 0xEuLL), v213, 0xEuLL);
  a1[6] = vrshrn_high_n_s64(vrshrn_n_s64(v212, 0xEuLL), v211, 0xEuLL);
  a2[6] = vrshrn_high_n_s64(vrshrn_n_s64(v210, 0xEuLL), v209, 0xEuLL);
  a1[9] = vrshrn_high_n_s64(vrshrn_n_s64(v197, 0xEuLL), v196, 0xEuLL);
  a2[9] = vrshrn_high_n_s64(vrshrn_n_s64(v195, 0xEuLL), v118, 0xEuLL);
  a1[7] = vrshrn_high_n_s64(vrshrn_n_s64(v193, 0xEuLL), v191, 0xEuLL);
  a2[7] = vrshrn_high_n_s64(vrshrn_n_s64(v192, 0xEuLL), v190, 0xEuLL);
  a1[1] = vrshrn_high_n_s64(vrshrn_n_s64(v125, 0xEuLL), v126, 0xEuLL);
  a2[1] = vrshrn_high_n_s64(vrshrn_n_s64(v129, 0xEuLL), v132, 0xEuLL);
  a1[15] = vrshrn_high_n_s64(vrshrn_n_s64(v133, 0xEuLL), v134, 0xEuLL);
  a2[15] = vrshrn_high_n_s64(vrshrn_n_s64(v135, 0xEuLL), v136, 0xEuLL);
  a1[13] = vrshrn_high_n_s64(vrshrn_n_s64(v149, 0xEuLL), v150, 0xEuLL);
  a2[13] = vrshrn_high_n_s64(vrshrn_n_s64(v155, 0xEuLL), v158, 0xEuLL);
  a1[3] = vrshrn_high_n_s64(vrshrn_n_s64(v159, 0xEuLL), v160, 0xEuLL);
  a2[3] = vrshrn_high_n_s64(vrshrn_n_s64(v161, 0xEuLL), v162, 0xEuLL);
  a1[5] = vrshrn_high_n_s64(vrshrn_n_s64(v169, 0xEuLL), v170, 0xEuLL);
  a2[5] = vrshrn_high_n_s64(vrshrn_n_s64(v173, 0xEuLL), v176, 0xEuLL);
  a1[11] = vrshrn_high_n_s64(vrshrn_n_s64(v177, 0xEuLL), v178, 0xEuLL);
  result = vrshrn_high_n_s64(vrshrn_n_s64(v179, 0xEuLL), v180, 0xEuLL);
  a2[11] = result;
  return result;
}

void vpx_fdct32x32_neon(int16x8_t *a1, int32x4_t *a2, int a3)
{
  int16x8_t *v4;
  uint64_t v5;
  int16x8_t v6;
  int16x8_t v7;
  uint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  uint64_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  uint64_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v33;
  int16x8_t v34;
  int16x8_t v35;
  uint64_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  uint64_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  int64x2_t v253;
  int64x2_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int64x2_t v266;
  int64x2_t v267;
  int64x2_t v268;
  int64x2_t v269;
  int64x2_t v270;
  int64x2_t v271;
  int64x2_t v272;
  int64x2_t v273;
  int64x2_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int64x2_t v283;
  int64x2_t v284;
  int64x2_t v285;
  int64x2_t v286;
  int64x2_t v287;
  int64x2_t v288;
  int64x2_t v289;
  int64x2_t v290;
  int64x2_t v291;
  int64x2_t v292;
  int64x2_t v293;
  int64x2_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int64x2_t v303;
  int64x2_t v304;
  int64x2_t v305;
  int64x2_t v306;
  int64x2_t v307;
  int64x2_t v308;
  int64x2_t v309;
  int64x2_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int64x2_t v319;
  int64x2_t v320;
  int64x2_t v321;
  int64x2_t v322;
  int64x2_t v323;
  int64x2_t v324;
  int64x2_t v325;
  int64x2_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int64x2_t v335;
  int64x2_t v336;
  int64x2_t v337;
  int64x2_t v338;
  int64x2_t v339;
  int64x2_t v340;
  int64x2_t v341;
  int64x2_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int32x4_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int64x2_t v351;
  int64x2_t v352;
  int64x2_t v353;
  int64x2_t v354;
  int64x2_t v355;
  int8x16_t v356;
  int64x2_t v357;
  int64x2_t v358;
  int64x2_t v359;
  int16x8_t v360;
  int32x4_t v361;
  int32x4_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int32x4_t v367;
  int32x4_t v368;
  int64x2_t v369;
  int64x2_t v370;
  int64x2_t v371;
  int64x2_t v372;
  int64x2_t v373;
  int64x2_t v374;
  int8x16_t v375;
  int8x16_t v376;
  int64x2_t v377;
  int64x2_t v378;
  int16x8_t v379;
  int32x4_t v380;
  int16x8_t v381;
  int32x4_t v382;
  int16x8_t v383;
  int32x4_t v384;
  int16x8_t v385;
  int32x4_t v386;
  int16x8_t v387;
  int32x4_t v388;
  int16x8_t v389;
  int32x4_t v390;
  int16x8_t v391;
  int32x4_t v392;
  int16x8_t v393;
  int32x4_t v394;
  int16x8_t v395;
  int32x4_t v396;
  int16x8_t v397;
  int32x4_t v398;
  int16x8_t v399;
  int32x4_t v400;
  int16x8_t v401;
  int32x4_t v402;
  int16x8_t v403;
  int32x4_t v404;
  int16x8_t v405;
  int32x4_t v406;
  int32x4_t v407;
  int32x4_t v408;
  int32x4_t v409;
  int32x4_t v410;
  int32x4_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int64x2_t v417;
  int64x2_t v418;
  int64x2_t v419;
  int64x2_t v420;
  int64x2_t v421;
  int64x2_t v422;
  int64x2_t v423;
  int64x2_t v424;
  int64x2_t v425;
  int64x2_t v426;
  int64x2_t v427;
  int64x2_t v428;
  int64x2_t v429;
  int64x2_t v430;
  int64x2_t v431;
  int64x2_t v432;
  int32x4_t v433;
  int32x4_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int32x4_t v438;
  int32x4_t v439;
  int32x4_t v440;
  int64x2_t v441;
  int64x2_t v442;
  int64x2_t v443;
  int64x2_t v444;
  int64x2_t v445;
  int64x2_t v446;
  int64x2_t v447;
  int64x2_t v448;
  int64x2_t v449;
  int64x2_t v450;
  int64x2_t v451;
  int64x2_t v452;
  int64x2_t v453;
  int64x2_t v454;
  int64x2_t v455;
  int64x2_t v456;
  int32x4_t v457;
  int32x4_t v458;
  int32x4_t v459;
  int32x4_t v460;
  int32x4_t v461;
  int32x4_t v462;
  int32x4_t v463;
  int32x4_t v464;
  int64x2_t v465;
  int64x2_t v466;
  int64x2_t v467;
  int64x2_t v468;
  int64x2_t v469;
  int64x2_t v470;
  int64x2_t v471;
  int64x2_t v472;
  int64x2_t v473;
  int64x2_t v474;
  int64x2_t v475;
  int64x2_t v476;
  int64x2_t v477;
  int64x2_t v478;
  int64x2_t v479;
  int64x2_t v480;
  int32x4_t v481;
  int32x4_t v482;
  int32x4_t v483;
  int32x4_t v484;
  int32x4_t v485;
  int32x4_t v486;
  int32x4_t v487;
  int32x4_t v488;
  int64x2_t v489;
  int64x2_t v490;
  int64x2_t v491;
  int64x2_t v492;
  int64x2_t v493;
  int64x2_t v494;
  int64x2_t v495;
  int64x2_t v496;
  int32x4_t v497;
  int32x4_t v498;
  int32x4_t v499;
  int32x4_t v500;
  int32x4_t v501;
  int32x4_t v502;
  int32x4_t v503;
  int32x4_t v504;
  int64x2_t v505;
  int64x2_t v506;
  int64x2_t v507;
  int64x2_t v508;
  int64x2_t v509;
  int64x2_t v510;
  int64x2_t v511;
  int64x2_t v512;
  int32x4_t v513;
  int32x4_t v514;
  int32x4_t v515;
  int32x4_t v516;
  int32x4_t v517;
  int32x4_t v518;
  int32x4_t v519;
  int32x4_t v520;
  int64x2_t v521;
  int64x2_t v522;
  int64x2_t v523;
  int64x2_t v524;
  int64x2_t v525;
  int64x2_t v526;
  int64x2_t v527;
  int64x2_t v528;
  int32x4_t v529;
  int32x4_t v530;
  int32x4_t v531;
  int32x4_t v532;
  int32x4_t v533;
  int32x4_t v534;
  int32x4_t v535;
  int32x4_t v536;
  int64x2_t v537;
  int64x2_t v538;
  int64x2_t v539;
  int64x2_t v540;
  int64x2_t v541;
  int8x16_t v542;
  int64x2_t v543;
  int64x2_t v544;
  int64x2_t v545;
  int16x8_t v546;
  int32x4_t v547;
  int32x4_t v548;
  int32x4_t v549;
  int32x4_t v550;
  int32x4_t v551;
  int32x4_t v552;
  int32x4_t v553;
  int32x4_t v554;
  int64x2_t v555;
  int64x2_t v556;
  int64x2_t v557;
  int64x2_t v558;
  int64x2_t v559;
  int64x2_t v560;
  int8x16_t v561;
  int8x16_t v562;
  int64x2_t v563;
  int64x2_t v564;
  int16x8_t v565;
  int32x4_t v566;
  int16x8_t v567;
  int32x4_t v568;
  int16x8_t v569;
  int32x4_t v570;
  int16x8_t v571;
  int32x4_t v572;
  int16x8_t v573;
  int32x4_t v574;
  int16x8_t v575;
  int32x4_t v576;
  int16x8_t v577;
  int32x4_t v578;
  int16x8_t v579;
  int32x4_t v580;
  int16x8_t v581;
  int32x4_t v582;
  int16x8_t v583;
  int32x4_t v584;
  int16x8_t v585;
  int32x4_t v586;
  int16x8_t v587;
  int32x4_t v588;
  int16x8_t v589;
  int32x4_t v590;
  int16x8_t v591;
  int32x4_t v592;
  int32x4_t v593;
  int32x4_t v594;
  int32x4_t v595;
  int32x4_t v596;
  int32x4_t v597;
  int32x4_t v598;
  int32x4_t v599;
  int32x4_t v600;
  int16x8_t v601;
  int16x8_t v602;
  int32x4_t v603;
  int32x4_t v604;
  int64x2_t v605;
  int64x2_t v606;
  int64x2_t v607;
  int64x2_t v608;
  int64x2_t v609;
  int64x2_t v610;
  int64x2_t v611;
  int64x2_t v612;
  int64x2_t v613;
  int64x2_t v614;
  int64x2_t v615;
  int64x2_t v616;
  int64x2_t v617;
  int64x2_t v618;
  int64x2_t v619;
  int64x2_t v620;
  int32x4_t v621;
  int32x4_t v622;
  int32x4_t v623;
  int32x4_t v624;
  int32x4_t v625;
  int32x4_t v626;
  int32x4_t v627;
  int32x4_t v628;
  int64x2_t v629;
  int64x2_t v630;
  int64x2_t v631;
  int64x2_t v632;
  int64x2_t v633;
  int64x2_t v634;
  int64x2_t v635;
  int64x2_t v636;
  int64x2_t v637;
  int64x2_t v638;
  int64x2_t v639;
  int64x2_t v640;
  int64x2_t v641;
  int64x2_t v642;
  int64x2_t v643;
  int64x2_t v644;
  int32x4_t v645;
  int32x4_t v646;
  int32x4_t v647;
  int32x4_t v648;
  int32x4_t v649;
  int32x4_t v650;
  int32x4_t v651;
  int32x4_t v652;
  int64x2_t v653;
  int64x2_t v654;
  int64x2_t v655;
  int64x2_t v656;
  int64x2_t v657;
  int64x2_t v658;
  int64x2_t v659;
  int64x2_t v660;
  int64x2_t v661;
  int64x2_t v662;
  int64x2_t v663;
  int64x2_t v664;
  int64x2_t v665;
  int64x2_t v666;
  int64x2_t v667;
  int64x2_t v668;
  int32x4_t v669;
  int32x4_t v670;
  int32x4_t v671;
  int32x4_t v672;
  int32x4_t v673;
  int32x4_t v674;
  int32x4_t v675;
  int32x4_t v676;
  int64x2_t v677;
  int64x2_t v678;
  int64x2_t v679;
  int64x2_t v680;
  int64x2_t v681;
  int64x2_t v682;
  int64x2_t v683;
  int64x2_t v684;
  int32x4_t v685;
  int32x4_t v686;
  int32x4_t v687;
  int32x4_t v688;
  int32x4_t v689;
  int32x4_t v690;
  int32x4_t v691;
  int32x4_t v692;
  int64x2_t v693;
  int64x2_t v694;
  int64x2_t v695;
  int64x2_t v696;
  int64x2_t v697;
  int64x2_t v698;
  int64x2_t v699;
  int64x2_t v700;
  int32x4_t v701;
  int32x4_t v702;
  int32x4_t v703;
  int32x4_t v704;
  int32x4_t v705;
  int32x4_t v706;
  int32x4_t v707;
  int32x4_t v708;
  int64x2_t v709;
  int64x2_t v710;
  int64x2_t v711;
  int64x2_t v712;
  int64x2_t v713;
  int64x2_t v714;
  int64x2_t v715;
  int64x2_t v716;
  int32x4_t v717;
  int32x4_t v718;
  int32x4_t v719;
  int32x4_t v720;
  int32x4_t v721;
  int32x4_t v722;
  int32x4_t v723;
  int32x4_t v724;
  int64x2_t v725;
  int64x2_t v726;
  int64x2_t v727;
  int64x2_t v728;
  int64x2_t v729;
  int8x16_t v730;
  int64x2_t v731;
  int64x2_t v732;
  int64x2_t v733;
  int16x8_t v734;
  int32x4_t v735;
  int32x4_t v736;
  int32x4_t v737;
  int32x4_t v738;
  int32x4_t v739;
  int32x4_t v740;
  int32x4_t v741;
  int32x4_t v742;
  int64x2_t v743;
  int64x2_t v744;
  int64x2_t v745;
  int64x2_t v746;
  int64x2_t v747;
  int64x2_t v748;
  int8x16_t v749;
  int8x16_t v750;
  int64x2_t v751;
  int64x2_t v752;
  int16x8_t v753;
  int32x4_t v754;
  int16x8_t v755;
  int32x4_t v756;
  int16x8_t v757;
  int32x4_t v758;
  int16x8_t v759;
  int32x4_t v760;
  int16x8_t v761;
  int32x4_t v762;
  int16x8_t v763;
  int32x4_t v764;
  int16x8_t v765;
  int32x4_t v766;
  int16x8_t v767;
  int32x4_t v768;
  int16x8_t v769;
  int32x4_t v770;
  int16x8_t v771;
  int32x4_t v772;
  int16x8_t v773;
  int32x4_t v774;
  int16x8_t v775;
  int32x4_t v776;
  int16x8_t v777;
  int32x4_t v778;
  int16x8_t v779;
  int32x4_t v780;
  int32x4_t v781;
  int32x4_t v782;
  int32x4_t v783;
  int32x4_t v784;
  int32x4_t v785;
  int32x4_t v786;
  int32x4_t v787;
  int32x4_t v788;
  int16x8_t v789;
  int16x8_t v790;
  int32x4_t v791;
  int32x4_t v792;
  int64x2_t v793;
  int64x2_t v794;
  int64x2_t v795;
  int64x2_t v796;
  int64x2_t v797;
  int64x2_t v798;
  int64x2_t v799;
  int64x2_t v800;
  int64x2_t v801;
  int64x2_t v802;
  int64x2_t v803;
  int64x2_t v804;
  int64x2_t v805;
  int64x2_t v806;
  int64x2_t v807;
  int64x2_t v808;
  int32x4_t v809;
  int32x4_t v810;
  int32x4_t v811;
  int32x4_t v812;
  int32x4_t v813;
  int32x4_t v814;
  int32x4_t v815;
  int32x4_t v816;
  int64x2_t v817;
  int64x2_t v818;
  int64x2_t v819;
  int64x2_t v820;
  int64x2_t v821;
  int64x2_t v822;
  int64x2_t v823;
  int64x2_t v824;
  int64x2_t v825;
  int64x2_t v826;
  int64x2_t v827;
  int64x2_t v828;
  int64x2_t v829;
  int64x2_t v830;
  int64x2_t v831;
  int64x2_t v832;
  int32x4_t v833;
  int32x4_t v834;
  int32x4_t v835;
  int32x4_t v836;
  int32x4_t v837;
  int32x4_t v838;
  int32x4_t v839;
  int32x4_t v840;
  int64x2_t v841;
  int64x2_t v842;
  int64x2_t v843;
  int64x2_t v844;
  int64x2_t v845;
  int64x2_t v846;
  int64x2_t v847;
  int64x2_t v848;
  int64x2_t v849;
  int64x2_t v850;
  int64x2_t v851;
  int64x2_t v852;
  int64x2_t v853;
  int64x2_t v854;
  int64x2_t v855;
  int64x2_t v856;
  int32x4_t v857;
  int32x4_t v858;
  int32x4_t v859;
  int32x4_t v860;
  int32x4_t v861;
  int32x4_t v862;
  int32x4_t v863;
  int32x4_t v864;
  int64x2_t v865;
  int64x2_t v866;
  int64x2_t v867;
  int64x2_t v868;
  int64x2_t v869;
  int64x2_t v870;
  int64x2_t v871;
  int64x2_t v872;
  int32x4_t v873;
  int32x4_t v874;
  int32x4_t v875;
  int32x4_t v876;
  int32x4_t v877;
  int32x4_t v878;
  int32x4_t v879;
  int32x4_t v880;
  int64x2_t v881;
  int64x2_t v882;
  int64x2_t v883;
  int64x2_t v884;
  int64x2_t v885;
  int64x2_t v886;
  int64x2_t v887;
  int64x2_t v888;
  int32x4_t v889;
  int32x4_t v890;
  int32x4_t v891;
  int32x4_t v892;
  int32x4_t v893;
  int32x4_t v894;
  int32x4_t v895;
  int32x4_t v896;
  int64x2_t v897;
  int64x2_t v898;
  int64x2_t v899;
  int64x2_t v900;
  int64x2_t v901;
  int64x2_t v902;
  int64x2_t v903;
  int64x2_t v904;
  int32x4_t v905;
  int32x4_t v906;
  int32x4_t v907;
  int32x4_t v908;
  int32x4_t v909;
  int32x4_t v910;
  int32x4_t v911;
  int32x4_t v912;
  int64x2_t v913;
  int64x2_t v914;
  int64x2_t v915;
  int64x2_t v916;
  int64x2_t v917;
  int64x2_t v918;
  int64x2_t v919;
  int64x2_t v920;
  int16x8_t v921;
  int32x4_t v922;
  int32x4_t v923;
  int32x4_t v924;
  int32x4_t v925;
  int32x4_t v926;
  int32x4_t v927;
  int32x4_t v928;
  int32x4_t v929;
  int64x2_t v930;
  int64x2_t v931;
  int64x2_t v932;
  int64x2_t v933;
  int64x2_t v934;
  int64x2_t v935;
  int64x2_t v936;
  int64x2_t v937;
  int8x16_t v938;
  int8x16_t v939;
  int8x16_t v940;
  int16x8_t v941;
  int16x8_t v942;
  int16x8_t v943;
  int32x4_t v944;
  int16x8_t v945;
  int32x4_t v946;
  int16x8_t v947;
  int32x4_t v948;
  int16x8_t v949;
  int32x4_t v950;
  int16x8_t v951;
  int32x4_t v952;
  int16x8_t v953;
  int32x4_t v954;
  int16x8_t v955;
  int32x4_t v956;
  int16x8_t v957;
  int32x4_t v958;
  int16x8_t v959;
  int32x4_t v960;
  int16x8_t v961;
  int32x4_t v962;
  int16x8_t v963;
  int32x4_t v964;
  int16x8_t v965;
  int32x4_t v966;
  int16x8_t v967;
  int32x4_t v968;
  uint64_t v969;
  uint64_t v970;
  int16x8_t v971;
  int16x8_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  int16x8_t v992;
  uint64_t v993;
  uint64_t v994;
  int16x8_t v995;
  int16x8_t v996;
  int16x8_t v997;
  int16x8_t v998;
  int16x8_t v999;
  int16x8_t v1000;
  int16x8_t v1001;
  int16x8_t v1002;
  int16x8_t v1003;
  int16x8_t v1004;
  int16x8_t v1005;
  int16x8_t v1006;
  int16x8_t v1007;
  int16x8_t v1008;
  int16x8_t v1009;
  int16x8_t v1010;
  int16x8_t v1011;
  int16x8_t v1012;
  int16x8_t v1013;
  int16x8_t v1014;
  int16x8_t v1015;
  int16x8_t v1016;
  int16x8_t v1017;
  int16x8_t v1018;
  int16x8_t v1019;
  int16x8_t v1020;
  int16x8_t v1021;
  int16x8_t v1022;
  int16x8_t v1023;
  int16x8_t v1024;
  int16x8_t v1025;
  int16x8_t v1026;
  int16x8_t v1027;
  int16x8_t v1028;
  int16x8_t v1029;
  int16x8_t v1030;
  int16x8_t v1031;
  int16x8_t v1032;
  int16x8_t v1033;
  int16x8_t v1034;
  int16x8_t v1035;
  int16x8_t v1036;
  int16x8_t v1037;
  int16x8_t v1038;
  int16x8_t v1039;
  int16x8_t v1040;
  int16x8_t v1041;
  int16x8_t v1042;
  int16x8_t v1043;
  int16x8_t v1044;
  int16x8_t v1045;
  int16x8_t v1046;
  int16x8_t v1047;
  int16x8_t v1048;
  int16x8_t v1049;
  int16x8_t v1050;
  int16x8_t v1051;
  int16x8_t v1052;
  int16x8_t v1053;
  int16x8_t v1054;
  int16x8_t v1055;
  int16x8_t v1056;
  int16x8_t v1057;
  int16x8_t v1058;
  int16x8_t v1059;
  int16x8_t v1060;
  int16x8_t v1061;
  int16x8_t v1062;
  int16x8_t v1063;
  int16x8_t v1064;
  int16x8_t v1065;
  int16x8_t v1066;
  int16x8_t v1067;
  int16x8_t v1068;
  int16x8_t v1069;
  int16x8_t v1070;
  int16x8_t v1071;
  int16x8_t v1072;
  int16x8_t v1073;
  int16x8_t v1074;
  int16x8_t v1075;
  int16x8_t v1076;
  int16x8_t v1077;
  int16x8_t v1078;
  int16x8_t v1079;
  int16x8_t v1080;
  int16x8_t v1081;
  int16x8_t v1082;
  int16x8_t v1083;
  int16x8_t v1084;
  int16x8_t v1085;
  int16x8_t v1086;
  int16x8_t v1087;
  int16x8_t v1088;
  int16x8_t v1089;
  int16x8_t v1090;
  int16x8_t v1091;
  int16x8_t v1092;
  int16x8_t v1093;
  int16x8_t v1094;
  int16x8_t v1095;
  int16x8_t v1096;
  int16x8_t v1097;
  int16x8_t v1098;
  int16x8_t v1099;
  int16x8_t v1100;
  int16x8_t v1101;
  int16x8_t v1102;
  int16x8_t v1103;
  int16x8_t v1104;
  int16x8_t v1105;
  int16x8_t v1106;
  int16x8_t v1107;
  int16x8_t v1108;
  int16x8_t v1109;
  int16x8_t v1110;
  int16x8_t v1111;
  int16x8_t v1112;
  int16x8_t v1113;
  int16x8_t v1114;
  int16x8_t v1115;
  int16x8_t v1116;
  int16x8_t v1117;
  int16x8_t v1118;
  int16x8_t v1119;
  int16x8_t v1120;
  int16x8_t v1121;
  int16x8_t v1122;
  int16x8_t v1123;
  int16x8_t v1124;
  int16x8_t v1125;
  int16x8_t v1126;
  int16x8_t v1127;
  int16x8_t v1128;
  int16x8_t v1129;
  int16x8_t v1130;
  int16x8_t v1131;
  int16x8_t v1132;
  int16x8_t v1133;
  int16x8_t v1134;
  int16x8_t v1135;
  int16x8_t v1136;
  int16x8_t v1137;
  int16x8_t v1138;
  int16x8_t v1139;
  int16x8_t v1140;
  int16x8_t v1141;
  int16x8_t v1142;
  int16x8_t v1143;
  int16x8_t v1144;
  int16x8_t v1145;
  int16x8_t v1146;
  int16x8_t v1147;
  int16x8_t v1148;
  int16x8_t v1149;
  int16x8_t v1150;
  int16x8_t v1151;
  int16x8_t v1152;
  int16x8_t v1153;
  int16x8_t v1154;
  int64x2_t v1155;
  int64x2_t v1156;
  int64x2_t v1157;
  int64x2_t v1158;
  int64x2_t v1159;
  int64x2_t v1160;
  int64x2_t v1161;
  int64x2_t v1162;
  int64x2_t v1163;
  int64x2_t v1164;
  int64x2_t v1165;
  int64x2_t v1166;
  int64x2_t v1167;
  int64x2_t v1168;
  int64x2_t v1169;
  int64x2_t v1170;
  int64x2_t v1171;
  int64x2_t v1172;
  int64x2_t v1173;
  int64x2_t v1174;
  int64x2_t v1175;
  int64x2_t v1176;
  int64x2_t v1177;
  int64x2_t v1178;
  int64x2_t v1179;
  int64x2_t v1180;
  int64x2_t v1181;
  int64x2_t v1182;
  int64x2_t v1183;
  int64x2_t v1184;
  int64x2_t v1185;
  int64x2_t v1186;
  uint64_t v1187;

  v4 = a1;
  v1187 = *MEMORY[0x24BDAC8D0];
  v5 = 62 * a3;
  v6 = *(int16x8_t *)((char *)a1 + v5);
  v7 = *(int16x8_t *)((char *)a1 + 2 * a3);
  v8 = 30 * a3;
  v991 = 60 * a3;
  v9 = *(int16x8_t *)((char *)a1 + v991);
  v10 = *(int16x8_t *)((char *)a1 + 4 * a3);
  v985 = 58 * a3;
  v986 = 2 * a3;
  v11 = *(int16x8_t *)((char *)a1 + v985);
  v12 = *(int16x8_t *)((char *)a1 + 6 * a3);
  v13 = *a1;
  v14 = 28 * a3;
  v970 = 2 * a3;
  v983 = 56 * a3;
  v984 = 6 * a3;
  v15 = *(int16x8_t *)((char *)a1 + v983);
  v16 = *(int16x8_t *)((char *)a1 + 8 * a3);
  v987 = 8 * a3;
  v988 = 4 * a3;
  v982 = 54 * a3;
  v17 = *(int16x8_t *)((char *)a1 + v982);
  v981 = 10 * a3;
  v18 = *(int16x8_t *)((char *)a1 + v981);
  v980 = 52 * a3;
  v969 = 26 * a3;
  v19 = *(int16x8_t *)((char *)a1 + v980);
  v978 = 12 * a3;
  v20 = *(int16x8_t *)((char *)a1 + v978);
  v977 = 50 * a3;
  v21 = *(int16x8_t *)((char *)a1 + v977);
  v22 = a3;
  v23 = *(int16x8_t *)((char *)a1 + 14 * a3);
  v989 = 3 * a3;
  v990 = 14 * a3;
  v24 = a1[v989];
  v976 = 46 * a3;
  v25 = a1[v22];
  v995 = vshlq_n_s16(vaddq_s16(v6, *a1), 2uLL);
  v996 = vshlq_n_s16(vaddq_s16(v9, v7), 2uLL);
  v26 = *(int16x8_t *)((char *)a1 + v976);
  v979 = 42 * a3;
  v27 = 38 * a3;
  v994 = 18 * a3;
  v28 = *(int16x8_t *)((char *)a1 + v994);
  v993 = 44 * a3;
  v29 = *(int16x8_t *)((char *)a1 + v993);
  v974 = 20 * a3;
  v975 = 22 * a3;
  v30 = *(int16x8_t *)((char *)a1 + v974);
  v31 = *(int16x8_t *)((char *)a1 + v979);
  v32 = *(int16x8_t *)((char *)a1 + v975);
  v997 = vshlq_n_s16(vaddq_s16(v11, v10), 2uLL);
  v998 = vshlq_n_s16(vaddq_s16(v15, v12), 2uLL);
  v999 = vshlq_n_s16(vaddq_s16(v17, v16), 2uLL);
  v1000 = vshlq_n_s16(vaddq_s16(v19, v18), 2uLL);
  v1001 = vshlq_n_s16(vaddq_s16(v21, v20), 2uLL);
  v1002 = vshlq_n_s16(vaddq_s16(v24, v23), 2uLL);
  v33 = 40 * a3;
  v34 = *(int16x8_t *)((char *)a1 + v33);
  v35 = vsubq_s16(v23, v24);
  v36 = 24 * a3;
  v37 = *(int16x8_t *)((char *)a1 + v36);
  v38 = vsubq_s16(v20, v21);
  v39 = *(int16x8_t *)((char *)a1 + v27);
  v40 = vsubq_s16(v16, v17);
  v41 = *(int16x8_t *)((char *)a1 + v14);
  v973 = 34 * a3;
  v42 = *(int16x8_t *)((char *)a1 + v973);
  v1003 = vshlq_n_s16(vaddq_s16(v26, v25), 2uLL);
  v1004 = vshlq_n_s16(vaddq_s16(v29, v28), 2uLL);
  v43 = *(int16x8_t *)((char *)a1 + v8);
  v44 = vaddq_s16(v42, v41);
  v45 = a1[v970];
  v46 = vaddq_s16(v45, v43);
  v47 = vsubq_s16(v43, v45);
  v48 = *(int16x8_t *)((char *)a1 + v969);
  v49 = vsubq_s16(v41, v42);
  v50 = 36 * a3;
  v51 = *(int16x8_t *)((char *)a1 + v50);
  v1005 = vshlq_n_s16(vaddq_s16(v31, v30), 2uLL);
  v1006 = vshlq_n_s16(vaddq_s16(v34, v32), 2uLL);
  v1007 = vshlq_n_s16(vaddq_s16(v39, v37), 2uLL);
  v1008 = vshlq_n_s16(vaddq_s16(v51, v48), 2uLL);
  v1009 = vshlq_n_s16(v44, 2uLL);
  v1010 = vshlq_n_s16(v46, 2uLL);
  v1011 = vshlq_n_s16(v47, 2uLL);
  v1012 = vshlq_n_s16(v49, 2uLL);
  v1013 = vshlq_n_s16(vsubq_s16(v48, v51), 2uLL);
  v1014 = vshlq_n_s16(vsubq_s16(v37, v39), 2uLL);
  v1015 = vshlq_n_s16(vsubq_s16(v32, v34), 2uLL);
  v1016 = vshlq_n_s16(vsubq_s16(v30, v31), 2uLL);
  v1017 = vshlq_n_s16(vsubq_s16(v28, v29), 2uLL);
  v1018 = vshlq_n_s16(vsubq_s16(v25, v26), 2uLL);
  v1019 = vshlq_n_s16(v35, 2uLL);
  v1020 = vshlq_n_s16(v38, 2uLL);
  v1021 = vshlq_n_s16(vsubq_s16(v18, v19), 2uLL);
  v1022 = vshlq_n_s16(v40, 2uLL);
  v1023 = vshlq_n_s16(vsubq_s16(v12, v15), 2uLL);
  v1024 = vshlq_n_s16(vsubq_s16(v10, v11), 2uLL);
  v1025 = vshlq_n_s16(vsubq_s16(v7, v9), 2uLL);
  v1026 = vshlq_n_s16(vsubq_s16(v13, v6), 2uLL);
  dct_body_first_pass(&v995, &v1123);
  v52 = v4[1];
  v53 = *(int16x8_t *)((char *)v4 + v5 + 16);
  v54 = vaddq_s16(v53, v52);
  v55 = *(int16x8_t *)((char *)v4 + v986 + 16);
  v56 = *(int16x8_t *)((char *)v4 + v991 + 16);
  v57 = vaddq_s16(v56, v55);
  v58 = *(int16x8_t *)((char *)v4 + v988 + 16);
  v59 = *(int16x8_t *)((char *)v4 + v985 + 16);
  v60 = *(int16x8_t *)((char *)v4 + v984 + 16);
  v61 = vaddq_s16(v59, v58);
  v62 = *(int16x8_t *)((char *)v4 + v983 + 16);
  v63 = vaddq_s16(v62, v60);
  v64 = *(int16x8_t *)((char *)v4 + v987 + 16);
  v65 = *(int16x8_t *)((char *)v4 + v982 + 16);
  v66 = *(int16x8_t *)((char *)v4 + v981 + 16);
  v67 = *(int16x8_t *)((char *)v4 + v980 + 16);
  v68 = vaddq_s16(v65, v64);
  v69 = vaddq_s16(v67, v66);
  v70 = *(int16x8_t *)((char *)v4 + v978 + 16);
  v71 = *(int16x8_t *)((char *)v4 + v977 + 16);
  v72 = vaddq_s16(v71, v70);
  v73 = *(int16x8_t *)((char *)v4 + v990 + 16);
  v74 = v4[v989 + 1];
  v75 = vaddq_s16(v74, v73);
  v76 = vsubq_s16(v73, v74);
  v77 = vsubq_s16(v70, v71);
  v78 = vsubq_s16(v66, v67);
  v79 = vsubq_s16(v64, v65);
  v80 = vsubq_s16(v60, v62);
  v81 = vsubq_s16(v58, v59);
  v971 = vsubq_s16(v55, v56);
  v82 = v4[v22 + 1];
  v83 = vsubq_s16(v52, v53);
  v84 = *(int16x8_t *)((char *)v4 + v994 + 16);
  v85 = *(int16x8_t *)((char *)v4 + v993 + 16);
  v86 = *(int16x8_t *)((char *)v4 + v974 + 16);
  v87 = *(int16x8_t *)((char *)v4 + v979 + 16);
  v88 = *(int16x8_t *)((char *)v4 + v975 + 16);
  v89 = *(int16x8_t *)((char *)v4 + v33 + 16);
  v90 = *(int16x8_t *)((char *)v4 + v36 + 16);
  v91 = *(int16x8_t *)((char *)v4 + v27 + 16);
  v92 = *(int16x8_t *)((char *)v4 + v969 + 16);
  v93 = *(int16x8_t *)((char *)v4 + v50 + 16);
  v94 = *(int16x8_t *)((char *)v4 + v14 + 16);
  v95 = *(int16x8_t *)((char *)v4 + v973 + 16);
  v96 = *(int16x8_t *)((char *)v4 + v8 + 16);
  v97 = v4[v970 + 1];
  v98 = vaddq_s16(v97, v96);
  v99 = vsubq_s16(v96, v97);
  v100 = vaddq_s16(v95, v94);
  v101 = vsubq_s16(v94, v95);
  v102 = vaddq_s16(v93, v92);
  v103 = vsubq_s16(v92, v93);
  v104 = vaddq_s16(v91, v90);
  v105 = vsubq_s16(v90, v91);
  v106 = vaddq_s16(v89, v88);
  v107 = vsubq_s16(v88, v89);
  v108 = vaddq_s16(v87, v86);
  v109 = vsubq_s16(v86, v87);
  v110 = vaddq_s16(v85, v84);
  v111 = vsubq_s16(v84, v85);
  v112 = *(int16x8_t *)((char *)v4 + v976 + 16);
  v995 = vshlq_n_s16(v54, 2uLL);
  v996 = vshlq_n_s16(v57, 2uLL);
  v997 = vshlq_n_s16(v61, 2uLL);
  v998 = vshlq_n_s16(v63, 2uLL);
  v999 = vshlq_n_s16(v68, 2uLL);
  v1000 = vshlq_n_s16(v69, 2uLL);
  v1001 = vshlq_n_s16(v72, 2uLL);
  v1002 = vshlq_n_s16(v75, 2uLL);
  v1003 = vshlq_n_s16(vaddq_s16(v112, v82), 2uLL);
  v1004 = vshlq_n_s16(v110, 2uLL);
  v1005 = vshlq_n_s16(v108, 2uLL);
  v1006 = vshlq_n_s16(v106, 2uLL);
  v1007 = vshlq_n_s16(v104, 2uLL);
  v1008 = vshlq_n_s16(v102, 2uLL);
  v1009 = vshlq_n_s16(v100, 2uLL);
  v1010 = vshlq_n_s16(v98, 2uLL);
  v1011 = vshlq_n_s16(v99, 2uLL);
  v1012 = vshlq_n_s16(v101, 2uLL);
  v1013 = vshlq_n_s16(v103, 2uLL);
  v1014 = vshlq_n_s16(v105, 2uLL);
  v1015 = vshlq_n_s16(v107, 2uLL);
  v1016 = vshlq_n_s16(v109, 2uLL);
  v1017 = vshlq_n_s16(v111, 2uLL);
  v1018 = vshlq_n_s16(vsubq_s16(v82, v112), 2uLL);
  v1019 = vshlq_n_s16(v76, 2uLL);
  v1020 = vshlq_n_s16(v77, 2uLL);
  v1021 = vshlq_n_s16(v78, 2uLL);
  v1022 = vshlq_n_s16(v79, 2uLL);
  v1023 = vshlq_n_s16(v80, 2uLL);
  v1024 = vshlq_n_s16(v81, 2uLL);
  v1025 = vshlq_n_s16(v971, 2uLL);
  v1026 = vshlq_n_s16(v83, 2uLL);
  dct_body_first_pass(&v995, &v1091);
  v113 = v4[2];
  v114 = *(int16x8_t *)((char *)v4 + v5 + 32);
  v115 = vaddq_s16(v114, v113);
  v116 = *(int16x8_t *)((char *)v4 + v986 + 32);
  v117 = *(int16x8_t *)((char *)v4 + v991 + 32);
  v118 = vaddq_s16(v117, v116);
  v119 = *(int16x8_t *)((char *)v4 + v988 + 32);
  v120 = *(int16x8_t *)((char *)v4 + v985 + 32);
  v121 = *(int16x8_t *)((char *)v4 + v984 + 32);
  v122 = vaddq_s16(v120, v119);
  v123 = *(int16x8_t *)((char *)v4 + v983 + 32);
  v124 = vaddq_s16(v123, v121);
  v125 = *(int16x8_t *)((char *)v4 + v987 + 32);
  v126 = *(int16x8_t *)((char *)v4 + v982 + 32);
  v127 = *(int16x8_t *)((char *)v4 + v981 + 32);
  v128 = *(int16x8_t *)((char *)v4 + v980 + 32);
  v129 = vaddq_s16(v126, v125);
  v130 = vaddq_s16(v128, v127);
  v131 = *(int16x8_t *)((char *)v4 + v978 + 32);
  v132 = *(int16x8_t *)((char *)v4 + v977 + 32);
  v133 = vaddq_s16(v132, v131);
  v134 = *(int16x8_t *)((char *)v4 + v990 + 32);
  v135 = v4[v989 + 2];
  v136 = vaddq_s16(v135, v134);
  v137 = vsubq_s16(v134, v135);
  v138 = vsubq_s16(v131, v132);
  v139 = vsubq_s16(v127, v128);
  v140 = vsubq_s16(v125, v126);
  v141 = vsubq_s16(v121, v123);
  v142 = vsubq_s16(v119, v120);
  v972 = vsubq_s16(v116, v117);
  v143 = v4[v22 + 2];
  v144 = vsubq_s16(v113, v114);
  v145 = *(int16x8_t *)((char *)v4 + v994 + 32);
  v146 = *(int16x8_t *)((char *)v4 + v993 + 32);
  v147 = *(int16x8_t *)((char *)v4 + v974 + 32);
  v148 = *(int16x8_t *)((char *)v4 + v979 + 32);
  v149 = *(int16x8_t *)((char *)v4 + v975 + 32);
  v150 = *(int16x8_t *)((char *)v4 + v33 + 32);
  v151 = *(int16x8_t *)((char *)v4 + v36 + 32);
  v152 = *(int16x8_t *)((char *)v4 + v27 + 32);
  v153 = *(int16x8_t *)((char *)v4 + v969 + 32);
  v154 = *(int16x8_t *)((char *)v4 + v50 + 32);
  v155 = *(int16x8_t *)((char *)v4 + v14 + 32);
  v156 = *(int16x8_t *)((char *)v4 + v973 + 32);
  v157 = *(int16x8_t *)((char *)v4 + v8 + 32);
  v158 = v4[v970 + 2];
  v159 = vaddq_s16(v158, v157);
  v160 = vsubq_s16(v157, v158);
  v161 = vaddq_s16(v156, v155);
  v162 = vsubq_s16(v155, v156);
  v163 = vaddq_s16(v154, v153);
  v164 = vsubq_s16(v153, v154);
  v165 = vaddq_s16(v152, v151);
  v166 = vsubq_s16(v151, v152);
  v167 = vaddq_s16(v150, v149);
  v168 = vsubq_s16(v149, v150);
  v169 = vaddq_s16(v148, v147);
  v170 = vsubq_s16(v147, v148);
  v171 = vaddq_s16(v146, v145);
  v172 = vsubq_s16(v145, v146);
  v173 = *(int16x8_t *)((char *)v4 + v976 + 32);
  v995 = vshlq_n_s16(v115, 2uLL);
  v996 = vshlq_n_s16(v118, 2uLL);
  v997 = vshlq_n_s16(v122, 2uLL);
  v998 = vshlq_n_s16(v124, 2uLL);
  v999 = vshlq_n_s16(v129, 2uLL);
  v1000 = vshlq_n_s16(v130, 2uLL);
  v1001 = vshlq_n_s16(v133, 2uLL);
  v1002 = vshlq_n_s16(v136, 2uLL);
  v1003 = vshlq_n_s16(vaddq_s16(v173, v143), 2uLL);
  v1004 = vshlq_n_s16(v171, 2uLL);
  v1005 = vshlq_n_s16(v169, 2uLL);
  v1006 = vshlq_n_s16(v167, 2uLL);
  v1007 = vshlq_n_s16(v165, 2uLL);
  v1008 = vshlq_n_s16(v163, 2uLL);
  v1009 = vshlq_n_s16(v161, 2uLL);
  v1010 = vshlq_n_s16(v159, 2uLL);
  v1011 = vshlq_n_s16(v160, 2uLL);
  v1012 = vshlq_n_s16(v162, 2uLL);
  v1013 = vshlq_n_s16(v164, 2uLL);
  v1014 = vshlq_n_s16(v166, 2uLL);
  v1015 = vshlq_n_s16(v168, 2uLL);
  v1016 = vshlq_n_s16(v170, 2uLL);
  v1017 = vshlq_n_s16(v172, 2uLL);
  v1018 = vshlq_n_s16(vsubq_s16(v143, v173), 2uLL);
  v1019 = vshlq_n_s16(v137, 2uLL);
  v1020 = vshlq_n_s16(v138, 2uLL);
  v1021 = vshlq_n_s16(v139, 2uLL);
  v1022 = vshlq_n_s16(v140, 2uLL);
  v1023 = vshlq_n_s16(v141, 2uLL);
  v1024 = vshlq_n_s16(v142, 2uLL);
  v1025 = vshlq_n_s16(v972, 2uLL);
  v1026 = vshlq_n_s16(v144, 2uLL);
  dct_body_first_pass(&v995, &v1059);
  v174 = v4[3];
  v4 += 3;
  v175 = *(int16x8_t *)((char *)v4 + v5);
  v176 = vaddq_s16(v175, v174);
  v177 = *(int16x8_t *)((char *)v4 + v986);
  v178 = *(int16x8_t *)((char *)v4 + v991);
  v179 = vaddq_s16(v178, v177);
  v180 = *(int16x8_t *)((char *)v4 + v988);
  v181 = *(int16x8_t *)((char *)v4 + v985);
  v182 = *(int16x8_t *)((char *)v4 + v984);
  v183 = vaddq_s16(v181, v180);
  v184 = *(int16x8_t *)((char *)v4 + v983);
  v185 = vaddq_s16(v184, v182);
  v186 = *(int16x8_t *)((char *)v4 + v987);
  v187 = *(int16x8_t *)((char *)v4 + v982);
  v188 = *(int16x8_t *)((char *)v4 + v981);
  v189 = *(int16x8_t *)((char *)v4 + v980);
  v190 = vaddq_s16(v187, v186);
  v191 = vaddq_s16(v189, v188);
  v192 = *(int16x8_t *)((char *)v4 + v978);
  v193 = *(int16x8_t *)((char *)v4 + v977);
  v194 = vaddq_s16(v193, v192);
  v195 = *(int16x8_t *)((char *)v4 + v990);
  v196 = v4[v989];
  v197 = vaddq_s16(v196, v195);
  v198 = vsubq_s16(v195, v196);
  v199 = vsubq_s16(v192, v193);
  v200 = vsubq_s16(v188, v189);
  v201 = vsubq_s16(v186, v187);
  v202 = vsubq_s16(v182, v184);
  v203 = vsubq_s16(v180, v181);
  v204 = vsubq_s16(v177, v178);
  v992 = vsubq_s16(v174, v175);
  v205 = v4[v22];
  v206 = *(int16x8_t *)((char *)v4 + v994);
  v207 = *(int16x8_t *)((char *)v4 + v993);
  v208 = *(int16x8_t *)((char *)v4 + v974);
  v209 = *(int16x8_t *)((char *)v4 + v979);
  v210 = *(int16x8_t *)((char *)v4 + v975);
  v211 = *(int16x8_t *)((char *)v4 + v33);
  v212 = *(int16x8_t *)((char *)v4 + v36);
  v213 = *(int16x8_t *)((char *)v4 + v27);
  v214 = *(int16x8_t *)((char *)v4 + v969);
  v215 = *(int16x8_t *)((char *)v4 + v50);
  v216 = *(int16x8_t *)((char *)v4 + v14);
  v217 = *(int16x8_t *)((char *)v4 + v973);
  v218 = *(int16x8_t *)((char *)v4 + v8);
  v219 = v4[v970];
  v220 = vaddq_s16(v219, v218);
  v221 = vsubq_s16(v218, v219);
  v222 = vaddq_s16(v217, v216);
  v223 = vsubq_s16(v216, v217);
  v224 = vaddq_s16(v215, v214);
  v225 = vsubq_s16(v214, v215);
  v226 = vaddq_s16(v213, v212);
  v227 = vsubq_s16(v212, v213);
  v228 = vaddq_s16(v211, v210);
  v229 = vsubq_s16(v210, v211);
  v230 = vaddq_s16(v209, v208);
  v231 = vsubq_s16(v208, v209);
  v232 = vaddq_s16(v207, v206);
  v233 = vsubq_s16(v206, v207);
  v234 = *(int16x8_t *)((char *)v4 + v976);
  v995 = vshlq_n_s16(v176, 2uLL);
  v996 = vshlq_n_s16(v179, 2uLL);
  v997 = vshlq_n_s16(v183, 2uLL);
  v998 = vshlq_n_s16(v185, 2uLL);
  v999 = vshlq_n_s16(v190, 2uLL);
  v1000 = vshlq_n_s16(v191, 2uLL);
  v1001 = vshlq_n_s16(v194, 2uLL);
  v1002 = vshlq_n_s16(v197, 2uLL);
  v1003 = vshlq_n_s16(vaddq_s16(v234, v205), 2uLL);
  v1004 = vshlq_n_s16(v232, 2uLL);
  v1005 = vshlq_n_s16(v230, 2uLL);
  v1006 = vshlq_n_s16(v228, 2uLL);
  v1007 = vshlq_n_s16(v226, 2uLL);
  v1008 = vshlq_n_s16(v224, 2uLL);
  v1009 = vshlq_n_s16(v222, 2uLL);
  v1010 = vshlq_n_s16(v220, 2uLL);
  v1011 = vshlq_n_s16(v221, 2uLL);
  v1012 = vshlq_n_s16(v223, 2uLL);
  v1013 = vshlq_n_s16(v225, 2uLL);
  v1014 = vshlq_n_s16(v227, 2uLL);
  v1015 = vshlq_n_s16(v229, 2uLL);
  v1016 = vshlq_n_s16(v231, 2uLL);
  v1017 = vshlq_n_s16(v233, 2uLL);
  v1018 = vshlq_n_s16(vsubq_s16(v205, v234), 2uLL);
  v1019 = vshlq_n_s16(v198, 2uLL);
  v1020 = vshlq_n_s16(v199, 2uLL);
  v1021 = vshlq_n_s16(v200, 2uLL);
  v1022 = vshlq_n_s16(v201, 2uLL);
  v1023 = vshlq_n_s16(v202, 2uLL);
  v1024 = vshlq_n_s16(v203, 2uLL);
  v1025 = vshlq_n_s16(v204, 2uLL);
  v1026 = vshlq_n_s16(v992, 2uLL);
  dct_body_first_pass(&v995, &v1027);
  v235 = (int32x4_t)vtrn1q_s16(v1123, v1124);
  v236 = (int32x4_t)vtrn2q_s16(v1123, v1124);
  v237 = (int32x4_t)vtrn1q_s16(v1125, v1126);
  v238 = (int32x4_t)vtrn2q_s16(v1125, v1126);
  v239 = (int32x4_t)vtrn1q_s16(v1127, v1128);
  v240 = (int32x4_t)vtrn2q_s16(v1127, v1128);
  v241 = (int32x4_t)vtrn1q_s16(v1129, v1130);
  v242 = (int32x4_t)vtrn2q_s16(v1129, v1130);
  v243 = (int64x2_t)vtrn1q_s32(v235, v237);
  v244 = (int64x2_t)vtrn2q_s32(v235, v237);
  v245 = (int64x2_t)vtrn1q_s32(v236, v238);
  v246 = (int64x2_t)vtrn1q_s32(v239, v241);
  v247 = (int64x2_t)vtrn1q_s32(v240, v242);
  v1155 = vzip1q_s64(v243, v246);
  v1156 = vzip1q_s64(v245, v247);
  v248 = (int64x2_t)vtrn2q_s32(v236, v238);
  v249 = (int64x2_t)vtrn2q_s32(v239, v241);
  v250 = (int64x2_t)vtrn2q_s32(v240, v242);
  v1157 = vzip1q_s64(v244, v249);
  v1158 = vzip1q_s64(v248, v250);
  v251 = vzip2q_s64(v243, v246);
  v252 = vzip2q_s64(v245, v247);
  v253 = vzip2q_s64(v244, v249);
  v254 = vzip2q_s64(v248, v250);
  v255 = (int32x4_t)vtrn1q_s16(v1091, v1092);
  v256 = (int32x4_t)vtrn2q_s16(v1091, v1092);
  v257 = (int32x4_t)vtrn1q_s16(v1093, v1094);
  v258 = (int32x4_t)vtrn2q_s16(v1093, v1094);
  v259 = (int32x4_t)vtrn1q_s16(v1095, v1096);
  v260 = (int32x4_t)vtrn2q_s16(v1095, v1096);
  v261 = (int32x4_t)vtrn1q_s16(v1097, v1098);
  v262 = (int32x4_t)vtrn2q_s16(v1097, v1098);
  v1159 = v251;
  v1160 = v252;
  v263 = (int64x2_t)vtrn1q_s32(v255, v257);
  v264 = (int64x2_t)vtrn2q_s32(v255, v257);
  v265 = (int64x2_t)vtrn1q_s32(v256, v258);
  v1161 = v253;
  v1162 = v254;
  v266 = (int64x2_t)vtrn1q_s32(v259, v261);
  v267 = (int64x2_t)vtrn1q_s32(v260, v262);
  v1163 = vzip1q_s64(v263, v266);
  v1164 = vzip1q_s64(v265, v267);
  v268 = (int64x2_t)vtrn2q_s32(v256, v258);
  v269 = (int64x2_t)vtrn2q_s32(v259, v261);
  v270 = (int64x2_t)vtrn2q_s32(v260, v262);
  v1165 = vzip1q_s64(v264, v269);
  v1166 = vzip1q_s64(v268, v270);
  v271 = vzip2q_s64(v263, v266);
  v272 = vzip2q_s64(v265, v267);
  v273 = vzip2q_s64(v264, v269);
  v274 = vzip2q_s64(v268, v270);
  v275 = (int32x4_t)vtrn1q_s16(v1059, v1060);
  v276 = (int32x4_t)vtrn2q_s16(v1059, v1060);
  v277 = (int32x4_t)vtrn1q_s16(v1061, v1062);
  v278 = (int32x4_t)vtrn2q_s16(v1061, v1062);
  v279 = (int32x4_t)vtrn1q_s16(v1063, v1064);
  v280 = (int32x4_t)vtrn2q_s16(v1063, v1064);
  v281 = (int32x4_t)vtrn1q_s16(v1065, v1066);
  v282 = (int32x4_t)vtrn2q_s16(v1065, v1066);
  v1167 = v271;
  v1168 = v272;
  v283 = (int64x2_t)vtrn1q_s32(v275, v277);
  v284 = (int64x2_t)vtrn2q_s32(v275, v277);
  v285 = (int64x2_t)vtrn1q_s32(v276, v278);
  v1169 = v273;
  v1170 = v274;
  v286 = (int64x2_t)vtrn1q_s32(v279, v281);
  v287 = (int64x2_t)vtrn1q_s32(v280, v282);
  v1171 = vzip1q_s64(v283, v286);
  v1172 = vzip1q_s64(v285, v287);
  v288 = (int64x2_t)vtrn2q_s32(v276, v278);
  v289 = (int64x2_t)vtrn2q_s32(v279, v281);
  v290 = (int64x2_t)vtrn2q_s32(v280, v282);
  v1173 = vzip1q_s64(v284, v289);
  v1174 = vzip1q_s64(v288, v290);
  v291 = vzip2q_s64(v283, v286);
  v292 = vzip2q_s64(v285, v287);
  v293 = vzip2q_s64(v284, v289);
  v294 = vzip2q_s64(v288, v290);
  v295 = (int32x4_t)vtrn1q_s16(v1027, v1028);
  v296 = (int32x4_t)vtrn2q_s16(v1027, v1028);
  v297 = (int32x4_t)vtrn1q_s16(v1029, v1030);
  v298 = (int32x4_t)vtrn2q_s16(v1029, v1030);
  v299 = (int32x4_t)vtrn1q_s16(v1031, v1032);
  v300 = (int32x4_t)vtrn2q_s16(v1031, v1032);
  v301 = (int32x4_t)vtrn1q_s16(v1033, v1034);
  v302 = (int32x4_t)vtrn2q_s16(v1033, v1034);
  v1175 = v291;
  v1176 = v292;
  v303 = (int64x2_t)vtrn1q_s32(v295, v297);
  v304 = (int64x2_t)vtrn2q_s32(v295, v297);
  v305 = (int64x2_t)vtrn1q_s32(v296, v298);
  v1177 = v293;
  v1178 = v294;
  v306 = (int64x2_t)vtrn1q_s32(v299, v301);
  v307 = (int64x2_t)vtrn1q_s32(v300, v302);
  v1179 = vzip1q_s64(v303, v306);
  v1180 = vzip1q_s64(v305, v307);
  v308 = (int64x2_t)vtrn2q_s32(v296, v298);
  v309 = (int64x2_t)vtrn2q_s32(v299, v301);
  v310 = (int64x2_t)vtrn2q_s32(v300, v302);
  v1181 = vzip1q_s64(v304, v309);
  v1182 = vzip1q_s64(v308, v310);
  v1183 = vzip2q_s64(v303, v306);
  v1184 = vzip2q_s64(v305, v307);
  v1185 = vzip2q_s64(v304, v309);
  v1186 = vzip2q_s64(v308, v310);
  dct_body_second_pass((int16x8_t *)&v1155, &v995);
  v311 = (int32x4_t)vtrn1q_s16(v995, v996);
  v312 = (int32x4_t)vtrn2q_s16(v995, v996);
  v313 = (int32x4_t)vtrn1q_s16(v997, v998);
  v314 = (int32x4_t)vtrn2q_s16(v997, v998);
  v315 = (int32x4_t)vtrn1q_s16(v999, v1000);
  v316 = (int32x4_t)vtrn2q_s16(v999, v1000);
  v317 = (int32x4_t)vtrn1q_s16(v1001, v1002);
  v318 = (int32x4_t)vtrn2q_s16(v1001, v1002);
  v319 = (int64x2_t)vtrn1q_s32(v311, v313);
  v320 = (int64x2_t)vtrn2q_s32(v311, v313);
  v321 = (int64x2_t)vtrn1q_s32(v312, v314);
  v322 = (int64x2_t)vtrn1q_s32(v315, v317);
  v323 = (int64x2_t)vtrn1q_s32(v316, v318);
  v995 = (int16x8_t)vzip1q_s64(v319, v322);
  v996 = (int16x8_t)vzip1q_s64(v321, v323);
  v324 = (int64x2_t)vtrn2q_s32(v312, v314);
  v325 = (int64x2_t)vtrn2q_s32(v315, v317);
  v326 = (int64x2_t)vtrn2q_s32(v316, v318);
  v997 = (int16x8_t)vzip1q_s64(v320, v325);
  v998 = (int16x8_t)vzip1q_s64(v324, v326);
  v999 = (int16x8_t)vzip2q_s64(v319, v322);
  v1000 = (int16x8_t)vzip2q_s64(v321, v323);
  v1001 = (int16x8_t)vzip2q_s64(v320, v325);
  v1002 = (int16x8_t)vzip2q_s64(v324, v326);
  v327 = (int32x4_t)vtrn1q_s16(v1003, v1004);
  v328 = (int32x4_t)vtrn2q_s16(v1003, v1004);
  v329 = (int32x4_t)vtrn1q_s16(v1005, v1006);
  v330 = (int32x4_t)vtrn2q_s16(v1005, v1006);
  v331 = (int32x4_t)vtrn1q_s16(v1007, v1008);
  v332 = (int32x4_t)vtrn2q_s16(v1007, v1008);
  v333 = (int32x4_t)vtrn1q_s16(v1009, v1010);
  v334 = (int32x4_t)vtrn2q_s16(v1009, v1010);
  v335 = (int64x2_t)vtrn1q_s32(v327, v329);
  v336 = (int64x2_t)vtrn2q_s32(v327, v329);
  v337 = (int64x2_t)vtrn1q_s32(v328, v330);
  v338 = (int64x2_t)vtrn1q_s32(v331, v333);
  v339 = (int64x2_t)vtrn1q_s32(v332, v334);
  v1003 = (int16x8_t)vzip1q_s64(v335, v338);
  v1004 = (int16x8_t)vzip1q_s64(v337, v339);
  v340 = (int64x2_t)vtrn2q_s32(v328, v330);
  v341 = (int64x2_t)vtrn2q_s32(v331, v333);
  v342 = (int64x2_t)vtrn2q_s32(v332, v334);
  v1005 = (int16x8_t)vzip1q_s64(v336, v341);
  v1006 = (int16x8_t)vzip1q_s64(v340, v342);
  v1007 = (int16x8_t)vzip2q_s64(v335, v338);
  v1008 = (int16x8_t)vzip2q_s64(v337, v339);
  v1009 = (int16x8_t)vzip2q_s64(v336, v341);
  v1010 = (int16x8_t)vzip2q_s64(v340, v342);
  v343 = (int32x4_t)vtrn1q_s16(v1011, v1012);
  v344 = (int32x4_t)vtrn2q_s16(v1011, v1012);
  v345 = (int32x4_t)vtrn1q_s16(v1013, v1014);
  v346 = (int32x4_t)vtrn2q_s16(v1013, v1014);
  v347 = (int32x4_t)vtrn1q_s16(v1015, v1016);
  v348 = (int32x4_t)vtrn2q_s16(v1015, v1016);
  v349 = (int32x4_t)vtrn1q_s16(v1017, v1018);
  v350 = (int32x4_t)vtrn2q_s16(v1017, v1018);
  v351 = (int64x2_t)vtrn1q_s32(v343, v345);
  v352 = (int64x2_t)vtrn2q_s32(v343, v345);
  v353 = (int64x2_t)vtrn1q_s32(v344, v346);
  v354 = (int64x2_t)vtrn1q_s32(v347, v349);
  v355 = (int64x2_t)vtrn1q_s32(v348, v350);
  v356 = (int8x16_t)vzip1q_s64(v351, v354);
  v1011 = (int16x8_t)v356;
  v1012 = (int16x8_t)vzip1q_s64(v353, v355);
  v357 = (int64x2_t)vtrn2q_s32(v344, v346);
  v358 = (int64x2_t)vtrn2q_s32(v347, v349);
  v359 = (int64x2_t)vtrn2q_s32(v348, v350);
  v1013 = (int16x8_t)vzip1q_s64(v352, v358);
  v1014 = (int16x8_t)vzip1q_s64(v357, v359);
  v1015 = (int16x8_t)vzip2q_s64(v351, v354);
  v1016 = (int16x8_t)vzip2q_s64(v353, v355);
  v1017 = (int16x8_t)vzip2q_s64(v352, v358);
  v1018 = (int16x8_t)vzip2q_s64(v357, v359);
  v360 = v1018;
  v361 = (int32x4_t)vtrn1q_s16(v1019, v1020);
  v362 = (int32x4_t)vtrn2q_s16(v1019, v1020);
  v363 = (int32x4_t)vtrn1q_s16(v1021, v1022);
  v364 = (int32x4_t)vtrn2q_s16(v1021, v1022);
  v365 = (int32x4_t)vtrn1q_s16(v1023, v1024);
  v366 = (int32x4_t)vtrn2q_s16(v1023, v1024);
  v367 = (int32x4_t)vtrn1q_s16(v1025, v1026);
  v368 = (int32x4_t)vtrn2q_s16(v1025, v1026);
  v369 = (int64x2_t)vtrn1q_s32(v361, v363);
  v370 = (int64x2_t)vtrn2q_s32(v361, v363);
  v371 = (int64x2_t)vtrn1q_s32(v362, v364);
  v372 = (int64x2_t)vtrn2q_s32(v362, v364);
  v373 = (int64x2_t)vtrn1q_s32(v365, v367);
  v374 = (int64x2_t)vtrn1q_s32(v366, v368);
  v375 = (int8x16_t)vzip1q_s64(v369, v373);
  v376 = (int8x16_t)vzip1q_s64(v371, v374);
  v1019 = (int16x8_t)v375;
  v1020 = (int16x8_t)v376;
  v377 = (int64x2_t)vtrn2q_s32(v365, v367);
  v378 = (int64x2_t)vtrn2q_s32(v366, v368);
  v1021 = (int16x8_t)vzip1q_s64(v370, v377);
  v1022 = (int16x8_t)vzip1q_s64(v372, v378);
  v1023 = (int16x8_t)vzip2q_s64(v369, v373);
  v1024 = (int16x8_t)vzip2q_s64(v371, v374);
  v1025 = (int16x8_t)vzip2q_s64(v370, v377);
  v1026 = (int16x8_t)vzip2q_s64(v372, v378);
  v379 = v996;
  v380 = vmovl_high_s16(v995);
  *a2 = vmovl_s16(*(int16x4_t *)v995.i8);
  a2[1] = v380;
  v381 = v1004;
  v382 = vmovl_high_s16(v1003);
  a2[2] = vmovl_s16(*(int16x4_t *)v1003.i8);
  a2[3] = v382;
  a2[4] = vmovl_s16(*(int16x4_t *)v356.i8);
  a2[5] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v356, v356, 8uLL));
  a2[6] = vmovl_s16(*(int16x4_t *)v375.i8);
  a2[7] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v375, v375, 8uLL));
  a2[8] = vmovl_s16(*(int16x4_t *)v379.i8);
  a2[9] = vmovl_high_s16(v379);
  a2[10] = vmovl_s16(*(int16x4_t *)v381.i8);
  a2[11] = vmovl_high_s16(v381);
  v383 = v1013;
  v384 = vmovl_high_s16(v1012);
  a2[12] = vmovl_s16(*(int16x4_t *)v1012.i8);
  a2[13] = v384;
  a2[14] = vmovl_s16(*(int16x4_t *)v376.i8);
  a2[15] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v376, v376, 8uLL));
  v385 = v998;
  v386 = vmovl_high_s16(v997);
  a2[16] = vmovl_s16(*(int16x4_t *)v997.i8);
  a2[17] = v386;
  v387 = v1006;
  v388 = vmovl_high_s16(v1005);
  a2[18] = vmovl_s16(*(int16x4_t *)v1005.i8);
  a2[19] = v388;
  a2[20] = vmovl_s16(*(int16x4_t *)v383.i8);
  a2[21] = vmovl_high_s16(v383);
  v389 = v1022;
  v390 = vmovl_high_s16(v1021);
  a2[22] = vmovl_s16(*(int16x4_t *)v1021.i8);
  a2[23] = v390;
  a2[24] = vmovl_s16(*(int16x4_t *)v385.i8);
  a2[25] = vmovl_high_s16(v385);
  a2[26] = vmovl_s16(*(int16x4_t *)v387.i8);
  a2[27] = vmovl_high_s16(v387);
  v391 = v1015;
  v392 = vmovl_high_s16(v1014);
  a2[28] = vmovl_s16(*(int16x4_t *)v1014.i8);
  a2[29] = v392;
  a2[30] = vmovl_s16(*(int16x4_t *)v389.i8);
  a2[31] = vmovl_high_s16(v389);
  v393 = v1000;
  v394 = vmovl_high_s16(v999);
  a2[32] = vmovl_s16(*(int16x4_t *)v999.i8);
  a2[33] = v394;
  v395 = v1008;
  v396 = vmovl_high_s16(v1007);
  a2[34] = vmovl_s16(*(int16x4_t *)v1007.i8);
  a2[35] = v396;
  a2[36] = vmovl_s16(*(int16x4_t *)v391.i8);
  a2[37] = vmovl_high_s16(v391);
  v397 = v1024;
  v398 = vmovl_high_s16(v1023);
  a2[38] = vmovl_s16(*(int16x4_t *)v1023.i8);
  a2[39] = v398;
  a2[40] = vmovl_s16(*(int16x4_t *)v393.i8);
  a2[41] = vmovl_high_s16(v393);
  a2[42] = vmovl_s16(*(int16x4_t *)v395.i8);
  a2[43] = vmovl_high_s16(v395);
  v399 = v1017;
  v400 = vmovl_high_s16(v1016);
  a2[44] = vmovl_s16(*(int16x4_t *)v1016.i8);
  a2[45] = v400;
  a2[46] = vmovl_s16(*(int16x4_t *)v397.i8);
  a2[47] = vmovl_high_s16(v397);
  v401 = v1002;
  v402 = vmovl_high_s16(v1001);
  a2[48] = vmovl_s16(*(int16x4_t *)v1001.i8);
  a2[49] = v402;
  v403 = v1010;
  v404 = vmovl_high_s16(v1009);
  a2[50] = vmovl_s16(*(int16x4_t *)v1009.i8);
  a2[51] = v404;
  a2[52] = vmovl_s16(*(int16x4_t *)v399.i8);
  a2[53] = vmovl_high_s16(v399);
  v405 = v1026;
  v406 = vmovl_high_s16(v1025);
  a2[54] = vmovl_s16(*(int16x4_t *)v1025.i8);
  a2[55] = v406;
  a2[56] = vmovl_s16(*(int16x4_t *)v401.i8);
  a2[57] = vmovl_high_s16(v401);
  a2[58] = vmovl_s16(*(int16x4_t *)v403.i8);
  a2[59] = vmovl_high_s16(v403);
  v407 = vmovl_s16(*(int16x4_t *)v360.i8);
  v408 = vmovl_high_s16(v360);
  v409 = (int32x4_t)vtrn1q_s16(v1131, v1132);
  v410 = (int32x4_t)vtrn2q_s16(v1131, v1132);
  v411 = (int32x4_t)vtrn1q_s16(v1133, v1134);
  v412 = (int32x4_t)vtrn2q_s16(v1133, v1134);
  v413 = (int32x4_t)vtrn1q_s16(v1135, v1136);
  v414 = (int32x4_t)vtrn2q_s16(v1135, v1136);
  v415 = (int32x4_t)vtrn1q_s16(v1137, v1138);
  v416 = (int32x4_t)vtrn2q_s16(v1137, v1138);
  a2[60] = v407;
  a2[61] = v408;
  v417 = (int64x2_t)vtrn1q_s32(v409, v411);
  v418 = (int64x2_t)vtrn2q_s32(v409, v411);
  v419 = (int64x2_t)vtrn1q_s32(v410, v412);
  a2[62] = vmovl_s16(*(int16x4_t *)v405.i8);
  a2[63] = vmovl_high_s16(v405);
  v420 = (int64x2_t)vtrn2q_s32(v410, v412);
  v421 = (int64x2_t)vtrn1q_s32(v413, v415);
  v422 = (int64x2_t)vtrn2q_s32(v413, v415);
  v423 = (int64x2_t)vtrn1q_s32(v414, v416);
  v424 = (int64x2_t)vtrn2q_s32(v414, v416);
  v425 = vzip1q_s64(v417, v421);
  v426 = vzip2q_s64(v417, v421);
  v427 = vzip1q_s64(v419, v423);
  v428 = vzip2q_s64(v419, v423);
  v429 = vzip1q_s64(v418, v422);
  v430 = vzip2q_s64(v418, v422);
  v431 = vzip1q_s64(v420, v424);
  v432 = vzip2q_s64(v420, v424);
  v1155 = v425;
  v1156 = v427;
  v1157 = v429;
  v1158 = v431;
  v433 = (int32x4_t)vtrn1q_s16(v1099, v1100);
  v434 = (int32x4_t)vtrn2q_s16(v1099, v1100);
  v435 = (int32x4_t)vtrn1q_s16(v1101, v1102);
  v436 = (int32x4_t)vtrn2q_s16(v1101, v1102);
  v437 = (int32x4_t)vtrn1q_s16(v1103, v1104);
  v438 = (int32x4_t)vtrn2q_s16(v1103, v1104);
  v439 = (int32x4_t)vtrn1q_s16(v1105, v1106);
  v440 = (int32x4_t)vtrn2q_s16(v1105, v1106);
  v1159 = v426;
  v1160 = v428;
  v441 = (int64x2_t)vtrn1q_s32(v433, v435);
  v442 = (int64x2_t)vtrn2q_s32(v433, v435);
  v443 = (int64x2_t)vtrn1q_s32(v434, v436);
  v1161 = v430;
  v1162 = v432;
  v444 = (int64x2_t)vtrn2q_s32(v434, v436);
  v445 = (int64x2_t)vtrn1q_s32(v437, v439);
  v446 = (int64x2_t)vtrn2q_s32(v437, v439);
  v447 = (int64x2_t)vtrn1q_s32(v438, v440);
  v448 = (int64x2_t)vtrn2q_s32(v438, v440);
  v449 = vzip1q_s64(v441, v445);
  v450 = vzip2q_s64(v441, v445);
  v451 = vzip1q_s64(v443, v447);
  v452 = vzip2q_s64(v443, v447);
  v453 = vzip1q_s64(v442, v446);
  v454 = vzip2q_s64(v442, v446);
  v455 = vzip1q_s64(v444, v448);
  v456 = vzip2q_s64(v444, v448);
  v1163 = v449;
  v1164 = v451;
  v1165 = v453;
  v1166 = v455;
  v457 = (int32x4_t)vtrn1q_s16(v1067, v1068);
  v458 = (int32x4_t)vtrn2q_s16(v1067, v1068);
  v459 = (int32x4_t)vtrn1q_s16(v1069, v1070);
  v460 = (int32x4_t)vtrn2q_s16(v1069, v1070);
  v461 = (int32x4_t)vtrn1q_s16(v1071, v1072);
  v462 = (int32x4_t)vtrn2q_s16(v1071, v1072);
  v463 = (int32x4_t)vtrn1q_s16(v1073, v1074);
  v464 = (int32x4_t)vtrn2q_s16(v1073, v1074);
  v1167 = v450;
  v1168 = v452;
  v465 = (int64x2_t)vtrn1q_s32(v457, v459);
  v466 = (int64x2_t)vtrn2q_s32(v457, v459);
  v467 = (int64x2_t)vtrn1q_s32(v458, v460);
  v1169 = v454;
  v1170 = v456;
  v468 = (int64x2_t)vtrn2q_s32(v458, v460);
  v469 = (int64x2_t)vtrn1q_s32(v461, v463);
  v470 = (int64x2_t)vtrn2q_s32(v461, v463);
  v471 = (int64x2_t)vtrn1q_s32(v462, v464);
  v472 = (int64x2_t)vtrn2q_s32(v462, v464);
  v473 = vzip1q_s64(v465, v469);
  v474 = vzip2q_s64(v465, v469);
  v475 = vzip1q_s64(v467, v471);
  v476 = vzip2q_s64(v467, v471);
  v477 = vzip1q_s64(v466, v470);
  v478 = vzip2q_s64(v466, v470);
  v479 = vzip1q_s64(v468, v472);
  v480 = vzip2q_s64(v468, v472);
  v1171 = v473;
  v1172 = v475;
  v1173 = v477;
  v1174 = v479;
  v481 = (int32x4_t)vtrn1q_s16(v1035, v1036);
  v482 = (int32x4_t)vtrn2q_s16(v1035, v1036);
  v483 = (int32x4_t)vtrn1q_s16(v1037, v1038);
  v484 = (int32x4_t)vtrn2q_s16(v1037, v1038);
  v485 = (int32x4_t)vtrn1q_s16(v1039, v1040);
  v486 = (int32x4_t)vtrn2q_s16(v1039, v1040);
  v487 = (int32x4_t)vtrn1q_s16(v1041, v1042);
  v488 = (int32x4_t)vtrn2q_s16(v1041, v1042);
  v1175 = v474;
  v1176 = v476;
  v489 = (int64x2_t)vtrn1q_s32(v481, v483);
  v490 = (int64x2_t)vtrn2q_s32(v481, v483);
  v491 = (int64x2_t)vtrn1q_s32(v482, v484);
  v1177 = v478;
  v1178 = v480;
  v492 = (int64x2_t)vtrn2q_s32(v482, v484);
  v493 = (int64x2_t)vtrn1q_s32(v485, v487);
  v494 = (int64x2_t)vtrn2q_s32(v485, v487);
  v495 = (int64x2_t)vtrn1q_s32(v486, v488);
  v496 = (int64x2_t)vtrn2q_s32(v486, v488);
  v1179 = vzip1q_s64(v489, v493);
  v1180 = vzip1q_s64(v491, v495);
  v1181 = vzip1q_s64(v490, v494);
  v1182 = vzip1q_s64(v492, v496);
  v1183 = vzip2q_s64(v489, v493);
  v1184 = vzip2q_s64(v491, v495);
  v1185 = vzip2q_s64(v490, v494);
  v1186 = vzip2q_s64(v492, v496);
  dct_body_second_pass((int16x8_t *)&v1155, &v995);
  v497 = (int32x4_t)vtrn1q_s16(v995, v996);
  v498 = (int32x4_t)vtrn2q_s16(v995, v996);
  v499 = (int32x4_t)vtrn1q_s16(v997, v998);
  v500 = (int32x4_t)vtrn2q_s16(v997, v998);
  v501 = (int32x4_t)vtrn1q_s16(v999, v1000);
  v502 = (int32x4_t)vtrn2q_s16(v999, v1000);
  v503 = (int32x4_t)vtrn1q_s16(v1001, v1002);
  v504 = (int32x4_t)vtrn2q_s16(v1001, v1002);
  v505 = (int64x2_t)vtrn1q_s32(v497, v499);
  v506 = (int64x2_t)vtrn2q_s32(v497, v499);
  v507 = (int64x2_t)vtrn1q_s32(v498, v500);
  v508 = (int64x2_t)vtrn1q_s32(v501, v503);
  v509 = (int64x2_t)vtrn1q_s32(v502, v504);
  v995 = (int16x8_t)vzip1q_s64(v505, v508);
  v996 = (int16x8_t)vzip1q_s64(v507, v509);
  v510 = (int64x2_t)vtrn2q_s32(v498, v500);
  v511 = (int64x2_t)vtrn2q_s32(v501, v503);
  v512 = (int64x2_t)vtrn2q_s32(v502, v504);
  v997 = (int16x8_t)vzip1q_s64(v506, v511);
  v998 = (int16x8_t)vzip1q_s64(v510, v512);
  v999 = (int16x8_t)vzip2q_s64(v505, v508);
  v1000 = (int16x8_t)vzip2q_s64(v507, v509);
  v1001 = (int16x8_t)vzip2q_s64(v506, v511);
  v1002 = (int16x8_t)vzip2q_s64(v510, v512);
  v513 = (int32x4_t)vtrn1q_s16(v1003, v1004);
  v514 = (int32x4_t)vtrn2q_s16(v1003, v1004);
  v515 = (int32x4_t)vtrn1q_s16(v1005, v1006);
  v516 = (int32x4_t)vtrn2q_s16(v1005, v1006);
  v517 = (int32x4_t)vtrn1q_s16(v1007, v1008);
  v518 = (int32x4_t)vtrn2q_s16(v1007, v1008);
  v519 = (int32x4_t)vtrn1q_s16(v1009, v1010);
  v520 = (int32x4_t)vtrn2q_s16(v1009, v1010);
  v521 = (int64x2_t)vtrn1q_s32(v513, v515);
  v522 = (int64x2_t)vtrn2q_s32(v513, v515);
  v523 = (int64x2_t)vtrn1q_s32(v514, v516);
  v524 = (int64x2_t)vtrn1q_s32(v517, v519);
  v525 = (int64x2_t)vtrn1q_s32(v518, v520);
  v1003 = (int16x8_t)vzip1q_s64(v521, v524);
  v1004 = (int16x8_t)vzip1q_s64(v523, v525);
  v526 = (int64x2_t)vtrn2q_s32(v514, v516);
  v527 = (int64x2_t)vtrn2q_s32(v517, v519);
  v528 = (int64x2_t)vtrn2q_s32(v518, v520);
  v1005 = (int16x8_t)vzip1q_s64(v522, v527);
  v1006 = (int16x8_t)vzip1q_s64(v526, v528);
  v1007 = (int16x8_t)vzip2q_s64(v521, v524);
  v1008 = (int16x8_t)vzip2q_s64(v523, v525);
  v1009 = (int16x8_t)vzip2q_s64(v522, v527);
  v1010 = (int16x8_t)vzip2q_s64(v526, v528);
  v529 = (int32x4_t)vtrn1q_s16(v1011, v1012);
  v530 = (int32x4_t)vtrn2q_s16(v1011, v1012);
  v531 = (int32x4_t)vtrn1q_s16(v1013, v1014);
  v532 = (int32x4_t)vtrn2q_s16(v1013, v1014);
  v533 = (int32x4_t)vtrn1q_s16(v1015, v1016);
  v534 = (int32x4_t)vtrn2q_s16(v1015, v1016);
  v535 = (int32x4_t)vtrn1q_s16(v1017, v1018);
  v536 = (int32x4_t)vtrn2q_s16(v1017, v1018);
  v537 = (int64x2_t)vtrn1q_s32(v529, v531);
  v538 = (int64x2_t)vtrn2q_s32(v529, v531);
  v539 = (int64x2_t)vtrn1q_s32(v530, v532);
  v540 = (int64x2_t)vtrn1q_s32(v533, v535);
  v541 = (int64x2_t)vtrn1q_s32(v534, v536);
  v542 = (int8x16_t)vzip1q_s64(v537, v540);
  v1011 = (int16x8_t)v542;
  v1012 = (int16x8_t)vzip1q_s64(v539, v541);
  v543 = (int64x2_t)vtrn2q_s32(v530, v532);
  v544 = (int64x2_t)vtrn2q_s32(v533, v535);
  v545 = (int64x2_t)vtrn2q_s32(v534, v536);
  v1013 = (int16x8_t)vzip1q_s64(v538, v544);
  v1014 = (int16x8_t)vzip1q_s64(v543, v545);
  v1015 = (int16x8_t)vzip2q_s64(v537, v540);
  v1016 = (int16x8_t)vzip2q_s64(v539, v541);
  v1017 = (int16x8_t)vzip2q_s64(v538, v544);
  v1018 = (int16x8_t)vzip2q_s64(v543, v545);
  v546 = v1018;
  v547 = (int32x4_t)vtrn1q_s16(v1019, v1020);
  v548 = (int32x4_t)vtrn2q_s16(v1019, v1020);
  v549 = (int32x4_t)vtrn1q_s16(v1021, v1022);
  v550 = (int32x4_t)vtrn2q_s16(v1021, v1022);
  v551 = (int32x4_t)vtrn1q_s16(v1023, v1024);
  v552 = (int32x4_t)vtrn2q_s16(v1023, v1024);
  v553 = (int32x4_t)vtrn1q_s16(v1025, v1026);
  v554 = (int32x4_t)vtrn2q_s16(v1025, v1026);
  v555 = (int64x2_t)vtrn1q_s32(v547, v549);
  v556 = (int64x2_t)vtrn2q_s32(v547, v549);
  v557 = (int64x2_t)vtrn1q_s32(v548, v550);
  v558 = (int64x2_t)vtrn2q_s32(v548, v550);
  v559 = (int64x2_t)vtrn1q_s32(v551, v553);
  v560 = (int64x2_t)vtrn1q_s32(v552, v554);
  v561 = (int8x16_t)vzip1q_s64(v555, v559);
  v562 = (int8x16_t)vzip1q_s64(v557, v560);
  v1019 = (int16x8_t)v561;
  v1020 = (int16x8_t)v562;
  v563 = (int64x2_t)vtrn2q_s32(v551, v553);
  v564 = (int64x2_t)vtrn2q_s32(v552, v554);
  v1021 = (int16x8_t)vzip1q_s64(v556, v563);
  v1022 = (int16x8_t)vzip1q_s64(v558, v564);
  v1023 = (int16x8_t)vzip2q_s64(v555, v559);
  v1024 = (int16x8_t)vzip2q_s64(v557, v560);
  v1025 = (int16x8_t)vzip2q_s64(v556, v563);
  v1026 = (int16x8_t)vzip2q_s64(v558, v564);
  v565 = v996;
  v566 = vmovl_high_s16(v995);
  a2[64] = vmovl_s16(*(int16x4_t *)v995.i8);
  a2[65] = v566;
  v567 = v1004;
  v568 = vmovl_high_s16(v1003);
  a2[66] = vmovl_s16(*(int16x4_t *)v1003.i8);
  a2[67] = v568;
  a2[68] = vmovl_s16(*(int16x4_t *)v542.i8);
  a2[69] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v542, v542, 8uLL));
  a2[70] = vmovl_s16(*(int16x4_t *)v561.i8);
  a2[71] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v561, v561, 8uLL));
  a2[72] = vmovl_s16(*(int16x4_t *)v565.i8);
  a2[73] = vmovl_high_s16(v565);
  a2[74] = vmovl_s16(*(int16x4_t *)v567.i8);
  a2[75] = vmovl_high_s16(v567);
  v569 = v1013;
  v570 = vmovl_high_s16(v1012);
  a2[76] = vmovl_s16(*(int16x4_t *)v1012.i8);
  a2[77] = v570;
  a2[78] = vmovl_s16(*(int16x4_t *)v562.i8);
  a2[79] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v562, v562, 8uLL));
  v571 = v998;
  v572 = vmovl_high_s16(v997);
  a2[80] = vmovl_s16(*(int16x4_t *)v997.i8);
  a2[81] = v572;
  v573 = v1006;
  v574 = vmovl_high_s16(v1005);
  a2[82] = vmovl_s16(*(int16x4_t *)v1005.i8);
  a2[83] = v574;
  a2[84] = vmovl_s16(*(int16x4_t *)v569.i8);
  a2[85] = vmovl_high_s16(v569);
  v575 = v1022;
  v576 = vmovl_high_s16(v1021);
  a2[86] = vmovl_s16(*(int16x4_t *)v1021.i8);
  a2[87] = v576;
  a2[88] = vmovl_s16(*(int16x4_t *)v571.i8);
  a2[89] = vmovl_high_s16(v571);
  a2[90] = vmovl_s16(*(int16x4_t *)v573.i8);
  a2[91] = vmovl_high_s16(v573);
  v577 = v1015;
  v578 = vmovl_high_s16(v1014);
  a2[92] = vmovl_s16(*(int16x4_t *)v1014.i8);
  a2[93] = v578;
  a2[94] = vmovl_s16(*(int16x4_t *)v575.i8);
  a2[95] = vmovl_high_s16(v575);
  v579 = v1000;
  v580 = vmovl_high_s16(v999);
  a2[96] = vmovl_s16(*(int16x4_t *)v999.i8);
  a2[97] = v580;
  v581 = v1008;
  v582 = vmovl_high_s16(v1007);
  a2[98] = vmovl_s16(*(int16x4_t *)v1007.i8);
  a2[99] = v582;
  a2[100] = vmovl_s16(*(int16x4_t *)v577.i8);
  a2[101] = vmovl_high_s16(v577);
  v583 = v1024;
  v584 = vmovl_high_s16(v1023);
  a2[102] = vmovl_s16(*(int16x4_t *)v1023.i8);
  a2[103] = v584;
  a2[104] = vmovl_s16(*(int16x4_t *)v579.i8);
  a2[105] = vmovl_high_s16(v579);
  a2[106] = vmovl_s16(*(int16x4_t *)v581.i8);
  a2[107] = vmovl_high_s16(v581);
  v585 = v1017;
  v586 = vmovl_high_s16(v1016);
  a2[108] = vmovl_s16(*(int16x4_t *)v1016.i8);
  a2[109] = v586;
  a2[110] = vmovl_s16(*(int16x4_t *)v583.i8);
  a2[111] = vmovl_high_s16(v583);
  v587 = v1002;
  v588 = vmovl_high_s16(v1001);
  a2[112] = vmovl_s16(*(int16x4_t *)v1001.i8);
  a2[113] = v588;
  v589 = v1010;
  v590 = vmovl_high_s16(v1009);
  a2[114] = vmovl_s16(*(int16x4_t *)v1009.i8);
  a2[115] = v590;
  a2[116] = vmovl_s16(*(int16x4_t *)v585.i8);
  a2[117] = vmovl_high_s16(v585);
  v591 = v1026;
  v592 = vmovl_high_s16(v1025);
  a2[118] = vmovl_s16(*(int16x4_t *)v1025.i8);
  a2[119] = v592;
  a2[120] = vmovl_s16(*(int16x4_t *)v587.i8);
  a2[121] = vmovl_high_s16(v587);
  a2[122] = vmovl_s16(*(int16x4_t *)v589.i8);
  a2[123] = vmovl_high_s16(v589);
  v593 = vmovl_s16(*(int16x4_t *)v546.i8);
  v594 = vmovl_high_s16(v546);
  v595 = (int32x4_t)vtrn1q_s16(v1139, v1140);
  v596 = (int32x4_t)vtrn2q_s16(v1139, v1140);
  v597 = (int32x4_t)vtrn1q_s16(v1141, v1142);
  v598 = (int32x4_t)vtrn2q_s16(v1141, v1142);
  v599 = (int32x4_t)vtrn1q_s16(v1143, v1144);
  v600 = (int32x4_t)vtrn2q_s16(v1143, v1144);
  v601 = v1145;
  v602 = v1146;
  v603 = (int32x4_t)vtrn1q_s16(v1145, v1146);
  a2[124] = v593;
  v604 = (int32x4_t)vtrn2q_s16(v601, v602);
  a2[125] = v594;
  v605 = (int64x2_t)vtrn1q_s32(v595, v597);
  v606 = (int64x2_t)vtrn2q_s32(v595, v597);
  a2[126] = vmovl_s16(*(int16x4_t *)v591.i8);
  v607 = (int64x2_t)vtrn1q_s32(v596, v598);
  a2[127] = vmovl_high_s16(v591);
  v608 = (int64x2_t)vtrn2q_s32(v596, v598);
  v609 = (int64x2_t)vtrn1q_s32(v599, v603);
  v610 = (int64x2_t)vtrn2q_s32(v599, v603);
  v611 = (int64x2_t)vtrn1q_s32(v600, v604);
  v612 = (int64x2_t)vtrn2q_s32(v600, v604);
  v613 = vzip1q_s64(v605, v609);
  v614 = vzip2q_s64(v605, v609);
  v615 = vzip1q_s64(v607, v611);
  v616 = vzip2q_s64(v607, v611);
  v617 = vzip1q_s64(v606, v610);
  v618 = vzip2q_s64(v606, v610);
  v619 = vzip1q_s64(v608, v612);
  v620 = vzip2q_s64(v608, v612);
  v1155 = v613;
  v1156 = v615;
  v1157 = v617;
  v1158 = v619;
  v621 = (int32x4_t)vtrn1q_s16(v1107, v1108);
  v622 = (int32x4_t)vtrn2q_s16(v1107, v1108);
  v623 = (int32x4_t)vtrn1q_s16(v1109, v1110);
  v624 = (int32x4_t)vtrn2q_s16(v1109, v1110);
  v625 = (int32x4_t)vtrn1q_s16(v1111, v1112);
  v626 = (int32x4_t)vtrn2q_s16(v1111, v1112);
  v627 = (int32x4_t)vtrn1q_s16(v1113, v1114);
  v628 = (int32x4_t)vtrn2q_s16(v1113, v1114);
  v1159 = v614;
  v1160 = v616;
  v629 = (int64x2_t)vtrn1q_s32(v621, v623);
  v630 = (int64x2_t)vtrn2q_s32(v621, v623);
  v631 = (int64x2_t)vtrn1q_s32(v622, v624);
  v1161 = v618;
  v1162 = v620;
  v632 = (int64x2_t)vtrn2q_s32(v622, v624);
  v633 = (int64x2_t)vtrn1q_s32(v625, v627);
  v634 = (int64x2_t)vtrn2q_s32(v625, v627);
  v635 = (int64x2_t)vtrn1q_s32(v626, v628);
  v636 = (int64x2_t)vtrn2q_s32(v626, v628);
  v637 = vzip1q_s64(v629, v633);
  v638 = vzip2q_s64(v629, v633);
  v639 = vzip1q_s64(v631, v635);
  v640 = vzip2q_s64(v631, v635);
  v641 = vzip1q_s64(v630, v634);
  v642 = vzip2q_s64(v630, v634);
  v643 = vzip1q_s64(v632, v636);
  v644 = vzip2q_s64(v632, v636);
  v1163 = v637;
  v1164 = v639;
  v1165 = v641;
  v1166 = v643;
  v645 = (int32x4_t)vtrn1q_s16(v1075, v1076);
  v646 = (int32x4_t)vtrn2q_s16(v1075, v1076);
  v647 = (int32x4_t)vtrn1q_s16(v1077, v1078);
  v648 = (int32x4_t)vtrn2q_s16(v1077, v1078);
  v649 = (int32x4_t)vtrn1q_s16(v1079, v1080);
  v650 = (int32x4_t)vtrn2q_s16(v1079, v1080);
  v651 = (int32x4_t)vtrn1q_s16(v1081, v1082);
  v652 = (int32x4_t)vtrn2q_s16(v1081, v1082);
  v1167 = v638;
  v1168 = v640;
  v653 = (int64x2_t)vtrn1q_s32(v645, v647);
  v654 = (int64x2_t)vtrn2q_s32(v645, v647);
  v655 = (int64x2_t)vtrn1q_s32(v646, v648);
  v1169 = v642;
  v1170 = v644;
  v656 = (int64x2_t)vtrn2q_s32(v646, v648);
  v657 = (int64x2_t)vtrn1q_s32(v649, v651);
  v658 = (int64x2_t)vtrn2q_s32(v649, v651);
  v659 = (int64x2_t)vtrn1q_s32(v650, v652);
  v660 = (int64x2_t)vtrn2q_s32(v650, v652);
  v661 = vzip1q_s64(v653, v657);
  v662 = vzip2q_s64(v653, v657);
  v663 = vzip1q_s64(v655, v659);
  v664 = vzip2q_s64(v655, v659);
  v665 = vzip1q_s64(v654, v658);
  v666 = vzip2q_s64(v654, v658);
  v667 = vzip1q_s64(v656, v660);
  v668 = vzip2q_s64(v656, v660);
  v1171 = v661;
  v1172 = v663;
  v1173 = v665;
  v1174 = v667;
  v669 = (int32x4_t)vtrn1q_s16(v1043, v1044);
  v670 = (int32x4_t)vtrn2q_s16(v1043, v1044);
  v671 = (int32x4_t)vtrn1q_s16(v1045, v1046);
  v672 = (int32x4_t)vtrn2q_s16(v1045, v1046);
  v673 = (int32x4_t)vtrn1q_s16(v1047, v1048);
  v674 = (int32x4_t)vtrn2q_s16(v1047, v1048);
  v675 = (int32x4_t)vtrn1q_s16(v1049, v1050);
  v676 = (int32x4_t)vtrn2q_s16(v1049, v1050);
  v1175 = v662;
  v1176 = v664;
  v677 = (int64x2_t)vtrn1q_s32(v669, v671);
  v678 = (int64x2_t)vtrn2q_s32(v669, v671);
  v679 = (int64x2_t)vtrn1q_s32(v670, v672);
  v1177 = v666;
  v1178 = v668;
  v680 = (int64x2_t)vtrn2q_s32(v670, v672);
  v681 = (int64x2_t)vtrn1q_s32(v673, v675);
  v682 = (int64x2_t)vtrn2q_s32(v673, v675);
  v683 = (int64x2_t)vtrn1q_s32(v674, v676);
  v684 = (int64x2_t)vtrn2q_s32(v674, v676);
  v1179 = vzip1q_s64(v677, v681);
  v1180 = vzip1q_s64(v679, v683);
  v1181 = vzip1q_s64(v678, v682);
  v1182 = vzip1q_s64(v680, v684);
  v1183 = vzip2q_s64(v677, v681);
  v1184 = vzip2q_s64(v679, v683);
  v1185 = vzip2q_s64(v678, v682);
  v1186 = vzip2q_s64(v680, v684);
  dct_body_second_pass((int16x8_t *)&v1155, &v995);
  v685 = (int32x4_t)vtrn1q_s16(v995, v996);
  v686 = (int32x4_t)vtrn2q_s16(v995, v996);
  v687 = (int32x4_t)vtrn1q_s16(v997, v998);
  v688 = (int32x4_t)vtrn2q_s16(v997, v998);
  v689 = (int32x4_t)vtrn1q_s16(v999, v1000);
  v690 = (int32x4_t)vtrn2q_s16(v999, v1000);
  v691 = (int32x4_t)vtrn1q_s16(v1001, v1002);
  v692 = (int32x4_t)vtrn2q_s16(v1001, v1002);
  v693 = (int64x2_t)vtrn1q_s32(v685, v687);
  v694 = (int64x2_t)vtrn2q_s32(v685, v687);
  v695 = (int64x2_t)vtrn1q_s32(v686, v688);
  v696 = (int64x2_t)vtrn1q_s32(v689, v691);
  v697 = (int64x2_t)vtrn1q_s32(v690, v692);
  v995 = (int16x8_t)vzip1q_s64(v693, v696);
  v996 = (int16x8_t)vzip1q_s64(v695, v697);
  v698 = (int64x2_t)vtrn2q_s32(v686, v688);
  v699 = (int64x2_t)vtrn2q_s32(v689, v691);
  v700 = (int64x2_t)vtrn2q_s32(v690, v692);
  v997 = (int16x8_t)vzip1q_s64(v694, v699);
  v998 = (int16x8_t)vzip1q_s64(v698, v700);
  v999 = (int16x8_t)vzip2q_s64(v693, v696);
  v1000 = (int16x8_t)vzip2q_s64(v695, v697);
  v1001 = (int16x8_t)vzip2q_s64(v694, v699);
  v1002 = (int16x8_t)vzip2q_s64(v698, v700);
  v701 = (int32x4_t)vtrn1q_s16(v1003, v1004);
  v702 = (int32x4_t)vtrn2q_s16(v1003, v1004);
  v703 = (int32x4_t)vtrn1q_s16(v1005, v1006);
  v704 = (int32x4_t)vtrn2q_s16(v1005, v1006);
  v705 = (int32x4_t)vtrn1q_s16(v1007, v1008);
  v706 = (int32x4_t)vtrn2q_s16(v1007, v1008);
  v707 = (int32x4_t)vtrn1q_s16(v1009, v1010);
  v708 = (int32x4_t)vtrn2q_s16(v1009, v1010);
  v709 = (int64x2_t)vtrn1q_s32(v701, v703);
  v710 = (int64x2_t)vtrn2q_s32(v701, v703);
  v711 = (int64x2_t)vtrn1q_s32(v702, v704);
  v712 = (int64x2_t)vtrn1q_s32(v705, v707);
  v713 = (int64x2_t)vtrn1q_s32(v706, v708);
  v1003 = (int16x8_t)vzip1q_s64(v709, v712);
  v1004 = (int16x8_t)vzip1q_s64(v711, v713);
  v714 = (int64x2_t)vtrn2q_s32(v702, v704);
  v715 = (int64x2_t)vtrn2q_s32(v705, v707);
  v716 = (int64x2_t)vtrn2q_s32(v706, v708);
  v1005 = (int16x8_t)vzip1q_s64(v710, v715);
  v1006 = (int16x8_t)vzip1q_s64(v714, v716);
  v1007 = (int16x8_t)vzip2q_s64(v709, v712);
  v1008 = (int16x8_t)vzip2q_s64(v711, v713);
  v1009 = (int16x8_t)vzip2q_s64(v710, v715);
  v1010 = (int16x8_t)vzip2q_s64(v714, v716);
  v717 = (int32x4_t)vtrn1q_s16(v1011, v1012);
  v718 = (int32x4_t)vtrn2q_s16(v1011, v1012);
  v719 = (int32x4_t)vtrn1q_s16(v1013, v1014);
  v720 = (int32x4_t)vtrn2q_s16(v1013, v1014);
  v721 = (int32x4_t)vtrn1q_s16(v1015, v1016);
  v722 = (int32x4_t)vtrn2q_s16(v1015, v1016);
  v723 = (int32x4_t)vtrn1q_s16(v1017, v1018);
  v724 = (int32x4_t)vtrn2q_s16(v1017, v1018);
  v725 = (int64x2_t)vtrn1q_s32(v717, v719);
  v726 = (int64x2_t)vtrn2q_s32(v717, v719);
  v727 = (int64x2_t)vtrn1q_s32(v718, v720);
  v728 = (int64x2_t)vtrn1q_s32(v721, v723);
  v729 = (int64x2_t)vtrn1q_s32(v722, v724);
  v730 = (int8x16_t)vzip1q_s64(v725, v728);
  v1011 = (int16x8_t)v730;
  v1012 = (int16x8_t)vzip1q_s64(v727, v729);
  v731 = (int64x2_t)vtrn2q_s32(v718, v720);
  v732 = (int64x2_t)vtrn2q_s32(v721, v723);
  v733 = (int64x2_t)vtrn2q_s32(v722, v724);
  v1013 = (int16x8_t)vzip1q_s64(v726, v732);
  v1014 = (int16x8_t)vzip1q_s64(v731, v733);
  v1015 = (int16x8_t)vzip2q_s64(v725, v728);
  v1016 = (int16x8_t)vzip2q_s64(v727, v729);
  v1017 = (int16x8_t)vzip2q_s64(v726, v732);
  v1018 = (int16x8_t)vzip2q_s64(v731, v733);
  v734 = v1018;
  v735 = (int32x4_t)vtrn1q_s16(v1019, v1020);
  v736 = (int32x4_t)vtrn2q_s16(v1019, v1020);
  v737 = (int32x4_t)vtrn1q_s16(v1021, v1022);
  v738 = (int32x4_t)vtrn2q_s16(v1021, v1022);
  v739 = (int32x4_t)vtrn1q_s16(v1023, v1024);
  v740 = (int32x4_t)vtrn2q_s16(v1023, v1024);
  v741 = (int32x4_t)vtrn1q_s16(v1025, v1026);
  v742 = (int32x4_t)vtrn2q_s16(v1025, v1026);
  v743 = (int64x2_t)vtrn1q_s32(v735, v737);
  v744 = (int64x2_t)vtrn2q_s32(v735, v737);
  v745 = (int64x2_t)vtrn1q_s32(v736, v738);
  v746 = (int64x2_t)vtrn2q_s32(v736, v738);
  v747 = (int64x2_t)vtrn1q_s32(v739, v741);
  v748 = (int64x2_t)vtrn1q_s32(v740, v742);
  v749 = (int8x16_t)vzip1q_s64(v743, v747);
  v750 = (int8x16_t)vzip1q_s64(v745, v748);
  v1019 = (int16x8_t)v749;
  v1020 = (int16x8_t)v750;
  v751 = (int64x2_t)vtrn2q_s32(v739, v741);
  v752 = (int64x2_t)vtrn2q_s32(v740, v742);
  v1021 = (int16x8_t)vzip1q_s64(v744, v751);
  v1022 = (int16x8_t)vzip1q_s64(v746, v752);
  v1023 = (int16x8_t)vzip2q_s64(v743, v747);
  v1024 = (int16x8_t)vzip2q_s64(v745, v748);
  v1025 = (int16x8_t)vzip2q_s64(v744, v751);
  v1026 = (int16x8_t)vzip2q_s64(v746, v752);
  v753 = v996;
  v754 = vmovl_high_s16(v995);
  a2[128] = vmovl_s16(*(int16x4_t *)v995.i8);
  a2[129] = v754;
  v755 = v1004;
  v756 = vmovl_high_s16(v1003);
  a2[130] = vmovl_s16(*(int16x4_t *)v1003.i8);
  a2[131] = v756;
  a2[132] = vmovl_s16(*(int16x4_t *)v730.i8);
  a2[133] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v730, v730, 8uLL));
  a2[134] = vmovl_s16(*(int16x4_t *)v749.i8);
  a2[135] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v749, v749, 8uLL));
  a2[136] = vmovl_s16(*(int16x4_t *)v753.i8);
  a2[137] = vmovl_high_s16(v753);
  a2[138] = vmovl_s16(*(int16x4_t *)v755.i8);
  a2[139] = vmovl_high_s16(v755);
  v757 = v1013;
  v758 = vmovl_high_s16(v1012);
  a2[140] = vmovl_s16(*(int16x4_t *)v1012.i8);
  a2[141] = v758;
  a2[142] = vmovl_s16(*(int16x4_t *)v750.i8);
  a2[143] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v750, v750, 8uLL));
  v759 = v998;
  v760 = vmovl_high_s16(v997);
  a2[144] = vmovl_s16(*(int16x4_t *)v997.i8);
  a2[145] = v760;
  v761 = v1006;
  v762 = vmovl_high_s16(v1005);
  a2[146] = vmovl_s16(*(int16x4_t *)v1005.i8);
  a2[147] = v762;
  a2[148] = vmovl_s16(*(int16x4_t *)v757.i8);
  a2[149] = vmovl_high_s16(v757);
  v763 = v1022;
  v764 = vmovl_high_s16(v1021);
  a2[150] = vmovl_s16(*(int16x4_t *)v1021.i8);
  a2[151] = v764;
  a2[152] = vmovl_s16(*(int16x4_t *)v759.i8);
  a2[153] = vmovl_high_s16(v759);
  a2[154] = vmovl_s16(*(int16x4_t *)v761.i8);
  a2[155] = vmovl_high_s16(v761);
  v765 = v1015;
  v766 = vmovl_high_s16(v1014);
  a2[156] = vmovl_s16(*(int16x4_t *)v1014.i8);
  a2[157] = v766;
  a2[158] = vmovl_s16(*(int16x4_t *)v763.i8);
  a2[159] = vmovl_high_s16(v763);
  v767 = v1000;
  v768 = vmovl_high_s16(v999);
  a2[160] = vmovl_s16(*(int16x4_t *)v999.i8);
  a2[161] = v768;
  v769 = v1008;
  v770 = vmovl_high_s16(v1007);
  a2[162] = vmovl_s16(*(int16x4_t *)v1007.i8);
  a2[163] = v770;
  a2[164] = vmovl_s16(*(int16x4_t *)v765.i8);
  a2[165] = vmovl_high_s16(v765);
  v771 = v1024;
  v772 = vmovl_high_s16(v1023);
  a2[166] = vmovl_s16(*(int16x4_t *)v1023.i8);
  a2[167] = v772;
  a2[168] = vmovl_s16(*(int16x4_t *)v767.i8);
  a2[169] = vmovl_high_s16(v767);
  a2[170] = vmovl_s16(*(int16x4_t *)v769.i8);
  a2[171] = vmovl_high_s16(v769);
  v773 = v1017;
  v774 = vmovl_high_s16(v1016);
  a2[172] = vmovl_s16(*(int16x4_t *)v1016.i8);
  a2[173] = v774;
  a2[174] = vmovl_s16(*(int16x4_t *)v771.i8);
  a2[175] = vmovl_high_s16(v771);
  v775 = v1002;
  v776 = vmovl_high_s16(v1001);
  a2[176] = vmovl_s16(*(int16x4_t *)v1001.i8);
  a2[177] = v776;
  v777 = v1010;
  v778 = vmovl_high_s16(v1009);
  a2[178] = vmovl_s16(*(int16x4_t *)v1009.i8);
  a2[179] = v778;
  a2[180] = vmovl_s16(*(int16x4_t *)v773.i8);
  a2[181] = vmovl_high_s16(v773);
  v779 = v1026;
  v780 = vmovl_high_s16(v1025);
  a2[182] = vmovl_s16(*(int16x4_t *)v1025.i8);
  a2[183] = v780;
  a2[184] = vmovl_s16(*(int16x4_t *)v775.i8);
  a2[185] = vmovl_high_s16(v775);
  a2[186] = vmovl_s16(*(int16x4_t *)v777.i8);
  a2[187] = vmovl_high_s16(v777);
  v781 = vmovl_s16(*(int16x4_t *)v734.i8);
  v782 = vmovl_high_s16(v734);
  v783 = (int32x4_t)vtrn1q_s16(v1147, v1148);
  v784 = (int32x4_t)vtrn2q_s16(v1147, v1148);
  v785 = (int32x4_t)vtrn1q_s16(v1149, v1150);
  v786 = (int32x4_t)vtrn2q_s16(v1149, v1150);
  v787 = (int32x4_t)vtrn1q_s16(v1151, v1152);
  v788 = (int32x4_t)vtrn2q_s16(v1151, v1152);
  v789 = v1153;
  v790 = v1154;
  v791 = (int32x4_t)vtrn1q_s16(v1153, v1154);
  a2[188] = v781;
  v792 = (int32x4_t)vtrn2q_s16(v789, v790);
  a2[189] = v782;
  v793 = (int64x2_t)vtrn1q_s32(v783, v785);
  v794 = (int64x2_t)vtrn2q_s32(v783, v785);
  a2[190] = vmovl_s16(*(int16x4_t *)v779.i8);
  v795 = (int64x2_t)vtrn1q_s32(v784, v786);
  a2[191] = vmovl_high_s16(v779);
  v796 = (int64x2_t)vtrn2q_s32(v784, v786);
  v797 = (int64x2_t)vtrn1q_s32(v787, v791);
  v798 = (int64x2_t)vtrn2q_s32(v787, v791);
  v799 = (int64x2_t)vtrn1q_s32(v788, v792);
  v800 = (int64x2_t)vtrn2q_s32(v788, v792);
  v801 = vzip1q_s64(v793, v797);
  v802 = vzip2q_s64(v793, v797);
  v803 = vzip1q_s64(v795, v799);
  v804 = vzip2q_s64(v795, v799);
  v805 = vzip1q_s64(v794, v798);
  v806 = vzip2q_s64(v794, v798);
  v807 = vzip1q_s64(v796, v800);
  v808 = vzip2q_s64(v796, v800);
  v1155 = v801;
  v1156 = v803;
  v1157 = v805;
  v1158 = v807;
  v809 = (int32x4_t)vtrn1q_s16(v1115, v1116);
  v810 = (int32x4_t)vtrn2q_s16(v1115, v1116);
  v811 = (int32x4_t)vtrn1q_s16(v1117, v1118);
  v812 = (int32x4_t)vtrn2q_s16(v1117, v1118);
  v813 = (int32x4_t)vtrn1q_s16(v1119, v1120);
  v814 = (int32x4_t)vtrn2q_s16(v1119, v1120);
  v815 = (int32x4_t)vtrn1q_s16(v1121, v1122);
  v816 = (int32x4_t)vtrn2q_s16(v1121, v1122);
  v1159 = v802;
  v1160 = v804;
  v817 = (int64x2_t)vtrn1q_s32(v809, v811);
  v818 = (int64x2_t)vtrn2q_s32(v809, v811);
  v819 = (int64x2_t)vtrn1q_s32(v810, v812);
  v1161 = v806;
  v1162 = v808;
  v820 = (int64x2_t)vtrn2q_s32(v810, v812);
  v821 = (int64x2_t)vtrn1q_s32(v813, v815);
  v822 = (int64x2_t)vtrn2q_s32(v813, v815);
  v823 = (int64x2_t)vtrn1q_s32(v814, v816);
  v824 = (int64x2_t)vtrn2q_s32(v814, v816);
  v825 = vzip1q_s64(v817, v821);
  v826 = vzip2q_s64(v817, v821);
  v827 = vzip1q_s64(v819, v823);
  v828 = vzip2q_s64(v819, v823);
  v829 = vzip1q_s64(v818, v822);
  v830 = vzip2q_s64(v818, v822);
  v831 = vzip1q_s64(v820, v824);
  v832 = vzip2q_s64(v820, v824);
  v1163 = v825;
  v1164 = v827;
  v1165 = v829;
  v1166 = v831;
  v833 = (int32x4_t)vtrn1q_s16(v1083, v1084);
  v834 = (int32x4_t)vtrn2q_s16(v1083, v1084);
  v835 = (int32x4_t)vtrn1q_s16(v1085, v1086);
  v836 = (int32x4_t)vtrn2q_s16(v1085, v1086);
  v837 = (int32x4_t)vtrn1q_s16(v1087, v1088);
  v838 = (int32x4_t)vtrn2q_s16(v1087, v1088);
  v839 = (int32x4_t)vtrn1q_s16(v1089, v1090);
  v840 = (int32x4_t)vtrn2q_s16(v1089, v1090);
  v1167 = v826;
  v1168 = v828;
  v841 = (int64x2_t)vtrn1q_s32(v833, v835);
  v842 = (int64x2_t)vtrn2q_s32(v833, v835);
  v843 = (int64x2_t)vtrn1q_s32(v834, v836);
  v1169 = v830;
  v1170 = v832;
  v844 = (int64x2_t)vtrn2q_s32(v834, v836);
  v845 = (int64x2_t)vtrn1q_s32(v837, v839);
  v846 = (int64x2_t)vtrn2q_s32(v837, v839);
  v847 = (int64x2_t)vtrn1q_s32(v838, v840);
  v848 = (int64x2_t)vtrn2q_s32(v838, v840);
  v849 = vzip1q_s64(v841, v845);
  v850 = vzip2q_s64(v841, v845);
  v851 = vzip1q_s64(v843, v847);
  v852 = vzip2q_s64(v843, v847);
  v853 = vzip1q_s64(v842, v846);
  v854 = vzip2q_s64(v842, v846);
  v855 = vzip1q_s64(v844, v848);
  v856 = vzip2q_s64(v844, v848);
  v1171 = v849;
  v1172 = v851;
  v1173 = v853;
  v1174 = v855;
  v857 = (int32x4_t)vtrn1q_s16(v1051, v1052);
  v858 = (int32x4_t)vtrn2q_s16(v1051, v1052);
  v859 = (int32x4_t)vtrn1q_s16(v1053, v1054);
  v860 = (int32x4_t)vtrn2q_s16(v1053, v1054);
  v861 = (int32x4_t)vtrn1q_s16(v1055, v1056);
  v862 = (int32x4_t)vtrn2q_s16(v1055, v1056);
  v863 = (int32x4_t)vtrn1q_s16(v1057, v1058);
  v864 = (int32x4_t)vtrn2q_s16(v1057, v1058);
  v1175 = v850;
  v1176 = v852;
  v865 = (int64x2_t)vtrn1q_s32(v857, v859);
  v866 = (int64x2_t)vtrn2q_s32(v857, v859);
  v867 = (int64x2_t)vtrn1q_s32(v858, v860);
  v1177 = v854;
  v1178 = v856;
  v868 = (int64x2_t)vtrn2q_s32(v858, v860);
  v869 = (int64x2_t)vtrn1q_s32(v861, v863);
  v870 = (int64x2_t)vtrn2q_s32(v861, v863);
  v871 = (int64x2_t)vtrn1q_s32(v862, v864);
  v872 = (int64x2_t)vtrn2q_s32(v862, v864);
  v1179 = vzip1q_s64(v865, v869);
  v1180 = vzip1q_s64(v867, v871);
  v1181 = vzip1q_s64(v866, v870);
  v1182 = vzip1q_s64(v868, v872);
  v1183 = vzip2q_s64(v865, v869);
  v1184 = vzip2q_s64(v867, v871);
  v1185 = vzip2q_s64(v866, v870);
  v1186 = vzip2q_s64(v868, v872);
  dct_body_second_pass((int16x8_t *)&v1155, &v995);
  v873 = (int32x4_t)vtrn1q_s16(v995, v996);
  v874 = (int32x4_t)vtrn2q_s16(v995, v996);
  v875 = (int32x4_t)vtrn1q_s16(v997, v998);
  v876 = (int32x4_t)vtrn2q_s16(v997, v998);
  v877 = (int32x4_t)vtrn1q_s16(v999, v1000);
  v878 = (int32x4_t)vtrn2q_s16(v999, v1000);
  v879 = (int32x4_t)vtrn1q_s16(v1001, v1002);
  v880 = (int32x4_t)vtrn2q_s16(v1001, v1002);
  v881 = (int64x2_t)vtrn1q_s32(v873, v875);
  v882 = (int64x2_t)vtrn2q_s32(v873, v875);
  v883 = (int64x2_t)vtrn1q_s32(v874, v876);
  v884 = (int64x2_t)vtrn1q_s32(v877, v879);
  v885 = (int64x2_t)vtrn1q_s32(v878, v880);
  v995 = (int16x8_t)vzip1q_s64(v881, v884);
  v996 = (int16x8_t)vzip1q_s64(v883, v885);
  v886 = (int64x2_t)vtrn2q_s32(v874, v876);
  v887 = (int64x2_t)vtrn2q_s32(v877, v879);
  v888 = (int64x2_t)vtrn2q_s32(v878, v880);
  v997 = (int16x8_t)vzip1q_s64(v882, v887);
  v998 = (int16x8_t)vzip1q_s64(v886, v888);
  v999 = (int16x8_t)vzip2q_s64(v881, v884);
  v1000 = (int16x8_t)vzip2q_s64(v883, v885);
  v1001 = (int16x8_t)vzip2q_s64(v882, v887);
  v1002 = (int16x8_t)vzip2q_s64(v886, v888);
  v889 = (int32x4_t)vtrn1q_s16(v1003, v1004);
  v890 = (int32x4_t)vtrn2q_s16(v1003, v1004);
  v891 = (int32x4_t)vtrn1q_s16(v1005, v1006);
  v892 = (int32x4_t)vtrn2q_s16(v1005, v1006);
  v893 = (int32x4_t)vtrn1q_s16(v1007, v1008);
  v894 = (int32x4_t)vtrn2q_s16(v1007, v1008);
  v895 = (int32x4_t)vtrn1q_s16(v1009, v1010);
  v896 = (int32x4_t)vtrn2q_s16(v1009, v1010);
  v897 = (int64x2_t)vtrn1q_s32(v889, v891);
  v898 = (int64x2_t)vtrn2q_s32(v889, v891);
  v899 = (int64x2_t)vtrn1q_s32(v890, v892);
  v900 = (int64x2_t)vtrn1q_s32(v893, v895);
  v901 = (int64x2_t)vtrn1q_s32(v894, v896);
  v1003 = (int16x8_t)vzip1q_s64(v897, v900);
  v1004 = (int16x8_t)vzip1q_s64(v899, v901);
  v902 = (int64x2_t)vtrn2q_s32(v890, v892);
  v903 = (int64x2_t)vtrn2q_s32(v893, v895);
  v904 = (int64x2_t)vtrn2q_s32(v894, v896);
  v1005 = (int16x8_t)vzip1q_s64(v898, v903);
  v1006 = (int16x8_t)vzip1q_s64(v902, v904);
  v1007 = (int16x8_t)vzip2q_s64(v897, v900);
  v1008 = (int16x8_t)vzip2q_s64(v899, v901);
  v1009 = (int16x8_t)vzip2q_s64(v898, v903);
  v1010 = (int16x8_t)vzip2q_s64(v902, v904);
  v905 = (int32x4_t)vtrn1q_s16(v1011, v1012);
  v906 = (int32x4_t)vtrn2q_s16(v1011, v1012);
  v907 = (int32x4_t)vtrn1q_s16(v1013, v1014);
  v908 = (int32x4_t)vtrn2q_s16(v1013, v1014);
  v909 = (int32x4_t)vtrn1q_s16(v1015, v1016);
  v910 = (int32x4_t)vtrn2q_s16(v1015, v1016);
  v911 = (int32x4_t)vtrn1q_s16(v1017, v1018);
  v912 = (int32x4_t)vtrn2q_s16(v1017, v1018);
  v913 = (int64x2_t)vtrn1q_s32(v905, v907);
  v914 = (int64x2_t)vtrn2q_s32(v905, v907);
  v915 = (int64x2_t)vtrn1q_s32(v906, v908);
  v916 = (int64x2_t)vtrn2q_s32(v909, v911);
  v917 = (int64x2_t)vtrn1q_s32(v910, v912);
  v1012 = (int16x8_t)vzip1q_s64(v915, v917);
  v1013 = (int16x8_t)vzip1q_s64(v914, v916);
  v918 = (int64x2_t)vtrn2q_s32(v906, v908);
  v919 = (int64x2_t)vtrn1q_s32(v909, v911);
  v920 = (int64x2_t)vtrn2q_s32(v910, v912);
  v1014 = (int16x8_t)vzip1q_s64(v918, v920);
  v1015 = (int16x8_t)vzip2q_s64(v913, v919);
  v1016 = (int16x8_t)vzip2q_s64(v915, v917);
  v1017 = (int16x8_t)vzip2q_s64(v914, v916);
  v1018 = (int16x8_t)vzip2q_s64(v918, v920);
  v921 = v1018;
  v922 = (int32x4_t)vtrn1q_s16(v1019, v1020);
  v923 = (int32x4_t)vtrn2q_s16(v1019, v1020);
  v924 = (int32x4_t)vtrn1q_s16(v1021, v1022);
  v925 = (int32x4_t)vtrn2q_s16(v1021, v1022);
  v926 = (int32x4_t)vtrn1q_s16(v1023, v1024);
  v927 = (int32x4_t)vtrn2q_s16(v1023, v1024);
  v928 = (int32x4_t)vtrn1q_s16(v1025, v1026);
  v929 = (int32x4_t)vtrn2q_s16(v1025, v1026);
  v930 = (int64x2_t)vtrn1q_s32(v922, v924);
  v931 = (int64x2_t)vtrn2q_s32(v922, v924);
  v932 = (int64x2_t)vtrn1q_s32(v923, v925);
  v933 = (int64x2_t)vtrn2q_s32(v923, v925);
  v934 = (int64x2_t)vtrn2q_s32(v926, v928);
  v935 = (int64x2_t)vtrn2q_s32(v927, v929);
  v1021 = (int16x8_t)vzip1q_s64(v931, v934);
  v1022 = (int16x8_t)vzip1q_s64(v933, v935);
  v936 = (int64x2_t)vtrn1q_s32(v926, v928);
  v937 = (int64x2_t)vtrn1q_s32(v927, v929);
  v1023 = (int16x8_t)vzip2q_s64(v930, v936);
  v1024 = (int16x8_t)vzip2q_s64(v932, v937);
  v1025 = (int16x8_t)vzip2q_s64(v931, v934);
  v1026 = (int16x8_t)vzip2q_s64(v933, v935);
  v938 = (int8x16_t)vzip1q_s64(v913, v919);
  v939 = (int8x16_t)vzip1q_s64(v930, v936);
  v940 = (int8x16_t)vzip1q_s64(v932, v937);
  v941 = v995;
  v942 = v996;
  a2[192] = vmovl_s16(*(int16x4_t *)v995.i8);
  a2[193] = vmovl_high_s16(v941);
  v943 = v1004;
  v944 = vmovl_high_s16(v1003);
  a2[194] = vmovl_s16(*(int16x4_t *)v1003.i8);
  a2[195] = v944;
  a2[196] = vmovl_s16(*(int16x4_t *)v938.i8);
  a2[197] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v938, v938, 8uLL));
  a2[198] = vmovl_s16(*(int16x4_t *)v939.i8);
  a2[199] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v939, v939, 8uLL));
  a2[200] = vmovl_s16(*(int16x4_t *)v942.i8);
  a2[201] = vmovl_high_s16(v942);
  a2[202] = vmovl_s16(*(int16x4_t *)v943.i8);
  a2[203] = vmovl_high_s16(v943);
  v945 = v1013;
  v946 = vmovl_high_s16(v1012);
  a2[204] = vmovl_s16(*(int16x4_t *)v1012.i8);
  a2[205] = v946;
  a2[206] = vmovl_s16(*(int16x4_t *)v940.i8);
  a2[207] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v940, v940, 8uLL));
  v947 = v998;
  v948 = vmovl_high_s16(v997);
  a2[208] = vmovl_s16(*(int16x4_t *)v997.i8);
  a2[209] = v948;
  v949 = v1006;
  v950 = vmovl_high_s16(v1005);
  a2[210] = vmovl_s16(*(int16x4_t *)v1005.i8);
  a2[211] = v950;
  a2[212] = vmovl_s16(*(int16x4_t *)v945.i8);
  a2[213] = vmovl_high_s16(v945);
  v951 = v1022;
  v952 = vmovl_high_s16(v1021);
  a2[214] = vmovl_s16(*(int16x4_t *)v1021.i8);
  a2[215] = v952;
  a2[216] = vmovl_s16(*(int16x4_t *)v947.i8);
  a2[217] = vmovl_high_s16(v947);
  a2[218] = vmovl_s16(*(int16x4_t *)v949.i8);
  a2[219] = vmovl_high_s16(v949);
  v953 = v1015;
  v954 = vmovl_high_s16(v1014);
  a2[220] = vmovl_s16(*(int16x4_t *)v1014.i8);
  a2[221] = v954;
  a2[222] = vmovl_s16(*(int16x4_t *)v951.i8);
  a2[223] = vmovl_high_s16(v951);
  v955 = v1000;
  v956 = vmovl_high_s16(v999);
  a2[224] = vmovl_s16(*(int16x4_t *)v999.i8);
  a2[225] = v956;
  v957 = v1008;
  v958 = vmovl_high_s16(v1007);
  a2[226] = vmovl_s16(*(int16x4_t *)v1007.i8);
  a2[227] = v958;
  a2[228] = vmovl_s16(*(int16x4_t *)v953.i8);
  a2[229] = vmovl_high_s16(v953);
  v959 = v1024;
  v960 = vmovl_high_s16(v1023);
  a2[230] = vmovl_s16(*(int16x4_t *)v1023.i8);
  a2[231] = v960;
  a2[232] = vmovl_s16(*(int16x4_t *)v955.i8);
  a2[233] = vmovl_high_s16(v955);
  a2[234] = vmovl_s16(*(int16x4_t *)v957.i8);
  a2[235] = vmovl_high_s16(v957);
  v961 = v1017;
  v962 = vmovl_high_s16(v1016);
  a2[236] = vmovl_s16(*(int16x4_t *)v1016.i8);
  a2[237] = v962;
  a2[238] = vmovl_s16(*(int16x4_t *)v959.i8);
  a2[239] = vmovl_high_s16(v959);
  v963 = v1002;
  v964 = vmovl_high_s16(v1001);
  a2[240] = vmovl_s16(*(int16x4_t *)v1001.i8);
  a2[241] = v964;
  v965 = v1010;
  v966 = vmovl_high_s16(v1009);
  a2[242] = vmovl_s16(*(int16x4_t *)v1009.i8);
  a2[243] = v966;
  a2[244] = vmovl_s16(*(int16x4_t *)v961.i8);
  a2[245] = vmovl_high_s16(v961);
  v967 = v1026;
  v968 = vmovl_high_s16(v1025);
  a2[246] = vmovl_s16(*(int16x4_t *)v1025.i8);
  a2[247] = v968;
  a2[248] = vmovl_s16(*(int16x4_t *)v963.i8);
  a2[249] = vmovl_high_s16(v963);
  a2[250] = vmovl_s16(*(int16x4_t *)v965.i8);
  a2[251] = vmovl_high_s16(v965);
  a2[252] = vmovl_s16(*(int16x4_t *)v921.i8);
  a2[253] = vmovl_high_s16(v921);
  a2[254] = vmovl_s16(*(int16x4_t *)v967.i8);
  a2[255] = vmovl_high_s16(v967);
}

int16x8_t dct_body_first_pass(int16x8_t *a1, int16x8_t *a2)
{
  int16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int32x4_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int32x4_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int32x4_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int16x8_t v258;
  int16x8_t v259;
  int16x8_t v260;
  int16x8_t v261;
  int16x8_t v262;
  int16x8_t v263;
  int16x8_t v264;
  int16x8_t v265;
  int16x8_t v266;
  int16x8_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int16x8_t v270;
  int16x8_t v271;
  int16x8_t result;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int16x8_t v303;
  int32x4_t v304;
  int16x8_t v305;
  int32x4_t v306;
  int16x8_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int16x8_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int16x8_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int16x8_t v329;
  int32x4_t v330;
  int16x8_t v331;
  int32x4_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int16x8_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int16x8_t v345;
  int32x4_t v346;
  int16x8_t v347;
  int32x4_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int32x4_t v351;
  int32x4_t v352;
  int16x8_t v353;
  int16x8_t v354;
  int16x8_t v355;
  int16x8_t v356;

  v3 = a1[1];
  v2 = a1[2];
  v5 = a1[13];
  v4 = a1[14];
  v6 = vaddq_s16(v4, v3);
  v7 = a1[3];
  v9 = a1[11];
  v8 = a1[12];
  v10 = vaddq_s16(v5, v2);
  v341 = vaddq_s16(v8, v7);
  v11 = a1[4];
  v12 = a1[5];
  v14 = a1[9];
  v13 = a1[10];
  v331 = vaddq_s16(v9, v11);
  v15 = vaddq_s16(v13, v12);
  v16 = a1[6];
  v307 = a1[7];
  v303 = a1[8];
  v17 = vaddq_s16(v14, v16);
  v18 = vsubq_s16(v12, v13);
  v19 = vsubq_s16(v11, v9);
  v20 = vsubq_s16(v7, v8);
  v21 = vsubq_s16(v2, v5);
  v345 = vsubq_s16(v3, v4);
  v347 = vsubq_s16(v16, v14);
  v22 = vdupq_n_s16(0x2D41u);
  v24 = a1[26];
  v23 = a1[27];
  v25 = a1[20];
  v26 = a1[21];
  v27 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v23.i8, *(int16x4_t *)v22.i8), 0xEuLL), (int16x8_t)vrshrq_n_s32(vmlal_high_s16(vmull_high_s16(v25, v22), v23, v22), 0xEuLL));
  v28 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v25.i8, *(int16x4_t *)v22.i8), 0xEuLL), (int16x8_t)vrshrq_n_s32(vmlsl_high_s16(vmull_high_s16(v23, v22), v25, v22), 0xEuLL));
  v29 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v24.i8, *(int16x4_t *)v22.i8), 0xEuLL), (int16x8_t)vrshrq_n_s32(vmlal_high_s16(vmull_high_s16(v26, v22), v24, v22), 0xEuLL));
  v323 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v26.i8, *(int16x4_t *)v22.i8), 0xEuLL), (int16x8_t)vrshrq_n_s32(vmlsl_high_s16(vmull_high_s16(v24, v22), v26, v22), 0xEuLL));
  v31 = a1[24];
  v30 = a1[25];
  v32 = a1[22];
  v33 = a1[23];
  v34 = vmlal_s16(vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v30.i8, *(int16x4_t *)v22.i8);
  v35 = vmlal_high_s16(vmull_high_s16(v32, v22), v30, v22);
  v343 = vmlsl_s16(vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v32.i8, *(int16x4_t *)v22.i8);
  v36 = vmlsl_high_s16(vmull_high_s16(v30, v22), v32, v22);
  v339 = vmlal_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v31.i8, *(int16x4_t *)v22.i8);
  v335 = vmlsl_s16(vmull_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v33.i8, *(int16x4_t *)v22.i8);
  v337 = vmlal_high_s16(vmull_high_s16(v33, v22), v31, v22);
  v333 = vmlsl_high_s16(vmull_high_s16(v31, v22), v33, v22);
  v355 = vaddq_s16(v15, v10);
  v356 = vaddq_s16(v17, v6);
  v37 = vsubq_s16(v10, v15);
  v38 = vsubq_s16(v6, v17);
  v326 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v18.i8, *(int16x4_t *)v22.i8), 0xEuLL), (int16x8_t)vrshrq_n_s32(vmlsl_high_s16(vmull_high_s16(v21, v22), v18, v22), 0xEuLL));
  v329 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v21.i8, *(int16x4_t *)v22.i8), 0xEuLL), (int16x8_t)vrshrq_n_s32(vmlal_high_s16(vmull_high_s16(v18, v22), v21, v22), 0xEuLL));
  v316 = vmlal_s16(vmull_s16(*(int16x4_t *)v19.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v20.i8, *(int16x4_t *)v22.i8);
  v312 = vmlsl_s16(vmull_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v22.i8);
  v314 = vmlal_high_s16(vmull_high_s16(v19, v22), v20, v22);
  v310 = vmlsl_high_s16(vmull_high_s16(v20, v22), v19, v22);
  v39 = vmlal_s16(vmull_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v38.i8, *(int16x4_t *)v22.i8);
  v40 = vmlal_high_s16(vmull_high_s16(v37, v22), v38, v22);
  v41 = vmlsl_s16(vmull_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v37.i8, *(int16x4_t *)v22.i8);
  v42 = vmlsl_high_s16(vmull_high_s16(v38, v22), v37, v22);
  v44 = a1[18];
  v43 = a1[19];
  v45 = vaddq_s16(v44, v323);
  v46 = a1[28];
  v47 = a1[29];
  v48 = vaddq_s16(v47, v29);
  v49 = v29;
  v50 = vdupq_n_s16(0x3B21u);
  v51 = vdupq_n_s16(0x187Eu);
  v52 = vmlal_s16(vmull_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v48.i8, *(int16x4_t *)v50.i8);
  v53 = vmlal_high_s16(vmull_high_s16(v45, v51), v48, v50);
  v54 = vmlsl_s16(vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v45.i8, *(int16x4_t *)v50.i8);
  v55 = vmlsl_high_s16(vmull_high_s16(v48, v51), v45, v50);
  v56 = vaddq_s16(v43, v28);
  v57 = vaddq_s16(v46, v27);
  v58 = v27;
  v301 = vmlal_s16(vmull_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v57.i8, *(int16x4_t *)v50.i8);
  v299 = vmlal_high_s16(vmull_high_s16(v56, v51), v57, v50);
  v295 = vmlsl_high_s16(vmull_high_s16(v57, v51), v56, v50);
  v297 = vmlsl_s16(vmull_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v56.i8, *(int16x4_t *)v50.i8);
  v305 = a1[15];
  v59 = vaddq_s16(v305, *a1);
  v60 = vaddq_s16(v303, v307);
  v353 = vaddq_s16(v331, v341);
  v354 = vaddq_s16(v60, v59);
  v61 = vsubq_s16(v356, v355);
  v62 = vsubq_s16(v354, v353);
  v352 = vmlal_s16(vmull_s16(*(int16x4_t *)v61.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v62.i8, *(int16x4_t *)v50.i8);
  v351 = vmlal_high_s16(vmull_high_s16(v61, v51), v62, v50);
  v349 = vmlsl_high_s16(vmull_high_s16(v62, v51), v61, v50);
  v350 = vmlsl_s16(vmull_s16(*(int16x4_t *)v62.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v61.i8, *(int16x4_t *)v50.i8);
  v63 = vaddq_s16(v326, v347);
  v64 = vaddq_s16(v329, v345);
  v288 = vmlal_s16(vmull_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v64.i8, *(int16x4_t *)v50.i8);
  v65 = vmlal_high_s16(vmull_high_s16(v63, v51), v64, v50);
  v66 = vmlsl_s16(vmull_s16(*(int16x4_t *)v64.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v63.i8, *(int16x4_t *)v50.i8);
  v67 = vmlsl_high_s16(vmull_high_s16(v64, v51), v63, v50);
  v68 = vsubq_s16(v43, v28);
  v69 = vsubq_s16(v44, v323);
  v70 = vsubq_s16(v47, v49);
  v71 = vsubq_s16(v46, v58);
  v72 = vsubq_s16(v347, v326);
  v73 = vdupq_n_s16(0xC4DFu);
  v74 = vsubq_s16(v345, v329);
  v327 = vmlal_s16(vmull_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v73.i8), *(int16x4_t *)v71.i8, *(int16x4_t *)v51.i8);
  v324 = vmlal_high_s16(vmull_high_s16(v68, v73), v71, v51);
  v318 = vmlsl_high_s16(vmull_high_s16(v71, v73), v68, v51);
  v319 = vmlsl_s16(vmull_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v73.i8), *(int16x4_t *)v68.i8, *(int16x4_t *)v51.i8);
  v75 = vmlal_s16(vmull_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v73.i8), *(int16x4_t *)v70.i8, *(int16x4_t *)v51.i8);
  v76 = vmlal_high_s16(vmull_high_s16(v69, v73), v70, v51);
  v77 = vmlsl_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v73.i8), *(int16x4_t *)v69.i8, *(int16x4_t *)v51.i8);
  v78 = vmlsl_high_s16(vmull_high_s16(v70, v73), v69, v51);
  v79 = vmlal_s16(vmull_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v73.i8), *(int16x4_t *)v74.i8, *(int16x4_t *)v51.i8);
  v80 = vmull_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v73.i8);
  v81 = vmull_high_s16(v74, v73);
  v82 = vmlal_high_s16(vmull_high_s16(v72, v73), v74, v51);
  v83 = vmlsl_s16(v80, *(int16x4_t *)v72.i8, *(int16x4_t *)v51.i8);
  v291 = vmlsl_high_s16(v81, v72, v51);
  v293 = v79;
  v84 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(v34, 0xEuLL), (int16x8_t)vrshrq_n_s32(v35, 0xEuLL));
  v85 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(v343, 0xEuLL), (int16x8_t)vrshrq_n_s32(v36, 0xEuLL));
  v86 = vsubq_s16(v341, v331);
  v87 = vsubq_s16(v59, v60);
  v88 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(v39, 0xEuLL), (int16x8_t)vrshrq_n_s32(v40, 0xEuLL));
  v89 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(v41, 0xEuLL), (int16x8_t)vrshrq_n_s32(v42, 0xEuLL));
  v90 = vqrshrn_high_n_s32(vqrshrn_n_s32(v52, 0xEuLL), v53, 0xEuLL);
  v91 = vqrshrn_high_n_s32(vqrshrn_n_s32(v54, 0xEuLL), v55, 0xEuLL);
  v92 = vaddq_s16(v89, v86);
  v93 = vdupq_n_s16(0x3EC5u);
  v94 = vaddq_s16(v88, v87);
  v95 = vdupq_n_s16(0xC7Cu);
  v348 = vmlal_s16(vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v94.i8, *(int16x4_t *)v93.i8);
  v346 = vmlal_high_s16(vmull_high_s16(v92, v95), v94, v93);
  v342 = vmlsl_high_s16(vmull_high_s16(v94, v95), v92, v93);
  v344 = vmlsl_s16(vmull_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v92.i8, *(int16x4_t *)v93.i8);
  v96 = a1[17];
  v97 = vaddq_s16(v96, v85);
  v98 = a1[30];
  v99 = vaddq_s16(v98, v84);
  v100 = vaddq_s16(v91, v97);
  v101 = vaddq_s16(v90, v99);
  v102 = vmlal_s16(vmull_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v101.i8, *(int16x4_t *)v93.i8);
  v103 = vmlal_high_s16(vmull_high_s16(v100, v95), v101, v93);
  v104 = vmlsl_s16(vmull_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v100.i8, *(int16x4_t *)v93.i8);
  v105 = vmlsl_high_s16(vmull_high_s16(v101, v95), v100, v93);
  v106 = vsubq_s16(v97, v91);
  v107 = vsubq_s16(v99, v90);
  v108 = vdupq_n_s16(0xC13Bu);
  v109 = vmlal_s16(vmull_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v108.i8), *(int16x4_t *)v107.i8, *(int16x4_t *)v95.i8);
  v110 = vmull_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v108.i8);
  v111 = vmull_high_s16(v107, v108);
  v112 = vmlal_high_s16(vmull_high_s16(v106, v108), v107, v95);
  v113 = vmlsl_s16(v110, *(int16x4_t *)v106.i8, *(int16x4_t *)v95.i8);
  v114 = vmlsl_high_s16(v111, v106, v95);
  v115 = vsubq_s16(v96, v85);
  v116 = vsubq_s16(v98, v84);
  v117 = vqrshrn_high_n_s32(vqrshrn_n_s32(v75, 0xEuLL), v76, 0xEuLL);
  v118 = vqrshrn_high_n_s32(vqrshrn_n_s32(v77, 0xEuLL), v78, 0xEuLL);
  v119 = vsubq_s16(v86, v89);
  v120 = vsubq_s16(v87, v88);
  v121 = vdupq_n_s16(0x238Eu);
  v122 = vdupq_n_s16(0x3537u);
  v332 = vmlal_s16(vmull_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v122.i8), *(int16x4_t *)v120.i8, *(int16x4_t *)v121.i8);
  v330 = vmlal_high_s16(vmull_high_s16(v119, v122), v120, v121);
  v321 = vmlsl_high_s16(vmull_high_s16(v120, v122), v119, v121);
  v322 = vmlsl_s16(vmull_s16(*(int16x4_t *)v120.i8, *(int16x4_t *)v122.i8), *(int16x4_t *)v119.i8, *(int16x4_t *)v121.i8);
  v123 = vsubq_s16(v115, v118);
  v124 = vsubq_s16(v116, v117);
  v125 = vmlal_s16(vmull_s16(*(int16x4_t *)v123.i8, *(int16x4_t *)v122.i8), *(int16x4_t *)v124.i8, *(int16x4_t *)v121.i8);
  v126 = vmlal_high_s16(vmull_high_s16(v123, v122), v124, v121);
  v127 = vmlsl_s16(vmull_s16(*(int16x4_t *)v124.i8, *(int16x4_t *)v122.i8), *(int16x4_t *)v123.i8, *(int16x4_t *)v121.i8);
  v128 = vmlsl_high_s16(vmull_high_s16(v124, v122), v123, v121);
  v129 = vaddq_s16(v118, v115);
  v130 = vaddq_s16(v117, v116);
  v131 = vdupq_n_s16(0xDC72u);
  v290 = vmlal_s16(vmull_s16(*(int16x4_t *)v129.i8, *(int16x4_t *)v131.i8), *(int16x4_t *)v130.i8, *(int16x4_t *)v122.i8);
  v132 = vmlal_high_s16(vmull_high_s16(v129, v131), v130, v122);
  v285 = vmlsl_high_s16(vmull_high_s16(v130, v131), v129, v122);
  v286 = vmlsl_s16(vmull_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v131.i8), *(int16x4_t *)v129.i8, *(int16x4_t *)v122.i8);
  v133 = vsubq_s16(v307, v303);
  v134 = vsubq_s16(*a1, v305);
  v135 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(v316, 0xEuLL), (int16x8_t)vrshrq_n_s32(v314, 0xEuLL));
  v136 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(v312, 0xEuLL), (int16x8_t)vrshrq_n_s32(v310, 0xEuLL));
  v137 = vqrshrn_high_n_s32(vqrshrn_n_s32(v288, 0xEuLL), v65, 0xEuLL);
  v138 = vqrshrn_high_n_s32(vqrshrn_n_s32(v66, 0xEuLL), v67, 0xEuLL);
  v139 = vaddq_s16(v136, v133);
  v140 = vaddq_s16(v135, v134);
  v141 = vaddq_s16(v138, v139);
  v142 = vdupq_n_s16(0x3FB1u);
  v143 = vaddq_s16(v137, v140);
  v144 = vdupq_n_s16(0x646u);
  v317 = vmlal_s16(vmull_s16(*(int16x4_t *)v141.i8, *(int16x4_t *)v144.i8), *(int16x4_t *)v143.i8, *(int16x4_t *)v142.i8);
  v313 = vmlsl_s16(vmull_s16(*(int16x4_t *)v143.i8, *(int16x4_t *)v144.i8), *(int16x4_t *)v141.i8, *(int16x4_t *)v142.i8);
  v315 = vmlal_high_s16(vmull_high_s16(v141, v144), v143, v142);
  v145 = vmlsl_high_s16(vmull_high_s16(v143, v144), v141, v142);
  v146 = vsubq_s16(v139, v138);
  v147 = vdupq_n_s16(0x289Au);
  v148 = vdupq_n_s16(0x3179u);
  v149 = vsubq_s16(v140, v137);
  v309 = vmlal_s16(vmull_s16(*(int16x4_t *)v146.i8, *(int16x4_t *)v148.i8), *(int16x4_t *)v149.i8, *(int16x4_t *)v147.i8);
  v311 = v145;
  v306 = vmlsl_s16(vmull_s16(*(int16x4_t *)v149.i8, *(int16x4_t *)v148.i8), *(int16x4_t *)v146.i8, *(int16x4_t *)v147.i8);
  v308 = vmlal_high_s16(vmull_high_s16(v146, v148), v149, v147);
  v304 = vmlsl_high_s16(vmull_high_s16(v149, v148), v146, v147);
  v150 = vsubq_s16(v133, v136);
  v151 = vsubq_s16(v134, v135);
  v152 = vqrshrn_high_n_s32(vqrshrn_n_s32(v293, 0xEuLL), v82, 0xEuLL);
  v153 = vqrshrn_high_n_s32(vqrshrn_n_s32(v83, 0xEuLL), v291, 0xEuLL);
  v154 = vsubq_s16(v150, v153);
  v155 = vsubq_s16(v151, v152);
  v156 = vdupq_n_s16(0x3871u);
  v157 = vdupq_n_s16(0x1E2Bu);
  v294 = vmlal_s16(vmull_s16(*(int16x4_t *)v154.i8, *(int16x4_t *)v157.i8), *(int16x4_t *)v155.i8, *(int16x4_t *)v156.i8);
  v292 = vmlal_high_s16(vmull_high_s16(v154, v157), v155, v156);
  v287 = vmlsl_high_s16(vmull_high_s16(v155, v157), v154, v156);
  v289 = vmlsl_s16(vmull_s16(*(int16x4_t *)v155.i8, *(int16x4_t *)v157.i8), *(int16x4_t *)v154.i8, *(int16x4_t *)v156.i8);
  v158 = vaddq_s16(v153, v150);
  v159 = vaddq_s16(v152, v151);
  v160 = vdupq_n_s16(0x1294u);
  v161 = vdupq_n_s16(0x3D3Fu);
  v284 = vmlal_s16(vmull_s16(*(int16x4_t *)v158.i8, *(int16x4_t *)v161.i8), *(int16x4_t *)v159.i8, *(int16x4_t *)v160.i8);
  v282 = vmlsl_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v161.i8), *(int16x4_t *)v158.i8, *(int16x4_t *)v160.i8);
  v283 = vmlal_high_s16(vmull_high_s16(v158, v161), v159, v160);
  v281 = vmlsl_high_s16(vmull_high_s16(v159, v161), v158, v160);
  v162 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(v339, 0xEuLL), (int16x8_t)vrshrq_n_s32(v337, 0xEuLL));
  v163 = vuzp1q_s16((int16x8_t)vrshrq_n_s32(v335, 0xEuLL), (int16x8_t)vrshrq_n_s32(v333, 0xEuLL));
  v164 = vqrshrn_high_n_s32(vqrshrn_n_s32(v301, 0xEuLL), v299, 0xEuLL);
  v165 = vqrshrn_high_n_s32(vqrshrn_n_s32(v297, 0xEuLL), v295, 0xEuLL);
  v166 = vqrshrn_high_n_s32(vqrshrn_n_s32(v102, 0xEuLL), v103, 0xEuLL);
  v167 = vqrshrn_high_n_s32(vqrshrn_n_s32(v104, 0xEuLL), v105, 0xEuLL);
  v168 = a1[16];
  v169 = a1[31];
  v170 = vaddq_s16(v168, v163);
  v171 = vaddq_s16(v169, v162);
  v172 = vaddq_s16(v165, v170);
  v173 = vaddq_s16(v164, v171);
  v174 = vaddq_s16(v167, v172);
  v175 = vdupq_n_s16(0x3FECu);
  v176 = vaddq_s16(v166, v173);
  v177 = vdupq_n_s16(0x324u);
  v340 = vmlal_s16(vmull_s16(*(int16x4_t *)v174.i8, *(int16x4_t *)v177.i8), *(int16x4_t *)v176.i8, *(int16x4_t *)v175.i8);
  v336 = vmlsl_s16(vmull_s16(*(int16x4_t *)v176.i8, *(int16x4_t *)v177.i8), *(int16x4_t *)v174.i8, *(int16x4_t *)v175.i8);
  v338 = vmlal_high_s16(vmull_high_s16(v174, v177), v176, v175);
  v334 = vmlsl_high_s16(vmull_high_s16(v176, v177), v174, v175);
  v178 = vsubq_s16(v172, v167);
  v179 = vdupq_n_s16(0x2AFBu);
  v180 = vdupq_n_s16(0x2F6Cu);
  v181 = vsubq_s16(v173, v166);
  v302 = vmlal_s16(vmull_s16(*(int16x4_t *)v178.i8, *(int16x4_t *)v180.i8), *(int16x4_t *)v181.i8, *(int16x4_t *)v179.i8);
  v298 = vmlsl_s16(vmull_s16(*(int16x4_t *)v181.i8, *(int16x4_t *)v180.i8), *(int16x4_t *)v178.i8, *(int16x4_t *)v179.i8);
  v300 = vmlal_high_s16(vmull_high_s16(v178, v180), v181, v179);
  v296 = vmlsl_high_s16(vmull_high_s16(v181, v180), v178, v179);
  v182 = vsubq_s16(v170, v165);
  v183 = vsubq_s16(v171, v164);
  v184 = vqrshrn_high_n_s32(vqrshrn_n_s32(v109, 0xEuLL), v112, 0xEuLL);
  v185 = vqrshrn_high_n_s32(vqrshrn_n_s32(v113, 0xEuLL), v114, 0xEuLL);
  v186 = vsubq_s16(v182, v185);
  v187 = vsubq_s16(v183, v184);
  v188 = vdupq_n_s16(0x39DBu);
  v189 = vdupq_n_s16(0x1B5Du);
  v280 = vmlal_s16(vmull_s16(*(int16x4_t *)v186.i8, *(int16x4_t *)v189.i8), *(int16x4_t *)v187.i8, *(int16x4_t *)v188.i8);
  v278 = vmlsl_s16(vmull_s16(*(int16x4_t *)v187.i8, *(int16x4_t *)v189.i8), *(int16x4_t *)v186.i8, *(int16x4_t *)v188.i8);
  v279 = vmlal_high_s16(vmull_high_s16(v186, v189), v187, v188);
  v190 = vaddq_s16(v185, v182);
  v191 = vaddq_s16(v184, v183);
  v192 = vdupq_n_s16(0x1590u);
  v193 = vdupq_n_s16(0x3C42u);
  v276 = vmlal_s16(vmull_s16(*(int16x4_t *)v190.i8, *(int16x4_t *)v193.i8), *(int16x4_t *)v191.i8, *(int16x4_t *)v192.i8);
  v277 = vmlsl_high_s16(vmull_high_s16(v187, v189), v186, v188);
  v274 = vmlsl_s16(vmull_s16(*(int16x4_t *)v191.i8, *(int16x4_t *)v193.i8), *(int16x4_t *)v190.i8, *(int16x4_t *)v192.i8);
  v275 = vmlal_high_s16(vmull_high_s16(v190, v193), v191, v192);
  v273 = vmlsl_high_s16(vmull_high_s16(v191, v193), v190, v192);
  v194 = vsubq_s16(v168, v163);
  v195 = vsubq_s16(v169, v162);
  v196 = vqrshrn_high_n_s32(vqrshrn_n_s32(v327, 0xEuLL), v324, 0xEuLL);
  v197 = vqrshrn_high_n_s32(vqrshrn_n_s32(v319, 0xEuLL), v318, 0xEuLL);
  v198 = vqrshrn_high_n_s32(vqrshrn_n_s32(v125, 0xEuLL), v126, 0xEuLL);
  v199 = vqrshrn_high_n_s32(vqrshrn_n_s32(v127, 0xEuLL), v128, 0xEuLL);
  v200 = vsubq_s16(v194, v197);
  v201 = vsubq_s16(v195, v196);
  v202 = vaddq_s16(v199, v200);
  v203 = vdupq_n_s16(0x3E15u);
  v204 = vdupq_n_s16(0xF8Du);
  v205 = vaddq_s16(v198, v201);
  v328 = vmlal_s16(vmull_s16(*(int16x4_t *)v202.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v205.i8, *(int16x4_t *)v203.i8);
  v206 = vmlal_high_s16(vmull_high_s16(v202, v204), v205, v203);
  v325 = vmlsl_s16(vmull_s16(*(int16x4_t *)v205.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v202.i8, *(int16x4_t *)v203.i8);
  v320 = vmlsl_high_s16(vmull_high_s16(v205, v204), v202, v203);
  v207 = vsubq_s16(v200, v199);
  v208 = vsubq_s16(v201, v198);
  v209 = vdupq_n_s16(0x20E7u);
  v210 = vdupq_n_s16(0x36E5u);
  v211 = vmlal_s16(vmull_s16(*(int16x4_t *)v207.i8, *(int16x4_t *)v210.i8), *(int16x4_t *)v208.i8, *(int16x4_t *)v209.i8);
  v212 = vmlal_high_s16(vmull_high_s16(v207, v210), v208, v209);
  v213 = vmlsl_s16(vmull_s16(*(int16x4_t *)v208.i8, *(int16x4_t *)v210.i8), *(int16x4_t *)v207.i8, *(int16x4_t *)v209.i8);
  v214 = vmlsl_high_s16(vmull_high_s16(v208, v210), v207, v209);
  v215 = vaddq_s16(v197, v194);
  v216 = vaddq_s16(v196, v195);
  v217 = vqrshrn_high_n_s32(vqrshrn_n_s32(v290, 0xEuLL), v132, 0xEuLL);
  v218 = vqrshrn_high_n_s32(vqrshrn_n_s32(v286, 0xEuLL), v285, 0xEuLL);
  v219 = vsubq_s16(v215, v218);
  v220 = vdupq_n_s16(0x3368u);
  v221 = vsubq_s16(v216, v217);
  v222 = vdupq_n_s16(0x2620u);
  v223 = vmlal_s16(vmull_s16(*(int16x4_t *)v219.i8, *(int16x4_t *)v222.i8), *(int16x4_t *)v221.i8, *(int16x4_t *)v220.i8);
  v224 = vmlal_high_s16(vmull_high_s16(v219, v222), v221, v220);
  v225 = vmlsl_s16(vmull_s16(*(int16x4_t *)v221.i8, *(int16x4_t *)v222.i8), *(int16x4_t *)v219.i8, *(int16x4_t *)v220.i8);
  v226 = vmlsl_high_s16(vmull_high_s16(v221, v222), v219, v220);
  v227 = vaddq_s16(v218, v215);
  v228 = vdupq_n_s16(0x964u);
  v229 = vdupq_n_s16(0x3F4Fu);
  v230 = vaddq_s16(v217, v216);
  v231 = vmlal_s16(vmull_s16(*(int16x4_t *)v227.i8, *(int16x4_t *)v229.i8), *(int16x4_t *)v230.i8, *(int16x4_t *)v228.i8);
  v232 = vmlal_high_s16(vmull_high_s16(v227, v229), v230, v228);
  v233 = vmlsl_s16(vmull_s16(*(int16x4_t *)v230.i8, *(int16x4_t *)v229.i8), *(int16x4_t *)v227.i8, *(int16x4_t *)v228.i8);
  v234 = vmlsl_high_s16(vmull_high_s16(v230, v229), v227, v228);
  v235 = vaddq_s16(v354, v353);
  v236 = vaddq_s16(v356, v355);
  v237 = vaddq_s16(v235, v236);
  v238 = vsubq_s16(v235, v236);
  v239 = vdupq_n_s16(0x5A82u);
  v240 = vqrdmulhq_s16(v237, v239);
  v241 = vqrdmulhq_s16(v238, v239);
  v242 = vqrshrn_high_n_s32(vqrshrn_n_s32(v352, 0xEuLL), v351, 0xEuLL);
  v243 = vqrshrn_high_n_s32(vqrshrn_n_s32(v350, 0xEuLL), v349, 0xEuLL);
  v244 = vqrshrn_high_n_s32(vqrshrn_n_s32(v348, 0xEuLL), v346, 0xEuLL);
  v245 = vqrshrn_high_n_s32(vqrshrn_n_s32(v344, 0xEuLL), v342, 0xEuLL);
  v246 = vqrshrn_high_n_s32(vqrshrn_n_s32(v332, 0xEuLL), v330, 0xEuLL);
  v247 = vqrshrn_high_n_s32(vqrshrn_n_s32(v322, 0xEuLL), v321, 0xEuLL);
  v248 = vqrshrn_high_n_s32(vqrshrn_n_s32(v317, 0xEuLL), v315, 0xEuLL);
  v249 = vqrshrn_high_n_s32(vqrshrn_n_s32(v313, 0xEuLL), v311, 0xEuLL);
  v250 = vqrshrn_high_n_s32(vqrshrn_n_s32(v309, 0xEuLL), v308, 0xEuLL);
  v251 = vqrshrn_high_n_s32(vqrshrn_n_s32(v306, 0xEuLL), v304, 0xEuLL);
  v252 = vqrshrn_high_n_s32(vqrshrn_n_s32(v294, 0xEuLL), v292, 0xEuLL);
  v253 = vqrshrn_high_n_s32(vqrshrn_n_s32(v289, 0xEuLL), v287, 0xEuLL);
  v254 = vqrshrn_high_n_s32(vqrshrn_n_s32(v284, 0xEuLL), v283, 0xEuLL);
  v255 = vqrshrn_high_n_s32(vqrshrn_n_s32(v282, 0xEuLL), v281, 0xEuLL);
  v256 = vqrshrn_high_n_s32(vqrshrn_n_s32(v340, 0xEuLL), v338, 0xEuLL);
  v257 = vqrshrn_high_n_s32(vqrshrn_n_s32(v336, 0xEuLL), v334, 0xEuLL);
  *a2 = vrshrq_n_s16(vsraq_n_s16(v240, v240, 0xFuLL), 2uLL);
  a2[1] = vrshrq_n_s16(vsraq_n_s16(v256, v256, 0xFuLL), 2uLL);
  a2[30] = vrshrq_n_s16(vsraq_n_s16(v249, v249, 0xFuLL), 2uLL);
  a2[31] = vrshrq_n_s16(vsraq_n_s16(v257, v257, 0xFuLL), 2uLL);
  v258 = vqrshrn_high_n_s32(vqrshrn_n_s32(v302, 0xEuLL), v300, 0xEuLL);
  v259 = vqrshrn_high_n_s32(vqrshrn_n_s32(v298, 0xEuLL), v296, 0xEuLL);
  a2[16] = vrshrq_n_s16(vsraq_n_s16(v241, v241, 0xFuLL), 2uLL);
  a2[17] = vrshrq_n_s16(vsraq_n_s16(v258, v258, 0xFuLL), 2uLL);
  a2[14] = vrshrq_n_s16(vsraq_n_s16(v251, v251, 0xFuLL), 2uLL);
  a2[15] = vrshrq_n_s16(vsraq_n_s16(v259, v259, 0xFuLL), 2uLL);
  v260 = vqrshrn_high_n_s32(vqrshrn_n_s32(v280, 0xEuLL), v279, 0xEuLL);
  v261 = vqrshrn_high_n_s32(vqrshrn_n_s32(v278, 0xEuLL), v277, 0xEuLL);
  a2[8] = vrshrq_n_s16(vsraq_n_s16(v242, v242, 0xFuLL), 2uLL);
  a2[9] = vrshrq_n_s16(vsraq_n_s16(v260, v260, 0xFuLL), 2uLL);
  a2[22] = vrshrq_n_s16(vsraq_n_s16(v253, v253, 0xFuLL), 2uLL);
  a2[23] = vrshrq_n_s16(vsraq_n_s16(v261, v261, 0xFuLL), 2uLL);
  v262 = vqrshrn_high_n_s32(vqrshrn_n_s32(v276, 0xEuLL), v275, 0xEuLL);
  v263 = vqrshrn_high_n_s32(vqrshrn_n_s32(v274, 0xEuLL), v273, 0xEuLL);
  a2[24] = vrshrq_n_s16(vsraq_n_s16(v243, v243, 0xFuLL), 2uLL);
  a2[25] = vrshrq_n_s16(vsraq_n_s16(v262, v262, 0xFuLL), 2uLL);
  a2[6] = vrshrq_n_s16(vsraq_n_s16(v255, v255, 0xFuLL), 2uLL);
  a2[7] = vrshrq_n_s16(vsraq_n_s16(v263, v263, 0xFuLL), 2uLL);
  v264 = vqrshrn_high_n_s32(vqrshrn_n_s32(v328, 0xEuLL), v206, 0xEuLL);
  v265 = vqrshrn_high_n_s32(vqrshrn_n_s32(v325, 0xEuLL), v320, 0xEuLL);
  a2[4] = vrshrq_n_s16(vsraq_n_s16(v244, v244, 0xFuLL), 2uLL);
  a2[5] = vrshrq_n_s16(vsraq_n_s16(v264, v264, 0xFuLL), 2uLL);
  a2[26] = vrshrq_n_s16(vsraq_n_s16(v254, v254, 0xFuLL), 2uLL);
  a2[27] = vrshrq_n_s16(vsraq_n_s16(v265, v265, 0xFuLL), 2uLL);
  v266 = vqrshrn_high_n_s32(vqrshrn_n_s32(v211, 0xEuLL), v212, 0xEuLL);
  v267 = vqrshrn_high_n_s32(vqrshrn_n_s32(v213, 0xEuLL), v214, 0xEuLL);
  a2[20] = vrshrq_n_s16(vsraq_n_s16(v246, v246, 0xFuLL), 2uLL);
  a2[21] = vrshrq_n_s16(vsraq_n_s16(v266, v266, 0xFuLL), 2uLL);
  a2[10] = vrshrq_n_s16(vsraq_n_s16(v252, v252, 0xFuLL), 2uLL);
  a2[11] = vrshrq_n_s16(vsraq_n_s16(v267, v267, 0xFuLL), 2uLL);
  v268 = vqrshrn_high_n_s32(vqrshrn_n_s32(v223, 0xEuLL), v224, 0xEuLL);
  v269 = vqrshrn_high_n_s32(vqrshrn_n_s32(v225, 0xEuLL), v226, 0xEuLL);
  a2[12] = vrshrq_n_s16(vsraq_n_s16(v247, v247, 0xFuLL), 2uLL);
  a2[13] = vrshrq_n_s16(vsraq_n_s16(v268, v268, 0xFuLL), 2uLL);
  a2[18] = vrshrq_n_s16(vsraq_n_s16(v250, v250, 0xFuLL), 2uLL);
  a2[19] = vrshrq_n_s16(vsraq_n_s16(v269, v269, 0xFuLL), 2uLL);
  v270 = vqrshrn_high_n_s32(vqrshrn_n_s32(v231, 0xEuLL), v232, 0xEuLL);
  v271 = vqrshrn_high_n_s32(vqrshrn_n_s32(v233, 0xEuLL), v234, 0xEuLL);
  a2[28] = vrshrq_n_s16(vsraq_n_s16(v245, v245, 0xFuLL), 2uLL);
  a2[29] = vrshrq_n_s16(vsraq_n_s16(v270, v270, 0xFuLL), 2uLL);
  result = vrshrq_n_s16(vsraq_n_s16(v248, v248, 0xFuLL), 2uLL);
  a2[2] = result;
  a2[3] = vrshrq_n_s16(vsraq_n_s16(v271, v271, 0xFuLL), 2uLL);
  return result;
}

int32x4_t dct_body_second_pass(int16x8_t *a1, int16x8_t *a2)
{
  int16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int32x4_t v304;
  int32x4_t v305;
  int32x4_t v306;
  int32x4_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int32x4_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int32x4_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int32x4_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int32x4_t v351;
  int32x4_t v352;
  int32x4_t v353;
  int32x4_t v354;
  int32x4_t v355;
  int32x4_t v356;
  int32x4_t v357;
  int32x4_t v358;
  int32x4_t v359;
  int32x4_t v360;
  int32x4_t v361;
  int32x4_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int32x4_t v367;
  int32x4_t v368;
  int32x4_t v369;
  int32x4_t v370;
  int32x4_t v371;
  int32x4_t v372;
  int32x4_t v373;
  int32x4_t v374;
  int32x4_t v375;
  int32x4_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int32x4_t v382;
  int32x4_t v383;
  int32x4_t v384;
  int32x4_t v385;
  int32x4_t v386;
  int32x4_t v387;
  int32x4_t v388;
  int16x8_t v389;
  int16x8_t v390;
  int32x4_t v391;
  int32x4_t v392;
  int16x8_t v393;
  int32x4_t v394;
  int32x4_t v395;
  int16x8_t v396;
  int32x4_t v397;
  int32x4_t v398;
  int16x8_t v399;
  int32x4_t v400;
  int32x4_t v401;
  int16x8_t v402;
  int32x4_t v403;
  int32x4_t v404;
  int16x8_t v405;
  int32x4_t v406;
  int32x4_t v407;
  int16x8_t v408;
  int32x4_t v409;
  int32x4_t v410;
  int16x8_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int16x8_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int16x8_t v417;
  int32x4_t v418;
  int32x4_t v419;
  int16x8_t v420;
  int32x4_t v421;
  int32x4_t v422;
  int16x8_t v423;
  int32x4_t v424;
  int32x4_t v425;
  int16x8_t v426;
  int32x4_t v427;
  int32x4_t v428;
  int16x8_t v429;
  int32x4_t v430;
  int32x4_t v431;
  int16x8_t v432;
  int32x4_t v433;
  int32x4_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int32x4_t v438;
  int32x4_t v439;
  int32x4_t v440;
  int32x4_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int32x4_t v444;
  int32x4_t v445;
  int32x4_t v446;
  int32x4_t v447;
  int32x4_t v448;
  int32x4_t v449;
  int32x4_t v450;
  int32x4_t v451;
  int32x4_t v452;
  int32x4_t v453;
  int32x4_t v454;
  int32x4_t v455;
  int32x4_t v456;
  int32x4_t v457;
  int32x4_t v458;
  int32x4_t v459;
  int32x4_t v460;
  int32x4_t v461;
  int32x4_t v462;
  int32x4_t v463;
  int32x4_t v464;
  int32x4_t v465;
  int32x4_t result;
  int32x4_t v467;
  int32x4_t v468;
  int32x4_t v469;
  int32x4_t v470;
  int32x4_t v471;
  int32x4_t v472;
  int32x4_t v473;
  int32x4_t v474;
  int32x4_t v475;
  int16x8_t v476;
  int32x4_t v477;
  int32x4_t v478;
  int32x4_t v479;
  int32x4_t v480;
  int32x4_t v481;
  int32x4_t v482;
  int32x4_t v483;
  int32x4_t v484;
  int32x4_t v485;
  int32x4_t v486;
  int32x4_t v487;
  int32x4_t v488;
  int32x4_t v489;
  int32x4_t v490;
  int32x4_t v491;
  int32x4_t v492;
  int32x4_t v493;
  int32x4_t v494;
  int32x4_t v495;
  int32x4_t v496;
  int16x8_t v497;
  int32x4_t v498;
  int16x8_t v499;
  int32x4_t v500;
  int16x8_t v501;
  int32x4_t v502;
  int32x4_t v503;
  int32x4_t v504;
  int32x4_t v505;
  int32x4_t v506;
  int32x4_t v507;
  int32x4_t v508;
  int32x4_t v509;
  int32x4_t v510;
  int32x4_t v511;
  int32x4_t v512;
  int32x4_t v513;
  int32x4_t v514;
  int32x4_t v515;
  int32x4_t v516;
  int32x4_t v517;
  int16x8_t v518;
  int32x4_t v519;
  int16x8_t v520;
  int32x4_t v521;
  int16x8_t v522;
  int32x4_t v523;
  int32x4_t v524;
  int16x8_t v525;
  int32x4_t v526;
  int16x8_t v527;
  int32x4_t v528;
  int16x8_t v529;
  int32x4_t v530;
  int32x4_t v531;
  int32x4_t v532;
  int32x4_t v533;
  int32x4_t v534;
  int32x4_t v535;
  int32x4_t v536;
  int32x4_t v537;
  int32x4_t v538;
  int32x4_t v539;
  int16x8_t v540;
  int32x4_t v541;
  int32x4_t v542;
  int32x4_t v543;
  int32x4_t v544;
  int32x4_t v545;
  int32x4_t v546;
  int32x4_t v547;
  int32x4_t v548;
  int16x8_t v549;
  int32x4_t v550;
  int32x4_t v551;
  int32x4_t v552;
  int32x4_t v553;
  int32x4_t v554;
  int32x4_t v555;
  int32x4_t v556;
  int32x4_t v557;
  int32x4_t v558;
  int32x4_t v559;
  int32x4_t v560;
  int32x4_t v561;
  int32x4_t v562;
  int32x4_t v563;
  int32x4_t v564;
  int16x8_t v565;
  int32x4_t v566;
  int16x8_t v567;
  int32x4_t v568;
  int16x8_t v569;
  int32x4_t v570;
  int32x4_t v571;
  int32x4_t v572;
  int32x4_t v573;
  int32x4_t v574;
  int32x4_t v575;
  int32x4_t v576;
  int32x4_t v577;
  int16x8_t v578;
  int32x4_t v579;
  int16x8_t v580;
  int16x8_t v581;
  int32x4_t v582;
  int16x8_t v583;
  int16x8_t v584;
  int32x4_t v585;
  int16x8_t v586;
  int16x8_t v587;
  int32x4_t v588;

  v2 = a1[4];
  v3 = a1[5];
  v5 = a1[26];
  v4 = a1[27];
  v6 = vaddq_s16(v5, v3);
  v7 = a1[10];
  v8 = a1[11];
  v10 = a1[20];
  v9 = a1[21];
  v11 = vaddq_s16(v9, v7);
  v583 = vaddq_s16(v10, v8);
  v586 = vaddq_s16(v4, v2);
  v12 = vsubq_s16(v8, v10);
  v13 = vsubq_s16(v7, v9);
  v14 = a1[8];
  v565 = a1[23];
  v567 = a1[9];
  v569 = a1[22];
  v15 = vsubq_s16(v567, v569);
  v16 = vsubq_s16(v14, v565);
  v17 = a1[6];
  v580 = a1[7];
  v19 = a1[24];
  v18 = a1[25];
  v20 = vsubq_s16(v580, v19);
  v21 = vsubq_s16(v17, v18);
  v22 = vsubq_s16(v3, v5);
  v23 = vsubq_s16(v2, v4);
  v24 = vdupq_n_s16(0x2D41u);
  v25 = vmlal_s16(vmull_s16(*(int16x4_t *)v12.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v23.i8, *(int16x4_t *)v24.i8);
  v576 = vmlal_high_s16(vmull_high_s16(v12, v24), v23, v24);
  v26 = vmlsl_s16(vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v12.i8, *(int16x4_t *)v24.i8);
  v27 = vmlsl_high_s16(vmull_high_s16(v23, v24), v12, v24);
  v572 = vmlal_s16(vmull_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v22.i8, *(int16x4_t *)v24.i8);
  v574 = vmlal_high_s16(vmull_high_s16(v13, v24), v22, v24);
  v28 = vmlsl_s16(vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v13.i8, *(int16x4_t *)v24.i8);
  v29 = vmlsl_high_s16(vmull_high_s16(v22, v24), v13, v24);
  v551 = vmlal_s16(vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v21.i8, *(int16x4_t *)v24.i8);
  v553 = vmlsl_s16(vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v15.i8, *(int16x4_t *)v24.i8);
  v555 = vmlsl_high_s16(vmull_high_s16(v21, v24), v15, v24);
  v557 = vmlal_high_s16(vmull_high_s16(v15, v24), v21, v24);
  v507 = vmlal_s16(vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v20.i8, *(int16x4_t *)v24.i8);
  v516 = vmlal_high_s16(vmull_high_s16(v16, v24), v20, v24);
  v503 = vmlsl_s16(vmull_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v16.i8, *(int16x4_t *)v24.i8);
  v505 = vmlsl_high_s16(vmull_high_s16(v20, v24), v16, v24);
  v30 = a1[2];
  v31 = a1[3];
  v33 = a1[28];
  v32 = a1[29];
  v34 = vaddq_s16(v32, v30);
  v35 = a1[12];
  v36 = a1[13];
  v38 = a1[18];
  v37 = a1[19];
  v39 = vaddq_s16(v38, v36);
  v40 = vsubq_s16(v6, v11);
  v41 = vsubq_s16(v34, v39);
  v42 = vmlal_s16(vmull_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v41.i8, *(int16x4_t *)v24.i8);
  v43 = vmlal_high_s16(vmull_high_s16(v40, v24), v41, v24);
  v44 = vmlsl_s16(vmull_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v40.i8, *(int16x4_t *)v24.i8);
  v45 = vmlsl_high_s16(vmull_high_s16(v41, v24), v40, v24);
  v46 = vaddq_s16(v33, v31);
  v47 = vaddq_s16(v37, v35);
  v48 = vsubq_s16(v586, v583);
  v49 = vsubq_s16(v46, v47);
  v536 = vmlal_s16(vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v49.i8, *(int16x4_t *)v24.i8);
  v538 = vmlal_high_s16(vmull_high_s16(v48, v24), v49, v24);
  v532 = vmlsl_s16(vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v48.i8, *(int16x4_t *)v24.i8);
  v534 = vmlsl_high_s16(vmull_high_s16(v49, v24), v48, v24);
  v50 = vaddq_s16(v18, v17);
  v581 = vaddq_s16(v19, v580);
  v578 = vaddq_s16(v565, v14);
  v51 = vaddq_s16(v569, v567);
  v52 = vsubq_s16(v36, v38);
  v53 = vsubq_s16(v35, v37);
  v54 = vsubq_s16(v31, v33);
  v55 = vsubq_s16(v30, v32);
  v518 = vaddq_s16(v39, v34);
  v522 = vaddq_s16(v47, v46);
  v520 = vaddq_s16(v583, v586);
  v499 = vaddq_s16(v51, v50);
  v501 = vaddq_s16(v11, v6);
  v56 = vsubq_s16(v50, v51);
  v549 = a1[1];
  v57 = vaddq_s16(a1[30], v549);
  v540 = a1[14];
  v529 = a1[17];
  v584 = a1[16];
  v587 = a1[15];
  v58 = vaddq_s16(v529, v540);
  v497 = vaddq_s16(v58, v57);
  v59 = vsubq_s16(v57, v58);
  v60 = vshlq_n_s32(vrshrq_n_s32(v28, 0xEuLL), 0x10uLL);
  v61 = vmovl_s16(*(int16x4_t *)v52.i8);
  v570 = vsubq_s32(v61, vshrq_n_s32(v60, 0x10uLL));
  v62 = vsraq_n_s32(v61, v60, 0x10uLL);
  v63 = vshlq_n_s32(vrshrq_n_s32(v26, 0xEuLL), 0x10uLL);
  v64 = vmovl_s16(*(int16x4_t *)v53.i8);
  v65 = vsubq_s32(v64, vshrq_n_s32(v63, 0x10uLL));
  v66 = vsraq_n_s32(v64, v63, 0x10uLL);
  v67 = vshrq_n_s32(vshlq_n_s32(vrshrq_n_s32(v27, 0xEuLL), 0x10uLL), 0x10uLL);
  v68 = vaddw_high_s16(v67, v53);
  v69 = vsubq_s32(vmovl_high_s16(v53), v67);
  v70 = vshrq_n_s32(vshlq_n_s32(vrshrq_n_s32(v29, 0xEuLL), 0x10uLL), 0x10uLL);
  v71 = vaddw_high_s16(v70, v52);
  v72 = vsubq_s32(vmovl_high_s16(v52), v70);
  v73 = vshlq_n_s32(vrshrq_n_s32(v25, 0xEuLL), 0x10uLL);
  v74 = vmovl_s16(*(int16x4_t *)v54.i8);
  v75 = vsubq_s32(v74, vshrq_n_s32(v73, 0x10uLL));
  v76 = vsraq_n_s32(v74, v73, 0x10uLL);
  v77 = vshrq_n_s32(vshlq_n_s32(vrshrq_n_s32(v576, 0xEuLL), 0x10uLL), 0x10uLL);
  v78 = vsubq_s32(vmovl_high_s16(v54), v77);
  v79 = vaddw_high_s16(v77, v54);
  v80 = vshlq_n_s32(vrshrq_n_s32(v572, 0xEuLL), 0x10uLL);
  v81 = vmovl_s16(*(int16x4_t *)v55.i8);
  v82 = vsubq_s32(v81, vshrq_n_s32(v80, 0x10uLL));
  v83 = vsraq_n_s32(v81, v80, 0x10uLL);
  v84 = vshrq_n_s32(vshlq_n_s32(vrshrq_n_s32(v574, 0xEuLL), 0x10uLL), 0x10uLL);
  v85 = vsubq_s32(vmovl_high_s16(v55), v84);
  v86 = vaddw_high_s16(v84, v55);
  v87 = vmovl_s16(*(int16x4_t *)v56.i8);
  v509 = vsubq_s32(v87, vrshrq_n_s32(v44, 0xEuLL));
  v88 = vrsraq_n_s32(v87, v44, 0xEuLL);
  v89 = vrshrq_n_s32(v45, 0xEuLL);
  v90 = vaddw_high_s16(v89, v56);
  v494 = vsubq_s32(vmovl_high_s16(v56), v89);
  v91 = vmovl_s16(*(int16x4_t *)v59.i8);
  v92 = vsubq_s32(v91, vrshrq_n_s32(v42, 0xEuLL));
  v93 = vrsraq_n_s32(v91, v42, 0xEuLL);
  v94 = vrshrq_n_s32(v43, 0xEuLL);
  v95 = vsubq_s32(vmovl_high_s16(v59), v94);
  v96 = vaddw_high_s16(v94, v59);
  v97 = vdupq_n_s32(0x3B21u);
  v98 = vdupq_n_s32(0x187Eu);
  v99 = vmlaq_s32(vmulq_s32(v83, v97), v62, v98);
  v100 = vdupq_n_s32(0xFFFFC4DF);
  v101 = vmlaq_s32(vmulq_s32(v83, v98), v62, v100);
  v102 = vmlaq_s32(vmulq_s32(v86, v97), v71, v98);
  v103 = vmlaq_s32(vmulq_s32(v86, v98), v71, v100);
  v490 = vmlaq_s32(vmulq_s32(v76, v97), v66, v98);
  v486 = vmlaq_s32(vmulq_s32(v76, v98), v66, v100);
  v488 = vmlaq_s32(vmulq_s32(v79, v97), v68, v98);
  v484 = vmlaq_s32(vmulq_s32(v79, v98), v68, v100);
  v104 = vmulq_s32(v75, v98);
  v105 = vmulq_s32(v75, v100);
  v106 = vdupq_n_s32(0xFFFFE782);
  v548 = vmlaq_s32(v104, v65, v100);
  v546 = vmlaq_s32(v105, v65, v106);
  v547 = vmlaq_s32(vmulq_s32(v78, v98), v69, v100);
  v545 = vmlaq_s32(vmulq_s32(v78, v100), v69, v106);
  v474 = vmlaq_s32(vmulq_s32(v82, v100), v570, v106);
  v107 = vmlaq_s32(vmulq_s32(v85, v98), v72, v100);
  v108 = vmlaq_s32(vmulq_s32(v85, v100), v72, v106);
  v480 = vmlaq_s32(vmulq_s32(v82, v98), v570, v100);
  v476 = a1[31];
  v525 = vaddq_s16(v584, v587);
  v527 = vaddq_s16(v476, *a1);
  v109 = vaddq_s16(v525, v527);
  v110 = vaddq_s16(v578, v581);
  v571 = vaddl_s16(*(int16x4_t *)v518.i8, *(int16x4_t *)v501.i8);
  v573 = vaddl_s16(*(int16x4_t *)v497.i8, *(int16x4_t *)v499.i8);
  v564 = vaddl_s16(*(int16x4_t *)v522.i8, *(int16x4_t *)v520.i8);
  v566 = vaddl_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v110.i8);
  v111 = vsubq_s32(v573, v571);
  v112 = vsubq_s32(v566, v564);
  v575 = vmlaq_s32(vmulq_s32(v111, v100), v112, v98);
  v577 = vmlaq_s32(vmulq_s32(v111, v98), v112, v97);
  v562 = vaddl_high_s16(v497, v499);
  v560 = vaddl_high_s16(v109, v110);
  v561 = vaddl_high_s16(v518, v501);
  v559 = vaddl_high_s16(v522, v520);
  v113 = vsubq_s32(v562, v561);
  v114 = vsubq_s32(v560, v559);
  v563 = vmlaq_s32(vmulq_s32(v113, v98), v114, v97);
  v568 = vmlaq_s32(vmulq_s32(v113, v100), v114, v98);
  v470 = vmlaq_s32(vmulq_s32(v93, v97), v88, v98);
  v115 = vmlaq_s32(vmulq_s32(v93, v98), v88, v100);
  v116 = vmlaq_s32(vmulq_s32(v96, v97), v90, v98);
  v117 = vmlaq_s32(vmulq_s32(v96, v98), v90, v100);
  v514 = vmlaq_s32(vmulq_s32(v92, v98), v509, v100);
  v510 = vmlaq_s32(vmulq_s32(v92, v100), v509, v106);
  v512 = vmlaq_s32(vmulq_s32(v95, v98), v494, v100);
  v482 = vmlaq_s32(vmulq_s32(v95, v100), v494, v106);
  v118 = vsubq_s16(v540, v529);
  v119 = vsubq_s16(v549, a1[30]);
  v120 = vsubl_s16(*(int16x4_t *)v522.i8, *(int16x4_t *)v520.i8);
  v121 = vsubl_high_s16(v522, v520);
  v122 = vsubl_s16(*(int16x4_t *)v518.i8, *(int16x4_t *)v501.i8);
  v123 = vsubl_high_s16(v518, v501);
  v124 = vsubl_s16(*(int16x4_t *)v497.i8, *(int16x4_t *)v499.i8);
  v125 = vsubl_high_s16(v497, v499);
  v126 = vsubl_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v110.i8);
  v127 = vsubl_high_s16(v109, v110);
  v128 = vshlq_n_s32(vrshrq_n_s32(v551, 0xEuLL), 0x10uLL);
  v129 = vmovl_s16(*(int16x4_t *)v119.i8);
  v130 = vsubq_s32(v129, vshrq_n_s32(v128, 0x10uLL));
  v131 = vsraq_n_s32(v129, v128, 0x10uLL);
  v132 = vaddq_s32(v124, v122);
  v133 = vsubq_s32(v124, v122);
  v134 = vaddq_s32(v125, v123);
  v135 = vsubq_s32(v125, v123);
  v541 = vshlq_n_s32(vrshrq_n_s32(v553, 0xEuLL), 0x10uLL);
  v543 = vmovl_s16(*(int16x4_t *)v118.i8);
  v136 = vsraq_n_s32(v543, v541, 0x10uLL);
  v523 = vsubq_s32(v136, vrshrq_n_s32(v101, 0xEuLL));
  v137 = vrsraq_n_s32(v136, v101, 0xEuLL);
  v530 = vshrq_n_s32(vshlq_n_s32(vrshrq_n_s32(v555, 0xEuLL), 0x10uLL), 0x10uLL);
  v138 = vaddw_high_s16(v530, v118);
  v139 = vsubq_s32(v138, vrshrq_n_s32(v103, 0xEuLL));
  v140 = vrsraq_n_s32(v138, v103, 0xEuLL);
  v141 = vsubq_s32(v131, vrshrq_n_s32(v99, 0xEuLL));
  v142 = vrsraq_n_s32(v131, v99, 0xEuLL);
  v143 = vshrq_n_s32(vshlq_n_s32(vrshrq_n_s32(v557, 0xEuLL), 0x10uLL), 0x10uLL);
  v144 = vaddw_high_s16(v143, v119);
  v145 = vsubq_s32(v144, vrshrq_n_s32(v102, 0xEuLL));
  v146 = vrsraq_n_s32(v144, v102, 0xEuLL);
  v147 = vdupq_n_s32(0x5A820000u);
  v148 = vqrdmulhq_s32(v132, v147);
  v149 = vqrdmulhq_s32(v133, v147);
  v150 = vaddq_s32(v148, v126);
  v151 = v126;
  v152 = vdupq_n_s32(0x3EC5u);
  v153 = vdupq_n_s32(0xC7Cu);
  v154 = vmulq_s32(v150, v153);
  v155 = vaddq_s32(v149, v120);
  v554 = vmlaq_s32(vmulq_s32(v150, v152), v155, v153);
  v156 = vdupq_n_s32(0xFFFFC13B);
  v558 = vmlaq_s32(v154, v155, v156);
  v157 = vqrdmulhq_s32(v134, v147);
  v158 = vqrdmulhq_s32(v135, v147);
  v159 = vaddq_s32(v157, v127);
  v160 = vmulq_s32(v159, v152);
  v161 = vmulq_s32(v159, v153);
  v162 = vaddq_s32(v158, v121);
  v550 = v147;
  v552 = vmlaq_s32(v160, v162, v153);
  v556 = vmlaq_s32(v161, v162, v156);
  v163 = vmlaq_s32(vmulq_s32(v142, v152), v137, v153);
  v164 = vmlaq_s32(vmulq_s32(v142, v153), v137, v156);
  v165 = vmlaq_s32(vmulq_s32(v146, v152), v140, v153);
  v166 = vmlaq_s32(vmulq_s32(v146, v153), v140, v156);
  v492 = vmlaq_s32(vmulq_s32(v145, v153), v139, v156);
  v495 = vmlaq_s32(vmulq_s32(v141, v153), v523, v156);
  v167 = vdupq_n_s32(0xFFFFF384);
  v472 = vmlaq_s32(vmulq_s32(v141, v156), v523, v167);
  v168 = vmlaq_s32(vmulq_s32(v145, v156), v139, v167);
  v169 = vsubq_s32(v543, vshrq_n_s32(v541, 0x10uLL));
  v170 = vsubq_s32(vmovl_high_s16(v118), v530);
  v171 = vsubq_s32(vmovl_high_s16(v119), v143);
  v172 = vsubq_s32(v120, v149);
  v173 = vsubq_s32(v121, v158);
  v174 = vsubq_s32(v151, v148);
  v175 = vsubq_s32(v127, v157);
  v176 = vsubq_s32(v169, vrshrq_n_s32(v474, 0xEuLL));
  v177 = vrsraq_n_s32(v169, v474, 0xEuLL);
  v178 = vsubq_s32(v170, vrshrq_n_s32(v108, 0xEuLL));
  v179 = vrsraq_n_s32(v170, v108, 0xEuLL);
  v180 = vsubq_s32(v130, vrshrq_n_s32(v480, 0xEuLL));
  v181 = vrsraq_n_s32(v130, v480, 0xEuLL);
  v182 = vsubq_s32(v171, vrshrq_n_s32(v107, 0xEuLL));
  v183 = vrsraq_n_s32(v171, v107, 0xEuLL);
  v184 = vdupq_n_s32(0x238Eu);
  v185 = vdupq_n_s32(0x3537u);
  v186 = vdupq_n_s32(0xFFFFDC72);
  v498 = vmlaq_s32(vmulq_s32(v174, v185), v172, v186);
  v542 = vmlaq_s32(vmulq_s32(v175, v184), v173, v185);
  v544 = vmlaq_s32(vmulq_s32(v174, v184), v172, v185);
  v187 = vmlaq_s32(vmulq_s32(v175, v185), v173, v186);
  v188 = vmlaq_s32(vmulq_s32(v180, v184), v176, v185);
  v189 = vmlaq_s32(vmulq_s32(v180, v185), v176, v186);
  v190 = vmlaq_s32(vmulq_s32(v182, v184), v178, v185);
  v191 = vmlaq_s32(vmulq_s32(v182, v185), v178, v186);
  v192 = vmulq_s32(v183, v186);
  v193 = vmlaq_s32(vmulq_s32(v181, v185), v177, v186);
  v194 = vmlaq_s32(vmulq_s32(v183, v185), v179, v186);
  v195 = vdupq_n_s32(0xFFFFCAC9);
  v500 = vmlaq_s32(vmulq_s32(v181, v186), v177, v195);
  v502 = v194;
  v481 = vmlaq_s32(v192, v179, v195);
  v196 = vsubq_s16(v581, v578);
  v197 = vsubq_s16(v527, v525);
  v198 = vmovl_s16(*(int16x4_t *)v196.i8);
  v199 = vsubq_s32(v198, vrshrq_n_s32(v532, 0xEuLL));
  v200 = vrsraq_n_s32(v198, v532, 0xEuLL);
  v201 = vmovl_s16(*(int16x4_t *)v197.i8);
  v202 = vsubq_s32(v201, vrshrq_n_s32(v536, 0xEuLL));
  v203 = vrsraq_n_s32(v201, v536, 0xEuLL);
  v204 = vsubq_s32(v200, vrshrq_n_s32(v115, 0xEuLL));
  v205 = vrsraq_n_s32(v200, v115, 0xEuLL);
  v206 = vrshrq_n_s32(v534, 0xEuLL);
  v207 = vaddw_high_s16(v206, v196);
  v208 = vsubq_s32(v207, vrshrq_n_s32(v117, 0xEuLL));
  v209 = vrsraq_n_s32(v207, v117, 0xEuLL);
  v210 = vsubq_s32(v203, vrshrq_n_s32(v470, 0xEuLL));
  v211 = vrsraq_n_s32(v203, v470, 0xEuLL);
  v212 = vrshrq_n_s32(v538, 0xEuLL);
  v213 = vaddw_high_s16(v212, v197);
  v214 = vsubq_s32(v213, vrshrq_n_s32(v116, 0xEuLL));
  v215 = vdupq_n_s32(0x3FB1u);
  v216 = vrsraq_n_s32(v213, v116, 0xEuLL);
  v217 = vmulq_s32(v211, v215);
  v218 = vmulq_s32(v216, v215);
  v219 = vdupq_n_s32(0x646u);
  v220 = vmulq_s32(v211, v219);
  v221 = vdupq_n_s32(0xFFFFC04F);
  v533 = vmlaq_s32(v218, v209, v219);
  v535 = vmlaq_s32(v217, v205, v219);
  v579 = vmlaq_s32(v220, v205, v221);
  v582 = vmlaq_s32(vmulq_s32(v216, v219), v209, v221);
  v222 = vdupq_n_s32(0x289Au);
  v223 = vmulq_s32(v210, v222);
  v224 = vmulq_s32(v214, v222);
  v225 = vdupq_n_s32(0x3179u);
  v226 = vmulq_s32(v210, v225);
  v227 = vmulq_s32(v214, v225);
  v528 = vmlaq_s32(v223, v204, v225);
  v531 = vmlaq_s32(v224, v208, v225);
  v228 = vdupq_n_s32(0xFFFFD766);
  v537 = vmlaq_s32(v227, v208, v228);
  v539 = vmlaq_s32(v226, v204, v228);
  v229 = vsubq_s32(vmovl_high_s16(v196), v206);
  v230 = vsubq_s32(vmovl_high_s16(v197), v212);
  v231 = vsubq_s32(v199, vrshrq_n_s32(v510, 0xEuLL));
  v232 = vsubq_s32(v229, vrshrq_n_s32(v482, 0xEuLL));
  v233 = vsubq_s32(v202, vrshrq_n_s32(v514, 0xEuLL));
  v234 = vsubq_s32(v230, vrshrq_n_s32(v512, 0xEuLL));
  v235 = vdupq_n_s32(0x3871u);
  v236 = vmulq_s32(v233, v235);
  v237 = vmulq_s32(v234, v235);
  v238 = vdupq_n_s32(0x1E2Bu);
  v239 = vmulq_s32(v233, v238);
  v521 = vmlaq_s32(v236, v231, v238);
  v524 = vmlaq_s32(v237, v232, v238);
  v240 = vdupq_n_s32(0xFFFFC78F);
  v526 = vmlaq_s32(v239, v231, v240);
  v519 = vmlaq_s32(vmulq_s32(v234, v238), v232, v240);
  v241 = vrsraq_n_s32(v199, v510, 0xEuLL);
  v242 = vrsraq_n_s32(v229, v482, 0xEuLL);
  v243 = vrsraq_n_s32(v202, v514, 0xEuLL);
  v244 = vrsraq_n_s32(v230, v512, 0xEuLL);
  v245 = vdupq_n_s32(0x1294u);
  v246 = vmulq_s32(v243, v245);
  v247 = vdupq_n_s32(0x3D3Fu);
  v248 = vmulq_s32(v244, v245);
  v249 = vmulq_s32(v243, v247);
  v513 = vmlaq_s32(v248, v242, v247);
  v515 = vmlaq_s32(v246, v241, v247);
  v250 = vdupq_n_s32(0xFFFFED6C);
  v511 = vmlaq_s32(v249, v241, v250);
  v483 = vmlaq_s32(vmulq_s32(v244, v247), v242, v250);
  v251 = vsubq_s16(v587, v584);
  v252 = vsubq_s16(*a1, v476);
  v253 = vshlq_n_s32(vrshrq_n_s32(v507, 0xEuLL), 0x10uLL);
  v254 = vmovl_s16(*(int16x4_t *)v252.i8);
  v255 = vsubq_s32(v254, vshrq_n_s32(v253, 0x10uLL));
  v256 = vsraq_n_s32(v254, v253, 0x10uLL);
  v257 = vshlq_n_s32(vrshrq_n_s32(v503, 0xEuLL), 0x10uLL);
  v478 = vmovl_s16(*(int16x4_t *)v251.i8);
  v258 = vsraq_n_s32(v478, v257, 0x10uLL);
  v259 = vsubq_s32(v258, vrshrq_n_s32(v486, 0xEuLL));
  v260 = vrsraq_n_s32(v258, v486, 0xEuLL);
  v261 = vshrq_n_s32(vshlq_n_s32(vrshrq_n_s32(v505, 0xEuLL), 0x10uLL), 0x10uLL);
  v262 = vaddw_high_s16(v261, v251);
  v263 = vsubq_s32(v262, vrshrq_n_s32(v484, 0xEuLL));
  v264 = vrsraq_n_s32(v262, v484, 0xEuLL);
  v265 = vsubq_s32(v256, vrshrq_n_s32(v490, 0xEuLL));
  v266 = vrsraq_n_s32(v256, v490, 0xEuLL);
  v267 = vshrq_n_s32(vshlq_n_s32(vrshrq_n_s32(v516, 0xEuLL), 0x10uLL), 0x10uLL);
  v268 = vaddw_high_s16(v267, v252);
  v269 = vsubq_s32(v268, vrshrq_n_s32(v488, 0xEuLL));
  v270 = vrsraq_n_s32(v268, v488, 0xEuLL);
  v271 = vsubq_s32(v260, vrshrq_n_s32(v164, 0xEuLL));
  v272 = vrsraq_n_s32(v260, v164, 0xEuLL);
  v273 = vsubq_s32(v264, vrshrq_n_s32(v166, 0xEuLL));
  v274 = vrsraq_n_s32(v264, v166, 0xEuLL);
  v275 = vsubq_s32(v266, vrshrq_n_s32(v163, 0xEuLL));
  v276 = vrsraq_n_s32(v266, v163, 0xEuLL);
  v277 = vsubq_s32(v270, vrshrq_n_s32(v165, 0xEuLL));
  v278 = vrsraq_n_s32(v270, v165, 0xEuLL);
  v279 = vdupq_n_s32(0x3FECu);
  v280 = vmulq_s32(v276, v279);
  v281 = vmulq_s32(v278, v279);
  v282 = vdupq_n_s32(0x324u);
  v283 = vmulq_s32(v276, v282);
  v284 = vmulq_s32(v278, v282);
  v508 = vmlaq_s32(v281, v274, v282);
  v285 = vdupq_n_s32(0xFFFFC014);
  v585 = vmlaq_s32(v280, v272, v282);
  v588 = vmlaq_s32(v283, v272, v285);
  v517 = vmlaq_s32(v284, v274, v285);
  v286 = vdupq_n_s32(0x2AFBu);
  v287 = vmulq_s32(v275, v286);
  v288 = vmulq_s32(v277, v286);
  v289 = vdupq_n_s32(0x2F6Cu);
  v290 = vmulq_s32(v275, v289);
  v291 = vmulq_s32(v277, v289);
  v292 = vmlaq_s32(v287, v271, v289);
  v293 = vmlaq_s32(v288, v273, v289);
  v294 = vdupq_n_s32(0xFFFFD505);
  v504 = v292;
  v506 = vmlaq_s32(v290, v271, v294);
  v489 = v293;
  v491 = vmlaq_s32(v291, v273, v294);
  v295 = vsubq_s32(v259, vrshrq_n_s32(v472, 0xEuLL));
  v296 = vsubq_s32(v263, vrshrq_n_s32(v168, 0xEuLL));
  v297 = vsubq_s32(v265, vrshrq_n_s32(v495, 0xEuLL));
  v298 = vsubq_s32(v269, vrshrq_n_s32(v492, 0xEuLL));
  v299 = vdupq_n_s32(0x39DBu);
  v300 = vmulq_s32(v297, v299);
  v301 = vmulq_s32(v298, v299);
  v302 = vdupq_n_s32(0x1B5Du);
  v303 = vmulq_s32(v297, v302);
  v304 = vdupq_n_s32(0xFFFFC625);
  v485 = vmlaq_s32(v300, v295, v302);
  v487 = vmlaq_s32(v303, v295, v304);
  v475 = vmlaq_s32(v301, v296, v302);
  v477 = vmlaq_s32(vmulq_s32(v298, v302), v296, v304);
  v305 = vrsraq_n_s32(v259, v472, 0xEuLL);
  v306 = vrsraq_n_s32(v263, v168, 0xEuLL);
  v307 = vrsraq_n_s32(v265, v495, 0xEuLL);
  v308 = vdupq_n_s32(0x1590u);
  v309 = vrsraq_n_s32(v269, v492, 0xEuLL);
  v310 = vmulq_s32(v307, v308);
  v311 = vmulq_s32(v309, v308);
  v312 = vdupq_n_s32(0x3C42u);
  v313 = vmulq_s32(v307, v312);
  v314 = vdupq_n_s32(0xFFFFEA70);
  v493 = vmlaq_s32(v313, v305, v314);
  v496 = vmlaq_s32(v310, v305, v312);
  v471 = vmlaq_s32(v311, v306, v312);
  v473 = vmlaq_s32(vmulq_s32(v309, v312), v306, v314);
  v315 = vsubq_s32(v478, vshrq_n_s32(v257, 0x10uLL));
  v316 = vsubq_s32(vmovl_high_s16(v251), v261);
  v317 = vsubq_s32(vmovl_high_s16(v252), v267);
  v318 = vsubq_s32(v315, vrshrq_n_s32(v546, 0xEuLL));
  v319 = vsubq_s32(v318, vrshrq_n_s32(v189, 0xEuLL));
  v320 = vrsraq_n_s32(v318, v189, 0xEuLL);
  v321 = vsubq_s32(v316, vrshrq_n_s32(v545, 0xEuLL));
  v322 = vsubq_s32(v321, vrshrq_n_s32(v191, 0xEuLL));
  v323 = vrsraq_n_s32(v321, v191, 0xEuLL);
  v324 = vsubq_s32(v255, vrshrq_n_s32(v548, 0xEuLL));
  v325 = vsubq_s32(v324, vrshrq_n_s32(v188, 0xEuLL));
  v326 = vrsraq_n_s32(v324, v188, 0xEuLL);
  v327 = vsubq_s32(v317, vrshrq_n_s32(v547, 0xEuLL));
  v328 = vsubq_s32(v327, vrshrq_n_s32(v190, 0xEuLL));
  v329 = vrsraq_n_s32(v327, v190, 0xEuLL);
  v330 = vdupq_n_s32(0x3E15u);
  v331 = vmulq_s32(v326, v330);
  v332 = vdupq_n_s32(0xF8Du);
  v333 = vmulq_s32(v329, v330);
  v334 = vmulq_s32(v326, v332);
  v468 = vmlaq_s32(v333, v323, v332);
  v469 = vmlaq_s32(v331, v320, v332);
  v335 = vdupq_n_s32(0xFFFFC1EB);
  v479 = vmlaq_s32(v334, v320, v335);
  v336 = vdupq_n_s32(0x20E7u);
  v467 = vmlaq_s32(vmulq_s32(v329, v332), v323, v335);
  v337 = vdupq_n_s32(0x36E5u);
  v338 = vmulq_s32(v325, v337);
  v339 = vmlaq_s32(vmulq_s32(v325, v336), v319, v337);
  v340 = vdupq_n_s32(0xFFFFDF19);
  v341 = vmlaq_s32(vmulq_s32(v328, v336), v322, v337);
  v342 = vmlaq_s32(v338, v319, v340);
  v343 = vmlaq_s32(vmulq_s32(v328, v337), v322, v340);
  v344 = vrsraq_n_s32(v315, v546, 0xEuLL);
  v345 = vrsraq_n_s32(v316, v545, 0xEuLL);
  v346 = vrsraq_n_s32(v255, v548, 0xEuLL);
  v347 = vrsraq_n_s32(v317, v547, 0xEuLL);
  v348 = vsubq_s32(v344, vrshrq_n_s32(v500, 0xEuLL));
  v349 = vsubq_s32(v345, vrshrq_n_s32(v481, 0xEuLL));
  v350 = vsubq_s32(v346, vrshrq_n_s32(v193, 0xEuLL));
  v351 = vsubq_s32(v347, vrshrq_n_s32(v502, 0xEuLL));
  v352 = vdupq_n_s32(0x3368u);
  v353 = vmulq_s32(v350, v352);
  v354 = vmulq_s32(v351, v352);
  v355 = vdupq_n_s32(0x2620u);
  v356 = vmulq_s32(v350, v355);
  v357 = vmlaq_s32(v353, v348, v355);
  v358 = vmlaq_s32(v354, v349, v355);
  v359 = vdupq_n_s32(0xFFFFCC98);
  v360 = vmlaq_s32(v356, v348, v359);
  v361 = vmlaq_s32(vmulq_s32(v351, v355), v349, v359);
  v362 = vrsraq_n_s32(v344, v500, 0xEuLL);
  v363 = vrsraq_n_s32(v345, v481, 0xEuLL);
  v364 = vrsraq_n_s32(v346, v193, 0xEuLL);
  v365 = vrsraq_n_s32(v347, v502, 0xEuLL);
  v366 = vdupq_n_s32(0x964u);
  v367 = vmulq_s32(v364, v366);
  v368 = vmulq_s32(v365, v366);
  v369 = vdupq_n_s32(0x3F4Fu);
  v370 = vmulq_s32(v364, v369);
  v371 = vmulq_s32(v365, v369);
  v372 = vmlaq_s32(v367, v362, v369);
  v373 = vmlaq_s32(v368, v363, v369);
  v374 = vdupq_n_s32(0xFFFFF69C);
  v375 = vmlaq_s32(v370, v362, v374);
  v376 = vmlaq_s32(v371, v363, v374);
  v377 = vaddq_s32(v566, v564);
  v378 = vaddq_s32(v560, v559);
  v379 = vaddq_s32(v573, v571);
  v380 = vaddq_s32(v562, v561);
  v381 = vaddq_s32(v377, v379);
  v382 = vsubq_s32(v377, v379);
  v383 = vaddq_s32(v378, v380);
  v384 = vsubq_s32(v378, v380);
  v385 = vqrdmulhq_s32(v381, v550);
  v386 = vqrdmulhq_s32(v383, v550);
  v387 = vqrdmulhq_s32(v382, v550);
  v388 = vqrdmulhq_s32(v384, v550);
  v382.i64[0] = 0x100000001;
  v382.i64[1] = 0x100000001;
  v389 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v385, (int32x4_t)vshrq_n_u32((uint32x4_t)v385, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v386, (int32x4_t)vshrq_n_u32((uint32x4_t)v386, 0x1FuLL)), v382), 2uLL);
  v390 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v387, (int32x4_t)vshrq_n_u32((uint32x4_t)v387, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v388, (int32x4_t)vshrq_n_u32((uint32x4_t)v388, 0x1FuLL)), v382), 2uLL);
  v391 = vrshrq_n_s32(v577, 0xEuLL);
  v392 = vrshrq_n_s32(v563, 0xEuLL);
  v393 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v391, (int32x4_t)vshrq_n_u32((uint32x4_t)v391, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v392, (int32x4_t)vshrq_n_u32((uint32x4_t)v392, 0x1FuLL)), v382), 2uLL);
  v394 = vrshrq_n_s32(v575, 0xEuLL);
  v395 = vrshrq_n_s32(v568, 0xEuLL);
  v396 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v394, (int32x4_t)vshrq_n_u32((uint32x4_t)v394, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v395, (int32x4_t)vshrq_n_u32((uint32x4_t)v395, 0x1FuLL)), v382), 2uLL);
  v397 = vrshrq_n_s32(v554, 0xEuLL);
  v398 = vrshrq_n_s32(v552, 0xEuLL);
  v399 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v397, (int32x4_t)vshrq_n_u32((uint32x4_t)v397, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v398, (int32x4_t)vshrq_n_u32((uint32x4_t)v398, 0x1FuLL)), v382), 2uLL);
  v400 = vrshrq_n_s32(v544, 0xEuLL);
  v401 = vrshrq_n_s32(v542, 0xEuLL);
  v402 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v400, (int32x4_t)vshrq_n_u32((uint32x4_t)v400, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v401, (int32x4_t)vshrq_n_u32((uint32x4_t)v401, 0x1FuLL)), v382), 2uLL);
  v403 = vrshrq_n_s32(v498, 0xEuLL);
  v404 = vrshrq_n_s32(v187, 0xEuLL);
  v405 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v403, (int32x4_t)vshrq_n_u32((uint32x4_t)v403, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v404, (int32x4_t)vshrq_n_u32((uint32x4_t)v404, 0x1FuLL)), v382), 2uLL);
  v406 = vrshrq_n_s32(v558, 0xEuLL);
  v407 = vrshrq_n_s32(v556, 0xEuLL);
  v408 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v406, (int32x4_t)vshrq_n_u32((uint32x4_t)v406, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v407, (int32x4_t)vshrq_n_u32((uint32x4_t)v407, 0x1FuLL)), v382), 2uLL);
  v409 = vrshrq_n_s32(v535, 0xEuLL);
  v410 = vrshrq_n_s32(v533, 0xEuLL);
  v411 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v409, (int32x4_t)vshrq_n_u32((uint32x4_t)v409, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v410, (int32x4_t)vshrq_n_u32((uint32x4_t)v410, 0x1FuLL)), v382), 2uLL);
  v412 = vrshrq_n_s32(v528, 0xEuLL);
  v413 = vrshrq_n_s32(v531, 0xEuLL);
  v414 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v412, (int32x4_t)vshrq_n_u32((uint32x4_t)v412, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v413, (int32x4_t)vshrq_n_u32((uint32x4_t)v413, 0x1FuLL)), v382), 2uLL);
  v415 = vrshrq_n_s32(v521, 0xEuLL);
  v416 = vrshrq_n_s32(v524, 0xEuLL);
  v417 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v415, (int32x4_t)vshrq_n_u32((uint32x4_t)v415, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v416, (int32x4_t)vshrq_n_u32((uint32x4_t)v416, 0x1FuLL)), v382), 2uLL);
  v418 = vrshrq_n_s32(v515, 0xEuLL);
  v419 = vrshrq_n_s32(v513, 0xEuLL);
  v420 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v418, (int32x4_t)vshrq_n_u32((uint32x4_t)v418, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v419, (int32x4_t)vshrq_n_u32((uint32x4_t)v419, 0x1FuLL)), v382), 2uLL);
  v421 = vrshrq_n_s32(v511, 0xEuLL);
  v422 = vrshrq_n_s32(v483, 0xEuLL);
  v423 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v421, (int32x4_t)vshrq_n_u32((uint32x4_t)v421, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v422, (int32x4_t)vshrq_n_u32((uint32x4_t)v422, 0x1FuLL)), v382), 2uLL);
  v424 = vrshrq_n_s32(v526, 0xEuLL);
  v425 = vrshrq_n_s32(v519, 0xEuLL);
  v426 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v424, (int32x4_t)vshrq_n_u32((uint32x4_t)v424, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v425, (int32x4_t)vshrq_n_u32((uint32x4_t)v425, 0x1FuLL)), v382), 2uLL);
  v427 = vrshrq_n_s32(v539, 0xEuLL);
  v428 = vrshrq_n_s32(v537, 0xEuLL);
  v429 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v427, (int32x4_t)vshrq_n_u32((uint32x4_t)v427, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v428, (int32x4_t)vshrq_n_u32((uint32x4_t)v428, 0x1FuLL)), v382), 2uLL);
  v430 = vrshrq_n_s32(v579, 0xEuLL);
  v431 = vrshrq_n_s32(v582, 0xEuLL);
  v432 = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v430, (int32x4_t)vshrq_n_u32((uint32x4_t)v430, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v431, (int32x4_t)vshrq_n_u32((uint32x4_t)v431, 0x1FuLL)), v382), 2uLL);
  v433 = vrshrq_n_s32(v585, 0xEuLL);
  v434 = vrshrq_n_s32(v508, 0xEuLL);
  *a2 = v389;
  a2[1] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v433, (int32x4_t)vshrq_n_u32((uint32x4_t)v433, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v434, (int32x4_t)vshrq_n_u32((uint32x4_t)v434, 0x1FuLL)), v382), 2uLL);
  v435 = vrshrq_n_s32(v588, 0xEuLL);
  v436 = vrshrq_n_s32(v517, 0xEuLL);
  a2[30] = v432;
  a2[31] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v435, (int32x4_t)vshrq_n_u32((uint32x4_t)v435, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v436, (int32x4_t)vshrq_n_u32((uint32x4_t)v436, 0x1FuLL)), v382), 2uLL);
  v437 = vrshrq_n_s32(v504, 0xEuLL);
  v438 = vrshrq_n_s32(v489, 0xEuLL);
  a2[16] = v390;
  a2[17] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v437, (int32x4_t)vshrq_n_u32((uint32x4_t)v437, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v438, (int32x4_t)vshrq_n_u32((uint32x4_t)v438, 0x1FuLL)), v382), 2uLL);
  v439 = vrshrq_n_s32(v506, 0xEuLL);
  v440 = vrshrq_n_s32(v491, 0xEuLL);
  a2[14] = v429;
  a2[15] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v439, (int32x4_t)vshrq_n_u32((uint32x4_t)v439, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v440, (int32x4_t)vshrq_n_u32((uint32x4_t)v440, 0x1FuLL)), v382), 2uLL);
  v441 = vrshrq_n_s32(v485, 0xEuLL);
  v442 = vrshrq_n_s32(v475, 0xEuLL);
  a2[8] = v393;
  a2[9] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v441, (int32x4_t)vshrq_n_u32((uint32x4_t)v441, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v442, (int32x4_t)vshrq_n_u32((uint32x4_t)v442, 0x1FuLL)), v382), 2uLL);
  v443 = vrshrq_n_s32(v487, 0xEuLL);
  v444 = vrshrq_n_s32(v477, 0xEuLL);
  a2[22] = v426;
  a2[23] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v443, (int32x4_t)vshrq_n_u32((uint32x4_t)v443, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v444, (int32x4_t)vshrq_n_u32((uint32x4_t)v444, 0x1FuLL)), v382), 2uLL);
  v445 = vrshrq_n_s32(v496, 0xEuLL);
  v446 = vrshrq_n_s32(v471, 0xEuLL);
  a2[24] = v396;
  a2[25] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v445, (int32x4_t)vshrq_n_u32((uint32x4_t)v445, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v446, (int32x4_t)vshrq_n_u32((uint32x4_t)v446, 0x1FuLL)), v382), 2uLL);
  v447 = vrshrq_n_s32(v493, 0xEuLL);
  v448 = vrshrq_n_s32(v473, 0xEuLL);
  a2[6] = v423;
  a2[7] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v447, (int32x4_t)vshrq_n_u32((uint32x4_t)v447, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v448, (int32x4_t)vshrq_n_u32((uint32x4_t)v448, 0x1FuLL)), v382), 2uLL);
  v449 = vrshrq_n_s32(v469, 0xEuLL);
  v450 = vrshrq_n_s32(v468, 0xEuLL);
  a2[4] = v399;
  a2[5] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v449, (int32x4_t)vshrq_n_u32((uint32x4_t)v449, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v450, (int32x4_t)vshrq_n_u32((uint32x4_t)v450, 0x1FuLL)), v382), 2uLL);
  v451 = vrshrq_n_s32(v479, 0xEuLL);
  v452 = vrshrq_n_s32(v467, 0xEuLL);
  a2[26] = v420;
  a2[27] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v451, (int32x4_t)vshrq_n_u32((uint32x4_t)v451, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v452, (int32x4_t)vshrq_n_u32((uint32x4_t)v452, 0x1FuLL)), v382), 2uLL);
  v453 = vrshrq_n_s32(v339, 0xEuLL);
  v454 = vrshrq_n_s32(v341, 0xEuLL);
  a2[20] = v402;
  a2[21] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v453, (int32x4_t)vshrq_n_u32((uint32x4_t)v453, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v454, (int32x4_t)vshrq_n_u32((uint32x4_t)v454, 0x1FuLL)), v382), 2uLL);
  v455 = vrshrq_n_s32(v342, 0xEuLL);
  v456 = vrshrq_n_s32(v343, 0xEuLL);
  a2[10] = v417;
  a2[11] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v455, (int32x4_t)vshrq_n_u32((uint32x4_t)v455, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v456, (int32x4_t)vshrq_n_u32((uint32x4_t)v456, 0x1FuLL)), v382), 2uLL);
  v457 = vrshrq_n_s32(v357, 0xEuLL);
  v458 = vrshrq_n_s32(v358, 0xEuLL);
  a2[12] = v405;
  a2[13] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v457, (int32x4_t)vshrq_n_u32((uint32x4_t)v457, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v458, (int32x4_t)vshrq_n_u32((uint32x4_t)v458, 0x1FuLL)), v382), 2uLL);
  v459 = vrshrq_n_s32(v360, 0xEuLL);
  v460 = vrshrq_n_s32(v361, 0xEuLL);
  a2[18] = v414;
  a2[19] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v459, (int32x4_t)vshrq_n_u32((uint32x4_t)v459, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v460, (int32x4_t)vshrq_n_u32((uint32x4_t)v460, 0x1FuLL)), v382), 2uLL);
  v461 = vrshrq_n_s32(v372, 0xEuLL);
  v462 = vrshrq_n_s32(v373, 0xEuLL);
  a2[28] = v408;
  a2[29] = vshrn_high_n_s32(vshrn_n_s32(vqaddq_s32(vqaddq_s32(v461, (int32x4_t)vshrq_n_u32((uint32x4_t)v461, 0x1FuLL)), v382), 2uLL), vqaddq_s32(vqaddq_s32(v462, (int32x4_t)vshrq_n_u32((uint32x4_t)v462, 0x1FuLL)), v382), 2uLL);
  v463 = vrshrq_n_s32(v375, 0xEuLL);
  v464 = vrshrq_n_s32(v376, 0xEuLL);
  v465 = vqaddq_s32(vqaddq_s32(v463, (int32x4_t)vshrq_n_u32((uint32x4_t)v463, 0x1FuLL)), v382);
  result = vqaddq_s32(vqaddq_s32(v464, (int32x4_t)vshrq_n_u32((uint32x4_t)v464, 0x1FuLL)), v382);
  a2[2] = v411;
  a2[3] = vshrn_high_n_s32(vshrn_n_s32(v465, 2uLL), result, 2uLL);
  return result;
}

void vpx_fdct32x32_rd_neon(int16x8_t *a1, int32x4_t *a2, int a3)
{
  int16x8_t *v4;
  uint64_t v5;
  int16x8_t v6;
  int16x8_t v7;
  uint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  uint64_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  uint64_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v33;
  int16x8_t v34;
  int16x8_t v35;
  uint64_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  uint64_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  int64x2_t v253;
  int64x2_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int64x2_t v266;
  int64x2_t v267;
  int64x2_t v268;
  int64x2_t v269;
  int64x2_t v270;
  int64x2_t v271;
  int64x2_t v272;
  int64x2_t v273;
  int64x2_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int64x2_t v283;
  int64x2_t v284;
  int64x2_t v285;
  int64x2_t v286;
  int64x2_t v287;
  int64x2_t v288;
  int64x2_t v289;
  int64x2_t v290;
  int64x2_t v291;
  int64x2_t v292;
  int64x2_t v293;
  int64x2_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int64x2_t v303;
  int64x2_t v304;
  int64x2_t v305;
  int64x2_t v306;
  int64x2_t v307;
  int64x2_t v308;
  int64x2_t v309;
  int64x2_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int64x2_t v319;
  int64x2_t v320;
  int64x2_t v321;
  int64x2_t v322;
  int64x2_t v323;
  int64x2_t v324;
  int64x2_t v325;
  int64x2_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int64x2_t v335;
  int64x2_t v336;
  int64x2_t v337;
  int64x2_t v338;
  int64x2_t v339;
  int64x2_t v340;
  int64x2_t v341;
  int64x2_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int32x4_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int64x2_t v351;
  int64x2_t v352;
  int64x2_t v353;
  int64x2_t v354;
  int64x2_t v355;
  int8x16_t v356;
  int64x2_t v357;
  int64x2_t v358;
  int64x2_t v359;
  int16x8_t v360;
  int32x4_t v361;
  int32x4_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int32x4_t v367;
  int32x4_t v368;
  int64x2_t v369;
  int64x2_t v370;
  int64x2_t v371;
  int64x2_t v372;
  int64x2_t v373;
  int64x2_t v374;
  int8x16_t v375;
  int8x16_t v376;
  int64x2_t v377;
  int64x2_t v378;
  int16x8_t v379;
  int32x4_t v380;
  int16x8_t v381;
  int32x4_t v382;
  int16x8_t v383;
  int32x4_t v384;
  int16x8_t v385;
  int32x4_t v386;
  int16x8_t v387;
  int32x4_t v388;
  int16x8_t v389;
  int32x4_t v390;
  int16x8_t v391;
  int32x4_t v392;
  int16x8_t v393;
  int32x4_t v394;
  int16x8_t v395;
  int32x4_t v396;
  int16x8_t v397;
  int32x4_t v398;
  int16x8_t v399;
  int32x4_t v400;
  int16x8_t v401;
  int32x4_t v402;
  int16x8_t v403;
  int32x4_t v404;
  int16x8_t v405;
  int32x4_t v406;
  int32x4_t v407;
  int32x4_t v408;
  int32x4_t v409;
  int32x4_t v410;
  int32x4_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int64x2_t v417;
  int64x2_t v418;
  int64x2_t v419;
  int64x2_t v420;
  int64x2_t v421;
  int64x2_t v422;
  int64x2_t v423;
  int64x2_t v424;
  int64x2_t v425;
  int64x2_t v426;
  int64x2_t v427;
  int64x2_t v428;
  int64x2_t v429;
  int64x2_t v430;
  int64x2_t v431;
  int64x2_t v432;
  int32x4_t v433;
  int32x4_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int32x4_t v438;
  int32x4_t v439;
  int32x4_t v440;
  int64x2_t v441;
  int64x2_t v442;
  int64x2_t v443;
  int64x2_t v444;
  int64x2_t v445;
  int64x2_t v446;
  int64x2_t v447;
  int64x2_t v448;
  int64x2_t v449;
  int64x2_t v450;
  int64x2_t v451;
  int64x2_t v452;
  int64x2_t v453;
  int64x2_t v454;
  int64x2_t v455;
  int64x2_t v456;
  int32x4_t v457;
  int32x4_t v458;
  int32x4_t v459;
  int32x4_t v460;
  int32x4_t v461;
  int32x4_t v462;
  int32x4_t v463;
  int32x4_t v464;
  int64x2_t v465;
  int64x2_t v466;
  int64x2_t v467;
  int64x2_t v468;
  int64x2_t v469;
  int64x2_t v470;
  int64x2_t v471;
  int64x2_t v472;
  int64x2_t v473;
  int64x2_t v474;
  int64x2_t v475;
  int64x2_t v476;
  int64x2_t v477;
  int64x2_t v478;
  int64x2_t v479;
  int64x2_t v480;
  int32x4_t v481;
  int32x4_t v482;
  int32x4_t v483;
  int32x4_t v484;
  int32x4_t v485;
  int32x4_t v486;
  int32x4_t v487;
  int32x4_t v488;
  int64x2_t v489;
  int64x2_t v490;
  int64x2_t v491;
  int64x2_t v492;
  int64x2_t v493;
  int64x2_t v494;
  int64x2_t v495;
  int64x2_t v496;
  int32x4_t v497;
  int32x4_t v498;
  int32x4_t v499;
  int32x4_t v500;
  int32x4_t v501;
  int32x4_t v502;
  int32x4_t v503;
  int32x4_t v504;
  int64x2_t v505;
  int64x2_t v506;
  int64x2_t v507;
  int64x2_t v508;
  int64x2_t v509;
  int64x2_t v510;
  int64x2_t v511;
  int64x2_t v512;
  int32x4_t v513;
  int32x4_t v514;
  int32x4_t v515;
  int32x4_t v516;
  int32x4_t v517;
  int32x4_t v518;
  int32x4_t v519;
  int32x4_t v520;
  int64x2_t v521;
  int64x2_t v522;
  int64x2_t v523;
  int64x2_t v524;
  int64x2_t v525;
  int64x2_t v526;
  int64x2_t v527;
  int64x2_t v528;
  int32x4_t v529;
  int32x4_t v530;
  int32x4_t v531;
  int32x4_t v532;
  int32x4_t v533;
  int32x4_t v534;
  int32x4_t v535;
  int32x4_t v536;
  int64x2_t v537;
  int64x2_t v538;
  int64x2_t v539;
  int64x2_t v540;
  int64x2_t v541;
  int8x16_t v542;
  int64x2_t v543;
  int64x2_t v544;
  int64x2_t v545;
  int16x8_t v546;
  int32x4_t v547;
  int32x4_t v548;
  int32x4_t v549;
  int32x4_t v550;
  int32x4_t v551;
  int32x4_t v552;
  int32x4_t v553;
  int32x4_t v554;
  int64x2_t v555;
  int64x2_t v556;
  int64x2_t v557;
  int64x2_t v558;
  int64x2_t v559;
  int64x2_t v560;
  int8x16_t v561;
  int8x16_t v562;
  int64x2_t v563;
  int64x2_t v564;
  int16x8_t v565;
  int32x4_t v566;
  int16x8_t v567;
  int32x4_t v568;
  int16x8_t v569;
  int32x4_t v570;
  int16x8_t v571;
  int32x4_t v572;
  int16x8_t v573;
  int32x4_t v574;
  int16x8_t v575;
  int32x4_t v576;
  int16x8_t v577;
  int32x4_t v578;
  int16x8_t v579;
  int32x4_t v580;
  int16x8_t v581;
  int32x4_t v582;
  int16x8_t v583;
  int32x4_t v584;
  int16x8_t v585;
  int32x4_t v586;
  int16x8_t v587;
  int32x4_t v588;
  int16x8_t v589;
  int32x4_t v590;
  int16x8_t v591;
  int32x4_t v592;
  int32x4_t v593;
  int32x4_t v594;
  int32x4_t v595;
  int32x4_t v596;
  int32x4_t v597;
  int32x4_t v598;
  int32x4_t v599;
  int32x4_t v600;
  int16x8_t v601;
  int16x8_t v602;
  int32x4_t v603;
  int32x4_t v604;
  int64x2_t v605;
  int64x2_t v606;
  int64x2_t v607;
  int64x2_t v608;
  int64x2_t v609;
  int64x2_t v610;
  int64x2_t v611;
  int64x2_t v612;
  int64x2_t v613;
  int64x2_t v614;
  int64x2_t v615;
  int64x2_t v616;
  int64x2_t v617;
  int64x2_t v618;
  int64x2_t v619;
  int64x2_t v620;
  int32x4_t v621;
  int32x4_t v622;
  int32x4_t v623;
  int32x4_t v624;
  int32x4_t v625;
  int32x4_t v626;
  int32x4_t v627;
  int32x4_t v628;
  int64x2_t v629;
  int64x2_t v630;
  int64x2_t v631;
  int64x2_t v632;
  int64x2_t v633;
  int64x2_t v634;
  int64x2_t v635;
  int64x2_t v636;
  int64x2_t v637;
  int64x2_t v638;
  int64x2_t v639;
  int64x2_t v640;
  int64x2_t v641;
  int64x2_t v642;
  int64x2_t v643;
  int64x2_t v644;
  int32x4_t v645;
  int32x4_t v646;
  int32x4_t v647;
  int32x4_t v648;
  int32x4_t v649;
  int32x4_t v650;
  int32x4_t v651;
  int32x4_t v652;
  int64x2_t v653;
  int64x2_t v654;
  int64x2_t v655;
  int64x2_t v656;
  int64x2_t v657;
  int64x2_t v658;
  int64x2_t v659;
  int64x2_t v660;
  int64x2_t v661;
  int64x2_t v662;
  int64x2_t v663;
  int64x2_t v664;
  int64x2_t v665;
  int64x2_t v666;
  int64x2_t v667;
  int64x2_t v668;
  int32x4_t v669;
  int32x4_t v670;
  int32x4_t v671;
  int32x4_t v672;
  int32x4_t v673;
  int32x4_t v674;
  int32x4_t v675;
  int32x4_t v676;
  int64x2_t v677;
  int64x2_t v678;
  int64x2_t v679;
  int64x2_t v680;
  int64x2_t v681;
  int64x2_t v682;
  int64x2_t v683;
  int64x2_t v684;
  int32x4_t v685;
  int32x4_t v686;
  int32x4_t v687;
  int32x4_t v688;
  int32x4_t v689;
  int32x4_t v690;
  int32x4_t v691;
  int32x4_t v692;
  int64x2_t v693;
  int64x2_t v694;
  int64x2_t v695;
  int64x2_t v696;
  int64x2_t v697;
  int64x2_t v698;
  int64x2_t v699;
  int64x2_t v700;
  int32x4_t v701;
  int32x4_t v702;
  int32x4_t v703;
  int32x4_t v704;
  int32x4_t v705;
  int32x4_t v706;
  int32x4_t v707;
  int32x4_t v708;
  int64x2_t v709;
  int64x2_t v710;
  int64x2_t v711;
  int64x2_t v712;
  int64x2_t v713;
  int64x2_t v714;
  int64x2_t v715;
  int64x2_t v716;
  int32x4_t v717;
  int32x4_t v718;
  int32x4_t v719;
  int32x4_t v720;
  int32x4_t v721;
  int32x4_t v722;
  int32x4_t v723;
  int32x4_t v724;
  int64x2_t v725;
  int64x2_t v726;
  int64x2_t v727;
  int64x2_t v728;
  int64x2_t v729;
  int8x16_t v730;
  int64x2_t v731;
  int64x2_t v732;
  int64x2_t v733;
  int16x8_t v734;
  int32x4_t v735;
  int32x4_t v736;
  int32x4_t v737;
  int32x4_t v738;
  int32x4_t v739;
  int32x4_t v740;
  int32x4_t v741;
  int32x4_t v742;
  int64x2_t v743;
  int64x2_t v744;
  int64x2_t v745;
  int64x2_t v746;
  int64x2_t v747;
  int64x2_t v748;
  int8x16_t v749;
  int8x16_t v750;
  int64x2_t v751;
  int64x2_t v752;
  int16x8_t v753;
  int32x4_t v754;
  int16x8_t v755;
  int32x4_t v756;
  int16x8_t v757;
  int32x4_t v758;
  int16x8_t v759;
  int32x4_t v760;
  int16x8_t v761;
  int32x4_t v762;
  int16x8_t v763;
  int32x4_t v764;
  int16x8_t v765;
  int32x4_t v766;
  int16x8_t v767;
  int32x4_t v768;
  int16x8_t v769;
  int32x4_t v770;
  int16x8_t v771;
  int32x4_t v772;
  int16x8_t v773;
  int32x4_t v774;
  int16x8_t v775;
  int32x4_t v776;
  int16x8_t v777;
  int32x4_t v778;
  int16x8_t v779;
  int32x4_t v780;
  int32x4_t v781;
  int32x4_t v782;
  int32x4_t v783;
  int32x4_t v784;
  int32x4_t v785;
  int32x4_t v786;
  int32x4_t v787;
  int32x4_t v788;
  int16x8_t v789;
  int16x8_t v790;
  int32x4_t v791;
  int32x4_t v792;
  int64x2_t v793;
  int64x2_t v794;
  int64x2_t v795;
  int64x2_t v796;
  int64x2_t v797;
  int64x2_t v798;
  int64x2_t v799;
  int64x2_t v800;
  int64x2_t v801;
  int64x2_t v802;
  int64x2_t v803;
  int64x2_t v804;
  int64x2_t v805;
  int64x2_t v806;
  int64x2_t v807;
  int64x2_t v808;
  int32x4_t v809;
  int32x4_t v810;
  int32x4_t v811;
  int32x4_t v812;
  int32x4_t v813;
  int32x4_t v814;
  int32x4_t v815;
  int32x4_t v816;
  int64x2_t v817;
  int64x2_t v818;
  int64x2_t v819;
  int64x2_t v820;
  int64x2_t v821;
  int64x2_t v822;
  int64x2_t v823;
  int64x2_t v824;
  int64x2_t v825;
  int64x2_t v826;
  int64x2_t v827;
  int64x2_t v828;
  int64x2_t v829;
  int64x2_t v830;
  int64x2_t v831;
  int64x2_t v832;
  int32x4_t v833;
  int32x4_t v834;
  int32x4_t v835;
  int32x4_t v836;
  int32x4_t v837;
  int32x4_t v838;
  int32x4_t v839;
  int32x4_t v840;
  int64x2_t v841;
  int64x2_t v842;
  int64x2_t v843;
  int64x2_t v844;
  int64x2_t v845;
  int64x2_t v846;
  int64x2_t v847;
  int64x2_t v848;
  int64x2_t v849;
  int64x2_t v850;
  int64x2_t v851;
  int64x2_t v852;
  int64x2_t v853;
  int64x2_t v854;
  int64x2_t v855;
  int64x2_t v856;
  int32x4_t v857;
  int32x4_t v858;
  int32x4_t v859;
  int32x4_t v860;
  int32x4_t v861;
  int32x4_t v862;
  int32x4_t v863;
  int32x4_t v864;
  int64x2_t v865;
  int64x2_t v866;
  int64x2_t v867;
  int64x2_t v868;
  int64x2_t v869;
  int64x2_t v870;
  int64x2_t v871;
  int64x2_t v872;
  int32x4_t v873;
  int32x4_t v874;
  int32x4_t v875;
  int32x4_t v876;
  int32x4_t v877;
  int32x4_t v878;
  int32x4_t v879;
  int32x4_t v880;
  int64x2_t v881;
  int64x2_t v882;
  int64x2_t v883;
  int64x2_t v884;
  int64x2_t v885;
  int64x2_t v886;
  int64x2_t v887;
  int64x2_t v888;
  int32x4_t v889;
  int32x4_t v890;
  int32x4_t v891;
  int32x4_t v892;
  int32x4_t v893;
  int32x4_t v894;
  int32x4_t v895;
  int32x4_t v896;
  int64x2_t v897;
  int64x2_t v898;
  int64x2_t v899;
  int64x2_t v900;
  int64x2_t v901;
  int64x2_t v902;
  int64x2_t v903;
  int64x2_t v904;
  int32x4_t v905;
  int32x4_t v906;
  int32x4_t v907;
  int32x4_t v908;
  int32x4_t v909;
  int32x4_t v910;
  int32x4_t v911;
  int32x4_t v912;
  int64x2_t v913;
  int64x2_t v914;
  int64x2_t v915;
  int64x2_t v916;
  int64x2_t v917;
  int64x2_t v918;
  int64x2_t v919;
  int64x2_t v920;
  int16x8_t v921;
  int32x4_t v922;
  int32x4_t v923;
  int32x4_t v924;
  int32x4_t v925;
  int32x4_t v926;
  int32x4_t v927;
  int32x4_t v928;
  int32x4_t v929;
  int64x2_t v930;
  int64x2_t v931;
  int64x2_t v932;
  int64x2_t v933;
  int64x2_t v934;
  int64x2_t v935;
  int64x2_t v936;
  int64x2_t v937;
  int8x16_t v938;
  int8x16_t v939;
  int8x16_t v940;
  int16x8_t v941;
  int16x8_t v942;
  int16x8_t v943;
  int32x4_t v944;
  int16x8_t v945;
  int32x4_t v946;
  int16x8_t v947;
  int32x4_t v948;
  int16x8_t v949;
  int32x4_t v950;
  int16x8_t v951;
  int32x4_t v952;
  int16x8_t v953;
  int32x4_t v954;
  int16x8_t v955;
  int32x4_t v956;
  int16x8_t v957;
  int32x4_t v958;
  int16x8_t v959;
  int32x4_t v960;
  int16x8_t v961;
  int32x4_t v962;
  int16x8_t v963;
  int32x4_t v964;
  int16x8_t v965;
  int32x4_t v966;
  int16x8_t v967;
  int32x4_t v968;
  uint64_t v969;
  uint64_t v970;
  int16x8_t v971;
  int16x8_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  int16x8_t v992;
  uint64_t v993;
  uint64_t v994;
  int16x8_t v995;
  int16x8_t v996;
  int16x8_t v997;
  int16x8_t v998;
  int16x8_t v999;
  int16x8_t v1000;
  int16x8_t v1001;
  int16x8_t v1002;
  int16x8_t v1003;
  int16x8_t v1004;
  int16x8_t v1005;
  int16x8_t v1006;
  int16x8_t v1007;
  int16x8_t v1008;
  int16x8_t v1009;
  int16x8_t v1010;
  int16x8_t v1011;
  int16x8_t v1012;
  int16x8_t v1013;
  int16x8_t v1014;
  int16x8_t v1015;
  int16x8_t v1016;
  int16x8_t v1017;
  int16x8_t v1018;
  int16x8_t v1019;
  int16x8_t v1020;
  int16x8_t v1021;
  int16x8_t v1022;
  int16x8_t v1023;
  int16x8_t v1024;
  int16x8_t v1025;
  int16x8_t v1026;
  int16x8_t v1027;
  int16x8_t v1028;
  int16x8_t v1029;
  int16x8_t v1030;
  int16x8_t v1031;
  int16x8_t v1032;
  int16x8_t v1033;
  int16x8_t v1034;
  int16x8_t v1035;
  int16x8_t v1036;
  int16x8_t v1037;
  int16x8_t v1038;
  int16x8_t v1039;
  int16x8_t v1040;
  int16x8_t v1041;
  int16x8_t v1042;
  int16x8_t v1043;
  int16x8_t v1044;
  int16x8_t v1045;
  int16x8_t v1046;
  int16x8_t v1047;
  int16x8_t v1048;
  int16x8_t v1049;
  int16x8_t v1050;
  int16x8_t v1051;
  int16x8_t v1052;
  int16x8_t v1053;
  int16x8_t v1054;
  int16x8_t v1055;
  int16x8_t v1056;
  int16x8_t v1057;
  int16x8_t v1058;
  int16x8_t v1059;
  int16x8_t v1060;
  int16x8_t v1061;
  int16x8_t v1062;
  int16x8_t v1063;
  int16x8_t v1064;
  int16x8_t v1065;
  int16x8_t v1066;
  int16x8_t v1067;
  int16x8_t v1068;
  int16x8_t v1069;
  int16x8_t v1070;
  int16x8_t v1071;
  int16x8_t v1072;
  int16x8_t v1073;
  int16x8_t v1074;
  int16x8_t v1075;
  int16x8_t v1076;
  int16x8_t v1077;
  int16x8_t v1078;
  int16x8_t v1079;
  int16x8_t v1080;
  int16x8_t v1081;
  int16x8_t v1082;
  int16x8_t v1083;
  int16x8_t v1084;
  int16x8_t v1085;
  int16x8_t v1086;
  int16x8_t v1087;
  int16x8_t v1088;
  int16x8_t v1089;
  int16x8_t v1090;
  int16x8_t v1091;
  int16x8_t v1092;
  int16x8_t v1093;
  int16x8_t v1094;
  int16x8_t v1095;
  int16x8_t v1096;
  int16x8_t v1097;
  int16x8_t v1098;
  int16x8_t v1099;
  int16x8_t v1100;
  int16x8_t v1101;
  int16x8_t v1102;
  int16x8_t v1103;
  int16x8_t v1104;
  int16x8_t v1105;
  int16x8_t v1106;
  int16x8_t v1107;
  int16x8_t v1108;
  int16x8_t v1109;
  int16x8_t v1110;
  int16x8_t v1111;
  int16x8_t v1112;
  int16x8_t v1113;
  int16x8_t v1114;
  int16x8_t v1115;
  int16x8_t v1116;
  int16x8_t v1117;
  int16x8_t v1118;
  int16x8_t v1119;
  int16x8_t v1120;
  int16x8_t v1121;
  int16x8_t v1122;
  int16x8_t v1123;
  int16x8_t v1124;
  int16x8_t v1125;
  int16x8_t v1126;
  int16x8_t v1127;
  int16x8_t v1128;
  int16x8_t v1129;
  int16x8_t v1130;
  int16x8_t v1131;
  int16x8_t v1132;
  int16x8_t v1133;
  int16x8_t v1134;
  int16x8_t v1135;
  int16x8_t v1136;
  int16x8_t v1137;
  int16x8_t v1138;
  int16x8_t v1139;
  int16x8_t v1140;
  int16x8_t v1141;
  int16x8_t v1142;
  int16x8_t v1143;
  int16x8_t v1144;
  int16x8_t v1145;
  int16x8_t v1146;
  int16x8_t v1147;
  int16x8_t v1148;
  int16x8_t v1149;
  int16x8_t v1150;
  int16x8_t v1151;
  int16x8_t v1152;
  int16x8_t v1153;
  int16x8_t v1154;
  int64x2_t v1155;
  int64x2_t v1156;
  int64x2_t v1157;
  int64x2_t v1158;
  int64x2_t v1159;
  int64x2_t v1160;
  int64x2_t v1161;
  int64x2_t v1162;
  int64x2_t v1163;
  int64x2_t v1164;
  int64x2_t v1165;
  int64x2_t v1166;
  int64x2_t v1167;
  int64x2_t v1168;
  int64x2_t v1169;
  int64x2_t v1170;
  int64x2_t v1171;
  int64x2_t v1172;
  int64x2_t v1173;
  int64x2_t v1174;
  int64x2_t v1175;
  int64x2_t v1176;
  int64x2_t v1177;
  int64x2_t v1178;
  int64x2_t v1179;
  int64x2_t v1180;
  int64x2_t v1181;
  int64x2_t v1182;
  int64x2_t v1183;
  int64x2_t v1184;
  int64x2_t v1185;
  int64x2_t v1186;
  uint64_t v1187;

  v4 = a1;
  v1187 = *MEMORY[0x24BDAC8D0];
  v5 = 62 * a3;
  v6 = *(int16x8_t *)((char *)a1 + v5);
  v7 = *(int16x8_t *)((char *)a1 + 2 * a3);
  v8 = 30 * a3;
  v991 = 60 * a3;
  v9 = *(int16x8_t *)((char *)a1 + v991);
  v10 = *(int16x8_t *)((char *)a1 + 4 * a3);
  v985 = 58 * a3;
  v986 = 2 * a3;
  v11 = *(int16x8_t *)((char *)a1 + v985);
  v12 = *(int16x8_t *)((char *)a1 + 6 * a3);
  v13 = *a1;
  v14 = 28 * a3;
  v970 = 2 * a3;
  v983 = 56 * a3;
  v984 = 6 * a3;
  v15 = *(int16x8_t *)((char *)a1 + v983);
  v16 = *(int16x8_t *)((char *)a1 + 8 * a3);
  v987 = 8 * a3;
  v988 = 4 * a3;
  v982 = 54 * a3;
  v17 = *(int16x8_t *)((char *)a1 + v982);
  v981 = 10 * a3;
  v18 = *(int16x8_t *)((char *)a1 + v981);
  v980 = 52 * a3;
  v969 = 26 * a3;
  v19 = *(int16x8_t *)((char *)a1 + v980);
  v978 = 12 * a3;
  v20 = *(int16x8_t *)((char *)a1 + v978);
  v977 = 50 * a3;
  v21 = *(int16x8_t *)((char *)a1 + v977);
  v22 = a3;
  v23 = *(int16x8_t *)((char *)a1 + 14 * a3);
  v989 = 3 * a3;
  v990 = 14 * a3;
  v24 = a1[v989];
  v976 = 46 * a3;
  v25 = a1[v22];
  v995 = vshlq_n_s16(vaddq_s16(v6, *a1), 2uLL);
  v996 = vshlq_n_s16(vaddq_s16(v9, v7), 2uLL);
  v26 = *(int16x8_t *)((char *)a1 + v976);
  v979 = 42 * a3;
  v27 = 38 * a3;
  v994 = 18 * a3;
  v28 = *(int16x8_t *)((char *)a1 + v994);
  v993 = 44 * a3;
  v29 = *(int16x8_t *)((char *)a1 + v993);
  v974 = 20 * a3;
  v975 = 22 * a3;
  v30 = *(int16x8_t *)((char *)a1 + v974);
  v31 = *(int16x8_t *)((char *)a1 + v979);
  v32 = *(int16x8_t *)((char *)a1 + v975);
  v997 = vshlq_n_s16(vaddq_s16(v11, v10), 2uLL);
  v998 = vshlq_n_s16(vaddq_s16(v15, v12), 2uLL);
  v999 = vshlq_n_s16(vaddq_s16(v17, v16), 2uLL);
  v1000 = vshlq_n_s16(vaddq_s16(v19, v18), 2uLL);
  v1001 = vshlq_n_s16(vaddq_s16(v21, v20), 2uLL);
  v1002 = vshlq_n_s16(vaddq_s16(v24, v23), 2uLL);
  v33 = 40 * a3;
  v34 = *(int16x8_t *)((char *)a1 + v33);
  v35 = vsubq_s16(v23, v24);
  v36 = 24 * a3;
  v37 = *(int16x8_t *)((char *)a1 + v36);
  v38 = vsubq_s16(v20, v21);
  v39 = *(int16x8_t *)((char *)a1 + v27);
  v40 = vsubq_s16(v16, v17);
  v41 = *(int16x8_t *)((char *)a1 + v14);
  v973 = 34 * a3;
  v42 = *(int16x8_t *)((char *)a1 + v973);
  v1003 = vshlq_n_s16(vaddq_s16(v26, v25), 2uLL);
  v1004 = vshlq_n_s16(vaddq_s16(v29, v28), 2uLL);
  v43 = *(int16x8_t *)((char *)a1 + v8);
  v44 = vaddq_s16(v42, v41);
  v45 = a1[v970];
  v46 = vaddq_s16(v45, v43);
  v47 = vsubq_s16(v43, v45);
  v48 = *(int16x8_t *)((char *)a1 + v969);
  v49 = vsubq_s16(v41, v42);
  v50 = 36 * a3;
  v51 = *(int16x8_t *)((char *)a1 + v50);
  v1005 = vshlq_n_s16(vaddq_s16(v31, v30), 2uLL);
  v1006 = vshlq_n_s16(vaddq_s16(v34, v32), 2uLL);
  v1007 = vshlq_n_s16(vaddq_s16(v39, v37), 2uLL);
  v1008 = vshlq_n_s16(vaddq_s16(v51, v48), 2uLL);
  v1009 = vshlq_n_s16(v44, 2uLL);
  v1010 = vshlq_n_s16(v46, 2uLL);
  v1011 = vshlq_n_s16(v47, 2uLL);
  v1012 = vshlq_n_s16(v49, 2uLL);
  v1013 = vshlq_n_s16(vsubq_s16(v48, v51), 2uLL);
  v1014 = vshlq_n_s16(vsubq_s16(v37, v39), 2uLL);
  v1015 = vshlq_n_s16(vsubq_s16(v32, v34), 2uLL);
  v1016 = vshlq_n_s16(vsubq_s16(v30, v31), 2uLL);
  v1017 = vshlq_n_s16(vsubq_s16(v28, v29), 2uLL);
  v1018 = vshlq_n_s16(vsubq_s16(v25, v26), 2uLL);
  v1019 = vshlq_n_s16(v35, 2uLL);
  v1020 = vshlq_n_s16(v38, 2uLL);
  v1021 = vshlq_n_s16(vsubq_s16(v18, v19), 2uLL);
  v1022 = vshlq_n_s16(v40, 2uLL);
  v1023 = vshlq_n_s16(vsubq_s16(v12, v15), 2uLL);
  v1024 = vshlq_n_s16(vsubq_s16(v10, v11), 2uLL);
  v1025 = vshlq_n_s16(vsubq_s16(v7, v9), 2uLL);
  v1026 = vshlq_n_s16(vsubq_s16(v13, v6), 2uLL);
  dct_body_first_pass(&v995, &v1123);
  v52 = v4[1];
  v53 = *(int16x8_t *)((char *)v4 + v5 + 16);
  v54 = vaddq_s16(v53, v52);
  v55 = *(int16x8_t *)((char *)v4 + v986 + 16);
  v56 = *(int16x8_t *)((char *)v4 + v991 + 16);
  v57 = vaddq_s16(v56, v55);
  v58 = *(int16x8_t *)((char *)v4 + v988 + 16);
  v59 = *(int16x8_t *)((char *)v4 + v985 + 16);
  v60 = *(int16x8_t *)((char *)v4 + v984 + 16);
  v61 = vaddq_s16(v59, v58);
  v62 = *(int16x8_t *)((char *)v4 + v983 + 16);
  v63 = vaddq_s16(v62, v60);
  v64 = *(int16x8_t *)((char *)v4 + v987 + 16);
  v65 = *(int16x8_t *)((char *)v4 + v982 + 16);
  v66 = *(int16x8_t *)((char *)v4 + v981 + 16);
  v67 = *(int16x8_t *)((char *)v4 + v980 + 16);
  v68 = vaddq_s16(v65, v64);
  v69 = vaddq_s16(v67, v66);
  v70 = *(int16x8_t *)((char *)v4 + v978 + 16);
  v71 = *(int16x8_t *)((char *)v4 + v977 + 16);
  v72 = vaddq_s16(v71, v70);
  v73 = *(int16x8_t *)((char *)v4 + v990 + 16);
  v74 = v4[v989 + 1];
  v75 = vaddq_s16(v74, v73);
  v76 = vsubq_s16(v73, v74);
  v77 = vsubq_s16(v70, v71);
  v78 = vsubq_s16(v66, v67);
  v79 = vsubq_s16(v64, v65);
  v80 = vsubq_s16(v60, v62);
  v81 = vsubq_s16(v58, v59);
  v971 = vsubq_s16(v55, v56);
  v82 = v4[v22 + 1];
  v83 = vsubq_s16(v52, v53);
  v84 = *(int16x8_t *)((char *)v4 + v994 + 16);
  v85 = *(int16x8_t *)((char *)v4 + v993 + 16);
  v86 = *(int16x8_t *)((char *)v4 + v974 + 16);
  v87 = *(int16x8_t *)((char *)v4 + v979 + 16);
  v88 = *(int16x8_t *)((char *)v4 + v975 + 16);
  v89 = *(int16x8_t *)((char *)v4 + v33 + 16);
  v90 = *(int16x8_t *)((char *)v4 + v36 + 16);
  v91 = *(int16x8_t *)((char *)v4 + v27 + 16);
  v92 = *(int16x8_t *)((char *)v4 + v969 + 16);
  v93 = *(int16x8_t *)((char *)v4 + v50 + 16);
  v94 = *(int16x8_t *)((char *)v4 + v14 + 16);
  v95 = *(int16x8_t *)((char *)v4 + v973 + 16);
  v96 = *(int16x8_t *)((char *)v4 + v8 + 16);
  v97 = v4[v970 + 1];
  v98 = vaddq_s16(v97, v96);
  v99 = vsubq_s16(v96, v97);
  v100 = vaddq_s16(v95, v94);
  v101 = vsubq_s16(v94, v95);
  v102 = vaddq_s16(v93, v92);
  v103 = vsubq_s16(v92, v93);
  v104 = vaddq_s16(v91, v90);
  v105 = vsubq_s16(v90, v91);
  v106 = vaddq_s16(v89, v88);
  v107 = vsubq_s16(v88, v89);
  v108 = vaddq_s16(v87, v86);
  v109 = vsubq_s16(v86, v87);
  v110 = vaddq_s16(v85, v84);
  v111 = vsubq_s16(v84, v85);
  v112 = *(int16x8_t *)((char *)v4 + v976 + 16);
  v995 = vshlq_n_s16(v54, 2uLL);
  v996 = vshlq_n_s16(v57, 2uLL);
  v997 = vshlq_n_s16(v61, 2uLL);
  v998 = vshlq_n_s16(v63, 2uLL);
  v999 = vshlq_n_s16(v68, 2uLL);
  v1000 = vshlq_n_s16(v69, 2uLL);
  v1001 = vshlq_n_s16(v72, 2uLL);
  v1002 = vshlq_n_s16(v75, 2uLL);
  v1003 = vshlq_n_s16(vaddq_s16(v112, v82), 2uLL);
  v1004 = vshlq_n_s16(v110, 2uLL);
  v1005 = vshlq_n_s16(v108, 2uLL);
  v1006 = vshlq_n_s16(v106, 2uLL);
  v1007 = vshlq_n_s16(v104, 2uLL);
  v1008 = vshlq_n_s16(v102, 2uLL);
  v1009 = vshlq_n_s16(v100, 2uLL);
  v1010 = vshlq_n_s16(v98, 2uLL);
  v1011 = vshlq_n_s16(v99, 2uLL);
  v1012 = vshlq_n_s16(v101, 2uLL);
  v1013 = vshlq_n_s16(v103, 2uLL);
  v1014 = vshlq_n_s16(v105, 2uLL);
  v1015 = vshlq_n_s16(v107, 2uLL);
  v1016 = vshlq_n_s16(v109, 2uLL);
  v1017 = vshlq_n_s16(v111, 2uLL);
  v1018 = vshlq_n_s16(vsubq_s16(v82, v112), 2uLL);
  v1019 = vshlq_n_s16(v76, 2uLL);
  v1020 = vshlq_n_s16(v77, 2uLL);
  v1021 = vshlq_n_s16(v78, 2uLL);
  v1022 = vshlq_n_s16(v79, 2uLL);
  v1023 = vshlq_n_s16(v80, 2uLL);
  v1024 = vshlq_n_s16(v81, 2uLL);
  v1025 = vshlq_n_s16(v971, 2uLL);
  v1026 = vshlq_n_s16(v83, 2uLL);
  dct_body_first_pass(&v995, &v1091);
  v113 = v4[2];
  v114 = *(int16x8_t *)((char *)v4 + v5 + 32);
  v115 = vaddq_s16(v114, v113);
  v116 = *(int16x8_t *)((char *)v4 + v986 + 32);
  v117 = *(int16x8_t *)((char *)v4 + v991 + 32);
  v118 = vaddq_s16(v117, v116);
  v119 = *(int16x8_t *)((char *)v4 + v988 + 32);
  v120 = *(int16x8_t *)((char *)v4 + v985 + 32);
  v121 = *(int16x8_t *)((char *)v4 + v984 + 32);
  v122 = vaddq_s16(v120, v119);
  v123 = *(int16x8_t *)((char *)v4 + v983 + 32);
  v124 = vaddq_s16(v123, v121);
  v125 = *(int16x8_t *)((char *)v4 + v987 + 32);
  v126 = *(int16x8_t *)((char *)v4 + v982 + 32);
  v127 = *(int16x8_t *)((char *)v4 + v981 + 32);
  v128 = *(int16x8_t *)((char *)v4 + v980 + 32);
  v129 = vaddq_s16(v126, v125);
  v130 = vaddq_s16(v128, v127);
  v131 = *(int16x8_t *)((char *)v4 + v978 + 32);
  v132 = *(int16x8_t *)((char *)v4 + v977 + 32);
  v133 = vaddq_s16(v132, v131);
  v134 = *(int16x8_t *)((char *)v4 + v990 + 32);
  v135 = v4[v989 + 2];
  v136 = vaddq_s16(v135, v134);
  v137 = vsubq_s16(v134, v135);
  v138 = vsubq_s16(v131, v132);
  v139 = vsubq_s16(v127, v128);
  v140 = vsubq_s16(v125, v126);
  v141 = vsubq_s16(v121, v123);
  v142 = vsubq_s16(v119, v120);
  v972 = vsubq_s16(v116, v117);
  v143 = v4[v22 + 2];
  v144 = vsubq_s16(v113, v114);
  v145 = *(int16x8_t *)((char *)v4 + v994 + 32);
  v146 = *(int16x8_t *)((char *)v4 + v993 + 32);
  v147 = *(int16x8_t *)((char *)v4 + v974 + 32);
  v148 = *(int16x8_t *)((char *)v4 + v979 + 32);
  v149 = *(int16x8_t *)((char *)v4 + v975 + 32);
  v150 = *(int16x8_t *)((char *)v4 + v33 + 32);
  v151 = *(int16x8_t *)((char *)v4 + v36 + 32);
  v152 = *(int16x8_t *)((char *)v4 + v27 + 32);
  v153 = *(int16x8_t *)((char *)v4 + v969 + 32);
  v154 = *(int16x8_t *)((char *)v4 + v50 + 32);
  v155 = *(int16x8_t *)((char *)v4 + v14 + 32);
  v156 = *(int16x8_t *)((char *)v4 + v973 + 32);
  v157 = *(int16x8_t *)((char *)v4 + v8 + 32);
  v158 = v4[v970 + 2];
  v159 = vaddq_s16(v158, v157);
  v160 = vsubq_s16(v157, v158);
  v161 = vaddq_s16(v156, v155);
  v162 = vsubq_s16(v155, v156);
  v163 = vaddq_s16(v154, v153);
  v164 = vsubq_s16(v153, v154);
  v165 = vaddq_s16(v152, v151);
  v166 = vsubq_s16(v151, v152);
  v167 = vaddq_s16(v150, v149);
  v168 = vsubq_s16(v149, v150);
  v169 = vaddq_s16(v148, v147);
  v170 = vsubq_s16(v147, v148);
  v171 = vaddq_s16(v146, v145);
  v172 = vsubq_s16(v145, v146);
  v173 = *(int16x8_t *)((char *)v4 + v976 + 32);
  v995 = vshlq_n_s16(v115, 2uLL);
  v996 = vshlq_n_s16(v118, 2uLL);
  v997 = vshlq_n_s16(v122, 2uLL);
  v998 = vshlq_n_s16(v124, 2uLL);
  v999 = vshlq_n_s16(v129, 2uLL);
  v1000 = vshlq_n_s16(v130, 2uLL);
  v1001 = vshlq_n_s16(v133, 2uLL);
  v1002 = vshlq_n_s16(v136, 2uLL);
  v1003 = vshlq_n_s16(vaddq_s16(v173, v143), 2uLL);
  v1004 = vshlq_n_s16(v171, 2uLL);
  v1005 = vshlq_n_s16(v169, 2uLL);
  v1006 = vshlq_n_s16(v167, 2uLL);
  v1007 = vshlq_n_s16(v165, 2uLL);
  v1008 = vshlq_n_s16(v163, 2uLL);
  v1009 = vshlq_n_s16(v161, 2uLL);
  v1010 = vshlq_n_s16(v159, 2uLL);
  v1011 = vshlq_n_s16(v160, 2uLL);
  v1012 = vshlq_n_s16(v162, 2uLL);
  v1013 = vshlq_n_s16(v164, 2uLL);
  v1014 = vshlq_n_s16(v166, 2uLL);
  v1015 = vshlq_n_s16(v168, 2uLL);
  v1016 = vshlq_n_s16(v170, 2uLL);
  v1017 = vshlq_n_s16(v172, 2uLL);
  v1018 = vshlq_n_s16(vsubq_s16(v143, v173), 2uLL);
  v1019 = vshlq_n_s16(v137, 2uLL);
  v1020 = vshlq_n_s16(v138, 2uLL);
  v1021 = vshlq_n_s16(v139, 2uLL);
  v1022 = vshlq_n_s16(v140, 2uLL);
  v1023 = vshlq_n_s16(v141, 2uLL);
  v1024 = vshlq_n_s16(v142, 2uLL);
  v1025 = vshlq_n_s16(v972, 2uLL);
  v1026 = vshlq_n_s16(v144, 2uLL);
  dct_body_first_pass(&v995, &v1059);
  v174 = v4[3];
  v4 += 3;
  v175 = *(int16x8_t *)((char *)v4 + v5);
  v176 = vaddq_s16(v175, v174);
  v177 = *(int16x8_t *)((char *)v4 + v986);
  v178 = *(int16x8_t *)((char *)v4 + v991);
  v179 = vaddq_s16(v178, v177);
  v180 = *(int16x8_t *)((char *)v4 + v988);
  v181 = *(int16x8_t *)((char *)v4 + v985);
  v182 = *(int16x8_t *)((char *)v4 + v984);
  v183 = vaddq_s16(v181, v180);
  v184 = *(int16x8_t *)((char *)v4 + v983);
  v185 = vaddq_s16(v184, v182);
  v186 = *(int16x8_t *)((char *)v4 + v987);
  v187 = *(int16x8_t *)((char *)v4 + v982);
  v188 = *(int16x8_t *)((char *)v4 + v981);
  v189 = *(int16x8_t *)((char *)v4 + v980);
  v190 = vaddq_s16(v187, v186);
  v191 = vaddq_s16(v189, v188);
  v192 = *(int16x8_t *)((char *)v4 + v978);
  v193 = *(int16x8_t *)((char *)v4 + v977);
  v194 = vaddq_s16(v193, v192);
  v195 = *(int16x8_t *)((char *)v4 + v990);
  v196 = v4[v989];
  v197 = vaddq_s16(v196, v195);
  v198 = vsubq_s16(v195, v196);
  v199 = vsubq_s16(v192, v193);
  v200 = vsubq_s16(v188, v189);
  v201 = vsubq_s16(v186, v187);
  v202 = vsubq_s16(v182, v184);
  v203 = vsubq_s16(v180, v181);
  v204 = vsubq_s16(v177, v178);
  v992 = vsubq_s16(v174, v175);
  v205 = v4[v22];
  v206 = *(int16x8_t *)((char *)v4 + v994);
  v207 = *(int16x8_t *)((char *)v4 + v993);
  v208 = *(int16x8_t *)((char *)v4 + v974);
  v209 = *(int16x8_t *)((char *)v4 + v979);
  v210 = *(int16x8_t *)((char *)v4 + v975);
  v211 = *(int16x8_t *)((char *)v4 + v33);
  v212 = *(int16x8_t *)((char *)v4 + v36);
  v213 = *(int16x8_t *)((char *)v4 + v27);
  v214 = *(int16x8_t *)((char *)v4 + v969);
  v215 = *(int16x8_t *)((char *)v4 + v50);
  v216 = *(int16x8_t *)((char *)v4 + v14);
  v217 = *(int16x8_t *)((char *)v4 + v973);
  v218 = *(int16x8_t *)((char *)v4 + v8);
  v219 = v4[v970];
  v220 = vaddq_s16(v219, v218);
  v221 = vsubq_s16(v218, v219);
  v222 = vaddq_s16(v217, v216);
  v223 = vsubq_s16(v216, v217);
  v224 = vaddq_s16(v215, v214);
  v225 = vsubq_s16(v214, v215);
  v226 = vaddq_s16(v213, v212);
  v227 = vsubq_s16(v212, v213);
  v228 = vaddq_s16(v211, v210);
  v229 = vsubq_s16(v210, v211);
  v230 = vaddq_s16(v209, v208);
  v231 = vsubq_s16(v208, v209);
  v232 = vaddq_s16(v207, v206);
  v233 = vsubq_s16(v206, v207);
  v234 = *(int16x8_t *)((char *)v4 + v976);
  v995 = vshlq_n_s16(v176, 2uLL);
  v996 = vshlq_n_s16(v179, 2uLL);
  v997 = vshlq_n_s16(v183, 2uLL);
  v998 = vshlq_n_s16(v185, 2uLL);
  v999 = vshlq_n_s16(v190, 2uLL);
  v1000 = vshlq_n_s16(v191, 2uLL);
  v1001 = vshlq_n_s16(v194, 2uLL);
  v1002 = vshlq_n_s16(v197, 2uLL);
  v1003 = vshlq_n_s16(vaddq_s16(v234, v205), 2uLL);
  v1004 = vshlq_n_s16(v232, 2uLL);
  v1005 = vshlq_n_s16(v230, 2uLL);
  v1006 = vshlq_n_s16(v228, 2uLL);
  v1007 = vshlq_n_s16(v226, 2uLL);
  v1008 = vshlq_n_s16(v224, 2uLL);
  v1009 = vshlq_n_s16(v222, 2uLL);
  v1010 = vshlq_n_s16(v220, 2uLL);
  v1011 = vshlq_n_s16(v221, 2uLL);
  v1012 = vshlq_n_s16(v223, 2uLL);
  v1013 = vshlq_n_s16(v225, 2uLL);
  v1014 = vshlq_n_s16(v227, 2uLL);
  v1015 = vshlq_n_s16(v229, 2uLL);
  v1016 = vshlq_n_s16(v231, 2uLL);
  v1017 = vshlq_n_s16(v233, 2uLL);
  v1018 = vshlq_n_s16(vsubq_s16(v205, v234), 2uLL);
  v1019 = vshlq_n_s16(v198, 2uLL);
  v1020 = vshlq_n_s16(v199, 2uLL);
  v1021 = vshlq_n_s16(v200, 2uLL);
  v1022 = vshlq_n_s16(v201, 2uLL);
  v1023 = vshlq_n_s16(v202, 2uLL);
  v1024 = vshlq_n_s16(v203, 2uLL);
  v1025 = vshlq_n_s16(v204, 2uLL);
  v1026 = vshlq_n_s16(v992, 2uLL);
  dct_body_first_pass(&v995, &v1027);
  v235 = (int32x4_t)vtrn1q_s16(v1123, v1124);
  v236 = (int32x4_t)vtrn2q_s16(v1123, v1124);
  v237 = (int32x4_t)vtrn1q_s16(v1125, v1126);
  v238 = (int32x4_t)vtrn2q_s16(v1125, v1126);
  v239 = (int32x4_t)vtrn1q_s16(v1127, v1128);
  v240 = (int32x4_t)vtrn2q_s16(v1127, v1128);
  v241 = (int32x4_t)vtrn1q_s16(v1129, v1130);
  v242 = (int32x4_t)vtrn2q_s16(v1129, v1130);
  v243 = (int64x2_t)vtrn1q_s32(v235, v237);
  v244 = (int64x2_t)vtrn2q_s32(v235, v237);
  v245 = (int64x2_t)vtrn1q_s32(v236, v238);
  v246 = (int64x2_t)vtrn1q_s32(v239, v241);
  v247 = (int64x2_t)vtrn1q_s32(v240, v242);
  v1155 = vzip1q_s64(v243, v246);
  v1156 = vzip1q_s64(v245, v247);
  v248 = (int64x2_t)vtrn2q_s32(v236, v238);
  v249 = (int64x2_t)vtrn2q_s32(v239, v241);
  v250 = (int64x2_t)vtrn2q_s32(v240, v242);
  v1157 = vzip1q_s64(v244, v249);
  v1158 = vzip1q_s64(v248, v250);
  v251 = vzip2q_s64(v243, v246);
  v252 = vzip2q_s64(v245, v247);
  v253 = vzip2q_s64(v244, v249);
  v254 = vzip2q_s64(v248, v250);
  v255 = (int32x4_t)vtrn1q_s16(v1091, v1092);
  v256 = (int32x4_t)vtrn2q_s16(v1091, v1092);
  v257 = (int32x4_t)vtrn1q_s16(v1093, v1094);
  v258 = (int32x4_t)vtrn2q_s16(v1093, v1094);
  v259 = (int32x4_t)vtrn1q_s16(v1095, v1096);
  v260 = (int32x4_t)vtrn2q_s16(v1095, v1096);
  v261 = (int32x4_t)vtrn1q_s16(v1097, v1098);
  v262 = (int32x4_t)vtrn2q_s16(v1097, v1098);
  v1159 = v251;
  v1160 = v252;
  v263 = (int64x2_t)vtrn1q_s32(v255, v257);
  v264 = (int64x2_t)vtrn2q_s32(v255, v257);
  v265 = (int64x2_t)vtrn1q_s32(v256, v258);
  v1161 = v253;
  v1162 = v254;
  v266 = (int64x2_t)vtrn1q_s32(v259, v261);
  v267 = (int64x2_t)vtrn1q_s32(v260, v262);
  v1163 = vzip1q_s64(v263, v266);
  v1164 = vzip1q_s64(v265, v267);
  v268 = (int64x2_t)vtrn2q_s32(v256, v258);
  v269 = (int64x2_t)vtrn2q_s32(v259, v261);
  v270 = (int64x2_t)vtrn2q_s32(v260, v262);
  v1165 = vzip1q_s64(v264, v269);
  v1166 = vzip1q_s64(v268, v270);
  v271 = vzip2q_s64(v263, v266);
  v272 = vzip2q_s64(v265, v267);
  v273 = vzip2q_s64(v264, v269);
  v274 = vzip2q_s64(v268, v270);
  v275 = (int32x4_t)vtrn1q_s16(v1059, v1060);
  v276 = (int32x4_t)vtrn2q_s16(v1059, v1060);
  v277 = (int32x4_t)vtrn1q_s16(v1061, v1062);
  v278 = (int32x4_t)vtrn2q_s16(v1061, v1062);
  v279 = (int32x4_t)vtrn1q_s16(v1063, v1064);
  v280 = (int32x4_t)vtrn2q_s16(v1063, v1064);
  v281 = (int32x4_t)vtrn1q_s16(v1065, v1066);
  v282 = (int32x4_t)vtrn2q_s16(v1065, v1066);
  v1167 = v271;
  v1168 = v272;
  v283 = (int64x2_t)vtrn1q_s32(v275, v277);
  v284 = (int64x2_t)vtrn2q_s32(v275, v277);
  v285 = (int64x2_t)vtrn1q_s32(v276, v278);
  v1169 = v273;
  v1170 = v274;
  v286 = (int64x2_t)vtrn1q_s32(v279, v281);
  v287 = (int64x2_t)vtrn1q_s32(v280, v282);
  v1171 = vzip1q_s64(v283, v286);
  v1172 = vzip1q_s64(v285, v287);
  v288 = (int64x2_t)vtrn2q_s32(v276, v278);
  v289 = (int64x2_t)vtrn2q_s32(v279, v281);
  v290 = (int64x2_t)vtrn2q_s32(v280, v282);
  v1173 = vzip1q_s64(v284, v289);
  v1174 = vzip1q_s64(v288, v290);
  v291 = vzip2q_s64(v283, v286);
  v292 = vzip2q_s64(v285, v287);
  v293 = vzip2q_s64(v284, v289);
  v294 = vzip2q_s64(v288, v290);
  v295 = (int32x4_t)vtrn1q_s16(v1027, v1028);
  v296 = (int32x4_t)vtrn2q_s16(v1027, v1028);
  v297 = (int32x4_t)vtrn1q_s16(v1029, v1030);
  v298 = (int32x4_t)vtrn2q_s16(v1029, v1030);
  v299 = (int32x4_t)vtrn1q_s16(v1031, v1032);
  v300 = (int32x4_t)vtrn2q_s16(v1031, v1032);
  v301 = (int32x4_t)vtrn1q_s16(v1033, v1034);
  v302 = (int32x4_t)vtrn2q_s16(v1033, v1034);
  v1175 = v291;
  v1176 = v292;
  v303 = (int64x2_t)vtrn1q_s32(v295, v297);
  v304 = (int64x2_t)vtrn2q_s32(v295, v297);
  v305 = (int64x2_t)vtrn1q_s32(v296, v298);
  v1177 = v293;
  v1178 = v294;
  v306 = (int64x2_t)vtrn1q_s32(v299, v301);
  v307 = (int64x2_t)vtrn1q_s32(v300, v302);
  v1179 = vzip1q_s64(v303, v306);
  v1180 = vzip1q_s64(v305, v307);
  v308 = (int64x2_t)vtrn2q_s32(v296, v298);
  v309 = (int64x2_t)vtrn2q_s32(v299, v301);
  v310 = (int64x2_t)vtrn2q_s32(v300, v302);
  v1181 = vzip1q_s64(v304, v309);
  v1182 = vzip1q_s64(v308, v310);
  v1183 = vzip2q_s64(v303, v306);
  v1184 = vzip2q_s64(v305, v307);
  v1185 = vzip2q_s64(v304, v309);
  v1186 = vzip2q_s64(v308, v310);
  dct_body_second_pass_rd((int16x8_t *)&v1155, &v995);
  v311 = (int32x4_t)vtrn1q_s16(v995, v996);
  v312 = (int32x4_t)vtrn2q_s16(v995, v996);
  v313 = (int32x4_t)vtrn1q_s16(v997, v998);
  v314 = (int32x4_t)vtrn2q_s16(v997, v998);
  v315 = (int32x4_t)vtrn1q_s16(v999, v1000);
  v316 = (int32x4_t)vtrn2q_s16(v999, v1000);
  v317 = (int32x4_t)vtrn1q_s16(v1001, v1002);
  v318 = (int32x4_t)vtrn2q_s16(v1001, v1002);
  v319 = (int64x2_t)vtrn1q_s32(v311, v313);
  v320 = (int64x2_t)vtrn2q_s32(v311, v313);
  v321 = (int64x2_t)vtrn1q_s32(v312, v314);
  v322 = (int64x2_t)vtrn1q_s32(v315, v317);
  v323 = (int64x2_t)vtrn1q_s32(v316, v318);
  v995 = (int16x8_t)vzip1q_s64(v319, v322);
  v996 = (int16x8_t)vzip1q_s64(v321, v323);
  v324 = (int64x2_t)vtrn2q_s32(v312, v314);
  v325 = (int64x2_t)vtrn2q_s32(v315, v317);
  v326 = (int64x2_t)vtrn2q_s32(v316, v318);
  v997 = (int16x8_t)vzip1q_s64(v320, v325);
  v998 = (int16x8_t)vzip1q_s64(v324, v326);
  v999 = (int16x8_t)vzip2q_s64(v319, v322);
  v1000 = (int16x8_t)vzip2q_s64(v321, v323);
  v1001 = (int16x8_t)vzip2q_s64(v320, v325);
  v1002 = (int16x8_t)vzip2q_s64(v324, v326);
  v327 = (int32x4_t)vtrn1q_s16(v1003, v1004);
  v328 = (int32x4_t)vtrn2q_s16(v1003, v1004);
  v329 = (int32x4_t)vtrn1q_s16(v1005, v1006);
  v330 = (int32x4_t)vtrn2q_s16(v1005, v1006);
  v331 = (int32x4_t)vtrn1q_s16(v1007, v1008);
  v332 = (int32x4_t)vtrn2q_s16(v1007, v1008);
  v333 = (int32x4_t)vtrn1q_s16(v1009, v1010);
  v334 = (int32x4_t)vtrn2q_s16(v1009, v1010);
  v335 = (int64x2_t)vtrn1q_s32(v327, v329);
  v336 = (int64x2_t)vtrn2q_s32(v327, v329);
  v337 = (int64x2_t)vtrn1q_s32(v328, v330);
  v338 = (int64x2_t)vtrn1q_s32(v331, v333);
  v339 = (int64x2_t)vtrn1q_s32(v332, v334);
  v1003 = (int16x8_t)vzip1q_s64(v335, v338);
  v1004 = (int16x8_t)vzip1q_s64(v337, v339);
  v340 = (int64x2_t)vtrn2q_s32(v328, v330);
  v341 = (int64x2_t)vtrn2q_s32(v331, v333);
  v342 = (int64x2_t)vtrn2q_s32(v332, v334);
  v1005 = (int16x8_t)vzip1q_s64(v336, v341);
  v1006 = (int16x8_t)vzip1q_s64(v340, v342);
  v1007 = (int16x8_t)vzip2q_s64(v335, v338);
  v1008 = (int16x8_t)vzip2q_s64(v337, v339);
  v1009 = (int16x8_t)vzip2q_s64(v336, v341);
  v1010 = (int16x8_t)vzip2q_s64(v340, v342);
  v343 = (int32x4_t)vtrn1q_s16(v1011, v1012);
  v344 = (int32x4_t)vtrn2q_s16(v1011, v1012);
  v345 = (int32x4_t)vtrn1q_s16(v1013, v1014);
  v346 = (int32x4_t)vtrn2q_s16(v1013, v1014);
  v347 = (int32x4_t)vtrn1q_s16(v1015, v1016);
  v348 = (int32x4_t)vtrn2q_s16(v1015, v1016);
  v349 = (int32x4_t)vtrn1q_s16(v1017, v1018);
  v350 = (int32x4_t)vtrn2q_s16(v1017, v1018);
  v351 = (int64x2_t)vtrn1q_s32(v343, v345);
  v352 = (int64x2_t)vtrn2q_s32(v343, v345);
  v353 = (int64x2_t)vtrn1q_s32(v344, v346);
  v354 = (int64x2_t)vtrn1q_s32(v347, v349);
  v355 = (int64x2_t)vtrn1q_s32(v348, v350);
  v356 = (int8x16_t)vzip1q_s64(v351, v354);
  v1011 = (int16x8_t)v356;
  v1012 = (int16x8_t)vzip1q_s64(v353, v355);
  v357 = (int64x2_t)vtrn2q_s32(v344, v346);
  v358 = (int64x2_t)vtrn2q_s32(v347, v349);
  v359 = (int64x2_t)vtrn2q_s32(v348, v350);
  v1013 = (int16x8_t)vzip1q_s64(v352, v358);
  v1014 = (int16x8_t)vzip1q_s64(v357, v359);
  v1015 = (int16x8_t)vzip2q_s64(v351, v354);
  v1016 = (int16x8_t)vzip2q_s64(v353, v355);
  v1017 = (int16x8_t)vzip2q_s64(v352, v358);
  v1018 = (int16x8_t)vzip2q_s64(v357, v359);
  v360 = v1018;
  v361 = (int32x4_t)vtrn1q_s16(v1019, v1020);
  v362 = (int32x4_t)vtrn2q_s16(v1019, v1020);
  v363 = (int32x4_t)vtrn1q_s16(v1021, v1022);
  v364 = (int32x4_t)vtrn2q_s16(v1021, v1022);
  v365 = (int32x4_t)vtrn1q_s16(v1023, v1024);
  v366 = (int32x4_t)vtrn2q_s16(v1023, v1024);
  v367 = (int32x4_t)vtrn1q_s16(v1025, v1026);
  v368 = (int32x4_t)vtrn2q_s16(v1025, v1026);
  v369 = (int64x2_t)vtrn1q_s32(v361, v363);
  v370 = (int64x2_t)vtrn2q_s32(v361, v363);
  v371 = (int64x2_t)vtrn1q_s32(v362, v364);
  v372 = (int64x2_t)vtrn2q_s32(v362, v364);
  v373 = (int64x2_t)vtrn1q_s32(v365, v367);
  v374 = (int64x2_t)vtrn1q_s32(v366, v368);
  v375 = (int8x16_t)vzip1q_s64(v369, v373);
  v376 = (int8x16_t)vzip1q_s64(v371, v374);
  v1019 = (int16x8_t)v375;
  v1020 = (int16x8_t)v376;
  v377 = (int64x2_t)vtrn2q_s32(v365, v367);
  v378 = (int64x2_t)vtrn2q_s32(v366, v368);
  v1021 = (int16x8_t)vzip1q_s64(v370, v377);
  v1022 = (int16x8_t)vzip1q_s64(v372, v378);
  v1023 = (int16x8_t)vzip2q_s64(v369, v373);
  v1024 = (int16x8_t)vzip2q_s64(v371, v374);
  v1025 = (int16x8_t)vzip2q_s64(v370, v377);
  v1026 = (int16x8_t)vzip2q_s64(v372, v378);
  v379 = v996;
  v380 = vmovl_high_s16(v995);
  *a2 = vmovl_s16(*(int16x4_t *)v995.i8);
  a2[1] = v380;
  v381 = v1004;
  v382 = vmovl_high_s16(v1003);
  a2[2] = vmovl_s16(*(int16x4_t *)v1003.i8);
  a2[3] = v382;
  a2[4] = vmovl_s16(*(int16x4_t *)v356.i8);
  a2[5] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v356, v356, 8uLL));
  a2[6] = vmovl_s16(*(int16x4_t *)v375.i8);
  a2[7] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v375, v375, 8uLL));
  a2[8] = vmovl_s16(*(int16x4_t *)v379.i8);
  a2[9] = vmovl_high_s16(v379);
  a2[10] = vmovl_s16(*(int16x4_t *)v381.i8);
  a2[11] = vmovl_high_s16(v381);
  v383 = v1013;
  v384 = vmovl_high_s16(v1012);
  a2[12] = vmovl_s16(*(int16x4_t *)v1012.i8);
  a2[13] = v384;
  a2[14] = vmovl_s16(*(int16x4_t *)v376.i8);
  a2[15] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v376, v376, 8uLL));
  v385 = v998;
  v386 = vmovl_high_s16(v997);
  a2[16] = vmovl_s16(*(int16x4_t *)v997.i8);
  a2[17] = v386;
  v387 = v1006;
  v388 = vmovl_high_s16(v1005);
  a2[18] = vmovl_s16(*(int16x4_t *)v1005.i8);
  a2[19] = v388;
  a2[20] = vmovl_s16(*(int16x4_t *)v383.i8);
  a2[21] = vmovl_high_s16(v383);
  v389 = v1022;
  v390 = vmovl_high_s16(v1021);
  a2[22] = vmovl_s16(*(int16x4_t *)v1021.i8);
  a2[23] = v390;
  a2[24] = vmovl_s16(*(int16x4_t *)v385.i8);
  a2[25] = vmovl_high_s16(v385);
  a2[26] = vmovl_s16(*(int16x4_t *)v387.i8);
  a2[27] = vmovl_high_s16(v387);
  v391 = v1015;
  v392 = vmovl_high_s16(v1014);
  a2[28] = vmovl_s16(*(int16x4_t *)v1014.i8);
  a2[29] = v392;
  a2[30] = vmovl_s16(*(int16x4_t *)v389.i8);
  a2[31] = vmovl_high_s16(v389);
  v393 = v1000;
  v394 = vmovl_high_s16(v999);
  a2[32] = vmovl_s16(*(int16x4_t *)v999.i8);
  a2[33] = v394;
  v395 = v1008;
  v396 = vmovl_high_s16(v1007);
  a2[34] = vmovl_s16(*(int16x4_t *)v1007.i8);
  a2[35] = v396;
  a2[36] = vmovl_s16(*(int16x4_t *)v391.i8);
  a2[37] = vmovl_high_s16(v391);
  v397 = v1024;
  v398 = vmovl_high_s16(v1023);
  a2[38] = vmovl_s16(*(int16x4_t *)v1023.i8);
  a2[39] = v398;
  a2[40] = vmovl_s16(*(int16x4_t *)v393.i8);
  a2[41] = vmovl_high_s16(v393);
  a2[42] = vmovl_s16(*(int16x4_t *)v395.i8);
  a2[43] = vmovl_high_s16(v395);
  v399 = v1017;
  v400 = vmovl_high_s16(v1016);
  a2[44] = vmovl_s16(*(int16x4_t *)v1016.i8);
  a2[45] = v400;
  a2[46] = vmovl_s16(*(int16x4_t *)v397.i8);
  a2[47] = vmovl_high_s16(v397);
  v401 = v1002;
  v402 = vmovl_high_s16(v1001);
  a2[48] = vmovl_s16(*(int16x4_t *)v1001.i8);
  a2[49] = v402;
  v403 = v1010;
  v404 = vmovl_high_s16(v1009);
  a2[50] = vmovl_s16(*(int16x4_t *)v1009.i8);
  a2[51] = v404;
  a2[52] = vmovl_s16(*(int16x4_t *)v399.i8);
  a2[53] = vmovl_high_s16(v399);
  v405 = v1026;
  v406 = vmovl_high_s16(v1025);
  a2[54] = vmovl_s16(*(int16x4_t *)v1025.i8);
  a2[55] = v406;
  a2[56] = vmovl_s16(*(int16x4_t *)v401.i8);
  a2[57] = vmovl_high_s16(v401);
  a2[58] = vmovl_s16(*(int16x4_t *)v403.i8);
  a2[59] = vmovl_high_s16(v403);
  v407 = vmovl_s16(*(int16x4_t *)v360.i8);
  v408 = vmovl_high_s16(v360);
  v409 = (int32x4_t)vtrn1q_s16(v1131, v1132);
  v410 = (int32x4_t)vtrn2q_s16(v1131, v1132);
  v411 = (int32x4_t)vtrn1q_s16(v1133, v1134);
  v412 = (int32x4_t)vtrn2q_s16(v1133, v1134);
  v413 = (int32x4_t)vtrn1q_s16(v1135, v1136);
  v414 = (int32x4_t)vtrn2q_s16(v1135, v1136);
  v415 = (int32x4_t)vtrn1q_s16(v1137, v1138);
  v416 = (int32x4_t)vtrn2q_s16(v1137, v1138);
  a2[60] = v407;
  a2[61] = v408;
  v417 = (int64x2_t)vtrn1q_s32(v409, v411);
  v418 = (int64x2_t)vtrn2q_s32(v409, v411);
  v419 = (int64x2_t)vtrn1q_s32(v410, v412);
  a2[62] = vmovl_s16(*(int16x4_t *)v405.i8);
  a2[63] = vmovl_high_s16(v405);
  v420 = (int64x2_t)vtrn2q_s32(v410, v412);
  v421 = (int64x2_t)vtrn1q_s32(v413, v415);
  v422 = (int64x2_t)vtrn2q_s32(v413, v415);
  v423 = (int64x2_t)vtrn1q_s32(v414, v416);
  v424 = (int64x2_t)vtrn2q_s32(v414, v416);
  v425 = vzip1q_s64(v417, v421);
  v426 = vzip2q_s64(v417, v421);
  v427 = vzip1q_s64(v419, v423);
  v428 = vzip2q_s64(v419, v423);
  v429 = vzip1q_s64(v418, v422);
  v430 = vzip2q_s64(v418, v422);
  v431 = vzip1q_s64(v420, v424);
  v432 = vzip2q_s64(v420, v424);
  v1155 = v425;
  v1156 = v427;
  v1157 = v429;
  v1158 = v431;
  v433 = (int32x4_t)vtrn1q_s16(v1099, v1100);
  v434 = (int32x4_t)vtrn2q_s16(v1099, v1100);
  v435 = (int32x4_t)vtrn1q_s16(v1101, v1102);
  v436 = (int32x4_t)vtrn2q_s16(v1101, v1102);
  v437 = (int32x4_t)vtrn1q_s16(v1103, v1104);
  v438 = (int32x4_t)vtrn2q_s16(v1103, v1104);
  v439 = (int32x4_t)vtrn1q_s16(v1105, v1106);
  v440 = (int32x4_t)vtrn2q_s16(v1105, v1106);
  v1159 = v426;
  v1160 = v428;
  v441 = (int64x2_t)vtrn1q_s32(v433, v435);
  v442 = (int64x2_t)vtrn2q_s32(v433, v435);
  v443 = (int64x2_t)vtrn1q_s32(v434, v436);
  v1161 = v430;
  v1162 = v432;
  v444 = (int64x2_t)vtrn2q_s32(v434, v436);
  v445 = (int64x2_t)vtrn1q_s32(v437, v439);
  v446 = (int64x2_t)vtrn2q_s32(v437, v439);
  v447 = (int64x2_t)vtrn1q_s32(v438, v440);
  v448 = (int64x2_t)vtrn2q_s32(v438, v440);
  v449 = vzip1q_s64(v441, v445);
  v450 = vzip2q_s64(v441, v445);
  v451 = vzip1q_s64(v443, v447);
  v452 = vzip2q_s64(v443, v447);
  v453 = vzip1q_s64(v442, v446);
  v454 = vzip2q_s64(v442, v446);
  v455 = vzip1q_s64(v444, v448);
  v456 = vzip2q_s64(v444, v448);
  v1163 = v449;
  v1164 = v451;
  v1165 = v453;
  v1166 = v455;
  v457 = (int32x4_t)vtrn1q_s16(v1067, v1068);
  v458 = (int32x4_t)vtrn2q_s16(v1067, v1068);
  v459 = (int32x4_t)vtrn1q_s16(v1069, v1070);
  v460 = (int32x4_t)vtrn2q_s16(v1069, v1070);
  v461 = (int32x4_t)vtrn1q_s16(v1071, v1072);
  v462 = (int32x4_t)vtrn2q_s16(v1071, v1072);
  v463 = (int32x4_t)vtrn1q_s16(v1073, v1074);
  v464 = (int32x4_t)vtrn2q_s16(v1073, v1074);
  v1167 = v450;
  v1168 = v452;
  v465 = (int64x2_t)vtrn1q_s32(v457, v459);
  v466 = (int64x2_t)vtrn2q_s32(v457, v459);
  v467 = (int64x2_t)vtrn1q_s32(v458, v460);
  v1169 = v454;
  v1170 = v456;
  v468 = (int64x2_t)vtrn2q_s32(v458, v460);
  v469 = (int64x2_t)vtrn1q_s32(v461, v463);
  v470 = (int64x2_t)vtrn2q_s32(v461, v463);
  v471 = (int64x2_t)vtrn1q_s32(v462, v464);
  v472 = (int64x2_t)vtrn2q_s32(v462, v464);
  v473 = vzip1q_s64(v465, v469);
  v474 = vzip2q_s64(v465, v469);
  v475 = vzip1q_s64(v467, v471);
  v476 = vzip2q_s64(v467, v471);
  v477 = vzip1q_s64(v466, v470);
  v478 = vzip2q_s64(v466, v470);
  v479 = vzip1q_s64(v468, v472);
  v480 = vzip2q_s64(v468, v472);
  v1171 = v473;
  v1172 = v475;
  v1173 = v477;
  v1174 = v479;
  v481 = (int32x4_t)vtrn1q_s16(v1035, v1036);
  v482 = (int32x4_t)vtrn2q_s16(v1035, v1036);
  v483 = (int32x4_t)vtrn1q_s16(v1037, v1038);
  v484 = (int32x4_t)vtrn2q_s16(v1037, v1038);
  v485 = (int32x4_t)vtrn1q_s16(v1039, v1040);
  v486 = (int32x4_t)vtrn2q_s16(v1039, v1040);
  v487 = (int32x4_t)vtrn1q_s16(v1041, v1042);
  v488 = (int32x4_t)vtrn2q_s16(v1041, v1042);
  v1175 = v474;
  v1176 = v476;
  v489 = (int64x2_t)vtrn1q_s32(v481, v483);
  v490 = (int64x2_t)vtrn2q_s32(v481, v483);
  v491 = (int64x2_t)vtrn1q_s32(v482, v484);
  v1177 = v478;
  v1178 = v480;
  v492 = (int64x2_t)vtrn2q_s32(v482, v484);
  v493 = (int64x2_t)vtrn1q_s32(v485, v487);
  v494 = (int64x2_t)vtrn2q_s32(v485, v487);
  v495 = (int64x2_t)vtrn1q_s32(v486, v488);
  v496 = (int64x2_t)vtrn2q_s32(v486, v488);
  v1179 = vzip1q_s64(v489, v493);
  v1180 = vzip1q_s64(v491, v495);
  v1181 = vzip1q_s64(v490, v494);
  v1182 = vzip1q_s64(v492, v496);
  v1183 = vzip2q_s64(v489, v493);
  v1184 = vzip2q_s64(v491, v495);
  v1185 = vzip2q_s64(v490, v494);
  v1186 = vzip2q_s64(v492, v496);
  dct_body_second_pass_rd((int16x8_t *)&v1155, &v995);
  v497 = (int32x4_t)vtrn1q_s16(v995, v996);
  v498 = (int32x4_t)vtrn2q_s16(v995, v996);
  v499 = (int32x4_t)vtrn1q_s16(v997, v998);
  v500 = (int32x4_t)vtrn2q_s16(v997, v998);
  v501 = (int32x4_t)vtrn1q_s16(v999, v1000);
  v502 = (int32x4_t)vtrn2q_s16(v999, v1000);
  v503 = (int32x4_t)vtrn1q_s16(v1001, v1002);
  v504 = (int32x4_t)vtrn2q_s16(v1001, v1002);
  v505 = (int64x2_t)vtrn1q_s32(v497, v499);
  v506 = (int64x2_t)vtrn2q_s32(v497, v499);
  v507 = (int64x2_t)vtrn1q_s32(v498, v500);
  v508 = (int64x2_t)vtrn1q_s32(v501, v503);
  v509 = (int64x2_t)vtrn1q_s32(v502, v504);
  v995 = (int16x8_t)vzip1q_s64(v505, v508);
  v996 = (int16x8_t)vzip1q_s64(v507, v509);
  v510 = (int64x2_t)vtrn2q_s32(v498, v500);
  v511 = (int64x2_t)vtrn2q_s32(v501, v503);
  v512 = (int64x2_t)vtrn2q_s32(v502, v504);
  v997 = (int16x8_t)vzip1q_s64(v506, v511);
  v998 = (int16x8_t)vzip1q_s64(v510, v512);
  v999 = (int16x8_t)vzip2q_s64(v505, v508);
  v1000 = (int16x8_t)vzip2q_s64(v507, v509);
  v1001 = (int16x8_t)vzip2q_s64(v506, v511);
  v1002 = (int16x8_t)vzip2q_s64(v510, v512);
  v513 = (int32x4_t)vtrn1q_s16(v1003, v1004);
  v514 = (int32x4_t)vtrn2q_s16(v1003, v1004);
  v515 = (int32x4_t)vtrn1q_s16(v1005, v1006);
  v516 = (int32x4_t)vtrn2q_s16(v1005, v1006);
  v517 = (int32x4_t)vtrn1q_s16(v1007, v1008);
  v518 = (int32x4_t)vtrn2q_s16(v1007, v1008);
  v519 = (int32x4_t)vtrn1q_s16(v1009, v1010);
  v520 = (int32x4_t)vtrn2q_s16(v1009, v1010);
  v521 = (int64x2_t)vtrn1q_s32(v513, v515);
  v522 = (int64x2_t)vtrn2q_s32(v513, v515);
  v523 = (int64x2_t)vtrn1q_s32(v514, v516);
  v524 = (int64x2_t)vtrn1q_s32(v517, v519);
  v525 = (int64x2_t)vtrn1q_s32(v518, v520);
  v1003 = (int16x8_t)vzip1q_s64(v521, v524);
  v1004 = (int16x8_t)vzip1q_s64(v523, v525);
  v526 = (int64x2_t)vtrn2q_s32(v514, v516);
  v527 = (int64x2_t)vtrn2q_s32(v517, v519);
  v528 = (int64x2_t)vtrn2q_s32(v518, v520);
  v1005 = (int16x8_t)vzip1q_s64(v522, v527);
  v1006 = (int16x8_t)vzip1q_s64(v526, v528);
  v1007 = (int16x8_t)vzip2q_s64(v521, v524);
  v1008 = (int16x8_t)vzip2q_s64(v523, v525);
  v1009 = (int16x8_t)vzip2q_s64(v522, v527);
  v1010 = (int16x8_t)vzip2q_s64(v526, v528);
  v529 = (int32x4_t)vtrn1q_s16(v1011, v1012);
  v530 = (int32x4_t)vtrn2q_s16(v1011, v1012);
  v531 = (int32x4_t)vtrn1q_s16(v1013, v1014);
  v532 = (int32x4_t)vtrn2q_s16(v1013, v1014);
  v533 = (int32x4_t)vtrn1q_s16(v1015, v1016);
  v534 = (int32x4_t)vtrn2q_s16(v1015, v1016);
  v535 = (int32x4_t)vtrn1q_s16(v1017, v1018);
  v536 = (int32x4_t)vtrn2q_s16(v1017, v1018);
  v537 = (int64x2_t)vtrn1q_s32(v529, v531);
  v538 = (int64x2_t)vtrn2q_s32(v529, v531);
  v539 = (int64x2_t)vtrn1q_s32(v530, v532);
  v540 = (int64x2_t)vtrn1q_s32(v533, v535);
  v541 = (int64x2_t)vtrn1q_s32(v534, v536);
  v542 = (int8x16_t)vzip1q_s64(v537, v540);
  v1011 = (int16x8_t)v542;
  v1012 = (int16x8_t)vzip1q_s64(v539, v541);
  v543 = (int64x2_t)vtrn2q_s32(v530, v532);
  v544 = (int64x2_t)vtrn2q_s32(v533, v535);
  v545 = (int64x2_t)vtrn2q_s32(v534, v536);
  v1013 = (int16x8_t)vzip1q_s64(v538, v544);
  v1014 = (int16x8_t)vzip1q_s64(v543, v545);
  v1015 = (int16x8_t)vzip2q_s64(v537, v540);
  v1016 = (int16x8_t)vzip2q_s64(v539, v541);
  v1017 = (int16x8_t)vzip2q_s64(v538, v544);
  v1018 = (int16x8_t)vzip2q_s64(v543, v545);
  v546 = v1018;
  v547 = (int32x4_t)vtrn1q_s16(v1019, v1020);
  v548 = (int32x4_t)vtrn2q_s16(v1019, v1020);
  v549 = (int32x4_t)vtrn1q_s16(v1021, v1022);
  v550 = (int32x4_t)vtrn2q_s16(v1021, v1022);
  v551 = (int32x4_t)vtrn1q_s16(v1023, v1024);
  v552 = (int32x4_t)vtrn2q_s16(v1023, v1024);
  v553 = (int32x4_t)vtrn1q_s16(v1025, v1026);
  v554 = (int32x4_t)vtrn2q_s16(v1025, v1026);
  v555 = (int64x2_t)vtrn1q_s32(v547, v549);
  v556 = (int64x2_t)vtrn2q_s32(v547, v549);
  v557 = (int64x2_t)vtrn1q_s32(v548, v550);
  v558 = (int64x2_t)vtrn2q_s32(v548, v550);
  v559 = (int64x2_t)vtrn1q_s32(v551, v553);
  v560 = (int64x2_t)vtrn1q_s32(v552, v554);
  v561 = (int8x16_t)vzip1q_s64(v555, v559);
  v562 = (int8x16_t)vzip1q_s64(v557, v560);
  v1019 = (int16x8_t)v561;
  v1020 = (int16x8_t)v562;
  v563 = (int64x2_t)vtrn2q_s32(v551, v553);
  v564 = (int64x2_t)vtrn2q_s32(v552, v554);
  v1021 = (int16x8_t)vzip1q_s64(v556, v563);
  v1022 = (int16x8_t)vzip1q_s64(v558, v564);
  v1023 = (int16x8_t)vzip2q_s64(v555, v559);
  v1024 = (int16x8_t)vzip2q_s64(v557, v560);
  v1025 = (int16x8_t)vzip2q_s64(v556, v563);
  v1026 = (int16x8_t)vzip2q_s64(v558, v564);
  v565 = v996;
  v566 = vmovl_high_s16(v995);
  a2[64] = vmovl_s16(*(int16x4_t *)v995.i8);
  a2[65] = v566;
  v567 = v1004;
  v568 = vmovl_high_s16(v1003);
  a2[66] = vmovl_s16(*(int16x4_t *)v1003.i8);
  a2[67] = v568;
  a2[68] = vmovl_s16(*(int16x4_t *)v542.i8);
  a2[69] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v542, v542, 8uLL));
  a2[70] = vmovl_s16(*(int16x4_t *)v561.i8);
  a2[71] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v561, v561, 8uLL));
  a2[72] = vmovl_s16(*(int16x4_t *)v565.i8);
  a2[73] = vmovl_high_s16(v565);
  a2[74] = vmovl_s16(*(int16x4_t *)v567.i8);
  a2[75] = vmovl_high_s16(v567);
  v569 = v1013;
  v570 = vmovl_high_s16(v1012);
  a2[76] = vmovl_s16(*(int16x4_t *)v1012.i8);
  a2[77] = v570;
  a2[78] = vmovl_s16(*(int16x4_t *)v562.i8);
  a2[79] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v562, v562, 8uLL));
  v571 = v998;
  v572 = vmovl_high_s16(v997);
  a2[80] = vmovl_s16(*(int16x4_t *)v997.i8);
  a2[81] = v572;
  v573 = v1006;
  v574 = vmovl_high_s16(v1005);
  a2[82] = vmovl_s16(*(int16x4_t *)v1005.i8);
  a2[83] = v574;
  a2[84] = vmovl_s16(*(int16x4_t *)v569.i8);
  a2[85] = vmovl_high_s16(v569);
  v575 = v1022;
  v576 = vmovl_high_s16(v1021);
  a2[86] = vmovl_s16(*(int16x4_t *)v1021.i8);
  a2[87] = v576;
  a2[88] = vmovl_s16(*(int16x4_t *)v571.i8);
  a2[89] = vmovl_high_s16(v571);
  a2[90] = vmovl_s16(*(int16x4_t *)v573.i8);
  a2[91] = vmovl_high_s16(v573);
  v577 = v1015;
  v578 = vmovl_high_s16(v1014);
  a2[92] = vmovl_s16(*(int16x4_t *)v1014.i8);
  a2[93] = v578;
  a2[94] = vmovl_s16(*(int16x4_t *)v575.i8);
  a2[95] = vmovl_high_s16(v575);
  v579 = v1000;
  v580 = vmovl_high_s16(v999);
  a2[96] = vmovl_s16(*(int16x4_t *)v999.i8);
  a2[97] = v580;
  v581 = v1008;
  v582 = vmovl_high_s16(v1007);
  a2[98] = vmovl_s16(*(int16x4_t *)v1007.i8);
  a2[99] = v582;
  a2[100] = vmovl_s16(*(int16x4_t *)v577.i8);
  a2[101] = vmovl_high_s16(v577);
  v583 = v1024;
  v584 = vmovl_high_s16(v1023);
  a2[102] = vmovl_s16(*(int16x4_t *)v1023.i8);
  a2[103] = v584;
  a2[104] = vmovl_s16(*(int16x4_t *)v579.i8);
  a2[105] = vmovl_high_s16(v579);
  a2[106] = vmovl_s16(*(int16x4_t *)v581.i8);
  a2[107] = vmovl_high_s16(v581);
  v585 = v1017;
  v586 = vmovl_high_s16(v1016);
  a2[108] = vmovl_s16(*(int16x4_t *)v1016.i8);
  a2[109] = v586;
  a2[110] = vmovl_s16(*(int16x4_t *)v583.i8);
  a2[111] = vmovl_high_s16(v583);
  v587 = v1002;
  v588 = vmovl_high_s16(v1001);
  a2[112] = vmovl_s16(*(int16x4_t *)v1001.i8);
  a2[113] = v588;
  v589 = v1010;
  v590 = vmovl_high_s16(v1009);
  a2[114] = vmovl_s16(*(int16x4_t *)v1009.i8);
  a2[115] = v590;
  a2[116] = vmovl_s16(*(int16x4_t *)v585.i8);
  a2[117] = vmovl_high_s16(v585);
  v591 = v1026;
  v592 = vmovl_high_s16(v1025);
  a2[118] = vmovl_s16(*(int16x4_t *)v1025.i8);
  a2[119] = v592;
  a2[120] = vmovl_s16(*(int16x4_t *)v587.i8);
  a2[121] = vmovl_high_s16(v587);
  a2[122] = vmovl_s16(*(int16x4_t *)v589.i8);
  a2[123] = vmovl_high_s16(v589);
  v593 = vmovl_s16(*(int16x4_t *)v546.i8);
  v594 = vmovl_high_s16(v546);
  v595 = (int32x4_t)vtrn1q_s16(v1139, v1140);
  v596 = (int32x4_t)vtrn2q_s16(v1139, v1140);
  v597 = (int32x4_t)vtrn1q_s16(v1141, v1142);
  v598 = (int32x4_t)vtrn2q_s16(v1141, v1142);
  v599 = (int32x4_t)vtrn1q_s16(v1143, v1144);
  v600 = (int32x4_t)vtrn2q_s16(v1143, v1144);
  v601 = v1145;
  v602 = v1146;
  v603 = (int32x4_t)vtrn1q_s16(v1145, v1146);
  a2[124] = v593;
  v604 = (int32x4_t)vtrn2q_s16(v601, v602);
  a2[125] = v594;
  v605 = (int64x2_t)vtrn1q_s32(v595, v597);
  v606 = (int64x2_t)vtrn2q_s32(v595, v597);
  a2[126] = vmovl_s16(*(int16x4_t *)v591.i8);
  v607 = (int64x2_t)vtrn1q_s32(v596, v598);
  a2[127] = vmovl_high_s16(v591);
  v608 = (int64x2_t)vtrn2q_s32(v596, v598);
  v609 = (int64x2_t)vtrn1q_s32(v599, v603);
  v610 = (int64x2_t)vtrn2q_s32(v599, v603);
  v611 = (int64x2_t)vtrn1q_s32(v600, v604);
  v612 = (int64x2_t)vtrn2q_s32(v600, v604);
  v613 = vzip1q_s64(v605, v609);
  v614 = vzip2q_s64(v605, v609);
  v615 = vzip1q_s64(v607, v611);
  v616 = vzip2q_s64(v607, v611);
  v617 = vzip1q_s64(v606, v610);
  v618 = vzip2q_s64(v606, v610);
  v619 = vzip1q_s64(v608, v612);
  v620 = vzip2q_s64(v608, v612);
  v1155 = v613;
  v1156 = v615;
  v1157 = v617;
  v1158 = v619;
  v621 = (int32x4_t)vtrn1q_s16(v1107, v1108);
  v622 = (int32x4_t)vtrn2q_s16(v1107, v1108);
  v623 = (int32x4_t)vtrn1q_s16(v1109, v1110);
  v624 = (int32x4_t)vtrn2q_s16(v1109, v1110);
  v625 = (int32x4_t)vtrn1q_s16(v1111, v1112);
  v626 = (int32x4_t)vtrn2q_s16(v1111, v1112);
  v627 = (int32x4_t)vtrn1q_s16(v1113, v1114);
  v628 = (int32x4_t)vtrn2q_s16(v1113, v1114);
  v1159 = v614;
  v1160 = v616;
  v629 = (int64x2_t)vtrn1q_s32(v621, v623);
  v630 = (int64x2_t)vtrn2q_s32(v621, v623);
  v631 = (int64x2_t)vtrn1q_s32(v622, v624);
  v1161 = v618;
  v1162 = v620;
  v632 = (int64x2_t)vtrn2q_s32(v622, v624);
  v633 = (int64x2_t)vtrn1q_s32(v625, v627);
  v634 = (int64x2_t)vtrn2q_s32(v625, v627);
  v635 = (int64x2_t)vtrn1q_s32(v626, v628);
  v636 = (int64x2_t)vtrn2q_s32(v626, v628);
  v637 = vzip1q_s64(v629, v633);
  v638 = vzip2q_s64(v629, v633);
  v639 = vzip1q_s64(v631, v635);
  v640 = vzip2q_s64(v631, v635);
  v641 = vzip1q_s64(v630, v634);
  v642 = vzip2q_s64(v630, v634);
  v643 = vzip1q_s64(v632, v636);
  v644 = vzip2q_s64(v632, v636);
  v1163 = v637;
  v1164 = v639;
  v1165 = v641;
  v1166 = v643;
  v645 = (int32x4_t)vtrn1q_s16(v1075, v1076);
  v646 = (int32x4_t)vtrn2q_s16(v1075, v1076);
  v647 = (int32x4_t)vtrn1q_s16(v1077, v1078);
  v648 = (int32x4_t)vtrn2q_s16(v1077, v1078);
  v649 = (int32x4_t)vtrn1q_s16(v1079, v1080);
  v650 = (int32x4_t)vtrn2q_s16(v1079, v1080);
  v651 = (int32x4_t)vtrn1q_s16(v1081, v1082);
  v652 = (int32x4_t)vtrn2q_s16(v1081, v1082);
  v1167 = v638;
  v1168 = v640;
  v653 = (int64x2_t)vtrn1q_s32(v645, v647);
  v654 = (int64x2_t)vtrn2q_s32(v645, v647);
  v655 = (int64x2_t)vtrn1q_s32(v646, v648);
  v1169 = v642;
  v1170 = v644;
  v656 = (int64x2_t)vtrn2q_s32(v646, v648);
  v657 = (int64x2_t)vtrn1q_s32(v649, v651);
  v658 = (int64x2_t)vtrn2q_s32(v649, v651);
  v659 = (int64x2_t)vtrn1q_s32(v650, v652);
  v660 = (int64x2_t)vtrn2q_s32(v650, v652);
  v661 = vzip1q_s64(v653, v657);
  v662 = vzip2q_s64(v653, v657);
  v663 = vzip1q_s64(v655, v659);
  v664 = vzip2q_s64(v655, v659);
  v665 = vzip1q_s64(v654, v658);
  v666 = vzip2q_s64(v654, v658);
  v667 = vzip1q_s64(v656, v660);
  v668 = vzip2q_s64(v656, v660);
  v1171 = v661;
  v1172 = v663;
  v1173 = v665;
  v1174 = v667;
  v669 = (int32x4_t)vtrn1q_s16(v1043, v1044);
  v670 = (int32x4_t)vtrn2q_s16(v1043, v1044);
  v671 = (int32x4_t)vtrn1q_s16(v1045, v1046);
  v672 = (int32x4_t)vtrn2q_s16(v1045, v1046);
  v673 = (int32x4_t)vtrn1q_s16(v1047, v1048);
  v674 = (int32x4_t)vtrn2q_s16(v1047, v1048);
  v675 = (int32x4_t)vtrn1q_s16(v1049, v1050);
  v676 = (int32x4_t)vtrn2q_s16(v1049, v1050);
  v1175 = v662;
  v1176 = v664;
  v677 = (int64x2_t)vtrn1q_s32(v669, v671);
  v678 = (int64x2_t)vtrn2q_s32(v669, v671);
  v679 = (int64x2_t)vtrn1q_s32(v670, v672);
  v1177 = v666;
  v1178 = v668;
  v680 = (int64x2_t)vtrn2q_s32(v670, v672);
  v681 = (int64x2_t)vtrn1q_s32(v673, v675);
  v682 = (int64x2_t)vtrn2q_s32(v673, v675);
  v683 = (int64x2_t)vtrn1q_s32(v674, v676);
  v684 = (int64x2_t)vtrn2q_s32(v674, v676);
  v1179 = vzip1q_s64(v677, v681);
  v1180 = vzip1q_s64(v679, v683);
  v1181 = vzip1q_s64(v678, v682);
  v1182 = vzip1q_s64(v680, v684);
  v1183 = vzip2q_s64(v677, v681);
  v1184 = vzip2q_s64(v679, v683);
  v1185 = vzip2q_s64(v678, v682);
  v1186 = vzip2q_s64(v680, v684);
  dct_body_second_pass_rd((int16x8_t *)&v1155, &v995);
  v685 = (int32x4_t)vtrn1q_s16(v995, v996);
  v686 = (int32x4_t)vtrn2q_s16(v995, v996);
  v687 = (int32x4_t)vtrn1q_s16(v997, v998);
  v688 = (int32x4_t)vtrn2q_s16(v997, v998);
  v689 = (int32x4_t)vtrn1q_s16(v999, v1000);
  v690 = (int32x4_t)vtrn2q_s16(v999, v1000);
  v691 = (int32x4_t)vtrn1q_s16(v1001, v1002);
  v692 = (int32x4_t)vtrn2q_s16(v1001, v1002);
  v693 = (int64x2_t)vtrn1q_s32(v685, v687);
  v694 = (int64x2_t)vtrn2q_s32(v685, v687);
  v695 = (int64x2_t)vtrn1q_s32(v686, v688);
  v696 = (int64x2_t)vtrn1q_s32(v689, v691);
  v697 = (int64x2_t)vtrn1q_s32(v690, v692);
  v995 = (int16x8_t)vzip1q_s64(v693, v696);
  v996 = (int16x8_t)vzip1q_s64(v695, v697);
  v698 = (int64x2_t)vtrn2q_s32(v686, v688);
  v699 = (int64x2_t)vtrn2q_s32(v689, v691);
  v700 = (int64x2_t)vtrn2q_s32(v690, v692);
  v997 = (int16x8_t)vzip1q_s64(v694, v699);
  v998 = (int16x8_t)vzip1q_s64(v698, v700);
  v999 = (int16x8_t)vzip2q_s64(v693, v696);
  v1000 = (int16x8_t)vzip2q_s64(v695, v697);
  v1001 = (int16x8_t)vzip2q_s64(v694, v699);
  v1002 = (int16x8_t)vzip2q_s64(v698, v700);
  v701 = (int32x4_t)vtrn1q_s16(v1003, v1004);
  v702 = (int32x4_t)vtrn2q_s16(v1003, v1004);
  v703 = (int32x4_t)vtrn1q_s16(v1005, v1006);
  v704 = (int32x4_t)vtrn2q_s16(v1005, v1006);
  v705 = (int32x4_t)vtrn1q_s16(v1007, v1008);
  v706 = (int32x4_t)vtrn2q_s16(v1007, v1008);
  v707 = (int32x4_t)vtrn1q_s16(v1009, v1010);
  v708 = (int32x4_t)vtrn2q_s16(v1009, v1010);
  v709 = (int64x2_t)vtrn1q_s32(v701, v703);
  v710 = (int64x2_t)vtrn2q_s32(v701, v703);
  v711 = (int64x2_t)vtrn1q_s32(v702, v704);
  v712 = (int64x2_t)vtrn1q_s32(v705, v707);
  v713 = (int64x2_t)vtrn1q_s32(v706, v708);
  v1003 = (int16x8_t)vzip1q_s64(v709, v712);
  v1004 = (int16x8_t)vzip1q_s64(v711, v713);
  v714 = (int64x2_t)vtrn2q_s32(v702, v704);
  v715 = (int64x2_t)vtrn2q_s32(v705, v707);
  v716 = (int64x2_t)vtrn2q_s32(v706, v708);
  v1005 = (int16x8_t)vzip1q_s64(v710, v715);
  v1006 = (int16x8_t)vzip1q_s64(v714, v716);
  v1007 = (int16x8_t)vzip2q_s64(v709, v712);
  v1008 = (int16x8_t)vzip2q_s64(v711, v713);
  v1009 = (int16x8_t)vzip2q_s64(v710, v715);
  v1010 = (int16x8_t)vzip2q_s64(v714, v716);
  v717 = (int32x4_t)vtrn1q_s16(v1011, v1012);
  v718 = (int32x4_t)vtrn2q_s16(v1011, v1012);
  v719 = (int32x4_t)vtrn1q_s16(v1013, v1014);
  v720 = (int32x4_t)vtrn2q_s16(v1013, v1014);
  v721 = (int32x4_t)vtrn1q_s16(v1015, v1016);
  v722 = (int32x4_t)vtrn2q_s16(v1015, v1016);
  v723 = (int32x4_t)vtrn1q_s16(v1017, v1018);
  v724 = (int32x4_t)vtrn2q_s16(v1017, v1018);
  v725 = (int64x2_t)vtrn1q_s32(v717, v719);
  v726 = (int64x2_t)vtrn2q_s32(v717, v719);
  v727 = (int64x2_t)vtrn1q_s32(v718, v720);
  v728 = (int64x2_t)vtrn1q_s32(v721, v723);
  v729 = (int64x2_t)vtrn1q_s32(v722, v724);
  v730 = (int8x16_t)vzip1q_s64(v725, v728);
  v1011 = (int16x8_t)v730;
  v1012 = (int16x8_t)vzip1q_s64(v727, v729);
  v731 = (int64x2_t)vtrn2q_s32(v718, v720);
  v732 = (int64x2_t)vtrn2q_s32(v721, v723);
  v733 = (int64x2_t)vtrn2q_s32(v722, v724);
  v1013 = (int16x8_t)vzip1q_s64(v726, v732);
  v1014 = (int16x8_t)vzip1q_s64(v731, v733);
  v1015 = (int16x8_t)vzip2q_s64(v725, v728);
  v1016 = (int16x8_t)vzip2q_s64(v727, v729);
  v1017 = (int16x8_t)vzip2q_s64(v726, v732);
  v1018 = (int16x8_t)vzip2q_s64(v731, v733);
  v734 = v1018;
  v735 = (int32x4_t)vtrn1q_s16(v1019, v1020);
  v736 = (int32x4_t)vtrn2q_s16(v1019, v1020);
  v737 = (int32x4_t)vtrn1q_s16(v1021, v1022);
  v738 = (int32x4_t)vtrn2q_s16(v1021, v1022);
  v739 = (int32x4_t)vtrn1q_s16(v1023, v1024);
  v740 = (int32x4_t)vtrn2q_s16(v1023, v1024);
  v741 = (int32x4_t)vtrn1q_s16(v1025, v1026);
  v742 = (int32x4_t)vtrn2q_s16(v1025, v1026);
  v743 = (int64x2_t)vtrn1q_s32(v735, v737);
  v744 = (int64x2_t)vtrn2q_s32(v735, v737);
  v745 = (int64x2_t)vtrn1q_s32(v736, v738);
  v746 = (int64x2_t)vtrn2q_s32(v736, v738);
  v747 = (int64x2_t)vtrn1q_s32(v739, v741);
  v748 = (int64x2_t)vtrn1q_s32(v740, v742);
  v749 = (int8x16_t)vzip1q_s64(v743, v747);
  v750 = (int8x16_t)vzip1q_s64(v745, v748);
  v1019 = (int16x8_t)v749;
  v1020 = (int16x8_t)v750;
  v751 = (int64x2_t)vtrn2q_s32(v739, v741);
  v752 = (int64x2_t)vtrn2q_s32(v740, v742);
  v1021 = (int16x8_t)vzip1q_s64(v744, v751);
  v1022 = (int16x8_t)vzip1q_s64(v746, v752);
  v1023 = (int16x8_t)vzip2q_s64(v743, v747);
  v1024 = (int16x8_t)vzip2q_s64(v745, v748);
  v1025 = (int16x8_t)vzip2q_s64(v744, v751);
  v1026 = (int16x8_t)vzip2q_s64(v746, v752);
  v753 = v996;
  v754 = vmovl_high_s16(v995);
  a2[128] = vmovl_s16(*(int16x4_t *)v995.i8);
  a2[129] = v754;
  v755 = v1004;
  v756 = vmovl_high_s16(v1003);
  a2[130] = vmovl_s16(*(int16x4_t *)v1003.i8);
  a2[131] = v756;
  a2[132] = vmovl_s16(*(int16x4_t *)v730.i8);
  a2[133] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v730, v730, 8uLL));
  a2[134] = vmovl_s16(*(int16x4_t *)v749.i8);
  a2[135] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v749, v749, 8uLL));
  a2[136] = vmovl_s16(*(int16x4_t *)v753.i8);
  a2[137] = vmovl_high_s16(v753);
  a2[138] = vmovl_s16(*(int16x4_t *)v755.i8);
  a2[139] = vmovl_high_s16(v755);
  v757 = v1013;
  v758 = vmovl_high_s16(v1012);
  a2[140] = vmovl_s16(*(int16x4_t *)v1012.i8);
  a2[141] = v758;
  a2[142] = vmovl_s16(*(int16x4_t *)v750.i8);
  a2[143] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v750, v750, 8uLL));
  v759 = v998;
  v760 = vmovl_high_s16(v997);
  a2[144] = vmovl_s16(*(int16x4_t *)v997.i8);
  a2[145] = v760;
  v761 = v1006;
  v762 = vmovl_high_s16(v1005);
  a2[146] = vmovl_s16(*(int16x4_t *)v1005.i8);
  a2[147] = v762;
  a2[148] = vmovl_s16(*(int16x4_t *)v757.i8);
  a2[149] = vmovl_high_s16(v757);
  v763 = v1022;
  v764 = vmovl_high_s16(v1021);
  a2[150] = vmovl_s16(*(int16x4_t *)v1021.i8);
  a2[151] = v764;
  a2[152] = vmovl_s16(*(int16x4_t *)v759.i8);
  a2[153] = vmovl_high_s16(v759);
  a2[154] = vmovl_s16(*(int16x4_t *)v761.i8);
  a2[155] = vmovl_high_s16(v761);
  v765 = v1015;
  v766 = vmovl_high_s16(v1014);
  a2[156] = vmovl_s16(*(int16x4_t *)v1014.i8);
  a2[157] = v766;
  a2[158] = vmovl_s16(*(int16x4_t *)v763.i8);
  a2[159] = vmovl_high_s16(v763);
  v767 = v1000;
  v768 = vmovl_high_s16(v999);
  a2[160] = vmovl_s16(*(int16x4_t *)v999.i8);
  a2[161] = v768;
  v769 = v1008;
  v770 = vmovl_high_s16(v1007);
  a2[162] = vmovl_s16(*(int16x4_t *)v1007.i8);
  a2[163] = v770;
  a2[164] = vmovl_s16(*(int16x4_t *)v765.i8);
  a2[165] = vmovl_high_s16(v765);
  v771 = v1024;
  v772 = vmovl_high_s16(v1023);
  a2[166] = vmovl_s16(*(int16x4_t *)v1023.i8);
  a2[167] = v772;
  a2[168] = vmovl_s16(*(int16x4_t *)v767.i8);
  a2[169] = vmovl_high_s16(v767);
  a2[170] = vmovl_s16(*(int16x4_t *)v769.i8);
  a2[171] = vmovl_high_s16(v769);
  v773 = v1017;
  v774 = vmovl_high_s16(v1016);
  a2[172] = vmovl_s16(*(int16x4_t *)v1016.i8);
  a2[173] = v774;
  a2[174] = vmovl_s16(*(int16x4_t *)v771.i8);
  a2[175] = vmovl_high_s16(v771);
  v775 = v1002;
  v776 = vmovl_high_s16(v1001);
  a2[176] = vmovl_s16(*(int16x4_t *)v1001.i8);
  a2[177] = v776;
  v777 = v1010;
  v778 = vmovl_high_s16(v1009);
  a2[178] = vmovl_s16(*(int16x4_t *)v1009.i8);
  a2[179] = v778;
  a2[180] = vmovl_s16(*(int16x4_t *)v773.i8);
  a2[181] = vmovl_high_s16(v773);
  v779 = v1026;
  v780 = vmovl_high_s16(v1025);
  a2[182] = vmovl_s16(*(int16x4_t *)v1025.i8);
  a2[183] = v780;
  a2[184] = vmovl_s16(*(int16x4_t *)v775.i8);
  a2[185] = vmovl_high_s16(v775);
  a2[186] = vmovl_s16(*(int16x4_t *)v777.i8);
  a2[187] = vmovl_high_s16(v777);
  v781 = vmovl_s16(*(int16x4_t *)v734.i8);
  v782 = vmovl_high_s16(v734);
  v783 = (int32x4_t)vtrn1q_s16(v1147, v1148);
  v784 = (int32x4_t)vtrn2q_s16(v1147, v1148);
  v785 = (int32x4_t)vtrn1q_s16(v1149, v1150);
  v786 = (int32x4_t)vtrn2q_s16(v1149, v1150);
  v787 = (int32x4_t)vtrn1q_s16(v1151, v1152);
  v788 = (int32x4_t)vtrn2q_s16(v1151, v1152);
  v789 = v1153;
  v790 = v1154;
  v791 = (int32x4_t)vtrn1q_s16(v1153, v1154);
  a2[188] = v781;
  v792 = (int32x4_t)vtrn2q_s16(v789, v790);
  a2[189] = v782;
  v793 = (int64x2_t)vtrn1q_s32(v783, v785);
  v794 = (int64x2_t)vtrn2q_s32(v783, v785);
  a2[190] = vmovl_s16(*(int16x4_t *)v779.i8);
  v795 = (int64x2_t)vtrn1q_s32(v784, v786);
  a2[191] = vmovl_high_s16(v779);
  v796 = (int64x2_t)vtrn2q_s32(v784, v786);
  v797 = (int64x2_t)vtrn1q_s32(v787, v791);
  v798 = (int64x2_t)vtrn2q_s32(v787, v791);
  v799 = (int64x2_t)vtrn1q_s32(v788, v792);
  v800 = (int64x2_t)vtrn2q_s32(v788, v792);
  v801 = vzip1q_s64(v793, v797);
  v802 = vzip2q_s64(v793, v797);
  v803 = vzip1q_s64(v795, v799);
  v804 = vzip2q_s64(v795, v799);
  v805 = vzip1q_s64(v794, v798);
  v806 = vzip2q_s64(v794, v798);
  v807 = vzip1q_s64(v796, v800);
  v808 = vzip2q_s64(v796, v800);
  v1155 = v801;
  v1156 = v803;
  v1157 = v805;
  v1158 = v807;
  v809 = (int32x4_t)vtrn1q_s16(v1115, v1116);
  v810 = (int32x4_t)vtrn2q_s16(v1115, v1116);
  v811 = (int32x4_t)vtrn1q_s16(v1117, v1118);
  v812 = (int32x4_t)vtrn2q_s16(v1117, v1118);
  v813 = (int32x4_t)vtrn1q_s16(v1119, v1120);
  v814 = (int32x4_t)vtrn2q_s16(v1119, v1120);
  v815 = (int32x4_t)vtrn1q_s16(v1121, v1122);
  v816 = (int32x4_t)vtrn2q_s16(v1121, v1122);
  v1159 = v802;
  v1160 = v804;
  v817 = (int64x2_t)vtrn1q_s32(v809, v811);
  v818 = (int64x2_t)vtrn2q_s32(v809, v811);
  v819 = (int64x2_t)vtrn1q_s32(v810, v812);
  v1161 = v806;
  v1162 = v808;
  v820 = (int64x2_t)vtrn2q_s32(v810, v812);
  v821 = (int64x2_t)vtrn1q_s32(v813, v815);
  v822 = (int64x2_t)vtrn2q_s32(v813, v815);
  v823 = (int64x2_t)vtrn1q_s32(v814, v816);
  v824 = (int64x2_t)vtrn2q_s32(v814, v816);
  v825 = vzip1q_s64(v817, v821);
  v826 = vzip2q_s64(v817, v821);
  v827 = vzip1q_s64(v819, v823);
  v828 = vzip2q_s64(v819, v823);
  v829 = vzip1q_s64(v818, v822);
  v830 = vzip2q_s64(v818, v822);
  v831 = vzip1q_s64(v820, v824);
  v832 = vzip2q_s64(v820, v824);
  v1163 = v825;
  v1164 = v827;
  v1165 = v829;
  v1166 = v831;
  v833 = (int32x4_t)vtrn1q_s16(v1083, v1084);
  v834 = (int32x4_t)vtrn2q_s16(v1083, v1084);
  v835 = (int32x4_t)vtrn1q_s16(v1085, v1086);
  v836 = (int32x4_t)vtrn2q_s16(v1085, v1086);
  v837 = (int32x4_t)vtrn1q_s16(v1087, v1088);
  v838 = (int32x4_t)vtrn2q_s16(v1087, v1088);
  v839 = (int32x4_t)vtrn1q_s16(v1089, v1090);
  v840 = (int32x4_t)vtrn2q_s16(v1089, v1090);
  v1167 = v826;
  v1168 = v828;
  v841 = (int64x2_t)vtrn1q_s32(v833, v835);
  v842 = (int64x2_t)vtrn2q_s32(v833, v835);
  v843 = (int64x2_t)vtrn1q_s32(v834, v836);
  v1169 = v830;
  v1170 = v832;
  v844 = (int64x2_t)vtrn2q_s32(v834, v836);
  v845 = (int64x2_t)vtrn1q_s32(v837, v839);
  v846 = (int64x2_t)vtrn2q_s32(v837, v839);
  v847 = (int64x2_t)vtrn1q_s32(v838, v840);
  v848 = (int64x2_t)vtrn2q_s32(v838, v840);
  v849 = vzip1q_s64(v841, v845);
  v850 = vzip2q_s64(v841, v845);
  v851 = vzip1q_s64(v843, v847);
  v852 = vzip2q_s64(v843, v847);
  v853 = vzip1q_s64(v842, v846);
  v854 = vzip2q_s64(v842, v846);
  v855 = vzip1q_s64(v844, v848);
  v856 = vzip2q_s64(v844, v848);
  v1171 = v849;
  v1172 = v851;
  v1173 = v853;
  v1174 = v855;
  v857 = (int32x4_t)vtrn1q_s16(v1051, v1052);
  v858 = (int32x4_t)vtrn2q_s16(v1051, v1052);
  v859 = (int32x4_t)vtrn1q_s16(v1053, v1054);
  v860 = (int32x4_t)vtrn2q_s16(v1053, v1054);
  v861 = (int32x4_t)vtrn1q_s16(v1055, v1056);
  v862 = (int32x4_t)vtrn2q_s16(v1055, v1056);
  v863 = (int32x4_t)vtrn1q_s16(v1057, v1058);
  v864 = (int32x4_t)vtrn2q_s16(v1057, v1058);
  v1175 = v850;
  v1176 = v852;
  v865 = (int64x2_t)vtrn1q_s32(v857, v859);
  v866 = (int64x2_t)vtrn2q_s32(v857, v859);
  v867 = (int64x2_t)vtrn1q_s32(v858, v860);
  v1177 = v854;
  v1178 = v856;
  v868 = (int64x2_t)vtrn2q_s32(v858, v860);
  v869 = (int64x2_t)vtrn1q_s32(v861, v863);
  v870 = (int64x2_t)vtrn2q_s32(v861, v863);
  v871 = (int64x2_t)vtrn1q_s32(v862, v864);
  v872 = (int64x2_t)vtrn2q_s32(v862, v864);
  v1179 = vzip1q_s64(v865, v869);
  v1180 = vzip1q_s64(v867, v871);
  v1181 = vzip1q_s64(v866, v870);
  v1182 = vzip1q_s64(v868, v872);
  v1183 = vzip2q_s64(v865, v869);
  v1184 = vzip2q_s64(v867, v871);
  v1185 = vzip2q_s64(v866, v870);
  v1186 = vzip2q_s64(v868, v872);
  dct_body_second_pass_rd((int16x8_t *)&v1155, &v995);
  v873 = (int32x4_t)vtrn1q_s16(v995, v996);
  v874 = (int32x4_t)vtrn2q_s16(v995, v996);
  v875 = (int32x4_t)vtrn1q_s16(v997, v998);
  v876 = (int32x4_t)vtrn2q_s16(v997, v998);
  v877 = (int32x4_t)vtrn1q_s16(v999, v1000);
  v878 = (int32x4_t)vtrn2q_s16(v999, v1000);
  v879 = (int32x4_t)vtrn1q_s16(v1001, v1002);
  v880 = (int32x4_t)vtrn2q_s16(v1001, v1002);
  v881 = (int64x2_t)vtrn1q_s32(v873, v875);
  v882 = (int64x2_t)vtrn2q_s32(v873, v875);
  v883 = (int64x2_t)vtrn1q_s32(v874, v876);
  v884 = (int64x2_t)vtrn1q_s32(v877, v879);
  v885 = (int64x2_t)vtrn1q_s32(v878, v880);
  v995 = (int16x8_t)vzip1q_s64(v881, v884);
  v996 = (int16x8_t)vzip1q_s64(v883, v885);
  v886 = (int64x2_t)vtrn2q_s32(v874, v876);
  v887 = (int64x2_t)vtrn2q_s32(v877, v879);
  v888 = (int64x2_t)vtrn2q_s32(v878, v880);
  v997 = (int16x8_t)vzip1q_s64(v882, v887);
  v998 = (int16x8_t)vzip1q_s64(v886, v888);
  v999 = (int16x8_t)vzip2q_s64(v881, v884);
  v1000 = (int16x8_t)vzip2q_s64(v883, v885);
  v1001 = (int16x8_t)vzip2q_s64(v882, v887);
  v1002 = (int16x8_t)vzip2q_s64(v886, v888);
  v889 = (int32x4_t)vtrn1q_s16(v1003, v1004);
  v890 = (int32x4_t)vtrn2q_s16(v1003, v1004);
  v891 = (int32x4_t)vtrn1q_s16(v1005, v1006);
  v892 = (int32x4_t)vtrn2q_s16(v1005, v1006);
  v893 = (int32x4_t)vtrn1q_s16(v1007, v1008);
  v894 = (int32x4_t)vtrn2q_s16(v1007, v1008);
  v895 = (int32x4_t)vtrn1q_s16(v1009, v1010);
  v896 = (int32x4_t)vtrn2q_s16(v1009, v1010);
  v897 = (int64x2_t)vtrn1q_s32(v889, v891);
  v898 = (int64x2_t)vtrn2q_s32(v889, v891);
  v899 = (int64x2_t)vtrn1q_s32(v890, v892);
  v900 = (int64x2_t)vtrn1q_s32(v893, v895);
  v901 = (int64x2_t)vtrn1q_s32(v894, v896);
  v1003 = (int16x8_t)vzip1q_s64(v897, v900);
  v1004 = (int16x8_t)vzip1q_s64(v899, v901);
  v902 = (int64x2_t)vtrn2q_s32(v890, v892);
  v903 = (int64x2_t)vtrn2q_s32(v893, v895);
  v904 = (int64x2_t)vtrn2q_s32(v894, v896);
  v1005 = (int16x8_t)vzip1q_s64(v898, v903);
  v1006 = (int16x8_t)vzip1q_s64(v902, v904);
  v1007 = (int16x8_t)vzip2q_s64(v897, v900);
  v1008 = (int16x8_t)vzip2q_s64(v899, v901);
  v1009 = (int16x8_t)vzip2q_s64(v898, v903);
  v1010 = (int16x8_t)vzip2q_s64(v902, v904);
  v905 = (int32x4_t)vtrn1q_s16(v1011, v1012);
  v906 = (int32x4_t)vtrn2q_s16(v1011, v1012);
  v907 = (int32x4_t)vtrn1q_s16(v1013, v1014);
  v908 = (int32x4_t)vtrn2q_s16(v1013, v1014);
  v909 = (int32x4_t)vtrn1q_s16(v1015, v1016);
  v910 = (int32x4_t)vtrn2q_s16(v1015, v1016);
  v911 = (int32x4_t)vtrn1q_s16(v1017, v1018);
  v912 = (int32x4_t)vtrn2q_s16(v1017, v1018);
  v913 = (int64x2_t)vtrn1q_s32(v905, v907);
  v914 = (int64x2_t)vtrn2q_s32(v905, v907);
  v915 = (int64x2_t)vtrn1q_s32(v906, v908);
  v916 = (int64x2_t)vtrn2q_s32(v909, v911);
  v917 = (int64x2_t)vtrn1q_s32(v910, v912);
  v1012 = (int16x8_t)vzip1q_s64(v915, v917);
  v1013 = (int16x8_t)vzip1q_s64(v914, v916);
  v918 = (int64x2_t)vtrn2q_s32(v906, v908);
  v919 = (int64x2_t)vtrn1q_s32(v909, v911);
  v920 = (int64x2_t)vtrn2q_s32(v910, v912);
  v1014 = (int16x8_t)vzip1q_s64(v918, v920);
  v1015 = (int16x8_t)vzip2q_s64(v913, v919);
  v1016 = (int16x8_t)vzip2q_s64(v915, v917);
  v1017 = (int16x8_t)vzip2q_s64(v914, v916);
  v1018 = (int16x8_t)vzip2q_s64(v918, v920);
  v921 = v1018;
  v922 = (int32x4_t)vtrn1q_s16(v1019, v1020);
  v923 = (int32x4_t)vtrn2q_s16(v1019, v1020);
  v924 = (int32x4_t)vtrn1q_s16(v1021, v1022);
  v925 = (int32x4_t)vtrn2q_s16(v1021, v1022);
  v926 = (int32x4_t)vtrn1q_s16(v1023, v1024);
  v927 = (int32x4_t)vtrn2q_s16(v1023, v1024);
  v928 = (int32x4_t)vtrn1q_s16(v1025, v1026);
  v929 = (int32x4_t)vtrn2q_s16(v1025, v1026);
  v930 = (int64x2_t)vtrn1q_s32(v922, v924);
  v931 = (int64x2_t)vtrn2q_s32(v922, v924);
  v932 = (int64x2_t)vtrn1q_s32(v923, v925);
  v933 = (int64x2_t)vtrn2q_s32(v923, v925);
  v934 = (int64x2_t)vtrn2q_s32(v926, v928);
  v935 = (int64x2_t)vtrn2q_s32(v927, v929);
  v1021 = (int16x8_t)vzip1q_s64(v931, v934);
  v1022 = (int16x8_t)vzip1q_s64(v933, v935);
  v936 = (int64x2_t)vtrn1q_s32(v926, v928);
  v937 = (int64x2_t)vtrn1q_s32(v927, v929);
  v1023 = (int16x8_t)vzip2q_s64(v930, v936);
  v1024 = (int16x8_t)vzip2q_s64(v932, v937);
  v1025 = (int16x8_t)vzip2q_s64(v931, v934);
  v1026 = (int16x8_t)vzip2q_s64(v933, v935);
  v938 = (int8x16_t)vzip1q_s64(v913, v919);
  v939 = (int8x16_t)vzip1q_s64(v930, v936);
  v940 = (int8x16_t)vzip1q_s64(v932, v937);
  v941 = v995;
  v942 = v996;
  a2[192] = vmovl_s16(*(int16x4_t *)v995.i8);
  a2[193] = vmovl_high_s16(v941);
  v943 = v1004;
  v944 = vmovl_high_s16(v1003);
  a2[194] = vmovl_s16(*(int16x4_t *)v1003.i8);
  a2[195] = v944;
  a2[196] = vmovl_s16(*(int16x4_t *)v938.i8);
  a2[197] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v938, v938, 8uLL));
  a2[198] = vmovl_s16(*(int16x4_t *)v939.i8);
  a2[199] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v939, v939, 8uLL));
  a2[200] = vmovl_s16(*(int16x4_t *)v942.i8);
  a2[201] = vmovl_high_s16(v942);
  a2[202] = vmovl_s16(*(int16x4_t *)v943.i8);
  a2[203] = vmovl_high_s16(v943);
  v945 = v1013;
  v946 = vmovl_high_s16(v1012);
  a2[204] = vmovl_s16(*(int16x4_t *)v1012.i8);
  a2[205] = v946;
  a2[206] = vmovl_s16(*(int16x4_t *)v940.i8);
  a2[207] = vmovl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v940, v940, 8uLL));
  v947 = v998;
  v948 = vmovl_high_s16(v997);
  a2[208] = vmovl_s16(*(int16x4_t *)v997.i8);
  a2[209] = v948;
  v949 = v1006;
  v950 = vmovl_high_s16(v1005);
  a2[210] = vmovl_s16(*(int16x4_t *)v1005.i8);
  a2[211] = v950;
  a2[212] = vmovl_s16(*(int16x4_t *)v945.i8);
  a2[213] = vmovl_high_s16(v945);
  v951 = v1022;
  v952 = vmovl_high_s16(v1021);
  a2[214] = vmovl_s16(*(int16x4_t *)v1021.i8);
  a2[215] = v952;
  a2[216] = vmovl_s16(*(int16x4_t *)v947.i8);
  a2[217] = vmovl_high_s16(v947);
  a2[218] = vmovl_s16(*(int16x4_t *)v949.i8);
  a2[219] = vmovl_high_s16(v949);
  v953 = v1015;
  v954 = vmovl_high_s16(v1014);
  a2[220] = vmovl_s16(*(int16x4_t *)v1014.i8);
  a2[221] = v954;
  a2[222] = vmovl_s16(*(int16x4_t *)v951.i8);
  a2[223] = vmovl_high_s16(v951);
  v955 = v1000;
  v956 = vmovl_high_s16(v999);
  a2[224] = vmovl_s16(*(int16x4_t *)v999.i8);
  a2[225] = v956;
  v957 = v1008;
  v958 = vmovl_high_s16(v1007);
  a2[226] = vmovl_s16(*(int16x4_t *)v1007.i8);
  a2[227] = v958;
  a2[228] = vmovl_s16(*(int16x4_t *)v953.i8);
  a2[229] = vmovl_high_s16(v953);
  v959 = v1024;
  v960 = vmovl_high_s16(v1023);
  a2[230] = vmovl_s16(*(int16x4_t *)v1023.i8);
  a2[231] = v960;
  a2[232] = vmovl_s16(*(int16x4_t *)v955.i8);
  a2[233] = vmovl_high_s16(v955);
  a2[234] = vmovl_s16(*(int16x4_t *)v957.i8);
  a2[235] = vmovl_high_s16(v957);
  v961 = v1017;
  v962 = vmovl_high_s16(v1016);
  a2[236] = vmovl_s16(*(int16x4_t *)v1016.i8);
  a2[237] = v962;
  a2[238] = vmovl_s16(*(int16x4_t *)v959.i8);
  a2[239] = vmovl_high_s16(v959);
  v963 = v1002;
  v964 = vmovl_high_s16(v1001);
  a2[240] = vmovl_s16(*(int16x4_t *)v1001.i8);
  a2[241] = v964;
  v965 = v1010;
  v966 = vmovl_high_s16(v1009);
  a2[242] = vmovl_s16(*(int16x4_t *)v1009.i8);
  a2[243] = v966;
  a2[244] = vmovl_s16(*(int16x4_t *)v961.i8);
  a2[245] = vmovl_high_s16(v961);
  v967 = v1026;
  v968 = vmovl_high_s16(v1025);
  a2[246] = vmovl_s16(*(int16x4_t *)v1025.i8);
  a2[247] = v968;
  a2[248] = vmovl_s16(*(int16x4_t *)v963.i8);
  a2[249] = vmovl_high_s16(v963);
  a2[250] = vmovl_s16(*(int16x4_t *)v965.i8);
  a2[251] = vmovl_high_s16(v965);
  a2[252] = vmovl_s16(*(int16x4_t *)v921.i8);
  a2[253] = vmovl_high_s16(v921);
  a2[254] = vmovl_s16(*(int16x4_t *)v967.i8);
  a2[255] = vmovl_high_s16(v967);
}

